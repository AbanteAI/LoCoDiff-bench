"""
Utility functions used across the benchmark pipeline scripts.

This module contains common functionality used by multiple benchmark pipeline scripts,
helping to avoid code duplication and ensure consistent behavior.
"""

import argparse
import os
from datetime import datetime, timezone


def log_script_run(benchmark_run_dir: str, script_name: str, args: argparse.Namespace):
    """
    Logs script execution history to a log file in the benchmark run directory.

    Args:
        benchmark_run_dir: Path to the benchmark run directory
        script_name: Name of the script being executed
        args: Parsed command-line arguments

    This function:
    1. Creates benchmark_history.log if it doesn't exist
    2. Appends a new entry with timestamp, script name, and arguments
    """
    log_file_path = os.path.join(benchmark_run_dir, "benchmark_history.log")

    # Create the file with header if it doesn't exist
    if not os.path.exists(log_file_path):
        with open(log_file_path, "w", encoding="utf-8") as f:
            f.write("# Benchmark Pipeline Execution History\n")
            f.write(
                "# DO NOT EDIT THIS FILE MANUALLY - It is automatically updated by the benchmark scripts\n"
            )
            f.write("# Format: [timestamp] [script] [arguments]\n\n")

    # Format the timestamp and arguments
    timestamp = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M:%S UTC")

    # Convert args to a dictionary and format as a string
    args_dict = vars(args)
    args_str = " ".join(
        [
            f"--{k}={v}"
            if not isinstance(v, list)
            else f"--{k}={','.join(map(str, v))}"
            for k, v in args_dict.items()
            if v is not None
        ]
    )

    # Append the new log entry
    with open(log_file_path, "a", encoding="utf-8") as f:
        f.write(f"[{timestamp}] [{script_name}] {args_str}\n")
