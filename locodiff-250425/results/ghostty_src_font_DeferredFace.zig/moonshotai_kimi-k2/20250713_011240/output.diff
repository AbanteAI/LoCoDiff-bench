
index 6fc93c257..24edcea11 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmp_cb_4i3f_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmptmz5oc9y_actual.txt	
@@ -1,9 +1,3 @@
-//! A deferred face represents a single font face with all the information
-//! necessary to load it, but defers loading the full face until it is
-//! needed.
-//!
-//! This allows us to have many fallback fonts to look for glyphs, but
-//! only load them if they're really needed.
 const DeferredFace = @This();
 
 const std = @import("std");
@@ -330,7 +324,7 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
             var face = Face.initNamed(
                 wc.alloc,
                 wc.font_str,
-                .{ .points = 12 },
+                .{ .size = .{ .points = 12 } },
                 wc.presentation,
             ) catch |err| {
                 log.warn("failed to init face for codepoint check " ++
@@ -392,7 +386,7 @@ pub const Wasm = struct {
     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
@@ -430,7 +424,7 @@ test "fontconfig" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext) return error.SkipZigTest;
+    if (options.backend != .coretext and options.backend != .coretext_freetype) return error.SkipZigTest;
 
     const discovery = @import("main.zig").discovery;
     const testing = std.testing;
