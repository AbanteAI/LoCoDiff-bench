
index 6fc93c25..fb145600 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmputfg_e69_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmpdcvx0a7j_actual.txt	
@@ -146,6 +146,14 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
                 // this to be returned efficiently." In this case, we need
                 // to allocate. But we can't return an allocated string because
                 // we don't have an allocator. Let's use the stack and log it.
+                var buf: [1024]u8 = undefined;
+                const buf_name = display_name.cstring(&buf, .utf8) orelse
+                    "<not enough internal storage space>";
+
+                log.info(
+                    "CoreText font required too much space to copy, value = {s}",
+                    .{buf_name},
+                );
                 break :unsupported display_name.cstring(buf, .utf8) orelse
                     return error.OutOfMemory;
             };
@@ -320,29 +328,12 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
 
         // Canvas always has the codepoint because we have no way of
         // really checking and we let the browser handle it.
-        .web_canvas => if (self.wc) |wc| {
-            // Fast-path if we have a specific presentation and we
-            // don't match, then it is definitely not this face.
-            if (p) |desired| if (wc.presentation != desired) return false;
-
-            // Slow-path: we initialize the font, render it, and check
-            // if it works and the presentation matches.
-            var face = Face.initNamed(
-                wc.alloc,
-                wc.font_str,
-                .{ .points = 12 },
-                wc.presentation,
-            ) catch |err| {
-                log.warn("failed to init face for codepoint check " ++
-                    "face={s} err={}", .{
-                    wc.font_str,
-                    err,
-                });
-
-                return false;
-            };
-            defer face.deinit();
-            return face.glyphIndex(cp) != null;
+        .web_canvas => {
+            if (self.wc) |wc| {
+                if (p) |desired| if (wc.presentation != desired) return false;
+            }
+
+            return true;
         },
 
         .freetype => {},
@@ -392,11 +383,20 @@ pub const Wasm = struct {
     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
     }
+
+    /// Caller should not free this, the face is owned by the deferred face.
+    ///
+    /// DEPRECATED: Use font_group_get_face instead. Loading happens
+    /// synchronously within that call or prior to it.
+    export fn deferred_face_face(self: *DeferredFace) ?*Face {
+        _ = self;
+        unreachable;
+    }
 };
 
 test "fontconfig" {
