
index 6fc93c25..150ba6ea 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmpekhqfufs_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmpic0piokp_actual.txt	
@@ -330,7 +330,7 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
             var face = Face.initNamed(
                 wc.alloc,
                 wc.font_str,
-                .{ .points = 12 },
+                .{ .size = .{ .points = 12 } },
                 wc.presentation,
             ) catch |err| {
                 log.warn("failed to init face for codepoint check " ++
@@ -365,7 +365,7 @@ pub const Wasm = struct {
         };
     }
 
-    fn deferred_face_new_(ptr: [*]const u8, len: usize, presentation: u16) !*DeferredFace {
+    fn deferred_face_new_(ptr: [*]const u8, len: usize, presentation_val: u16) !*DeferredFace {
         const font_str = try alloc.dupeZ(u8, ptr[0..len]);
         errdefer alloc.free(font_str);
 
@@ -373,7 +373,7 @@ pub const Wasm = struct {
             .wc = .{
                 .alloc = alloc,
                 .font_str = font_str,
-                .presentation = @enumFromInt(presentation),
+                .presentation = @enumFromInt(presentation_val),
             },
         };
         errdefer face.deinit();
@@ -392,7 +392,7 @@ pub const Wasm = struct {
     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        _ = self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
@@ -413,7 +413,7 @@ test "fontconfig" {
     // Get a deferred face from fontconfig
     var def = def: {
         var fc = discovery.Fontconfig.init();
-        var it = try fc.discover(alloc, .{ .family = "monospace", .size = 12 });
+        var it = try fc.discover(alloc, .{ .family = "monospace", .size = .{ .points = 12 } });
         defer it.deinit();
         break :def (try it.next()).?;
     };
@@ -430,7 +430,11 @@ test "fontconfig" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext) return error.SkipZigTest;
+    if (options.backend != .coretext and
+        options.backend != .coretext_freetype and
+        options.backend != .coretext_harfbuzz and
+        options.backend != .coretext_noshape)
+        return error.SkipZigTest;
 
     const discovery = @import("main.zig").discovery;
     const testing = std.testing;
@@ -443,7 +447,7 @@ test "coretext" {
     // Get a deferred face from fontconfig
     var def = def: {
         var fc = discovery.CoreText.init();
-        var it = try fc.discover(alloc, .{ .family = "Monaco", .size = 12 });
+        var it = try fc.discover(alloc, .{ .family = "Monaco", .size = .{ .points = 12 } });
         defer it.deinit();
         break :def (try it.next()).?;
     };
