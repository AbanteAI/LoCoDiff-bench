
index 6fc93c25..ac228633 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmpwwf9zlij_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmpuzmflxaf_actual.txt	
@@ -1,9 +1,3 @@
-//! A deferred face represents a single font face with all the information
-//! necessary to load it, but defers loading the full face until it is
-//! needed.
-//!
-//! This allows us to have many fallback fonts to look for glyphs, but
-//! only load them if they're really needed.
 const DeferredFace = @This();
 
 const std = @import("std");
@@ -19,6 +13,9 @@ const Presentation = @import("main.zig").Presentation;
 
 const log = std.log.scoped(.deferred_face);
 
+/// The loaded face (once loaded).
+face: ?Face = null,
+
 /// Fontconfig
 fc: if (options.backend == .fontconfig_freetype) ?Fontconfig else void =
     if (options.backend == .fontconfig_freetype) null else {},
@@ -34,12 +31,9 @@ wc: if (options.backend == .web_canvas) ?WebCanvas else void =
 /// Fontconfig specific data. This is only present if building with fontconfig.
 pub const Fontconfig = struct {
     /// The pattern for this font. This must be the "render prepared" pattern.
-    /// (i.e. call FcFontRenderPrepare).
     pattern: *fontconfig.Pattern,
-
     /// Charset and Langset are used for quick lookup if a codepoint and
-    /// presentation style are supported. They can be derived from pattern
-    /// but are cached since they're frequently used.
+    /// presentation style are supported.
     charset: *const fontconfig.CharSet,
     langset: *const fontconfig.LangSet,
 
@@ -110,7 +104,6 @@ pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
         .coretext,
         .coretext_freetype,
         .coretext_harfbuzz,
-        .coretext_noshape,
         => if (self.ct) |ct| {
             const family_name = ct.font.copyAttribute(.family_name) orelse
                 return "unknown";
@@ -122,7 +115,6 @@ pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
 
         .web_canvas => if (self.wc) |wc| return wc.font_str,
     }
-
     return "";
 }
 
@@ -142,10 +134,6 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
         => if (self.ct) |ct| {
             const display_name = ct.font.copyDisplayName();
             return display_name.cstringPtr(.utf8) orelse unsupported: {
-                // "NULL if the internal storage of theString does not allow
-                // this to be returned efficiently." In this case, we need
-                // to allocate. But we can't return an allocated string because
-                // we don't have an allocator. Let's use the stack and log it.
                 break :unsupported display_name.cstring(buf, .utf8) orelse
                     return error.OutOfMemory;
             };
@@ -153,11 +141,10 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
 
         .web_canvas => if (self.wc) |wc| return wc.font_str,
     }
-
     return "";
 }
 
-/// Load the deferred font face. This does nothing if the face is loaded.
+/// Load the deferred font face. Returns the loaded Face.
 pub fn load(
     self: *DeferredFace,
     lib: Library,
@@ -165,12 +152,12 @@ pub fn load(
 ) !Face {
     return switch (options.backend) {
         .fontconfig_freetype => try self.loadFontconfig(lib, opts),
-        .coretext, .coretext_harfbuzz, .coretext_noshape => try self.loadCoreText(lib, opts),
+        .coretext,
+        .coretext_harfbuzz,
+        .coretext_noshape,
+        => try self.loadCoreText(lib, opts),
         .coretext_freetype => try self.loadCoreTextFreetype(lib, opts),
         .web_canvas => try self.loadWebCanvas(opts),
-
-        // Unreachable because we must be already loaded or have the
-        // proper configuration for one of the other deferred mechanisms.
         .freetype => unreachable,
     };
 }
@@ -199,6 +186,7 @@ fn loadCoreText(
 ) !Face {
     _ = lib;
     const ct = self.ct.?;
+
     var face = try Face.initFontCopy(ct.font, opts);
     errdefer face.deinit();
     try face.setVariations(ct.variations, opts);
@@ -239,13 +227,9 @@ fn loadCoreTextFreetype(
     // the end for a zero so we set that up here.
     buf[path_slice.len] = 0;
 
-    // Face index 0 is not always correct. We don't ship this configuration
-    // in a release build. Users should use the pure CoreText builds.
-    //std.log.warn("path={s}", .{path_slice});
     var face = try Face.initFile(lib, buf[0..path_slice.len :0], 0, opts);
     errdefer face.deinit();
     try face.setVariations(ct.variations, opts);
-
     return face;
 }
 
@@ -254,21 +238,16 @@ fn loadWebCanvas(
     opts: font.face.Options,
 ) !Face {
     const wc = self.wc.?;
+
     return try Face.initNamed(wc.alloc, wc.font_str, opts, wc.presentation);
 }
 
 /// Returns true if this face can satisfy the given codepoint and
 /// presentation. If presentation is null, then it just checks if the
 /// codepoint is present at all.
-///
-/// This should not require the face to be loaded IF we're using a
-/// discovery mechanism (i.e. fontconfig). If no discovery is used,
-/// the face is always expected to be loaded.
 pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
     switch (options.backend) {
         .fontconfig_freetype => {
-            // If we are using fontconfig, use the fontconfig metadata to
-            // avoid loading the face.
             if (self.fc) |fc| {
                 // Check if char exists
                 if (!fc.charset.hasChar(cp)) return false;
@@ -287,20 +266,12 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
                 return true;
             }
         },
-
         .coretext,
         .coretext_freetype,
         .coretext_harfbuzz,
         .coretext_noshape,
         => {
-            // If we are using coretext, we check the loaded CT font.
             if (self.ct) |ct| {
-                // This presentation check isn't as detailed as isColorGlyph
-                // because forced presentation modes are only used for emoji and
-                // emoji should always have color glyphs set. This can be
-                // more correct by using the isColorGlyph logic but I'd want
-                // to find a font that actually requires this so we can write
-                // a test for it before changing it.
                 if (p) |desired_p| {
                     const traits = ct.font.getSymbolicTraits();
                     const actual_p: Presentation = if (traits.color_glyphs) .emoji else .text;
@@ -317,9 +288,6 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
                 return ct.font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
             }
         },
-
-        // Canvas always has the codepoint because we have no way of
-        // really checking and we let the browser handle it.
         .web_canvas => if (self.wc) |wc| {
             // Fast-path if we have a specific presentation and we
             // don't match, then it is definitely not this face.
@@ -344,61 +312,11 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
             defer face.deinit();
             return face.glyphIndex(cp) != null;
         },
-
         .freetype => {},
     }
-
-    // This is unreachable because discovery mechanisms terminate, and
-    // if we're not using a discovery mechanism, the face MUST be loaded.
     unreachable;
 }
 
-/// The wasm-compatible API.
-pub const Wasm = struct {
-    const wasm = @import("../os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    export fn deferred_face_new(ptr: [*]const u8, len: usize, presentation: u16) ?*DeferredFace {
-        return deferred_face_new_(ptr, len, presentation) catch |err| {
-            log.warn("error creating deferred face err={}", .{err});
-            return null;
-        };
-    }
-
-    fn deferred_face_new_(ptr: [*]const u8, len: usize, presentation: u16) !*DeferredFace {
-        const font_str = try alloc.dupeZ(u8, ptr[0..len]);
-        errdefer alloc.free(font_str);
-
-        var face: DeferredFace = .{
-            .wc = .{
-                .alloc = alloc,
-                .font_str = font_str,
-                .presentation = @enumFromInt(presentation),
-            },
-        };
-        errdefer face.deinit();
-
-        const result = try alloc.create(DeferredFace);
-        errdefer alloc.destroy(result);
-        result.* = face;
-        return result;
-    }
-
-    export fn deferred_face_free(ptr: ?*DeferredFace) void {
-        if (ptr) |v| {
-            v.deinit();
-            alloc.destroy(v);
-        }
-    }
-
-    export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
-            log.warn("error loading deferred face err={}", .{err});
-            return;
-        };
-    }
-};
-
 test "fontconfig" {
     if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
 
@@ -440,7 +358,7 @@ test "coretext" {
     var lib = try Library.init();
     defer lib.deinit();
 
-    // Get a deferred face from fontconfig
+    // Get a deferred face from CoreText
     var def = def: {
         var fc = discovery.CoreText.init();
         var it = try fc.discover(alloc, .{ .family = "Monaco", .size = 12 });
@@ -448,6 +366,7 @@ test "coretext" {
         break :def (try it.next()).?;
     };
     defer def.deinit();
+
     try testing.expect(def.hasCodepoint(' ', null));
 
     // Verify we can get the name
