
index 6fc93c257..e4d80e0ee 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmp8w7i3tz8_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmp47w1g7on_actual.txt	
@@ -24,8 +24,8 @@ fc: if (options.backend == .fontconfig_freetype) ?Fontconfig else void =
     if (options.backend == .fontconfig_freetype) null else {},
 
 /// CoreText
-ct: if (font.Discover == font.discovery.CoreText) ?CoreText else void =
-    if (font.Discover == font.discovery.CoreText) null else {},
+ct: if (options.backend == .coretext or options.backend == .coretext_freetype or options.backend == .coretext_harfbuzz or options.backend == .coretext_noshape) ?CoreText else void =
+    if (options.backend == .coretext or options.backend == .coretext_freetype or options.backend == .coretext_harfbuzz or options.backend == .coretext_noshape) null else {},
 
 /// Canvas
 wc: if (options.backend == .web_canvas) ?WebCanvas else void =
@@ -142,12 +142,14 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
         => if (self.ct) |ct| {
             const display_name = ct.font.copyDisplayName();
             return display_name.cstringPtr(.utf8) orelse unsupported: {
-                // "NULL if the internal storage of theString does not allow
-                // this to be returned efficiently." In this case, we need
-                // to allocate. But we can't return an allocated string because
-                // we don't have an allocator. Let's use the stack and log it.
-                break :unsupported display_name.cstring(buf, .utf8) orelse
+                const buf_name = display_name.cstring(buf, .utf8) orelse
                     return error.OutOfMemory;
+
+                log.info(
+                    "CoreText font required too much space to copy, value = {s}",
+                    .{buf_name},
+                );
+                break :unsupported "<CoreText internal storage limited, see logs>";
             };
         },
 
@@ -318,8 +320,6 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
             }
         },
 
-        // Canvas always has the codepoint because we have no way of
-        // really checking and we let the browser handle it.
         .web_canvas => if (self.wc) |wc| {
             // Fast-path if we have a specific presentation and we
             // don't match, then it is definitely not this face.
@@ -330,7 +330,7 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
             var face = Face.initNamed(
                 wc.alloc,
                 wc.font_str,
-                .{ .points = 12 },
+                .{ .size = .{ .points = 12 } },
                 wc.presentation,
             ) catch |err| {
                 log.warn("failed to init face for codepoint check " ++
@@ -392,7 +392,7 @@ pub const Wasm = struct {
     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
