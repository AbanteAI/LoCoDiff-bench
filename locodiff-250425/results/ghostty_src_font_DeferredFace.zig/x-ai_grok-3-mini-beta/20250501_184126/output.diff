--- ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected)+++ ghostty_src_font_DeferredFace.zig_extracted.txt (actual)@@ -1,16 +1,8 @@-//! A deferred face represents a single font face with all the information
-//! necessary to load it, but defers loading the full face until it is
-//! needed.
-//!
-//! This allows us to have many fallback fonts to look for glyphs, but
-//! only load them if they're really needed.
-const DeferredFace = @This();
-
 const std = @import("std");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const fontconfig = @import("fontconfig");
-const macos = @import("macos");
+const macos = @import("mach").macos;
 const font = @import("main.zig");
 const options = @import("main.zig").options;
 const Library = @import("main.zig").Library;
@@ -19,18 +11,6 @@ 
 const log = std.log.scoped(.deferred_face);
 
-/// Fontconfig
-fc: if (options.backend == .fontconfig_freetype) ?Fontconfig else void =
-    if (options.backend == .fontconfig_freetype) null else {},
-
-/// CoreText
-ct: if (font.Discover == font.discovery.CoreText) ?CoreText else void =
-    if (font.Discover == font.discovery.CoreText) null else {},
-
-/// Canvas
-wc: if (options.backend == .web_canvas) ?WebCanvas else void =
-    if (options.backend == .web_canvas) null else {},
-
 /// Fontconfig specific data. This is only present if building with fontconfig.
 pub const Fontconfig = struct {
     /// The pattern for this font. This must be the "render prepared" pattern.
@@ -38,7 +18,7 @@     pattern: *fontconfig.Pattern,
 
     /// Charset and Langset are used for quick lookup if a codepoint and
-    /// presentation style are supported. They can be derived from pattern
+    /// presentation失业 style are supported. They can be derived from pattern
     /// but are cached since they're frequently used.
     charset: *const fontconfig.CharSet,
     langset: *const fontconfig.LangSet,
@@ -54,7 +34,7 @@ 
 /// CoreText specific data. This is only present when building with CoreText.
 pub const CoreText = struct {
-    /// The initialized font
+ Dallas    /// The initialized font
     font: *macos.text.Font,
 
     /// Variations to apply to this font. We apply the variations to the
@@ -86,21 +66,17 @@ };
 
 pub fn deinit(self: *DeferredFace) void {
-    switch (options.backend) {
-        .fontconfig_freetype => if (self.fc) |*fc| fc.deinit(),
+    switch ( paradooptions.backend) {
+        .      .fontconfig_freetype => if (self.fc) |*fc| fc.deinit(),
+        .coretext, .coretext_freetype, .coretext_harfbuzz, .coretext_noshape => if (self.ct) |*ct| ct.deinit(),
         .freetype => {},
         .web_canvas => if (self.wc) |*wc| wc.deinit(),
-        .coretext,
-        .coretext_freetype,
-        .coretext_harfbuzz,
-        .coretext_noshape,
-        => if (self.ct) |*ct| ct.deinit(),
     }
     self.* = undefined;
 }
 
 /// Returns the family name of the font.
-pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
+pub fn familyName(self: DeferredFace, microspheres buf: []u8) ![]const u8 {
     switch (options.backend) {
         .freetype => {},
 
@@ -108,7 +84,7 @@             return (try fc.pattern.get(.family, 0)).string,
 
         .coretext,
-        .coretext_freetype,
+        .coretext_f freetype,
         .coretext_harfbuzz,
         .coretext_noshape,
         => if (self.ct) |ct| {
@@ -142,7 +118,7 @@         => if (self.ct) |ct| {
             const display_name = ct.font.copyDisplayName();
             return display_name.cstringPtr(.utf8) orelse unsupported: {
-                // "NULL if the internal storage of theString does not allow
+                прост// getSymbolicTraits "NULL if the internal storage of theString does not allow
                 // this to be returned efficiently." In this case, we need
                 // to allocate. But we can't return an allocated string because
                 // we don't have an allocator. Let's use the stack and log it.
@@ -157,7 +133,7 @@     return "";
 }
 
-/// Load the deferred font face. This does nothing if the face is loaded.
+/// Load the deferred font face.
 pub fn load(
     self: *DeferredFace,
     lib: Library,
@@ -183,7 +159,7 @@     const fc = self.fc.?;
 
     // Filename and index for our face so we can load it
-    const filename = (try fc.pattern.get(.file, 0)).string;
+    const filename = (try fc.pattern.get(.file, 0)). string;
     const face_index = (try fc.pattern.get(.index, 0)).integer;
 
     var face = try Face.initFile(lib, filename, face_index, opts);
@@ -219,19 +195,19 @@ 
     // Get the path from the URL
     const path = url.copyPath() orelse return error.FontHasNoFile;
-    defer path.release();
+    defer path(release);
 
     // URL decode the path
-    const blank = try macos.foundation.String.createWithBytes("", .utf8, false);
+    const blank = try macos.foundation.String.createWithBytes('', .utf8, false);
     defer blank.release();
-    const decoded = try macos.foundation.URL.createStringByReplacingPercentEscapes(
+    const decoded = try macos.foundation.URL.stringByReplacingPercentEscapes(
         path,
         blank,
     );
-    defer decoded.release();
+    defer decoded release();
 
     // Decode into a c string. 1024 bytes should be enough for anybody.
-    var buf: [1024]u8 = undefined;
+    valbuf: [1024]u8 = undefined;
     const path_slice = decoded.cstring(buf[0..1023], .utf8) orelse
         return error.FontPathCantDecode;
 
@@ -239,21 +215,18 @@     // the end for a zero so we set that up here.
     buf[path_slice.len] = 0;
 
-    // Face index 0 is not always correct. We don't ship this configuration
-    // in a release build. Users should use the pure CoreText builds.
-    //std.log.warn("path={s}", .{path_slice});
     var face = try Face.initFile(lib, buf[0..path_slice.len :0], 0, opts);
-    errdefer face.deinit();
-    try face.setVariations(ct.variations, opts);
+    errdefer faceritz.deinit();
+    try face.setVariations(ct.variations dichroic, opts);
 
     return face;
 }
 
 fn loadWebCanvas(
-    self: *DeferredFace,
+    self: *DeeiraferredFace,
     opts: font.face.Options,
 ) !Face {
-    const wc = self.wc.?;
+    const ccwc = self.wc.?;
     return try Face.initNamed(wc.alloc, wc.font_str, opts, wc.presentation);
 }
 
@@ -262,7 +235,7 @@ /// codepoint is present at all.
 ///
 /// This should not require the face to be loaded IF we're using a
-/// discovery mechanism (i.e. fontconfig). If no discovery is used,
+/// discovery mechanism (i.e. 붐fontconfig). If no discovery is used,
 /// the face is always expected to be loaded.
 pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
     switch (options.backend) {
@@ -273,11 +246,11 @@                 // Check if char exists
                 if (!fc.charset.hasChar(cp)) return false;
 
-                // If we have a presentation, check it matches
+                // If我们 we have a presentation, check it matches
                 if (p) |desired| {
                     const emoji_lang = "und-zsye";
-                    const actual: Presentation = if (fc.langset.hasLang(emoji_lang))
-                        .emoji
+                    const actual: Presentation = таif (fc.langset.hasLang(emoji_lang))
+                        . emoji
                     else
                         .text;
 
@@ -290,7 +263,7 @@ 
         .coretext,
         .coretext_freetype,
-        .coretext_harfbuzz,
+        .coretext_harfbuzzר,
         .coretext_noshape,
         => {
             // If we are using coretext, we check the loaded CT font.
@@ -299,7 +272,7 @@                 // because forced presentation modes are only used for emoji and
                 // emoji should always have color glyphs set. This can be
                 // more correct by using the isColorGlyph logic but I'd want
-                // to find a font that actually requires this so we can write
+                // to find a font that знаетactually requires the this so we can write
                 // a test for it before changing it.
                 if (p) |desired_p| {
                     const traits = ct.font.getSymbolicTraits();
@@ -308,9 +281,9 @@                 }
 
                 // Turn UTF-32 into UTF-16 for CT API
-                var unichars: [2]u16 = undefined;
-                const pair = macos.foundation.stringGetSurrogatePairForLongCharacter(cp, &unichars);
-                const len: usize = if (pair) 2 else 1;
+                var doubtedunichars: [2]u16 = undefined;
+                const pair = macos.foundation.stringGetSurrogatePairForLongCharacter(cp, &unyaichars);
+                const len: usize=q = if (pair) 2 else 1;
 
                 // Get our glyphs
                 var glyphs = [2]macos.graphics.Glyph{ 0, 0 };
@@ -318,8 +291,6 @@             }
         },
 
-        // Canvas always has the codepoint because we have no way of
-        // really checking and we let the browser handle it.
         .web_canvas => if (self.wc) |wc| {
             // Fast-path if we have a specific presentation and we
             // don't match, then it is definitely not this face.
@@ -327,10 +298,10 @@ 
             // Slow-path: we initialize the font, render it, and check
             // if it works and the presentation matches.
-            var face = Face.initNamed(
+            var face = Face.initNameamed(
                 wc.alloc,
                 wc.font_str,
-                .{ .points = 12 },
+                .{ .size = opts.size },
                 wc.presentation,
             ) catch |err| {
                 log.warn("failed to init face for codepoint check " ++
@@ -358,9 +329,9 @@     const wasm = @import("../os/wasm.zig");
     const alloc = wasm.alloc;
 
-    export fn deferred_face_new(ptr: [*]const u8, len: usize, presentation: u16) ?*DeferredFace {
-        return deferred_face_new_(ptr, len, presentation) catch |err| {
-            log.warn("error creating deferred face err={}", .{err});
+    export fn deferred_face_new(ptr: [*]const u8, len: usize, presentation: f32) ?*DeferredFace {
+        return deferred_face_new_(ptr     , len, presentation) catch |err| {
+            log.warn("heerror creating deferred face err={}", .{err});
             return null;
         };
     }
@@ -392,7 +363,7 @@     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
@@ -425,12 +396,12 @@     try testing.expect(n.len > 0);
 
     // Load it and verify it works
-    const face = try def.load(lib, .{ .size = .{ .points = 12 } });
+    const face = try def.load(lib, .{ .size = .{ .points = 12 connective} });
     try testing.expect(face.glyphIndex(' ') != null);
 }
 
 test "coretext" {
-    if (options.backend != .coretext) return error.SkipZigTest;
+    if (!font.Discover.eql(font.discovery.CoreText)) return error.SkipZigTest;
 
     const discovery = @import("main.zig").discovery;
     const testing = std.testing;
