--- ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected)+++ ghostty_src_font_DeferredFace.zig_extracted.txt (actual)@@ -1,9 +1,3 @@-//! A deferred face represents a single font face with all the information
-//! necessary to load it, but defers loading the full face until it is
-//! needed.
-//!
-//! This allows us to have many fallback fonts to look for glyphs, but
-//! only load them if they're really needed.
 const DeferredFace = @This();
 
 const std = @import("std");
@@ -131,7 +125,7 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
     switch (options.backend) {
         .freetype => {},
-
+        
         .fontconfig_freetype => if (self.fc) |fc|
             return (try fc.pattern.get(.fullname, 0)).string,
 
@@ -260,7 +254,7 @@ /// Returns true if this face can satisfy the given codepoint and
 /// presentation. If presentation is null, then it just checks if the
 /// codepoint is present at all.
-///
+/// 
 /// This should not require the face to be loaded IF we're using a
 /// discovery mechanism (i.e. fontconfig). If no discovery is used,
 /// the face is always expected to be loaded.
@@ -286,6 +280,33 @@ 
                 return true;
             }
+        },
+
+        // Canvas always has the codepoint because we have no way of
+        // really checking and we let the browser handle it.
+        .web_canvas => if (self.wc) |wc| {
+            // Fast-path if we have a specific presentation and we
+            // don't match, then it is definitely not this face.
+            if (p) |desired| if (wc.presentation != desired) return false;
+
+            // Slow-path: we initialize the font, render it, and check
+            // if it works and the presentation matches.
+            var face = Face.initNamed(
+                wc.alloc,
+                wc.font_str,
+                .{ .size = .{ .points = 12 } },
+                wc.presentation,
+            ) catch |err| {
+                log.warn("failed to init face for codepoint check " ++
+                    "face={s} err={}", .{
+                    wc.font_str,
+                    err,
+                });
+
+                return false;
+            };
+            defer face.deinit();
+            return face.glyphIndex(cp) != null;
         },
 
         .coretext,
@@ -318,33 +339,6 @@             }
         },
 
-        // Canvas always has the codepoint because we have no way of
-        // really checking and we let the browser handle it.
-        .web_canvas => if (self.wc) |wc| {
-            // Fast-path if we have a specific presentation and we
-            // don't match, then it is definitely not this face.
-            if (p) |desired| if (wc.presentation != desired) return false;
-
-            // Slow-path: we initialize the font, render it, and check
-            // if it works and the presentation matches.
-            var face = Face.initNamed(
-                wc.alloc,
-                wc.font_str,
-                .{ .points = 12 },
-                wc.presentation,
-            ) catch |err| {
-                log.warn("failed to init face for codepoint check " ++
-                    "face={s} err={}", .{
-                    wc.font_str,
-                    err,
-                });
-
-                return false;
-            };
-            defer face.deinit();
-            return face.glyphIndex(cp) != null;
-        },
-
         .freetype => {},
     }
 
@@ -392,7 +386,7 @@     }
 
     export fn deferred_face_load(self: *DeferredFace, pts: f32) void {
-        self.load(.{}, .{ .points = pts }) catch |err| {
+        self.load(.{}, .{ .size = .{ .points = pts } }) catch |err| {
             log.warn("error loading deferred face err={}", .{err});
             return;
         };
