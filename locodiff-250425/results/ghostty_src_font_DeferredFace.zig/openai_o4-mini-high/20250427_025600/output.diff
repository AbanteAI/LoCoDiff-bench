
index 6fc93c25..38071e19 100644
--- a/ghostty_src_font_DeferredFace.zig_expectedoutput.txt (expected):tmp/tmp4ati40kx_expected.txt	
+++ b/ghostty_src_font_DeferredFace.zig_extracted.txt (actual):tmp/tmpy5algo7k_actual.txt	
@@ -16,7 +16,6 @@ const options = @import("main.zig").options;
 const Library = @import("main.zig").Library;
 const Face = @import("main.zig").Face;
 const Presentation = @import("main.zig").Presentation;
-
 const log = std.log.scoped(.deferred_face);
 
 /// Fontconfig
@@ -27,14 +26,13 @@ fc: if (options.backend == .fontconfig_freetype) ?Fontconfig else void =
 ct: if (font.Discover == font.discovery.CoreText) ?CoreText else void =
     if (font.Discover == font.discovery.CoreText) null else {},
 
-/// Canvas
+/// WebCanvas
 wc: if (options.backend == .web_canvas) ?WebCanvas else void =
     if (options.backend == .web_canvas) null else {},
 
 /// Fontconfig specific data. This is only present if building with fontconfig.
 pub const Fontconfig = struct {
     /// The pattern for this font. This must be the "render prepared" pattern.
-    /// (i.e. call FcFontRenderPrepare).
     pattern: *fontconfig.Pattern,
 
     /// Charset and Langset are used for quick lookup if a codepoint and
@@ -85,20 +83,6 @@ pub const WebCanvas = struct {
     }
 };
 
-pub fn deinit(self: *DeferredFace) void {
-    switch (options.backend) {
-        .fontconfig_freetype => if (self.fc) |*fc| fc.deinit(),
-        .freetype => {},
-        .web_canvas => if (self.wc) |*wc| wc.deinit(),
-        .coretext,
-        .coretext_freetype,
-        .coretext_harfbuzz,
-        .coretext_noshape,
-        => if (self.ct) |*ct| ct.deinit(),
-    }
-    self.* = undefined;
-}
-
 /// Returns the family name of the font.
 pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
     switch (options.backend) {
@@ -107,11 +91,7 @@ pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
         .fontconfig_freetype => if (self.fc) |fc|
             return (try fc.pattern.get(.family, 0)).string,
 
-        .coretext,
-        .coretext_freetype,
-        .coretext_harfbuzz,
-        .coretext_noshape,
-        => if (self.ct) |ct| {
+        .coretext, .coretext_freetype, .coretext_harfbuzz, .coretext_noshape => if (self.ct) |ct| {
             const family_name = ct.font.copyAttribute(.family_name) orelse
                 return "unknown";
             return family_name.cstringPtr(.utf8) orelse unsupported: {
@@ -122,7 +102,6 @@ pub fn familyName(self: DeferredFace, buf: []u8) ![]const u8 {
 
         .web_canvas => if (self.wc) |wc| return wc.font_str,
     }
-
     return "";
 }
 
@@ -135,17 +114,9 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
         .fontconfig_freetype => if (self.fc) |fc|
             return (try fc.pattern.get(.fullname, 0)).string,
 
-        .coretext,
-        .coretext_freetype,
-        .coretext_harfbuzz,
-        .coretext_noshape,
-        => if (self.ct) |ct| {
+        .coretext, .coretext_freetype, .coretext_harfbuzz => if (self.ct) |ct| {
             const display_name = ct.font.copyDisplayName();
             return display_name.cstringPtr(.utf8) orelse unsupported: {
-                // "NULL if the internal storage of theString does not allow
-                // this to be returned efficiently." In this case, we need
-                // to allocate. But we can't return an allocated string because
-                // we don't have an allocator. Let's use the stack and log it.
                 break :unsupported display_name.cstring(buf, .utf8) orelse
                     return error.OutOfMemory;
             };
@@ -153,7 +124,6 @@ pub fn name(self: DeferredFace, buf: []u8) ![]const u8 {
 
         .web_canvas => if (self.wc) |wc| return wc.font_str,
     }
-
     return "";
 }
 
@@ -165,7 +135,7 @@ pub fn load(
 ) !Face {
     return switch (options.backend) {
         .fontconfig_freetype => try self.loadFontconfig(lib, opts),
-        .coretext, .coretext_harfbuzz, .coretext_noshape => try self.loadCoreText(lib, opts),
+        .coretext => try self.loadCoreText(lib, opts),
         .coretext_freetype => try self.loadCoreTextFreetype(lib, opts),
         .web_canvas => try self.loadWebCanvas(opts),
 
@@ -199,6 +169,7 @@ fn loadCoreText(
 ) !Face {
     _ = lib;
     const ct = self.ct.?;
+
     var face = try Face.initFontCopy(ct.font, opts);
     errdefer face.deinit();
     try face.setVariations(ct.variations, opts);
@@ -245,7 +216,6 @@ fn loadCoreTextFreetype(
     var face = try Face.initFile(lib, buf[0..path_slice.len :0], 0, opts);
     errdefer face.deinit();
     try face.setVariations(ct.variations, opts);
-
     return face;
 }
 
@@ -260,15 +230,9 @@ fn loadWebCanvas(
 /// Returns true if this face can satisfy the given codepoint and
 /// presentation. If presentation is null, then it just checks if the
 /// codepoint is present at all.
-///
-/// This should not require the face to be loaded IF we're using a
-/// discovery mechanism (i.e. fontconfig). If no discovery is used,
-/// the face is always expected to be loaded.
 pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
     switch (options.backend) {
         .fontconfig_freetype => {
-            // If we are using fontconfig, use the fontconfig metadata to
-            // avoid loading the face.
             if (self.fc) |fc| {
                 // Check if char exists
                 if (!fc.charset.hasChar(cp)) return false;
@@ -280,19 +244,13 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
                         .emoji
                     else
                         .text;
-
                     return desired == actual;
                 }
 
                 return true;
             }
         },
-
-        .coretext,
-        .coretext_freetype,
-        .coretext_harfbuzz,
-        .coretext_noshape,
-        => {
+        .coretext, .coretext_freetype, .coretext_harfbuzz, .coretext_noshape => {
             // If we are using coretext, we check the loaded CT font.
             if (self.ct) |ct| {
                 // This presentation check isn't as detailed as isColorGlyph
@@ -317,9 +275,6 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
                 return ct.font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
             }
         },
-
-        // Canvas always has the codepoint because we have no way of
-        // really checking and we let the browser handle it.
         .web_canvas => if (self.wc) |wc| {
             // Fast-path if we have a specific presentation and we
             // don't match, then it is definitely not this face.
@@ -338,18 +293,13 @@ pub fn hasCodepoint(self: DeferredFace, cp: u32, p: ?Presentation) bool {
                     wc.font_str,
                     err,
                 });
-
                 return false;
             };
             defer face.deinit();
             return face.glyphIndex(cp) != null;
         },
-
         .freetype => {},
     }
-
-    // This is unreachable because discovery mechanisms terminate, and
-    // if we're not using a discovery mechanism, the face MUST be loaded.
     unreachable;
 }
 
@@ -440,10 +390,10 @@ test "coretext" {
     var lib = try Library.init();
     defer lib.deinit();
 
-    // Get a deferred face from fontconfig
+    // Get a deferred face from search
     var def = def: {
-        var fc = discovery.CoreText.init();
-        var it = try fc.discover(alloc, .{ .family = "Monaco", .size = 12 });
+        var ct = discovery.CoreText.init();
+        var it = try ct.discover(alloc, .{ .family = "Monaco", .size = 12 });
         defer it.deinit();
         break :def (try it.next()).?;
     };
