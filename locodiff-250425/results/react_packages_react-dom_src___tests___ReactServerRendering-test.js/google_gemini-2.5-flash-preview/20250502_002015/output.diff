
index 0921f10c..9817df13 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmpcsfmubig_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpepqtmiuh_actual.txt	
@@ -130,9 +130,7 @@ describe('ReactDOMServer', () => {
         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>' + 'Component name: <!-- -->TestComponent' + '</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -145,9 +143,7 @@ describe('ReactDOMServer', () => {
     });
 
     it('should throw with silly args', () => {
-      expect(
-        ReactDOMServer.renderToString.bind(ReactDOMServer, {x: 123}),
-      ).toThrowError(
+      expect(() => ReactDOMServer.renderToString({x: 123})).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
       );
     });
@@ -288,9 +284,7 @@ describe('ReactDOMServer', () => {
     });
 
     it('should throw with silly args', () => {
-      expect(
-        ReactDOMServer.renderToStaticMarkup.bind(ReactDOMServer, {x: 123}),
-      ).toThrowError(
+      expect(() => ReactDOMServer.renderToStaticMarkup({x: 123})).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
       );
     });
@@ -397,9 +391,7 @@ describe('ReactDOMServer', () => {
       const Context = React.createContext(0);
 
       function Consumer(props) {
-        return (
-          <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>
-        );
+        return <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>;
       }
 
       const Indirection = React.Fragment;
@@ -471,9 +463,7 @@ describe('ReactDOMServer', () => {
       const Context = React.createContext(0);
 
       function Consumer(props) {
-        return (
-          <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>
-        );
+        return <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>;
       }
 
       let reentrantMarkup;
@@ -538,9 +528,8 @@ describe('ReactDOMServer', () => {
         }
       }
 
-      expect(
-        ReactDOMServer.renderToString.bind(
-          ReactDOMServer,
+      expect(() =>
+        ReactDOMServer.renderToString(
           <div>
             <StaticComponent />
             <Component />
@@ -653,6 +642,16 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
+  it('throws when suspending on the server', () => {
+    function AsyncFoo() {
+      throw new Promise(() => {});
+    }
+
+    expect(() => {
+      ReactDOMServer.renderToString(<AsyncFoo />);
+    }).toThrow('ReactDOMServer does not yet support Suspense.');
+  });
+
   it('does not get confused by throwing null', () => {
     function Bad() {
       // eslint-disable-next-line no-throw-literal
@@ -801,27 +800,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -831,7 +809,7 @@ describe('ReactDOMServer', () => {
       return (
         <font>
           <C>
-            <span ariaTypo="no" />
+            <span ariaTypo="no" key="1" />
           </C>
         </font>
       );
@@ -880,23 +858,21 @@ describe('ReactDOMServer', () => {
     function App2() {
       return (
         <Child2>
-          {ReactDOMServer.renderToString(<blink ariaTypo2="no" />)}
+          {ReactDOMServer.renderToString(<blink ariaTypo2="no" key="1" />)}
         </Child2>
       );
     }
 
     function Child() {
-      return (
-        <span ariaTypo4="no">{ReactDOMServer.renderToString(<App2 />)}</span>
-      );
+      return <span ariaTypo4="no">{ReactDOMServer.renderToString(<App2 />)}</span>;
     }
 
     function App() {
       return (
         <div>
-          <span ariaTypo="no" />
-          <Child />
-          <font ariaTypo5="no" />
+          <span ariaTypo="no" key="1" />
+          <Child key="2" />
+          <font ariaTypo5="no" key="3" />
         </div>
       );
     }
@@ -936,6 +912,7 @@ describe('ReactDOMServer', () => {
   it('should warn if an invalid contextType is defined', () => {
     const Context = React.createContext();
     class ComponentA extends React.Component {
+      // It should warn for both Context.Consumer and Context.Provider
       static contextType = Context.Consumer;
       render() {
         return <div />;
