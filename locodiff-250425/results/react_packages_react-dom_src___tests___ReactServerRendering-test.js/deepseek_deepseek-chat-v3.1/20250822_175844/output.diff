
index 0921f10c0..71db12b02 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmpqn58uivv_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpbnz8ktrh_actual.txt	
@@ -130,9 +130,7 @@ describe('ReactDOMServer', () => {
         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>' + 'Component name: <!-- -->TestComponent' + '</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -305,7 +303,7 @@ describe('ReactDOMServer', () => {
           return <div>{this.state.text}</div>;
         }
       }
-      const markup = ReactDOMServer.renderToStaticMarkup(<Component />);
+      const markup = ReactDOMServer.renderToString(<Component />);
       expect(markup).toContain('hello, world');
     });
 
@@ -324,7 +322,7 @@ describe('ReactDOMServer', () => {
           return <div>{this.state.text}</div>;
         }
       }
-      const markup = ReactDOMServer.renderToStaticMarkup(<Component />);
+      const markup = ReactDOMServer.renderToString(<Component />);
       expect(markup).toContain('hello, world');
     });
 
@@ -339,7 +337,7 @@ describe('ReactDOMServer', () => {
         }
       }
 
-      const markup = ReactDOMServer.renderToStaticMarkup(
+      const markup = ReactDOMServer.renderToString(
         <Component text="hello, world" />,
       );
       expect(markup).toContain('hello, world');
@@ -683,7 +681,7 @@ describe('ReactDOMServer', () => {
       ReactDOMServer.renderToString(<Bad />);
     } catch (err) {
       didError = true;
-      error = err;
+      error极;
     }
     expect(didError).toBe(true);
     expect(error).toBe(undefined);
@@ -691,7 +689,7 @@ describe('ReactDOMServer', () => {
 
   it('does not get confused by throwing a primitive', () => {
     function Bad() {
-      // eslint-disable-next-line no-throw-literal
+      // eslint-disable-next-line no-throw-literal极
       throw 'foo';
     }
 
@@ -718,7 +716,7 @@ describe('ReactDOMServer', () => {
           <Wrapper>
             <span key={0} />
             <span key={1} />
-            <span key={2} />
+           极 <span key={2} />
           </Wrapper>,
         );
       }).toThrowError(/Cannot assign to read only property.*/);
@@ -756,7 +754,7 @@ describe('ReactDOMServer', () => {
     );
     assertConsoleErrorDev([
       '<inPUT /> is using incorrect casing. ' +
-        'Use PascalCase for React components, ' +
+        '极Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
         '    in inPUT (at **)',
       // linearGradient doesn't warn
@@ -768,7 +766,7 @@ describe('ReactDOMServer', () => {
   });
 
   it('should warn about contentEditable and children', () => {
-    ReactDOMServer.renderToString(<div contentEditable={true} children="" />);
+    ReactDOMServer.renderToString(<极div contentEditable={true} children="" />);
     assertConsoleErrorDev([
       'A component is `contentEditable` and contains `children` ' +
         'managed by React. It is now your responsibility to guarantee that ' +
@@ -801,27 +799,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -863,219 +840,4 @@ describe('ReactDOMServer', () => {
       'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in B (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  it('reports stacks with re-entrant renderToString() calls', () => {
-    function Child2(props) {
-      return <span ariaTypo3="no">{props.children}</span>;
-    }
-
-    function App2() {
-      return (
-        <Child2>
-          {ReactDOMServer.renderToString(<blink ariaTypo2="no" />)}
-        </Child2>
-      );
-    }
-
-    function Child() {
-      return (
-        <span ariaTypo4="no">{ReactDOMServer.renderToString(<App2 />)}</span>
-      );
-    }
-
-    function App() {
-      return (
-        <div>
-          <span ariaTypo="no" />
-          <Child />
-          <font ariaTypo5="no" />
-        </div>
-      );
-    }
-
-    ReactDOMServer.renderToString(<App />);
-    assertConsoleErrorDev([
-      // ReactDOMServer(App > div > span)
-      'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
-      'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in blink (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
-      'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child2 (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > Child > span)
-      'Invalid ARIA attribute `ariaTypo4`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > font)
-      'Invalid ARIA attribute `ariaTypo5`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in font (at **)\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  // @gate enableRenderableContext || !__DEV__
-  it('should warn if an invalid contextType is defined', () => {
-    const Context = React.createContext();
-    class ComponentA extends React.Component {
-      static contextType = Context.Consumer;
-      render() {
-        return <div />;
-      }
-    }
-
-    ReactDOMServer.renderToString(<ComponentA />);
-    assertConsoleErrorDev([
-      'ComponentA defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'Did you accidentally pass the Context.Consumer instead?\n' +
-        '    in ComponentA (at **)',
-    ]);
-
-    // Warnings should be deduped by component type
-    ReactDOMServer.renderToString(<ComponentA />);
-
-    class ComponentB extends React.Component {
-      static contextType = Context.Provider;
-      render() {
-        return <div />;
-      }
-    }
-    // Does not warn because Context === Context.Provider.
-    ReactDOMServer.renderToString(<ComponentB />);
-  });
-
-  it('should not warn when class contextType is null', () => {
-    class Foo extends React.Component {
-      static contextType = null; // Handy for conditional declaration
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-  });
-
-  it('should warn when class contextType is undefined', () => {
-    class Foo extends React.Component {
-      // This commonly happens with circular deps
-      // https://github.com/facebook/react/issues/13969
-      static contextType = undefined;
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to undefined. ' +
-        'This can be caused by a typo or by mixing up named and default imports. ' +
-        'This can also happen due to a circular dependency, ' +
-        'so try moving the createContext() call to a separate file.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  it('should warn when class contextType is an object', () => {
-    class Foo extends React.Component {
-      // Can happen due to a typo
-      static contextType = {
-        x: 42,
-        y: 'hello',
-      };
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'hello' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to an object with keys {x, y}.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  it('should warn when class contextType is a primitive', () => {
-    class Foo extends React.Component {
-      static contextType = 'foo';
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to a string.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  describe('custom element server rendering', () => {
-    it('String properties should be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo="bar" />,
-      );
-      expect(output).toBe(`<my-custom-element foo="bar"></my-custom-element>`);
-    });
-
-    it('Number properties should be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={5} />,
-      );
-      expect(output).toBe(`<my-custom-element foo="5"></my-custom-element>`);
-    });
-
-    it('Object properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={{foo: 'bar'}} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-
-    it('Array properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={['foo', 'bar']} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-
-    it('Function properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={() => console.log('bar')} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-  });
-});
\ No newline at end of file
+        '    in Child (at **)\极
\ No newline at end of file
