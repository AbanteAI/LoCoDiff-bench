--- react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual)@@ -31,12 +31,12 @@   describe('renderToString', () => {
     it('should generate simple markup', () => {
       const response = ReactDOMServer.renderToString(<span>hello world</span>);
-      expect(response).toMatch(new RegExp('<span' + '>hello world</span>'));
+      expect(response).toMatch(new RegExp('<span>hello world</span>'));
     });
 
     it('should generate simple markup for self-closing tags', () => {
       const response = ReactDOMServer.renderToString(<img />);
-      expect(response).toMatch(new RegExp('<img' + '/>'));
+      expect(response).toMatch(new RegExp('<img/>'));
     });
 
     it('should generate comment markup for component returns null', () => {
@@ -72,12 +72,7 @@       const response = ReactDOMServer.renderToString(<Parent />);
       expect(response).toMatch(
         new RegExp(
-          '<div>' +
-            '<span' +
-            '>' +
-            'My name is <!-- -->child' +
-            '</span>' +
-            '</div>',
+          '<div>' + '<span>' + 'My name is <!-- -->child' + '</span>' + '</div>',
         ),
       );
     });
@@ -130,9 +125,7 @@         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>' + 'Component name: <!-- -->TestComponent' + '</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -145,9 +138,9 @@     });
 
     it('should throw with silly args', () => {
-      expect(
-        ReactDOMServer.renderToString.bind(ReactDOMServer, {x: 123}),
-      ).toThrowError(
+      expect(() => {
+        ReactDOMServer.renderToString({x: 123});
+      }).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
       );
     });
@@ -288,9 +281,9 @@     });
 
     it('should throw with silly args', () => {
-      expect(
-        ReactDOMServer.renderToStaticMarkup.bind(ReactDOMServer, {x: 123}),
-      ).toThrowError(
+      expect(() => {
+        ReactDOMServer.renderToStaticMarkup({x: 123});
+      }).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
       );
     });
@@ -507,7 +500,7 @@       }
 
       const markup = ReactDOMServer.renderToStaticMarkup(
-        <App value={1} reentrant={true} />,
+        <App value={1} reentrant={true},
       );
       // Extract the numbers rendered by the consumers
       const results = markup.match(/\d+/g).map(Number);
@@ -538,9 +531,8 @@         }
       }
 
-      expect(
-        ReactDOMServer.renderToString.bind(
-          ReactDOMServer,
+      expect(() =>
+        ReactDOMServer.renderToString(
           <div>
             <StaticComponent />
             <Component />
