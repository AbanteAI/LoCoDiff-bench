
index 0921f10c..37e02541 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmp5sh7y1pk_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpi2t9nho1_actual.txt	
@@ -31,12 +31,12 @@ describe('ReactDOMServer', () => {
   describe('renderToString', () => {
     it('should generate simple markup', () => {
       const response = ReactDOMServer.renderToString(<span>hello world</span>);
-      expect(response).toMatch(new RegExp('<span' + '>hello world</span>'));
+      expect(response).toMatch(new RegExp('<span>hello world</span>'));
     });
 
     it('should generate simple markup for self-closing tags', () => {
       const response = ReactDOMServer.renderToString(<img />);
-      expect(response).toMatch(new RegExp('<img' + '/>'));
+      expect(response).toMatch(new RegExp('<img/>'));
     });
 
     it('should generate comment markup for component returns null', () => {
@@ -50,8 +50,6 @@ describe('ReactDOMServer', () => {
       expect(response).toBe('');
     });
 
-    // TODO: Test that listeners are not registered onto any document/container.
-
     it('should render composite components', () => {
       class Parent extends React.Component {
         render() {
@@ -71,14 +69,7 @@ describe('ReactDOMServer', () => {
 
       const response = ReactDOMServer.renderToString(<Parent />);
       expect(response).toMatch(
-        new RegExp(
-          '<div>' +
-            '<span' +
-            '>' +
-            'My name is <!-- -->child' +
-            '</span>' +
-            '</div>',
-        ),
+        new RegExp('<div><span>My name is <!-- -->child</span></div>'),
       );
     });
 
@@ -130,9 +121,7 @@ describe('ReactDOMServer', () => {
         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>Component name: <!-- -->TestComponent</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -197,7 +186,6 @@ describe('ReactDOMServer', () => {
       }
 
       const response = ReactDOMServer.renderToStaticMarkup(<TestComponent />);
-
       expect(response).toBe('<span><div>inner text</div></span>');
     });
 
@@ -213,7 +201,6 @@ describe('ReactDOMServer', () => {
       }
 
       const response = ReactDOMServer.renderToStaticMarkup(<TestComponent />);
-
       expect(response).toBe('<span>hello world</span>');
     });
 
@@ -225,7 +212,6 @@ describe('ReactDOMServer', () => {
       }
 
       const response = ReactDOMServer.renderToStaticMarkup(<TestComponent />);
-
       expect(response).toBe('');
     });
 
@@ -275,7 +261,6 @@ describe('ReactDOMServer', () => {
         }
 
         const response = ReactDOMServer.renderToStaticMarkup(<TestComponent />);
-
         expect(response).toBe('<span>Component name: TestComponent</span>');
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -305,7 +290,7 @@ describe('ReactDOMServer', () => {
           return <div>{this.state.text}</div>;
         }
       }
-      const markup = ReactDOMServer.renderToStaticMarkup(<Component />);
+      const markup = ReactDOMServer.renderToString(<Component />);
       expect(markup).toContain('hello, world');
     });
 
@@ -324,7 +309,7 @@ describe('ReactDOMServer', () => {
           return <div>{this.state.text}</div>;
         }
       }
-      const markup = ReactDOMServer.renderToStaticMarkup(<Component />);
+      const markup = ReactDOMServer.renderToString(<Component />);
       expect(markup).toContain('hello, world');
     });
 
@@ -339,13 +324,12 @@ describe('ReactDOMServer', () => {
         }
       }
 
-      const markup = ReactDOMServer.renderToStaticMarkup(
+      const markup = ReactDOMServer.renderToString(
         <Component text="hello, world" />,
       );
       expect(markup).toContain('hello, world');
     });
 
-    // @gate !disableLegacyContext
     it('renders with context when using custom constructor', () => {
       class Component extends React.Component {
         constructor() {
@@ -423,8 +407,7 @@ describe('ReactDOMServer', () => {
         );
       }
 
-      const markup = ReactDOMServer.renderToStaticMarkup(<App value={1} />);
-      // Extract the numbers rendered by the consumers
+      const markup = ReactDOMServer.renderToString(<App value={1} />);
       const results = markup.match(/\d+/g).map(Number);
       expect(results).toEqual([2, 1, 3, 1]);
     });
@@ -461,8 +444,7 @@ describe('ReactDOMServer', () => {
         );
       }
 
-      const markup = ReactDOMServer.renderToStaticMarkup(<App value={1} />);
-      // Extract the numbers rendered by the consumers
+      const markup = ReactDOMServer.renderToString(<App value={1} />);
       const results = markup.match(/\d+/g).map(Number);
       expect(results).toEqual([2, 1, 3, 1]);
     });
@@ -509,7 +491,6 @@ describe('ReactDOMServer', () => {
       const markup = ReactDOMServer.renderToStaticMarkup(
         <App value={1} reentrant={true} />,
       );
-      // Extract the numbers rendered by the consumers
       const results = markup.match(/\d+/g).map(Number);
       const reentrantResults = reentrantMarkup.match(/\d+/g).map(Number);
       expect(results).toEqual([2, 1, 3, 1]);
@@ -560,7 +541,7 @@ describe('ReactDOMServer', () => {
         },
       }));
 
-      expect(ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />)).toEqual(
+      expect(ReactDOMServer.renderToString(<LazyFoo id="foo" />)).toEqual(
         '<div id="foo">lazy</div>',
       );
     });
@@ -572,7 +553,7 @@ describe('ReactDOMServer', () => {
         },
       }));
 
-      expect(() => ReactDOMServer.renderToStaticMarkup(<LazyFoo />)).toThrow(
+      expect(() => ReactDOMServer.renderToString(<LazyFoo />)).toThrow(
         'Bad lazy',
       );
     });
@@ -619,7 +600,6 @@ describe('ReactDOMServer', () => {
 
     const markup = ReactDOMServer.renderToStaticMarkup(<Foo />);
     expect(markup).toBe('<div>hello</div>');
-    // No additional warnings are expected
     jest.runOnlyPendingTimers();
   });
 
@@ -653,60 +633,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -759,7 +685,6 @@ describe('ReactDOMServer', () => {
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
         '    in inPUT (at **)',
-      // linearGradient doesn't warn
       '<iFrame /> is using incorrect casing. ' +
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
@@ -801,27 +726,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -903,36 +807,30 @@ describe('ReactDOMServer', () => {
 
     ReactDOMServer.renderToString(<App />);
     assertConsoleErrorDev([
-      // ReactDOMServer(App > div > span)
       'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
       'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in blink (at **)\n' +
         '    in App2 (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
       'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in Child2 (at **)\n' +
         '    in App2 (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child > span)
       'Invalid ARIA attribute `ariaTypo4`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > font)
       'Invalid ARIA attribute `ariaTypo5`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in font (at **)\n' +
         '    in App (at **)',
     ]);
   });
 
-  // @gate enableRenderableContext || !__DEV__
   it('should warn if an invalid contextType is defined', () => {
     const Context = React.createContext();
     class ComponentA extends React.Component {
@@ -978,8 +876,6 @@ describe('ReactDOMServer', () => {
 
   it('should warn when class contextType is undefined', () => {
     class Foo extends React.Component {
-      // This commonly happens with circular deps
-      // https://github.com/facebook/react/issues/13969
       static contextType = undefined;
       render() {
         return this.context.hello.world;
@@ -1002,11 +898,7 @@ describe('ReactDOMServer', () => {
 
   it('should warn when class contextType is an object', () => {
     class Foo extends React.Component {
-      // Can happen due to a typo
-      static contextType = {
-        x: 42,
-        y: 'hello',
-      };
+      static contextType = {x: 42, y: 'hello'};
       render() {
         return this.context.hello.world;
       }
@@ -1078,4 +970,21 @@ describe('ReactDOMServer', () => {
       expect(output).toBe(`<my-custom-element></my-custom-element>`);
     });
   });
+
+  it('can import react-dom in Node environment', () => {
+    if (
+      typeof requestAnimationFrame !== 'undefined' ||
+      global.hasOwnProperty('requestAnimationFrame') ||
+      typeof requestIdleCallback !== 'undefined' ||
+      global.hasOwnProperty('requestIdleCallback') ||
+      typeof window !== 'undefined' ||
+      global.hasOwnProperty('window')
+    ) {
+      throw new Error('Expected this test to run in a Node environment.');
+    }
+    jest.resetModules();
+    expect(() => {
+      require('react-dom');
+    }).not.toThrow();
+  });
 });
\ No newline at end of file
