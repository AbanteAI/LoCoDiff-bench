--- react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual)@@ -130,9 +130,7 @@         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>' + 'Component name: <!-- -->TestComponent' + '</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -145,7 +143,7 @@     });
 
     it('should throw with silly args', () => {
-      expect(
+      expect(() =>
         ReactDOMServer.renderToString.bind(ReactDOMServer, {x: 123}),
       ).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
@@ -288,7 +286,7 @@     });
 
     it('should throw with silly args', () => {
-      expect(
+      expect(() =>
         ReactDOMServer.renderToStaticMarkup.bind(ReactDOMServer, {x: 123}),
       ).toThrowError(
         'Objects are not valid as a React child (found: object with keys {x})',
@@ -538,9 +536,8 @@         }
       }
 
-      expect(
-        ReactDOMServer.renderToString.bind(
-          ReactDOMServer,
+      expect(() =>
+        ReactDOMServer.renderToString(
           <div>
             <StaticComponent />
             <Component />
@@ -651,6 +648,39 @@     );
     const markup = ReactDOMServer.renderToStaticMarkup(<Baz />);
     expect(markup).toBe('<div></div>');
+  });
+
+  it('throws for unsupported types on the server', () => {
+    expect(() => {
+      ReactDOMServer.renderToString(<React.Suspense />);
+    }).toThrow('ReactDOMServer does not yet support Suspense.');
+
+    async function fakeImport(result) {
+      return {default: result};
+    }
+
+    expect(() => {
+      const LazyFoo = React.lazy(() =>
+        fakeImport(
+          new Promise(resolve =>
+            resolve(function Foo() {
+              return <div />;
+            }),
+          ),
+        ),
+      );
+      ReactDOMServer.renderToString(<LazyFoo />);
+    }).toThrow('ReactDOMServer does not yet support Suspense.');
+  });
+
+  it('throws when suspending on the server', () => {
+    function AsyncFoo() {
+      throw new Promise(() => {});
+    }
+
+    expect(() => {
+      ReactDOMServer.renderToString(<AsyncFoo />);
+    }).toThrow('ReactDOMServer does not yet support Suspense.');
   });
 
   it('does not get confused by throwing null', () => {
@@ -844,7 +874,7 @@     }
 
     function Child() {
-      return [<A key="1" />, <B key="2" />, <span ariaTypo2="no" key="3" />];
+      return [<A key="1" />, <B key="2" />, <span ariaTypo2="no" />];
     }
 
     function App() {
