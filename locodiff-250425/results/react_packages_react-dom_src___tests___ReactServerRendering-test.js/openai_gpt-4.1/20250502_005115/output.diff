
index 0921f10c..00e7ddd5 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmp9ddpzpu0_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpln4lodeq_actual.txt	
@@ -621,6 +621,16 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div>hello</div>');
     // No additional warnings are expected
     jest.runOnlyPendingTimers();
+    assertConsoleErrorDev(
+      [
+        'Can only update a mounting component. ' +
+          'This usually means you called setState() outside componentWillMount() on the server. ' +
+          'This is a no-op.\n' +
+          '\n' +
+          'Please check the code for the Foo component.',
+      ],
+      {withoutStack: true},
+    );
   });
 
   it('warns with a no-op when an async forceUpdate is triggered', () => {
@@ -653,60 +663,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -801,27 +757,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -909,10 +844,7 @@ describe('ReactDOMServer', () => {
         '    in App (at **)',
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
       'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in blink (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
+        '    in blink (at **)',
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
       'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
@@ -935,6 +867,7 @@ describe('ReactDOMServer', () => {
   // @gate enableRenderableContext || !__DEV__
   it('should warn if an invalid contextType is defined', () => {
     const Context = React.createContext();
+
     class ComponentA extends React.Component {
       static contextType = Context.Consumer;
       render() {
