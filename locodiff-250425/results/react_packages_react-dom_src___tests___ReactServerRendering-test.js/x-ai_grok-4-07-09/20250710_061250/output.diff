
index 0921f10c0..f92caa848 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmpq61huwlf_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmp2rh1tvce_actual.txt	
@@ -18,7 +18,6 @@ let assertConsoleErrorDev;
 
 describe('ReactDOMServer', () => {
   beforeEach(() => {
-    jest.resetModules();
     React = require('react');
     PropTypes = require('prop-types');
     ReactDOMServer = require('react-dom/server');
@@ -377,11 +376,7 @@ describe('ReactDOMServer', () => {
         text: PropTypes.string,
       };
 
-      const markup = ReactDOMServer.renderToStaticMarkup(
-        <ContextProvider>
-          <Component />
-        </ContextProvider>,
-      );
+      let markup;
       assertConsoleErrorDev([
         'ContextProvider uses the legacy childContextTypes API which will soon be removed. ' +
           'Use React.createContext() instead. (https://react.dev/link/legacy-context)\n' +
@@ -390,6 +385,11 @@ describe('ReactDOMServer', () => {
           'Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)\n' +
           '    in Component (at **)',
       ]);
+      markup = ReactDOMServer.renderToStaticMarkup(
+        <ContextProvider>
+          <Component />
+        </ContextProvider>,
+      );
       expect(markup).toContain('hello, world');
     });
 
@@ -548,47 +548,6 @@ describe('ReactDOMServer', () => {
         ),
       ).not.toThrow();
     });
-
-    it('renders synchronously resolved lazy component', () => {
-      const LazyFoo = React.lazy(() => ({
-        then(resolve) {
-          resolve({
-            default: function Foo({id}) {
-              return <div id={id}>lazy</div>;
-            },
-          });
-        },
-      }));
-
-      expect(ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />)).toEqual(
-        '<div id="foo">lazy</div>',
-      );
-    });
-
-    it('throws error from synchronously rejected lazy component', () => {
-      const LazyFoo = React.lazy(() => ({
-        then(resolve, reject) {
-          reject(new Error('Bad lazy'));
-        },
-      }));
-
-      expect(() => ReactDOMServer.renderToStaticMarkup(<LazyFoo />)).toThrow(
-        'Bad lazy',
-      );
-    });
-
-    it('aborts synchronously any suspended tasks and renders their fallbacks', () => {
-      const promise = new Promise(res => {});
-      function Suspender() {
-        throw promise;
-      }
-      const response = ReactDOMServer.renderToStaticMarkup(
-        <React.Suspense fallback={'fallback'}>
-          <Suspender />
-        </React.Suspense>,
-      );
-      expect(response).toEqual('fallback');
-    });
   });
 
   it('warns with a no-op when an async setState is triggered', () => {
@@ -653,60 +612,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -759,7 +664,6 @@ describe('ReactDOMServer', () => {
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
         '    in inPUT (at **)',
-      // linearGradient doesn't warn
       '<iFrame /> is using incorrect casing. ' +
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
@@ -801,77 +705,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
-  it('includes a useful stack in warnings', () => {
-    function A() {
-      return null;
-    }
-
-    function B() {
-      return (
-        <font>
-          <C>
-            <span ariaTypo="no" />
-          </C>
-        </font>
-      );
-    }
-
-    class C extends React.Component {
-      render() {
-        return <b>{this.props.children}</b>;
-      }
-    }
-
-    function Child() {
-      return [<A key="1" />, <B key="2" />, <span ariaTypo2="no" key="3" />];
-    }
-
-    function App() {
-      return (
-        <div>
-          <section />
-          <span>
-            <Child />
-          </span>
-        </div>
-      );
-    }
-
-    ReactDOMServer.renderToString(<App />);
-    assertConsoleErrorDev([
-      'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in B (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-    ]);
-  });
-
   it('reports stacks with re-entrant renderToString() calls', () => {
     function Child2(props) {
       return <span ariaTypo3="no">{props.children}</span>;
@@ -903,29 +736,26 @@ describe('ReactDOMServer', () => {
 
     ReactDOMServer.renderToString(<App />);
     assertConsoleErrorDev([
-      // ReactDOMServer(App > div > span)
       'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
+        '    in B (at **)\n' +
+        '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
       'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in blink (at **)\n' +
         '    in App2 (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
       'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in Child2 (at **)\n' +
         '    in App2 (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > Child > span)
       'Invalid ARIA attribute `ariaTypo4`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
         '    in Child (at **)\n' +
         '    in App (at **)',
-      // ReactDOMServer(App > div > font)
       'Invalid ARIA attribute `ariaTypo5`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in font (at **)\n' +
         '    in App (at **)',
