
index 0921f10c0..da4fcad01 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmp5r9_726r_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpsd_od4ej_actual.txt	
@@ -130,9 +130,7 @@ describe('ReactDOMServer', () => {
         const response = ReactDOMServer.renderToString(<TestComponent />);
 
         expect(response).toMatch(
-          new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
-          ),
+          new RegExp('<span>' + 'Component name: <!-- -->TestComponent' + '</span>'),
         );
         expect(lifecycle).toEqual([
           'getInitialState',
@@ -560,9 +558,9 @@ describe('ReactDOMServer', () => {
         },
       }));
 
-      expect(ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />)).toEqual(
-        '<div id="foo">lazy</div>',
-      );
+      expect(
+        ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />),
+      ).toEqual('<div id="foo">lazy</div>');
     });
 
     it('throws error from synchronously rejected lazy component', () => {
@@ -653,60 +651,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -758,12 +702,20 @@ describe('ReactDOMServer', () => {
       '<inPUT /> is using incorrect casing. ' +
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
-        '    in inPUT (at **)',
+        '    in inPUT (at **)' +
+        (gate('enableOwnerStacks') ? '' : '\n    in div (at **)'),
       // linearGradient doesn't warn
       '<iFrame /> is using incorrect casing. ' +
         'Use PascalCase for React components, ' +
         'or lowercase for HTML elements.\n' +
-        '    in iFrame (at **)',
+        '    in iFrame (at **)' +
+        (gate('enableOwnerStacks')
+          ? ''
+          : '\n    in foreignObject (at **)' +
+            '\n    in g (at **)' +
+            '\n    in CompositeG (at **)' +
+            '\n    in svg (at **)' +
+            '\n    in div (at **)'),
     ]);
   });
 
@@ -801,27 +753,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -861,14 +792,30 @@ describe('ReactDOMServer', () => {
     ReactDOMServer.renderToString(<App />);
     assertConsoleErrorDev([
       'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in B (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
+        (gate(flags => flags.enableOwnerStacks)
+          ? '    in span (at **)\n' +
+            '    in B (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in App (at **)'
+          : '    in span (at **)\n' +
+            '    in b (at **)\n' +
+            '    in C (at **)\n' +
+            '    in font (at **)\n' +
+            '    in B (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in span (at **)\n' +
+            '    in div (at **)\n' +
+            '    in App (at **)'),
       'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
+        (gate(flags => flags.enableOwnerStacks)
+          ? '    in span (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in App (at **)'
+          : '    in span (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in span (at **)\n' +
+            '    in div (at **)\n' +
+            '    in App (at **)'),
     ]);
   });
 
@@ -905,177 +852,24 @@ describe('ReactDOMServer', () => {
     assertConsoleErrorDev([
       // ReactDOMServer(App > div > span)
       'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in App (at **)',
+        (gate(flags => flags.enableOwnerStacks)
+          ? '    in span (at **)\n' + '    in App (at **)'
+          : '    in span (at **)\n' +
+            '    in div (at **)\n' +
+            '    in App (at **)'),
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
       'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in blink (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
+        (gate(flags => flags.enableOwnerStacks)
+          ? '    in blink (at **)\n' +
+            '    in App2 (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in App (at **)'
+          : '    in blink (at **)'),
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
       'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child2 (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > Child > span)
-      'Invalid ARIA attribute `ariaTypo4`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in span (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
-      // ReactDOMServer(App > div > font)
-      'Invalid ARIA attribute `ariaTypo5`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in font (at **)\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  // @gate enableRenderableContext || !__DEV__
-  it('should warn if an invalid contextType is defined', () => {
-    const Context = React.createContext();
-    class ComponentA extends React.Component {
-      static contextType = Context.Consumer;
-      render() {
-        return <div />;
-      }
-    }
-
-    ReactDOMServer.renderToString(<ComponentA />);
-    assertConsoleErrorDev([
-      'ComponentA defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'Did you accidentally pass the Context.Consumer instead?\n' +
-        '    in ComponentA (at **)',
-    ]);
-
-    // Warnings should be deduped by component type
-    ReactDOMServer.renderToString(<ComponentA />);
-
-    class ComponentB extends React.Component {
-      static contextType = Context.Provider;
-      render() {
-        return <div />;
-      }
-    }
-    // Does not warn because Context === Context.Provider.
-    ReactDOMServer.renderToString(<ComponentB />);
-  });
-
-  it('should not warn when class contextType is null', () => {
-    class Foo extends React.Component {
-      static contextType = null; // Handy for conditional declaration
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-  });
-
-  it('should warn when class contextType is undefined', () => {
-    class Foo extends React.Component {
-      // This commonly happens with circular deps
-      // https://github.com/facebook/react/issues/13969
-      static contextType = undefined;
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to undefined. ' +
-        'This can be caused by a typo or by mixing up named and default imports. ' +
-        'This can also happen due to a circular dependency, ' +
-        'so try moving the createContext() call to a separate file.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  it('should warn when class contextType is an object', () => {
-    class Foo extends React.Component {
-      // Can happen due to a typo
-      static contextType = {
-        x: 42,
-        y: 'hello',
-      };
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'hello' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to an object with keys {x, y}.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  it('should warn when class contextType is a primitive', () => {
-    class Foo extends React.Component {
-      static contextType = 'foo';
-      render() {
-        return this.context.hello.world;
-      }
-    }
-
-    expect(() => {
-      ReactDOMServer.renderToString(<Foo />);
-    }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to a string.\n' +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  describe('custom element server rendering', () => {
-    it('String properties should be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo="bar" />,
-      );
-      expect(output).toBe(`<my-custom-element foo="bar"></my-custom-element>`);
-    });
-
-    it('Number properties should be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={5} />,
-      );
-      expect(output).toBe(`<my-custom-element foo="5"></my-custom-element>`);
-    });
-
-    it('Object properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={{foo: 'bar'}} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-
-    it('Array properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={['foo', 'bar']} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-
-    it('Function properties should not be server rendered for custom elements', () => {
-      const output = ReactDOMServer.renderToString(
-        <my-custom-element foo={() => console.log('bar')} />,
-      );
-      expect(output).toBe(`<my-custom-element></my-custom-element>`);
-    });
-  });
-});
\ No newline at end of file
+        (gate(flags => flags.enableOwnerStacks)
+          ? '    in span (at **)\n' +
+            '    in Child2 (at **)\n' +
+            '    in App2 (at **)\n' +
+            '    in Child (at **)\n' +
+            '    in App (at...'
\ No newline at end of file
