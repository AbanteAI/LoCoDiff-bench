
index 0921f10c..3f1e8a35 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmp0xufj_n8_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpcl27bg4w_actual.txt	
@@ -131,7 +131,9 @@ describe('ReactDOMServer', () => {
 
         expect(response).toMatch(
           new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
+            '<span>' +
+              'Component name: <!-- -->TestComponent' +
+              '</span>',
           ),
         );
         expect(lifecycle).toEqual([
@@ -393,129 +395,6 @@ describe('ReactDOMServer', () => {
       expect(markup).toContain('hello, world');
     });
 
-    it('renders with new context API', () => {
-      const Context = React.createContext(0);
-
-      function Consumer(props) {
-        return (
-          <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>
-        );
-      }
-
-      const Indirection = React.Fragment;
-
-      function App(props) {
-        return (
-          <Context.Provider value={props.value}>
-            <Context.Provider value={2}>
-              <Consumer />
-            </Context.Provider>
-            <Indirection>
-              <Indirection>
-                <Consumer />
-                <Context.Provider value={3}>
-                  <Consumer />
-                </Context.Provider>
-              </Indirection>
-            </Indirection>
-            <Consumer />
-          </Context.Provider>
-        );
-      }
-
-      const markup = ReactDOMServer.renderToStaticMarkup(<App value={1} />);
-      // Extract the numbers rendered by the consumers
-      const results = markup.match(/\d+/g).map(Number);
-      expect(results).toEqual([2, 1, 3, 1]);
-    });
-
-    it('renders with dispatcher.readContext mechanism', () => {
-      const Context = React.createContext(0);
-
-      function readContext(context) {
-        return ReactSharedInternals.H.readContext(context);
-      }
-
-      function Consumer(props) {
-        return 'Result: ' + readContext(Context);
-      }
-
-      const Indirection = React.Fragment;
-
-      function App(props) {
-        return (
-          <Context.Provider value={props.value}>
-            <Context.Provider value={2}>
-              <Consumer />
-            </Context.Provider>
-            <Indirection>
-              <Indirection>
-                <Consumer />
-                <Context.Provider value={3}>
-                  <Consumer />
-                </Context.Provider>
-              </Indirection>
-            </Indirection>
-            <Consumer />
-          </Context.Provider>
-        );
-      }
-
-      const markup = ReactDOMServer.renderToStaticMarkup(<App value={1} />);
-      // Extract the numbers rendered by the consumers
-      const results = markup.match(/\d+/g).map(Number);
-      expect(results).toEqual([2, 1, 3, 1]);
-    });
-
-    it('renders context API, reentrancy', () => {
-      const Context = React.createContext(0);
-
-      function Consumer(props) {
-        return (
-          <Context.Consumer>{value => 'Result: ' + value}</Context.Consumer>
-        );
-      }
-
-      let reentrantMarkup;
-      function Reentrant() {
-        reentrantMarkup = ReactDOMServer.renderToStaticMarkup(
-          <App value={1} reentrant={false} />,
-        );
-        return null;
-      }
-
-      const Indirection = React.Fragment;
-
-      function App(props) {
-        return (
-          <Context.Provider value={props.value}>
-            {props.reentrant && <Reentrant />}
-            <Context.Provider value={2}>
-              <Consumer />
-            </Context.Provider>
-            <Indirection>
-              <Indirection>
-                <Consumer />
-                <Context.Provider value={3}>
-                  <Consumer />
-                </Context.Provider>
-              </Indirection>
-            </Indirection>
-            <Consumer />
-          </Context.Provider>
-        );
-      }
-
-      const markup = ReactDOMServer.renderToStaticMarkup(
-        <App value={1} reentrant={true} />,
-      );
-      // Extract the numbers rendered by the consumers
-      const results = markup.match(/\d+/g).map(Number);
-      const reentrantResults = reentrantMarkup.match(/\d+/g).map(Number);
-      expect(results).toEqual([2, 1, 3, 1]);
-      expect(reentrantResults).toEqual([2, 1, 3, 1]);
-    });
-
     it('renders components with different batching strategies', () => {
       class StaticComponent extends React.Component {
         render() {
@@ -560,9 +439,9 @@ describe('ReactDOMServer', () => {
         },
       }));
 
-      expect(ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />)).toEqual(
-        '<div id="foo">lazy</div>',
-      );
+      expect(
+        ReactDOMServer.renderToStaticMarkup(<LazyFoo id="foo" />),
+      ).toEqual('<div id="foo">lazy</div>');
     });
 
     it('throws error from synchronously rejected lazy component', () => {
@@ -572,9 +451,9 @@ describe('ReactDOMServer', () => {
         },
       }));
 
-      expect(() => ReactDOMServer.renderToStaticMarkup(<LazyFoo />)).toThrow(
-        'Bad lazy',
-      );
+      expect(() =>
+        ReactDOMServer.renderToStaticMarkup(<LazyFoo />),
+      ).toThrow('Bad lazy');
     });
 
     it('aborts synchronously any suspended tasks and renders their fallbacks', () => {
@@ -591,6 +470,17 @@ describe('ReactDOMServer', () => {
     });
   });
 
+  describe('renderToReadableStream', () => {
+    it('should generate simple markup', () => {
+      const SuccessfulElement = React.createElement(() => <img />);
+      expect(() => {
+        const response =
+          ReactDOMServer.renderToReadableStream(SuccessfulElement);
+        expect(response).toBeDefined();
+      }).not.toThrow();
+    });
+  });
+
   it('warns with a no-op when an async setState is triggered', () => {
     class Foo extends React.Component {
       UNSAFE_componentWillMount() {
@@ -609,8 +499,8 @@ describe('ReactDOMServer', () => {
     assertConsoleErrorDev(
       [
         'Can only update a mounting component. ' +
-          'This usually means you called setState() outside componentWillMount() on the server. ' +
-          'This is a no-op.\n' +
+          'This usually means you called setState() outside componentWillMount() on the server.' +
+          ' This is a no-op.\n' +
           '\n' +
           'Please check the code for the Foo component.',
       ],
@@ -653,60 +543,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -735,7 +571,7 @@ describe('ReactDOMServer', () => {
     }
   });
 
-  it('warns about lowercase html but not in svg tags', () => {
+  it('warns about incorrect html casing but not in svg tags', () => {
     function CompositeG(props) {
       // Make sure namespace passes through composites
       return <g>{props.children}</g>;
@@ -801,27 +637,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -908,11 +723,8 @@ describe('ReactDOMServer', () => {
         '    in span (at **)\n' +
         '    in App (at **)',
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2) >>> ReactDOMServer(blink)
-      'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in blink (at **)\n' +
-        '    in App2 (at **)\n' +
-        '    in Child (at **)\n' +
-        '    in App (at **)',
+      'Invalid ARIA attribute `ariaTypo2`. ARIA attributes follow the pattern aria-* and must be lowercase.' +
+        '\n    in blink (at **)',
       // ReactDOMServer(App > div > Child) >>> ReactDOMServer(App2 > Child2 > span)
       'Invalid ARIA attribute `ariaTypo3`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
         '    in span (at **)\n' +
@@ -943,12 +755,13 @@ describe('ReactDOMServer', () => {
     }
 
     ReactDOMServer.renderToString(<ComponentA />);
-    assertConsoleErrorDev([
-      'ComponentA defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'Did you accidentally pass the Context.Consumer instead?\n' +
-        '    in ComponentA (at **)',
-    ]);
+    assertConsoleErrorDev(
+      [
+        'ComponentA defines an invalid contextType. contextType should point to the Context object returned by React.createContext(). Did you accidentally pass the Context.Consumer instead?\n' +
+          '    in ComponentA (at **)',
+      ],
+      {withoutStack: true},
+    );
 
     // Warnings should be deduped by component type
     ReactDOMServer.renderToString(<ComponentA />);
@@ -989,15 +802,13 @@ describe('ReactDOMServer', () => {
     expect(() => {
       ReactDOMServer.renderToString(<Foo />);
     }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to undefined. ' +
-        'This can be caused by a typo or by mixing up named and default imports. ' +
-        'This can also happen due to a circular dependency, ' +
-        'so try moving the createContext() call to a separate file.\n' +
-        '    in Foo (at **)',
-    ]);
+    assertConsoleErrorDev(
+      [
+        'Foo defines an invalid contextType. contextType should point to the Context object returned by React.createContext(). However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.\n' +
+          '    in Foo (at **)',
+      ],
+      {withoutStack: true},
+    );
   });
 
   it('should warn when class contextType is an object', () => {
@@ -1015,12 +826,13 @@ describe('ReactDOMServer', () => {
     expect(() => {
       ReactDOMServer.renderToString(<Foo />);
     }).toThrow("Cannot read property 'hello' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to an object with keys {x, y}.\n' +
-        '    in Foo (at **)',
-    ]);
+    assertConsoleErrorDev(
+      [
+        'Foo defines an invalid contextType. contextType should point to the Context object returned by React.createContext(). However, it is set to an object with keys {x, y}.\n' +
+          '    in Foo (at **)',
+      ],
+      {withoutStack: true},
+    );
   });
 
   it('should warn when class contextType is a primitive', () => {
@@ -1034,12 +846,13 @@ describe('ReactDOMServer', () => {
     expect(() => {
       ReactDOMServer.renderToString(<Foo />);
     }).toThrow("Cannot read property 'world' of undefined");
-    assertConsoleErrorDev([
-      'Foo defines an invalid contextType. ' +
-        'contextType should point to the Context object returned by React.createContext(). ' +
-        'However, it is set to a string.\n' +
-        '    in Foo (at **)',
-    ]);
+    assertConsoleErrorDev(
+      [
+        'Foo defines an invalid contextType. contextType should point to the Context object returned by React.createContext(). However, it is set to a string.\n' +
+          '    in Foo (at **)',
+      ],
+      {withoutStack: true},
+    );
   });
 
   describe('custom element server rendering', () => {
