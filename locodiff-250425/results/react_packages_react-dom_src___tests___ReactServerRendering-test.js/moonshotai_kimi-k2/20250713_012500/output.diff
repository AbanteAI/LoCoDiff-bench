
index 0921f10c0..23a1d3a2f 100644
--- a/react_packages_react-dom_src___tests___ReactServerRendering-test.js_expectedoutput.txt (expected):tmp/tmp0rawg41p_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactServerRendering-test.js_extracted.txt (actual):tmp/tmpzo1srm_4_actual.txt	
@@ -73,8 +73,7 @@ describe('ReactDOMServer', () => {
       expect(response).toMatch(
         new RegExp(
           '<div>' +
-            '<span' +
-            '>' +
+            '<span>' +
             'My name is <!-- -->child' +
             '</span>' +
             '</div>',
@@ -131,7 +130,9 @@ describe('ReactDOMServer', () => {
 
         expect(response).toMatch(
           new RegExp(
-            '<span>' + 'Component name: <!-- -->TestComponent' + '</span>',
+            '<span>' +
+              'Component name: <!-- -->TestComponent' +
+              '</span>',
           ),
         );
         expect(lifecycle).toEqual([
@@ -345,7 +346,6 @@ describe('ReactDOMServer', () => {
       expect(markup).toContain('hello, world');
     });
 
-    // @gate !disableLegacyContext
     it('renders with context when using custom constructor', () => {
       class Component extends React.Component {
         constructor() {
@@ -576,19 +576,6 @@ describe('ReactDOMServer', () => {
         'Bad lazy',
       );
     });
-
-    it('aborts synchronously any suspended tasks and renders their fallbacks', () => {
-      const promise = new Promise(res => {});
-      function Suspender() {
-        throw promise;
-      }
-      const response = ReactDOMServer.renderToStaticMarkup(
-        <React.Suspense fallback={'fallback'}>
-          <Suspender />
-        </React.Suspense>,
-      );
-      expect(response).toEqual('fallback');
-    });
   });
 
   it('warns with a no-op when an async setState is triggered', () => {
@@ -653,60 +640,6 @@ describe('ReactDOMServer', () => {
     expect(markup).toBe('<div></div>');
   });
 
-  it('does not get confused by throwing null', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw null;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(null);
-  });
-
-  it('does not get confused by throwing undefined', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw undefined;
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe(undefined);
-  });
-
-  it('does not get confused by throwing a primitive', () => {
-    function Bad() {
-      // eslint-disable-next-line no-throw-literal
-      throw 'foo';
-    }
-
-    let didError;
-    let error;
-    try {
-      ReactDOMServer.renderToString(<Bad />);
-    } catch (err) {
-      didError = true;
-      error = err;
-    }
-    expect(didError).toBe(true);
-    expect(error).toBe('foo');
-  });
-
   it('should throw (in dev) when children are mutated during render', () => {
     function Wrapper(props) {
       props.children[1] = <p key={1} />; // Mutation is illegal
@@ -778,6 +711,19 @@ describe('ReactDOMServer', () => {
     ]);
   });
 
+  it('aborts synchronously any suspended tasks and renders their fallbacks', () => {
+    const promise = new Promise(res => {});
+    function Suspender() {
+      throw promise;
+    }
+    const response = ReactDOMServer.renderToStaticMarkup(
+      <React.Suspense fallback={'fallback'}>
+        <Suspender />
+      </React.Suspense>,
+    );
+    expect(response).toEqual('fallback');
+  });
+
   it('should warn when server rendering a class with a render method that does not extend React.Component', () => {
     class ClassWithRenderNotExtended {
       render() {
@@ -801,27 +747,6 @@ describe('ReactDOMServer', () => {
     }).toThrow(TypeError);
   });
 
-  // We're just testing importing, not using it.
-  // It is important because even isomorphic components may import it.
-  it('can import react-dom in Node environment', () => {
-    if (
-      typeof requestAnimationFrame !== 'undefined' ||
-      global.hasOwnProperty('requestAnimationFrame') ||
-      typeof requestIdleCallback !== 'undefined' ||
-      global.hasOwnProperty('requestIdleCallback') ||
-      typeof window !== 'undefined' ||
-      global.hasOwnProperty('window')
-    ) {
-      // Don't remove this. This test is specifically checking
-      // what happens when they *don't* exist. It's useless otherwise.
-      throw new Error('Expected this test to run in a Node environment.');
-    }
-    jest.resetModules();
-    expect(() => {
-      require('react-dom');
-    }).not.toThrow();
-  });
-
   it('includes a useful stack in warnings', () => {
     function A() {
       return null;
@@ -932,7 +857,6 @@ describe('ReactDOMServer', () => {
     ]);
   });
 
-  // @gate enableRenderableContext || !__DEV__
   it('should warn if an invalid contextType is defined', () => {
     const Context = React.createContext();
     class ComponentA extends React.Component {
