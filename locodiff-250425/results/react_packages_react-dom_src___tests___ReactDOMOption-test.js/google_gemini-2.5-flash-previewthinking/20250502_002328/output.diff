--- react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual)@@ -143,7 +143,7 @@     // This is similar to <fbt>.
     // We don't toString it because you must instead provide a value prop.
     const obj = {
-      $$typeof: Symbol.for('react.element'),
+      $$typeof: Symbol.for('react.transitional.element'),
       type: props => props.content,
       ref: null,
       key: null,
@@ -186,7 +186,7 @@     const stub = <option dangerouslySetInnerHTML={{__html: 'foobar'}} />;
     const container = await renderIntoDocument(stub);
     assertConsoleErrorDev([
-      'Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.\n' +
+      'Pass a `value` prop if you set dangerouslySetInnerHTML so React knows which value should be selected.\n' +
         '    in option (at **)',
     ]);
 
@@ -197,14 +197,14 @@     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     let option;
-    await act(() => {
+    await act(async () => {
       root.render(<option value="" />);
     });
     option = container.firstChild;
     expect(option.hasAttribute('value')).toBe(true);
     expect(option.getAttribute('value')).toBe('');
 
-    await act(() => {
+    await act(async () => {
       root.render(<option value="lava" />);
     });
     option = container.firstChild;
@@ -225,14 +225,14 @@     const options = stub.props.children;
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
+    await act(async () => {
       root.render(stub);
     });
     node = container.firstChild;
 
     expect(node.selectedIndex).toBe(1);
 
-    await act(() => {
+    await act(async () => {
       root.render(<select value="gorilla">{options}</select>);
     });
     node = container.firstChild;
