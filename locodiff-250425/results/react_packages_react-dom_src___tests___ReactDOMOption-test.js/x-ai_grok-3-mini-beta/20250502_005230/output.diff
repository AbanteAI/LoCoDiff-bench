
index bb07c867..176e1840 100644
--- a/react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected):tmp/tmpwj63us9l_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual):tmp/tmp6si5vq87_actual.txt	
@@ -113,46 +113,42 @@ describe('ReactDOMOption', () => {
   });
 
   it('should throw on object children', async () => {
+    await expect(async () => renderIntoDocument(<option>{{}}</option>)).rejects.toThrow(
+      'Objects are not valid as a React child'
+    );
     await expect(async () =>
-      renderIntoDocument(<option>{{}}</option>),
+      renderIntoDocument(<option>{[{}]}</option>)
     ).rejects.toThrow('Objects are not valid as a React child');
-    await expect(async () => {
-      await renderIntoDocument(<option>{[{}]}</option>);
-    }).rejects.toThrow('Objects are not valid as a React child');
-    await expect(async () => {
-      await renderIntoDocument(
+    await expect(async () =>
+      renderIntoDocument(
         <option>
           {{}}
           <span />
-        </option>,
-      );
-    }).rejects.toThrow('Objects are not valid as a React child');
-    await expect(async () => {
-      await renderIntoDocument(
+        </option>
+      )
+    ).rejects.toThrow('Objects are not valid as a React child');
+    await expect(async () =>
+      renderIntoDocument(
         <option>
           {'1'}
           {{}}
           {2}
-        </option>,
-      );
-    }).rejects.toThrow('Objects are not valid as a React child');
+        </option>
+      )
+    ).rejects.toThrow('Objects are not valid as a React child');
   });
 
-  // @gate www && !renameElementSymbol
   it('should support element-ish child', async () => {
     // This is similar to <fbt>.
     // We don't toString it because you must instead provide a value prop.
     const obj = {
-      $$typeof: Symbol.for('react.element'),
+      $$typeof: Symbol.for('react.transitional.element'),
       type: props => props.content,
       ref: null,
       key: null,
       props: {
         content: 'hello',
       },
-      toString() {
-        return this.props.content;
-      },
     };
 
     let container = await renderIntoDocument(<option value="a">{obj}</option>);
@@ -170,7 +166,7 @@ describe('ReactDOMOption', () => {
         {'1'}
         {obj}
         {2}
-      </option>,
+      </option>
     );
     expect(container.firstChild.innerHTML).toBe('1hello2');
     expect(container.firstChild.value).toBe('hello');
@@ -214,7 +210,6 @@ describe('ReactDOMOption', () => {
 
   it('should allow ignoring `value` on option', async () => {
     const a = 'a';
-    let node;
     const stub = (
       <select value="giraffe" onChange={() => {}}>
         <option>monkey</option>
@@ -225,6 +220,7 @@ describe('ReactDOMOption', () => {
     const options = stub.props.children;
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
+    let node;
     await act(() => {
       root.render(stub);
     });
