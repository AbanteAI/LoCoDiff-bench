
index bb07c867e..db5017c2c 100644
--- a/react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected):tmp/tmpfodsruw6_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual):tmp/tmpfkbnd_45_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -28,8 +26,9 @@ describe('ReactDOMOption', () => {
 
   async function renderIntoDocument(children) {
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(async () => root.render(children));
+    await act(async () => {
+      ReactDOMClient.createRoot(container).render(children);
+    });
     return container;
   }
 
@@ -40,7 +39,6 @@ describe('ReactDOMOption', () => {
       </option>
     );
     const container = await renderIntoDocument(stub);
-
     expect(container.firstChild.innerHTML).toBe('1 foo');
   });
 
@@ -108,7 +106,6 @@ describe('ReactDOMOption', () => {
       </option>
     );
     const container = await renderIntoDocument(stub);
-
     expect(container.firstChild.innerHTML).toBe('1  2');
   });
 
@@ -143,7 +140,7 @@ describe('ReactDOMOption', () => {
     // This is similar to <fbt>.
     // We don't toString it because you must instead provide a value prop.
     const obj = {
-      $$typeof: Symbol.for('react.element'),
+      $$typeof: Symbol.for('react.transitional.element'),
       type: props => props.content,
       ref: null,
       key: null,
@@ -214,7 +211,6 @@ describe('ReactDOMOption', () => {
 
   it('should allow ignoring `value` on option', async () => {
     const a = 'a';
-    let node;
     const stub = (
       <select value="giraffe" onChange={() => {}}>
         <option>monkey</option>
@@ -228,8 +224,7 @@ describe('ReactDOMOption', () => {
     await act(() => {
       root.render(stub);
     });
-    node = container.firstChild;
-
+    let node = container.firstChild;
     expect(node.selectedIndex).toBe(1);
 
     await act(() => {
@@ -250,7 +245,6 @@ describe('ReactDOMOption', () => {
     );
 
     const container = document.createElement('div');
-
     container.innerHTML = ReactDOMServer.renderToString(children);
 
     expect(container.firstChild.getAttribute('value')).toBe(null);
