
index bb07c867..877fbec8 100644
--- a/react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected):tmp/tmpzu_6gf4z_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual):tmp/tmph6ez26jp_actual.txt	
@@ -40,7 +40,6 @@ describe('ReactDOMOption', () => {
       </option>
     );
     const container = await renderIntoDocument(stub);
-
     expect(container.firstChild.innerHTML).toBe('1 foo');
   });
 
@@ -108,7 +107,6 @@ describe('ReactDOMOption', () => {
       </option>
     );
     const container = await renderIntoDocument(stub);
-
     expect(container.firstChild.innerHTML).toBe('1  2');
   });
 
@@ -155,13 +153,19 @@ describe('ReactDOMOption', () => {
       },
     };
 
-    let container = await renderIntoDocument(<option value="a">{obj}</option>);
+    let container = await renderIntoDocument(
+      <option value="a">{obj}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
 
-    container = await renderIntoDocument(<option value="b">{[obj]}</option>);
+    container = await renderIntoDocument(
+      <option value="b">{[obj]}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
 
-    container = await renderIntoDocument(<option value={obj}>{obj}</option>);
+    container = await renderIntoDocument(
+      <option value={obj}>{obj}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
     expect(container.firstChild.value).toBe('hello');
 
@@ -189,7 +193,6 @@ describe('ReactDOMOption', () => {
       'Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.\n' +
         '    in option (at **)',
     ]);
-
     expect(container.firstChild.innerHTML).toBe('foobar');
   });
 
