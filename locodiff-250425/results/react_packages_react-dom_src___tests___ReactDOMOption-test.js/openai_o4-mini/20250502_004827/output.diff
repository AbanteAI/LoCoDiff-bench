--- react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual)@@ -3,11 +3,7 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
-
-'use strict';
 
 describe('ReactDOMOption', () => {
   let React;
@@ -143,7 +139,7 @@     // This is similar to <fbt>.
     // We don't toString it because you must instead provide a value prop.
     const obj = {
-      $$typeof: Symbol.for('react.element'),
+      $$typeof: Symbol.for('react.transitional.element'),
       type: props => props.content,
       ref: null,
       key: null,
@@ -155,13 +151,19 @@       },
     };
 
-    let container = await renderIntoDocument(<option value="a">{obj}</option>);
+    let container = await renderIntoDocument(
+      <option value="a">{obj}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
 
-    container = await renderIntoDocument(<option value="b">{[obj]}</option>);
+    container = await renderIntoDocument(
+      <option value="b">{[obj]}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
 
-    container = await renderIntoDocument(<option value={obj}>{obj}</option>);
+    container = await renderIntoDocument(
+      <option value={obj}>{obj}</option>,
+    );
     expect(container.firstChild.innerHTML).toBe('hello');
     expect(container.firstChild.value).toBe('hello');
 
@@ -225,14 +227,12 @@     const options = stub.props.children;
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(stub);
-    });
+    await act(async () => root.render(stub));
     node = container.firstChild;
 
     expect(node.selectedIndex).toBe(1);
 
-    await act(() => {
+    await act(async () => {
       root.render(<select value="gorilla">{options}</select>);
     });
     node = container.firstChild;
@@ -250,7 +250,6 @@     );
 
     const container = document.createElement('div');
-
     container.innerHTML = ReactDOMServer.renderToString(children);
 
     expect(container.firstChild.getAttribute('value')).toBe(null);
@@ -267,22 +266,11 @@         onRecoverableError: () => {},
       });
     });
-    assertConsoleErrorDev([
-      'In HTML, <div> cannot be a child of <option>.\n' +
-        'This will cause a hydration error.\n' +
-        '\n' +
-        '  <select readOnly={true} value="bar">\n' +
-        '>   <option value="bar">\n' +
-        '>     <div ref={{current:null}}>\n' +
-        '      ...\n' +
-        '\n' +
-        '    in div (at **)',
-    ]);
+    assertConsoleErrorDev(['In HTML, <div> cannot be a child of <option>']);
     option = container.firstChild.firstChild;
 
     expect(option.textContent).toBe('BarFooBaz');
     expect(option.selected).toBe(true);
-
     expect(ref.current.nodeName).toBe('DIV');
     expect(ref.current.parentNode).toBe(option);
   });
