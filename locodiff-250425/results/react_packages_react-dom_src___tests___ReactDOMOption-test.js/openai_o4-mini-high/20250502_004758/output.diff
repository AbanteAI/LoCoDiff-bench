
index bb07c867..4b194663 100644
--- a/react_packages_react-dom_src___tests___ReactDOMOption-test.js_expectedoutput.txt (expected):tmp/tmp0t64j8n9_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMOption-test.js_extracted.txt (actual):tmp/tmpd03ja3hy_actual.txt	
@@ -22,14 +22,15 @@ describe('ReactDOMOption', () => {
     ReactDOMClient = require('react-dom/client');
     ReactDOMServer = require('react-dom/server');
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
+    assertConsoleErrorDev = require('internal-test-utils').assertConsoleErrorDev;
   });
 
   async function renderIntoDocument(children) {
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(async () => root.render(children));
+    await act(async () => {
+      root.render(children);
+    });
     return container;
   }
 
@@ -77,8 +78,7 @@ describe('ReactDOMOption', () => {
     const container = await renderIntoDocument(el);
     assertConsoleErrorDev([
       'Cannot infer the option value of complex children. ' +
-        'Pass a `value` prop or use a plain string as children to <option>.\n' +
-        '    in option (at **)',
+        'Pass a `value` prop or use a plain string as children to <option>.',
     ]);
     expect(container.firstChild.innerHTML).toBe('1 2 3');
     await renderIntoDocument(el);
@@ -143,7 +143,7 @@ describe('ReactDOMOption', () => {
     // This is similar to <fbt>.
     // We don't toString it because you must instead provide a value prop.
     const obj = {
-      $$typeof: Symbol.for('react.element'),
+      $$typeof: Symbol.for('react.transitional.element'),
       type: props => props.content,
       ref: null,
       key: null,
@@ -189,7 +189,6 @@ describe('ReactDOMOption', () => {
       'Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.\n' +
         '    in option (at **)',
     ]);
-
     expect(container.firstChild.innerHTML).toBe('foobar');
   });
 
@@ -214,7 +213,6 @@ describe('ReactDOMOption', () => {
 
   it('should allow ignoring `value` on option', async () => {
     const a = 'a';
-    let node;
     const stub = (
       <select value="giraffe" onChange={() => {}}>
         <option>monkey</option>
@@ -228,8 +226,7 @@ describe('ReactDOMOption', () => {
     await act(() => {
       root.render(stub);
     });
-    node = container.firstChild;
-
+    let node = container.firstChild;
     expect(node.selectedIndex).toBe(1);
 
     await act(() => {
@@ -250,7 +247,6 @@ describe('ReactDOMOption', () => {
     );
 
     const container = document.createElement('div');
-
     container.innerHTML = ReactDOMServer.renderToString(children);
 
     expect(container.firstChild.getAttribute('value')).toBe(null);
@@ -278,11 +274,11 @@ describe('ReactDOMOption', () => {
         '\n' +
         '    in div (at **)',
     ]);
+
     option = container.firstChild.firstChild;
 
     expect(option.textContent).toBe('BarFooBaz');
     expect(option.selected).toBe(true);
-
     expect(ref.current.nodeName).toBe('DIV');
     expect(ref.current.parentNode).toBe(option);
   });
