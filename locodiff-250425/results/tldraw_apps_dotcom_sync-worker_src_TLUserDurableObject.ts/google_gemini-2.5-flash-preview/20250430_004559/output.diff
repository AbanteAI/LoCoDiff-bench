
index e49f6e87..66d9334d 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmpl203uytj_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmpso8hcjz5_actual.txt	
@@ -95,13 +95,14 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	override async fetch(req: IRequest) {
 		const sentry = createSentry(this.ctx, this.env, req)
 		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
 			return await this.router.fetch(req)
 		} catch (err) {
 			if (sentry) {
 				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
+				sentry?.captureException(err, {
+					req: req.url,
+					method: req.method,
+				})
 			} else {
 				console.error(err)
 			}
@@ -114,15 +115,27 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
+		this.maybeStartInterval()
 	}
 
 	interval: NodeJS.Timeout | null = null
+	// lastMutationTimestamp = Date.now()
+	nextMutationTimestamp = Date.now() + 2e3 + 5e3 * Math.random() // Initial random interval
 
 	private maybeStartInterval() {
 		if (!this.interval) {
 			this.interval = setInterval(() => {
 				// do cache persist + cleanup
 				this.cache?.onInterval()
+				// do a noop mutation every 5 seconds
+				// Add some randomness to prevent this happening across all DOs at once on deploy
+				if (Date.now() > this.nextMutationTimestamp) {
+					this.bumpMutationNumber(this.db)
+						.then(() => {
+							this.nextMutationTimestamp = Date.now() + 5e3
+						})
+						.catch((e) => this.captureException(e, { source: 'noop mutation' }))
+				}
 
 				// clean up closed sockets if there are any
 				for (const socket of this.sockets) {
@@ -140,30 +153,13 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private readonly sockets = new Set<WebSocket>()
+	private readonly messageQueue = new ExecutionQueue()
 
-	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
-		if (type !== 'initial_data' || !this.coldStartStartTime) return
-		const time = Date.now() - this.coldStartStartTime
-		this.coldStartStartTime = null
-		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
-	}
-
-	broadcast(message: ZServerSentMessage) {
-		this.logEvent({ type: 'broadcast_message', id: this.userId! })
-		this.maybeReportColdStartTime(message.type)
-		const msg = JSON.stringify(message)
-		for (const socket of this.sockets) {
-			if (socket.readyState === WebSocket.OPEN) {
-				socket.send(msg)
-			} else if (
-				socket.readyState === WebSocket.CLOSED ||
-				socket.readyState === WebSocket.CLOSING
-			) {
-				this.sockets.delete(socket)
-			}
+	maybeClose() {
+		if (this.sockets.size === 0) {
+			this.cache?.stopInterval()
 		}
 	}
-	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
 		assert(this.userId, 'User ID not set')
@@ -194,10 +190,12 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		)
 		serverWebSocket.addEventListener('close', () => {
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 		serverWebSocket.addEventListener('error', (e) => {
 			this.captureException(e, { source: 'serverWebSocket "error" event' })
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 
 		this.sockets.add(serverWebSocket)
@@ -219,6 +217,29 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		return new Response(null, { status: 101, webSocket: clientWebSocket })
 	}
 
+	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
+		if (type !== 'initial_data' || !this.coldStartStartTime) return
+		const time = Date.now() - this.coldStartStartTime
+		this.coldStartStartTime = null
+		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
+	}
+
+	broadcast(message: ZServerSentMessage) {
+		this.logEvent({ type: 'broadcast_message', id: this.userId! })
+		this.maybeReportColdStartTime(message.type)
+		const msg = JSON.stringify(message)
+		for (const socket of this.sockets) {
+			if (socket.readyState === WebSocket.OPEN) {
+				socket.send(msg)
+			} else if (
+				socket.readyState === WebSocket.CLOSED ||
+				socket.readyState === WebSocket.CLOSING
+			) {
+				this.sockets.delete(socket)
+			}
+		}
+	}
+
 	private async handleSocketMessage(socket: WebSocket, message: string) {
 		const rateLimited = await isRateLimited(this.env, this.userId!)
 		this.assertCache()
@@ -428,6 +449,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 								.execute()
 						} else {
 							const { id } = update.row as any
+
 							await tx.updateTable(update.table).set(updates).where('id', '=', id).execute()
 						}
 						break
@@ -450,6 +472,8 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			}
 			const result = await this.bumpMutationNumber(tx)
 
+			this.nextMutationTimestamp = Date.now() + 5e3
+
 			const currentMutationNumber = this.cache.mutations.at(-1)?.mutationNumber ?? 0
 			const mutationNumber = result.mutationNumber
 			assert(
