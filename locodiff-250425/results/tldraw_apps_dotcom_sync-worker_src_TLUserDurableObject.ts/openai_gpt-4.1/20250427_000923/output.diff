--- tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual)@@ -2,6 +2,7 @@ 	DB,
 	isColumnMutable,
 	MAX_NUMBER_OF_FILES,
+	ROOM_PREFIX,
 	TlaFile,
 	TlaFilePartial,
 	TlaFileState,
@@ -53,7 +54,6 @@ 		super(ctx, env)
 
 		this.sentry = createSentry(ctx, env)
-
 		this.db = createPostgresConnectionPool(env, 'TLUserDurableObject')
 		this.measure = env.MEASURE
 
@@ -91,46 +91,24 @@ 		})
 		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
-	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.ctx, this.env, req)
-		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
-			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
-			return new Response('Something went wrong', {
-				status: 500,
-				statusText: 'Internal Server Error',
-			})
-		}
-	}
-
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
 	}
 
 	interval: NodeJS.Timeout | null = null
+	nextMutationTimestamp = Date.now() + 2 * 60 * 1000 + 5 * 60 * 1000 * Math.random()
 
 	private maybeStartInterval() {
 		if (!this.interval) {
 			this.interval = setInterval(() => {
 				// do cache persist + cleanup
 				this.cache?.onInterval()
-
 				// clean up closed sockets if there are any
 				for (const socket of this.sockets) {
 					if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
 						this.sockets.delete(socket)
 					}
 				}
-
 				if (this.sockets.size === 0 && typeof this.interval === 'number') {
 					clearInterval(this.interval)
 					this.interval = null
@@ -163,6 +141,13 @@ 			}
 		}
 	}
+
+	maybeClose() {
+		if (this.sockets.size === 0) {
+			this.cache?.stopInterval()
+		}
+	}
+
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
@@ -194,10 +179,12 @@ 		)
 		serverWebSocket.addEventListener('close', () => {
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 		serverWebSocket.addEventListener('error', (e) => {
 			this.captureException(e, { source: 'serverWebSocket "error" event' })
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 
 		this.sockets.add(serverWebSocket)
@@ -450,6 +437,8 @@ 			}
 			const result = await this.bumpMutationNumber(tx)
 
+			this.nextMutationTimestamp = Date.now() + 5 * 60 * 1000
+
 			const currentMutationNumber = this.cache.mutations.at(-1)?.mutationNumber ?? 0
 			const mutationNumber = result.mutationNumber
 			assert(
@@ -464,7 +453,6 @@ 			})
 			return { insertedFiles, newGuestFiles }
 		})
-
 		for (const file of insertedFiles) {
 			getRoomDurableObject(this.env, file.id).appFileRecordCreated(file)
 		}
@@ -489,6 +477,7 @@ 					this.logEvent({ type: 'connect_retry', id: this.userId! })
 				}
 			)
+			this.log.debug('mutation success', this.userId, 'new guest files')
 		} catch (e: any) {
 			const code = e instanceof ZMutationError ? e.errorCode : ZErrorCode.unknown_error
 			this.captureException(e, {
