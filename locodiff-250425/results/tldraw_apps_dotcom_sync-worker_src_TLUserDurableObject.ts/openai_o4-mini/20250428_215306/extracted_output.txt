import {
	DB,
	isColumnMutable,
	MAX_NUMBER_OF_FILES,
	ROOM_PREFIX,
	TlaFile,
	TlaFilePartial,
	TlaFileState,
	TlaFileStatePartial,
	TlaUser,
	Z_PROTOCOL_VERSION,
	ZClientSentMessage,
	ZErrorCode,
	ZRowUpdate,
	ZServerSentMessage,
} from '@tldraw/dotcom-shared'
import { assert, ExecutionQueue, sleep } from '@tldraw/utils'
import { createSentry } from '@tldraw/worker-shared'
import { DurableObject } from 'cloudflare:workers'
import { IRequest, Router } from 'itty-router'
import { Kysely, sql, Transaction } from 'kysely'
import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
import { Logger } from './Logger'
import { createPostgresConnectionPool } from './postgres'
import {
	Analytics,
	Environment,
	getUserDoSnapshotKey,
	TLUserDurableObjectEvent,
} from './types'
import { UserDataSyncer, ZReplicationEvent } from './UserDataSyncer'
import { EventData, writeDataPoint } from './utils/analytics'
import { getRoomDurableObject } from './utils/durableObjects'
import { isRateLimited } from './utils/rateLimit'
import { retryOnConnectionFailure } from './utils/retryOnConnectionFailure'

export class TLUserDurableObject extends DurableObject<Environment> {
	private readonly db: Kysely<DB>
	private measure: Analytics | undefined
	private readonly sentry
	private captureException(exception: unknown, extras?: Record<string, unknown>) {
		this.sentry?.withScope((scope) => {
			if (extras) scope.setExtras(extras)
			// eslint-disable-next-line @typescript-eslint/no-deprecated
			this.sentry?.captureException(exception) as any
		})
		if (!this.sentry) {
			console.error(`[TLUserDurableObject]: `, exception)
		}
	}

	private log

	cache: UserDataSyncer | null = null
	private userId: string | null = null

	private readonly router = Router()
		.all('/app/:userId/*', async (req) => {
			if (!this.userId) {
				this.userId = req.params.userId
			}
			const rateLimited = await isRateLimited(this.env, this.userId!)
			if (rateLimited) {
				this.log.debug('rate limited')
				this.logEvent({ type: 'rate_limited', id: this.userId })
				throw new Error('Rate limited')
			}
			if (!this.cache) {
				this.log.debug('creating cache', this.userId)
				this.cache = new UserDataSyncer(
					this.ctx,
					this.env,
					this.db,
					this.userId,
					(message) => this.broadcast(message),
					this.logEvent.bind(this),
					this.log
				)
			} else {
				await this.cache.waitUntilConnected()
			}
		})
		.get('/app/:userId/connect', (req) => this.onRequest(req))

	override async fetch(req: IRequest) {
		const sentry = createSentry(this.ctx, this.env, req)
		try {
			return await this.router.fetch(req)
		} catch (err: any) {
			this.captureException(err, { source: 'fetch' })
			return new Response('Something went wrong', {
				status: 500,
				statusText: 'Internal Server Error',
			})
		}
	}

	constructor(ctx: DurableObjectState, env: Environment) {
		super(ctx, env)
		this.sentry = createSentry(ctx, env)
		this.db = createPostgresConnectionPool(env, 'TLUserDurableObject')
		this.measure = env.MEASURE
		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
	}

	private readonly sockets = new Set<WebSocket>()
	interval: NodeJS.Timeout | null = null
	private messageQueue = new ExecutionQueue()

	private maybeStartInterval() {
		if (!this.interval) {
			this.interval = setInterval(() => {
				this.cache?.onInterval()
				for (const socket of this.sockets) {
					if (
						socket.readyState === WebSocket.CLOSED ||
						socket.readyState === WebSocket.CLOSING
					) {
						this.sockets.delete(socket)
					}
				}
				if (this.sockets.size === 0 && this.interval !== null) {
					clearInterval(this.interval)
					this.interval = null
				}
			}, 2000)
		}
	}

	async onRequest(req: IRequest) {
		assert(this.userId, 'User ID not set')
		const url = new URL(req.url)
		const params = Object.fromEntries(url.searchParams.entries())
		const { sessionId, protocolVersion } = params
		assert(sessionId, 'Session ID is required')
		const pv = Number(protocolVersion || '1')
		assert(Number.isFinite(pv), `Invalid protocol version ${protocolVersion}`)
		if (pv !== Z_PROTOCOL_VERSION) {
			const { 0: cws, 1: sws } = new WebSocketPair()
			sws.accept()
			sws.close(
				TLSyncErrorCloseEventCode,
				TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
			)
			return new Response(null, { status: 101, webSocket: cws })
		}

		// Create WS
		const { 0: clientWebSocket, 1: serverWebSocket } = new WebSocketPair()
		serverWebSocket.accept()
		serverWebSocket.addEventListener('message', (e) =>
			this.messageQueue.push(() =>
				this.handleSocketMessage(serverWebSocket, e.data.toString())
			)
		)
		serverWebSocket.addEventListener('close', () => {
			this.sockets.delete(serverWebSocket)
		})
		serverWebSocket.addEventListener('error', (e) => {
			this.captureException(e, {
				source: 'serverWebSocket "error" event',
			})
			this.sockets.delete(serverWebSocket)
		})

		this.sockets.add(serverWebSocket)
		this.maybeStartInterval()

		const initialData = this.cache!.store.getCommittedData()
		if (initialData) {
			this.log.debug('sending initial data on connect', this.userId)
			serverWebSocket.send(
				JSON.stringify({
					type: 'initial_data',
					initialData,
				} satisfies ZServerSentMessage)
			)
		} else {
			this.log.debug(
				'no initial data to send, waiting for boot to finish',
				this.userId
			)
		}

		return new Response(null, {
			status: 101,
			webSocket: clientWebSocket,
		})
	}

	private async handleSocketMessage(
		socket: WebSocket,
		message: string
	) {
		const rateLimited = await isRateLimited(this.env, this.userId!)
		this.assertCache()
		await this.cache!.waitUntilConnected()
		const msg = JSON.parse(message) as ZClientSentMessage
		switch (msg.type) {
			case 'mutate':
				if (rateLimited) {
					this.logEvent({ type: 'rate_limited', id: this.userId! })
					await this.rejectMutation(
						socket,
						msg.mutationId,
						ZErrorCode.rate_limit_exceeded
					)
				} else {
					this.logEvent({ type: 'mutation', id: this.userId! })
					await this.handleMutate(socket, msg)
				}
				break
			default:
				this.captureException(new Error('Unhandled message'), {
					source: 'handleSocketMessage',
					message,
				})
		}
	}

	private assertCache(): asserts this is { cache: UserDataSyncer } {
		assert(this.cache, 'no cache')
	}

	private async rejectMutation(
		socket: WebSocket,
		mutationId: string,
		errorCode: ZErrorCode
	) {
		this.assertCache()
		this.logEvent({ type: 'reject_mutation', id: this.userId! })
		this.cache!.store.rejectMutation(mutationId)
		this.cache!.mutations = this.cache!.mutations.filter(
			(m) => m.mutationId !== mutationId
		)
		socket.send(
			JSON.stringify({
				type: 'reject',
				mutationId,
				errorCode,
			} satisfies ZServerSentMessage)
		)
	}

	private async _doMutate(msg: ZClientSentMessage) {
		this.assertCache()
		await this.db.transaction().execute(async (tx) => {
			for (const update of msg.updates) {
				await this.assertValidMutation(update, tx)
				switch (update.event) {
					case 'insert': {
						if (update.table === 'file_state') {
							const { fileId, userId, ...rest } = update.row as any
							if (Object.keys(rest).length === 0) {
								await tx
									.insertInto('file_state')
									.values(update.row as TlaFileState)
									.onConflict((oc) =>
										oc
											.columns(['fileId', 'userId'])
											.doNothing()
									)
									.execute()
							} else {
								await tx
									.insertInto('file_state')
									.values(update.row as TlaFileState)
									.onConflict((oc) =>
										oc
											.columns(['fileId', 'userId'])
											.doUpdateSet(rest)
									)
									.execute()
							}
						} else {
							const { id: _id, ...rest } = update.row as any
							if (update.table === 'file') {
								const count =
									this.cache!.store
										.getFullData()
										?.files.filter(
											(f) =>
												f.ownerId === this.userId &&
												!f.isDeleted
										).length ?? 0
								if (count >= MAX_NUMBER_OF_FILES) {
									throw new ZMutationError(
										ZErrorCode.max_files_reached,
										`Cannot create more than ${MAX_NUMBER_OF_FILES} files.`
									)
								}
							}
							await tx
								.insertInto(update.table)
								.values(update.row as any)
								.onConflict((oc) =>
									oc.column('id').doUpdateSet(rest)
								)
								.execute()
						}
						this.cache!.store.updateOptimisticData(
							[update],
							msg.mutationId
						)
						break
					}
					case 'update': {
						const mutable = Object.keys(update.row).filter((k) =>
							isColumnMutable(update.table, k)
						)
						if (mutable.length === 0) continue
						const updates = Object.fromEntries(
							mutable.map((k) => [
								k,
								(update.row as any)[k],
							])
						)
						if (update.table === 'file_state') {
							const { fileId, userId } =
								update.row as any
							await tx
								.updateTable('file_state')
								.set(updates)
								.where('fileId', '=', fileId)
								.where('userId', '=', userId)
								.execute()
						} else {
							const { id } = update.row as any
							await tx
								.updateTable(update.table)
								.set(updates)
								.where('id', '=', id)
								.execute()
						}
						this.cache!.store.updateOptimisticData(
							[update],
							msg.mutationId
						)
						break
					}
					case 'delete':
						if (update.table === 'file_state') {
							const { fileId, userId } =
								update.row as any
							await tx
								.deleteFrom('file_state')
								.where('fileId', '=', fileId)
								.where('userId', '=', userId)
								.execute()
						} else {
							const { id } = update.row as any
							await tx
								.deleteFrom(update.table)
								.where('id', '=', id)
								.execute()
						}
						this.cache!.store.updateOptimisticData(
							[update],
							msg.mutationId
						)
						break
				}
			}
		})
	}

	private async handleMutate(
		socket: WebSocket,
		msg: ZClientSentMessage
	) {
		this.assertCache()
		while (!this.cache!.store.getCommittedData()) {
			await sleep(100)
		}
		this.log.debug('mutation', this.userId, msg)
		try {
			await retryOnConnectionFailure(
				() => this._doMutate(msg),
				() => {
					this.logEvent({
						type: 'connect_retry',
						id: this.userId!,
					})
				}
			)

			const result = await this.bumpMutationNumber(this.db)
			this.lastMutationTimestamp = Date.now()
			const current = this.cache!.mutations.at(-1)?.mutationNumber ?? 0
			const nm = result.mutationNumber
			assert(
				nm > current,
				`mutation number did not increment: ${nm} current: ${current}`
			)
			this.log.debug(
				'pushing mutation to cache',
				this.userId,
				nm
			)
			this.cache!.mutations.push({
				mutationNumber: nm,
				mutationId: msg.mutationId,
				timestamp: Date.now(),
			})
		} catch (e: any) {
			const code =
				e instanceof ZMutationError
					? e.errorCode
					: ZErrorCode.unknown_error
			this.captureException(e, {
				errorCode: code,
				reason:
					e.cause ??
					e.message ??
					e.stack ??
					JSON.stringify(e),
			})
			await this.rejectMutation(
				socket,
				msg.mutationId,
				code
			)
		}
	}

	private async assertValidMutation(
		update: ZRowUpdate,
		tx: Transaction<DB>
	) {
		const s = this.cache!.store.getFullData()
		if (!s) {
			throw new ZMutationError(
				ZErrorCode.unknown_error,
				'Store data not fetched'
			)
		}
		switch (update.table) {
			case 'user': {
				const u = update.row as TlaUser
				if (u.id !== this.userId) {
					throw new ZMutationError(
						ZErrorCode.forbidden,
						'Cannot update user record that is not our own: ' +
							u.id
					)
				}
				return
			}
			case 'file': {
				const f = update.row as TlaFilePartial
				const prev = s.files.find((x) => x.id === f.id)
				if (!prev) {
					if (f.ownerId === this.userId) return
					throw new ZMutationError(
						ZErrorCode.forbidden,
						`Cannot create a file for another user. fileId: ${f.id} file owner: ${f.ownerId} current user: ${this.userId}`
					)
				}
				if (prev.isDeleted) {
					throw new ZMutationError(
						ZErrorCode.forbidden,
						'Cannot update a deleted file'
					)
				}
				if (prev.ownerId === this.userId) return
				if (prev.shared && prev.sharedLinkType === 'edit') {
					const { id, ...rest } = f
					if (
						Object.keys(rest).length === 1 &&
						rest.updatedAt !== undefined
					) {
						return
					}
					throw new ZMutationError(
						ZErrorCode.forbidden,
						'Cannot update fields other than updatedAt on a shared file'
					)
				}
				return
			}
			case 'file_state': {
				const fs = update.row as TlaFileStatePartial
				let file = s.files.find((x) => x.id === fs.fileId)
				if (!file) {
					file = await tx
						.selectFrom('file')
						.selectAll()
						.where('id', '=', fs.fileId)
						.executeTakeFirst()
				}
				if (!file) {
					throw new ZMutationError(
						ZErrorCode.bad_request,
						`File not found ${fs.fileId}`
					)
				}
				if (fs.userId !== this.userId) {
					throw new ZMutationError(
						ZErrorCode.forbidden,
						`Cannot update file state for another user ${fs.userId}`
					)
				}
				if (file.ownerId === this.userId) return
				if (file.shared) return
				throw new ZMutationError(
					ZErrorCode.forbidden,
					"Cannot update file state of file we don't own and is not shared"
				)
			}
			default:
				return
		}
	}

	async handleReplicationEvent(event: ZReplicationEvent) {
		this.logEvent({
			type: 'replication_event',
			id: this.userId ?? 'anon',
		})
		this.log.debug(
			'replication event',
			event,
			!!this.cache
		)
		if (await this.notActive()) {
			this.log.debug('requesting to unregister')
			return 'unregister'
		}
		try {
			this.cache?.handleReplicationEvent(event)
		} catch (e) {
			this.captureException(e)
		}
		return 'ok'
	}

	async notActive() {
		return !this.cache
	}

	async admin_forceHardReboot(userId: string) {
		if (this.cache) {
			await this.cache.reboot({
				hard: true,
				delay: false,
				source: 'admin',
			})
		} else {
			await this.env.USER_DO_SNAPSHOTS.delete(
				getUserDoSnapshotKey(this.env, userId)
			)
		}
	}

	async admin_getData(userId: string) {
		const cache =
			this.cache ??
			new UserDataSyncer(
				this.ctx,
				this.env,
				this.db,
				userId,
				() => {},
				() => {},
				this.log
			)
		while (!cache.store.getCommittedData()) {
			await sleep(100)
		}
		return cache.store.getCommittedData()
	}

	async bumpMutationNumber(
		db: Kysely<DB> | Transaction<DB>
	) {
		return db
			.insertInto('user_mutation_number')
			.values({
				userId: this.userId!,
				mutationNumber: 1,
			})
			.onConflict((oc) =>
				oc.column('userId').doUpdateSet({
					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
				})
			)
			.returning('mutationNumber')
			.executeTakeFirstOrThrow()
	}

	private writeEvent(eventData: EventData) {
		try {
			writeDataPoint(
				this.sentry,
				this.measure,
				this.env,
				'user_durable_object',
				eventData
			)
		} catch {
			// swallow analytics errors
		}
	}

	logEvent(event: TLUserDurableObjectEvent) {
		switch (event.type) {
			case 'reboot_duration':
				this.writeEvent({
					blobs: [event.type, event.id],
					doubles: [event.duration],
				})
				break
			case 'cold_start_time':
				this.writeEvent({
					blobs: [event.type, event.id],
					doubles: [event.duration],
				})
				break
			default:
				this.writeEvent({
					blobs: [event.type, event.id],
				})
		}
	}
}

class ZMutationError extends Error {
	constructor(
		public errorCode: ZErrorCode,
		message: string,
		public cause?: unknown
	) {
		super(message)
	}
}