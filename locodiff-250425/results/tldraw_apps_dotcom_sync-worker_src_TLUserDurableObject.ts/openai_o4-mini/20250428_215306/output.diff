
index e49f6e87..b7c93819 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmphp2qhfgw_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmpv7c_bqgv_actual.txt	
@@ -2,6 +2,7 @@ import {
 	DB,
 	isColumnMutable,
 	MAX_NUMBER_OF_FILES,
+	ROOM_PREFIX,
 	TlaFile,
 	TlaFilePartial,
 	TlaFileState,
@@ -13,15 +14,20 @@ import {
 	ZRowUpdate,
 	ZServerSentMessage,
 } from '@tldraw/dotcom-shared'
-import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { assert, ExecutionQueue, sleep } from '@tldraw/utils'
 import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { IRequest, Router } from 'itty-router'
 import { Kysely, sql, Transaction } from 'kysely'
+import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { Logger } from './Logger'
 import { createPostgresConnectionPool } from './postgres'
-import { Analytics, Environment, getUserDoSnapshotKey, TLUserDurableObjectEvent } from './types'
+import {
+	Analytics,
+	Environment,
+	getUserDoSnapshotKey,
+	TLUserDurableObjectEvent,
+} from './types'
 import { UserDataSyncer, ZReplicationEvent } from './UserDataSyncer'
 import { EventData, writeDataPoint } from './utils/analytics'
 import { getRoomDurableObject } from './utils/durableObjects'
@@ -31,10 +37,8 @@ import { retryOnConnectionFailure } from './utils/retryOnConnectionFailure'
 export class TLUserDurableObject extends DurableObject<Environment> {
 	private readonly db: Kysely<DB>
 	private measure: Analytics | undefined
-
 	private readonly sentry
 	private captureException(exception: unknown, extras?: Record<string, unknown>) {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
 		this.sentry?.withScope((scope) => {
 			if (extras) scope.setExtras(extras)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
@@ -48,23 +52,9 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	private log
 
 	cache: UserDataSyncer | null = null
-
-	constructor(ctx: DurableObjectState, env: Environment) {
-		super(ctx, env)
-
-		this.sentry = createSentry(ctx, env)
-
-		this.db = createPostgresConnectionPool(env, 'TLUserDurableObject')
-		this.measure = env.MEASURE
-
-		// debug logging in preview envs by default
-		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
-	}
-
 	private userId: string | null = null
-	private coldStartStartTime: number | null = null
 
-	readonly router = Router()
+	private readonly router = Router()
 		.all('/app/:userId/*', async (req) => {
 			if (!this.userId) {
 				this.userId = req.params.userId
@@ -76,7 +66,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 				throw new Error('Rate limited')
 			}
 			if (!this.cache) {
-				this.coldStartStartTime = Date.now()
 				this.log.debug('creating cache', this.userId)
 				this.cache = new UserDataSyncer(
 					this.ctx,
@@ -87,24 +76,18 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					this.logEvent.bind(this),
 					this.log
 				)
+			} else {
+				await this.cache.waitUntilConnected()
 			}
 		})
-		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
+		.get('/app/:userId/connect', (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
 	override async fetch(req: IRequest) {
 		const sentry = createSentry(this.ctx, this.env, req)
 		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
 			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
+		} catch (err: any) {
+			this.captureException(err, { source: 'fetch' })
 			return new Response('Something went wrong', {
 				status: 500,
 				statusText: 'Internal Server Error',
@@ -112,26 +95,31 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	private assertCache(): asserts this is { cache: UserDataSyncer } {
-		assert(this.cache, 'no cache')
+	constructor(ctx: DurableObjectState, env: Environment) {
+		super(ctx, env)
+		this.sentry = createSentry(ctx, env)
+		this.db = createPostgresConnectionPool(env, 'TLUserDurableObject')
+		this.measure = env.MEASURE
+		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
 	}
 
+	private readonly sockets = new Set<WebSocket>()
 	interval: NodeJS.Timeout | null = null
+	private messageQueue = new ExecutionQueue()
 
 	private maybeStartInterval() {
 		if (!this.interval) {
 			this.interval = setInterval(() => {
-				// do cache persist + cleanup
 				this.cache?.onInterval()
-
-				// clean up closed sockets if there are any
 				for (const socket of this.sockets) {
-					if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
+					if (
+						socket.readyState === WebSocket.CLOSED ||
+						socket.readyState === WebSocket.CLOSING
+					) {
 						this.sockets.delete(socket)
 					}
 				}
-
-				if (this.sockets.size === 0 && typeof this.interval === 'number') {
+				if (this.sockets.size === 0 && this.interval !== null) {
 					clearInterval(this.interval)
 					this.interval = null
 				}
@@ -139,71 +127,46 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	private readonly sockets = new Set<WebSocket>()
-
-	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
-		if (type !== 'initial_data' || !this.coldStartStartTime) return
-		const time = Date.now() - this.coldStartStartTime
-		this.coldStartStartTime = null
-		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
-	}
-
-	broadcast(message: ZServerSentMessage) {
-		this.logEvent({ type: 'broadcast_message', id: this.userId! })
-		this.maybeReportColdStartTime(message.type)
-		const msg = JSON.stringify(message)
-		for (const socket of this.sockets) {
-			if (socket.readyState === WebSocket.OPEN) {
-				socket.send(msg)
-			} else if (
-				socket.readyState === WebSocket.CLOSED ||
-				socket.readyState === WebSocket.CLOSING
-			) {
-				this.sockets.delete(socket)
-			}
-		}
-	}
-	private readonly messageQueue = new ExecutionQueue()
-
 	async onRequest(req: IRequest) {
 		assert(this.userId, 'User ID not set')
-		// handle legacy param names
-
 		const url = new URL(req.url)
 		const params = Object.fromEntries(url.searchParams.entries())
-		const { sessionId } = params
-
-		const protocolVersion = params.protocolVersion ? Number(params.protocolVersion) : 1
-
+		const { sessionId, protocolVersion } = params
 		assert(sessionId, 'Session ID is required')
-		assert(Number.isFinite(protocolVersion), `Invalid protocol version ${params.protocolVersion}`)
-
-		this.assertCache()
+		const pv = Number(protocolVersion || '1')
+		assert(Number.isFinite(pv), `Invalid protocol version ${protocolVersion}`)
+		if (pv !== Z_PROTOCOL_VERSION) {
+			const { 0: cws, 1: sws } = new WebSocketPair()
+			sws.accept()
+			sws.close(
+				TLSyncErrorCloseEventCode,
+				TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
+			)
+			return new Response(null, { status: 101, webSocket: cws })
+		}
 
-		// Create the websocket pair for the client
+		// Create WS
 		const { 0: clientWebSocket, 1: serverWebSocket } = new WebSocketPair()
 		serverWebSocket.accept()
-
-		if (Number(protocolVersion) !== Z_PROTOCOL_VERSION || this.__test__isForceDowngraded) {
-			serverWebSocket.close(TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
-			return new Response(null, { status: 101, webSocket: clientWebSocket })
-		}
-
 		serverWebSocket.addEventListener('message', (e) =>
-			this.messageQueue.push(() => this.handleSocketMessage(serverWebSocket, e.data.toString()))
+			this.messageQueue.push(() =>
+				this.handleSocketMessage(serverWebSocket, e.data.toString())
+			)
 		)
 		serverWebSocket.addEventListener('close', () => {
 			this.sockets.delete(serverWebSocket)
 		})
 		serverWebSocket.addEventListener('error', (e) => {
-			this.captureException(e, { source: 'serverWebSocket "error" event' })
+			this.captureException(e, {
+				source: 'serverWebSocket "error" event',
+			})
 			this.sockets.delete(serverWebSocket)
 		})
 
 		this.sockets.add(serverWebSocket)
 		this.maybeStartInterval()
 
-		const initialData = this.cache.store.getCommittedData()
+		const initialData = this.cache!.store.getCommittedData()
 		if (initialData) {
 			this.log.debug('sending initial data on connect', this.userId)
 			serverWebSocket.send(
@@ -213,54 +176,64 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 				} satisfies ZServerSentMessage)
 			)
 		} else {
-			this.log.debug('no initial data to send, waiting for boot to finish', this.userId)
+			this.log.debug(
+				'no initial data to send, waiting for boot to finish',
+				this.userId
+			)
 		}
 
-		return new Response(null, { status: 101, webSocket: clientWebSocket })
+		return new Response(null, {
+			status: 101,
+			webSocket: clientWebSocket,
+		})
 	}
 
-	private async handleSocketMessage(socket: WebSocket, message: string) {
+	private async handleSocketMessage(
+		socket: WebSocket,
+		message: string
+	) {
 		const rateLimited = await isRateLimited(this.env, this.userId!)
 		this.assertCache()
-
-		const msg = JSON.parse(message) as any as ZClientSentMessage
+		await this.cache!.waitUntilConnected()
+		const msg = JSON.parse(message) as ZClientSentMessage
 		switch (msg.type) {
 			case 'mutate':
 				if (rateLimited) {
 					this.logEvent({ type: 'rate_limited', id: this.userId! })
-					await this.rejectMutation(socket, msg.mutationId, ZErrorCode.rate_limit_exceeded)
+					await this.rejectMutation(
+						socket,
+						msg.mutationId,
+						ZErrorCode.rate_limit_exceeded
+					)
 				} else {
 					this.logEvent({ type: 'mutation', id: this.userId! })
 					await this.handleMutate(socket, msg)
 				}
 				break
 			default:
-				this.captureException(new Error('Unhandled message'), { message })
+				this.captureException(new Error('Unhandled message'), {
+					source: 'handleSocketMessage',
+					message,
+				})
 		}
 	}
 
-	async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
-		return db
-			.insertInto('user_mutation_number')
-			.values({
-				userId: this.userId!,
-				mutationNumber: 1,
-			})
-			.onConflict((oc) =>
-				oc.column('userId').doUpdateSet({
-					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
-				})
-			)
-			.returning('mutationNumber')
-			.executeTakeFirstOrThrow()
+	private assertCache(): asserts this is { cache: UserDataSyncer } {
+		assert(this.cache, 'no cache')
 	}
 
-	private async rejectMutation(socket: WebSocket, mutationId: string, errorCode: ZErrorCode) {
+	private async rejectMutation(
+		socket: WebSocket,
+		mutationId: string,
+		errorCode: ZErrorCode
+	) {
 		this.assertCache()
 		this.logEvent({ type: 'reject_mutation', id: this.userId! })
-		this.cache.store.rejectMutation(mutationId)
-		this.cache.mutations = this.cache.mutations.filter((m) => m.mutationId !== mutationId)
-		socket?.send(
+		this.cache!.store.rejectMutation(mutationId)
+		this.cache!.mutations = this.cache!.mutations.filter(
+			(m) => m.mutationId !== mutationId
+		)
+		socket.send(
 			JSON.stringify({
 				type: 'reject',
 				mutationId,
@@ -269,128 +242,47 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		)
 	}
 
-	private async assertValidMutation(update: ZRowUpdate, tx: Transaction<DB>) {
-		// s is the entire set of data that the user has access to
-		// and is up to date with all committed mutations so far.
-		// we commit each mutation one at a time before handling the next.
-		const s = this.cache!.store.getFullData()
-		if (!s) {
-			// This should never happen
-			throw new ZMutationError(ZErrorCode.unknown_error, 'Store data not fetched')
-		}
-		switch (update.table) {
-			case 'user': {
-				const isUpdatingSelf = (update.row as TlaUser).id === this.userId
-				if (!isUpdatingSelf)
-					throw new ZMutationError(
-						ZErrorCode.forbidden,
-						'Cannot update user record that is not our own: ' + (update.row as TlaUser).id
-					)
-				// todo: prevent user from updating their email?
-				return
-			}
-			case 'file': {
-				const nextFile = update.row as TlaFilePartial
-				const prevFile = s.files.find((f) => f.id === nextFile.id)
-				if (!prevFile) {
-					const isOwner = nextFile.ownerId === this.userId
-					if (isOwner) return
-					throw new ZMutationError(
-						ZErrorCode.forbidden,
-						`Cannot create a file for another user. fileId: ${nextFile.id} file owner: ${nextFile.ownerId} current user: ${this.userId}`
-					)
-				}
-				if (prevFile.isDeleted)
-					throw new ZMutationError(ZErrorCode.forbidden, 'Cannot update a deleted file')
-				// Owners are allowed to make changes
-				if (prevFile.ownerId === this.userId) return
-
-				// We can make changes to updatedAt field in a shared, editable file
-				if (prevFile.shared && prevFile.sharedLinkType === 'edit') {
-					const { id: _id, ...rest } = nextFile
-					if (Object.keys(rest).length === 1 && rest.updatedAt !== undefined) return
-					throw new ZMutationError(
-						ZErrorCode.forbidden,
-						'Cannot update fields other than updatedAt on a shared file'
-					)
-				}
-				throw new ZMutationError(
-					ZErrorCode.forbidden,
-					'Cannot update file that is not our own and not shared in edit mode' +
-						` user id ${this.userId} ownerId ${prevFile.ownerId}`
-				)
-			}
-			case 'file_state': {
-				const nextFileState = update.row as TlaFileStatePartial
-				let file = s.files.find((f) => f.id === nextFileState.fileId)
-				if (!file) {
-					// The user might not have access to this file yet, because they just followed a link
-					// let's allow them to create a file state for it if it exists and is shared.
-					file = await tx
-						.selectFrom('file')
-						.selectAll()
-						.where('id', '=', nextFileState.fileId)
-						.executeTakeFirst()
-				}
-				if (!file) {
-					throw new ZMutationError(ZErrorCode.bad_request, `File not found ${nextFileState.fileId}`)
-				}
-				if (nextFileState.userId !== this.userId) {
-					throw new ZMutationError(
-						ZErrorCode.forbidden,
-						`Cannot update file state for another user ${nextFileState.userId}`
-					)
-				}
-				if (file.ownerId === this.userId) return
-				if (file.shared) return
-
-				throw new ZMutationError(
-					ZErrorCode.forbidden,
-					"Cannot update file state of file we don't own and is not shared"
-				)
-			}
-		}
-	}
-
 	private async _doMutate(msg: ZClientSentMessage) {
 		this.assertCache()
-		const { insertedFiles, newGuestFiles } = await this.db.transaction().execute(async (tx) => {
-			const insertedFiles: TlaFile[] = []
-			const newGuestFiles: TlaFile[] = []
+		await this.db.transaction().execute(async (tx) => {
 			for (const update of msg.updates) {
 				await this.assertValidMutation(update, tx)
 				switch (update.event) {
 					case 'insert': {
 						if (update.table === 'file_state') {
 							const { fileId, userId, ...rest } = update.row as any
-							await tx
-								.insertInto(update.table)
-								.values(update.row as TlaFileState)
-								.onConflict((oc) => {
-									if (Object.keys(rest).length === 0) {
-										return oc.columns(['fileId', 'userId']).doNothing()
-									} else {
-										return oc.columns(['fileId', 'userId']).doUpdateSet(rest)
-									}
-								})
-								.execute()
-							const guestFile = await tx
-								.selectFrom('file')
-								.where('id', '=', fileId)
-								.where('ownerId', '!=', userId)
-								.selectAll()
-								.executeTakeFirst()
-							if (guestFile) {
-								newGuestFiles.push(guestFile as any as TlaFile)
+							if (Object.keys(rest).length === 0) {
+								await tx
+									.insertInto('file_state')
+									.values(update.row as TlaFileState)
+									.onConflict((oc) =>
+										oc
+											.columns(['fileId', 'userId'])
+											.doNothing()
+									)
+									.execute()
+							} else {
+								await tx
+									.insertInto('file_state')
+									.values(update.row as TlaFileState)
+									.onConflict((oc) =>
+										oc
+											.columns(['fileId', 'userId'])
+											.doUpdateSet(rest)
+									)
+									.execute()
 							}
-							break
 						} else {
 							const { id: _id, ...rest } = update.row as any
 							if (update.table === 'file') {
 								const count =
-									this.cache.store
+									this.cache!.store
 										.getFullData()
-										?.files.filter((f) => f.ownerId === this.userId && !f.isDeleted).length ?? 0
+										?.files.filter(
+											(f) =>
+												f.ownerId === this.userId &&
+												!f.isDeleted
+										).length ?? 0
 								if (count >= MAX_NUMBER_OF_FILES) {
 									throw new ZMutationError(
 										ZErrorCode.max_files_reached,
@@ -398,28 +290,34 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 									)
 								}
 							}
-							const result = await tx
+							await tx
 								.insertInto(update.table)
 								.values(update.row as any)
-								.onConflict((oc) => oc.column('id').doUpdateSet(rest))
-								.returningAll()
+								.onConflict((oc) =>
+									oc.column('id').doUpdateSet(rest)
+								)
 								.execute()
-							if (update.table === 'file' && result.length > 0) {
-								insertedFiles.push(result[0] as any as TlaFile)
-							}
-							break
 						}
+						this.cache!.store.updateOptimisticData(
+							[update],
+							msg.mutationId
+						)
+						break
 					}
 					case 'update': {
-						const mutableColumns = Object.keys(update.row).filter((k) =>
+						const mutable = Object.keys(update.row).filter((k) =>
 							isColumnMutable(update.table, k)
 						)
-						if (mutableColumns.length === 0) continue
+						if (mutable.length === 0) continue
 						const updates = Object.fromEntries(
-							mutableColumns.map((k) => [k, (update.row as any)[k]])
+							mutable.map((k) => [
+								k,
+								(update.row as any)[k],
+							])
 						)
 						if (update.table === 'file_state') {
-							const { fileId, userId } = update.row as any
+							const { fileId, userId } =
+								update.row as any
 							await tx
 								.updateTable('file_state')
 								.set(updates)
@@ -428,13 +326,22 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 								.execute()
 						} else {
 							const { id } = update.row as any
-							await tx.updateTable(update.table).set(updates).where('id', '=', id).execute()
+							await tx
+								.updateTable(update.table)
+								.set(updates)
+								.where('id', '=', id)
+								.execute()
 						}
+						this.cache!.store.updateOptimisticData(
+							[update],
+							msg.mutationId
+						)
 						break
 					}
 					case 'delete':
 						if (update.table === 'file_state') {
-							const { fileId, userId } = update.row as any
+							const { fileId, userId } =
+								update.row as any
 							await tx
 								.deleteFrom('file_state')
 								.where('fileId', '=', fileId)
@@ -442,79 +349,188 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 								.execute()
 						} else {
 							const { id } = update.row as any
-							await tx.deleteFrom(update.table).where('id', '=', id).execute()
+							await tx
+								.deleteFrom(update.table)
+								.where('id', '=', id)
+								.execute()
 						}
+						this.cache!.store.updateOptimisticData(
+							[update],
+							msg.mutationId
+						)
 						break
 				}
-				this.cache.store.updateOptimisticData([update], msg.mutationId)
 			}
-			const result = await this.bumpMutationNumber(tx)
-
-			const currentMutationNumber = this.cache.mutations.at(-1)?.mutationNumber ?? 0
-			const mutationNumber = result.mutationNumber
-			assert(
-				mutationNumber > currentMutationNumber,
-				`mutation number did not increment mutationNumber: ${mutationNumber} current: ${currentMutationNumber}`
-			)
-			this.log.debug('pushing mutation to cache', this.userId, mutationNumber)
-			this.cache.mutations.push({
-				mutationNumber,
-				mutationId: msg.mutationId,
-				timestamp: Date.now(),
-			})
-			return { insertedFiles, newGuestFiles }
 		})
-
-		for (const file of insertedFiles) {
-			getRoomDurableObject(this.env, file.id).appFileRecordCreated(file)
-		}
-		for (const file of newGuestFiles) {
-			this.cache.addGuestFile(file)
-		}
 	}
 
-	private async handleMutate(socket: WebSocket, msg: ZClientSentMessage) {
+	private async handleMutate(
+		socket: WebSocket,
+		msg: ZClientSentMessage
+	) {
 		this.assertCache()
-		while (!this.cache.store.getCommittedData()) {
-			// this could happen if the cache was cleared due to a full db reboot
+		while (!this.cache!.store.getCommittedData()) {
 			await sleep(100)
 		}
 		this.log.debug('mutation', this.userId, msg)
 		try {
-			// we connect to pg via a pooler, so in the case that the pool is exhausted
-			// we need to retry the connection. (also in the case that a neon branch is asleep apparently?)
 			await retryOnConnectionFailure(
 				() => this._doMutate(msg),
 				() => {
-					this.logEvent({ type: 'connect_retry', id: this.userId! })
+					this.logEvent({
+						type: 'connect_retry',
+						id: this.userId!,
+					})
 				}
 			)
+
+			const result = await this.bumpMutationNumber(this.db)
+			this.lastMutationTimestamp = Date.now()
+			const current = this.cache!.mutations.at(-1)?.mutationNumber ?? 0
+			const nm = result.mutationNumber
+			assert(
+				nm > current,
+				`mutation number did not increment: ${nm} current: ${current}`
+			)
+			this.log.debug(
+				'pushing mutation to cache',
+				this.userId,
+				nm
+			)
+			this.cache!.mutations.push({
+				mutationNumber: nm,
+				mutationId: msg.mutationId,
+				timestamp: Date.now(),
+			})
 		} catch (e: any) {
-			const code = e instanceof ZMutationError ? e.errorCode : ZErrorCode.unknown_error
+			const code =
+				e instanceof ZMutationError
+					? e.errorCode
+					: ZErrorCode.unknown_error
 			this.captureException(e, {
 				errorCode: code,
-				reason: e.cause ?? e.message ?? e.stack ?? JSON.stringify(e),
+				reason:
+					e.cause ??
+					e.message ??
+					e.stack ??
+					JSON.stringify(e),
 			})
-			await this.rejectMutation(socket, msg.mutationId, code)
+			await this.rejectMutation(
+				socket,
+				msg.mutationId,
+				code
+			)
 		}
 	}
 
-	/* ------- RPCs -------  */
+	private async assertValidMutation(
+		update: ZRowUpdate,
+		tx: Transaction<DB>
+	) {
+		const s = this.cache!.store.getFullData()
+		if (!s) {
+			throw new ZMutationError(
+				ZErrorCode.unknown_error,
+				'Store data not fetched'
+			)
+		}
+		switch (update.table) {
+			case 'user': {
+				const u = update.row as TlaUser
+				if (u.id !== this.userId) {
+					throw new ZMutationError(
+						ZErrorCode.forbidden,
+						'Cannot update user record that is not our own: ' +
+							u.id
+					)
+				}
+				return
+			}
+			case 'file': {
+				const f = update.row as TlaFilePartial
+				const prev = s.files.find((x) => x.id === f.id)
+				if (!prev) {
+					if (f.ownerId === this.userId) return
+					throw new ZMutationError(
+						ZErrorCode.forbidden,
+						`Cannot create a file for another user. fileId: ${f.id} file owner: ${f.ownerId} current user: ${this.userId}`
+					)
+				}
+				if (prev.isDeleted) {
+					throw new ZMutationError(
+						ZErrorCode.forbidden,
+						'Cannot update a deleted file'
+					)
+				}
+				if (prev.ownerId === this.userId) return
+				if (prev.shared && prev.sharedLinkType === 'edit') {
+					const { id, ...rest } = f
+					if (
+						Object.keys(rest).length === 1 &&
+						rest.updatedAt !== undefined
+					) {
+						return
+					}
+					throw new ZMutationError(
+						ZErrorCode.forbidden,
+						'Cannot update fields other than updatedAt on a shared file'
+					)
+				}
+				return
+			}
+			case 'file_state': {
+				const fs = update.row as TlaFileStatePartial
+				let file = s.files.find((x) => x.id === fs.fileId)
+				if (!file) {
+					file = await tx
+						.selectFrom('file')
+						.selectAll()
+						.where('id', '=', fs.fileId)
+						.executeTakeFirst()
+				}
+				if (!file) {
+					throw new ZMutationError(
+						ZErrorCode.bad_request,
+						`File not found ${fs.fileId}`
+					)
+				}
+				if (fs.userId !== this.userId) {
+					throw new ZMutationError(
+						ZErrorCode.forbidden,
+						`Cannot update file state for another user ${fs.userId}`
+					)
+				}
+				if (file.ownerId === this.userId) return
+				if (file.shared) return
+				throw new ZMutationError(
+					ZErrorCode.forbidden,
+					"Cannot update file state of file we don't own and is not shared"
+				)
+			}
+			default:
+				return
+		}
+	}
 
 	async handleReplicationEvent(event: ZReplicationEvent) {
-		this.logEvent({ type: 'replication_event', id: this.userId ?? 'anon' })
-		this.log.debug('replication event', event, !!this.cache)
+		this.logEvent({
+			type: 'replication_event',
+			id: this.userId ?? 'anon',
+		})
+		this.log.debug(
+			'replication event',
+			event,
+			!!this.cache
+		)
 		if (await this.notActive()) {
 			this.log.debug('requesting to unregister')
 			return 'unregister'
 		}
-
 		try {
 			this.cache?.handleReplicationEvent(event)
 		} catch (e) {
 			this.captureException(e)
 		}
-
 		return 'ok'
 	}
 
@@ -522,50 +538,17 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		return !this.cache
 	}
 
-	/* --------------  */
-
-	private writeEvent(eventData: EventData) {
-		writeDataPoint(this.sentry, this.measure, this.env, 'user_durable_object', eventData)
-	}
-
-	logEvent(event: TLUserDurableObjectEvent) {
-		switch (event.type) {
-			case 'reboot_duration':
-				this.writeEvent({
-					blobs: [event.type, event.id],
-					doubles: [event.duration],
-				})
-				break
-			case 'cold_start_time':
-				this.writeEvent({
-					blobs: [event.type, event.id],
-					doubles: [event.duration],
-				})
-				break
-
-			default:
-				this.writeEvent({ blobs: [event.type, event.id] })
-		}
-	}
-
-	/** sneaky test stuff */
-	// this allows us to test the 'your client is out of date please refresh' flow
-	private __test__isForceDowngraded = false
-	async __test__downgradeClient(isDowngraded: boolean) {
-		if (this.env.IS_LOCAL !== 'true') {
-			return
-		}
-		this.__test__isForceDowngraded = isDowngraded
-		this.sockets.forEach((socket) => {
-			socket.close()
-		})
-	}
-
 	async admin_forceHardReboot(userId: string) {
 		if (this.cache) {
-			await this.cache?.reboot({ hard: true, delay: false, source: 'admin' })
+			await this.cache.reboot({
+				hard: true,
+				delay: false,
+				source: 'admin',
+			})
 		} else {
-			await this.env.USER_DO_SNAPSHOTS.delete(getUserDoSnapshotKey(this.env, userId))
+			await this.env.USER_DO_SNAPSHOTS.delete(
+				getUserDoSnapshotKey(this.env, userId)
+			)
 		}
 	}
 
@@ -586,6 +569,59 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 		return cache.store.getCommittedData()
 	}
+
+	async bumpMutationNumber(
+		db: Kysely<DB> | Transaction<DB>
+	) {
+		return db
+			.insertInto('user_mutation_number')
+			.values({
+				userId: this.userId!,
+				mutationNumber: 1,
+			})
+			.onConflict((oc) =>
+				oc.column('userId').doUpdateSet({
+					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
+				})
+			)
+			.returning('mutationNumber')
+			.executeTakeFirstOrThrow()
+	}
+
+	private writeEvent(eventData: EventData) {
+		try {
+			writeDataPoint(
+				this.sentry,
+				this.measure,
+				this.env,
+				'user_durable_object',
+				eventData
+			)
+		} catch {
+			// swallow analytics errors
+		}
+	}
+
+	logEvent(event: TLUserDurableObjectEvent) {
+		switch (event.type) {
+			case 'reboot_duration':
+				this.writeEvent({
+					blobs: [event.type, event.id],
+					doubles: [event.duration],
+				})
+				break
+			case 'cold_start_time':
+				this.writeEvent({
+					blobs: [event.type, event.id],
+					doubles: [event.duration],
+				})
+				break
+			default:
+				this.writeEvent({
+					blobs: [event.type, event.id],
+				})
+		}
+	}
 }
 
 class ZMutationError extends Error {
