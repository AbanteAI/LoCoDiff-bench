
index e49f6e877..55b4e893d 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmp5r0ygnft_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmp8ldge6rq_actual.txt	
@@ -163,6 +163,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			}
 		}
 	}
+
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
@@ -239,7 +240,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
+	private async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
 		return db
 			.insertInto('user_mutation_number')
 			.values({
@@ -273,7 +274,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		// s is the entire set of data that the user has access to
 		// and is up to date with all committed mutations so far.
 		// we commit each mutation one at a time before handling the next.
-		const s = this.cache!.store.getFullData()
+		const s = this.cache.store.getFullData()
 		if (!s) {
 			// This should never happen
 			throw new ZMutationError(ZErrorCode.unknown_error, 'Store data not fetched')
@@ -499,68 +500,10 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	/* ------- RPCs -------  */
-
-	async handleReplicationEvent(event: ZReplicationEvent) {
-		this.logEvent({ type: 'replication_event', id: this.userId ?? 'anon' })
-		this.log.debug('replication event', event, !!this.cache)
-		if (await this.notActive()) {
-			this.log.debug('requesting to unregister')
-			return 'unregister'
-		}
-
-		try {
-			this.cache?.handleReplicationEvent(event)
-		} catch (e) {
-			this.captureException(e)
-		}
-
-		return 'ok'
-	}
-
 	async notActive() {
 		return !this.cache
 	}
 
-	/* --------------  */
-
-	private writeEvent(eventData: EventData) {
-		writeDataPoint(this.sentry, this.measure, this.env, 'user_durable_object', eventData)
-	}
-
-	logEvent(event: TLUserDurableObjectEvent) {
-		switch (event.type) {
-			case 'reboot_duration':
-				this.writeEvent({
-					blobs: [event.type, event.id],
-					doubles: [event.duration],
-				})
-				break
-			case 'cold_start_time':
-				this.writeEvent({
-					blobs: [event.type, event.id],
-					doubles: [event.duration],
-				})
-				break
-
-			default:
-				this.writeEvent({ blobs: [event.type, event.id] })
-		}
-	}
-
-	/** sneaky test stuff */
-	// this allows us to test the 'your client is out of date please refresh' flow
-	private __test__isForceDowngraded = false
-	async __test__downgradeClient(isDowngraded: boolean) {
-		if (this.env.IS_LOCAL !== 'true') {
-			return
-		}
-		this.__test__isForceDowngraded = isDowngraded
-		this.sockets.forEach((socket) => {
-			socket.close()
-		})
-	}
-
 	async admin_forceHardReboot(userId: string) {
 		if (this.cache) {
 			await this.cache?.reboot({ hard: true, delay: false, source: 'admin' })
