
index e49f6e877..ba6fb4bd2 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmpo1fonvql_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmpl_u3xyt1_actual.txt	
@@ -48,6 +48,8 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	private log
 
 	cache: UserDataSyncer | null = null
+	private userId: string | null = null
+	private coldStartStartTime: number | null = null
 
 	constructor(ctx: DurableObjectState, env: Environment) {
 		super(ctx, env)
@@ -61,9 +63,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
 	}
 
-	private userId: string | null = null
-	private coldStartStartTime: number | null = null
-
 	readonly router = Router()
 		.all('/app/:userId/*', async (req) => {
 			if (!this.userId) {
@@ -91,27 +90,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		})
 		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
-	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.ctx, this.env, req)
-		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
-			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
-			return new Response('Something went wrong', {
-				status: 500,
-				statusText: 'Internal Server Error',
-			})
-		}
-	}
-
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
 	}
@@ -123,6 +101,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			this.interval = setInterval(() => {
 				// do cache persist + cleanup
 				this.cache?.onInterval()
+				// do a noop mutation every 5 minutes
 
 				// clean up closed sockets if there are any
 				for (const socket of this.sockets) {
@@ -140,29 +119,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private readonly sockets = new Set<WebSocket>()
-
-	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
-		if (type !== 'initial_data' || !this.coldStartStartTime) return
-		const time = Date.now() - this.coldStartStartTime
-		this.coldStartStartTime = null
-		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
-	}
-
-	broadcast(message: ZServerSentMessage) {
-		this.logEvent({ type: 'broadcast_message', id: this.userId! })
-		this.maybeReportColdStartTime(message.type)
-		const msg = JSON.stringify(message)
-		for (const socket of this.sockets) {
-			if (socket.readyState === WebSocket.OPEN) {
-				socket.send(msg)
-			} else if (
-				socket.readyState === WebSocket.CLOSED ||
-				socket.readyState === WebSocket.CLOSING
-			) {
-				this.sockets.delete(socket)
-			}
-		}
-	}
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
@@ -219,6 +175,29 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		return new Response(null, { status: 101, webSocket: clientWebSocket })
 	}
 
+	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
+		if (type !== 'initial_data' || !this.coldStartStartTime) return
+		const time = Date.now() - this.coldStartStartTime
+		this.coldStartStartTime = null
+		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
+	}
+
+	broadcast(message: ZServerSentMessage) {
+		this.logEvent({ type: 'broadcast_message', id: this.userId! })
+		this.maybeReportColdStartTime(message.type)
+		const msg = JSON.stringify(message)
+		for (const socket of this.sockets) {
+			if (socket.readyState === WebSocket.OPEN) {
+				socket.send(msg)
+			} else if (
+				socket.readyState === WebSocket.CLOSED ||
+				socket.readyState === WebSocket.CLOSING
+			) {
+				this.sockets.delete(socket)
+			}
+		}
+	}
+
 	private async handleSocketMessage(socket: WebSocket, message: string) {
 		const rateLimited = await isRateLimited(this.env, this.userId!)
 		this.assertCache()
@@ -239,22 +218,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
-		return db
-			.insertInto('user_mutation_number')
-			.values({
-				userId: this.userId!,
-				mutationNumber: 1,
-			})
-			.onConflict((oc) =>
-				oc.column('userId').doUpdateSet({
-					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
-				})
-			)
-			.returning('mutationNumber')
-			.executeTakeFirstOrThrow()
-	}
-
 	private async rejectMutation(socket: WebSocket, mutationId: string, errorCode: ZErrorCode) {
 		this.assertCache()
 		this.logEvent({ type: 'reject_mutation', id: this.userId! })
@@ -561,6 +524,14 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		})
 	}
 
+	// Admin utilities
+
+	async __adminKill() {
+		this.sockets.forEach((socket) => {
+			socket.close()
+		})
+	}
+
 	async admin_forceHardReboot(userId: string) {
 		if (this.cache) {
 			await this.cache?.reboot({ hard: true, delay: false, source: 'admin' })
