
index e49f6e87..bf45a630 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmprkv_rcqd_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmpcpfd9bgm_actual.txt	
@@ -91,27 +91,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		})
 		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
-	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.ctx, this.env, req)
-		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
-			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
-			return new Response('Something went wrong', {
-				status: 500,
-				statusText: 'Internal Server Error',
-			})
-		}
-	}
-
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
 	}
@@ -140,6 +119,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private readonly sockets = new Set<WebSocket>()
+	private readonly messageQueue = new ExecutionQueue()
 
 	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
 		if (type !== 'initial_data' || !this.coldStartStartTime) return
@@ -163,7 +143,27 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			}
 		}
 	}
-	private readonly messageQueue = new ExecutionQueue()
+
+	// Handle a request to the Durable Object.
+	override async fetch(req: IRequest) {
+		const sentry = createSentry(this.ctx, this.env, req)
+		try {
+			// Using storage pins the location of the DO
+			this.ctx.storage.get('pin-the-do')
+			return await this.router.fetch(req)
+		} catch (err) {
+			if (sentry) {
+				// eslint-disable-next-line @typescript-eslint/no-deprecated
+				sentry?.captureException(err)
+			} else {
+				console.error(err)
+			}
+			return new Response('Something went wrong', {
+				status: 500,
+				statusText: 'Internal Server Error',
+			})
+		}
+	}
 
 	async onRequest(req: IRequest) {
 		assert(this.userId, 'User ID not set')
@@ -219,6 +219,17 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		return new Response(null, { status: 101, webSocket: clientWebSocket })
 	}
 
+	private debug(...args: any[]) {
+		// uncomment for dev time debugging
+		// console.log('[TLUserDurableObject]: ', ...args)
+		if (this.sentry) {
+			// eslint-disable-next-line @typescript-eslint/no-deprecated
+			this.sentry.addBreadcrumb({
+				message: `[TLUserDurableObject]: ${args.map((a) => (typeof a === 'object' ? JSON.stringify(a) : a)).join(' ')}`,
+			})
+		}
+	}
+
 	private async handleSocketMessage(socket: WebSocket, message: string) {
 		const rateLimited = await isRateLimited(this.env, this.userId!)
 		this.assertCache()
