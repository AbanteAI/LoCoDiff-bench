import { /* various imports */ } from '@tldraw/dotcom-shared'
import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
import { assert, ExecutionQueue, sleep } from '@tldraw/utils'
import { createSentry } from '@tldraw/worker-shared'
import { DurableObject } from 'cloudflare:workers'
import { IRequest, Router } from 'itty-router'
import { Kysely, sql, Transaction } from 'kysely'
import { Logger } from './Logger'
import { createPostgresConnectionPool } from './postgres'
import { Analytics, Environment, getUserDoSnapshotKey, TLUserDurableObjectEvent } from './types'
import { UserDataSyncer, ZReplicationEvent } from './UserDataSyncer'
import { EventData, writeDataPoint } from './utils/analytics'
import { getRoomDurableObject } from './utils/durableObjects'
import { isRateLimited } from './utils/rateLimit'
import { retryOnConnectionFailure } from './utils/retryOnConnectionFailure'

export class TLUserDurableObject extends DurableObject<Environment> {
  private readonly db: Kysely<DB>
  private measure: Analytics | undefined
  private readonly sentry
  private log
  cache: UserDataSyncer | null = null
  private userId: string | null = null
  private coldStartStartTime: number | null = null
  interval: NodeJS.Timeout | null = null
  private readonly sockets = new Set<WebSocket>()
  private readonly messageQueue = new ExecutionQueue()

  constructor(ctx: DurableObjectState, env: Environment) {
    // ... initialization logic ...
  }

  readonly router = Router()
    .all('/app/:userId/*', async (req) => {
      // ... routing logic ...
    })
    .get(`/app/:userId/connect`, (req) => this.onRequest(req))

  override async fetch(req: IRequest) {
    // ... request handling logic ...
  }

  private assertCache(): asserts this is { cache: UserDataSyncer } {
    assert(this.cache, 'no cache')
  }

  private maybeStartInterval() {
    // ... interval management logic ...
  }

  broadcast(message: ZServerSentMessage) {
    // ... broadcasting logic ...
  }

  async onRequest(req: IRequest) {
    // ... WebSocket connection handling ...
  }

  private async handleSocketMessage(socket: WebSocket, message: string) {
    // ... message handling logic ...
  }

  async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
    // ... mutation number update logic ...
  }

  private async rejectMutation(socket: WebSocket, mutationId: string, errorCode: ZErrorCode) {
    // ... mutation rejection logic ...
  }

  private async assertValidMutation(update: ZRowUpdate, tx: Transaction<DB>) {
    // ... mutation validation logic ...
  }

  private async _doMutate(msg: ZClientSentMessage) {
    // ... mutation execution logic ...
  }

  private async handleMutate(socket: WebSocket, msg: ZClientSentMessage) {
    // ... mutation handling logic ...
  }

  async handleReplicationEvent(event: ZReplicationEvent) {
    // ... replication event handling ...
  }

  async notActive() {
    return !this.cache
  }

  private writeEvent(eventData: EventData) {
    writeDataPoint(this.sentry, this.measure, this.env, 'user_durable_object', eventData)
  }

  logEvent(event: TLUserDurableObjectEvent) {
    // ... event logging logic ...
  }

  async admin_forceHardReboot(userId: string) {
    // ... admin reboot logic ...
  }

  async admin_getData(userId: string) {
    // ... admin data retrieval logic ...
  }
}

class ZMutationError extends Error {
  constructor(
    public errorCode: ZErrorCode,
    message: string,
    public cause?: unknown
  ) {
    super(message)
  }
}