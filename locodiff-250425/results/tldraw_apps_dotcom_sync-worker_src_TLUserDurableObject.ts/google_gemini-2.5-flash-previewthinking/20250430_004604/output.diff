
index e49f6e87..3d78af7a 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmpg606subb_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmp1kptit1d_actual.txt	
@@ -59,6 +59,8 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 
 		// debug logging in preview envs by default
 		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
+
+		this.log.debug('created')
 	}
 
 	private userId: string | null = null
@@ -68,6 +70,8 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		.all('/app/:userId/*', async (req) => {
 			if (!this.userId) {
 				this.userId = req.params.userId
+				this.log.debug('set user id', this.userId)
+				this.logEvent({ type: 'user_do_started', id: this.userId! })
 			}
 			const rateLimited = await isRateLimited(this.env, this.userId!)
 			if (rateLimited) {
@@ -116,29 +120,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		assert(this.cache, 'no cache')
 	}
 
-	interval: NodeJS.Timeout | null = null
-
-	private maybeStartInterval() {
-		if (!this.interval) {
-			this.interval = setInterval(() => {
-				// do cache persist + cleanup
-				this.cache?.onInterval()
-
-				// clean up closed sockets if there are any
-				for (const socket of this.sockets) {
-					if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
-						this.sockets.delete(socket)
-					}
-				}
-
-				if (this.sockets.size === 0 && typeof this.interval === 'number') {
-					clearInterval(this.interval)
-					this.interval = null
-				}
-			}, 2000)
-		}
-	}
-
 	private readonly sockets = new Set<WebSocket>()
 
 	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
@@ -163,6 +144,37 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			}
 		}
 	}
+
+	interval: NodeJS.Timeout | null = null
+
+	private maybeStartInterval() {
+		if (!this.interval) {
+			// Give it a random delay on start to prevent spikey traffic
+			const delay = Math.random() * 5000
+			this.interval = setTimeout(() => {
+				// do cache persist + cleanup
+				this.cache?.onInterval()
+
+				// clean up closed sockets if there are any
+				for (const socket of this.sockets) {
+					if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
+						this.sockets.delete(socket)
+					}
+				}
+
+				if (this.sockets.size === 0 && typeof this.interval === 'number') {
+					clearInterval(this.interval)
+					this.interval = null
+				}
+			}, delay) as any as NodeJS.Timeout
+		}
+	}
+
+	maybeClose() {
+		if (this.sockets.size === 0) {
+			this.cache?.stopInterval()
+		}
+	}
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
@@ -194,10 +206,12 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		)
 		serverWebSocket.addEventListener('close', () => {
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 		serverWebSocket.addEventListener('error', (e) => {
 			this.captureException(e, { source: 'serverWebSocket "error" event' })
 			this.sockets.delete(serverWebSocket)
+			this.maybeClose()
 		})
 
 		this.sockets.add(serverWebSocket)
@@ -239,22 +253,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
-		return db
-			.insertInto('user_mutation_number')
-			.values({
-				userId: this.userId!,
-				mutationNumber: 1,
-			})
-			.onConflict((oc) =>
-				oc.column('userId').doUpdateSet({
-					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
-				})
-			)
-			.returning('mutationNumber')
-			.executeTakeFirstOrThrow()
-	}
-
 	private async rejectMutation(socket: WebSocket, mutationId: string, errorCode: ZErrorCode) {
 		this.assertCache()
 		this.logEvent({ type: 'reject_mutation', id: this.userId! })
@@ -428,6 +426,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 								.execute()
 						} else {
 							const { id } = update.row as any
+
 							await tx.updateTable(update.table).set(updates).where('id', '=', id).execute()
 						}
 						break
@@ -473,6 +472,22 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
+	async bumpMutationNumber(db: Kysely<DB> | Transaction<DB>) {
+		return db
+			.insertInto('user_mutation_number')
+			.values({
+				userId: this.userId!,
+				mutationNumber: 1,
+			})
+			.onConflict((oc) =>
+				oc.column('userId').doUpdateSet({
+					mutationNumber: sql`user_mutation_number."mutationNumber" + 1`,
+				})
+			)
+			.returning('mutationNumber')
+			.executeTakeFirstOrThrow()
+	}
+
 	private async handleMutate(socket: WebSocket, msg: ZClientSentMessage) {
 		this.assertCache()
 		while (!this.cache.store.getCommittedData()) {
@@ -489,6 +504,8 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					this.logEvent({ type: 'connect_retry', id: this.userId! })
 				}
 			)
+			// TODO: We should probably handle a case where the above operation succeeds but the one below fails
+			this.log.debug('mutation success', this.userId, 'new guest files')
 		} catch (e: any) {
 			const code = e instanceof ZMutationError ? e.errorCode : ZErrorCode.unknown_error
 			this.captureException(e, {
@@ -499,8 +516,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 	}
 
-	/* ------- RPCs -------  */
-
 	async handleReplicationEvent(event: ZReplicationEvent) {
 		this.logEvent({ type: 'replication_event', id: this.userId ?? 'anon' })
 		this.log.debug('replication event', event, !!this.cache)
