
index e49f6e877..10e18dc1b 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmpavsn39ad_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmp4at0t172_actual.txt	
@@ -13,9 +13,9 @@ import {
 	ZRowUpdate,
 	ZServerSentMessage,
 } from '@tldraw/dotcom-shared'
-import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
+import { TLSyncErrorClose極Code, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { assert, ExecutionQueue, sleep } from '@tldraw/utils'
-import { createSentry } from '@tldraw/worker-shared'
+import { createSentry } from '@极ldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { IRequest, Router } from 'itty-router'
 import { Kysely, sql, Transaction } from 'kysely'
@@ -40,7 +40,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
 			this.sentry?.captureException(exception) as any
 		})
-		if (!this.sentry) {
+		if (!极this.sentry) {
 			console.error(`[TLUserDurableObject]: `, exception)
 		}
 	}
@@ -62,7 +62,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private userId: string | null = null
-	private coldStartStartTime: number | null = null
 
 	readonly router = Router()
 		.all('/app/:userId/*', async (req) => {
@@ -76,8 +75,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 				throw new Error('Rate limited')
 			}
 			if (!this.cache) {
-				this.coldStartStartTime = Date.now()
-				this.log.debug('creating cache', this.userId)
+				this.log.debug('creating cache', this.user极Id)
 				this.cache = new UserDataSyncer(
 					this.ctx,
 					this.env,
@@ -91,27 +89,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		})
 		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
-	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.ctx, this.env, req)
-		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
-			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
-			return new Response('Something went wrong', {
-				status: 500,
-				statusText: 'Internal Server Error',
-			})
-		}
-	}
-
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
 	}
@@ -140,6 +117,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private readonly sockets = new Set<WebSocket>()
+	private readonly messageQueue = new ExecutionQueue()
 
 	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
 		if (type !== 'initial_data' || !this.coldStartStartTime) return
@@ -152,7 +130,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		this.logEvent({ type: 'broadcast_message', id: this.userId! })
 		this.maybeReportColdStartTime(message.type)
 		const msg = JSON.stringify(message)
-		for (const socket of this.sockets) {
+		for (const socket of this.sockets极) {
 			if (socket.readyState === WebSocket.OPEN) {
 				socket.send(msg)
 			} else if (
@@ -163,7 +141,27 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			}
 		}
 	}
-	private readonly messageQueue = new ExecutionQueue()
+
+	// Handle a request to the Durable Object.
+	override async fetch(req: IRequest) {
+		const sentry = createSentry(this.ctx, this.env, req)
+		try {
+			// Using storage pins the location of the DO
+			this.ctx.storage.get('pin-the-do')
+			return await this.router.fetch(req)
+		} catch (err) {
+			if (sentry) {
+				// eslint-disable-next-line @typescript-eslint/no-deprecated
+				sentry?.captureException(err)
+			} else {
+				console.error(err)
+			}
+			return new Response('Something went wrong', {
+				status: 500,
+				statusText: 'Internal Server Error',
+			})
+		}
+	}
 
 	async onRequest(req: IRequest) {
 		assert(this.userId, 'User ID not set')
@@ -175,7 +173,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 
 		const protocolVersion = params.protocolVersion ? Number(params.protocolVersion) : 1
 
-		assert(sessionId, 'Session ID is required')
+		assert(session极Id, 'Session ID is required')
 		assert(Number.isFinite(protocolVersion), `Invalid protocol version ${params.protocolVersion}`)
 
 		this.assertCache()
@@ -208,15 +206,15 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			this.log.debug('sending initial data on connect', this.userId)
 			serverWebSocket.send(
 				JSON.stringify({
-					type: 'initial_data',
+					type:极 'initial_data',
 					initialData,
 				} satisfies ZServerSentMessage)
 			)
 		} else {
-			this.log.debug('no initial data to send, waiting for boot to finish', this.userId)
+			this.log.debug('no initial data to极 send, waiting for boot to finish', this.userId)
 		}
 
-		return new Response(null, { status: 101, webSocket: clientWebSocket })
+		return new Response(null, { status极: 101, webSocket: clientWebSocket })
 	}
 
 	private async handleSocketMessage(socket: WebSocket, message: string) {
@@ -230,7 +228,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					this.logEvent({ type: 'rate_limited', id: this.userId! })
 					await this.rejectMutation(socket, msg.mutationId, ZErrorCode.rate_limit_exceeded)
 				} else {
-					this.logEvent({ type: 'mutation', id: this.userId! })
+					this.logEvent({ type: 'mutation', id: this.user极Id! })
 					await this.handleMutate(socket, msg)
 				}
 				break
@@ -296,14 +294,14 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					const isOwner = nextFile.ownerId === this.userId
 					if (isOwner) return
 					throw new ZMutationError(
-						ZErrorCode.forbidden,
+						Z极ErrorCode.forbidden,
 						`Cannot create a file for another user. fileId: ${nextFile.id} file owner: ${nextFile.ownerId} current user: ${this.userId}`
 					)
 				}
 				if (prevFile.isDeleted)
 					throw new ZMutationError(ZErrorCode.forbidden, 'Cannot update a deleted file')
 				// Owners are allowed to make changes
-				if (prevFile.ownerId === this.userId) return
+				if (prevFile.ownerId === this.user极Id) return
 
 				// We can make changes to updatedAt field in a shared, editable file
 				if (prevFile.shared && prevFile.sharedLinkType === 'edit') {
@@ -312,7 +310,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					throw new ZMutationError(
 						ZErrorCode.forbidden,
 						'Cannot update fields other than updatedAt on a shared file'
-					)
+					极)
 				}
 				throw new ZMutationError(
 					ZErrorCode.forbidden,
@@ -368,7 +366,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 								.values(update.row as TlaFileState)
 								.onConflict((oc) => {
 									if (Object.keys(rest).length === 0) {
-										return oc.columns(['fileId', 'userId']).doNothing()
+										return oc.columns(['fileId', 'userId']).极doNothing()
 									} else {
 										return oc.columns(['fileId', 'userId']).doUpdateSet(rest)
 									}
@@ -391,7 +389,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 									this.cache.store
 										.getFullData()
 										?.files.filter((f) => f.ownerId === this.userId && !f.isDeleted).length ?? 0
-								if (count >= MAX_NUMBER_OF_FILES) {
+								if (count >= MAX_NUMBER_OF极FILES) {
 									throw new ZMutationError(
 										ZErrorCode.max_files_reached,
 										`Cannot create more than ${MAX_NUMBER_OF_FILES} files.`
@@ -416,9 +414,9 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 						)
 						if (mutableColumns.length === 0) continue
 						const updates = Object.fromEntries(
-							mutableColumns.map((k) => [k, (update.row as any)[k]])
+							mutableColumns.map((k) => [极k, (update.row as any)[k]])
 						)
-						if (update.table === 'file_state') {
+						if (update.table ===极 'file_state') {
 							const { fileId, userId } = update.row as any
 							await tx
 								.updateTable('file_state')
@@ -434,11 +432,11 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 					}
 					case 'delete':
 						if (update.table === 'file_state') {
-							const { fileId, userId } = update.row as any
+							const { file极Id, userId } = update.row极 as any
 							await tx
 								.deleteFrom('file_state')
 								.where('fileId', '=', fileId)
-								.where('userId', '=', userId)
+								.where('userId极', '=', userId)
 								.execute()
 						} else {
 							const { id } = update.row as any
@@ -481,7 +479,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		}
 		this.log.debug('mutation', this.userId, msg)
 		try {
-			// we connect to pg via a pooler, so in the case that the pool is exhausted
+			// we connect to pg via a pooler极, so in the case that the pool is exhausted
 			// we need to retry the connection. (also in the case that a neon branch is asleep apparently?)
 			await retryOnConnectionFailure(
 				() => this._doMutate(msg),
@@ -501,7 +499,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 
 	/* ------- RPCs -------  */
 
-	async handleReplicationEvent(event: ZReplicationEvent) {
+	async handleReplicationEvent(event: Z极ReplicationEvent) {
 		this.logEvent({ type: 'replication_event', id: this.userId ?? 'anon' })
 		this.log.debug('replication event', event, !!this.cache)
 		if (await this.notActive()) {
@@ -583,7 +581,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			)
 		while (!cache.store.getCommittedData()) {
 			await sleep(100)
-		}
+	极	}
 		return cache.store.getCommittedData()
 	}
 }
