--- tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual)@@ -2,6 +2,7 @@ 	DB,
 	isColumnMutable,
 	MAX_NUMBER_OF_FILES,
+	ROOM_PREFIX,
 	TlaFile,
 	TlaFilePartial,
 	TlaFileState,
@@ -34,7 +35,6 @@ 
 	private readonly sentry
 	private captureException(exception: unknown, extras?: Record<string, unknown>) {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
 		this.sentry?.withScope((scope) => {
 			if (extras) scope.setExtras(extras)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
@@ -53,11 +53,9 @@ 		super(ctx, env)
 
 		this.sentry = createSentry(ctx, env)
-
 		this.db = createPostgresConnectionPool(env, 'TLUserDurableObject')
 		this.measure = env.MEASURE
 
-		// debug logging in preview envs by default
 		this.log = new Logger(env, 'TLUserDurableObject', this.sentry)
 	}
 
@@ -91,27 +89,6 @@ 		})
 		.get(`/app/:userId/connect`, (req) => this.onRequest(req))
 
-	// Handle a request to the Durable Object.
-	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.ctx, this.env, req)
-		try {
-			// Using storage pins the location of the DO
-			this.ctx.storage.get('pin-the-do')
-			return await this.router.fetch(req)
-		} catch (err) {
-			if (sentry) {
-				// eslint-disable-next-line @typescript-eslint/no-deprecated
-				sentry?.captureException(err)
-			} else {
-				console.error(err)
-			}
-			return new Response('Something went wrong', {
-				status: 500,
-				statusText: 'Internal Server Error',
-			})
-		}
-	}
-
 	private assertCache(): asserts this is { cache: UserDataSyncer } {
 		assert(this.cache, 'no cache')
 	}
@@ -121,10 +98,8 @@ 	private maybeStartInterval() {
 		if (!this.interval) {
 			this.interval = setInterval(() => {
-				// do cache persist + cleanup
 				this.cache?.onInterval()
 
-				// clean up closed sockets if there are any
 				for (const socket of this.sockets) {
 					if (socket.readyState === WebSocket.CLOSED || socket.readyState === WebSocket.CLOSING) {
 						this.sockets.delete(socket)
@@ -155,24 +130,18 @@ 		for (const socket of this.sockets) {
 			if (socket.readyState === WebSocket.OPEN) {
 				socket.send(msg)
-			} else if (
-				socket.readyState === WebSocket.CLOSED ||
-				socket.readyState === WebSocket.CLOSING
-			) {
-				this.sockets.delete(socket)
-			}
-		}
-	}
+			}
+		}
+	}
+
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
 		assert(this.userId, 'User ID not set')
-		// handle legacy param names
 
 		const url = new URL(req.url)
 		const params = Object.fromEntries(url.searchParams.entries())
 		const { sessionId } = params
-
 		const protocolVersion = params.protocolVersion ? Number(params.protocolVersion) : 1
 
 		assert(sessionId, 'Session ID is required')
@@ -180,7 +149,6 @@ 
 		this.assertCache()
 
-		// Create the websocket pair for the client
 		const { 0: clientWebSocket, 1: serverWebSocket } = new WebSocketPair()
 		serverWebSocket.accept()
 
@@ -223,7 +191,7 @@ 		const rateLimited = await isRateLimited(this.env, this.userId!)
 		this.assertCache()
 
-		const msg = JSON.parse(message) as any as ZClientSentMessage
+		const msg = JSON.parse(message) as ZClientSentMessage
 		switch (msg.type) {
 			case 'mutate':
 				if (rateLimited) {
@@ -270,12 +238,8 @@ 	}
 
 	private async assertValidMutation(update: ZRowUpdate, tx: Transaction<DB>) {
-		// s is the entire set of data that the user has access to
-		// and is up to date with all committed mutations so far.
-		// we commit each mutation one at a time before handling the next.
 		const s = this.cache!.store.getFullData()
 		if (!s) {
-			// This should never happen
 			throw new ZMutationError(ZErrorCode.unknown_error, 'Store data not fetched')
 		}
 		switch (update.table) {
@@ -286,7 +250,6 @@ 						ZErrorCode.forbidden,
 						'Cannot update user record that is not our own: ' + (update.row as TlaUser).id
 					)
-				// todo: prevent user from updating their email?
 				return
 			}
 			case 'file': {
@@ -302,10 +265,8 @@ 				}
 				if (prevFile.isDeleted)
 					throw new ZMutationError(ZErrorCode.forbidden, 'Cannot update a deleted file')
-				// Owners are allowed to make changes
 				if (prevFile.ownerId === this.userId) return
 
-				// We can make changes to updatedAt field in a shared, editable file
 				if (prevFile.shared && prevFile.sharedLinkType === 'edit') {
 					const { id: _id, ...rest } = nextFile
 					if (Object.keys(rest).length === 1 && rest.updatedAt !== undefined) return
@@ -324,8 +285,6 @@ 				const nextFileState = update.row as TlaFileStatePartial
 				let file = s.files.find((f) => f.id === nextFileState.fileId)
 				if (!file) {
-					// The user might not have access to this file yet, because they just followed a link
-					// let's allow them to create a file state for it if it exists and is shared.
 					file = await tx
 						.selectFrom('file')
 						.selectAll()
@@ -449,7 +408,6 @@ 				this.cache.store.updateOptimisticData([update], msg.mutationId)
 			}
 			const result = await this.bumpMutationNumber(tx)
-
 			const currentMutationNumber = this.cache.mutations.at(-1)?.mutationNumber ?? 0
 			const mutationNumber = result.mutationNumber
 			assert(
@@ -476,13 +434,10 @@ 	private async handleMutate(socket: WebSocket, msg: ZClientSentMessage) {
 		this.assertCache()
 		while (!this.cache.store.getCommittedData()) {
-			// this could happen if the cache was cleared due to a full db reboot
 			await sleep(100)
 		}
 		this.log.debug('mutation', this.userId, msg)
 		try {
-			// we connect to pg via a pooler, so in the case that the pool is exhausted
-			// we need to retry the connection. (also in the case that a neon branch is asleep apparently?)
 			await retryOnConnectionFailure(
 				() => this._doMutate(msg),
 				() => {
@@ -549,17 +504,16 @@ 	}
 
 	/** sneaky test stuff */
-	// this allows us to test the 'your client is out of date please refresh' flow
 	private __test__isForceDowngraded = false
 	async __test__downgradeClient(isDowngraded: boolean) {
-		if (this.env.IS_LOCAL !== 'true') {
-			return
-		}
+		if (this.env.IS_LOCAL !== 'true') return
 		this.__test__isForceDowngraded = isDowngraded
 		this.sockets.forEach((socket) => {
 			socket.close()
 		})
 	}
+
+	/* ------ admin stuff ------ */
 
 	async admin_forceHardReboot(userId: string) {
 		if (this.cache) {
