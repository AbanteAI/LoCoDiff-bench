
index e49f6e877..e9b6f566d 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_expectedoutput.txt (expected):tmp/tmpt9fw4v_0_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLUserDurableObject.ts_extracted.txt (actual):tmp/tmpaib3i7s__actual.txt	
@@ -140,29 +140,6 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 	}
 
 	private readonly sockets = new Set<WebSocket>()
-
-	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
-		if (type !== 'initial_data' || !this.coldStartStartTime) return
-		const time = Date.now() - this.coldStartStartTime
-		this.coldStartStartTime = null
-		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
-	}
-
-	broadcast(message: ZServerSentMessage) {
-		this.logEvent({ type: 'broadcast_message', id: this.userId! })
-		this.maybeReportColdStartTime(message.type)
-		const msg = JSON.stringify(message)
-		for (const socket of this.sockets) {
-			if (socket.readyState === WebSocket.OPEN) {
-				socket.send(msg)
-			} else if (
-				socket.readyState === WebSocket.CLOSED ||
-				socket.readyState === WebSocket.CLOSING
-			) {
-				this.sockets.delete(socket)
-			}
-		}
-	}
 	private readonly messageQueue = new ExecutionQueue()
 
 	async onRequest(req: IRequest) {
@@ -185,7 +162,7 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		serverWebSocket.accept()
 
 		if (Number(protocolVersion) !== Z_PROTOCOL_VERSION || this.__test__isForceDowngraded) {
-			serverWebSocket.close(TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
+			serverWebocket.close(TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return new Response(null, { status: 101, webSocket: clientWebSocket })
 		}
 
@@ -219,23 +196,26 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 		return new Response(null, { status: 101, webSocket: clientWebSocket })
 	}
 
-	private async handleSocketMessage(socket: WebSocket, message: string) {
-		const rateLimited = await isRateLimited(this.env, this.userId!)
-		this.assertCache()
+	maybeReportColdStartTime(type: ZServerSentMessage['type']) {
+		if (type !== 'initial_data' || !this.coldStartStartTime) return
+		const time = Date.now() - this.coldStartStartTime
+		this.coldStartStartTime = null
+		this.logEvent({ type: 'cold_start_time', id: this.userId!, duration: time })
+	}
 
-		const msg = JSON.parse(message) as any as ZClientSentMessage
-		switch (msg.type) {
-			case 'mutate':
-				if (rateLimited) {
-					this.logEvent({ type: 'rate_limited', id: this.userId! })
-					await this.rejectMutation(socket, msg.mutationId, ZErrorCode.rate_limit_exceeded)
-				} else {
-					this.logEvent({ type: 'mutation', id: this.userId! })
-					await this.handleMutate(socket, msg)
-				}
-				break
-			default:
-				this.captureException(new Error('Unhandled message'), { message })
+	broadcast(message: ZServerSentMessage) {
+		this.logEvent({ type: 'broadcast_message', id: this.userId! })
+		this.maybeReportColdStartTime(message.type)
+		const msg = JSON.stringify(message)
+		for (const socket of this.sockets) {
+			if (socket.readyState === WebSocket.OPEN) {
+				socket.send(msg)
+			} else if (
+				socket.readyState === WebSocket.CLOSED ||
+				socket.readyState === WebSocket.CLOSING
+			) {
+				this.sockets.delete(socket)
+			}
 		}
 	}
 
@@ -255,6 +235,26 @@ export class TLUserDurableObject extends DurableObject<Environment> {
 			.executeTakeFirstOrThrow()
 	}
 
+	private async handleSocketMessage(socket: WebSocket, message: string) {
+		const rateLimited = await isRateLimited(this.env, this.userId!)
+		this.assertCache()
+
+		const msg = JSON.parse(message) as any as ZClientSentMessage
+		switch (msg.type) {
+			case 'mutate':
+				if (rateLimited) {
+					this.logEvent({ type: 'rate_limited', id: this.userId! })
+					await this.rejectMutation(socket, msg.mutationId, ZErrorCode.rate_limit_exceeded)
+				} else {
+					this.logEvent({ type: 'mutation', id: this.userId! })
+					await this.handleMutate(socket, msg)
+				}
+				break
+			default:
+				this.captureException(new Error('Unhandled message'), { message })
+		}
+	}
+
 	private async rejectMutation(socket: WebSocket, mutationId: string, errorCode: ZErrorCode) {
 		this.assertCache()
 		this.logEvent({ type: 'reject_mutation', id: this.userId! })
