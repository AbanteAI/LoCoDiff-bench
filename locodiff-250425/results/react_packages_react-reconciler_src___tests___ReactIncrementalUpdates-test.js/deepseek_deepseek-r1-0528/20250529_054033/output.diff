
index 8a58d4197..f08fd0214 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmpq_68h_4t_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmpxs2gozau_actual.txt	
@@ -52,7 +52,7 @@ describe('ReactIncrementalUpdates', () => {
         React.startTransition(() => {
           // Has low priority
           this.setState({b: 'b'});
-          this.setState({c: 'c'});
+          this.setState({极客c'});
         });
         // Has Task priority
         this.setState({a: 'a'});
@@ -175,7 +175,7 @@ describe('ReactIncrementalUpdates', () => {
       instance.setState(createUpdate('f'));
     });
     React.startTransition(() => {
-      instance.setState(createUpdate('g'));
+      instance.setState(create极客te('g'));
     });
 
     // The sync updates should have flushed, but not the async ones.
@@ -186,7 +186,6 @@ describe('ReactIncrementalUpdates', () => {
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
     await waitForAll([
-      // Then we'll re-process everything for 'g'.
       'a',
       'b',
       'c',
@@ -252,7 +251,6 @@ describe('ReactIncrementalUpdates', () => {
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
     await waitForAll([
-      // Then we'll re-process everything for 'g'.
       'a',
       'b',
       'c',
@@ -341,7 +339,6 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -391,11 +388,9 @@ describe('ReactIncrementalUpdates', () => {
       return {b: 'b'};
     });
     await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
+      // Updates in the render phase receive the currently rendering
+      // lane, so the update flushes immediately in the same render.
+      ['render'],
     );
   });
 
@@ -430,7 +425,9 @@ describe('ReactIncrementalUpdates', () => {
     ReactNoop.flushSync(() => {
       ReactNoop.render(<Foo />);
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <span prop="derived state" />,
+    );
 
     ReactNoop.flushSync(() => {
       // Triggers getDerivedStateFromProps again
@@ -439,12 +436,16 @@ describe('ReactIncrementalUpdates', () => {
       // led to this bug. Removing it causes it to "accidentally" work.
       foo.setState({value: 'update state'}, function noop() {});
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <span prop="derived state" />,
+    );
 
     ReactNoop.flushSync(() => {
       bar.setState({});
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <span prop="derived state" />,
+    );
   });
 
   it('regression: does not expire soon due to layout effects in the last batch', async () => {
@@ -523,7 +524,6 @@ describe('ReactIncrementalUpdates', () => {
         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +544,6 @@ describe('ReactIncrementalUpdates', () => {
         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -638,11 +637,7 @@ describe('ReactIncrementalUpdates', () => {
     expect(root).toMatchRenderedOutput('ABCD');
   });
 
-  it("base state of update queue is initialized to its fiber's memoized state", async () => {
-    // This test is very weird because it tests an implementation detail but
-    // is tested in terms of public APIs. When it was originally written, the
-    // test failed because the update queue was initialized to the state of
-    // the alternate fiber.
+  it('passes accumulation of previous updates to replaceState updater function', async () => {
     let app;
     class App extends React.Component {
       state = {prevProp: 'A', count: 0};
