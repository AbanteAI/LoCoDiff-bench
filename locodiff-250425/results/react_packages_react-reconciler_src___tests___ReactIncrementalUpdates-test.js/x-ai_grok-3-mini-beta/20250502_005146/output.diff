--- react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual)@@ -5,7 +5,6 @@  * LICENSE file in the root directory of this source tree.
  *
  * @emails react-core
- * @jest-environment node
  */
 
 'use strict';
@@ -13,12 +12,6 @@ let React;
 let ReactNoop;
 let Scheduler;
-let ContinuousEventPriority;
-let act;
-let waitForAll;
-let waitFor;
-let assertLog;
-let assertConsoleErrorDev;
 
 describe('ReactIncrementalUpdates', () => {
   beforeEach(() => {
@@ -27,15 +20,6 @@     React = require('react');
     ReactNoop = require('react-noop-renderer');
     Scheduler = require('scheduler');
-    act = require('internal-test-utils').act;
-    ContinuousEventPriority =
-      require('react-reconciler/constants').ContinuousEventPriority;
-
-    const InternalTestUtils = require('internal-test-utils');
-    waitForAll = InternalTestUtils.waitForAll;
-    waitFor = InternalTestUtils.waitFor;
-    assertLog = InternalTestUtils.assertLog;
-    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
   function Text({text}) {
@@ -43,7 +27,7 @@     return text;
   }
 
-  it('applies updates in order of priority', async () => {
+  it('applies updates in order of priority', () => {
     let state;
     class Foo extends React.Component {
       state = {};
@@ -64,14 +48,13 @@     }
 
     ReactNoop.render(<Foo />);
-    await waitFor(['commit']);
-
+    expect(Scheduler).toFlushAndYieldThrough(['commit']);
     expect(state).toEqual({a: 'a'});
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(state).toEqual({a: 'a', b: 'b', c: 'c'});
   });
 
-  it('applies updates with equal priority in insertion order', async () => {
+  it('applies updates with equal priority in insertion order', () => {
     let state;
     class Foo extends React.Component {
       state = {};
@@ -88,11 +71,11 @@     }
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(state).toEqual({a: 'a', b: 'b', c: 'c'});
   });
 
-  it('only drops updates with equal or lesser priority when replaceState is called', async () => {
+  it('only drops updates with equal or lesser priority when replaceState is called', () => {
     let instance;
     class Foo extends React.Component {
       state = {};
@@ -110,7 +93,7 @@     }
 
     ReactNoop.render(<Foo />);
-    await waitForAll(['render', 'componentDidMount']);
+    expect(Scheduler).toFlushAndYield(['render', 'componentDidMount']);
 
     ReactNoop.flushSync(() => {
       React.startTransition(() => {
@@ -128,9 +111,9 @@     // Even though a replaceState has been already scheduled, it hasn't been
     // flushed yet because it has async priority.
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-    assertLog(['render', 'componentDidUpdate']);
-
-    await waitForAll(['render', 'componentDidUpdate']);
+    expect(Scheduler).toHaveYielded(['render', 'componentDidUpdate']);
+
+    expect(Scheduler).toFlushAndYield(['render', 'componentDidUpdate']);
     // Now the rest of the updates are flushed, including the replaceState.
     expect(instance.state).toEqual({c: 'c', d: 'd'});
   });
@@ -146,14 +129,12 @@     }
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
 
     function createUpdate(letter) {
       return () => {
         Scheduler.log(letter);
-        return {
-          [letter]: letter,
-        };
+        return {[letter]: letter};
       };
     }
 
@@ -165,7 +146,7 @@     });
 
     // Begin the updates but don't flush them yet
-    await waitFor(['a', 'b', 'c']);
+    expect(Scheduler).toFlushAndYieldThrough(['a', 'b', 'c']);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="" />);
 
     // Schedule some more updates at different priorities
@@ -179,22 +160,46 @@     });
 
     // The sync updates should have flushed, but not the async ones.
-    assertLog(['d', 'e', 'f']);
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="def" />);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['d', 'e', 'f']);
+      expect(ReactNoop).toMatchRenderedOutput(<span prop="def" />);
+    } else {
+      // Update d was dropped and replaced by e.
+      assertLog(['e', 'f']);
+      expect(ReactNoop).toMatchRenderedOutput(<span prop="ef" />);
+    }
 
     // Now flush the remaining work. Even though e and f were already processed,
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
-    await waitForAll([
-      // Then we'll re-process everything for 'g'.
-      'a',
-      'b',
-      'c',
-      'd',
-      'e',
-      'f',
-      'g',
-    ]);
+    if (gate(flags => !flags.enableUnifiedSyncLane)) {
+      await waitForAll([
+        // Since 'g' is in a transition, we'll process 'd' separately first.
+        // That causes us to process 'd' with 'e' and 'f' rebased.
+        'd',
+        'e',
+        'f',
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    } else {
+      await waitForAll([
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="abcdefg" />);
   });
 
@@ -209,14 +214,12 @@     }
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
 
     function createUpdate(letter) {
       return () => {
         Scheduler.log(letter);
-        return {
-          [letter]: letter,
-        };
+        return {[letter]: letter};
       };
     }
 
@@ -228,7 +231,7 @@     });
 
     // Begin the updates but don't flush them yet
-    await waitFor(['a', 'b', 'c']);
+    expect(Scheduler).toFlushAndYieldThrough(['a', 'b', 'c']);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="" />);
 
     // Schedule some more updates at different priorities
@@ -245,22 +248,45 @@     });
 
     // The sync updates should have flushed, but not the async ones.
-    assertLog(['d', 'e', 'f']);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['d', 'e', 'f']);
+    } else {
+      // Update d was dropped and replaced by e.
+      assertLog(['e', 'f']);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="f" />);
 
     // Now flush the remaining work. Even though e and f were already processed,
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
-    await waitForAll([
-      // Then we'll re-process everything for 'g'.
-      'a',
-      'b',
-      'c',
-      'd',
-      'e',
-      'f',
-      'g',
-    ]);
+    if (gate(flags => !flags.enableUnifiedSyncLane)) {
+      await waitForAll([
+        // Since 'g' is in a transition, we'll process 'd' separately first.
+        // That causes us to process 'd' with 'e' and 'f' rebased.
+        'd',
+        'e',
+        'f',
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    } else {
+      await waitForAll([
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="fg" />);
   });
 
@@ -274,7 +300,7 @@       }
     }
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
 
     instance.setState({a: 'a'});
     instance.setState({b: 'b'});
@@ -283,7 +309,7 @@     instance.updater.enqueueReplaceState(instance, previousState => ({
       previousState,
     }));
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(instance.state).toEqual({previousState: {a: 'a', b: 'b'}});
   });
 
@@ -336,12 +362,9 @@ 
     ReactNoop.flushSync(() => {
       instance.setState({a: 'a'});
-
       ReactNoop.render(<Foo />); // Trigger componentWillReceiveProps
     });
-
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -390,18 +413,10 @@       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll(['render']);
   });
 
   it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
-    // Based on real-world bug.
-
     let foo;
     class Foo extends React.Component {
       state = {value: 'initial state'};
@@ -411,10 +426,7 @@       render() {
         foo = this;
         return (
-          <>
-            <span prop={this.state.value} />
-            <Bar />
-          </>
+          <span prop={this.state.value} />
         );
       }
     }
@@ -462,7 +474,7 @@       return <Text text="Child" />;
     }
 
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         ReactNoop.render(<App />);
       });
@@ -482,7 +494,6 @@       // The transition should not have expired, so we should be able to
       // partially render it.
       await waitFor(['Render: 2']);
-      // Now do the rest
       await waitForAll(['Child']);
     });
   });
@@ -523,7 +534,6 @@         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +554,6 @@         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -592,7 +601,25 @@         pushToLog('B'),
       );
     });
-    assertLog(['Committed: B', 'Committed: BCD', 'Committed: ABCD']);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['Committed: B', 'Committed: BCD', 'Committed: ABCD']);
+    } else {
+      assertLog([
+        // A and B are pending. B is higher priority, so we'll render that first.
+        'Committed: B',
+        // Because A comes first in the queue, we're now in rebase mode. B must
+        // be rebased on top of A. Also, in a layout effect, we received two new
+        // updates: C and D. C is user-blocking and D is synchronous.
+        //
+        // First render the synchronous update. What we're testing here is that
+        // B *is not dropped* even though it has lower than sync priority. That's
+        // because we already committed it. However, this render should not
+        // include C, because that update wasn't already committed.
+        'Committed: BD',
+        'Committed: BCD',
+        'Committed: ABCD',
+      ]);
+    }
     expect(root).toMatchRenderedOutput('ABCD');
   });
 
@@ -610,7 +637,7 @@           ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
             this.pushToLog('C'),
           );
-          this.pushToLog('D');
+          this.setState(prevState => ({log: prevState.log + 'D'}));
         }
       }
       render() {
@@ -630,15 +657,34 @@       React.startTransition(() => {
         pushToLog('A');
       });
+
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
       );
     });
-    assertLog(['Committed: B', 'Committed: BCD', 'Committed: ABCD']);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['Committed: B', 'Committed: BCD', 'Committed: ABCD']);
+    } else {
+      assertLog([
+        // A and B are pending. B is higher priority, so we'll render that first.
+        'Committed: B',
+        // Because A comes first in the queue, we're now in rebase mode. B must
+        // be rebased on top of A. Also, in a layout effect, we received two new
+        // updates: C and D. C is user-blocking and D is synchronous.
+        //
+        // First render the synchronous update. What we're testing here is that
+        // B *is not dropped* even though it has lower than sync priority. That's
+        // because we already committed it. However, this render should not
+        // include C, because that update wasn't already committed.
+        'Committed: BD',
+        'Committed: BCD',
+        'Committed: ABCD',
+      ]);
+    }
     expect(root).toMatchRenderedOutput('ABCD');
   });
 
-  it("base state of update queue is initialized to its fiber's memoized state", async () => {
+  it("base state of update queue is initialized to its fiber's memoized state", () => {
     // This test is very weird because it tests an implementation detail but
     // is tested in terms of public APIs. When it was originally written, the
     // test failed because the update queue was initialized to the state of
@@ -665,20 +711,20 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    act(() => {
       root.render(<App prop="A" />);
     });
     expect(root).toMatchRenderedOutput('0');
 
     // Changing the prop causes the count to increase by 100
-    await act(() => {
+    act(() => {
       root.render(<App prop="B" />);
     });
     expect(root).toMatchRenderedOutput('100');
 
     // Now increment the count by 1 with a state update. And, in the same
     // batch, change the prop back to its original value.
-    await act(() => {
+    act(() => {
       root.render(<App prop="A" />);
       app.setState(state => ({count: state.count + 1}));
     });
