--- react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual)@@ -27,15 +27,14 @@     React = require('react');
     ReactNoop = require('react-noop-renderer');
     Scheduler = require('scheduler');
-    act = require('internal-test-utils').act;
-    ContinuousEventPriority =
-      require('react-reconciler/constants').ContinuousEventPriority;
-
     const InternalTestUtils = require('internal-test-utils');
+    act = InternalTestUtils.act;
     waitForAll = InternalTestUtils.waitForAll;
     waitFor = InternalTestUtils.waitFor;
     assertLog = InternalTestUtils.assertLog;
     assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
+    ContinuousEventPriority =
+      require('react-reconciler/constants').ContinuousEventPriority;
   });
 
   function Text({text}) {
@@ -390,16 +389,10 @@       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
-  });
-
-  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
+    await waitForAll(['render']);
+  });
+
+  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', async () => {
     // Based on real-world bug.
 
     let foo;
@@ -508,6 +501,7 @@     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
+
     await waitFor(['B']);
     await waitForAll(['C', 'D']);
   });
@@ -523,7 +517,6 @@         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +537,6 @@         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -607,9 +599,9 @@         Scheduler.log('Committed: ' + this.state.log);
         if (this.state.log === 'B') {
           // Right after B commits, schedule additional updates.
-          ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
-            this.pushToLog('C'),
-          );
+          ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () => {
+            this.pushToLog('C');
+          });
           this.pushToLog('D');
         }
       }
