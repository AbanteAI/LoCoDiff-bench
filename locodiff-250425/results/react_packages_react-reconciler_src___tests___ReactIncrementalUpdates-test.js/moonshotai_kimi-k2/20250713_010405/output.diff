
index 8a58d4197..55cd4e91d 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmpduxd_ud5_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmpfott0eoj_actual.txt	
@@ -233,7 +233,6 @@ describe('ReactIncrementalUpdates', () => {
 
     // Schedule some more updates at different priorities
     instance.setState(createUpdate('d'));
-
     ReactNoop.flushSync(() => {
       instance.setState(createUpdate('e'));
       // No longer a public API, but we can test that it works internally by
@@ -336,12 +335,10 @@ describe('ReactIncrementalUpdates', () => {
 
     ReactNoop.flushSync(() => {
       instance.setState({a: 'a'});
-
       ReactNoop.render(<Foo />); // Trigger componentWillReceiveProps
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -390,16 +387,10 @@ describe('ReactIncrementalUpdates', () => {
       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll(['render']);
   });
 
-  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
+  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', async () => {
     // Based on real-world bug.
 
     let foo;
@@ -508,6 +499,7 @@ describe('ReactIncrementalUpdates', () => {
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
+
     await waitFor(['B']);
     await waitForAll(['C', 'D']);
   });
@@ -523,7 +515,6 @@ describe('ReactIncrementalUpdates', () => {
         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +535,6 @@ describe('ReactIncrementalUpdates', () => {
         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -584,10 +574,7 @@ describe('ReactIncrementalUpdates', () => {
     expect(root).toMatchRenderedOutput(null);
 
     await act(() => {
-      React.startTransition(() => {
-        pushToLog('A');
-      });
-
+      pushToLog('A');
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
       );
@@ -627,9 +614,7 @@ describe('ReactIncrementalUpdates', () => {
     expect(root).toMatchRenderedOutput(null);
 
     await act(() => {
-      React.startTransition(() => {
-        pushToLog('A');
-      });
+      pushToLog('A');
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
       );
