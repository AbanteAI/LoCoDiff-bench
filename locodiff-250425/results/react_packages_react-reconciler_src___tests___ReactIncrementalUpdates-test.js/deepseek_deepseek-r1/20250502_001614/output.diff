
index 8a58d419..85e67e32 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmpc2v03e23_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmp3fh7zza2_actual.txt	
@@ -341,7 +341,6 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -399,7 +398,7 @@ describe('ReactIncrementalUpdates', () => {
     );
   });
 
-  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
+  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', async () => {
     // Based on real-world bug.
 
     let foo;
@@ -639,17 +638,10 @@ describe('ReactIncrementalUpdates', () => {
   });
 
   it("base state of update queue is initialized to its fiber's memoized state", async () => {
-    // This test is very weird because it tests an implementation detail but
-    // is tested in terms of public APIs. When it was originally written, the
-    // test failed because the update queue was initialized to the state of
-    // the alternate fiber.
     let app;
     class App extends React.Component {
       state = {prevProp: 'A', count: 0};
       static getDerivedStateFromProps(props, state) {
-        // Add 100 whenever the label prop changes. The prev label is stored
-        // in state. If the state is dropped incorrectly, we'll fail to detect
-        // prop changes.
         if (props.prop !== state.prevProp) {
           return {
             prevProp: props.prop,
