
index 8a58d4197..aa5c1a523 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmp69ov5gao_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmpul8fibkh_actual.txt	
@@ -27,11 +27,11 @@ describe('ReactIncrementalUpdates', () => {
     React = require('react');
     ReactNoop = require('react-noop-renderer');
     Scheduler = require('scheduler');
-    act = require('internal-test-utils').act;
     ContinuousEventPriority =
       require('react-reconciler/constants').ContinuousEventPriority;
 
     const InternalTestUtils = require('internal-test-utils');
+    act = InternalTestUtils.act;
     waitForAll = InternalTestUtils.waitForAll;
     waitFor = InternalTestUtils.waitFor;
     assertLog = InternalTestUtils.assertLog;
@@ -341,7 +341,6 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -390,18 +389,10 @@ describe('ReactIncrementalUpdates', () => {
       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll(['render']);
   });
 
   it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
-    // Based on real-world bug.
-
     let foo;
     class Foo extends React.Component {
       state = {value: 'initial state'};
@@ -482,7 +473,6 @@ describe('ReactIncrementalUpdates', () => {
       // The transition should not have expired, so we should be able to
       // partially render it.
       await waitFor(['Render: 2']);
-      // Now do the rest
       await waitForAll(['Child']);
     });
   });
@@ -678,7 +668,7 @@ describe('ReactIncrementalUpdates', () => {
 
     // Now increment the count by 1 with a state update. And, in the same
     // batch, change the prop back to its original value.
-    await act(() => {
+    await act(async () => {
       root.render(<App prop="A" />);
       app.setState(state => ({count: state.count + 1}));
     });
