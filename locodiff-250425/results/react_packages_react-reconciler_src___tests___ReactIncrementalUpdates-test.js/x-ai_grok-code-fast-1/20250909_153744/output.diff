
index 8a58d4197..b1c05302d 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmpmazn_c_2_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmpng0jgyq8_actual.txt	
@@ -68,6 +68,7 @@ describe('ReactIncrementalUpdates', () => {
 
     expect(state).toEqual({a: 'a'});
     await waitForAll([]);
+
     expect(state).toEqual({a: 'a', b: 'b', c: 'c'});
   });
 
@@ -341,7 +342,6 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -390,18 +390,10 @@ describe('ReactIncrementalUpdates', () => {
       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll(['render']);
   });
 
-  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
-    // Based on real-world bug.
-
+  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', async () => {
     let foo;
     class Foo extends React.Component {
       state = {value: 'initial state'};
@@ -410,12 +402,7 @@ describe('ReactIncrementalUpdates', () => {
       }
       render() {
         foo = this;
-        return (
-          <>
-            <span prop={this.state.value} />
-            <Bar />
-          </>
-        );
+        return <span prop={this.state.value} />;
       }
     }
 
