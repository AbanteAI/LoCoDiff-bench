
index 8a58d419..b1649f68 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmp590d58jl_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmpsr8no5aq_actual.txt	
@@ -158,11 +158,23 @@ describe('ReactIncrementalUpdates', () => {
     }
 
     // Schedule some async updates
-    React.startTransition(() => {
+    if (
+      gate(
+        flags =>
+          !flags.forceConcurrentByDefaultForTesting ||
+          flags.enableUnifiedSyncLane,
+      )
+    ) {
+      React.startTransition(() => {
+        instance.setState(createUpdate('a'));
+        instance.setState(createUpdate('b'));
+        instance.setState(createUpdate('c'));
+      });
+    } else {
       instance.setState(createUpdate('a'));
       instance.setState(createUpdate('b'));
       instance.setState(createUpdate('c'));
-    });
+    }
 
     // Begin the updates but don't flush them yet
     await waitFor(['a', 'b', 'c']);
@@ -221,11 +233,23 @@ describe('ReactIncrementalUpdates', () => {
     }
 
     // Schedule some async updates
-    React.startTransition(() => {
+    if (
+      gate(
+        flags =>
+          !flags.forceConcurrentByDefaultForTesting ||
+          flags.enableUnifiedSyncLane,
+      )
+    ) {
+      React.startTransition(() => {
+        instance.setState(createUpdate('a'));
+        instance.setState(createUpdate('b'));
+        instance.setState(createUpdate('c'));
+      });
+    } else {
       instance.setState(createUpdate('a'));
       instance.setState(createUpdate('b'));
       instance.setState(createUpdate('c'));
-    });
+    }
 
     // Begin the updates but don't flush them yet
     await waitFor(['a', 'b', 'c']);
@@ -233,7 +257,6 @@ describe('ReactIncrementalUpdates', () => {
 
     // Schedule some more updates at different priorities
     instance.setState(createUpdate('d'));
-
     ReactNoop.flushSync(() => {
       instance.setState(createUpdate('e'));
       // No longer a public API, but we can test that it works internally by
@@ -390,13 +413,11 @@ describe('ReactIncrementalUpdates', () => {
       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll([
+      // Updates in the render phase receive the currently rendering
+      // lane, so the update flushes immediately in the same render.
+      'render',
+    ]);
   });
 
   it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
@@ -463,9 +484,13 @@ describe('ReactIncrementalUpdates', () => {
     }
 
     await act(async () => {
-      React.startTransition(() => {
+      if (gate(flags => flags.enableSyncDefaultUpdates)) {
+        React.startTransition(() => {
+          ReactNoop.render(<App />);
+        });
+      } else {
         ReactNoop.render(<App />);
-      });
+      }
       assertLog([]);
       await waitForAll([
         'Render: 0',
@@ -476,9 +501,13 @@ describe('ReactIncrementalUpdates', () => {
       ]);
 
       Scheduler.unstable_advanceTime(10000);
-      React.startTransition(() => {
+      if (gate(flags => flags.enableSyncDefaultUpdates)) {
+        React.startTransition(() => {
+          setCount(2);
+        });
+      } else {
         setCount(2);
-      });
+      }
       // The transition should not have expired, so we should be able to
       // partially render it.
       await waitFor(['Render: 2']);
@@ -495,7 +524,18 @@ describe('ReactIncrementalUpdates', () => {
 
     Scheduler.unstable_advanceTime(10000);
 
-    React.startTransition(() => {
+    if (gate(flags => flags.enableSyncDefaultUpdates)) {
+      React.startTransition(() => {
+        ReactNoop.render(
+          <>
+            <Text text="A" />
+            <Text text="B" />
+            <Text text="C" />
+            <Text text="D" />
+          </>,
+        );
+      });
+    } else {
       ReactNoop.render(
         <>
           <Text text="A" />
@@ -504,7 +544,7 @@ describe('ReactIncrementalUpdates', () => {
           <Text text="D" />
         </>,
       );
-    });
+    }
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -513,7 +553,18 @@ describe('ReactIncrementalUpdates', () => {
   });
 
   it('regression: does not expire soon due to previous expired work', async () => {
-    React.startTransition(() => {
+    if (gate(flags => flags.enableSyncDefaultUpdates)) {
+      React.startTransition(() => {
+        ReactNoop.render(
+          <>
+            <Text text="A" />
+            <Text text="B" />
+            <Text text="C" />
+            <Text text="D" />
+          </>,
+        );
+      });
+    } else {
       ReactNoop.render(
         <>
           <Text text="A" />
@@ -522,7 +573,7 @@ describe('ReactIncrementalUpdates', () => {
           <Text text="D" />
         </>,
       );
-    });
+    }
 
     await waitFor(['A']);
     // This will expire the rest of the update
@@ -534,7 +585,18 @@ describe('ReactIncrementalUpdates', () => {
     Scheduler.unstable_advanceTime(10000);
 
     // Now do another transition. This one should not expire.
-    React.startTransition(() => {
+    if (gate(flags => flags.enableSyncDefaultUpdates)) {
+      React.startTransition(() => {
+        ReactNoop.render(
+          <>
+            <Text text="A" />
+            <Text text="B" />
+            <Text text="C" />
+            <Text text="D" />
+          </>,
+        );
+      });
+    } else {
       ReactNoop.render(
         <>
           <Text text="A" />
@@ -543,7 +605,7 @@ describe('ReactIncrementalUpdates', () => {
           <Text text="D" />
         </>,
       );
-    });
+    }
 
     // The transition should not have expired, so we should be able to
     // partially render it.
@@ -584,9 +646,13 @@ describe('ReactIncrementalUpdates', () => {
     expect(root).toMatchRenderedOutput(null);
 
     await act(() => {
-      React.startTransition(() => {
+      if (gate(flags => flags.enableSyncDefaultUpdates)) {
+        React.startTransition(() => {
+          pushToLog('A');
+        });
+      } else {
         pushToLog('A');
-      });
+      }
 
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
@@ -627,9 +693,13 @@ describe('ReactIncrementalUpdates', () => {
     expect(root).toMatchRenderedOutput(null);
 
     await act(() => {
-      React.startTransition(() => {
+      if (gate(flags => flags.enableSyncDefaultUpdates)) {
+        React.startTransition(() => {
+          pushToLog('A');
+        });
+      } else {
         pushToLog('A');
-      });
+      }
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
       );
