```javascript
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails react-core
 * @jest-environment node
 */

'use strict';

let React;
let ReactNoop;
let Scheduler;
let ContinuousEventPriority;
let act;
let waitForAll;
let waitFor;
let assertLog;
let assertConsoleErrorDev;

describe('ReactIncrementalUpdates', () => {
  beforeEach(() => {
    jest.resetModules();

    React = require('react');
    ReactNoop = require('react-noop-renderer');
    Scheduler = require('scheduler');
    act = require('internal-test-utils').act;
    ContinuousEventPriority =
      require('react-reconciler/constants').ContinuousEventPriority;

    const InternalTestUtils = require('internal-test-utils');
    waitForAll = InternalTestUtils.waitForAll;
    waitFor = InternalTestUtils.waitFor;
    assertLog = InternalTestUtils.assertLog;
    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
  });

  function Text({text}) {
    Scheduler.log(text);
    return text;
  }

  // … (The rest of the file remains unchanged except for the updated test below)

  it('updates triggered from inside a class setState updater', async () => {
    let instance;
    class Foo extends React.Component {
      state = {};
      render() {
        Scheduler.log('render');
        instance = this;
        return <div />;
      }
    }

    ReactNoop.render(<Foo />);
    await waitForAll(['render']);

    instance.setState(function a() {
      Scheduler.log('setState updater');
      this.setState({b: 'b'});
      return {a: 'a'};
    });

    await waitForAll([
      'setState updater',
      // Updates in the render phase receive the currently rendering
      // lane, so the update flushes immediately in the same render.
      'render',
    ]);

    assertConsoleErrorDev([
      'An update (setState, replaceState, or forceUpdate) was scheduled ' +
        'from inside an update function. Update functions should be pure, ' +
        'with zero side-effects. Consider using componentDidUpdate or a ' +
        'callback.\n' +
        '\n' +
        'Please update the following component: Foo\n' +
        '    in Foo (at **)',
    ]);
    expect(instance.state).toEqual({a: 'a', b: 'b'});

    // Test deduplication (no additional warnings expected)
    instance.setState(function a() {
      this.setState({a: 'a'});
      return {b: 'b'};
    });
    await waitForAll(['render']);
  });

  // … (The remainder of the tests stay the same)
});
```