--- react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual)@@ -336,12 +336,10 @@ 
     ReactNoop.flushSync(() => {
       instance.setState({a: 'a'});
-
       ReactNoop.render(<Foo />); // Trigger componentWillReceiveProps
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -390,16 +388,10 @@       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
-  });
-
-  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
+    await waitForAll(['render']);
+  });
+
+  it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', async () => {
     // Based on real-world bug.
 
     let foo;
@@ -523,7 +515,6 @@         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +535,6 @@         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -638,7 +628,7 @@     expect(root).toMatchRenderedOutput('ABCD');
   });
 
-  it("base state of update queue is initialized to its fiber's memoized state", async () => {
+  it('base state of update queue is initialized to its fiber\'s memoized state', async () => {
     // This test is very weird because it tests an implementation detail but
     // is tested in terms of public APIs. When it was originally written, the
     // test failed because the update queue was initialized to the state of
@@ -685,4 +675,4 @@     // There were two total prop changes, plus an increment.
     expect(root).toMatchRenderedOutput('201');
   });
-});+}