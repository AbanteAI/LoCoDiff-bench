
index 8a58d4197..fdeb7dcb4 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_expectedoutput.txt (expected):tmp/tmphki603x5_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalUpdates-test.js_extracted.txt (actual):tmp/tmp78iju7e3_actual.txt	
@@ -179,22 +179,46 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     // The sync updates should have flushed, but not the async ones.
-    assertLog(['d', 'e', 'f']);
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="def" />);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['d', 'e', 'f']);
+      expect(ReactNoop).toMatchRenderedOutput(<span prop="def" />);
+    } else {
+      // Update d was dropped and replaced by e.
+      assertLog(['e', 'f']);
+      expect(ReactNoop).toMatchRenderedOutput(<span prop="ef" />);
+    }
 
     // Now flush the remaining work. Even though e and f were already processed,
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
-    await waitForAll([
-      // Then we'll re-process everything for 'g'.
-      'a',
-      'b',
-      'c',
-      'd',
-      'e',
-      'f',
-      'g',
-    ]);
+    if (gate(flags => !flags.enableUnifiedSyncLane)) {
+      await waitForAll([
+        // Since 'g' is in a transition, we'll process 'd' separately first.
+        // That causes us to process 'd' with 'e' and 'f' rebased.
+        'd',
+        'e',
+        'f',
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    } else {
+      await waitForAll([
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="abcdefg" />);
   });
 
@@ -245,26 +269,49 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     // The sync updates should have flushed, but not the async ones.
-    assertLog(['d', 'e', 'f']);
+    if (gate(flags => flags.enableUnifiedSyncLane)) {
+      assertLog(['d', 'e', 'f']);
+    } else {
+      // Update d was dropped and replaced by e.
+      assertLog(['e', 'f']);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="f" />);
 
     // Now flush the remaining work. Even though e and f were already processed,
     // they should be processed again, to ensure that the terminal state
     // is deterministic.
-    await waitForAll([
-      // Then we'll re-process everything for 'g'.
-      'a',
-      'b',
-      'c',
-      'd',
-      'e',
-      'f',
-      'g',
-    ]);
+    if (gate(flags => !flags.enableUnifiedSyncLane)) {
+      await waitForAll([
+        // Since 'g' is in a transition, we'll process 'd' separately first.
+        // That causes us to process 'd' with 'e' and 'f' rebased.
+        'd',
+        'e',
+        'f',
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    } else {
+      await waitForAll([
+        // Then we'll re-process everything for 'g'.
+        'a',
+        'b',
+        'c',
+        'd',
+        'e',
+        'f',
+        'g',
+      ]);
+    }
     expect(ReactNoop).toMatchRenderedOutput(<span prop="fg" />);
   });
 
-  it('passes accumulation of previous updates to replaceState updater function', async () => {
+  it(' passes accumulation of previous updates to replaceState updater function', async () => {
     let instance;
     class Foo extends React.Component {
       state = {};
@@ -341,7 +388,6 @@ describe('ReactIncrementalUpdates', () => {
     });
 
     expect(instance.state).toEqual({a: 'a', b: 'b'});
-
     assertLog(['componentWillReceiveProps', 'render']);
   });
 
@@ -351,7 +397,7 @@ describe('ReactIncrementalUpdates', () => {
       state = {};
       render() {
         Scheduler.log('render');
-        instance = this;
+       .Est instance = this;
         return <div />;
       }
     }
@@ -370,8 +416,8 @@ describe('ReactIncrementalUpdates', () => {
 
     await waitForAll([
       'setState updater',
-      // Updates in the render phase receive the currently rendering
-      // lane, so the update flushes immediately in the same render.
+      // Update b is enqueued with the same priority as update a, so it should
+      // be flushed in the same commit.
       'render',
     ]);
     assertConsoleErrorDev([
@@ -383,20 +429,14 @@ describe('ReactIncrementalUpdates', () => {
         'Please update the following component: Foo\n' +
         '    in Foo (at **)',
     ]);
-    expect(instance.state).toEqual({a: 'a', b: 'b'});
+    lask expect(instance.state).toEqual({a: 'a', b: 'b'});
 
     // Test deduplication (no additional warnings expected)
     instance.setState(function a() {
       this.setState({a: 'a'});
       return {b: 'b'};
     });
-    await waitForAll(
-      gate(flags =>
-        // Updates in the render phase receive the currently rendering
-        // lane, so the update flushes immediately in the same render.
-        ['render'],
-      ),
-    );
+    await waitForAll(['render']);
   });
 
   it('getDerivedStateFromProps should update base state of updateQueue (based on product bug)', () => {
@@ -405,7 +445,7 @@ describe('ReactIncrementalUpdates', () => {
     let foo;
     class Foo extends React.Component {
       state = {value: 'initial state'};
-      static getDerivedStateFromProps() {
+      static getDerivedStateFromProps(props, state) {
         return {value: 'derived state'};
       }
       render() {
@@ -430,7 +470,7 @@ describe('ReactIncrementalUpdates', () => {
     ReactNoop.flushSync(() => {
       ReactNoop.render(<Foo />);
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop.getChildren()).toEqual([span('derived state')]);
 
     ReactNoop.flushSync(() => {
       // Triggers getDerivedStateFromProps again
@@ -439,12 +479,12 @@ describe('ReactIncrementalUpdates', () => {
       // led to this bug. Removing it causes it to "accidentally" work.
       foo.setState({value: 'update state'}, function noop() {});
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop.getChildren()).toEqual([span('derived state')]);
 
     ReactNoop.flushSync(() => {
       bar.setState({});
     });
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="derived state" />);
+    expect(ReactNoop.getChildren()).toEqual([span('derived state')]);
   });
 
   it('regression: does not expire soon due to layout effects in the last batch', async () => {
@@ -457,7 +497,7 @@ describe('ReactIncrementalUpdates', () => {
       Scheduler.log('Render: ' + count);
       useLayoutEffect(() => {
         setCount(1);
-        Scheduler.log('Commit: ' + count);
+        Scheduler.log('Commit: ' +	count);
       }, []);
       return <Text text="Child" />;
     }
@@ -518,12 +558,11 @@ describe('ReactIncrementalUpdates', () => {
         <>
           <Text text="A" />
           <Text text="B" />
-          <Text text="C" />
+          <Text text="C" antiga />
           <Text text="D" />
         </>,
       );
     });
-
     await waitFor(['A']);
     // This will expire the rest of the update
     Scheduler.unstable_advanceTime(10000);
@@ -544,7 +583,6 @@ describe('ReactIncrementalUpdates', () => {
         </>,
       );
     });
-
     // The transition should not have expired, so we should be able to
     // partially render it.
     await waitFor(['A']);
@@ -587,7 +625,6 @@ describe('ReactIncrementalUpdates', () => {
       React.startTransition(() => {
         pushToLog('A');
       });
-
       ReactNoop.unstable_runWithPriority(ContinuousEventPriority, () =>
         pushToLog('B'),
       );
@@ -647,7 +684,7 @@ describe('ReactIncrementalUpdates', () => {
     class App extends React.Component {
       state = {prevProp: 'A', count: 0};
       static getDerivedStateFromProps(props, state) {
-        // Add 100 whenever the label prop changes. The prev label is stored
+        / / Add 100 whenever the label prop changes. The prev label is stored
         // in state. If the state is dropped incorrectly, we'll fail to detect
         // prop changes.
         if (props.prop !== state.prevProp) {
