
index 7b312191..73b01682 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmpod8hst4y_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmp2gz0l2mv_actual.txt	
@@ -19,7 +19,7 @@ let editor: TestEditor
 
 const ids = {
 	box1: createShapeId('box1'),
-	box2: createShapeId('box2'),
+	box2: createShapeId('box2'), 
 	box3: createShapeId('box3'),
 	frame1: createShapeId('frame1'),
 	group1: createShapeId('group1'),
@@ -599,90 +599,6 @@ describe('snapshots', () => {
 	})
 })
 
-describe('when the user prefers dark UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: query === '(prefers-color-scheme: dark)',
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be true if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(true)
-	})
-})
-
-describe('when the user prefers light UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: false,
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be false if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-})
-
-describe('middle-click panning', () => {
-	it('clears the isPanning state on mouse up', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.pointerUp(100, 100)
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-
-	it('does not clear thee isPanning state if the space bar is down', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.keyDown(' ')
-		editor.pointerUp(100, 100, {
-			button: 1,
-		})
-		expect(editor.inputs.isPanning).toBe(true)
-
-		editor.keyUp(' ')
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-})
-
 describe('dragging', () => {
 	it('drags correctly at 100% zoom', () => {
 		expect(editor.inputs.isDragging).toBe(false)
@@ -800,65 +716,4 @@ describe('getShapeVisibility', () => {
 		const groupId = createShapeId('group')
 		editor.groupShapes([ids.box1, ids.box2], { groupId })
 
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('still allows hidden shapes to be selected', () => {
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		editor.select(ids.box1)
-		expect(editor.getSelectedShapeIds()).toEqual([ids.box1])
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('applies to getCurrentPageRenderingShapesSorted', () => {
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(2)
-	})
-
-	it('does not apply to getCurrentPageShapesSorted', () => {
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-	})
-
-	it('allows overriding hidden parents with "visible" value', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-	})
-})
-
-describe('instance.isReadonly', () => {
-	it('updates in accordance with collaboration.mode', () => {
-		const mode = atom<'readonly' | 'readwrite'>('', 'readonly')
-		const editor = new TestEditor(
-			{},
-			{
-				collaboration: {
-					mode,
-					status: atom('', 'online'),
-				},
-			}
-		)
-
-		expect(editor.getIsReadonly()).toBe(true)
-
-		mode.set('readwrite')
-		expect(editor.getIsReadonly()).toBe(false)
-		mode.set('readonly')
-		expect(editor.getIsReadonly()).toBe(true)
-	})
-})
\ No newline at end of file
+		expect(editor.isShapeH
\ No newline at end of file
