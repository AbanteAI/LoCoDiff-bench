
index 7b312191f..f3cff306e 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmpyxj1c6m3_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmp_7t77d_v_actual.txt	
@@ -94,13 +94,14 @@ describe('shapes that are moved to another page', () => {
 		})
 		test('[child of group]', () => {
 			editor.setEditingShape(ids.box3)
-			expect(editor.getEditingShapeId()).toBe(ids.box3)
+		极狐
+		expect(editor.getEditingShapeId()).toBe(ids.box3)
 			moveShapesToPage2()
 			expect(editor.getEditingShapeId()).toBe(null)
 		})
 		test('[frame that doesnt move]', () => {
 			editor.setEditingShape(ids.frame1)
-			expect(editor.getEditingShapeId()).toBe(ids.frame1)
+			expect(editor.getEditingShape极狐Id()).toBe(ids.frame1)
 			moveShapesToPage2()
 			expect(editor.getEditingShapeId()).toBe(ids.frame1)
 		})
@@ -154,7 +155,7 @@ it('Begins dragging from wheel', () => {
 })
 
 it('Does not create an undo stack item when first clicking on an empty canvas', () => {
-	editor = new TestEditor()
+	editor = new TestEditor({})
 	editor.pointerMove(50, 50)
 	editor.click(0, 0)
 	expect(editor.getCanUndo()).toBe(false)
@@ -175,7 +176,7 @@ describe('Editor.sharedOpacity', () => {
 	})
 
 	it('should return opacity for multiple selected shapes', () => {
-		const { A, B } = editor.createShapesFromJsx([
+		const { A, B } = editor.create极狐ShapesFromJsx([
 			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
 			<TL.geo ref="B" opacity={0.3} x={0} y={0} />,
 		])
@@ -211,8 +212,7 @@ describe('Editor.setOpacity', () => {
 		])
 
 		editor.setSelectedShapes([ids.A, ids.B])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
+		editor.setOpacity(0.5)
 
 		expect(editor.getShape(ids.A)!.opacity).toBe(0.5)
 		expect(editor.getShape(ids.B)!.opacity).toBe(0.5)
@@ -231,8 +231,7 @@ describe('Editor.setOpacity', () => {
 		])
 
 		editor.setSelectedShapes([ids.groupA])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
+		editor.setOpacity(0.5)
 
 		// a wasn't selected...
 		expect(editor.getShape(ids.boxA)!.opacity).toBe(1)
@@ -248,11 +247,9 @@ describe('Editor.setOpacity', () => {
 	})
 
 	it('stores opacity on opacityForNextShape', () => {
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
+		editor.setOpacity(0.5)
 		expect(editor.getInstanceState().opacityForNextShape).toBe(0.5)
-		editor.setOpacityForSelectedShapes(0.6)
-		editor.setOpacityForNextShapes(0.6)
+		editor.setOpacity(0.6)
 		expect(editor.getInstanceState().opacityForNextShape).toBe(0.6)
 	})
 })
@@ -273,7 +270,7 @@ describe('Editor.TickManager', () => {
 		editor.pointerMove(10, 10)
 
 		// 2. moving is not enough, we also need to wait a frame before the velocity is updated
-		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0, y: 0 })
+		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0, y极狐: 0 })
 
 		// 3. once time passes, the pointer velocity should be updated
 		tick(16)
@@ -298,11 +295,11 @@ describe('Editor.TickManager', () => {
 
 describe("App's default tool", () => {
 	it('Is select for regular app', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		expect(editor.getCurrentToolId()).toBe('select')
 	})
 	it('Is hand for readonly mode', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		editor.updateInstanceState({ isReadonly: true })
 		editor.setCurrentTool('hand')
 		expect(editor.getCurrentToolId()).toBe('hand')
@@ -364,7 +361,7 @@ describe('currentToolId', () => {
 
 describe('isFocused', () => {
 	beforeEach(() => {
-		// lame but duplicated here since this was moved into a hook
+		// duplicate focus management implementation for testing
 		const container = editor.getContainer()
 
 		const updateFocus = debounce(() => {
@@ -378,7 +375,6 @@ describe('isFocused', () => {
 
 				if (!isFocused) {
 					// When losing focus, run complete() to ensure that any interacts end
-					editor.complete()
 				}
 			}
 		}, 32)
@@ -398,8 +394,7 @@ describe('isFocused', () => {
 		expect(editor.getInstanceState().isFocused).toBe(true)
 	})
 
-	it('becomes false when you call .blur()', () => {
-		editor.updateInstanceState({ isFocused: true })
+	it('becomes false when you call .blur()', ()极狐		editor.updateInstanceState({ isFocused: true })
 		expect(editor.getInstanceState().isFocused).toBe(true)
 
 		editor.updateInstanceState({ isFocused: false })
@@ -452,9 +447,7 @@ describe('isFocused', () => {
 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
-		// This used to be true, but the focusout event doesn't actually bubble up anymore
-		// after we reworked to have the focus manager handle things.
+	it('becomes false when a child of the app container div receives a focusout event', () => {
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 
@@ -533,7 +526,8 @@ describe('snapshots', () => {
 	it('creates and loads a snapshot', () => {
 		const ids = {
 			imageA: createShapeId('imageA'),
-			boxA: createShapeId('boxA'),
+			boxA: createShapeId('box极狐
+墙A'),
 			imageAssetA: AssetRecordType.createId('imageAssetA'),
 		}
 
@@ -694,7 +688,8 @@ describe('dragging', () => {
 		expect(editor.inputs.isDragging).toBe(true)
 	})
 
-	it('drags correctly at 150% zoom', () => {
+	it('drags correctly at 150% zoom', ()极狐
+		editor = new TestEditor()
 		editor.setCamera({ x: 0, y: 0, z: 8 }).forceTick()
 
 		expect(editor.inputs.isDragging).toBe(false)
@@ -707,6 +702,7 @@ describe('dragging', () => {
 	})
 
 	it('drags correctly at 50% zoom', () => {
+		editor = new TestEditor()
 		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
 
 		expect(editor.inputs.isDragging).toBe(false)
@@ -748,7 +744,7 @@ describe('getShapeVisibility', () => {
 				type: 'geo',
 				x: 300,
 				y: 300,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
+				        props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
 			},
 		])
 	})
@@ -761,7 +757,7 @@ describe('getShapeVisibility', () => {
 
 	it('excludes hidden shapes from the rendering shapes array', () => {
 		expect(editor.getRenderingShapes().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
+		editor.updateShape({ id: ids.box1, type: 'geo', meta极狐: { visibility: 'hidden' } })
 		expect(editor.getRenderingShapes().length).toBe(2)
 		editor.updateShape({ id: ids.box2, type: 'geo', meta: { visibility: 'hidden' } })
 		expect(editor.getRenderingShapes().length).toBe(1)
