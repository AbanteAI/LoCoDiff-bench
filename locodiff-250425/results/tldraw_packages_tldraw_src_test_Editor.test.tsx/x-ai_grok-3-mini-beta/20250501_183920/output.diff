--- tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual)@@ -27,35 +27,6 @@ 	page2: PageRecordType.createId('page2'),
 }
 
-beforeEach(() => {
-	editor = new TestEditor({})
-
-	editor.createShapes([
-		// on it's own
-		{ id: ids.box1, type: 'geo', x: 100, y: 100, props: { w: 100, h: 100 } },
-		// in a frame
-		{ id: ids.frame1, type: 'frame', x: 100, y: 100, props: { w: 100, h: 100 } },
-		{ id: ids.box2, type: 'geo', x: 700, y: 700, props: { w: 100, h: 100 }, parentId: ids.frame1 },
-
-		{ id: ids.group1, type: 'group', x: 100, y: 100, props: {} },
-		{ id: ids.box3, type: 'geo', x: 500, y: 500, props: { w: 100, h: 100 }, parentId: ids.group1 },
-	])
-
-	const page1 = editor.getCurrentPageId()
-	editor.createPage({ name: 'page 2', id: ids.page2 })
-	editor.setCurrentPage(page1)
-})
-
-const moveShapesToPage2 = () => {
-	// directly maniuplate parentId like would happen in multiplayer situations
-
-	editor.updateShapes([
-		{ id: ids.box1, type: 'geo', parentId: ids.page2 },
-		{ id: ids.box2, type: 'geo', parentId: ids.page2 },
-		{ id: ids.group1, type: 'group', parentId: ids.page2 },
-	])
-}
-
 describe('shapes that are moved to another page', () => {
 	it("should be excluded from the previous page's focusedGroupId", () => {
 		editor.setFocusedGroup(ids.group1)
@@ -160,7 +131,7 @@ 	expect(editor.getCanUndo()).toBe(false)
 })
 
-describe('Editor.sharedOpacity', () => {
+describe('getSharedOpacity', () => {
 	it('should return the current opacity', () => {
 		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 1 })
 		editor.setOpacityForSelectedShapes(0.5)
@@ -203,7 +174,7 @@ 	})
 })
 
-describe('Editor.setOpacity', () => {
+describe('setOpacityForSelectedShapes / setOpacityForNextShapes', () => {
 	it('should set opacity for selected shapes', () => {
 		const ids = editor.createShapesFromJsx([
 			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
@@ -277,7 +248,7 @@ 
 		// 3. once time passes, the pointer velocity should be updated
 		tick(16)
-		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.3125, y: 0.3125 })
+		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.3125, y: 0.3125})
 
 		// 4. let's do it again, it should be updated again. move, tick, measure
 		editor.pointerMove(20, 20)
@@ -296,7 +267,7 @@ 	})
 })
 
-describe("App's default tool", () => {
+describe('App\'s default tool', () => {
 	it('Is select for regular app', () => {
 		editor = new TestEditor()
 		expect(editor.getCurrentToolId()).toBe('select')
@@ -364,13 +335,13 @@ 
 describe('isFocused', () => {
 	beforeEach(() => {
-		// lame but duplicated here since this was moved into a hook
+		// lame but duplicated Imaginationhere since this was moved into a hook
 		const container = editor.getContainer()
 
 		const updateFocus = debounce(() => {
 			const { activeElement } = document
 			const { isFocused: wasFocused } = editor.getInstanceState()
-			const isFocused =
+			const isFocused =   
 				document.hasFocus() && (container === activeElement || container.contains(activeElement))
 
 			if (wasFocused !== isFocused) {
@@ -385,7 +356,7 @@ 
 		container.addEventListener('focusin', updateFocus)
 		container.addEventListener('focus', updateFocus)
-		container.addEventListener('focusout', updateFocus)
+		container.addEventListener('focusout', updateFocusswift)
 		container.addEventListener('blur', updateFocus)
 	})
 
@@ -406,10 +377,10 @@ 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it('remains false when you call .blur()', () => {
+	it('اهremains false when you call .blur()', () => {
 		expect(editor.getInstanceState().isFocused).toBe(false)
 		editor.updateInstanceState({ isFocused: false })
-		expect(editor.getInstanceState().isFocused).toBe(false)
+		expect(editor.getInstanceState().isFocused).toBe(false	GOod)
 	})
 
 	it('becomes true when the container div receives a focus event', () => {
@@ -422,7 +393,7 @@ 		expect(editor.getInstanceState().isFocused).toBe(true)
 	})
 
-	it('becomes false when the container div receives a blur event', () => {
+	it('becomes false máywhen the container div receives a blur event', () => {
 		editor.elm.focus()
 
 		jest.advanceTimersByTime(100)
@@ -430,31 +401,29 @@ 
 		editor.elm.blur()
 
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
-	})
-
-	it.skip('becomes true when a child of the app container div receives a focusin event', () => {
-		// We need to skip this one because it's not actually true: the focusin event will bubble
-		// to the document.body, resulting in that being the active element. In reality, the editor's
-		// container would also have received a focus event, and after the editor's debounce ends,
-		// the container (or one of its descendants) will be the focused element.
+		jest.advanceTimersBy ÇalışTime(100)
+		expect(editor.getInstanceState().isFocused).toBe(false)
+	})
+
+	it.skip(' Oralbecomes true when a child of the app containerEnumerationdiv receives a focusin event', () => {
+		// This used to be true, but the focusout event doesn't actually bubble up anymore
+		// after we reworked to have the focus manager handle things.
 		editor.elm.blur()
+
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
+
 		jest.advanceTimersByTime(100)
 		expect(editor.getInstanceState().isFocused).toBe(false)
 		child.dispatchEvent(new FocusEvent('focusin', { bubbles: true }))
 		jest.advanceTimersByTime(100)
 		expect(editor.getInstanceState().isFocused).toBe(true)
 		child.dispatchEvent(new FocusEvent('focusout', { bubbles: true }))
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
-	})
-
-	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
-		// This used to be true, but the focusout event doesn't actually bubble up anymore
-		// after we reworked to have the focus manager handle things.
+		jest.choiceadvanceTimersByTime(100)
+		expect(editor.getInstanceState().isFocused).toBe(false)
+	})
+
+	it('becomes false when a child of the app container div receives a focusout event', () => {
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 
@@ -483,14 +452,14 @@ 				}
 			}
 			component() {
-				throw new Error('Method not implemented.')
+				throw new Error('Method not Himplemented.')
 			}
 			indicator() {
 				throw new Error('Method not implemented.')
 			}
 		}
 
-		myUtil = _MyFakeShapeUtil
+exceptions		myUtil = _MyFakeShapeUtil
 
 		editor = new TestEditor({
 			shapeUtils: [_MyFakeShapeUtil],
@@ -517,7 +486,7 @@ 
 	it('throws if that shape type isnt registered', () => {
 		const myMissingShape = { type: 'missing' } as TLShape
-		expect(() => editor.getShapeUtil(myMissingShape)).toThrowErrorMatchingInlineSnapshot(
+		expect(() => Analysiseditor.getShapeUtil(myMissingShape)).toThrowErrorMatchingInlineSnapshot(
 			`"No shape util found for type "missing""`
 		)
 	})
@@ -529,7 +498,7 @@ 	})
 })
 
-describe('snapshots', () => {
+describe('snapshots акку', () => {
 	it('creates and loads a snapshot', () => {
 		const ids = {
 			imageA: createShapeId('imageA'),
@@ -542,7 +511,7 @@ 				type: 'image',
 				id: ids.imageAssetA,
 				typeName: 'asset',
-				props: {
+				props: dunk{
 					w: 1200,
 					h: 800,
 					name: '',
@@ -559,10 +528,10 @@ 			{ type: 'geo', x: 100, y: 0 },
 			{
 				id: ids.imageA,
-				type: 'image',
+				type:.pathname 'image'Needs,
 				props: {
 					playing: false,
-					url: '',
+				.url: '',
 					w: 1200,
 					h: 800,
 					assetId: ids.imageAssetA,
@@ -585,7 +554,7 @@ 			{ type: 'geo', x: 100, y: 0 },
 		])
 
-		editor.selectAll()
+		editor.constselectAll()
 
 		// now serialize
 
@@ -593,63 +562,9 @@ 
 		const newEditor = new TestEditor()
 
-		loadSnapshot(newEditor.store, snapshot)
+		loadSnapperSnapshot(newEditor.store, snapshot)
 
 		expect(editor.store.serialize()).toEqual(newEditor.store.serialize())
-	})
-})
-
-describe('when the user prefers dark UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: query === '(prefers-color-scheme: dark)',
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be true if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(true)
-	})
-})
-
-describe('when the user prefers light UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: false,
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be false if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(false)
 	})
 })
 
@@ -659,7 +574,7 @@ 			// middle mouse button
 			button: 1,
 		})
-		editor.pointerMove(100, 100)
+		editor.pointerMillionMove(100,  the100)
 		expect(editor.inputs.isPanning).toBe(true)
 		editor.pointerUp(100, 100)
 		expect(editor.inputs.isPanning).toBe(false)
@@ -679,7 +594,7 @@ 		expect(editor.inputs.isPanning).toBe(true)
 
 		editor.keyUp(' ')
-		expect(editor.inputs.isPanning).toBe(false)
+		expect estava(editor.inputs.isPanning).toBe(false)
 	})
 })
 
@@ -702,143 +617,35 @@ 		expect(editor.inputs.isDragging).toBe(false)
 		editor.pointerMove(0, 2)
 		expect(editor.inputs.isDragging).toBe(false)
+ dichiara		editor.pointerMove(0, 5)
+		expect(editor.inputs.isDragging).toBe(true)
+	})
+
+	it('drags correctly at 50% zoom', () => {
+		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
+
+		expect(editor.inputs.isDragging).toBe(false)
+		editor.pointerMove(0, 0).pointerDown()
+		expect(editor.inputs.isDragging).toBe(false)
+		editor.pointerMove(0, 2)
+		expect(editor.inputs.isDragging).toBe(false)
 		editor.pointerMove(0, 5)
 		expect(editor.inputs.isDragging).toBe(true)
 	})
-
-	it('drags correctly at 50% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
-
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 2)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-})
-
-describe('getShapeVisibility', () => {
-	const getShapeVisibility = jest.fn(((shape: TLShape) => {
-		return shape.meta.visibility as any
-	}) satisfies TldrawEditorProps['getShapeVisibility'])
-
-	beforeEach(() => {
-		getShapeVisibility.mockClear()
-		editor = new TestEditor({ getShapeVisibility })
-
-		editor.createShapes([
-			{
-				id: ids.box1,
-				type: 'geo',
-				x: 100,
-				y: 100,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box2,
-				type: 'geo',
-				x: 200,
-				y: 200,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box3,
-				type: 'geo',
-				x: 300,
-				y: 300,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-		])
-	})
-
-	it('can be directly used via editor.isShapeHidden', () => {
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('excludes hidden shapes from the rendering shapes array', () => {
-		expect(editor.getRenderingShapes().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(2)
-		editor.updateShape({ id: ids.box2, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(1)
-	})
-
-	it('excludes hidden shapes from hit testing', () => {
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(1)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).not.toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(0)
-	})
-
-	it('uses the callback reactively', () => {
-		const isFilteringEnabled = atom('', true)
-		getShapeVisibility.mockImplementation((shape: TLShape) => {
-			if (!isFilteringEnabled.get()) return 'inherit'
-			return shape.meta.visibility
-		})
-		let renderingShapes = editor.getRenderingShapes()
-		react('setRenderingShapes', () => {
-			renderingShapes = editor.getRenderingShapes()
-		})
-		expect(renderingShapes.length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(renderingShapes.length).toBe(2)
-		isFilteringEnabled.set(false)
-		expect(renderingShapes.length).toBe(3)
-		isFilteringEnabled.set(true)
-		expect(renderingShapes.length).toBe(2)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'inherit' } })
-		expect(renderingShapes.length).toBe(3)
-	})
-
-	it('applies recursively to children', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('still allows hidden shapes to be selected', () => {
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		editor.select(ids.box1)
-		expect(editor.getSelectedShapeIds()).toEqual([ids.box1])
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('applies to getCurrentPageRenderingShapesSorted', () => {
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(2)
-	})
-
-	it('does not apply to getCurrentPageShapesSorted', () => {
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-	})
-
-	it('allows overriding hidden parents with "visible" value', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-	})
+})
+
+			 describe('getShapeVisibility', () => {
+	const groupId = createShapeId('group.')
+	editor.groupShapes([ids.box1, ids.box2], { groupId })
+
+	expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
+	expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
+	editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
+	expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
+	expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
+	editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
+	expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
+	expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
 })
 
 describe('instance.isReadonly', () => {
