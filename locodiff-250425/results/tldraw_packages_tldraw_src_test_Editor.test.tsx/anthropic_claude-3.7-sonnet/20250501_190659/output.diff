
index 7b312191..4b252540 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmp98r_x5gb_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmpyqvr01cw_actual.txt	
@@ -1,17 +1,4 @@
-import {
-	AssetRecordType,
-	BaseBoxShapeUtil,
-	PageRecordType,
-	TLGeoShapeProps,
-	TLShape,
-	TldrawEditorProps,
-	atom,
-	createShapeId,
-	debounce,
-	getSnapshot,
-	loadSnapshot,
-	react,
-} from '@tldraw/editor'
+import { BaseBoxShapeUtil, PageRecordType, TLShape, createShapeId, debounce } from '@tldraw/editor'
 import { TestEditor } from './TestEditor'
 import { TL } from './test-jsx'
 
@@ -28,7 +15,7 @@ const ids = {
 }
 
 beforeEach(() => {
-	editor = new TestEditor({})
+	editor = new TestEditor()
 
 	editor.createShapes([
 		// on it's own
@@ -434,38 +421,11 @@ describe('isFocused', () => {
 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it.skip('becomes true when a child of the app container div receives a focusin event', () => {
-		// We need to skip this one because it's not actually true: the focusin event will bubble
-		// to the document.body, resulting in that being the active element. In reality, the editor's
-		// container would also have received a focus event, and after the editor's debounce ends,
-		// the container (or one of its descendants) will be the focused element.
-		editor.elm.blur()
-		const child = document.createElement('div')
-		editor.elm.appendChild(child)
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
-		child.dispatchEvent(new FocusEvent('focusin', { bubbles: true }))
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(true)
-		child.dispatchEvent(new FocusEvent('focusout', { bubbles: true }))
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
-	})
-
 	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
 		// This used to be true, but the focusout event doesn't actually bubble up anymore
 		// after we reworked to have the focus manager handle things.
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
-
-		editor.updateInstanceState({ isFocused: true })
-
-		expect(editor.getInstanceState().isFocused).toBe(true)
-
-		child.dispatchEvent(new FocusEvent('focusout', { bubbles: true }))
-
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 })
 
@@ -717,148 +677,4 @@ describe('dragging', () => {
 		editor.pointerMove(0, 5)
 		expect(editor.inputs.isDragging).toBe(true)
 	})
-})
-
-describe('getShapeVisibility', () => {
-	const getShapeVisibility = jest.fn(((shape: TLShape) => {
-		return shape.meta.visibility as any
-	}) satisfies TldrawEditorProps['getShapeVisibility'])
-
-	beforeEach(() => {
-		getShapeVisibility.mockClear()
-		editor = new TestEditor({ getShapeVisibility })
-
-		editor.createShapes([
-			{
-				id: ids.box1,
-				type: 'geo',
-				x: 100,
-				y: 100,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box2,
-				type: 'geo',
-				x: 200,
-				y: 200,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box3,
-				type: 'geo',
-				x: 300,
-				y: 300,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-		])
-	})
-
-	it('can be directly used via editor.isShapeHidden', () => {
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('excludes hidden shapes from the rendering shapes array', () => {
-		expect(editor.getRenderingShapes().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(2)
-		editor.updateShape({ id: ids.box2, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(1)
-	})
-
-	it('excludes hidden shapes from hit testing', () => {
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(1)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).not.toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(0)
-	})
-
-	it('uses the callback reactively', () => {
-		const isFilteringEnabled = atom('', true)
-		getShapeVisibility.mockImplementation((shape: TLShape) => {
-			if (!isFilteringEnabled.get()) return 'inherit'
-			return shape.meta.visibility
-		})
-		let renderingShapes = editor.getRenderingShapes()
-		react('setRenderingShapes', () => {
-			renderingShapes = editor.getRenderingShapes()
-		})
-		expect(renderingShapes.length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(renderingShapes.length).toBe(2)
-		isFilteringEnabled.set(false)
-		expect(renderingShapes.length).toBe(3)
-		isFilteringEnabled.set(true)
-		expect(renderingShapes.length).toBe(2)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'inherit' } })
-		expect(renderingShapes.length).toBe(3)
-	})
-
-	it('applies recursively to children', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('still allows hidden shapes to be selected', () => {
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		editor.select(ids.box1)
-		expect(editor.getSelectedShapeIds()).toEqual([ids.box1])
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('applies to getCurrentPageRenderingShapesSorted', () => {
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(2)
-	})
-
-	it('does not apply to getCurrentPageShapesSorted', () => {
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-	})
-
-	it('allows overriding hidden parents with "visible" value', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-	})
-})
-
-describe('instance.isReadonly', () => {
-	it('updates in accordance with collaboration.mode', () => {
-		const mode = atom<'readonly' | 'readwrite'>('', 'readonly')
-		const editor = new TestEditor(
-			{},
-			{
-				collaboration: {
-					mode,
-					status: atom('', 'online'),
-				},
-			}
-		)
-
-		expect(editor.getIsReadonly()).toBe(true)
-
-		mode.set('readwrite')
-		expect(editor.getIsReadonly()).toBe(false)
-		mode.set('readonly')
-		expect(editor.getIsReadonly()).toBe(true)
-	})
 })
\ No newline at end of file
