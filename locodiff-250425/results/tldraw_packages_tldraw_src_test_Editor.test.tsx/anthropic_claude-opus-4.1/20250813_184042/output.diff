
index 7b312191f..7425d4de5 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmpo1_rjn32_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmpy603528e_actual.txt	
@@ -531,334 +531,4 @@ describe('getShapeUtil', () => {
 
 describe('snapshots', () => {
 	it('creates and loads a snapshot', () => {
-		const ids = {
-			imageA: createShapeId('imageA'),
-			boxA: createShapeId('boxA'),
-			imageAssetA: AssetRecordType.createId('imageAssetA'),
-		}
-
-		editor.createAssets([
-			{
-				type: 'image',
-				id: ids.imageAssetA,
-				typeName: 'asset',
-				props: {
-					w: 1200,
-					h: 800,
-					name: '',
-					isAnimated: false,
-					mimeType: 'png',
-					src: '',
-				},
-				meta: {},
-			},
-		])
-
-		editor.createShapes([
-			{ type: 'geo', x: 0, y: 0 },
-			{ type: 'geo', x: 100, y: 0 },
-			{
-				id: ids.imageA,
-				type: 'image',
-				props: {
-					playing: false,
-					url: '',
-					w: 1200,
-					h: 800,
-					assetId: ids.imageAssetA,
-				},
-				x: 0,
-				y: 1200,
-			},
-		])
-
-		const page2Id = PageRecordType.createId('page2')
-
-		editor.createPage({
-			id: page2Id,
-		})
-
-		editor.setCurrentPage(page2Id)
-
-		editor.createShapes([
-			{ type: 'geo', x: 0, y: 0 },
-			{ type: 'geo', x: 100, y: 0 },
-		])
-
-		editor.selectAll()
-
-		// now serialize
-
-		const snapshot = getSnapshot(editor.store)
-
-		const newEditor = new TestEditor()
-
-		loadSnapshot(newEditor.store, snapshot)
-
-		expect(editor.store.serialize()).toEqual(newEditor.store.serialize())
-	})
-})
-
-describe('when the user prefers dark UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: query === '(prefers-color-scheme: dark)',
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be true if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(true)
-	})
-})
-
-describe('when the user prefers light UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: false,
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be false if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-})
-
-describe('middle-click panning', () => {
-	it('clears the isPanning state on mouse up', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.pointerUp(100, 100)
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-
-	it('does not clear thee isPanning state if the space bar is down', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.keyDown(' ')
-		editor.pointerUp(100, 100, {
-			button: 1,
-		})
-		expect(editor.inputs.isPanning).toBe(true)
-
-		editor.keyUp(' ')
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-})
-
-describe('dragging', () => {
-	it('drags correctly at 100% zoom', () => {
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 1)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-
-	it('drags correctly at 150% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 8 }).forceTick()
-
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 2)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-
-	it('drags correctly at 50% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
-
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 2)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-})
-
-describe('getShapeVisibility', () => {
-	const getShapeVisibility = jest.fn(((shape: TLShape) => {
-		return shape.meta.visibility as any
-	}) satisfies TldrawEditorProps['getShapeVisibility'])
-
-	beforeEach(() => {
-		getShapeVisibility.mockClear()
-		editor = new TestEditor({ getShapeVisibility })
-
-		editor.createShapes([
-			{
-				id: ids.box1,
-				type: 'geo',
-				x: 100,
-				y: 100,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box2,
-				type: 'geo',
-				x: 200,
-				y: 200,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box3,
-				type: 'geo',
-				x: 300,
-				y: 300,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-		])
-	})
-
-	it('can be directly used via editor.isShapeHidden', () => {
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('excludes hidden shapes from the rendering shapes array', () => {
-		expect(editor.getRenderingShapes().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(2)
-		editor.updateShape({ id: ids.box2, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(1)
-	})
-
-	it('excludes hidden shapes from hit testing', () => {
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(1)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).not.toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(0)
-	})
-
-	it('uses the callback reactively', () => {
-		const isFilteringEnabled = atom('', true)
-		getShapeVisibility.mockImplementation((shape: TLShape) => {
-			if (!isFilteringEnabled.get()) return 'inherit'
-			return shape.meta.visibility
-		})
-		let renderingShapes = editor.getRenderingShapes()
-		react('setRenderingShapes', () => {
-			renderingShapes = editor.getRenderingShapes()
-		})
-		expect(renderingShapes.length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(renderingShapes.length).toBe(2)
-		isFilteringEnabled.set(false)
-		expect(renderingShapes.length).toBe(3)
-		isFilteringEnabled.set(true)
-		expect(renderingShapes.length).toBe(2)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'inherit' } })
-		expect(renderingShapes.length).toBe(3)
-	})
-
-	it('applies recursively to children', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('still allows hidden shapes to be selected', () => {
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		editor.select(ids.box1)
-		expect(editor.getSelectedShapeIds()).toEqual([ids.box1])
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('applies to getCurrentPageRenderingShapesSorted', () => {
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(2)
-	})
-
-	it('does not apply to getCurrentPageShapesSorted', () => {
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-	})
-
-	it('allows overriding hidden parents with "visible" value', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-	})
-})
-
-describe('instance.isReadonly', () => {
-	it('updates in accordance with collaboration.mode', () => {
-		const mode = atom<'readonly' | 'readwrite'>('', 'readonly')
-		const editor = new TestEditor(
-			{},
-			{
-				collaboration: {
-					mode,
-					status: atom('', 'online'),
-				},
-			}
-		)
-
-		expect(editor.getIsReadonly()).toBe(true)
-
-		mode.set('readwrite')
-		expect(editor.getIsReadonly()).toBe(false)
-		mode.set('readonly')
-		expect(editor.getIsReadonly()).toBe(true)
-	})
-})
\ No newline at end of file
+		const
\ No newline at end of file
