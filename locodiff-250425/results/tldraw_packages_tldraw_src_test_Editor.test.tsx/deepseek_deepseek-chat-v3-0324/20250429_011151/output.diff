
index 7b312191..598d3eb7 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmp_1hvbop1_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmp0mqhdwlc_actual.txt	
@@ -169,15 +169,15 @@ describe('Editor.sharedOpacity', () => {
 	})
 
 	it('should return opacity for a single selected shape', () => {
-		const { A } = editor.createShapesFromJsx(<TL.geo ref="A" opacity={0.3} x={0} y={0} />)
+		const { A } = editor.createShapesFromJsx(<TL.geo ref="A" opacity={0.3} x={0, y=0} />)
 		editor.setSelectedShapes([A])
 		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.3 })
 	})
 
 	it('should return opacity for multiple selected shapes', () => {
 		const { A, B } = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.3} x={0} y={0} />,
+			<TL.geo ref="A" opacity={0.3} x={0, y=0} />,
+			<TL.geo ref="B" opacity={0.3} x={0, y=0} />,
 		])
 		editor.setSelectedShapes([A, B])
 		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.3 })
@@ -185,8 +185,8 @@ describe('Editor.sharedOpacity', () => {
 
 	it('should return mixed when multiple selected shapes have different opacity', () => {
 		const { A, B } = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.5} x={0} y={0} />,
+			<TL.geo ref="A" opacity={0.3} x={0, y=0} />,
+			<TL.geo ref="B" opacity={0.5} x={0, y=0} />,
 		])
 		editor.setSelectedShapes([A, B])
 		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'mixed' })
@@ -194,8 +194,8 @@ describe('Editor.sharedOpacity', () => {
 
 	it('ignores the opacity of groups and returns the opacity of their children', () => {
 		const ids = editor.createShapesFromJsx([
-			<TL.group ref="group" x={0} y={0}>
-				<TL.geo ref="A" opacity={0.3} x={0} y={0} />
+			<TL.group ref="group" x={0, y=0}>
+				<TL.geo ref="A" opacity={0.3} x={0, y=0} />
 			</TL.group>,
 		])
 		editor.setSelectedShapes([ids.group])
@@ -204,49 +204,6 @@ describe('Editor.sharedOpacity', () => {
 })
 
 describe('Editor.setOpacity', () => {
-	it('should set opacity for selected shapes', () => {
-		const ids = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.4} x={0} y={0} />,
-		])
-
-		editor.setSelectedShapes([ids.A, ids.B])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
-
-		expect(editor.getShape(ids.A)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.B)!.opacity).toBe(0.5)
-	})
-
-	it('should traverse into groups and set opacity in their children', () => {
-		const ids = editor.createShapesFromJsx([
-			<TL.geo ref="boxA" x={0} y={0} />,
-			<TL.group ref="groupA" x={0} y={0}>
-				<TL.geo ref="boxB" x={0} y={0} />
-				<TL.group ref="groupB" x={0} y={0}>
-					<TL.geo ref="boxC" x={0} y={0} />
-					<TL.geo ref="boxD" x={0} y={0} />
-				</TL.group>
-			</TL.group>,
-		])
-
-		editor.setSelectedShapes([ids.groupA])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
-
-		// a wasn't selected...
-		expect(editor.getShape(ids.boxA)!.opacity).toBe(1)
-
-		// b, c, & d were within a selected group...
-		expect(editor.getShape(ids.boxB)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.boxC)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.boxD)!.opacity).toBe(0.5)
-
-		// groups get skipped
-		expect(editor.getShape(ids.groupA)!.opacity).toBe(1)
-		expect(editor.getShape(ids.groupB)!.opacity).toBe(1)
-	})
-
 	it('stores opacity on opacityForNextShape', () => {
 		editor.setOpacityForSelectedShapes(0.5)
 		editor.setOpacityForNextShapes(0.5)
@@ -375,6 +332,7 @@ describe('isFocused', () => {
 
 			if (wasFocused !== isFocused) {
 				editor.updateInstanceState({ isFocused })
+				editor.updateViewportScreenBounds()
 
 				if (!isFocused) {
 					// When losing focus, run complete() to ensure that any interacts end
@@ -435,10 +393,8 @@ describe('isFocused', () => {
 	})
 
 	it.skip('becomes true when a child of the app container div receives a focusin event', () => {
-		// We need to skip this one because it's not actually true: the focusin event will bubble
-		// to the document.body, resulting in that being the active element. In reality, the editor's
-		// container would also have received a focus event, and after the editor's debounce ends,
-		// the container (or one of its descendants) will be the focused element.
+		// This used to be true, but the focusout event doesn't actually bubble up anymore
+		// after we reworked to have the focus manager handle things.
 		editor.elm.blur()
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
@@ -453,8 +409,6 @@ describe('isFocused', () => {
 	})
 
 	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
-		// This used to be true, but the focusout event doesn't actually bubble up anymore
-		// after we reworked to have the focus manager handle things.
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 
@@ -518,13 +472,13 @@ describe('getShapeUtil', () => {
 	it('throws if that shape type isnt registered', () => {
 		const myMissingShape = { type: 'missing' } as TLShape
 		expect(() => editor.getShapeUtil(myMissingShape)).toThrowErrorMatchingInlineSnapshot(
-			`"No shape util found for type "missing""`
+			`"No shape util found for type \"missing\""`
 		)
 	})
 
 	it('throws if that type isnt registered', () => {
 		expect(() => editor.getShapeUtil('missing')).toThrowErrorMatchingInlineSnapshot(
-			`"No shape util found for type "missing""`
+			`"No shape util found for type \"missing\""`
 		)
 	})
 })
@@ -542,323 +496,4 @@ describe('snapshots', () => {
 				type: 'image',
 				id: ids.imageAssetA,
 				typeName: 'asset',
-				props: {
-					w: 1200,
-					h: 800,
-					name: '',
-					isAnimated: false,
-					mimeType: 'png',
-					src: '',
-				},
-				meta: {},
-			},
-		])
-
-		editor.createShapes([
-			{ type: 'geo', x: 0, y: 0 },
-			{ type: 'geo', x: 100, y: 0 },
-			{
-				id: ids.imageA,
-				type: 'image',
-				props: {
-					playing: false,
-					url: '',
-					w: 1200,
-					h: 800,
-					assetId: ids.imageAssetA,
-				},
-				x: 0,
-				y: 1200,
-			},
-		])
-
-		const page2Id = PageRecordType.createId('page2')
-
-		editor.createPage({
-			id: page2Id,
-		})
-
-		editor.setCurrentPage(page2Id)
-
-		editor.createShapes([
-			{ type: 'geo', x: 0, y: 0 },
-			{ type: 'geo', x: 100, y: 0 },
-		])
-
-		editor.selectAll()
-
-		// now serialize
-
-		const snapshot = getSnapshot(editor.store)
-
-		const newEditor = new TestEditor()
-
-		loadSnapshot(newEditor.store, snapshot)
-
-		expect(editor.store.serialize()).toEqual(newEditor.store.serialize())
-	})
-})
-
-describe('when the user prefers dark UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: query === '(prefers-color-scheme: dark)',
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be true if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(true)
-	})
-})
-
-describe('when the user prefers light UI', () => {
-	beforeEach(() => {
-		window.matchMedia = jest.fn().mockImplementation((query) => {
-			return {
-				matches: false,
-				media: query,
-				onchange: null,
-				addEventListener: jest.fn(),
-				removeEventListener: jest.fn(),
-				dispatchEvent: jest.fn(),
-			}
-		})
-	})
-	it('isDarkMode should be false by default', () => {
-		editor = new TestEditor({})
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('isDarkMode should be false when inferDarkMode is false', () => {
-		editor = new TestEditor({ inferDarkMode: false })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-	it('should be false if the editor was instantiated with inferDarkMode', () => {
-		editor = new TestEditor({ inferDarkMode: true })
-		expect(editor.user.getIsDarkMode()).toBe(false)
-	})
-})
-
-describe('middle-click panning', () => {
-	it('clears the isPanning state on mouse up', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.pointerUp(100, 100)
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-
-	it('does not clear thee isPanning state if the space bar is down', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
-		editor.pointerMove(100, 100)
-		expect(editor.inputs.isPanning).toBe(true)
-		editor.keyDown(' ')
-		editor.pointerUp(100, 100, {
-			button: 1,
-		})
-		expect(editor.inputs.isPanning).toBe(true)
-
-		editor.keyUp(' ')
-		expect(editor.inputs.isPanning).toBe(false)
-	})
-})
-
-describe('dragging', () => {
-	it('drags correctly at 100% zoom', () => {
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 1)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-
-	it('drags correctly at 150% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 8 }).forceTick()
-
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 2)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-
-	it('drags correctly at 50% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
-
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 0).pointerDown()
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 2)
-		expect(editor.inputs.isDragging).toBe(false)
-		editor.pointerMove(0, 5)
-		expect(editor.inputs.isDragging).toBe(true)
-	})
-})
-
-describe('getShapeVisibility', () => {
-	const getShapeVisibility = jest.fn(((shape: TLShape) => {
-		return shape.meta.visibility as any
-	}) satisfies TldrawEditorProps['getShapeVisibility'])
-
-	beforeEach(() => {
-		getShapeVisibility.mockClear()
-		editor = new TestEditor({ getShapeVisibility })
-
-		editor.createShapes([
-			{
-				id: ids.box1,
-				type: 'geo',
-				x: 100,
-				y: 100,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box2,
-				type: 'geo',
-				x: 200,
-				y: 200,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-			{
-				id: ids.box3,
-				type: 'geo',
-				x: 300,
-				y: 300,
-				props: { w: 100, h: 100, fill: 'solid' } satisfies Partial<TLGeoShapeProps>,
-			},
-		])
-	})
-
-	it('can be directly used via editor.isShapeHidden', () => {
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('excludes hidden shapes from the rendering shapes array', () => {
-		expect(editor.getRenderingShapes().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(2)
-		editor.updateShape({ id: ids.box2, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getRenderingShapes().length).toBe(1)
-	})
-
-	it('excludes hidden shapes from hit testing', () => {
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(1)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getShapeAtPoint({ x: 150, y: 150 })).not.toBeDefined()
-		expect(editor.getShapesAtPoint({ x: 150, y: 150 }).length).toBe(0)
-	})
-
-	it('uses the callback reactively', () => {
-		const isFilteringEnabled = atom('', true)
-		getShapeVisibility.mockImplementation((shape: TLShape) => {
-			if (!isFilteringEnabled.get()) return 'inherit'
-			return shape.meta.visibility
-		})
-		let renderingShapes = editor.getRenderingShapes()
-		react('setRenderingShapes', () => {
-			renderingShapes = editor.getRenderingShapes()
-		})
-		expect(renderingShapes.length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(renderingShapes.length).toBe(2)
-		isFilteringEnabled.set(false)
-		expect(renderingShapes.length).toBe(3)
-		isFilteringEnabled.set(true)
-		expect(renderingShapes.length).toBe(2)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'inherit' } })
-		expect(renderingShapes.length).toBe(3)
-	})
-
-	it('applies recursively to children', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('still allows hidden shapes to be selected', () => {
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		editor.select(ids.box1)
-		expect(editor.getSelectedShapeIds()).toEqual([ids.box1])
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-	})
-
-	it('applies to getCurrentPageRenderingShapesSorted', () => {
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageRenderingShapesSorted().length).toBe(2)
-	})
-
-	it('does not apply to getCurrentPageShapesSorted', () => {
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'hidden' } })
-		expect(editor.getCurrentPageShapesSorted().length).toBe(3)
-	})
-
-	it('allows overriding hidden parents with "visible" value', () => {
-		const groupId = createShapeId('group')
-		editor.groupShapes([ids.box1, ids.box2], { groupId })
-
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(false)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-		editor.updateShape({ id: groupId, type: 'group', meta: { visibility: 'hidden' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(true)
-		editor.updateShape({ id: ids.box1, type: 'geo', meta: { visibility: 'visible' } })
-		expect(editor.isShapeHidden(editor.getShape(groupId)!)).toBe(true)
-		expect(editor.isShapeHidden(editor.getShape(ids.box1)!)).toBe(false)
-	})
-})
-
-describe('instance.isReadonly', () => {
-	it('updates in accordance with collaboration.mode', () => {
-		const mode = atom<'readonly' | 'readwrite'>('', 'readonly')
-		const editor = new TestEditor(
-			{},
-			{
-				collaboration: {
-					mode,
-					status: atom('', 'online'),
-				},
-			}
-		)
-
-		expect(editor.getIsReadonly()).toBe(true)
-
-		mode.set('readwrite')
-		expect(editor.getIsReadonly()).toBe(false)
-		mode.set('readonly')
-		expect(editor.getIsReadonly()).toBe(true)
-	})
-})
\ No newline at end of file
+				props: {
\ No newline at end of file
