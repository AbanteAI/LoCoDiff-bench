--- tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual)@@ -31,7 +31,7 @@ 	editor = new TestEditor({})
 
 	editor.createShapes([
-		// on it's own
+		// on its own
 		{ id: ids.box1, type: 'geo', x: 100, y: 100, props: { w: 100, h: 100 } },
 		// in a frame
 		{ id: ids.frame1, type: 'frame', x: 100, y: 100, props: { w: 100, h: 100 } },
@@ -47,8 +47,6 @@ })
 
 const moveShapesToPage2 = () => {
-	// directly maniuplate parentId like would happen in multiplayer situations
-
 	editor.updateShapes([
 		{ id: ids.box1, type: 'geo', parentId: ids.page2 },
 		{ id: ids.box2, type: 'geo', parentId: ids.page2 },
@@ -259,50 +257,38 @@ 
 describe('Editor.TickManager', () => {
 	it('Does not produce NaN values when elapsed is 0', () => {
-		// a helper that calls update pointer velocity with a given elapsed time.
-		// usually this is called by the app's tick manager, using the elapsed time
-		// between two animation frames, but we're calling it directly here.
 		const tick = (ms: number) => {
 			// @ts-ignore
 			editor._tickManager.updatePointerVelocity(ms)
 		}
 
-		// 1. pointer velocity should be 0 when there is no movement
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0, y: 0 })
 
 		editor.pointerMove(10, 10)
-
-		// 2. moving is not enough, we also need to wait a frame before the velocity is updated
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0, y: 0 })
 
-		// 3. once time passes, the pointer velocity should be updated
 		tick(16)
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.3125, y: 0.3125 })
 
-		// 4. let's do it again, it should be updated again. move, tick, measure
 		editor.pointerMove(20, 20)
 		tick(16)
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.46875, y: 0.46875 })
 
-		// 5. if we tick again without movement, the velocity should decay
 		tick(16)
-
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.23437, y: 0.23437 })
 
-		// 6. if updatePointerVelocity is (for whatever reason) called with an elapsed time of zero milliseconds, it should be ignored
 		tick(0)
-
 		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.23437, y: 0.23437 })
 	})
 })
 
 describe("App's default tool", () => {
 	it('Is select for regular app', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		expect(editor.getCurrentToolId()).toBe('select')
 	})
 	it('Is hand for readonly mode', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		editor.updateInstanceState({ isReadonly: true })
 		editor.setCurrentTool('hand')
 		expect(editor.getCurrentToolId()).toBe('hand')
@@ -364,7 +350,6 @@ 
 describe('isFocused', () => {
 	beforeEach(() => {
-		// lame but duplicated here since this was moved into a hook
 		const container = editor.getContainer()
 
 		const updateFocus = debounce(() => {
@@ -377,7 +362,6 @@ 				editor.updateInstanceState({ isFocused })
 
 				if (!isFocused) {
-					// When losing focus, run complete() to ensure that any interacts end
 					editor.complete()
 				}
 			}
@@ -435,11 +419,6 @@ 	})
 
 	it.skip('becomes true when a child of the app container div receives a focusin event', () => {
-		// We need to skip this one because it's not actually true: the focusin event will bubble
-		// to the document.body, resulting in that being the active element. In reality, the editor's
-		// container would also have received a focus event, and after the editor's debounce ends,
-		// the container (or one of its descendants) will be the focused element.
-		editor.elm.blur()
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 		jest.advanceTimersByTime(100)
@@ -453,17 +432,12 @@ 	})
 
 	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
-		// This used to be true, but the focusout event doesn't actually bubble up anymore
-		// after we reworked to have the focus manager handle things.
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
-
 		editor.updateInstanceState({ isFocused: true })
-
 		expect(editor.getInstanceState().isFocused).toBe(true)
 
 		child.dispatchEvent(new FocusEvent('focusout', { bubbles: true }))
-
 		jest.advanceTimersByTime(100)
 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
@@ -587,11 +561,9 @@ 
 		editor.selectAll()
 
-		// now serialize
-
 		const snapshot = getSnapshot(editor.store)
 
-		const newEditor = new TestEditor()
+		const newEditor = new TestEditor({})
 
 		loadSnapshot(newEditor.store, snapshot)
 
@@ -655,10 +627,7 @@ 
 describe('middle-click panning', () => {
 	it('clears the isPanning state on mouse up', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
+		editor.pointerDown(0, 0, { button: 1 })
 		editor.pointerMove(100, 100)
 		expect(editor.inputs.isPanning).toBe(true)
 		editor.pointerUp(100, 100)
@@ -666,16 +635,11 @@ 	})
 
 	it('does not clear thee isPanning state if the space bar is down', () => {
-		editor.pointerDown(0, 0, {
-			// middle mouse button
-			button: 1,
-		})
+		editor.pointerDown(0, 0, { button: 1 })
 		editor.pointerMove(100, 100)
 		expect(editor.inputs.isPanning).toBe(true)
 		editor.keyDown(' ')
-		editor.pointerUp(100, 100, {
-			button: 1,
-		})
+		editor.pointerUp(100, 100, { button: 1 })
 		expect(editor.inputs.isPanning).toBe(true)
 
 		editor.keyUp(' ')
@@ -695,7 +659,7 @@ 	})
 
 	it('drags correctly at 150% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 8 }).forceTick()
+		editor.setCamera({ x: 0, y: 0, z: 1.5 }).forceTick()
 
 		expect(editor.inputs.isDragging).toBe(false)
 		editor.pointerMove(0, 0).pointerDown()
@@ -707,7 +671,7 @@ 	})
 
 	it('drags correctly at 50% zoom', () => {
-		editor.setCamera({ x: 0, y: 0, z: 0.1 }).forceTick()
+		editor.setCamera({ x: 0, y: 0, z: 0.5 }).forceTick()
 
 		expect(editor.inputs.isDragging).toBe(false)
 		editor.pointerMove(0, 0).pointerDown()
