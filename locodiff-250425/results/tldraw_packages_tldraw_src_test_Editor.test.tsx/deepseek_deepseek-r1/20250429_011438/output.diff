--- tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual)@@ -13,7 +13,6 @@ 	react,
 } from '@tldraw/editor'
 import { TestEditor } from './TestEditor'
-import { TL } from './test-jsx'
 
 let editor: TestEditor
 
@@ -154,99 +153,13 @@ })
 
 it('Does not create an undo stack item when first clicking on an empty canvas', () => {
-	editor = new TestEditor()
+	editor = new TestEditor({})
 	editor.pointerMove(50, 50)
 	editor.click(0, 0)
 	expect(editor.getCanUndo()).toBe(false)
 })
 
-describe('Editor.sharedOpacity', () => {
-	it('should return the current opacity', () => {
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 1 })
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.5 })
-	})
-
-	it('should return opacity for a single selected shape', () => {
-		const { A } = editor.createShapesFromJsx(<TL.geo ref="A" opacity={0.3} x={0} y={0} />)
-		editor.setSelectedShapes([A])
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.3 })
-	})
-
-	it('should return opacity for multiple selected shapes', () => {
-		const { A, B } = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.3} x={0} y={0} />,
-		])
-		editor.setSelectedShapes([A, B])
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.3 })
-	})
-
-	it('should return mixed when multiple selected shapes have different opacity', () => {
-		const { A, B } = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.5} x={0} y={0} />,
-		])
-		editor.setSelectedShapes([A, B])
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'mixed' })
-	})
-
-	it('ignores the opacity of groups and returns the opacity of their children', () => {
-		const ids = editor.createShapesFromJsx([
-			<TL.group ref="group" x={0} y={0}>
-				<TL.geo ref="A" opacity={0.3} x={0} y={0} />
-			</TL.group>,
-		])
-		editor.setSelectedShapes([ids.group])
-		expect(editor.getSharedOpacity()).toStrictEqual({ type: 'shared', value: 0.3 })
-	})
-})
-
 describe('Editor.setOpacity', () => {
-	it('should set opacity for selected shapes', () => {
-		const ids = editor.createShapesFromJsx([
-			<TL.geo ref="A" opacity={0.3} x={0} y={0} />,
-			<TL.geo ref="B" opacity={0.4} x={0} y={0} />,
-		])
-
-		editor.setSelectedShapes([ids.A, ids.B])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
-
-		expect(editor.getShape(ids.A)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.B)!.opacity).toBe(0.5)
-	})
-
-	it('should traverse into groups and set opacity in their children', () => {
-		const ids = editor.createShapesFromJsx([
-			<TL.geo ref="boxA" x={0} y={0} />,
-			<TL.group ref="groupA" x={0} y={0}>
-				<TL.geo ref="boxB" x={0} y={0} />
-				<TL.group ref="groupB" x={0} y={0}>
-					<TL.geo ref="boxC" x={0} y={0} />
-					<TL.geo ref="boxD" x={0} y={0} />
-				</TL.group>
-			</TL.group>,
-		])
-
-		editor.setSelectedShapes([ids.groupA])
-		editor.setOpacityForSelectedShapes(0.5)
-		editor.setOpacityForNextShapes(0.5)
-
-		// a wasn't selected...
-		expect(editor.getShape(ids.boxA)!.opacity).toBe(1)
-
-		// b, c, & d were within a selected group...
-		expect(editor.getShape(ids.boxB)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.boxC)!.opacity).toBe(0.5)
-		expect(editor.getShape(ids.boxD)!.opacity).toBe(0.5)
-
-		// groups get skipped
-		expect(editor.getShape(ids.groupA)!.opacity).toBe(1)
-		expect(editor.getShape(ids.groupB)!.opacity).toBe(1)
-	})
-
 	it('stores opacity on opacityForNextShape', () => {
 		editor.setOpacityForSelectedShapes(0.5)
 		editor.setOpacityForNextShapes(0.5)
@@ -298,11 +211,11 @@ 
 describe("App's default tool", () => {
 	it('Is select for regular app', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		expect(editor.getCurrentToolId()).toBe('select')
 	})
 	it('Is hand for readonly mode', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		editor.updateInstanceState({ isReadonly: true })
 		editor.setCurrentTool('hand')
 		expect(editor.getCurrentToolId()).toBe('hand')
@@ -409,28 +322,6 @@ 	it('remains false when you call .blur()', () => {
 		expect(editor.getInstanceState().isFocused).toBe(false)
 		editor.updateInstanceState({ isFocused: false })
-		expect(editor.getInstanceState().isFocused).toBe(false)
-	})
-
-	it('becomes true when the container div receives a focus event', () => {
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(false)
-
-		editor.elm.focus()
-
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(true)
-	})
-
-	it('becomes false when the container div receives a blur event', () => {
-		editor.elm.focus()
-
-		jest.advanceTimersByTime(100)
-		expect(editor.getInstanceState().isFocused).toBe(true)
-
-		editor.elm.blur()
-
-		jest.advanceTimersByTime(100)
 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
@@ -452,9 +343,7 @@ 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it.skip('becomes false when a child of the app container div receives a focusout event', () => {
-		// This used to be true, but the focusout event doesn't actually bubble up anymore
-		// after we reworked to have the focus manager handle things.
+	it('becomes false when a child of the app container div receives a focusout event', () => {
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 
