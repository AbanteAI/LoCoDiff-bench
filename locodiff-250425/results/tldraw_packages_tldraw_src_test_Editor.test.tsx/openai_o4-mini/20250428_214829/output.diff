--- tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual)@@ -47,7 +47,7 @@ })
 
 const moveShapesToPage2 = () => {
-	// directly maniuplate parentId like would happen in multiplayer situations
+	// directly manipulate parentId like would happen in multiplayer situations
 
 	editor.updateShapes([
 		{ id: ids.box1, type: 'geo', parentId: ids.page2 },
@@ -298,11 +298,11 @@ 
 describe("App's default tool", () => {
 	it('Is select for regular app', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		expect(editor.getCurrentToolId()).toBe('select')
 	})
 	it('Is hand for readonly mode', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		editor.updateInstanceState({ isReadonly: true })
 		editor.setCurrentTool('hand')
 		expect(editor.getCurrentToolId()).toBe('hand')
@@ -393,12 +393,12 @@ 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it('becomes true when you call .focus()', () => {
+	it('becomes true when you update instanceState', () => {
 		editor.updateInstanceState({ isFocused: true })
 		expect(editor.getInstanceState().isFocused).toBe(true)
 	})
 
-	it('becomes false when you call .blur()', () => {
+	it('becomes false when you blur via updateInstanceState', () => {
 		editor.updateInstanceState({ isFocused: true })
 		expect(editor.getInstanceState().isFocused).toBe(true)
 
@@ -406,7 +406,7 @@ 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
 
-	it('remains false when you call .blur()', () => {
+	it('remains false when you call .blur() again', () => {
 		expect(editor.getInstanceState().isFocused).toBe(false)
 		editor.updateInstanceState({ isFocused: false })
 		expect(editor.getInstanceState().isFocused).toBe(false)
@@ -435,11 +435,6 @@ 	})
 
 	it.skip('becomes true when a child of the app container div receives a focusin event', () => {
-		// We need to skip this one because it's not actually true: the focusin event will bubble
-		// to the document.body, resulting in that being the active element. In reality, the editor's
-		// container would also have received a focus event, and after the editor's debounce ends,
-		// the container (or one of its descendants) will be the focused element.
-		editor.elm.blur()
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
 		jest.advanceTimersByTime(100)
@@ -457,13 +452,9 @@ 		// after we reworked to have the focus manager handle things.
 		const child = document.createElement('div')
 		editor.elm.appendChild(child)
-
 		editor.updateInstanceState({ isFocused: true })
-
 		expect(editor.getInstanceState().isFocused).toBe(true)
-
 		child.dispatchEvent(new FocusEvent('focusout', { bubbles: true }))
-
 		jest.advanceTimersByTime(100)
 		expect(editor.getInstanceState().isFocused).toBe(false)
 	})
@@ -587,11 +578,9 @@ 
 		editor.selectAll()
 
-		// now serialize
-
 		const snapshot = getSnapshot(editor.store)
 
-		const newEditor = new TestEditor()
+		const newEditor = new TestEditor({})
 
 		loadSnapshot(newEditor.store, snapshot)
 
