
index 7b312191..ae586fd6 100644
--- a/tldraw_packages_tldraw_src_test_Editor.test.tsx_expectedoutput.txt (expected):tmp/tmp4p3r59wi_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_Editor.test.tsx_extracted.txt (actual):tmp/tmph4qf2myy_actual.txt	
@@ -154,7 +154,7 @@ it('Begins dragging from wheel', () => {
 })
 
 it('Does not create an undo stack item when first clicking on an empty canvas', () => {
-	editor = new TestEditor()
+	editor = new TestEditor({})
 	editor.pointerMove(50, 50)
 	editor.click(0, 0)
 	expect(editor.getCanUndo()).toBe(false)
@@ -292,17 +292,17 @@ describe('Editor.TickManager', () => {
 		// 6. if updatePointerVelocity is (for whatever reason) called with an elapsed time of zero milliseconds, it should be ignored
 		tick(0)
 
-		expect(editor.inputs.pointerVelocity.toJson()).toCloselyMatchObject({ x: 0.23437, y: 0.23437 })
+		expect(editor.inputs.pointerVelocity.toJson()).toStrictEqual({ x: 0.23437109375, y: 0.23437109375 })
 	})
 })
 
 describe("App's default tool", () => {
 	it('Is select for regular app', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		expect(editor.getCurrentToolId()).toBe('select')
 	})
 	it('Is hand for readonly mode', () => {
-		editor = new TestEditor()
+		editor = new TestEditor({})
 		editor.updateInstanceState({ isReadonly: true })
 		editor.setCurrentTool('hand')
 		expect(editor.getCurrentToolId()).toBe('hand')
@@ -375,6 +375,7 @@ describe('isFocused', () => {
 
 			if (wasFocused !== isFocused) {
 				editor.updateInstanceState({ isFocused })
+				// editor.updateViewportScreenBounds() // removed in 79460cbf3a1084ac5b49e41d1e2570e4eee98e82
 
 				if (!isFocused) {
 					// When losing focus, run complete() to ensure that any interacts end
@@ -545,6 +546,7 @@ describe('snapshots', () => {
 				props: {
 					w: 1200,
 					h: 800,
+					fileSize: -1,
 					name: '',
 					isAnimated: false,
 					mimeType: 'png',
@@ -591,7 +593,7 @@ describe('snapshots', () => {
 
 		const snapshot = getSnapshot(editor.store)
 
-		const newEditor = new TestEditor()
+		const newEditor = new TestEditor({})
 
 		loadSnapshot(newEditor.store, snapshot)
 
