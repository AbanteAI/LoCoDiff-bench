it('should warn when replacing a container which was manually updated outside of React', () => {
  spyOn(console, 'error');
  // when not messing with the DOM outside of React
  ReactDOM.render(<div key="1">foo</div>, container);
  ReactDOM.render(<div key="1">bar</div>, container);
  expect(container.innerHTML).toBe('<div>bar</div>');
  // then we mess with the DOM before an update
  // we know this will error - that is expected right now
  // It's an error of type 'NotFoundError' with no message
  expect(() => {
    container.innerHTML = '<div>MEOW.</div>';
    ReactDOM.render(<div key="2">baz</div>, container);
  }).toThrowError();
  expectDev(console.error.calls.count()).toBe(1);
  expectDev(console.error.calls.argsFor(0)[0]).toContain(
    'render(...): ' +
      'It looks like the React-rendered content of this container was ' +
      'removed without using React. This is not supported and will ' +
      'cause errors. Instead, call ReactDOM.unmountComponentAtNode ' +
      'to empty a container.',
  );
});
```

**Test modification/fix**: The test was significantly modified in the commit by Rick Hanlon on Wed Jan 24 23:55:42 2024 -0500 (commit 696953fd51deaf60fd55733493a372cc3520d8b7) with the message "Convert ReactDOMFiber to createRoot (#28077)". This commit converted the test from using the legacy `ReactDOM.render` API to the new `createRoot` API. Here's what the test became:

```javascript
it('should warn when replacing a container which was manually updated outside of React', async () => {
  // when not messing with the DOM outside of React
  await act(() => {
    root.render(<div key="1">foo</div>);
  });
  expect(container.innerHTML).toBe('<div>foo</div>');

  await act(() => {
    root.render(<div key="1">bar</div>);
  });
  expect(container.innerHTML).toBe('<div>bar</div>');

  // then we mess with the DOM before an update
  // we know this will error - that is expected right now
  // It's an error of type 'NotFoundError' with no message
  container.innerHTML = '<div>MEOW.</div>';

  expect(() => {
    ReactDOM.flushSync(() => {
      root.render(<div key="2">baz</div>);
    });
  }).toThrow('The node to be removed is not a child of this node');
});