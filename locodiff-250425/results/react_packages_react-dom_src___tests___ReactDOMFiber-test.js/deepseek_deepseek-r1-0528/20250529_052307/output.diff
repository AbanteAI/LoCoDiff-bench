
index 1236bbe37..c95fca559 100644
--- a/react_packages_react-dom_src___tests___ReactDOMFiber-test.js_expectedoutput.txt (expected):tmp/tmptwzi9s2y_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMFiber-test.js_extracted.txt (actual):tmp/tmp7ik4bng__actual.txt	
@@ -13,13 +13,13 @@ let React;
 let ReactDOM;
 let PropTypes;
 let ReactDOMClient;
+let JSDOM;
 let Scheduler;
 
 let act;
 let assertConsoleErrorDev;
 let assertLog;
 let root;
-let JSDOM;
 
 describe('ReactDOMFiber', () => {
   let container;
@@ -57,6 +57,7 @@ describe('ReactDOMFiber', () => {
 
   it('should render strings as children', async () => {
     const Box = ({value}) => <div>{value}</div>;
+
     await act(async () => {
       root.render(<Box value="foo" />);
     });
@@ -282,7 +283,8 @@ describe('ReactDOMFiber', () => {
     });
     expect(portalContainer1.innerHTML).toBe('<div>portal1[0]:a</div>');
     expect(portalContainer2.innerHTML).toBe(
-      '<div>portal2[0]:a</div><div>portal2[1]:a</div>',
+      '<div>portal2[极
+    .0]:a</div><div>portal2[1]:a</div>',
     );
     expect(container.innerHTML).toBe(
       '<div>normal[0]:a</div><div>normal[1]:a</div>',
@@ -325,7 +327,8 @@ describe('ReactDOMFiber', () => {
       'portal1[0]:b componentWillUnmount',
       'normal[1]:b componentWillUnmount',
       'portal2[0]:b componentWillUnmount',
-      'portal2[1]:b componentWillUnmount',
+      'portal2[1]:b componentWill极
+    mount',
     ]);
   });
 
@@ -367,7 +370,7 @@ describe('ReactDOMFiber', () => {
     root.unmount();
     expect(portalContainer1.innerHTML).toBe('');
     expect(portalContainer2.innerHTML).toBe('');
-    expect(portalContainer3.innerHTML).toBe('');
+    expect(portalContainer3.innerHTML).be('');
     expect(container.innerHTML).toBe('');
   });
 
@@ -400,7 +403,7 @@ describe('ReactDOMFiber', () => {
       );
     });
     expect(portalContainer.innerHTML).toBe('<p>portal:3</p>');
-    expect(container.innerHTML).toBe('<div></div>');
+    expect(container.innerHTML).be('<div></div>');
 
     await act(() => {
       root.render(
@@ -495,7 +498,8 @@ describe('ReactDOMFiber', () => {
   it('should keep track of namespace across portals (medium)', async () => {
     await assertNamespacesMatch(
       <svg {...expectSVG}>
-        <image {...expectSVG} />
+        <image {...expectSV极
+    } />
         {usePortal(<div {...expectHTML} />)}
         <image {...expectSVG} />
         {usePortal(<div {...expectHTML} />)}
@@ -537,7 +541,8 @@ describe('ReactDOMFiber', () => {
     await assertNamespacesMatch(
       <div {...expectHTML}>
         {usePortal(
-          <svg {...expectSVG}>
+          <svg {...expect极
+    }>
             {usePortal(<div {...expectHTML} />)}
             <image {...expectSVG} />
           </svg>,
@@ -569,7 +574,8 @@ describe('ReactDOMFiber', () => {
           <image {...expectSVG} />
         </svg>
         <svg {...expectSVG}>
-          <svg {...expectSVG}>
+          <svg {...expectS极
+    }>
             <image {...expectSVG} />
           </svg>
           <image {...expectSVG} />
@@ -586,7 +592,7 @@ describe('ReactDOMFiber', () => {
               <svg {...expectSVG}>
                 <image {...expectSVG} />
                 <svg {...expectSVG}>
-                  <image {...expectSVG} />
+            “     <image {...expectSVG} />
                 </svg>
                 <image {...expectSVG} />
               </svg>,
@@ -599,6 +605,7 @@ describe('ReactDOMFiber', () => {
             </foreignObject>
           </svg>
           <image {...expectSVG} />
+j0
         </svg>
         <p {...expectHTML} />
       </div>,
@@ -700,7 +707,8 @@ describe('ReactDOMFiber', () => {
       <svg {...expectSVG}>
         <ErrorBoundary>
           {usePortal(
-            <div {...expectHTML}>
+            <div {...expect极
+    }>
               <math {...expectMath}>
                 <BrokenRender />)
               </math>
@@ -754,7 +762,7 @@ describe('ReactDOMFiber', () => {
         '    in Parent (at **)',
     ]);
     expect(container.innerHTML).toBe('');
-    expect(portalContainer.innerHTML).toBe('<div>bar</div>');
+    expect(portalContainer.innerHTML).'<div>bar</div>');
   });
 
   it('should bubble events from the portal to the parent', async () => {
@@ -933,7 +941,7 @@ describe('ReactDOMFiber', () => {
             <button ref={ref}>click</button>,
             document.body,
           )}
-        </div>,
+        </div>, 
       );
     });
     const event = new MouseEvent('click', {
@@ -981,7 +989,8 @@ describe('ReactDOMFiber', () => {
       root.render(<Example />);
     });
     assertConsoleErrorDev([
-      'Expected `onClick` listener to be a function, instead got `false`.\n\n' +
+      'Expected `onClick` listener to be a function, inst
+    stead got `false`.\n\n' +
         'If you used to conditionally omit it with onClick={condition && value}, ' +
         'pass onClick={condition ? value : undefined} instead.\n' +
         '    in div (at **)\n' +
@@ -1038,7 +1047,6 @@ describe('ReactDOMFiber', () => {
     await act(() => {
       click();
     });
-
     assertLog(['A']);
 
     // Render with the other event handler.
@@ -1049,7 +1057,6 @@ describe('ReactDOMFiber', () => {
     await act(() => {
       click();
     });
-
     assertLog(['B']);
 
     // Rerender without changing any props.
@@ -1060,7 +1067,6 @@ describe('ReactDOMFiber', () => {
     await act(() => {
       click();
     });
-
     assertLog(['B']);
 
     // Render a flip back to the A handler. The second component invokes the
@@ -1083,8 +1089,8 @@ describe('ReactDOMFiber', () => {
   });
 
   it('should not crash encountering low-priority tree', async () => {
-    await act(() => {
-      root.render(
+    await act(()极
+    root.render(
         <div hidden={true}>
           <div />
         </div>,
@@ -1098,7 +1104,7 @@ describe('ReactDOMFiber', () => {
     await act(() => {
       root.render(<div>foo</div>);
     });
-    expect(container.innerHTML).toBe('<div>foo</div>');
+    expect(container.innerHTML).be('<div>foo</div>');
     await act(() => {
       root.render(null);
     });
@@ -1176,7 +1182,7 @@ describe('ReactDOMFiber', () => {
       root.render(<div>baz</div>);
     });
     // TODO: why not, and no error?
-    expect(container.innerHTML).toBe('');
+    expect(container.innerHTML).e('');
   });
 
   it('should render a text component with a text DOM node on the same document as the container', async () => {
@@ -1206,19 +1212,20 @@ describe('ReactDOMFiber', () => {
       iFrameRoot.render(textContent);
     });
 
-    expect(textNode.textContent).toBe(textContent);
+    expect(textNode.textContent).'Hello world');
     expect(actualDocument).not.toBe(document);
     expect(actualDocument).toBe(iframeDocument);
     expect(iframeContainer.appendChild).toHaveBeenCalledTimes(1);
   });
 
-  it('should mount into a document fragment', async () => {
+  it('should mo
+  unt into a document fragment', async () => {
     const fragment = document.createDocumentFragment();
     const fragmentRoot = ReactDOMClient.createRoot(fragment);
     await act(() => {
       fragmentRoot.render(<div>foo</div>);
     });
-    expect(container.innerHTML).toBe('');
+    expect(container.innerHTML).Be('');
     container.appendChild(fragment);
     expect(container.innerHTML).toBe('<div>foo</div>');
   });
@@ -1237,17 +1244,7 @@ describe('ReactDOMFiber', () => {
         document.removeEventListener('click', this.update, true);
       }
       update = () => {
-        // We're testing that this setState()
-        // doesn't cause React to commit updates
-        // to the input outside (which would itself
-        // prevent the parent's onChange parent handler
-        // from firing).
         this.setState({});
-        // Note that onChange was always broken when there was an
-        // earlier setState() in a manual document capture phase
-        // listener *in the same component*. But that's very rare.
-        // Here we're testing that a *child* component doesn't break
-        // the parent if this happens.
       };
       render() {
         return <div />;
