
index 1236bbe3..b64cc022 100644
--- a/react_packages_react-dom_src___tests___ReactDOMFiber-test.js_expectedoutput.txt (expected):tmp/tmpkynl67yz_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMFiber-test.js_extracted.txt (actual):tmp/tmpha3h8jo9_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -13,12 +11,13 @@ let React;
 let ReactDOM;
 let PropTypes;
 let ReactDOMClient;
+let root;
 let Scheduler;
 
 let act;
 let assertConsoleErrorDev;
 let assertLog;
-let root;
+
 let JSDOM;
 
 describe('ReactDOMFiber', () => {
@@ -231,7 +230,6 @@ describe('ReactDOMFiber', () => {
   it('should render many portals', async () => {
     const portalContainer1 = document.createElement('div');
     const portalContainer2 = document.createElement('div');
-
     class Child extends React.Component {
       componentDidMount() {
         Scheduler.log(`${this.props.name} componentDidMount`);
@@ -946,15 +944,6 @@ describe('ReactDOMFiber', () => {
     expect(onClick).toHaveBeenCalledTimes(1);
   });
 
-  it('should throw on bad createPortal argument', () => {
-    expect(() => {
-      ReactDOM.createPortal(<div>portal</div>, null);
-    }).toThrow('Target container is not a DOM element.');
-    expect(() => {
-      ReactDOM.createPortal(<div>portal</div>, document.createTextNode('hi'));
-    }).toThrow('Target container is not a DOM element.');
-  });
-
   it('should warn for non-functional event listeners', () => {
     class Example extends React.Component {
       render() {
@@ -1120,7 +1109,6 @@ describe('ReactDOMFiber', () => {
       root.render(<div key="1">bar</div>);
     });
     expect(container.innerHTML).toBe('<div>bar</div>');
-
     // then we mess with the DOM before an update
     // we know this will error - that is expected right now
     // It's an error of type 'NotFoundError' with no message
@@ -1146,7 +1134,6 @@ describe('ReactDOMFiber', () => {
       root.render(<div>bar</div>);
     });
     expect(container.innerHTML).toBe('<div>bar</div>');
-
     // then we mess with the DOM before an update
     container.innerHTML = '<div>MEOW.</div>';
 
@@ -1168,7 +1155,6 @@ describe('ReactDOMFiber', () => {
       root.render(<div>bar</div>);
     });
     expect(container.innerHTML).toBe('<div>bar</div>');
-
     // then we mess with the DOM before an update
     container.innerHTML = '';
 
@@ -1256,7 +1242,7 @@ describe('ReactDOMFiber', () => {
 
     class Parent extends React.Component {
       handleChange = val => {
-        didCallOnChange = true;
+        didCallCallOnChange = true;
       };
       render() {
         return (
@@ -1273,6 +1259,7 @@ describe('ReactDOMFiber', () => {
       }
     }
 
+    let didCallCallOnChange = false;
     await act(() => {
       root.render(<Parent />);
     });
@@ -1283,7 +1270,7 @@ describe('ReactDOMFiber', () => {
         }),
       );
     });
-    expect(didCallOnChange).toBe(true);
+    expect(didCallCallOnChange).toBe(true);
   });
 
   it('should restore selection in the correct window', async () => {
