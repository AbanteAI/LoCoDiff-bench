--- react_packages_react-dom_src___tests___ReactDOMFiber-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMFiber-test.js_extracted.txt (actual)@@ -13,13 +13,13 @@ let ReactDOM;
 let PropTypes;
 let ReactDOMClient;
+let JSDOM;
 let Scheduler;
 
 let act;
 let assertConsoleErrorDev;
 let assertLog;
 let root;
-let JSDOM;
 
 describe('ReactDOMFiber', () => {
   let container;
@@ -57,6 +57,7 @@ 
   it('should render strings as children', async () => {
     const Box = ({value}) => <div>{value}</div>;
+
     await act(async () => {
       root.render(<Box value="foo" />);
     });
@@ -83,7 +84,7 @@     expect(container.textContent).toEqual('10');
   });
 
-  it('should call an effect after mount/update (replacing render callback pattern)', async () => {
+  it('should call an effect after mount/update', async () => {
     function Component() {
       React.useEffect(() => {
         Scheduler.log('Callback');
@@ -91,20 +92,18 @@       return <div>Foo</div>;
     }
 
-    // mounting phase
     await act(async () => {
       root.render(<Component />);
     });
     assertLog(['Callback']);
 
-    // updating phase
     await act(async () => {
       root.render(<Component />);
     });
     assertLog(['Callback']);
   });
 
-  it('should call an effect when the same element is re-rendered (replacing render callback pattern)', async () => {
+  it('should call an effect when the same element is re-rendered', async () => {
     function Component({prop}) {
       React.useEffect(() => {
         Scheduler.log('Callback');
@@ -112,13 +111,11 @@       return <div>{prop}</div>;
     }
 
-    // mounting phase
     await act(async () => {
       root.render(<Component prop="Foo" />);
     });
     assertLog(['Callback']);
 
-    // updating phase
     await act(async () => {
       root.render(<Component prop="Bar" />);
     });
@@ -137,6 +134,7 @@ 
   it('should render a component returning numbers directly from render', async () => {
     const Text = ({value}) => value;
+
     await act(async () => {
       root.render(<Text value={10} />);
     });
@@ -179,16 +177,15 @@     expect(container.firstChild).toBe(null);
   });
 
-  let svgEls, htmlEls, mathEls;
-  const expectSVG = {ref: el => svgEls.push(el)};
-  const expectHTML = {ref: el => htmlEls.push(el)};
-  const expectMath = {ref: el => mathEls.push(el)};
-
-  const usePortal = function (tree) {
+  const expectSVG = {ref: (el) => svgEls.push(el)};
+  const expectHTML = {ref: (el) => htmlEls.push(el)};
+  const expectMath = {ref: (el) => mathEls.push(el)};
+
+  const usePortal = (tree) => {
     return ReactDOM.createPortal(tree, document.createElement('div'));
   };
 
-  const assertNamespacesMatch = async function (tree) {
+  const assertNamespacesMatch = async (tree) => {
     const testContainer = document.createElement('div');
     svgEls = [];
     htmlEls = [];
@@ -198,13 +195,13 @@     await act(async () => {
       testRoot.render(tree);
     });
-    svgEls.forEach(el => {
+    svgEls.forEach((el) => {
       expect(el.namespaceURI).toBe('http://www.w3.org/2000/svg');
     });
-    htmlEls.forEach(el => {
+    htmlEls.forEach((el) => {
       expect(el.namespaceURI).toBe('http://www.w3.org/1999/xhtml');
     });
-    mathEls.forEach(el => {
+    mathEls.forEach((el) => {
       expect(el.namespaceURI).toBe('http://www.w3.org/1998/Math/MathML');
     });
 
@@ -376,9 +373,7 @@ 
     await act(() => {
       root.render(
-        <div>
-          {ReactDOM.createPortal(<div>portal:1</div>, portalContainer)}
-        </div>,
+        <div>{ReactDOM.createPortal(<div>portal:1</div>, portalContainer)}</div>,
       );
     });
     expect(portalContainer.innerHTML).toBe('<div>portal:1</div>');
@@ -386,9 +381,7 @@ 
     await act(() => {
       root.render(
-        <div>
-          {ReactDOM.createPortal(<div>portal:2</div>, portalContainer)}
-        </div>,
+        <div>{ReactDOM.createPortal(<div>portal:2</div>, portalContainer)}</div>,
       );
     });
     expect(portalContainer.innerHTML).toBe('<div>portal:2</div>');
@@ -627,88 +620,6 @@         </svg>
         <p {...expectHTML} />
       </div>,
-    );
-  });
-
-  it('should unwind namespaces on uncaught errors', async () => {
-    function BrokenRender() {
-      throw new Error('Hello');
-    }
-
-    await expect(async () => {
-      await assertNamespacesMatch(
-        <svg {...expectSVG}>
-          <BrokenRender />
-        </svg>,
-      );
-    }).rejects.toThrow('Hello');
-    await assertNamespacesMatch(<div {...expectHTML} />);
-  });
-
-  it('should unwind namespaces on caught errors', async () => {
-    function BrokenRender() {
-      throw new Error('Hello');
-    }
-
-    class ErrorBoundary extends React.Component {
-      state = {error: null};
-      componentDidCatch(error) {
-        this.setState({error});
-      }
-      render() {
-        if (this.state.error) {
-          return <p {...expectHTML} />;
-        }
-        return this.props.children;
-      }
-    }
-
-    await assertNamespacesMatch(
-      <svg {...expectSVG}>
-        <foreignObject {...expectSVG}>
-          <ErrorBoundary>
-            <math {...expectMath}>
-              <BrokenRender />
-            </math>
-          </ErrorBoundary>
-        </foreignObject>
-        <image {...expectSVG} />
-      </svg>,
-    );
-    await assertNamespacesMatch(<div {...expectHTML} />);
-  });
-
-  it('should unwind namespaces on caught errors in a portal', async () => {
-    function BrokenRender() {
-      throw new Error('Hello');
-    }
-
-    class ErrorBoundary extends React.Component {
-      state = {error: null};
-      componentDidCatch(error) {
-        this.setState({error});
-      }
-      render() {
-        if (this.state.error) {
-          return <image {...expectSVG} />;
-        }
-        return this.props.children;
-      }
-    }
-
-    await assertNamespacesMatch(
-      <svg {...expectSVG}>
-        <ErrorBoundary>
-          {usePortal(
-            <div {...expectHTML}>
-              <math {...expectMath}>
-                <BrokenRender />)
-              </math>
-            </div>,
-          )}
-        </ErrorBoundary>
-        {usePortal(<div {...expectHTML} />)}
-      </svg>,
     );
   });
 
@@ -946,15 +857,6 @@     expect(onClick).toHaveBeenCalledTimes(1);
   });
 
-  it('should throw on bad createPortal argument', () => {
-    expect(() => {
-      ReactDOM.createPortal(<div>portal</div>, null);
-    }).toThrow('Target container is not a DOM element.');
-    expect(() => {
-      ReactDOM.createPortal(<div>portal</div>, document.createTextNode('hi'));
-    }).toThrow('Target container is not a DOM element.');
-  });
-
   it('should warn for non-functional event listeners', () => {
     class Example extends React.Component {
       render() {
@@ -971,7 +873,8 @@     ]);
   });
 
-  it('should warn with a special message for `false` event listeners', () => {
+  it('should warn with a special message for ' +
+    '`false` event listeners', () => {
     class Example extends React.Component {
       render() {
         return <div onClick={false} />;
@@ -1021,7 +924,7 @@     class Click extends React.Component {
       constructor() {
         super();
-        node.click();
+        click(node);
       }
       render() {
         return null;
@@ -1223,7 +1126,6 @@     expect(container.innerHTML).toBe('<div>foo</div>');
   });
 
-  // Regression test for https://github.com/facebook/react/issues/12643#issuecomment-413727104
   it('should not diff memoized host components', async () => {
     const inputRef = React.createRef();
     let didCallOnChange = false;
@@ -1272,7 +1174,7 @@         );
       }
     }
-
+  
     await act(() => {
       root.render(<Parent />);
     });
