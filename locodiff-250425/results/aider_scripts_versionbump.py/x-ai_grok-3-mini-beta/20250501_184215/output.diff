
index 3928e9d6..a0f155fb 100644
--- a/aider_scripts_versionbump.py_expectedoutput.txt (expected):tmp/tmp42ovuwzl_expected.txt	
+++ b/aider_scripts_versionbump.py_extracted.txt (actual):tmp/tmp147rz8vj_actual.txt	
@@ -66,7 +66,9 @@ def check_main_branch_up_to_date():
 # Function to check if we can push to the origin repository
 def check_ok_to_push():
     print("Checking if it's ok to push to origin repository...")
-    result = subprocess.run(["git", "push", "--dry-run", "origin"])
+    result = subprocess.run(["git", "push", "--dry-run", "origin"], capture_output=True, text=True)
+    print(result.stdout)
+    print(result.stderr)
 
     if result.returncode != 0:
         print("Error: Cannot push to origin repository.")
@@ -78,16 +80,13 @@ def check_ok_to_push():
 def main():
     parser = argparse.ArgumentParser(description="Bump version")
     parser.add_argument("new_version", help="New version in x.y.z format")
-    parser.add_argument(
-        "--dry-run", action="store_true", help="Print each step without actually executing them"
-    )
+    parser.add_argument("--dry-run", action="store_true", help="Print each step without actually executing them")
     parser.add_argument("--force", action="store_true", help="Skip pre-push checks")
 
     args = parser.parse_args()
     dry_run = args.dry_run
     force = args.force
 
-    # Perform checks before proceeding unless --force is used
     if not force:
         check_branch()
         check_working_directory_clean()
@@ -105,15 +104,15 @@ def main():
         f"{new_version.major}.{new_version.minor}.{new_version.micro + 1}"
     )
 
-    from aider import __version__ as current_version
+    with open("aider/__init__.py", "r") as f:
+        content = f.read()
 
+    current_version = re.search(r'__version__ = "(.+?)"', content).group(1)
     if new_version <= version.parse(current_version):
         raise ValueError(
             f"New version {new_version} must be greater than the current version {current_version}"
         )
 
-    with open("aider/__init__.py", "r") as f:
-        content = f.read()
     updated_content = re.sub(r'__version__ = ".+?"', f'__version__ = "{new_version}"', content)
 
     print("Updating aider/__init__.py with new version:")
@@ -133,10 +132,7 @@ def main():
     for cmd in git_commands:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
-            subprocess.run(
-                cmd,
-                check=True,
-            )
+            subprocess.run(cmd, check=True)
 
     new_dev_version = f"{incremented_version}.dev"
     updated_dev_content = re.sub(
