
index 3928e9d6c..3121e905e 100644
--- a/aider_scripts_versionbump.py_expectedoutput.txt (expected):tmp/tmpl40p5xfo_expected.txt	
+++ b/aider_scripts_versionbump.py_extracted.txt (actual):tmp/tmpqko2mqdh_actual.txt	
@@ -2,15 +2,13 @@
 
 import argparse
 import datetime
-import os
 import re
 import subprocess
 import sys
-
+import os
 from packaging import version
 
 
-# Function to check if we are on the main branch
 def check_branch():
     branch = subprocess.run(
         ["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True
@@ -20,7 +18,6 @@ def check_branch():
         sys.exit(1)
 
 
-# Function to check if the working directory is clean
 def check_working_directory_clean():
     status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True).stdout
     if status:
@@ -28,7 +25,6 @@ def check_working_directory_clean():
         sys.exit(1)
 
 
-# Function to fetch the latest changes and check if the main branch is up to date
 def check_main_branch_up_to_date():
     subprocess.run(["git", "fetch", "origin"], check=True)
     local_main = subprocess.run(
@@ -63,15 +59,12 @@ def check_main_branch_up_to_date():
         sys.exit(1)
 
 
-# Function to check if we can push to the origin repository
 def check_ok_to_push():
     print("Checking if it's ok to push to origin repository...")
     result = subprocess.run(["git", "push", "--dry-run", "origin"])
-
     if result.returncode != 0:
         print("Error: Cannot push to origin repository.")
         sys.exit(1)
-
     print("Push to origin repository is possible.")
 
 
@@ -82,12 +75,10 @@ def main():
         "--dry-run", action="store_true", help="Print each step without actually executing them"
     )
     parser.add_argument("--force", action="store_true", help="Skip pre-push checks")
-
     args = parser.parse_args()
     dry_run = args.dry_run
     force = args.force
 
-    # Perform checks before proceeding unless --force is used
     if not force:
         check_branch()
         check_working_directory_clean()
@@ -114,6 +105,7 @@ def main():
 
     with open("aider/__init__.py", "r") as f:
         content = f.read()
+
     updated_content = re.sub(r'__version__ = ".+?"', f'__version__ = "{new_version}"', content)
 
     print("Updating aider/__init__.py with new version:")
@@ -129,20 +121,15 @@ def main():
         ["git", "push", "origin", "--no-verify"],
         ["git", "push", "origin", f"v{new_version}", "--no-verify"],
     ]
-
     for cmd in git_commands:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
-            subprocess.run(
-                cmd,
-                check=True,
-            )
+            subprocess.run(cmd, check=True)
 
     new_dev_version = f"{incremented_version}.dev"
     updated_dev_content = re.sub(
         r'__version__ = ".+?"', f'__version__ = "{new_dev_version}"', content
     )
-
     print()
     print("Updating aider/__init__.py with new dev version:")
     print(updated_dev_content)
@@ -157,19 +144,11 @@ def main():
         ["git", "push", "origin", "--no-verify"],
         ["git", "push", "origin", f"v{new_dev_version}", "--no-verify"],
     ]
-
     for cmd in git_commands_dev:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
             subprocess.run(cmd, check=True)
 
-    # Remove aider/_version.py if it exists
-    version_file = "aider/_version.py"
-    if os.path.exists(version_file):
-        print(f"Removing {version_file}")
-        if not dry_run:
-            os.remove(version_file)
-
 
 if __name__ == "__main__":
     main()
\ No newline at end of file
