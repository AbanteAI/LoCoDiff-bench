--- aider_scripts_versionbump.py_expectedoutput.txt (expected)+++ aider_scripts_versionbump.py_extracted.txt (actual)@@ -22,7 +22,9 @@ 
 # Function to check if the working directory is clean
 def check_working_directory_clean():
-    status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True).stdout
+    status = subprocess.run(
+        ["git", "status", "--porcelain"], capture_output=True, text=True
+    ).stdout
     if status:
         print("Error: Working directory is not clean.")
         sys.exit(1)
@@ -49,15 +51,9 @@         local_date = datetime.datetime.strptime(local_date, "%Y-%m-%d %H:%M:%S %z")
         origin_date = datetime.datetime.strptime(origin_date, "%Y-%m-%d %H:%M:%S %z")
         if local_date < origin_date:
-            print(
-                "Error: The local main branch is behind origin/main. Please pull the latest"
-                " changes."
-            )
+            print("Error: The local main branch is behind origin/main. Please pull the latest changes.")
         elif local_date > origin_date:
-            print(
-                "Error: The origin/main branch is behind the local main branch. Please push"
-                " your changes."
-            )
+            print("Error: The origin/main branch is behind the local main branch. Please push your changes.")
         else:
             print("Error: The main branch and origin/main have diverged.")
         sys.exit(1)
@@ -67,11 +63,9 @@ def check_ok_to_push():
     print("Checking if it's ok to push to origin repository...")
     result = subprocess.run(["git", "push", "--dry-run", "origin"])
-
     if result.returncode != 0:
         print("Error: Cannot push to origin repository.")
         sys.exit(1)
-
     print("Push to origin repository is possible.")
 
 
@@ -133,10 +127,7 @@     for cmd in git_commands:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
-            subprocess.run(
-                cmd,
-                check=True,
-            )
+            subprocess.run(cmd, check=True)
 
     new_dev_version = f"{incremented_version}.dev"
     updated_dev_content = re.sub(
