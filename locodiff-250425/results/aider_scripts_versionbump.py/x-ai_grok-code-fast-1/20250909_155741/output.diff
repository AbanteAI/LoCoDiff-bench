
index 3928e9d6c..1c4fa7683 100644
--- a/aider_scripts_versionbump.py_expectedoutput.txt (expected):tmp/tmphocsl7s2_expected.txt	
+++ b/aider_scripts_versionbump.py_extracted.txt (actual):tmp/tmpgx9_bnbt_actual.txt	
@@ -6,7 +6,6 @@ import os
 import re
 import subprocess
 import sys
-
 from packaging import version
 
 
@@ -22,7 +21,9 @@ def check_branch():
 
 # Function to check if the working directory is clean
 def check_working_directory_clean():
-    status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True).stdout
+    status = subprocess.run(
+        ["git", "status", "--porcelain"], capture_output=True, text=True
+    ).stdout
     if status:
         print("Error: Working directory is not clean.")
         sys.exit(1)
@@ -50,13 +51,11 @@ def check_main_branch_up_to_date():
         origin_date = datetime.datetime.strptime(origin_date, "%Y-%m-%d %H:%M:%S %z")
         if local_date < origin_date:
             print(
-                "Error: The local main branch is behind origin/main. Please pull the latest"
-                " changes."
+                "Error: The local main branch is behind origin/main. Please pull the latest changes."
             )
         elif local_date > origin_date:
             print(
-                "Error: The origin/main branch is behind the local main branch. Please push"
-                " your changes."
+                "Error: The origin/main branch is behind the local main branch. Please push your changes."
             )
         else:
             print("Error: The main branch and origin/main have diverged.")
@@ -107,6 +106,7 @@ def main():
 
     from aider import __version__ as current_version
 
+    current_version = current_version.split("-dev")[0].split(".dev")[0]
     if new_version <= version.parse(current_version):
         raise ValueError(
             f"New version {new_version} must be greater than the current version {current_version}"
@@ -133,10 +133,7 @@ def main():
     for cmd in git_commands:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
-            subprocess.run(
-                cmd,
-                check=True,
-            )
+            subprocess.run(cmd, check=True)
 
     new_dev_version = f"{incremented_version}.dev"
     updated_dev_content = re.sub(
@@ -169,6 +166,9 @@ def main():
         print(f"Removing {version_file}")
         if not dry_run:
             os.remove(version_file)
+            subprocess.run(["git", "add", version_file], check=True)
+            subprocess.run(["git", "commit", "-m", f"Remove {version_file}"], check=True)
+            subprocess.run(["git", "push", "origin", "--no-verify"], check=True)
 
 
 if __name__ == "__main__":
