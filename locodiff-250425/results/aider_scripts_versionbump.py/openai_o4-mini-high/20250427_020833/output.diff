--- aider_scripts_versionbump.py_expectedoutput.txt (expected)+++ aider_scripts_versionbump.py_extracted.txt (actual)@@ -9,42 +9,53 @@ 
 from packaging import version
 
-
 # Function to check if we are on the main branch
 def check_branch():
     branch = subprocess.run(
-        ["git", "rev-parse", "--abbrev-ref", "HEAD"], capture_output=True, text=True
+        ["git", "rev-parse", "--abbrev-ref", "HEAD"],
+        capture_output=True,
+        text=True
     ).stdout.strip()
     if branch != "main":
         print("Error: Not on the main branch.")
         sys.exit(1)
 
-
 # Function to check if the working directory is clean
 def check_working_directory_clean():
-    status = subprocess.run(["git", "status", "--porcelain"], capture_output=True, text=True).stdout
+    status = subprocess.run(
+        ["git", "status", "--porcelain"],
+        capture_output=True,
+        text=True
+    ).stdout
     if status:
         print("Error: Working directory is not clean.")
         sys.exit(1)
-
 
 # Function to fetch the latest changes and check if the main branch is up to date
 def check_main_branch_up_to_date():
     subprocess.run(["git", "fetch", "origin"], check=True)
     local_main = subprocess.run(
-        ["git", "rev-parse", "main"], capture_output=True, text=True
+        ["git", "rev-parse", "main"],
+        capture_output=True,
+        text=True
     ).stdout.strip()
     print(f"Local main commit hash: {local_main}")
     origin_main = subprocess.run(
-        ["git", "rev-parse", "origin/main"], capture_output=True, text=True
+        ["git", "rev-parse", "origin/main"],
+        capture_output=True,
+        text=True
     ).stdout.strip()
     print(f"Origin main commit hash: {origin_main}")
     if local_main != origin_main:
         local_date = subprocess.run(
-            ["git", "show", "-s", "--format=%ci", "main"], capture_output=True, text=True
+            ["git", "show", "-s", "--format=%ci", "main"],
+            capture_output=True,
+            text=True
         ).stdout.strip()
         origin_date = subprocess.run(
-            ["git", "show", "-s", "--format=%ci", "origin/main"], capture_output=True, text=True
+            ["git", "show", "-s", "--format=%ci", "origin/main"],
+            capture_output=True,
+            text=True
         ).stdout.strip()
         local_date = datetime.datetime.strptime(local_date, "%Y-%m-%d %H:%M:%S %z")
         origin_date = datetime.datetime.strptime(origin_date, "%Y-%m-%d %H:%M:%S %z")
@@ -62,24 +73,21 @@             print("Error: The main branch and origin/main have diverged.")
         sys.exit(1)
 
-
-# Function to check if we can push to the origin repository
+# Function to check if it's ok to push to the origin repository
 def check_ok_to_push():
     print("Checking if it's ok to push to origin repository...")
     result = subprocess.run(["git", "push", "--dry-run", "origin"])
-
     if result.returncode != 0:
         print("Error: Cannot push to origin repository.")
         sys.exit(1)
-
     print("Push to origin repository is possible.")
-
 
 def main():
     parser = argparse.ArgumentParser(description="Bump version")
     parser.add_argument("new_version", help="New version in x.y.z format")
     parser.add_argument(
-        "--dry-run", action="store_true", help="Print each step without actually executing them"
+        "--dry-run", action="store_true",
+        help="Print each step without actually executing them"
     )
     parser.add_argument("--force", action="store_true", help="Skip pre-push checks")
 
@@ -114,7 +122,12 @@ 
     with open("aider/__init__.py", "r") as f:
         content = f.read()
-    updated_content = re.sub(r'__version__ = ".+?"', f'__version__ = "{new_version}"', content)
+
+    updated_content = re.sub(
+        r'__version__ = ".+?"',
+        f'__version__ = "{new_version}"',
+        content
+    )
 
     print("Updating aider/__init__.py with new version:")
     print(updated_content)
@@ -133,14 +146,13 @@     for cmd in git_commands:
         print(f"Running: {' '.join(cmd)}")
         if not dry_run:
-            subprocess.run(
-                cmd,
-                check=True,
-            )
+            subprocess.run(cmd, check=True)
 
     new_dev_version = f"{incremented_version}.dev"
     updated_dev_content = re.sub(
-        r'__version__ = ".+?"', f'__version__ = "{new_dev_version}"', content
+        r'__version__ = ".+?"',
+        f'__version__ = "{new_dev_version}"',
+        content
     )
 
     print()
@@ -170,6 +182,5 @@         if not dry_run:
             os.remove(version_file)
 
-
 if __name__ == "__main__":
     main()