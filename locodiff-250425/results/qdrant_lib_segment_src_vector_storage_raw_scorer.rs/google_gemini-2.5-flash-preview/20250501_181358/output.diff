
index 9233559f..ac0a471f 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmp2v72527k_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmptazgtprs_actual.txt	
@@ -25,9 +25,9 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -76,6 +76,9 @@ pub trait RawScorer {
     /// Return true if vector satisfies current search context for given point (exists and not deleted)
     fn check_vector(&self, point: PointOffsetType) -> bool;
 
+    #[cfg(target_arch = "x86_64")]
+    fn check_vectors_in_mask(&self, points: &[PointOffsetType], mask: &mut [bool]);
+
     /// Score stored vector with vector under the given index
     fn score_point(&self, point: PointOffsetType) -> ScoreType;
 
@@ -116,6 +119,8 @@ where
     vector: std::marker::PhantomData<*const TVector>,
 }
 
+pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
+
 pub fn new_raw_scorer<'a>(
     query: QueryVector,
     vector_storage: &'a VectorStorageEnum,
@@ -124,12 +129,8 @@ pub fn new_raw_scorer<'a>(
 ) -> OperationResult<Box<dyn RawScorer + 'a>> {
     match vector_storage {
         VectorStorageEnum::DenseSimple(vs) => raw_scorer_impl(query, vs, point_deleted, hc),
-        VectorStorageEnum::DenseSimpleByte(vs) => {
-            raw_scorer_byte_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::DenseSimpleHalf(vs) => {
-            raw_scorer_half_impl(query, vs, point_deleted, hc)
-        }
+        VectorStorageEnum::DenseSimpleByte(vs) => raw_scorer_byte_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::DenseSimpleHalf(vs) => raw_scorer_half_impl(query, vs, point_deleted, hc),
 
         VectorStorageEnum::DenseMemmap(vs) => {
             if vs.has_async_reader() {
@@ -151,65 +152,29 @@ pub fn new_raw_scorer<'a>(
         }
 
         // TODO(byte_storage): Implement async raw scorer for DenseMemmapByte and DenseMemmapHalf
-        VectorStorageEnum::DenseMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
+        VectorStorageEnum::DenseMemmapByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseMemmapHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
 
-        VectorStorageEnum::DenseAppendableMemmap(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRam(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRamByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRamHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
+        VectorStorageEnum::DenseAppendableMemmap(vs) => raw_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableMemmapByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableMemmapHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRam(vs) => raw_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRamByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRamHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
         VectorStorageEnum::SparseSimple(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
         VectorStorageEnum::SparseMmap(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
-        VectorStorageEnum::MultiDenseSimple(vs) => {
-            raw_multi_scorer_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseSimpleByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseSimpleHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmap(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRam(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
+        VectorStorageEnum::MultiDenseSimple(vs) => raw_multi_scorer_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseSimpleByte(vs) => raw_multi_scorer_byte_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseSimpleHalf(vs) => raw_multi_scorer_half_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmap(vs) => raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRam(vs) => raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -224,11 +189,7 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
         QueryVector::RecommendBestScore(reco_query) => {
             let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
+                SparseCustomQueryScorer::<_, _>::new(RecoBestScoreQuery::from(reco_query), vector_storage, hardware_counter),
                 point_deleted,
                 vec_deleted,
             )
@@ -236,11 +197,7 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
         QueryVector::RecommendSumScores(reco_query) => {
             let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoSumScoresQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
+                SparseCustomQueryScorer::<_, _>::new(RecoSumScoresQuery::from(reco_query), vector_storage, hardware_counter),
                 point_deleted,
                 vec_deleted,
             )
@@ -951,7 +908,7 @@ where
     TQueryScorer: QueryScorer<TVector>,
 {
     fn score_points(&self, points: &[PointOffsetType], scores: &mut [ScoredPointOffset]) -> usize {
-        let mut size: usize = 0;
+        let mut size = 0;
         for point_id in points.iter().copied() {
             if !self.check_vector(point_id) {
                 continue;
@@ -969,6 +926,13 @@ where
         size
     }
 
+    #[cfg(target_arch = "x86_64")]
+    fn check_vectors_in_mask(&self, points: &[PointOffsetType], mask: &mut [bool]) {
+        for (idx, point_id) in points.iter().copied().enumerate() {
+            mask[idx] = self.check_vector(point_id);
+        }
+    }
+
     fn score_points_unfiltered(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
@@ -983,14 +947,17 @@ where
         scores
     }
 
+    #[inline]
     fn check_vector(&self, point: PointOffsetType) -> bool {
         check_deleted_condition(point, self.vec_deleted, self.point_deleted)
     }
 
+    #[inline]
     fn score_point(&self, point: PointOffsetType) -> ScoreType {
         self.query_scorer.score_stored(point)
     }
 
+    #[inline]
     fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType {
         self.query_scorer.score_internal(point_a, point_b)
     }
@@ -1010,6 +977,7 @@ where
         // Reuse the same buffer for all chunks, to avoid reallocation
         let mut chunk = [0; VECTOR_READ_BATCH_SIZE];
         let mut scores_buffer = [0.0; VECTOR_READ_BATCH_SIZE];
+
         loop {
             let mut chunk_size = 0;
             for point_id in &mut *points {
