
index 9233559f4..70613e804 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmphvmffcz7_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmpvoe86zqw_actual.txt	
@@ -37,23 +37,21 @@ use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQ
 ///                                             │  - Cosine         │
 ///   RawScorer            QueryScorer          │  - Dot            │
 ///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Euclidean      │
-///  │                │   │              │  │   │                   │
+—  │                │   │              │  │   │                   │
 ///  │       ┌─────┐  │   │    ┌─────┐   │  │   └───────────────────┘
-///  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
+—  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
 ///  │       └─────┘  │   │    └─────┘   │
-///  │                │   │              │
-///  └────────────────┘   │    ┌─────┐   │        Query
+—  │                │   │              │
+—  └────────────────┘   │    ┌─────┐   │        Query
 ///  - Deletions          │    │     │◄──┼───┐   ┌───────────────────┐
-///  - Access patterns    │    └─────┘   │   │   │  - RecoQuery      │
-///                       │              │   │   │  - DiscoveryQuery │
-///                       └──────────────┘   └───┤  - ContextQuery   │
-///                       - Query holding        │                   │
-///                       - Vector storage       └───────────────────┘
+—  - Access patterns    │    └─────┘   │   │   │  - RecoQuery      │
+—                       │              │   │   │  - DiscoveryQuery │
+—                       └──────────────┘   └───┤  - ContextQuery   │
+—                       - Query holding        │                   │
+—                       - Vector storage       └───────────────────┘
 ///                                              - Scoring logic
 ///                                              - Complex queries
 ///
-/// ```
-///
 /// Optimized scorer for multiple scoring requests comparing with a single query
 /// Holds current query and params, receives only subset of points to score
 pub trait RawScorer {
@@ -208,7 +206,19 @@ pub fn new_raw_scorer<'a>(
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
+#[cfg(feature = "testing")]
+pub fn new_raw_scorer_for_test<'a>(
+    vector: QueryVector,
+    vector_storage: &'a VectorStorageEnum,
+    point_deleted: &'a BitSlice,
+) -> OperationResult<Box<dyn RawScorer + 'a>> {
+    new_raw_scorer(
+        vector,
+        vector_storage,
+        point_deleted,
+        HardwareCounterCell::new(),
+    )
+}
 
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
@@ -272,20 +282,6 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     }
 }
 
-#[cfg(feature = "testing")]
-pub fn new_raw_scorer_for_test<'a>(
-    vector: QueryVector,
-    vector_storage: &'a VectorStorageEnum,
-    point_deleted: &'a BitSlice,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    new_raw_scorer(
-        vector,
-        vector_storage,
-        point_deleted,
-        HardwareCounterCell::new(),
-    )
-}
-
 pub fn raw_scorer_impl<'a, TVectorStorage: DenseVectorStorage<VectorElementType>>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
