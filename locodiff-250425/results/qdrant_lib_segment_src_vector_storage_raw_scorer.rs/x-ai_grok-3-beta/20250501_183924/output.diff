
index 9233559f..bf951ecb 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmph5e__vw8_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmpxysslox9_actual.txt	
@@ -25,9 +25,9 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -51,7 +51,6 @@ use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQ
 ///                       - Vector storage       └───────────────────┘
 ///                                              - Scoring logic
 ///                                              - Complex queries
-///
 /// ```
 ///
 /// Optimized scorer for multiple scoring requests comparing with a single query
@@ -210,6 +209,20 @@ pub fn new_raw_scorer<'a>(
 
 pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
 
+#[cfg(feature = "testing")]
+pub fn new_raw_scorer_for_test<'a>(
+    vector: QueryVector,
+    vector_storage: &'a VectorStorageEnum,
+    point_deleted: &'a BitSlice,
+) -> OperationResult<Box<dyn RawScorer + 'a>> {
+    new_raw_scorer(
+        vector,
+        vector_storage,
+        point_deleted,
+        HardwareCounterCell::new(),
+    )
+}
+
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -272,20 +285,6 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     }
 }
 
-#[cfg(feature = "testing")]
-pub fn new_raw_scorer_for_test<'a>(
-    vector: QueryVector,
-    vector_storage: &'a VectorStorageEnum,
-    point_deleted: &'a BitSlice,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    new_raw_scorer(
-        vector,
-        vector_storage,
-        point_deleted,
-        HardwareCounterCell::new(),
-    )
-}
-
 pub fn raw_scorer_impl<'a, TVectorStorage: DenseVectorStorage<VectorElementType>>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
