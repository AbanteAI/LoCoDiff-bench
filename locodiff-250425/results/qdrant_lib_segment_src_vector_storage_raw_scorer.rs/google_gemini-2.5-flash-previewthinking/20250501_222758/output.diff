
index 9233559f..3c6f4274 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmp0zhtz79h_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmp73y0gajw_actual.txt	
@@ -25,9 +25,9 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -79,6 +79,14 @@ pub trait RawScorer {
     /// Score stored vector with vector under the given index
     fn score_point(&self, point: PointOffsetType) -> ScoreType;
 
+    /// Score a batch of stored vectors
+    ///
+    /// # Arguments
+    ///
+    /// * `points` - points to score
+    /// * `scores` - buffer to write scores into. Must be of the same size as `points`.
+    fn score_stored_batch(&self, points: &[PointOffsetType], scores: &mut [ScoreType]);
+
     /// Return distance between stored points selected by IDs
     ///
     /// # Panics
@@ -116,27 +124,48 @@ where
     vector: std::marker::PhantomData<*const TVector>,
 }
 
+// default static is_stopped used for creating raw scorer where stopping condition is not required
+pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
+
+#[cfg(feature = "testing")]
+pub fn new_raw_scorer_for_test<'a>(
+    vector: QueryVector,
+    vector_storage: &'a VectorStorageEnum,
+    point_deleted: &'a BitSlice,
+) -> OperationResult<Box<dyn RawScorer + 'a>> {
+    new_raw_scorer(
+        vector,
+        vector_storage,
+        point_deleted,
+        HardwareCounterCell::new(),
+    )
+}
+
 pub fn new_raw_scorer<'a>(
     query: QueryVector,
     vector_storage: &'a VectorStorageEnum,
     point_deleted: &'a BitSlice,
-    hc: HardwareCounterCell,
+    hardware_counter: HardwareCounterCell,
 ) -> OperationResult<Box<dyn RawScorer + 'a>> {
     match vector_storage {
-        VectorStorageEnum::DenseSimple(vs) => raw_scorer_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::DenseSimple(vs) => raw_scorer_impl(query, vs, point_deleted, hardware_counter),
         VectorStorageEnum::DenseSimpleByte(vs) => {
-            raw_scorer_byte_impl(query, vs, point_deleted, hc)
+            raw_scorer_byte_impl(query, vs, point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseSimpleHalf(vs) => {
-            raw_scorer_half_impl(query, vs, point_deleted, hc)
+            raw_scorer_half_impl(query, vs, point_deleted, hardware_counter)
         }
 
         VectorStorageEnum::DenseMemmap(vs) => {
             if vs.has_async_reader() {
                 #[cfg(target_os = "linux")]
                 {
-                    let scorer_result =
-                        super::async_raw_scorer::new(query.clone(), vs, point_deleted, hc.fork());
+                    let scorer_result = super::async_raw_scorer::new(
+                        query.clone(),
+                        vs,
+                        point_deleted,
+                        hardware_counter.fork(),
+                    );
                     match scorer_result {
                         Ok(raw_scorer) => return Ok(raw_scorer),
                         Err(err) => log::error!("failed to initialize async raw scorer: {err}"),
@@ -147,69 +176,65 @@ pub fn new_raw_scorer<'a>(
                 log::warn!("async raw scorer is only supported on Linux");
             }
 
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
-
-        // TODO(byte_storage): Implement async raw scorer for DenseMemmapByte and DenseMemmapHalf
         VectorStorageEnum::DenseMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
 
         VectorStorageEnum::DenseAppendableMemmap(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseAppendableMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseAppendableMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseAppendableInRam(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseAppendableInRamByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::DenseAppendableInRamHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
-        VectorStorageEnum::SparseSimple(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
-        VectorStorageEnum::SparseMmap(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::SparseSimple(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hardware_counter),
+        VectorStorageEnum::SparseMmap(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hardware_counter),
         VectorStorageEnum::MultiDenseSimple(vs) => {
-            raw_multi_scorer_impl(query, vs, point_deleted, hc)
+            raw_multi_scorer_impl(query, vs, point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseSimpleByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs, point_deleted, hc)
+            raw_multi_scorer_byte_impl(query, vs, point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseSimpleHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs, point_deleted, hc)
+            raw_multi_scorer_half_impl(query, vs, point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableMemmap(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableInRam(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
         VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
+            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hardware_counter)
         }
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -224,11 +249,7 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
         QueryVector::RecommendBestScore(reco_query) => {
             let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
+                SparseCustomQueryScorer::<_, _>::new(reco_query, vector_storage, hardware_counter),
                 point_deleted,
                 vec_deleted,
             )
@@ -272,20 +293,6 @@ pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     }
 }
 
-#[cfg(feature = "testing")]
-pub fn new_raw_scorer_for_test<'a>(
-    vector: QueryVector,
-    vector_storage: &'a VectorStorageEnum,
-    point_deleted: &'a BitSlice,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    new_raw_scorer(
-        vector,
-        vector_storage,
-        point_deleted,
-        HardwareCounterCell::new(),
-    )
-}
-
 pub fn raw_scorer_impl<'a, TVectorStorage: DenseVectorStorage<VectorElementType>>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -991,6 +998,10 @@ where
         self.query_scorer.score_stored(point)
     }
 
+    fn score_stored_batch(&self, points: &[PointOffsetType], scores: &mut [ScoreType]) {
+        self.query_scorer.score_stored_batch(points, scores)
+    }
+
     fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType {
         self.query_scorer.score_internal(point_a, point_b)
     }
@@ -1009,7 +1020,8 @@ where
 
         // Reuse the same buffer for all chunks, to avoid reallocation
         let mut chunk = [0; VECTOR_READ_BATCH_SIZE];
-        let mut scores_buffer = [0.0; VECTOR_READ_BATCH_SIZE];
+        let mut scores_buffer = [0.0; VECTOR_READ_BATCH_SIZE]; // TODO(sparse) - use SparseScoreType
+
         loop {
             let mut chunk_size = 0;
             for point_id in &mut *points {
