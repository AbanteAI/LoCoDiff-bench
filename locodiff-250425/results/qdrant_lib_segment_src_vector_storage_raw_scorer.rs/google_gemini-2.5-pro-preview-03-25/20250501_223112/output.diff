
index 9233559f..33eea056 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmpgi_8qh5__expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmpgle9x8tw_actual.txt	
@@ -25,9 +25,9 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -58,7 +58,7 @@ use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQ
 /// Holds current query and params, receives only subset of points to score
 pub trait RawScorer {
     fn score_points(&self, points: &[PointOffsetType], scores: &mut [ScoredPointOffset]) -> usize;
-
+    
     /// Score points without excluding deleted and filtered points
     ///
     /// # Arguments
@@ -72,27 +72,27 @@ pub trait RawScorer {
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
     ) -> Vec<ScoredPointOffset>;
-
+    
     /// Return true if vector satisfies current search context for given point (exists and not deleted)
     fn check_vector(&self, point: PointOffsetType) -> bool;
-
+    
     /// Score stored vector with vector under the given index
     fn score_point(&self, point: PointOffsetType) -> ScoreType;
-
+    
     /// Return distance between stored points selected by IDs
     ///
     /// # Panics
     ///
     /// Panics if any id is out of range
     fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType;
-
+    
     fn peek_top_iter(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
         top: usize,
         is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>>;
-
+    
     fn peek_top_all(
         &self,
         top: usize,
@@ -112,7 +112,7 @@ where
     pub point_deleted: &'a BitSlice,
     /// [`BitSlice`] defining flags for deleted vectors in this segment.
     pub vec_deleted: &'a BitSlice,
-
+    
     vector: std::marker::PhantomData<*const TVector>,
 }
 
@@ -130,7 +130,7 @@ pub fn new_raw_scorer<'a>(
         VectorStorageEnum::DenseSimpleHalf(vs) => {
             raw_scorer_half_impl(query, vs, point_deleted, hc)
         }
-
+        
         VectorStorageEnum::DenseMemmap(vs) => {
             if vs.has_async_reader() {
                 #[cfg(target_os = "linux")]
@@ -142,14 +142,14 @@ pub fn new_raw_scorer<'a>(
                         Err(err) => log::error!("failed to initialize async raw scorer: {err}"),
                     };
                 }
-
+                
                 #[cfg(not(target_os = "linux"))]
                 log::warn!("async raw scorer is only supported on Linux");
             }
-
+            
             raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
         }
-
+        
         // TODO(byte_storage): Implement async raw scorer for DenseMemmapByte and DenseMemmapHalf
         VectorStorageEnum::DenseMemmapByte(vs) => {
             raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
@@ -157,7 +157,7 @@ pub fn new_raw_scorer<'a>(
         VectorStorageEnum::DenseMemmapHalf(vs) => {
             raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
         }
-
+        
         VectorStorageEnum::DenseAppendableMemmap(vs) => {
             raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
         }
@@ -208,8 +208,6 @@ pub fn new_raw_scorer<'a>(
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -960,7 +958,7 @@ where
                 idx: point_id,
                 score: self.query_scorer.score_stored(point_id),
             };
-
+            
             size += 1;
             if size == scores.len() {
                 return size;
@@ -968,7 +966,7 @@ where
         }
         size
     }
-
+    
     fn score_points_unfiltered(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
@@ -982,19 +980,19 @@ where
         }
         scores
     }
-
+    
     fn check_vector(&self, point: PointOffsetType) -> bool {
         check_deleted_condition(point, self.vec_deleted, self.point_deleted)
     }
-
+    
     fn score_point(&self, point: PointOffsetType) -> ScoreType {
         self.query_scorer.score_stored(point)
     }
-
+    
     fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType {
         self.query_scorer.score_internal(point_a, point_b)
     }
-
+    
     fn peek_top_iter(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
@@ -1004,9 +1002,9 @@ where
         if top == 0 {
             return Ok(vec![]);
         }
-
+        
         let mut pq = FixedLengthPriorityQueue::new(top);
-
+        
         // Reuse the same buffer for all chunks, to avoid reallocation
         let mut chunk = [0; VECTOR_READ_BATCH_SIZE];
         let mut scores_buffer = [0.0; VECTOR_READ_BATCH_SIZE];
@@ -1023,14 +1021,14 @@ where
                     break;
                 }
             }
-
+            
             if chunk_size == 0 {
                 break;
             }
-
+            
             self.query_scorer
                 .score_stored_batch(&chunk[..chunk_size], &mut scores_buffer[..chunk_size]);
-
+            
             for i in 0..chunk_size {
                 pq.push(ScoredPointOffset {
                     idx: chunk[i],
@@ -1038,10 +1036,10 @@ where
                 });
             }
         }
-
+        
         Ok(pq.into_sorted_vec())
     }
-
+    
     fn peek_top_all(
         &self,
         top: usize,
