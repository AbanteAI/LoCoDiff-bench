
index 9233559f..1f8eabe4 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmpdepd2tnz_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmpi787um7h_actual.txt	
@@ -2,101 +2,58 @@ use std::sync::atomic::AtomicBool;
 
 use bitvec::prelude::BitSlice;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::ext::BitSliceExt as _;
 use common::fixed_length_priority_queue::FixedLengthPriorityQueue;
 use common::types::{PointOffsetType, ScoreType, ScoredPointOffset};
 use sparse::common::sparse_vector::SparseVector;
 
-use super::query::{
-    ContextQuery, DiscoveryQuery, RecoBestScoreQuery, RecoQuery, RecoSumScoresQuery, TransformInto,
-};
+use super::query::{ContextQuery, DiscoveryQuery, RecoBestScoreQuery, RecoQuery, RecoSumScoresQuery, TransformInto};
 use super::query_scorer::custom_query_scorer::CustomQueryScorer;
 use super::query_scorer::multi_custom_query_scorer::MultiCustomQueryScorer;
 use super::query_scorer::sparse_custom_query_scorer::SparseCustomQueryScorer;
 use super::{DenseVectorStorage, MultiVectorStorage, SparseVectorStorage, VectorStorageEnum};
-use crate::common::operation_error::{
-    CancellableResult, OperationError, OperationResult, check_process_stopped,
-};
-use crate::data_types::vectors::{
-    DenseVector, MultiDenseVectorInternal, QueryVector, VectorElementType, VectorElementTypeByte,
-    VectorElementTypeHalf,
-};
+use crate::common::operation_error::{CancellableResult, OperationError, OperationResult, check_process_stopped};
+use crate::data_types::vectors::{DenseVector, MultiDenseVectorInternal, QueryVector, VectorElementType, VectorElementTypeByte, VectorElementTypeHalf};
 use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
 
 /// RawScorer composition:
 ///
-/// ```plaintext
 ///                                              Metric
 ///                                             ┌───────────────────┐
 ///                                             │  - Cosine         │
-///   RawScorer            QueryScorer          │  - Dot            │
-///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Euclidean      │
-///  │                │   │              │  │   │                   │
-///  │       ┌─────┐  │   │    ┌─────┐   │  │   └───────────────────┘
-///  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
-///  │       └─────┘  │   │    └─────┘   │
-///  │                │   │              │
-///  └────────────────┘   │    ┌─────┐   │        Query
-///  - Deletions          │    │     │◄──┼───┐   ┌───────────────────┐
-///  - Access patterns    │    └─────┘   │   │   │  - RecoQuery      │
-///                       │              │   │   │  - DiscoveryQuery │
-///                       └──────────────┘   └───┤  - ContextQuery   │
-///                       - Query holding        │                   │
-///                       - Vector storage       └───────────────────┘
-///                                              - Scoring logic
+///                                             │  - Dot            │
+///                                             │  - Euclidean      │
+///                                             └───────────────────┘
+///                                              - Vector Distance
 ///                                              - Complex queries
-///
-/// ```
-///
-/// Optimized scorer for multiple scoring requests comparing with a single query
-/// Holds current query and params, receives only subset of points to score
+///                                              - Scoring logic
+///     RawScorer            QueryScorer          ┌───────────────────────────┐
+///  ┌────────────────┐   ┌──────────────┐   ┌───┤  - RecoBestScoreQuery    │
+///  │                │   │              │   │   └───────────────────────────┘
+///  │       ┌─────┐  │   │    ┌─────┐   │  │
+///  │       │     │◄─┼───┤    │     │◄──┼───┐   Query
+///  │       └─────┘  │   │    └─────┘   │  │   ┌───────────────────────────┐
+///  │                │   │              │  │   │  - RecoSumScoresQuery     │
+///  └────────────────┘   └──────────────┘  └───┤  - DiscoveryQuery         │
+///  - Deletions                              │   │  - ContextQuery           │
+///  - Access patterns                       └───┴───────────────────────────┘
+
 pub trait RawScorer {
     fn score_points(&self, points: &[PointOffsetType], scores: &mut [ScoredPointOffset]) -> usize;
 
-    /// Score points without excluding deleted and filtered points
-    ///
-    /// # Arguments
-    ///
-    /// * `points` - points to score
-    ///
-    /// # Returns
-    ///
-    /// Vector of scored points
-    fn score_points_unfiltered(
-        &self,
-        points: &mut dyn Iterator<Item = PointOffsetType>,
-    ) -> Vec<ScoredPointOffset>;
-
-    /// Return true if vector satisfies current search context for given point (exists and not deleted)
-    fn check_vector(&self, point: PointOffsetType) -> bool;
-
-    /// Score stored vector with vector under the given index
-    fn score_point(&self, point: PointOffsetType) -> ScoreType;
-
-    /// Return distance between stored points selected by IDs
-    ///
-    /// # Panics
-    ///
-    /// Panics if any id is out of range
-    fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType;
-
     fn peek_top_iter(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
         top: usize,
-        is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>>;
 
     fn peek_top_all(
         &self,
         top: usize,
-        is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>>;
 }
 
@@ -108,7 +65,6 @@ where
     /// Point deleted flags should be explicitly present as `false`
     /// for each existing point in the segment.
     /// If there are no flags for some points, they are considered deleted.
-    /// [`BitSlice`] defining flags for deleted points (and thus these vectors).
     pub point_deleted: &'a BitSlice,
     /// [`BitSlice`] defining flags for deleted vectors in this segment.
     pub vec_deleted: &'a BitSlice,
@@ -124,13 +80,8 @@ pub fn new_raw_scorer<'a>(
 ) -> OperationResult<Box<dyn RawScorer + 'a>> {
     match vector_storage {
         VectorStorageEnum::DenseSimple(vs) => raw_scorer_impl(query, vs, point_deleted, hc),
-        VectorStorageEnum::DenseSimpleByte(vs) => {
-            raw_scorer_byte_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::DenseSimpleHalf(vs) => {
-            raw_scorer_half_impl(query, vs, point_deleted, hc)
-        }
-
+        VectorStorageEnum::DenseSimpleByte(vs) => raw_scorer_byte_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::DenseSimpleHalf(vs) => raw_scorer_half_impl(query, vs, point_deleted, hc),
         VectorStorageEnum::DenseMemmap(vs) => {
             if vs.has_async_reader() {
                 #[cfg(target_os = "linux")]
@@ -149,143 +100,29 @@ pub fn new_raw_scorer<'a>(
 
             raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
         }
-
         // TODO(byte_storage): Implement async raw scorer for DenseMemmapByte and DenseMemmapHalf
-        VectorStorageEnum::DenseMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-
-        VectorStorageEnum::DenseAppendableMemmap(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableMemmapByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableMemmapHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRam(vs) => {
-            raw_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRamByte(vs) => {
-            raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::DenseAppendableInRamHalf(vs) => {
-            raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
+        VectorStorageEnum::DenseMemmapByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseMemmapHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableMemmap(vs) => raw_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableMemmapByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableMemmapHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRam(vs) => raw_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRamByte(vs) => raw_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::DenseAppendableInRamHalf(vs) => raw_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
         VectorStorageEnum::SparseSimple(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
         VectorStorageEnum::SparseMmap(vs) => raw_sparse_scorer_impl(query, vs, point_deleted, hc),
-        VectorStorageEnum::MultiDenseSimple(vs) => {
-            raw_multi_scorer_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseSimpleByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseSimpleHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs, point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmap(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRam(vs) => {
-            raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => {
-            raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-        VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => {
-            raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc)
-        }
-    }
-}
-
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
-pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    let vec_deleted = vector_storage.deleted_vector_bitslice();
-    match query {
-        QueryVector::Nearest(_vector) => Err(OperationError::service_error(
-            "Raw scorer must not be used for nearest queries",
-        )),
-        QueryVector::RecommendBestScore(reco_query) => {
-            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::RecommendSumScores(reco_query) => {
-            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoSumScoresQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<SparseVector> = discovery_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    discovery_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<SparseVector> = context_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    context_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
+        VectorStorageEnum::MultiDenseSimple(vs) => raw_multi_scorer_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseSimpleByte(vs) => raw_multi_scorer_byte_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseSimpleHalf(vs) => raw_multi_scorer_half_impl(query, vs, point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmap(vs) => raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRam(vs) => raw_multi_scorer_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => raw_multi_scorer_byte_impl(query, vs.as_ref(), point_deleted, hc),
+        VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => raw_multi_scorer_half_impl(query, vs.as_ref(), point_deleted, hc),
     }
 }
 
-#[cfg(feature = "testing")]
-pub fn new_raw_scorer_for_test<'a>(
-    vector: QueryVector,
-    vector_storage: &'a VectorStorageEnum,
-    point_deleted: &'a BitSlice,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    new_raw_scorer(
-        vector,
-        vector_storage,
-        point_deleted,
-        HardwareCounterCell::new(),
-    )
-}
-
 pub fn raw_scorer_impl<'a, TVectorStorage: DenseVectorStorage<VectorElementType>>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -621,261 +458,7 @@ where
     }))
 }
 
-pub fn raw_multi_scorer_impl<'a, TVectorStorage: MultiVectorStorage<VectorElementType>>(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    match vector_storage.distance() {
-        Distance::Cosine => new_multi_scorer_with_metric::<CosineMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Euclid => new_multi_scorer_with_metric::<EuclidMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Dot => new_multi_scorer_with_metric::<DotProductMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Manhattan => new_multi_scorer_with_metric::<ManhattanMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-    }
-}
-
-fn new_multi_scorer_with_metric<
-    'a,
-    TMetric: Metric<VectorElementType> + 'a,
-    TVectorStorage: MultiVectorStorage<VectorElementType>,
->(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    let vec_deleted = vector_storage.deleted_vector_bitslice();
-    match query {
-        QueryVector::Nearest(vector) => raw_scorer_from_query_scorer(
-            MultiMetricQueryScorer::<VectorElementType, TMetric, _>::new(
-                &vector.try_into()?,
-                vector_storage,
-                hardware_counter,
-            ),
-            point_deleted,
-            vec_deleted,
-        ),
-        QueryVector::RecommendBestScore(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementType, TMetric, _, _, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::RecommendSumScores(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementType, TMetric, _, _, _>::new(
-                    RecoSumScoresQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<MultiDenseVectorInternal> =
-                discovery_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementType, TMetric, _, _, _>::new(
-                    discovery_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<MultiDenseVectorInternal> =
-                context_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementType, TMetric, _, _, _>::new(
-                    context_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-    }
-}
-
-pub fn raw_multi_scorer_byte_impl<'a, TVectorStorage: MultiVectorStorage<VectorElementTypeByte>>(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    match vector_storage.distance() {
-        Distance::Cosine => new_multi_scorer_byte_with_metric::<CosineMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Euclid => new_multi_scorer_byte_with_metric::<EuclidMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Dot => new_multi_scorer_byte_with_metric::<DotProductMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Manhattan => new_multi_scorer_byte_with_metric::<ManhattanMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-    }
-}
-
-fn new_multi_scorer_byte_with_metric<
-    'a,
-    TMetric: Metric<VectorElementTypeByte> + 'a,
-    TVectorStorage: MultiVectorStorage<VectorElementTypeByte>,
->(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    let vec_deleted = vector_storage.deleted_vector_bitslice();
-    match query {
-        QueryVector::Nearest(vector) => raw_scorer_from_query_scorer(
-            MultiMetricQueryScorer::<VectorElementTypeByte, TMetric, _>::new(
-                &vector.try_into()?,
-                vector_storage,
-                hardware_counter,
-            ),
-            point_deleted,
-            vec_deleted,
-        ),
-        QueryVector::RecommendBestScore(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeByte, TMetric, _, _, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::RecommendSumScores(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeByte, TMetric, _, _, _>::new(
-                    RecoSumScoresQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<MultiDenseVectorInternal> =
-                discovery_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeByte, TMetric, _, _, _>::new(
-                    discovery_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<MultiDenseVectorInternal> =
-                context_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeByte, TMetric, _, _, _>::new(
-                    context_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-    }
-}
-
-pub fn raw_multi_scorer_half_impl<'a, TVectorStorage: MultiVectorStorage<VectorElementTypeHalf>>(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    match vector_storage.distance() {
-        Distance::Cosine => new_multi_scorer_half_with_metric::<CosineMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Euclid => new_multi_scorer_half_with_metric::<EuclidMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Dot => new_multi_scorer_half_with_metric::<DotProductMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-        Distance::Manhattan => new_multi_scorer_half_with_metric::<ManhattanMetric, _>(
-            query,
-            vector_storage,
-            point_deleted,
-            hardware_counter,
-        ),
-    }
-}
-
-fn new_multi_scorer_half_with_metric<
-    'a,
-    TMetric: Metric<VectorElementTypeHalf> + 'a,
-    TVectorStorage: MultiVectorStorage<VectorElementTypeHalf>,
->(
+pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
     point_deleted: &'a BitSlice,
@@ -883,19 +466,13 @@ fn new_multi_scorer_half_with_metric<
 ) -> OperationResult<Box<dyn RawScorer + 'a>> {
     let vec_deleted = vector_storage.deleted_vector_bitslice();
     match query {
-        QueryVector::Nearest(vector) => raw_scorer_from_query_scorer(
-            MultiMetricQueryScorer::<VectorElementTypeHalf, TMetric, _>::new(
-                &vector.try_into()?,
-                vector_storage,
-                hardware_counter,
-            ),
-            point_deleted,
-            vec_deleted,
-        ),
+        QueryVector::Nearest(_vector) => Err(OperationError::service_error(
+            "Raw scorer must not be used for nearest queries",
+        )),
         QueryVector::RecommendBestScore(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
+            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
+                SparseCustomQueryScorer::<_, _>::new(
                     RecoBestScoreQuery::from(reco_query),
                     vector_storage,
                     hardware_counter,
@@ -905,9 +482,9 @@ fn new_multi_scorer_half_with_metric<
             )
         }
         QueryVector::RecommendSumScores(reco_query) => {
-            let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
+            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
+                SparseCustomQueryScorer::<_, _>::new(
                     RecoSumScoresQuery::from(reco_query),
                     vector_storage,
                     hardware_counter,
@@ -917,10 +494,9 @@ fn new_multi_scorer_half_with_metric<
             )
         }
         QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<MultiDenseVectorInternal> =
-                discovery_query.transform_into()?;
+            let discovery_query: DiscoveryQuery<SparseVector> = discovery_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
+                SparseCustomQueryScorer::<_, _>::new(
                     discovery_query,
                     vector_storage,
                     hardware_counter,
@@ -930,10 +506,9 @@ fn new_multi_scorer_half_with_metric<
             )
         }
         QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<MultiDenseVectorInternal> =
-                context_query.transform_into()?;
+            let context_query: ContextQuery<SparseVector> = context_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
+                SparseCustomQueryScorer::<_, _>::new(
                     context_query,
                     vector_storage,
                     hardware_counter,
@@ -951,8 +526,8 @@ where
     TQueryScorer: QueryScorer<TVector>,
 {
     fn score_points(&self, points: &[PointOffsetType], scores: &mut [ScoredPointOffset]) -> usize {
-        let mut size: usize = 0;
-        for point_id in points.iter().copied() {
+        let mut size = 0;
+        for &point_id in points {
             if !self.check_vector(point_id) {
                 continue;
             }
@@ -960,60 +535,31 @@ where
                 idx: point_id,
                 score: self.query_scorer.score_stored(point_id),
             };
-
             size += 1;
             if size == scores.len() {
-                return size;
+                break;
             }
         }
         size
     }
 
-    fn score_points_unfiltered(
-        &self,
-        points: &mut dyn Iterator<Item = PointOffsetType>,
-    ) -> Vec<ScoredPointOffset> {
-        let mut scores = vec![];
-        for point_id in points {
-            scores.push(ScoredPointOffset {
-                idx: point_id,
-                score: self.query_scorer.score_stored(point_id),
-            });
-        }
-        scores
-    }
-
-    fn check_vector(&self, point: PointOffsetType) -> bool {
-        check_deleted_condition(point, self.vec_deleted, self.point_deleted)
-    }
-
-    fn score_point(&self, point: PointOffsetType) -> ScoreType {
-        self.query_scorer.score_stored(point)
-    }
-
-    fn score_internal(&self, point_a: PointOffsetType, point_b: PointOffsetType) -> ScoreType {
-        self.query_scorer.score_internal(point_a, point_b)
-    }
-
     fn peek_top_iter(
         &self,
         points: &mut dyn Iterator<Item = PointOffsetType>,
         top: usize,
-        is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>> {
         if top == 0 {
             return Ok(vec![]);
         }
 
         let mut pq = FixedLengthPriorityQueue::new(top);
-
-        // Reuse the same buffer for all chunks, to avoid reallocation
         let mut chunk = [0; VECTOR_READ_BATCH_SIZE];
         let mut scores_buffer = [0.0; VECTOR_READ_BATCH_SIZE];
+
         loop {
             let mut chunk_size = 0;
-            for point_id in &mut *points {
-                check_process_stopped(is_stopped)?;
+            for point_id in points {
+                check_process_stopped(&self.query_scorer.is_cancelled())?;
                 if !self.check_vector(point_id) {
                     continue;
                 }
@@ -1023,7 +569,6 @@ where
                     break;
                 }
             }
-
             if chunk_size == 0 {
                 break;
             }
@@ -1045,10 +590,9 @@ where
     fn peek_top_all(
         &self,
         top: usize,
-        is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>> {
         let mut point_ids = 0..self.point_deleted.len() as PointOffsetType;
-        self.peek_top_iter(&mut point_ids, top, is_stopped)
+        self.peek_top_iter(&mut point_ids, top)
     }
 }
 
@@ -1059,9 +603,13 @@ pub fn check_deleted_condition(
     point_deleted: &BitSlice,
 ) -> bool {
     // Deleted points propagate to vectors; check vector deletion for possible early return
-    // Default to not deleted if our deleted flags failed grow
-    !vec_deleted.get_bit(point as usize).unwrap_or(false)
+    !vec_deleted
+        .get(point as usize)
+        .map(|x| *x)
+        .unwrap_or(false)
         // Additionally check point deletion for integrity if delete propagation to vector failed
-        // Default to deleted if the point mapping was removed from the ID tracker
-        && !point_deleted.get_bit(point as usize).unwrap_or(true)
+        && !point_deleted
+            .get(point as usize)
+            .map(|x| *x)
+            .unwrap_or(true)
 }
\ No newline at end of file
