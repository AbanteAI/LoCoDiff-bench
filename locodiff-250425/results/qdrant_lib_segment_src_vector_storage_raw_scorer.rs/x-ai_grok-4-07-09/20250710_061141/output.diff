
index 9233559f4..109407445 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmp2m6dxrj7_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmp_l84zhmi_actual.txt	
@@ -25,13 +25,12 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
-/// ```plaintext
 ///                                              Metric
 ///                                             ┌───────────────────┐
 ///                                             │  - Cosine         │
@@ -44,16 +43,14 @@ use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQ
 ///  │                │   │              │
 ///  └────────────────┘   │    ┌─────┐   │        Query
 ///  - Deletions          │    │     │◄──┼───┐   ┌───────────────────┐
-///  - Access patterns    │    └─────┘   │   │   │  - RecoQuery      │
-///                       │              │   │   │  - DiscoveryQuery │
+///                       │    └─────┘   │   │   │  - RecoQuery      │
+///  - Access patterns    │              │   │   │  - DiscoveryQuery │
 ///                       └──────────────┘   └───┤  - ContextQuery   │
 ///                       - Query holding        │                   │
 ///                       - Vector storage       └───────────────────┘
 ///                                              - Scoring logic
 ///                                              - Complex queries
 ///
-/// ```
-///
 /// Optimized scorer for multiple scoring requests comparing with a single query
 /// Holds current query and params, receives only subset of points to score
 pub trait RawScorer {
@@ -208,8 +205,6 @@ pub fn new_raw_scorer<'a>(
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
 pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
     query: QueryVector,
     vector_storage: &'a TVectorStorage,
@@ -818,7 +813,7 @@ fn new_multi_scorer_byte_with_metric<
                     hardware_counter,
                 ),
                 point_deleted,
-                vec_deleted,
+                vec_deleted, 
             )
         }
         QueryVector::Context(context_query) => {
@@ -831,7 +826,7 @@ fn new_multi_scorer_byte_with_metric<
                     hardware_counter,
                 ),
                 point_deleted,
-                vec_deleted,
+                vec_deleted, 
             )
         }
     }
@@ -889,13 +884,13 @@ fn new_multi_scorer_half_with_metric<
                 vector_storage,
                 hardware_counter,
             ),
-            point_deleted,
-            vec_deleted,
+            point_deleted, 
+            vec_deleted, 
         ),
         QueryVector::RecommendBestScore(reco_query) => {
             let reco_query: RecoQuery<MultiDenseVectorInternal> = reco_query.transform_into()?;
             raw_scorer_from_query_scorer(
-                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
+                MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _deel>::new(
                     RecoBestScoreQuery::from(reco_query),
                     vector_storage,
                     hardware_counter,
@@ -917,8 +912,7 @@ fn new_multi_scorer_half_with_metric<
             )
         }
         QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<MultiDenseVectorInternal> =
-                discovery_query.transform_into()?;
+            let discovery_query: DiscoveryQuery<MultiDenseVectorInternal> = discovery_query.transform_into()?;
             raw_scorer_from_query_scorer(
                 MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
                     discovery_query,
@@ -930,8 +924,7 @@ fn new_multi_scorer_half_with_metric<
             )
         }
         QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<MultiDenseVectorInternal> =
-                context_query.transform_into()?;
+            let context_query: ContextQuery<MultiDenseVectorInternal> = context_query.transform_into()?;
             raw_scorer_from_query_scorer(
                 MultiCustomQueryScorer::<VectorElementTypeHalf, TMetric, _, _, _>::new(
                     context_query,
