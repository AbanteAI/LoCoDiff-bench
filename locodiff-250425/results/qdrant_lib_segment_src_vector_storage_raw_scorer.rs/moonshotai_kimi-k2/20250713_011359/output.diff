
index 9233559f4..0155dc192 100644
--- a/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected):tmp/tmpe8mjh7xv_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual):tmp/tmpqw8sg566_actual.txt	
@@ -1,5 +1,3 @@
-use std::sync::atomic::AtomicBool;
-
 use bitvec::prelude::BitSlice;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::ext::BitSliceExt as _;
@@ -25,9 +23,9 @@ use crate::spaces::metric::Metric;
 use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -38,9 +36,9 @@ use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQ
 ///   RawScorer            QueryScorer          │  - Dot            │
 ///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Euclidean      │
 ///  │                │   │              │  │   │                   │
-///  │       ┌─────┐  │   │    ┌─────┐   │  │   └───────────────────┘
-///  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
-///  │       └─────┘  │   │    └─────┘   │
+///  │       ┌─────┐  │   │     ┌─────┐  │   │  └───────────────────┘
+///  │       │     │◄─┼───┤     │     │◄──┼──┘   - Vector Distance
+///  │       └─────┘  │   │     └─────┘  │
 ///  │                │   │              │
 ///  └────────────────┘   │    ┌─────┐   │        Query
 ///  - Deletions          │    │     │◄──┼───┐   ┌───────────────────┐
@@ -208,70 +206,6 @@ pub fn new_raw_scorer<'a>(
     }
 }
 
-pub static DEFAULT_STOPPED: AtomicBool = AtomicBool::new(false);
-
-pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
-    query: QueryVector,
-    vector_storage: &'a TVectorStorage,
-    point_deleted: &'a BitSlice,
-    hardware_counter: HardwareCounterCell,
-) -> OperationResult<Box<dyn RawScorer + 'a>> {
-    let vec_deleted = vector_storage.deleted_vector_bitslice();
-    match query {
-        QueryVector::Nearest(_vector) => Err(OperationError::service_error(
-            "Raw scorer must not be used for nearest queries",
-        )),
-        QueryVector::RecommendBestScore(reco_query) => {
-            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoBestScoreQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::RecommendSumScores(reco_query) => {
-            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    RecoSumScoresQuery::from(reco_query),
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Discovery(discovery_query) => {
-            let discovery_query: DiscoveryQuery<SparseVector> = discovery_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    discovery_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-        QueryVector::Context(context_query) => {
-            let context_query: ContextQuery<SparseVector> = context_query.transform_into()?;
-            raw_scorer_from_query_scorer(
-                SparseCustomQueryScorer::<_, _>::new(
-                    context_query,
-                    vector_storage,
-                    hardware_counter,
-                ),
-                point_deleted,
-                vec_deleted,
-            )
-        }
-    }
-}
-
 #[cfg(feature = "testing")]
 pub fn new_raw_scorer_for_test<'a>(
     vector: QueryVector,
@@ -945,6 +879,68 @@ fn new_multi_scorer_half_with_metric<
     }
 }
 
+pub fn raw_sparse_scorer_impl<'a, TVectorStorage: SparseVectorStorage>(
+    query: QueryVector,
+    vector_storage: &'a TVectorStorage,
+    point_deleted: &'a BitSlice,
+    hardware_counter: HardwareCounterCell,
+) -> OperationResult<Box<dyn RawScorer + 'a>> {
+    let vec_deleted = vector_storage.deleted_vector_bitslice();
+    match query {
+        QueryVector::Nearest(_vector) => Err(OperationError::service_error(
+            "Raw scorer must not be used for nearest queries",
+        )),
+        QueryVector::RecommendBestScore(reco_query) => {
+            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
+            raw_scorer_from_query_scorer(
+                SparseCustomQueryScorer::<_, _>::new(
+                    RecoBestScoreQuery::from(reco_query),
+                    vector_storage,
+                    hardware_counter,
+                ),
+                point_deleted,
+                vec_deleted,
+            )
+        }
+        QueryVector::RecommendSumScores(reco_query) => {
+            let reco_query: RecoQuery<SparseVector> = reco_query.transform_into()?;
+            raw_scorer_from_query_scorer(
+                SparseCustomQueryScorer::<_, _>::new(
+                    RecoSumScoresQuery::from(reco_query),
+                    vector_storage,
+                    hardware_counter,
+                ),
+                point_deleted,
+                vec_deleted,
+            )
+        }
+        QueryVector::Discovery(discovery_query) => {
+            let discovery_query: DiscoveryQuery<SparseVector> = discovery_query.transform_into()?;
+            raw_scorer_from_query_scorer(
+                SparseCustomQueryScorer::<_, _>::new(
+                    discovery_query,
+                    vector_storage,
+                    hardware_counter,
+                ),
+                point_deleted,
+                vec_deleted,
+            )
+        }
+        QueryVector::Context(context_query) => {
+            let context_query: ContextQuery<SparseVector> = context_query.transform_into()?;
+            raw_scorer_from_query_scorer(
+                SparseCustomQueryScorer::<_, _>::new(
+                    context_query,
+                    vector_storage,
+                    hardware_counter,
+                ),
+                point_deleted,
+                vec_deleted,
+            )
+        }
+    }
+}
+
 impl<TVector, TQueryScorer> RawScorer for RawScorerImpl<'_, TVector, TQueryScorer>
 where
     TVector: ?Sized,
