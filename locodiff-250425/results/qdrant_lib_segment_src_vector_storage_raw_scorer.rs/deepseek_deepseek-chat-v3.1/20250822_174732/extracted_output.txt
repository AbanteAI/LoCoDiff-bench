use std::sync::atomic::AtomicBool;

use bitvec::prelude::BitSlice;
use common::counter::hardware_counter::HardwareCounterCell;
use common::ext::BitSliceExt as _;
use common::fixed_length_priority_queue::FixedLengthPriorityQueue;
use common::types::{PointOffsetType, ScoreType, ScoredPointOffset};
use sparse::common::sparse_vector::SparseVector;

use super::query::{
    ContextQuery, DiscoveryQuery, RecoBestScoreQuery, RecoQuery, RecoSumScoresQuery, TransformInto,
};
use super::query_scorer::custom_query_scorer::CustomQueryScorer;
use super::query_scorer::multi_custom_query_scorer::MultiCustomQueryScorer;
use super::query_scorer::sparse_custom_query_scorer::SparseCustomQueryScorer;
use super::{DenseVectorStorage, MultiVectorStorage, SparseVectorStorage, VectorStorageEnum};
use crate::common::operation_error::{
    CancellableResult, OperationError, OperationResult, check_process_stopped,
};
use crate::data_types::vectors::{
    DenseVector, MultiDenseVectorInternal, QueryVector, VectorElementType, VectorElementTypeByte,
    VectorElementTypeHalf,
};
use crate::spaces::metric::Metric;
use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
use crate::types::Distance;
use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
use crate::vector_storage::query_scorer::QueryScorer;
use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;

/// RawScorer composition:
///
/// ```plaintext
///                                              Metric
///                                             ┌───────────────────┐
///                                             │  - Cosine         │
///   RawScorer            QueryScorer          │  - Dot            │
///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Euclidean      │
///  │                │   │              │  │   │                   │
///  │       ┌─────┐  │   │    ┌─────┐   │  │   └───────────────────┘
///  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
///  │       └─────┘  │   │    └─────┘   │
///  │                │   │              │
///  └────────────────┘   │    ┌─────┐   │        Query
///  - Deletions          │    │     │◄──┼───┐   ┌───────────────────┐
///  - Access patterns    │    └─────┘   │   │   │  - RecoQuery      │
///                       │              │   │   │  - DiscoveryQuery │
///                       └──────────────┘   └───┤  - ContextQuery   │
///                       - Query holding        │                   │
///                       - Vector storage       └───────────────────┘
///                                              - Scoring logic
///                                              - Complex queries
///
///