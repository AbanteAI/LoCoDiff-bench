--- qdrant_lib_segment_src_vector_storage_raw_scorer.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_raw_scorer.rs_extracted.txt (actual)@@ -13,7 +13,9 @@ use super::query_scorer::custom_query_scorer::CustomQueryScorer;
 use super::query_scorer::multi_custom_query_scorer::MultiCustomQueryScorer;
 use super::query_scorer::sparse_custom_query_scorer::SparseCustomQueryScorer;
-use super::{DenseVectorStorage, MultiVectorStorage, SparseVectorStorage, VectorStorageEnum};
+use super::{
+    DenseVectorStorage, MultiVectorStorage, SparseVectorStorage, VectorStorageEnum,
+};
 use crate::common::operation_error::{
     CancellableResult, OperationError, OperationResult, check_process_stopped,
 };
@@ -25,9 +27,9 @@ use crate::spaces::simple::{CosineMetric, DotProductMetric, EuclidMetric, ManhattanMetric};
 use crate::types::Distance;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::query_scorer::QueryScorer;
 use crate::vector_storage::query_scorer::metric_query_scorer::MetricQueryScorer;
 use crate::vector_storage::query_scorer::multi_metric_query_scorer::MultiMetricQueryScorer;
+use crate::vector_storage::query_scorer::QueryScorer;
 
 /// RawScorer composition:
 ///
@@ -35,8 +37,9 @@ ///                                              Metric
 ///                                             ┌───────────────────┐
 ///                                             │  - Cosine         │
-///   RawScorer            QueryScorer          │  - Dot            │
-///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Euclidean      │
+///                                             │  - Dot            │
+///   RawScorer            QueryScorer          │  - Euclidean      │
+///  ┌────────────────┐   ┌──────────────┐  ┌───┤  - Manhattan      │
 ///  │                │   │              │  │   │                   │
 ///  │       ┌─────┐  │   │    ┌─────┐   │  │   └───────────────────┘
 ///  │       │     │◄─┼───┤    │     │◄──┼──┘   - Vector Distance
@@ -140,7 +143,7 @@                     match scorer_result {
                         Ok(raw_scorer) => return Ok(raw_scorer),
                         Err(err) => log::error!("failed to initialize async raw scorer: {err}"),
-                    };
+                    }
                 }
 
                 #[cfg(not(target_os = "linux"))]
