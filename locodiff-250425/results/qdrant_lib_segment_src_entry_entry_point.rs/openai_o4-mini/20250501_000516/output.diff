
index 1a1fc9ae..90254be3 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmph4di7_xy_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmppu0zrort_actual.txt	
@@ -46,15 +46,6 @@ pub trait SegmentEntry: SnapshotEntry {
         query_context: &SegmentQueryContext,
     ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
 
-    /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
-    fn rescore_with_formula(
-        &self,
-        formula_ctx: Arc<FormulaContext>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Vec<ScoredPoint>>;
-
     fn upsert_point(
         &mut self,
         op_num: SeqNumberType,
@@ -83,6 +74,7 @@ pub trait SegmentEntry: SnapshotEntry {
         op_num: SeqNumberType,
         point_id: PointIdType,
         vector_name: &VectorName,
+        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
     fn set_payload(
@@ -173,16 +165,12 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> Vec<PointIdType>;
 
-    /// Read points in [from; to) range
-    fn read_range(&self, from: Option<PointIdType>, to: Option<PointIdType>) -> Vec<PointIdType>;
-
     /// Return all unique values for the given key.
     fn unique_values(
         &self,
         key: &JsonPath,
         filter: Option<&Filter>,
         is_stopped: &AtomicBool,
-        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<BTreeSet<FacetValue>>;
 
     /// Return the largest counts for the given facet request.
@@ -225,7 +213,10 @@ pub trait SegmentEntry: SnapshotEntry {
     fn deleted_point_count(&self) -> usize;
 
     /// Size of all available vectors in storage
-    fn available_vectors_size_in_bytes(&self, vector_name: &VectorName) -> OperationResult<usize>;
+    fn available_vectors_size_in_bytes(
+        &self,
+        vector_name: &VectorNameBuf,
+    ) -> OperationResult<usize>;
 
     /// Max value from all `available_vectors_size_in_bytes`
     fn max_available_vectors_size_in_bytes(&self) -> OperationResult<usize> {
@@ -236,9 +227,6 @@ pub trait SegmentEntry: SnapshotEntry {
             .map(|sizes| sizes.into_iter().max().unwrap_or_default())
     }
 
-    /// Get segment type
-    fn segment_type(&self) -> SegmentType;
-
     /// Get current stats of the segment
     fn info(&self) -> SegmentInfo;
 
@@ -264,64 +252,16 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Path to data, owned by segment
     fn data_path(&self) -> PathBuf;
 
-    /// Delete field index, if exists
-    fn delete_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-    ) -> OperationResult<bool>;
-
-    /// Build the field index for the key and schema, if not built before.
-    fn build_field_index(
-        &self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-        field_type: Option<&PayloadFieldSchema>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Option<(PayloadFieldSchema, Vec<FieldIndex>)>>;
-
-    /// Apply a built index. Returns whether it was actually applied or not.
-    fn apply_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyType,
-        field_schema: PayloadFieldSchema,
-        field_index: Vec<FieldIndex>,
-    ) -> OperationResult<bool>;
-
-    /// Create index for a payload field, if not exists
-    fn create_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-        field_schema: Option<&PayloadFieldSchema>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<bool> {
-        let Some((schema, index)) =
-            self.build_field_index(op_num, key, field_schema, hw_counter)?
-        else {
-            return Ok(false);
-        };
-
-        self.apply_field_index(op_num, key.to_owned(), schema, index)
-    }
-
-    /// Get indexed fields
-    fn get_indexed_fields(&self) -> HashMap<PayloadKeyType, PayloadFieldSchema>;
-
-    /// Checks if segment errored during last operations
-    fn check_error(&self) -> Option<SegmentFailedState>;
-
-    /// Delete points by the given filter
-    fn delete_filtered<'a>(
-        &'a mut self,
-        op_num: SeqNumberType,
-        filter: &'a Filter,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<usize>;
-
-    // Get collected telemetry data of segment
+    /// Get collected telemetry data of segment
     fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
 
+    /// Fill query context from this segment
     fn fill_query_context(&self, query_context: &mut QueryContext);
+
+    /// Rescore results with a formula that can reference payload values.
+    fn rescore_with_formula(
+        &self,
+        formula_ctx: Arc<FormulaContext>,
+        hw_counter: &HardwareCounterCell,
+    ) -> OperationResult<Vec<ScoredPoint>>;
 }
\ No newline at end of file
