
index 1a1fc9ae..0fafaeda 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmpj4ugc318_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmppv0mwt57_actual.txt	
@@ -1,5 +1,5 @@
 use std::collections::{BTreeSet, HashMap, HashSet};
-use std::path::PathBuf;
+use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
 
@@ -10,7 +10,7 @@ use crate::common::operation_error::{OperationResult, SegmentFailedState};
 use crate::data_types::facets::{FacetParams, FacetValue};
 use crate::data_types::named_vectors::NamedVectors;
 use crate::data_types::order_by::{OrderBy, OrderValue};
-use crate::data_types::query_context::{FormulaContext, QueryContext, SegmentQueryContext};
+use crate::data_types::query_context::{QueryContext, SegmentQueryContext};
 use crate::data_types::vectors::{QueryVector, VectorInternal};
 use crate::entry::snapshot_entry::SnapshotEntry;
 use crate::index::field_index::{CardinalityEstimation, FieldIndex};
@@ -18,8 +18,8 @@ use crate::json_path::JsonPath;
 use crate::telemetry::SegmentTelemetry;
 use crate::types::{
     Filter, Payload, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef, PointIdType,
-    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType, VectorName,
-    VectorNameBuf, WithPayload, WithVector,
+    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType,
+    SnapshotFormat, VectorName, VectorNameBuf, WithPayload, WithVector,
 };
 
 /// Define all operations which can be performed with Segment or Segment-like entity.
@@ -46,15 +46,6 @@ pub trait SegmentEntry: SnapshotEntry {
         query_context: &SegmentQueryContext,
     ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
 
-    /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
-    fn rescore_with_formula(
-        &self,
-        formula_ctx: Arc<FormulaContext>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Vec<ScoredPoint>>;
-
     fn upsert_point(
         &mut self,
         op_num: SeqNumberType,
@@ -239,6 +230,9 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Get segment type
     fn segment_type(&self) -> SegmentType;
 
+    /// Get segment configuration
+    fn config(&self) -> &SegmentConfig;
+
     /// Get current stats of the segment
     fn info(&self) -> SegmentInfo;
 
@@ -246,12 +240,6 @@ pub trait SegmentEntry: SnapshotEntry {
     /// This returns `SegmentInfo` with some non size-related data (like `schema`) unset to improve performance.
     fn size_info(&self) -> SegmentInfo;
 
-    /// Get segment configuration
-    fn config(&self) -> &SegmentConfig;
-
-    /// Get current stats of the segment
-    fn is_appendable(&self) -> bool;
-
     /// Flushes current segment state into a persistent storage, if possible
     /// if sync == true, block current thread while flushing
     ///
@@ -261,15 +249,8 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Removes all persisted data and forces to destroy segment
     fn drop_data(self) -> OperationResult<()>;
 
-    /// Path to data, owned by segment
-    fn data_path(&self) -> PathBuf;
-
-    /// Delete field index, if exists
-    fn delete_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-    ) -> OperationResult<bool>;
+    /// Path to data or snapshot, owned by segment
+    fn path(&self) -> PathBuf;
 
     /// Build the field index for the key and schema, if not built before.
     fn build_field_index(
@@ -302,7 +283,6 @@ pub trait SegmentEntry: SnapshotEntry {
         else {
             return Ok(false);
         };
-
         self.apply_field_index(op_num, key.to_owned(), schema, index)
     }
 
@@ -312,16 +292,9 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Checks if segment errored during last operations
     fn check_error(&self) -> Option<SegmentFailedState>;
 
-    /// Delete points by the given filter
-    fn delete_filtered<'a>(
-        &'a mut self,
-        op_num: SeqNumberType,
-        filter: &'a Filter,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<usize>;
+    /// Fill query context with segment-specific data
+    fn fill_query_context(&self, query_context: &mut QueryContext>;
 
     // Get collected telemetry data of segment
     fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
-
-    fn fill_query_context(&self, query_context: &mut QueryContext);
 }
\ No newline at end of file
