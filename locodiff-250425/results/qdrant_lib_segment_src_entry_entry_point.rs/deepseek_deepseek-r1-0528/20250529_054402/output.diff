
index 1a1fc9aef..9d8f6be09 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmpar224y52_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmppspas4ic_actual.txt	
@@ -1,10 +1,10 @@
+use common::counter::hardware_counter::HardwareCounterCell;
+use common::tar_ext;
+use common::types::TelemetryDetail;
 use std::collections::{BTreeSet, HashMap, HashSet};
 use std::path::PathBuf;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
-
-use common::counter::hardware_counter::HardwareCounterCell;
-use common::types::TelemetryDetail;
+use std::sync::Arc;
 
 use crate::common::operation_error::{OperationResult, SegmentFailedState};
 use crate::data_types::facets::{FacetParams, FacetValue};
@@ -12,7 +12,7 @@ use crate::data_types::named_vectors::NamedVectors;
 use crate::data_types::order_by::{OrderBy, OrderValue};
 use crate::data_types::query_context::{FormulaContext, QueryContext, SegmentQueryContext};
 use crate::data_types::vectors::{QueryVector, VectorInternal};
-use crate::entry::snapshot_entry::SnapshotEntry;
+use crate::entry::partial_snapshot_entry::PartialSnapshotEntry;
 use crate::index::field_index::{CardinalityEstimation, FieldIndex};
 use crate::json_path::JsonPath;
 use crate::telemetry::SegmentTelemetry;
@@ -26,7 +26,7 @@ use crate::types::{
 ///
 /// Assume all operations are idempotent - which means that no matter how many times an operation
 /// is executed - the storage state will be the same.
-pub trait SegmentEntry: SnapshotEntry {
+pub trait SegmentEntry: PartialSnapshotEntry {
     /// Get current update version of the segment
     fn version(&self) -> SeqNumberType;
 
@@ -47,8 +47,6 @@ pub trait SegmentEntry: SnapshotEntry {
     ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
 
     /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
     fn rescore_with_formula(
         &self,
         formula_ctx: Arc<FormulaContext>,
@@ -242,10 +240,6 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Get current stats of the segment
     fn info(&self) -> SegmentInfo;
 
-    /// Get size related stats of the segment.
-    /// This returns `SegmentInfo` with some non size-related data (like `schema`) unset to improve performance.
-    fn size_info(&self) -> SegmentInfo;
-
     /// Get segment configuration
     fn config(&self) -> &SegmentConfig;
 
