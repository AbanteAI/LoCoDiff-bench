
index 1a1fc9aef..60525a39c 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmp4hyh16y1_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmpb1x6agje_actual.txt	
@@ -3,6 +3,7 @@ use std::path::PathBuf;
 use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
 
+use bitvec::slice::BitSlice;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::TelemetryDetail;
 
@@ -47,8 +48,6 @@ pub trait SegmentEntry: SnapshotEntry {
     ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
 
     /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
     fn rescore_with_formula(
         &self,
         formula_ctx: Arc<FormulaContext>,
@@ -138,7 +137,7 @@ pub trait SegmentEntry: SnapshotEntry {
 
     /// Paginate over points which satisfies filtering condition starting with `offset` id including.
     ///
-    /// Cancelled by `is_stopped` flag.
+    /// Cancelled by `is_stoppered` flag.
     fn read_filtered<'a>(
         &'a self,
         offset: Option<PointIdType>,
@@ -173,9 +172,6 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> Vec<PointIdType>;
 
-    /// Read points in [from; to) range
-    fn read_range(&self, from: Option<PointIdType>, to: Option<PointIdType>) -> Vec<PointIdType>;
-
     /// Return all unique values for the given key.
     fn unique_values(
         &self,
@@ -198,14 +194,10 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Soft deleted points are excluded.
     fn has_point(&self, point_id: PointIdType) -> bool;
 
-    /// Estimate available point count in this segment for given filter.
-    fn estimate_point_count<'a>(
-        &'a self,
-        filter: Option<&'a Filter>,
-        hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation;
-
-    fn vector_names(&self) -> HashSet<VectorNameBuf>;
+    /// Return number of vectors in this segment
+    ///
+    /// - Includes soft deleted points
+    fn points_count(&self) -> usize;
 
     /// Whether this segment is completely empty in terms of points
     ///
@@ -254,6 +246,7 @@ pub trait SegmentEntry: SnapshotEntry {
 
     /// Flushes current segment state into a persistent storage, if possible
     /// if sync == true, block current thread while flushing
+    /// if force == true, flush even if automatic flush is disabled
     ///
     /// Returns maximum version number which is guaranteed to be persisted.
     fn flush(&self, sync: bool, force: bool) -> OperationResult<SeqNumberType>;
