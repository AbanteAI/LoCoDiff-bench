
index 1a1fc9aef..1159202ad 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmph5wtvxb1_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmp349scae7_actual.txt	
@@ -264,6 +264,19 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Path to data, owned by segment
     fn data_path(&self) -> PathBuf;
 
+    /// Delete points by the given filter
+    fn delete_filtered<'a>(
+        &'a mut self,
+        op_num: SeqNumberType,
+        filter: &'a Filter,
+        hw_counter: &HardwareCounterCell,
+    ) -> OperationResult<usize>;
+
+    // Get collected telemetry data of segment
+    fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
+
+    fn fill_query_context(&self, query_context: &mut QueryContext);
+
     /// Delete field index, if exists
     fn delete_field_index(
         &mut self,
@@ -311,17 +324,4 @@ pub trait SegmentEntry: SnapshotEntry {
 
     /// Checks if segment errored during last operations
     fn check_error(&self) -> Option<SegmentFailedState>;
-
-    /// Delete points by the given filter
-    fn delete_filtered<'a>(
-        &'a mut self,
-        op_num: SeqNumberType,
-        filter: &'a Filter,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<usize>;
-
-    // Get collected telemetry data of segment
-    fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
-
-    fn fill_query_context(&self, query_context: &mut QueryContext);
 }
\ No newline at end of file
