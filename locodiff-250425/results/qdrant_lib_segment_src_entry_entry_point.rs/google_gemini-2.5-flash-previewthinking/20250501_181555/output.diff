--- qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual)@@ -1,9 +1,11 @@ use std::collections::{BTreeSet, HashMap, HashSet};
-use std::path::PathBuf;
+use std::path::{Path, PathBuf};
 use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
 
+use bitvec::slice::BitSlice;
 use common::counter::hardware_counter::HardwareCounterCell;
+use common::tar_ext;
 use common::types::TelemetryDetail;
 
 use crate::common::operation_error::{OperationResult, SegmentFailedState};
@@ -18,8 +20,8 @@ use crate::telemetry::SegmentTelemetry;
 use crate::types::{
     Filter, Payload, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef, PointIdType,
-    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType, VectorName,
-    VectorNameBuf, WithPayload, WithVector,
+    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType,
+    SnapshotFormat, VectorName, VectorNameBuf, WithPayload, WithVector,
 };
 
 /// Define all operations which can be performed with Segment or Segment-like entity.
@@ -83,6 +85,7 @@         op_num: SeqNumberType,
         point_id: PointIdType,
         vector_name: &VectorName,
+        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
     fn set_payload(
@@ -269,6 +272,7 @@         &mut self,
         op_num: SeqNumberType,
         key: PayloadKeyTypeRef,
+        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
     /// Build the field index for the key and schema, if not built before.
@@ -320,6 +324,19 @@         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<usize>;
 
+    /// Take a snapshot of the segment.
+    ///
+    /// Creates a tar archive of the segment directory into `snapshot_dir_path`.
+    /// Uses `temp_path` to prepare files to archive.
+    /// The `snapshotted_segments` set is used to avoid writing the same snapshot twice.
+    fn take_snapshot(
+        &self,
+        temp_path: &Path,
+        tar: &tar_ext::BuilderExt,
+        format: SnapshotFormat,
+        snapshotted_segments: &mut HashSet<String>,
+    ) -> OperationResult<()>;
+
     // Get collected telemetry data of segment
     fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
 
