
index 1a1fc9ae..601e6b0c 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmphez4g3iq_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmpjeyy9kqc_actual.txt	
@@ -1,7 +1,7 @@
 use std::collections::{BTreeSet, HashMap, HashSet};
 use std::path::PathBuf;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::TelemetryDetail;
@@ -24,13 +24,13 @@ use crate::types::{
 
 /// Define all operations which can be performed with Segment or Segment-like entity.
 ///
-/// Assume all operations are idempotent - which means that no matter how many times an operation
-/// is executed - the storage state will be the same.
+/// Assume all operations are idempotent â€“ no matter how many times an operation is executed,
+/// the storage state will be the same.
 pub trait SegmentEntry: SnapshotEntry {
-    /// Get current update version of the segment
+    /// Current update version of the segment.
     fn version(&self) -> SeqNumberType;
 
-    /// Get version of specified point
+    /// Version of a specific point.
     fn point_version(&self, point_id: PointIdType) -> Option<SeqNumberType>;
 
     #[allow(clippy::too_many_arguments)]
@@ -46,15 +46,14 @@ pub trait SegmentEntry: SnapshotEntry {
         query_context: &SegmentQueryContext,
     ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
 
-    /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
+    /// Rescore results with a formula.
     fn rescore_with_formula(
         &self,
         formula_ctx: Arc<FormulaContext>,
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<Vec<ScoredPoint>>;
 
+    // ---------- Update operations ----------
     fn upsert_point(
         &mut self,
         op_num: SeqNumberType,
@@ -83,6 +82,7 @@ pub trait SegmentEntry: SnapshotEntry {
         op_num: SeqNumberType,
         point_id: PointIdType,
         vector_name: &VectorName,
+        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
     fn set_payload(
@@ -117,6 +117,7 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
+    // ---------- Read operations ----------
     fn vector(
         &self,
         vector_name: &VectorName,
@@ -125,20 +126,16 @@ pub trait SegmentEntry: SnapshotEntry {
 
     fn all_vectors(&self, point_id: PointIdType) -> OperationResult<NamedVectors>;
 
-    /// Retrieve payload for the point
-    /// If not found, return empty payload
+    /// Return empty payload if not found.
     fn payload(
         &self,
         point_id: PointIdType,
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<Payload>;
 
-    /// Iterator over all points in segment in ascending order.
     fn iter_points(&self) -> Box<dyn Iterator<Item = PointIdType> + '_>;
 
-    /// Paginate over points which satisfies filtering condition starting with `offset` id including.
-    ///
-    /// Cancelled by `is_stopped` flag.
+    /// Paginate over points (cancel-able).
     fn read_filtered<'a>(
         &'a self,
         offset: Option<PointIdType>,
@@ -148,11 +145,7 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> Vec<PointIdType>;
 
-    /// Return points which satisfies filtering condition ordered by the `order_by.key` field,
-    /// starting with `order_by.start_from` value including.
-    ///
-    /// Will fail if there is no index for the order_by key.
-    /// Cancelled by `is_stopped` flag.
+    /// Ordered pagination (cancel-able).
     fn read_ordered_filtered<'a>(
         &'a self,
         limit: Option<usize>,
@@ -162,9 +155,7 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<Vec<(OrderValue, PointIdType)>>;
 
-    /// Return random points which satisfies filtering condition.
-    ///
-    /// Cancelled by `is_stopped` flag.
+    /// Random sample (cancel-able).
     fn read_random_filtered(
         &self,
         limit: usize,
@@ -173,10 +164,8 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> Vec<PointIdType>;
 
-    /// Read points in [from; to) range
     fn read_range(&self, from: Option<PointIdType>, to: Option<PointIdType>) -> Vec<PointIdType>;
 
-    /// Return all unique values for the given key.
     fn unique_values(
         &self,
         key: &JsonPath,
@@ -185,7 +174,6 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<BTreeSet<FacetValue>>;
 
-    /// Return the largest counts for the given facet request.
     fn facet(
         &self,
         request: &FacetParams,
@@ -193,12 +181,10 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<HashMap<FacetValue, usize>>;
 
-    /// Check if there is point with `point_id` in this segment.
-    ///
-    /// Soft deleted points are excluded.
+    /// Check if a *non-deleted* point exists.
     fn has_point(&self, point_id: PointIdType) -> bool;
 
-    /// Estimate available point count in this segment for given filter.
+    /// Estimate available point count.
     fn estimate_point_count<'a>(
         &'a self,
         filter: Option<&'a Filter>,
@@ -207,71 +193,45 @@ pub trait SegmentEntry: SnapshotEntry {
 
     fn vector_names(&self) -> HashSet<VectorNameBuf>;
 
-    /// Whether this segment is completely empty in terms of points
-    ///
-    /// The segment is considered to not be empty if it contains any points, even if deleted.
-    /// Deleted points still have a version which may be important at time of recovery. Deciding
-    /// this by just the reported point count is not reliable in case a proxy segment is used.
-    ///
-    /// Payload indices or type of storage are not considered here.
+    /// Whether segment is completely empty (including deleted points).
     fn is_empty(&self) -> bool;
 
-    /// Number of available points
-    ///
-    /// - excludes soft deleted points
     fn available_point_count(&self) -> usize;
-
-    /// Number of deleted points
     fn deleted_point_count(&self) -> usize;
 
-    /// Size of all available vectors in storage
-    fn available_vectors_size_in_bytes(&self, vector_name: &VectorName) -> OperationResult<usize>;
+    fn available_vectors_size_in_bytes(&self, vector_name: &VectorName)
+        -> OperationResult<usize>;
 
-    /// Max value from all `available_vectors_size_in_bytes`
     fn max_available_vectors_size_in_bytes(&self) -> OperationResult<usize> {
         self.vector_names()
             .into_iter()
-            .map(|vector_name| self.available_vectors_size_in_bytes(&vector_name))
+            .map(|name| self.available_vectors_size_in_bytes(&name))
             .collect::<OperationResult<Vec<_>>>()
             .map(|sizes| sizes.into_iter().max().unwrap_or_default())
     }
 
-    /// Get segment type
     fn segment_type(&self) -> SegmentType;
 
-    /// Get current stats of the segment
+    // ---------- Info / meta ----------
     fn info(&self) -> SegmentInfo;
 
-    /// Get size related stats of the segment.
-    /// This returns `SegmentInfo` with some non size-related data (like `schema`) unset to improve performance.
+    /// Size-only stats.
     fn size_info(&self) -> SegmentInfo;
 
-    /// Get segment configuration
     fn config(&self) -> &SegmentConfig;
 
-    /// Get current stats of the segment
-    fn is_appendable(&self) -> bool;
-
-    /// Flushes current segment state into a persistent storage, if possible
-    /// if sync == true, block current thread while flushing
-    ///
-    /// Returns maximum version number which is guaranteed to be persisted.
+    // ---------- Persistence ----------
     fn flush(&self, sync: bool, force: bool) -> OperationResult<SeqNumberType>;
-
-    /// Removes all persisted data and forces to destroy segment
     fn drop_data(self) -> OperationResult<()>;
-
-    /// Path to data, owned by segment
     fn data_path(&self) -> PathBuf;
 
-    /// Delete field index, if exists
+    // ---------- Payload index ----------
     fn delete_field_index(
         &mut self,
         op_num: SeqNumberType,
         key: PayloadKeyTypeRef,
     ) -> OperationResult<bool>;
 
-    /// Build the field index for the key and schema, if not built before.
     fn build_field_index(
         &self,
         op_num: SeqNumberType,
@@ -280,7 +240,6 @@ pub trait SegmentEntry: SnapshotEntry {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<Option<(PayloadFieldSchema, Vec<FieldIndex>)>>;
 
-    /// Apply a built index. Returns whether it was actually applied or not.
     fn apply_field_index(
         &mut self,
         op_num: SeqNumberType,
@@ -289,7 +248,6 @@ pub trait SegmentEntry: SnapshotEntry {
         field_index: Vec<FieldIndex>,
     ) -> OperationResult<bool>;
 
-    /// Create index for a payload field, if not exists
     fn create_field_index(
         &mut self,
         op_num: SeqNumberType,
@@ -297,30 +255,18 @@ pub trait SegmentEntry: SnapshotEntry {
         field_schema: Option<&PayloadFieldSchema>,
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool> {
-        let Some((schema, index)) =
+        if let Some((schema, index)) =
             self.build_field_index(op_num, key, field_schema, hw_counter)?
-        else {
-            return Ok(false);
-        };
-
-        self.apply_field_index(op_num, key.to_owned(), schema, index)
+        {
+            self.apply_field_index(op_num, key.to_owned(), schema, index)
+        } else {
+            Ok(false)
+        }
     }
 
-    /// Get indexed fields
     fn get_indexed_fields(&self) -> HashMap<PayloadKeyType, PayloadFieldSchema>;
 
-    /// Checks if segment errored during last operations
-    fn check_error(&self) -> Option<SegmentFailedState>;
-
-    /// Delete points by the given filter
-    fn delete_filtered<'a>(
-        &'a mut self,
-        op_num: SeqNumberType,
-        filter: &'a Filter,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<usize>;
-
-    // Get collected telemetry data of segment
+    // ---------- Telemetry ----------
     fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
 
     fn fill_query_context(&self, query_context: &mut QueryContext);
