
index 1a1fc9ae..f3fe8949 100644
--- a/qdrant_lib_segment_src_entry_entry_point.rs_expectedoutput.txt (expected):tmp/tmpoke4nir9_expected.txt	
+++ b/qdrant_lib_segment_src_entry_entry_point.rs_extracted.txt (actual):tmp/tmp13jtkk1v_actual.txt	
@@ -7,7 +7,6 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::TelemetryDetail;
 
 use crate::common::operation_error::{OperationResult, SegmentFailedState};
-use crate::data_types::facets::{FacetParams, FacetValue};
 use crate::data_types::named_vectors::NamedVectors;
 use crate::data_types::order_by::{OrderBy, OrderValue};
 use crate::data_types::query_context::{FormulaContext, QueryContext, SegmentQueryContext};
@@ -18,8 +17,8 @@ use crate::json_path::JsonPath;
 use crate::telemetry::SegmentTelemetry;
 use crate::types::{
     Filter, Payload, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef, PointIdType,
-    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType, VectorName,
-    VectorNameBuf, WithPayload, WithVector,
+    ScoredPoint, SearchParams, SegmentConfig, SegmentInfo, SegmentType, SeqNumberType,
+    VectorName, VectorNameBuf, WithPayload, WithVector,
 };
 
 /// Define all operations which can be performed with Segment or Segment-like entity.
@@ -33,22 +32,7 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Get version of specified point
     fn point_version(&self, point_id: PointIdType) -> Option<SeqNumberType>;
 
-    #[allow(clippy::too_many_arguments)]
-    fn search_batch(
-        &self,
-        vector_name: &VectorName,
-        query_vectors: &[&QueryVector],
-        with_payload: &WithPayload,
-        with_vector: &WithVector,
-        filter: Option<&Filter>,
-        top: usize,
-        params: Option<&SearchParams>,
-        query_context: &SegmentQueryContext,
-    ) -> OperationResult<Vec<Vec<ScoredPoint>>>;
-
     /// Rescore results with a formula that can reference payload values.
-    ///
-    /// A deleted bitslice is passed to exclude points from a wrapped segment.
     fn rescore_with_formula(
         &self,
         formula_ctx: Arc<FormulaContext>,
@@ -83,6 +67,7 @@ pub trait SegmentEntry: SnapshotEntry {
         op_num: SeqNumberType,
         point_id: PointIdType,
         vector_name: &VectorName,
+        hw_counter: &HardwareCounterCell,
     ) -> OperationResult<bool>;
 
     fn set_payload(
@@ -125,20 +110,12 @@ pub trait SegmentEntry: SnapshotEntry {
 
     fn all_vectors(&self, point_id: PointIdType) -> OperationResult<NamedVectors>;
 
-    /// Retrieve payload for the point
-    /// If not found, return empty payload
-    fn payload(
-        &self,
-        point_id: PointIdType,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Payload>;
-
     /// Iterator over all points in segment in ascending order.
     fn iter_points(&self) -> Box<dyn Iterator<Item = PointIdType> + '_>;
 
     /// Paginate over points which satisfies filtering condition starting with `offset` id including.
     ///
-    /// Cancelled by `is_stopped` flag.
+    /// Cancelled by the `is_stopped` flag.
     fn read_filtered<'a>(
         &'a self,
         offset: Option<PointIdType>,
@@ -152,7 +129,7 @@ pub trait SegmentEntry: SnapshotEntry {
     /// starting with `order_by.start_from` value including.
     ///
     /// Will fail if there is no index for the order_by key.
-    /// Cancelled by `is_stopped` flag.
+    /// Cancelled by the `is_stopped` flag.
     fn read_ordered_filtered<'a>(
         &'a self,
         limit: Option<usize>,
@@ -164,7 +141,7 @@ pub trait SegmentEntry: SnapshotEntry {
 
     /// Return random points which satisfies filtering condition.
     ///
-    /// Cancelled by `is_stopped` flag.
+    /// Cancelled by the `is_stopped` flag.
     fn read_random_filtered(
         &self,
         limit: usize,
@@ -182,16 +159,15 @@ pub trait SegmentEntry: SnapshotEntry {
         key: &JsonPath,
         filter: Option<&Filter>,
         is_stopped: &AtomicBool,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<BTreeSet<FacetValue>>;
+    ) -> OperationResult<BTreeSet<crate::data_types::facets::FacetValue>>;
 
     /// Return the largest counts for the given facet request.
     fn facet(
         &self,
-        request: &FacetParams,
+        request: &crate::data_types::facets::FacetParams,
         is_stopped: &AtomicBool,
         hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<HashMap<FacetValue, usize>>;
+    ) -> OperationResult<HashMap<crate::data_types::facets::FacetValue, usize>>;
 
     /// Check if there is point with `point_id` in this segment.
     ///
@@ -210,9 +186,7 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Whether this segment is completely empty in terms of points
     ///
     /// The segment is considered to not be empty if it contains any points, even if deleted.
-    /// Deleted points still have a version which may be important at time of recovery. Deciding
-    /// this by just the reported point count is not reliable in case a proxy segment is used.
-    ///
+    /// Deleted points still have a version which may be important at time of recovery.
     /// Payload indices or type of storage are not considered here.
     fn is_empty(&self) -> bool;
 
@@ -228,32 +202,25 @@ pub trait SegmentEntry: SnapshotEntry {
     fn available_vectors_size_in_bytes(&self, vector_name: &VectorName) -> OperationResult<usize>;
 
     /// Max value from all `available_vectors_size_in_bytes`
-    fn max_available_vectors_size_in_bytes(&self) -> OperationResult<usize> {
-        self.vector_names()
-            .into_iter()
-            .map(|vector_name| self.available_vectors_size_in_bytes(&vector_name))
-            .collect::<OperationResult<Vec<_>>>()
-            .map(|sizes| sizes.into_iter().max().unwrap_or_default())
-    }
-
-    /// Get segment type
-    fn segment_type(&self) -> SegmentType;
+    fn max_available_vectors_size_in_bytes(&self) -> OperationResult<usize>;
 
     /// Get current stats of the segment
     fn info(&self) -> SegmentInfo;
 
     /// Get size related stats of the segment.
-    /// This returns `SegmentInfo` with some non size-related data (like `schema`) unset to improve performance.
+    /// This returns `SegmentInfo` with some non size-related data (like `schema`)
+    /// unset to improve performance.
     fn size_info(&self) -> SegmentInfo;
 
     /// Get segment configuration
     fn config(&self) -> &SegmentConfig;
 
-    /// Get current stats of the segment
+    /// Defines if it is possible to dynamically add new points to this segment or not
     fn is_appendable(&self) -> bool;
 
     /// Flushes current segment state into a persistent storage, if possible
-    /// if sync == true, block current thread while flushing
+    ///
+    /// If `sync == true`, block current thread while flushing.
     ///
     /// Returns maximum version number which is guaranteed to be persisted.
     fn flush(&self, sync: bool, force: bool) -> OperationResult<SeqNumberType>;
@@ -264,64 +231,6 @@ pub trait SegmentEntry: SnapshotEntry {
     /// Path to data, owned by segment
     fn data_path(&self) -> PathBuf;
 
-    /// Delete field index, if exists
-    fn delete_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-    ) -> OperationResult<bool>;
-
-    /// Build the field index for the key and schema, if not built before.
-    fn build_field_index(
-        &self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-        field_type: Option<&PayloadFieldSchema>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Option<(PayloadFieldSchema, Vec<FieldIndex>)>>;
-
-    /// Apply a built index. Returns whether it was actually applied or not.
-    fn apply_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyType,
-        field_schema: PayloadFieldSchema,
-        field_index: Vec<FieldIndex>,
-    ) -> OperationResult<bool>;
-
-    /// Create index for a payload field, if not exists
-    fn create_field_index(
-        &mut self,
-        op_num: SeqNumberType,
-        key: PayloadKeyTypeRef,
-        field_schema: Option<&PayloadFieldSchema>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<bool> {
-        let Some((schema, index)) =
-            self.build_field_index(op_num, key, field_schema, hw_counter)?
-        else {
-            return Ok(false);
-        };
-
-        self.apply_field_index(op_num, key.to_owned(), schema, index)
-    }
-
-    /// Get indexed fields
-    fn get_indexed_fields(&self) -> HashMap<PayloadKeyType, PayloadFieldSchema>;
-
-    /// Checks if segment errored during last operations
-    fn check_error(&self) -> Option<SegmentFailedState>;
-
-    /// Delete points by the given filter
-    fn delete_filtered<'a>(
-        &'a mut self,
-        op_num: SeqNumberType,
-        filter: &'a Filter,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<usize>;
-
-    // Get collected telemetry data of segment
+    /// Get collected telemetry data of segment
     fn get_telemetry_data(&self, detail: TelemetryDetail) -> SegmentTelemetry;
-
-    fn fill_query_context(&self, query_context: &mut QueryContext);
 }
\ No newline at end of file
