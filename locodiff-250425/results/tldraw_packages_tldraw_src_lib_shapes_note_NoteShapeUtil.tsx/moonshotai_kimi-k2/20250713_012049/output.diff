
index 37af12e07..25d3c47d6 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpp9v80q5v_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_extracted.txt (actual):tmp/tmpym8pktz9_actual.txt	
@@ -1,9 +1,6 @@
-/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	Box,
 	Editor,
-	Group2d,
-	IndexKey,
 	Rectangle2d,
 	ShapeUtil,
 	SvgExportContext,
@@ -40,9 +37,7 @@ import {
 	LABEL_PADDING,
 	TEXT_PROPS,
 } from '../shared/default-shape-constants'
-
 import { startEditingShapeWithLabel } from '../../tools/SelectTool/selectHelpers'
-
 import isEqual from 'lodash.isequal'
 import {
 	isEmptyRichText,
@@ -169,7 +164,7 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			return [
 				{
 					id: 'bottom',
-					index: 'a3' as IndexKey,
+					index: 'a3' as const,
 					type: 'clone',
 					x: nw / 2,
 					y: nh + offset,
@@ -180,28 +175,28 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		return [
 			{
 				id: 'top',
-				index: 'a1' as IndexKey,
+				index: 'a1' as const,
 				type: 'clone',
 				x: nw / 2,
 				y: -offset,
 			},
 			{
 				id: 'right',
-				index: 'a2' as IndexKey,
+				index: 'a2' as const,
 				type: 'clone',
 				x: nw + offset,
 				y: nh / 2,
 			},
 			{
 				id: 'bottom',
-				index: 'a3' as IndexKey,
+				index: 'a3' as const,
 				type: 'clone',
 				x: nw / 2,
 				y: nh + offset,
 			},
 			{
 				id: 'left',
-				index: 'a4' as IndexKey,
+				index: 'a4' as const,
 				type: 'clone',
 				x: -offset,
 				y: nh / 2,
@@ -254,7 +249,6 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		} = shape
 
 		const handleKeyDown = useNoteKeydownHandler(id)
-
 		const theme = useDefaultColorTheme()
 		const nw = NOTE_SIZE * scale
 		const nh = getNoteHeight(shape)
@@ -265,14 +259,17 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			[this.editor]
 		)
 
-		// todo: consider hiding shadows on dark mode if they're invisible anyway
-
-		const hideShadows = useValue('zoom', () => this.editor.getZoomLevel() < 0.35 / scale, [
-			scale,
-			this.editor,
-		])
+		const hideShadows = useValue(
+			'zoom',
+			() => this.editor.getZoomLevel() < 0.35 / scale,
+			[scale, this.editor]
+		)
 
-		const isDarkMode = useValue('dark mode', () => this.editor.user.getIsDarkMode(), [this.editor])
+		const isDarkMode = useValue(
+			'dark mode',
+			() => this.editor.user.getIsDarkMode(),
+			[this.editor]
+		)
 
 		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
 
@@ -282,7 +279,6 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		return (
 			<>
 				<div
-					id={id}
 					className="tl-note__container"
 					style={{
 						width: nw,
@@ -524,11 +520,16 @@ function useNoteKeydownHandler(id: TLShapeId) {
 					.rot(pageRotation)
 					.add(pageTransform.point())
 
-				const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation)
+				const newNote = getNoteShapeForAdjacentPosition(
+					editor,
+					shape,
+					adjacentCenter,
+					pageRotation
+				)
 
 				if (newNote) {
 					editor.markHistoryStoppingPoint('editing adjacent shape')
-					startEditingShapeWithLabel(editor, newNote, true /* selectAll */)
+					startEditingShapeWithLabel(editor, newNote, true)
 				}
 			}
 		},
@@ -549,8 +550,14 @@ function getNoteShadow(id: string, rotation: number, scale: number) {
 	const c = 6 * scale
 	const d = 7 * scale
 	return `0px ${a - lift}px ${a}px -${a}px rgba(15, 23, 31, .6),
-	0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(0.3 + lift * 0.1).toFixed(2)}), 
-	0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${((0.022 + random() * 0.005) * ((1 + oy) / 2)).toFixed(2)})`
+	0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(
+		0.3 +
+		lift * 0.1
+	).toFixed(2)}), 
+	0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${(
+		(0.022 + random() * 0.005) *
+		((1 + oy) / 2)
+	).toFixed(2)})`
 }
 
 function getBoundsForSVG(shape: TLNoteShape) {
