
index 37af12e0..829667f1 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp2qoo66xr_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_extracted.txt (actual):tmp/tmphaeqyhqj_actual.txt	
@@ -11,7 +11,6 @@ import {
 	TLHandle,
 	TLNoteShape,
 	TLNoteShapeProps,
-	TLResizeInfo,
 	TLShape,
 	TLShapeId,
 	Vec,
@@ -40,14 +39,12 @@ import {
 	LABEL_PADDING,
 	TEXT_PROPS,
 } from '../shared/default-shape-constants'
-
 import { startEditingShapeWithLabel } from '../../tools/SelectTool/selectHelpers'
-
 import isEqual from 'lodash.isequal'
 import {
-	isEmptyRichText,
 	renderHtmlFromRichTextForMeasurement,
 	renderPlaintextFromRichText,
+	isEmptyRichText,
 } from '../../utils/text/richText'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { useIsReadyForEditing } from '../shared/useEditablePlainText'
@@ -80,6 +77,7 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 	override canEdit() {
 		return true
 	}
+
 	override hideResizeHandles() {
 		const { resizeMode } = this.options
 		switch (resizeMode) {
@@ -114,12 +112,12 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			labelColor: 'black',
 			growY: 0,
 			fontSizeAdjustment: 0,
-			url: '',
 			scale: 1,
+			url: '',
 		}
 	}
 
-	getGeometry(shape: TLNoteShape) {
+	override getGeometry(shape: TLNoteShape) {
 		const { labelHeight, labelWidth } = getLabelSize(this.editor, shape)
 		const { scale } = shape.props
 
@@ -136,14 +134,14 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 						shape.props.align === 'start'
 							? 0
 							: shape.props.align === 'end'
-								? nw - lw
-								: (nw - lw) / 2,
+							? nw - lw
+							: (nw - lw) / 2,
 					y:
 						shape.props.verticalAlign === 'start'
 							? 0
 							: shape.props.verticalAlign === 'end'
-								? nh - lh
-								: (nh - lh) / 2,
+							? nh - lh
+							: (nh - lh) / 2,
 					width: lw,
 					height: lh,
 					isFilled: true,
@@ -153,7 +151,7 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		})
 	}
 
-	override getHandles(shape: TLNoteShape): TLHandle[] {
+	override getHandles(shape: TLNoteShape) {
 		const { scale } = shape.props
 		const isCoarsePointer = this.editor.getInstanceState().isCoarsePointer
 		if (isCoarsePointer) return []
@@ -209,26 +207,11 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		]
 	}
 
-	override onResize(shape: any, info: TLResizeInfo<any>) {
-		const { resizeMode } = this.options
-		switch (resizeMode) {
-			case 'none': {
-				return undefined
-			}
-			case 'scale': {
-				return resizeScaled(shape, info)
-			}
-			default: {
-				throw exhaustiveSwitchError(resizeMode)
-			}
-		}
-	}
-
 	override getText(shape: TLNoteShape) {
 		return renderPlaintextFromRichText(this.editor, shape.props.richText)
 	}
 
-	override getFontFaces(shape: TLNoteShape): TLFontFace[] {
+	override getFontFaces(shape: TLNoteShape) {
 		return getFontsFromRichText(this.editor, shape.props.richText, {
 			family: `tldraw_${shape.props.font}`,
 			weight: 'normal',
@@ -254,7 +237,6 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		} = shape
 
 		const handleKeyDown = useNoteKeydownHandler(id)
-
 		const theme = useDefaultColorTheme()
 		const nw = NOTE_SIZE * scale
 		const nh = getNoteHeight(shape)
@@ -265,17 +247,19 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			[this.editor]
 		)
 
-		// todo: consider hiding shadows on dark mode if they're invisible anyway
-
-		const hideShadows = useValue('zoom', () => this.editor.getZoomLevel() < 0.35 / scale, [
-			scale,
-			this.editor,
-		])
+		const hideShadows = useValue(
+			'zoom',
+			() => this.editor.getZoomLevel() < 0.35 / scale,
+			[scale, this.editor]
+		)
 
-		const isDarkMode = useValue('dark mode', () => this.editor.user.getIsDarkMode(), [this.editor])
+		const isDarkMode = useValue(
+			'dark mode',
+			() => this.editor.user.getIsDarkMode(),
+			[this.editor]
+		)
 
 		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
-
 		const isReadyForEditing = useIsReadyForEditing(this.editor, shape.id)
 		const isEmpty = isEmptyRichText(richText)
 
@@ -307,7 +291,9 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 							verticalAlign={verticalAlign}
 							richText={richText}
 							isSelected={isSelected}
-							labelColor={labelColor === 'black' ? theme[color].note.text : theme[labelColor].fill}
+							labelColor={
+								labelColor === 'black' ? theme[color].note.text : theme[labelColor].fill
+							}
 							wrap
 							padding={LABEL_PADDING * scale}
 							hasCustomTabBehavior
@@ -351,12 +337,7 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		return (
 			<>
 				<rect x={5} y={5} rx={1} width={NOTE_SIZE - 10} height={bounds.h} fill="rgba(0,0,0,.1)" />
-				<rect
-					rx={1}
-					width={NOTE_SIZE}
-					height={bounds.h}
-					fill={theme[shape.props.color].note.fill}
-				/>
+				<rect rx={1} width={NOTE_SIZE} height={bounds.h} fill={theme[shape.props.color].note.fill} />
 				{textLabel}
 			</>
 		)
@@ -374,7 +355,6 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		) {
 			return
 		}
-
 		return getNoteSizeAdjustments(this.editor, next)
 	}
 
@@ -388,17 +368,31 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
+
+	override onResize(shape: any, info: TLResizeInfo<any>) {
+		const { resizeMode } = this.options
+		switch (resizeMode) {
+			case 'none': {
+				return undefined
+			}
+			case 'scale': {
+				return resizeScaled(shape, info)
+			}
+			default: {
+				throw exhaustiveSwitchError(resizeMode)
+			}
+		}
+	}
 }
 
-/**
- * Get the growY and fontSizeAdjustment for a shape.
- */
 function getNoteSizeAdjustments(editor: Editor, shape: TLNoteShape) {
 	const { labelHeight, fontSizeAdjustment } = getLabelSize(editor, shape)
-	// When the label height is more than the height of the shape, we add extra height to it
 	const growY = Math.max(0, labelHeight - NOTE_SIZE)
 
-	if (growY !== shape.props.growY || fontSizeAdjustment !== shape.props.fontSizeAdjustment) {
+	if (
+		growY !== shape.props.growY ||
+		fontSizeAdjustment !== shape.props.fontSizeAdjustment
+	) {
 		return {
 			...shape,
 			props: {
@@ -410,9 +404,6 @@ function getNoteSizeAdjustments(editor: Editor, shape: TLNoteShape) {
 	}
 }
 
-/**
- * Get the label size for a note.
- */
 function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 	const { richText } = shape.props
 
@@ -428,12 +419,6 @@ function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 	let labelHeight = NOTE_SIZE
 	let labelWidth = NOTE_SIZE
 
-	// N.B. For some note shapes with text like 'hjhjhjhjhjhjhjhj', you'll run into
-	// some text measurement fuzziness where the browser swears there's no overflow (scrollWidth === width)
-	// but really there is when you enable overflow-wrap again. This helps account for that little bit
-	// of give.
-	const FUZZ = 1
-
 	// We slightly make the font smaller if the text is too big for the note, width-wise.
 	do {
 		fontSizeAdjustment = Math.min(unadjustedFontSize, unadjustedFontSize - iterations)
@@ -442,7 +427,7 @@ function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 			...TEXT_PROPS,
 			fontFamily: FONT_FAMILIES[shape.props.font],
 			fontSize: fontSizeAdjustment,
-			maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ,
+			maxWidth: NOTE_SIZE - LABEL_PADDING * 2,
 			disableOverflowWrapBreaking: true,
 		})
 
@@ -450,14 +435,12 @@ function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 		labelWidth = nextTextSize.w + LABEL_PADDING * 2
 
 		if (fontSizeAdjustment <= 14) {
-			// Too small, just rely now on CSS `overflow-wrap: break-word`
-			// We need to recalculate the text measurement here with break-word enabled.
-			const html = renderHtmlFromRichTextForMeasurement(editor, richText)
-			const nextTextSizeWithOverflowBreak = editor.textMeasure.measureHtml(html, {
+			const html2 = renderHtmlFromRichTextForMeasurement(editor, richText)
+			const nextTextSizeWithOverflowBreak = editor.textMeasure.measureHtml(html2, {
 				...TEXT_PROPS,
 				fontFamily: FONT_FAMILIES[shape.props.font],
 				fontSize: fontSizeAdjustment,
-				maxWidth: NOTE_SIZE - LABEL_PADDING * 2 - FUZZ,
+				maxWidth: NOTE_SIZE - LABEL_PADDING * 2,
 			})
 			labelHeight = nextTextSizeWithOverflowBreak.h + LABEL_PADDING * 2
 			labelWidth = nextTextSizeWithOverflowBreak.w + LABEL_PADDING * 2
@@ -470,9 +453,9 @@ function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 	} while (iterations++ < 50)
 
 	return {
-		labelHeight: labelHeight,
-		labelWidth: labelWidth,
-		fontSizeAdjustment: fontSizeAdjustment,
+		labelHeight,
+		labelWidth,
+		fontSizeAdjustment,
 	}
 }
 
@@ -499,19 +482,13 @@ function useNoteKeydownHandler(id: TLShapeId) {
 				const pageTransform = editor.getShapePageTransform(id)
 				const pageRotation = pageTransform.rotation()
 
-				// Based on the inputs, calculate the offset to the next note
-				// tab controls x axis (shift inverts direction set by RTL)
-				// cmd enter is the y axis (shift inverts direction)
-				const isRTL = !!(
+				const isRTL =
 					translation.dir === 'rtl' ||
-					// todo: can we check a partial of the text, so that we don't have to render the whole thing?
 					isRightToLeftLanguage(renderPlaintextFromRichText(editor, shape.props.richText))
-				)
 
 				const offsetLength =
 					(NOTE_SIZE +
 						editor.options.adjacentShapeMargin +
-						// If we're growing down, we need to account for the current shape's growY
 						(isCmdEnter && !e.shiftKey ? shape.props.growY : 0)) *
 					shape.props.scale
 
@@ -524,7 +501,12 @@ function useNoteKeydownHandler(id: TLShapeId) {
 					.rot(pageRotation)
 					.add(pageTransform.point())
 
-				const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation)
+				const newNote = getNoteShapeForAdjacentPosition(
+					editor,
+					shape,
+					adjacentCenter,
+					pageRotation
+				)
 
 				if (newNote) {
 					editor.markHistoryStoppingPoint('editing adjacent shape')
@@ -549,11 +531,13 @@ function getNoteShadow(id: string, rotation: number, scale: number) {
 	const c = 6 * scale
 	const d = 7 * scale
 	return `0px ${a - lift}px ${a}px -${a}px rgba(15, 23, 31, .6),
-	0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(0.3 + lift * 0.1).toFixed(2)}), 
-	0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${((0.022 + random() * 0.005) * ((1 + oy) / 2)).toFixed(2)})`
+	0px ${(b + lift * d) * Math.max(0, oy)}px ${c + lift * d}px -${b + lift * c}px rgba(15, 23, 31, ${(0.3 +
+		lift * 0.1).toFixed(2)}), 
+	0px ${48 * scale}px ${10 * scale}px -${10 * scale}px inset rgba(15, 23, 44, ${(
+		(0.022 + random() * 0.005) * ((1 + oy) / 2)
+	).toFixed(2)})`
 }
 
 function getBoundsForSVG(shape: TLNoteShape) {
-	// When rendering the SVG we don't want to adjust for scale
 	return new Box(0, 0, NOTE_SIZE, NOTE_SIZE + shape.props.growY)
 }
\ No newline at end of file
