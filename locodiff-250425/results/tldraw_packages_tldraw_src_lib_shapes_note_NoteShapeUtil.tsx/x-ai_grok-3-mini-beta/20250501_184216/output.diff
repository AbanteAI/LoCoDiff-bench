
index 37af12e0..2965175f 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmph8ehw6xb_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_note_NoteShapeUtil.tsx_extracted.txt (actual):tmp/tmpmuzy7sb1_actual.txt	
@@ -1,4 +1,3 @@
-/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	Box,
 	Editor,
@@ -41,8 +40,6 @@ import {
 	TEXT_PROPS,
 } from '../shared/default-shape-constants'
 
-import { startEditingShapeWithLabel } from '../../tools/SelectTool/selectHelpers'
-
 import isEqual from 'lodash.isequal'
 import {
 	isEmptyRichText,
@@ -136,14 +133,14 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 						shape.props.align === 'start'
 							? 0
 							: shape.props.align === 'end'
-								? nw - lw
-								: (nw - lw) / 2,
+							? nw - lw
+							: (nw - lw) / 2,
 					y:
 						shape.props.verticalAlign === 'start'
 							? 0
 							: shape.props.verticalAlign === 'end'
-								? nh - lh
-								: (nh - lh) / 2,
+							? nh - lh
+							: (nh - lh) / 2,
 					width: lw,
 					height: lh,
 					isFilled: true,
@@ -265,24 +262,18 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			[this.editor]
 		)
 
-		// todo: consider hiding shadows on dark mode if they're invisible anyway
-
-		const hideShadows = useValue('zoom', () => this.editor.getZoomLevel() < 0.35 / scale, [
-			scale,
+		const isDarkMode = useValue('dark mode', () => this.editor.user.getIsDarkMode(), [
 			this.editor,
 		])
 
-		const isDarkMode = useValue('dark mode', () => this.editor.user.getIsDarkMode(), [this.editor])
-
-		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
-
 		const isReadyForEditing = useIsReadyForEditing(this.editor, shape.id)
 		const isEmpty = isEmptyRichText(richText)
+		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
 
 		return (
 			<>
 				<div
-					id={id}
+					data-shape-id={id}
 					className="tl-note__container"
 					style={{
 						width: nw,
@@ -374,10 +365,28 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 		) {
 			return
 		}
-
 		return getNoteSizeAdjustments(this.editor, next)
 	}
 
+	override onEditEnd(shape: TLNoteShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
+		}
+	}
 	override getInterpolatedProps(
 		startShape: TLNoteShape,
 		endShape: TLNoteShape,
@@ -388,11 +397,25 @@ export class NoteShapeUtil extends ShapeUtil<TLNoteShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
+
+	/** @internal */
+	static override defaultProps: TLNoteShape['props'] = {
+		color: 'black',
+		richText: toRichText(''),
+		size: 'm',
+		font: 'draw',
+		align: 'middle',
+		verticalAlign: 'middle',
+		labelColor: 'black',
+		growY: 0,
+		fontSizeAdjustment: 0,
+		url: '',
+		scale: 1,
+	}
 }
 
-/**
- * Get the growY and fontSizeAdjustment for a shape.
- */
+const labelSizesForNote = new WeakCache<TLShape, ReturnType<typeof getNoteLabelSize>>()
+
 function getNoteSizeAdjustments(editor: Editor, shape: TLNoteShape) {
 	const { labelHeight, fontSizeAdjustment } = getLabelSize(editor, shape)
 	// When the label height is more than the height of the shape, we add extra height to it
@@ -470,14 +493,12 @@ function getNoteLabelSize(editor: Editor, shape: TLNoteShape) {
 	} while (iterations++ < 50)
 
 	return {
-		labelHeight: labelHeight,
-		labelWidth: labelWidth,
-		fontSizeAdjustment: fontSizeAdjustment,
+		labelHeight,
+		labelWidth,
+		fontSizeAdjustment,
 	}
 }
 
-const labelSizesForNote = new WeakCache<TLShape, ReturnType<typeof getNoteLabelSize>>()
-
 function getLabelSize(editor: Editor, shape: TLNoteShape) {
 	return labelSizesForNote.get(shape, () => getNoteLabelSize(editor, shape))
 }
@@ -524,7 +545,12 @@ function useNoteKeydownHandler(id: TLShapeId) {
 					.rot(pageRotation)
 					.add(pageTransform.point())
 
-				const newNote = getNoteShapeForAdjacentPosition(editor, shape, adjacentCenter, pageRotation)
+				const newNote = getNoteShapeForAdjacentPosition(
+					editor,
+					shape,
+					adjacentCenter,
+					pageRotation
+				)
 
 				if (newNote) {
 					editor.markHistoryStoppingPoint('editing adjacent shape')
