--- aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected)+++ aider_aider_coders_editblock_coder.py_extracted.txt (actual)@@ -84,7 +84,6 @@         res = f"# {len(failed)} SEARCH/REPLACE {blocks} failed to match!\n"
         for edit in failed:
             path, original, updated = edit
-
             full_path = self.abs_root_path(path)
             content = self.io.read_text(full_path)
 
@@ -181,10 +180,6 @@         pass
 
     return
-    # Try fuzzy matching
-    res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)
-    if res:
-        return res
 
 
 def try_dotdotdots(whole, part, replace):
@@ -254,6 +249,11 @@         num_leading = min(leading)
         part_lines = [p[num_leading:] if p.strip() else p for p in part_lines]
         replace_lines = [p[num_leading:] if p.strip() else p for p in replace_lines]
+
+    # TODO: this logic needs to be fixed
+    # if the max outdent still leaves space
+    if all((not pline or pline[0].isspace()) for pline in part_lines):
+        return
 
     # can we find an exact match not including the leading whitespace
     num_part_lines = len(part_lines)
@@ -448,20 +448,20 @@     while i < len(lines):
         line = lines[i]
 
-        # Check for shell code blocks
+        # Check for various shell code blocks
         shell_starts = [
             "```bash",
             "```sh",
-            "```shell",
+            "```shell",  # Unix-like shells
             "```cmd",
-            "```batch",
+            "```batch",  # Windows Command Prompt
             "```powershell",
-            "```ps1",
-            "```zsh",
-            "```fish",
-            "```ksh",
+            "```ps1",  # Windows PowerShell
+            "```zsh",  # Z shell
+            "```fish",  # Friendly Interactive Shell
+            "```ksh",  # Korn Shell
             "```csh",
-            "```tcsh",
+            "```tcsh",  # C Shell and TENEX C Shell
         ]
 
         # Check if the next line or the one after that is an editblock
