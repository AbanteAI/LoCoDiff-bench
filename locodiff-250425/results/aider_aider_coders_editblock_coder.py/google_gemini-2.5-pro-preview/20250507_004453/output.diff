
index 42fc8b44..aa71d662 100644
--- a/aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected):tmp/tmpmzr_u31j_expected.txt	
+++ b/aider_aider_coders_editblock_coder.py_extracted.txt (actual):tmp/tmp3rq5file_actual.txt	
@@ -131,6 +131,17 @@ def prep(content):
     return content, lines
 
 
+def perfect_replace(whole_lines, part_lines, replace_lines):
+    part_tup = tuple(part_lines)
+    part_len = len(part_lines)
+
+    for i in range(len(whole_lines) - part_len + 1):
+        whole_tup = tuple(whole_lines[i : i + part_len])
+        if part_tup == whole_tup:
+            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]
+            return "".join(res)
+
+
 def perfect_or_whitespace(whole_lines, part_lines, replace_lines):
     # Try for a perfect match
     res = perfect_replace(whole_lines, part_lines, replace_lines)
@@ -143,17 +154,6 @@ def perfect_or_whitespace(whole_lines, part_lines, replace_lines):
         return res
 
 
-def perfect_replace(whole_lines, part_lines, replace_lines):
-    part_tup = tuple(part_lines)
-    part_len = len(part_lines)
-
-    for i in range(len(whole_lines) - part_len + 1):
-        whole_tup = tuple(whole_lines[i : i + part_len])
-        if part_tup == whole_tup:
-            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]
-            return "".join(res)
-
-
 def replace_most_similar_chunk(whole, part, replace):
     """Best efforts to find the `part` lines in `whole` and replace them with `replace`"""
 
@@ -255,6 +255,11 @@ def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replac
         part_lines = [p[num_leading:] if p.strip() else p for p in part_lines]
         replace_lines = [p[num_leading:] if p.strip() else p for p in replace_lines]
 
+    # TODO: this logic needs to be fixed
+    # if the max outdent still leaves space
+    if all((not pline or pline[0].isspace()) for pline in part_lines):
+        return
+
     # can we find an exact match not including the leading whitespace
     num_part_lines = len(part_lines)
 
@@ -448,20 +453,20 @@ def find_original_update_blocks(content, fence=DEFAULT_FENCE, valid_fnames=None)
     while i < len(lines):
         line = lines[i]
 
-        # Check for shell code blocks
+        # Check for various shell code blocks
         shell_starts = [
             "```bash",
             "```sh",
-            "```shell",
+            "```shell",  # Unix-like shells
             "```cmd",
-            "```batch",
+            "```batch",  # Windows Command Prompt
             "```powershell",
-            "```ps1",
-            "```zsh",
-            "```fish",
-            "```ksh",
+            "```ps1",  # Windows PowerShell
+            "```zsh",  # Z shell
+            "```fish",  # Friendly Interactive Shell
+            "```ksh",  # Korn Shell
             "```csh",
-            "```tcsh",
+            "```tcsh",  # C Shell and TENEX C Shell
         ]
 
         # Check if the next line or the one after that is an editblock
@@ -605,6 +610,7 @@ def find_similar_lines(search_lines, content_lines, threshold=0.6):
 
     best_ratio = 0
     best_match = None
+    best_match_i = -1
 
     for i in range(len(content_lines) - len(search_lines) + 1):
         chunk = content_lines[i : i + len(search_lines)]
