
index 42fc8b445..e836b65c9 100644
--- a/aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected):tmp/tmpwbta7upz_expected.txt	
+++ b/aider_aider_coders_editblock_coder.py_extracted.txt (actual):tmp/tmpk5wp6j4o_actual.txt	
@@ -5,8 +5,6 @@ import sys
 from difflib import SequenceMatcher
 from pathlib import Path
 
-from aider import utils
-
 from ..dump import dump  # noqa: F401
 from .base_coder import Coder
 from .editblock_prompts import EditBlockPrompts
@@ -85,9 +83,6 @@ class EditBlockCoder(Coder):
         for edit in failed:
             path, original, updated = edit
 
-            full_path = self.abs_root_path(path)
-            content = self.io.read_text(full_path)
-
             res += f"""
 ## SearchReplaceNoExactMatch: This SEARCH block failed to exactly match lines in {path}
 <<<<<<< SEARCH
@@ -95,21 +90,12 @@ class EditBlockCoder(Coder):
 {updated}>>>>>>> REPLACE
 
 """
-            did_you_mean = find_similar_lines(original, content)
-            if did_you_mean:
-                res += f"""Did you mean to match some of these actual lines from {path}?
-
-{self.fence[0]}
-{did_you_mean}
-{self.fence[1]}
-
-"""
-
             if updated in content and updated:
                 res += f"""Are you sure you need this SEARCH/REPLACE block?
 The REPLACE lines are already in {path}!
 
 """
+
         res += (
             "The SEARCH section must exactly match an existing block of lines including all white"
             " space, comments, indentation, docstrings, etc\n"
@@ -121,6 +107,7 @@ The REPLACE lines are already in {path}!
 Don't re-send them.
 Just reply with fixed versions of the {blocks} above that failed to match.
 """
+
         raise ValueError(res)
 
 
@@ -180,7 +167,6 @@ def replace_most_similar_chunk(whole, part, replace):
     except ValueError:
         pass
 
-    return
     # Try fuzzy matching
     res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)
     if res:
@@ -329,7 +315,7 @@ def replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines):
     return modified_whole
 
 
-DEFAULT_FENCE = ("`" * 3, "`" * 3)
+DEFAULT_FENCE = ("```", "```")
 
 
 def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):
@@ -351,7 +337,7 @@ def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):
     if fname and res[0].strip().endswith(Path(fname).name):
         res = res[1:]
 
-    if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):
+    if res and res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):
         res = res[1:-1]
 
     res = "\n".join(res)
@@ -379,6 +365,8 @@ def do_replace(fname, content, before_text, after_text, fence=None):
         new_content = content + after_text
     else:
         new_content = replace_most_similar_chunk(content, before_text, after_text)
+        if not new_content:
+            return
 
     return new_content
 
@@ -407,7 +395,6 @@ triple_backticks = "`" * 3
 
 def strip_filename(filename, fence):
     filename = filename.strip()
-
     if filename == "...":
         return
 
@@ -448,7 +435,7 @@ def find_original_update_blocks(content, fence=DEFAULT_FENCE, valid_fnames=None)
     while i < len(lines):
         line = lines[i]
 
-        # Check for shell code blocks
+        # Check for various shell code blocks
         shell_starts = [
             "```bash",
             "```sh",
@@ -466,10 +453,8 @@ def find_original_update_blocks(content, fence=DEFAULT_FENCE, valid_fnames=None)
 
         # Check if the next line or the one after that is an editblock
         next_is_editblock = (
-            i + 1 < len(lines)
-            and head_pattern.match(lines[i + 1].strip())
-            or i + 2 < len(lines)
-            and head_pattern.match(lines[i + 2].strip())
+            (i + 1 < len(lines) and head_pattern.match(lines[i + 1].strip()))
+            or (i + 2 < len(lines) and head_pattern.match(lines[i + 2].strip()))
         )
 
         if any(line.strip().startswith(start) for start in shell_starts) and not next_is_editblock:
@@ -539,7 +524,6 @@ def find_filename(lines, fence, valid_fnames):
     """
     Deepseek Coder v2 has been doing this:
 
-
      ```python
     word_count.py
     ```
@@ -605,9 +589,12 @@ def find_similar_lines(search_lines, content_lines, threshold=0.6):
 
     best_ratio = 0
     best_match = None
+    best_match_i = None
+
+    num_part_lines = len(search_lines)
 
-    for i in range(len(content_lines) - len(search_lines) + 1):
-        chunk = content_lines[i : i + len(search_lines)]
+    for i in range(len(content_lines) - num_part_lines + 1):
+        chunk = content_lines[i : i + num_part_lines]
         ratio = SequenceMatcher(None, search_lines, chunk).ratio()
         if ratio > best_ratio:
             best_ratio = ratio
