
index 42fc8b445..14d51efbc 100644
--- a/aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected):tmp/tmpno8dnnhl_expected.txt	
+++ b/aider_aider_coders_editblock_coder.py_extracted.txt (actual):tmp/tmp882u_c___actual.txt	
@@ -119,7 +119,7 @@ The REPLACE lines are already in {path}!
             res += f"""
 # The other {len(passed)} SEARCH/REPLACE {pblocks} were applied successfully.
 Don't re-send them.
-Just reply with fixed versions of the {blocks} above that failed to match.
+Just reply with fixed versions of the blocks above that failed to match.
 """
         raise ValueError(res)
 
@@ -143,17 +143,6 @@ def perfect_or_whitespace(whole_lines, part_lines, replace_lines):
         return res
 
 
-def perfect_replace(whole_lines, part_lines, replace_lines):
-    part_tup = tuple(part_lines)
-    part_len = len(part_lines)
-
-    for i in range(len(whole_lines) - part_len + 1):
-        whole_tup = tuple(whole_lines[i : i + part_len])
-        if part_tup == whole_tup:
-            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]
-            return "".join(res)
-
-
 def replace_most_similar_chunk(whole, part, replace):
     """Best efforts to find the `part` lines in `whole` and replace them with `replace`"""
 
@@ -181,10 +170,6 @@ def replace_most_similar_chunk(whole, part, replace):
         pass
 
     return
-    # Try fuzzy matching
-    res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)
-    if res:
-        return res
 
 
 def try_dotdotdots(whole, part, replace):
@@ -351,8 +336,9 @@ def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):
     if fname and res[0].strip().endswith(Path(fname).name):
         res = res[1:]
 
-    if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):
-        res = res[1:-1]
+    if res and fence and len(res) >= 2:
+        if res[0].startswith(fence[0]) and res[-1].startswith(fence[1]):
+            res = res[1:-1]
 
     res = "\n".join(res)
     if res and res[-1] != "\n":
@@ -379,6 +365,8 @@ def do_replace(fname, content, before_text, after_text, fence=None):
         new_content = content + after_text
     else:
         new_content = replace_most_similar_chunk(content, before_text, after_text)
+        if not new_content:
+            return
 
     return new_content
 
@@ -395,7 +383,6 @@ separators = "|".join([HEAD, DIVIDER, UPDATED])
 
 split_re = re.compile(r"^((?:" + separators + r")[ ]*\n)", re.MULTILINE | re.DOTALL)
 
-
 missing_filename_err = (
     "Bad/missing filename. The filename must be alone on the line before the opening fence"
     " {fence[0]}"
@@ -605,6 +592,7 @@ def find_similar_lines(search_lines, content_lines, threshold=0.6):
 
     best_ratio = 0
     best_match = None
+    best_match_i = 0
 
     for i in range(len(content_lines) - len(search_lines) + 1):
         chunk = content_lines[i : i + len(search_lines)]
