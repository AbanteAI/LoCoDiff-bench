--- aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected)+++ aider_aider_coders_editblock_coder.py_extracted.txt (actual)@@ -84,10 +84,6 @@         res = f"# {len(failed)} SEARCH/REPLACE {blocks} failed to match!\n"
         for edit in failed:
             path, original, updated = edit
-
-            full_path = self.abs_root_path(path)
-            content = self.io.read_text(full_path)
-
             res += f"""
 ## SearchReplaceNoExactMatch: This SEARCH block failed to exactly match lines in {path}
 <<<<<<< SEARCH
@@ -95,16 +91,6 @@ {updated}>>>>>>> REPLACE
 
 """
-            did_you_mean = find_similar_lines(original, content)
-            if did_you_mean:
-                res += f"""Did you mean to match some of these actual lines from {path}?
-
-{self.fence[0]}
-{did_you_mean}
-{self.fence[1]}
-
-"""
-
             if updated in content and updated:
                 res += f"""Are you sure you need this SEARCH/REPLACE block?
 The REPLACE lines are already in {path}!
@@ -131,62 +117,6 @@     return content, lines
 
 
-def perfect_or_whitespace(whole_lines, part_lines, replace_lines):
-    # Try for a perfect match
-    res = perfect_replace(whole_lines, part_lines, replace_lines)
-    if res:
-        return res
-
-    # Try being flexible about leading whitespace
-    res = replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines)
-    if res:
-        return res
-
-
-def perfect_replace(whole_lines, part_lines, replace_lines):
-    part_tup = tuple(part_lines)
-    part_len = len(part_lines)
-
-    for i in range(len(whole_lines) - part_len + 1):
-        whole_tup = tuple(whole_lines[i : i + part_len])
-        if part_tup == whole_tup:
-            res = whole_lines[:i] + replace_lines + whole_lines[i + part_len :]
-            return "".join(res)
-
-
-def replace_most_similar_chunk(whole, part, replace):
-    """Best efforts to find the `part` lines in `whole` and replace them with `replace`"""
-
-    whole, whole_lines = prep(whole)
-    part, part_lines = prep(part)
-    replace, replace_lines = prep(replace)
-
-    res = perfect_or_whitespace(whole_lines, part_lines, replace_lines)
-    if res:
-        return res
-
-    # drop leading empty line, GPT sometimes adds them spuriously (issue #25)
-    if len(part_lines) > 2 and not part_lines[0].strip():
-        skip_blank_line_part_lines = part_lines[1:]
-        res = perfect_or_whitespace(whole_lines, skip_blank_line_part_lines, replace_lines)
-        if res:
-            return res
-
-    # Try to handle when it elides code with ...
-    try:
-        res = try_dotdotdots(whole, part, replace)
-        if res:
-            return res
-    except ValueError:
-        pass
-
-    return
-    # Try fuzzy matching
-    res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)
-    if res:
-        return res
-
-
 def try_dotdotdots(whole, part, replace):
     """
     See if the edit block has ... lines.
@@ -251,9 +181,23 @@     ]
 
     if leading and min(leading):
-        num_leading = min(leading)
-        part_lines = [p[num_leading:] if p.strip() else p for p in part_lines]
-        replace_lines = [p[num_leading:] if p.strip() else p for p in replace_lines]
+        leading = min(leading)
+        part_lines = [p[leading:] if p.strip() else p for p in part_lines]
+        replace_lines = [p[leading:] if p.strip() else p for p in replace_lines]
+
+    # can we find an exact match not including the leading whitespace
+
+    # Compute diff
+    diff = difflib.unified_diff(
+        before.splitlines(keepends=True),
+        after.splitlines(keepends=True),
+        fromfile="before",
+        tofile="after",
+    )
+    diff = "".join(diff)
+    dump(before)
+    dump(after)
+    dump(diff)
 
     # can we find an exact match not including the leading whitespace
     num_part_lines = len(part_lines)
@@ -329,10 +273,7 @@     return modified_whole
 
 
-DEFAULT_FENCE = ("`" * 3, "`" * 3)
-
-
-def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):
+def strip_quoted_wrapping(res, fname=None, fence=None):
     """
     Given an input string which may have extra "wrapping" around it, remove the wrapping.
     For example:
