
index 42fc8b445..921790c72 100644
--- a/aider_aider_coders_editblock_coder.py_expectedoutput.txt (expected):tmp/tmpw3s3ksgg_expected.txt	
+++ b/aider_aider_coders_editblock_coder.py_extracted.txt (actual):tmp/tmpfvz_apkk_actual.txt	
@@ -88,6 +88,7 @@ class EditBlockCoder(Coder):
             full_path = self.abs_root_path(path)
             content = self.io.read_text(full_path)
 
+            did_you_mean = find_similar_lines(original, content)
             res += f"""
 ## SearchReplaceNoExactMatch: This SEARCH block failed to exactly match lines in {path}
 <<<<<<< SEARCH
@@ -181,10 +182,6 @@ def replace_most_similar_chunk(whole, part, replace):
         pass
 
     return
-    # Try fuzzy matching
-    res = replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines)
-    if res:
-        return res
 
 
 def try_dotdotdots(whole, part, replace):
@@ -211,7 +208,9 @@ def try_dotdotdots(whole, part, replace):
         return
 
     # Compare odd strings in part_pieces and replace_pieces
-    all_dots_match = all(part_pieces[i] == replace_pieces[i] for i in range(1, len(part_pieces), 2))
+    all_dots_match = all(
+        part_pieces[i] == replace_pieces[i] for i in range(1, len(part_pieces), 2)
+    )
 
     if not all_dots_match:
         raise ValueError("Unmatched ... in SEARCH/REPLACE block")
@@ -240,7 +239,9 @@ def try_dotdotdots(whole, part, replace):
     return whole
 
 
-def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replace_lines):
+def replace_part_with_missing_leading_whitespace(
+    whole_lines, part_lines, replace_lines
+):
     # GPT often messes up leading whitespace.
     # It usually does it uniformly across the ORIG and UPD blocks.
     # Either omitting all leading whitespace, or including only some of it.
@@ -266,7 +267,9 @@ def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replac
         if add_leading is None:
             continue
 
-        replace_lines = [add_leading + rline if rline.strip() else rline for rline in replace_lines]
+        replace_lines = [
+            add_leading + rline if rline.strip() else rline for rline in replace_lines
+        ]
         whole_lines = whole_lines[:i] + replace_lines + whole_lines[i + num_part_lines :]
         return "".join(whole_lines)
 
@@ -274,6 +277,8 @@ def replace_part_with_missing_leading_whitespace(whole_lines, part_lines, replac
 
 
 def match_but_for_leading_whitespace(whole_lines, part_lines):
+    dump(whole_lines, part_lines)
+
     num = len(whole_lines)
 
     # does the non-whitespace all agree?
@@ -287,6 +292,7 @@ def match_but_for_leading_whitespace(whole_lines, part_lines):
         if whole_lines[i].strip()
     )
 
+    dump(add)
     if len(add) != 1:
         return
 
@@ -307,7 +313,8 @@ def replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines):
     for length in range(min_len, max_len):
         for i in range(len(whole_lines) - length + 1):
             chunk = whole_lines[i : i + length]
-            chunk = "".join(chunk)
+            if isinstance(chunk, list):
+                chunk = "".join(chunk)
 
             similarity = SequenceMatcher(None, chunk, part).ratio()
 
@@ -329,9 +336,6 @@ def replace_closest_edit_distance(whole_lines, part, part_lines, replace_lines):
     return modified_whole
 
 
-DEFAULT_FENCE = ("`" * 3, "`" * 3)
-
-
 def strip_quoted_wrapping(res, fname=None, fence=DEFAULT_FENCE):
     """
     Given an input string which may have extra "wrapping" around it, remove the wrapping.
@@ -379,6 +383,8 @@ def do_replace(fname, content, before_text, after_text, fence=None):
         new_content = content + after_text
     else:
         new_content = replace_most_similar_chunk(content, before_text, after_text)
+        if not new_content:
+            return
 
     return new_content
 
@@ -395,6 +401,7 @@ separators = "|".join([HEAD, DIVIDER, UPDATED])
 
 split_re = re.compile(r"^((?:" + separators + r")[ ]*\n)", re.MULTILINE | re.DOTALL)
 
+DEFAULT_FENCE = ("`" * 3, "`" * 3)
 
 missing_filename_err = (
     "Bad/missing filename. The filename must be alone on the line before the opening fence"
@@ -436,6 +443,67 @@ def strip_filename(filename, fence):
     return filename
 
 
+def find_filename(lines, fence, valid_fnames):
+    """
+    Deepseek Coder v2 has been doing this:
+
+     ```python
+    word_count.py
+    ```
+    ```python
+    <<<<<<< SEARCH
+    ...
+
+    This is a more flexible search back for filenames.
+    """
+
+    if valid_fnames is None:
+        valid_fnames = []
+
+    # Go back through the 3 preceding lines
+    lines.reverse()
+    lines = lines[:3]
+
+    filenames = []
+    for line in lines:
+        # If we find a filename, done
+        filename = strip_filename(line, fence)
+        if filename:
+            filenames.append(filename)
+
+        # Only continue as long as we keep seeing fences
+        if not line.startswith(fence[0]) and not line.startswith(triple_backticks):
+            break
+
+    if not filenames:
+        return
+
+    # Check for exact match first
+    for fname in filenames:
+        if fname in valid_fnames:
+            return fname
+
+    # Check for partial match (basename match)
+    for fname in filenames:
+        for vfn in valid_fnames:
+            if fname == Path(vfn).name:
+                return vfn
+
+    # Perform fuzzy matching with valid_fnames
+    for fname in filenames:
+        close_matches = difflib.get_close_matches(fname, valid_fnames, n=1, cutoff=0.8)
+        if len(close_matches) == 1:
+            return close_matches[0]
+
+    # If no fuzzy match, look for a file w/extension
+    for fname in filenames:
+        if "." in fname:
+            return fname
+
+    if filenames:
+        return filenames[0]
+
+
 def find_original_update_blocks(content, fence=DEFAULT_FENCE, valid_fnames=None):
     lines = content.splitlines(keepends=True)
     i = 0
@@ -535,70 +603,6 @@ def find_original_update_blocks(content, fence=DEFAULT_FENCE, valid_fnames=None)
         i += 1
 
 
-def find_filename(lines, fence, valid_fnames):
-    """
-    Deepseek Coder v2 has been doing this:
-
-
-     ```python
-    word_count.py
-    ```
-    ```python
-    <<<<<<< SEARCH
-    ...
-
-    This is a more flexible search back for filenames.
-    """
-
-    if valid_fnames is None:
-        valid_fnames = []
-
-    # Go back through the 3 preceding lines
-    lines.reverse()
-    lines = lines[:3]
-
-    filenames = []
-    for line in lines:
-        # If we find a filename, done
-        filename = strip_filename(line, fence)
-        if filename:
-            filenames.append(filename)
-
-        # Only continue as long as we keep seeing fences
-        if not line.startswith(fence[0]) and not line.startswith(triple_backticks):
-            break
-
-    if not filenames:
-        return
-
-    # pick the *best* filename found
-
-    # Check for exact match first
-    for fname in filenames:
-        if fname in valid_fnames:
-            return fname
-
-    # Check for partial match (basename match)
-    for fname in filenames:
-        for vfn in valid_fnames:
-            if fname == Path(vfn).name:
-                return vfn
-
-    # Perform fuzzy matching with valid_fnames
-    for fname in filenames:
-        close_matches = difflib.get_close_matches(fname, valid_fnames, n=1, cutoff=0.8)
-        if len(close_matches) == 1:
-            return close_matches[0]
-
-    # If no fuzzy match, look for a file w/extension
-    for fname in filenames:
-        if "." in fname:
-            return fname
-
-    if filenames:
-        return filenames[0]
-
-
 def find_similar_lines(search_lines, content_lines, threshold=0.6):
     search_lines = search_lines.splitlines()
     content_lines = content_lines.splitlines()
