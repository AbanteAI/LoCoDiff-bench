pub struct LocalShard {
    segments: LockedSegmentHolder,              // Storage segments
    collection_config: Arc<TokioRwLock<CollectionConfigInternal>>,
    shared_storage_config: Arc<SharedStorageConfig>,
    payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
    wal: RecoverableWal,                        // Write-Ahead Log
    update_handler: Arc<Mutex<UpdateHandler>>,
    update_sender: ArcSwap<Sender<UpdateSignal>>,
    update_tracker: UpdateTracker,
    path: PathBuf,
    optimizers: Arc<Vec<Arc<Optimizer>>>,
    optimizers_log: Arc<ParkingMutex<TrackerLog>>,
    total_optimized_points: Arc<AtomicUsize>,
    update_runtime: Handle,
    search_runtime: Handle,
    disk_usage_watcher: DiskUsageWatcher,
    read_rate_limiter: Option<ParkingMutex<RateLimiter>>,
}
```

### Main Responsibilities

1. **Data Management**
   - Manages segments (the actual data storage units)
   - Handles Write-Ahead Log (WAL) for durability
   - Maintains payload indices and schemas

2. **Operations**
   - Search, query, scroll, and facet operations
   - Point updates and deletions
   - Data consistency and recovery

3. **Optimization**
   - Background optimization processes
   - Segment merging and reorganization
   - Resource management (CPU/IO budgets)

4. **Snapshots & Recovery**
   - Creating and restoring snapshots
   - WAL-based recovery
   - Clock synchronization for distributed consistency

5. **Rate Limiting**
   - Read operation rate limiting
   - Resource usage control

## Key Methods

### Initialization & Loading
- `new()` - Creates a new LocalShard instance
- `load()` - Recovers shard from disk
- `build()` - Creates new empty shard
- `load_from_wal()` - Applies WAL operations during recovery

### Data Operations
- `estimate_cardinality()` - Estimates result set size
- `read_filtered()` - Reads points with filtering
- `local_shard_info()` - Returns shard metadata

### Maintenance
- `on_optimizer_config_update()` - Updates optimizer configuration
- `on_strict_mode_config_update()` - Updates rate limiting
- `trigger_optimizers()` - Manually triggers optimization
- `stop_gracefully()` - Graceful shutdown

### Snapshot Operations
- `create_snapshot()` - Creates shard snapshot
- `restore_snapshot()` - Restores from snapshot
- `snapshot_wal()` - Snapshots WAL state
- `snapshot_empty_wal()` - Creates empty WAL for snapshot

## Notable Features

### Clock Synchronization
The shard uses `LocalShardClocks` for distributed consistency:
- `newest_clocks` - Tracks the most recent operations
- `oldest_clocks` - Tracks cutoff points for garbage collection

### Rate Limiting
Implements configurable rate limiting for read operations:
```rust
fn check_read_rate_limiter<F>(&self, hw_measurement_acc: &HwMeasurementAcc, context: &str, cost_fn: F)