
index c9341cb3..4e40f86a 100644
--- a/qdrant_lib_collection_src_shards_local_shard_mod.rs_expectedoutput.txt (expected):tmp/tmpw4rrxere_expected.txt	
+++ b/qdrant_lib_collection_src_shards_local_shard_mod.rs_extracted.txt (actual):tmp/tmpuotwh0ts_actual.txt	
@@ -26,6 +26,7 @@ use indicatif::{ProgressBar, ProgressStyle};
 use itertools::Itertools;
 use parking_lot::{Mutex as ParkingMutex, RwLock};
 use segment::data_types::segment_manifest::SegmentManifests;
+use segment::data_types::vectors::VectorElementType;
 use segment::entry::entry_point::SegmentEntry as _;
 use segment::index::field_index::CardinalityEstimation;
 use segment::segment::Segment;
@@ -234,10 +235,6 @@ impl LocalShard {
         }
     }
 
-    pub(super) fn segments(&self) -> &RwLock<SegmentHolder> {
-        self.segments.deref()
-    }
-
     /// Recovers shard from disk.
     #[allow(clippy::too_many_arguments)]
     pub async fn load(
@@ -432,18 +429,6 @@ impl LocalShard {
         Ok(local_shard)
     }
 
-    pub fn shard_path(&self) -> PathBuf {
-        self.path.clone()
-    }
-
-    pub fn wal_path(shard_path: &Path) -> PathBuf {
-        shard_path.join(WAL_PATH)
-    }
-
-    pub fn segments_path(shard_path: &Path) -> PathBuf {
-        shard_path.join(SEGMENTS_PATH)
-    }
-
     #[allow(clippy::too_many_arguments)]
     pub async fn build_local(
         id: ShardId,
@@ -749,7 +734,19 @@ impl LocalShard {
         Ok(())
     }
 
-    pub async fn on_optimizer_config_update(&self) -> CollectionResult<()> {
+    pub fn shard_path(&self) -> PathBuf {
+        self.path.clone()
+    }
+
+    pub fn wal_path(shard_path: &Path) -> PathBuf {
+        shard_path.join(WAL_PATH)
+    }
+
+    pub fn segments_path(shard_path: &Path) -> PathBuf {
+        shard_path.join(SEGMENTS_PATH)
+    }
+
+    pub fn on_optimizer_config_update(&self) -> CollectionResult<()> {
         let config = self.collection_config.read().await;
         let mut update_handler = self.update_handler.lock().await;
 
@@ -772,7 +769,6 @@ impl LocalShard {
         update_handler.flush_interval_sec = config.optimizer_config.flush_interval_sec;
         update_handler.max_optimization_threads = config.optimizer_config.max_optimization_threads;
         update_handler.run_workers(update_receiver);
-
         self.update_sender.load().send(UpdateSignal::Nop).await?;
 
         Ok(())
@@ -975,13 +971,6 @@ impl LocalShard {
         Ok(())
     }
 
-    pub fn segment_manifests(&self) -> CollectionResult<SegmentManifests> {
-        self.segments()
-            .read()
-            .segment_manifests()
-            .map_err(CollectionError::from)
-    }
-
     pub fn estimate_cardinality<'a>(
         &'a self,
         filter: Option<&'a Filter>,
@@ -1017,6 +1006,13 @@ impl LocalShard {
         SegmentsSearcher::read_filtered(segments, filter, runtime_handle, hw_counter).await
     }
 
+    pub fn segment_manifests(&self) -> CollectionResult<SegmentManifests> {
+        self.segments()
+            .read()
+            .segment_manifests()
+            .map_err(CollectionError::from)
+    }
+
     pub async fn local_shard_status(&self) -> (ShardStatus, OptimizersStatus) {
         {
             let segments = self.segments().read();
@@ -1043,25 +1039,13 @@ impl LocalShard {
             }
         }
 
-        // Yellow or grey status if there are pending optimizations
-        // Grey if optimizers were not triggered yet after restart,
-        // we don't automatically trigger them to prevent a crash loop
-        let (has_triggered_any_optimizers, has_suboptimal_optimizers) = self
-            .update_handler
-            .lock()
-            .await
-            .check_optimizer_conditions();
-        if has_suboptimal_optimizers {
-            let status = if has_triggered_any_optimizers {
-                ShardStatus::Yellow
-            } else {
-                ShardStatus::Grey
-            };
-            return (status, OptimizersStatus::Ok);
+        // If status looks green/ok but some optimizations are suboptimal
+        if self.update_handler.lock().await.check_optimizer_conditions() {
+            (ShardStatus::Grey, OptimizersStatus::Ok)
+        } else {
+            // Green status because everything is fine
+            (ShardStatus::Green, OptimizersStatus::Ok)
         }
-
-        // Green status because everything is fine
-        (ShardStatus::Green, OptimizersStatus::Ok)
     }
 
     pub async fn local_shard_info(&self) -> ShardInfoInternal {
@@ -1147,10 +1131,7 @@ impl LocalShard {
             rate_limiter
                 .lock()
                 .try_consume(cost as f64)
-                .map_err(|err| {
-                    log::debug!("Read rate limit error on {context} with {err:?}");
-                    CollectionError::rate_limit_error(err, cost, false)
-                })?;
+                .map_err(|err| CollectionError::rate_limit_error(err, cost, false))?;
         }
         Ok(())
     }
