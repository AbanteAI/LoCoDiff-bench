--- qdrant_lib_collection_src_shards_local_shard_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_shards_local_shard_mod.rs_extracted.txt (actual)@@ -183,6 +183,13 @@         )
         .await;
 
+        let read_rate_limiter = config.strict_mode_config.as_ref().and_then(|strict_mode| {
+            strict_mode
+                .read_rate_limit
+                .map(RateLimiter::new_per_minute)
+                .map(ParkingMutex::new)
+        });
+
         let mut update_handler = UpdateHandler::new(
             shared_storage_config.clone(),
             payload_index_schema.clone(),
@@ -204,13 +211,6 @@         update_handler.run_workers(update_receiver);
 
         let update_tracker = segment_holder.read().update_tracker();
-
-        let read_rate_limiter = config.strict_mode_config.as_ref().and_then(|strict_mode| {
-            strict_mode
-                .read_rate_limit
-                .map(RateLimiter::new_per_minute)
-                .map(ParkingMutex::new)
-        });
 
         drop(config); // release `shared_config` from borrow checker
 
@@ -779,24 +779,18 @@     }
 
     /// Apply shard's strict mode configuration update
-    /// - Update read rate limiter
+    /// - Update read and write rate limiters
     pub async fn on_strict_mode_config_update(&mut self) {
         let config = self.collection_config.read().await;
 
         if let Some(strict_mode_config) = &config.strict_mode_config {
-            if strict_mode_config.enabled == Some(true) {
-                // update read rate limiter
-                if let Some(read_rate_limit_per_min) = strict_mode_config.read_rate_limit {
-                    let new_read_rate_limiter =
-                        RateLimiter::new_per_minute(read_rate_limit_per_min);
-                    self.read_rate_limiter
-                        .replace(parking_lot::Mutex::new(new_read_rate_limiter));
-                    return;
-                }
+            // Update read rate limiter
+            if let Some(read_rate_limit_per_sec) = strict_mode_config.read_rate_limit {
+                let mut read_rate_limiter_guard = self.read_rate_limiter.lock();
+                read_rate_limiter_guard
+                    .replace(RateLimiter::new_per_minute(read_rate_limit_per_sec));
             }
         }
-        // remove read rate limiter for all other situations
-        self.read_rate_limiter.take();
     }
 
     pub fn trigger_optimizers(&self) {
