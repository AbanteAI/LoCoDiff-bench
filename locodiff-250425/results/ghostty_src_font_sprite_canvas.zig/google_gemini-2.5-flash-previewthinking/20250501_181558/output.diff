--- ghostty_src_font_sprite_canvas.zig_expectedoutput.txt (expected)+++ ghostty_src_font_sprite_canvas.zig_extracted.txt (actual)@@ -153,13 +153,28 @@         return z2d.Context.init(self.alloc, &self.sfc);
     }
 
+
     /// Draw and fill a single pixel
     pub fn pixel(self: *Canvas, x: u32, y: u32, color: Color) void {
         self.sfc.putPixel(
             @intCast(x),
             @intCast(y),
             .{ .alpha8 = .{ .a = @intFromEnum(color) } },
-        );
+        ) catch |e| switch (e) {
+            error.OutOfRange => {
+                // If we try to set out of range this will fail. We just silently
+                // ignore it, so that this method (and `rect` which uses it) have
+                // implicit bounds clipping.
+            },
+
+            error.InvalidHeight,
+            error.InvalidWidth,
+            error.InvalidPixelFormat,
+            => {
+                std.log.err("unexpected (considered impossible) error err={}", .{e});
+                unreachable; // This shouldn't be possible.
+            },
+        };
     }
 
     /// Draw and fill a rectangle. This is the main primitive for drawing
