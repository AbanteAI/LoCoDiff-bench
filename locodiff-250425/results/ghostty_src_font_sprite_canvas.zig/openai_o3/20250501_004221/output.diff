
index 0683ced4..4e32c7bc 100644
--- a/ghostty_src_font_sprite_canvas.zig_expectedoutput.txt (expected):tmp/tmpbw9cu3m2_expected.txt	
+++ b/ghostty_src_font_sprite_canvas.zig_extracted.txt (actual):tmp/tmpq3a753mt_actual.txt	
@@ -74,13 +74,14 @@ pub const Color = enum(u8) {
     _,
 };
 
-/// This is a managed struct, it keeps a reference to the allocator that is
-/// used to initialize it, and the same allocator is used for any further
-/// necessary allocations when drawing.
+/// This is a managed struct. It keeps a reference to the allocator that is
+/// used to initialize it and re-uses that allocator for any further
+/// allocations when drawing.
 pub const Canvas = struct {
     /// The underlying z2d surface.
     sfc: z2d.Surface,
 
+    /// Allocator the surface was created with.
     alloc: Allocator,
 
     pub fn init(alloc: Allocator, width: u32, height: u32) !Canvas {
@@ -121,12 +122,12 @@ pub const Canvas = struct {
             // Get the full padded region
             var region = try atlas.reserve(
                 alloc,
-                width + (padding * 2), // * 2 because left+right
-                height + (padding * 2), // * 2 because top+bottom
+                width + (padding * 2), // *2 because left+right
+                height + (padding * 2), // *2 because top+bottom
             );
 
             // Modify the region so that we remove the padding so that
-            // we write to the non-zero location. The data in an Altlas
+            // we write to the non-zero location. The data in an Atlas
             // is always initialized to zero (Atlas.clear) so we don't
             // need to worry about zero-ing that.
             region.x += padding;
@@ -137,6 +138,8 @@ pub const Canvas = struct {
         };
 
         if (region.width > 0 and region.height > 0) {
+            // The buffer for alpha8 surfaces is already tightly packed,
+            // one byte per pixel.
             const buffer: []u8 = @ptrCast(self.sfc.image_surface_alpha8.buf);
 
             // Write the glyph information into the atlas
@@ -159,11 +162,24 @@ pub const Canvas = struct {
             @intCast(x),
             @intCast(y),
             .{ .alpha8 = .{ .a = @intFromEnum(color) } },
-        );
+        ) catch |e| switch (e) {
+            error.OutOfRange => {
+                // If we try to set out of range this will fail. We silently
+                // ignore it so that this method (and `rect`, which uses it)
+                // get implicit bounds clipping.
+            },
+            error.InvalidHeight,
+            error.InvalidWidth,
+            error.InvalidPixelFormat,
+            => {
+                std.log.err("unexpected (considered impossible) error err={}", .{e});
+                unreachable; // This shouldn't be possible.
+            },
+        };
     }
 
     /// Draw and fill a rectangle. This is the main primitive for drawing
-    /// lines as well (which are just generally skinny rectangles...)
+    /// lines as well (which are just generally skinny rectanglesâ€¦)
     pub fn rect(self: *Canvas, v: Rect(u32), color: Color) void {
         const x0 = v.x;
         const x1 = v.x + v.width;
@@ -172,11 +188,7 @@ pub const Canvas = struct {
 
         for (y0..y1) |y| {
             for (x0..x1) |x| {
-                self.pixel(
-                    @intCast(x),
-                    @intCast(y),
-                    color,
-                );
+                self.pixel(@intCast(x), @intCast(y), color);
             }
         }
     }
@@ -184,13 +196,13 @@ pub const Canvas = struct {
     /// Draw and fill a quad.
     pub fn quad(self: *Canvas, q: Quad(f64), color: Color) !void {
         var path: z2d.StaticPath(6) = .{};
-        path.init(); // nodes.len = 0
+        path.init();
 
-        path.moveTo(q.p0.x, q.p0.y); // +1, nodes.len = 1
-        path.lineTo(q.p1.x, q.p1.y); // +1, nodes.len = 2
-        path.lineTo(q.p2.x, q.p2.y); // +1, nodes.len = 3
-        path.lineTo(q.p3.x, q.p3.y); // +1, nodes.len = 4
-        path.close(); // +2, nodes.len = 6
+        path.moveTo(q.p0.x, q.p0.y);
+        path.lineTo(q.p1.x, q.p1.y);
+        path.lineTo(q.p2.x, q.p2.y);
+        path.lineTo(q.p3.x, q.p3.y);
+        path.close();
 
         try z2d.painter.fill(
             self.alloc,
@@ -206,12 +218,12 @@ pub const Canvas = struct {
     /// Draw and fill a triangle.
     pub fn triangle(self: *Canvas, t: Triangle(f64), color: Color) !void {
         var path: z2d.StaticPath(5) = .{};
-        path.init(); // nodes.len = 0
+        path.init();
 
-        path.moveTo(t.p0.x, t.p0.y); // +1, nodes.len = 1
-        path.lineTo(t.p1.x, t.p1.y); // +1, nodes.len = 2
-        path.lineTo(t.p2.x, t.p2.y); // +1, nodes.len = 3
-        path.close(); // +2, nodes.len = 5
+        path.moveTo(t.p0.x, t.p0.y);
+        path.lineTo(t.p1.x, t.p1.y);
+        path.lineTo(t.p2.x, t.p2.y);
+        path.close();
 
         try z2d.painter.fill(
             self.alloc,
@@ -224,13 +236,18 @@ pub const Canvas = struct {
         );
     }
 
-    pub fn triangle_outline(self: *Canvas, t: Triangle(f64), thickness: f64, color: Color) !void {
+    pub fn triangle_outline(
+        self: *Canvas,
+        t: Triangle(f64),
+        thickness: f64,
+        color: Color,
+    ) !void {
         var path: z2d.StaticPath(3) = .{};
-        path.init(); // nodes.len = 0
+        path.init();
 
-        path.moveTo(t.p0.x, t.p0.y); // +1, nodes.len = 1
-        path.lineTo(t.p1.x, t.p1.y); // +1, nodes.len = 2
-        path.lineTo(t.p2.x, t.p2.y); // +1, nodes.len = 3
+        path.moveTo(t.p0.x, t.p0.y);
+        path.lineTo(t.p1.x, t.p1.y);
+        path.lineTo(t.p2.x, t.p2.y);
 
         try z2d.painter.stroke(
             self.alloc,
@@ -247,12 +264,17 @@ pub const Canvas = struct {
     }
 
     /// Stroke a line.
-    pub fn line(self: *Canvas, l: Line(f64), thickness: f64, color: Color) !void {
+    pub fn line(
+        self: *Canvas,
+        l: Line(f64),
+        thickness: f64,
+        color: Color,
+    ) !void {
         var path: z2d.StaticPath(2) = .{};
-        path.init(); // nodes.len = 0
+        path.init();
 
-        path.moveTo(l.p0.x, l.p0.y); // +1, nodes.len = 1
-        path.lineTo(l.p1.x, l.p1.y); // +1, nodes.len = 2
+        path.moveTo(l.p0.x, l.p0.y);
+        path.lineTo(l.p1.x, l.p1.y);
 
         try z2d.painter.stroke(
             self.alloc,
