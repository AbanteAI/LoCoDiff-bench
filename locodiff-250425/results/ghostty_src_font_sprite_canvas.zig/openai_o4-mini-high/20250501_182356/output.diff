
index 0683ced4..4e948afe 100644
--- a/ghostty_src_font_sprite_canvas.zig_expectedoutput.txt (expected):tmp/tmpsicgoetb_expected.txt	
+++ b/ghostty_src_font_sprite_canvas.zig_extracted.txt (actual):tmp/tmpnb04pbzy_actual.txt	
@@ -1,5 +1,3 @@
-//! This exposes primitives to draw 2D graphics and export the graphic to
-//! a font atlas.
 const std = @import("std");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
@@ -80,11 +78,9 @@ pub const Color = enum(u8) {
 pub const Canvas = struct {
     /// The underlying z2d surface.
     sfc: z2d.Surface,
-
     alloc: Allocator,
 
     pub fn init(alloc: Allocator, width: u32, height: u32) !Canvas {
-        // Create the surface we'll be using.
         const sfc = try z2d.Surface.initPixel(
             .{ .alpha8 = .{ .a = 0 } },
             alloc,
@@ -126,7 +122,7 @@ pub const Canvas = struct {
             );
 
             // Modify the region so that we remove the padding so that
-            // we write to the non-zero location. The data in an Altlas
+            // we write to the non-zero location. The data in an Atlas
             // is always initialized to zero (Atlas.clear) so we don't
             // need to worry about zero-ing that.
             region.x += padding;
@@ -159,7 +155,20 @@ pub const Canvas = struct {
             @intCast(x),
             @intCast(y),
             .{ .alpha8 = .{ .a = @intFromEnum(color) } },
-        );
+        ) catch |e| switch (e) {
+            error.OutOfRange => {
+                // If we try to set out of range this will fail. We just silently
+                // ignore it, so that this method (and `rect` which uses it) have
+                // implicit bounds clipping.
+            },
+            error.InvalidHeight,
+            error.InvalidWidth,
+            error.InvalidPixelFormat,
+            => {
+                std.log.err("unexpected (considered impossible) error err={}", .{e});
+                unreachable; // This shouldn't be possible.
+            },
+        };
     }
 
     /// Draw and fill a rectangle. This is the main primitive for drawing
@@ -190,7 +199,7 @@ pub const Canvas = struct {
         path.lineTo(q.p1.x, q.p1.y); // +1, nodes.len = 2
         path.lineTo(q.p2.x, q.p2.y); // +1, nodes.len = 3
         path.lineTo(q.p3.x, q.p3.y); // +1, nodes.len = 4
-        path.close(); // +2, nodes.len = 6
+        path.close();              // +2, nodes.len = 6
 
         try z2d.painter.fill(
             self.alloc,
@@ -211,7 +220,7 @@ pub const Canvas = struct {
         path.moveTo(t.p0.x, t.p0.y); // +1, nodes.len = 1
         path.lineTo(t.p1.x, t.p1.y); // +1, nodes.len = 2
         path.lineTo(t.p2.x, t.p2.y); // +1, nodes.len = 3
-        path.close(); // +2, nodes.len = 5
+        path.close();              // +2, nodes.len = 5
 
         try z2d.painter.fill(
             self.alloc,
