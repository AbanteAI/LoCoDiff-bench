
index 9a68383d..eedf9687 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmp97ctaong_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmp19ql8v6n_actual.txt	
@@ -59,6 +59,23 @@ export const debugFlags = {
 declare global {
 	interface Window {
 		tldrawLog(message: any): void
+		// TldrawLog: (message: any) => void
+		TldrawLogPreventDefaults: boolean
+		TldrawLogPointerCaptures: boolean
+		TldrawPointerCaptureTracking: boolean
+		TldrawPointerCaptureTrackingObject: Map<Element, number>
+		TldrawLogElementRemoves: boolean
+		TldrawDebugSvg: boolean
+		TldrawShowFps: boolean
+		TldrawMeasurePerformance: boolean
+		TldrawThrowToBlob: boolean
+		TldrawReconnectOnPing: boolean
+		TldrawDebugCursors: boolean
+		TldrawForceSrgbColors: boolean
+		TldrawDebugGeometry: boolean
+		TldrawHideShapes: boolean
+		TldrawEditOnType: boolean
+		TldrawA11y: boolean
 	}
 }
 
@@ -89,6 +106,12 @@ if (typeof Element !== 'undefined') {
 	})
 }
 
+if (typeof window !== 'undefined') {
+	window.tldrawLog = (message: any) => {
+		console.log(message)
+	}
+}
+
 // --- IMPLEMENTATION ---
 // you probably don't need to read this if you're just using the debug values system
 function createDebugValue<T>(
@@ -97,7 +120,7 @@ function createDebugValue<T>(
 		defaults,
 		shouldStoreForSession = true,
 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-) {
+): DebugFlag<T> {
 	return createDebugValueBase({
 		name,
 		defaults,
@@ -138,11 +161,11 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 			})
 		}
 
-		Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
-			get() {
+		Object.defineProperty(window, `Tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
+			get(): T {
 				return valueAtom.get()
 			},
-			set(newValue) {
+			set(newValue: T) {
 				valueAtom.set(newValue)
 			},
 			configurable: true,
