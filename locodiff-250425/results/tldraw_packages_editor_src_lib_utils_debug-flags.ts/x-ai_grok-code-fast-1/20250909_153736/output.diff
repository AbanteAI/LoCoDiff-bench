
index 9a68383d4..2001fe26f 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmplyvnjvwg_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmpn3x8exlm_actual.txt	
@@ -3,12 +3,16 @@ import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage }
 
 // --- 1. DEFINE ---
 //
-// Define your debug values and feature flags here. Use `createDebugValue` to
-// create an arbitrary value with defaults for production, staging, and
-// development. Use `createFeatureFlag` to create a boolean flag which will be
-// `true` by default in development and staging, and `false` in production.
+/**
+ * Define your debug values and feature flags here. Use `createDebugValue` to
+ * create an arbitrary value with defaults for production, staging, and
+ * development. Use `createFeatureFlag` to create a boolean flag which will be
+ * `true` by default in development and staging, and `false` in production.
+ */
 /** @internal */
-export const featureFlags: Record<string, DebugFlag<boolean>> = {}
+export const featureFlags: Record<string, DebugFlag<boolean>> = {
+	// canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
+}
 
 /** @internal */
 export const pointerCaptureTrackingObject = createDebugValue(
@@ -30,6 +34,9 @@ export const debugFlags = {
 	logPointerCaptures: createDebugValue('logPointerCaptures', {
 		defaults: { all: false },
 	}),
+	pointerCaptureTracking: createDebugValue('pointerCaptureTracking', {
+		defaults: { all: false },
+	}),
 	logElementRemoves: createDebugValue('logElementRemoves', {
 		defaults: { all: false },
 	}),
@@ -43,7 +50,7 @@ export const debugFlags = {
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
-	reconnectOnPing: createDebugValue('reconnectOnPing', {
+	resetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {
 		defaults: { all: false },
 	}),
 	debugCursors: createDebugValue('debugCursors', {
@@ -63,12 +70,11 @@ declare global {
 }
 
 // --- 2. USE ---
-// In normal code, read from debug flags directly by calling .value on them:
-//    if (debugFlags.preventDefaultLogging.value) { ... }
+// In normal code, read from debug flags directly by calling .get() on them:
+//    if (debugFlags.logPreventDefaults.get()) { ... }
 //
-// In react, wrap your reads in `useValue` (or your component in `track`)
-// so they react to changes:
-//    const shouldLog = useValue(debugFlags.preventDefaultLogging)
+// In react, wrap your reads in `useValue` so they react to changes:
+//    const shouldLog = useValue(debugFlags.logPreventDefaults)
 
 // --- 3. GET FUNKY ---
 // If you need to do fun stuff like monkey-patching in response to flag changes,
