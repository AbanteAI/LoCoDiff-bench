
index 9a68383d..59a759cb 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmp4mybac5a_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmp864on44v_actual.txt	
@@ -75,6 +75,12 @@ declare global {
 // add that here. Make sure you wrap your code in `react` so it runs
 // automatically when values change!
 
+if (typeof window !== 'undefined') {
+	window.tldrawLog = (message: any) => {
+		// debugFlags.logMessages.set(debugFlags.logMessages.get().concat(message))
+	}
+}
+
 if (typeof Element !== 'undefined') {
 	const nativeElementRemoveChild = Element.prototype.removeChild
 	react('element removal logging', () => {
@@ -105,25 +111,9 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag<T>(
-// 	name: string,
-// 	{
-// 		defaults,
-// 		shouldStoreForSession = true,
-// 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession,
-// 	})
-// }
-
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)
-	const storedValue = def.shouldStoreForSession
-		? (getStoredInitialValue(def.name) as T | null)
-		: null
+	const storedValue = def.shouldStoreForSession ? (getStoredInitialValue(def.name) as T | null) : null
 	const valueAtom = atom(`debug:${def.name}`, storedValue ?? defaultValue)
 
 	if (typeof window !== 'undefined') {
