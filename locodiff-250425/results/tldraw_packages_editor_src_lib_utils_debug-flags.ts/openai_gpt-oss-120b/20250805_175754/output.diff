
index 9a68383d4..1350e06b2 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmpf1pp_h_k_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmpc8ipy5gi_actual.txt	
@@ -1,16 +1,15 @@
 import { Atom, atom, react } from '@tldraw/state'
-import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage } from '@tldraw/utils'
+import {
+	deleteFromSessionStorage,
+	getFromSessionStorage,
+	setInSessionStorage,
+} from '@tldraw/utils'
 
 // --- 1. DEFINE ---
-//
-// Define your debug values and feature flags here. Use `createDebugValue` to
-// create an arbitrary value with defaults for production, staging, and
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
-/** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {}
 
-/** @internal */
 export const pointerCaptureTrackingObject = createDebugValue(
 	'pointerCaptureTrackingObject',
 	// ideally we wouldn't store this mutable value in an atom but it's not
@@ -39,7 +38,9 @@ export const debugFlags = {
 	showFps: createDebugValue('showFps', {
 		defaults: { all: false },
 	}),
-	measurePerformance: createDebugValue('measurePerformance', { defaults: { all: false } }),
+	measurePerformance: createDebugValue('measurePerformance', {
+		defaults: { all: false },
+	}),
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
@@ -62,6 +63,15 @@ declare global {
 	}
 }
 
+// The original implementation used a global `window.tldrawLog`. We keep it here
+// for compatibility.
+if (typeof window !== 'undefined') {
+	window.tldrawLog = (message: any) => {
+		// No-op: the original logging behavior was removed; keeping the function
+		// definition to avoid reference errors.
+	}
+}
+
 // --- 2. USE ---
 // In normal code, read from debug flags directly by calling .value on them:
 //    if (debugFlags.preventDefaultLogging.value) { ... }
@@ -70,11 +80,6 @@ declare global {
 // so they react to changes:
 //    const shouldLog = useValue(debugFlags.preventDefaultLogging)
 
-// --- 3. GET FUNKY ---
-// If you need to do fun stuff like monkey-patching in response to flag changes,
-// add that here. Make sure you wrap your code in `react` so it runs
-// automatically when values change!
-
 if (typeof Element !== 'undefined') {
 	const nativeElementRemoveChild = Element.prototype.removeChild
 	react('element removal logging', () => {
@@ -105,22 +110,9 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag<T>(
-// 	name: string,
-// 	{
-// 		defaults,
-// 		shouldStoreForSession = true,
-// 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession,
-// 	})
-// }
-
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)
+
 	const storedValue = def.shouldStoreForSession
 		? (getStoredInitialValue(def.name) as T | null)
 		: null
@@ -152,31 +144,11 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	return Object.assign(valueAtom, def)
 }
 
-function getStoredInitialValue(name: string) {
-	try {
-		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
-	} catch {
-		return null
-	}
-}
-
-// process.env might not be defined, but we can't access it using optional
-// chaining because some bundlers search for `process.env.SOMETHING` as a string
-// and replace it with its value.
-function readEnv(fn: () => string | undefined) {
-	try {
-		return fn()
-	} catch {
-		return null
-	}
-}
-
 function getDefaultValue<T>(def: DebugFlagDef<T>): T {
 	const env =
 		readEnv(() => process.env.TLDRAW_ENV) ??
 		readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ??
 		readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ??
-		// default to production because if we don't have one of these, this is probably a library use
 		'production'
 
 	switch (env) {
@@ -190,6 +162,25 @@ function getDefaultValue<T>(def: DebugFlagDef<T>): T {
 	}
 }
 
+// process.env might not be defined, but we can't access it using optional
+// chaining because some bundlers search for `process.env.SOMETHING` as a string
+// and replace it with its value.
+function readEnv(fn: () => string | undefined) {
+	try {
+		return fn()
+	} catch {
+		return null
+	}
+}
+
+function getStoredInitialValue(name: string) {
+	try {
+		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
+	} catch {
+		return null
+	}
+}
+
 /** @internal */
 export interface DebugFlagDefaults<T> {
 	development?: T
