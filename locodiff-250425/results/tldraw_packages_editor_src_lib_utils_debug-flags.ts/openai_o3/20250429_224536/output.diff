--- tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual)@@ -1,5 +1,9 @@ import { Atom, atom, react } from '@tldraw/state'
-import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage } from '@tldraw/utils'
+import {
+	deleteFromSessionStorage,
+	getFromSessionStorage,
+	setInSessionStorage,
+} from '@tldraw/utils'
 
 // --- 1. DEFINE ---
 //
@@ -7,6 +11,7 @@ // create an arbitrary value with defaults for production, staging, and
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
+
 /** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {}
 
@@ -80,6 +85,7 @@ 	react('element removal logging', () => {
 		if (debugFlags.logElementRemoves.get()) {
 			Element.prototype.removeChild = function <T extends Node>(this: any, child: Node): T {
+				// eslint-disable-next-line no-console
 				console.warn('[tldraw] removing child:', child)
 				return nativeElementRemoveChild.call(this, child) as T
 			}
@@ -90,7 +96,7 @@ }
 
 // --- IMPLEMENTATION ---
-// you probably don't need to read this if you're just using the debug values system
+// You probably don't need to read this if you're just using the debug values system
 function createDebugValue<T>(
 	name: string,
 	{
@@ -176,7 +182,7 @@ 		readEnv(() => process.env.TLDRAW_ENV) ??
 		readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ??
 		readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ??
-		// default to production because if we don't have one of these, this is probably a library use
+		// Default to production because if we don't have one of these, this is probably a library use
 		'production'
 
 	switch (env) {
