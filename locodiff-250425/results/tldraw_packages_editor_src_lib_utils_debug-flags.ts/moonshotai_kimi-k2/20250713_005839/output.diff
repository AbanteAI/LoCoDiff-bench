
index 9a68383d4..2ce8e3d9a 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmps5qsr7xi_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmpheq8rw51_actual.txt	
@@ -64,11 +64,11 @@ declare global {
 
 // --- 2. USE ---
 // In normal code, read from debug flags directly by calling .value on them:
-//    if (debugFlags.preventDefaultLogging.value) { ... }
+//    if (debugFlags.logPreventDefaults.value) { ... }
 //
 // In react, wrap your reads in `useValue` (or your component in `track`)
 // so they react to changes:
-//    const shouldLog = useValue(debugFlags.preventDefaultLogging)
+//    const shouldLog = useValue(debugFlags.logPreventDefaults)
 
 // --- 3. GET FUNKY ---
 // If you need to do fun stuff like monkey-patching in response to flag changes,
@@ -105,19 +105,19 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag<T>(
-// 	name: string,
-// 	{
-// 		defaults,
-// 		shouldStoreForSession = true,
-// 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession,
-// 	})
-// }
+function createFeatureFlag<T>(
+	name: string,
+	{
+		defaults,
+		shouldStoreForSession = true,
+	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession,
+	})
+}
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)
