
index 9a68383d..52b462d6 100644
--- a/tldraw_packages_editor_src_lib_utils_debug-flags.ts_expectedoutput.txt (expected):tmp/tmp1yyahvak_expected.txt	
+++ b/tldraw_packages_editor_src_lib_utils_debug-flags.ts_extracted.txt (actual):tmp/tmp6ek5zzuz_actual.txt	
@@ -22,7 +22,7 @@ export const pointerCaptureTrackingObject = createDebugValue(
 )
 
 /** @internal */
-export const debugFlags = {
+export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	// --- DEBUG VALUES ---
 	logPreventDefaults: createDebugValue('logPreventDefaults', {
 		defaults: { all: false },
@@ -39,7 +39,9 @@ export const debugFlags = {
 	showFps: createDebugValue('showFps', {
 		defaults: { all: false },
 	}),
-	measurePerformance: createDebugValue('measurePerformance', { defaults: { all: false } }),
+	measurePerformance: createDebugValue('measurePerformance', {
+		defaults: { all: false },
+	}),
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
@@ -49,11 +51,21 @@ export const debugFlags = {
 	debugCursors: createDebugValue('debugCursors', {
 		defaults: { all: false },
 	}),
-	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
-	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
-	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
-	editOnType: createDebugValue('editOnType', { defaults: { all: false } }),
-	a11y: createDebugValue('a11y', { defaults: { all: false } }),
+	forceSrgb: createDebugValue('forceSrgbColors', {
+		defaults: { all: false },
+	}),
+	debugGeometry: createDebugValue('debugGeometry', {
+		defaults: { all: false },
+	}),
+	hideShapes: createDebugValue('hideShapes', {
+		defaults: { all: false },
+	}),
+	editOnType: createDebugValue('editOnType', {
+		defaults: { all: false },
+	}),
+	a11y: createDebugValue('a11y', {
+		defaults: { all: false },
+	}),
 } as const
 
 declare global {
@@ -62,19 +74,6 @@ declare global {
 	}
 }
 
-// --- 2. USE ---
-// In normal code, read from debug flags directly by calling .value on them:
-//    if (debugFlags.preventDefaultLogging.value) { ... }
-//
-// In react, wrap your reads in `useValue` (or your component in `track`)
-// so they react to changes:
-//    const shouldLog = useValue(debugFlags.preventDefaultLogging)
-
-// --- 3. GET FUNKY ---
-// If you need to do fun stuff like monkey-patching in response to flag changes,
-// add that here. Make sure you wrap your code in `react` so it runs
-// automatically when values change!
-
 if (typeof Element !== 'undefined') {
 	const nativeElementRemoveChild = Element.prototype.removeChild
 	react('element removal logging', () => {
@@ -89,6 +88,19 @@ if (typeof Element !== 'undefined') {
 	})
 }
 
+// --- 2. USE ---
+// In normal code, read from debug flags directly by calling .value on them:
+//    if (debugFlags.preventDefaultLogging.value) { ... }
+//
+// In react, wrap your reads in `useValue` (or your component in `track`)
+// so they react to changes:
+//    const shouldLog = useValue(debugFlags.preventDefaultLogging)
+
+// --- 3. GET FUNKY ---
+// If you need to do fun stuff like monkey-patching in response to flag changes,
+// add that here. Make sure you wrap your code in `react` so it runs
+// automatically when values change!
+
 // --- IMPLEMENTATION ---
 // you probably don't need to read this if you're just using the debug values system
 function createDebugValue<T>(
@@ -105,19 +117,19 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag<T>(
-// 	name: string,
-// 	{
-// 		defaults,
-// 		shouldStoreForSession = true,
-// 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession,
-// 	})
-// }
+function createFeatureFlag<T>(
+	name: string,
+	{
+		defaults,
+		shouldStoreForSession = true,
+	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession,
+	})
+}
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)
