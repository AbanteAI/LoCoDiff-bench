
index c6d1df953..a328373cd 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmppvfcpx9j_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmpw4_n9vaa_actual.txt	
@@ -1,3 +1,5 @@
+#[allow(deprecated)]
+
 #[cfg(feature = "web")]
 mod actix;
 mod common;
@@ -17,7 +19,7 @@ use std::thread;
 use std::thread::JoinHandle;
 use std::time::Duration;
 
-use ::common::budget::{ResourceBudget, get_io_budget};
+use ::common::budget::{get_io_budget, ResourceBudget};
 use ::common::cpu::get_cpu_budget;
 use ::common::flags::{feature_flags, init_feature_flags};
 use ::tonic::transport::Uri;
@@ -30,8 +32,8 @@ use startup::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
-use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
+use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
 #[cfg(all(
@@ -376,8 +378,6 @@ fn main() -> anyhow::Result<()> {
         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
 
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
