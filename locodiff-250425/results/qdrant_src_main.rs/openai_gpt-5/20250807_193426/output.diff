
index c6d1df953..fb634bccd 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpgwjx7wl0_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp8fh43p29_actual.txt	
@@ -11,13 +11,14 @@ mod startup;
 mod tonic;
 mod tracing;
 
+use std::fmt::Write as _;
 use std::io::Error;
 use std::sync::Arc;
 use std::thread;
 use std::thread::JoinHandle;
 use std::time::Duration;
 
-use ::common::budget::{ResourceBudget, get_io_budget};
+use ::common::budget::{get_io_budget, ResourceBudget};
 use ::common::cpu::get_cpu_budget;
 use ::common::flags::{feature_flags, init_feature_flags};
 use ::tonic::transport::Uri;
@@ -25,13 +26,12 @@ use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
 use collection::shards::channel_service::ChannelService;
 use consensus::Consensus;
-use slog::Drain;
 use startup::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
-use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
+use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
 #[cfg(all(
@@ -205,7 +205,7 @@ fn main() -> anyhow::Result<()> {
     }
 
     if let Some(recovery_warning) = &settings.storage.recovery_mode {
-        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
+        log::warn!("Qdrant is loaded in recovery mode: {}", recovery_warning);
         log::warn!(
             "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
         );
@@ -216,7 +216,7 @@ fn main() -> anyhow::Result<()> {
 
     // Report feature flags that are enabled for easier debugging
     let flags = feature_flags();
-    if !flags.is_default() {
+    if !flags.is_empty() {
         log::debug!("Feature flags: {flags:?}");
     }
 
@@ -286,13 +286,8 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
-        // High-level channel which could be used to send User-space consensus operations
-        Some(OperationSender::new(propose_sender))
-    } else {
-        // We don't need sender for the single-node mode
-        None
-    };
+    // High-level channel which could be used to send User-space consensus operations
+    let propose_operation_sender = OperationSender::new(propose_sender);
 
     // Channel service is used to manage connections between peers.
     // It allocates required number of channels and manages proper reconnection handling
@@ -353,7 +348,7 @@ fn main() -> anyhow::Result<()> {
         let consensus_state: ConsensusStateRef = ConsensusManager::new(
             persistent_consensus_state,
             toc_arc.clone(),
-            propose_operation_sender.unwrap(),
+            propose_operation_sender,
             storage_path,
         )
         .into();
@@ -420,12 +415,6 @@ fn main() -> anyhow::Result<()> {
             }
         });
 
-        // TODO(resharding): Remove resharding driver?
-        //
-        // runtime_handle.block_on(async {
-        //     toc_arc.resume_resharding_tasks().await;
-        // });
-
         let collections_to_recover_in_consensus = if is_new_deployment {
             let existing_collections =
                 runtime_handle.block_on(toc_arc.all_collections(&FULL_ACCESS));
@@ -468,7 +457,7 @@ fn main() -> anyhow::Result<()> {
     let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
 
     if reporting_enabled {
-        log::info!("Telemetry reporting enabled, id: {reporting_id}");
+        log::info!("Telemetry reporting enabled, id: {}", reporting_id);
 
         runtime_handle.spawn(TelemetryReporter::run(telemetry_collector.clone()));
     } else {
@@ -485,7 +474,7 @@ fn main() -> anyhow::Result<()> {
     // Helper to better log start errors
     let log_err_if_any = |server_name, result| match result {
         Err(err) => {
-            log::error!("Error while starting {server_name} server: {err}");
+            log::error!("Error while starting {} server: {}", server_name, err);
             Err(err)
         }
         ok => ok,
@@ -514,7 +503,10 @@ fn main() -> anyhow::Result<()> {
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
         let settings = settings.clone();
+        let health_checker = health_checker.clone();
+        let logger_handle = logger_handle.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
             .spawn(move || {
@@ -561,8 +553,6 @@ fn main() -> anyhow::Result<()> {
 
     #[cfg(feature = "service_debug")]
     {
-        use std::fmt::Write;
-
         use parking_lot::deadlock;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
@@ -590,7 +580,7 @@ fn main() -> anyhow::Result<()> {
                             .expect("fail to writeln!");
                         }
                     }
-                    log::error!("{error}");
+                    log::error!("{}", error);
                 }
             })
             .unwrap();
