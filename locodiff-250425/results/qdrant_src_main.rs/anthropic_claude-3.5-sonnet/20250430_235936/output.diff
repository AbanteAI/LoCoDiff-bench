--- qdrant_src_main.rs_expectedoutput.txt (expected)+++ qdrant_src_main.rs_extracted.txt (actual)@@ -1,4 +1,3 @@-#[cfg(feature = "web")]
 mod actix;
 mod common;
 mod consensus;
@@ -23,7 +22,7 @@ use ::tonic::transport::Uri;
 use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
-use collection::shards::channel_service::ChannelService;
+use collection::shard::ChannelService;
 use consensus::Consensus;
 use slog::Drain;
 use startup::setup_panic_hook;
@@ -34,6 +33,7 @@ use storage::content_manager::toc::dispatcher::TocDispatcher;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
+
 #[cfg(all(
     not(target_env = "msvc"),
     any(target_arch = "x86_64", target_arch = "aarch64")
@@ -125,7 +125,7 @@     /// Reinit consensus state.
     /// When enabled, the service will assume the consensus should be reinitialized.
     /// The exact behavior depends on if this current node has bootstrap URI or not.
-    /// If it has - it'll remove current consensus state and consensus WAL (while keeping peer ID)
+    /// If it has - it'll remove current consensus state and consensus WAL (while keeping peer ID) 
     ///             and will try to receive state from the bootstrap peer.
     /// If it doesn't have - it'll remove other peers from voters promote
     ///             the current peer to the leader and the single member of the cluster.
@@ -269,7 +269,6 @@     // destruction of it
     let search_runtime = create_search_runtime(settings.storage.performance.max_search_threads)
         .expect("Can't search create runtime.");
-
     let update_runtime =
         create_update_runtime(settings.storage.performance.max_optimization_threads)
             .expect("Can't optimizer create runtime.");
@@ -286,7 +285,7 @@     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
+    let propose_operation_sender = if is_distributed_deployment {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
@@ -342,7 +341,7 @@     let toc_arc = Arc::new(toc);
     let storage_path = toc_arc.storage_path();
 
-    // Holder for all actively running threads of the service: web, gPRC, consensus, etc.
+    // Holder for all actively running threads of the service: web, gRPC, consensus, etc.
     let mut handles: Vec<JoinHandle<Result<(), Error>>> = vec![];
 
     // Router for external queries.
@@ -376,8 +375,6 @@         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
 
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
@@ -464,7 +461,6 @@     // Telemetry reporting
     //
 
-    let reporting_id = telemetry_collector.reporting_id();
     let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
 
     if reporting_enabled {
@@ -561,9 +557,8 @@ 
     #[cfg(feature = "service_debug")]
     {
+        use parking_lot::deadlock;
         use std::fmt::Write;
-
-        use parking_lot::deadlock;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
