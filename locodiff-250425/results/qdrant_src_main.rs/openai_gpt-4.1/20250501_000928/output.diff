--- qdrant_src_main.rs_expectedoutput.txt (expected)+++ qdrant_src_main.rs_extracted.txt (actual)@@ -30,8 +30,8 @@ use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
+use storage::content_manager::toc::dispatcher::TocDispatcher;
 use storage::content_manager::toc::TableOfContent;
-use storage::content_manager::toc::dispatcher::TocDispatcher;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
 #[cfg(all(
@@ -44,7 +44,6 @@     create_general_purpose_runtime, create_search_runtime, create_update_runtime,
     load_tls_client_config,
 };
-use crate::common::inference::service::InferenceService;
 use crate::common::telemetry::TelemetryCollector;
 use crate::common::telemetry_reporting::TelemetryReporter;
 use crate::greeting::welcome;
@@ -76,8 +75,6 @@     /// Uri of this peer.
     /// Other peers should be able to reach it by this uri.
     ///
-    /// This value has to be supplied if this is the first peer in a new deployment.
-    ///
     /// In case this is not the first peer and it bootstraps the value is optional.
     /// If not supplied then qdrant will take internal grpc port from config and derive the IP address of this peer on bootstrap peer (receiving side)
     #[arg(long, value_parser, value_name = "URI", env = "QDRANT_URI")]
@@ -177,6 +174,38 @@ 
     welcome(&settings);
 
+    // Validate as soon as possible, but we must initialize logging first
+    settings.validate_and_warn();
+
+    // Report feature flags that are enabled for easier debugging
+    let flags = feature_flags();
+    if !flags.is_default() {
+        log::debug!("Feature flags: {flags:?}");
+    }
+
+    if let Some(recovery_warning) = &settings.storage.recovery_mode {
+        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
+        log::warn!(
+            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
+        );
+    }
+
+    // Inference Service
+    //
+    if let Some(inference_config) = settings.inference.clone() {
+        match crate::common::inference::service::InferenceService::init_global(inference_config) {
+            Ok(_) => {
+                log::info!("Inference service is configured.");
+            }
+            Err(err) => {
+                log::error!("{err}");
+            }
+        }
+    } else {
+        log::info!("Inference service is not configured.");
+    }
+
+    // GPU HNSW
     #[cfg(feature = "gpu")]
     if let Some(settings_gpu) = &settings.gpu {
         use segment::index::hnsw_index::gpu::*;
@@ -204,20 +233,8 @@         }
     }
 
-    if let Some(recovery_warning) = &settings.storage.recovery_mode {
-        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
-        log::warn!(
-            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
-        );
-    }
-
-    // Validate as soon as possible, but we must initialize logging first
-    settings.validate_and_warn();
-
-    // Report feature flags that are enabled for easier debugging
-    let flags = feature_flags();
-    if !flags.is_default() {
-        log::debug!("Feature flags: {flags:?}");
+    if settings.service.hardware_reporting == Some(true) {
+        log::info!("Hardware reporting enabled");
     }
 
     let bootstrap = if args.bootstrap == args.uri {
@@ -269,11 +286,9 @@     // destruction of it
     let search_runtime = create_search_runtime(settings.storage.performance.max_search_threads)
         .expect("Can't search create runtime.");
-
     let update_runtime =
         create_update_runtime(settings.storage.performance.max_optimization_threads)
             .expect("Can't optimizer create runtime.");
-
     let general_runtime =
         create_general_purpose_runtime().expect("Can't optimizer general purpose runtime.");
     let runtime_handle = general_runtime.handle().clone();
@@ -286,7 +301,7 @@     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
+    let propose_operation_sender = if is_distributed_deployment {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
@@ -332,19 +347,17 @@ 
     toc.clear_all_tmp_directories()?;
 
+    let toc_arc = Arc::new(toc);
+
     // Here we load all stored collections.
     runtime_handle.block_on(async {
-        for collection in toc.all_collections(&FULL_ACCESS).await {
+        for collection in toc_arc.all_collections(&FULL_ACCESS).await {
             log::debug!("Loaded collection: {collection}");
         }
     });
 
-    let toc_arc = Arc::new(toc);
     let storage_path = toc_arc.storage_path();
-
-    // Holder for all actively running threads of the service: web, gPRC, consensus, etc.
     let mut handles: Vec<JoinHandle<Result<(), Error>>> = vec![];
-
     // Router for external queries.
     // It decides if query should go directly to the ToC or through the consensus.
     let mut dispatcher = Dispatcher::new(toc_arc.clone());
@@ -372,12 +385,7 @@             TelemetryCollector::new(settings.clone(), dispatcher_arc.clone(), reporting_id);
         let tonic_telemetry_collector = telemetry_collector.tonic_telemetry_collector.clone();
 
-        // `raft` crate uses `slog` crate so it is needed to use `slog_stdlog::StdLog` to forward
-        // logs from it to `log` crate
-        let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
-
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
+        // Health checker
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
@@ -386,8 +394,10 @@             consensus_state.is_new_deployment() && bootstrap.is_some(),
         ));
 
+        // Runs raft consensus in a separate thread.
+        // Create a pipe `message_sender` to communicate with the consensus
         let handle = Consensus::run(
-            &slog_logger,
+            &slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!()),
             consensus_state.clone(),
             bootstrap,
             args.uri.map(|uri| uri.to_string()),
@@ -464,7 +474,6 @@     // Telemetry reporting
     //
 
-    let reporting_id = telemetry_collector.reporting_id();
     let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
 
     if reporting_enabled {
@@ -492,29 +501,15 @@     };
 
     //
-    // Inference Service
-    //
-    if let Some(inference_config) = settings.inference.clone() {
-        match InferenceService::init_global(inference_config) {
-            Ok(_) => {
-                log::info!("Inference service is configured.");
-            }
-            Err(err) => {
-                log::error!("{err}");
-            }
-        }
-    } else {
-        log::info!("Inference service is not configured.");
-    }
-
-    //
     // REST API server
     //
-
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let health_checker = health_checker.clone();
+        let telemetry_collector = telemetry_collector.clone();
         let settings = settings.clone();
+        let logger_handle = logger_handle.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
             .spawn(move || {
@@ -536,7 +531,6 @@     //
     // gRPC server
     //
-
     if let Some(grpc_port) = settings.service.grpc_port {
         let settings = settings.clone();
         let handle = thread::Builder::new()
@@ -545,11 +539,11 @@                 log_err_if_any(
                     "gRPC",
                     tonic::init(
-                        dispatcher_arc,
+                        dispatcher_arc.clone(),
                         tonic_telemetry_collector,
                         settings,
                         grpc_port,
-                        runtime_handle,
+                        runtime_handle.clone(),
                     ),
                 )
             })
@@ -561,9 +555,8 @@ 
     #[cfg(feature = "service_debug")]
     {
+        use parking_lot::deadlock;
         use std::fmt::Write;
-
-        use parking_lot::deadlock;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
@@ -607,5 +600,6 @@     }
     drop(toc_arc);
     drop(settings);
+
     Ok(())
 }