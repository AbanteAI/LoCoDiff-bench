
index c6d1df953..54813a148 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpilnk_w36_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp6q1ec51u_actual.txt	
@@ -25,13 +25,12 @@ use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
 use collection::shards::channel_service::ChannelService;
 use consensus::Consensus;
-use slog::Drain;
 use startup::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
-use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
+use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
 #[cfg(all(
@@ -205,7 +204,7 @@ fn main() -> anyhow::Result<()> {
     }
 
     if let Some(recovery_warning) = &settings.storage.recovery_mode {
-        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
+        log::warn!("Qdrant is loaded in recovery mode: {}", recovery_warning);
         log::warn!(
             "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
         );
@@ -216,7 +215,7 @@ fn main() -> anyhow::Result<()> {
 
     // Report feature flags that are enabled for easier debugging
     let flags = feature_flags();
-    if !flags.is_default() {
+    if !flags.is_empty() {
         log::debug!("Feature flags: {flags:?}");
     }
 
@@ -286,6 +285,7 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
+    // High-level channel which could be used to send User-space consensus operations
     let propose_operation_sender = if settings.cluster.enabled {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
@@ -468,7 +468,7 @@ fn main() -> anyhow::Result<()> {
     let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
 
     if reporting_enabled {
-        log::info!("Telemetry reporting enabled, id: {reporting_id}");
+        log::info!("Telemetry reporting enabled, id: {}", reporting_id);
 
         runtime_handle.spawn(TelemetryReporter::run(telemetry_collector.clone()));
     } else {
@@ -485,7 +485,7 @@ fn main() -> anyhow::Result<()> {
     // Helper to better log start errors
     let log_err_if_any = |server_name, result| match result {
         Err(err) => {
-            log::error!("Error while starting {server_name} server: {err}");
+            log::error!("Error while starting {} server: {}", server_name, err);
             Err(err)
         }
         ok => ok,
@@ -514,6 +514,7 @@ fn main() -> anyhow::Result<()> {
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
         let settings = settings.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
@@ -561,9 +562,8 @@ fn main() -> anyhow::Result<()> {
 
     #[cfg(feature = "service_debug")]
     {
-        use std::fmt::Write;
-
         use parking_lot::deadlock;
+        use std::fmt::Write;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
@@ -590,7 +590,7 @@ fn main() -> anyhow::Result<()> {
                             .expect("fail to writeln!");
                         }
                     }
-                    log::error!("{error}");
+                    log::error!("{}", error);
                 }
             })
             .unwrap();
