
index c6d1df953..22b232fb1 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpraw7dgp4_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmps0miumjm_actual.txt	
@@ -1,3 +1,10 @@
+#[cfg(all(
+    not(target_env = "msvc"),
+    any(target_arch = "x86_64", target_arch = "aarch64")
+))]
+#[global_allocator]
+static GLOBAL: tikv_jemallocator::Jemalloc = tikv_jemallocator::Jemalloc;
+
 #[cfg(feature = "web")]
 mod actix;
 mod common;
@@ -11,54 +18,36 @@ mod startup;
 mod tonic;
 mod tracing;
 
+use ::common::budget::{get_io_budget, ResourceBudget};
+use ::common::cpu::get_cpu_budget;
+use ::common::flags::{feature_flags, init_feature_flags};
+use ::tonic::transport::Uri;
 use std::io::Error;
 use std::sync::Arc;
-use std::thread;
-use std::thread::JoinHandle;
+use std::thread::{self, JoinHandle};
 use std::time::Duration;
 
-use ::common::budget::{ResourceBudget, get_io_budget};
-use ::common::cpu::get_cpu_budget;
-use ::common::flags::{feature_flags, init_feature_flags};
-use ::tonic::transport::Uri;
 use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
 use collection::shards::channel_service::ChannelService;
 use consensus::Consensus;
-use slog::Drain;
-use startup::setup_panic_hook;
+use starting::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
-use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
+use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
-#[cfg(all(
-    not(target_env = "msvc"),
-    any(target_arch = "x86_64", target_arch = "aarch64")
-))]
-use tikv_jemallocator::Jemalloc;
-
 use crate::common::helpers::{
     create_general_purpose_runtime, create_search_runtime, create_update_runtime,
     load_tls_client_config,
 };
-use crate::common::inference::service::InferenceService;
 use crate::common::telemetry::TelemetryCollector;
 use crate::common::telemetry_reporting::TelemetryReporter;
 use crate::greeting::welcome;
-use crate::migrations::single_to_cluster::handle_existing_collections;
 use crate::settings::Settings;
 use crate::snapshots::{recover_full_snapshot, recover_snapshots};
-use crate::startup::{remove_started_file_indicator, touch_started_file_indicator};
-
-#[cfg(all(
-    not(target_env = "msvc"),
-    any(target_arch = "x86_64", target_arch = "aarch64")
-))]
-#[global_allocator]
-static GLOBAL: Jemalloc = Jemalloc;
 
 const FULL_ACCESS: Access = Access::full("For main");
 
@@ -148,9 +137,6 @@ fn main() -> anyhow::Result<()> {
 
     let settings = Settings::new(args.config_path)?;
 
-    // Set global feature flags, sourced from configuration
-    init_feature_flags(settings.feature_flags);
-
     let reporting_enabled = !settings.telemetry_disabled && !args.disable_telemetry;
 
     let reporting_id = TelemetryCollector::generate_id();
@@ -162,7 +148,7 @@ fn main() -> anyhow::Result<()> {
             .with_top_level_directive(settings.log_level.clone()),
     )?;
 
-    remove_started_file_indicator();
+    startup::remove_started_file_indicator();
 
     setup_panic_hook(reporting_enabled, reporting_id.to_string());
 
@@ -175,41 +161,8 @@ fn main() -> anyhow::Result<()> {
             .unwrap_or_default(),
     );
 
-    welcome(&settings);
-
-    #[cfg(feature = "gpu")]
-    if let Some(settings_gpu) = &settings.gpu {
-        use segment::index::hnsw_index::gpu::*;
-
-        // initialize GPU devices manager.
-        if settings_gpu.indexing {
-            set_gpu_force_half_precision(settings_gpu.force_half_precision);
-            set_gpu_groups_count(settings_gpu.groups_count);
-
-            let mut gpu_device_manager = GPU_DEVICES_MANAGER.write();
-            *gpu_device_manager = match gpu_devices_manager::GpuDevicesMaganer::new(
-                &settings_gpu.device_filter,
-                settings_gpu.devices.as_deref(),
-                settings_gpu.allow_integrated,
-                settings_gpu.allow_emulated,
-                true, // Currently we always wait for the free gpu device.
-                settings_gpu.parallel_indexes.unwrap_or(1),
-            ) {
-                Ok(gpu_device_manager) => Some(gpu_device_manager),
-                Err(err) => {
-                    log::error!("Can't initialize GPU devices manager: {err}");
-                    None
-                }
-            }
-        }
-    }
-
-    if let Some(recovery_warning) = &settings.storage.recovery_mode {
-        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
-        log::warn!(
-            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
-        );
-    }
+    // Set global feature flags, sourced from configuration
+    init_feature_flags(settings.feature_flags);
 
     // Validate as soon as possible, but we must initialize logging first
     settings.validate_and_warn();
@@ -265,6 +218,15 @@ fn main() -> anyhow::Result<()> {
         vec![]
     };
 
+    welcome(&settings);
+
+    if let Some(recovery_warning) = &settings.storage.recovery_mode {
+        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
+        log::warn!(
+            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
+        );
+    }
+
     // Create and own search runtime out of the scope of async context to ensure correct
     // destruction of it
     let search_runtime = create_search_runtime(settings.storage.performance.max_search_threads)
@@ -286,7 +248,7 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
+    let propose_operation_sender = if is_distributed_deployment {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
@@ -341,10 +303,8 @@ fn main() -> anyhow::Result<()> {
 
     let toc_arc = Arc::new(toc);
     let storage_path = toc_arc.storage_path();
-
     // Holder for all actively running threads of the service: web, gPRC, consensus, etc.
     let mut handles: Vec<JoinHandle<Result<(), Error>>> = vec![];
-
     // Router for external queries.
     // It decides if query should go directly to the ToC or through the consensus.
     let mut dispatcher = Dispatcher::new(toc_arc.clone());
@@ -359,8 +319,10 @@ fn main() -> anyhow::Result<()> {
         .into();
         let is_new_deployment = consensus_state.is_new_deployment();
 
-        dispatcher =
-            dispatcher.with_consensus(consensus_state.clone(), settings.cluster.resharding_enabled);
+        dispatcher = dispatcher.with_consensus(
+            consensus_state.clone(),
+            settings.cluster.resharding_enabled,
+        );
 
         let toc_dispatcher = TocDispatcher::new(Arc::downgrade(&toc_arc), consensus_state.clone());
         toc_arc.with_toc_dispatcher(toc_dispatcher);
@@ -372,10 +334,6 @@ fn main() -> anyhow::Result<()> {
             TelemetryCollector::new(settings.clone(), dispatcher_arc.clone(), reporting_id);
         let tonic_telemetry_collector = telemetry_collector.tonic_telemetry_collector.clone();
 
-        // `raft` crate uses `slog` crate so it is needed to use `slog_stdlog::StdLog` to forward
-        // logs from it to `log` crate
-        let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
-
         // Runs raft consensus in a separate thread.
         // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
@@ -403,23 +361,6 @@ fn main() -> anyhow::Result<()> {
 
         handles.push(handle);
 
-        let toc_arc_clone = toc_arc.clone();
-        let consensus_state_clone = consensus_state.clone();
-        let _cancel_transfer_handle = runtime_handle.spawn(async move {
-            consensus_state_clone.is_leader_established.await_ready();
-            match toc_arc_clone
-                .cancel_related_transfers("Source or target peer restarted")
-                .await
-            {
-                Ok(_) => {
-                    log::debug!("All transfers if any cancelled");
-                }
-                Err(err) => {
-                    log::error!("Can't cancel related transfers: {err}");
-                }
-            }
-        });
-
         // TODO(resharding): Remove resharding driver?
         //
         // runtime_handle.block_on(async {
@@ -475,22 +416,6 @@ fn main() -> anyhow::Result<()> {
         log::info!("Telemetry reporting disabled");
     }
 
-    if settings.service.hardware_reporting == Some(true) {
-        log::info!("Hardware reporting enabled");
-    }
-
-    // Setup subscribers to listen for issue-able events
-    issues_setup::setup_subscribers(&settings);
-
-    // Helper to better log start errors
-    let log_err_if_any = |server_name, result| match result {
-        Err(err) => {
-            log::error!("Error while starting {server_name} server: {err}");
-            Err(err)
-        }
-        ok => ok,
-    };
-
     //
     // Inference Service
     //
@@ -510,10 +435,26 @@ fn main() -> anyhow::Result<()> {
     //
     // REST API server
     //
+    if settings.service.hardware_reporting == Some(true) {
+        log::info!("Hardware reporting enabled");
+    }
+
+    // Setup subscribers to listen for issue-able events
+    issues_setup::setup_subscribers(&settings);
+
+    // Helper to better log start errors
+    let log_err_if_any = |server_name, result| match result {
+        Err(err) => {
+            log::error!("Error while starting {server_name} server: {err}");
+            Err(err)
+        }
+        ok => ok,
+    };
 
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let telemetry_collector = Arc::clone(&telemetry_collector);
         let settings = settings.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
@@ -536,7 +477,6 @@ fn main() -> anyhow::Result<()> {
     //
     // gRPC server
     //
-
     if let Some(grpc_port) = settings.service.grpc_port {
         let settings = settings.clone();
         let handle = thread::Builder::new()
@@ -561,9 +501,8 @@ fn main() -> anyhow::Result<()> {
 
     #[cfg(feature = "service_debug")]
     {
-        use std::fmt::Write;
-
         use parking_lot::deadlock;
+        use std::fmt::Write;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
@@ -596,7 +535,7 @@ fn main() -> anyhow::Result<()> {
             .unwrap();
     }
 
-    touch_started_file_indicator();
+    startup::touch_started_file_indicator();
 
     for handle in handles {
         log::debug!(
