
index c6d1df95..ba000b46 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpz1pr_lfi_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmph3t7ehm__actual.txt	
@@ -25,6 +25,8 @@ use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
 use collection::shards::channel_service::ChannelService;
 use consensus::Consensus;
+use memory::madvise;
+use segment::vector_storage::common::set_async_scorer;
 use slog::Drain;
 use startup::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
@@ -177,43 +179,6 @@ fn main() -> anyhow::Result<()> {
 
     welcome(&settings);
 
-    #[cfg(feature = "gpu")]
-    if let Some(settings_gpu) = &settings.gpu {
-        use segment::index::hnsw_index::gpu::*;
-
-        // initialize GPU devices manager.
-        if settings_gpu.indexing {
-            set_gpu_force_half_precision(settings_gpu.force_half_precision);
-            set_gpu_groups_count(settings_gpu.groups_count);
-
-            let mut gpu_device_manager = GPU_DEVICES_MANAGER.write();
-            *gpu_device_manager = match gpu_devices_manager::GpuDevicesMaganer::new(
-                &settings_gpu.device_filter,
-                settings_gpu.devices.as_deref(),
-                settings_gpu.allow_integrated,
-                settings_gpu.allow_emulated,
-                true, // Currently we always wait for the free gpu device.
-                settings_gpu.parallel_indexes.unwrap_or(1),
-            ) {
-                Ok(gpu_device_manager) => Some(gpu_device_manager),
-                Err(err) => {
-                    log::error!("Can't initialize GPU devices manager: {err}");
-                    None
-                }
-            }
-        }
-    }
-
-    if let Some(recovery_warning) = &settings.storage.recovery_mode {
-        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
-        log::warn!(
-            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
-        );
-    }
-
-    // Validate as soon as possible, but we must initialize logging first
-    settings.validate_and_warn();
-
     // Report feature flags that are enabled for easier debugging
     let flags = feature_flags();
     if !flags.is_default() {
@@ -231,6 +196,16 @@ fn main() -> anyhow::Result<()> {
         args.bootstrap
     };
 
+    if let Some(recovery_warning) = &settings.storage.recovery_mode {
+        log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
+        log::warn!(
+            "Read more: https://qdrant.tech/documentation/guides/administration/#recovery-mode"
+        );
+    }
+
+    // Validate as soon as possible, but we must initialize logging first
+    settings.validate_and_warn();
+
     // Saved state of the consensus.
     let persistent_consensus_state = Persistent::load_or_init(
         &settings.storage.storage_path,
@@ -286,7 +261,7 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
+    let propose_operation_sender = if is_distributed_deployment {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
@@ -341,7 +316,6 @@ fn main() -> anyhow::Result<()> {
 
     let toc_arc = Arc::new(toc);
     let storage_path = toc_arc.storage_path();
-
     // Holder for all actively running threads of the service: web, gPRC, consensus, etc.
     let mut handles: Vec<JoinHandle<Result<(), Error>>> = vec![];
 
@@ -376,8 +350,6 @@ fn main() -> anyhow::Result<()> {
         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
 
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
@@ -386,6 +358,8 @@ fn main() -> anyhow::Result<()> {
             consensus_state.is_new_deployment() && bootstrap.is_some(),
         ));
 
+        // Runs raft consensus in a separate thread.
+        // Create a pipe `message_sender` to communicate with the consensus
         let handle = Consensus::run(
             &slog_logger,
             consensus_state.clone(),
@@ -420,12 +394,6 @@ fn main() -> anyhow::Result<()> {
             }
         });
 
-        // TODO(resharding): Remove resharding driver?
-        //
-        // runtime_handle.block_on(async {
-        //     toc_arc.resume_resharding_tasks().await;
-        // });
-
         let collections_to_recover_in_consensus = if is_new_deployment {
             let existing_collections =
                 runtime_handle.block_on(toc_arc.all_collections(&FULL_ACCESS));
@@ -559,11 +527,37 @@ fn main() -> anyhow::Result<()> {
         log::info!("gRPC endpoint disabled");
     }
 
+    #[cfg(feature = "gpu")]
+    if let Some(settings_gpu) = &settings.gpu {
+        use segment::index::hnsw_index::gpu::*;
+
+        // initialize GPU devices manager.
+        if settings_gpu.indexing {
+            set_gpu_force_half_precision(settings_gpu.force_half_precision);
+            set_gpu_groups_count(settings_gpu.groups_count);
+
+            let mut gpu_device_manager = GPU_DEVICES_MANAGER.write();
+            *gpu_device_manager = match gpu_devices_manager::GpuDevicesMaganer::new(
+                &settings_gpu.device_filter,
+                settings_gpu.devices.as_deref(),
+                settings_gpu.allow_integrated,
+                settings_gpu.allow_emulated,
+                true, // Currently we always wait for the free gpu device.
+                settings_gpu.parallel_indexes.unwrap_or(1),
+            ) {
+                Ok(gpu_device_manager) => Some(gpu_device_manager),
+                Err(err) => {
+                    log::error!("Can't initialize GPU devices manager: {err}");
+                    None
+                }
+            }
+        }
+    }
+
     #[cfg(feature = "service_debug")]
     {
-        use std::fmt::Write;
-
         use parking_lot::deadlock;
+        use std::fmt::Write;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
