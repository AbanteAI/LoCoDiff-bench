
index c6d1df953..0d6031941 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpovilx7ix_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp43g373lc_actual.txt	
@@ -286,7 +286,7 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
-    let propose_operation_sender = if settings.cluster.enabled {
+    let propose_operation_sender = if is_distributed_deployment {
         // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
@@ -335,7 +335,7 @@ fn main() -> anyhow::Result<()> {
     // Here we load all stored collections.
     runtime_handle.block_on(async {
         for collection in toc.all_collections(&FULL_ACCESS).await {
-            log::debug!("Loaded collection: {collection}");
+            log::debug!("Loaded collection: {}", collection.name());
         }
     });
 
@@ -375,7 +375,6 @@ fn main() -> anyhow::Result<()> {
         // `raft` crate uses `slog` crate so it is needed to use `slog_stdlog::StdLog` to forward
         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
-
         // Runs raft consensus in a separate thread.
         // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
@@ -514,6 +513,7 @@ fn main() -> anyhow::Result<()> {
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let telemetry_collector = telemetry_collector.clone();
         let settings = settings.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
