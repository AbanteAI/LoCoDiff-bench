
index c6d1df95..c1a10d4e 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpim2d91yb_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp4s9_7gvk_actual.txt	
@@ -3,7 +3,6 @@ mod actix;
 mod common;
 mod consensus;
 mod greeting;
-mod issues_setup;
 mod migrations;
 mod settings;
 mod snapshots;
@@ -30,8 +29,8 @@ use startup::setup_panic_hook;
 use storage::content_manager::consensus::operation_sender::OperationSender;
 use storage::content_manager::consensus::persistent::Persistent;
 use storage::content_manager::consensus_manager::{ConsensusManager, ConsensusStateRef};
-use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
+use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
 #[cfg(all(
@@ -146,6 +145,8 @@ fn main() -> anyhow::Result<()> {
         return Ok(());
     }
 
+    remove_started_file_indicator();
+
     let settings = Settings::new(args.config_path)?;
 
     // Set global feature flags, sourced from configuration
@@ -376,8 +377,6 @@ fn main() -> anyhow::Result<()> {
         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
 
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
