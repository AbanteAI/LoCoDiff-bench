
index c6d1df95..6f84e146 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmpzpl4z8c__expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp8k3uga37_actual.txt	
@@ -1,29 +1,28 @@
+#![allow(deprecated)]
+
 #[cfg(feature = "web")]
 mod actix;
 mod common;
 mod consensus;
 mod greeting;
-mod issues_setup;
 mod migrations;
 mod settings;
 mod snapshots;
 mod startup;
 mod tonic;
-mod tracing;
 
+#[cfg(not(target_env = "msvc"))]
+use jemallocator::Jemalloc;
 use std::io::Error;
 use std::sync::Arc;
 use std::thread;
 use std::thread::JoinHandle;
 use std::time::Duration;
 
-use ::common::budget::{ResourceBudget, get_io_budget};
-use ::common::cpu::get_cpu_budget;
-use ::common::flags::{feature_flags, init_feature_flags};
 use ::tonic::transport::Uri;
 use api::grpc::transport_channel_pool::TransportChannelPool;
 use clap::Parser;
-use collection::shards::channel_service::ChannelService;
+use collection::shard::ChannelService;
 use consensus::Consensus;
 use slog::Drain;
 use startup::setup_panic_hook;
@@ -34,25 +33,6 @@ use storage::content_manager::toc::TableOfContent;
 use storage::content_manager::toc::dispatcher::TocDispatcher;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::Access;
-#[cfg(all(
-    not(target_env = "msvc"),
-    any(target_arch = "x86_64", target_arch = "aarch64")
-))]
-use tikv_jemallocator::Jemalloc;
-
-use crate::common::helpers::{
-    create_general_purpose_runtime, create_search_runtime, create_update_runtime,
-    load_tls_client_config,
-};
-use crate::common::inference::service::InferenceService;
-use crate::common::telemetry::TelemetryCollector;
-use crate::common::telemetry_reporting::TelemetryReporter;
-use crate::greeting::welcome;
-use crate::migrations::single_to_cluster::handle_existing_collections;
-use crate::settings::Settings;
-use crate::snapshots::{recover_full_snapshot, recover_snapshots};
-use crate::startup::{remove_started_file_indicator, touch_started_file_indicator};
-
 #[cfg(all(
     not(target_env = "msvc"),
     any(target_arch = "x86_64", target_arch = "aarch64")
@@ -76,8 +56,6 @@ struct Args {
     /// Uri of this peer.
     /// Other peers should be able to reach it by this uri.
     ///
-    /// This value has to be supplied if this is the first peer in a new deployment.
-    ///
     /// In case this is not the first peer and it bootstraps the value is optional.
     /// If not supplied then qdrant will take internal grpc port from config and derive the IP address of this peer on bootstrap peer (receiving side)
     #[arg(long, value_parser, value_name = "URI", env = "QDRANT_URI")]
@@ -105,20 +83,7 @@ struct Args {
     #[arg(long, value_name = "PATH")]
     storage_snapshot: Option<String>,
 
-    /// Path to an alternative configuration file.
-    /// Format: <config_file_path>
-    ///
-    /// Default path: config/config.yaml
-    #[arg(long, value_name = "PATH")]
-    config_path: Option<String>,
-
-    /// Disable telemetry sending to developers
-    /// If provided - telemetry collection will be disabled.
-    /// Read more: <https://qdrant.tech/documentation/guides/telemetry>
-    #[arg(long, action, default_value_t = false)]
-    disable_telemetry: bool,
-
-    /// Run stacktrace collector. Used for debugging.
+    /// Return stacktrace information from Qdrant process. Beware: it doesn't remedy the situation, it just helps to report the issue.
     #[arg(long, action, default_value_t = false)]
     stacktrace: bool,
 
@@ -132,12 +97,22 @@ struct Args {
     ///             It'll also compact consensus WAL to force snapshot
     #[arg(long, action, default_value_t = false)]
     reinit: bool,
+
+    /// Path to an alternative configuration file.
+    /// Format: <config_file_path>
+    ///
+    /// Default path: config/config.yaml
+    #[arg(long, value_name = "PATH")]
+    config_path: Option<String>,
+
+    /// Disable telemetry sending to developers
+    /// If provided - telemetry collection will be disabled.
+    /// Read more: <https://qdrant.tech/documentation/guides/telemetry>
+    #[arg(long, action, default_value_t = false)]
+    disable_telemetry: bool,
 }
 
 fn main() -> anyhow::Result<()> {
-    let args = Args::parse();
-
-    // Run backtrace collector, expected to used by `rstack` crate
     if args.stacktrace {
         #[cfg(all(target_os = "linux", feature = "stacktrace"))]
         {
@@ -148,14 +123,10 @@ fn main() -> anyhow::Result<()> {
 
     let settings = Settings::new(args.config_path)?;
 
-    // Set global feature flags, sourced from configuration
-    init_feature_flags(settings.feature_flags);
-
     let reporting_enabled = !settings.telemetry_disabled && !args.disable_telemetry;
 
     let reporting_id = TelemetryCollector::generate_id();
 
-    // Setup logging (no logging before this point)
     let logger_handle = tracing::setup(
         settings
             .logger
@@ -177,33 +148,6 @@ fn main() -> anyhow::Result<()> {
 
     welcome(&settings);
 
-    #[cfg(feature = "gpu")]
-    if let Some(settings_gpu) = &settings.gpu {
-        use segment::index::hnsw_index::gpu::*;
-
-        // initialize GPU devices manager.
-        if settings_gpu.indexing {
-            set_gpu_force_half_precision(settings_gpu.force_half_precision);
-            set_gpu_groups_count(settings_gpu.groups_count);
-
-            let mut gpu_device_manager = GPU_DEVICES_MANAGER.write();
-            *gpu_device_manager = match gpu_devices_manager::GpuDevicesMaganer::new(
-                &settings_gpu.device_filter,
-                settings_gpu.devices.as_deref(),
-                settings_gpu.allow_integrated,
-                settings_gpu.allow_emulated,
-                true, // Currently we always wait for the free gpu device.
-                settings_gpu.parallel_indexes.unwrap_or(1),
-            ) {
-                Ok(gpu_device_manager) => Some(gpu_device_manager),
-                Err(err) => {
-                    log::error!("Can't initialize GPU devices manager: {err}");
-                    None
-                }
-            }
-        }
-    }
-
     if let Some(recovery_warning) = &settings.storage.recovery_mode {
         log::warn!("Qdrant is loaded in recovery mode: {recovery_warning}");
         log::warn!(
@@ -279,6 +223,7 @@ fn main() -> anyhow::Result<()> {
     let runtime_handle = general_runtime.handle().clone();
 
     // Use global CPU budget for optimizations based on settings
+    loadgen_test::set_load_gen(settings.storage.performance.load_gen);
     let cpu_budget = get_cpu_budget(settings.storage.performance.optimizer_cpu_budget);
     let io_budget = get_io_budget(settings.storage.performance.optimizer_io_budget, cpu_budget);
     let optimizer_resource_budget = ResourceBudget::new(cpu_budget, io_budget);
@@ -286,27 +231,21 @@ fn main() -> anyhow::Result<()> {
     // Create a signal sender and receiver. It is used to communicate with the consensus thread.
     let (propose_sender, propose_receiver) = std::sync::mpsc::channel();
 
+    // High-level channel which could be used to send User-space consensus operations
     let propose_operation_sender = if settings.cluster.enabled {
-        // High-level channel which could be used to send User-space consensus operations
         Some(OperationSender::new(propose_sender))
     } else {
-        // We don't need sender for the single-node mode
         None
     };
 
-    // Channel service is used to manage connections between peers.
-    // It allocates required number of channels and manages proper reconnection handling
-    let mut channel_service =
-        ChannelService::new(settings.service.http_port, settings.service.api_key.clone());
+    let mut channel_service = ChannelService::new(settings.service.http_port);
 
     if is_distributed_deployment {
-        // We only need channel_service in case if cluster is enabled.
-        // So we initialize it with real values here
+        let tls_config = load_tls_client_config(&settings)?;
+
         let p2p_grpc_timeout = Duration::from_millis(settings.cluster.grpc_timeout_ms);
         let connection_timeout = Duration::from_millis(settings.cluster.connection_timeout_ms);
 
-        let tls_config = load_tls_client_config(&settings)?;
-
         channel_service.channel_pool = Arc::new(TransportChannelPool::new(
             p2p_grpc_timeout,
             connection_timeout,
@@ -344,7 +283,6 @@ fn main() -> anyhow::Result<()> {
 
     // Holder for all actively running threads of the service: web, gPRC, consensus, etc.
     let mut handles: Vec<JoinHandle<Result<(), Error>>> = vec![];
-
     // Router for external queries.
     // It decides if query should go directly to the ToC or through the consensus.
     let mut dispatcher = Dispatcher::new(toc_arc.clone());
@@ -355,6 +293,7 @@ fn main() -> anyhow::Result<()> {
             toc_arc.clone(),
             propose_operation_sender.unwrap(),
             storage_path,
+            settings.cluster.resharding_enabled,
         )
         .into();
         let is_new_deployment = consensus_state.is_new_deployment();
@@ -367,29 +306,18 @@ fn main() -> anyhow::Result<()> {
 
         let dispatcher_arc = Arc::new(dispatcher);
 
-        // Monitoring and telemetry.
-        let telemetry_collector =
-            TelemetryCollector::new(settings.clone(), dispatcher_arc.clone(), reporting_id);
-        let tonic_telemetry_collector = telemetry_collector.tonic_telemetry_collector.clone();
-
-        // `raft` crate uses `slog` crate so it is needed to use `slog_stdlog::StdLog` to forward
-        // logs from it to `log` crate
-        let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
-
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
             &runtime_handle,
             // NOTE: `wait_for_bootstrap` should be calculated *before* starting `Consensus` thread
-            consensus_state.is_new_deployment() && bootstrap.is_some(),
+            is_new_deployment && args.bootstrap.is_some(),
         ));
 
         let handle = Consensus::run(
             &slog_logger,
             consensus_state.clone(),
-            bootstrap,
+            args.bootstrap,
             args.uri.map(|uri| uri.to_string()),
             settings.clone(),
             channel_service,
@@ -403,11 +331,9 @@ fn main() -> anyhow::Result<()> {
 
         handles.push(handle);
 
-        let toc_arc_clone = toc_arc.clone();
-        let consensus_state_clone = consensus_state.clone();
-        let _cancel_transfer_handle = runtime_handle.spawn(async move {
-            consensus_state_clone.is_leader_established.await_ready();
-            match toc_arc_clone
+        runtime_handle.block_on(async {
+            consensus_state.is_leader_established.await_ready();
+            match toc_arc
                 .cancel_related_transfers("Source or target peer restarted")
                 .await
             {
@@ -420,12 +346,6 @@ fn main() -> anyhow::Result<()> {
             }
         });
 
-        // TODO(resharding): Remove resharding driver?
-        //
-        // runtime_handle.block_on(async {
-        //     toc_arc.resume_resharding_tasks().await;
-        // });
-
         let collections_to_recover_in_consensus = if is_new_deployment {
             let existing_collections =
                 runtime_handle.block_on(toc_arc.all_collections(&FULL_ACCESS));
@@ -442,12 +362,16 @@ fn main() -> anyhow::Result<()> {
                 toc_arc.clone(),
                 consensus_state.clone(),
                 dispatcher_arc.clone(),
-                consensus_state.this_peer_id(),
+                persistent_consensus_state.this_peer_id(),
                 collections_to_recover_in_consensus,
             ));
         }
 
-        (telemetry_collector, dispatcher_arc, Some(health_checker))
+        (
+            telemetry_collector,
+            dispatcher_arc,
+            Some(health_checker),
+        )
     } else {
         log::info!("Distributed mode disabled");
         let dispatcher_arc = Arc::new(dispatcher);
@@ -491,26 +415,9 @@ fn main() -> anyhow::Result<()> {
         ok => ok,
     };
 
-    //
-    // Inference Service
-    //
-    if let Some(inference_config) = settings.inference.clone() {
-        match InferenceService::init_global(inference_config) {
-            Ok(_) => {
-                log::info!("Inference service is configured.");
-            }
-            Err(err) => {
-                log::error!("{err}");
-            }
-        }
-    } else {
-        log::info!("Inference service is not configured.");
-    }
-
     //
     // REST API server
     //
-
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
@@ -536,7 +443,6 @@ fn main() -> anyhow::Result<()> {
     //
     // gRPC server
     //
-
     if let Some(grpc_port) = settings.service.grpc_port {
         let settings = settings.clone();
         let handle = thread::Builder::new()
@@ -555,45 +461,22 @@ fn main() -> anyhow::Result<()> {
             })
             .unwrap();
         handles.push(handle);
-    } else {
-        log::info!("gRPC endpoint disabled");
     }
 
-    #[cfg(feature = "service_debug")]
-    {
-        use std::fmt::Write;
-
-        use parking_lot::deadlock;
-
-        const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
-
-        thread::Builder::new()
-            .name("deadlock_checker".to_string())
-            .spawn(move || {
-                loop {
-                    thread::sleep(DEADLOCK_CHECK_PERIOD);
-                    let deadlocks = deadlock::check_deadlock();
-                    if deadlocks.is_empty() {
-                        continue;
-                    }
-
-                    let mut error = format!("{} deadlocks detected\n", deadlocks.len());
-                    for (i, threads) in deadlocks.iter().enumerate() {
-                        writeln!(error, "Deadlock #{i}").expect("fail to writeln!");
-                        for t in threads {
-                            writeln!(
-                                error,
-                                "Thread Id {:#?}\n{:#?}",
-                                t.thread_id(),
-                                t.backtrace(),
-                            )
-                            .expect("fail to writeln!");
-                        }
-                    }
-                    log::error!("{error}");
-                }
-            })
-            .unwrap();
+    //
+    // Inference Service
+    //
+    if let Some(inference_config) = settings.inference.clone() {
+        match InferenceService::init_global(inference_config) {
+            Ok(_) => {
+                log::info!("Inference service is configured.");
+            }
+            Err(err) => {
+                log::error!("{err}");
+            }
+        }
+    } else {
+        log::info!("Inference service is not configured.");
     }
 
     touch_started_file_indicator();
