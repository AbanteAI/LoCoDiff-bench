
index c6d1df953..0b8317180 100644
--- a/qdrant_src_main.rs_expectedoutput.txt (expected):tmp/tmp4ah0wo0z_expected.txt	
+++ b/qdrant_src_main.rs_extracted.txt (actual):tmp/tmp5s9t08th_actual.txt	
@@ -375,9 +375,6 @@ fn main() -> anyhow::Result<()> {
         // `raft` crate uses `slog` crate so it is needed to use `slog_stdlog::StdLog` to forward
         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
-
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
@@ -514,6 +511,7 @@ fn main() -> anyhow::Result<()> {
     #[cfg(feature = "web")]
     {
         let dispatcher_arc = dispatcher_arc.clone();
+        let telemetry_collector = Arc::new(tokio::sync::Mutex::new(telemetry_collector));
         let settings = settings.clone();
         let handle = thread::Builder::new()
             .name("web".to_string())
