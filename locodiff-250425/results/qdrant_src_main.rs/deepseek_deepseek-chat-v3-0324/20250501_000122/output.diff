--- qdrant_src_main.rs_expectedoutput.txt (expected)+++ qdrant_src_main.rs_extracted.txt (actual)@@ -1,3 +1,5 @@+#![allow(deprecated)]
+
 #[cfg(feature = "web")]
 mod actix;
 mod common;
@@ -231,15 +233,6 @@         args.bootstrap
     };
 
-    // Saved state of the consensus.
-    let persistent_consensus_state = Persistent::load_or_init(
-        &settings.storage.storage_path,
-        bootstrap.is_none(),
-        args.reinit,
-    )?;
-
-    let is_distributed_deployment = settings.cluster.enabled;
-
     let temp_path = settings.storage.temp_path.as_deref();
 
     let restored_collections = if let Some(full_snapshot) = args.storage_snapshot {
@@ -294,6 +287,13 @@         None
     };
 
+    // Saved state of the consensus.
+    let persistent_consensus_state = Persistent::load_or_init(
+        &settings.storage.storage_path,
+        bootstrap.is_none(),
+        args.reinit,
+    )?;
+
     // Channel service is used to manage connections between peers.
     // It allocates required number of channels and manages proper reconnection handling
     let mut channel_service =
@@ -376,8 +376,6 @@         // logs from it to `log` crate
         let slog_logger = slog::Logger::root(slog_stdlog::StdLog.fuse(), slog::o!());
 
-        // Runs raft consensus in a separate thread.
-        // Create a pipe `message_sender` to communicate with the consensus
         let health_checker = Arc::new(common::health::HealthChecker::spawn(
             toc_arc.clone(),
             consensus_state.clone(),
@@ -420,12 +418,6 @@             }
         });
 
-        // TODO(resharding): Remove resharding driver?
-        //
-        // runtime_handle.block_on(async {
-        //     toc_arc.resume_resharding_tasks().await;
-        // });
-
         let collections_to_recover_in_consensus = if is_new_deployment {
             let existing_collections =
                 runtime_handle.block_on(toc_arc.all_collections(&FULL_ACCESS));
@@ -494,6 +486,7 @@     //
     // Inference Service
     //
+
     if let Some(inference_config) = settings.inference.clone() {
         match InferenceService::init_global(inference_config) {
             Ok(_) => {
@@ -561,9 +554,8 @@ 
     #[cfg(feature = "service_debug")]
     {
+        use parking_lot::deadlock;
         use std::fmt::Write;
-
-        use parking_lot::deadlock;
 
         const DEADLOCK_CHECK_PERIOD: Duration = Duration::from_secs(10);
 
