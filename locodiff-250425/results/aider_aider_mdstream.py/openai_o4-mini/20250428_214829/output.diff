
index 3485b4b0..73ed647e 100644
--- a/aider_aider_mdstream.py_expectedoutput.txt (expected):tmp/tmpys28g_fl_expected.txt	
+++ b/aider_aider_mdstream.py_extracted.txt (actual):tmp/tmpkil5site_actual.txt	
@@ -25,8 +25,6 @@ the 1960s with the release of Letraset sheets containing Lorem Ipsum passages,
 and more recently with desktop publishing software like Aldus PageMaker
 including versions of Lorem Ipsum.
 
-
-
 ## Sub header
 
 - List 1
@@ -34,20 +32,16 @@ including versions of Lorem Ipsum.
 - List me
 - List you
 
-
-
 ```python
 """
 
 _text_suffix = """
 ```
-
 ## Sub header too
 
 The end.
 
-"""  # noqa: E501
-
+"""
 
 class NoInsetCodeBlock(CodeBlock):
     """A code block with syntax highlighting and no padding."""
@@ -57,7 +51,6 @@ class NoInsetCodeBlock(CodeBlock):
         syntax = Syntax(code, self.lexer_name, theme=self.theme, word_wrap=True, padding=(1, 0))
         yield syntax
 
-
 class LeftHeading(Heading):
     """A heading class that renders left-justified."""
 
@@ -77,7 +70,6 @@ class LeftHeading(Heading):
                 yield Text("")  # Keep the blank line before h2
             yield text
 
-
 class NoInsetMarkdown(Markdown):
     """Markdown with code blocks that have no padding and left-justified headings."""
 
@@ -88,7 +80,6 @@ class NoInsetMarkdown(Markdown):
         "heading_open": LeftHeading,
     }
 
-
 class MarkdownStream:
     """Streaming markdown renderer that progressively displays content with a live updating window.
 
@@ -96,7 +87,6 @@ class MarkdownStream:
     and partial updates. Maintains a sliding window of visible content while streaming
     in new markdown text.
     """
-
     live = None  # Rich Live display instance
     when = 0  # Timestamp of last update
     min_delay = 1.0 / 20  # Minimum time between updates (20fps)
@@ -119,6 +109,14 @@ class MarkdownStream:
         self.live = Live(Text(""), refresh_per_second=1.0 / self.min_delay)
         self.live.start()
 
+    def __del__(self):
+        """Destructor to ensure Live display is properly cleaned up."""
+        if self.live:
+            try:
+                self.live.stop()
+            except Exception:
+                pass  # Ignore any errors during cleanup
+
     def _render_markdown_to_lines(self, text):
         """Render markdown text to a list of lines.
 
@@ -138,14 +136,6 @@ class MarkdownStream:
         # Split rendered output into lines
         return output.splitlines(keepends=True)
 
-    def __del__(self):
-        """Destructor to ensure Live display is properly cleaned up."""
-        if self.live:
-            try:
-                self.live.stop()
-            except Exception:
-                pass  # Ignore any errors during cleanup
-
     def update(self, text, final=False):
         """Update the displayed markdown content.
 
@@ -174,7 +164,7 @@ class MarkdownStream:
         lines = self._render_markdown_to_lines(text)
         render_time = time.time() - start
 
-        # Set min_delay to render time plus a small buffer
+        # Set min_delay based on rendering speed: at least 1/20s, at most 2s
         self.min_delay = min(max(render_time * 10, 1.0 / 20), 2)
 
         num_lines = len(lines)
@@ -186,6 +176,7 @@ class MarkdownStream:
 
         # If we have stable content to display...
         if final or num_lines > 0:
+
             # How many stable lines do we need to newly show above the live window?
             num_printed = len(self.printed)
             show = num_lines - num_printed
@@ -221,7 +212,6 @@ class MarkdownStream:
         Splits text into chunks on blank lines "\n\n".
         """
 
-
 if __name__ == "__main__":
     with open("aider/io.py", "r") as f:
         code = f.read()
@@ -232,6 +222,4 @@ if __name__ == "__main__":
     print("Using NoInsetMarkdown for code blocks with padding=0")
     for i in range(6, len(_text), 5):
         pm.update(_text[:i])
-        time.sleep(0.01)
-
-    pm.update(_text, final=True)
\ No newline at end of file
+        time.sleep(0.01)
\ No newline at end of file
