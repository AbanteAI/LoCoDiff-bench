--- aider_aider_mdstream.py_expectedoutput.txt (expected)+++ aider_aider_mdstream.py_extracted.txt (actual)@@ -26,7 +26,6 @@ including versions of Lorem Ipsum.
 
 
-
 ## Sub header
 
 - List 1
@@ -35,7 +34,6 @@ - List you
 
 
-
 ```python
 """
 
@@ -46,7 +44,7 @@ 
 The end.
 
-"""  # noqa: E501
+"""
 
 
 class NoInsetCodeBlock(CodeBlock):
@@ -108,7 +106,7 @@         Args:
             mdargs (dict, optional): Additional arguments to pass to rich Markdown renderer
         """
-        self.printed = []  # Stores lines that have already been printed
+        self.printed = []
 
         if mdargs:
             self.mdargs = mdargs
@@ -186,22 +184,22 @@ 
         # If we have stable content to display...
         if final or num_lines > 0:
+
             # How many stable lines do we need to newly show above the live window?
             num_printed = len(self.printed)
             show = num_lines - num_printed
 
             # Skip if no new lines to show above live window
-            if show <= 0:
-                return
-
-            # Get the new lines and display them
-            show = lines[num_printed:num_lines]
-            show = "".join(show)
-            show = Text.from_ansi(show)
-            self.live.console.print(show)  # to the console above the live area
-
-            # Update our record of printed lines
-            self.printed = lines[:num_lines]
+            if show > 0:
+                # Get the new lines and display them
+                show_lines = lines[num_printed:num_lines]
+                show_text = "".join(show_lines)
+                show_text = Text.from_ansi(show_text)
+                # to the console above the live area
+                self.live.console.print(show_text)
+
+                # Update our record of printed lines
+                self.printed = lines[:num_lines]
 
         # Handle final update cleanup
         if final:
@@ -212,9 +210,9 @@ 
         # Update the live window with remaining lines
         rest = lines[num_lines:]
-        rest = "".join(rest)
-        rest = Text.from_ansi(rest)
-        self.live.update(rest)
+        rest_text = "".join(rest)
+        rest_text = Text.from_ansi(rest_text)
+        self.live.update(rest_text)
 
     def find_minimal_suffix(self, text, match_lines=50):
         """
