--- aider_aider_mdstream.py_expectedoutput.txt (expected)+++ aider_aider_mdstream.py_extracted.txt (actual)@@ -25,8 +25,6 @@ and more recently with desktop publishing software like Aldus PageMaker
 including versions of Lorem Ipsum.
 
-
-
 ## Sub header
 
 - List 1
@@ -34,20 +32,16 @@ - List me
 - List you
 
-
-
 ```python
 """
 
 _text_suffix = """
 ```
-
 ## Sub header too
 
 The end.
 
 """  # noqa: E501
-
 
 class NoInsetCodeBlock(CodeBlock):
     """A code block with syntax highlighting and no padding."""
@@ -91,7 +85,7 @@ 
 class MarkdownStream:
     """Streaming markdown renderer that progressively displays content with a live updating window.
-
+    
     Uses rich.console and rich.live to render markdown content with smooth scrolling
     and partial updates. Maintains a sliding window of visible content while streaming
     in new markdown text.
@@ -118,25 +112,6 @@         # Initialize rich Live display with empty text
         self.live = Live(Text(""), refresh_per_second=1.0 / self.min_delay)
         self.live.start()
-
-    def _render_markdown_to_lines(self, text):
-        """Render markdown text to a list of lines.
-
-        Args:
-            text (str): Markdown text to render
-
-        Returns:
-            list: List of rendered lines with line endings preserved
-        """
-        # Render the markdown to a string buffer
-        string_io = io.StringIO()
-        console = Console(file=string_io, force_terminal=True)
-        markdown = NoInsetMarkdown(text, **self.mdargs)
-        console.print(markdown)
-        output = string_io.getvalue()
-
-        # Split rendered output into lines
-        return output.splitlines(keepends=True)
 
     def __del__(self):
         """Destructor to ensure Live display is properly cleaned up."""
@@ -148,7 +123,7 @@ 
     def update(self, text, final=False):
         """Update the displayed markdown content.
-
+        
         Args:
             text (str): The markdown text received so far
             final (bool): If True, this is the final update and we should clean up
@@ -186,6 +161,7 @@ 
         # If we have stable content to display...
         if final or num_lines > 0:
+
             # How many stable lines do we need to newly show above the live window?
             num_printed = len(self.printed)
             show = num_lines - num_printed
@@ -194,7 +170,6 @@             if show <= 0:
                 return
 
-            # Get the new lines and display them
             show = lines[num_printed:num_lines]
             show = "".join(show)
             show = Text.from_ansi(show)
@@ -203,7 +178,6 @@             # Update our record of printed lines
             self.printed = lines[:num_lines]
 
-        # Handle final update cleanup
         if final:
             self.live.update(Text(""))
             self.live.stop()
@@ -221,6 +195,25 @@         Splits text into chunks on blank lines "\n\n".
         """
 
+    def _render_markdown_to_lines(self, text):
+        """Render markdown text to a list of lines.
+        
+        Args:
+            text (str): Markdown text to render
+
+        Returns:
+            list: List of rendered lines with line endings preserved
+        """
+        # Render the markdown to a string buffer
+        string_io = io.StringIO()
+        console = Console(file=string_io, force_terminal=True)
+        markdown = NoInsetMarkdown(text, **self.mdargs)
+        console.print(markdown)
+        output = string_io.getvalue()
+
+        # Split rendered output into lines
+        return output.splitlines(keepends=True)
+
 
 if __name__ == "__main__":
     with open("aider/io.py", "r") as f:
