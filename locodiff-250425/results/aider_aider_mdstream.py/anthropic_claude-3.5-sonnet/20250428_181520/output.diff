--- aider_aider_mdstream.py_expectedoutput.txt (expected)+++ aider_aider_mdstream.py_extracted.txt (actual)@@ -26,14 +26,12 @@ including versions of Lorem Ipsum.
 
 
-
 ## Sub header
 
 - List 1
 - List 2
 - List me
 - List you
-
 
 
 ```python
@@ -115,9 +113,16 @@         else:
             self.mdargs = dict()
 
-        # Initialize rich Live display with empty text
         self.live = Live(Text(""), refresh_per_second=1.0 / self.min_delay)
         self.live.start()
+
+    def __del__(self):
+        """Destructor to ensure Live display is properly cleaned up."""
+        if self.live:
+            try:
+                self.live.stop()
+            except Exception:
+                pass
 
     def _render_markdown_to_lines(self, text):
         """Render markdown text to a list of lines.
@@ -138,14 +143,6 @@         # Split rendered output into lines
         return output.splitlines(keepends=True)
 
-    def __del__(self):
-        """Destructor to ensure Live display is properly cleaned up."""
-        if self.live:
-            try:
-                self.live.stop()
-            except Exception:
-                pass  # Ignore any errors during cleanup
-
     def update(self, text, final=False):
         """Update the displayed markdown content.
 
@@ -188,13 +185,14 @@         if final or num_lines > 0:
             # How many stable lines do we need to newly show above the live window?
             num_printed = len(self.printed)
+
             show = num_lines - num_printed
 
             # Skip if no new lines to show above live window
             if show <= 0:
                 return
 
-            # Get the new lines and display them
+            # Get the new lines and show them
             show = lines[num_printed:num_lines]
             show = "".join(show)
             show = Text.from_ansi(show)
@@ -203,7 +201,6 @@             # Update our record of printed lines
             self.printed = lines[:num_lines]
 
-        # Handle final update cleanup
         if final:
             self.live.update(Text(""))
             self.live.stop()
@@ -216,11 +213,6 @@         rest = Text.from_ansi(rest)
         self.live.update(rest)
 
-    def find_minimal_suffix(self, text, match_lines=50):
-        """
-        Splits text into chunks on blank lines "\n\n".
-        """
-
 
 if __name__ == "__main__":
     with open("aider/io.py", "r") as f:
