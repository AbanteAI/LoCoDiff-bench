
index 5b4f18a6..a88470a2 100644
--- a/ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected):tmp/tmp72bpfj2q_expected.txt	
+++ b/ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual):tmp/tmpzojskwjd_actual.txt	
@@ -116,12 +116,6 @@ pub const Shaper = struct {
         // We only do shaping if the font is not a special-case. For special-case
         // fonts, the codepoint == glyph_index so we don't need to run any shaping.
         if (run.font_index.special() == null) {
-            // We have to lock the grid to get the face and unfortunately
-            // freetype faces (typically used with harfbuzz) are not thread
-            // safe so this has to be an exclusive lock.
-            run.grid.lock.lock();
-            defer run.grid.lock.unlock();
-
             const face = try run.grid.resolver.collection.getFace(run.font_index);
             const i = if (!face.quirks_disable_default_font_features) 0 else i: {
                 // If we are disabling default font features we just offset
@@ -130,6 +124,12 @@ pub const Shaper = struct {
                 break :i default_features.len;
             };
 
+            // We have to lock the grid to get the face and unfortunately
+            // freetype faces (typically used with harfbuzz) are not thread
+            // safe so this has to be an exclusive lock.
+            run.grid.lock.lock();
+            defer run.grid.lock.unlock();
+
             harfbuzz.shape(face.hb_font, self.hb_buf, self.hb_feats[i..]);
         }
 
@@ -579,6 +579,7 @@ test "shape emoji width long" {
 
         const cells = try shaper.shape(run);
 
+        // screen.testWriteString isn't grapheme aware, otherwise this is two
         try testing.expectEqual(@as(usize, 1), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
@@ -687,8 +688,9 @@ test "shape with empty cells in between" {
 
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 1), count);
-        try testing.expectEqual(@as(usize, 7), cells.len);
+        try testing.expectEqual(@as(usize, 2), cells.len);
     }
+    try testing.expectEqual(@as(usize, 2), count);
 }
 
 test "shape Chinese characters" {
@@ -740,6 +742,7 @@ test "shape box glyphs" {
     var testdata = try testShaper(alloc);
     defer testdata.deinit();
 
+
     var buf: [32]u8 = undefined;
     var buf_idx: usize = 0;
     buf_idx += try std.unicode.utf8Encode(0x2500, buf[buf_idx..]); // horiz line
