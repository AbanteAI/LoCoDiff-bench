--- ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected)+++ ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual)@@ -116,12 +116,6 @@         // We only do shaping if the font is not a special-case. For special-case
         // fonts, the codepoint == glyph_index so we don't need to run any shaping.
         if (run.font_index.special() == null) {
-            // We have to lock the grid to get the face and unfortunately
-            // freetype faces (typically used with harfbuzz) are not thread
-            // safe so this has to be an exclusive lock.
-            run.grid.lock.lock();
-            defer run.grid.lock.unlock();
-
             const face = try run.grid.resolver.collection.getFace(run.font_index);
             const i = if (!face.quirks_disable_default_font_features) 0 else i: {
                 // If we are disabling default font features we just offset
@@ -129,6 +123,12 @@                 // add those at the beginning.
                 break :i default_features.len;
             };
+
+            // We have to lock the grid to get the face and unfortunately
+            // freetype faces (typically used with harfbuzz) are not thread
+            // safe so this has to be an exclusive lock.
+            run.grid.lock.lock();
+            defer run.grid.lock.unlock();
 
             harfbuzz.shape(face.hb_font, self.hb_buf, self.hb_feats[i..]);
         }
@@ -579,6 +579,7 @@ 
         const cells = try shaper.shape(run);
 
+        // screen.testWriteString isn't grapheme aware, otherwise this is two
         try testing.expectEqual(@as(usize, 1), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
@@ -687,8 +688,9 @@ 
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 1), count);
-        try testing.expectEqual(@as(usize, 7), cells.len);
-    }
+        try testing.expectEqual(@as(usize, 2), cells.len);
+    }
+    try testing.expectEqual(@as(usize, 2), count);
 }
 
 test "shape Chinese characters" {
@@ -739,6 +741,7 @@ 
     var testdata = try testShaper(alloc);
     defer testdata.deinit();
+
 
     var buf: [32]u8 = undefined;
     var buf_idx: usize = 0;
