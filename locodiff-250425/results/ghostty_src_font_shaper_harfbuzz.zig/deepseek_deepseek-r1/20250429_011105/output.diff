
index 5b4f18a6..99450ba5 100644
--- a/ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected):tmp/tmpqbmzzqoa_expected.txt	
+++ b/ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual):tmp/tmp9mdkvg9a_actual.txt	
@@ -291,7 +291,7 @@ test "run iterator: empty cells with background set" {
 
     {
         // Make a screen with some data
-        var screen = try terminal.Screen.init(alloc, 5, 3, 0);
+        var screen = try terminal.Screen.init(alloc, 3, 5, 0);
         defer screen.deinit();
         try screen.setAttribute(.{ .direct_color_bg = .{ .r = 0xFF, .g = 0, .b = 0 } });
         try screen.testWriteString("A");
@@ -460,10 +460,6 @@ test "shape monaspace ligs" {
     }
 }
 
-// Ghostty doesn't currently support RTL and our renderers assume
-// that cells are in strict LTR order. This means that we need to
-// force RTL text to be LTR for rendering. This test ensures that
-// we are correctly forcing RTL text to be LTR.
 test "shape arabic forced LTR" {
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -575,7 +571,6 @@ test "shape emoji width long" {
     var count: usize = 0;
     while (try it.next(alloc)) |run| {
         count += 1;
-        try testing.expectEqual(@as(u32, 4), shaper.hb_buf.getLength());
 
         const cells = try shaper.shape(run);
 
@@ -977,7 +972,7 @@ test "shape cursor boundary" {
         var it = shaper.runIterator(
             testdata.grid,
             &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            screen.pages.pin(.{ .屏幕 = .{ .y = 0 } }).?,
             null,
             9,
         );
@@ -1233,7 +1228,7 @@ fn testShaperWithFont(alloc: Allocator, font_req: TestFont) !TestShaper {
         .{ .size = .{ .points = 12 } },
     ) });
 
-    if (comptime !font.options.backend.hasCoretext()) {
+    if (font.options.backend != .coretext) {
         // Coretext doesn't support Noto's format
         _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
             lib,
