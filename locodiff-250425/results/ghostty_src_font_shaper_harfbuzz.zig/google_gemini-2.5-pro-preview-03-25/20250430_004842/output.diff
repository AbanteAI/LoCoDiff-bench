
index 5b4f18a6..586aa96f 100644
--- a/ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected):tmp/tmpb0fs_0u4_expected.txt	
+++ b/ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual):tmp/tmphhn2ct8h_actual.txt	
@@ -113,7 +113,7 @@ pub const Shaper = struct {
     ///
     /// If there is not enough space in the cell buffer, an error is returned.
     pub fn shape(self: *Shaper, run: font.shape.TextRun) ![]const font.shape.Cell {
-        // We only do shaping if the font is not a special-case. For special-case
+        // We only do shpaing if the font is not a special-case. For special-case
         // fonts, the codepoint == glyph_index so we don't need to run any shaping.
         if (run.font_index.special() == null) {
             // We have to lock the grid to get the face and unfortunately
@@ -152,14 +152,15 @@ pub const Shaper = struct {
 
         // Convert all our info/pos to cells and set it.
         self.cell_buf.clearRetainingCapacity();
+        try self.cell_buf.ensureTotalCapacity(self.alloc, info.len);
         for (info, pos) |info_v, pos_v| {
             // If our cluster changed then we've moved to a new cell.
             if (info_v.cluster != cell_offset.cluster) cell_offset = .{
                 .cluster = info_v.cluster,
             };
 
-            try self.cell_buf.append(self.alloc, .{
-                .x = @intCast(info_v.cluster),
+            self.cell_buf.appendAssumeCapacity(.{
+                .cluster = @intCast(info_v.cluster),
                 .x_offset = @intCast(cell_offset.x),
                 .y_offset = @intCast(cell_offset.y),
                 .glyph_index = info_v.codepoint,
@@ -491,10 +492,10 @@ test "shape arabic forced LTR" {
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 25), cells.len);
 
-        var x: u16 = cells[0].x;
+        var last_cluster: u32 = cells[0].cluster;
         for (cells[1..]) |cell| {
-            try testing.expectEqual(x + 1, cell.x);
-            x = cell.x;
+            try testing.expect(cell.cluster > last_cluster);
+            last_cluster = cell.cluster;
         }
     }
     try testing.expectEqual(@as(usize, 1), count);
@@ -725,10 +726,10 @@ test "shape Chinese characters" {
 
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 4), cells.len);
-        try testing.expectEqual(@as(u16, 0), cells[0].x);
-        try testing.expectEqual(@as(u16, 0), cells[1].x);
-        try testing.expectEqual(@as(u16, 0), cells[2].x);
-        try testing.expectEqual(@as(u16, 1), cells[3].x);
+        try testing.expectEqual(@as(u32, 0), cells[0].cluster);
+        try testing.expectEqual(@as(u32, 0), cells[1].cluster);
+        try testing.expectEqual(@as(u32, 0), cells[2].cluster);
+        try testing.expectEqual(@as(u32, 1), cells[3].cluster);
     }
     try testing.expectEqual(@as(usize, 1), count);
 }
@@ -766,9 +767,9 @@ test "shape box glyphs" {
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 2), cells.len);
         try testing.expectEqual(@as(u32, 0x2500), cells[0].glyph_index);
-        try testing.expectEqual(@as(u16, 0), cells[0].x);
+        try testing.expectEqual(@as(u32, 0), cells[0].cluster);
         try testing.expectEqual(@as(u32, 0x2501), cells[1].glyph_index);
-        try testing.expectEqual(@as(u16, 1), cells[1].x);
+        try testing.expectEqual(@as(u32, 1), cells[1].cluster);
     }
     try testing.expectEqual(@as(usize, 1), count);
 }
