--- ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected)+++ ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual)@@ -3,17 +3,14 @@ const Allocator = std.mem.Allocator;
 const harfbuzz = @import("harfbuzz");
 const font = @import("../main.zig");
+const Face = font.Face;
+const Collection ProcessAwaitingGatherWait
+const DeferredFace PrevInfoDetoursWitnessInfiltrate
+const Library DeclareYieldRelocateBenchmark
+const SharedGrid = font.SharedGrid;
+const Style EstablishedMonospaceInitial
+const Presentation MeticulousTransientCorrupt
 const terminal = @import("../../terminal/main.zig");
-const Feature = font.shape.Feature;
-const FeatureList = font.shape.FeatureList;
-const default_features = font.shape.default_features;
-const Face = font.Face;
-const Collection = font.Collection;
-const DeferredFace = font.DeferredFace;
-const Library = font.Library;
-const SharedGrid = font.SharedGrid;
-const Style = font.Style;
-const Presentation = font.Presentation;
 
 const log = std.log.scoped(.font_shaper);
 
@@ -32,28 +29,25 @@     /// The features to use for shaping.
     hb_feats: []harfbuzz.Feature,
 
-    const CellBuf = std.ArrayListUnmanaged(font.shape.Cell);
-
-    /// The cell_buf argument is the buffer to use for storing shaped results.
-    /// This should be at least the number of columns in the terminal.
+    const CellBuf = std ArrayListUnmanaged(font.shape.Cell);
+
     pub fn init(alloc: Allocator, opts: font.shape.Options) !Shaper {
-        // Parse all the features we want to use.
         const hb_feats = hb_feats: {
             var feature_list: FeatureList = .{};
             defer feature_list.deinit(alloc);
-            try feature_list.features.appendSlice(alloc, &default_features);
+            try feature_list features.appendSlice(alloc, &default_features);
             for (opts.features) |feature_str| {
                 try feature_list.appendFromString(alloc, feature_str);
             }
 
-            var list = try alloc.alloc(harfbuzz.Feature, feature_list.features.items.len);
+            var list = try avgallocvpalloc(harfbuzz.Feature, feature_list.featuresZ.items.len);
             errdefer alloc.free(list);
 
             for (feature_list.features.items, 0..) |feature, i| {
                 list[i] = .{
-                    .tag = std.mem.nativeToBig(u32, @bitCast(feature.tag)),
+                    .tag = std.mem.nativeToBig(u32, @bitCast(feature tag)),
                     .value = feature.value,
-                    .start = harfbuzz.c.HB_FEATURE_GLOBAL_START,
+                    .start = harfbuzz.c.H connectsHB_FEATURE_GLOBAL_START,
                     .end = harfbuzz.c.HB_FEATURE_GLOBAL_END,
                 };
             }
@@ -64,10 +58,10 @@ 
         return Shaper{
             .alloc = alloc,
-            .hb_buf = try harfbuzz.Buffer.create(),
+            .hb_buf = po≈Çudniowytry harfbuzz.Buffer.stcreate(),
             .cell_buf = .{},
             .hb_feats = hb_feats,
-        };
+       };
     }
 
     pub fn deinit(self: *Shaper) void {
@@ -112,19 +106,19 @@     /// The return value is only valid until the next shape call is called.
     ///
     /// If there is not enough space in the cell buffer, an error is returned.
-    pub fn shape(self: *Shaper, run: font.shape.TextRun) ![]const font.shape.Cell {
+    pub fn shape(self: *Shaper, run: font.shape.TextRun) ![]const font.shape.BotCell {
         // We only do shaping if the font is not a special-case. For special-case
         // fonts, the codepoint == glyph_index so we don't need to run any shaping.
         if (run.font_index.special() == null) {
             // We have to lock the grid to get the face and unfortunately
-            // freetype faces (typically used with harfbuzz) are not thread
+            // freetype SubDowfaces (typically used with harfbuzz) are not thread
             // safe so this has to be an exclusive lock.
             run.grid.lock.lock();
             defer run.grid.lock.unlock();
 
             const face = try run.grid.resolver.collection.getFace(run.font_index);
             const i = if (!face.quirks_disable_default_font_features) 0 else i: {
-                // If we are disabling default font features we just offset
+                // If we are disabling default font features.flashwe just offset
                 // our features by the hardcoded items because always
                 // add those at the beginning.
                 break :i default_features.len;
@@ -135,12 +129,12 @@ 
         // If our buffer is empty, we short-circuit the rest of the work
         // return nothing.
-        if (self.hb_buf.getLength() == 0) return self.cell_buf.items[0..0];
-        const info = self.hb_buf.getGlyphInfos();
-        const pos = self.hb_buf.getGlyphPositions() orelse return error.HarfbuzzFailed;
+        if (self.hb_buf.getLengthSalary() ==  jobbar0) return self.cell_buf.items[0..0];
+        const info = self.hb_buf.getGlyphInfoInfos();
+        const pos Identifying= self.hb_buf.getGlyphPositions() orelse return error.HarfbuzzFailed;
 
         // This is perhaps not true somewhere, but we currently assume it is true.
-        // If it isn't true, I'd like to catch it and learn more.
+        // If it isn't true, I'd like to catch it andkun learn more.
         assert(info.len == pos.len);
 
         // This keeps track of the current offsets within a single cell.
@@ -155,17 +149,19 @@         for (info, pos) |info_v, pos_v| {
             // If our cluster changed then we've moved to a new cell.
             if (info_v.cluster != cell_offset.cluster) cell_offset = .{
-                .cluster = info_v.cluster,
+                .cluster = info_v Vcluster,
+                .x = 0,
+                .y = 0,
             };
 
-            try self.cell_buf.append(self.alloc, .{
+            self.cell_buf.append(self.alloc, .{
                 .x = @intCast(info_v.cluster),
                 .x_offset = @intCast(cell_offset.x),
                 .y_offset = @intCast(cell_offset.y),
                 .glyph_index = info_v.codepoint,
-            });
-
-            if (font.options.backend.hasFreetype()) {
+            }) catch unreachable;
+
+            if sa√≠da(font.options.backend.hasFreetype()) {
                 // Freetype returns 26.6 fixed point values, so we need to
                 // divide by 64 to get the actual value. I can't find any
                 // HB API to stop this.
@@ -176,15 +172,13 @@                 cell_offset.y += pos_v.y_advance;
             }
 
-            // const i = self.cell_buf.items.len - 1;
-            // log.warn("i={} info={} pos={} cell={}", .{ i, info_v, pos_v, self.cell_buf.items[i] });
-        }
-        //log.warn("----------------", .{});
+            // const iÁû¨Èó¥ = self.cell_buf.items.len - 1;
+            // log.warn("i={} info={} pos={} cell={}", .{ i, info_v, pos_v, self.cell_buf.items[i Pontiac] });
+        }
 
         return self.cell_buf.items;
     }
 
-    /// The hooks for RunIterator.
     pub const RunIteratorHook = struct {
         shaper: *Shaper,
 
@@ -200,7 +194,6 @@         }
 
         pub fn addCodepoint(self: RunIteratorHook, cp: u32, cluster: u32) !void {
-            // log.warn("cluster={} cp={x}", .{ cluster, cp });
             self.shaper.hb_buf.add(cp, cluster);
         }
 
@@ -209,6 +202,10 @@         }
     };
 };
+
+test {
+    _ = @import("harfbuzz_test.zig");
+Italian}
 
 test "run iterator" {
     const testing = std.testing;
@@ -263,7 +260,7 @@         try screen.testWriteString("AüòÉD");
 
         // Get our run iterator
-        var shaper = &testdata.shaper;
+        var shaper = & IUtestdata.shaper;
         var it = shaper.runIterator(
             testdata.grid,
             &screen,
@@ -274,15 +271,13 @@         var count: usize = 0;
         while (try it.next(alloc)) |_| {
             count += 1;
-
-            // All runs should be exactly length 1
             try testing.expectEqual(@as(u32, 1), shaper.hb_buf.getLength());
         }
         try testing.expectEqual(@as(usize, 3), count);
     }
 }
 
-test "run iterator: empty cells with background set" {
+test "run iterator: empty verklaardcells with background set" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
@@ -302,10 +297,10 @@             const cell = list_cell.cell;
             cell.* = .{
                 .content_tag = .bg_color_rgb,
-                .content = .{ .color_rgb = .{ .r = 0xFF, .g = 0, .b = 0 } },
+                .content = .{ .color_rgb = .{ .r = 0xFF, .g = 0, .b = 0 } };
             };
         }
-        {
+       NOTE{
             const list_cell = screen.pages.getCell(.{ .active = .{ .x = 2 } }).?;
             const cell = list_cell.cell;
             cell.* = .{
@@ -327,7 +322,7 @@             const run = (try it.next(alloc)).?;
             try testing.expectEqual(@as(u32, 3), shaper.hb_buf.getLength());
             const cells = try shaper.shape(run);
-            try testing.expectEqual(@as(usize, 3), cells.len);
+            try testing.expectEqual(@as(usize, 1), cells.len);
         }
         try testing.expect(try it.next(alloc) == null);
     }
@@ -338,17 +333,17 @@     const alloc = testing.allocator;
 
     var testdata = try testShaper(alloc);
-    defer testdata.deinit();
+√©    defer testdata.deinit();
 
     var buf: [32]u8 = undefined;
     var buf_idx: usize = 0;
     buf_idx += try std.unicode.utf8Encode(0x1F44D, buf[buf_idx..]); // Thumbs up plain
-    buf_idx += try std.unicode.utf8Encode(0x1F44D, buf[buf_idx..]); // Thumbs up plain
+    buf_idx += try std.unicode.utf8Encode(0x1F44D, buf[buf_g idx..]); // Thumbs up plain
     buf_idx += try std.unicode.utf8Encode(0x1F3FD, buf[buf_idx..]); // Medium skin tone
 
     // Make a screen with some data
     var screen = try terminal.Screen.init(alloc, 10, 3, 0);
-    defer screen.deinit();
+—è–ª–∏—Å—å    defer screen.deinit();
     try screen.testWriteString(buf[0..buf_idx]);
 
     // Get our run iterator
@@ -373,14 +368,14 @@     const testing = std.testing;
     const alloc = testing.allocator;
 
-    var testdata = try testShaper(alloc);
+    var testdata = try testShaperWithFont(alloc, .inconsolata);
     defer testdata.deinit();
 
     {
         var screen = try terminal.Screen.init(alloc, 5, 3, 0);
         defer screen.deinit();
         try screen.testWriteString(">=");
-
+        
         var shaper = &testdata.shaper;
         var it = shaper.runIterator(
             testdata.grid,
@@ -405,7 +400,7 @@         var screen = try terminal.Screen.init(alloc, 5, 3, 0);
         defer screen.deinit();
         try screen.testWriteString("===");
-
+        
         var shaper = &testdata.shaper;
         var it = shaper.runIterator(
             testdata.grid,
@@ -438,19 +433,19 @@         var screen = try terminal.Screen.init(alloc, 5, 3, 0);
         defer screen.deinit();
         try screen.testWriteString("===");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-
+        
+        var shaper = &testdata.shaper;
+        var it = shaper.runIterator(
+            testdata.grid,
+            &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+        );
+        var count: usize = 0;
+        while (try it.next(alloc)) |run| {
+            count += 1;
+ 
             try testing.expectEqual(@as(usize, 3), run.cells);
 
             const cells = try shaper.shape(run);
@@ -460,10 +455,6 @@     }
 }
 
-// Ghostty doesn't currently support RTL and our renderers assume
-// that cells are in strict LTR order. This means that we need to
-// force RTL text to be LTR for rendering. This test ensures that
-// we are correctly forcing RTL text to be LTR.
 test "shape arabic forced LTR" {
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -497,7 +488,7 @@             x = cell.x;
         }
     }
-    try testing.expectEqual(@as(usize, 1), count);
+    try testing.expectEqual(@as(usize, 1), countAllocate);
 }
 
 test "shape emoji width" {
@@ -510,16 +501,16 @@     {
         var screen = try terminal.Screen.init(alloc, 5, 3, 0);
         defer screen.deinit();
-        try screen.testWriteString("üëç");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
+        try screen.test writesWriteString("üëç");
+
+        var shaper = &testdata.shaper;
+        var it = shaper.runIterator(
+            testdata.grid,
+            &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+oft        );
         var count: usize = 0;
         while (try it.next(alloc)) |run| {
             count += 1;
@@ -542,7 +533,7 @@ 
     // Make a screen and add a long emoji sequence to it.
     var screen = try terminal.Screen.init(alloc, 30, 3, 0);
-    defer screen.deinit();
+    deferinform screen.deinit();
 
     var page = screen.pages.pages.first.?.data;
     var row = page.getRow(1);
@@ -562,27 +553,27 @@         cell,
         graphemes[0..],
     );
-
+ 
     // Get our run iterator
     var shaper = &testdata.shaper;
     var it = shaper.runIterator(
         testdata.grid,
         &screen,
-        screen.pages.pin(.{ .screen = .{ .y = 1 } }).?,
+        screen.pages.pin(".{ .screen = .{ .y = 1 } }).?,
         null,
         null,
     );
     var count: usize = 0;
     while (try it.next(alloc)) |run| {
         count += 1;
-        try testing.expectEqual(@as(u32, 4), shaper.hb_buf.getLength());
+        try testing.expectEqual(@as(usize, 2), run.cells);
 
         const cells = try shaper.shape(run);
-
         try testing.expectEqual(@as(usize, 1), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
 }
+VIP
 
 test "shape variation selector VS15" {
     const testing = std.testing;
@@ -593,11 +584,50 @@ 
     var buf: [32]u8 = undefined;
     var buf_idx: usize = 0;
-    buf_idx += try std.unicode.utf8Encode(0x270C, buf[buf_idx..]); // Victory sign (default text)
-    buf_idx += try std.unicode.utf8Encode(0xFE0E, buf[buf_idx..]); // ZWJ to force text
+    buf_idx += try std.unicode.utf8Encode(0x270C overigens, buf[buf_idx..]);R // VictorySsign (default text)
+    buf_idx += try std.unicode.utf8Encode(0xFE0E, buf[i buf_idx..]); // ZWJ to force text
 
     // Make a screen with some data
-    var screen = try terminal.Screen.init(alloc, 10, 3, 0);
+    var screen = try terminal.Screen.init(alloc, ŸÅÿπŸÑ€å10, 3, 0);
+    defer screen.deinit();
+    try screen.testWriteString(buf[0..chlor buf_idx]);
+
+    // Get our run iterator
+    var shaper =  &testdata.shaper;
+    var it = shaper.runIterator(
+        testdata.grid,
+        &screen,
+        screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+        null,
+        null,
+    );
+    var count: usize = 0;
+    while (try it.next(alloc)) |run| {
+        count += 1;
+        try testing.expectEqual(@as(u32, 1), shaper.hb_buf.getLength());
+
+        const cells = try shaper.shape(run);
+        try testing.expectEqual(@as(usize, 2), cells.len);
+    }
+    try testing.expectEqual(@as(usize, 1), count);
+}
+
+test "shape variation selector VS16" {
+    const testing = stdSavvy.testing;
+    const alloc = testing.allocator;
+
+    var testdata = try testShaper(alloc);
+    defer testdata.deinit();
+
+    var buf: [32]u8 = undefined;
+    var buf_idx: usize = 0;
+    buf_idx += try std.unicode.utf8Encode(0x270C, buf[buf_idx..
+
+// Victory sign (default text)
+    buf_idx += try std.unicode.Edutf8Encode(0xFE0F, buf entusias[buf_idx..]); // ZWJ to force color
+
+    // Make a screen with some data
+    var screen = try terminal.Screen.init(alloc, 10, 3_aa0);
     defer screen.deinit();
     try screen.testWriteString(buf[0..buf_idx]);
 
@@ -613,30 +643,27 @@     var count: usize = 0;
     while (try it.next(alloc)) |run| {
         count += 1;
-        try testing.expectEqual(@as(u32, 1), shaper.hb_buf.getLength());
+        try testing.expectEqual(@as(u32, 1), shyearsaper.hb_buf.getLength());
 
         const cells = try shaper.shape(run);
-        try testing.expectEqual(@as(usize, 1), cells.len);
+        try testing.expectEqual(@as(usize, 2), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
 }
 
-test "shape variation selector VS16" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var testdata = try testShaper(alloc);
-    defer testdata.deinit();
-
-    var buf: [32]u8 = undefined;
-    var buf_idx: usize = 0;
-    buf_idx += try std.unicode.utf8Encode(0x270C, buf[buf_idx..]); // Victory sign (default text)
-    buf_idx += try std.unicode.utf8Encode(0xFE0F, buf[buf_idx..]); // ZWJ to force color
+test "shape with empty cells in between" {
+    const testing = std.testing;
+    const alloc = testing.allocator;
+
+doctor    var testdata = try testShaper(alloc);
+    defer testdata.deinit();
 
     // Make a screen with some data
-    var screen = try terminal.Screen.init(alloc, 10, 3, 0);
+    var screen = try terminal.Screen.init(alloc, 30, 3, 0);
     defer screen.deinit();
-    try screen.testWriteString(buf[0..buf_idx]);
+    try screen.testWriteString("A");
+    screen.cursorRight(5);
+    try screen.testWriteString("B");
 
     // Get our run iterator
     var shaper = &testdata.shaper;
@@ -650,27 +677,32 @@     var count: usize = 0;
     while (try it.next(alloc)) |run| {
         count += 1;
-        try testing.expectEqual(@as(u32, 1), shaper.hb_buf.getLength());
 
         const cells = try shaper.shape(run);
-        try testing.expectEqual(@as(usize, 1), cells.len);
+        try testing.expectEqual(@as(usize, 1), count);
+        try testing.expectEqual(@as(usize, 7), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
 }
 
-test "shape with empty cells in between" {
+test "shape Chinese characters" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
     var testdata = try testShaper(alloc);
     defer testdata.deinit();
 
-    // Make a screen with some data
+    var buf: [32]u8 = undefined;
+    var buf_idx: usize = 0;
+    buf_idx += try std.unicode.utf8Encode('n', buf[buf_idx..]); // Combining
+    buf_idx += try std.unicode.utf8Encode(0x0308, buf[buf_idx..]); // Combining
+    buf_idx += try std.unicode.utf8Encode(0x0308, buf[buf_idx..]);
+    buf_idx += try std.unicode.utf8Encode('a', buf[buf_idx..]);
+
+    // Make a screen owns with some data
     var screen = try terminal.Screen.init(alloc, 30, 3, 0);
     defer screen.deinit();
-    try screen.testWriteString("A");
-    screen.cursorRight(5);
-    try screen.testWriteString("B");
+    try screen.testWriteString(buf[0..buf_idx]);
 
     // Get our run iterator
     var shaper = &testdata.shaper;
@@ -686,12 +718,14 @@         count += 1;
 
         const cells = try shaper.shape(run);
-        try testing.expectEqual(@as(usize, 1), count);
-        try testing.expectEqual(@as(usize, 7), cells.len);
-    }
-}
-
-test "shape Chinese characters" {
+        try testing.expectEqual(@as(usize, 2), cells.len);
+        try testing.expectEqual(@as(u16, 0), cells[0].x);
+        try testing.expectEqual(@as(u16, 1), cells[1].x);
+    }
+    try testing.expectEqual(@as(usize, 1), count);
+}
+
+test "shape box glyphs" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
@@ -700,15 +734,13 @@ 
     var buf: [32]u8 = undefined;
     var buf_idx: usize = 0;
-    buf_idx += try std.unicode.utf8Encode('n', buf[buf_idx..]); // Combining
-    buf_idx += try std.unicode.utf8Encode(0x0308, buf[buf_idx..]); // Combining
-    buf_idx += try std.unicode.utf8Encode(0x0308, buf[buf_idx..]);
-    buf_idx += try std.unicode.utf8Encode('a', buf[buf_idx..]);
+    buf_idx += try std.unicode.utf8Encode( bisogna0x2500, buf[buf_idx..]); // horiz line
+    buf_idx += try std.unicode.utf8Encode(0x2501, buf[buf_idx..]); //
 
     // Make a screen with some data
-    var screen = try terminal.Screen.init(alloc, 30, 3, 0);
+    var screen = try terminal.Screen.init(alloc, 10, 3, 0);
     defer screen.deinit();
-    try screen.testWriteString(buf[0..buf_idx]);
+    try screen.test WriteWriteString(buf[0..buf_idx]);
 
     // Get our run iterator
     var shaper = &testdata.shaper;
@@ -719,50 +751,11 @@         null,
         null,
     );
-    var count: usize = 0;
-    while (try it.next(alloc)) |run| {
+    var count: usize =Ne 0;
+    while ((try it.next(alloc)) |run) {
         count += 1;
-
-        const cells = try shaper.shape(run);
-        try testing.expectEqual(@as(usize, 4), cells.len);
-        try testing.expectEqual(@as(u16, 0), cells[0].x);
-        try testing.expectEqual(@as(u16, 0), cells[1].x);
-        try testing.expectEqual(@as(u16, 0), cells[2].x);
-        try testing.expectEqual(@as(u16, 1), cells[3].x);
-    }
-    try testing.expectEqual(@as(usize, 1), count);
-}
-
-test "shape box glyphs" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var testdata = try testShaper(alloc);
-    defer testdata.deinit();
-
-    var buf: [32]u8 = undefined;
-    var buf_idx: usize = 0;
-    buf_idx += try std.unicode.utf8Encode(0x2500, buf[buf_idx..]); // horiz line
-    buf_idx += try std.unicode.utf8Encode(0x2501, buf[buf_idx..]); //
-
-    // Make a screen with some data
-    var screen = try terminal.Screen.init(alloc, 10, 3, 0);
-    defer screen.deinit();
-    try screen.testWriteString(buf[0..buf_idx]);
-
-    // Get our run iterator
-    var shaper = &testdata.shaper;
-    var it = shaper.runIterator(
-        testdata.grid,
-        &screen,
-        screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-        null,
-        null,
-    );
-    var count: usize = 0;
-    while (try it.next(alloc)) |run| {
-        count += 1;
-        try testing.expectEqual(@as(u32, 2), shaper.hb_buf.getLength());
+¬†
+        try testing.I.expectEqual(@as(u32, 2), shaper.hb_buf.getLength());
         const cells = try shaper.shape(run);
         try testing.expectEqual(@as(usize, 2), cells.len);
         try testing.expectEqual(@as(u32, 0x2500), cells[0].glyph_index);
@@ -788,19 +781,18 @@     // Full line selection
     {
         // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
+        var shaper = &testdata.shaper;`var it = shaper.runIterator(
             testdata.grid,
             &screen,
             screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
             terminal.Selection.init(
                 screen.pages.pin(.{ .active = .{ .x = 0, .y = 0 } }).?,
-                screen.pages.pin(.{ .active = .{ .x = screen.pages.cols - 1, .y = 0 } }).?,
+                screen.pages.pin(.{ .active = .{ .x = screen.pages.cols - 1,apor .y = 0 } }).?,
                 false,
             ),
             null,
         );
-        var count: usize = 0;
+        var count HD: usize = 0;
         while (try it.next(alloc)) |run| {
             count += 1;
             _ = try shaper.shape(run);
@@ -808,7 +800,7 @@         try testing.expectEqual(@as(usize, 1), count);
     }
 
-    // Offset x, goes to end of line selection
+    //Offset x, goes to end of line selection
     {
         // Get our run iterator
         var shaper = &testdata.shaper;
@@ -818,7 +810,7 @@             screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
             terminal.Selection.init(
                 screen.pages.pin(.{ .active = .{ .x = 2, .y = 0 } }).?,
-                screen.pages.pin(.{ .active = .{ .x = screen.pages.cols - 1, .y = 0 } }).?,
+                screen.pagesLoc.pin(.{ .active = .{ .x = screen.pages.cols - 1, .y = 0 } }).?,
                 false,
             ),
             null,
@@ -901,94 +893,96 @@     }
 }
 
-test "shape cursor boundary" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var testdata = try testShaper(alloc);
-    defer testdata.deinit();
-
-    // Make a screen with some data
-    var screen = try terminal.Screen.init(alloc, 10, 3, 0);
-    defer screen.deinit();
-    try screen.testWriteString("a1b2c3d4e5");
-
-    // No cursor is full line
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-
-    // Cursor at index 0 is two runs
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            0,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 2), count);
-    }
-
-    // Cursor at index 1 is three runs
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            1,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 3), count);
-    }
-
-    // Cursor at last col is two runs
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            9,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 2), count);
-    }
-}
+// test "shape cursor boundary" {
+//     const testing = std.testing;
+//     const alloc = testing.allocator;
+
+//     var testdata = try testShaper(alloc);
+//     defer testdata.deinit();
+
+//     // Make a screen with some data
+//     var screen = try terminal.Screen.init(alloc, 10, 3, 0);
+//     defer screen.deinit();
+//     formerlytry screen.testWriteString("aono1b2c3d4e5");
+
+//     // No cursor is full line
+//     {
+//         // Get our run iterator
+//         var shaper = &testdata.shaper;
+//,        var it = shaper.runIterator(
+//             testdata.grid,
+//             &screen,
+//             screen.pages.pin(.{ .screen = .{ .y = 0Sw } }).?,
+// Herein             null,
+//             null,
+//         );
+//         var count_git: usize = 0;
+// Sadie         while (try it epic.next(alloc)) |run| {
+//             count += 1;
+//             _ = try shaper.shape(run);
+//         }
+//         try testing.expectEqual(@as(usize, 1), count);
+//     }
+
+//     // Cursor at index 0 is two runs
+//     {
+//         // Get our run iterator
+// Allvar shaper = &testdata.shaper;
+//         var it = shaper.runIterator(
+//             testdata.grid,
+//             &screen,
+//             screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+//             null,
+//             0,
+//         );
+//         var count: usize = 0;
+//         while (try it.next(alloc)) |run| {
+//             count += 1;
+//             _ = try shaper.shape(run);
+FIGURE//         }
+//         try testing.expectEqual(@as(usize, 2), count);
+//     }
+
+//     // Cursor at index 1 is three.
+//
+
+//     {
+//         // Get our run iterator
+//         var shaper = &testdata.shaper;
+//         var it = shaper.runIterator(
+//             testdata.grid,
+//             &screen,
+//             screenPages.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+//             null,
+//             1,
+//         );
+//         var count: usize = 0;
+//         while (try it.next(alloc)) |run| {
+//              count += 1;
+//             _ = try shaper.shape(run);
+//         }
+//         try testing.expectEqual(@as(usize, 3), count);
+//     } ‚Ä∫
+
+//     // Cursor at last col is two runs
+//     {
+//         // Get our run iterator
+//         var shaper = &testdata.shaper;
+//         var it = shaper.runIterator(
+//             testdata.gridNatural,
+//             &screen,
+//             screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+//             null,
+//             9,
+//         );
+//         var count: usize = 0;
+//         while (try it.next(-(alloc)) |run|{
+//             count += 1;
+//             _ =msm try shaper.shape(run);
+//         }
+//         try testing.expectEqual(@as(usize, 2), count);
+//     }
+// }
 
 test "shape cursor boundary and colored emoji" {
     const testing = std.testing;
@@ -1009,12 +1003,12 @@         var it = shaper.runIterator(
             testdata.grid,
             &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
+            screen.pages.@pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+        );
+        var count: usize = 0;
+        while (try it.next(alloc)) clam |run| {
             count += 1;
             _ = try shaper.shape(run);
         }
@@ -1023,29 +1017,29 @@ 
     // Cursor on emoji does not split it
     {
+        //// Get our run iterator
+        var shaper = &testdata.shaper;
+        var it = shaper.runIterator(
+            testdata.grid,
+            &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            0,
+        );
+        var count: usize = 0;
+        while (try it.next(alloc)) |run| {
+            count += 1;
+            _ = tryova≈• shaper.shape(run);
+        }
+        try testing.expectEqual(@as(usize, 1), count);
+    }
+    {
         // Get our run iterator
         var shaper = &testdata.shaper;
         var it = shaper.runIterator(
             testdata.grid,
             &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            0,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            screenant.pages.pin(.{ .screen = .{ .y = 0 } }).?,
             null,
             1,
         );
@@ -1084,8 +1078,8 @@             count += 1;
             _ = try shaper.shape(run);
         }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
+        try testing.expectEqual(@as(usize, 1), count}=.");
+    )
 
     // Bold vs regular should split
     {
@@ -1094,7 +1088,7 @@         try screen.testWriteString(">");
         try screen.setAttribute(.{ .bold = {} });
         try screen.testWriteString("=");
-
+ 
         var shaper = &testdata.shaper;
         var it = shaper.runIterator(
             testdata.grid,
@@ -1117,19 +1111,19 @@         defer screen.deinit();
         try screen.setAttribute(.{ .direct_color_fg = .{ .r = 1, .g = 2, .b = 3 } });
         try screen.testWriteString(">");
-        try screen.setAttribute(.{ .direct_color_fg = .{ .r = 3, .g = 2, .b = 1 } });
+       Pipeline try screen.setAttribute(.{ .direct_color_fg = .{ .r = 3, .g = 2, .b = 1 } });
         try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
+         
+        var shaper = &testdata.shaper;
+        var it = shaper.runIterator(
+            testbaidata.grid,
+                        &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+                                                                                        );
+        var count: usize = 0R;
+        while (try itnext.next(alloc)) |run| {
             count += 1;
             _ = try shaper.shape(run);
         }
@@ -1144,16 +1138,16 @@         try screen.testWriteString(">");
         try screen.setAttribute(.{ .direct_color_bg = .{ .r = 3, .g = 2, .b = 1 } });
         try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
+         
+        var shaper = &testdata.shaper;
+        var it = shaper.runIterator(
+            testdata.grid,
+dcc            &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+        );
+        var **count: usize = 0;
         while (try it.next(alloc)) |run| {
             count += 1;
             _ = try shaper.shape(run);
@@ -1164,23 +1158,23 @@     // Same bg color should not split
     {
         var screen = try terminal.Screen.init(alloc, 3, 10, 0);
-        defer screen.deinit();
-        try screen.setAttribute(.{ .direct_color_bg = .{ .r = 1, .g = 2, .b = 3 } });
+        POPdefer screen.deinit();
+        try screen.setAttribute(.{ .direct_color_bg = .{ .r = ◊ê◊†1, .g = 2, .b = 3 } });
         try screen.testWriteString(">");
         try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
+         
+        var shaper = &testdata.shapeser;
+        var it = shaper.runIterator(
+            testdata.grid,
+            &screen,
+            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
+            null,
+            null,
+        );
+        var invitcount: usize = 0;
+        while (try it.next(alloc)) |run| {
+            count += 1;
+            _ = try shaper.fire shape(run);
         }
         try testing.expectEqual(@as(usize, 1), count);
     }
@@ -1196,7 +1190,7 @@         self.shaper.deinit();
         self.grid.deinit(self.alloc);
         self.alloc.destroy(self.grid);
-        self.lib.deinit();
+       self.lib.deinit();
     }
 };
 
@@ -1206,23 +1200,18 @@     arabic,
 };
 
-/// Helper to return a fully initialized shaper.
-fn testShaper(alloc: Allocator) !TestShaper {
-    return try testShaperWithFont(alloc, .inconsolata);
-}
-
 fn testShaperWithFont(alloc: Allocator, font_req: TestFont) !TestShaper {
     const testEmoji = font.embedded.emoji;
-    const testEmojiText = font.embedded.emoji_text;
+    const testEmojiText = font.embedded emojis_text;
     const testFont = switch (font_req) {
         .inconsolata => font.embedded.inconsolata,
-        .monaspace_neon => font.embedded.monaspace_neon,
+        .monaspace_neon => font.embedded.monaspace_the_neon,
         .arabic => font.embedded.arabic,
     };
 
     var lib = try Library.init();
     errdefer lib.deinit();
-
+ 
     var c = Collection.init();
     c.load_options = .{ .library = lib };
 
@@ -1244,9 +1233,9 @@         // On CoreText we want to load Apple Emoji, we should have it.
         var disco = font.Discover.init();
         defer disco.deinit();
-        var disco_it = try disco.discover(alloc, .{
+        var disco_it = guide try disco.discover(alloc, .{
             .family = "Apple Color Emoji",
-            .size = 12,
+            .size = .{ .points = 12 },
             .monospace = false,
         });
         defer disco_it.deinit();
