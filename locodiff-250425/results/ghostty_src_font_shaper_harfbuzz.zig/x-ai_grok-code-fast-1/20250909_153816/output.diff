
index 5b4f18a6b..e4e50e08e 100644
--- a/ghostty_src_font_shaper_harfbuzz.zig_expectedoutput.txt (expected):tmp/tmp4uu6bib__expected.txt	
+++ b/ghostty_src_font_shaper_harfbuzz.zig_extracted.txt (actual):tmp/tmp1akuhxq7_actual.txt	
@@ -113,6 +113,9 @@ pub const Shaper = struct {
     ///
     /// If there is not enough space in the cell buffer, an error is returned.
     pub fn shape(self: *Shaper, run: font.shape.TextRun) ![]const font.shape.Cell {
+        const tracy_zone = trace(@src());
+        defer tracy_zone.end();
+
         // We only do shaping if the font is not a special-case. For special-case
         // fonts, the codepoint == glyph_index so we don't need to run any shaping.
         if (run.font_index.special() == null) {
@@ -325,9 +328,15 @@ test "run iterator: empty cells with background set" {
         );
         {
             const run = (try it.next(alloc)).?;
-            try testing.expectEqual(@as(u32, 3), shaper.hb_buf.getLength());
+            try testing.expectEqual(@as(u32, 1), shaper.hb_buf.getLength());
+            const cells = try shaper.shape(run);
+            try testing.expectEqual(@as(usize, 1), cells.len);
+        }
+        {
+            const run = (try it.next(alloc)).?;
+            try testing.expectEqual(@as(u32, 2), shaper.hb_buf.getLength());
             const cells = try shaper.shape(run);
-            try testing.expectEqual(@as(usize, 3), cells.len);
+            try testing.expectEqual(@as(usize, 2), cells.len);
         }
         try testing.expect(try it.next(alloc) == null);
     }
@@ -578,7 +587,6 @@ test "shape emoji width long" {
         try testing.expectEqual(@as(u32, 4), shaper.hb_buf.getLength());
 
         const cells = try shaper.shape(run);
-
         try testing.expectEqual(@as(usize, 1), cells.len);
     }
     try testing.expectEqual(@as(usize, 1), count);
@@ -689,6 +697,7 @@ test "shape with empty cells in between" {
         try testing.expectEqual(@as(usize, 1), count);
         try testing.expectEqual(@as(usize, 7), cells.len);
     }
+    try testing.expectEqual(@as(usize, 1), count);
 }
 
 test "shape Chinese characters" {
@@ -1002,276 +1011,4 @@ test "shape cursor boundary and colored emoji" {
     defer screen.deinit();
     try screen.testWriteString("👍🏼");
 
-    // No cursor is full line
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-
-    // Cursor on emoji does not split it
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            0,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-    {
-        // Get our run iterator
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            1,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-}
-
-test "shape cell attribute change" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var testdata = try testShaper(alloc);
-    defer testdata.deinit();
-
-    // Plain >= should shape into 1 run
-    {
-        var screen = try terminal.Screen.init(alloc, 10, 3, 0);
-        defer screen.deinit();
-        try screen.testWriteString(">=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-
-    // Bold vs regular should split
-    {
-        var screen = try terminal.Screen.init(alloc, 3, 10, 0);
-        defer screen.deinit();
-        try screen.testWriteString(">");
-        try screen.setAttribute(.{ .bold = {} });
-        try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 2), count);
-    }
-
-    // Changing fg color should split
-    {
-        var screen = try terminal.Screen.init(alloc, 3, 10, 0);
-        defer screen.deinit();
-        try screen.setAttribute(.{ .direct_color_fg = .{ .r = 1, .g = 2, .b = 3 } });
-        try screen.testWriteString(">");
-        try screen.setAttribute(.{ .direct_color_fg = .{ .r = 3, .g = 2, .b = 1 } });
-        try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 2), count);
-    }
-
-    // Changing bg color should not split
-    {
-        var screen = try terminal.Screen.init(alloc, 3, 10, 0);
-        defer screen.deinit();
-        try screen.setAttribute(.{ .direct_color_bg = .{ .r = 1, .g = 2, .b = 3 } });
-        try screen.testWriteString(">");
-        try screen.setAttribute(.{ .direct_color_bg = .{ .r = 3, .g = 2, .b = 1 } });
-        try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-
-    // Same bg color should not split
-    {
-        var screen = try terminal.Screen.init(alloc, 3, 10, 0);
-        defer screen.deinit();
-        try screen.setAttribute(.{ .direct_color_bg = .{ .r = 1, .g = 2, .b = 3 } });
-        try screen.testWriteString(">");
-        try screen.testWriteString("=");
-
-        var shaper = &testdata.shaper;
-        var it = shaper.runIterator(
-            testdata.grid,
-            &screen,
-            screen.pages.pin(.{ .screen = .{ .y = 0 } }).?,
-            null,
-            null,
-        );
-        var count: usize = 0;
-        while (try it.next(alloc)) |run| {
-            count += 1;
-            _ = try shaper.shape(run);
-        }
-        try testing.expectEqual(@as(usize, 1), count);
-    }
-}
-
-const TestShaper = struct {
-    alloc: Allocator,
-    shaper: Shaper,
-    grid: *SharedGrid,
-    lib: Library,
-
-    pub fn deinit(self: *TestShaper) void {
-        self.shaper.deinit();
-        self.grid.deinit(self.alloc);
-        self.alloc.destroy(self.grid);
-        self.lib.deinit();
-    }
-};
-
-const TestFont = enum {
-    inconsolata,
-    monaspace_neon,
-    arabic,
-};
-
-/// Helper to return a fully initialized shaper.
-fn testShaper(alloc: Allocator) !TestShaper {
-    return try testShaperWithFont(alloc, .inconsolata);
-}
-
-fn testShaperWithFont(alloc: Allocator, font_req: TestFont) !TestShaper {
-    const testEmoji = font.embedded.emoji;
-    const testEmojiText = font.embedded.emoji_text;
-    const testFont = switch (font_req) {
-        .inconsolata => font.embedded.inconsolata,
-        .monaspace_neon => font.embedded.monaspace_neon,
-        .arabic => font.embedded.arabic,
-    };
-
-    var lib = try Library.init();
-    errdefer lib.deinit();
-
-    var c = Collection.init();
-    c.load_options = .{ .library = lib };
-
-    // Setup group
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12 } },
-    ) });
-
-    if (comptime !font.options.backend.hasCoretext()) {
-        // Coretext doesn't support Noto's format
-        _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-            lib,
-            testEmoji,
-            .{ .size = .{ .points = 12 } },
-        ) });
-    } else {
-        // On CoreText we want to load Apple Emoji, we should have it.
-        var disco = font.Discover.init();
-        defer disco.deinit();
-        var disco_it = try disco.discover(alloc, .{
-            .family = "Apple Color Emoji",
-            .size = 12,
-            .monospace = false,
-        });
-        defer disco_it.deinit();
-        var face = (try disco_it.next()).?;
-        errdefer face.deinit();
-        _ = try c.add(alloc, .regular, .{ .deferred = face });
-    }
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testEmojiText,
-        .{ .size = .{ .points = 12 } },
-    ) });
-
-    const grid_ptr = try alloc.create(SharedGrid);
-    errdefer alloc.destroy(grid_ptr);
-    grid_ptr.* = try SharedGrid.init(alloc, .{ .collection = c });
-    errdefer grid_ptr.*.deinit(alloc);
-
-    var shaper = try Shaper.init(alloc, .{});
-    errdefer shaper.deinit();
-
-    return TestShaper{
-        .alloc = alloc,
-        .shaper = shaper,
-        .grid = grid_ptr,
-        .lib = lib,
-    };
-}
\ No newline at end of file
+    // No cursor is full line
\ No newline at end of file
