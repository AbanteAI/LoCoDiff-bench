--- aider_aider_linter.py_expectedoutput.txt (expected)+++ aider_aider_linter.py_extracted.txt (actual)@@ -1,18 +1,19 @@+import io
 import os
 import re
+import runpy
 import subprocess
 import sys
 import traceback
 import warnings
-import shlex
 from dataclasses import dataclass
 from pathlib import Path
 
 from grep_ast import TreeContext, filename_to_lang
-from grep_ast.tsl import get_parser  # noqa: E402
-
-from aider.dump import dump  # noqa: F401
-from aider.run_cmd import run_cmd_subprocess  # noqa: F401
+from tree_sitter_languages import get_parser  # noqa: E402
+from contextlib import redirect_stdout
+
+from aider.dump import dump
 
 # tree_sitter is throwing a FutureWarning
 warnings.simplefilter("ignore", category=FutureWarning)
@@ -37,55 +38,42 @@ 
     def get_rel_fname(self, fname):
         if self.root:
-            try:
-                return os.path.relpath(fname, self.root)
-            except ValueError:
-                return fname
+            return os.path.relpath(fname, self.root)
         else:
             return fname
 
     def run_cmd(self, cmd, rel_fname, code):
-        cmd += " " + shlex.quote(rel_fname)
-
-        returncode = 0
-        stdout = ""
-        try:
-            returncode, stdout = run_cmd_subprocess(
-                cmd,
-                cwd=self.root,
-                encoding=self.encoding,
-            )
-        except OSError as err:
-            print(f"Unable to execute lint command: {err}")
-            return
-        errors = stdout
-        if returncode == 0:
+        cmd += " " + rel_fname
+        cmd = cmd.split()
+
+        process = subprocess.Popen(
+            cmd, cwd=self.root, stdout=subprocess.PIPE, stderr=subprocess.STDOUT
+        )
+        stdout, _ = process.communicate()
+        errors = stdout.decode()
+        if process.returncode == 0:
             return  # zero exit status
 
-        res = f"## Running: {cmd}\n\n"
+
+        cmd = " ".join(cmd)
+        res = f"# Running: {cmd}\n\n"
+        res += "## Fix these errors:\n\n"
         res += errors
-
-        return self.errors_to_lint_result(rel_fname, res)
-
-    def errors_to_lint_result(self, rel_fname, errors):
-        if not errors:
-            return
 
         linenums = []
         filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
         if filenames_linenums:
             filename, linenums = next(iter(filenames_linenums.items()))
-            linenums = [num - 1 for num in linenums]
-
-        return LintResult(text=errors, lines=linenums)
+            linenums = [num-1 for num in linenums]
+            res += "\n"
+            res += tree_context(rel_fname, code, linenums)
+
+
+        return res
 
     def lint(self, fname, cmd=None):
         rel_fname = self.get_rel_fname(fname)
-        try:
-            code = Path(fname).read_text(encoding=self.encoding, errors="replace")
-        except OSError as err:
-            print(f"Unable to read {fname}: {err}")
-            return
+        code = Path(fname).read_text(self.encoding)
 
         if cmd:
             cmd = cmd.strip()
@@ -105,6 +93,7 @@         else:
             lintres = basic_lint(rel_fname, code)
 
+
         if not lintres:
             return
 
@@ -115,10 +104,54 @@ 
         return res
 
+
     def py_lint(self, fname, rel_fname, code):
+        result = ''
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
-        flake_res = self.flake8_lint(rel_fname)
+        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
+        flake8 = f"flake8 --select={fatal} --show-source --isolated"
+
+        flake_res = None
+        original_argv = sys.argv
+        original_stdout = sys.stdout
+
+        sys.argv = flake8.split() + [rel_fname]
+        sys.stdout = io.TextIOWrapper(io.BytesIO(), encoding='utf-8')
+
+        text = f"## Running: {' '.join(sys.argv)}\n\n"
+
+        original_stdout.write("text:")
+        original_stdout.write(text)
+        original_stdout.write("\n")
+
+
+        try:
+            runpy.run_module("flake8", run_name="__main__")
+        except SystemExit as e:
+            dump(e.code)
+            if e.code == 0:
+                errors = None
+            else:
+                dump("wtf")
+                #sys.stdout.seek(0)
+                dump("wtf1")
+                errors = sys.stdout.read()
+
+            sys.stdout = original_stdout
+            sys.argv = original_argv
+        finally:
+            sys.stdout = original_stdout
+            sys.argv = original_argv
+
+
+        dump(errors)
+
+        if not errors:
+            flake_res = None
+        else:
+            flake_res = self.errors_to_lint_result(rel_fname, text + errors)
+
 
         text = ""
         lines = set()
@@ -130,42 +163,21 @@             text += res.text
             lines.update(res.lines)
 
+
         if text or lines:
             return LintResult(text, lines)
 
-    def flake8_lint(self, rel_fname):
-        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
-        flake8_cmd = [
-            sys.executable,
-            "-m",
-            "flake8",
-            f"--select={fatal}",
-            "--show-source",
-            "--isolated",
-            rel_fname,
-        ]
-
-        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
-
-        try:
-            result = subprocess.run(
-                flake8_cmd,
-                capture_output=True,
-                text=True,
-                check=False,
-                encoding=self.encoding,
-                errors="replace",
-                cwd=self.root,
-            )
-            errors = result.stdout + result.stderr
-        except Exception as e:
-            errors = f"Error running flake8: {str(e)}"
-
+    def errors_to_lint_result(self, rel_fname, errors):
         if not errors:
             return
 
-        text += errors
-        return self.errors_to_lint_result(rel_fname, text)
+        linenums = []
+        filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
+        if filenames_linenums:
+            filename, linenums = next(iter(filenames_linenums.items()))
+            linenums = [num - 1 for num in linenums]
+
+        return LintResult(text=errors, lines=linenums)
 
 
 @dataclass
@@ -228,7 +240,7 @@     if not errors:
         return
 
-    return LintResult(text="", lines=errors)
+    return LintResult(text = '', lines = errors)
 
 
 def tree_context(fname, code, line_nums):
@@ -269,6 +281,9 @@     return errors
 
 
+import re
+
+
 def find_filenames_and_linenums(text, fnames):
     """
     Search text for all occurrences of <filename>:\\d+ and make a list of them
