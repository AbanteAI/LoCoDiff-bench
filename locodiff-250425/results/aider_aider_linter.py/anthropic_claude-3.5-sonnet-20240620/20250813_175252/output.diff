
index add561d0a..8ab4ed19d 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmpbju02a58_expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmppfq4l7kx_actual.txt	
@@ -118,34 +118,8 @@ class Linter:
     def py_lint(self, fname, rel_fname, code):
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
-        flake_res = self.flake8_lint(rel_fname)
-
-        text = ""
-        lines = set()
-        for res in [basic_res, compile_res, flake_res]:
-            if not res:
-                continue
-            if text:
-                text += "\n"
-            text += res.text
-            lines.update(res.lines)
-
-        if text or lines:
-            return LintResult(text, lines)
-
-    def flake8_lint(self, rel_fname):
         fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
-        flake8_cmd = [
-            sys.executable,
-            "-m",
-            "flake8",
-            f"--select={fatal}",
-            "--show-source",
-            "--isolated",
-            rel_fname,
-        ]
-
-        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
+        flake8 = f"flake8 --select={fatal} --show-source --isolated"
 
         try:
             result = subprocess.run(
@@ -167,6 +141,19 @@ class Linter:
         text += errors
         return self.errors_to_lint_result(rel_fname, text)
 
+        text = ""
+        lines = set()
+        for res in [basic_res, compile_res, flake_res]:
+            if not res:
+                continue
+            if text:
+                text += "\n"
+            text += res.text
+            lines.update(res.lines)
+
+        if text or lines:
+            return LintResult(text, lines)
+
 
 @dataclass
 class LintResult:
