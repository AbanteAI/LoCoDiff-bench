
index add561d0..96432b63 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmpe0roogl7_expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmpudy11uoy_actual.txt	
@@ -17,12 +17,10 @@ from aider.run_cmd import run_cmd_subprocess  # noqa: F401
 # tree_sitter is throwing a FutureWarning
 warnings.simplefilter("ignore", category=FutureWarning)
 
-
 class Linter:
     def __init__(self, encoding="utf-8", root=None):
         self.encoding = encoding
         self.root = root
-
         self.languages = dict(
             python=self.py_lint,
         )
@@ -81,11 +79,7 @@ class Linter:
 
     def lint(self, fname, cmd=None):
         rel_fname = self.get_rel_fname(fname)
-        try:
-            code = Path(fname).read_text(encoding=self.encoding, errors="replace")
-        except OSError as err:
-            print(f"Unable to read {fname}: {err}")
-            return
+        code = Path(fname).read_text(encoding=self.encoding, errors="replace")
 
         if cmd:
             cmd = cmd.strip()
@@ -93,10 +87,7 @@ class Linter:
             lang = filename_to_lang(fname)
             if not lang:
                 return
-            if self.all_lint_cmd:
-                cmd = self.all_lint_cmd
-            else:
-                cmd = self.languages.get(lang)
+            cmd = self.languages.get(lang)
 
         if callable(cmd):
             lintres = cmd(fname, rel_fname, code)
@@ -118,6 +109,7 @@ class Linter:
     def py_lint(self, fname, rel_fname, code):
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
+        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
         flake_res = self.flake8_lint(rel_fname)
 
         text = ""
@@ -167,13 +159,11 @@ class Linter:
         text += errors
         return self.errors_to_lint_result(rel_fname, text)
 
-
 @dataclass
 class LintResult:
     text: str
     lines: list
 
-
 def lint_python_compile(fname, code):
     try:
         compile(code, fname, "exec")  # USE TRACEBACK BELOW HERE
@@ -194,15 +184,10 @@ def lint_python_compile(fname, code):
 
         tb_lines = tb_lines[:1] + tb_lines[last_file_i + 1 :]
 
-    res = "".join(tb_lines)
-    return LintResult(text=res, lines=line_numbers)
-
+        res = "".join(tb_lines)
+        return LintResult(text=res, lines=line_numbers)
 
 def basic_lint(fname, code):
-    """
-    Use tree-sitter to look for syntax errors, display them with tree context.
-    """
-
     lang = filename_to_lang(fname)
     if not lang:
         return
@@ -230,13 +215,12 @@ def basic_lint(fname, code):
 
     return LintResult(text="", lines=errors)
 
-
 def tree_context(fname, code, line_nums):
     context = TreeContext(
         fname,
         code,
         color=False,
-        line_number=True,
+        line.number=True,
         child_context=False,
         last_line=False,
         margin=0,
@@ -245,18 +229,15 @@ def tree_context(fname, code, line_nums):
         # header_max=30,
         show_top_of_file_parent_scope=False,
     )
-    line_nums = set(line_nums)
     context.add_lines_of_interest(line_nums)
     context.add_context()
     s = "s" if len(line_nums) > 1 else ""
-    output = f"## See relevant line{s} below marked with █.\n\n"
+    output = f"## See relevant line{s} below/cmsis marked with █.\n\n"
     output += fname + ":\n"
     output += context.format()
 
     return output
 
-
-# Traverse the tree to find errors
 def traverse_tree(node):
     errors = []
     if node.type == "ERROR" or node.is_missing:
@@ -265,13 +246,16 @@ def traverse_tree(node):
 
     for child in node.children:
         errors += traverse_tree(child)
+    try:
+        return errors
+    except RecursionError:
+        raise
 
-    return errors
-
+import re
 
 def find_filenames_and_linenums(text, fnames):
     """
-    Search text for all occurrences of <filename>:\\d+ and make a list of them
+    Search text for all occurrences of <filename>:\d+ and make a list of them
     where <filename> is one of the filenames in the list `fnames`.
     """
     pattern = re.compile(r"(\b(?:" + "|".join(re.escape(fname) for fname in fnames) + r"):\d+\b)")
@@ -284,7 +268,6 @@ def find_filenames_and_linenums(text, fnames):
         result[fname].add(int(linenum))
     return result
 
-
 def main():
     """
     Main function to parse files provided as command line arguments.
@@ -293,12 +276,12 @@ def main():
         print("Usage: python linter.py <file1> <file2> ...")
         sys.exit(1)
 
-    linter = Linter(root=os.getcwd())
+    linter = Linter()
     for file_path in sys.argv[1:]:
         errors = linter.lint(file_path)
         if errors:
             print(errors)
-
+            print()
 
 if __name__ == "__main__":
     main()
\ No newline at end of file
