
index add561d0a..59e9fc28d 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmpl53g66wm_expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmpr3y6c1us_actual.txt	
@@ -18,6 +18,12 @@ from aider.run_cmd import run_cmd_subprocess  # noqa: F401
 warnings.simplefilter("ignore", category=FutureWarning)
 
 
+@dataclass
+class LintResult:
+    text: str
+    lines: list
+
+
 class Linter:
     def __init__(self, encoding="utf-8", root=None):
         self.encoding = encoding
@@ -31,9 +37,8 @@ class Linter:
     def set_linter(self, lang, cmd):
         if lang:
             self.languages[lang] = cmd
-            return
-
-        self.all_lint_cmd = cmd
+        else:
+            self.all_lint_cmd = cmd
 
     def get_rel_fname(self, fname):
         if self.root:
@@ -145,8 +150,6 @@ class Linter:
             rel_fname,
         ]
 
-        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
-
         try:
             result = subprocess.run(
                 flake8_cmd,
@@ -164,16 +167,11 @@ class Linter:
         if not errors:
             return
 
+        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
         text += errors
         return self.errors_to_lint_result(rel_fname, text)
 
 
-@dataclass
-class LintResult:
-    text: str
-    lines: list
-
-
 def lint_python_compile(fname, code):
     try:
         compile(code, fname, "exec")  # USE TRACEBACK BELOW HERE
@@ -194,8 +192,8 @@ def lint_python_compile(fname, code):
 
         tb_lines = tb_lines[:1] + tb_lines[last_file_i + 1 :]
 
-    res = "".join(tb_lines)
-    return LintResult(text=res, lines=line_numbers)
+        res = "".join(tb_lines)
+        return LintResult(text=res, lines=line_numbers)
 
 
 def basic_lint(fname, code):
@@ -249,14 +247,13 @@ def tree_context(fname, code, line_nums):
     context.add_lines_of_interest(line_nums)
     context.add_context()
     s = "s" if len(line_nums) > 1 else ""
-    output = f"## See relevant line{s} below marked with █.\n\n"
+    output = f"# Fix the error{s}, see relevant line{s} below marked with █.\n\n"
     output += fname + ":\n"
     output += context.format()
 
     return output
 
 
-# Traverse the tree to find errors
 def traverse_tree(node):
     errors = []
     if node.type == "ERROR" or node.is_missing:
