
index add561d0..bcfc3c11 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmp22mmch8__expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmp042mfvbz_actual.txt	
@@ -9,7 +9,7 @@ from dataclasses import dataclass
 from pathlib import Path
 
 from grep_ast import TreeContext, filename_to_lang
-from grep_ast.tsl import get_parser  # noqa: E402
+from tree_sitter_language_pack import get_parser  # noqa: E402
 
 from aider.dump import dump  # noqa: F401
 from aider.run_cmd import run_cmd_subprocess  # noqa: F401
@@ -32,7 +32,6 @@ class Linter:
         if lang:
             self.languages[lang] = cmd
             return
-
         self.all_lint_cmd = cmd
 
     def get_rel_fname(self, fname):
@@ -50,11 +49,7 @@ class Linter:
         returncode = 0
         stdout = ""
         try:
-            returncode, stdout = run_cmd_subprocess(
-                cmd,
-                cwd=self.root,
-                encoding=self.encoding,
-            )
+            returncode, stdout = run_cmd_subprocess(cmd.split(), cwd=self.root, encoding=self.encoding)
         except OSError as err:
             print(f"Unable to execute lint command: {err}")
             return
@@ -65,27 +60,15 @@ class Linter:
         res = f"## Running: {cmd}\n\n"
         res += errors
 
-        return self.errors_to_lint_result(rel_fname, res)
-
-    def errors_to_lint_result(self, rel_fname, errors):
-        if not errors:
-            return
-
-        linenums = []
         filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
         if filenames_linenums:
             filename, linenums = next(iter(filenames_linenums.items()))
             linenums = [num - 1 for num in linenums]
-
-        return LintResult(text=errors, lines=linenums)
+            return LintResult(text=res, lines=linenums)
 
     def lint(self, fname, cmd=None):
         rel_fname = self.get_rel_fname(fname)
-        try:
-            code = Path(fname).read_text(encoding=self.encoding, errors="replace")
-        except OSError as err:
-            print(f"Unable to read {fname}: {err}")
-            return
+        code = Path(fname).read_text(encoding=self.encoding, errors="replace")
 
         if cmd:
             cmd = cmd.strip()
@@ -118,6 +101,7 @@ class Linter:
     def py_lint(self, fname, rel_fname, code):
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
+
         flake_res = self.flake8_lint(rel_fname)
 
         text = ""
@@ -146,16 +130,15 @@ class Linter:
         ]
 
         text = f"## Running: {' '.join(flake8_cmd)}\n\n"
-
         try:
             result = subprocess.run(
                 flake8_cmd,
+                cwd=self.root,
                 capture_output=True,
                 text=True,
                 check=False,
                 encoding=self.encoding,
                 errors="replace",
-                cwd=self.root,
             )
             errors = result.stdout + result.stderr
         except Exception as e:
@@ -164,8 +147,17 @@ class Linter:
         if not errors:
             return
 
-        text += errors
-        return self.errors_to_lint_result(rel_fname, text)
+        return self.errors_to_lint_result(rel_fname, text + errors)
+
+    def errors_to_lint_result(self, rel_fname, errors):
+        if not errors:
+            return
+        filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
+        linenums = []
+        if filenames_linenums:
+            filename, linenums = next(iter(filenames_linenums.items()))
+            linenums = [num - 1 for num in linenums]
+        return LintResult(text=errors, lines=linenums)
 
 
 @dataclass
@@ -182,18 +174,16 @@ def lint_python_compile(fname, code):
         end_lineno = getattr(err, "end_lineno", err.lineno)
         line_numbers = list(range(err.lineno - 1, end_lineno))
 
-        tb_lines = traceback.format_exception(type(err), err, err.__traceback__)
-        last_file_i = 0
-
-        target = "# USE TRACEBACK"
-        target += " BELOW HERE"
-        for i in range(len(tb_lines)):
-            if target in tb_lines[i]:
-                last_file_i = i
-                break
-
-        tb_lines = tb_lines[:1] + tb_lines[last_file_i + 1 :]
+    tb_lines = traceback.format_exception(type(err), err, err.__traceback__)
+    last_file_i = 0
+    target = "# USE TRACEBACK"
+    target += " BELOW HERE"
+    for i in range(len(tb_lines)):
+        if target in tb_lines[i]:
+            last_file_i = i
+            break
 
+    tb_lines = tb_lines[:1] + tb_lines[last_file_i + 1:]
     res = "".join(tb_lines)
     return LintResult(text=res, lines=line_numbers)
 
@@ -202,7 +192,6 @@ def basic_lint(fname, code):
     """
     Use tree-sitter to look for syntax errors, display them with tree context.
     """
-
     lang = filename_to_lang(fname)
     if not lang:
         return
@@ -236,42 +225,36 @@ def tree_context(fname, code, line_nums):
         fname,
         code,
         color=False,
-        line_number=True,
+        line_number=False,
         child_context=False,
         last_line=False,
         margin=0,
         mark_lois=True,
         loi_pad=3,
-        # header_max=30,
         show_top_of_file_parent_scope=False,
     )
-    line_nums = set(line_nums)
     context.add_lines_of_interest(line_nums)
     context.add_context()
     s = "s" if len(line_nums) > 1 else ""
     output = f"## See relevant line{s} below marked with â–ˆ.\n\n"
     output += fname + ":\n"
     output += context.format()
-
     return output
 
 
-# Traverse the tree to find errors
 def traverse_tree(node):
     errors = []
     if node.type == "ERROR" or node.is_missing:
         line_no = node.start_point[0]
         errors.append(line_no)
-
     for child in node.children:
         errors += traverse_tree(child)
-
     return errors
 
 
 def find_filenames_and_linenums(text, fnames):
     """
-    Search text for all occurrences of <filename>:\\d+ and make a list of them
+    Search text for all occurrences of <filename>:\d+ and make a list of them
     where <filename> is one of the filenames in the list `fnames`.
     """
     pattern = re.compile(r"(\b(?:" + "|".join(re.escape(fname) for fname in fnames) + r"):\d+\b)")
@@ -287,17 +270,19 @@ def find_filenames_and_linenums(text, fnames):
 
 def main():
     """
-    Main function to parse files provided as command line arguments.
+    Main entrypoint for command-line usage.
     """
-    if len(sys.argv) < 2:
-        print("Usage: python linter.py <file1> <file2> ...")
-        sys.exit(1)
+    import argparse
+
+    parser = argparse.ArgumentParser(description="Lint files")
+    parser.add_argument("files", nargs="+", help="Files to lint")
+    args = parser.parse_args()
 
     linter = Linter(root=os.getcwd())
-    for file_path in sys.argv[1:]:
-        errors = linter.lint(file_path)
-        if errors:
-            print(errors)
+    for file_path in args.files:
+        out = linter.lint(file_path)
+        if out:
+            print(out)
 
 
 if __name__ == "__main__":
