
index add561d0a..345e51811 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmpn9q0mreg_expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmp7vqgmjqd_actual.txt	
@@ -4,15 +4,13 @@ import subprocess
 import sys
 import traceback
 import warnings
-import shlex
 from dataclasses import dataclass
 from pathlib import Path
 
 from grep_ast import TreeContext, filename_to_lang
-from grep_ast.tsl import get_parser  # noqa: E402
+from tree_sitter_languages import get_parser  # noqa: E402
 
 from aider.dump import dump  # noqa: F401
-from aider.run_cmd import run_cmd_subprocess  # noqa: F401
 
 # tree_sitter is throwing a FutureWarning
 warnings.simplefilter("ignore", category=FutureWarning)
@@ -37,47 +35,38 @@ class Linter:
 
     def get_rel_fname(self, fname):
         if self.root:
-            try:
-                return os.path.relpath(fname, self.root)
-            except ValueError:
-                return fname
+            return os.path.relpath(fname, self.root)
         else:
             return fname
 
     def run_cmd(self, cmd, rel_fname, code):
-        cmd += " " + shlex.quote(rel_fname)
-
-        returncode = 0
-        stdout = ""
-        try:
-            returncode, stdout = run_cmd_subprocess(
-                cmd,
-                cwd=self.root,
-                encoding=self.encoding,
-            )
-        except OSError as err:
-            print(f"Unable to execute lint command: {err}")
-            return
+        cmd += " " + rel_fname
+        cmd = cmd.split()
+
+        process = subprocess.Popen(
+            cmd,
+            cwd=self.root,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.STDOUT,
+            encoding=self.encoding,
+            errors="replace",
+        )
+        stdout, _ = process.communicate()
         errors = stdout
-        if returncode == 0:
+        if process.returncode == 0:
             return  # zero exit status
 
+        cmd = " ".join(cmd)
         res = f"## Running: {cmd}\n\n"
         res += errors
 
-        return self.errors_to_lint_result(rel_fname, res)
-
-    def errors_to_lint_result(self, rel_fname, errors):
-        if not errors:
-            return
-
         linenums = []
         filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
         if filenames_linenums:
             filename, linenums = next(iter(filenames_linenums.items()))
             linenums = [num - 1 for num in linenums]
 
-        return LintResult(text=errors, lines=linenums)
+        return LintResult(text=res, lines=linenums)
 
     def lint(self, fname, cmd=None):
         rel_fname = self.get_rel_fname(fname)
@@ -93,10 +82,7 @@ class Linter:
             lang = filename_to_lang(fname)
             if not lang:
                 return
-            if self.all_lint_cmd:
-                cmd = self.all_lint_cmd
-            else:
-                cmd = self.languages.get(lang)
+            cmd = self.languages.get(lang)
 
         if callable(cmd):
             lintres = cmd(fname, rel_fname, code)
@@ -118,7 +104,14 @@ class Linter:
     def py_lint(self, fname, rel_fname, code):
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
-        flake_res = self.flake8_lint(rel_fname)
+
+        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
+        flake8 = f"flake8 --select={fatal} --show-source --isolated"
+
+        try:
+            flake_res = self.run_cmd(flake8, rel_fname, code)
+        except FileNotFoundError:
+            flake_res = None
 
         text = ""
         lines = set()
@@ -133,40 +126,6 @@ class Linter:
         if text or lines:
             return LintResult(text, lines)
 
-    def flake8_lint(self, rel_fname):
-        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
-        flake8_cmd = [
-            sys.executable,
-            "-m",
-            "flake8",
-            f"--select={fatal}",
-            "--show-source",
-            "--isolated",
-            rel_fname,
-        ]
-
-        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
-
-        try:
-            result = subprocess.run(
-                flake8_cmd,
-                capture_output=True,
-                text=True,
-                check=False,
-                encoding=self.encoding,
-                errors="replace",
-                cwd=self.root,
-            )
-            errors = result.stdout + result.stderr
-        except Exception as e:
-            errors = f"Error running flake8: {str(e)}"
-
-        if not errors:
-            return
-
-        text += errors
-        return self.errors_to_lint_result(rel_fname, text)
-
 
 @dataclass
 class LintResult:
@@ -179,8 +138,7 @@ def lint_python_compile(fname, code):
         compile(code, fname, "exec")  # USE TRACEBACK BELOW HERE
         return
     except Exception as err:
-        end_lineno = getattr(err, "end_lineno", err.lineno)
-        line_numbers = list(range(err.lineno - 1, end_lineno))
+        line_numbers = list(range(err.lineno - 1, err.end_lineno))
 
         tb_lines = traceback.format_exception(type(err), err, err.__traceback__)
         last_file_i = 0
@@ -269,9 +227,12 @@ def traverse_tree(node):
     return errors
 
 
+import re
+
+
 def find_filenames_and_linenums(text, fnames):
     """
-    Search text for all occurrences of <filename>:\\d+ and make a list of them
+    Search text for all occurrences of <filename>:\d+ and make a list of them
     where <filename> is one of the filenames in the list `fnames`.
     """
     pattern = re.compile(r"(\b(?:" + "|".join(re.escape(fname) for fname in fnames) + r"):\d+\b)")
