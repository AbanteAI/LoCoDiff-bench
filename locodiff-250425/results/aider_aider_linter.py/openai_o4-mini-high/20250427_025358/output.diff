
index add561d0..15679f77 100644
--- a/aider_aider_linter.py_expectedoutput.txt (expected):tmp/tmpyim49z6b_expected.txt	
+++ b/aider_aider_linter.py_extracted.txt (actual):tmp/tmpduguee4w_actual.txt	
@@ -4,25 +4,26 @@ import subprocess
 import sys
 import traceback
 import warnings
-import shlex
 from dataclasses import dataclass
 from pathlib import Path
 
 from grep_ast import TreeContext, filename_to_lang
-from grep_ast.tsl import get_parser  # noqa: E402
-
+from tree_sitter_language_pack import get_parser  # noqa: E402
 from aider.dump import dump  # noqa: F401
 from aider.run_cmd import run_cmd_subprocess  # noqa: F401
 
 # tree_sitter is throwing a FutureWarning
 warnings.simplefilter("ignore", category=FutureWarning)
 
+@dataclass
+class LintResult:
+    text: str
+    lines: list
 
 class Linter:
     def __init__(self, encoding="utf-8", root=None):
         self.encoding = encoding
         self.root = root
-
         self.languages = dict(
             python=self.py_lint,
         )
@@ -31,9 +32,8 @@ class Linter:
     def set_linter(self, lang, cmd):
         if lang:
             self.languages[lang] = cmd
-            return
-
-        self.all_lint_cmd = cmd
+        else:
+            self.all_lint_cmd = cmd
 
     def get_rel_fname(self, fname):
         if self.root:
@@ -45,47 +45,39 @@ class Linter:
             return fname
 
     def run_cmd(self, cmd, rel_fname, code):
-        cmd += " " + shlex.quote(rel_fname)
-
-        returncode = 0
-        stdout = ""
+        cmd += " " + rel_fname
         try:
-            returncode, stdout = run_cmd_subprocess(
+            process = subprocess.Popen(
                 cmd,
                 cwd=self.root,
+                stdout=subprocess.PIPE,
+                stderr=subprocess.STDOUT,
                 encoding=self.encoding,
+                errors="replace",
             )
         except OSError as err:
             print(f"Unable to execute lint command: {err}")
             return
+
+        stdout, _ = process.communicate()
         errors = stdout
-        if returncode == 0:
+        if process.returncode == 0:
             return  # zero exit status
 
         res = f"## Running: {cmd}\n\n"
         res += errors
 
-        return self.errors_to_lint_result(rel_fname, res)
-
-    def errors_to_lint_result(self, rel_fname, errors):
-        if not errors:
-            return
-
-        linenums = []
         filenames_linenums = find_filenames_and_linenums(errors, [rel_fname])
         if filenames_linenums:
             filename, linenums = next(iter(filenames_linenums.items()))
             linenums = [num - 1 for num in linenums]
+            res += tree_context(rel_fname, code, linenums)
 
-        return LintResult(text=errors, lines=linenums)
+        return res
 
     def lint(self, fname, cmd=None):
         rel_fname = self.get_rel_fname(fname)
-        try:
-            code = Path(fname).read_text(encoding=self.encoding, errors="replace")
-        except OSError as err:
-            print(f"Unable to read {fname}: {err}")
-            return
+        code = Path(fname).read_text(encoding=self.encoding, errors="replace")
 
         if cmd:
             cmd = cmd.strip()
@@ -93,10 +85,7 @@ class Linter:
             lang = filename_to_lang(fname)
             if not lang:
                 return
-            if self.all_lint_cmd:
-                cmd = self.all_lint_cmd
-            else:
-                cmd = self.languages.get(lang)
+            cmd = self.all_lint_cmd or self.languages.get(lang)
 
         if callable(cmd):
             lintres = cmd(fname, rel_fname, code)
@@ -108,21 +97,27 @@ class Linter:
         if not lintres:
             return
 
-        res = "# Fix any errors below, if possible.\n\n"
-        res += lintres.text
-        res += "\n"
-        res += tree_context(rel_fname, code, lintres.lines)
-
-        return res
+        out = "# Fix any errors below, if possible.\n\n"
+        out += lintres.text
+        out += "\n"
+        out += tree_context(rel_fname, code, lintres.lines)
+        return out
 
     def py_lint(self, fname, rel_fname, code):
         basic_res = basic_lint(rel_fname, code)
         compile_res = lint_python_compile(fname, code)
-        flake_res = self.flake8_lint(rel_fname)
+
+        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
+        flake8 = f"flake8 --select={fatal} --show-source --isolated"
+
+        try:
+            flake_res = self.run_cmd(flake8, rel_fname, code)
+        except FileNotFoundError:
+            flake_res = None
 
         text = ""
         lines = set()
-        for res in [basic_res, compile_res, flake_res]:
+        for res in (basic_res, compile_res, flake_res):
             if not res:
                 continue
             if text:
@@ -131,106 +126,56 @@ class Linter:
             lines.update(res.lines)
 
         if text or lines:
-            return LintResult(text, lines)
-
-    def flake8_lint(self, rel_fname):
-        fatal = "E9,F821,F823,F831,F406,F407,F701,F702,F704,F706"
-        flake8_cmd = [
-            sys.executable,
-            "-m",
-            "flake8",
-            f"--select={fatal}",
-            "--show-source",
-            "--isolated",
-            rel_fname,
-        ]
-
-        text = f"## Running: {' '.join(flake8_cmd)}\n\n"
-
-        try:
-            result = subprocess.run(
-                flake8_cmd,
-                capture_output=True,
-                text=True,
-                check=False,
-                encoding=self.encoding,
-                errors="replace",
-                cwd=self.root,
-            )
-            errors = result.stdout + result.stderr
-        except Exception as e:
-            errors = f"Error running flake8: {str(e)}"
-
-        if not errors:
-            return
-
-        text += errors
-        return self.errors_to_lint_result(rel_fname, text)
-
-
-@dataclass
-class LintResult:
-    text: str
-    lines: list
+            return LintResult(text, list(lines))
 
 
 def lint_python_compile(fname, code):
     try:
-        compile(code, fname, "exec")  # USE TRACEBACK BELOW HERE
+        compile(code, fname, "exec")
         return
     except Exception as err:
         end_lineno = getattr(err, "end_lineno", err.lineno)
         line_numbers = list(range(err.lineno - 1, end_lineno))
-
         tb_lines = traceback.format_exception(type(err), err, err.__traceback__)
-        last_file_i = 0
-
-        target = "# USE TRACEBACK"
-        target += " BELOW HERE"
-        for i in range(len(tb_lines)):
-            if target in tb_lines[i]:
-                last_file_i = i
-                break
-
-        tb_lines = tb_lines[:1] + tb_lines[last_file_i + 1 :]
-
-    res = "".join(tb_lines)
-    return LintResult(text=res, lines=line_numbers)
+        # keep only first message and last call stack
+        if len(tb_lines) > 2:
+            tb_lines = tb_lines[:1] + tb_lines[-2:]
+        res = "".join(tb_lines)
+        return LintResult(text=res, lines=line_numbers)
 
 
 def basic_lint(fname, code):
-    """
-    Use tree-sitter to look for syntax errors, display them with tree context.
-    """
-
     lang = filename_to_lang(fname)
     if not lang:
         return
-
-    # Tree-sitter linter is not capable of working with typescript #1132
     if lang == "typescript":
+        # Tree-sitter linter is not capable of working with typescript #1132
         return
-
     try:
         parser = get_parser(lang)
     except Exception as err:
         print(f"Unable to load parser: {err}")
         return
-
     tree = parser.parse(bytes(code, "utf-8"))
-
     try:
         errors = traverse_tree(tree.root_node)
     except RecursionError:
         print(f"Unable to lint {fname} due to RecursionError")
         return
-
     if not errors:
         return
-
     return LintResult(text="", lines=errors)
 
 
+def traverse_tree(node):
+    errors = []
+    if node.type == "ERROR" or node.is_missing:
+        errors.append(node.start_point[0])
+    for child in node.children:
+        errors.extend(traverse_tree(child))
+    return errors
+
+
 def tree_context(fname, code, line_nums):
     context = TreeContext(
         fname,
@@ -242,62 +187,36 @@ def tree_context(fname, code, line_nums):
         margin=0,
         mark_lois=True,
         loi_pad=3,
-        # header_max=30,
         show_top_of_file_parent_scope=False,
     )
-    line_nums = set(line_nums)
     context.add_lines_of_interest(line_nums)
     context.add_context()
     s = "s" if len(line_nums) > 1 else ""
-    output = f"## See relevant line{s} below marked with █.\n\n"
-    output += fname + ":\n"
-    output += context.format()
-
-    return output
-
-
-# Traverse the tree to find errors
-def traverse_tree(node):
-    errors = []
-    if node.type == "ERROR" or node.is_missing:
-        line_no = node.start_point[0]
-        errors.append(line_no)
-
-    for child in node.children:
-        errors += traverse_tree(child)
-
-    return errors
+    header = f"## See relevant line{s} below marked with █.\n\n"
+    out = header + f"{fname}:\n" + context.format()
+    return out
 
 
 def find_filenames_and_linenums(text, fnames):
-    """
-    Search text for all occurrences of <filename>:\\d+ and make a list of them
-    where <filename> is one of the filenames in the list `fnames`.
-    """
-    pattern = re.compile(r"(\b(?:" + "|".join(re.escape(fname) for fname in fnames) + r"):\d+\b)")
+    pattern = re.compile(r"(\b(?:" + "|".join(re.escape(f) for f in fnames) + r"):\d+\b)")
     matches = pattern.findall(text)
     result = {}
     for match in matches:
-        fname, linenum = match.rsplit(":", 1)
-        if fname not in result:
-            result[fname] = set()
-        result[fname].add(int(linenum))
+        name, num = match.rsplit(":", 1)
+        result.setdefault(name, set()).add(int(num))
     return result
 
 
 def main():
-    """
-    Main function to parse files provided as command line arguments.
-    """
     if len(sys.argv) < 2:
         print("Usage: python linter.py <file1> <file2> ...")
         sys.exit(1)
 
     linter = Linter(root=os.getcwd())
-    for file_path in sys.argv[1:]:
-        errors = linter.lint(file_path)
-        if errors:
-            print(errors)
+    for fp in sys.argv[1:]:
+        out = linter.lint(fp)
+        if out:
+            print(out)
 
 
 if __name__ == "__main__":
