--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual)@@ -258,8 +258,8 @@         );
         if (
           render === serverRender ||
-          render === streamRender ||
-          render === clientRenderOnServerString
+          render === clientRenderOnServerString ||
+          render === streamRender
         ) {
           // In the server render output there's comments between text nodes.
           expect(e.childNodes.length).toBe(5);
@@ -481,119 +481,14 @@       expect(e.tagName).toBe('BUTTON');
     });
 
-    itRenders('a div with dangerouslySetInnerHTML number', async render => {
-      // Put dangerouslySetInnerHTML one level deeper because otherwise
-      // hydrating from a bad markup would cause a mismatch (since we don't
-      // patch dangerouslySetInnerHTML as text content).
-      const e = (
-        await render(
-          <div>
-            <span dangerouslySetInnerHTML={{__html: 0}} />
-          </div>,
-        )
-      ).firstChild;
-      expect(e.childNodes.length).toBe(1);
-      expect(e.firstChild.nodeType).toBe(TEXT_NODE_TYPE);
-      expect(e.textContent).toBe('0');
-    });
-
-    itRenders('a div with dangerouslySetInnerHTML boolean', async render => {
-      // Put dangerouslySetInnerHTML one level deeper because otherwise
-      // hydrating from a bad markup would cause a mismatch (since we don't
-      // patch dangerouslySetInnerHTML as text content).
-      const e = (
-        await render(
-          <div>
-            <span dangerouslySetInnerHTML={{__html: false}} />
-          </div>,
-        )
-      ).firstChild;
-      expect(e.childNodes.length).toBe(1);
-      expect(e.firstChild.nodeType).toBe(TEXT_NODE_TYPE);
-      expect(e.firstChild.data).toBe('false');
-    });
-
-    itRenders(
-      'a div with dangerouslySetInnerHTML text string',
-      async render => {
-        // Put dangerouslySetInnerHTML one level deeper because otherwise
-        // hydrating from a bad markup would cause a mismatch (since we don't
-        // patch dangerouslySetInnerHTML as text content).
-        const e = (
-          await render(
-            <div>
-              <span dangerouslySetInnerHTML={{__html: 'hello'}} />
-            </div>,
-          )
-        ).firstChild;
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.nodeType).toBe(TEXT_NODE_TYPE);
-        expect(e.textContent).toBe('hello');
-      },
-    );
-
-    itRenders(
-      'a div with dangerouslySetInnerHTML element string',
-      async render => {
-        const e = await render(
-          <div dangerouslySetInnerHTML={{__html: "<span id='child'/>"}} />,
-        );
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.tagName).toBe('SPAN');
-        expect(e.firstChild.getAttribute('id')).toBe('child');
-        expect(e.firstChild.childNodes.length).toBe(0);
-      },
-    );
-
-    itRenders('a div with dangerouslySetInnerHTML object', async render => {
-      const obj = {
-        toString() {
-          return "<span id='child'/>";
-        },
-      };
-      const e = await render(<div dangerouslySetInnerHTML={{__html: obj}} />);
+    itRenders('a div with dangerouslySetInnerHTML', async render => {
+      const e = await render(
+        <div dangerouslySetInnerHTML={{__html: "<span id='child'/>"}} />,
+      );
       expect(e.childNodes.length).toBe(1);
       expect(e.firstChild.tagName).toBe('SPAN');
       expect(e.firstChild.getAttribute('id')).toBe('child');
       expect(e.firstChild.childNodes.length).toBe(0);
-    });
-
-    itRenders(
-      'a div with dangerouslySetInnerHTML set to null',
-      async render => {
-        const e = await render(
-          <div dangerouslySetInnerHTML={{__html: null}} />,
-        );
-        expect(e.childNodes.length).toBe(0);
-      },
-    );
-
-    itRenders(
-      'a div with dangerouslySetInnerHTML set to undefined',
-      async render => {
-        const e = await render(
-          <div dangerouslySetInnerHTML={{__html: undefined}} />,
-        );
-        expect(e.childNodes.length).toBe(0);
-      },
-    );
-
-    itRenders('a noscript with children', async render => {
-      const e = await render(
-        <noscript>
-          <div>Enable JavaScript to run this app.</div>
-        </noscript>,
-      );
-      if (render === clientCleanRender) {
-        // On the client we ignore the contents of a noscript
-        expect(e.childNodes.length).toBe(0);
-      } else {
-        // On the server or when hydrating the content should be correct
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.textContent).toBe(
-          '<div>Enable JavaScript to run this app.</div>',
-        );
-      }
     });
 
     describe('newline-eating elements', function () {
@@ -882,7 +777,6 @@             // We have three nodes because there is a comment between them.
             expect(e.childNodes.length).toBe(3);
             // Hydration uses JS value with CR and null character.
-
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
             expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
           } else {
