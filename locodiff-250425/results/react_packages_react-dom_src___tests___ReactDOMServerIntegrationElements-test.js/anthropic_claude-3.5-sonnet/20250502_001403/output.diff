
index a0abc2d6..72ceb3d0 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmpsqs3t9qy_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmpudylehjz_actual.txt	
@@ -21,7 +21,6 @@ let ReactDOMServer;
 let assertConsoleErrorDev;
 
 function initModules() {
-  jest.resetModules();
   React = require('react');
   ReactDOM = require('react-dom');
   ReactDOMClient = require('react-dom/client');
@@ -420,7 +419,6 @@ describe('ReactDOMServerIntegration', () => {
           <svg>
             <image xlinkhref="http://i.imgur.com/w7GCRPb.png" />
           </svg>,
-          1,
         );
         e = e.firstChild;
         expect(e.hasAttributeNS('http://www.w3.org/1999/xlink', 'href')).toBe(
@@ -817,219 +815,4 @@ describe('ReactDOMServerIntegration', () => {
           expectTextNode(e.childNodes[0], '<span>Text1&quot;</span>');
           expectTextNode(e.childNodes[2], '<span>Text2&quot;</span>');
         } else {
-          expect(e.childNodes.length).toBe(2);
-          expectTextNode(e.childNodes[0], '<span>Text1&quot;</span>');
-          expectTextNode(e.childNodes[1], '<span>Text2&quot;</span>');
-        }
-      });
-    });
-
-    describe('carriage return and null character', () => {
-      // HTML parsing normalizes CR and CRLF to LF.
-      // It also ignores null character.
-      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
-      // If we have a mismatch, it might be caused by that (and should not be reported).
-      // We won't be patching up in this case as that matches our past behavior.
-
-      itRenders(
-        'an element with one text child with special characters',
-        async render => {
-          const e = await render(<div>{'foo\rbar\r\nbaz\nqux\u0000'}</div>);
-          if (
-            render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
-          ) {
-            expect(e.childNodes.length).toBe(1);
-            // Everything becomes LF when parsed from server HTML or hydrated.
-            // Null character is ignored.
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar\nbaz\nqux');
-          } else {
-            expect(e.childNodes.length).toBe(1);
-            // Client rendering uses JS value with CR.
-            // Null character stays.
-
-            expectNode(
-              e.childNodes[0],
-              TEXT_NODE_TYPE,
-              'foo\rbar\r\nbaz\nqux\u0000',
-            );
-          }
-        },
-      );
-
-      itRenders(
-        'an element with two text children with special characters',
-        async render => {
-          const e = await render(
-            <div>
-              {'foo\rbar'}
-              {'\r\nbaz\nqux\u0000'}
-            </div>,
-          );
-          if (
-            render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
-          ) {
-            // We have three nodes because there is a comment between them.
-            expect(e.childNodes.length).toBe(3);
-            // Everything becomes LF when parsed from server HTML or hydrated.
-            // Null character is ignored.
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar');
-            expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\nbaz\nqux');
-          } else if (render === clientRenderOnServerString) {
-            // We have three nodes because there is a comment between them.
-            expect(e.childNodes.length).toBe(3);
-            // Hydration uses JS value with CR and null character.
-
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
-            expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
-          } else {
-            expect(e.childNodes.length).toBe(2);
-            // Client rendering uses JS value with CR and null character.
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
-            expectNode(e.childNodes[1], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
-          }
-        },
-      );
-
-      itRenders(
-        'an element with an attribute value with special characters',
-        async render => {
-          const e = await render(<a title={'foo\rbar\r\nbaz\nqux\u0000'} />);
-          if (
-            render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
-          ) {
-            // Everything becomes LF when parsed from server HTML.
-            // Null character in an attribute becomes the replacement character.
-            // Hydration also ends up with LF because we don't patch up attributes.
-            expect(e.title).toBe('foo\nbar\nbaz\nqux\uFFFD');
-          } else {
-            // Client rendering uses JS value with CR and null character.
-            expect(e.title).toBe('foo\rbar\r\nbaz\nqux\u0000');
-          }
-        },
-      );
-    });
-
-    describe('components that render nullish', function () {
-      itRenders('a function returning null', async render => {
-        const NullComponent = () => null;
-        await render(<NullComponent />);
-      });
-
-      itRenders('a class returning null', async render => {
-        class NullComponent extends React.Component {
-          render() {
-            return null;
-          }
-        }
-        await render(<NullComponent />);
-      });
-
-      itRenders('a function returning undefined', async render => {
-        const UndefinedComponent = () => undefined;
-        await render(<UndefinedComponent />);
-      });
-
-      itRenders('a class returning undefined', async render => {
-        class UndefinedComponent extends React.Component {
-          render() {
-            return undefined;
-          }
-        }
-        await render(<UndefinedComponent />);
-      });
-    });
-
-    describe('components that throw errors', function () {
-      itThrowsWhenRendering(
-        'a function returning an object',
-        async render => {
-          const ObjectComponent = () => ({x: 123});
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'a class returning an object',
-        async render => {
-          class ObjectComponent extends React.Component {
-            render() {
-              return {x: 123};
-            }
-          }
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'top-level object',
-        async render => {
-          await render({x: 123});
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-    });
-
-    describe('badly-typed elements', function () {
-      itThrowsWhenRendering(
-        'object',
-        async render => {
-          let EmptyComponent = {};
-          EmptyComponent = <EmptyComponent />;
-          await render(EmptyComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: object.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'null',
-        async render => {
-          let NullComponent = null;
-          NullComponent = <NullComponent />;
-          await render(NullComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: null',
-      );
-
-      itThrowsWhenRendering(
-        'undefined',
-        async render => {
-          let UndefinedComponent = undefined;
-          UndefinedComponent = <UndefinedComponent />;
-          await render(UndefinedComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: undefined.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-    });
-  });
-});
\ No newline at end of file
+          expect(e.childNodes.
\ No newline at end of file
