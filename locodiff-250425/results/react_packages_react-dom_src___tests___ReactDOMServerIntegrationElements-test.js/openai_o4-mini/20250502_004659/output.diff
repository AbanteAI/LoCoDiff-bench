
index a0abc2d6..cd2d0eac 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmp5ymsboep_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmpc1fv27mt_actual.txt	
@@ -41,7 +41,6 @@ const {
   itThrowsWhenRendering,
   serverRender,
   streamRender,
-  clientCleanRender,
   clientRenderOnServerString,
 } = ReactDOMServerIntegrationUtils(initModules);
 
@@ -109,7 +108,7 @@ describe('ReactDOMServerIntegration', () => {
           render === clientRenderOnServerString ||
           render === streamRender
         ) {
-          // For plain server markup result we have comments between.
+          // For plain server markup result we should have comments between.
           // If we're able to hydrate, they remain.
           expect(e.childNodes.length).toBe(5);
           expectTextNode(e.childNodes[0], ' ');
@@ -191,7 +190,7 @@ describe('ReactDOMServerIntegration', () => {
           render === clientRenderOnServerString ||
           render === streamRender
         ) {
-          // In the server render output there's a comment between them.
+          // In the server markup there's a comment between them.
           expect(e.childNodes.length).toBe(3);
           expectTextNode(e.childNodes[0], 'foo');
           expectTextNode(e.childNodes[2], 'bar');
@@ -218,7 +217,7 @@ describe('ReactDOMServerIntegration', () => {
             render === clientRenderOnServerString ||
             render === streamRender
           ) {
-            // In the server render output there's a comment between them.
+            // In the server markup there's a comment between them.
             expect(e.childNodes.length).toBe(5);
             expectTextNode(e.childNodes[0], 'a');
             expectTextNode(e.childNodes[2], 'b');
@@ -251,17 +250,18 @@ describe('ReactDOMServerIntegration', () => {
           <div>
             {[['a'], 'b']}
             <div>
-              <X key="1" />d
+              <X key="1" />
+              d
             </div>
             e
           </div>,
         );
         if (
           render === serverRender ||
-          render === streamRender ||
-          render === clientRenderOnServerString
+          render === clientRenderOnServerString ||
+          render === streamRender
         ) {
-          // In the server render output there's comments between text nodes.
+          // In the server markup there's comments between text nodes.
           expect(e.childNodes.length).toBe(5);
           expectTextNode(e.childNodes[0], 'a');
           expectTextNode(e.childNodes[2], 'b');
@@ -287,7 +287,6 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.textContent).toBe('3');
       });
 
-      // zero is falsey, so it could look like no children if the code isn't careful.
       itRenders('zero as single child', async render => {
         const e = await render(<div>{0}</div>);
         expect(e.textContent).toBe('0');
@@ -300,7 +299,6 @@ describe('ReactDOMServerIntegration', () => {
             {40}
           </div>,
         );
-        // with Fiber, there are just two text nodes.
         if (
           render === serverRender ||
           render === clientRenderOnServerString ||
@@ -465,8 +463,7 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.namespaceURI).toBe('http://www.w3.org/1998/Math/MathML');
       });
     });
-    // specially wrapped components
-    // (see the big switch near the beginning ofReactDOMComponent.mountComponent)
+
     itRenders('an img', async render => {
       const e = await render(<img />);
       expect(e.childNodes.length).toBe(0);
@@ -578,24 +575,6 @@ describe('ReactDOMServerIntegration', () => {
       },
     );
 
-    itRenders('a noscript with children', async render => {
-      const e = await render(
-        <noscript>
-          <div>Enable JavaScript to run this app.</div>
-        </noscript>,
-      );
-      if (render === clientCleanRender) {
-        // On the client we ignore the contents of a noscript
-        expect(e.childNodes.length).toBe(0);
-      } else {
-        // On the server or when hydrating the content should be correct
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.textContent).toBe(
-          '<div>Enable JavaScript to run this app.</div>',
-        );
-      }
-    });
-
     describe('newline-eating elements', function () {
       itRenders(
         'a newline-eating tag with content not starting with \\n',
@@ -623,7 +602,7 @@ describe('ReactDOMServerIntegration', () => {
         expectNode(e.firstChild, TEXT_NODE_TYPE, 'foo');
       }
 
-      itRenders('stateless components', async render => {
+      itRenders('FunctionComponent', async render => {
         const FunctionComponent = () => <div>foo</div>;
         checkFooDiv(await render(<FunctionComponent />));
       });
@@ -637,20 +616,16 @@ describe('ReactDOMServerIntegration', () => {
         checkFooDiv(await render(<ClassComponent />));
       });
 
-      itThrowsWhenRendering(
-        'factory components',
-        async render => {
-          const FactoryComponent = () => {
-            return {
-              render: function () {
-                return <div>foo</div>;
-              },
-            };
+      itRenders('factory components', async render => {
+        const FactoryComponent = () => {
+          return {
+            render: function () {
+              return <div>foo</div>;
+            },
           };
-          await render(<FactoryComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {render})',
-      );
+        };
+        checkFooDiv(await render(<FactoryComponent />, 1));
+      });
     });
 
     describe('component hierarchies', function () {
@@ -753,7 +728,6 @@ describe('ReactDOMServerIntegration', () => {
       itRenders(
         'a div with a single child surrounded by whitespace',
         async render => {
-          // prettier-ignore
           const e = await render(<div id="parent">  <div id="child" />   </div>);
           expect(e.childNodes.length).toBe(3);
           const textNode1 = e.childNodes[0];
@@ -773,14 +747,12 @@ describe('ReactDOMServerIntegration', () => {
           <Component>{['a', 'b', [undefined], [[false, 'c']]]}</Component>,
         );
 
-        const parent = e.parentNode;
+        let parent = e.parentNode;
         if (
           render === serverRender ||
           render === clientRenderOnServerString ||
           render === streamRender
         ) {
-          // For plain server markup result we have comments between.
-          // If we're able to hydrate, they remain.
           expect(parent.childNodes.length).toBe(5);
           expectTextNode(parent.childNodes[0], 'a');
           expectTextNode(parent.childNodes[2], 'b');
@@ -825,30 +797,19 @@ describe('ReactDOMServerIntegration', () => {
     });
 
     describe('carriage return and null character', () => {
-      // HTML parsing normalizes CR and CRLF to LF.
-      // It also ignores null character.
-      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
-      // If we have a mismatch, it might be caused by that (and should not be reported).
-      // We won't be patching up in this case as that matches our past behavior.
-
       itRenders(
         'an element with one text child with special characters',
         async render => {
           const e = await render(<div>{'foo\rbar\r\nbaz\nqux\u0000'}</div>);
           if (
             render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
+            render === clientRenderOnServerString ||
+            render === streamRender
           ) {
             expect(e.childNodes.length).toBe(1);
-            // Everything becomes LF when parsed from server HTML or hydrated.
-            // Null character is ignored.
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar\nbaz\nqux');
           } else {
             expect(e.childNodes.length).toBe(1);
-            // Client rendering uses JS value with CR.
-            // Null character stays.
-
             expectNode(
               e.childNodes[0],
               TEXT_NODE_TYPE,
@@ -869,25 +830,14 @@ describe('ReactDOMServerIntegration', () => {
           );
           if (
             render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
+            render === clientRenderOnServerString ||
+            render === streamRender
           ) {
-            // We have three nodes because there is a comment between them.
             expect(e.childNodes.length).toBe(3);
-            // Everything becomes LF when parsed from server HTML or hydrated.
-            // Null character is ignored.
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar');
             expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\nbaz\nqux');
-          } else if (render === clientRenderOnServerString) {
-            // We have three nodes because there is a comment between them.
-            expect(e.childNodes.length).toBe(3);
-            // Hydration uses JS value with CR and null character.
-
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
-            expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
           } else {
             expect(e.childNodes.length).toBe(2);
-            // Client rendering uses JS value with CR and null character.
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
             expectNode(e.childNodes[1], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
           }
@@ -900,15 +850,11 @@ describe('ReactDOMServerIntegration', () => {
           const e = await render(<a title={'foo\rbar\r\nbaz\nqux\u0000'} />);
           if (
             render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
+            render === clientRenderOnServerString ||
+            render === streamRender
           ) {
-            // Everything becomes LF when parsed from server HTML.
-            // Null character in an attribute becomes the replacement character.
-            // Hydration also ends up with LF because we don't patch up attributes.
             expect(e.title).toBe('foo\nbar\nbaz\nqux\uFFFD');
           } else {
-            // Client rendering uses JS value with CR and null character.
             expect(e.title).toBe('foo\rbar\r\nbaz\nqux\u0000');
           }
         },
@@ -1000,8 +946,7 @@ describe('ReactDOMServerIntegration', () => {
         'Element type is invalid: expected a string (for built-in components) or a class/function ' +
           '(for composite components) but got: object.' +
           (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
+            ? ' You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.'
             : ''),
       );
 
@@ -1026,8 +971,7 @@ describe('ReactDOMServerIntegration', () => {
         'Element type is invalid: expected a string (for built-in components) or a class/function ' +
           '(for composite components) but got: undefined.' +
           (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
+            ? ' You likely forgot to export your component from the file it\'s defined in, or you might have mixed up default and named imports.'
             : ''),
       );
     });
