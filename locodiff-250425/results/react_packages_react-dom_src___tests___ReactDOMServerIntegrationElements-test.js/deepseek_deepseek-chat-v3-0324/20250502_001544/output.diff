--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual)@@ -897,139 +897,4 @@       itRenders(
         'an element with an attribute value with special characters',
         async render => {
-          const e = await render(<a title={'foo\rbar\r\nbaz\nqux\u0000'} />);
-          if (
-            render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
-          ) {
-            // Everything becomes LF when parsed from server HTML.
-            // Null character in an attribute becomes the replacement character.
-            // Hydration also ends up with LF because we don't patch up attributes.
-            expect(e.title).toBe('foo\nbar\nbaz\nqux\uFFFD');
-          } else {
-            // Client rendering uses JS value with CR and null character.
-            expect(e.title).toBe('foo\rbar\r\nbaz\nqux\u0000');
-          }
-        },
-      );
-    });
-
-    describe('components that render nullish', function () {
-      itRenders('a function returning null', async render => {
-        const NullComponent = () => null;
-        await render(<NullComponent />);
-      });
-
-      itRenders('a class returning null', async render => {
-        class NullComponent extends React.Component {
-          render() {
-            return null;
-          }
-        }
-        await render(<NullComponent />);
-      });
-
-      itRenders('a function returning undefined', async render => {
-        const UndefinedComponent = () => undefined;
-        await render(<UndefinedComponent />);
-      });
-
-      itRenders('a class returning undefined', async render => {
-        class UndefinedComponent extends React.Component {
-          render() {
-            return undefined;
-          }
-        }
-        await render(<UndefinedComponent />);
-      });
-    });
-
-    describe('components that throw errors', function () {
-      itThrowsWhenRendering(
-        'a function returning an object',
-        async render => {
-          const ObjectComponent = () => ({x: 123});
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'a class returning an object',
-        async render => {
-          class ObjectComponent extends React.Component {
-            render() {
-              return {x: 123};
-            }
-          }
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'top-level object',
-        async render => {
-          await render({x: 123});
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-    });
-
-    describe('badly-typed elements', function () {
-      itThrowsWhenRendering(
-        'object',
-        async render => {
-          let EmptyComponent = {};
-          EmptyComponent = <EmptyComponent />;
-          await render(EmptyComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: object.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'null',
-        async render => {
-          let NullComponent = null;
-          NullComponent = <NullComponent />;
-          await render(NullComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: null',
-      );
-
-      itThrowsWhenRendering(
-        'undefined',
-        async render => {
-          let UndefinedComponent = undefined;
-          UndefinedComponent = <UndefinedComponent />;
-          await render(UndefinedComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: undefined.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-    });
-  });
-});+          const e = await render(<a title={'foo\rbar\r\nbaz\nqux\u0000'} />);