
index a0abc2d6..a6522085 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmpovcwdyk7_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmpo7mctwks_actual.txt	
@@ -235,12 +235,12 @@ describe('ReactDOMServerIntegration', () => {
       itRenders('a tree with sibling host and text nodes', async render => {
         class X extends React.Component {
           render() {
-            return [null, [<Y key="1" />], false];
+            return [null, [<Y key={'1'} />], false];
           }
         }
 
         function Y() {
-          return [<Z key="1" />, ['c']];
+          return [<Z key={'1'} />, ['c']];
         }
 
         function Z() {
@@ -251,7 +251,7 @@ describe('ReactDOMServerIntegration', () => {
           <div>
             {[['a'], 'b']}
             <div>
-              <X key="1" />d
+              <X key={'1'} />d
             </div>
             e
           </div>,
@@ -623,7 +623,7 @@ describe('ReactDOMServerIntegration', () => {
         expectNode(e.firstChild, TEXT_NODE_TYPE, 'foo');
       }
 
-      itRenders('stateless components', async render => {
+      itRenders('Function components', async render => {
         const FunctionComponent = () => <div>foo</div>;
         checkFooDiv(await render(<FunctionComponent />));
       });
@@ -776,8 +776,8 @@ describe('ReactDOMServerIntegration', () => {
         const parent = e.parentNode;
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === streamRender ||
+          render === clientRenderOnServerString
         ) {
           // For plain server markup result we have comments between.
           // If we're able to hydrate, they remain.
@@ -1021,6 +1021,7 @@ describe('ReactDOMServerIntegration', () => {
         async render => {
           let UndefinedComponent = undefined;
           UndefinedComponent = <UndefinedComponent />;
+
           await render(UndefinedComponent);
         },
         'Element type is invalid: expected a string (for built-in components) or a class/function ' +
