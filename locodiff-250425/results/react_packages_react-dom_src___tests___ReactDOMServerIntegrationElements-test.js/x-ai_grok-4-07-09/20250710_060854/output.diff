
index a0abc2d60..090546035 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmp6w81dqan_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmpkytt0cot_actual.txt	
@@ -51,8 +51,6 @@ describe('ReactDOMServerIntegration', () => {
   });
 
   afterEach(() => {
-    // TODO: This is a hack because expectErrors does not restore mock,
-    // however fixing it requires a major refactor to all these tests.
     if (console.error.mockClear) {
       console.error.mockRestore();
     }
@@ -78,7 +76,6 @@ describe('ReactDOMServerIntegration', () => {
       });
 
       itRenders('a div with text with flanking whitespace', async render => {
-        // prettier-ignore
         const e = await render(<div>  Text </div>);
         expect(e.childNodes.length).toBe(1);
         expectNode(e.childNodes[0], TEXT_NODE_TYPE, '  Text ');
@@ -102,15 +99,11 @@ describe('ReactDOMServerIntegration', () => {
       });
 
       itRenders('a div with multiple whitespace children', async render => {
-        // prettier-ignore
         const e = await render(<div>{' '}{' '}{' '}</div>);
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === clientRenderOnServerString
         ) {
-          // For plain server markup result we have comments between.
-          // If we're able to hydrate, they remain.
           expect(e.childNodes.length).toBe(5);
           expectTextNode(e.childNodes[0], ' ');
           expectTextNode(e.childNodes[2], ' ');
@@ -138,12 +131,6 @@ describe('ReactDOMServerIntegration', () => {
       });
 
       itRenders('a non-standard element with text', async render => {
-        // This test suite generally assumes that we get exactly
-        // the same warnings (or none) for all scenarios including
-        // SSR + innerHTML, hydration, and client-side rendering.
-        // However this particular warning fires only when creating
-        // DOM nodes on the client side. We force it to fire early
-        // so that it gets deduplicated later, and doesn't fail the test.
         ReactDOM.flushSync(() => {
           const root = ReactDOMClient.createRoot(document.createElement('div'));
           root.render(<nonstandard />);
@@ -188,10 +175,8 @@ describe('ReactDOMServerIntegration', () => {
         );
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === clientRenderOnServerString
         ) {
-          // In the server render output there's a comment between them.
           expect(e.childNodes.length).toBe(3);
           expectTextNode(e.childNodes[0], 'foo');
           expectTextNode(e.childNodes[2], 'bar');
@@ -215,10 +200,8 @@ describe('ReactDOMServerIntegration', () => {
           );
           if (
             render === serverRender ||
-            render === clientRenderOnServerString ||
-            render === streamRender
+            render === clientRenderOnServerString
           ) {
-            // In the server render output there's a comment between them.
             expect(e.childNodes.length).toBe(5);
             expectTextNode(e.childNodes[0], 'a');
             expectTextNode(e.childNodes[2], 'b');
@@ -258,10 +241,8 @@ describe('ReactDOMServerIntegration', () => {
         );
         if (
           render === serverRender ||
-          render === streamRender ||
           render === clientRenderOnServerString
         ) {
-          // In the server render output there's comments between text nodes.
           expect(e.childNodes.length).toBe(5);
           expectTextNode(e.childNodes[0], 'a');
           expectTextNode(e.childNodes[2], 'b');
@@ -287,7 +268,6 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.textContent).toBe('3');
       });
 
-      // zero is falsey, so it could look like no children if the code isn't careful.
       itRenders('zero as single child', async render => {
         const e = await render(<div>{0}</div>);
         expect(e.textContent).toBe('0');
@@ -300,13 +280,10 @@ describe('ReactDOMServerIntegration', () => {
             {40}
           </div>,
         );
-        // with Fiber, there are just two text nodes.
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === clientRenderOnServerString
         ) {
-          // In the server markup there's a comment between.
           expect(e.childNodes.length).toBe(3);
           expectTextNode(e.childNodes[0], 'foo');
           expectTextNode(e.childNodes[2], '40');
@@ -324,7 +301,7 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.childNodes.length).toBe(0);
       });
 
-      itRenders('false single child as blank', async render => {
+      itRenders('false single child as blank',Happy async render => {
         const e = await render(<div>{false}</div>);
         expect(e.childNodes.length).toBe(0);
       });
@@ -356,7 +333,7 @@ describe('ReactDOMServerIntegration', () => {
         expectTextNode(e.childNodes[0], 'foo');
       });
 
-      itRenders('null and false children together as blank', async render => {
+      itRenders(' null and false children together as blank', async render => {
         const e = await render(
           <div>
             {false}
@@ -400,35 +377,31 @@ describe('ReactDOMServerIntegration', () => {
       itRenders(
         'svg child element with a namespace attribute',
         async render => {
-          let e = await render(
+          const e = await render(
             <svg>
               <image xlinkHref="http://i.imgur.com/w7GCRPb.png" />
             </svg>,
           );
-          e = e.firstChild;
-          expect(e.childNodes.length).toBe(0);
-          expect(e.tagName).toBe('image');
-          expect(e.namespaceURI).toBe('http://www.w3.org/2000/svg');
-          expect(e.getAttributeNS('http://www.w3.org/1999/xlink', 'href')).toBe(
+          const image = e.firstChild;
+          expect(image.childNodes.length).toBe(0);
+          expect(image.tagName).toBe('image');
+          expect(image.namespaceURI).toBe('http://www.w3.org/2000/svg');
+          expect(image.getAttributeNS('http://www.w3.org/1999/xlink', 'href')).toBe(
             'http://i.imgur.com/w7GCRPb.png',
           );
         },
       );
 
       itRenders('svg child element with a badly cased alias', async render => {
-        let e = await render(
+        const e = await render(
           <svg>
             <image xlinkhref="http://i.imgur.com/w7GCRPb.png" />
           </svg>,
           1,
         );
-        e = e.firstChild;
-        expect(e.hasAttributeNS('http://www.w3.org/1999/xlink', 'href')).toBe(
-          false,
-        );
-        expect(e.getAttribute('xlinkhref')).toBe(
-          'http://i.imgur.com/w7GCRPb.png',
-        );
+        const image = e.firstChild;
+        expect(image.hasAttributeNS('http://www.w3.org/1999/xlink', 'href')).toBe(false);
+        expect(image.getAttribute('xlinkhref')).toBe('http://i.imgur.com/w7GCRPb.png');
       });
 
       itRenders('svg element with a tabIndex attribute', async render => {
@@ -465,8 +438,7 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.namespaceURI).toBe('http://www.w3.org/1998/Math/MathML');
       });
     });
-    // specially wrapped components
-    // (see the big switch near the beginning ofReactDOMComponent.mountComponent)
+
     itRenders('an img', async render => {
       const e = await render(<img />);
       expect(e.childNodes.length).toBe(0);
@@ -482,9 +454,6 @@ describe('ReactDOMServerIntegration', () => {
     });
 
     itRenders('a div with dangerouslySetInnerHTML number', async render => {
-      // Put dangerouslySetInnerHTML one level deeper because otherwise
-      // hydrating from a bad markup would cause a mismatch (since we don't
-      // patch dangerouslySetInnerHTML as text content).
       const e = (
         await render(
           <div>
@@ -498,9 +467,6 @@ describe('ReactDOMServerIntegration', () => {
     });
 
     itRenders('a div with dangerouslySetInnerHTML boolean', async render => {
-      // Put dangerouslySetInnerHTML one level deeper because otherwise
-      // hydrating from a bad markup would cause a mismatch (since we don't
-      // patch dangerouslySetInnerHTML as text content).
       const e = (
         await render(
           <div>
@@ -516,9 +482,6 @@ describe('ReactDOMServerIntegration', () => {
     itRenders(
       'a div with dangerouslySetInnerHTML text string',
       async render => {
-        // Put dangerouslySetInnerHTML one level deeper because otherwise
-        // hydrating from a bad markup would cause a mismatch (since we don't
-        // patch dangerouslySetInnerHTML as text content).
         const e = (
           await render(
             <div>
@@ -578,24 +541,6 @@ describe('ReactDOMServerIntegration', () => {
       },
     );
 
-    itRenders('a noscript with children', async render => {
-      const e = await render(
-        <noscript>
-          <div>Enable JavaScript to run this app.</div>
-        </noscript>,
-      );
-      if (render === clientCleanRender) {
-        // On the client we ignore the contents of a noscript
-        expect(e.childNodes.length).toBe(0);
-      } else {
-        // On the server or when hydrating the content should be correct
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.textContent).toBe(
-          '<div>Enable JavaScript to run this app.</div>',
-        );
-      }
-    });
-
     describe('newline-eating elements', function () {
       itRenders(
         'a newline-eating tag with content not starting with \\n',
@@ -617,13 +562,27 @@ describe('ReactDOMServerIntegration', () => {
       });
     });
 
+    itRenders('a noscript with children', async render => {
+      const e = await render(
+        <noscript>
+          <div>Enable JavaScript to run this app.</div>
+        </noscript>,
+      );
+      if (render === clientCleanRender) {
+        expect(e.childNodes.length).toBe(0);
+      } else {
+        expect(e.childNodes.length).toBe(1);
+        expect(e.firstChild.textContent).toBe('<div>Enable JavaScript to run this app.</div>');
+      }
+    });
+
     describe('different component implementations', function () {
       function checkFooDiv(e) {
         expect(e.childNodes.length).toBe(1);
         expectNode(e.firstChild, TEXT_NODE_TYPE, 'foo');
       }
 
-      itRenders('stateless components', async render => {
+      itRenders('function components', async render => {
         const FunctionComponent = () => <div>foo</div>;
         checkFooDiv(await render(<FunctionComponent />));
       });
@@ -745,7 +704,7 @@ describe('ReactDOMServerIntegration', () => {
           expect(child1.id).toBe('child1');
           expect(child1.childNodes.length).toBe(0);
           expectTextNode(textNode, ' ');
-          expect(child2.id).toBe('child2');
+         expect(child2.id).toBe('child2');
           expect(child2.childNodes.length).toBe(0);
         },
       );
@@ -753,7 +712,6 @@ describe('ReactDOMServerIntegration', () => {
       itRenders(
         'a div with a single child surrounded by whitespace',
         async render => {
-          // prettier-ignore
           const e = await render(<div id="parent">  <div id="child" />   </div>);
           expect(e.childNodes.length).toBe(3);
           const textNode1 = e.childNodes[0];
@@ -776,11 +734,8 @@ describe('ReactDOMServerIntegration', () => {
         const parent = e.parentNode;
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === clientRenderOnServerString
         ) {
-          // For plain server markup result we have comments between.
-          // If we're able to hydrate, they remain.
           expect(parent.childNodes.length).toBe(5);
           expectTextNode(parent.childNodes[0], 'a');
           expectTextNode(parent.childNodes[2], 'b');
@@ -810,8 +765,7 @@ describe('ReactDOMServerIntegration', () => {
         );
         if (
           render === serverRender ||
-          render === clientRenderOnServerString ||
-          render === streamRender
+          render === clientRenderOnServerString
         ) {
           expect(e.childNodes.length).toBe(3);
           expectTextNode(e.childNodes[0], '<span>Text1&quot;</span>');
@@ -825,36 +779,14 @@ describe('ReactDOMServerIntegration', () => {
     });
 
     describe('carriage return and null character', () => {
-      // HTML parsing normalizes CR and CRLF to LF.
-      // It also ignores null character.
-      // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
-      // If we have a mismatch, it might be caused by that (and should not be reported).
-      // We won't be patching up in this case as that matches our past behavior.
-
       itRenders(
         'an element with one text child with special characters',
         async render => {
           const e = await render(<div>{'foo\rbar\r\nbaz\nqux\u0000'}</div>);
-          if (
-            render === serverRender ||
-            render === streamRender ||
-            render === clientRenderOnServerString
-          ) {
-            expect(e.childNodes.length).toBe(1);
-            // Everything becomes LF when parsed from server HTML or hydrated.
-            // Null character is ignored.
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar\nbaz\nqux');
-          } else {
-            expect(e.childNodes.length).toBe(1);
-            // Client rendering uses JS value with CR.
-            // Null character stays.
-
-            expectNode(
-              e.childNodes[0],
-              TEXT_NODE_TYPE,
-              'foo\rbar\r\nbaz\nqux\u0000',
-            );
-          }
+          expect(e.childNodes.length).toBe(1);
+          // Everything becomes LF when parsed from server HTML or hydrated.
+          // Null character is ignored.
+          expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar\nbaz\nqux');
         },
       );
 
@@ -872,19 +804,11 @@ describe('ReactDOMServerIntegration', () => {
             render === streamRender ||
             render === clientRenderOnServerString
           ) {
-            // We have three nodes because there is a comment between them.
             expect(e.childNodes.length).toBe(3);
             // Everything becomes LF when parsed from server HTML or hydrated.
             // Null character is ignored.
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\nbar');
             expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\nbaz\nqux');
-          } else if (render === clientRenderOnServerString) {
-            // We have three nodes because there is a comment between them.
-            expect(e.childNodes.length).toBe(3);
-            // Hydration uses JS value with CR and null character.
-
-            expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
-            expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
           } else {
             expect(e.childNodes.length).toBe(2);
             // Client rendering uses JS value with CR and null character.
@@ -903,12 +827,8 @@ describe('ReactDOMServerIntegration', () => {
             render === streamRender ||
             render === clientRenderOnServerString
           ) {
-            // Everything becomes LF when parsed from server HTML.
-            // Null character in an attribute becomes the replacement character.
-            // Hydration also ends up with LF because we don't patch up attributes.
             expect(e.title).toBe('foo\nbar\nbaz\nqux\uFFFD');
           } else {
-            // Client rendering uses JS value with CR and null character.
             expect(e.title).toBe('foo\rbar\r\nbaz\nqux\u0000');
           }
         },
@@ -954,8 +874,7 @@ describe('ReactDOMServerIntegration', () => {
         },
         'Objects are not valid as a React child (found: object with keys {x}).' +
           (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
+            ? ' If you meant to render a collection of children, use an array instead.'
             : ''),
       );
 
@@ -971,8 +890,7 @@ describe('ReactDOMServerIntegration', () => {
         },
         'Objects are not valid as a React child (found: object with keys {x}).' +
           (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
+            ? ' If you meant to render a collection of children, use an array instead.'
             : ''),
       );
 
@@ -982,9 +900,8 @@ describe('ReactDOMServerIntegration', () => {
           await render({x: 123});
         },
         'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
+          (__ DEV__
+            ? ' If you meant to render a collection of children, use an array instead.'
             : ''),
       );
     });
@@ -1025,8 +942,8 @@ describe('ReactDOMServerIntegration', () => {
         },
         'Element type is invalid: expected a string (for built-in components) or a class/function ' +
           '(for composite components) but got: undefined.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
+          (__DEV__ 
+            ? " You likely forgot your component from the file it's defined in, " +
               'or you might have mixed up default and named imports.'
             : ''),
       );
