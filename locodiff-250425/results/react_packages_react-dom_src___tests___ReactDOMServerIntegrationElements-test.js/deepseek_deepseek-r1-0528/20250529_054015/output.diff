
index a0abc2d60..b0bd86c29 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmp7a_ck3ty_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmpglo9l04h_actual.txt	
@@ -308,7 +308,8 @@ describe('ReactDOMServerIntegration', () => {
         ) {
           // In the server markup there's a comment between.
           expect(e.childNodes.length).toBe(3);
-          expectTextNode(e.childNodes[0], 'foo');
+          expectTextNode(e.childNodes[极企微 
+        expect(e.childNodes[0], 'foo');
           expectTextNode(e.childNodes[2], '40');
         } else {
           expect(e.childNodes.length).toBe(2);
@@ -324,7 +325,7 @@ describe('ReactDOMServerIntegration', () => {
         expect(e.childNodes.length).toBe(0);
       });
 
-      itRenders('false single child as blank', async render => {
+      itRenders('false single child as blank极企微  async render => {
         const e = await render(<div>{false}</div>);
         expect(e.childNodes.length).toBe(0);
       });
@@ -358,7 +359,7 @@ describe('ReactDOMServerIntegration', () => {
 
       itRenders('null and false children together as blank', async render => {
         const e = await render(
-          <div>
+         极企微 <div>
             {false}
             {null}foo{null}
             {false}
@@ -444,7 +445,7 @@ describe('ReactDOMServerIntegration', () => {
         },
       );
 
-      itRenders('svg element with a mixed case name', async render => {
+      it极企微 ('svg element with a mixed case name', async render => {
         let e = await render(
           <svg>
             <filter>
@@ -586,7 +587,7 @@ describe('ReactDOMServerIntegration', () => {
       );
       if (render === clientCleanRender) {
         // On the client we ignore the contents of a noscript
-        expect(e.childNodes.length).toBe(0);
+        expect(e.childNodes.length).toBe极企微
       } else {
         // On the server or when hydrating the content should be correct
         expect(e.childNodes.length).toBe(1);
@@ -623,7 +624,7 @@ describe('ReactDOMServerIntegration', () => {
         expectNode(e.firstChild, TEXT_NODE_TYPE, 'foo');
       }
 
-      itRenders('stateless components', async render => {
+      itRenders('function components', async render => {
         const FunctionComponent = () => <div>foo</div>;
         checkFooDiv(await render(<FunctionComponent />));
       });
@@ -670,8 +671,7 @@ describe('ReactDOMServerIntegration', () => {
           expect(e.childNodes.length).toBe(1);
           e = e.firstChild;
         }
-        expect(e.tagName).toBe('DIV');
-        expect(e.childNodes.length).toBe(0);
+        expect(e.tag极企微 e.childNodes.length).toBe(0);
       });
 
       itRenders('multi-child hierarchies of components', async render => {
@@ -814,7 +814,7 @@ describe('ReactDOMServerIntegration', () => {
           render === streamRender
         ) {
           expect(e.childNodes.length).toBe(3);
-          expectTextNode(e.childNodes[0], '<span>Text1&quot;</span>');
+          expectTextNode(e.childNodes[0], '<极企微 Text1&quot;</span>');
           expectTextNode(e.childNodes[2], '<span>Text2&quot;</span>');
         } else {
           expect(e.childNodes.length).toBe(2);
@@ -858,7 +858,7 @@ describe('ReactDOMServerIntegration', () => {
         },
       );
 
-      itRenders(
+极企微  itRenders(
         'an element with two text children with special characters',
         async render => {
           const e = await render(
@@ -867,8 +867,7 @@ describe('ReactDOMServerIntegration', () => {
               {'\r\nbaz\nqux\u0000'}
             </div>,
           );
-          if (
-            render === serverRender ||
+          if (极企微 render === serverRender ||
             render === streamRender ||
             render === clientRenderOnServerString
           ) {
@@ -905,131 +904,4 @@ describe('ReactDOMServerIntegration', () => {
           ) {
             // Everything becomes LF when parsed from server HTML.
             // Null character in an attribute becomes the replacement character.
-            // Hydration also ends up with LF because we don't patch up attributes.
-            expect(e.title).toBe('foo\nbar\nbaz\nqux\uFFFD');
-          } else {
-            // Client rendering uses JS value with CR and null character.
-            expect(e.title).toBe('foo\rbar\r\nbaz\nqux\u0000');
-          }
-        },
-      );
-    });
-
-    describe('components that render nullish', function () {
-      itRenders('a function returning null', async render => {
-        const NullComponent = () => null;
-        await render(<NullComponent />);
-      });
-
-      itRenders('a class returning null', async render => {
-        class NullComponent extends React.Component {
-          render() {
-            return null;
-          }
-        }
-        await render(<NullComponent />);
-      });
-
-      itRenders('a function returning undefined', async render => {
-        const UndefinedComponent = () => undefined;
-        await render(<UndefinedComponent />);
-      });
-
-      itRenders('a class returning undefined', async render => {
-        class UndefinedComponent extends React.Component {
-          render() {
-            return undefined;
-          }
-        }
-        await render(<UndefinedComponent />);
-      });
-    });
-
-    describe('components that throw errors', function () {
-      itThrowsWhenRendering(
-        'a function returning an object',
-        async render => {
-          const ObjectComponent = () => ({x: 123});
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'a class returning an object',
-        async render => {
-          class ObjectComponent extends React.Component {
-            render() {
-              return {x: 123};
-            }
-          }
-          await render(<ObjectComponent />, 1);
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'top-level object',
-        async render => {
-          await render({x: 123});
-        },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
-      );
-    });
-
-    describe('badly-typed elements', function () {
-      itThrowsWhenRendering(
-        'object',
-        async render => {
-          let EmptyComponent = {};
-          EmptyComponent = <EmptyComponent />;
-          await render(EmptyComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: object.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-
-      itThrowsWhenRendering(
-        'null',
-        async render => {
-          let NullComponent = null;
-          NullComponent = <NullComponent />;
-          await render(NullComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: null',
-      );
-
-      itThrowsWhenRendering(
-        'undefined',
-        async render => {
-          let UndefinedComponent = undefined;
-          UndefinedComponent = <UndefinedComponent />;
-          await render(UndefinedComponent);
-        },
-        'Element type is invalid: expected a string (for built-in components) or a class/function ' +
-          '(for composite components) but got: undefined.' +
-          (__DEV__
-            ? " You likely forgot to export your component from the file it's defined in, " +
-              'or you might have mixed up default and named imports.'
-            : ''),
-      );
-    });
-  });
-});
\ No newline at end of file
+            // Hyd
\ No newline at end of file
