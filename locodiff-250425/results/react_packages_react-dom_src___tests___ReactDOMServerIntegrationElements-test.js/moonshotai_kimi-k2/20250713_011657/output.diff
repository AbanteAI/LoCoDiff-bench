
index a0abc2d60..8446ce803 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_expectedoutput.txt (expected):tmp/tmpuvq1j3xo_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationElements-test.js_extracted.txt (actual):tmp/tmprx8_rpms_actual.txt	
@@ -256,19 +256,24 @@ describe('ReactDOMServerIntegration', () => {
             e
           </div>,
         );
-        if (
-          render === serverRender ||
-          render === streamRender ||
-          render === clientRenderOnServerString
-        ) {
+        if (render === serverRender || render === clientRenderOnServerString) {
           // In the server render output there's comments between text nodes.
           expect(e.childNodes.length).toBe(5);
           expectTextNode(e.childNodes[0], 'a');
           expectTextNode(e.childNodes[2], 'b');
-          expect(e.childNodes[3].childNodes.length).toBe(3);
+          expect(e.childNodes[3].childNodes.length).toBe(2);
           expectTextNode(e.childNodes[3].childNodes[0], 'c');
-          expectTextNode(e.childNodes[3].childNodes[2], 'd');
+          expectTextNode(e.childNodes[3].childNodes[1], 'd');
           expectTextNode(e.childNodes[4], 'e');
+        } else if (render === streamRender) {
+          // In the server render output there's comments after each text node.
+          expect(e.childNodes.length).toBe(7);
+          expectTextNode(e.childNodes[0], 'a');
+          expectTextNode(e.childNodes[2], 'b');
+          expect(e.childNodes[4].childNodes.length).toBe(4);
+          expectTextNode(e.childNodes[4].childNodes[0], 'c');
+          expectTextNode(e.childNodes[4].childNodes[2], 'd');
+          expectTextNode(e.childNodes[5], 'e');
         } else {
           expect(e.childNodes.length).toBe(4);
           expectTextNode(e.childNodes[0], 'a');
@@ -578,24 +583,6 @@ describe('ReactDOMServerIntegration', () => {
       },
     );
 
-    itRenders('a noscript with children', async render => {
-      const e = await render(
-        <noscript>
-          <div>Enable JavaScript to run this app.</div>
-        </noscript>,
-      );
-      if (render === clientCleanRender) {
-        // On the client we ignore the contents of a noscript
-        expect(e.childNodes.length).toBe(0);
-      } else {
-        // On the server or when hydrating the content should be correct
-        expect(e.childNodes.length).toBe(1);
-        expect(e.firstChild.textContent).toBe(
-          '<div>Enable JavaScript to run this app.</div>',
-        );
-      }
-    });
-
     describe('newline-eating elements', function () {
       itRenders(
         'a newline-eating tag with content not starting with \\n',
@@ -882,7 +869,6 @@ describe('ReactDOMServerIntegration', () => {
             // We have three nodes because there is a comment between them.
             expect(e.childNodes.length).toBe(3);
             // Hydration uses JS value with CR and null character.
-
             expectNode(e.childNodes[0], TEXT_NODE_TYPE, 'foo\rbar');
             expectNode(e.childNodes[2], TEXT_NODE_TYPE, '\r\nbaz\nqux\u0000');
           } else {
@@ -952,11 +938,7 @@ describe('ReactDOMServerIntegration', () => {
           const ObjectComponent = () => ({x: 123});
           await render(<ObjectComponent />, 1);
         },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
+        'Objects are not valid as a React child (found: object with keys {x}).',
       );
 
       itThrowsWhenRendering(
@@ -969,11 +951,7 @@ describe('ReactDOMServerIntegration', () => {
           }
           await render(<ObjectComponent />, 1);
         },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
+        'Objects are not valid as a React child (found: object with keys {x}).',
       );
 
       itThrowsWhenRendering(
@@ -981,11 +959,7 @@ describe('ReactDOMServerIntegration', () => {
         async render => {
           await render({x: 123});
         },
-        'Objects are not valid as a React child (found: object with keys {x}).' +
-          (__DEV__
-            ? ' If you meant to render a collection of children, use ' +
-              'an array instead.'
-            : ''),
+        'Objects are not valid as a React child (found: object with keys {x}).',
       );
     });
 
