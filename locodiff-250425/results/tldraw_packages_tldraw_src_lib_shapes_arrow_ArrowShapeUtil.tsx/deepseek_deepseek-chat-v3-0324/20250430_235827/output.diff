--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -37,6 +37,7 @@ 	useEditor,
 	useIsEditing,
 	useSharedSafeId,
+	useUniqueSafeId,
 	useValue,
 } from '@tldraw/editor'
 import React from 'react'
@@ -152,6 +153,7 @@ 				})
 			: new Arc2d({
 					center: Vec.Cast(info.handleArc.center),
+					radius: info.handleArc.radius,
 					start: Vec.Cast(info.start.point),
 					end: Vec.Cast(info.end.point),
 					sweepFlag: info.bodyArc.sweepFlag,
@@ -372,8 +374,7 @@ 				(selectedShapeIds.includes(bindings.start.toId) ||
 					this.editor.isAncestorSelected(bindings.start.toId))) ||
 			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
+				(selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
 		}
@@ -393,25 +394,6 @@ 			}),
 		})
 
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
-		}
-
 		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
 			const binding = bindings[handleName]
 			if (!binding) continue
@@ -446,7 +428,11 @@ 				filter: (targetShape) => {
 					return (
 						!targetShape.isLocked &&
-						this.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: 'arrow' })
+						this.editor.canBindShapes({
+							fromShape: shape,
+							toShape: targetShape,
+							binding: 'arrow',
+						})
 					)
 				},
 			})
@@ -469,7 +455,8 @@ 		}
 	}
 
-	private readonly _resizeInitialBindings = new WeakCache<TLArrowShape, TLArrowBindings>()
+	// replace this with memo bag?
+	private _resizeInitialBindings = new WeakCache<TLArrowShape, TLArrowBindings>()
 
 	override onResize(shape: TLArrowShape, info: TLResizeInfo<TLArrowShape>) {
 		const { scaleX, scaleY } = info
@@ -742,8 +729,8 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +794,7 @@ 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -848,7 +836,7 @@ 	const theme = useDefaultColorTheme()
 	const info = getArrowInfo(editor, shape)
 	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
-	const bindings = getArrowBindings(editor, shape)
+
 	const isForceSolid = useValue(
 		'force solid',
 		() => {
@@ -885,7 +873,7 @@ 		)
 
 		handlePath =
-			bindings.start || bindings.end ? (
+			shape.props.start.type === 'binding' || shape.props.end.type === 'binding' ? (
 				<path
 					className="tl-arrow-hint"
 					d={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}
@@ -937,11 +925,11 @@ 					<ArrowClipPath
 						hasText={shape.props.text.trim().length > 0}
 						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
+						labelPositionBounds={labelPosition.box}
 					/>
 				</clipPath>
+				<ArrowheadDotDef />
+				<ArrowheadCrossDef />
 			</defs>
 			<g
 				fill="none"
@@ -995,15 +983,11 @@ function ArrowClipPath({
 	hasText,
 	bounds,
-	labelBounds,
-	as,
-	ae,
+	labelPositionBounds,
 }: {
 	hasText: boolean
 	bounds: Box
-	labelBounds: Box
-	as: string
-	ae: string
+	labelPositionBounds: Box
 }) {
 	// The direction in which we create the different path parts is important, as it determines what gets clipped.
 	// See the description on the directions in the non-zero fill rule example:
@@ -1011,7 +995,7 @@ 	// We create this one in the clockwise direction
 	const boundingBoxPath = `M${toDomPrecision(bounds.minX - 100)},${toDomPrecision(bounds.minY - 100)} h${bounds.width + 200} v${bounds.height + 200} h-${bounds.width + 200} Z`
 	// We create this one in the counter-clockwise direction, which cuts out the label box
-	const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${labelBounds.height} h${labelBounds.width} v-${labelBounds.height} Z`
+	const labelBoxPath = `M${toDomPrecision(labelPositionBounds.minX)},${toDomPrecision(labelPositionBounds.minY)} v${labelPositionBounds.height} h${labelPositionBounds.width} v-${labelPositionBounds.height} Z`
 	// We also append the arrowhead paths to the clip path, so that we also clip the arrowheads
 	return <path d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
 }
