--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -41,6 +41,7 @@ } from '@tldraw/editor'
 import React from 'react'
 import { updateArrowTerminal } from '../../bindings/arrow/ArrowBindingUtil'
+
 import { PlainTextLabel } from '../shared/PlainTextLabel'
 import { ShapeFill } from '../shared/ShapeFill'
 import { SvgTextLabel } from '../shared/SvgTextLabel'
@@ -149,14 +150,14 @@ 			? new Edge2d({
 					start: Vec.From(info.start.point),
 					end: Vec.From(info.end.point),
-				})
+			  })
 			: new Arc2d({
 					center: Vec.Cast(info.handleArc.center),
 					start: Vec.Cast(info.start.point),
 					end: Vec.Cast(info.end.point),
 					sweepFlag: info.bodyArc.sweepFlag,
 					largeArcFlag: info.bodyArc.largeArcFlag,
-				})
+			  })
 
 		let labelGeom
 		if (shape.props.text.trim()) {
@@ -247,9 +248,10 @@ 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
 
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -366,16 +368,20 @@ 		// If no bound shapes are in the selection, unbind any bound shapes
 
 		const selectedShapeIds = this.editor.getSelectedShapeIds()
-
-		if (
-			(bindings.start &&
-				(selectedShapeIds.includes(bindings.start.toId) ||
-					this.editor.isAncestorSelected(bindings.start.toId))) ||
-			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
-		) {
-			return
+		const shapesToCheck = new Set<string>()
+		if (bindings.start) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.start.toId)
+			this.editor.getShapeAncestors(bindings.start.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		if (bindings.end) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.end.toId)
+			this.editor.getShapeAncestors(bindings.end.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		// If any of the shapes are selected, return
+		for (const id of selectedShapeIds) {
+			if (shapesToCheck.has(id)) return
 		}
 
 		// When we start translating shapes, record where their bindings were in page space so we
@@ -742,8 +748,8 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +813,7 @@ 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -933,15 +940,13 @@ 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
@@ -952,6 +957,7 @@ 				pointerEvents="none"
 			>
 				{handlePath}
+				{/* firefox will clip if you provide a maskURL even if there is no mask matching that URL in the DOM */}
 				<g
 					style={{
 						clipPath: `url(#${clipPathId})`,
@@ -1013,7 +1019,11 @@ 	// We create this one in the counter-clockwise direction, which cuts out the label box
 	const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${labelBounds.height} h${labelBounds.width} v-${labelBounds.height} Z`
 	// We also append the arrowhead paths to the clip path, so that we also clip the arrowheads
-	return <path d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
+	return (
+		<clipPath id={useSharedSafeId((hasText ? 'label-clip-' : 'clip-') + bounds.minX + bounds.minY)}>
+			<path d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
+		</clipPath>
+	)
 }
 
 const shapeAtTranslationStart = new WeakMap<
