--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -13,7 +13,6 @@ 	TLArrowBinding,
 	TLArrowShape,
 	TLArrowShapeProps,
-	TLFontFace,
 	TLHandle,
 	TLHandleDragInfo,
 	TLResizeInfo,
@@ -32,6 +31,7 @@ 	mapObjectMapValues,
 	maybeSnapToGrid,
 	structuredClone,
+	tlenv,
 	toDomPrecision,
 	track,
 	useEditor,
@@ -45,7 +45,6 @@ import { ShapeFill } from '../shared/ShapeFill'
 import { SvgTextLabel } from '../shared/SvgTextLabel'
 import { ARROW_LABEL_PADDING, STROKE_SIZES, TEXT_PROPS } from '../shared/default-shape-constants'
-import { DefaultFontFaces } from '../shared/defaultFonts'
 import { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { getArrowLabelFontSize, getArrowLabelPosition } from './arrowLabel'
@@ -61,6 +60,7 @@ 	createOrUpdateArrowBinding,
 	getArrowBindings,
 	getArrowInfo,
+	getArrowLength,
 	getArrowTerminalsInArrowSpace,
 	removeArrowBinding,
 } from './shared'
@@ -114,11 +114,6 @@ 			if (end && !shapes.find((s) => s.id === end.toId)) return false
 		}
 		return true
-	}
-
-	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
-		if (!shape.props.text) return EMPTY_ARRAY
-		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
 	}
 
 	override getDefaultProps(): TLArrowShape['props'] {
@@ -302,7 +297,7 @@ 			}
 
 			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
+			// same shape twice, as this would result in a zero length line
 			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
 				precise = true
 			}
@@ -645,8 +640,8 @@ 						text={shape.props.text}
 						labelColor={theme[shape.props.labelColor].solid}
 						textWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}
-						isSelected={isSelected}
 						padding={0}
+						isEditing={isEditing}
 						style={{
 							transform: `translate(${labelPosition.box.center.x}px, ${labelPosition.box.center.y}px)`,
 						}}
@@ -707,6 +702,7 @@ 				{includeClipPath && (
 					<defs>
 						<ArrowClipPath
+							id={clipPathId}
 							hasText={shape.props.text.trim().length > 0}
 							bounds={bounds}
 							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
@@ -736,16 +732,6 @@ 				</g>
 				{as && <path d={as} />}
 				{ae && <path d={ae} />}
-				{labelGeometry && (
-					<rect
-						x={toDomPrecision(labelGeometry.x)}
-						y={toDomPrecision(labelGeometry.y)}
-						width={labelGeometry.w}
-						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
-					/>
-				)}
 			</g>
 		)
 	}
@@ -770,43 +756,6 @@ 		}
 	}
 
-	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
-		ctx.addExportDef(getFillDefForExport(shape.props.fill))
-		const theme = getDefaultColorTheme(ctx)
-		const scaleFactor = 1 / shape.props.scale
-
-		return (
-			<g transform={`scale(${scaleFactor})`}>
-				<ArrowSvg shape={shape} shouldDisplayHandles={false} />
-				<SvgTextLabel
-					fontSize={getArrowLabelFontSize(shape)}
-					font={shape.props.font}
-					align="middle"
-					verticalAlign="middle"
-					text={shape.props.text}
-					labelColor={theme[shape.props.labelColor].solid}
-					bounds={getArrowLabelPosition(this.editor, shape)
-						.box.clone()
-						.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}
-					padding={0}
-				/>
-			</g>
-		)
-	}
-
-	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return [
-			getFillDefForCanvas(),
-			{
-				key: `arrow:dot`,
-				component: ArrowheadDotDef,
-			},
-			{
-				key: `arrow:cross`,
-				component: ArrowheadCrossDef,
-			},
-		]
-	}
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -827,14 +776,44 @@ 			labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),
 		}
 	}
-}
-
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
-	const info = getArrowInfo(editor, shape)!
-
-	return info.isStraight
-		? Vec.Dist(info.start.handle, info.end.handle)
-		: Math.abs(info.handleArc.length)
+
+	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
+		ctx.addExportDef(getFillDefForExport(shape.props.fill))
+		const theme = getDefaultColorTheme(ctx)
+		const scaleFactor = 1 / shape.props.scale
+
+		return (
+			<g transform={`scale(${scaleFactor})`}>
+				<ArrowSvg shape={shape} shouldDisplayHandles={false} />
+				<SvgTextLabel
+					fontSize={getArrowLabelFontSize(shape)}
+					font={shape.props.font}
+					align="middle"
+					verticalAlign="middle"
+					text={shape.props.text}
+					labelColor={theme[shape.props.labelColor].solid}
+					bounds={getArrowLabelPosition(this.editor, shape)
+						.box.clone()
+						.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}
+					padding={0}
+				/>
+			</g>
+		)
+	}
+
+	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
+		return [
+			getFillDefForCanvas(),
+			{
+				key: `arrow:dot`,
+				component: ArrowheadDotDef,
+			},
+			{
+				key: `arrow:cross`,
+				component: ArrowheadCrossDef,
+			},
+		]
+	}
 }
 
 const ArrowSvg = track(function ArrowSvg({
@@ -933,15 +912,14 @@ 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					id={clipPathId}
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
@@ -993,12 +971,14 @@ })
 
 function ArrowClipPath({
+	id,
 	hasText,
 	bounds,
 	labelBounds,
 	as,
 	ae,
 }: {
+	id: string
 	hasText: boolean
 	bounds: Box
 	labelBounds: Box
@@ -1013,7 +993,7 @@ 	// We create this one in the counter-clockwise direction, which cuts out the label box
 	const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${labelBounds.height} h${labelBounds.width} v-${labelBounds.height} Z`
 	// We also append the arrowhead paths to the clip path, so that we also clip the arrowheads
-	return <path d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
+	return <path id={id} d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
 }
 
 const shapeAtTranslationStart = new WeakMap<
