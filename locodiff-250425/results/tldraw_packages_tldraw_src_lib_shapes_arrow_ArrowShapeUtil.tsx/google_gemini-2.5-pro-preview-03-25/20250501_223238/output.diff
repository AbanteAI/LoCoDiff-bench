
index e34dd981..25497935 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpqqiqmzc4_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpglg_sdgn_actual.txt	
@@ -13,7 +13,6 @@ import {
 	TLArrowBinding,
 	TLArrowShape,
 	TLArrowShapeProps,
-	TLFontFace,
 	TLHandle,
 	TLHandleDragInfo,
 	TLResizeInfo,
@@ -32,6 +31,7 @@ import {
 	mapObjectMapValues,
 	maybeSnapToGrid,
 	structuredClone,
+	tlenv,
 	toDomPrecision,
 	track,
 	useEditor,
@@ -45,7 +45,6 @@ import { PlainTextLabel } from '../shared/PlainTextLabel'
 import { ShapeFill } from '../shared/ShapeFill'
 import { SvgTextLabel } from '../shared/SvgTextLabel'
 import { ARROW_LABEL_PADDING, STROKE_SIZES, TEXT_PROPS } from '../shared/default-shape-constants'
-import { DefaultFontFaces } from '../shared/defaultFonts'
 import { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { getArrowLabelFontSize, getArrowLabelPosition } from './arrowLabel'
@@ -61,6 +60,7 @@ import {
 	createOrUpdateArrowBinding,
 	getArrowBindings,
 	getArrowInfo,
+	getArrowLength,
 	getArrowTerminalsInArrowSpace,
 	removeArrowBinding,
 } from './shared'
@@ -116,11 +116,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		return true
 	}
 
-	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
-		if (!shape.props.text) return EMPTY_ARRAY
-		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
-	}
-
 	override getDefaultProps(): TLArrowShape['props'] {
 		return {
 			dash: 'draw',
@@ -302,7 +297,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			}
 
 			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
+			// same shape twice, as this would result in a zero length line
 			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
 				precise = true
 			}
@@ -645,8 +640,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						text={shape.props.text}
 						labelColor={theme[shape.props.labelColor].solid}
 						textWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}
-						isSelected={isSelected}
 						padding={0}
+						isEditing={isEditing}
 						style={{
 							transform: `translate(${labelPosition.box.center.x}px, ${labelPosition.box.center.y}px)`,
 						}}
@@ -707,6 +702,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				{includeClipPath && (
 					<defs>
 						<ArrowClipPath
+							id={clipPathId}
 							hasText={shape.props.text.trim().length > 0}
 							bounds={bounds}
 							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
@@ -736,16 +732,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				</g>
 				{as && <path d={as} />}
 				{ae && <path d={ae} />}
-				{labelGeometry && (
-					<rect
-						x={toDomPrecision(labelGeometry.x)}
-						y={toDomPrecision(labelGeometry.y)}
-						width={labelGeometry.w}
-						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
-					/>
-				)}
 			</g>
 		)
 	}
@@ -770,6 +756,27 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
+	override getInterpolatedProps(
+		startShape: TLArrowShape,
+		endShape: TLArrowShape,
+		progress: number
+	): TLArrowShapeProps {
+		return {
+			...(progress > 0.5 ? endShape.props : startShape.props),
+			scale: lerp(startShape.props.scale, endShape.props.scale, progress),
+			start: {
+				x: lerp(startShape.props.start.x, endShape.props.start.x, progress),
+				y: lerp(startShape.props.start.y, endShape.props.start.y, progress),
+			},
+			end: {
+				x: lerp(startShape.props.end.x, endShape.props.end.x, progress),
+				y: lerp(startShape.props.end.y, endShape.props.end.y, progress),
+			},
+			bend: lerp(startShape.props.bend, endShape.props.bend, progress),
+			labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),
+		}
+	}
+
 	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
 		ctx.addExportDef(getFillDefForExport(shape.props.fill))
 		const theme = getDefaultColorTheme(ctx)
@@ -807,34 +814,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
-	override getInterpolatedProps(
-		startShape: TLArrowShape,
-		endShape: TLArrowShape,
-		progress: number
-	): TLArrowShapeProps {
-		return {
-			...(progress > 0.5 ? endShape.props : startShape.props),
-			scale: lerp(startShape.props.scale, endShape.props.scale, progress),
-			start: {
-				x: lerp(startShape.props.start.x, endShape.props.start.x, progress),
-				y: lerp(startShape.props.start.y, endShape.props.start.y, progress),
-			},
-			end: {
-				x: lerp(startShape.props.end.x, endShape.props.end.x, progress),
-				y: lerp(startShape.props.end.y, endShape.props.end.y, progress),
-			},
-			bend: lerp(startShape.props.bend, endShape.props.bend, progress),
-			labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),
-		}
-	}
-}
-
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
-	const info = getArrowInfo(editor, shape)!
-
-	return info.isStraight
-		? Vec.Dist(info.start.handle, info.end.handle)
-		: Math.abs(info.handleArc.length)
 }
 
 const ArrowSvg = track(function ArrowSvg({
@@ -933,15 +912,14 @@ const ArrowSvg = track(function ArrowSvg({
 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					id={clipPathId}
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
@@ -993,12 +971,14 @@ const ArrowSvg = track(function ArrowSvg({
 })
 
 function ArrowClipPath({
+	id,
 	hasText,
 	bounds,
 	labelBounds,
 	as,
 	ae,
 }: {
+	id: string
 	hasText: boolean
 	bounds: Box
 	labelBounds: Box
@@ -1013,7 +993,7 @@ function ArrowClipPath({
 	// We create this one in the counter-clockwise direction, which cuts out the label box
 	const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${labelBounds.height} h${labelBounds.width} v-${labelBounds.height} Z`
 	// We also append the arrowhead paths to the clip path, so that we also clip the arrowheads
-	return <path d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
+	return <path id={id} d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
 }
 
 const shapeAtTranslationStart = new WeakMap<
