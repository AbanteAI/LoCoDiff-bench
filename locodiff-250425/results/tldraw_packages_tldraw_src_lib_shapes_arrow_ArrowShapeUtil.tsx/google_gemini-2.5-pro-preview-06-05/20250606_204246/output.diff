
index e34dd9818..157661ffa 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpq617k4ne_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpwhykszan_actual.txt	
@@ -61,6 +61,7 @@ import {
 	createOrUpdateArrowBinding,
 	getArrowBindings,
 	getArrowInfo,
+	getArrowLength,
 	getArrowTerminalsInArrowSpace,
 	removeArrowBinding,
 } from './shared'
@@ -230,7 +231,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			const point = Vec.NearestPointOnLineSegment(A, B, handle, false)
 			let bend = Vec.Dist(point, med)
 			if (Vec.Clockwise(point, end, med)) bend *= -1
-			return { id: shape.id, type: shape.type, props: { bend } }
+			return { id: shape.id, type: 'arrow', props: { bend } }
 		}
 
 		// Start or end, pointing the arrow...
@@ -583,7 +584,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			case ARROW_HANDLES.START: {
 				return {
 					id: shape.id,
-					type: shape.type,
+					type: 'arrow',
 					props: {
 						...shape.props,
 						arrowheadStart: shape.props.arrowheadStart === 'none' ? 'arrow' : 'none',
@@ -593,7 +594,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			case ARROW_HANDLES.END: {
 				return {
 					id: shape.id,
-					type: shape.type,
+					type: 'arrow',
 					props: {
 						...shape.props,
 						arrowheadEnd: shape.props.arrowheadEnd === 'none' ? 'arrow' : 'none',
@@ -626,7 +627,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		return (
 			<>
-				<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
+				<SVGContainer>
 					<ArrowSvg
 						shape={shape}
 						shouldDisplayHandles={shouldDisplayHandles && onlySelectedShape?.id === shape.id}
@@ -742,8 +743,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -758,15 +759,13 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		} = shape
 
 		if (text.trimEnd() !== shape.props.text) {
-			this.editor.updateShapes<TLArrowShape>([
-				{
-					id,
-					type,
-					props: {
-						text: text.trimEnd(),
-					},
+			this.editor.updateShape<TLArrowShape>({
+				id,
+				type,
+				props: {
+					text: text.trimEnd(),
 				},
-			])
+			})
 		}
 	}
 
@@ -807,6 +806,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -829,14 +829,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 }
 
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
-	const info = getArrowInfo(editor, shape)!
-
-	return info.isStraight
-		? Vec.Dist(info.start.handle, info.end.handle)
-		: Math.abs(info.handleArc.length)
-}
-
 const ArrowSvg = track(function ArrowSvg({
 	shape,
 	shouldDisplayHandles,
@@ -846,9 +838,6 @@ const ArrowSvg = track(function ArrowSvg({
 }) {
 	const editor = useEditor()
 	const theme = useDefaultColorTheme()
-	const info = getArrowInfo(editor, shape)
-	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
-	const bindings = getArrowBindings(editor, shape)
 	const isForceSolid = useValue(
 		'force solid',
 		() => {
@@ -861,6 +850,10 @@ const ArrowSvg = track(function ArrowSvg({
 	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
 	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
 
+	const info = getArrowInfo(editor, shape)
+	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
+	const bindings = getArrowBindings(editor, shape)
+
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
@@ -897,8 +890,8 @@ const ArrowSvg = track(function ArrowSvg({
 							? bindings.start.props.isExact
 								? ''
 								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+								  ? `url(#${arrowheadCrossId})`
+								  : `url(#${arrowheadDotId})`
 							: ''
 					}
 					markerEnd={
@@ -906,8 +899,8 @@ const ArrowSvg = track(function ArrowSvg({
 							? bindings.end.props.isExact
 								? ''
 								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+								  ? `url(#${arrowheadCrossId})`
+								  : `url(#${arrowheadDotId})`
 							: ''
 					}
 					opacity={0.16}
@@ -1009,9 +1002,13 @@ function ArrowClipPath({
 	// See the description on the directions in the non-zero fill rule example:
 	// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual): ''}${as}${ae}`} />
 }
