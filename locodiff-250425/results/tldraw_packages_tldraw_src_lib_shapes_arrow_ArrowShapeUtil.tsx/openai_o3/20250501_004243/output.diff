
index e34dd981..66a29b5a 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpevl17osv_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmp2p3ll7iv_actual.txt	
@@ -20,7 +20,6 @@ import {
 	TLShapePartial,
 	TLShapeUtilCanBeLaidOutOpts,
 	TLShapeUtilCanBindOpts,
-	TLShapeUtilCanvasSvgDef,
 	Vec,
 	WeakCache,
 	arrowShapeMigrations,
@@ -31,6 +30,7 @@ import {
 	lerp,
 	mapObjectMapValues,
 	maybeSnapToGrid,
+	sanitizeId,
 	structuredClone,
 	toDomPrecision,
 	track,
@@ -106,7 +106,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 	override canBeLaidOut(shape: TLArrowShape, info: TLShapeUtilCanBeLaidOutOpts) {
 		if (info.type === 'flip') {
-			// If we don't have this then the flip will be non-idempotent; that is, the flip will be multipotent, varipotent, or perhaps even omni-potent... and we can't have that
 			const bindings = getArrowBindings(this.editor, shape)
 			const { start, end } = bindings
 			const { shapes = [] } = info
@@ -116,11 +115,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		return true
 	}
 
-	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
-		if (!shape.props.text) return EMPTY_ARRAY
-		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
-	}
-
 	override getDefaultProps(): TLArrowShape['props'] {
 		return {
 			dash: 'draw',
@@ -149,14 +143,14 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			? new Edge2d({
 					start: Vec.From(info.start.point),
 					end: Vec.From(info.end.point),
-				})
+			  })
 			: new Arc2d({
 					center: Vec.Cast(info.handleArc.center),
 					start: Vec.Cast(info.start.point),
 					end: Vec.Cast(info.end.point),
 					sweepFlag: info.bodyArc.sweepFlag,
 					largeArcFlag: info.bodyArc.largeArcFlag,
-				})
+			  })
 
 		let labelGeom
 		if (shape.props.text.trim()) {
@@ -177,9 +171,13 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		})
 	}
 
-	override getHandles(shape: TLArrowShape): TLHandle[] {
+	private getLength(shape: TLArrowShape): number {
 		const info = getArrowInfo(this.editor, shape)!
+		return info.isStraight ? Vec.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length)
+	}
 
+	override getHandles(shape: TLArrowShape): TLHandle[] {
+		const info = getArrowInfo(this.editor, shape)!
 		return [
 			{
 				id: ARROW_HANDLES.START,
@@ -202,31 +200,32 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				x: info.end.handle.x,
 				y: info.end.handle.y,
 			},
-		].filter(Boolean) as TLHandle[]
+		]
 	}
 
 	override getText(shape: TLArrowShape) {
 		return shape.props.text
 	}
 
-	override onHandleDrag(
-		shape: TLArrowShape,
-		{ handle, isPrecise }: TLHandleDragInfo<TLArrowShape>
-	) {
+	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
+		if (!shape.props.text) return EMPTY_ARRAY
+		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
+	}
+
+	private readonly _resizeInitialBindings = new WeakCache<TLArrowShape, TLArrowBindings>()
+
+	override onHandleDrag(shape: TLArrowShape, { handle, isPrecise }: TLHandleDragInfo<TLArrowShape>) {
 		const handleId = handle.id as ARROW_HANDLES
 		const bindings = getArrowBindings(this.editor, shape)
 
 		if (handleId === ARROW_HANDLES.MIDDLE) {
 			// Bending the arrow...
 			const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)
-
 			const delta = Vec.Sub(end, start)
 			const v = Vec.Per(delta)
-
 			const med = Vec.Med(end, start)
 			const A = Vec.Sub(med, v)
 			const B = Vec.Add(med, v)
-
 			const point = Vec.NearestPointOnLineSegment(A, B, handle, false)
 			let bend = Vec.Dist(point, med)
 			if (Vec.Clockwise(point, end, med)) bend *= -1
@@ -234,28 +233,22 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 
 		// Start or end, pointing the arrow...
-
 		const update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }
-
 		const currentBinding = bindings[handleId]
-
 		const otherHandleId = handleId === ARROW_HANDLES.START ? ARROW_HANDLES.END : ARROW_HANDLES.START
 		const otherBinding = bindings[otherHandleId]
 
 		if (this.editor.inputs.ctrlKey) {
-			// todo: maybe double check that this isn't equal to the other handle too?
-			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
 
 		const point = this.editor.getShapePageTransform(shape.id)!.applyToPoint(handle)
-
 		const target = this.editor.getShapeAtPoint(point, {
 			hitInside: true,
 			hitFrameInside: true,
@@ -269,7 +262,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		})
 
 		if (!target) {
-			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
 			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
@@ -280,7 +272,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 
 		// we've got a target! the handle is being dragged over a shape, bind to it
-
 		const targetGeometry = this.editor.getShapeGeometry(target)
 		const targetBounds = Box.ZeroFix(targetGeometry.bounds)
 		const pageTransform = this.editor.getShapePageTransform(update.id)!
@@ -288,44 +279,37 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace)
 
 		let precise = isPrecise
-
 		if (!precise) {
-			// If we're switching to a new bound shape, then precise only if moving slowly
 			if (!currentBinding || (currentBinding && target.id !== currentBinding.toId)) {
 				precise = this.editor.inputs.pointerVelocity.len() < 0.5
 			}
 		}
 
+		if (precise) {
+			if (
+				Vec.Dist(pointInTargetSpace, targetBounds.center) <
+				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
+					this.editor.getZoomLevel()
+			) {
+				precise = false
+			}
+		}
+
 		if (!isPrecise) {
 			if (!targetGeometry.isClosed) {
 				precise = true
 			}
-
-			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
 			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
 				precise = true
 			}
 		}
 
-		const normalizedAnchor = {
-			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
-			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
-		}
-
-		if (precise) {
-			// Turn off precision if we're within a certain distance to the center of the shape.
-			// Funky math but we want the snap distance to be 4 at the minimum and either
-			// 16 or 15% of the smaller dimension of the target shape, whichever is smaller
-			if (
-				Vec.Dist(pointInTargetSpace, targetBounds.center) <
-				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
-					this.editor.getZoomLevel()
-			) {
-				normalizedAnchor.x = 0.5
-				normalizedAnchor.y = 0.5
-			}
-		}
+		const normalizedAnchor = precise
+			? {
+					x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
+					y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
+			  }
+			: { x: 0.5, y: 0.5 }
 
 		const b = {
 			terminal: handleId,
@@ -335,14 +319,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 
 		createOrUpdateArrowBinding(this.editor, shape, target.id, b)
-
 		this.editor.setHintingShapes([target.id])
 
 		const newBindings = getArrowBindings(this.editor, shape)
 		if (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {
-			if (
-				Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)
-			) {
+			if (Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)) {
 				createOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {
 					...newBindings.end.props,
 					normalizedAnchor: {
@@ -352,35 +333,25 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				})
 			}
 		}
-
 		return update
 	}
 
 	override onTranslateStart(shape: TLArrowShape) {
 		const bindings = getArrowBindings(this.editor, shape)
-
 		const terminalsInArrowSpace = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)
 		const shapePageTransform = this.editor.getShapePageTransform(shape.id)!
 
-		// If at least one bound shape is in the selection, do nothing;
-		// If no bound shapes are in the selection, unbind any bound shapes
-
 		const selectedShapeIds = this.editor.getSelectedShapeIds()
-
 		if (
 			(bindings.start &&
-				(selectedShapeIds.includes(bindings.start.toId) ||
-					this.editor.isAncestorSelected(bindings.start.toId))) ||
+				(selectedShapeIds.includes(bindings.start.toId) || this.editor.isAncestorSelected(bindings.start.toId))) ||
 			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
+				(selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
 		}
 
-		// When we start translating shapes, record where their bindings were in page space so we
-		// can maintain them as we translate the arrow
-		shapeAtTranslationStart.set(shape, {
+		const shapeAtStart = {
 			pagePosition: shapePageTransform.applyToPoint(shape),
 			terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
 				const binding = bindings[terminalName]
@@ -391,37 +362,17 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 					pagePosition: shapePageTransform.applyToPoint(point),
 				}
 			}),
-		})
-
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
 		}
+		shapeAtTranslationStart.set(shape, shapeAtStart)
 
 		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
 			const binding = bindings[handleName]
 			if (!binding) continue
-
 			this.editor.updateBinding({
 				...binding,
 				props: { ...binding.props, isPrecise: true },
 			})
 		}
-
 		return
 	}
 
@@ -430,14 +381,10 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		if (!atTranslationStart) return
 
 		const shapePageTransform = this.editor.getShapePageTransform(shape.id)!
-		const pageDelta = Vec.Sub(
-			shapePageTransform.applyToPoint(shape),
-			atTranslationStart.pagePosition
-		)
+		const pageDelta = Vec.Sub(shapePageTransform.applyToPoint(shape), atTranslationStart.pagePosition)
 
 		for (const terminalBinding of Object.values(atTranslationStart.terminalBindings)) {
 			if (!terminalBinding) continue
-
 			const newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5))
 			const newTarget = this.editor.getShapeAtPoint(newPagePoint, {
 				hitInside: true,
@@ -450,7 +397,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 					)
 				},
 			})
-
 			if (newTarget?.id === terminalBinding.binding.toId) {
 				const targetBounds = Box.ZeroFix(this.editor.getShapeGeometry(newTarget).bounds)
 				const pointInTargetSpace = this.editor.getPointInShapeSpace(newTarget, newPagePoint)
@@ -460,8 +406,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				}
 				createOrUpdateArrowBinding(this.editor, shape, newTarget.id, {
 					...terminalBinding.binding.props,
-					normalizedAnchor,
 					isPrecise: true,
+					normalizedAnchor,
 				})
 			} else {
 				removeArrowBinding(this.editor, shape, terminalBinding.binding.props.terminal)
@@ -469,68 +415,36 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
-	private readonly _resizeInitialBindings = new WeakCache<TLArrowShape, TLArrowBindings>()
-
 	override onResize(shape: TLArrowShape, info: TLResizeInfo<TLArrowShape>) {
 		const { scaleX, scaleY } = info
 
-		const bindings = this._resizeInitialBindings.get(shape, () =>
-			getArrowBindings(this.editor, shape)
-		)
+		const bindings = this._resizeInitialBindings.get(shape, () => getArrowBindings(this.editor, shape))
 		const terminals = getArrowTerminalsInArrowSpace(this.editor, shape, bindings)
 
 		const { start, end } = structuredClone<TLArrowShape['props']>(shape.props)
 		let { bend } = shape.props
 
-		// Rescale start handle if it's not bound to a shape
 		if (!bindings.start) {
 			start.x = terminals.start.x * scaleX
 			start.y = terminals.start.y * scaleY
 		}
-
-		// Rescale end handle if it's not bound to a shape
 		if (!bindings.end) {
 			end.x = terminals.end.x * scaleX
 			end.y = terminals.end.y * scaleY
 		}
 
-		// todo: we should only change the normalized anchor positions
-		// of the shape's handles if the bound shape is also being resized
-
 		const mx = Math.abs(scaleX)
 		const my = Math.abs(scaleY)
-
-		const startNormalizedAnchor = bindings?.start
-			? Vec.From(bindings.start.props.normalizedAnchor)
-			: null
-		const endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
-
 		if (scaleX < 0 && scaleY >= 0) {
 			if (bend !== 0) {
 				bend *= -1
 				bend *= Math.max(mx, my)
 			}
-
-			if (startNormalizedAnchor) {
-				startNormalizedAnchor.x = 1 - startNormalizedAnchor.x
-			}
-
-			if (endNormalizedAnchor) {
-				endNormalizedAnchor.x = 1 - endNormalizedAnchor.x
-			}
 		} else if (scaleX >= 0 && scaleY < 0) {
 			if (bend !== 0) {
 				bend *= -1
 				bend *= Math.max(mx, my)
 			}
-
-			if (startNormalizedAnchor) {
-				startNormalizedAnchor.y = 1 - startNormalizedAnchor.y
-			}
-
-			if (endNormalizedAnchor) {
-				endNormalizedAnchor.y = 1 - endNormalizedAnchor.y
-			}
 		} else if (scaleX >= 0 && scaleY >= 0) {
 			if (bend !== 0) {
 				bend *= Math.max(mx, my)
@@ -539,27 +453,20 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			if (bend !== 0) {
 				bend *= Math.max(mx, my)
 			}
-
-			if (startNormalizedAnchor) {
-				startNormalizedAnchor.x = 1 - startNormalizedAnchor.x
-				startNormalizedAnchor.y = 1 - startNormalizedAnchor.y
-			}
-
-			if (endNormalizedAnchor) {
-				endNormalizedAnchor.x = 1 - endNormalizedAnchor.x
-				endNormalizedAnchor.y = 1 - endNormalizedAnchor.y
-			}
 		}
 
-		if (bindings.start && startNormalizedAnchor) {
-			createOrUpdateArrowBinding(this.editor, shape, bindings.start.toId, {
-				...bindings.start.props,
+		const startNormalizedAnchor = bindings?.start ? Vec.From(bindings.start.props.normalizedAnchor) : null
+		const endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
+
+		if (startNormalizedAnchor) {
+			createOrUpdateArrowBinding(this.editor, shape, bindings.start!.toId, {
+				...bindings.start!.props,
 				normalizedAnchor: startNormalizedAnchor.toJson(),
 			})
 		}
-		if (bindings.end && endNormalizedAnchor) {
-			createOrUpdateArrowBinding(this.editor, shape, bindings.end.toId, {
-				...bindings.end.props,
+		if (endNormalizedAnchor) {
+			createOrUpdateArrowBinding(this.editor, shape, bindings.end!.toId, {
+				...bindings.end!.props,
 				normalizedAnchor: endNormalizedAnchor.toJson(),
 			})
 		}
@@ -571,7 +478,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				bend,
 			},
 		}
-
 		return next
 	}
 
@@ -604,7 +510,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 
 	component(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const theme = useDefaultColorTheme()
 		const onlySelectedShape = this.editor.getOnlySelectedShape()
 		const shouldDisplayHandles =
@@ -657,9 +562,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 
 	indicator(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const isEditing = useIsEditing(shape.id)
-		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const clipPathId = useSharedSafeId(shape.id + '_clip')
 
 		const info = getArrowInfo(this.editor, shape)
@@ -668,22 +571,16 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, info?.bindings)
 		const geometry = this.editor.getShapeGeometry<Group2d>(shape)
 		const bounds = geometry.bounds
-
 		const labelGeometry = shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null
 
 		if (Vec.Equals(start, end)) return null
 
 		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-
 		const as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)
 		const ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)
 
 		const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)
-
-		const includeClipPath =
-			(as && info.start.arrowhead !== 'arrow') ||
-			(ae && info.end.arrowhead !== 'arrow') ||
-			!!labelGeometry
+		const includeClipPath = (as && info.start.arrowhead !== 'arrow') || (ae && info.end.arrowhead !== 'arrow') || !!labelGeometry
 
 		if (isEditing && labelGeometry) {
 			return (
@@ -697,21 +594,17 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				/>
 			)
 		}
-		const clipStartArrowhead = !(
-			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
-		)
-		const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
 		return (
 			<g>
 				{includeClipPath && (
 					<defs>
 						<ArrowClipPath
-							hasText={shape.props.text.trim().length > 0}
+							hasText={!!labelGeometry}
 							bounds={bounds}
 							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
-							as={clipStartArrowhead && as ? as : ''}
-							ae={clipEndArrowhead && ae ? ae : ''}
+							as={as && info.start.arrowhead !== 'arrow' ? as : ''}
+							ae={ae && info.end.arrowhead !== 'arrow' ? ae : ''}
 						/>
 					</defs>
 				)}
@@ -721,7 +614,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
 					}}
 				>
-					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
 					{includeClipPath && (
 						<rect
 							x={bounds.minX - 100}
@@ -731,19 +623,30 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 							opacity={0}
 						/>
 					)}
-
 					<path d={path} />
 				</g>
-				{as && <path d={as} />}
-				{ae && <path d={ae} />}
+				{as && (
+					<path
+						d={as}
+						fill={info.start.arrowhead === 'arrow' ? 'none' : 'black'}
+						stroke={info.start.arrowhead === 'arrow' ? undefined : 'none'}
+					/>
+				)}
+				{ae && (
+					<path
+						d={ae}
+						fill={info.end.arrowhead === 'arrow' ? 'none' : 'black'}
+						stroke={info.end.arrowhead === 'arrow' ? undefined : 'none'}
+					/>
+				)}
 				{labelGeometry && (
 					<rect
 						x={toDomPrecision(labelGeometry.x)}
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -776,7 +679,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const scaleFactor = 1 / shape.props.scale
 
 		return (
-			<g transform={`scale(${scaleFactor})`}>
+			<>
 				<ArrowSvg shape={shape} shouldDisplayHandles={false} />
 				<SvgTextLabel
 					fontSize={getArrowLabelFontSize(shape)}
@@ -789,8 +692,9 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						.box.clone()
 						.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}
 					padding={0}
+					scale={scaleFactor}
 				/>
-			</g>
+			</>
 		)
 	}
 
@@ -807,6 +711,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -831,10 +736,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
 	const info = getArrowInfo(editor, shape)!
-
-	return info.isStraight
-		? Vec.Dist(info.start.handle, info.end.handle)
-		: Math.abs(info.handleArc.length)
+	return info.isStraight ? Vec.Dist(info.start.handle, info.end.handle) : Math.abs(info.handleArc.length)
 }
 
 const ArrowSvg = track(function ArrowSvg({
@@ -864,25 +766,18 @@ const ArrowSvg = track(function ArrowSvg({
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-
 	const as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)
 	const ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)
-
 	const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)
 
 	let handlePath: null | React.JSX.Element = null
-
 	if (shouldDisplayHandles) {
 		const sw = 2 / editor.getZoomLevel()
-		const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
-			getArrowLength(editor, shape),
-			sw,
-			{
-				end: 'skip',
-				start: 'skip',
-				lengthRatio: 2.5,
-			}
-		)
+		const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(getArrowLength(editor, shape), sw, {
+			end: 'skip',
+			start: 'skip',
+			lengthRatio: 2.5,
+		})
 
 		handlePath =
 			bindings.start || bindings.end ? (
@@ -925,7 +820,6 @@ const ArrowSvg = track(function ArrowSvg({
 	)
 
 	const labelPosition = getArrowLabelPosition(editor, shape)
-
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
@@ -933,15 +827,13 @@ const ArrowSvg = track(function ArrowSvg({
 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
@@ -952,6 +844,7 @@ const ArrowSvg = track(function ArrowSvg({
 				pointerEvents="none"
 			>
 				{handlePath}
+				{/* firefox will clip if you provide a maskURL even if there is no mask matching that URL in the DOM */}
 				<g
 					style={{
 						clipPath: `url(#${clipPathId})`,
@@ -1005,15 +898,13 @@ function ArrowClipPath({
 	as: string
 	ae: string
 }) {
-	// The direction in which we create the different path parts is important, as it determines what gets clipped.
-	// See the description on the directions in the non-zero fill rule example:
-	// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual): ''}${as}${ae}`} />
+	const boundingBoxPath = `M${toDomPrecision(bounds.minX - 100)},${toDomPrecision(bounds.minY - 100)} h${
+		bounds.width + 200
+	} v${bounds.height + 200} h-${bounds.width + 200} Z`
+	const labelBoxPath = `M${toDomPrecision(labelBounds.minX)},${toDomPrecision(labelBounds.minY)} v${
+		labelBounds.height
+	} h${labelBounds.width} v-${labelBounds.height} Z`
+	return <path id={sanitizeId(`${bounds.id}_clip`)} d={`${boundingBoxPath}${hasText ? labelBoxPath : ''}${as}${ae}`} />
 }
 
 const shapeAtTranslationStart = new WeakMap<
