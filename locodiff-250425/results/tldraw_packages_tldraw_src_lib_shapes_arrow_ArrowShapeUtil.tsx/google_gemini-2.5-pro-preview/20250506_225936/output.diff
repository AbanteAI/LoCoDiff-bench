
index e34dd981..dd9a6cc4 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpazrx1zfb_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmp4u71xpqm_actual.txt	
@@ -230,7 +230,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			const point = Vec.NearestPointOnLineSegment(A, B, handle, false)
 			let bend = Vec.Dist(point, med)
 			if (Vec.Clockwise(point, end, med)) bend *= -1
-			return { id: shape.id, type: shape.type, props: { bend } }
+			return { id: shape.id, type: 'arrow', props: { bend } }
 		}
 
 		// Start or end, pointing the arrow...
@@ -583,7 +583,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			case ARROW_HANDLES.START: {
 				return {
 					id: shape.id,
-					type: shape.type,
+					type: 'arrow',
 					props: {
 						...shape.props,
 						arrowheadStart: shape.props.arrowheadStart === 'none' ? 'arrow' : 'none',
@@ -593,7 +593,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			case ARROW_HANDLES.END: {
 				return {
 					id: shape.id,
-					type: shape.type,
+					type: 'arrow',
 					props: {
 						...shape.props,
 						arrowheadEnd: shape.props.arrowheadEnd === 'none' ? 'arrow' : 'none',
@@ -742,8 +742,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
