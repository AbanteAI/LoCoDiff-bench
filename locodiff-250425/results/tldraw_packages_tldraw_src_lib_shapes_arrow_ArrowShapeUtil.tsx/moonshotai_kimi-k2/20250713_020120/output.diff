
index e34dd9818..9b5555d3b 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp4y6my8r2_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmp3brihyz__actual.txt	
@@ -1,10 +1,8 @@
 import {
 	Arc2d,
 	Box,
-	EMPTY_ARRAY,
 	Edge2d,
 	Editor,
-	Geometry2d,
 	Group2d,
 	Rectangle2d,
 	SVGContainer,
@@ -13,7 +11,6 @@ import {
 	TLArrowBinding,
 	TLArrowShape,
 	TLArrowShapeProps,
-	TLFontFace,
 	TLHandle,
 	TLHandleDragInfo,
 	TLResizeInfo,
@@ -116,11 +113,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		return true
 	}
 
-	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
-		if (!shape.props.text) return EMPTY_ARRAY
-		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
-	}
-
 	override getDefaultProps(): TLArrowShape['props'] {
 		return {
 			dash: 'draw',
@@ -149,14 +141,14 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			? new Edge2d({
 					start: Vec.From(info.start.point),
 					end: Vec.From(info.end.point),
-				})
+			  })
 			: new Arc2d({
 					center: Vec.Cast(info.handleArc.center),
 					start: Vec.Cast(info.start.point),
 					end: Vec.Cast(info.end.point),
 					sweepFlag: info.bodyArc.sweepFlag,
 					largeArcFlag: info.bodyArc.largeArcFlag,
-				})
+			  })
 
 		let labelGeom
 		if (shape.props.text.trim()) {
@@ -209,6 +201,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		return shape.props.text
 	}
 
+	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
+		if (!shape.props.text) return EMPTY_ARRAY
+		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
+	}
+
 	override onHandleDrag(
 		shape: TLArrowShape,
 		{ handle, isPrecise }: TLHandleDragInfo<TLArrowShape>
@@ -247,10 +244,10 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
 
-			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
-			}
+			update.props![handleId] = maybeSnapToGrid(
+				new Vec(handle.x, handle.y),
+				this.editor
+			).toJson()
 			return update
 		}
 
@@ -271,11 +268,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		if (!target) {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
-			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
-			update.props![handleId] = {
-				x: newPoint.x,
-				y: newPoint.y,
-			}
+
+			update.props![handleId] = maybeSnapToGrid(
+				new Vec(handle.x, handle.y),
+				this.editor
+			).toJson()
 			return update
 		}
 
@@ -393,25 +390,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			}),
 		})
 
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
-		}
-
 		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
 			const binding = bindings[handleName]
 			if (!binding) continue
@@ -500,10 +478,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const mx = Math.abs(scaleX)
 		const my = Math.abs(scaleY)
 
-		const startNormalizedAnchor = bindings?.start
-			? Vec.From(bindings.start.props.normalizedAnchor)
-			: null
-		const endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
+		let startNormalizedAnchor = bindings?.start ? Vec.From(bindings.start.props.normalizedAnchor) : null
+		let endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
 
 		if (scaleX < 0 && scaleY >= 0) {
 			if (bend !== 0) {
@@ -603,153 +579,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
-	component(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const theme = useDefaultColorTheme()
-		const onlySelectedShape = this.editor.getOnlySelectedShape()
-		const shouldDisplayHandles =
-			this.editor.isInAny(
-				'select.idle',
-				'select.pointing_handle',
-				'select.dragging_handle',
-				'select.translating',
-				'arrow.dragging'
-			) && !this.editor.getIsReadonly()
-
-		const info = getArrowInfo(this.editor, shape)
-		if (!info?.isValid) return null
-
-		const labelPosition = getArrowLabelPosition(this.editor, shape)
-		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
-		const isEditing = this.editor.getEditingShapeId() === shape.id
-		const showArrowLabel = isEditing || shape.props.text
-
-		return (
-			<>
-				<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
-					<ArrowSvg
-						shape={shape}
-						shouldDisplayHandles={shouldDisplayHandles && onlySelectedShape?.id === shape.id}
-					/>
-				</SVGContainer>
-				{showArrowLabel && (
-					<PlainTextLabel
-						shapeId={shape.id}
-						classNamePrefix="tl-arrow"
-						type="arrow"
-						font={shape.props.font}
-						fontSize={getArrowLabelFontSize(shape)}
-						lineHeight={TEXT_PROPS.lineHeight}
-						align="middle"
-						verticalAlign="middle"
-						text={shape.props.text}
-						labelColor={theme[shape.props.labelColor].solid}
-						textWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}
-						isSelected={isSelected}
-						padding={0}
-						style={{
-							transform: `translate(${labelPosition.box.center.x}px, ${labelPosition.box.center.y}px)`,
-						}}
-					/>
-				)}
-			</>
-		)
-	}
-
-	indicator(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const isEditing = useIsEditing(shape.id)
-		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const clipPathId = useSharedSafeId(shape.id + '_clip')
-
-		const info = getArrowInfo(this.editor, shape)
-		if (!info) return null
-
-		const { start, end } = getArrowTerminalsInArrowSpace(this.editor, shape, info?.bindings)
-		const geometry = this.editor.getShapeGeometry<Group2d>(shape)
-		const bounds = geometry.bounds
-
-		const labelGeometry = shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null
-
-		if (Vec.Equals(start, end)) return null
-
-		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-
-		const as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)
-		const ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)
-
-		const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)
-
-		const includeClipPath =
-			(as && info.start.arrowhead !== 'arrow') ||
-			(ae && info.end.arrowhead !== 'arrow') ||
-			!!labelGeometry
-
-		if (isEditing && labelGeometry) {
-			return (
-				<rect
-					x={toDomPrecision(labelGeometry.x)}
-					y={toDomPrecision(labelGeometry.y)}
-					width={labelGeometry.w}
-					height={labelGeometry.h}
-					rx={3.5 * shape.props.scale}
-					ry={3.5 * shape.props.scale}
-				/>
-			)
-		}
-		const clipStartArrowhead = !(
-			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
-		)
-		const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
-
-		return (
-			<g>
-				{includeClipPath && (
-					<defs>
-						<ArrowClipPath
-							hasText={shape.props.text.trim().length > 0}
-							bounds={bounds}
-							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
-							as={clipStartArrowhead && as ? as : ''}
-							ae={clipEndArrowhead && ae ? ae : ''}
-						/>
-					</defs>
-				)}
-				<g
-					style={{
-						clipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
-						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
-					}}
-				>
-					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
-					{includeClipPath && (
-						<rect
-							x={bounds.minX - 100}
-							y={bounds.minY - 100}
-							width={bounds.width + 200}
-							height={bounds.height + 200}
-							opacity={0}
-						/>
-					)}
-
-					<path d={path} />
-				</g>
-				{as && <path d={as} />}
-				{ae && <path d={ae} />}
-				{labelGeometry && (
-					<rect
-						x={toDomPrecision(labelGeometry.x)}
-						y={toDomPrecision(labelGeometry.y)}
-						width={labelGeometry.w}
-						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
-					/>
-				)}
-			</g>
-		)
-	}
-
 	override onEditEnd(shape: TLArrowShape) {
 		const {
 			id,
@@ -770,30 +599,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
-	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
-		ctx.addExportDef(getFillDefForExport(shape.props.fill))
-		const theme = getDefaultColorTheme(ctx)
-		const scaleFactor = 1 / shape.props.scale
-
-		return (
-			<g transform={`scale(${scaleFactor})`}>
-				<ArrowSvg shape={shape} shouldDisplayHandles={false} />
-				<SvgTextLabel
-					fontSize={getArrowLabelFontSize(shape)}
-					font={shape.props.font}
-					align="middle"
-					verticalAlign="middle"
-					text={shape.props.text}
-					labelColor={theme[shape.props.labelColor].solid}
-					bounds={getArrowLabelPosition(this.editor, shape)
-						.box.clone()
-						.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}
-					padding={0}
-				/>
-			</g>
-		)
-	}
-
 	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
 		return [
 			getFillDefForCanvas(),
@@ -805,8 +610,13 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				key: `arrow:cross`,
 				component: ArrowheadCrossDef,
 			},
+			{
+				key: 'arrow:clipPath',
+				component: ArrowClipPathDef,
+			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -829,7 +639,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 }
 
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
+function getArrowLength(editor: Editor, shape: TLArrowShape): number {
 	const info = getArrowInfo(editor, shape)!
 
 	return info.isStraight
@@ -857,10 +667,6 @@ const ArrowSvg = track(function ArrowSvg({
 		[editor]
 	)
 
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
-
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
@@ -897,8 +703,8 @@ const ArrowSvg = track(function ArrowSvg({
 							? bindings.start.props.isExact
 								? ''
 								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					markerEnd={
@@ -906,8 +712,8 @@ const ArrowSvg = track(function ArrowSvg({
 							? bindings.end.props.isExact
 								? ''
 								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					opacity={0.16}
@@ -929,19 +735,19 @@ const ArrowSvg = track(function ArrowSvg({
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
+
 	return (
 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
@@ -1005,31 +811,24 @@ function ArrowClipPath({
 	as: string
 	ae: string
 }) {
-	// The direction in which we create the different path parts is important, as it determines what gets clipped.
-	// See the description on the directions in the non-zero fill rule example:
-	// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual): ''}${as}${ae}`} />
+	const clipPathId = React.useId()
+	const combinedPath = React.useMemo(() => {
+		// The direction in which we create the different path parts is important, as it determines what gets clipped.
+		// See the description on the directions in the non-zero fill rule example:
+		// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual): ''}${as}${ae}`
+	}, [hasText, bounds, labelBounds, as, ae])
+
+	return <clipPath id={clipPathId}>{<path d={combinedPath} />}</clipPath>
+}
+function ArrowClipPathDef() {
+	return null
 }
-
-const shapeAtTranslationStart = new WeakMap<
-	TLArrowShape,
-	{
-		pagePosition: Vec
-		terminalBindings: Record<
-			'start' | 'end',
-			{
-				pagePosition: Vec
-				shapePosition: Vec
-				binding: TLArrowBinding
-			} | null
-		>
-	}
->()
 
 function ArrowheadDotDef() {
 	const id = useSharedSafeId('arrowhead-dot')
@@ -1048,4 +847,19 @@ function ArrowheadCrossDef() {
 			<line x1="1.5" y1="4.5" x2="4.5" y2="1.5" strokeDasharray="100%" />
 		</marker>
 	)
-}
\ No newline at end of file
+}
+
+const shapeAtTranslationStart = new WeakMap<
+	TLArrowShape,
+	{
+		pagePosition: Vec
+		terminalBindings: Record<
+			'start' | 'end',
+			{
+				pagePosition: Vec
+				shapePosition: Vec
+				binding: TLArrowBinding
+			} | null
+		>
+	}
+>()
\ No newline at end of file
