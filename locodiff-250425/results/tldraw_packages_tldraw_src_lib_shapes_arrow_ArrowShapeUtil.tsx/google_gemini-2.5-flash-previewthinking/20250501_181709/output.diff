--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -31,6 +31,7 @@ 	lerp,
 	mapObjectMapValues,
 	maybeSnapToGrid,
+	sanitizeId,
 	structuredClone,
 	toDomPrecision,
 	track,
@@ -41,6 +42,7 @@ } from '@tldraw/editor'
 import React from 'react'
 import { updateArrowTerminal } from '../../bindings/arrow/ArrowBindingUtil'
+
 import { PlainTextLabel } from '../shared/PlainTextLabel'
 import { ShapeFill } from '../shared/ShapeFill'
 import { SvgTextLabel } from '../shared/SvgTextLabel'
@@ -135,7 +137,6 @@ 			arrowheadEnd: 'arrow',
 			text: '',
 			labelPosition: 0.5,
-			font: 'draw',
 			scale: 1,
 		}
 	}
@@ -230,7 +231,7 @@ 			const point = Vec.NearestPointOnLineSegment(A, B, handle, false)
 			let bend = Vec.Dist(point, med)
 			if (Vec.Clockwise(point, end, med)) bend *= -1
-			return { id: shape.id, type: shape.type, props: { bend } }
+			return { id: shape.id, type: 'arrow', props: { bend } }
 		}
 
 		// Start or end, pointing the arrow...
@@ -247,9 +248,10 @@ 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
 
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -257,20 +259,21 @@ 		const point = this.editor.getShapePageTransform(shape.id)!.applyToPoint(handle)
 
 		const target = this.editor.getShapeAtPoint(point, {
-			hitInside: true,
-			hitFrameInside: true,
-			margin: 0,
 			filter: (targetShape) => {
 				return (
 					!targetShape.isLocked &&
 					this.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: 'arrow' })
 				)
 			},
+			hitInside: true,
+			hitFrameInside: true,
+			margin: 0,
 		})
 
 		if (!target) {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
+
 			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
 				x: newPoint.x,
@@ -294,23 +297,6 @@ 			if (!currentBinding || (currentBinding && target.id !== currentBinding.toId)) {
 				precise = this.editor.inputs.pointerVelocity.len() < 0.5
 			}
-		}
-
-		if (!isPrecise) {
-			if (!targetGeometry.isClosed) {
-				precise = true
-			}
-
-			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
-			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
-				precise = true
-			}
-		}
-
-		const normalizedAnchor = {
-			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
-			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
 		}
 
 		if (precise) {
@@ -322,9 +308,25 @@ 				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
 					this.editor.getZoomLevel()
 			) {
-				normalizedAnchor.x = 0.5
-				normalizedAnchor.y = 0.5
-			}
+				precise = false
+			}
+		}
+
+		if (!isPrecise) {
+			if (!targetGeometry.isClosed) {
+				precise = true
+			}
+
+			// Double check that we're not going to be doing an imprecise snap on
+			// the same shape twice, as this would result in a zero length line
+			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
+				precise = true
+			}
+		}
+
+		const normalizedAnchor = {
+			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
+			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
 		}
 
 		const b = {
@@ -366,16 +368,20 @@ 		// If no bound shapes are in the selection, unbind any bound shapes
 
 		const selectedShapeIds = this.editor.getSelectedShapeIds()
-
-		if (
-			(bindings.start &&
-				(selectedShapeIds.includes(bindings.start.toId) ||
-					this.editor.isAncestorSelected(bindings.start.toId))) ||
-			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
-		) {
-			return
+		const shapesToCheck = new Set<string>()
+		if (bindings.start) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.start.toId)
+			this.editor.getShapeAncestors(bindings.start.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		if (bindings.end) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.end.toId)
+			this.editor.getShapeAncestors(bindings.end.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		// If any of the shapes are selected, return
+		for (const id of selectedShapeIds) {
+			if (shapesToCheck.has(id)) return
 		}
 
 		// When we start translating shapes, record where their bindings were in page space so we
@@ -412,16 +418,6 @@ 			})
 		}
 
-		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
-			const binding = bindings[handleName]
-			if (!binding) continue
-
-			this.editor.updateBinding({
-				...binding,
-				props: { ...binding.props, isPrecise: true },
-			})
-		}
-
 		return
 	}
 
@@ -440,15 +436,15 @@ 
 			const newPagePoint = Vec.Add(terminalBinding.pagePosition, Vec.Mul(pageDelta, 0.5))
 			const newTarget = this.editor.getShapeAtPoint(newPagePoint, {
-				hitInside: true,
-				hitFrameInside: true,
-				margin: 0,
 				filter: (targetShape) => {
 					return (
 						!targetShape.isLocked &&
 						this.editor.canBindShapes({ fromShape: shape, toShape: targetShape, binding: 'arrow' })
 					)
 				},
+				hitInside: true,
+				hitFrameInside: true,
+				margin: 0,
 			})
 
 			if (newTarget?.id === terminalBinding.binding.toId) {
@@ -600,6 +596,26 @@ 					},
 				}
 			}
+		}
+	}
+
+	override onEditEnd(shape: TLArrowShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes<TLArrowShape>([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
 		}
 	}
 
@@ -706,13 +722,15 @@ 			<g>
 				{includeClipPath && (
 					<defs>
-						<ArrowClipPath
-							hasText={shape.props.text.trim().length > 0}
-							bounds={bounds}
-							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
-							as={clipStartArrowhead && as ? as : ''}
-							ae={clipEndArrowhead && ae ? ae : ''}
-						/>
+						<clipPath id={clipPathId}>
+							<ArrowClipPath
+								hasText={shape.props.text.trim().length > 0}
+								bounds={bounds}
+								labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
+								as={clipStartArrowhead && as ? as : ''}
+								ae={clipEndArrowhead && ae ? ae : ''}
+							/>
+						</clipPath>
 					</defs>
 				)}
 				<g
@@ -731,7 +749,6 @@ 							opacity={0}
 						/>
 					)}
-
 					<path d={path} />
 				</g>
 				{as && <path d={as} />}
@@ -742,32 +759,12 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
 		)
-	}
-
-	override onEditEnd(shape: TLArrowShape) {
-		const {
-			id,
-			type,
-			props: { text },
-		} = shape
-
-		if (text.trimEnd() !== shape.props.text) {
-			this.editor.updateShapes<TLArrowShape>([
-				{
-					id,
-					type,
-					props: {
-						text: text.trimEnd(),
-					},
-				},
-			])
-		}
 	}
 
 	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
@@ -849,6 +846,7 @@ 	const info = getArrowInfo(editor, shape)
 	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
 	const bindings = getArrowBindings(editor, shape)
+
 	const isForceSolid = useValue(
 		'force solid',
 		() => {
@@ -856,10 +854,6 @@ 		},
 		[editor]
 	)
-
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
 
 	if (!info?.isValid) return null
 
@@ -897,8 +891,8 @@ 							? bindings.start.props.isExact
 								? ''
 								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					markerEnd={
@@ -906,8 +900,8 @@ 							? bindings.end.props.isExact
 								? ''
 								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					opacity={0.16}
@@ -928,6 +922,8 @@ 
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
+
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
 
 	return (
 		<>
@@ -958,6 +954,9 @@ 						WebkitClipPath: `url(#${clipPathId})`,
 					}}
 				>
+					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
+					{/* The rect serves to force repaint, making sure the clip-paths are re-evaluated. */}
+					{/* It's specifically for Safari and can cause performance issues */}
 					<rect
 						x={toDomPrecision(bounds.minX - 100)}
 						y={toDomPrecision(bounds.minY - 100)}
