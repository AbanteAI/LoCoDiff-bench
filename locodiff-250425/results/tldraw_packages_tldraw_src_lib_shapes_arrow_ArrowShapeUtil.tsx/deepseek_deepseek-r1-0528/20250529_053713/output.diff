
index e34dd9818..63e47d2d9 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp1g7j52ro_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpzb82rirb_actual.txt	
@@ -7,7 +7,7 @@ import {
 	Geometry2d,
 	Group2d,
 	Rectangle2d,
-	SVGContainer,
+	SafeId,
 	ShapeUtil,
 	SvgExportContext,
 	TLArrowBinding,
@@ -31,12 +31,14 @@ import {
 	lerp,
 	mapObjectMapValues,
 	maybeSnapToGrid,
+	removePrefix,
 	structuredClone,
 	toDomPrecision,
 	track,
 	useEditor,
 	useIsEditing,
 	useSharedSafeId,
+	useUniqueSafeId,
 	useValue,
 } from '@tldraw/editor'
 import React from 'react'
@@ -61,10 +63,13 @@ import {
 	createOrUpdateArrowBinding,
 	getArrowBindings,
 	getArrowInfo,
+	getArrowLength,
 	getArrowTerminalsInArrowSpace,
 	removeArrowBinding,
 } from './shared'
 
+let globalRenderIndex = 0
+
 enum ARROW_HANDLES {
 	START = 'start',
 	MIDDLE = 'middle',
@@ -271,6 +276,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		if (!target) {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
+
 			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
 				x: newPoint.x,
@@ -296,7 +302,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			}
 		}
 
-		if (!isPrecise) {
+		if (!precise) {
 			if (!targetGeometry.isClosed) {
 				precise = true
 			}
@@ -340,9 +346,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		const newBindings = getArrowBindings(this.editor, shape)
 		if (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {
-			if (
-				Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)
-			) {
+			if (Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)) {
 				createOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {
 					...newBindings.end.props,
 					normalizedAnchor: {
@@ -372,8 +376,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				(selectedShapeIds.includes(bindings.start.toId) ||
 					this.editor.isAncestorSelected(bindings.start.toId))) ||
 			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
+				(selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
 		}
@@ -658,9 +661,9 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 	indicator(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const isEditing = useIsEditing(shape.id)
+		const clipPathId = useSharedSafeId(removePrefix(shape.id, 'shape:') + '_clip')
 		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const clipPathId = useSharedSafeId(shape.id + '_clip')
+		const isEditing = useIsEditing(shape.id)
 
 		const info = getArrowInfo(this.editor, shape)
 		if (!info) return null
@@ -669,38 +672,36 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const geometry = this.editor.getShapeGeometry<Group2d>(shape)
 		const bounds = geometry.bounds
 
-		const labelGeometry = shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null
-
-		if (Vec.Equals(start, end)) return null
-
-		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-
-		const as = info.start.arrowhead && getArrowheadPathForType(info, 'start', strokeWidth)
-		const ae = info.end.arrowhead && getArrowheadPathForType(info, 'end', strokeWidth)
-
-		const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)
+		const labelGeom = shape.props.text.trim() ? (geometry.children[1] as Rectangle2d) : null
 
 		const includeClipPath =
-			(as && info.start.arrowhead !== 'arrow') ||
-			(ae && info.end.arrowhead !== 'arrow') ||
-			!!labelGeometry
+			(info.start.arrowhead && info.start.arrowhead !== 'arrow') ||
+			(info.end.arrowhead && info.end.arrowhead !== 'arrow') ||
+			!!labelGeom
+
+		const clipStartArrowhead = !!(info.start.arrowhead && info.start.arrowhead !== 'arrow')
+		const clipEndArrowhead = !!(info.end.arrowhead && info.end.arrowhead !== 'arrow')
 
-		if (isEditing && labelGeometry) {
+		if (isEditing && labelGeom) {
 			return (
 				<rect
-					x={toDomPrecision(labelGeometry.x)}
-					y={toDomPrecision(labelGeometry.y)}
-					width={labelGeometry.w}
-					height={labelGeometry.h}
+					x={toDomPrecision(labelGeom.x)}
+					y={toDomPrecision(labelGeom.y)}
+					width={labelGeom.w}
+					height={labelGeom.h}
 					rx={3.5 * shape.props.scale}
 					ry={3.5 * shape.props.scale}
 				/>
 			)
 		}
-		const clipStartArrowhead = !(
-			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
-		)
-		const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
+		const clipStartArrowheadPath =
+			clipStartArrowhead && info.start.arrowhead
+				? getArrowheadPathForType(info, 'start', STROKE_SIZES[shape.props.size] * shape.props.scale)
+				: undefined
+		const clipEndArrowheadPath =
+			clipEndArrowhead && info.end.arrowhead
+				? getArrowheadPathForType(info, 'end', STROKE_SIZES[shape.props.size] * shape.props.scale)
+				: undefined
 
 		return (
 			<g>
@@ -709,9 +710,9 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						<ArrowClipPath
 							hasText={shape.props.text.trim().length > 0}
 							bounds={bounds}
-							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
-							as={clipStartArrowhead && as ? as : ''}
-							ae={clipEndArrowhead && ae ? ae : ''}
+							labelBounds={labelGeom ? labelGeom.getBounds() : new Box(0, 0, 0, 0)}
+							as={clipStartArrowheadPath}
+							ae={clipEndArrowheadPath}
 						/>
 					</defs>
 				)}
@@ -721,7 +722,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
 					}}
 				>
-					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
 					{includeClipPath && (
 						<rect
 							x={bounds.minX - 100}
@@ -732,20 +732,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						/>
 					)}
 
-					<path d={path} />
+					<ArrowSvg shape={shape} shouldDisplayHandles={false} />
 				</g>
-				{as && <path d={as} />}
-				{ae && <path d={ae} />}
-				{labelGeometry && (
-					<rect
-						x={toDomPrecision(labelGeometry.x)}
-						y={toDomPrecision(labelGeometry.y)}
-						width={labelGeometry.w}
-						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
-					/>
-				)}
 			</g>
 		)
 	}
@@ -785,8 +773,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 					verticalAlign="middle"
 					text={shape.props.text}
 					labelColor={theme[shape.props.labelColor].solid}
-					bounds={getArrowLabelPosition(this.editor, shape)
-						.box.clone()
+					bounds={getArrowLabelPosition(this.editor, shape).box
+						.clone()
 						.expandBy(-ARROW_LABEL_PADDING * shape.props.scale)}
 					padding={0}
 				/>
@@ -794,19 +782,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		)
 	}
 
-	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return [
-			getFillDefForCanvas(),
-			{
-				key: `arrow:dot`,
-				component: ArrowheadDotDef,
-			},
-			{
-				key: `arrow:cross`,
-				component: ArrowheadCrossDef,
-			},
-		]
-	}
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -827,14 +802,20 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),
 		}
 	}
-}
 
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
-	const info = getArrowInfo(editor, shape)!
-
-	return info.isStraight
-		? Vec.Dist(info.start.handle, info.end.handle)
-		: Math.abs(info.handleArc.length)
+	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
+		return [
+			getFillDefForCanvas(),
+			{
+				key: `arrow:dot`,
+				component: ArrowheadDotDef,
+			},
+			{
+				key: `arrow:cross`,
+				component: ArrowheadCrossDef,
+			},
+		]
+	}
 }
 
 const ArrowSvg = track(function ArrowSvg({
@@ -849,6 +830,7 @@ const ArrowSvg = track(function ArrowSvg({
 	const info = getArrowInfo(editor, shape)
 	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
 	const bindings = getArrowBindings(editor, shape)
+
 	const isForceSolid = useValue(
 		'force solid',
 		() => {
@@ -857,7 +839,7 @@ const ArrowSvg = track(function ArrowSvg({
 		[editor]
 	)
 
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
+	const clipPathId = useUniqueSafeId()
 	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
 	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
 
@@ -884,35 +866,34 @@ const ArrowSvg = track(function ArrowSvg({
 			}
 		)
 
-		handlePath =
-			bindings.start || bindings.end ? (
-				<path
-					className="tl-arrow-hint"
-					d={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}
-					strokeDasharray={strokeDasharray}
-					strokeDashoffset={strokeDashoffset}
-					strokeWidth={sw}
-					markerStart={
-						bindings.start
-							? bindings.start.props.isExact
-								? ''
-								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
-							: ''
-					}
-					markerEnd={
-						bindings.end
-							? bindings.end.props.isExact
-								? ''
-								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
-							: ''
-					}
-					opacity={0.16}
-				/>
-			) : null
+		handlePath = bindings.start || bindings.end ? (
+			<path
+				className="tl-arrow-hint"
+				d={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}
+				strokeDasharray={strokeDasharray}
+				strokeDashoffset={strokeDashoffset}
+				strokeWidth={sw}
+				markerStart={
+					bindings.start
+						? bindings.start.props.isExact
+							? ''
+							: bindings.start.props.isPrecise
+								? `url(#${arrowheadCrossId})`
+								: `url(#${arrowheadDotId})`
+						: ''
+				}
+				markerEnd={
+					bindings.end
+						? bindings.end.props.isExact
+							? ''
+							: bindings.end.props.isPrecise
+								? `url(#${arrowheadCrossId})`
+								: `url(#${arrowheadDotId})`
+						: ''
+				}
+				opacity={0.16}
+			/>
+		) : null
 	}
 
 	const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
@@ -926,8 +907,8 @@ const ArrowSvg = track(function ArrowSvg({
 
 	const labelPosition = getArrowLabelPosition(editor, shape)
 
-	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
-	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
+	const clipStartArrowhead = !!(info.start.arrowhead && info.start.arrowhead !== 'arrow')
+	const clipEndArrowhead = !!(info.end.arrowhead && info.end.arrowhead !== 'arrow')
 
 	return (
 		<>
@@ -1009,9 +990,13 @@ function ArrowClipPath({
 	// See the description on the directions in the non-zero fill rule example:
 	// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual): ''}${as}${ae}`} />
 }
