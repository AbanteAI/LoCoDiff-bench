
index e34dd9818..1a572f6f8 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp6ollhw_f_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpv1s1ep3p_actual.txt	
@@ -13,12 +13,13 @@ import {
 	TLArrowBinding,
 	TLArrowShape,
 	TLArrowShapeProps,
-	TLFontFace,
 	TLHandle,
 	TLHandleDragInfo,
+	TLOnResizeHandler,
+	TLOnTranslateHandler,
+	TLOnTranslateStartHandler,
 	TLResizeInfo,
 	TLShapePartial,
-	TLShapeUtilCanBeLaidOutOpts,
 	TLShapeUtilCanBindOpts,
 	TLShapeUtilCanvasSvgDef,
 	Vec,
@@ -65,6 +66,8 @@ import {
 	removeArrowBinding,
 } from './shared'
 
+let globalRenderIndex = 0
+
 enum ARROW_HANDLES {
 	START = 'start',
 	MIDDLE = 'middle',
@@ -140,6 +143,10 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
+	getText(shape: TLArrowShape) {
+		return shape.props.text
+	}
+
 	getGeometry(shape: TLArrowShape) {
 		const info = getArrowInfo(this.editor, shape)!
 
@@ -149,14 +156,14 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			? new Edge2d({
 					start: Vec.From(info.start.point),
 					end: Vec.From(info.end.point),
-				})
+			  })
 			: new Arc2d({
 					center: Vec.Cast(info.handleArc.center),
 					start: Vec.Cast(info.start.point),
 					end: Vec.Cast(info.end.point),
 					sweepFlag: info.bodyArc.sweepFlag,
 					largeArcFlag: info.bodyArc.largeArcFlag,
-				})
+			  })
 
 		let labelGeom
 		if (shape.props.text.trim()) {
@@ -205,10 +212,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		].filter(Boolean) as TLHandle[]
 	}
 
-	override getText(shape: TLArrowShape) {
-		return shape.props.text
-	}
-
 	override onHandleDrag(
 		shape: TLArrowShape,
 		{ handle, isPrecise }: TLHandleDragInfo<TLArrowShape>
@@ -245,12 +248,14 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		if (this.editor.inputs.ctrlKey) {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			// Skip binding
-			removeArrowBinding(this.editor, shape, handleId)
 
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
+			removeArrowBinding(this.editor, shape, handleId)
+
 			return update
 		}
 
@@ -271,6 +276,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		if (!target) {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
+
 			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
 				x: newPoint.x,
@@ -367,6 +373,25 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		const selectedShapeIds = this.editor.getSelectedShapeIds()
 
+		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
+		if (bindings.start) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'start',
+				useHandle: true,
+			})
+			shape = this.editor.getShape(shape.id) as TLArrowShape
+		}
+		if (bindings.end) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'end',
+				useHandle: true,
+			})
+		}
+
 		if (
 			(bindings.start &&
 				(selectedShapeIds.includes(bindings.start.toId) ||
@@ -393,35 +418,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			}),
 		})
 
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
-		}
-
-		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
-			const binding = bindings[handleName]
-			if (!binding) continue
-
-			this.editor.updateBinding({
-				...binding,
-				props: { ...binding.props, isPrecise: true },
-			})
-		}
-
 		return
 	}
 
@@ -603,6 +599,26 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
+	override onEditEnd(shape: TLArrowShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes<TLArrowShape>([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
+		}
+	}
+
 	component(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const theme = useDefaultColorTheme()
@@ -680,7 +696,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		const path = info.isStraight ? getSolidStraightArrowPath(info) : getSolidCurvedArrowPath(info)
 
-		const includeClipPath =
+		const includeMask =
 			(as && info.start.arrowhead !== 'arrow') ||
 			(ae && info.end.arrowhead !== 'arrow') ||
 			!!labelGeometry
@@ -697,6 +713,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				/>
 			)
 		}
+
 		const clipStartArrowhead = !(
 			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
 		)
@@ -704,7 +721,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		return (
 			<g>
-				{includeClipPath && (
+				{includeMask && (
 					<defs>
 						<ArrowClipPath
 							hasText={shape.props.text.trim().length > 0}
@@ -717,12 +734,12 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				)}
 				<g
 					style={{
-						clipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
-						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
+						clipPath: includeMask ? `url(#${clipPathId})` : undefined,
+						WebkitClipPath: includeMask ? `url(#${clipPathId})` : undefined,
 					}}
 				>
 					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
-					{includeClipPath && (
+					{includeMask && (
 						<rect
 							x={bounds.minX - 100}
 							y={bounds.minY - 100}
@@ -742,8 +759,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -794,19 +811,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		)
 	}
 
-	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return [
-			getFillDefForCanvas(),
-			{
-				key: `arrow:dot`,
-				component: ArrowheadDotDef,
-			},
-			{
-				key: `arrow:cross`,
-				component: ArrowheadCrossDef,
-			},
-		]
-	}
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -827,6 +831,29 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			labelPosition: lerp(startShape.props.labelPosition, endShape.props.labelPosition, progress),
 		}
 	}
+
+	override getText(shape: TLArrowShape) {
+		return shape.props.text
+	}
+
+	override getAriaLiveText(shape: TLArrowShape) {
+		const bindings = getArrowBindings(this.editor, shape)
+		const start = bindings.start
+		const end = bindings.end
+		if (bindings.start === undefined && bindings.end === undefined) {
+			return shape.props.text
+		}
+		const startShape = start && this.editor.getShape(start.toId)
+		const endShape = end && this.editor.getShape(end.toId)
+		return this.editor.getTranslated([
+			'ariaLive.arrow',
+			{
+				start: startShape && startShape.props.text ? startShape.props.text : 'unlabelled',
+				end: endShape && endShape.props.text ? endShape.props.text : 'unlabelled',
+				label: shape.props.text,
+			},
+		])
+	}
 }
 
 export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
@@ -857,10 +884,6 @@ const ArrowSvg = track(function ArrowSvg({
 		[editor]
 	)
 
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
-
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
@@ -884,35 +907,34 @@ const ArrowSvg = track(function ArrowSvg({
 			}
 		)
 
-		handlePath =
-			bindings.start || bindings.end ? (
-				<path
-					className="tl-arrow-hint"
-					d={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}
-					strokeDasharray={strokeDasharray}
-					strokeDashoffset={strokeDashoffset}
-					strokeWidth={sw}
-					markerStart={
-						bindings.start
-							? bindings.start.props.isExact
-								? ''
-								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
-							: ''
-					}
-					markerEnd={
-						bindings.end
-							? bindings.end.props.isExact
-								? ''
-								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
-							: ''
-					}
-					opacity={0.16}
-				/>
-			) : null
+		handlePath = bindings.start || bindings.end ? (
+			<path
+				className="tl-arrow-hint"
+				d={info.isStraight ? getStraightArrowHandlePath(info) : getCurvedArrowHandlePath(info)}
+				strokeDasharray={strokeDasharray}
+				strokeDashoffset={strokeDashoffset}
+				strokeWidth={sw}
+				markerStart={
+					bindings.start
+						? bindings.start.props.isExact
+							? ''
+							: bindings.start.props.isPrecise
+								? `url(#${arrowheadCrossId})`
+								: `url(#${arrowheadDotId})`
+						: ''
+				}
+				markerEnd={
+					bindings.end
+						? bindings.end.props.isExact
+							? ''
+							: bindings.end.props.isPrecise
+								? `url(#${arrowheadCrossId})`
+								: `url(#${arrowheadDotId})`
+						: ''
+				}
+				opacity={0.16}
+			/>
+		) : null
 	}
 
 	const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
@@ -929,19 +951,19 @@ const ArrowSvg = track(function ArrowSvg({
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
+
 	return (
 		<>
 			{/* Yep */}
 			<defs>
-				<clipPath id={clipPathId}>
-					<ArrowClipPath
-						hasText={shape.props.text.trim().length > 0}
-						bounds={bounds}
-						labelBounds={labelPosition.box}
-						as={clipStartArrowhead && as ? as : ''}
-						ae={clipEndArrowhead && ae ? ae : ''}
-					/>
-				</clipPath>
+				<ArrowClipPath
+					hasText={shape.props.text.trim().length > 0}
+					bounds={bounds}
+					labelBounds={labelPosition.box}
+					as={clipStartArrowhead && as ? as : ''}
+					ae={clipEndArrowhead && ae ? ae : ''}
+				/>
 			</defs>
 			<g
 				fill="none"
