--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -8,6 +8,7 @@ 	Group2d,
 	Rectangle2d,
 	SVGContainer,
+	SafeId,
 	ShapeUtil,
 	SvgExportContext,
 	TLArrowBinding,
@@ -142,7 +143,6 @@ 
 	getGeometry(shape: TLArrowShape) {
 		const info = getArrowInfo(this.editor, shape)!
-
 		const debugGeom: Geometry2d[] = []
 
 		const bodyGeom = info.isStraight
@@ -244,12 +244,11 @@ 
 		if (this.editor.inputs.ctrlKey) {
 			// todo: maybe double check that this isn't equal to the other handle too?
-			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -296,23 +295,6 @@ 			}
 		}
 
-		if (!isPrecise) {
-			if (!targetGeometry.isClosed) {
-				precise = true
-			}
-
-			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
-			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
-				precise = true
-			}
-		}
-
-		const normalizedAnchor = {
-			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
-			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
-		}
-
 		if (precise) {
 			// Turn off precision if we're within a certain distance to the center of the shape.
 			// Funky math but we want the snap distance to be 4 at the minimum and either
@@ -327,6 +309,23 @@ 			}
 		}
 
+		if (!isPrecise) {
+			if (!targetGeometry.isClosed) {
+				precise = true
+			}
+
+			// Double check that we're not going to be doing an imprecise snap on
+			// the same shape twice, as this would result in a zero length line
+			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
+				precise = true
+			}
+		}
+
+		const normalizedAnchor = {
+			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
+			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
+		}
+
 		const b = {
 			terminal: handleId,
 			normalizedAnchor,
@@ -341,7 +340,10 @@ 		const newBindings = getArrowBindings(this.editor, shape)
 		if (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {
 			if (
-				Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)
+				Vec.Equals(
+					newBindings.start.props.normalizedAnchor,
+					newBindings.end.props.normalizedAnchor
+				)
 			) {
 				createOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {
 					...newBindings.end.props,
@@ -376,6 +378,25 @@ 					this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
+		}
+
+		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
+		if (bindings.start) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'start',
+				useHandle: true,
+			})
+			shape = this.editor.getShape(shape.id) as TLArrowShape
+		}
+		if (bindings.end) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'end',
+				useHandle: true,
+			})
 		}
 
 		// When we start translating shapes, record where their bindings were in page space so we
@@ -393,25 +414,6 @@ 			}),
 		})
 
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
-		}
-
 		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
 			const binding = bindings[handleName]
 			if (!binding) continue
@@ -603,7 +605,7 @@ 		}
 	}
 
-	component(shape: TLArrowShape) {
+	override component(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const theme = useDefaultColorTheme()
 		const onlySelectedShape = this.editor.getOnlySelectedShape()
@@ -656,7 +658,7 @@ 		)
 	}
 
-	indicator(shape: TLArrowShape) {
+	override indicator(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const isEditing = useIsEditing(shape.id)
 		// eslint-disable-next-line react-hooks/rules-of-hooks
@@ -697,9 +699,7 @@ 				/>
 			)
 		}
-		const clipStartArrowhead = !(
-			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
-		)
+		const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 		const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
 		return (
@@ -742,8 +742,8 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +807,7 @@ 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -856,10 +857,6 @@ 		},
 		[editor]
 	)
-
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
 
 	if (!info?.isValid) return null
 
@@ -929,6 +926,15 @@ 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
+	const includeClipPath =
+		(as && info.start.arrowhead !== 'arrow') ||
+		(ae && info.end.arrowhead !== 'arrow') ||
+		!!labelGeometry
+
+	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
+	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
+
 	return (
 		<>
 			{/* Yep */}
@@ -954,8 +960,8 @@ 				{handlePath}
 				<g
 					style={{
-						clipPath: `url(#${clipPathId})`,
-						WebkitClipPath: `url(#${clipPathId})`,
+						clipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
+						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
 					}}
 				>
 					<rect
