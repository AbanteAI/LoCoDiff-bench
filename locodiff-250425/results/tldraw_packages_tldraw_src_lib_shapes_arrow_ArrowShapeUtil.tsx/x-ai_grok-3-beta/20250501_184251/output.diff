
index e34dd981..ce50b2d8 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp7v01ldtj_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpicm5w0c0_actual.txt	
@@ -8,6 +8,7 @@ import {
 	Group2d,
 	Rectangle2d,
 	SVGContainer,
+	SafeId,
 	ShapeUtil,
 	SvgExportContext,
 	TLArrowBinding,
@@ -142,7 +143,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 	getGeometry(shape: TLArrowShape) {
 		const info = getArrowInfo(this.editor, shape)!
-
 		const debugGeom: Geometry2d[] = []
 
 		const bodyGeom = info.isStraight
@@ -244,12 +244,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 		if (this.editor.inputs.ctrlKey) {
 			// todo: maybe double check that this isn't equal to the other handle too?
-			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -296,6 +295,20 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			}
 		}
 
+		if (precise) {
+			// Turn off precision if we're within a certain distance to the center of the shape.
+			// Funky math but we want the snap distance to be 4 at the minimum and either
+			// 16 or 15% of the smaller dimension of the target shape, whichever is smaller
+			if (
+				Vec.Dist(pointInTargetSpace, targetBounds.center) <
+				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
+					this.editor.getZoomLevel()
+			) {
+				normalizedAnchor.x = 0.5
+				normalizedAnchor.y = 0.5
+			}
+		}
+
 		if (!isPrecise) {
 			if (!targetGeometry.isClosed) {
 				precise = true
@@ -313,20 +326,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
 		}
 
-		if (precise) {
-			// Turn off precision if we're within a certain distance to the center of the shape.
-			// Funky math but we want the snap distance to be 4 at the minimum and either
-			// 16 or 15% of the smaller dimension of the target shape, whichever is smaller
-			if (
-				Vec.Dist(pointInTargetSpace, targetBounds.center) <
-				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
-					this.editor.getZoomLevel()
-			) {
-				normalizedAnchor.x = 0.5
-				normalizedAnchor.y = 0.5
-			}
-		}
-
 		const b = {
 			terminal: handleId,
 			normalizedAnchor,
@@ -341,7 +340,10 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		const newBindings = getArrowBindings(this.editor, shape)
 		if (newBindings.start && newBindings.end && newBindings.start.toId === newBindings.end.toId) {
 			if (
-				Vec.Equals(newBindings.start.props.normalizedAnchor, newBindings.end.props.normalizedAnchor)
+				Vec.Equals(
+					newBindings.start.props.normalizedAnchor,
+					newBindings.end.props.normalizedAnchor
+				)
 			) {
 				createOrUpdateArrowBinding(this.editor, shape, newBindings.end.toId, {
 					...newBindings.end.props,
@@ -378,21 +380,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			return
 		}
 
-		// When we start translating shapes, record where their bindings were in page space so we
-		// can maintain them as we translate the arrow
-		shapeAtTranslationStart.set(shape, {
-			pagePosition: shapePageTransform.applyToPoint(shape),
-			terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
-				const binding = bindings[terminalName]
-				if (!binding) return null
-				return {
-					binding,
-					shapePosition: point,
-					pagePosition: shapePageTransform.applyToPoint(point),
-				}
-			}),
-		})
-
 		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
 		if (bindings.start) {
 			updateArrowTerminal({
@@ -412,6 +399,21 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			})
 		}
 
+		// When we start translating shapes, record where their bindings were in page space so we
+		// can maintain them as we translate the arrow
+		shapeAtTranslationStart.set(shape, {
+			pagePosition: shapePageTransform.applyToPoint(shape),
+			terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
+				const binding = bindings[terminalName]
+				if (!binding) return null
+				return {
+					binding,
+					shapePosition: point,
+					pagePosition: shapePageTransform.applyToPoint(point),
+				}
+			}),
+		})
+
 		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
 			const binding = bindings[handleName]
 			if (!binding) continue
@@ -603,7 +605,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		}
 	}
 
-	component(shape: TLArrowShape) {
+	override component(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const theme = useDefaultColorTheme()
 		const onlySelectedShape = this.editor.getOnlySelectedShape()
@@ -656,7 +658,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 		)
 	}
 
-	indicator(shape: TLArrowShape) {
+	override indicator(shape: TLArrowShape) {
 		// eslint-disable-next-line react-hooks/rules-of-hooks
 		const isEditing = useIsEditing(shape.id)
 		// eslint-disable-next-line react-hooks/rules-of-hooks
@@ -697,9 +699,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				/>
 			)
 		}
-		const clipStartArrowhead = !(
-			info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow'
-		)
+		const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 		const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
 		return (
@@ -742,8 +742,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +807,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -857,10 +858,6 @@ const ArrowSvg = track(function ArrowSvg({
 		[editor]
 	)
 
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
-
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
@@ -929,6 +926,15 @@ const ArrowSvg = track(function ArrowSvg({
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
 
+	const includeClipPath =
+		(as && info.start.arrowhead !== 'arrow') ||
+		(ae && info.end.arrowhead !== 'arrow') ||
+		!!labelGeometry
+
+	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
+	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
+
 	return (
 		<>
 			{/* Yep */}
@@ -954,8 +960,8 @@ const ArrowSvg = track(function ArrowSvg({
 				{handlePath}
 				<g
 					style={{
-						clipPath: `url(#${clipPathId})`,
-						WebkitClipPath: `url(#${clipPathId})`,
+						clipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
+						WebkitClipPath: includeClipPath ? `url(#${clipPathId})` : undefined,
 					}}
 				>
 					<rect
