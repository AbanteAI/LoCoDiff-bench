--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -71,7 +71,6 @@ 	END = 'end',
 }
 
-/** @public */
 export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	static override type = 'arrow' as const
 	static override props = arrowShapeProps
@@ -246,10 +245,10 @@ 			// todo: maybe double check that this isn't equal to the other handle too?
 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -303,7 +302,11 @@ 
 			// Double check that we're not going to be doing an imprecise snap on
 			// the same shape twice, as this would result in a zero length line
-			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
+			if (
+				otherBinding &&
+				target.id === otherBinding.toId &&
+				otherBinding.props.isPrecise
+			) {
 				precise = true
 			}
 		}
@@ -372,10 +375,38 @@ 				(selectedShapeIds.includes(bindings.start.toId) ||
 					this.editor.isAncestorSelected(bindings.start.toId))) ||
 			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
+				(selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
+		}
+
+		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
+		if (bindings.start) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'start',
+				useHandle: true,
+			})
+			shape = this.editor.getShape(shape.id) as TLArrowShape
+		}
+		if (bindings.end) {
+			updateArrowTerminal({
+				editor: this.editor,
+				arrow: shape,
+				terminal: 'end',
+				useHandle: true,
+			})
+		}
+
+		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
+			const binding = bindings[handleName]
+			if (!binding) continue
+
+			this.editor.updateBinding({
+				...binding,
+				props: { ...binding.props, isPrecise: true },
+			})
 		}
 
 		// When we start translating shapes, record where their bindings were in page space so we
@@ -393,35 +424,6 @@ 			}),
 		})
 
-		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
-		if (bindings.start) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'start',
-				useHandle: true,
-			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
-		}
-		if (bindings.end) {
-			updateArrowTerminal({
-				editor: this.editor,
-				arrow: shape,
-				terminal: 'end',
-				useHandle: true,
-			})
-		}
-
-		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
-			const binding = bindings[handleName]
-			if (!binding) continue
-
-			this.editor.updateBinding({
-				...binding,
-				props: { ...binding.props, isPrecise: true },
-			})
-		}
-
 		return
 	}
 
@@ -604,8 +606,6 @@ 	}
 
 	component(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const theme = useDefaultColorTheme()
 		const onlySelectedShape = this.editor.getOnlySelectedShape()
 		const shouldDisplayHandles =
 			this.editor.isInAny(
@@ -643,7 +643,7 @@ 						align="middle"
 						verticalAlign="middle"
 						text={shape.props.text}
-						labelColor={theme[shape.props.labelColor].solid}
+						labelColor={shape.props.labelColor}
 						textWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}
 						isSelected={isSelected}
 						padding={0}
@@ -731,7 +731,6 @@ 							opacity={0}
 						/>
 					)}
-
 					<path d={path} />
 				</g>
 				{as && <path d={as} />}
@@ -742,8 +741,8 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +806,7 @@ 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
