
index e34dd981..d4f3208a 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpkn5_vblf_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmp1a_6qoc__actual.txt	
@@ -71,7 +71,6 @@ enum ARROW_HANDLES {
 	END = 'end',
 }
 
-/** @public */
 export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	static override type = 'arrow' as const
 	static override props = arrowShapeProps
@@ -246,10 +245,10 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			// todo: maybe double check that this isn't equal to the other handle too?
 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -303,7 +302,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 
 			// Double check that we're not going to be doing an imprecise snap on
 			// the same shape twice, as this would result in a zero length line
-			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
+			if (
+				otherBinding &&
+				target.id === otherBinding.toId &&
+				otherBinding.props.isPrecise
+			) {
 				precise = true
 			}
 		}
@@ -372,27 +375,11 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 				(selectedShapeIds.includes(bindings.start.toId) ||
 					this.editor.isAncestorSelected(bindings.start.toId))) ||
 			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
+				(selectedShapeIds.includes(bindings.end.toId) || this.editor.isAncestorSelected(bindings.end.toId)))
 		) {
 			return
 		}
 
-		// When we start translating shapes, record where their bindings were in page space so we
-		// can maintain them as we translate the arrow
-		shapeAtTranslationStart.set(shape, {
-			pagePosition: shapePageTransform.applyToPoint(shape),
-			terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
-				const binding = bindings[terminalName]
-				if (!binding) return null
-				return {
-					binding,
-					shapePosition: point,
-					pagePosition: shapePageTransform.applyToPoint(point),
-				}
-			}),
-		})
-
 		// update arrow terminal bindings eagerly to make sure the arrows unbind nicely when translating
 		if (bindings.start) {
 			updateArrowTerminal({
@@ -422,6 +409,21 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			})
 		}
 
+		// When we start translating shapes, record where their bindings were in page space so we
+		// can maintain them as we translate the arrow
+		shapeAtTranslationStart.set(shape, {
+			pagePosition: shapePageTransform.applyToPoint(shape),
+			terminalBindings: mapObjectMapValues(terminalsInArrowSpace, (terminalName, point) => {
+				const binding = bindings[terminalName]
+				if (!binding) return null
+				return {
+					binding,
+					shapePosition: point,
+					pagePosition: shapePageTransform.applyToPoint(point),
+				}
+			}),
+		})
+
 		return
 	}
 
@@ -604,8 +606,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 
 	component(shape: TLArrowShape) {
-		// eslint-disable-next-line react-hooks/rules-of-hooks
-		const theme = useDefaultColorTheme()
 		const onlySelectedShape = this.editor.getOnlySelectedShape()
 		const shouldDisplayHandles =
 			this.editor.isInAny(
@@ -643,7 +643,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						align="middle"
 						verticalAlign="middle"
 						text={shape.props.text}
-						labelColor={theme[shape.props.labelColor].solid}
+						labelColor={shape.props.labelColor}
 						textWidth={labelPosition.box.w - ARROW_LABEL_PADDING * 2 * shape.props.scale}
 						isSelected={isSelected}
 						padding={0}
@@ -731,7 +731,6 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 							opacity={0}
 						/>
 					)}
-
 					<path d={path} />
 				</g>
 				{as && <path d={as} />}
@@ -742,8 +741,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +806,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
