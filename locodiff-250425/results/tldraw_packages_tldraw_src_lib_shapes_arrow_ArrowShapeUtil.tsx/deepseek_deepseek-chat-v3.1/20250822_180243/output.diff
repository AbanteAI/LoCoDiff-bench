
index e34dd9818..66b0fd55b 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpv49lb3oy_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual):tmp/tmpxstgj65s_actual.txt	
@@ -29,8 +29,8 @@ import {
 	getDefaultColorTheme,
 	getPerfectDashProps,
 	lerp,
-	mapObjectMapValues,
 	maybeSnapToGrid,
+	mapObjectMapValues,
 	structuredClone,
 	toDomPrecision,
 	track,
@@ -636,7 +636,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 					<PlainTextLabel
 						shapeId={shape.id}
 						classNamePrefix="tl-arrow"
-						type="arrow"
+						type="arrow'
 						font={shape.props.font}
 						fontSize={getArrowLabelFontSize(shape)}
 						lineHeight={TEXT_PROPS.lineHeight}
@@ -706,13 +706,15 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			<g>
 				{includeClipPath && (
 					<defs>
-						<ArrowClipPath
-							hasText={shape.props.text.trim().length > 0}
-							bounds={bounds}
-							labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
-							as={clipStartArrowhead && as ? as : ''}
-							ae={clipEndArrowhead && ae ? ae : ''}
-						/>
+						<clipPath id={clipPathId}>
+							<ArrowClipPath
+								hasText={shape.props.text.trim().length > 0}
+								bounds={bounds}
+								labelBounds={labelGeometry ? labelGeometry.getBounds() : new Box(0, 0, 0, 0)}
+								as={clipStartArrowhead && as ? as : ''}
+								ae={clipEndArrowhead && ae ? ae : ''}
+							/>
+						</clipPath>
 					</defs>
 				)}
 				<g
@@ -742,8 +744,8 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
@@ -807,6 +809,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -829,7 +832,7 @@ export class ArrowShapeUtil extends ShapeUtil<TLArrowShape> {
 	}
 }
 
-export function getArrowLength(editor: Editor, shape: TLArrowShape): number {
+function getArrowLength(editor: Editor, shape: TLArrowShape): number {
 	const info = getArrowInfo(editor, shape)!
 
 	return info.isStraight
@@ -849,6 +852,7 @@ const ArrowSvg = track(function ArrowSvg({
 	const info = getArrowInfo(editor, shape)
 	const bounds = Box.ZeroFix(editor.getShapeGeometry(shape).bounds)
 	const bindings = getArrowBindings(editor, shape)
+
 	const isForceSolid = useValue(
 		'force solid',
 		() => {
