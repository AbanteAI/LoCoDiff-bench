--- tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_arrow_ArrowShapeUtil.tsx_extracted.txt (actual)@@ -2,7 +2,6 @@ 	Arc2d,
 	Box,
 	EMPTY_ARRAY,
-	Edge2d,
 	Editor,
 	Geometry2d,
 	Group2d,
@@ -41,6 +40,7 @@ } from '@tldraw/editor'
 import React from 'react'
 import { updateArrowTerminal } from '../../bindings/arrow/ArrowBindingUtil'
+
 import { PlainTextLabel } from '../shared/PlainTextLabel'
 import { ShapeFill } from '../shared/ShapeFill'
 import { SvgTextLabel } from '../shared/SvgTextLabel'
@@ -116,11 +116,6 @@ 		return true
 	}
 
-	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
-		if (!shape.props.text) return EMPTY_ARRAY
-		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
-	}
-
 	override getDefaultProps(): TLArrowShape['props'] {
 		return {
 			dash: 'draw',
@@ -140,6 +135,11 @@ 		}
 	}
 
+	override getFontFaces(shape: TLArrowShape): TLFontFace[] {
+		if (!shape.props.text) return EMPTY_ARRAY
+		return [DefaultFontFaces[`tldraw_${shape.props.font}`].normal.normal]
+	}
+
 	getGeometry(shape: TLArrowShape) {
 		const info = getArrowInfo(this.editor, shape)!
 
@@ -175,6 +175,14 @@ 		return new Group2d({
 			children: [...(labelGeom ? [bodyGeom, labelGeom] : [bodyGeom]), ...debugGeom],
 		})
+	}
+
+	getArrowLength(shape: TLArrowShape): number {
+		const info = getArrowInfo(this.editor, shape)!
+
+		return info.isStraight
+			? Vec.Dist(info.start.handle, info.end.handle)
+			: Math.abs(info.handleArc.length)
 	}
 
 	override getHandles(shape: TLArrowShape): TLHandle[] {
@@ -235,7 +243,7 @@ 
 		// Start or end, pointing the arrow...
 
-		const update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }
+		const next = structuredClone(shape) as TLArrowShape
 
 		const currentBinding = bindings[handleId]
 
@@ -246,10 +254,11 @@ 			// todo: maybe double check that this isn't equal to the other handle too?
 			// Skip binding
 			removeArrowBinding(this.editor, shape, handleId)
-
+			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
+			const update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }
 			update.props![handleId] = {
-				x: handle.x,
-				y: handle.y,
+				x: newPoint.x,
+				y: newPoint.y,
 			}
 			return update
 		}
@@ -272,6 +281,7 @@ 			// todo: maybe double check that this isn't equal to the other handle too?
 			removeArrowBinding(this.editor, shape, handleId)
 			const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
+			const update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }
 			update.props![handleId] = {
 				x: newPoint.x,
 				y: newPoint.y,
@@ -283,7 +293,7 @@ 
 		const targetGeometry = this.editor.getShapeGeometry(target)
 		const targetBounds = Box.ZeroFix(targetGeometry.bounds)
-		const pageTransform = this.editor.getShapePageTransform(update.id)!
+		const pageTransform = this.editor.getShapePageTransform(next.id)!
 		const pointInPageSpace = pageTransform.applyToPoint(handle)
 		const pointInTargetSpace = this.editor.getPointInShapeSpace(target, pointInPageSpace)
 
@@ -294,23 +304,6 @@ 			if (!currentBinding || (currentBinding && target.id !== currentBinding.toId)) {
 				precise = this.editor.inputs.pointerVelocity.len() < 0.5
 			}
-		}
-
-		if (!isPrecise) {
-			if (!targetGeometry.isClosed) {
-				precise = true
-			}
-
-			// Double check that we're not going to be doing an imprecise snap on
-			// the same shape twice, as this would result in a zero length line
-			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
-				precise = true
-			}
-		}
-
-		const normalizedAnchor = {
-			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
-			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
 		}
 
 		if (precise) {
@@ -322,9 +315,25 @@ 				Math.max(4, Math.min(Math.min(targetBounds.width, targetBounds.height) * 0.15, 16)) /
 					this.editor.getZoomLevel()
 			) {
-				normalizedAnchor.x = 0.5
-				normalizedAnchor.y = 0.5
-			}
+				precise = false
+			}
+		}
+
+		if (!isPrecise) {
+			if (!targetGeometry.isClosed) {
+				precise = true
+			}
+
+			// Double check that we're not going to be doing an imprecise snap on
+			// the same shape twice, as this would result in a zero length line
+			if (otherBinding && target.id === otherBinding.toId && otherBinding.props.isPrecise) {
+				precise = true
+			}
+		}
+
+		const normalizedAnchor = {
+			x: (pointInTargetSpace.x - targetBounds.minX) / targetBounds.width,
+			y: (pointInTargetSpace.y - targetBounds.minY) / targetBounds.height,
 		}
 
 		const b = {
@@ -353,6 +362,7 @@ 			}
 		}
 
+		const update: TLShapePartial<TLArrowShape> = { id: shape.id, type: 'arrow', props: {} }
 		return update
 	}
 
@@ -366,16 +376,20 @@ 		// If no bound shapes are in the selection, unbind any bound shapes
 
 		const selectedShapeIds = this.editor.getSelectedShapeIds()
-
-		if (
-			(bindings.start &&
-				(selectedShapeIds.includes(bindings.start.toId) ||
-					this.editor.isAncestorSelected(bindings.start.toId))) ||
-			(bindings.end &&
-				(selectedShapeIds.includes(bindings.end.toId) ||
-					this.editor.isAncestorSelected(bindings.end.toId)))
-		) {
-			return
+		const shapesToCheck = new Set<string>()
+		if (bindings.start) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.start.toId)
+			this.editor.getShapeAncestors(bindings.start.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		if (bindings.end) {
+			// Add shape and all ancestors to set
+			shapesToCheck.add(bindings.end.toId)
+			this.editor.getShapeAncestors(bindings.end.toId).forEach((a) => shapesToCheck.add(a.id))
+		}
+		// If any of the shapes are selected, return
+		for (const id of selectedShapeIds) {
+			if (shapesToCheck.has(id)) return
 		}
 
 		// When we start translating shapes, record where their bindings were in page space so we
@@ -401,7 +415,7 @@ 				terminal: 'start',
 				useHandle: true,
 			})
-			shape = this.editor.getShape(shape.id) as TLArrowShape
+			shape = this.editor.getShape(shape.id)! as TLArrowShape
 		}
 		if (bindings.end) {
 			updateArrowTerminal({
@@ -410,19 +424,8 @@ 				terminal: 'end',
 				useHandle: true,
 			})
-		}
-
-		for (const handleName of [ARROW_HANDLES.START, ARROW_HANDLES.END] as const) {
-			const binding = bindings[handleName]
-			if (!binding) continue
-
-			this.editor.updateBinding({
-				...binding,
-				props: { ...binding.props, isPrecise: true },
-			})
-		}
-
-		return
+			shape = this.editor.getShape(shape.id)! as TLArrowShape
+		}
 	}
 
 	override onTranslate(initialShape: TLArrowShape, shape: TLArrowShape) {
@@ -494,16 +497,13 @@ 			end.y = terminals.end.y * scaleY
 		}
 
-		// todo: we should only change the normalized anchor positions
-		// of the shape's handles if the bound shape is also being resized
-
 		const mx = Math.abs(scaleX)
 		const my = Math.abs(scaleY)
 
-		const startNormalizedAnchor = bindings?.start
+		const startNormalizedAnchor = bindings.start
 			? Vec.From(bindings.start.props.normalizedAnchor)
 			: null
-		const endNormalizedAnchor = bindings?.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
+		const endNormalizedAnchor = bindings.end ? Vec.From(bindings.end.props.normalizedAnchor) : null
 
 		if (scaleX < 0 && scaleY >= 0) {
 			if (bend !== 0) {
@@ -600,6 +600,48 @@ 					},
 				}
 			}
+		}
+	}
+
+	override getAriaLiveText(shape: TLArrowShape) {
+		const label = shape.props.text.trim()
+		if (label) return label
+		const { start, end } = getArrowBindings(this.editor, shape)
+		if (!start && !end) return 'arrow'
+
+		let result = 'arrow'
+		if (start) {
+			const startShape = this.editor.getShape(start.toId)
+			const startShapeName = startShape ? this.editor.getShapeUtil(startShape).getAriaLiveText(startShape) : 'an object'
+			result += ` from ${startShapeName}`
+		}
+
+		if (end) {
+			const endShape = this.editor.getShape(end.toId)
+			const endShapeName = endShape ? this.editor.getShapeUtil(endShape).getAriaLiveText(endShape) : 'an object'
+			result += `${start ? ' to' : ' from'} ${endShapeName}`
+		}
+
+		return result
+	}
+
+	override onEditEnd(shape: TLArrowShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes<TLArrowShape>([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
 		}
 	}
 
@@ -731,7 +773,6 @@ 							opacity={0}
 						/>
 					)}
-
 					<path d={path} />
 				</g>
 				{as && <path d={as} />}
@@ -742,36 +783,25 @@ 						y={toDomPrecision(labelGeometry.y)}
 						width={labelGeometry.w}
 						height={labelGeometry.h}
-						rx={3.5}
-						ry={3.5}
+						rx={3.5 * shape.props.scale}
+						ry={3.5 * shape.props.scale}
 					/>
 				)}
 			</g>
 		)
 	}
 
-	override onEditEnd(shape: TLArrowShape) {
-		const {
-			id,
-			type,
-			props: { text },
-		} = shape
-
-		if (text.trimEnd() !== shape.props.text) {
-			this.editor.updateShapes<TLArrowShape>([
-				{
-					id,
-					type,
-					props: {
-						text: text.trimEnd(),
-					},
-				},
-			])
-		}
-	}
-
 	override toSvg(shape: TLArrowShape, ctx: SvgExportContext) {
 		ctx.addExportDef(getFillDefForExport(shape.props.fill))
+		if (shape.props.text) {
+			const fontFace = this.getFontFaces(shape)[0]
+			if (fontFace) {
+				ctx.addExportDef({
+					key: fontFace.fontFamily,
+					component: () => <style>{fontFace.css}</style>,
+				})
+			}
+		}
 		const theme = getDefaultColorTheme(ctx)
 		const scaleFactor = 1 / shape.props.scale
 
@@ -807,6 +837,7 @@ 			},
 		]
 	}
+
 	override getInterpolatedProps(
 		startShape: TLArrowShape,
 		endShape: TLArrowShape,
@@ -857,10 +888,6 @@ 		[editor]
 	)
 
-	const clipPathId = useSharedSafeId(shape.id + '_clip')
-	const arrowheadDotId = useSharedSafeId('arrowhead-dot')
-	const arrowheadCrossId = useSharedSafeId('arrowhead-cross')
-
 	if (!info?.isValid) return null
 
 	const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
@@ -897,8 +924,8 @@ 							? bindings.start.props.isExact
 								? ''
 								: bindings.start.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					markerEnd={
@@ -906,8 +933,8 @@ 							? bindings.end.props.isExact
 								? ''
 								: bindings.end.props.isPrecise
-									? `url(#${arrowheadCrossId})`
-									: `url(#${arrowheadDotId})`
+									? `url(#${useSharedSafeId('arrowhead-cross')})`
+									: `url(#${useSharedSafeId('arrowhead-dot')})`
 							: ''
 					}
 					opacity={0.16}
@@ -928,6 +955,8 @@ 
 	const clipStartArrowhead = !(info.start.arrowhead === 'none' || info.start.arrowhead === 'arrow')
 	const clipEndArrowhead = !(info.end.arrowhead === 'none' || info.end.arrowhead === 'arrow')
+
+	const clipPathId = useSharedSafeId(shape.id + '_clip')
 
 	return (
 		<>
@@ -958,6 +987,7 @@ 						WebkitClipPath: `url(#${clipPathId})`,
 					}}
 				>
+					{/* This rect needs to be here if we're creating a mask due to an svg quirk on Chrome */}
 					<rect
 						x={toDomPrecision(bounds.minX - 100)}
 						y={toDomPrecision(bounds.minY - 100)}
