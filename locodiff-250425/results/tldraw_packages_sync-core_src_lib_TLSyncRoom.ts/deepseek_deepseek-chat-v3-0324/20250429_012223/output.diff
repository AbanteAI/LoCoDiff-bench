
index 66f39bdb..4b1c87f5 100644
--- a/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected):tmp/tmpkcsco9k0_expected.txt	
+++ b/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual):tmp/tmpp26z441t_actual.txt	
@@ -43,6 +43,7 @@ import {
 } from './diff'
 import { interval } from './interval'
 import {
+	TLConnectRequest,
 	TLIncompatibilityReason,
 	TLSocketClientSentEvent,
 	TLSocketServerSentDataEvent,
@@ -141,7 +142,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	// A table of connected clients
 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
-	// eslint-disable-next-line local/prefer-class-methods
 	pruneSessions = () => {
 		for (const client of this.sessions.values()) {
 			switch (client.state) {
@@ -257,7 +257,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			)
 		}
 
-		this.presenceType = presenceTypes.values().next()?.value ?? null
+		this.presenceType = presenceTypes.values().next()?.value
 
 		if (!snapshot) {
 			snapshot = {
@@ -310,7 +310,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			store: Object.fromEntries(
 				objectMapEntries(documents).map(([id, { state }]) => [id, state as R])
 			) as Record<IdOf<R>, R>,
-			// eslint-disable-next-line @typescript-eslint/no-deprecated
 			schema: snapshot.schema ?? this.schema.serializeEarliestVersion(),
 		})
 
@@ -354,7 +353,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		}
 	}
 
-	// eslint-disable-next-line local/prefer-class-methods
 	private pruneTombstones = () => {
 		// avoid blocking any pending responses
 		this.state.update(({ tombstones, documents }) => {
@@ -410,11 +408,11 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			tombstones,
 			schema: this.serializedSchema,
 			documents: Object.values(documents)
-				.filter((d) => this.documentTypes.has(d.state.typeName))
 				.map((doc) => ({
 					state: doc.state,
 					lastChangedClock: doc.lastChangedClock,
-				})),
+				}))
+				.filter((d) => this.documentTypes.has(d.state.typeName)),
 		}
 	}
 
@@ -592,7 +590,9 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	 * When a client connects to the room, add them to the list of clients and then merge the history
 	 * down into the snapshots.
 	 *
-	 * @internal
+	 * @param sessionId - The session of the client that connected to the room.
+	 * @param socket - Their socket.
+	 * @param meta - Any metadata associated with the session.
 	 */
 	handleNewSession(opts: {
 		sessionId: string
@@ -658,38 +658,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		return Result.ok(result)
 	}
 
-	/**
-	 * When the server receives a message from the clients Currently, supports connect and patches.
-	 * Invalid messages types throws an error. Currently, doesn't validate data.
-	 *
-	 * @param sessionId - The session that sent the message
-	 * @param message - The message that was sent
-	 */
-	async handleMessage(sessionId: string, message: TLSocketClientSentEvent<R>) {
-		const session = this.sessions.get(sessionId)
-		if (!session) {
-			this.log?.warn?.('Received message from unknown session')
-			return
-		}
-		switch (message.type) {
-			case 'connect': {
-				return this.handleConnectRequest(session, message)
-			}
-			case 'push': {
-				return this.handlePushRequest(session, message)
-			}
-			case 'ping': {
-				if (session.state === RoomSessionState.Connected) {
-					session.lastInteractionTime = Date.now()
-				}
-				return this.sendMessage(session.sessionId, { type: 'pong' })
-			}
-			default: {
-				exhaustiveSwitchError(message)
-			}
-		}
-	}
-
 	/** If the client is out of date, or we are out of date, we need to let them know */
 	rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
 		const session = this.sessions.get(sessionId)
@@ -701,23 +669,18 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		if (session.requiresLegacyRejection) {
 			try {
 				if (session.socket.isOpen) {
-					// eslint-disable-next-line @typescript-eslint/no-deprecated
 					let legacyReason: TLIncompatibilityReason
 					switch (fatalReason) {
 						case TLSyncErrorCloseEventReason.CLIENT_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.ClientTooOld
 							break
 						case TLSyncErrorCloseEventReason.SERVER_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.ServerTooOld
 							break
 						case TLSyncErrorCloseEventReason.INVALID_RECORD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.InvalidRecord
 							break
 						default:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.InvalidOperation
 							break
 					}
@@ -883,6 +846,38 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		})
 	}
 
+	/**
+	 * When the server receives a message from the clients Currently, supports connect and patches.
+	 * Invalid messages types throws an error. Currently, doesn't validate data.
+	 *
+	 * @param sessionId - The session that sent the message
+	 * @param message - The message that was sent
+	 */
+	async handleMessage(sessionId: string, message: TLSocketClientSentEvent<R>) {
+		const session = this.sessions.get(sessionId)
+		if (!session) {
+			this.log?.warn?.('Received message from unknown session')
+			return
+		}
+		switch (message.type) {
+			case 'connect': {
+				return this.handleConnectRequest(session, message)
+			}
+			case 'push': {
+				return this.handlePushRequest(session, message)
+			}
+			case 'ping': {
+				if (session.state === RoomSessionState.Connected) {
+					session.lastInteractionTime = Date.now()
+				}
+				return this.sendMessage(session.sessionId, { type: 'pong' })
+			}
+			default: {
+				exhaustiveSwitchError(message)
+			}
+		}
+	}
+
 	private handlePushRequest(
 		session: RoomSession<R, SessionMeta> | null,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'push' }>
@@ -1149,7 +1144,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 
 			// If there are merged changes, broadcast them to all other clients
 			if (docChanges.diff || presenceChanges.diff) {
-				this.broadcastPatch({
+				this.b broadcastPatch({
 					sourceSessionId: session?.sessionId,
 					diff: {
 						...docChanges.diff,
@@ -1265,16 +1260,4 @@ class StoreUpdateContext<R extends UnknownRecord> implements RoomStoreMethods<R>
 	toDiff(): NetworkDiff<any> {
 		const diff: NetworkDiff<R> = {}
 		for (const [id, record] of Object.entries(this.updates.puts)) {
-			diff[id] = [RecordOpType.Put, record as R]
-		}
-		for (const id of this.updates.deletes) {
-			diff[id] = [RecordOpType.Remove]
-		}
-		return diff
-	}
-
-	private _isClosed = false
-	close() {
-		this._isClosed = true
-	}
-}
\ No newline at end of file
+			diff[id] = [RecordOpType.P
\ No newline at end of file
