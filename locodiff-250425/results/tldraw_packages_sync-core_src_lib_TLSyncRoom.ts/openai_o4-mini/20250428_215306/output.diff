--- tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected)+++ tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual)@@ -30,8 +30,6 @@ 	SESSION_REMOVAL_WAIT_TIME,
 	SESSION_START_WAIT_TIME,
 } from './RoomSession'
-import { TLSyncLog } from './TLSocketRoom'
-import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from './TLSyncClient'
 import {
 	NetworkDiff,
 	ObjectDiff,
@@ -49,22 +47,8 @@ 	TLSocketServerSentEvent,
 	getTlsyncProtocolVersion,
 } from './protocol'
-
-/** @internal */
-export interface TLRoomSocket<R extends UnknownRecord> {
-	isOpen: boolean
-	sendMessage(msg: TLSocketServerSentEvent<R>): void
-	close(code?: number, reason?: string): void
-}
-
-// the max number of tombstones to keep in the store
-export const MAX_TOMBSTONES = 3000
-// the number of tombstones to delete when the max is reached
-export const TOMBSTONE_PRUNE_BUFFER_SIZE = 300
-// the minimum time between data-related messages to the clients
-export const DATA_MESSAGE_DEBOUNCE_INTERVAL = 1000 / 60
-
-const timeSince = (time: number) => Date.now() - time
+import { TLSyncLog } from './TLSocketRoom'
+import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from './TLSyncClient'
 
 /** @internal */
 export class DocumentState<R extends UnknownRecord> {
@@ -142,18 +126,19 @@ 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
 	// eslint-disable-next-line local/prefer-class-methods
-	pruneSessions = () => {
+	pruneSessions() {
 		for (const client of this.sessions.values()) {
 			switch (client.state) {
 				case RoomSessionState.Connected: {
-					const hasTimedOut = timeSince(client.lastInteractionTime) > SESSION_IDLE_TIMEOUT
+					const hasTimedOut = Date.now() - client.lastInteractionTime > SESSION_IDLE_TIMEOUT
 					if (hasTimedOut || !client.socket.isOpen) {
 						this.cancelSession(client.sessionId)
 					}
 					break
 				}
 				case RoomSessionState.AwaitingConnectMessage: {
-					const hasTimedOut = timeSince(client.sessionStartTime) > SESSION_START_WAIT_TIME
+					const hasTimedOut =
+						Date.now() - client.sessionStartTime > SESSION_START_WAIT_TIME
 					if (hasTimedOut || !client.socket.isOpen) {
 						// remove immediately
 						this.removeSession(client.sessionId)
@@ -161,7 +146,8 @@ 					break
 				}
 				case RoomSessionState.AwaitingRemoval: {
-					const hasTimedOut = timeSince(client.cancellationTime) > SESSION_REMOVAL_WAIT_TIME
+					const hasTimedOut =
+						Date.now() - client.cancellationTime > SESSION_REMOVAL_WAIT_TIME
 					if (hasTimedOut) {
 						this.removeSession(client.sessionId)
 					}
@@ -174,7 +160,7 @@ 		}
 	}
 
-	private disposables: Array<() => void> = [interval(this.pruneSessions, 2000)]
+	private disposables: Array<() => void> = [interval(() => this.pruneSessions(), 2000)]
 
 	private _isClosed = false
 
@@ -211,10 +197,8 @@ 	clock = 1
 	documentClock = 1
 	tombstoneHistoryStartsAtClock = this.clock
-	// map from record id to clock upon deletion
 
 	readonly serializedSchema: SerializedSchema
-
 	readonly documentTypes: Set<string>
 	readonly presenceType: RecordType<R, any> | null
 	private log?: TLSyncLog
@@ -234,11 +218,10 @@ 
 		assert(
 			isNativeStructuredClone,
-			'TLSyncRoom is supposed to run either on Cloudflare Workers' +
-				'or on a 18+ version of Node.js, which both support the native structuredClone API'
+			'TLSyncRoom is supposed to run either on Cloudflare Workers or on Node.js â‰¥18, which both support native structuredClone'
 		)
 
-		// do a json serialization cycle to make sure the schema has no 'undefined' values
+		// do a JSON serialization cycle to make sure the schema has no undefined values
 		this.serializedSchema = JSON.parse(JSON.stringify(this.schema.serialize()))
 
 		this.documentTypes = new Set(
@@ -248,7 +231,9 @@ 		)
 
 		const presenceTypes = new Set(
-			Object.values<RecordType<R, any>>(this.schema.types).filter((t) => t.scope === 'presence')
+			Object.values<RecordType<R, any>>(this.schema.types).filter(
+				(t) => t.scope === 'presence'
+			)
 		)
 
 		if (presenceTypes.size > 1) {
@@ -256,7 +241,6 @@ 				`TLSyncRoom: exactly zero or one presence type is expected, but found ${presenceTypes.size}`
 			)
 		}
-
 		this.presenceType = presenceTypes.values().next()?.value ?? null
 
 		if (!snapshot) {
@@ -268,7 +252,10 @@ 						lastChangedClock: 0,
 					},
 					{
-						state: PageRecordType.create({ name: 'Page 1', index: 'a1' as IndexKey }),
+						state: PageRecordType.create({
+							name: 'Page 1',
+							index: 'a1' as IndexKey,
+						}),
 						lastChangedClock: 0,
 					},
 				],
@@ -285,12 +272,15 @@ 		}
 
 		const tombstones = { ...snapshot.tombstones }
-		const filteredDocuments = []
+		const filteredDocuments: Array<{
+			state: UnknownRecord
+			lastChangedClock: number
+		}> = []
 		for (const doc of snapshot.documents) {
 			if (this.documentTypes.has(doc.state.typeName)) {
 				filteredDocuments.push(doc)
 			} else {
-				ensureClockDidIncrement('doc type was not doc type')
+				ensureClockDidIncrement('doc type was not document type')
 				tombstones[doc.state.id] = this.clock
 			}
 		}
@@ -315,14 +305,12 @@ 		})
 
 		if (migrationResult.type === 'error') {
-			// TODO: Fault tolerance
 			throw new Error('Failed to migrate: ' + migrationResult.reason)
 		}
 
 		for (const [id, r] of objectMapEntries(migrationResult.value)) {
 			const existing = documents[id]
 			if (!existing) {
-				// record was added during migration
 				ensureClockDidIncrement('record was added during migration')
 				documents[id] = DocumentState.createWithoutValidating(
 					r,
@@ -330,7 +318,6 @@ 					assertExists(getOwnProperty(this.schema.types, r.typeName)) as any
 				)
 			} else if (!isEqual(existing.state, r)) {
-				// record was maybe updated during migration
 				ensureClockDidIncrement('record was maybe updated during migration')
 				existing.replaceState(r, this.clock)
 			}
@@ -338,7 +325,6 @@ 
 		for (const id of objectMapKeys(documents)) {
 			if (!migrationResult.value[id as keyof typeof migrationResult.value]) {
-				// record was removed during migration
 				ensureClockDidIncrement('record was removed during migration')
 				tombstones[id] = this.clock
 				delete documents[id]
@@ -346,7 +332,6 @@ 		}
 
 		this.state.set({ documents, tombstones })
-
 		this.pruneTombstones()
 		this.documentClock = this.clock
 		if (didIncrementClock) {
@@ -355,16 +340,15 @@ 	}
 
 	// eslint-disable-next-line local/prefer-class-methods
-	private pruneTombstones = () => {
-		// avoid blocking any pending responses
+	private pruneTombstones() {
 		this.state.update(({ tombstones, documents }) => {
-			const entries = Object.entries(this.state.get().tombstones)
+			const entries = Object.entries(tombstones)
 			if (entries.length > MAX_TOMBSTONES) {
-				// sort entries in ascending order by clock
 				entries.sort((a, b) => a[1] - b[1])
-				// trim off the first bunch
 				const excessQuantity = entries.length - MAX_TOMBSTONES
-				tombstones = Object.fromEntries(entries.slice(excessQuantity + TOMBSTONE_PRUNE_BUFFER_SIZE))
+				tombstones = Object.fromEntries(
+					entries.slice(excessQuantity + TOMBSTONE_PRUNE_BUFFER_SIZE)
+				)
 			}
 			return {
 				documents,
@@ -439,18 +423,13 @@ 		}
 		if (session.socket.isOpen) {
 			if (message.type !== 'patch' && message.type !== 'push_result') {
-				// this is not a data message
 				if (message.type !== 'pong') {
-					// non-data messages like "connect" might still need to be ordered correctly with
-					// respect to data messages, so it's better to flush just in case
 					this._flushDataMessages(sessionId)
 				}
 				session.socket.sendMessage(message)
 			} else {
 				if (session.debounceTimer === null) {
-					// this is the first message since the last flush, don't delay it
 					session.socket.sendMessage({ type: 'data', data: [message] })
-
 					session.debounceTimer = setTimeout(
 						() => this._flushDataMessages(sessionId),
 						DATA_MESSAGE_DEBOUNCE_INTERVAL
@@ -466,15 +445,12 @@ 
 	// needs to accept sessionId and not a session because the session might be dead by the time
 	// the timer fires
-	_flushDataMessages(sessionId: string) {
+	private _flushDataMessages(sessionId: string) {
 		const session = this.sessions.get(sessionId)
-
 		if (!session || session.state !== RoomSessionState.Connected) {
 			return
 		}
-
 		session.debounceTimer = null
-
 		if (session.outstandingDataMessages.length > 0) {
 			session.socket.sendMessage({ type: 'data', data: session.outstandingDataMessages })
 			session.outstandingDataMessages.length = 0
@@ -490,7 +466,6 @@ 		}
 
 		this.sessions.delete(sessionId)
-
 		const presence = this.getDocument(session.presenceId ?? '')
 
 		try {
@@ -509,7 +484,6 @@ 				delete documents[session.presenceId!]
 				return { documents, tombstones }
 			})
-
 			this.broadcastPatch({
 				diff: { [session.presenceId!]: [RecordOpType.Remove] },
 				sourceSessionId: sessionId,
@@ -520,6 +494,12 @@ 		if (this.sessions.size === 0) {
 			this.events.emit('room_became_empty')
 		}
+
+		try {
+			session.socket.close()
+		} catch {
+			// noop, calling .close() multiple times is fine
+		}
 	}
 
 	private cancelSession(sessionId: string) {
@@ -527,12 +507,10 @@ 		if (!session) {
 			return
 		}
-
 		if (session.state === RoomSessionState.AwaitingRemoval) {
 			this.log?.warn?.('Tried to cancel session that is already awaiting removal')
 			return
 		}
-
 		this.sessions.set(sessionId, {
 			state: RoomSessionState.AwaitingRemoval,
 			sessionId,
@@ -543,18 +521,13 @@ 			isReadonly: session.isReadonly,
 			requiresLegacyRejection: session.requiresLegacyRejection,
 		})
-
-		try {
-			session.socket.close()
-		} catch {
-			// noop, calling .close() multiple times is fine
-		}
 	}
 
 	/**
 	 * Broadcast a message to all connected clients except the one with the sessionId provided.
 	 *
 	 * @param message - The message to broadcast.
+	 * @param sourceSessionId - The session to exclude.
 	 */
 	broadcastPatch(message: { diff: NetworkDiff<R>; sourceSessionId?: string }) {
 		const { diff, sourceSessionId } = message
@@ -567,9 +540,7 @@ 			}
 
 			const res = this.migrateDiffForSession(session.serializedSchema, diff)
-
 			if (!res.ok) {
-				// disconnect client and send incompatibility error
 				this.rejectSession(
 					session.sessionId,
 					res.error === MigrationFailureReason.TargetVersionTooNew
@@ -578,7 +549,6 @@ 				)
 				return
 			}
-
 			this.sendMessage(session.sessionId, {
 				type: 'patch',
 				diff: res.value,
@@ -593,6 +563,10 @@ 	 * down into the snapshots.
 	 *
 	 * @internal
+	 * @param sessionId - The session of the client that connected to the room.
+	 * @param socket - Their socket.
+	 * @param meta - Any metadata associated with the session.
+	 * @param isReadonly - Whether the session is readonly.
 	 */
 	handleNewSession(opts: {
 		sessionId: string
@@ -610,7 +584,6 @@ 			sessionStartTime: Date.now(),
 			meta,
 			isReadonly: isReadonly ?? false,
-			// this gets set later during handleConnectMessage
 			requiresLegacyRejection: false,
 		})
 		return this
@@ -627,43 +600,33 @@ 		serializedSchema: SerializedSchema,
 		diff: NetworkDiff<R>
 	): Result<NetworkDiff<R>, MigrationFailureReason> {
-		// TODO: optimize this by recalculating patches using the previous versions of records
-
-		// when the client connects we check whether the schema is identical and make sure
-		// to use the same object reference so that === works on this line
 		if (serializedSchema === this.serializedSchema) {
 			return Result.ok(diff)
 		}
-
 		const result: NetworkDiff<R> = {}
 		for (const [id, op] of Object.entries(diff)) {
 			if (op[0] === RecordOpType.Remove) {
 				result[id] = op
 				continue
 			}
-
 			const migrationResult = this.schema.migratePersistedRecord(
 				this.getDocument(id).state,
 				serializedSchema,
 				'down'
 			)
-
 			if (migrationResult.type === 'error') {
 				return Result.err(migrationResult.reason)
 			}
-
 			result[id] = [RecordOpType.Put, migrationResult.value]
 		}
-
 		return Result.ok(result)
 	}
 
 	/**
-	 * When the server receives a message from the clients Currently, supports connect and patches.
-	 * Invalid messages types throws an error. Currently, doesn't validate data.
+	 * When the server receives a message from the clients. Supports connect, push, and ping.
 	 *
-	 * @param sessionId - The session that sent the message
-	 * @param message - The message that was sent
+	 * @param sessionId - The session that sent the message.
+	 * @param message - The message that was sent.
 	 */
 	async handleMessage(sessionId: string, message: TLSocketClientSentEvent<R>) {
 		const session = this.sessions.get(sessionId)
@@ -690,8 +653,7 @@ 		}
 	}
 
-	/** If the client is out of date, or we are out of date, we need to let them know */
-	rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
+	private rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
 		const session = this.sessions.get(sessionId)
 		if (!session) return
 		if (!fatalReason) {
@@ -701,23 +663,18 @@ 		if (session.requiresLegacyRejection) {
 			try {
 				if (session.socket.isOpen) {
-					// eslint-disable-next-line @typescript-eslint/no-deprecated
 					let legacyReason: TLIncompatibilityReason
 					switch (fatalReason) {
 						case TLSyncErrorCloseEventReason.CLIENT_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.ClientTooOld
 							break
 						case TLSyncErrorCloseEventReason.SERVER_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.ServerTooOld
 							break
 						case TLSyncErrorCloseEventReason.INVALID_RECORD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.InvalidRecord
 							break
 						default:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
 							legacyReason = TLIncompatibilityReason.InvalidOperation
 							break
 					}
@@ -740,34 +697,29 @@ 		session: RoomSession<R, SessionMeta>,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'connect' }>
 	) {
-		// if the protocol versions don't match, disconnect the client
-		// we will eventually want to try to make our protocol backwards compatible to some degree
-		// and have a MIN_PROTOCOL_VERSION constant that the TLSyncRoom implements support for
 		let theirProtocolVersion = message.protocolVersion
-		// 5 is the same as 6
 		if (theirProtocolVersion === 5) {
 			theirProtocolVersion = 6
 		}
-		// 6 is almost the same as 7
 		session.requiresLegacyRejection = theirProtocolVersion === 6
 		if (theirProtocolVersion === 6) {
 			theirProtocolVersion++
 		}
-		if (theirProtocolVersion == null || theirProtocolVersion < getTlsyncProtocolVersion()) {
+		if (
+			theirProtocolVersion == null ||
+			theirProtocolVersion < getTlsyncProtocolVersion()
+		) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
 		} else if (theirProtocolVersion > getTlsyncProtocolVersion()) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.SERVER_TOO_OLD)
 			return
 		}
-		// If the client's store is at a different version to ours, it could cause corruption.
-		// We should disconnect the client and ask them to refresh.
 		if (message.schema == null) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
 		}
 		const migrations = this.schema.getMigrationsSince(message.schema)
-		// if the client's store is at a different version to ours, we can't support them
 		if (!migrations.ok || migrations.value.some((m) => m.scope === 'store' || !m.down)) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
@@ -796,11 +748,7 @@ 
 		transaction((rollback) => {
 			if (
-				// if the client requests changes since a time before we have tombstone history, send them the full state
 				message.lastServerClock < this.tombstoneHistoryStartsAtClock ||
-				// similarly, if they ask for a time we haven't reached yet, send them the full state
-				// this will only happen if the DB is reset (or there is no db) and the server restarts
-				// or if the server exits/crashes with unpersisted changes
 				message.lastServerClock > this.clock
 			) {
 				const diff: NetworkDiff<R> = {}
@@ -831,7 +779,6 @@ 					isReadonly: session.isReadonly,
 				})
 			} else {
-				// calculate the changes since the time the client last saw
 				const diff: NetworkDiff<R> = {}
 				const updatedDocs = Object.values(this.state.get().documents).filter(
 					(doc) => doc.lastChangedClock > message.lastServerClock
@@ -841,7 +788,7 @@ 							(doc) =>
 								this.presenceType!.typeName === doc.state.typeName &&
 								doc.state.id !== session.presenceId
-						)
+					  )
 					: []
 				const deletedDocsIds = Object.entries(this.state.get().tombstones)
 					.filter(([_id, deletedAtClock]) => deletedAtClock > message.lastServerClock)
@@ -853,7 +800,6 @@ 				for (const doc of presenceDocs) {
 					diff[doc.state.id] = [RecordOpType.Put, doc.state]
 				}
-
 				for (const docId of deletedDocsIds) {
 					diff[docId] = [RecordOpType.Remove]
 				}
@@ -868,7 +814,6 @@ 					)
 					return
 				}
-
 				connect({
 					type: 'connect',
 					connectRequestId: message.connectRequestId,
@@ -887,23 +832,18 @@ 		session: RoomSession<R, SessionMeta> | null,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'push' }>
 	) {
-		// We must be connected to handle push requests
 		if (session && session.state !== RoomSessionState.Connected) {
 			return
 		}
 
-		// update the last interaction time
 		if (session) {
 			session.lastInteractionTime = Date.now()
 		}
 
-		// increment the clock for this push
 		this.clock++
-
 		const initialDocumentClock = this.documentClock
+
 		transaction((rollback) => {
-			// collect actual ops that resulted from the push
-			// these will be broadcast to other users
 			interface ActualChanges {
 				diff: NetworkDiff<R> | null
 			}
@@ -937,19 +877,15 @@ 					: { type: 'success' as const, value: _state }
 				if (res.type === 'error') {
 					return fail(
-						res.reason === MigrationFailureReason.TargetVersionTooOld // target version is our version
+						res.reason === MigrationFailureReason.TargetVersionTooOld
 							? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
 							: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
 					)
 				}
 				const { value: state } = res
 
-				// Get the existing document, if any
 				const doc = this.getDocument(id)
-
 				if (doc) {
-					// If there's an existing document, replace it with the new state
-					// but propagate a diff rather than the entire value
 					const diff = doc.replaceState(state, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -958,15 +894,12 @@ 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
 					}
 				} else {
-					// Otherwise, if we don't already have a document with this id
-					// create the document and propagate the put op
 					const result = this.addDocument(id, state, this.clock)
 					if (!result.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
 					}
 					propagateOp(changes, id, [RecordOpType.Put, state])
 				}
-
 				return Result.ok(undefined)
 			}
 
@@ -975,11 +908,9 @@ 				id: string,
 				patch: ObjectDiff
 			): Result<void, void> => {
-				// if it was already deleted, there's no need to apply the patch
 				const doc = this.getDocument(id)
 				if (!doc) return Result.ok(undefined)
-				// If the client's version of the record is older than ours,
-				// we apply the patch to the downgraded version of the record
+
 				const downgraded = session
 					? this.schema.migratePersistedRecord(doc.state, session.serializedSchema, 'down')
 					: { type: 'success' as const, value: doc.state }
@@ -988,7 +919,6 @@ 				}
 
 				if (downgraded.value === doc.state) {
-					// If the versions are compatible, apply the patch and propagate the patch op
 					const diff = doc.mergeDiff(patch, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -997,19 +927,13 @@ 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
 					}
 				} else {
-					// need to apply the patch to the downgraded version and then upgrade it
-
-					// apply the patch to the downgraded version
 					const patched = applyObjectDiff(downgraded.value, patch)
-					// then upgrade the patched version and use that as the new state
 					const upgraded = session
 						? this.schema.migratePersistedRecord(patched, session.serializedSchema, 'up')
 						: { type: 'success' as const, value: patched }
-					// If the client's version is too old, we'll hit an error
 					if (upgraded.type === 'error') {
 						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 					}
-					// replace the state with the upgraded version and propagate the patch op
 					const diff = doc.replaceState(upgraded.value, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -1025,65 +949,54 @@ 			const { clientClock } = message
 
 			if (this.presenceType && session?.presenceId && 'presence' in message && message.presence) {
-				if (!session) throw new Error('session is required for presence pushes')
-				// The push request was for the presence scope.
 				const id = session.presenceId
 				const [type, val] = message.presence
 				const { typeName } = this.presenceType
 				switch (type) {
 					case RecordOpType.Put: {
-						// Try to put the document. If it fails, stop here.
-						const res = addDocument(presenceChanges, id, { ...val, id, typeName })
-						// if res.ok is false here then we already called `fail` and we should stop immediately
+						const res = addDocument(presenceChanges, id, {
+							...val,
+							id,
+							typeName,
+						})
 						if (!res.ok) return
 						break
 					}
 					case RecordOpType.Patch: {
-						// Try to patch the document. If it fails, stop here.
 						const res = patchDocument(presenceChanges, id, {
 							...val,
 							id: [ValueOpType.Put, id],
 							typeName: [ValueOpType.Put, typeName],
 						})
-						// if res.ok is false here then we already called `fail` and we should stop immediately
 						if (!res.ok) return
 						break
 					}
 				}
 			}
+
 			if (message.diff && !session?.isReadonly) {
-				// The push request was for the document scope.
 				for (const [id, op] of Object.entries(message.diff!)) {
 					switch (op[0]) {
 						case RecordOpType.Put: {
-							// Try to add the document.
-							// If we're putting a record with a type that we don't recognize, fail
 							if (!this.documentTypes.has(op[1].typeName)) {
 								return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
 							}
 							const res = addDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
 							if (!res.ok) return
 							break
 						}
 						case RecordOpType.Patch: {
-							// Try to patch the document. If it fails, stop here.
 							const res = patchDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
 							if (!res.ok) return
 							break
 						}
 						case RecordOpType.Remove: {
 							const doc = this.getDocument(id)
 							if (!doc) {
-								// If the doc was already deleted, don't do anything, no need to propagate a delete op
 								continue
 							}
-
-							// Delete the document and propagate the delete op
 							this.removeDocument(id, this.clock)
-							// Schedule a pruneTombstones call to happen on the next call stack
-							setTimeout(this.pruneTombstones, 0)
+							setTimeout(() => this.pruneTombstones(), 0)
 							propagateOp(docChanges, id, op)
 							break
 						}
@@ -1091,16 +1004,10 @@ 				}
 			}
 
-			// Let the client know what action to take based on the results of the push
 			if (
-				// if there was only a presence push, the client doesn't need to do anything aside from
-				// shift the push request.
 				!message.diff ||
 				isEqual(docChanges.diff, message.diff)
 			) {
-				// COMMIT
-				// Applying the client's changes had the exact same effect on the server as
-				// they had on the client, so the client should keep the diff
 				if (session) {
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
@@ -1110,8 +1017,6 @@ 					})
 				}
 			} else if (!docChanges.diff) {
-				// DISCARD
-				// Applying the client's changes had no effect, so the client should drop the diff
 				if (session) {
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
@@ -1121,10 +1026,6 @@ 					})
 				}
 			} else {
-				// REBASE
-				// Applying the client's changes had a different non-empty effect on the server,
-				// so the client should rebase with our gold-standard / authoritative diff.
-				// First we need to migrate the diff to the client's version
 				if (session) {
 					const migrateResult = this.migrateDiffForSession(
 						session.serializedSchema,
@@ -1137,7 +1038,6 @@ 								: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
 						)
 					}
-					// If the migration worked, send the rebased diff to the client
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
 						serverClock: this.clock,
@@ -1147,7 +1047,6 @@ 				}
 			}
 
-			// If there are merged changes, broadcast them to all other clients
 			if (docChanges.diff || presenceChanges.diff) {
 				this.broadcastPatch({
 					sourceSessionId: session?.sessionId,
@@ -1161,11 +1060,8 @@ 			if (docChanges.diff) {
 				this.documentClock = this.clock
 			}
-
-			return
 		})
 
-		// if it threw the changes will have been rolled back and the document clock will not have been incremented
 		if (this.documentClock !== initialDocumentClock) {
 			this.onDataChange?.()
 		}
@@ -1218,6 +1114,7 @@ }
 
 class StoreUpdateContext<R extends UnknownRecord> implements RoomStoreMethods<R> {
+	private _isClosed = false
 	constructor(private readonly snapshot: Record<string, UnknownRecord>) {}
 	private readonly updates = {
 		puts: {} as Record<string, UnknownRecord>,
@@ -1250,7 +1147,6 @@ 		}
 		return structuredClone(this.snapshot[id] ?? null) as R
 	}
-
 	getAll(): R[] {
 		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
 		const result = Object.values(this.updates.puts)
@@ -1261,8 +1157,7 @@ 		}
 		return structuredClone(result) as R[]
 	}
-
-	toDiff(): NetworkDiff<any> {
+	toDiff(): NetworkDiff<R> {
 		const diff: NetworkDiff<R> = {}
 		for (const [id, record] of Object.entries(this.updates.puts)) {
 			diff[id] = [RecordOpType.Put, record as R]
@@ -1272,9 +1167,11 @@ 		}
 		return diff
 	}
-
-	private _isClosed = false
 	close() {
 		this._isClosed = true
 	}
-}+}
+
+export const MAX_TOMBSTONES = 3000
+export const TOMBSTONE_PRUNE_BUFFER_SIZE = 300
+export const DATA_MESSAGE_DEBOUNCE_INTERVAL = 1000 / 60