
index 66f39bdba..4c58f375d 100644
--- a/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected):tmp/tmpxwvavsco_expected.txt	
+++ b/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual):tmp/tmpmpu_blid_actual.txt	
@@ -50,13 +50,6 @@ import {
 	getTlsyncProtocolVersion,
 } from './protocol'
 
-/** @internal */
-export interface TLRoomSocket<R extends UnknownRecord> {
-	isOpen: boolean
-	sendMessage(msg: TLSocketServerSentEvent<R>): void
-	close(code?: number, reason?: string): void
-}
-
 // the max number of tombstones to keep in the store
 export const MAX_TOMBSTONES = 3000
 // the number of tombstones to delete when the max is reached
@@ -142,7 +135,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
 	// eslint-disable-next-line local/prefer-class-methods
-	pruneSessions = () => {
+	pruneSessions() {
 		for (const client of this.sessions.values()) {
 			switch (client.state) {
 				case RoomSessionState.Connected: {
@@ -741,7 +734,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'connect' }>
 	) {
 		// if the protocol versions don't match, disconnect the client
-		// we will eventually want to try to make our protocol backwards compatible to some degree
+		// we will eventually want to make our protocol backwards compatible to some degree
 		// and have a MIN_PROTOCOL_VERSION constant that the TLSyncRoom implements support for
 		let theirProtocolVersion = message.protocolVersion
 		// 5 is the same as 6
