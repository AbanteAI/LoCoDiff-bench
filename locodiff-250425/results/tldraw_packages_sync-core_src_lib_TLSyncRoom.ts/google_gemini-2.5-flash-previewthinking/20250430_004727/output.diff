--- tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected)+++ tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual)@@ -418,6 +418,7 @@ 		}
 	}
 
+
 	/**
 	 * Send a message to a particular client. Debounces data events
 	 *
@@ -522,6 +523,7 @@ 		}
 	}
 
+	/** @internal */
 	private cancelSession(sessionId: string) {
 		const session = this.sessions.get(sessionId)
 		if (!session) {
@@ -593,6 +595,10 @@ 	 * down into the snapshots.
 	 *
 	 * @internal
+	 * @param opts.sessionId - The session id of the client that connected to the room.
+	 * @param opts.socket - Their socket.
+	 * @param opts.meta - Any metadata associated with the session.
+	 * @param opts.isReadonly - Whether this session should be in readonly mode.
 	 */
 	handleNewSession(opts: {
 		sessionId: string
@@ -662,6 +668,7 @@ 	 * When the server receives a message from the clients Currently, supports connect and patches.
 	 * Invalid messages types throws an error. Currently, doesn't validate data.
 	 *
+	 * @internal
 	 * @param sessionId - The session that sent the message
 	 * @param message - The message that was sent
 	 */
@@ -883,6 +890,7 @@ 		})
 	}
 
+
 	private handlePushRequest(
 		session: RoomSession<R, SessionMeta> | null,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'push' }>
@@ -923,7 +931,7 @@ 				if (session) {
 					this.rejectSession(session.sessionId, reason)
 				} else {
-					throw new Error('failed to apply changes: ' + reason, underlyingError)
+					throw new Error('failed to apply changes: ' + reason, { cause: underlyingError })
 				}
 				if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'test') {
 					this.log?.error?.('failed to apply push', reason, message, underlyingError)
@@ -952,7 +960,7 @@ 					// but propagate a diff rather than the entire value
 					const diff = doc.replaceState(state, this.clock)
 					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
+						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD, diff.error)
 					}
 					if (diff.value) {
 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
@@ -962,7 +970,7 @@ 					// create the document and propagate the put op
 					const result = this.addDocument(id, state, this.clock)
 					if (!result.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
+						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD, result.error)
 					}
 					propagateOp(changes, id, [RecordOpType.Put, state])
 				}
@@ -984,14 +992,14 @@ 					? this.schema.migratePersistedRecord(doc.state, session.serializedSchema, 'down')
 					: { type: 'success' as const, value: doc.state }
 				if (downgraded.type === 'error') {
-					return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
+					return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD, downgraded.error)
 				}
 
 				if (downgraded.value === doc.state) {
 					// If the versions are compatible, apply the patch and propagate the patch op
 					const diff = doc.mergeDiff(patch, this.clock)
 					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
+						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD, diff.error)
 					}
 					if (diff.value) {
 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
@@ -1007,17 +1015,18 @@ 						: { type: 'success' as const, value: patched }
 					// If the client's version is too old, we'll hit an error
 					if (upgraded.type === 'error') {
-						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
+						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD, upgraded.error)
 					}
 					// replace the state with the upgraded version and propagate the patch op
 					const diff = doc.replaceState(upgraded.value, this.clock)
 					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
+						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD, diff.error)
 					}
 					if (diff.value) {
 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
 					}
 				}
+
 
 				return Result.ok(undefined)
 			}
@@ -1056,7 +1065,6 @@ 				for (const [id, op] of Object.entries(message.diff!)) {
 					switch (op[0]) {
 						case RecordOpType.Put: {
-							// Try to add the document.
 							// If we're putting a record with a type that we don't recognize, fail
 							if (!this.documentTypes.has(op[1].typeName)) {
 								return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -1092,40 +1100,36 @@ 			}
 
 			// Let the client know what action to take based on the results of the push
-			if (
-				// if there was only a presence push, the client doesn't need to do anything aside from
-				// shift the push request.
-				!message.diff ||
-				isEqual(docChanges.diff, message.diff)
-			) {
-				// COMMIT
-				// Applying the client's changes had the exact same effect on the server as
-				// they had on the client, so the client should keep the diff
-				if (session) {
+			if (session) {
+				if (
+					// if there was only a presence push, the client doesn't need to do anything aside from
+					// shift the push request.
+					!message.diff ||
+					isEqual(docChanges.diff, message.diff)
+				) {
+					// COMMIT
+					// Applying the client's changes had the exact same effect on the server as
+					// they had on the client, so the client should keep the diff
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
 						serverClock: this.clock,
 						clientClock,
 						action: 'commit',
 					})
-				}
-			} else if (!docChanges.diff) {
-				// DISCARD
-				// Applying the client's changes had no effect, so the client should drop the diff
-				if (session) {
+				} else if (!docChanges.diff) {
+					// DISCARD
+					// Applying the client's changes had no effect, so the client should drop the diff
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
 						serverClock: this.clock,
 						clientClock,
 						action: 'discard',
 					})
-				}
-			} else {
-				// REBASE
-				// Applying the client's changes had a different non-empty effect on the server,
-				// so the client should rebase with our gold-standard / authoritative diff.
-				// First we need to migrate the diff to the client's version
-				if (session) {
+				} else {
+					// REBASE
+					// Applying the client's changes had a different non-empty effect on the server,
+					// so the client should rebase with our gold-standard / authoritative diff.
+					// First we need to migrate the diff to the client's version
 					const migrateResult = this.migrateDiffForSession(
 						session.serializedSchema,
 						docChanges.diff
@@ -1174,6 +1178,7 @@ 	/**
 	 * Handle the event when a client disconnects.
 	 *
+	 * @internal
 	 * @param sessionId - The session that disconnected.
 	 */
 	handleClose(sessionId: string) {
