
index 66f39bdba..84954de2c 100644
--- a/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected):tmp/tmpdmthbr7p_expected.txt	
+++ b/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual):tmp/tmpqayvywle_actual.txt	
@@ -44,6 +44,7 @@ import {
 import { interval } from './interval'
 import {
 	TLIncompatibilityReason,
+	TLConnectRequest,
 	TLSocketClientSentEvent,
 	TLSocketServerSentDataEvent,
 	TLSocketServerSentEvent,
@@ -175,7 +176,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	}
 
 	private disposables: Array<() => void> = [interval(this.pruneSessions, 2000)]
-
 	private _isClosed = false
 
 	close() {
@@ -208,8 +208,11 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	// this clock should start higher than the client, to make sure that clients who sync with their
 	// initial lastServerClock value get the full state
 	// in this case clients will start with 0, and the server will start with 1
+	// eslint-disable-next-line local/prefer-class-methods
 	clock = 1
+	// eslint-disable-next-line local/prefer-class-methods
 	documentClock = 1
+	// eslint-disable-next-line local/prefer-class-methods
 	tombstoneHistoryStartsAtClock = this.clock
 	// map from record id to clock upon deletion
 
@@ -616,48 +619,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		return this
 	}
 
-	/**
-	 * When we send a diff to a client, if that client is on a lower version than us, we need to make
-	 * the diff compatible with their version. At the moment this means migrating each affected record
-	 * to the client's version and sending the whole record again. We can optimize this later by
-	 * keeping the previous versions of records around long enough to recalculate these diffs for
-	 * older client versions.
-	 */
-	private migrateDiffForSession(
-		serializedSchema: SerializedSchema,
-		diff: NetworkDiff<R>
-	): Result<NetworkDiff<R>, MigrationFailureReason> {
-		// TODO: optimize this by recalculating patches using the previous versions of records
-
-		// when the client connects we check whether the schema is identical and make sure
-		// to use the same object reference so that === works on this line
-		if (serializedSchema === this.serializedSchema) {
-			return Result.ok(diff)
-		}
-
-		const result: NetworkDiff<R> = {}
-		for (const [id, op] of Object.entries(diff)) {
-			if (op[0] === RecordOpType.Remove) {
-				result[id] = op
-				continue
-			}
-
-			const migrationResult = this.schema.migratePersistedRecord(
-				this.getDocument(id).state,
-				serializedSchema,
-				'down'
-			)
-
-			if (migrationResult.type === 'error') {
-				return Result.err(migrationResult.reason)
-			}
-
-			result[id] = [RecordOpType.Put, migrationResult.value]
-		}
-
-		return Result.ok(result)
-	}
-
 	/**
 	 * When the server receives a message from the clients Currently, supports connect and patches.
 	 * Invalid messages types throws an error. Currently, doesn't validate data.
@@ -671,6 +632,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			this.log?.warn?.('Received message from unknown session')
 			return
 		}
+
 		switch (message.type) {
 			case 'connect': {
 				return this.handleConnectRequest(session, message)
