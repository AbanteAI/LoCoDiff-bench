--- tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected)+++ tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual)@@ -43,6 +43,7 @@ } from './diff'
 import { interval } from './interval'
 import {
+	TLConnectRequest,
 	TLIncompatibilityReason,
 	TLSocketClientSentEvent,
 	TLSocketServerSentDataEvent,
@@ -141,8 +142,7 @@ 	// A table of connected clients
 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
-	// eslint-disable-next-line local/prefer-class-methods
-	pruneSessions = () => {
+	pruneSessions() {
 		for (const client of this.sessions.values()) {
 			switch (client.state) {
 				case RoomSessionState.Connected: {
@@ -195,7 +195,6 @@ 		session_removed(args: { sessionId: string; meta: SessionMeta }): void
 	}>()
 
-	// Values associated with each uid (must be serializable).
 	/** @internal */
 	state = atom<{
 		documents: Record<string, DocumentState<R>>
@@ -257,7 +256,7 @@ 			)
 		}
 
-		this.presenceType = presenceTypes.values().next()?.value ?? null
+		this.presenceType = presenceTypes.values().next().value ?? null
 
 		if (!snapshot) {
 			snapshot = {
@@ -308,7 +307,7 @@ 
 		const migrationResult = this.schema.migrateStoreSnapshot({
 			store: Object.fromEntries(
-				objectMapEntries(documents).map(([id, { state }]) => [id, state as R])
+				objectMapEntries(documents).map(([id, { state }]) => [id, state as R]
 			) as Record<IdOf<R>, R>,
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
 			schema: snapshot.schema ?? this.schema.serializeEarliestVersion(),
@@ -354,8 +353,7 @@ 		}
 	}
 
-	// eslint-disable-next-line local/prefer-class-methods
-	private pruneTombstones = () => {
+	private pruneTombstones() {
 		// avoid blocking any pending responses
 		this.state.update(({ tombstones, documents }) => {
 			const entries = Object.entries(this.state.get().tombstones)
@@ -418,12 +416,6 @@ 		}
 	}
 
-	/**
-	 * Send a message to a particular client. Debounces data events
-	 *
-	 * @param sessionId - The id of the session to send the message to.
-	 * @param message - The message to send.
-	 */
 	private sendMessage(
 		sessionId: string,
 		message: TLSocketServerSentEvent<R> | TLSocketServerSentDataEvent<R>
@@ -439,11 +431,9 @@ 		}
 		if (session.socket.isOpen) {
 			if (message.type !== 'patch' && message.type !== 'push_result') {
-				// this is not a data message
-				if (message.type !== 'pong') {
-					// non-data messages like "connect" might still need to be ordered correctly with
-					// respect to data messages, so it's better to flush just in case
-					this._flushDataMessages(sessionId)
+				// non-data messages like "connect" might still need to be ordered correctly with
+				// respect to data messages, so it's better to flush just in case
+				this._flushDataMessages(sessionId)
 				}
 				session.socket.sendMessage(message)
 			} else {
@@ -464,15 +454,11 @@ 		}
 	}
 
-	// needs to accept sessionId and not a session because the session might be dead by the time
-	// the timer fires
 	_flushDataMessages(sessionId: string) {
 		const session = this.sessions.get(sessionId)
-
 		if (!session || session.state !== RoomSessionState.Connected) {
 			return
 		}
-
 		session.debounceTimer = null
 
 		if (session.outstandingDataMessages.length > 0) {
@@ -481,7 +467,6 @@ 		}
 	}
 
-	/** @internal */
 	private removeSession(sessionId: string, fatalReason?: string) {
 		const session = this.sessions.get(sessionId)
 		if (!session) {
@@ -551,11 +536,6 @@ 		}
 	}
 
-	/**
-	 * Broadcast a message to all connected clients except the one with the sessionId provided.
-	 *
-	 * @param message - The message to broadcast.
-	 */
 	broadcastPatch(message: { diff: NetworkDiff<R>; sourceSessionId?: string }) {
 		const { diff, sourceSessionId } = message
 		this.sessions.forEach((session) => {
@@ -569,7 +549,6 @@ 			const res = this.migrateDiffForSession(session.serializedSchema, diff)
 
 			if (!res.ok) {
-				// disconnect client and send incompatibility error
 				this.rejectSession(
 					session.sessionId,
 					res.error === MigrationFailureReason.TargetVersionTooNew
@@ -588,12 +567,6 @@ 		return this
 	}
 
-	/**
-	 * When a client connects to the room, add them to the list of clients and then merge the history
-	 * down into the snapshots.
-	 *
-	 * @internal
-	 */
 	handleNewSession(opts: {
 		sessionId: string
 		socket: TLRoomSocket<R>
@@ -610,27 +583,15 @@ 			sessionStartTime: Date.now(),
 			meta,
 			isReadonly: isReadonly ?? false,
-			// this gets set later during handleConnectMessage
 			requiresLegacyRejection: false,
 		})
 		return this
 	}
 
-	/**
-	 * When we send a diff to a client, if that client is on a lower version than us, we need to make
-	 * the diff compatible with their version. At the moment this means migrating each affected record
-	 * to the client's version and sending the whole record again. We can optimize this later by
-	 * keeping the previous versions of records around long enough to recalculate these diffs for
-	 * older client versions.
-	 */
 	private migrateDiffForSession(
 		serializedSchema: SerializedSchema,
 		diff: NetworkDiff<R>
 	): Result<NetworkDiff<R>, MigrationFailureReason> {
-		// TODO: optimize this by recalculating patches using the previous versions of records
-
-		// when the client connects we check whether the schema is identical and make sure
-		// to use the same object reference so that === works on this line
 		if (serializedSchema === this.serializedSchema) {
 			return Result.ok(diff)
 		}
@@ -642,12 +603,14 @@ 				continue
 			}
 
+			const doc = this.getDocument(id)
+			if (!doc) continue
+
 			const migrationResult = this.schema.migratePersistedRecord(
-				this.getDocument(id).state,
+				doc.state,
 				serializedSchema,
 				'down'
 			)
-
 			if (migrationResult.type === 'error') {
 				return Result.err(migrationResult.reason)
 			}
@@ -658,13 +621,6 @@ 		return Result.ok(result)
 	}
 
-	/**
-	 * When the server receives a message from the clients Currently, supports connect and patches.
-	 * Invalid messages types throws an error. Currently, doesn't validate data.
-	 *
-	 * @param sessionId - The session that sent the message
-	 * @param message - The message that was sent
-	 */
 	async handleMessage(sessionId: string, message: TLSocketClientSentEvent<R>) {
 		const session = this.sessions.get(sessionId)
 		if (!session) {
@@ -690,7 +646,6 @@ 		}
 	}
 
-	/** If the client is out of date, or we are out of date, we need to let them know */
 	rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
 		const session = this.sessions.get(sessionId)
 		if (!session) return
@@ -701,26 +656,7 @@ 		if (session.requiresLegacyRejection) {
 			try {
 				if (session.socket.isOpen) {
-					// eslint-disable-next-line @typescript-eslint/no-deprecated
-					let legacyReason: TLIncompatibilityReason
-					switch (fatalReason) {
-						case TLSyncErrorCloseEventReason.CLIENT_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
-							legacyReason = TLIncompatibilityReason.ClientTooOld
-							break
-						case TLSyncErrorCloseEventReason.SERVER_TOO_OLD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
-							legacyReason = TLIncompatibilityReason.ServerTooOld
-							break
-						case TLSyncErrorCloseEventReason.INVALID_RECORD:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
-							legacyReason = TLIncompatibilityReason.InvalidRecord
-							break
-						default:
-							// eslint-disable-next-line @typescript-eslint/no-deprecated
-							legacyReason = TLIncompatibilityReason.InvalidOperation
-							break
-					}
+					const legacyReason = this.convertToLegacyReason(fatalReason)
 					session.socket.sendMessage({
 						type: 'incompatibility_error',
 						reason: legacyReason,
@@ -736,23 +672,29 @@ 		}
 	}
 
+	private convertToLegacyReason(fatalReason: string): TLIncompatibilityReason {
+		switch (fatalReason) {
+			case TLSyncErrorCloseEventReason.CLIENT_TOO_OLD:
+				return TLIncompatibilityReason.ClientTooOld
+			case TLSyncErrorCloseEventReason.SERVER_TOO_OLD:
+				return TLIncompatibilityReason.ServerTooOld
+			case TLSyncErrorCloseEventReason.INVALID_RECORD:
+				return TLIncompatibilityReason.InvalidRecord
+			default:
+				return TLIncompatibilityReason.InvalidOperation
+		}
+	}
+
 	private handleConnectRequest(
 		session: RoomSession<R, SessionMeta>,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'connect' }>
 	) {
-		// if the protocol versions don't match, disconnect the client
-		// we will eventually want to try to make our protocol backwards compatible to some degree
-		// and have a MIN_PROTOCOL_VERSION constant that the TLSyncRoom implements support for
 		let theirProtocolVersion = message.protocolVersion
-		// 5 is the same as 6
-		if (theirProtocolVersion === 5) {
-			theirProtocolVersion = 6
-		}
-		// 6 is almost the same as 7
+		if (theirProtocolVersion === 5) theirProtocolVersion = 6
+		if (theirProtocolVersion === 6) theirProtocolVersion = 7
+
 		session.requiresLegacyRejection = theirProtocolVersion === 6
-		if (theirProtocolVersion === 6) {
-			theirProtocolVersion++
-		}
+
 		if (theirProtocolVersion == null || theirProtocolVersion < getTlsyncProtocolVersion()) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
@@ -760,14 +702,13 @@ 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.SERVER_TOO_OLD)
 			return
 		}
-		// If the client's store is at a different version to ours, it could cause corruption.
-		// We should disconnect the client and ask them to refresh.
+
 		if (message.schema == null) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
 		}
+
 		const migrations = this.schema.getMigrationsSince(message.schema)
-		// if the client's store is at a different version to ours, we can't support them
 		if (!migrations.ok || migrations.value.some((m) => m.scope === 'store' || !m.down)) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
@@ -795,400 +736,232 @@ 		}
 
 		transaction((rollback) => {
-			if (
-				// if the client requests changes since a time before we have tombstone history, send them the full state
-				message.lastServerClock < this.tombstoneHistoryStartsAtClock ||
-				// similarly, if they ask for a time we haven't reached yet, send them the full state
-				// this will only happen if the DB is reset (or there is no db) and the server restarts
-				// or if the server exits/crashes with unpersisted changes
+			if (message.lastServerClock < this.tombstoneHistoryStartsAtClock ||
 				message.lastServerClock > this.clock
 			) {
-				const diff: NetworkDiff<R> = {}
-				for (const [id, doc] of Object.entries(this.state.get().documents)) {
-					if (id !== session.presenceId) {
-						diff[id] = [RecordOpType.Put, doc.state]
-					}
-				}
+				const diff = this.createFullStateDiff(session)
 				const migrated = this.migrateDiffForSession(sessionSchema, diff)
 				if (!migrated.ok) {
 					rollback()
-					this.rejectSession(
-						session.sessionId,
-						migrated.error === MigrationFailureReason.TargetVersionTooNew
-							? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-							: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
-					)
+					this.rejectSessionWithMigrationError(session, migrated.error)
 					return
 				}
-				connect({
-					type: 'connect',
-					connectRequestId: message.connectRequestId,
-					hydrationType: 'wipe_all',
-					protocolVersion: getTlsyncProtocolVersion(),
-					schema: this.schema.serialize(),
-					serverClock: this.clock,
-					diff: migrated.value,
-					isReadonly: session.isReadonly,
-				})
+				connect(this.createConnectMessage(message.connectRequestId, migrated.value, 'wipe_all'))
 			} else {
-				// calculate the changes since the time the client last saw
-				const diff: NetworkDiff<R> = {}
-				const updatedDocs = Object.values(this.state.get().documents).filter(
-					(doc) => doc.lastChangedClock > message.lastServerClock
-				)
-				const presenceDocs = this.presenceType
-					? Object.values(this.state.get().documents).filter(
-							(doc) =>
-								this.presenceType!.typeName === doc.state.typeName &&
-								doc.state.id !== session.presenceId
-						)
-					: []
-				const deletedDocsIds = Object.entries(this.state.get().tombstones)
-					.filter(([_id, deletedAtClock]) => deletedAtClock > message.lastServerClock)
-					.map(([id]) => id)
-
-				for (const doc of updatedDocs) {
-					diff[doc.state.id] = [RecordOpType.Put, doc.state]
-				}
-				for (const doc of presenceDocs) {
-					diff[doc.state.id] = [RecordOpType.Put, doc.state]
-				}
-
-				for (const docId of deletedDocsIds) {
-					diff[docId] = [RecordOpType.Remove]
-				}
+				const diff = this.createIncrementalDiff(session, message.lastServerClock)
 				const migrated = this.migrateDiffForSession(sessionSchema, diff)
 				if (!migrated.ok) {
 					rollback()
-					this.rejectSession(
-						session.sessionId,
-						migrated.error === MigrationFailureReason.TargetVersionTooNew
-							? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-							: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
-					)
+					this.rejectSessionWithMigrationError(session, migrated.error)
 					return
 				}
-
-				connect({
-					type: 'connect',
-					connectRequestId: message.connectRequestId,
-					hydrationType: 'wipe_presence',
-					schema: this.schema.serialize(),
-					protocolVersion: getTlsyncProtocolVersion(),
-					serverClock: this.clock,
-					diff: migrated.value,
-					isReadonly: session.isReadonly,
-				})
-			}
-		})
+				connect(this.createConnectMessage(message.connectRequestId, migrated.value, 'wipe_presence'))
+			}
+		})
+	}
+
+	private createFullStateDiff(session: RoomSession<R, SessionMeta>): NetworkDiff<R> {
+		const deletedDocsIds = Object.entries(this.state.get().tombstones)
+			.filter(([_id, deletedAtClock]) => deletedAtClock > this.clock)
+			.map(([id]) => id)
+		const diff: NetworkDiff<R> = {}
+		for (const [id, doc] of Object.entries(this.state.get().documents)) {
+			if (id !== session.presenceId && !deletedDocsIds.includes(id)) {
+				diff[id] = [RecordOpType.Put, doc.state]
+			}
+		}
+		return diff
+	}
+
+	private createIncrementalDiff(session: RoomSession<R, SessionMeta>, lastServerClock: number): NetworkDiff<R> {
+		const updatedDocs = Object.values(this.state.get().documents).filter(
+			(doc) => doc.lastChangedClock > lastServerClock
+		)
+		const presenceDocs = this.presenceType
+			? Object.values(this.state.get().documents).filter(
+					(doc) => this.presenceType!.typeName === doc.state.typeName &&
+						doc.state.id !== session.presenceId
+				)
+			: []
+		const deletedDocsIds = Object.entries(this.state.get().tombstones)
+			.filter(([_id, deletedAtClock]) => deletedAtClock > lastServerClock)
+			.map(([id]) => id)
+
+		const diff: NetworkDiff<R> = {}
+		for (const doc of updatedDocs) diff[doc.state.id] = [RecordOpType.Put, doc.state]
+		for (const doc of presenceDocs) diff[doc.state.id] = [RecordOpType.Put, doc.state]
+		for (const docId of deletedDocsIds) diff[docId] = [RecordOpType.Remove]
+		return diff
+	}
+
+	private rejectSessionWithMigrationError(
+		session: RoomSession<R, SessionMeta>,
+		error: MigrationFailureReason
+	) {
+		this.rejectSession(
+			session.sessionId,
+			error === MigrationFailureReason.TargetVersionTooNew
+				? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
+				: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
+		)
+	}
+
+	private createConnectMessage(
+		connectRequestId: string,
+		diff: NetworkDiff<R>,
+		hydrationType: 'wipe_all' | 'wipe_presence'
+	): TLSocketServerSentEvent<R> {
+		return {
+			type: 'connect',
+			connectRequestId,
+			hydrationType,
+			protocolVersion: getTlsyncProtocolVersion(),
+			schema: this.schema.serialize(),
+			serverClock: this.clock,
+			diff,
+			isReadonly: false,
+		}
 	}
 
 	private handlePushRequest(
 		session: RoomSession<R, SessionMeta> | null,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'push' }>
 	) {
-		// We must be connected to handle push requests
-		if (session && session.state !== RoomSessionState.Connected) {
-			return
-		}
-
-		// update the last interaction time
-		if (session) {
-			session.lastInteractionTime = Date.now()
-		}
-
-		// increment the clock for this push
+		if (session && session.state !== RoomSessionState.Connected) return
+		if (session) session.lastInteractionTime = Date.now()
+
 		this.clock++
-
 		const initialDocumentClock = this.documentClock
+
 		transaction((rollback) => {
-			// collect actual ops that resulted from the push
-			// these will be broadcast to other users
-			interface ActualChanges {
-				diff: NetworkDiff<R> | null
-			}
-			const docChanges: ActualChanges = { diff: null }
-			const presenceChanges: ActualChanges = { diff: null }
-
-			const propagateOp = (changes: ActualChanges, id: string, op: RecordOp<R>) => {
-				if (!changes.diff) changes.diff = {}
-				changes.diff[id] = op
-			}
-
-			const fail = (
-				reason: TLSyncErrorCloseEventReason,
-				underlyingError?: Error
-			): Result<void, void> => {
-				rollback()
-				if (session) {
-					this.rejectSession(session.sessionId, reason)
-				} else {
-					throw new Error('failed to apply changes: ' + reason, underlyingError)
-				}
-				if (typeof process !== 'undefined' && process.env.NODE_ENV !== 'test') {
-					this.log?.error?.('failed to apply push', reason, message, underlyingError)
-				}
-				return Result.err(undefined)
-			}
-
-			const addDocument = (changes: ActualChanges, id: string, _state: R): Result<void, void> => {
-				const res = session
-					? this.schema.migratePersistedRecord(_state, session.serializedSchema, 'up')
-					: { type: 'success' as const, value: _state }
-				if (res.type === 'error') {
-					return fail(
-						res.reason === MigrationFailureReason.TargetVersionTooOld // target version is our version
-							? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-							: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
-					)
-				}
-				const { value: state } = res
-
-				// Get the existing document, if any
-				const doc = this.getDocument(id)
-
-				if (doc) {
-					// If there's an existing document, replace it with the new state
-					// but propagate a diff rather than the entire value
-					const diff = doc.replaceState(state, this.clock)
-					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					if (diff.value) {
-						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
-					}
-				} else {
-					// Otherwise, if we don't already have a document with this id
-					// create the document and propagate the put op
-					const result = this.addDocument(id, state, this.clock)
-					if (!result.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					propagateOp(changes, id, [RecordOpType.Put, state])
-				}
-
-				return Result.ok(undefined)
-			}
-
-			const patchDocument = (
-				changes: ActualChanges,
-				id: string,
-				patch: ObjectDiff
-			): Result<void, void> => {
-				// if it was already deleted, there's no need to apply the patch
-				const doc = this.getDocument(id)
-				if (!doc) return Result.ok(undefined)
-				// If the client's version of the record is older than ours,
-				// we apply the patch to the downgraded version of the record
-				const downgraded = session
-					? this.schema.migratePersistedRecord(doc.state, session.serializedSchema, 'down')
-					: { type: 'success' as const, value: doc.state }
-				if (downgraded.type === 'error') {
-					return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
-				}
-
-				if (downgraded.value === doc.state) {
-					// If the versions are compatible, apply the patch and propagate the patch op
-					const diff = doc.mergeDiff(patch, this.clock)
-					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					if (diff.value) {
-						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
-					}
-				} else {
-					// need to apply the patch to the downgraded version and then upgrade it
-
-					// apply the patch to the downgraded version
-					const patched = applyObjectDiff(downgraded.value, patch)
-					// then upgrade the patched version and use that as the new state
-					const upgraded = session
-						? this.schema.migratePersistedRecord(patched, session.serializedSchema, 'up')
-						: { type: 'success' as const, value: patched }
-					// If the client's version is too old, we'll hit an error
-					if (upgraded.type === 'error') {
-						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
-					}
-					// replace the state with the upgraded version and propagate the patch op
-					const diff = doc.replaceState(upgraded.value, this.clock)
-					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					if (diff.value) {
-						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
-					}
-				}
-
-				return Result.ok(undefined)
-			}
-
-			const { clientClock } = message
-
-			if (this.presenceType && session?.presenceId && 'presence' in message && message.presence) {
-				if (!session) throw new Error('session is required for presence pushes')
-				// The push request was for the presence scope.
-				const id = session.presenceId
-				const [type, val] = message.presence
-				const { typeName } = this.presenceType
-				switch (type) {
-					case RecordOpType.Put: {
-						// Try to put the document. If it fails, stop here.
-						const res = addDocument(presenceChanges, id, { ...val, id, typeName })
-						// if res.ok is false here then we already called `fail` and we should stop immediately
-						if (!res.ok) return
-						break
-					}
-					case RecordOpType.Patch: {
-						// Try to patch the document. If it fails, stop here.
-						const res = patchDocument(presenceChanges, id, {
-							...val,
-							id: [ValueOpType.Put, id],
-							typeName: [ValueOpType.Put, typeName],
-						})
-						// if res.ok is false here then we already called `fail` and we should stop immediately
-						if (!res.ok) return
-						break
-					}
-				}
-			}
+			const docChanges: { diff: NetworkDiff<R> | null } = { diff: null }
+			const presenceChanges: { diff: NetworkDiff<R> | null } = { diff: null }
+
+			this.processPresenceChanges(session, message, presenceChanges)
 			if (message.diff && !session?.isReadonly) {
-				// The push request was for the document scope.
-				for (const [id, op] of Object.entries(message.diff!)) {
-					switch (op[0]) {
-						case RecordOpType.Put: {
-							// Try to add the document.
-							// If we're putting a record with a type that we don't recognize, fail
-							if (!this.documentTypes.has(op[1].typeName)) {
-								return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-							}
-							const res = addDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
-							if (!res.ok) return
-							break
-						}
-						case RecordOpType.Patch: {
-							// Try to patch the document. If it fails, stop here.
-							const res = patchDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
-							if (!res.ok) return
-							break
-						}
-						case RecordOpType.Remove: {
-							const doc = this.getDocument(id)
-							if (!doc) {
-								// If the doc was already deleted, don't do anything, no need to propagate a delete op
-								continue
-							}
-
-							// Delete the document and propagate the delete op
-							this.removeDocument(id, this.clock)
-							// Schedule a pruneTombstones call to happen on the next call stack
-							setTimeout(this.pruneTombstones, 0)
-							propagateOp(docChanges, id, op)
-							break
-						}
-					}
-				}
-			}
-
-			// Let the client know what action to take based on the results of the push
-			if (
-				// if there was only a presence push, the client doesn't need to do anything aside from
-				// shift the push request.
-				!message.diff ||
-				isEqual(docChanges.diff, message.diff)
-			) {
-				// COMMIT
-				// Applying the client's changes had the exact same effect on the server as
-				// they had on the client, so the client should keep the diff
-				if (session) {
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: 'commit',
-					})
-				}
-			} else if (!docChanges.diff) {
-				// DISCARD
-				// Applying the client's changes had no effect, so the client should drop the diff
-				if (session) {
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: 'discard',
-					})
-				}
-			} else {
-				// REBASE
-				// Applying the client's changes had a different non-empty effect on the server,
-				// so the client should rebase with our gold-standard / authoritative diff.
-				// First we need to migrate the diff to the client's version
-				if (session) {
-					const migrateResult = this.migrateDiffForSession(
-						session.serializedSchema,
-						docChanges.diff
-					)
-					if (!migrateResult.ok) {
-						return fail(
-							migrateResult.error === MigrationFailureReason.TargetVersionTooNew
-								? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-								: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
-						)
-					}
-					// If the migration worked, send the rebased diff to the client
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: { rebaseWithDiff: migrateResult.value },
-					})
-				}
-			}
-
-			// If there are merged changes, broadcast them to all other clients
-			if (docChanges.diff || presenceChanges.diff) {
-				this.broadcastPatch({
-					sourceSessionId: session?.sessionId,
-					diff: {
-						...docChanges.diff,
-						...presenceChanges.diff,
-					},
+				this.processDocumentChanges(session, message, docChanges)
+			}
+
+			this.handlePushResult(session, message, docChanges, presenceChanges)
+			this.broadcastChanges(docChanges, presenceChanges, session)
+
+			if (docChanges.diff) this.documentClock = this.clock
+		})
+
+		if (this.documentClock !== initialDocumentClock) this.onDataChange?.()
+	}
+
+	private processPresenceChanges(
+		session: RoomSession<R, SessionMeta> | null,
+		message: any,
+		presenceChanges: { diff: NetworkDiff<R> | null }
+	) {
+		if (this.presenceType && session?.presenceId && message.presence) {
+			const [type, val] = message.presence
+			const id = session.presenceId
+			if (type === RecordOpType.Put) {
+				this.addDocumentToChanges(presenceChanges, id, { ...val, id, typeName: this.presenceType.typeName })
+			} else if (type === RecordOpType.Patch) {
+				this.patchDocumentInChanges(presenceChanges, id, {
+					...val,
+					id: [ValueOpType.Put, id],
+					typeName: [ValueOpType.Put, this.presenceType.typeName],
 				})
 			}
-
-			if (docChanges.diff) {
-				this.documentClock = this.clock
-			}
-
-			return
-		})
-
-		// if it threw the changes will have been rolled back and the document clock will not have been incremented
-		if (this.documentClock !== initialDocumentClock) {
-			this.onDataChange?.()
-		}
-	}
-
-	/**
-	 * Handle the event when a client disconnects.
-	 *
-	 * @param sessionId - The session that disconnected.
-	 */
+		}
+	}
+
+	private processDocumentChanges(
+		session: RoomSession<R, SessionMeta> | null,
+		message: any,
+		docChanges: { diff: NetworkDiff<R> | null }
+	) {
+		for (const [id, op] of Object.entries(message.diff!)) {
+			switch (op[0]) {
+				case RecordOpType.Put:
+					if (!this.documentTypes.has(op[1].typeName)) throw new Error('Invalid record type')
+					this.addDocumentToChanges(docChanges, id, op[1])
+					break
+				case RecordOpType.Patch:
+					this.patchDocumentInChanges(docChanges, id, op[1])
+					break
+				case RecordOpType.Remove:
+					this.removeDocumentFromStore(id)
+					docChanges.diff![id] = [RecordOpType.Remove]
+					break
+			}
+		}
+	}
+
+	private handlePushResult(
+		session: RoomSession<R, SessionMeta> | null,
+		message: any,
+		docChanges: { diff: NetworkDiff<R> | null },
+		presenceChanges: { diff: NetworkDiff<R> | null }
+	) {
+		if (!session) return
+
+		if (!docChanges.diff || isEqual(docChanges.diff, message.diff)) {
+			this.sendCommitResult(session, message.clientClock)
+		} else if (!docChanges.diff) {
+			this.sendDiscardResult(session, message.clientClock)
+		} else {
+			this.sendRebaseResult(session, message.clientClock, docChanges.diff)
+		}
+	}
+
+	private sendCommitResult(session: RoomSession<R, SessionMeta>, clientClock: number) {
+		this.sendMessage(session.sessionId, {
+			type: 'push_result',
+			serverClock: this.clock,
+			clientClock,
+			action: 'commit',
+		})
+	}
+
+	private sendDiscardResult(session: RoomSession<R, SessionMeta>, clientClock: number) {
+		this.sendMessage(session.sessionId, {
+			type: 'push_result',
+			serverClock: this.clock,
+			clientClock,
+			action: 'discard',
+		})
+	}
+
+	private sendRebaseResult(
+		session: RoomSession<R, SessionMeta>,
+		clientClock: number,
+		diff: NetworkDiff<R>
+	) {
+		const migrated = this.migrateDiffForSession(session.serializedSchema, diff)
+		if (!migrated.ok) throw new Error('Migration error during rebase')
+		this.sendMessage(session.sessionId, {
+			type: 'push_result',
+			serverClock: this.clock,
+			clientClock,
+			action: { rebaseWithDiff: migrated.value },
+		})
+	}
+
+	private broadcastChanges(
+		docChanges: { diff: NetworkDiff<R> | null },
+		presenceChanges: { diff: NetworkDiff<R> | null },
+		session: RoomSession<R, SessionMeta> | null
+	) {
+		if (docChanges.diff || presenceChanges.diff) {
+			this.broadcastPatch({
+				sourceSessionId: session?.sessionId,
+				diff: { ...docChanges.diff, ...presenceChanges.diff },
+			})
+		}
+	}
+
 	handleClose(sessionId: string) {
 		this.cancelSession(sessionId)
 	}
 
-	/**
-	 * Allow applying changes to the store in a transactional way.
-	 * @param updater - A function that will be called with a store object that can be used to make changes.
-	 * @returns A promise that resolves when the transaction is complete.
-	 */
 	async updateStore(updater: (store: RoomStoreMethods<R>) => void | Promise<void>) {
-		if (this._isClosed) {
-			throw new Error('Cannot update store on a closed room')
-		}
+		if (this._isClosed) throw new Error('Cannot update store on a closed room')
 		const context = new StoreUpdateContext<R>(
 			Object.fromEntries(this.getSnapshot().documents.map((d) => [d.state.id, d.state]))
 		)
@@ -1199,17 +972,12 @@ 		}
 
 		const diff = context.toDiff()
-		if (Object.keys(diff).length === 0) {
-			return
-		}
+		if (Object.keys(diff).length === 0) return
 
 		this.handlePushRequest(null, { type: 'push', diff, clientClock: 0 })
 	}
 }
 
-/**
- * @public
- */
 export interface RoomStoreMethods<R extends UnknownRecord = UnknownRecord> {
 	put(record: R): void
 	delete(recordOrId: R | string): void
@@ -1218,62 +986,52 @@ }
 
 class StoreUpdateContext<R extends UnknownRecord> implements RoomStoreMethods<R> {
+	private updates = { puts: {} as Record<string, UnknownRecord>, deletes: new Set<string>() }
+	private _isClosed = false
+
 	constructor(private readonly snapshot: Record<string, UnknownRecord>) {}
-	private readonly updates = {
-		puts: {} as Record<string, UnknownRecord>,
-		deletes: new Set<string>(),
-	}
+
 	put(record: R): void {
 		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		if (record.id in this.snapshot && isEqual(this.snapshot[record.id], record)) {
-			delete this.updates.puts[record.id]
+		const id = record.id
+		if (this.snapshot[id] && isEqual(this.snapshot[id], record)) {
+			delete this.updates.puts[id]
 		} else {
-			this.updates.puts[record.id] = structuredClone(record)
-		}
-		this.updates.deletes.delete(record.id)
-	}
+			this.updates.puts[id] = structuredClone(record)
+		}
+		this.updates.deletes.delete(id)
+	}
+
 	delete(recordOrId: R | string): void {
 		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
 		const id = typeof recordOrId === 'string' ? recordOrId : recordOrId.id
 		delete this.updates.puts[id]
-		if (this.snapshot[id]) {
-			this.updates.deletes.add(id)
-		}
-	}
+		if (this.snapshot[id]) this.updates.deletes.add(id)
+	}
+
 	get(id: string): R | null {
 		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		if (hasOwnProperty(this.updates.puts, id)) {
-			return structuredClone(this.updates.puts[id]) as R
-		}
-		if (this.updates.deletes.has(id)) {
-			return null
-		}
-		return structuredClone(this.snapshot[id] ?? null) as R
+		return structuredClone(
+			this.updates.puts[id] ?? (this.updates.deletes.has(id) ? null : this.snapshot[id] ?? null)
+		) as R
 	}
 
 	getAll(): R[] {
 		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		const result = Object.values(this.updates.puts)
+		const records = Object.values(this.updates.puts)
 		for (const [id, record] of Object.entries(this.snapshot)) {
-			if (!this.updates.deletes.has(id) && !hasOwnProperty(this.updates.puts, id)) {
-				result.push(record)
-			}
-		}
-		return structuredClone(result) as R[]
+			if (!this.updates.deletes.has(id) && !this.updates.puts[id]) records.push(record)
+		}
+		return structuredClone(records) as R[]
 	}
 
 	toDiff(): NetworkDiff<any> {
 		const diff: NetworkDiff<R> = {}
-		for (const [id, record] of Object.entries(this.updates.puts)) {
-			diff[id] = [RecordOpType.Put, record as R]
-		}
-		for (const id of this.updates.deletes) {
-			diff[id] = [RecordOpType.Remove]
-		}
+		Object.entries(this.updates.puts).forEach(([id, record]) => (diff[id] = [RecordOpType.Put, record as R]))
+		Array.from(this.updates.deletes).forEach((id) => (diff[id] = [RecordOpType.Remove]))
 		return diff
 	}
 
-	private _isClosed = false
 	close() {
 		this._isClosed = true
 	}
