
index 66f39bdb..0fbc0468 100644
--- a/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected):tmp/tmpbr9sl8fg_expected.txt	
+++ b/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual):tmp/tmp59xfxeya_actual.txt	
@@ -30,8 +30,6 @@ import {
 	SESSION_REMOVAL_WAIT_TIME,
 	SESSION_START_WAIT_TIME,
 } from './RoomSession'
-import { TLSyncLog } from './TLSocketRoom'
-import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from './TLSyncClient'
 import {
 	NetworkDiff,
 	ObjectDiff,
@@ -42,6 +40,7 @@ import {
 	diffRecord,
 } from './diff'
 import { interval } from './interval'
+import { TLSyncLog } from './TLSocketRoom'
 import {
 	TLIncompatibilityReason,
 	TLSocketClientSentEvent,
@@ -49,6 +48,7 @@ import {
 	TLSocketServerSentEvent,
 	getTlsyncProtocolVersion,
 } from './protocol'
+import { TLSyncErrorCloseEventCode, TLSyncErrorCloseEventReason } from './TLSyncClient'
 
 /** @internal */
 export interface TLRoomSocket<R extends UnknownRecord> {
@@ -141,7 +141,8 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	// A table of connected clients
 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
-	// eslint-disable-next-line local/prefer-class-methods
+	private _isClosed = false
+
 	pruneSessions = () => {
 		for (const client of this.sessions.values()) {
 			switch (client.state) {
@@ -176,8 +177,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 
 	private disposables: Array<() => void> = [interval(this.pruneSessions, 2000)]
 
-	private _isClosed = false
-
 	close() {
 		this.disposables.forEach((d) => d())
 		this.sessions.forEach((session) => {
@@ -466,7 +465,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 
 	// needs to accept sessionId and not a session because the session might be dead by the time
 	// the timer fires
-	_flushDataMessages(sessionId: string) {
+	private _flushDataMessages(sessionId: string) {
 		const session = this.sessions.get(sessionId)
 
 		if (!session || session.state !== RoomSessionState.Connected) {
@@ -520,6 +519,12 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		if (this.sessions.size === 0) {
 			this.events.emit('room_became_empty')
 		}
+
+		try {
+			session.socket.close()
+		} catch {
+			// noop, calling .close() multiple times is fine
+		}
 	}
 
 	private cancelSession(sessionId: string) {
@@ -543,12 +548,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			isReadonly: session.isReadonly,
 			requiresLegacyRejection: session.requiresLegacyRejection,
 		})
-
-		try {
-			session.socket.close()
-		} catch {
-			// noop, calling .close() multiple times is fine
-		}
 	}
 
 	/**
@@ -592,14 +591,13 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	 * When a client connects to the room, add them to the list of clients and then merge the history
 	 * down into the snapshots.
 	 *
+	 * @param sessionId - The session of the client that connected to the room.
+	 * @param socket - Their socket.
+	 * @param meta - Any metadata associated with the session.
+	 * @param isReadonly - Whether the session is readonly.
 	 * @internal
 	 */
-	handleNewSession(opts: {
-		sessionId: string
-		socket: TLRoomSocket<R>
-		meta: SessionMeta
-		isReadonly: boolean
-	}) {
+	handleNewSession(opts: { sessionId: string; socket: TLRoomSocket<R>; meta: SessionMeta; isReadonly: boolean }) {
 		const { sessionId, socket, meta, isReadonly } = opts
 		const existing = this.sessions.get(sessionId)
 		this.sessions.set(sessionId, {
@@ -610,54 +608,11 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			sessionStartTime: Date.now(),
 			meta,
 			isReadonly: isReadonly ?? false,
-			// this gets set later during handleConnectMessage
 			requiresLegacyRejection: false,
 		})
 		return this
 	}
 
-	/**
-	 * When we send a diff to a client, if that client is on a lower version than us, we need to make
-	 * the diff compatible with their version. At the moment this means migrating each affected record
-	 * to the client's version and sending the whole record again. We can optimize this later by
-	 * keeping the previous versions of records around long enough to recalculate these diffs for
-	 * older client versions.
-	 */
-	private migrateDiffForSession(
-		serializedSchema: SerializedSchema,
-		diff: NetworkDiff<R>
-	): Result<NetworkDiff<R>, MigrationFailureReason> {
-		// TODO: optimize this by recalculating patches using the previous versions of records
-
-		// when the client connects we check whether the schema is identical and make sure
-		// to use the same object reference so that === works on this line
-		if (serializedSchema === this.serializedSchema) {
-			return Result.ok(diff)
-		}
-
-		const result: NetworkDiff<R> = {}
-		for (const [id, op] of Object.entries(diff)) {
-			if (op[0] === RecordOpType.Remove) {
-				result[id] = op
-				continue
-			}
-
-			const migrationResult = this.schema.migratePersistedRecord(
-				this.getDocument(id).state,
-				serializedSchema,
-				'down'
-			)
-
-			if (migrationResult.type === 'error') {
-				return Result.err(migrationResult.reason)
-			}
-
-			result[id] = [RecordOpType.Put, migrationResult.value]
-		}
-
-		return Result.ok(result)
-	}
-
 	/**
 	 * When the server receives a message from the clients Currently, supports connect and patches.
 	 * Invalid messages types throws an error. Currently, doesn't validate data.
@@ -690,7 +645,9 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		}
 	}
 
-	/** If the client is out of date, or we are out of date, we need to let them know */
+	/**
+	 * If the client is out of date, or we are out of date, we need to let them know
+	 */
 	rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
 		const session = this.sessions.get(sessionId)
 		if (!session) return
@@ -741,8 +698,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'connect' }>
 	) {
 		// if the protocol versions don't match, disconnect the client
-		// we will eventually want to try to make our protocol backwards compatible to some degree
-		// and have a MIN_PROTOCOL_VERSION constant that the TLSyncRoom implements support for
 		let theirProtocolVersion = message.protocolVersion
 		// 5 is the same as 6
 		if (theirProtocolVersion === 5) {
@@ -767,7 +722,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			return
 		}
 		const migrations = this.schema.getMigrationsSince(message.schema)
-		// if the client's store is at a different version to ours, we can't support them
 		if (!migrations.ok || migrations.value.some((m) => m.scope === 'store' || !m.down)) {
 			this.rejectSession(session.sessionId, TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 			return
@@ -796,11 +750,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 
 		transaction((rollback) => {
 			if (
-				// if the client requests changes since a time before we have tombstone history, send them the full state
 				message.lastServerClock < this.tombstoneHistoryStartsAtClock ||
-				// similarly, if they ask for a time we haven't reached yet, send them the full state
-				// this will only happen if the DB is reset (or there is no db) and the server restarts
-				// or if the server exits/crashes with unpersisted changes
 				message.lastServerClock > this.clock
 			) {
 				const diff: NetworkDiff<R> = {}
@@ -831,7 +781,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					isReadonly: session.isReadonly,
 				})
 			} else {
-				// calculate the changes since the time the client last saw
 				const diff: NetworkDiff<R> = {}
 				const updatedDocs = Object.values(this.state.get().documents).filter(
 					(doc) => doc.lastChangedClock > message.lastServerClock
@@ -841,7 +790,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 							(doc) =>
 								this.presenceType!.typeName === doc.state.typeName &&
 								doc.state.id !== session.presenceId
-						)
+					  )
 					: []
 				const deletedDocsIds = Object.entries(this.state.get().tombstones)
 					.filter(([_id, deletedAtClock]) => deletedAtClock > message.lastServerClock)
@@ -853,7 +802,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				for (const doc of presenceDocs) {
 					diff[doc.state.id] = [RecordOpType.Put, doc.state]
 				}
-
 				for (const docId of deletedDocsIds) {
 					diff[docId] = [RecordOpType.Remove]
 				}
@@ -868,7 +816,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					)
 					return
 				}
-
 				connect({
 					type: 'connect',
 					connectRequestId: message.connectRequestId,
@@ -883,27 +830,53 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		})
 	}
 
-	private handlePushRequest(
+	private migrateDiffForSession(
+		serializedSchema: SerializedSchema,
+		diff: NetworkDiff<R>
+	): Result<NetworkDiff<R>, MigrationFailureReason> {
+		if (serializedSchema === this.serializedSchema) {
+			return Result.ok(diff)
+		}
+
+		const result: NetworkDiff<R> = {}
+		for (const [id, op] of Object.entries(diff)) {
+			if (op[0] === RecordOpType.Remove) {
+				result[id] = op
+				continue
+			}
+
+			const migrationResult = this.schema.migratePersistedRecord(
+				this.getDocument(id).state,
+				serializedSchema,
+				'down'
+			)
+
+			if (migrationResult.type === 'error') {
+				return Result.err(migrationResult.reason)
+			}
+
+			result[id] = [RecordOpType.Put, migrationResult.value]
+		}
+
+		return Result.ok(result)
+	}
+
+	private async handlePushRequest(
 		session: RoomSession<R, SessionMeta> | null,
 		message: Extract<TLSocketClientSentEvent<R>, { type: 'push' }>
 	) {
-		// We must be connected to handle push requests
 		if (session && session.state !== RoomSessionState.Connected) {
 			return
 		}
 
-		// update the last interaction time
 		if (session) {
 			session.lastInteractionTime = Date.now()
 		}
 
-		// increment the clock for this push
 		this.clock++
-
 		const initialDocumentClock = this.documentClock
+
 		transaction((rollback) => {
-			// collect actual ops that resulted from the push
-			// these will be broadcast to other users
 			interface ActualChanges {
 				diff: NetworkDiff<R> | null
 			}
@@ -937,19 +910,16 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					: { type: 'success' as const, value: _state }
 				if (res.type === 'error') {
 					return fail(
-						res.reason === MigrationFailureReason.TargetVersionTooOld // target version is our version
+						res.reason === MigrationFailureReason.TargetVersionTooOld
 							? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
 							: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
 					)
 				}
 				const { value: state } = res
 
-				// Get the existing document, if any
 				const doc = this.getDocument(id)
 
 				if (doc) {
-					// If there's an existing document, replace it with the new state
-					// but propagate a diff rather than the entire value
 					const diff = doc.replaceState(state, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -958,8 +928,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
 					}
 				} else {
-					// Otherwise, if we don't already have a document with this id
-					// create the document and propagate the put op
 					const result = this.addDocument(id, state, this.clock)
 					if (!result.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -975,11 +943,9 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				id: string,
 				patch: ObjectDiff
 			): Result<void, void> => {
-				// if it was already deleted, there's no need to apply the patch
 				const doc = this.getDocument(id)
 				if (!doc) return Result.ok(undefined)
-				// If the client's version of the record is older than ours,
-				// we apply the patch to the downgraded version of the record
+
 				const downgraded = session
 					? this.schema.migratePersistedRecord(doc.state, session.serializedSchema, 'down')
 					: { type: 'success' as const, value: doc.state }
@@ -988,7 +954,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				}
 
 				if (downgraded.value === doc.state) {
-					// If the versions are compatible, apply the patch and propagate the patch op
 					const diff = doc.mergeDiff(patch, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -997,19 +962,13 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
 					}
 				} else {
-					// need to apply the patch to the downgraded version and then upgrade it
-
-					// apply the patch to the downgraded version
 					const patched = applyObjectDiff(downgraded.value, patch)
-					// then upgrade the patched version and use that as the new state
 					const upgraded = session
 						? this.schema.migratePersistedRecord(patched, session.serializedSchema, 'up')
 						: { type: 'success' as const, value: patched }
-					// If the client's version is too old, we'll hit an error
 					if (upgraded.type === 'error') {
 						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
 					}
-					// replace the state with the upgraded version and propagate the patch op
 					const diff = doc.replaceState(upgraded.value, this.clock)
 					if (!diff.ok) {
 						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
@@ -1025,64 +984,48 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			const { clientClock } = message
 
 			if (this.presenceType && session?.presenceId && 'presence' in message && message.presence) {
-				if (!session) throw new Error('session is required for presence pushes')
-				// The push request was for the presence scope.
 				const id = session.presenceId
 				const [type, val] = message.presence
 				const { typeName } = this.presenceType
 				switch (type) {
 					case RecordOpType.Put: {
-						// Try to put the document. If it fails, stop here.
 						const res = addDocument(presenceChanges, id, { ...val, id, typeName })
-						// if res.ok is false here then we already called `fail` and we should stop immediately
 						if (!res.ok) return
 						break
 					}
 					case RecordOpType.Patch: {
-						// Try to patch the document. If it fails, stop here.
 						const res = patchDocument(presenceChanges, id, {
 							...val,
 							id: [ValueOpType.Put, id],
 							typeName: [ValueOpType.Put, typeName],
 						})
-						// if res.ok is false here then we already called `fail` and we should stop immediately
 						if (!res.ok) return
 						break
 					}
 				}
 			}
 			if (message.diff && !session?.isReadonly) {
-				// The push request was for the document scope.
 				for (const [id, op] of Object.entries(message.diff!)) {
 					switch (op[0]) {
 						case RecordOpType.Put: {
-							// Try to add the document.
-							// If we're putting a record with a type that we don't recognize, fail
 							if (!this.documentTypes.has(op[1].typeName)) {
 								return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
 							}
 							const res = addDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
 							if (!res.ok) return
 							break
 						}
 						case RecordOpType.Patch: {
-							// Try to patch the document. If it fails, stop here.
 							const res = patchDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
 							if (!res.ok) return
 							break
 						}
 						case RecordOpType.Remove: {
 							const doc = this.getDocument(id)
 							if (!doc) {
-								// If the doc was already deleted, don't do anything, no need to propagate a delete op
 								continue
 							}
-
-							// Delete the document and propagate the delete op
 							this.removeDocument(id, this.clock)
-							// Schedule a pruneTombstones call to happen on the next call stack
 							setTimeout(this.pruneTombstones, 0)
 							propagateOp(docChanges, id, op)
 							break
@@ -1091,16 +1034,7 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				}
 			}
 
-			// Let the client know what action to take based on the results of the push
-			if (
-				// if there was only a presence push, the client doesn't need to do anything aside from
-				// shift the push request.
-				!message.diff ||
-				isEqual(docChanges.diff, message.diff)
-			) {
-				// COMMIT
-				// Applying the client's changes had the exact same effect on the server as
-				// they had on the client, so the client should keep the diff
+			if (!message.diff || isEqual(docChanges.diff, message.diff)) {
 				if (session) {
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
@@ -1110,8 +1044,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					})
 				}
 			} else if (!docChanges.diff) {
-				// DISCARD
-				// Applying the client's changes had no effect, so the client should drop the diff
 				if (session) {
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
@@ -1121,10 +1053,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					})
 				}
 			} else {
-				// REBASE
-				// Applying the client's changes had a different non-empty effect on the server,
-				// so the client should rebase with our gold-standard / authoritative diff.
-				// First we need to migrate the diff to the client's version
 				if (session) {
 					const migrateResult = this.migrateDiffForSession(
 						session.serializedSchema,
@@ -1137,7 +1065,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 								: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
 						)
 					}
-					// If the migration worked, send the rebased diff to the client
 					this.sendMessage(session.sessionId, {
 						type: 'push_result',
 						serverClock: this.clock,
@@ -1147,7 +1074,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				}
 			}
 
-			// If there are merged changes, broadcast them to all other clients
 			if (docChanges.diff || presenceChanges.diff) {
 				this.broadcastPatch({
 					sourceSessionId: session?.sessionId,
@@ -1165,7 +1091,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			return
 		})
 
-		// if it threw the changes will have been rolled back and the document clock will not have been incremented
 		if (this.documentClock !== initialDocumentClock) {
 			this.onDataChange?.()
 		}
