
index 66f39bdb..be7487fb 100644
--- a/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_expectedoutput.txt (expected):tmp/tmp__85mz98_expected.txt	
+++ b/tldraw_packages_sync-core_src_lib_TLSyncRoom.ts_extracted.txt (actual):tmp/tmpw__c34fv_actual.txt	
@@ -131,50 +131,12 @@ export interface RoomSnapshot {
 	schema?: SerializedSchema
 }
 
-/**
- * A room is a workspace for a group of clients. It allows clients to collaborate on documents
- * within that workspace.
- *
- * @internal
- */
+/** @internal */
 export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 	// A table of connected clients
 	readonly sessions = new Map<string, RoomSession<R, SessionMeta>>()
 
-	// eslint-disable-next-line local/prefer-class-methods
-	pruneSessions = () => {
-		for (const client of this.sessions.values()) {
-			switch (client.state) {
-				case RoomSessionState.Connected: {
-					const hasTimedOut = timeSince(client.lastInteractionTime) > SESSION_IDLE_TIMEOUT
-					if (hasTimedOut || !client.socket.isOpen) {
-						this.cancelSession(client.sessionId)
-					}
-					break
-				}
-				case RoomSessionState.AwaitingConnectMessage: {
-					const hasTimedOut = timeSince(client.sessionStartTime) > SESSION_START_WAIT_TIME
-					if (hasTimedOut || !client.socket.isOpen) {
-						// remove immediately
-						this.removeSession(client.sessionId)
-					}
-					break
-				}
-				case RoomSessionState.AwaitingRemoval: {
-					const hasTimedOut = timeSince(client.cancellationTime) > SESSION_REMOVAL_WAIT_TIME
-					if (hasTimedOut) {
-						this.removeSession(client.sessionId)
-					}
-					break
-				}
-				default: {
-					exhaustiveSwitchError(client)
-				}
-			}
-		}
-	}
-
-	private disposables: Array<() => void> = [interval(this.pruneSessions, 2000)]
+	private readonly disposables: Array<() => void> = [interval(this.pruneSessions, 2000)]
 
 	private _isClosed = false
 
@@ -354,10 +316,10 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		}
 	}
 
-	// eslint-disable-next-line local/prefer-class-methods
-	private pruneTombstones = () => {
+	private pruneTombstones() {
 		// avoid blocking any pending responses
 		this.state.update(({ tombstones, documents }) => {
+			// avoid blocking any pending responses
 			const entries = Object.entries(this.state.get().tombstones)
 			if (entries.length > MAX_TOMBSTONES) {
 				// sort entries in ascending order by clock
@@ -418,69 +380,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		}
 	}
 
-	/**
-	 * Send a message to a particular client. Debounces data events
-	 *
-	 * @param sessionId - The id of the session to send the message to.
-	 * @param message - The message to send.
-	 */
-	private sendMessage(
-		sessionId: string,
-		message: TLSocketServerSentEvent<R> | TLSocketServerSentDataEvent<R>
-	) {
-		const session = this.sessions.get(sessionId)
-		if (!session) {
-			this.log?.warn?.('Tried to send message to unknown session', message.type)
-			return
-		}
-		if (session.state !== RoomSessionState.Connected) {
-			this.log?.warn?.('Tried to send message to disconnected client', message.type)
-			return
-		}
-		if (session.socket.isOpen) {
-			if (message.type !== 'patch' && message.type !== 'push_result') {
-				// this is not a data message
-				if (message.type !== 'pong') {
-					// non-data messages like "connect" might still need to be ordered correctly with
-					// respect to data messages, so it's better to flush just in case
-					this._flushDataMessages(sessionId)
-				}
-				session.socket.sendMessage(message)
-			} else {
-				if (session.debounceTimer === null) {
-					// this is the first message since the last flush, don't delay it
-					session.socket.sendMessage({ type: 'data', data: [message] })
-
-					session.debounceTimer = setTimeout(
-						() => this._flushDataMessages(sessionId),
-						DATA_MESSAGE_DEBOUNCE_INTERVAL
-					)
-				} else {
-					session.outstandingDataMessages.push(message)
-				}
-			}
-		} else {
-			this.cancelSession(session.sessionId)
-		}
-	}
-
-	// needs to accept sessionId and not a session because the session might be dead by the time
-	// the timer fires
-	_flushDataMessages(sessionId: string) {
-		const session = this.sessions.get(sessionId)
-
-		if (!session || session.state !== RoomSessionState.Connected) {
-			return
-		}
-
-		session.debounceTimer = null
-
-		if (session.outstandingDataMessages.length > 0) {
-			session.socket.sendMessage({ type: 'data', data: session.outstandingDataMessages })
-			session.outstandingDataMessages.length = 0
-		}
-	}
-
 	/** @internal */
 	private removeSession(sessionId: string, fatalReason?: string) {
 		const session = this.sessions.get(sessionId)
@@ -573,8 +472,8 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 				this.rejectSession(
 					session.sessionId,
 					res.error === MigrationFailureReason.TargetVersionTooNew
-						? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-						: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
+						? TLSyncErrorCloseEventReason.ServerTooOld
+						: TLSyncErrorCloseEventReason.ClientTooOld
 				)
 				return
 			}
@@ -610,8 +509,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 			sessionStartTime: Date.now(),
 			meta,
 			isReadonly: isReadonly ?? false,
-			// this gets set later during handleConnectMessage
-			requiresLegacyRejection: false,
 		})
 		return this
 	}
@@ -658,38 +555,6 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 		return Result.ok(result)
 	}
 
-	/**
-	 * When the server receives a message from the clients Currently, supports connect and patches.
-	 * Invalid messages types throws an error. Currently, doesn't validate data.
-	 *
-	 * @param sessionId - The session that sent the message
-	 * @param message - The message that was sent
-	 */
-	async handleMessage(sessionId: string, message: TLSocketClientSentEvent<R>) {
-		const session = this.sessions.get(sessionId)
-		if (!session) {
-			this.log?.warn?.('Received message from unknown session')
-			return
-		}
-		switch (message.type) {
-			case 'connect': {
-				return this.handleConnectRequest(session, message)
-			}
-			case 'push': {
-				return this.handlePushRequest(session, message)
-			}
-			case 'ping': {
-				if (session.state === RoomSessionState.Connected) {
-					session.lastInteractionTime = Date.now()
-				}
-				return this.sendMessage(session.sessionId, { type: 'pong' })
-			}
-			default: {
-				exhaustiveSwitchError(message)
-			}
-		}
-	}
-
 	/** If the client is out of date, or we are out of date, we need to let them know */
 	rejectSession(sessionId: string, fatalReason?: TLSyncErrorCloseEventReason | string) {
 		const session = this.sessions.get(sessionId)
@@ -824,8 +689,8 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					type: 'connect',
 					connectRequestId: message.connectRequestId,
 					hydrationType: 'wipe_all',
-					protocolVersion: getTlsyncProtocolVersion(),
 					schema: this.schema.serialize(),
+					protocolVersion: getTlsyncProtocolVersion(),
 					serverClock: this.clock,
 					diff: migrated.value,
 					isReadonly: session.isReadonly,
@@ -959,322 +824,4 @@ export class TLSyncRoom<R extends UnknownRecord, SessionMeta> {
 					}
 				} else {
 					// Otherwise, if we don't already have a document with this id
-					// create the document and propagate the put op
-					const result = this.addDocument(id, state, this.clock)
-					if (!result.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					propagateOp(changes, id, [RecordOpType.Put, state])
-				}
-
-				return Result.ok(undefined)
-			}
-
-			const patchDocument = (
-				changes: ActualChanges,
-				id: string,
-				patch: ObjectDiff
-			): Result<void, void> => {
-				// if it was already deleted, there's no need to apply the patch
-				const doc = this.getDocument(id)
-				if (!doc) return Result.ok(undefined)
-				// If the client's version of the record is older than ours,
-				// we apply the patch to the downgraded version of the record
-				const downgraded = session
-					? this.schema.migratePersistedRecord(doc.state, session.serializedSchema, 'down')
-					: { type: 'success' as const, value: doc.state }
-				if (downgraded.type === 'error') {
-					return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
-				}
-
-				if (downgraded.value === doc.state) {
-					// If the versions are compatible, apply the patch and propagate the patch op
-					const diff = doc.mergeDiff(patch, this.clock)
-					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					if (diff.value) {
-						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
-					}
-				} else {
-					// need to apply the patch to the downgraded version and then upgrade it
-
-					// apply the patch to the downgraded version
-					const patched = applyObjectDiff(downgraded.value, patch)
-					// then upgrade the patched version and use that as the new state
-					const upgraded = session
-						? this.schema.migratePersistedRecord(patched, session.serializedSchema, 'up')
-						: { type: 'success' as const, value: patched }
-					// If the client's version is too old, we'll hit an error
-					if (upgraded.type === 'error') {
-						return fail(TLSyncErrorCloseEventReason.CLIENT_TOO_OLD)
-					}
-					// replace the state with the upgraded version and propagate the patch op
-					const diff = doc.replaceState(upgraded.value, this.clock)
-					if (!diff.ok) {
-						return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-					}
-					if (diff.value) {
-						propagateOp(changes, id, [RecordOpType.Patch, diff.value])
-					}
-				}
-
-				return Result.ok(undefined)
-			}
-
-			const { clientClock } = message
-
-			if (this.presenceType && session?.presenceId && 'presence' in message && message.presence) {
-				if (!session) throw new Error('session is required for presence pushes')
-				// The push request was for the presence scope.
-				const id = session.presenceId
-				const [type, val] = message.presence
-				const { typeName } = this.presenceType
-				switch (type) {
-					case RecordOpType.Put: {
-						// Try to put the document. If it fails, stop here.
-						const res = addDocument(presenceChanges, id, { ...val, id, typeName })
-						// if res.ok is false here then we already called `fail` and we should stop immediately
-						if (!res.ok) return
-						break
-					}
-					case RecordOpType.Patch: {
-						// Try to patch the document. If it fails, stop here.
-						const res = patchDocument(presenceChanges, id, {
-							...val,
-							id: [ValueOpType.Put, id],
-							typeName: [ValueOpType.Put, typeName],
-						})
-						// if res.ok is false here then we already called `fail` and we should stop immediately
-						if (!res.ok) return
-						break
-					}
-				}
-			}
-			if (message.diff && !session?.isReadonly) {
-				// The push request was for the document scope.
-				for (const [id, op] of Object.entries(message.diff!)) {
-					switch (op[0]) {
-						case RecordOpType.Put: {
-							// Try to add the document.
-							// If we're putting a record with a type that we don't recognize, fail
-							if (!this.documentTypes.has(op[1].typeName)) {
-								return fail(TLSyncErrorCloseEventReason.INVALID_RECORD)
-							}
-							const res = addDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
-							if (!res.ok) return
-							break
-						}
-						case RecordOpType.Patch: {
-							// Try to patch the document. If it fails, stop here.
-							const res = patchDocument(docChanges, id, op[1])
-							// if res.ok is false here then we already called `fail` and we should stop immediately
-							if (!res.ok) return
-							break
-						}
-						case RecordOpType.Remove: {
-							const doc = this.getDocument(id)
-							if (!doc) {
-								// If the doc was already deleted, don't do anything, no need to propagate a delete op
-								continue
-							}
-
-							// Delete the document and propagate the delete op
-							this.removeDocument(id, this.clock)
-							// Schedule a pruneTombstones call to happen on the next call stack
-							setTimeout(this.pruneTombstones, 0)
-							propagateOp(docChanges, id, op)
-							break
-						}
-					}
-				}
-			}
-
-			// Let the client know what action to take based on the results of the push
-			if (
-				// if there was only a presence push, the client doesn't need to do anything aside from
-				// shift the push request.
-				!message.diff ||
-				isEqual(docChanges.diff, message.diff)
-			) {
-				// COMMIT
-				// Applying the client's changes had the exact same effect on the server as
-				// they had on the client, so the client should keep the diff
-				if (session) {
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: 'commit',
-					})
-				}
-			} else if (!docChanges.diff) {
-				// DISCARD
-				// Applying the client's changes had no effect, so the client should drop the diff
-				if (session) {
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: 'discard',
-					})
-				}
-			} else {
-				// REBASE
-				// Applying the client's changes had a different non-empty effect on the server,
-				// so the client should rebase with our gold-standard / authoritative diff.
-				// First we need to migrate the diff to the client's version
-				if (session) {
-					const migrateResult = this.migrateDiffForSession(
-						session.serializedSchema,
-						docChanges.diff
-					)
-					if (!migrateResult.ok) {
-						return fail(
-							migrateResult.error === MigrationFailureReason.TargetVersionTooNew
-								? TLSyncErrorCloseEventReason.SERVER_TOO_OLD
-								: TLSyncErrorCloseEventReason.CLIENT_TOO_OLD
-						)
-					}
-					// If the migration worked, send the rebased diff to the client
-					this.sendMessage(session.sessionId, {
-						type: 'push_result',
-						serverClock: this.clock,
-						clientClock,
-						action: { rebaseWithDiff: migrateResult.value },
-					})
-				}
-			}
-
-			// If there are merged changes, broadcast them to all other clients
-			if (docChanges.diff || presenceChanges.diff) {
-				this.broadcastPatch({
-					sourceSessionId: session?.sessionId,
-					diff: {
-						...docChanges.diff,
-						...presenceChanges.diff,
-					},
-				})
-			}
-
-			if (docChanges.diff) {
-				this.documentClock = this.clock
-			}
-
-			return
-		})
-
-		// if it threw the changes will have been rolled back and the document clock will not have been incremented
-		if (this.documentClock !== initialDocumentClock) {
-			this.onDataChange?.()
-		}
-	}
-
-	/**
-	 * Handle the event when a client disconnects.
-	 *
-	 * @param sessionId - The session that disconnected.
-	 */
-	handleClose(sessionId: string) {
-		this.cancelSession(sessionId)
-	}
-
-	/**
-	 * Allow applying changes to the store in a transactional way.
-	 * @param updater - A function that will be called with a store object that can be used to make changes.
-	 * @returns A promise that resolves when the transaction is complete.
-	 */
-	async updateStore(updater: (store: RoomStoreMethods<R>) => void | Promise<void>) {
-		if (this._isClosed) {
-			throw new Error('Cannot update store on a closed room')
-		}
-		const context = new StoreUpdateContext<R>(
-			Object.fromEntries(this.getSnapshot().documents.map((d) => [d.state.id, d.state]))
-		)
-		try {
-			await updater(context)
-		} finally {
-			context.close()
-		}
-
-		const diff = context.toDiff()
-		if (Object.keys(diff).length === 0) {
-			return
-		}
-
-		this.handlePushRequest(null, { type: 'push', diff, clientClock: 0 })
-	}
-}
-
-/**
- * @public
- */
-export interface RoomStoreMethods<R extends UnknownRecord = UnknownRecord> {
-	put(record: R): void
-	delete(recordOrId: R | string): void
-	get(id: string): R | null
-	getAll(): R[]
-}
-
-class StoreUpdateContext<R extends UnknownRecord> implements RoomStoreMethods<R> {
-	constructor(private readonly snapshot: Record<string, UnknownRecord>) {}
-	private readonly updates = {
-		puts: {} as Record<string, UnknownRecord>,
-		deletes: new Set<string>(),
-	}
-	put(record: R): void {
-		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		if (record.id in this.snapshot && isEqual(this.snapshot[record.id], record)) {
-			delete this.updates.puts[record.id]
-		} else {
-			this.updates.puts[record.id] = structuredClone(record)
-		}
-		this.updates.deletes.delete(record.id)
-	}
-	delete(recordOrId: R | string): void {
-		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		const id = typeof recordOrId === 'string' ? recordOrId : recordOrId.id
-		delete this.updates.puts[id]
-		if (this.snapshot[id]) {
-			this.updates.deletes.add(id)
-		}
-	}
-	get(id: string): R | null {
-		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		if (hasOwnProperty(this.updates.puts, id)) {
-			return structuredClone(this.updates.puts[id]) as R
-		}
-		if (this.updates.deletes.has(id)) {
-			return null
-		}
-		return structuredClone(this.snapshot[id] ?? null) as R
-	}
-
-	getAll(): R[] {
-		if (this._isClosed) throw new Error('StoreUpdateContext is closed')
-		const result = Object.values(this.updates.puts)
-		for (const [id, record] of Object.entries(this.snapshot)) {
-			if (!this.updates.deletes.has(id) && !hasOwnProperty(this.updates.puts, id)) {
-				result.push(record)
-			}
-		}
-		return structuredClone(result) as R[]
-	}
-
-	toDiff(): NetworkDiff<any> {
-		const diff: NetworkDiff<R> = {}
-		for (const [id, record] of Object.entries(this.updates.puts)) {
-			diff[id] = [RecordOpType.Put, record as R]
-		}
-		for (const id of this.updates.deletes) {
-			diff[id] = [RecordOpType.Remove]
-		}
-		return diff
-	}
-
-	private _isClosed = false
-	close() {
-		this._isClosed = true
-	}
-}
\ No newline at end of file
+					// create the document and propag
\ No newline at end of file
