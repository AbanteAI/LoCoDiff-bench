
index f68c81d66..0fe8aa5ae 100644
--- a/ghostty_src_config_formatter.zig_expectedoutput.txt (expected):tmp/tmptf2x41qe_expected.txt	
+++ b/ghostty_src_config_formatter.zig_extracted.txt (actual):tmp/tmpy1p3o9gc_actual.txt	
@@ -34,7 +34,7 @@ pub fn EntryFormatter(comptime WriterType: type) type {
     };
 }
 
-/// Format a single type with the given name and value.
+// This may conflict with the struct declared later
 pub fn formatEntry(
     comptime T: type,
     name: []const u8,
@@ -88,16 +88,10 @@ pub fn formatEntry(
             else => {},
         },
 
-        // Structs of all types require a "formatEntry" function
-        // to be defined which will be called to format the value.
-        // This is given the formatter in use so that they can
-        // call BACK to our formatEntry to write each primitive
-        // value.
         .@"struct" => |info| if (@hasDecl(T, "formatEntry")) {
             try value.formatEntry(entryFormatter(name, writer));
             return;
         } else switch (info.layout) {
-            // Packed structs we special case.
             .@"packed" => {
                 try writer.print("{s} = ", .{name});
                 inline for (info.fields, 0..) |field, i| {
@@ -162,9 +156,9 @@ pub const FileFormatter = struct {
             if (field.name[0] == '_') continue;
 
             const value = @field(self.config, field.name);
-            const do_format = if (default) |d| format: {
+            const do_format = if (default) |d| {
                 const key = @field(Key, field.name);
-                break :format d.changed(self.config, key);
+                d.changed(self.config, key);
             } else true;
 
             if (do_format) {
@@ -193,13 +187,14 @@ pub const FileFormatter = struct {
 test "format default config" {
     const testing = std.testing;
     const alloc = testing.allocator;
+
     var cfg = try Config.default(alloc);
     defer cfg.deinit();
 
     var buf = std.ArrayList(u8).init(alloc);
     defer buf.deinit();
 
-    // We just make sure this works without errors. We aren't asserting output.
+    // We just make sure this works without errors.
     const fmt: FileFormatter = .{
         .alloc = alloc,
         .config = &cfg,
@@ -214,12 +209,13 @@ test "format default config changed" {
     const alloc = testing.allocator;
     var cfg = try Config.default(alloc);
     defer cfg.deinit();
+
     cfg.@"font-size" = 42;
 
     var buf = std.ArrayList(u8).init(alloc);
     defer buf.deinit();
 
-    // We just make sure this works without errors. We aren't asserting output.
+    // We just make sure this works without errors.
     const fmt: FileFormatter = .{
         .alloc = alloc,
         .config = &cfg,
