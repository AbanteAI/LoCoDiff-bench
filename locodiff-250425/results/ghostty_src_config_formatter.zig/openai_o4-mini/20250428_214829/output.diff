
index f68c81d6..4bcf4d5c 100644
--- a/ghostty_src_config_formatter.zig_expectedoutput.txt (expected):tmp/tmpblhsbwqf_expected.txt	
+++ b/ghostty_src_config_formatter.zig_extracted.txt (actual):tmp/tmpsvp2l96f_actual.txt	
@@ -58,7 +58,7 @@ pub fn formatEntry(
         },
 
         .void => {
-            try writer.print("{s} = \n", .{name});
+            try writer.print("{s} = \n", .{ name });
             return;
         },
 
@@ -71,9 +71,8 @@ pub fn formatEntry(
                     writer,
                 );
             } else {
-                try writer.print("{s} = \n", .{name});
+                try writer.print("{s} = \n", .{ name });
             }
-
             return;
         },
 
@@ -84,7 +83,6 @@ pub fn formatEntry(
                 try writer.print("{s} = {s}\n", .{ name, value });
                 return;
             },
-
             else => {},
         },
 
@@ -99,7 +97,7 @@ pub fn formatEntry(
         } else switch (info.layout) {
             // Packed structs we special case.
             .@"packed" => {
-                try writer.print("{s} = ", .{name});
+                try writer.print("{s} = ", .{ name });
                 inline for (info.fields, 0..) |field, i| {
                     if (i > 0) try writer.print(",", .{});
                     try writer.print("{s}{s}", .{
@@ -110,7 +108,6 @@ pub fn formatEntry(
                 try writer.print("\n", .{});
                 return;
             },
-
             else => {},
         },
 
@@ -127,9 +124,6 @@ pub fn formatEntry(
     @compileError("missing case for type");
 }
 
-/// FileFormatter is a formatter implementation that outputs the
-/// config in a file-like format. This uses more generous whitespace,
-/// can include comments, etc.
 pub const FileFormatter = struct {
     alloc: Allocator,
     config: *const Config,
@@ -160,7 +154,6 @@ pub const FileFormatter = struct {
 
         inline for (@typeInfo(Config).@"struct".fields) |field| {
             if (field.name[0] == '_') continue;
-
             const value = @field(self.config, field.name);
             const do_format = if (default) |d| format: {
                 const key = @field(Key, field.name);
@@ -173,7 +166,7 @@ pub const FileFormatter = struct {
                     const help = @field(help_strings.Config, field.name);
                     var lines = std.mem.splitScalar(u8, help, '\n');
                     while (lines.next()) |line| {
-                        try writer.print("# {s}\n", .{line});
+                        try writer.print("# {s}\n", .{ line });
                     }
                 }
 
@@ -204,9 +197,7 @@ test "format default config" {
         .alloc = alloc,
         .config = &cfg,
     };
-    try std.fmt.format(buf.writer(), "{}", .{fmt});
-
-    //std.log.warn("{s}", .{buf.items});
+    try std.fmt.format(buf.writer(), "{}", .{ fmt });
 }
 
 test "format default config changed" {
@@ -225,9 +216,7 @@ test "format default config changed" {
         .config = &cfg,
         .changed = true,
     };
-    try std.fmt.format(buf.writer(), "{}", .{fmt});
-
-    //std.log.warn("{s}", .{buf.items});
+    try std.fmt.format(buf.writer(), "{}", .{ fmt });
 }
 
 test "formatEntry bool" {
