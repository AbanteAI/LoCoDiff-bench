--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -7,7 +7,6 @@ 
 import configargparse
 
-from aider import __version__
 from aider.args_formatter import (
     DotEnvFormatter,
     MarkdownHelpFormatter,
@@ -41,8 +40,12 @@     )
     group = parser.add_argument_group("Main model")
     group.add_argument(
-        "files", metavar="FILE", nargs="*", help="files to edit with an LLM (optional)"
-    )
+        "files",
+        metavar="FILE",
+        nargs="*",
+        help="files to edit with an LLM (optional)",
+    )
+
     group.add_argument(
         "--model",
         metavar="MODEL",
@@ -50,19 +53,21 @@         help="Specify the model to use for the main chat",
     )
 
+    add_deprecated_model_args(parser, group)
+
     ##########
     group = parser.add_argument_group("API Keys and settings")
     group.add_argument(
         "--openai-api-key",
-        help="Specify the OpenAI API key",
+        help="(deprecated, use --set-env OPENAI_API_KEY=<value>)",
     )
     group.add_argument(
         "--anthropic-api-key",
-        help="Specify the Anthropic API key",
+        help="(deprecated, use --set-env ANTHROPIC_API_KEY=<value>)",
     )
     group.add_argument(
         "--openai-api-base",
-        help="Specify the api base url",
+        help="(deprecated, use --set-env OPENAI_API_BASE=<value>)",
     )
     group.add_argument(
         "--openai-api-type",
@@ -133,65 +138,6 @@         help="Set the thinking token budget for models that support it (default: not set)",
     )
     group.add_argument(
-        "--verify-ssl",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Verify the SSL cert when connecting to models (default: True)",
-    )
-    group.add_argument(
-        "--timeout",
-        type=float,
-        default=None,
-        help="Timeout in seconds for API calls (default: None)",
-    )
-    group.add_argument(
-        "--edit-format",
-        "--chat-mode",
-        metavar="EDIT_FORMAT",
-        default=None,
-        help="Specify what edit format the LLM should use (default depends on model)",
-    )
-    group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
-    )
-    group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
-    )
-    group.add_argument(
-        "--weak-model",
-        metavar="WEAK_MODEL",
-        default=None,
-        help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
-        ),
-    )
-    group.add_argument(
-        "--editor-model",
-        metavar="EDITOR_MODEL",
-        default=None,
-        help="Specify the model to use for editor tasks (default depends on --model)",
-    )
-    group.add_argument(
-        "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
-        default=None,
-        help="Specify the edit format for the editor model (default: depends on editor model)",
-    )
-    group.add_argument(
-        "--show-model-warnings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Only work with models that have meta-data available (default: True)",
-    )
-    group.add_argument(
         "--check-model-accepts-settings",
         action=argparse.BooleanOptionalAction,
         default=True,
@@ -207,6 +153,14 @@             "Soft limit on tokens for chat history, after which summarization begins."
             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
+    )
+    # This is a duplicate of the argument in the preparser and is a no-op by this time of
+    # argument parsing, but it's here so that the help is displayed as expected.
+    group.add_argument(
+        "--env-file",
+        metavar="ENV_FILE",
+        default=default_env_file(git_root),
+        help="Specify the .env file to load (default: .env in git root)",
     )
 
     ##########
@@ -230,7 +184,7 @@         "--map-tokens",
         type=int,
         default=None,
-        help="Suggested number of tokens to use for repo map, use 0 to disable",
+        help="Suggested number of tokens to use for repo map, use 0 to disable (default: 1024)",
     )
     group.add_argument(
         "--map-refresh",
@@ -249,39 +203,6 @@     )
 
     ##########
-    group = parser.add_argument_group("History Files")
-    default_input_history_file = (
-        os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
-    )
-    default_chat_history_file = (
-        os.path.join(git_root, ".aider.chat.history.md") if git_root else ".aider.chat.history.md"
-    )
-    group.add_argument(
-        "--input-history-file",
-        metavar="INPUT_HISTORY_FILE",
-        default=default_input_history_file,
-        help=f"Specify the chat input history file (default: {default_input_history_file})",
-    )
-    group.add_argument(
-        "--chat-history-file",
-        metavar="CHAT_HISTORY_FILE",
-        default=default_chat_history_file,
-        help=f"Specify the chat history file (default: {default_chat_history_file})",
-    )
-    group.add_argument(
-        "--restore-chat-history",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Restore the previous chat history messages (default: False)",
-    )
-    group.add_argument(
-        "--llm-history-file",
-        metavar="LLM_HISTORY_FILE",
-        default=None,
-        help="Log the conversation with the LLM to this file (for example, .aider.llm.history)",
-    )
-
-    ##########
     group = parser.add_argument_group("Output settings")
     group.add_argument(
         "--dark-mode",
@@ -299,23 +220,23 @@         "--pretty",
         action=argparse.BooleanOptionalAction,
         default=True,
-        help="Enable/disable pretty, colorized output (default: True)",
+        help="Enable/disable pretty formatting of diffs (default: True)",
     )
     group.add_argument(
         "--stream",
         action=argparse.BooleanOptionalAction,
         default=True,
-        help="Enable/disable streaming responses (default: True)",
+        help="Enable/disable streaming LLM responses (default: True)",
     )
     group.add_argument(
         "--user-input-color",
         default="#00cc00",
-        help="Set the color for user input (default: #00cc00)",
+        help="Set the color for user input",
     )
     group.add_argument(
         "--tool-output-color",
         default=None,
-        help="Set the color for tool output (default: None)",
+        help="Set the color for tool output (default: none)",
     )
     group.add_argument(
         "--tool-error-color",
@@ -398,7 +319,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -425,16 +345,16 @@         help="Enable/disable commits when repo is found dirty (default: True)",
     )
     group.add_argument(
-        "--attribute-author",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider code changes in the git author name (default: True)",
-    )
-    group.add_argument(
-        "--attribute-committer",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider commits in the git committer name (default: True)",
+        "--git-commit-verify",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
+    )
+    group.add_argument(
+        "--commit",
+        action="store_true",
+        help="Commit all pending changes with a suitable commit message, then exit",
+        default=False,
     )
     group.add_argument(
         "--attribute-commit-message-author",
@@ -449,29 +369,6 @@         help="Prefix all commit messages with 'aider: ' (default: False)",
     )
     group.add_argument(
-        "--git-commit-verify",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
-    )
-    group.add_argument(
-        "--commit",
-        action="store_true",
-        help="Commit all pending changes with a suitable commit message, then exit",
-        default=False,
-    )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
-    group.add_argument(
         "--skip-sanity-check-repo",
         action="store_true",
         help="Skip the sanity check for the git repository (default: False)",
@@ -482,6 +379,12 @@         action=argparse.BooleanOptionalAction,
         default=False,
         help="Enable/disable watching files for ai coding comments (default: False)",
+    )
+    group.add_argument(
+        "--copy-paste",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable automatic copy/paste of chat between aider and your AI web UI (default: False)",
     )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
@@ -519,31 +422,11 @@     group.add_argument(
         "--test",
         action="store_true",
-        help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
-    #########
+        help="Run tests, report errors and then exit",
+        default=False,
+    )
+
+    ##########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
         "--just-check-update",
@@ -556,12 +439,6 @@         action=argparse.BooleanOptionalAction,
         help="Check for new aider versions on launch",
         default=True,
-    )
-    group.add_argument(
-        "--show-release-notes",
-        action=argparse.BooleanOptionalAction,
-        help="Show release notes on first run of new version (default: None, ask user)",
-        default=None,
     )
     group.add_argument(
         "--install-main-branch",
@@ -607,7 +484,7 @@         "--gui",
         "--browser",
         action=argparse.BooleanOptionalAction,
-        help="Run aider in your browser (default: False)",
+        help="Run aider in your browser",
         default=False,
     )
     group.add_argument(
@@ -628,21 +505,48 @@         default=False,
     )
     group.add_argument(
+        "--load",
+        metavar="LOAD_FILE",
+        help="Load and execute /commands from a file on launch",
+    )
+    group.add_argument(
+        "--encoding",
+        default="utf-8",
+        help="Specify the encoding for input and output (default: utf-8)",
+    )
+    group.add_argument(
+        "-c",
+        "--config",
+        is_config_file=True,
+        metavar="CONFIG_FILE",
+        help=(
+            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
+            " or home directory)"
+        ),
+    )
+    group.add_argument(
+        "--yes-always",
+        action="store_true",
+        help="Always say yes to every confirmation",
+        default=None,
+    )
+    group.add_argument(
+        "-v",
+        "--verbose",
+        action="store_true",
+        help="Enable verbose output",
+        default=False,
+    )
+    group.add_argument(
+        "--show-repo-map",
+        action="store_true",
+        help="Print the repo map and exit (debug)",
+        default=False,
+    )
+    group.add_argument(
         "--exit",
         action="store_true",
         help="Do all startup activities then exit before accepting user input (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-repo-map",
-        action="store_true",
-        help="Print the repo map and exit (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-prompts",
-        action="store_true",
-        help="Print the system prompts and exit (debug)",
         default=False,
     )
 
@@ -668,91 +572,8 @@         help="Specify the input device name for voice recording",
     )
 
-    ######
-    group = parser.add_argument_group("Other settings")
-    group.add_argument(
-        "--file",
-        action="append",
-        metavar="FILE",
-        help="specify a file to edit (can be used multiple times)",
-    )
-    group.add_argument(
-        "--read",
-        action="append",
-        metavar="FILE",
-        help="specify a read-only file (can be used multiple times)",
-    )
-    group.add_argument(
-        "--vim",
-        action="store_true",
-        help="Use VI editing mode in the terminal (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--chat-language",
-        metavar="CHAT_LANGUAGE",
-        default=None,
-        help="Specify the language to use in the chat (default: None, uses system settings)",
-    )
-    group.add_argument(
-        "--yes-always",
-        action="store_true",
-        help="Always say yes to every confirmation",
-        default=None,
-    )
-    group.add_argument(
-        "-v",
-        "--verbose",
-        action="store_true",
-        help="Enable verbose output",
-        default=False,
-    )
-    group.add_argument(
-        "--load",
-        metavar="LOAD_FILE",
-        help="Load and execute /commands from a file on launch",
-    )
-    group.add_argument(
-        "--encoding",
-        default="utf-8",
-        help="Specify the encoding for input and output (default: utf-8)",
-    )
-    group.add_argument(
-        "--line-endings",
-        choices=["platform", "lf", "crlf"],
-        default="platform",
-        help="Line endings to use when writing files (default: platform)",
-    )
-    group.add_argument(
-        "-c",
-        "--config",
-        is_config_file=True,
-        metavar="CONFIG_FILE",
-        help=(
-            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
-            " or home directory)"
-        ),
-    )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
-    group.add_argument(
-        "--env-file",
-        metavar="ENV_FILE",
-        default=default_env_file(git_root),
-        help="Specify the .env file to load (default: .env in git root)",
-    )
-    group.add_argument(
-        "--suggest-shell-commands",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable suggesting shell commands (default: True)",
-    )
-    group.add_argument(
-        "--fancy-input",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable fancy input with history and completion (default: True)",
-    )
+    ##########
+    group = parser.add_argument_group("Input settings")
     group.add_argument(
         "--multiline",
         action=argparse.BooleanOptionalAction,
@@ -784,68 +605,10 @@         help="Enable/disable detection and offering to add URLs to chat (default: True)",
     )
     group.add_argument(
-        "--editor",
-        help="Specify which editor to use for the /editor command",
-    )
-
-    ##########
-    group = parser.add_argument_group("Deprecated model settings")
-    # Add deprecated model shortcut arguments
-    add_deprecated_model_args(parser, group)
-
-    return parser
-
-
-def get_md_help():
-    os.environ["COLUMNS"] = "70"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = MarkdownHelpFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def get_sample_yaml():
-    os.environ["COLUMNS"] = "100"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = YamlHelpFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def get_sample_dotenv():
-    os.environ["COLUMNS"] = "120"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = DotEnvFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def main():
-    arg = sys.argv[1] if len(sys.argv[1:]) else None
-
-    if arg == "md":
-        print(get_md_help())
-    elif arg == "dotenv":
-        print(get_sample_dotenv())
-    else:
-        print(get_sample_yaml())
-
-
-if __name__ == "__main__":
-    status = main()
-    sys.exit(status)+        "--fancy-input",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable fancy input with history and completion (default: True)",
+    )
+
+    return parser