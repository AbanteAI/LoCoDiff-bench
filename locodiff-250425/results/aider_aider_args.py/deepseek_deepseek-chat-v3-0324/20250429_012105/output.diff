
index e64aa9de..a51ec87d 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmp6k8ozxjf_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmpj72qu8qc_actual.txt	
@@ -66,55 +66,19 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
-    )
-    group.add_argument(
-        "--set-env",
-        action="append",
-        metavar="ENV_VAR_NAME=value",
-        help="Set an environment variable (to control API settings, can be used multiple times)",
-        default=[],
-    )
-    group.add_argument(
-        "--api-key",
-        action="append",
-        metavar="PROVIDER=KEY",
-        help=(
-            "Set an API key for a provider (eg: --api-key provider=<key> sets"
-            " PROVIDER_API_KEY=<key>)"
-        ),
-        default=[],
-    )
-    group = parser.add_argument_group("Model settings")
-    group.add_argument(
-        "--list-models",
-        "--models",
-        metavar="MODEL",
-        help="List known models which match the (partial) MODEL name",
-    )
-    group.add_argument(
-        "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
-        default=".aider.model.settings.yml",
-        help="Specify a file with aider model settings for unknown models",
-    )
-    group.add_argument(
-        "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
-        default=".aider.model.metadata.json",
-        help="Specify a file with context window and costs for unknown models",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--alias",
@@ -208,6 +172,50 @@ def get_parser(default_config_files, git_root):
             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
     )
+    # This is a duplicate of the argument in the preparser and is a no-op by this time of
+    # argument parsing, but it's here so that the help is displayed as expected.
+    group.add_argument(
+        "--env-file",
+        metavar="ENV_FILE",
+        default=default_env_file(git_root),
+        help="Specify the .env file to load (default: .env in git root)",
+    )
+    group.add_argument(
+        "--set-env",
+        action="append",
+        metavar="ENV_VAR_NAME=value",
+        help="Set an environment variable (to control API settings, can be used multiple times)",
+        default=[],
+    )
+    group.add_argument(
+        "--api-key",
+        action="append",
+        metavar="PROVIDER=KEY",
+        help=(
+            "Set an API key for a provider (eg: --api-key provider=<key> sets"
+            " PROVIDER_API_KEY=<key>)"
+        ),
+        default=[],
+    )
+    group = parser.add_argument_group("Model settings")
+    group.add_argument(
+        "--list-models",
+        "--models",
+        metavar="MODEL",
+        help="List known models which match the (partial) MODEL name",
+    )
+    group.add_argument(
+        "--model-settings-file",
+        metavar="MODEL_SETTINGS_FILE",
+        default=".aider.model.settings.yml",
+        help="Specify a file with aider model settings for unknown models",
+    )
+    group.add_argument(
+        "--model-metadata-file",
+        metavar="MODEL_METADATA_FILE",
+        default=".aider.model.metadata.json",
+        help="Specify a file with context window and costs for unknown models",
+    )
 
     ##########
     group = parser.add_argument_group("Cache settings")
@@ -303,7 +311,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--stream",
-        action=argparse.BooleanOptionalAction,
+        action=argparse.Boolean OptionalAction,
         default=True,
         help="Enable/disable streaming responses (default: True)",
     )
@@ -398,7 +406,6 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -460,17 +467,6 @@ def get_parser(default_config_files, git_root):
         help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
     )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
     group.add_argument(
         "--skip-sanity-check-repo",
         action="store_true",
@@ -514,7 +510,7 @@ def get_parser(default_config_files, git_root):
         "--auto-test",
         action=argparse.BooleanOptionalAction,
         default=False,
-        help="Enable/disable automatic testing after changes (default: False)",
+        help="Enable/disable automatic testing after changes ( default: False)",
     )
     group.add_argument(
         "--test",
@@ -523,26 +519,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
     #########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
@@ -583,6 +559,26 @@ def get_parser(default_config_files, git_root):
         help="Show the version number and exit",
     )
 
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
+    )
+
     ##########
     group = parser.add_argument_group("Modes")
     group.add_argument(
