--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -66,19 +66,119 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
+    )
+    group.add_argument(
+        "--alias",
+        action="append",
+        metavar="ALIAS:MODEL",
+        help="Add a model alias (can be used multiple times)",
+    )
+    group.add_argument(
+        "--reasoning-effort",
+        type=str,
+        help="Set the reasoning_effort API parameter (default: not set)",
+    )
+    group.add_argument(
+        "--thinking-tokens",
+        type=str,
+        help="Set the thinking token budget for models that support it (default: not set)",
+    )
+    group.add_argument(
+        "--verify-ssl",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Verify the SSL cert when connecting to models (default: True)",
+    )
+    group.add_argument(
+        "--timeout",
+        type=float,
+        default=None,
+        help="Timeout in seconds for API calls (default: None)",
+    )
+    group.add_argument(
+        "--edit-format",
+        "--chat-mode",
+        metavar="EDIT_FORMAT",
+        default=None,
+        help="Specify what edit format the LLM should use (default depends on model)",
+    )
+    group.add_argument(
+        "--architect",
+        action="store_const",
+        dest="edit_format",
+        const="architect",
+        help="Use architect edit format for the main chat",
+    )
+    group.add_argument(
+        "--auto-accept-architect",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable automatic acceptance of architect changes (default: True)",
+    )
+    group.add_argument(
+        "--weak-model",
+        metavar="WEAK_MODEL",
+        default=None,
+        help=(
+            "Specify the model to use for commit messages and chat history summarization (default"
+            " depends on --model)"
+        ),
+    )
+    group.add_argument(
+        "--editor-model",
+        metavar="EDITOR_MODEL",
+        default=None,
+        help="Specify the model to use for editor tasks (default depends on --model)",
+    )
+    group.add_argument(
+        "--editor-edit-format",
+        metavar="EDITOR_EDIT_FORMAT",
+        default=None,
+        help="Specify the edit format for the editor model (default: depends on editor model)",
+    )
+    group.add_argument(
+        "--show-model-warnings",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Only work with models that have meta-data available (default: True)",
+    )
+    group.add_argument(
+        "--check-model-accepts-settings",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help=(
+            "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
+        ),
+    )
+    group.add_argument(
+        "--max-chat-history-tokens",
+        type=int,
+        default=None,
+        help=(
+            "Soft limit on tokens for chat history, after which summarization begins."
+            " If unspecified, defaults to the model's max_chat_history_tokens."
+        ),
+    )
+    # This is a duplicate of the argument in the preparser and is a no-op by this time of
+    # argument parsing, but it's here so that the help is displayed as expected.
+    group.add_argument(
+        "--env-file",
+        metavar="ENV_FILE",
+        default=default_env_file(git_root),
+        help="Specify the .env file to load (default: .env in git root)",
     )
     group.add_argument(
         "--set-env",
@@ -116,98 +216,6 @@         default=".aider.model.metadata.json",
         help="Specify a file with context window and costs for unknown models",
     )
-    group.add_argument(
-        "--alias",
-        action="append",
-        metavar="ALIAS:MODEL",
-        help="Add a model alias (can be used multiple times)",
-    )
-    group.add_argument(
-        "--reasoning-effort",
-        type=str,
-        help="Set the reasoning_effort API parameter (default: not set)",
-    )
-    group.add_argument(
-        "--thinking-tokens",
-        type=str,
-        help="Set the thinking token budget for models that support it (default: not set)",
-    )
-    group.add_argument(
-        "--verify-ssl",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Verify the SSL cert when connecting to models (default: True)",
-    )
-    group.add_argument(
-        "--timeout",
-        type=float,
-        default=None,
-        help="Timeout in seconds for API calls (default: None)",
-    )
-    group.add_argument(
-        "--edit-format",
-        "--chat-mode",
-        metavar="EDIT_FORMAT",
-        default=None,
-        help="Specify what edit format the LLM should use (default depends on model)",
-    )
-    group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
-    )
-    group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
-    )
-    group.add_argument(
-        "--weak-model",
-        metavar="WEAK_MODEL",
-        default=None,
-        help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
-        ),
-    )
-    group.add_argument(
-        "--editor-model",
-        metavar="EDITOR_MODEL",
-        default=None,
-        help="Specify the model to use for editor tasks (default depends on --model)",
-    )
-    group.add_argument(
-        "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
-        default=None,
-        help="Specify the edit format for the editor model (default: depends on editor model)",
-    )
-    group.add_argument(
-        "--show-model-warnings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Only work with models that have meta-data available (default: True)",
-    )
-    group.add_argument(
-        "--check-model-accepts-settings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help=(
-            "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
-        ),
-    )
-    group.add_argument(
-        "--max-chat-history-tokens",
-        type=int,
-        default=None,
-        help=(
-            "Soft limit on tokens for chat history, after which summarization begins."
-            " If unspecified, defaults to the model's max_chat_history_tokens."
-        ),
-    )
 
     ##########
     group = parser.add_argument_group("Cache settings")
@@ -303,7 +311,7 @@     )
     group.add_argument(
         "--stream",
-        action=argparse.BooleanOptionalAction,
+        action=argparse.Boolean OptionalAction,
         default=True,
         help="Enable/disable streaming responses (default: True)",
     )
@@ -398,7 +406,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -461,17 +468,6 @@         default=False,
     )
     group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
-    group.add_argument(
         "--skip-sanity-check-repo",
         action="store_true",
         help="Skip the sanity check for the git repository (default: False)",
@@ -514,32 +510,12 @@         "--auto-test",
         action=argparse.BooleanOptionalAction,
         default=False,
-        help="Enable/disable automatic testing after changes (default: False)",
+        help="Enable/disable automatic testing after changes ( default: False)",
     )
     group.add_argument(
         "--test",
         action="store_true",
         help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
         default=False,
     )
 
@@ -581,6 +557,26 @@         action="version",
         version=f"%(prog)s {__version__}",
         help="Show the version number and exit",
+    )
+
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
     )
 
     ##########
