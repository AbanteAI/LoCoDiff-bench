--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -8,11 +8,7 @@ import configargparse
 
 from aider import __version__
-from aider.args_formatter import (
-    DotEnvFormatter,
-    MarkdownHelpFormatter,
-    YamlHelpFormatter,
-)
+from aider.args_formatter import MarkdownHelpFormatter, YamlHelpFormatter
 from aider.deprecated import add_deprecated_model_args
 
 from .dump import dump  # noqa: F401
@@ -36,9 +32,12 @@         description="aider is AI pair programming in your terminal",
         add_config_file_help=True,
         default_config_files=default_config_files,
-        config_file_parser_class=configargparse.YAMLConfigFileParser,
         auto_env_var_prefix="AIDER_",
-    )
+        formatter_class=MarkdownHelpFormatter,
+    )
+    parser.formatter_class = MarkdownHelpFormatter
+
+    ##########
     group = parser.add_argument_group("Main model")
     group.add_argument(
         "files", metavar="FILE", nargs="*", help="files to edit with an LLM (optional)"
@@ -51,6 +50,11 @@     )
 
     ##########
+    group = parser.add_argument_group("Deprecated model settings")
+    # Add deprecated model shortcut arguments
+    add_deprecated_model_args(parser, group)
+
+    ##########
     group = parser.add_argument_group("API Keys and settings")
     group.add_argument(
         "--openai-api-key",
@@ -66,19 +70,19 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -97,6 +101,8 @@         ),
         default=[],
     )
+
+    ##########
     group = parser.add_argument_group("Model settings")
     group.add_argument(
         "--list-models",
@@ -123,6 +129,18 @@         help="Add a model alias (can be used multiple times)",
     )
     group.add_argument(
+        "--verify-ssl",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Verify the SSL cert when connecting to models (default: True)",
+    )
+    group.add_argument(
+        "--timeout",
+        type=float,
+        default=None,
+        help="Timeout in seconds for API calls (default: None)",
+    )
+    group.add_argument(
         "--reasoning-effort",
         type=str,
         help="Set the reasoning_effort API parameter (default: not set)",
@@ -131,65 +149,6 @@         "--thinking-tokens",
         type=str,
         help="Set the thinking token budget for models that support it (default: not set)",
-    )
-    group.add_argument(
-        "--verify-ssl",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Verify the SSL cert when connecting to models (default: True)",
-    )
-    group.add_argument(
-        "--timeout",
-        type=float,
-        default=None,
-        help="Timeout in seconds for API calls (default: None)",
-    )
-    group.add_argument(
-        "--edit-format",
-        "--chat-mode",
-        metavar="EDIT_FORMAT",
-        default=None,
-        help="Specify what edit format the LLM should use (default depends on model)",
-    )
-    group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
-    )
-    group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
-    )
-    group.add_argument(
-        "--weak-model",
-        metavar="WEAK_MODEL",
-        default=None,
-        help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
-        ),
-    )
-    group.add_argument(
-        "--editor-model",
-        metavar="EDITOR_MODEL",
-        default=None,
-        help="Specify the model to use for editor tasks (default depends on --model)",
-    )
-    group.add_argument(
-        "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
-        default=None,
-        help="Specify the edit format for the editor model (default: depends on editor model)",
-    )
-    group.add_argument(
-        "--show-model-warnings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Only work with models that have meta-data available (default: True)",
     )
     group.add_argument(
         "--check-model-accepts-settings",
@@ -251,10 +210,14 @@     ##########
     group = parser.add_argument_group("History Files")
     default_input_history_file = (
-        os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
+        os.path.join(git_root, ".aider.input.history")
+        if git_root
+        else ".aider.input.history"
     )
     default_chat_history_file = (
-        os.path.join(git_root, ".aider.chat.history.md") if git_root else ".aider.chat.history.md"
+        os.path.join(git_root, ".aider.chat.history.md")
+        if git_root
+        else ".aider.chat.history.md"
     )
     group.add_argument(
         "--input-history-file",
@@ -374,12 +337,6 @@             " see https://pygments.org/styles for available themes)"
         ),
     )
-    group.add_argument(
-        "--show-diffs",
-        action="store_true",
-        help="Show diffs when committing changes (default: False)",
-        default=False,
-    )
 
     ##########
     group = parser.add_argument_group("Git settings")
@@ -398,7 +355,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -409,14 +365,14 @@     group.add_argument(
         "--subtree-only",
         action="store_true",
+        default=False,
         help="Only consider files in the current subtree of the git repository",
-        default=False,
     )
     group.add_argument(
         "--auto-commits",
         action=argparse.BooleanOptionalAction,
         default=True,
-        help="Enable/disable auto commit of LLM changes (default: True)",
+        help="Enable/disable auto commits of LLM changes (default: True)",
     )
     group.add_argument(
         "--dirty-commits",
@@ -425,47 +381,6 @@         help="Enable/disable commits when repo is found dirty (default: True)",
     )
     group.add_argument(
-        "--attribute-author",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider code changes in the git author name (default: True)",
-    )
-    group.add_argument(
-        "--attribute-committer",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider commits in the git committer name (default: True)",
-    )
-    group.add_argument(
-        "--attribute-commit-message-author",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Prefix commit messages with 'aider: ' if aider authored the changes (default: False)",
-    )
-    group.add_argument(
-        "--attribute-commit-message-committer",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Prefix all commit messages with 'aider: ' (default: False)",
-    )
-    group.add_argument(
-        "--git-commit-verify",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
-    )
-    group.add_argument(
-        "--commit",
-        action="store_true",
-        help="Commit all pending changes with a suitable commit message, then exit",
-        default=False,
-    )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
         "--dry-run",
         action=argparse.BooleanOptionalAction,
         default=False,
@@ -474,113 +389,30 @@     group.add_argument(
         "--skip-sanity-check-repo",
         action="store_true",
+        default=False,
         help="Skip the sanity check for the git repository (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
-    group = parser.add_argument_group("Fixing and committing")
-    group.add_argument(
-        "--lint",
-        action="store_true",
-        help="Lint and fix provided files, or dirty files if none provided",
-        default=False,
-    )
-    group.add_argument(
-        "--lint-cmd",
-        action="append",
-        help=(
-            'Specify lint commands to run for different languages, eg: "python: flake8'
-            ' --select=..." (can be used multiple times)'
-        ),
-        default=[],
-    )
-    group.add_argument(
-        "--auto-lint",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic linting after changes (default: True)",
-    )
-    group.add_argument(
-        "--test-cmd",
-        help="Specify command to run tests",
-        default=[],
-    )
-    group.add_argument(
-        "--auto-test",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable automatic testing after changes (default: False)",
-    )
-    group.add_argument(
-        "--test",
-        action="store_true",
-        help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
-    #########
+    )
+
+    ##########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
         "--just-check-update",
         action="store_true",
+        default=False,
         help="Check for updates and return status in the exit code",
-        default=False,
-    )
-    group.add_argument(
-        "--check-update",
-        action=argparse.BooleanOptionalAction,
-        help="Check for new aider versions on launch",
-        default=True,
-    )
-    group.add_argument(
-        "--show-release-notes",
-        action=argparse.BooleanOptionalAction,
-        help="Show release notes on first run of new version (default: None, ask user)",
-        default=None,
     )
     group.add_argument(
         "--install-main-branch",
         action="store_true",
+        default=False,
         help="Install the latest version from the main branch",
-        default=False,
     )
     group.add_argument(
         "--upgrade",
         "--update",
         action="store_true",
+        default=False,
         help="Upgrade aider to the latest version from PyPI",
-        default=False,
-    )
-    group.add_argument(
-        "--version",
-        action="version",
-        version=f"%(prog)s {__version__}",
-        help="Show the version number and exit",
     )
 
     ##########
@@ -591,7 +423,8 @@         "-m",
         metavar="COMMAND",
         help=(
-            "Specify a single message to send the LLM, process reply then exit (disables chat mode)"
+            "Specify a single message to send the LLM, process reply then exit"
+            " (disables chat mode)"
         ),
     )
     group.add_argument(
@@ -604,46 +437,73 @@         ),
     )
     group.add_argument(
-        "--gui",
-        "--browser",
-        action=argparse.BooleanOptionalAction,
-        help="Run aider in your browser (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--copy-paste",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
-    )
-    group.add_argument(
         "--apply",
         metavar="FILE",
         help="Apply the changes from the given file instead of running the chat (debug)",
     )
     group.add_argument(
-        "--apply-clipboard-edits",
-        action="store_true",
-        help="Apply clipboard contents as edits using the main model's editor format",
-        default=False,
-    )
-    group.add_argument(
         "--exit",
         action="store_true",
+        default=False,
         help="Do all startup activities then exit before accepting user input (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-repo-map",
-        action="store_true",
-        help="Print the repo map and exit (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-prompts",
-        action="store_true",
-        help="Print the system prompts and exit (debug)",
-        default=False,
+    )
+    group.add_argument(
+        "--yes-always",
+        action="store_true",
+        default=None,
+        help="Always say yes to every confirmation",
+    )
+    group.add_argument(
+        "-v",
+        "--verbose",
+        action="store_true",
+        default=False,
+        help="Enable verbose output",
+    )
+    group.add_argument(
+        "--gui",
+        "--browser",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Run aider in your browser (default: False)",
+    )
+    group.add_argument(
+        "--copy-paste",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
+    )
+    group.add_argument(
+        "--load",
+        metavar="LOAD_FILE",
+        help="Load and execute /commands from a file on launch",
+    )
+
+    ##########
+    group = parser.add_argument_group("Other settings")
+    group.add_argument(
+        "--file",
+        action="append",
+        metavar="FILE",
+        help="specify a file to edit (can be used multiple times)",
+    )
+    group.add_argument(
+        "--read",
+        action="append",
+        metavar="FILE",
+        help="specify a read-only file (can be used multiple times)",
+    )
+    group.add_argument(
+        "--vim",
+        action="store_true",
+        default=False,
+        help="Use VI editing mode in the terminal (default: False)",
+    )
+    group.add_argument(
+        "--chat-language",
+        metavar="CHAT_LANGUAGE",
+        default=None,
+        help="Specify the language to use in the chat (default: None, uses system settings)",
     )
 
     ##########
@@ -668,184 +528,4 @@         help="Specify the input device name for voice recording",
     )
 
-    ######
-    group = parser.add_argument_group("Other settings")
-    group.add_argument(
-        "--file",
-        action="append",
-        metavar="FILE",
-        help="specify a file to edit (can be used multiple times)",
-    )
-    group.add_argument(
-        "--read",
-        action="append",
-        metavar="FILE",
-        help="specify a read-only file (can be used multiple times)",
-    )
-    group.add_argument(
-        "--vim",
-        action="store_true",
-        help="Use VI editing mode in the terminal (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--chat-language",
-        metavar="CHAT_LANGUAGE",
-        default=None,
-        help="Specify the language to use in the chat (default: None, uses system settings)",
-    )
-    group.add_argument(
-        "--yes-always",
-        action="store_true",
-        help="Always say yes to every confirmation",
-        default=None,
-    )
-    group.add_argument(
-        "-v",
-        "--verbose",
-        action="store_true",
-        help="Enable verbose output",
-        default=False,
-    )
-    group.add_argument(
-        "--load",
-        metavar="LOAD_FILE",
-        help="Load and execute /commands from a file on launch",
-    )
-    group.add_argument(
-        "--encoding",
-        default="utf-8",
-        help="Specify the encoding for input and output (default: utf-8)",
-    )
-    group.add_argument(
-        "--line-endings",
-        choices=["platform", "lf", "crlf"],
-        default="platform",
-        help="Line endings to use when writing files (default: platform)",
-    )
-    group.add_argument(
-        "-c",
-        "--config",
-        is_config_file=True,
-        metavar="CONFIG_FILE",
-        help=(
-            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
-            " or home directory)"
-        ),
-    )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
-    group.add_argument(
-        "--env-file",
-        metavar="ENV_FILE",
-        default=default_env_file(git_root),
-        help="Specify the .env file to load (default: .env in git root)",
-    )
-    group.add_argument(
-        "--suggest-shell-commands",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable suggesting shell commands (default: True)",
-    )
-    group.add_argument(
-        "--fancy-input",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable fancy input with history and completion (default: True)",
-    )
-    group.add_argument(
-        "--multiline",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable multi-line input mode with Meta-Enter to submit (default: False)",
-    )
-    group.add_argument(
-        "--notifications",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help=(
-            "Enable/disable terminal bell notifications when LLM responses are ready (default:"
-            " False)"
-        ),
-    )
-    group.add_argument(
-        "--notifications-command",
-        metavar="COMMAND",
-        default=None,
-        help=(
-            "Specify a command to run for notifications instead of the terminal bell. If not"
-            " specified, a default command for your OS may be used."
-        ),
-    )
-    group.add_argument(
-        "--detect-urls",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable detection and offering to add URLs to chat (default: True)",
-    )
-    group.add_argument(
-        "--editor",
-        help="Specify which editor to use for the /editor command",
-    )
-
-    ##########
-    group = parser.add_argument_group("Deprecated model settings")
-    # Add deprecated model shortcut arguments
-    add_deprecated_model_args(parser, group)
-
-    return parser
-
-
-def get_md_help():
-    os.environ["COLUMNS"] = "70"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = MarkdownHelpFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def get_sample_yaml():
-    os.environ["COLUMNS"] = "100"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = YamlHelpFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def get_sample_dotenv():
-    os.environ["COLUMNS"] = "120"
-    sys.argv = ["aider"]
-    parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
-    parser.formatter_class = DotEnvFormatter
-
-    return argparse.ArgumentParser.format_help(parser)
-
-
-def main():
-    arg = sys.argv[1] if len(sys.argv[1:]) else None
-
-    if arg == "md":
-        print(get_md_help())
-    elif arg == "dotenv":
-        print(get_sample_dotenv())
-    else:
-        print(get_sample_yaml())
-
-
-if __name__ == "__main__":
-    status = main()
-    sys.exit(status)+    return parser