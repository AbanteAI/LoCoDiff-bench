
index e64aa9de..39492ebb 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmp602omv1b_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmphsfqbl6u_actual.txt	
@@ -7,7 +7,6 @@ from pathlib import Path
 
 import configargparse
 
-from aider import __version__
 from aider.args_formatter import (
     DotEnvFormatter,
     MarkdownHelpFormatter,
@@ -66,19 +65,19 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -97,25 +96,6 @@ def get_parser(default_config_files, git_root):
         ),
         default=[],
     )
-    group = parser.add_argument_group("Model settings")
-    group.add_argument(
-        "--list-models",
-        "--models",
-        metavar="MODEL",
-        help="List known models which match the (partial) MODEL name",
-    )
-    group.add_argument(
-        "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
-        default=".aider.model.settings.yml",
-        help="Specify a file with aider model settings for unknown models",
-    )
-    group.add_argument(
-        "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
-        default=".aider.model.metadata.json",
-        help="Specify a file with context window and costs for unknown models",
-    )
     group.add_argument(
         "--alias",
         action="append",
@@ -144,6 +124,26 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Timeout in seconds for API calls (default: None)",
     )
+
+    group = parser.add_argument_group("Model settings")
+    group.add_argument(
+        "--list-models",
+        "--models",
+        metavar="MODEL",
+        help="List known models which match the (partial) MODEL name",
+    )
+    group.add_argument(
+        "--model-settings-file",
+        metavar="MODEL_SETTINGS_FILE",
+        default=".aider.model.settings.yml",
+        help="Specify a file with aider model settings for unknown models",
+    )
+    group.add_argument(
+        "--model-metadata-file",
+        metavar="MODEL_METADATA_FILE",
+        default=".aider.model.metadata.json",
+        help="Specify a file with context window and costs for unknown models",
+    )
     group.add_argument(
         "--edit-format",
         "--chat-mode",
@@ -199,6 +199,7 @@ def get_parser(default_config_files, git_root):
             "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
         ),
     )
+
     group.add_argument(
         "--max-chat-history-tokens",
         type=int,
@@ -398,7 +399,6 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -483,6 +483,12 @@ def get_parser(default_config_files, git_root):
         default=False,
         help="Enable/disable watching files for ai coding comments (default: False)",
     )
+    group.add_argument(
+        "--copy-paste",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
+    )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
@@ -523,26 +529,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
     #########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
@@ -610,12 +596,6 @@ def get_parser(default_config_files, git_root):
         help="Run aider in your browser (default: False)",
         default=False,
     )
-    group.add_argument(
-        "--copy-paste",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
-    )
     group.add_argument(
         "--apply",
         metavar="FILE",
@@ -747,12 +727,6 @@ def get_parser(default_config_files, git_root):
         default=True,
         help="Enable/disable suggesting shell commands (default: True)",
     )
-    group.add_argument(
-        "--fancy-input",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable fancy input with history and completion (default: True)",
-    )
     group.add_argument(
         "--multiline",
         action=argparse.BooleanOptionalAction,
@@ -788,6 +762,26 @@ def get_parser(default_config_files, git_root):
         help="Specify which editor to use for the /editor command",
     )
 
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
+    )
+
     ##########
     group = parser.add_argument_group("Deprecated model settings")
     # Add deprecated model shortcut arguments
