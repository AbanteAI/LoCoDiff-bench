--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -7,7 +7,6 @@ 
 import configargparse
 
-from aider import __version__
 from aider.args_formatter import (
     DotEnvFormatter,
     MarkdownHelpFormatter,
@@ -66,19 +65,19 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -97,6 +96,35 @@         ),
         default=[],
     )
+    group.add_argument(
+        "--alias",
+        action="append",
+        metavar="ALIAS:MODEL",
+        help="Add a model alias (can be used multiple times)",
+    )
+    group.add_argument(
+        "--reasoning-effort",
+        type=str,
+        help="Set the reasoning_effort API parameter (default: not set)",
+    )
+    group.add_argument(
+        "--thinking-tokens",
+        type=str,
+        help="Set the thinking token budget for models that support it (default: not set)",
+    )
+    group.add_argument(
+        "--verify-ssl",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Verify the SSL cert when connecting to models (default: True)",
+    )
+    group.add_argument(
+        "--timeout",
+        type=float,
+        default=None,
+        help="Timeout in seconds for API calls (default: None)",
+    )
+
     group = parser.add_argument_group("Model settings")
     group.add_argument(
         "--list-models",
@@ -115,34 +143,6 @@         metavar="MODEL_METADATA_FILE",
         default=".aider.model.metadata.json",
         help="Specify a file with context window and costs for unknown models",
-    )
-    group.add_argument(
-        "--alias",
-        action="append",
-        metavar="ALIAS:MODEL",
-        help="Add a model alias (can be used multiple times)",
-    )
-    group.add_argument(
-        "--reasoning-effort",
-        type=str,
-        help="Set the reasoning_effort API parameter (default: not set)",
-    )
-    group.add_argument(
-        "--thinking-tokens",
-        type=str,
-        help="Set the thinking token budget for models that support it (default: not set)",
-    )
-    group.add_argument(
-        "--verify-ssl",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Verify the SSL cert when connecting to models (default: True)",
-    )
-    group.add_argument(
-        "--timeout",
-        type=float,
-        default=None,
-        help="Timeout in seconds for API calls (default: None)",
     )
     group.add_argument(
         "--edit-format",
@@ -199,6 +199,7 @@             "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
         ),
     )
+
     group.add_argument(
         "--max-chat-history-tokens",
         type=int,
@@ -398,7 +399,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -483,6 +483,12 @@         default=False,
         help="Enable/disable watching files for ai coding comments (default: False)",
     )
+    group.add_argument(
+        "--copy-paste",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
+    )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
@@ -520,26 +526,6 @@         "--test",
         action="store_true",
         help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
         default=False,
     )
 
@@ -609,12 +595,6 @@         action=argparse.BooleanOptionalAction,
         help="Run aider in your browser (default: False)",
         default=False,
-    )
-    group.add_argument(
-        "--copy-paste",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
     )
     group.add_argument(
         "--apply",
@@ -748,12 +728,6 @@         help="Enable/disable suggesting shell commands (default: True)",
     )
     group.add_argument(
-        "--fancy-input",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable fancy input with history and completion (default: True)",
-    )
-    group.add_argument(
         "--multiline",
         action=argparse.BooleanOptionalAction,
         default=False,
@@ -786,6 +760,26 @@     group.add_argument(
         "--editor",
         help="Specify which editor to use for the /editor command",
+    )
+
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
     )
 
     ##########
