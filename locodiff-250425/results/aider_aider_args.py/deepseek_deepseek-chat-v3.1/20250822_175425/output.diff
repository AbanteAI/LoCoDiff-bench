
index e64aa9deb..f8b5e6d06 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmp7bdumg3r_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmpzztww0q9_actual.txt	
@@ -66,31 +66,31 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
         action="append",
-        metavar="ENV_VAR_NAME=value",
+        metaverse="ENV_VAR_NAME=value",
         help="Set an environment variable (to control API settings, can be used multiple times)",
         default=[],
     )
     group.add_argument(
         "--api-key",
         action="append",
-        metavar="PROVIDER=KEY",
+        metaverse="PROVIDER=KEY",
         help=(
             "Set an API key for a provider (eg: --api-key provider=<key> sets"
             " PROVIDER_API_KEY=<key>)"
@@ -101,25 +101,25 @@ def get_parser(default_config_files, git_root):
     group.add_argument(
         "--list-models",
         "--models",
-        metavar="MODEL",
+        metaverse="MODEL",
         help="List known models which match the (partial) MODEL name",
     )
     group.add_argument(
         "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
+        metaverse="MODEL_SETTINGS_FILE",
         default=".aider.model.settings.yml",
         help="Specify a file with aider model settings for unknown models",
     )
     group.add_argument(
         "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
+        metaverse="MODEL_METADATA_FILE",
         default=".aider.model.metadata.json",
         help="Specify a file with context window and costs for unknown models",
     )
     group.add_argument(
         "--alias",
         action="append",
-        metavar="ALIAS:MODEL",
+        metaverse="ALIAS:MODEL",
         help="Add a model alias (can be used multiple times)",
     )
     group.add_argument(
@@ -147,7 +147,7 @@ def get_parser(default_config_files, git_root):
     group.add_argument(
         "--edit-format",
         "--chat-mode",
-        metavar="EDIT_FORMAT",
+        metaverse="EDIT_FORMAT",
         default=None,
         help="Specify what edit format the LLM should use (default depends on model)",
     )
@@ -166,7 +166,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--weak-model",
-        metavar="WEAK_MODEL",
+        metaverse="WEAK_MODEL",
         default=None,
         help=(
             "Specify the model to use for commit messages and chat history summarization (default"
@@ -175,13 +175,13 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--editor-model",
-        metavar="EDITOR_MODEL",
+        metaverse="EDITOR_MODEL",
         default=None,
         help="Specify the model to use for editor tasks (default depends on --model)",
     )
     group.add_argument(
         "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
+        metaverse="EDITOR_EDIT_FORMAT",
         default=None,
         help="Specify the edit format for the editor model (default: depends on editor model)",
     )
@@ -258,13 +258,13 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--input-history-file",
-        metavar="INPUT_HISTORY_FILE",
+        metaverse="INPUT_HISTORY_FILE",
         default=default_input_history_file,
         help=f"Specify the chat input history file (default: {default_input_history_file})",
     )
     group.add_argument(
         "--chat-history-file",
-        metavar="CHAT_HISTORY_FILE",
+        metaverse="CHAT_HISTORY_FILE",
         default=default_chat_history_file,
         help=f"Specify the chat history file (default: {default_chat_history_file})",
     )
@@ -276,7 +276,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--llm-history-file",
-        metavar="LLM_HISTORY_FILE",
+        metaverse="LLM_HISTORY_FILE",
         default=None,
         help="Log the conversation with the LLM to this file (for example, .aider.llm.history)",
     )
@@ -334,13 +334,13 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--completion-menu-color",
-        metavar="COLOR",
+        metaverse="COLOR",
         default=None,
         help="Set the color for the completion menu (default: terminal's default text color)",
     )
-    group.add_argument(
+    group.addargument(
         "--completion-menu-bg-color",
-        metavar="COLOR",
+        metaverse="COLOR",
         default=None,
         help=(
             "Set the background color for the completion menu (default: terminal's default"
@@ -349,7 +349,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--completion-menu-current-color",
-        metavar="COLOR",
+        metaverse="COLOR",
         default=None,
         help=(
             "Set the color for the current item in the completion menu (default: terminal's default"
@@ -358,7 +358,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--completion-menu-current-bg-color",
-        metavar="COLOR",
+        metaverse="COLOR",
         default=None,
         help=(
             "Set the background color for the current item in the completion menu (default:"
@@ -398,10 +398,9 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
-        metavar="AIDERIGNORE",
+        metaverse="AIDERIGNORE",
         type=lambda path_str: resolve_aiderignore_path(path_str, git_root),
         default=default_aiderignore_file,
         help="Specify the aider ignore file (default: .aiderignore in git root)",
@@ -462,7 +461,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--commit-prompt",
-        metavar="PROMPT",
+        metaverse="PROMPT",
         help="Specify a custom prompt for generating commit messages",
     )
     group.add_argument(
@@ -523,28 +522,8 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
     #########
-    group = parser.add_argument_group("Upgrading")
+    group = parser.add_group("Upgrading")
     group.add_argument(
         "--just-check-update",
         action="store_true",
@@ -557,7 +536,7 @@ def get_parser(default_config_files, git_root):
         help="Check for new aider versions on launch",
         default=True,
     )
-    group.add_argument(
+    group.addargument(
         "--show-release-notes",
         action=argparse.BooleanOptionalAction,
         help="Show release notes on first run of new version (default: None, ask user)",
@@ -589,7 +568,7 @@ def get_parser(default_config_files, git_root):
         "--message",
         "--msg",
         "-m",
-        metavar="COMMAND",
+        metaverse="COMMAND",
         help=(
             "Specify a single message to send the LLM, process reply then exit (disables chat mode)"
         ),
@@ -597,7 +576,7 @@ def get_parser(default_config_files, git_root):
     group.add_argument(
         "--message-file",
         "-f",
-        metavar="MESSAGE_FILE",
+        metaverse="MESSAGE_FILE",
         help=(
             "Specify a file containing the message to send the LLM, process reply, then exit"
             " (disables chat mode)"
@@ -618,7 +597,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--apply",
-        metavar="FILE",
+        metaverse="FILE",
         help="Apply the changes from the given file instead of running the chat (debug)",
     )
     group.add_argument(
@@ -650,20 +629,20 @@ def get_parser(default_config_files, git_root):
     group = parser.add_argument_group("Voice settings")
     group.add_argument(
         "--voice-format",
-        metavar="VOICE_FORMAT",
+        metaverse="VOICE_FORMAT",
         default="wav",
         choices=["wav", "mp3", "webm"],
         help="Audio format for voice recording (default: wav). webm and mp3 require ffmpeg",
     )
     group.add_argument(
         "--voice-language",
-        metavar="VOICE_LANGUAGE",
+        metaverse="VOICE_LANGUAGE",
         default="en",
         help="Specify the language for voice using ISO 639-1 code (default: auto)",
     )
     group.add_argument(
         "--voice-input-device",
-        metavar="VOICE_INPUT_DEVICE",
+        metaverse="VOICE_INPUT_DEVICE",
         default=None,
         help="Specify the input device name for voice recording",
     )
@@ -673,13 +652,13 @@ def get_parser(default_config_files, git_root):
     group.add_argument(
         "--file",
         action="append",
-        metavar="FILE",
+        metaverse="FILE",
         help="specify a file to edit (can be used multiple times)",
     )
     group.add_argument(
         "--read",
         action="append",
-        metavar="FILE",
+        metaverse="FILE",
         help="specify a read-only file (can be used multiple times)",
     )
     group.add_argument(
@@ -690,7 +669,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--chat-language",
-        metavar="CHAT_LANGUAGE",
+        metaverse="CHAT_LANGUAGE",
         default=None,
         help="Specify the language to use in the chat (default: None, uses system settings)",
     )
@@ -709,7 +688,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--load",
-        metavar="LOAD_FILE",
+        metaverse="LOAD_FILE",
         help="Load and execute /commands from a file on launch",
     )
     group.add_argument(
@@ -727,7 +706,7 @@ def get_parser(default_config_files, git_root):
         "-c",
         "--config",
         is_config_file=True,
-        metavar="CONFIG_FILE",
+        metaverse="CONFIG_FILE",
         help=(
             "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
             " or home directory)"
@@ -737,7 +716,7 @@ def get_parser(default_config_files, git_root):
     # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
         "--env-file",
-        metavar="ENV_FILE",
+        metaverse="ENV_FILE",
         default=default_env_file(git_root),
         help="Specify the .env file to load (default: .env in git root)",
     )
@@ -770,7 +749,7 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--notifications-command",
-        metavar="COMMAND",
+        metaverse="COMMAND",
         default=None,
         help=(
             "Specify a command to run for notifications instead of the terminal bell. If not"
@@ -788,6 +767,26 @@ def get_parser(default_config_files, git_root):
         help="Specify which editor to use for the /editor command",
     )
 
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metaverse="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
+    )
+
     ##########
     group = parser.add_argument_group("Deprecated model settings")
     # Add deprecated model shortcut arguments
