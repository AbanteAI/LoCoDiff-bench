--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -66,19 +66,19 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -461,11 +461,6 @@         default=False,
     )
     group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
         "--dry-run",
         action=argparse.BooleanOptionalAction,
         default=False,
@@ -476,12 +471,6 @@         action="store_true",
         help="Skip the sanity check for the git repository (default: False)",
         default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
     )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
@@ -515,7 +504,7 @@         action=argparse.BooleanOptionalAction,
         default=False,
         help="Enable/disable automatic testing after changes (default: False)",
-    )
+    )  
     group.add_argument(
         "--test",
         action="store_true",
@@ -686,7 +675,7 @@         "--vim",
         action="store_true",
         help="Use VI editing mode in the terminal (default: False)",
-        default=False,
+        default=False, 
     )
     group.add_argument(
         "--chat-language",
@@ -709,7 +698,7 @@     )
     group.add_argument(
         "--load",
-        metavar="LOAD_FILE",
+        metavar="LOAD_FILE", 
         help="Load and execute /commands from a file on launch",
     )
     group.add_argument(
@@ -750,7 +739,7 @@     group.add_argument(
         "--fancy-input",
         action=argparse.BooleanOptionalAction,
-        default=True,
+        default=True, 
         help="Enable/disable fancy input with history and completion (default: True)",
     )
     group.add_argument(
@@ -758,6 +747,12 @@         action=argparse.BooleanOptionalAction,
         default=False,
         help="Enable/disable multi-line input mode with Meta-Enter to submit (default: False)",
+    )
+    group.add_argument(
+        "--detect-urls",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable detection and offering to add URLs to chat (default: True)",
     )
     group.add_argument(
         "--notifications",
@@ -776,12 +771,6 @@             "Specify a command to run for notifications instead of the terminal bell. If not"
             " specified, a default command for your OS may be used."
         ),
-    )
-    group.add_argument(
-        "--detect-urls",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable detection and offering to add URLs to chat (default: True)",
     )
     group.add_argument(
         "--editor",
@@ -810,7 +799,7 @@ 
 
 def get_sample_yaml():
-    os.environ["COLUMNS"] = "100"
+    os.environ["COLUMNS"] = "120"
     sys.argv = ["aider"]
     parser = get_parser([], None)
 
