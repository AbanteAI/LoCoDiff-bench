
index e64aa9de..4307a5fc 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmpn5m591wn_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmprd1k8zux_actual.txt	
@@ -66,19 +66,19 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -169,8 +169,8 @@ def get_parser(default_config_files, git_root):
         metavar="WEAK_MODEL",
         default=None,
         help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
+            "Specify the model to use for commit messages and chat history summarization"
+            " (default depends on --model)"
         ),
     )
     group.add_argument(
@@ -208,6 +208,14 @@ def get_parser(default_config_files, git_root):
             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
     )
+    # This is a duplicate of the argument in the preparser and is a no-op by this time of
+    # argument parsing, but it's here so that the help is displayed as expected.
+    group.add_argument(
+        "--env-file",
+        metavar="ENV_FILE",
+        default=default_env_file(git_root),
+        help="Specify the .env file to load (default: .env in git root)",
+    )
 
     ##########
     group = parser.add_argument_group("Cache settings")
@@ -465,6 +473,12 @@ def get_parser(default_config_files, git_root):
         metavar="PROMPT",
         help="Specify a custom prompt for generating commit messages",
     )
+    group.add_argument(
+        "--attribute-commit-message",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Prefix commit messages with 'aider: ' (default: False)",
+    )
     group.add_argument(
         "--dry-run",
         action=argparse.BooleanOptionalAction,
@@ -483,6 +497,12 @@ def get_parser(default_config_files, git_root):
         default=False,
         help="Enable/disable watching files for ai coding comments (default: False)",
     )
+    group.add_argument(
+        "--copy-paste",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
+    )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
@@ -523,26 +543,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
     #########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
@@ -610,12 +610,6 @@ def get_parser(default_config_files, git_root):
         help="Run aider in your browser (default: False)",
         default=False,
     )
-    group.add_argument(
-        "--copy-paste",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
-    )
     group.add_argument(
         "--apply",
         metavar="FILE",
@@ -628,83 +622,34 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
     group.add_argument(
-        "--exit",
+        "--yes-always",
         action="store_true",
-        help="Do all startup activities then exit before accepting user input (debug)",
-        default=False,
+        help="Always say yes to every confirmation",
+        default=None,
     )
     group.add_argument(
-        "--show-repo-map",
+        "-v",
+        "--verbose",
         action="store_true",
-        help="Print the repo map and exit (debug)",
+        help="Enable verbose output",
         default=False,
     )
     group.add_argument(
-        "--show-prompts",
+        "--exit",
         action="store_true",
-        help="Print the system prompts and exit (debug)",
+        help="Do all startup activities then exit before accepting user input (debug)",
         default=False,
     )
-
-    ##########
-    group = parser.add_argument_group("Voice settings")
-    group.add_argument(
-        "--voice-format",
-        metavar="VOICE_FORMAT",
-        default="wav",
-        choices=["wav", "mp3", "webm"],
-        help="Audio format for voice recording (default: wav). webm and mp3 require ffmpeg",
-    )
-    group.add_argument(
-        "--voice-language",
-        metavar="VOICE_LANGUAGE",
-        default="en",
-        help="Specify the language for voice using ISO 639-1 code (default: auto)",
-    )
-    group.add_argument(
-        "--voice-input-device",
-        metavar="VOICE_INPUT_DEVICE",
-        default=None,
-        help="Specify the input device name for voice recording",
-    )
-
-    ######
-    group = parser.add_argument_group("Other settings")
-    group.add_argument(
-        "--file",
-        action="append",
-        metavar="FILE",
-        help="specify a file to edit (can be used multiple times)",
-    )
-    group.add_argument(
-        "--read",
-        action="append",
-        metavar="FILE",
-        help="specify a read-only file (can be used multiple times)",
-    )
     group.add_argument(
-        "--vim",
+        "--show-repo-map",
         action="store_true",
-        help="Use VI editing mode in the terminal (default: False)",
+        help="Print the repo map and exit (debug)",
         default=False,
     )
     group.add_argument(
-        "--chat-language",
-        metavar="CHAT_LANGUAGE",
-        default=None,
-        help="Specify the language to use in the chat (default: None, uses system settings)",
-    )
-    group.add_argument(
-        "--yes-always",
-        action="store_true",
-        help="Always say yes to every confirmation",
-        default=None,
-    )
-    group.add_argument(
-        "-v",
-        "--verbose",
+        "--show-prompts",
         action="store_true",
-        help="Enable verbose output",
+        help="Print the system prompts and exit (debug)",
         default=False,
     )
     group.add_argument(
@@ -712,27 +657,6 @@ def get_parser(default_config_files, git_root):
         metavar="LOAD_FILE",
         help="Load and execute /commands from a file on launch",
     )
-    group.add_argument(
-        "--encoding",
-        default="utf-8",
-        help="Specify the encoding for input and output (default: utf-8)",
-    )
-    group.add_argument(
-        "--line-endings",
-        choices=["platform", "lf", "crlf"],
-        default="platform",
-        help="Line endings to use when writing files (default: platform)",
-    )
-    group.add_argument(
-        "-c",
-        "--config",
-        is_config_file=True,
-        metavar="CONFIG_FILE",
-        help=(
-            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
-            " or home directory)"
-        ),
-    )
     # This is a duplicate of the argument in the preparser and is a no-op by this time of
     # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
@@ -787,6 +711,42 @@ def get_parser(default_config_files, git_root):
         "--editor",
         help="Specify which editor to use for the /editor command",
     )
+    group.add_argument(
+        "--set-env",
+        action="append",
+        metavar="ENV_VAR_NAME=value",
+        help="Set an environment variable (can be used multiple times)",
+        default=[],
+    )
+    group.add_argument(
+        "--api-key",
+        action="append",
+        metavar="PROVIDER=KEY",
+        help="Set an API key for a provider (eg: --api-key anthropic=sk-123)",
+        default=[],
+    )
+
+    ##########
+    group = parser.add_argument_group("Voice settings")
+    group.add_argument(
+        "--voice-format",
+        metavar="VOICE_FORMAT",
+        default="wav",
+        choices=["wav", "mp3", "webm"],
+        help="Audio format for voice recording (default: wav). webm and mp3 require ffmpeg",
+    )
+    group.add_argument(
+        "--voice-language",
+        metavar="VOICE_LANGUAGE",
+        default="en",
+        help="Specify the language for voice using ISO 639-1 code (default: auto)",
+    )
+    group.add_argument(
+        "--voice-input-device",
+        metavar="VOICE_INPUT_DEVICE",
+        default=None,
+        help="Specify the input device name for voice recording",
+    )
 
     ##########
     group = parser.add_argument_group("Deprecated model settings")
