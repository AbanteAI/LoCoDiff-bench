
index e64aa9de..da99367b 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmpjzt5ycpi_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmp1myhhslx_actual.txt	
@@ -7,7 +7,7 @@ from pathlib import Path
 
 import configargparse
 
-from aider import __version__
+from aider import __version__, models
 from aider.args_formatter import (
     DotEnvFormatter,
     MarkdownHelpFormatter,
@@ -50,19 +50,22 @@ def get_parser(default_config_files, git_root):
         help="Specify the model to use for the main chat",
     )
 
+    # Add deprecated model shortcut arguments
+    add_deprecated_model_args(parser, group)
+
     ##########
     group = parser.add_argument_group("API Keys and settings")
     group.add_argument(
         "--openai-api-key",
-        help="Specify the OpenAI API key",
+        help="(deprecated, use --set-env OPENAI_API_KEY=<value>)",
     )
     group.add_argument(
         "--anthropic-api-key",
-        help="Specify the Anthropic API key",
+        help="(deprecated, use --set-env ANTHROPIC_API_KEY=<value>)",
     )
     group.add_argument(
         "--openai-api-base",
-        help="Specify the api base url",
+        help="(deprecated, use --set-env OPENAI_API_BASE=<value>)",
     )
     group.add_argument(
         "--openai-api-type",
@@ -97,31 +100,6 @@ def get_parser(default_config_files, git_root):
         ),
         default=[],
     )
-    group = parser.add_argument_group("Model settings")
-    group.add_argument(
-        "--list-models",
-        "--models",
-        metavar="MODEL",
-        help="List known models which match the (partial) MODEL name",
-    )
-    group.add_argument(
-        "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
-        default=".aider.model.settings.yml",
-        help="Specify a file with aider model settings for unknown models",
-    )
-    group.add_argument(
-        "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
-        default=".aider.model.metadata.json",
-        help="Specify a file with context window and costs for unknown models",
-    )
-    group.add_argument(
-        "--alias",
-        action="append",
-        metavar="ALIAS:MODEL",
-        help="Add a model alias (can be used multiple times)",
-    )
     group.add_argument(
         "--reasoning-effort",
         type=str,
@@ -208,20 +186,23 @@ def get_parser(default_config_files, git_root):
             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
     )
-
-    ##########
-    group = parser.add_argument_group("Cache settings")
     group.add_argument(
-        "--cache-prompts",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable caching of prompts (default: False)",
+        "--model-settings-file",
+        metavar="MODEL_SETTINGS_FILE",
+        default=".aider.model.settings.yml",
+        help="Specify a file with aider model settings for unknown models",
     )
     group.add_argument(
-        "--cache-keepalive-pings",
-        type=int,
-        default=0,
-        help="Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)",
+        "--model-metadata-file",
+        metavar="MODEL_METADATA_FILE",
+        default=".aider.model.metadata.json",
+        help="Specify a file with context window and costs for unknown models",
+    )
+    group.add_argument(
+        "--alias",
+        action="append",
+        metavar="ALIAS:MODEL",
+        help="Add a model alias (can be used multiple times)",
     )
 
     ##########
@@ -248,6 +229,21 @@ def get_parser(default_config_files, git_root):
         help="Multiplier for map tokens when no files are specified (default: 2)",
     )
 
+    ##########
+    group = parser.add_argument_group("Cache settings")
+    group.add_argument(
+        "--cache-prompts",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable caching of prompts (default: False)",
+    )
+    group.add_argument(
+        "--cache-keepalive-pings",
+        type=int,
+        default=0,
+        help="Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)",
+    )
+
     ##########
     group = parser.add_argument_group("History Files")
     default_input_history_file = (
@@ -398,7 +394,6 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -460,11 +455,6 @@ def get_parser(default_config_files, git_root):
         help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
     )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
     group.add_argument(
         "--dry-run",
         action=argparse.BooleanOptionalAction,
@@ -523,26 +513,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
     #########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
@@ -628,9 +598,16 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
     group.add_argument(
-        "--exit",
+        "--yes-always",
         action="store_true",
-        help="Do all startup activities then exit before accepting user input (debug)",
+        help="Always say yes to every confirmation",
+        default=None,
+    )
+    group.add_argument(
+        "-v",
+        "--verbose",
+        action="store_true",
+        help="Enable verbose output",
         default=False,
     )
     group.add_argument(
@@ -645,6 +622,12 @@ def get_parser(default_config_files, git_root):
         help="Print the system prompts and exit (debug)",
         default=False,
     )
+    group.add_argument(
+        "--exit",
+        action="store_true",
+        help="Do all startup activities then exit before accepting user input (debug)",
+        default=False,
+    )
 
     ##########
     group = parser.add_argument_group("Voice settings")
@@ -694,19 +677,6 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Specify the language to use in the chat (default: None, uses system settings)",
     )
-    group.add_argument(
-        "--yes-always",
-        action="store_true",
-        help="Always say yes to every confirmation",
-        default=None,
-    )
-    group.add_argument(
-        "-v",
-        "--verbose",
-        action="store_true",
-        help="Enable verbose output",
-        default=False,
-    )
     group.add_argument(
         "--load",
         metavar="LOAD_FILE",
@@ -733,8 +703,6 @@ def get_parser(default_config_files, git_root):
             " or home directory)"
         ),
     )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
         "--env-file",
         metavar="ENV_FILE",
