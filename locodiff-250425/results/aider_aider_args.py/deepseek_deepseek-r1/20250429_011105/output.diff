--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -7,7 +7,7 @@ 
 import configargparse
 
-from aider import __version__
+from aider import __version__, models
 from aider.args_formatter import (
     DotEnvFormatter,
     MarkdownHelpFormatter,
@@ -50,19 +50,22 @@         help="Specify the model to use for the main chat",
     )
 
+    # Add deprecated model shortcut arguments
+    add_deprecated_model_args(parser, group)
+
     ##########
     group = parser.add_argument_group("API Keys and settings")
     group.add_argument(
         "--openai-api-key",
-        help="Specify the OpenAI API key",
+        help="(deprecated, use --set-env OPENAI_API_KEY=<value>)",
     )
     group.add_argument(
         "--anthropic-api-key",
-        help="Specify the Anthropic API key",
+        help="(deprecated, use --set-env ANTHROPIC_API_KEY=<value>)",
     )
     group.add_argument(
         "--openai-api-base",
-        help="Specify the api base url",
+        help="(deprecated, use --set-env OPENAI_API_BASE=<value>)",
     )
     group.add_argument(
         "--openai-api-type",
@@ -97,31 +100,6 @@         ),
         default=[],
     )
-    group = parser.add_argument_group("Model settings")
-    group.add_argument(
-        "--list-models",
-        "--models",
-        metavar="MODEL",
-        help="List known models which match the (partial) MODEL name",
-    )
-    group.add_argument(
-        "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
-        default=".aider.model.settings.yml",
-        help="Specify a file with aider model settings for unknown models",
-    )
-    group.add_argument(
-        "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
-        default=".aider.model.metadata.json",
-        help="Specify a file with context window and costs for unknown models",
-    )
-    group.add_argument(
-        "--alias",
-        action="append",
-        metavar="ALIAS:MODEL",
-        help="Add a model alias (can be used multiple times)",
-    )
     group.add_argument(
         "--reasoning-effort",
         type=str,
@@ -208,6 +186,48 @@             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
     )
+    group.add_argument(
+        "--model-settings-file",
+        metavar="MODEL_SETTINGS_FILE",
+        default=".aider.model.settings.yml",
+        help="Specify a file with aider model settings for unknown models",
+    )
+    group.add_argument(
+        "--model-metadata-file",
+        metavar="MODEL_METADATA_FILE",
+        default=".aider.model.metadata.json",
+        help="Specify a file with context window and costs for unknown models",
+    )
+    group.add_argument(
+        "--alias",
+        action="append",
+        metavar="ALIAS:MODEL",
+        help="Add a model alias (can be used multiple times)",
+    )
+
+    ##########
+    group = parser.add_argument_group("Repomap settings")
+    group.add_argument(
+        "--map-tokens",
+        type=int,
+        default=None,
+        help="Suggested number of tokens to use for repo map, use 0 to disable",
+    )
+    group.add_argument(
+        "--map-refresh",
+        choices=["auto", "always", "files", "manual"],
+        default="auto",
+        help=(
+            "Control how often the repo map is refreshed. Options: auto, always, files, manual"
+            " (default: auto)"
+        ),
+    )
+    group.add_argument(
+        "--map-multiplier-no-files",
+        type=float,
+        default=2,
+        help="Multiplier for map tokens when no files are specified (default: 2)",
+    )
 
     ##########
     group = parser.add_argument_group("Cache settings")
@@ -225,30 +245,6 @@     )
 
     ##########
-    group = parser.add_argument_group("Repomap settings")
-    group.add_argument(
-        "--map-tokens",
-        type=int,
-        default=None,
-        help="Suggested number of tokens to use for repo map, use 0 to disable",
-    )
-    group.add_argument(
-        "--map-refresh",
-        choices=["auto", "always", "files", "manual"],
-        default="auto",
-        help=(
-            "Control how often the repo map is refreshed. Options: auto, always, files, manual"
-            " (default: auto)"
-        ),
-    )
-    group.add_argument(
-        "--map-multiplier-no-files",
-        type=float,
-        default=2,
-        help="Multiplier for map tokens when no files are specified (default: 2)",
-    )
-
-    ##########
     group = parser.add_argument_group("History Files")
     default_input_history_file = (
         os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
@@ -398,7 +394,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -461,11 +456,6 @@         default=False,
     )
     group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
         "--dry-run",
         action=argparse.BooleanOptionalAction,
         default=False,
@@ -520,26 +510,6 @@         "--test",
         action="store_true",
         help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
         default=False,
     )
 
@@ -628,21 +598,34 @@         default=False,
     )
     group.add_argument(
+        "--yes-always",
+        action="store_true",
+        help="Always say yes to every confirmation",
+        default=None,
+    )
+    group.add_argument(
+        "-v",
+        "--verbose",
+        action="store_true",
+        help="Enable verbose output",
+        default=False,
+    )
+    group.add_argument(
+        "--show-repo-map",
+        action="store_true",
+        help="Print the repo map and exit (debug)",
+        default=False,
+    )
+    group.add_argument(
+        "--show-prompts",
+        action="store_true",
+        help="Print the system prompts and exit (debug)",
+        default=False,
+    )
+    group.add_argument(
         "--exit",
         action="store_true",
         help="Do all startup activities then exit before accepting user input (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-repo-map",
-        action="store_true",
-        help="Print the repo map and exit (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-prompts",
-        action="store_true",
-        help="Print the system prompts and exit (debug)",
         default=False,
     )
 
@@ -695,19 +678,6 @@         help="Specify the language to use in the chat (default: None, uses system settings)",
     )
     group.add_argument(
-        "--yes-always",
-        action="store_true",
-        help="Always say yes to every confirmation",
-        default=None,
-    )
-    group.add_argument(
-        "-v",
-        "--verbose",
-        action="store_true",
-        help="Enable verbose output",
-        default=False,
-    )
-    group.add_argument(
         "--load",
         metavar="LOAD_FILE",
         help="Load and execute /commands from a file on launch",
@@ -733,8 +703,6 @@             " or home directory)"
         ),
     )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
         "--env-file",
         metavar="ENV_FILE",
