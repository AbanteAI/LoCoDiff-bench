
index e64aa9deb..422d96c75 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmp3085ifiq_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmpk2_ytxrc_actual.txt	
@@ -49,6 +49,24 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Specify the model to use for the main chat",
     )
+    group.add_argument(
+        "--architect",
+        action="store_const",
+        dest="edit_format",
+        const="architect",
+        help="Use architect edit format for the main chat",
+    )
+    group.add_argument(
+        "--auto-accept-architect",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable automatic acceptance of architect changes (default: True)",
+    )
+
+    ##########
+    group = parser.add_argument_group("Deprecated model settings")
+    # Add deprecated model shortcut arguments
+    add_deprecated_model_args(parser, group)
 
     ##########
     group = parser.add_argument_group("API Keys and settings")
@@ -66,19 +84,19 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -122,16 +140,6 @@ def get_parser(default_config_files, git_root):
         metavar="ALIAS:MODEL",
         help="Add a model alias (can be used multiple times)",
     )
-    group.add_argument(
-        "--reasoning-effort",
-        type=str,
-        help="Set the reasoning_effort API parameter (default: not set)",
-    )
-    group.add_argument(
-        "--thinking-tokens",
-        type=str,
-        help="Set the thinking token budget for models that support it (default: not set)",
-    )
     group.add_argument(
         "--verify-ssl",
         action=argparse.BooleanOptionalAction,
@@ -151,19 +159,6 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Specify what edit format the LLM should use (default depends on model)",
     )
-    group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
-    )
-    group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
-    )
     group.add_argument(
         "--weak-model",
         metavar="WEAK_MODEL",
@@ -208,6 +203,16 @@ def get_parser(default_config_files, git_root):
             " If unspecified, defaults to the model's max_chat_history_tokens."
         ),
     )
+    group.add_argument(
+        "--reasoning-effort",
+        type=str,
+        help="Set the reasoning_effort API parameter (default: not set)",
+    )
+    group.add_argument(
+        "--thinking-tokens",
+        type=str,
+        help="Set the thinking token budget for models that support it (default: not set)",
+    )
 
     ##########
     group = parser.add_argument_group("Cache settings")
@@ -332,6 +337,21 @@ def get_parser(default_config_files, git_root):
         default="#0088ff",
         help="Set the color for assistant output (default: #0088ff)",
     )
+    group.add_argument(
+        "--code-theme",
+        default="default",
+        help=(
+            "Set the markdown code theme (default: default, other options include monokai,"
+            " solarized-dark, solarized-light, or a Pygments builtin style,"
+            " see https://pygments.org/styles for available themes)"
+        ),
+    )
+    group.add_argument(
+        "--show-diffs",
+        action="store_true",
+        help="Show diffs when committing changes (default: False)",
+        default=False,
+    )
     group.add_argument(
         "--completion-menu-color",
         metavar="COLOR",
@@ -365,21 +385,6 @@ def get_parser(default_config_files, git_root):
             " terminal's default text color)"
         ),
     )
-    group.add_argument(
-        "--code-theme",
-        default="default",
-        help=(
-            "Set the markdown code theme (default: default, other options include monokai,"
-            " solarized-dark, solarized-light, or a Pygments builtin style,"
-            " see https://pygments.org/styles for available themes)"
-        ),
-    )
-    group.add_argument(
-        "--show-diffs",
-        action="store_true",
-        help="Show diffs when committing changes (default: False)",
-        default=False,
-    )
 
     ##########
     group = parser.add_argument_group("Git settings")
@@ -395,10 +400,6 @@ def get_parser(default_config_files, git_root):
         default=True,
         help="Enable/disable adding .aider* to .gitignore (default: True)",
     )
-    default_aiderignore_file = (
-        os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
-    )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -454,36 +455,15 @@ def get_parser(default_config_files, git_root):
         default=False,
         help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
     )
+
+    ##########
+    group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--commit",
         action="store_true",
         help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
     )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
-    group.add_argument(
-        "--skip-sanity-check-repo",
-        action="store_true",
-        help="Skip the sanity check for the git repository (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
-    group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
         action="store_true",
@@ -543,46 +523,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    #########
-    group = parser.add_argument_group("Upgrading")
-    group.add_argument(
-        "--just-check-update",
-        action="store_true",
-        help="Check for updates and return status in the exit code",
-        default=False,
-    )
-    group.add_argument(
-        "--check-update",
-        action=argparse.BooleanOptionalAction,
-        help="Check for new aider versions on launch",
-        default=True,
-    )
-    group.add_argument(
-        "--show-release-notes",
-        action=argparse.BooleanOptionalAction,
-        help="Show release notes on first run of new version (default: None, ask user)",
-        default=None,
-    )
-    group.add_argument(
-        "--install-main-branch",
-        action="store_true",
-        help="Install the latest version from the main branch",
-        default=False,
-    )
-    group.add_argument(
-        "--upgrade",
-        "--update",
-        action="store_true",
-        help="Upgrade aider to the latest version from PyPI",
-        default=False,
-    )
-    group.add_argument(
-        "--version",
-        action="version",
-        version=f"%(prog)s {__version__}",
-        help="Show the version number and exit",
-    )
-
     ##########
     group = parser.add_argument_group("Modes")
     group.add_argument(
@@ -645,6 +585,52 @@ def get_parser(default_config_files, git_root):
         help="Print the system prompts and exit (debug)",
         default=False,
     )
+    group.add_argument(
+        "--skip-sanity-check-repo",
+        action="store_true",
+        help="Skip the sanity check for the git repository (default: False)",
+        default=False,
+    )
+
+    ##########
+    group = parser.add_argument_group("Upgrading")
+    group.add_argument(
+        "--just-check-update",
+        action="store_true",
+        help="Check for updates and return status in the exit code",
+        default=False,
+    )
+    group.add_argument(
+        "--check-update",
+        action=argparse.BooleanOptionalAction,
+        help="Check for new aider versions on launch",
+        default=True,
+    )
+    group.add_argument(
+        "--install-main-branch",
+        action="store_true",
+        help="Install the latest version from the main branch",
+        default=False,
+    )
+    group.add_argument(
+        "--upgrade",
+        "--update",
+        action="store_true",
+        help="Upgrade aider to the latest version from PyPI",
+        default=False,
+    )
+    group.add_argument(
+        "--show-release-notes",
+        action=argparse.BooleanOptionalAction,
+        help="Show release notes on first run of new version (default: None, ask user)",
+        default=None,
+    )
+    group.add_argument(
+        "--version",
+        action="version",
+        version=f"%(prog)s {__version__}",
+        help="Show the version number and exit",
+    )
 
     ##########
     group = parser.add_argument_group("Voice settings")
@@ -723,16 +709,6 @@ def get_parser(default_config_files, git_root):
         default="platform",
         help="Line endings to use when writing files (default: platform)",
     )
-    group.add_argument(
-        "-c",
-        "--config",
-        is_config_file=True,
-        metavar="CONFIG_FILE",
-        help=(
-            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
-            " or home directory)"
-        ),
-    )
     # This is a duplicate of the argument in the preparser and is a no-op by this time of
     # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
@@ -783,16 +759,17 @@ def get_parser(default_config_files, git_root):
         default=True,
         help="Enable/disable detection and offering to add URLs to chat (default: True)",
     )
+    group.add_argument(
+        "--watch-files",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable watching files for ai coding comments (default: False)",
+    )
     group.add_argument(
         "--editor",
         help="Specify which editor to use for the /editor command",
     )
 
-    ##########
-    group = parser.add_argument_group("Deprecated model settings")
-    # Add deprecated model shortcut arguments
-    add_deprecated_model_args(parser, group)
-
     return parser
 
 
