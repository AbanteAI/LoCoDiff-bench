--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -8,13 +8,8 @@ import configargparse
 
 from aider import __version__
-from aider.args_formatter import (
-    DotEnvFormatter,
-    MarkdownHelpFormatter,
-    YamlHelpFormatter,
-)
+from aider.args_formatter import MarkdownHelpFormatter, YamlHelpFormatter
 from aider.deprecated import add_deprecated_model_args
-
 from .dump import dump  # noqa: F401
 
 
@@ -36,19 +31,17 @@         description="aider is AI pair programming in your terminal",
         add_config_file_help=True,
         default_config_files=default_config_files,
-        config_file_parser_class=configargparse.YAMLConfigFileParser,
         auto_env_var_prefix="AIDER_",
-    )
+        formatter_class=MarkdownHelpFormatter,
+    )
+    parser.parse_known_args()  # instantiate env_var defaults
+
+    ##########
     group = parser.add_argument_group("Main model")
     group.add_argument(
         "files", metavar="FILE", nargs="*", help="files to edit with an LLM (optional)"
     )
-    group.add_argument(
-        "--model",
-        metavar="MODEL",
-        default=None,
-        help="Specify the model to use for the main chat",
-    )
+    # Add deprecated model shortcut arguments as a separate group later
 
     ##########
     group = parser.add_argument_group("API Keys and settings")
@@ -66,19 +59,19 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -97,6 +90,8 @@         ),
         default=[],
     )
+
+    ##########
     group = parser.add_argument_group("Model settings")
     group.add_argument(
         "--list-models",
@@ -123,6 +118,18 @@         help="Add a model alias (can be used multiple times)",
     )
     group.add_argument(
+        "--verify-ssl",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Verify the SSL cert when connecting to models (default: False)",
+    )
+    group.add_argument(
+        "--timeout",
+        type=float,
+        default=None,
+        help="Timeout in seconds for API calls (default: None)",
+    )
+    group.add_argument(
         "--reasoning-effort",
         type=str,
         help="Set the reasoning_effort API parameter (default: not set)",
@@ -133,65 +140,6 @@         help="Set the thinking token budget for models that support it (default: not set)",
     )
     group.add_argument(
-        "--verify-ssl",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Verify the SSL cert when connecting to models (default: True)",
-    )
-    group.add_argument(
-        "--timeout",
-        type=float,
-        default=None,
-        help="Timeout in seconds for API calls (default: None)",
-    )
-    group.add_argument(
-        "--edit-format",
-        "--chat-mode",
-        metavar="EDIT_FORMAT",
-        default=None,
-        help="Specify what edit format the LLM should use (default depends on model)",
-    )
-    group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
-    )
-    group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
-    )
-    group.add_argument(
-        "--weak-model",
-        metavar="WEAK_MODEL",
-        default=None,
-        help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
-        ),
-    )
-    group.add_argument(
-        "--editor-model",
-        metavar="EDITOR_MODEL",
-        default=None,
-        help="Specify the model to use for editor tasks (default depends on --model)",
-    )
-    group.add_argument(
-        "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
-        default=None,
-        help="Specify the edit format for the editor model (default: depends on editor model)",
-    )
-    group.add_argument(
-        "--show-model-warnings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Only work with models that have meta-data available (default: True)",
-    )
-    group.add_argument(
         "--check-model-accepts-settings",
         action=argparse.BooleanOptionalAction,
         default=True,
@@ -199,14 +147,38 @@             "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
         ),
     )
-    group.add_argument(
-        "--max-chat-history-tokens",
-        type=int,
-        default=None,
-        help=(
-            "Soft limit on tokens for chat history, after which summarization begins."
-            " If unspecified, defaults to the model's max_chat_history_tokens."
-        ),
+
+    ##########
+    group = parser.add_argument_group("History Files")
+    default_input_history_file = (
+        os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
+    )
+    default_chat_history_file = (
+        os.path.join(git_root, ".aider.chat.history.md") if git_root else ".aider.chat.history.md"
+    )
+    group.add_argument(
+        "--input-history-file",
+        metavar="INPUT_HISTORY_FILE",
+        default=default_input_history_file,
+        help=f"Specify the chat input history file (default: {default_input_history_file})",
+    )
+    group.add_argument(
+        "--chat-history-file",
+        metavar="CHAT_HISTORY_FILE",
+        default=default_chat_history_file,
+        help=f"Specify the chat history file (default: {default_chat_history_file})",
+    )
+    group.add_argument(
+        "--restore-chat-history",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Restore the previous chat history messages (default: False)",
+    )
+    group.add_argument(
+        "--llm-history-file",
+        metavar="LLM_HISTORY_FILE",
+        default=None,
+        help="Log the conversation with the LLM to this file (for example, .aider.llm.history)",
     )
 
     ##########
@@ -249,39 +221,6 @@     )
 
     ##########
-    group = parser.add_argument_group("History Files")
-    default_input_history_file = (
-        os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
-    )
-    default_chat_history_file = (
-        os.path.join(git_root, ".aider.chat.history.md") if git_root else ".aider.chat.history.md"
-    )
-    group.add_argument(
-        "--input-history-file",
-        metavar="INPUT_HISTORY_FILE",
-        default=default_input_history_file,
-        help=f"Specify the chat input history file (default: {default_input_history_file})",
-    )
-    group.add_argument(
-        "--chat-history-file",
-        metavar="CHAT_HISTORY_FILE",
-        default=default_chat_history_file,
-        help=f"Specify the chat history file (default: {default_chat_history_file})",
-    )
-    group.add_argument(
-        "--restore-chat-history",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Restore the previous chat history messages (default: False)",
-    )
-    group.add_argument(
-        "--llm-history-file",
-        metavar="LLM_HISTORY_FILE",
-        default=None,
-        help="Log the conversation with the LLM to this file (for example, .aider.llm.history)",
-    )
-
-    ##########
     group = parser.add_argument_group("Output settings")
     group.add_argument(
         "--dark-mode",
@@ -333,39 +272,6 @@         help="Set the color for assistant output (default: #0088ff)",
     )
     group.add_argument(
-        "--completion-menu-color",
-        metavar="COLOR",
-        default=None,
-        help="Set the color for the completion menu (default: terminal's default text color)",
-    )
-    group.add_argument(
-        "--completion-menu-bg-color",
-        metavar="COLOR",
-        default=None,
-        help=(
-            "Set the background color for the completion menu (default: terminal's default"
-            " background color)"
-        ),
-    )
-    group.add_argument(
-        "--completion-menu-current-color",
-        metavar="COLOR",
-        default=None,
-        help=(
-            "Set the color for the current item in the completion menu (default: terminal's default"
-            " background color)"
-        ),
-    )
-    group.add_argument(
-        "--completion-menu-current-bg-color",
-        metavar="COLOR",
-        default=None,
-        help=(
-            "Set the background color for the current item in the completion menu (default:"
-            " terminal's default text color)"
-        ),
-    )
-    group.add_argument(
         "--code-theme",
         default="default",
         help=(
@@ -374,12 +280,6 @@             " see https://pygments.org/styles for available themes)"
         ),
     )
-    group.add_argument(
-        "--show-diffs",
-        action="store_true",
-        help="Show diffs when committing changes (default: False)",
-        default=False,
-    )
 
     ##########
     group = parser.add_argument_group("Git settings")
@@ -398,7 +298,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -425,28 +324,10 @@         help="Enable/disable commits when repo is found dirty (default: True)",
     )
     group.add_argument(
-        "--attribute-author",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider code changes in the git author name (default: True)",
-    )
-    group.add_argument(
-        "--attribute-committer",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Attribute aider commits in the git committer name (default: True)",
-    )
-    group.add_argument(
-        "--attribute-commit-message-author",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Prefix commit messages with 'aider: ' if aider authored the changes (default: False)",
-    )
-    group.add_argument(
-        "--attribute-commit-message-committer",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Prefix all commit messages with 'aider: ' (default: False)",
+        "--skip-sanity-check-repo",
+        action="store_true",
+        help="Skip the sanity check for the git repository (default: False)",
+        default=False,
     )
     group.add_argument(
         "--git-commit-verify",
@@ -454,11 +335,57 @@         default=False,
         help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
     )
+
+    ##########
+    group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--commit",
         action="store_true",
         help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
+    )
+    group.add_argument(
+        "--lint",
+        action="store_true",
+        help="Lint and fix provided files, or dirty files if none provided",
+        default=False,
+    )
+    group.add_argument(
+        "--lint-cmd",
+        action="append",
+        help=(
+            'Specify lint commands to run for different languages, eg: "python: flake8'
+            ' --select=..." (can be used multiple times)'
+        ),
+        default=[],
+    )
+    group.add_argument(
+        "--auto-lint",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable automatic linting after changes (default: True)",
+    )
+    group.add_argument(
+        "--test-cmd",
+        help="Specify command to run tests",
+        default=[],
+    )
+    group.add_argument(
+        "--auto-test",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable automatic testing after changes (default: False)",
+    )
+    group.add_argument(
+        "--test",
+        action="store_true",
+        help="Run tests, fix problems found and then exit",
+        default=False,
+    )
+    group.add_argument(
+        "--apply",
+        metavar="FILE",
+        help="Apply the changes from the given file instead of running the chat (debug)",
     )
     group.add_argument(
         "--commit-prompt",
@@ -472,78 +399,31 @@         help="Perform a dry run without modifying files (default: False)",
     )
     group.add_argument(
-        "--skip-sanity-check-repo",
-        action="store_true",
-        help="Skip the sanity check for the git repository (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
-    group = parser.add_argument_group("Fixing and committing")
-    group.add_argument(
-        "--lint",
-        action="store_true",
-        help="Lint and fix provided files, or dirty files if none provided",
-        default=False,
-    )
-    group.add_argument(
-        "--lint-cmd",
-        action="append",
-        help=(
-            'Specify lint commands to run for different languages, eg: "python: flake8'
-            ' --select=..." (can be used multiple times)'
-        ),
-        default=[],
-    )
-    group.add_argument(
-        "--auto-lint",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic linting after changes (default: True)",
-    )
-    group.add_argument(
-        "--test-cmd",
-        help="Specify command to run tests",
-        default=[],
-    )
-    group.add_argument(
-        "--auto-test",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable automatic testing after changes (default: False)",
-    )
-    group.add_argument(
-        "--test",
-        action="store_true",
-        help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
-    )
-
-    #########
+        "--attribute-author",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Attribute aider code changes in the git author name (default: True)",
+    )
+    group.add_argument(
+        "--attribute-committer",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Attribute aider commits in the git committer name (default: True)",
+    )
+    group.add_argument(
+        "--attribute-commit-message-author",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Prefix commit messages with 'aider: ' if aider authored the changes (default: False)",
+    )
+    group.add_argument(
+        "--attribute-commit-message-committer",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Prefix all commit messages with 'aider: ' (default: False)",
+    )
+
+    ##########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
         "--just-check-update",
@@ -556,12 +436,6 @@         action=argparse.BooleanOptionalAction,
         help="Check for new aider versions on launch",
         default=True,
-    )
-    group.add_argument(
-        "--show-release-notes",
-        action=argparse.BooleanOptionalAction,
-        help="Show release notes on first run of new version (default: None, ask user)",
-        default=None,
     )
     group.add_argument(
         "--install-main-branch",
@@ -577,10 +451,16 @@         default=False,
     )
     group.add_argument(
-        "--version",
-        action="version",
-        version=f"%(prog)s {__version__}",
-        help="Show the version number and exit",
+        "--show-release-notes",
+        action=argparse.BooleanOptionalAction,
+        help="Show release notes on first run of new version (default: None, ask user)",
+        default=None,
+    )
+    group.add_argument(
+        "--suggest-shell-commands",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable suggesting shell commands (default: True)",
     )
 
     ##########
@@ -604,10 +484,9 @@         ),
     )
     group.add_argument(
-        "--gui",
-        "--browser",
-        action=argparse.BooleanOptionalAction,
-        help="Run aider in your browser (default: False)",
+        "--exit",
+        action="store_true",
+        help="Do all startup activities then exit before accepting user input (debug)",
         default=False,
     )
     group.add_argument(
@@ -616,35 +495,11 @@         default=False,
         help="Enable automatic copy/paste of chat between aider and web UI (default: False)",
     )
-    group.add_argument(
-        "--apply",
-        metavar="FILE",
-        help="Apply the changes from the given file instead of running the chat (debug)",
-    )
-    group.add_argument(
-        "--apply-clipboard-edits",
-        action="store_true",
-        help="Apply clipboard contents as edits using the main model's editor format",
-        default=False,
-    )
-    group.add_argument(
-        "--exit",
-        action="store_true",
-        help="Do all startup activities then exit before accepting user input (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-repo-map",
-        action="store_true",
-        help="Print the repo map and exit (debug)",
-        default=False,
-    )
-    group.add_argument(
-        "--show-prompts",
-        action="store_true",
-        help="Print the system prompts and exit (debug)",
-        default=False,
-    )
+
+    ##########
+    group = parser.add_argument_group("Deprecated model settings")
+    # Add deprecated model shortcut arguments
+    add_deprecated_model_args(parser, group)
 
     ##########
     group = parser.add_argument_group("Voice settings")
@@ -668,7 +523,7 @@         help="Specify the input device name for voice recording",
     )
 
-    ######
+    ##########
     group = parser.add_argument_group("Other settings")
     group.add_argument(
         "--file",
@@ -718,12 +573,6 @@         help="Specify the encoding for input and output (default: utf-8)",
     )
     group.add_argument(
-        "--line-endings",
-        choices=["platform", "lf", "crlf"],
-        default="platform",
-        help="Line endings to use when writing files (default: platform)",
-    )
-    group.add_argument(
         "-c",
         "--config",
         is_config_file=True,
@@ -733,65 +582,12 @@             " or home directory)"
         ),
     )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
-    group.add_argument(
-        "--env-file",
-        metavar="ENV_FILE",
-        default=default_env_file(git_root),
-        help="Specify the .env file to load (default: .env in git root)",
-    )
     group.add_argument(
         "--suggest-shell-commands",
         action=argparse.BooleanOptionalAction,
         default=True,
         help="Enable/disable suggesting shell commands (default: True)",
     )
-    group.add_argument(
-        "--fancy-input",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable fancy input with history and completion (default: True)",
-    )
-    group.add_argument(
-        "--multiline",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable multi-line input mode with Meta-Enter to submit (default: False)",
-    )
-    group.add_argument(
-        "--notifications",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help=(
-            "Enable/disable terminal bell notifications when LLM responses are ready (default:"
-            " False)"
-        ),
-    )
-    group.add_argument(
-        "--notifications-command",
-        metavar="COMMAND",
-        default=None,
-        help=(
-            "Specify a command to run for notifications instead of the terminal bell. If not"
-            " specified, a default command for your OS may be used."
-        ),
-    )
-    group.add_argument(
-        "--detect-urls",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable detection and offering to add URLs to chat (default: True)",
-    )
-    group.add_argument(
-        "--editor",
-        help="Specify which editor to use for the /editor command",
-    )
-
-    ##########
-    group = parser.add_argument_group("Deprecated model settings")
-    # Add deprecated model shortcut arguments
-    add_deprecated_model_args(parser, group)
 
     return parser
 
@@ -800,12 +596,7 @@     os.environ["COLUMNS"] = "70"
     sys.argv = ["aider"]
     parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
-    parser.parse_known_args()
-
     parser.formatter_class = MarkdownHelpFormatter
-
     return argparse.ArgumentParser.format_help(parser)
 
 
@@ -813,12 +604,8 @@     os.environ["COLUMNS"] = "100"
     sys.argv = ["aider"]
     parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
     parser.parse_known_args()
-
     parser.formatter_class = YamlHelpFormatter
-
     return argparse.ArgumentParser.format_help(parser)
 
 
@@ -826,18 +613,15 @@     os.environ["COLUMNS"] = "120"
     sys.argv = ["aider"]
     parser = get_parser([], None)
-
-    # This instantiates all the action.env_var values
     parser.parse_known_args()
+    from aider.args_formatter import DotEnvFormatter
 
     parser.formatter_class = DotEnvFormatter
-
     return argparse.ArgumentParser.format_help(parser)
 
 
 def main():
     arg = sys.argv[1] if len(sys.argv[1:]) else None
-
     if arg == "md":
         print(get_md_help())
     elif arg == "dotenv":
