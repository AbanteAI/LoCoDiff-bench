
index e64aa9deb..323116e22 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmpdtias6mm_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmpbsu2iugo_actual.txt	
@@ -49,78 +49,62 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Specify the model to use for the main chat",
     )
-
-    ##########
-    group = parser.add_argument_group("API Keys and settings")
-    group.add_argument(
-        "--openai-api-key",
-        help="Specify the OpenAI API key",
-    )
     group.add_argument(
-        "--anthropic-api-key",
-        help="Specify the Anthropic API key",
-    )
-    group.add_argument(
-        "--openai-api-base",
-        help="Specify the api base url",
+        "--architect",
+        action="store_const",
+        dest="edit_format",
+        const="architect",
+        help="Use architect edit format for the main chat",
     )
     group.add_argument(
-        "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        "--auto-accept-architect",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable automatic acceptance of architect changes (default: True)",
     )
     group.add_argument(
-        "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        "--weak-model",
+        metavar="WEAK_MODEL",
+        default=None,
+        help=(
+            "Specify the model to use for commit messages and chat history summarization (default"
+            " depends on --model)"
+        ),
     )
     group.add_argument(
-        "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        "--editor-model",
+        metavar="EDITOR_MODEL",
+        default=None,
+        help="Specify the model to use for editor tasks (default depends on --model)",
     )
     group.add_argument(
-        "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        "--editor-edit-format",
+        metavar="EDITOR_EDIT_FORMAT",
+        default=None,
+        help="Specify the edit format for the editor model (default: depends on editor model)",
     )
     group.add_argument(
-        "--set-env",
-        action="append",
-        metavar="ENV_VAR_NAME=value",
-        help="Set an environment variable (to control API settings, can be used multiple times)",
-        default=[],
+        "--show-model-warnings",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Only work with models that have meta-data available (default: True)",
     )
     group.add_argument(
-        "--api-key",
-        action="append",
-        metavar="PROVIDER=KEY",
+        "--check-model-accepts-settings",
+        action=argparse.BooleanOptionalAction,
+        default=True,
         help=(
-            "Set an API key for a provider (eg: --api-key provider=<key> sets"
-            " PROVIDER_API_KEY=<key>)"
+            "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
         ),
-        default=[],
-    )
-    group = parser.add_argument_group("Model settings")
-    group.add_argument(
-        "--list-models",
-        "--models",
-        metavar="MODEL",
-        help="List known models which match the (partial) MODEL name",
-    )
-    group.add_argument(
-        "--model-settings-file",
-        metavar="MODEL_SETTINGS_FILE",
-        default=".aider.model.settings.yml",
-        help="Specify a file with aider model settings for unknown models",
-    )
-    group.add_argument(
-        "--model-metadata-file",
-        metavar="MODEL_METADATA_FILE",
-        default=".aider.model.metadata.json",
-        help="Specify a file with context window and costs for unknown models",
     )
     group.add_argument(
-        "--alias",
-        action="append",
-        metavar="ALIAS:MODEL",
-        help="Add a model alias (can be used multiple times)",
+        "--max-chat-history-tokens",
+        type=int,
+        default=None,
+        help=(
+            "Soft limit on tokens for chat history, after which summarization begins."
+            " If unspecified, defaults to the model's max_chat_history_tokens."
+        ),
     )
     group.add_argument(
         "--reasoning-effort",
@@ -151,101 +135,80 @@ def get_parser(default_config_files, git_root):
         default=None,
         help="Specify what edit format the LLM should use (default depends on model)",
     )
+
+    ##########
+    group = parser.add_argument_group("API Keys and settings")
     group.add_argument(
-        "--architect",
-        action="store_const",
-        dest="edit_format",
-        const="architect",
-        help="Use architect edit format for the main chat",
+        "--openai-api-key",
+        help="Specify the OpenAI API key",
     )
     group.add_argument(
-        "--auto-accept-architect",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic acceptance of architect changes (default: True)",
+        "--anthropic-api-key",
+        help="Specify the Anthropic API key",
     )
     group.add_argument(
-        "--weak-model",
-        metavar="WEAK_MODEL",
-        default=None,
-        help=(
-            "Specify the model to use for commit messages and chat history summarization (default"
-            " depends on --model)"
-        ),
+        "--openai-api-base",
+        help="Specify the api base url",
     )
     group.add_argument(
-        "--editor-model",
-        metavar="EDITOR_MODEL",
-        default=None,
-        help="Specify the model to use for editor tasks (default depends on --model)",
+        "--openai-api-type",
+        help="Specify the api_type",
     )
     group.add_argument(
-        "--editor-edit-format",
-        metavar="EDITOR_EDIT_FORMAT",
-        default=None,
-        help="Specify the edit format for the editor model (default: depends on editor model)",
+        "--openai-api-version",
+        help="Specify the api_version",
     )
     group.add_argument(
-        "--show-model-warnings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Only work with models that have meta-data available (default: True)",
+        "--openai-api-deployment-id",
+        help="Specify the deployment_id",
     )
     group.add_argument(
-        "--check-model-accepts-settings",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help=(
-            "Check if model accepts settings like reasoning_effort/thinking_tokens (default: True)"
-        ),
+        "--openai-organization-id",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
-        "--max-chat-history-tokens",
-        type=int,
-        default=None,
+        "--set-env",
+        action="append",
+        metavar="ENV_VAR_NAME=value",
+        help="Set an environment variable (to control API settings, can be used multiple times)",
+        default=[],
+    )
+    group.add_argument(
+        "--api-key",
+        action="append",
+        metavar="PROVIDER=KEY",
         help=(
-            "Soft limit on tokens for chat history, after which summarization begins."
-            " If unspecified, defaults to the model's max_chat_history_tokens."
+            "Set an API key for a provider (eg: --api-key provider=<key> sets"
+            " PROVIDER_API_KEY=<key>)"
         ),
+        default=[],
     )
 
     ##########
-    group = parser.add_argument_group("Cache settings")
-    group.add_argument(
-        "--cache-prompts",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable caching of prompts (default: False)",
-    )
+    group = parser.add_argument_group("Model settings")
     group.add_argument(
-        "--cache-keepalive-pings",
-        type=int,
-        default=0,
-        help="Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)",
+        "--list-models",
+        "--models",
+        metavar="MODEL",
+        help="List known models which match the (partial) MODEL name",
     )
-
-    ##########
-    group = parser.add_argument_group("Repomap settings")
     group.add_argument(
-        "--map-tokens",
-        type=int,
-        default=None,
-        help="Suggested number of tokens to use for repo map, use 0 to disable",
+        "--model-settings-file",
+        metavar="MODEL_SETTINGS_FILE",
+        default=".aider.model.settings.yml",
+        help="Specify a file with aider model settings for unknown models",
     )
     group.add_argument(
-        "--map-refresh",
-        choices=["auto", "always", "files", "manual"],
-        default="auto",
-        help=(
-            "Control how often the repo map is refreshed. Options: auto, always, files, manual"
-            " (default: auto)"
-        ),
+        "--model-metadata-file",
+        metavar="MODEL_METADATA_FILE",
+        default=".aider.model.metadata.json",
+        help="Specify a file with context window and costs for unknown models",
     )
     group.add_argument(
-        "--map-multiplier-no-files",
-        type=float,
-        default=2,
-        help="Multiplier for map tokens when no files are specified (default: 2)",
+        "--alias",
+        action="append",
+        metavar="ALIAS:MODEL",
+        help="Add a model alias (can be used multiple times)",
     )
 
     ##########
@@ -398,7 +361,6 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -454,36 +416,15 @@ def get_parser(default_config_files, git_root):
         default=False,
         help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
     )
+
+    ##########
+    group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--commit",
         action="store_true",
         help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
     )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
-    group.add_argument(
-        "--skip-sanity-check-repo",
-        action="store_true",
-        help="Skip the sanity check for the git repository (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
-    group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
         action="store_true",
@@ -522,6 +463,95 @@ def get_parser(default_config_files, git_root):
         help="Run tests, fix problems found and then exit",
         default=False,
     )
+    group.add_argument(
+        "--commit-prompt",
+        metavar="PROMPT",
+        help="Specify a custom prompt for generating commit messages",
+    )
+    group.add_argument(
+        "--dry-run",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Perform a dry run without modifying files (default: False)",
+    )
+    group.add_argument(
+        "--skip-sanity-check-repo",
+        action="store_true",
+        help="Skip the sanity check for the git repository (default: False)",
+        default=False,
+    )
+
+    ##########
+    group = parser.add_argument_group("Repomap settings")
+    group.add_argument(
+        "--map-tokens",
+        type=int,
+        default=None,
+        help="Suggested number of tokens to use for repo map, use 0 to disable",
+    )
+    group.add_argument(
+        "--map-refresh",
+        choices=["auto", "always", "files", "manual"],
+        default="auto",
+        help=(
+            "Control how often the repo map is refreshed. Options: auto, always, files, manual"
+            " (default: auto)"
+        ),
+    )
+    group.add_argument(
+        "--map-multiplier-no-files",
+        type=float,
+        default=2,
+        help="Multiplier for map tokens when no files are specified (default: 2)",
+    )
+
+    ##########
+    group = parser.add_argument_group("Cache settings")
+    group.add_argument(
+        "--cache-prompts",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable caching of prompts (default: False)",
+    )
+    group.add_argument(
+        "--cache-keepalive-pings",
+        type=int,
+        default=0,
+        help="Number of times to ping at 5min intervals to keep prompt cache warm (default: 0)",
+    )
+
+    ##########
+    group = parser.add_argument_group("History Files")
+    default_input_history_file = (
+        os.path.join(git_root, ".aider.input.history") if git_root else ".aider.input.history"
+    )
+    default_chat_history_file = (
+        os.path.join(git_root, ".aider.chat.history.md") if git_root else ".aider.chat.history.md"
+    )
+    group.add_argument(
+        "--input-history-file",
+        metavar="INPUT_HISTORY_FILE",
+        default=default_input_history_file,
+        help=f"Specify the chat input history file (default: {default_input_history_file})",
+    )
+    group.add_argument(
+        "--chat-history-file",
+        metavar="CHAT_HISTORY_FILE",
+        default=default_chat_history_file,
+        help=f"Specify the chat history file (default: {default_chat_history_file})",
+    )
+    group.add_argument(
+        "--restore-chat-history",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Restore the previous chat history messages (default: False)",
+    )
+    group.add_argument(
+        "--llm-history-file",
+        metavar="LLM_HISTORY_FILE",
+        default=None,
+        help="Log the conversation with the LLM to this file (for example, .aider.llm.history)",
+    )
 
     ##########
     group = parser.add_argument_group("Analytics")
@@ -543,7 +573,6 @@ def get_parser(default_config_files, git_root):
         default=False,
     )
 
-    #########
     group = parser.add_argument_group("Upgrading")
     group.add_argument(
         "--just-check-update",
@@ -551,12 +580,6 @@ def get_parser(default_config_files, git_root):
         help="Check for updates and return status in the exit code",
         default=False,
     )
-    group.add_argument(
-        "--check-update",
-        action=argparse.BooleanOptionalAction,
-        help="Check for new aider versions on launch",
-        default=True,
-    )
     group.add_argument(
         "--show-release-notes",
         action=argparse.BooleanOptionalAction,
@@ -627,6 +650,12 @@ def get_parser(default_config_files, git_root):
         help="Apply clipboard contents as edits using the main model's editor format",
         default=False,
     )
+    group.add_argument(
+        "--yes-always",
+        action="store_true",
+        help="Always say yes to every confirmation",
+        default=None,
+    )
     group.add_argument(
         "--exit",
         action="store_true",
@@ -645,30 +674,45 @@ def get_parser(default_config_files, git_root):
         help="Print the system prompts and exit (debug)",
         default=False,
     )
+    group.add_argument(
+        "--verbose",
+        action="store_true",
+        help="Enable verbose output",
+        default=False,
+    )
+    group.add_argument(
+        "--encoding",
+        default="utf-8",
+        help="Specify the encoding for input and output (default: utf-8)",
+    )
+    group.add_argument(
+        "--line-endings",
+        choices=["platform", "lf", "crlf"],
+        default="platform",
+        help="Line endings to use when writing files (default: platform)",
+    )
 
     ##########
-    group = parser.add_argument_group("Voice settings")
+    group = parser.add_argument_group("Analytics")
     group.add_argument(
-        "--voice-format",
-        metavar="VOICE_FORMAT",
-        default="wav",
-        choices=["wav", "mp3", "webm"],
-        help="Audio format for voice recording (default: wav). webm and mp3 require ffmpeg",
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
     )
     group.add_argument(
-        "--voice-language",
-        metavar="VOICE_LANGUAGE",
-        default="en",
-        help="Specify the language for voice using ISO 639-1 code (default: auto)",
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
     )
     group.add_argument(
-        "--voice-input-device",
-        metavar="VOICE_INPUT_DEVICE",
-        default=None,
-        help="Specify the input device name for voice recording",
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
     )
 
-    ######
+    ##########
     group = parser.add_argument_group("Other settings")
     group.add_argument(
         "--file",
@@ -700,41 +744,31 @@ def get_parser(default_config_files, git_root):
         help="Always say yes to every confirmation",
         default=None,
     )
-    group.add_argument(
-        "-v",
-        "--verbose",
-        action="store_true",
-        help="Enable verbose output",
-        default=False,
-    )
     group.add_argument(
         "--load",
         metavar="LOAD_FILE",
         help="Load and execute /commands from a file on launch",
     )
     group.add_argument(
-        "--encoding",
-        default="utf-8",
-        help="Specify the encoding for input and output (default: utf-8)",
+        "--watch-files",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable watching files for ai coding comments (default: False)",
     )
     group.add_argument(
-        "--line-endings",
-        choices=["platform", "lf", "crlf"],
-        default="platform",
-        help="Line endings to use when writing files (default: platform)",
+        "--set-env",
+        action="append",
+        metavar="ENV_VAR_NAME=value",
+        help="Set an environment variable (can be used multiple times)",
+        default=[],
     )
     group.add_argument(
-        "-c",
-        "--config",
-        is_config_file=True,
-        metavar="CONFIG_FILE",
-        help=(
-            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
-            " or home directory)"
-        ),
+        "--api-key",
+        action="append",
+        metavar="PROVIDER=KEY",
+        help="Set an API key for a provider (eg: --api-key anthropic=sk-123)",
+        default=[],
     )
-    # This is a duplicate of the argument in the preparser and is a no-op by this time of
-    # argument parsing, but it's here so that the help is displayed as expected.
     group.add_argument(
         "--env-file",
         metavar="ENV_FILE",
@@ -787,6 +821,16 @@ def get_parser(default_config_files, git_root):
         "--editor",
         help="Specify which editor to use for the /editor command",
     )
+    group.add_argument(
+        "--c",
+        "--config",
+        is_config_file=True,
+        metavar="CONFIG_FILE",
+        help=(
+            "Specify the config file (default: search for .aider.conf.yml in git root, cwd"
+            " or home directory)"
+        ),
+    )
 
     ##########
     group = parser.add_argument_group("Deprecated model settings")
@@ -797,7 +841,7 @@ def get_parser(default_config_files, git_root):
 
 
 def get_md_help():
-    os.environ["COLUMNS"] = "70"
+    os.environ["COLUMNS"] = "/rpc!lx7'
     sys.argv = ["aider"]
     parser = get_parser([], None)
 
@@ -810,7 +854,7 @@ def get_md_help():
 
 
 def get_sample_yaml():
-    os.environ["COLUMNS"] = "100"
+    os.environ["COLUMNS"] = "120"
     sys.argv = ["aider"]
     parser = get_parser([], None)
 
