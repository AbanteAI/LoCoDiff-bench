--- aider_aider_args.py_expectedoutput.txt (expected)+++ aider_aider_args.py_extracted.txt (actual)@@ -66,19 +66,19 @@     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -398,7 +398,6 @@     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -455,6 +454,57 @@         help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
     )
     group.add_argument(
+        "--watch-files",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable watching files for ai coding comments (default: False)",
+    )
+    group.add_argument(
+        "--skip-sanity-check-repo",
+        action="store_true",
+        help="Skip the sanity check for the git repository (default: False)",
+        default=False,
+    )
+    group = parser.add_argument_group("Fixing and committing")
+    group.add_argument(
+        "--lint",
+        action="store_true",
+        help="Lint and fix provided files, or dirty files if none provided",
+        default=False,
+    )
+    group.add_argument(
+        "--lint-cmd",
+        action="append",
+        help=(
+            'Specify lint commands to run for different languages, eg: "python: flake8'
+            ' --select=..." (can be used multiple times)'
+        ),
+        default=[],
+    )
+    group.add_argument(
+        "--auto-lint",
+        action=argparse.BooleanOptionalAction,
+        default=True,
+        help="Enable/disable automatic linting after changes (default: True)",
+    )
+    group.add_argument(
+        "--test-cmd",
+        help="Specify command to run tests",
+        default=[],
+    )
+    group.add_argument(
+        "--auto-test",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Enable/disable automatic testing after changes (default: False)",
+    )
+    group.add_argument(
+        "--test",
+        action="store_true",
+        help="Run tests, fix problems found and then exit",
+        default=False,
+    )
+    group.add_argument(
         "--commit",
         action="store_true",
         help="Commit all pending changes with a suitable commit message, then exit",
@@ -464,83 +514,6 @@         "--commit-prompt",
         metavar="PROMPT",
         help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Perform a dry run without modifying files (default: False)",
-    )
-    group.add_argument(
-        "--skip-sanity-check-repo",
-        action="store_true",
-        help="Skip the sanity check for the git repository (default: False)",
-        default=False,
-    )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
-    group = parser.add_argument_group("Fixing and committing")
-    group.add_argument(
-        "--lint",
-        action="store_true",
-        help="Lint and fix provided files, or dirty files if none provided",
-        default=False,
-    )
-    group.add_argument(
-        "--lint-cmd",
-        action="append",
-        help=(
-            'Specify lint commands to run for different languages, eg: "python: flake8'
-            ' --select=..." (can be used multiple times)'
-        ),
-        default=[],
-    )
-    group.add_argument(
-        "--auto-lint",
-        action=argparse.BooleanOptionalAction,
-        default=True,
-        help="Enable/disable automatic linting after changes (default: True)",
-    )
-    group.add_argument(
-        "--test-cmd",
-        help="Specify command to run tests",
-        default=[],
-    )
-    group.add_argument(
-        "--auto-test",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable automatic testing after changes (default: False)",
-    )
-    group.add_argument(
-        "--test",
-        action="store_true",
-        help="Run tests, fix problems found and then exit",
-        default=False,
-    )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
-    group.add_argument(
-        "--analytics-disable",
-        action="store_true",
-        help="Permanently disable analytics",
-        default=False,
     )
 
     #########
@@ -626,6 +599,12 @@         action="store_true",
         help="Apply clipboard contents as edits using the main model's editor format",
         default=False,
+    )
+    group.add_argument(
+        "--dry-run",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Perform a dry run without modifying files (default: False)",
     )
     group.add_argument(
         "--exit",
@@ -786,6 +765,26 @@     group.add_argument(
         "--editor",
         help="Specify which editor to use for the /editor command",
+    )
+
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
     )
 
     ##########
