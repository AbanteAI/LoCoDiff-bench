
index e64aa9de..37ee9633 100644
--- a/aider_aider_args.py_expectedoutput.txt (expected):tmp/tmpj1yhetdc_expected.txt	
+++ b/aider_aider_args.py_extracted.txt (actual):tmp/tmpyeytu_30_actual.txt	
@@ -66,19 +66,19 @@ def get_parser(default_config_files, git_root):
     )
     group.add_argument(
         "--openai-api-type",
-        help="(deprecated, use --set-env OPENAI_API_TYPE=<value>)",
+        help="Specify the api_type",
     )
     group.add_argument(
         "--openai-api-version",
-        help="(deprecated, use --set-env OPENAI_API_VERSION=<value>)",
+        help="Specify the api_version",
     )
     group.add_argument(
         "--openai-api-deployment-id",
-        help="(deprecated, use --set-env OPENAI_API_DEPLOYMENT_ID=<value>)",
+        help="Specify the deployment_id",
     )
     group.add_argument(
         "--openai-organization-id",
-        help="(deprecated, use --set-env OPENAI_ORGANIZATION=<value>)",
+        help="Specify the OpenAI organization ID",
     )
     group.add_argument(
         "--set-env",
@@ -398,7 +398,6 @@ def get_parser(default_config_files, git_root):
     default_aiderignore_file = (
         os.path.join(git_root, ".aiderignore") if git_root else ".aiderignore"
     )
-
     group.add_argument(
         "--aiderignore",
         metavar="AIDERIGNORE",
@@ -455,21 +454,10 @@ def get_parser(default_config_files, git_root):
         help="Enable/disable git pre-commit hooks with --no-verify (default: False)",
     )
     group.add_argument(
-        "--commit",
-        action="store_true",
-        help="Commit all pending changes with a suitable commit message, then exit",
-        default=False,
-    )
-    group.add_argument(
-        "--commit-prompt",
-        metavar="PROMPT",
-        help="Specify a custom prompt for generating commit messages",
-    )
-    group.add_argument(
-        "--dry-run",
+        "--watch-files",
         action=argparse.BooleanOptionalAction,
         default=False,
-        help="Perform a dry run without modifying files (default: False)",
+        help="Enable/disable watching files for ai coding comments (default: False)",
     )
     group.add_argument(
         "--skip-sanity-check-repo",
@@ -477,12 +465,6 @@ def get_parser(default_config_files, git_root):
         help="Skip the sanity check for the git repository (default: False)",
         default=False,
     )
-    group.add_argument(
-        "--watch-files",
-        action=argparse.BooleanOptionalAction,
-        default=False,
-        help="Enable/disable watching files for ai coding comments (default: False)",
-    )
     group = parser.add_argument_group("Fixing and committing")
     group.add_argument(
         "--lint",
@@ -522,26 +504,17 @@ def get_parser(default_config_files, git_root):
         help="Run tests, fix problems found and then exit",
         default=False,
     )
-
-    ##########
-    group = parser.add_argument_group("Analytics")
-    group.add_argument(
-        "--analytics",
-        action=argparse.BooleanOptionalAction,
-        default=None,
-        help="Enable/disable analytics for current session (default: random)",
-    )
-    group.add_argument(
-        "--analytics-log",
-        metavar="ANALYTICS_LOG_FILE",
-        help="Specify a file to log analytics events",
-    )
     group.add_argument(
-        "--analytics-disable",
+        "--commit",
         action="store_true",
-        help="Permanently disable analytics",
+        help="Commit all pending changes with a suitable commit message, then exit",
         default=False,
     )
+    group.add_argument(
+        "--commit-prompt",
+        metavar="PROMPT",
+        help="Specify a custom prompt for generating commit messages",
+    )
 
     #########
     group = parser.add_argument_group("Upgrading")
@@ -627,6 +600,12 @@ def get_parser(default_config_files, git_root):
         help="Apply clipboard contents as edits using the main model's editor format",
         default=False,
     )
+    group.add_argument(
+        "--dry-run",
+        action=argparse.BooleanOptionalAction,
+        default=False,
+        help="Perform a dry run without modifying files (default: False)",
+    )
     group.add_argument(
         "--exit",
         action="store_true",
@@ -788,6 +767,26 @@ def get_parser(default_config_files, git_root):
         help="Specify which editor to use for the /editor command",
     )
 
+    ##########
+    group = parser.add_argument_group("Analytics")
+    group.add_argument(
+        "--analytics",
+        action=argparse.BooleanOptionalAction,
+        default=None,
+        help="Enable/disable analytics for current session (default: random)",
+    )
+    group.add_argument(
+        "--analytics-log",
+        metavar="ANALYTICS_LOG_FILE",
+        help="Specify a file to log analytics events",
+    )
+    group.add_argument(
+        "--analytics-disable",
+        action="store_true",
+        help="Permanently disable analytics",
+        default=False,
+    )
+
     ##########
     group = parser.add_argument_group("Deprecated model settings")
     # Add deprecated model shortcut arguments
