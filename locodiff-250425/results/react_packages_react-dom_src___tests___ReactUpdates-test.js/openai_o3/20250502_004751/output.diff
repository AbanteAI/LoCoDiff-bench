--- react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual)@@ -3,8 +3,6 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -25,10 +23,10 @@     jest.resetModules();
     React = require('react');
     ReactDOM = require('react-dom');
-    ReactDOMClient = require('react-dom/client');
     findDOMNode =
       ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
         .findDOMNode;
+    ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
     assertConsoleErrorDev =
       require('internal-test-utils').assertConsoleErrorDev;
@@ -53,6 +51,13 @@     );
   }
 
+  // Helpers for tests
+  function createRoot(el) {
+    return ReactDOMClient.createRoot(el);
+  }
+
+  // ------------- Tests begin -----------------
+
   it('should batch state when updating state twice', async () => {
     let componentState;
     let setState;
@@ -69,7 +74,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Component />);
     });
@@ -116,7 +121,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Component />);
     });
@@ -162,7 +167,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Component prop={0} />);
     });
@@ -228,7 +233,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
@@ -295,7 +300,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
@@ -338,7 +343,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Component />);
     });
@@ -394,7 +399,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Component />);
     });
@@ -448,7 +453,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
@@ -498,7 +503,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Top />);
     });
@@ -579,7 +584,7 @@ 
     const container = document.createElement('div');
     await act(() => {
-      ReactDOMClient.createRoot(container).render(<App />);
+      createRoot(container).render(<App />);
     });
 
     function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
@@ -691,7 +696,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<A />);
     });
@@ -742,18 +747,20 @@       }
 
       componentDidUpdate() {
-        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+        updates.push(
+          'Inner-didUpdate-' + this.props.x + '-' + this.state.x,
+        );
+      }
+    }
+
+    const container = document.createElement('div');
+    const root = createRoot(container);
     await act(() => {
       root.render(<Outer />);
     });
 
-    await act(() => {
-      updates.push('Outer-setState-1');
+    updates.push('Outer-setState-1');
+    await act(() => {
       instance.setState({x: 1}, function () {
         updates.push('Outer-callback-1');
         updates.push('Outer-setState-2');
@@ -766,20 +773,14 @@     expect(updates).toEqual([
       'Outer-render-0',
       'Inner-render-0-0',
-
       'Outer-setState-1',
       'Outer-render-1',
       'Inner-render-1-0',
       'Inner-didUpdate-1-0',
       'Outer-didUpdate-1',
-      // Happens in a batch, so don't re-render yet
       'Inner-setState-1',
       'Outer-callback-1',
-
-      // Happens in a batch
       'Outer-setState-2',
-
-      // Flush batched updates all at once
       'Outer-render-2',
       'Inner-render-2-1',
       'Inner-didUpdate-2-1',
@@ -818,9 +819,8 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<MockComponent depth={0} count={2} />);
+    await act(() => {
+      createRoot(container).render(<MockComponent depth={0} count={2} />);
     });
 
     expect(updates).toEqual([0, 1, 2]);
@@ -836,8 +836,6 @@   });
 
   it('should queue nested updates', async () => {
-    // See https://github.com/facebook/react/issues/1147
-
     class X extends React.Component {
       state = {s: 0};
 
@@ -875,23 +873,23 @@         return <div />;
       }
 
-      UNSAFE_componentWillUpdate() {
+      componentWillUpdate() {
         x.go();
       }
     }
 
-    let container = document.createElement('div');
-    let root = ReactDOMClient.createRoot(container);
+    const xContainer = document.createElement('div');
+    const xRoot = createRoot(xContainer);
     let x;
     await act(() => {
-      root.render(<X ref={current => (x = current)} />);
-    });
-
-    container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
+      xRoot.render(<X ref={current => (x = current)} />);
+    });
+
+    const yContainer = document.createElement('div');
+    const yRoot = createRoot(yContainer);
     let y;
     await act(() => {
-      root.render(<Y ref={current => (y = current)} />);
+      yRoot.render(<Y ref={current => (y = current)} />);
     });
 
     expect(findDOMNode(x).textContent).toBe('0');
@@ -903,23 +901,21 @@   });
 
   it('should queue updates from during mount', async () => {
-    // See https://github.com/facebook/react/issues/1353
     let a;
 
     class A extends React.Component {
       state = {x: 0};
-
-      UNSAFE_componentWillMount() {
+      constructor(props) {
+        super(props);
         a = this;
       }
-
       render() {
         return <div>A{this.state.x}</div>;
       }
     }
 
     class B extends React.Component {
-      UNSAFE_componentWillMount() {
+      componentWillMount() {
         a.setState({x: 1});
       }
 
@@ -929,7 +925,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
 
     await act(() => {
       root.render(
@@ -962,7 +958,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<A x={1} />);
     });
@@ -1005,7 +1001,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<A />);
     });
@@ -1036,7 +1032,7 @@     }
 
     let container = document.createElement('div');
-    let root = ReactDOMClient.createRoot(container);
+    let root = createRoot(container);
     let component;
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
@@ -1058,7 +1054,7 @@       {withoutStack: true},
     );
     container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
+    root = createRoot(container);
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
     });
@@ -1079,7 +1075,7 @@       {withoutStack: true},
     );
     container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
+    root = createRoot(container);
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
     });
@@ -1109,7 +1105,7 @@     }
 
     let container = document.createElement('div');
-    let root = ReactDOMClient.createRoot(container);
+    let root = createRoot(container);
     let component;
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
@@ -1131,7 +1127,7 @@       {withoutStack: true},
     );
     container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
+    root = createRoot(container);
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
     });
@@ -1153,7 +1149,7 @@     );
     // Make sure the warning is deduplicated and doesn't fire again
     container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
+    root = createRoot(container);
     await act(() => {
       root.render(<A ref={current => (component = current)} />);
     });
@@ -1217,11 +1213,10 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
-
     const child = parent.getChild();
     await act(() => {
       parent.forceUpdate();
@@ -1278,7 +1273,7 @@       }
     }
 
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
+    const root = createRoot(document.createElement('div'));
     await act(() => {
       root.render(<App />);
     });
@@ -1303,7 +1298,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     function render() {
       root.render(
         <Editor
@@ -1334,7 +1329,7 @@ 
   it('mounts and unmounts are batched', async () => {
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
 
     await act(() => {
       root.render(<div>Hello</div>);
@@ -1361,17 +1356,15 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Foo />);
     });
-    assertConsoleErrorDev([
-      'Cannot update during an existing state transition (such as within `render`). ' +
-        'Render methods should be a pure function of props and state.\n' +
-        '    in Foo (at **)',
-    ]);
-
     assertLog(['base: 0, memoized: 0', 'base: 1, memoized: 1']);
+    assertConsoleErrorDev(
+      ['Cannot update during an existing state transition'],
+      {withoutStack: true},
+    );
   });
 
   it('does not re-render if state update is null', async () => {
@@ -1385,7 +1378,7 @@         return <div />;
       }
     }
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<Foo />);
     });
@@ -1397,6 +1390,7 @@     assertLog([]);
   });
 
+  //  Will change once we switch to async by default
   it('synchronously renders hidden subtrees', async () => {
     const container = document.createElement('div');
 
@@ -1422,7 +1416,7 @@       );
     }
 
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       // Mount
       root.render(<Foo />);
@@ -1468,19 +1462,19 @@       );
     }
 
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     let hiddenDiv;
-    await act(async () => {
+    await act(() => {
       root.render(<Foo />);
-      await waitFor(['Foo', 'Baz', 'Foo#effect']);
-      hiddenDiv = container.firstChild.firstChild;
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('');
-      // Run offscreen update
-      await waitForAll(['Bar']);
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
-    });
+    });
+    await waitFor(['Foo', 'Baz', 'Foo#effect']);
+    hiddenDiv = container.firstChild.firstChild;
+    expect(hiddenDiv.hidden).toBe(true);
+    expect(hiddenDiv.innerHTML).toBe('');
+    // Run offscreen update
+    await waitForAll(['Bar']);
+    expect(hiddenDiv.hidden).toBe(true);
+    expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
 
     ReactDOM.flushSync(() => {
       setCounter(1);
@@ -1528,7 +1522,7 @@       }
     }
 
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
+    const root = createRoot(document.createElement('div'));
     await act(() => {
       root.render(<Foo />);
     });
@@ -1557,7 +1551,7 @@     }
 
     let limit = 55;
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await expect(async () => {
       await act(() => {
         root.render(<EventuallyTerminating ref={ref} />);
@@ -1575,7 +1569,6 @@       ref.current.setState({step: 0});
     });
     expect(container.textContent).toBe(limit.toString());
-
     await act(() => {
       ref.current.setState({step: 0});
     });
@@ -1613,7 +1606,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
 
     await expect(async () => {
       await act(() => {
@@ -1621,364 +1614,4 @@       });
     }).rejects.toThrow('Maximum');
   });
-
-  it('does not fall into an infinite update loop with useLayoutEffect', async () => {
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useLayoutEffect(() => {
-        setStep(x => x + 1);
-      });
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('can recover after falling into an infinite update loop', async () => {
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-      componentDidUpdate() {
-        this.setState({step: 2});
-      }
-      render() {
-        return this.state.step;
-      }
-    }
-
-    class Terminating extends React.Component {
-      state = {step: 0};
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-      render() {
-        return this.state.step;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-
-    await act(() => {
-      root.render(<Terminating />);
-    });
-    expect(container.textContent).toBe('1');
-
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-    await act(() => {
-      root.render(<Terminating />);
-    });
-    expect(container.textContent).toBe('1');
-  });
-
-  it('does not fall into mutually recursive infinite update loop with same container', async () => {
-    // Note: this test would fail if there were two or more different roots.
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    class A extends React.Component {
-      componentDidMount() {
-        root.render(<B />);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    class B extends React.Component {
-      componentDidMount() {
-        root.render(<A />);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    await expect(async () => {
-      await act(() => {
-        root.render(<A />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('does not fall into an infinite error loop', async () => {
-    function BadRender() {
-      throw new Error('error');
-    }
-
-    class ErrorBoundary extends React.Component {
-      componentDidCatch() {
-        // Schedule a no-op state update to avoid triggering a DEV warning in the test.
-        this.setState({});
-
-        this.props.parent.remount();
-      }
-      render() {
-        return <BadRender />;
-      }
-    }
-
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-      remount() {
-        this.setState(state => ({step: state.step + 1}));
-      }
-      render() {
-        return <ErrorBoundary key={this.state.step} parent={this} />;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('can schedule ridiculously many updates within the same batch without triggering a maximum update error', async () => {
-    const subscribers = [];
-    const limit = 1200;
-    class Child extends React.Component {
-      state = {value: 'initial'};
-      componentDidMount() {
-        subscribers.push(this);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    class App extends React.Component {
-      render() {
-        const children = [];
-        for (let i = 0; i < limit; i++) {
-          children.push(<Child key={i} />);
-        }
-        return children;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<App />);
-    });
-
-    await act(() => {
-      subscribers.forEach(s => {
-        s.setState({value: 'update'});
-      });
-    });
-
-    expect(subscribers.length).toBe(limit);
-  });
-
-  it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
-    let setState;
-    function App() {
-      const [, _setState] = React.useState(0);
-      setState = _setState;
-      return <Child />;
-    }
-
-    function Child(step) {
-      // This will cause an infinite update loop, and a warning in dev.
-      setState(n => n + 1);
-      return null;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => ReactDOM.flushSync(() => root.render(<App />)));
-    }).rejects.toThrow('Maximum update depth exceeded');
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  it("does not infinite loop if there's an async render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
-    let setState;
-    function App() {
-      const [, _setState] = React.useState(0);
-      setState = _setState;
-      return <Child />;
-    }
-
-    function Child(step) {
-      // This will cause an infinite update loop, and a warning in dev.
-      setState(n => n + 1);
-      return null;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => {
-        React.startTransition(() => root.render(<App />));
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  // TODO: Replace this branch with @gate pragmas
-  if (__DEV__) {
-    it('warns about a deferred infinite update loop with useEffect', async () => {
-      function NonTerminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(function myEffect() {
-          setStep(x => x + 1);
-        });
-        return step;
-      }
-
-      function App() {
-        return <NonTerminating />;
-      }
-
-      let error = null;
-      let ownerStack = null;
-      let debugStack = null;
-      const originalConsoleError = console.error;
-      console.error = e => {
-        error = e;
-        ownerStack = React.captureOwnerStack();
-        debugStack = new Error().stack;
-        Scheduler.log('stop');
-      };
-      try {
-        const container = document.createElement('div');
-        const root = ReactDOMClient.createRoot(container);
-        root.render(<App />);
-        await waitFor(['stop']);
-      } finally {
-        console.error = originalConsoleError;
-      }
-
-      expect(error).toContain('Maximum update depth exceeded');
-      // The currently executing effect should be on the native stack
-      expect(debugStack).toContain('at myEffect');
-      expect(ownerStack).toContain('at App');
-    });
-
-    it('can have nested updates if they do not cross the limit', async () => {
-      let _setStep;
-      const LIMIT = 50;
-
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        _setStep = setStep;
-        React.useEffect(() => {
-          if (step < LIMIT) {
-            setStep(x => x + 1);
-          }
-        });
-        Scheduler.log(step);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
-      expect(container.textContent).toBe('50');
-      await act(() => {
-        _setStep(0);
-      });
-      expect(container.textContent).toBe('50');
-    });
-
-    it('can have many updates inside useEffect without triggering a warning', async () => {
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(() => {
-          for (let i = 0; i < 1000; i++) {
-            setStep(x => x + 1);
-          }
-          Scheduler.log('Done');
-        }, []);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(['Done']);
-      expect(container.textContent).toBe('1000');
-    });
-  }
-
-  it('prevents infinite update loop triggered by synchronous updates in useEffect', async () => {
-    // Ignore flushSync warning
-    spyOnDev(console, 'error').mockImplementation(() => {});
-
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useEffect(() => {
-        // Other examples of synchronous updates in useEffect are imperative
-        // event dispatches like `el.focus`, or `useSyncExternalStore`, which
-        // may schedule a synchronous update upon subscribing if it detects
-        // that the store has been mutated since the initial render.
-        //
-        // (Originally I wrote this test using `el.focus` but those errors
-        // get dispatched in a JSDOM event and I don't know how to "catch" those
-        // so that they don't fail the test.)
-        ReactDOM.flushSync(() => {
-          setStep(step + 1);
-        });
-      }, [step]);
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        ReactDOM.flushSync(() => {
-          root.render(<NonTerminating />);
-        });
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-  });
-});+...