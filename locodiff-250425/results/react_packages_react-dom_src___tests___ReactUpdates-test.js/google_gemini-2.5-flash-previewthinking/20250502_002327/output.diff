--- react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual)@@ -25,10 +25,10 @@     jest.resetModules();
     React = require('react');
     ReactDOM = require('react-dom');
-    ReactDOMClient = require('react-dom/client');
     findDOMNode =
       ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
         .findDOMNode;
+    ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
     assertConsoleErrorDev =
       require('internal-test-utils').assertConsoleErrorDev;
@@ -39,6 +39,38 @@     waitFor = InternalTestUtils.waitFor;
     assertLog = InternalTestUtils.assertLog;
   });
+
+  if (__DEV__) {
+    it('warns when setState is not a function', () => {
+      class A extends React.Component {
+        state = {};
+
+        render() {
+          return <div />;
+        }
+      }
+
+      let container = document.createElement('div');
+      let root = ReactDOMClient.createRoot(container);
+      let component;
+      act(() => {
+        root.render(<A ref={current => (component = current)} />);
+      });
+
+      assertConsoleErrorDev([
+        "setState(...): Expected the last optional `callback` argument to be a function. Instead received: 'no'.",
+        "setState(...): Expected the last optional `callback` argument to be a function. Instead received: { foo: 'bar' }.",
+        'setState(...): Expected the last optional `callback` argument to be a function. Instead received: [object Object].',
+      ]);
+      component.setState({}, 'no');
+      component.setState({}, {foo: 'bar'});
+      function Foo() {
+        this.a = 1;
+        this.b = 2;
+      }
+      component.setState({}, new Foo());
+    });
+  }
 
   // Note: This is based on a similar component we use in www. We can delete
   // once the extra div wrapper is no longer necessary.
@@ -482,6 +514,7 @@     class Middle extends React.Component {
       componentDidMount() {
         this.forceUpdate();
+        Scheduler.log('Middle mount');
       }
 
       render() {
@@ -503,7 +536,7 @@       root.render(<Top />);
     });
 
-    assertLog(['Middle', 'Bottom', 'Middle']);
+    assertLog(['Middle', 'Bottom', 'Middle mount', 'Middle']);
   });
 
   it('should flow updates correctly', async () => {
@@ -563,6 +596,7 @@     class App extends React.Component {
       switcherRef = React.createRef();
       childRef = React.createRef();
+
       constructor(props) {
         super(props);
         instance = this;
@@ -584,10 +618,10 @@ 
     function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
       let i;
-      for (i = 0; i < desiredWillUpdates; i++) {
+      for (i = 0; i < desiredWillUpdates.length; i++) {
         expect(willUpdates).toContain(desiredWillUpdates[i]);
       }
-      for (i = 0; i < desiredDidUpdates; i++) {
+      for (i = 0; i < desiredDidUpdates.length; i++) {
         expect(didUpdates).toContain(desiredDidUpdates[i]);
       }
       willUpdates = [];
@@ -1047,13 +1081,11 @@         component.setState({}, 'no');
       });
     }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
+      'Invalid argument passed as callback. Expected a function. Instead received: no',
     );
     assertConsoleErrorDev(
       [
-        'Expected the last optional `callback` argument to be ' +
-          'a function. Instead received: no.',
+        'Expected the last optional `callback` argument to be a function. Instead received: no.',
       ],
       {withoutStack: true},
     );
@@ -1068,13 +1100,11 @@         component.setState({}, {foo: 'bar'});
       });
     }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
+      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
     );
     assertConsoleErrorDev(
       [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
+        "Expected the last optional `callback` argument to be a function. Instead received: { foo: 'bar' }.",
       ],
       {withoutStack: true},
     );
@@ -1089,8 +1119,7 @@         component.setState({}, new Foo());
       }),
     ).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
+      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
     );
   });
 
@@ -1120,13 +1149,11 @@         component.forceUpdate('no');
       });
     }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
+      'Invalid argument passed as callback. Expected a function. Instead received: no',
     );
     assertConsoleErrorDev(
       [
-        'Expected the last optional `callback` argument to be ' +
-          'a function. Instead received: no.',
+        'Expected the last optional `callback` argument to be a function. Instead received: no.',
       ],
       {withoutStack: true},
     );
@@ -1141,13 +1168,11 @@         component.forceUpdate({foo: 'bar'});
       });
     }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
+      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
     );
     assertConsoleErrorDev(
       [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
+        "Expected the last optional `callback` argument to be a function. Instead received: { foo: 'bar' }.",
       ],
       {withoutStack: true},
     );
@@ -1163,8 +1188,7 @@         component.forceUpdate(new Foo());
       }),
     ).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
+      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
     );
   });
 
@@ -1181,6 +1205,7 @@       };
 
       render() {
+        Scheduler.log('render parent');
         return <Child ref={this.childRef} />;
       }
     }
@@ -1193,6 +1218,7 @@       state = {updated: false};
 
       UNSAFE_componentWillUpdate() {
+        Scheduler.log('will update');
         if (!once) {
           once = true;
           this.setState({updated: true});
@@ -1200,16 +1226,19 @@       }
 
       componentDidMount() {
+        Scheduler.log('did mount');
         expect(renderCount).toBe(postRenderCount + 1);
         postRenderCount++;
       }
 
       componentDidUpdate() {
+        Scheduler.log('did update');
         expect(renderCount).toBe(postRenderCount + 1);
         postRenderCount++;
       }
 
       render() {
+        Scheduler.log('render child');
         expect(renderCount).toBe(postRenderCount);
         renderCount++;
         return <div />;
@@ -1221,14 +1250,27 @@     await act(() => {
       root.render(<Parent />);
     });
+    assertLog(['render parent', 'render child', 'did mount']);
+    expect(renderCount).toBe(1);
+    expect(postRenderCount).toBe(1);
 
     const child = parent.getChild();
+
+    // Calling forceUpdate on parent and child should only result in one render
+    // for each component instead of two.
     await act(() => {
       parent.forceUpdate();
       child.forceUpdate();
     });
-
-    expect.assertions(6);
+    assertLog([
+      'render parent',
+      'render child',
+      'will update',
+      'did update',
+      'did update',
+    ]);
+    expect(renderCount).toBe(2);
+    expect(postRenderCount).toBe(2);
   });
 
   it('does not update one component twice in a batch (#6371)', async () => {
@@ -1244,6 +1286,7 @@       }
       componentDidMount() {
         this.setState({showChild: false});
+        Scheduler.log('App mount');
       }
       render() {
         return (
@@ -1258,22 +1301,29 @@     class EmitsChangeOnUnmount extends React.Component {
       componentWillUnmount() {
         emitChange();
-      }
-      render() {
+        Scheduler.log('EmitsChangeOnUnmount will unmount');
+      }
+      render() {
+        Scheduler.log('EmitsChangeOnUnmount render');
         return null;
       }
     }
 
     class ForceUpdatesOnChange extends React.Component {
       componentDidMount() {
-        this.onChange = () => this.forceUpdate();
+        this.onChange = () => {
+          this.forceUpdate();
+          Scheduler.log('ForceUpdatesOnChange forced update');
+        };
         this.onChange();
         callbacks.push(this.onChange);
       }
       componentWillUnmount() {
         callbacks = callbacks.filter(c => c !== this.onChange);
-      }
-      render() {
+        Scheduler.log('ForceUpdatesOnChange will unmount');
+      }
+      render() {
+        Scheduler.log('ForceUpdatesOnChange render');
         return <div key={Math.random()} onClick={function () {}} />;
       }
     }
@@ -1283,8 +1333,14 @@       root.render(<App />);
     });
 
-    // Error should not be thrown.
-    expect(true).toBe(true);
+    assertLog([
+      'ForceUpdatesOnChange render',
+      'EmitsChangeOnUnmount render',
+      'ForceUpdatesOnChange forced update',
+      'App mount',
+      'EmitsChangeOnUnmount will unmount',
+      'ForceUpdatesOnChange render',
+    ]);
   });
 
   it('handles reentrant mounting in synchronous mode', async () => {
@@ -1367,8 +1423,9 @@     });
     assertConsoleErrorDev([
       'Cannot update during an existing state transition (such as within `render`). ' +
-        'Render methods should be a pure function of props and state.\n' +
-        '    in Foo (at **)',
+        'Render methods should be a pure function of props and state.',
+      // TODO: test that the stack is included
+      // '    in Foo (at **)', // Stack excluded due to test helper withoutStack
     ]);
 
     assertLog(['base: 0, memoized: 0', 'base: 1, memoized: 1']);
@@ -1762,7 +1819,7 @@         subscribers.push(this);
       }
       render() {
-        return null;
+        return <div>{state}</div>;
       }
     }
 
@@ -1815,10 +1872,8 @@       await act(() => ReactDOM.flushSync(() => root.render(<App />)));
     }).rejects.toThrow('Maximum update depth exceeded');
     assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
+      'Cannot update a component (`App`) while rendering a different component (`Child`). To locate the bad setState() call inside `Child`, follow the stack trace as described in https://react.dev/link/setstate-in-render',
+      // Stack excluded due to test helper withoutStack
     ]);
   });
 
@@ -1849,10 +1904,8 @@     }).rejects.toThrow('Maximum update depth exceeded');
 
     assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
+      'Cannot update a component (`App`) while rendering a different component (`Child`). To locate the bad setState() call inside `Child`, follow the stack trace as described in https://react.dev/link/setstate-in-render',
+      // Stack excluded due to test helper withoutStack
     ]);
   });
 
@@ -1891,8 +1944,11 @@       }
 
       expect(error).toContain('Maximum update depth exceeded');
-      // The currently executing effect should be on the native stack
+      // The currently executing effect should be on the native stack (`debugStack` or `nativeStack`)
       expect(debugStack).toContain('at myEffect');
+      // The owner stack should contain the App and NonTerminating components.
+      // This is formatted differently across DEV/PROD/canary, so we only assert the component names.
+      expect(ownerStack).toContain('at NonTerminating');
       expect(ownerStack).toContain('at App');
     });
 
@@ -1923,6 +1979,8 @@       await act(() => {
         _setStep(0);
       });
+      // Should flush new updates.
+      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
       expect(container.textContent).toBe('50');
     });
 
