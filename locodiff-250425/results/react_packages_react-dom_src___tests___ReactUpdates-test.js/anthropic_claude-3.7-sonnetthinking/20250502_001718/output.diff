--- react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual)@@ -1650,7 +1650,7 @@         this.setState({step: 2});
       }
       render() {
-        return this.state.step;
+        return <div>{this.state.step}</div>;
       }
     }
 
@@ -1660,7 +1660,7 @@         this.setState({step: 1});
       }
       render() {
-        return this.state.step;
+        return <div>{this.state.step}</div>;
       }
     }
 
@@ -1736,11 +1736,14 @@ 
     class NonTerminating extends React.Component {
       state = {step: 0};
+      componentDidMount() {
+        this.remount();
+      }
       remount() {
         this.setState(state => ({step: state.step + 1}));
       }
       render() {
-        return <ErrorBoundary key={this.state.step} parent={this} />;
+        return <ErrorBoundary parent={this} />;
       }
     }
 
@@ -1812,14 +1815,12 @@     const root = ReactDOMClient.createRoot(container);
 
     await expect(async () => {
-      await act(() => ReactDOM.flushSync(() => root.render(<App />)));
-    }).rejects.toThrow('Maximum update depth exceeded');
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
+      await expect(async () => {
+        await act(() => ReactDOM.flushSync(() => root.render(<App />)));
+      }).rejects.toThrow('Maximum update depth exceeded');
+    }).toErrorDev(
+      'Cannot update a component (`App`) while rendering a different component (`Child`)',
+    );
   });
 
   it("does not infinite loop if there's an async render phase update on another component", async () => {
@@ -1903,6 +1904,7 @@       function Terminating() {
         const [step, setStep] = React.useState(0);
         _setStep = setStep;
+
         React.useEffect(() => {
           if (step < LIMIT) {
             setStep(x => x + 1);
