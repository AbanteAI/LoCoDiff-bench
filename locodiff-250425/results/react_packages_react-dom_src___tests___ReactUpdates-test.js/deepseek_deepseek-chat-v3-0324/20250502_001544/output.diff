
index ee4adf12..b7b8adb5 100644
--- a/react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected):tmp/tmpoms4bwvs_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual):tmp/tmpbp5wabr7_actual.txt	
@@ -375,7 +375,6 @@ describe('ReactUpdates', () => {
     let shouldUpdateCount = 0;
     class Component extends React.Component {
       state = {x: 0};
-
       constructor(props) {
         super(props);
         instance = this;
@@ -1378,6 +1377,7 @@ describe('ReactUpdates', () => {
     const container = document.createElement('div');
 
     let instance;
+    let ops = [];
     class Foo extends React.Component {
       render() {
         instance = this;
@@ -1470,14 +1470,14 @@ describe('ReactUpdates', () => {
 
     const root = ReactDOMClient.createRoot(container);
     let hiddenDiv;
-    await act(async () => {
+    await act(() => {
       root.render(<Foo />);
-      await waitFor(['Foo', 'Baz', 'Foo#effect']);
+      expect(Scheduler).toFlushAndYieldThrough(['Foo', 'Baz', 'Foo#effect']);
       hiddenDiv = container.firstChild.firstChild;
       expect(hiddenDiv.hidden).toBe(true);
       expect(hiddenDiv.innerHTML).toBe('');
       // Run offscreen update
-      await waitForAll(['Bar']);
+      expect(Scheduler).toFlushAndYield(['Bar']);
       expect(hiddenDiv.hidden).toBe(true);
       expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
     });
@@ -1650,7 +1650,7 @@ describe('ReactUpdates', () => {
         this.setState({step: 2});
       }
       render() {
-        return this.state.step;
+        return <div>Hello {this.props.name}{this.state.step}</div>;
       }
     }
 
