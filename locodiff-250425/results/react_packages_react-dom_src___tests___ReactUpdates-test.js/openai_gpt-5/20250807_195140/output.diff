
index ee4adf12f..259c08a2c 100644
--- a/react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected):tmp/tmpyb3hctjz_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual):tmp/tmp_e3c9umj_actual.txt	
@@ -11,14 +11,12 @@
 
 let React;
 let ReactDOM;
-let findDOMNode;
 let ReactDOMClient;
 let act;
 let Scheduler;
 let waitForAll;
 let waitFor;
 let assertLog;
-let assertConsoleErrorDev;
 
 describe('ReactUpdates', () => {
   beforeEach(() => {
@@ -26,12 +24,7 @@ describe('ReactUpdates', () => {
     React = require('react');
     ReactDOM = require('react-dom');
     ReactDOMClient = require('react-dom/client');
-    findDOMNode =
-      ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
-        .findDOMNode;
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
     Scheduler = require('scheduler');
 
     const InternalTestUtils = require('internal-test-utils');
@@ -666,7 +659,7 @@ describe('ReactUpdates', () => {
         a = this;
       }
       componentDidUpdate() {
-        expect(findDOMNode(b).textContent).toBe('B1');
+        expect(ReactDOM.findDOMNode(b).textContent).toBe('B1');
         aUpdated = true;
       }
 
@@ -737,12 +730,16 @@ describe('ReactUpdates', () => {
       state = {x: 0};
 
       render() {
-        updates.push('Inner-render-' + this.props.x + '-' + this.state.x);
+        updates.push(
+          'Inner-render-' + this.props.x + '-' + this.state.x,
+        );
         return <div />;
       }
 
       componentDidUpdate() {
-        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);
+        updates.push(
+          'Inner-didUpdate-' + this.props.x + '-' + this.state.x,
+        );
       }
     }
 
@@ -763,6 +760,7 @@ describe('ReactUpdates', () => {
       });
     });
 
+    /* eslint-disable indent */
     expect(updates).toEqual([
       'Outer-render-0',
       'Inner-render-0-0',
@@ -791,6 +789,7 @@ describe('ReactUpdates', () => {
       'Inner-didUpdate-2-2',
       'Inner-callback-2',
     ]);
+    /* eslint-enable indent */
   });
 
   it('should flush updates in the correct order across roots', async () => {
@@ -806,7 +805,7 @@ describe('ReactUpdates', () => {
       componentDidMount() {
         instances.push(this);
         if (this.props.depth < this.props.count) {
-          const root = ReactDOMClient.createRoot(findDOMNode(this));
+          const root = ReactDOMClient.createRoot(ReactDOM.findDOMNode(this));
           root.render(
             <MockComponent
               depth={this.props.depth + 1}
@@ -894,12 +893,12 @@ describe('ReactUpdates', () => {
       root.render(<Y ref={current => (y = current)} />);
     });
 
-    expect(findDOMNode(x).textContent).toBe('0');
+    expect(ReactDOM.findDOMNode(x).textContent).toBe('0');
 
     await act(() => {
       y.forceUpdate();
     });
-    expect(findDOMNode(x).textContent).toBe('1');
+    expect(ReactDOM.findDOMNode(x).textContent).toBe('1');
   });
 
   it('should queue updates from during mount', async () => {
@@ -1042,20 +1041,18 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(async () => {
-      await act(() => {
-        component.setState({}, 'no');
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
-    );
-    assertConsoleErrorDev(
-      [
+    await expect(
+      expect(async () => {
+        await act(() => {
+          component.setState({}, 'no');
+        });
+      }).toErrorDev(
         'Expected the last optional `callback` argument to be ' +
           'a function. Instead received: no.',
-      ],
-      {withoutStack: true},
+      ),
+    ).rejects.toThrowError(
+      'Invalid argument passed as callback. Expected a function. Instead ' +
+        'received: no',
     );
     container = document.createElement('div');
     root = ReactDOMClient.createRoot(container);
@@ -1063,21 +1060,19 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(async () => {
-      await act(() => {
-        component.setState({}, {foo: 'bar'});
-      });
-    }).rejects.toThrowError(
+    await expect(
+      expect(async () => {
+        await act(() => {
+          component.setState({}, {foo: 'bar'});
+        });
+      }).toErrorDev(
+        'Expected the last optional `callback` argument to be ' +
+          'a function. Instead received: [object Object].',
+      ),
+    ).rejects.toThrowError(
       'Invalid argument passed as callback. Expected a function. Instead ' +
         'received: [object Object]',
     );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
-      ],
-      {withoutStack: true},
-    );
     container = document.createElement('div');
     root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -1115,20 +1110,18 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(async () => {
-      await act(() => {
-        component.forceUpdate('no');
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
-    );
-    assertConsoleErrorDev(
-      [
+    await expect(
+      expect(async () => {
+        await act(() => {
+          component.forceUpdate('no');
+        });
+      }).toErrorDev(
         'Expected the last optional `callback` argument to be ' +
           'a function. Instead received: no.',
-      ],
-      {withoutStack: true},
+      ),
+    ).rejects.toThrowError(
+      'Invalid argument passed as callback. Expected a function. Instead ' +
+        'received: no',
     );
     container = document.createElement('div');
     root = ReactDOMClient.createRoot(container);
@@ -1136,21 +1129,19 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(async () => {
-      await act(() => {
-        component.forceUpdate({foo: 'bar'});
-      });
-    }).rejects.toThrowError(
+    await expect(
+      expect(async () => {
+        await act(() => {
+          component.forceUpdate({foo: 'bar'});
+        });
+      }).toErrorDev(
+        'Expected the last optional `callback` argument to be ' +
+          'a function. Instead received: [object Object].',
+      ),
+    ).rejects.toThrowError(
       'Invalid argument passed as callback. Expected a function. Instead ' +
         'received: [object Object]',
     );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
-      ],
-      {withoutStack: true},
-    );
     // Make sure the warning is deduplicated and doesn't fire again
     container = document.createElement('div');
     root = ReactDOMClient.createRoot(container);
@@ -1362,14 +1353,11 @@ describe('ReactUpdates', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Foo />);
-    });
-    assertConsoleErrorDev([
-      'Cannot update during an existing state transition (such as within `render`). ' +
-        'Render methods should be a pure function of props and state.\n' +
-        '    in Foo (at **)',
-    ]);
+    await expect(async () => {
+      await act(() => {
+        root.render(<Foo />);
+      });
+    }).toErrorDev('Cannot update during an existing state transition');
 
     assertLog(['base: 0, memoized: 0', 'base: 1, memoized: 1']);
   });
@@ -1558,11 +1546,11 @@ describe('ReactUpdates', () => {
 
     let limit = 55;
     const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<EventuallyTerminating ref={ref} />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
 
     // Verify that we don't go over the limit if these updates are unrelated.
     limit -= 10;
@@ -1575,22 +1563,21 @@ describe('ReactUpdates', () => {
       ref.current.setState({step: 0});
     });
     expect(container.textContent).toBe(limit.toString());
-
     await act(() => {
       ref.current.setState({step: 0});
     });
     expect(container.textContent).toBe(limit.toString());
 
     limit += 10;
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         ref.current.setState({step: 0});
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
     expect(ref.current).toBe(null);
   });
 
-  it('does not fall into an infinite update loop', async () => {
+  it('does not fall into an infinite update loop', () => {
     class NonTerminating extends React.Component {
       state = {step: 0};
 
@@ -1615,29 +1602,25 @@ describe('ReactUpdates', () => {
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<NonTerminating />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
   });
 
-  it('does not fall into an infinite update loop with useLayoutEffect', async () => {
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useLayoutEffect(() => {
-        setStep(x => x + 1);
-      });
-      return step;
+  it('does not fall into an infinite error loop', () => {
+    function BadRender() {
+      throw new Error('error');
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
+    expect(() => {
+      ReactDOM.flushSync(() => {
+        root.render(<BadRender />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
   });
 
   it('can recover after falling into an infinite update loop', async () => {
@@ -1666,29 +1649,29 @@ describe('ReactUpdates', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<NonTerminating />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
 
     await act(() => {
       root.render(<Terminating />);
     });
     expect(container.textContent).toBe('1');
 
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<NonTerminating />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
     await act(() => {
       root.render(<Terminating />);
     });
     expect(container.textContent).toBe('1');
   });
 
-  it('does not fall into mutually recursive infinite update loop with same container', async () => {
+  it('does not fall into mutually recursive infinite update loop with same container', () => {
     // Note: this test would fail if there were two or more different roots.
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
@@ -1710,47 +1693,29 @@ describe('ReactUpdates', () => {
       }
     }
 
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<A />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
   });
 
-  it('does not fall into an infinite error loop', async () => {
-    function BadRender() {
-      throw new Error('error');
-    }
-
-    class ErrorBoundary extends React.Component {
-      componentDidCatch() {
-        // Schedule a no-op state update to avoid triggering a DEV warning in the test.
-        this.setState({});
-
-        this.props.parent.remount();
-      }
-      render() {
-        return <BadRender />;
-      }
-    }
-
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-      remount() {
-        this.setState(state => ({step: state.step + 1}));
-      }
-      render() {
-        return <ErrorBoundary key={this.state.step} parent={this} />;
-      }
+  it('does not fall into an infinite update loop with useLayoutEffect', () => {
+    function NonTerminating() {
+      const [step, setStep] = React.useState(0);
+      React.useLayoutEffect(() => {
+        setStep(x => x + 1);
+      });
+      return step;
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
+    expect(() => {
+      ReactDOM.flushSync(() => {
         root.render(<NonTerminating />);
       });
-    }).rejects.toThrow('Maximum');
+    }).toThrow('Maximum');
   });
 
   it('can schedule ridiculously many updates within the same batch without triggering a maximum update error', async () => {
@@ -1791,7 +1756,7 @@ describe('ReactUpdates', () => {
     expect(subscribers.length).toBe(limit);
   });
 
-  it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
+  it("does not infinite loop if there's a synchronous render phase update on another component", () => {
     if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
       return;
     }
@@ -1811,15 +1776,13 @@ describe('ReactUpdates', () => {
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    await expect(async () => {
-      await act(() => ReactDOM.flushSync(() => root.render(<App />)));
-    }).rejects.toThrow('Maximum update depth exceeded');
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
+    expect(() => {
+      expect(() => ReactDOM.flushSync(() => root.render(<App />))).toThrow(
+        'Maximum update depth exceeded',
+      );
+    }).toErrorDev(
+      'Warning: Cannot update a component (`App`) while rendering a different component (`Child`)',
+    );
   });
 
   it("does not infinite loop if there's an async render phase update on another component", async () => {
@@ -1843,17 +1806,18 @@ describe('ReactUpdates', () => {
     const root = ReactDOMClient.createRoot(container);
 
     await expect(async () => {
-      await act(() => {
-        React.startTransition(() => root.render(<App />));
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
+      let error;
+      try {
+        await act(() => {
+          React.startTransition(() => root.render(<App />));
+        });
+      } catch (e) {
+        error = e;
+      }
+      expect(error.message).toMatch('Maximum update depth exceeded');
+    }).toErrorDev(
+      'Warning: Cannot update a component (`App`) while rendering a different component (`Child`)',
+    );
   });
 
   // TODO: Replace this branch with @gate pragmas
@@ -1861,7 +1825,7 @@ describe('ReactUpdates', () => {
     it('warns about a deferred infinite update loop with useEffect', async () => {
       function NonTerminating() {
         const [step, setStep] = React.useState(0);
-        React.useEffect(function myEffect() {
+        React.useEffect(() => {
           setStep(x => x + 1);
         });
         return step;
@@ -1872,13 +1836,11 @@ describe('ReactUpdates', () => {
       }
 
       let error = null;
-      let ownerStack = null;
-      let debugStack = null;
-      const originalConsoleError = console.error;
-      console.error = e => {
+      let stack = null;
+      let originalConsoleError = console.error;
+      console.error = (e, s) => {
         error = e;
-        ownerStack = React.captureOwnerStack();
-        debugStack = new Error().stack;
+        stack = s;
         Scheduler.log('stop');
       };
       try {
@@ -1891,9 +1853,7 @@ describe('ReactUpdates', () => {
       }
 
       expect(error).toContain('Maximum update depth exceeded');
-      // The currently executing effect should be on the native stack
-      expect(debugStack).toContain('at myEffect');
-      expect(ownerStack).toContain('at App');
+      expect(stack).toContain('at NonTerminating');
     });
 
     it('can have nested updates if they do not cross the limit', async () => {
@@ -1913,12 +1873,9 @@ describe('ReactUpdates', () => {
       }
 
       const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
       await act(() => {
-        root.render(<Terminating />);
+        ReactDOMClient.createRoot(container).render(<Terminating />);
       });
-
-      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
       expect(container.textContent).toBe('50');
       await act(() => {
         _setStep(0);
@@ -1948,37 +1905,4 @@ describe('ReactUpdates', () => {
       expect(container.textContent).toBe('1000');
     });
   }
-
-  it('prevents infinite update loop triggered by synchronous updates in useEffect', async () => {
-    // Ignore flushSync warning
-    spyOnDev(console, 'error').mockImplementation(() => {});
-
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useEffect(() => {
-        // Other examples of synchronous updates in useEffect are imperative
-        // event dispatches like `el.focus`, or `useSyncExternalStore`, which
-        // may schedule a synchronous update upon subscribing if it detects
-        // that the store has been mutated since the initial render.
-        //
-        // (Originally I wrote this test using `el.focus` but those errors
-        // get dispatched in a JSDOM event and I don't know how to "catch" those
-        // so that they don't fail the test.)
-        ReactDOM.flushSync(() => {
-          setStep(step + 1);
-        });
-      }, [step]);
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        ReactDOM.flushSync(() => {
-          root.render(<NonTerminating />);
-        });
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-  });
 });
\ No newline at end of file
