/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails react-core
 */

'use strict';

let React;
let ReactDOM;
let ReactDOMClient;
let act;
let Scheduler;
let waitForAll;
let waitFor;
let assertLog;
let assertConsoleErrorDev;

describe('ReactUpdates', () => {
  beforeEach(() => {
    jest.resetModules();
    React = require('react');
    ReactDOM = require('react-dom');
    ReactDOMClient = require('react-dom/client');
    act = require('internal-test-utils').act;
    Scheduler = require('scheduler');

    const InternalTestUtils = require('internal-test-utils');
    waitForAll = InternalTestUtils.waitForAll;
    waitFor = InternalTestUtils.waitFor;
    assertLog = InternalTestUtils.assertLog;
    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
  });

  // Note: This is based on a similar component we use in www. We can delete
  // once the extra div wrapper is no longer necessary.
  function LegacyHiddenDiv({children, mode}) {
    return (
      <div hidden={mode === 'hidden'}>
        <React.unstable_LegacyHidden
          mode={mode === 'hidden' ? 'unstable-defer-without-hiding' : mode}>
          {children}
        </React.unstable_LegacyHidden>
      </div>
    );
  }

  it('should batch state when updating state twice', async () => {
    let componentState;
    let setState;

    function Component() {
      const [state, _setState] = React.useState(0);
      componentState = state;
      setState = _setState;
      React.useLayoutEffect(() => {
        Scheduler.log('Commit');
      });
      return <div>{state}</div>;
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Component />);
    });

    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('0');

    await act(() => {
      setState(1);
      setState(2);
      expect(componentState).toBe(0);
      expect(container.firstChild.textContent).toBe('0');
      assertLog([]);
    });

    expect(componentState).toBe(2);
    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('2');
  });

  it('should batch state when updating two different states', async () => {
    let componentStateA;
    let componentStateB;
    let setStateA;
    let setStateB;

    function Component() {
      const [stateA, _setStateA] = React.useState(0);
      const [stateB, _setStateB] = React.useState(0);
      componentStateA = stateA;
      componentStateB = stateB;
      setStateA = _setStateA;
      setStateB = _setStateB;
      React.useLayoutEffect(() => {
        Scheduler.log('Commit');
      });
      return (
        <div>
          {stateA} {stateB}
        </div>
      );
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Component />);
    });
    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('0 0');

    await act(() => {
      setStateA(1);
      setStateB(2);
      expect(componentStateA).toBe(0);
      expect(componentStateB).toBe(0);
      expect(container.firstChild.textContent).toBe('0 0');
      assertLog([]);
    });

    expect(componentStateA).toBe(1);
    expect(componentStateB).toBe(2);
    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('1 2');
  });

  it('should batch state and props together', async () => {
    let setState;
    let componentProp;
    let componentState;

    function Component({prop}) {
      const [state, _setState] = React.useState(0);
      componentProp = prop;
      componentState = state;
      setState = _setState;
      return (
        <div>
          {prop} {state}
        </div>
      );
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Component prop={0} />);
    });

    assertLog([]);
    expect(container.firstChild.textContent).toBe('0 0');

    await act(() => {
      root.render(<Component prop={1} />);
      setState(2);
      expect(componentProp).toBe(0);
      expect(componentState).toBe(0);
      expect(container.firstChild.textContent).toBe('0 0');
      assertLog([]);
    });

    expect(componentProp).toBe(1);
    expect(componentState).toBe(2);
    assertLog([]);
    expect(container.firstChild.textContent).toBe('1 2');
  });

  it('should batch parent/child state updates together', async () => {
    let childRef;
    let parentState;
    let childState;
    let setParentState;
    let setChildState;

    function Parent() {
      const [state, _setState] = React.useState(0);
      parentState = state;
      setParentState = _setState;
      React.useLayoutEffect(() => {
        Scheduler.log('Parent Commit');
      });
      return (
        <div>
          <Child prop={state} />
        </div>
      );
    }

    function Child({prop}) {
      const [state, _setState] = React.useState(0);
      childState = state;
      setChildState = _setState;
      React.useLayoutEffect(() => {
        Scheduler.log('Child Commit');
      });
      return (
        <div
          ref={ref => {
            childRef = ref;
          }}>
          {prop} {state}
        </div>
      );
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Parent />);
    });
    assertLog(['Child Commit', 'Parent Commit']);
    expect(childRef.textContent).toBe('0 0');

    await act(() => {
      setParentState(1);
      setChildState(2);
      expect(parentState).toBe(0);
      expect(childState).toBe(0);
      expect(childRef.textContent).toBe('0 0');
      assertLog([]);
    });

    expect(parentState).toBe(1);
    expect(childState).toBe(2);
    expect(childRef.textContent).toBe('1 2');
    assertLog(['Child Commit', 'Parent Commit']);
  });

  it('should batch child/parent state updates together', async () => {
    let childRef;
    let parentState;
    let childState;
    let setParentState;
    let setChildState;

    function Parent() {
      const [state, _setState] = React.useState(0);
      parentState = state;
      setParentState = _setState;
      React.useLayoutEffect(() => {
        Scheduler.log('Parent Commit');
      });
      return (
        <div>
          <Child prop={state} />
        </div>
      );
    }

    function Child({prop}) {
      const [state, _setState] = React.useState(0);
      childState = state;
      setChildState = _setState;
      React.useLayoutEffect(() => {
        Scheduler.log('Child Commit');
      });
      return (
        <div
          ref={ref => {
            childRef = ref;
          }}>
          {prop} {state}
        </div>
      );
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Parent />);
    });
    assertLog(['Child Commit', 'Parent Commit']);
    expect(childRef.textContent).toBe('0 0');

    await act(() => {
      setChildState(2);
      setParentState(1);
      expect(parentState).toBe(0);
      expect(childState).toBe(0);
      expect(childRef.textContent).toBe('0 0');
      assertLog([]);
    });

    expect(parentState).toBe(1);
    expect(childState).toBe(2);
    expect(childRef.textContent).toBe('1 2');
    assertLog(['Child Commit', 'Parent Commit']);
  });

  it('should support chained state updates', async () => {
    let instance;
    function Component() {
      const [state, setState] = React.useState(0);
      instance = {state, setState};
      React.useLayoutEffect(() => {
        Scheduler.log('Commit');
      });
      return <div>{state}</div>;
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Component />);
    });
    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('0');

    let innerCallbackRun = false;
    await act(() => {
      instance.setState(1, () => {
        instance.setState(2, () => {
          expect(instance.state).toBe(2);
          innerCallbackRun = true;
          Scheduler.log('Inner callback');
        });
        expect(instance.state).toBe(1);
        Scheduler.log('After first callback');
      });
      expect(instance.state).toBe(0);
      expect(container.firstChild.textContent).toBe('0');
      assertLog([]);
    });

    expect(innerCallbackRun).toBeTruthy();
    expect(instance.state).toBe(2);
    assertLog(['Commit', 'After first callback', 'Inner callback']);
  });

  it('should batch forceUpdate together', async () => {
    let instance;
    let shouldUpdateCount = 0;

    function Component() {
      const [state, setState] = React.useState(0);
      instance = {state, setState};
      React.useLayoutEffect(() => {
        Scheduler.log('Commit');
      });
      return <div>{state}</div>;
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Component />);
    });
    assertLog(['Commit']);
    expect(container.firstChild.textContent).toBe('0');

    await act(() => {
      instance.setState(1, () => {
        Scheduler.log('setState callback');
      });
      instance.forceUpdate(() => {
        Scheduler.log('forceUpdate callback');
      });
      expect(container.firstChild.textContent).toBe('0');
      assertLog([]);
    });

    expect(shouldUpdateCount).toBe(0);
    assertLog(['Commit', 'setState callback', 'forceUpdate callback']);
    expect(container.firstChild.textContent).toBe('1');
  });

  it('should update children even if parent blocks updates', async () => {
    let instance;
    class Parent extends React.Component {
      childRef = React.createRef();

      constructor(props) {
        super(props);
        instance = this;
      }
      shouldComponentUpdate() {
        return false;
      }
      render() {
        Scheduler.log('Parent render');
        return <Child ref={this.childRef} />;
      }
    }

    class Child extends React.Component {
      render() {
        Scheduler.log('Child render');
        return <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Parent />);
    });
    assertLog(['Parent render', 'Child render']);

    await act(() => {
      instance.setState({x: 1});
    });
    assertLog([]);

    await act(() => {
      instance.childRef.current.setState({x: 1});
    });
    assertLog(['Child render']);
  });

  it('should not reconcile children passed via props', async () => {
    class Top extends React.Component {
      render() {
        return (
          <Middle>
            <Bottom />
          </Middle>
        );
      }
    }

    class Middle extends React.Component {
      render() {
        Scheduler.log('Middle');
        return React.Children.only(this.props.children);
      }
    }

    class Bottom extends React.Component {
      render() {
        Scheduler.log('Bottom');
        return null;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Top />);
    });
    assertLog(['Middle', 'Bottom', 'Middle']);
  });

  it('should flow updates correctly', async () => {
    let willUpdates = [];
    let didUpdates = [];

    const UpdateLoggingMixin = {
      UNSAFE_componentWillUpdate: function () {
        willUpdates.push(this.constructor.displayName);
      },
      componentDidUpdate: function () {
        didUpdates.push(this.constructor.displayName);
      },
    };

    class Box extends React.Component {
      render() {
        Scheduler.log('Box render');
        return <div ref={ref => (this.boxDiv = ref)}>{this.props.children}</div>;
      }
    }
    Object.assign(Box.prototype, UpdateLoggingMixin);

    class Child extends React.Component {
      render() {
        Scheduler.log('Child render');
        return <span ref={ref => (this.span = ref)}>child</span>;
      }
    }
    Object.assign(Child.prototype, UpdateLoggingMixin);

    class Switcher extends React.Component {
      state = {tabKey: 'hello'};
      boxRef = React.createRef();
      switcherDivRef = React.createRef();

      render() {
        const child = this.props.children;
        Scheduler.log('Switcher render');
        return (
          <Box ref={this.boxRef}>
            <div
              ref={this.switcherDivRef}
              style={{
                display: this.state.tabKey === child.key ? '' : 'none',
              }}>
              {child}
            </div>
          </Box>
        );
      }
    }
    Object.assign(Switcher.prototype, UpdateLoggingMixin);

    class App extends React.Component {
      switcherRef = React.createRef();
      childRef = React.createRef();

      render() {
        return (
          <Switcher ref={this.switcherRef}>
            <Child key="hello" ref={this.childRef} />
          </Switcher>
        );
      }
    }
    Object.assign(App.prototype, UpdateLoggingMixin);

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<App />);
    });

    function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
      desiredWillUpdates.forEach(name => {
        expect(willUpdates).toContain(name);
      });
      desiredDidUpdates.forEach(name => {
        expect(didUpdates).toContain(name);
      });
      willUpdates = [];
      didUpdates = [];
    }

    function triggerUpdate(c) {
      c.setState({x: 1});
    }

    async function testUpdates(components, desiredWillUpdates, desiredDidUpdates) {
      for (let i = 0; i < components.length; i++) {
        triggerUpdate(components[i]);
      }
      expectUpdates(desiredWillUpdates, desiredDidUpdates);
      for (let i = components.length - 1; i >= 0; i--) {
        triggerUpdate(components[i]);
      }
      expectUpdates(desiredWillUpdates, desiredDidUpdates);
    }

    const appInstance = root._internalRoot.current.child.stateNode;
    await testUpdates(
      [appInstance.switcherRef.current.boxRef.current, appInstance.switcherRef.current],
      ['Switcher', 'Box'],
      ['Box', 'Switcher'],
    );

    await testUpdates(
      [appInstance.childRef.current, appInstance.switcherRef.current.boxRef.current],
      ['Box', 'Child'],
      ['Box', 'Child'],
    );

    await testUpdates(
      [appInstance.childRef.current, appInstance.switcherRef.current],
      ['Switcher', 'Box', 'Child'],
      ['Box', 'Switcher', 'Child'],
    );
  });

  it('should queue mount-ready handlers across different roots', async () => {
    const bContainer = document.createElement('div');

    let a;
    let b;
    let aUpdated = false;

    class A extends React.Component {
      state = {x: 0};
      constructor(props) {
        super(props);
        a = this;
      }
      componentDidUpdate() {
        expect(findDOMNode(b).textContent).toBe('B1');
        aUpdated = true;
      }
      render() {
        let portal = null;
        portal = ReactDOM.createPortal(<B ref={n => (b = n)} />, bContainer);
        return <div>A{this.state.x}{portal}</div>;
      }
    }

    class B extends React.Component {
      state = {x: 0};
      render() {
        return <div>B{this.state.x}</div>;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<A />);
    });
    await act(() => {
      a.setState({x: 1});
      b.setState({x: 1});
    });
    expect(aUpdated).toBe(true);
  });

  it('should flush updates in the correct order', async () => {
    const updates = [];

    class Outer extends React.Component {
      state = {x: 0};
      innerRef = React.createRef();
      render() {
        updates.push('Outer-render-' + this.state.x);
        return (
          <div>
            <Inner x={this.state.x} ref={this.innerRef} />
          </div>
        );
      }
      componentDidUpdate() {
        const x = this.state.x;
        updates.push('Outer-didUpdate-' + x);
        updates.push('Inner-setState-' + x);
        this.innerRef.current.setState({x: x}, function () {
          updates.push('Inner-callback-' + x);
        });
      }
    }

    class Inner extends React.Component {
      state = {x: 0};
      render() {
        updates.push('Inner-render-' + this.props.x + '-' + this.state.x);
        return <div />;
      }
      componentDidUpdate() {
        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Outer />);
    });

    updates.push('Outer-setState-1');
    await act(() => {
      const outerInstance = root._internalRoot.current.child.stateNode;
      outerInstance.setState({x: 1}, function () {
        updates.push('Outer-callback-1');
        updates.push('Outer-setState-2');
        outerInstance.setState({x: 2}, function () {
          updates.push('Outer-callback-2');
        });
      });
    });

    expect(updates).toEqual([
      'Outer-render-0',
      'Inner-render-0-0',

      'Outer-setState-1',
      'Outer-render-1',
      'Inner-render-1-0',
      'Inner-didUpdate-1-0',
      'Outer-didUpdate-1',
      // Happens in a batch, so don't re-render yet
      'Inner-setState-1',
      'Outer-callback-1',

      // Happens in a batch
      'Outer-setState-2',

      // Flush batched updates all at once
      'Outer-render-2',
      'Inner-render-2-1',
      'Inner-didUpdate-2-1',
      'Inner-callback-1',
      'Outer-didUpdate-2',
      'Inner-setState-2',
      'Outer-callback-2',
      'Inner-render-2-2',
      'Inner-didUpdate-2-2',
      'Inner-callback-2',
    ]);
  });

  it('should flush updates in the correct order across roots', async () => {
    const instances = [];
    const updates = [];

    class MockComponent extends React.Component {
      render() {
        updates.push(this.props.depth);
        return <div />;
      }
      componentDidMount() {
        instances.push(this);
        if (this.props.depth < this.props.count) {
          const root = ReactDOMClient.createRoot(findDOMNode(this));
          root.render(
            <MockComponent
              depth={this.props.depth + 1}
              count={this.props.count}
            />,
          );
        }
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<MockComponent depth={0} count={2} />);
    });
    expect(updates).toEqual([0, 1, 2]);

    await act(() => {
      instances.forEach(instance => {
        instance.forceUpdate();
      });
    });
    expect(updates).toEqual([0, 1, 2, 0, 1, 2]);
  });

  it('should queue updates from during mount', async () => {
    let a;

    class A extends React.Component {
      state = {x: 0};
      componentWillMount() {
        a = this;
      }
      render() {
        return <div>A{this.state.x}</div>;
      }
    }

    class B extends React.Component {
      componentWillMount() {
        a.setState({x: 1});
      }
      render() {
        return <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(
        <div>
          <A />
          <B />
        </div>,
      );
    });
    expect(container.firstChild.textContent).toBe('A1');
  });

  it('calls componentWillReceiveProps setState callback properly', async () => {
    let callbackCount = 0;

    class A extends React.Component {
      state = {x: this.props.x};
      componentWillReceiveProps(nextProps) {
        const newX = nextProps.x;
        this.setState({x: newX}, function () {
          expect(this.state.x).toBe(newX);
          Scheduler.log('Callback');
        });
      }
      render() {
        return <div>{this.state.x}</div>;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<A x={1} />);
    });
    await act(() => {
      root.render(<A x={2} />);
    });
    assertLog(['Callback']);
  });

  it('does not call render after a component as been deleted', async () => {
    class B extends React.Component {
      state = {updates: 0};
      componentDidMount() {
        this.setState({updates: 1});
      }
      render() {
        Scheduler.log('B render');
        return <div />;
      }
    }

    class A extends React.Component {
      state = {showB: true};
      render() {
        return this.state.showB ? <B /> : <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<A />);
    });

    await act(() => {
      const aInstance = root._internalRoot.current.child.stateNode;
      aInstance.forceUpdate();
      const bInstance = root._internalRoot.current.child.child.stateNode;
      bInstance.forceUpdate();
    });
    assertLog(['B render']);
  });

  it('throws in setState if the update callback is not a function', async () => {
    function Foo() {
      this.a = 1;
      this.b = 2;
    }

    class A extends React.Component {
      state = {};
      render() {
        return <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    let component;
    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.setState({}, 'no');
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: no',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: no.'],
      {withoutStack: true},
    );

    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.setState({}, {foo: 'bar'});
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: { foo: \'bar\' }.'],
      {withoutStack: true},
    );

    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.setState({}, new Foo());
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: { a: 1, b: 2 }.'],
      {withoutStack: true},
    );
  });

  it('throws in forceUpdate if the update callback is not a function', async () => {
    function Foo() {
      this.a = 1;
      this.b = 2;
    }

    class A extends React.Component {
      state = {};
      render() {
        return <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    let component;
    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.forceUpdate('no');
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: no',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: no.'],
      {withoutStack: true},
    );

    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.forceUpdate({foo: 'bar'});
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: { foo: \'bar\' }.'],
      {withoutStack: true},
    );

    await act(() => {
      root.render(<A ref={c => (component = c)} />);
    });

    await expect(async () => {
      await act(() => {
        component.forceUpdate(new Foo());
      });
    }).rejects.toThrow(
      'Invalid argument passed as callback. Expected a function. Instead received: [object Object]',
    );
    assertConsoleErrorDev(
      ['Expected the last optional `callback` argument to be a function. Instead received: { a: 1, b: 2 }.'],
      {withoutStack: true},
    );
  });

  it('does not update one component twice in a batch (#2410)', async () => {
    let parent;
    class Parent extends React.Component {
      childRef = React.createRef();

      constructor(props) {
        super(props);
        parent = this;
      }
      getChild = () => {
        return this.childRef.current;
      };
      render() {
        return <Child ref={this.childRef} />;
      }
    }

    class Child extends React.Component {
      render() {
        return <div />;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<Parent />);
    });

    const child = parent.getChild();
    await act(() => {
      parent.forceUpdate();
      child.forceUpdate();
    });
    expect.assertions(6);
  });

  it('does not update one component twice in a batch (#6371)', async () => {
    let callbacks = [];
    function emitChange() {
      callbacks.forEach(c => c());
    }

    class App extends React.Component {
      constructor(props) {
        super(props);
        this.state = {showChild: true};
      }
      componentDidMount() {
        this.setState({showChild: false});
      }
      render() {
        return (
          <div>
            <ForceUpdatesOnChange />
            {this.state.showChild && <EmitsChangeOnUnmount />}
          </div>
        );
      }
    }

    class EmitsChangeOnUnmount extends React.Component {
      componentWillUnmount() {
        emitChange();
      }
      render() {
        return null;
      }
    }

    class ForceUpdatesOnChange extends React.Component {
      componentDidMount() {
        this.onChange = () => this.forceUpdate();
        this.onChange();
        callbacks.push(this.onChange);
      }
      componentWillUnmount() {
        callbacks = callbacks.filter(c => c !== this.onChange);
      }
      render() {
        return <div key={Math.random()} onClick={function () {}} />;
      }
    }

    const root = ReactDOMClient.createRoot(document.createElement('div'));
    await act(() => {
      root.render(<App />);
    });
  });

  it('unstable_batchedUpdates should return value from a callback', async () => {
    const result = ReactDOM.unstable_batchedUpdates(() => {
      return 42;
    });
    expect(result).toEqual(42);
  });

  it('mounts and unmounts are batched', async () => {
    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await act(() => {
      root.render(<div>Hello</div>);
    });
    expect(container.textContent).toBe('Hello');
    await act(() => {
      root.unmount();
    });
    expect(container.textContent).toBe('');
  });

  it('prevents infinite update loop triggered by synchronous updates in useEffect', async () => {
    spyOnDev(console, 'error').mockImplementation(() => {});

    function NonTerminating() {
      const [step, setStep] = React.useState(0);
      React.useEffect(() => {
        ReactDOM.flushSync(() => {
          setStep(step + 1);
        });
      }, [step]);
      return step;
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await expect(async () => {
      await act(() => {
        root.render(<NonTerminating />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');
  });

  it('does not fall into an infinite update loop', async () => {
    class NonTerminating extends React.Component {
      state = {step: 0};

      componentDidMount() {
        this.setState({step: 1});
      }
      componentDidUpdate() {
        this.setState({step: 2});
      }
      render() {
        return <div>{this.state.step}</div>;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await expect(async () => {
      await act(() => {
        root.render(<NonTerminating />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');
  });

  it('does not fall into an infinite update loop with useLayoutEffect', async () => {
    function NonTerminating() {
      const [step, setStep] = React.useState(0);
      React.useLayoutEffect(() => {
        setStep(x => x + 1);
      });
      return step;
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await expect(async () => {
      await act(() => {
        root.render(<NonTerminating />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');
  });

  it('can recover after falling into an infinite update loop', async () => {
    class NonTerminating extends React.Component {
      state = {step: 0};
      componentDidMount() {
        this.setState({step: 1});
      }
      componentDidUpdate() {
        this.setState({step: 2});
      }
      render() {
        return <div>{this.state.step}</div>;
      }
    }

    class Terminating extends React.Component {
      state = {step: 0};
      componentDidMount() {
        this.setState({step: 1});
      }
      render() {
        return <div>{this.state.step}</div>;
      }
    }

    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    await expect(async () => {
      await act(() => {
        root.render(<NonTerminating />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');

    await act(() => {
      root.render(<Terminating />);
    });
    expect(container.textContent).toBe('1');

    await expect(async () => {
      await act(() => {
        root.render(<NonTerminating />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');

    await act(() => {
      root.render(<Terminating />);
    });
    expect(container.textContent).toBe('1');
  });

  it('does not fall into mutually recursive infinite update loop with same container', async () => {
    const container = document.createElement('div');
    const root = ReactDOMClient.createRoot(container);
    class A extends React.Component {
      componentDidMount() {
        root.render(<B />);
      }
      render() {
        return null;
      }
    }
    class B extends React.Component {
      componentDidMount() {
        root.render(<A />);
      }
      render() {
        return null;
      }
    }
    await expect(async () => {
      await act(() => {
        root.render(<A />);
      });
    }).rejects.toThrow('Maximum update depth exceeded');
  });
});