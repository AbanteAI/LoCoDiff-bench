--- react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual)@@ -11,7 +11,6 @@ 
 let React;
 let ReactDOM;
-let findDOMNode;
 let ReactDOMClient;
 let act;
 let Scheduler;
@@ -577,9 +576,8 @@     }
     Object.assign(App.prototype, UpdateLoggingMixin);
 
-    const container = document.createElement('div');
-    await act(() => {
-      ReactDOMClient.createRoot(container).render(<App />);
+    await act(() => {
+      ReactDOMClient.createRoot(document.createElement('div')).render(<App />);
     });
 
     function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
@@ -649,10 +647,6 @@   });
 
   it('should queue mount-ready handlers across different roots', async () => {
-    // We'll define two components A and B, then update both of them. When A's
-    // componentDidUpdate handlers is called, B's DOM should already have been
-    // updated.
-
     const bContainer = document.createElement('div');
     let a;
     let b;
@@ -836,47 +830,35 @@   });
 
   it('should queue nested updates', async () => {
-    // See https://github.com/facebook/react/issues/1147
-
     class X extends React.Component {
       state = {s: 0};
-
-      render() {
-        if (this.state.s === 0) {
-          return (
-            <div>
-              <span>0</span>
-            </div>
-          );
-        } else {
-          return <div>1</div>;
-        }
-      }
-
       go = () => {
         this.setState({s: 1});
         this.setState({s: 0});
         this.setState({s: 1});
       };
+
+      render() {
+        if (this.state.s === 0) {
+          return <div><span>0</span></div>;
+        } else {
+          return <div>1</div>;
+        }
+      }
     }
 
     class Y extends React.Component {
       render() {
-        return (
-          <div>
-            <Z />
-          </div>
-        );
+        return <div><Z /></div>;
       }
     }
 
     class Z extends React.Component {
+      componentWillUpdate() {
+        x.go();
+      }
       render() {
         return <div />;
-      }
-
-      UNSAFE_componentWillUpdate() {
-        x.go();
       }
     }
 
@@ -903,26 +885,22 @@   });
 
   it('should queue updates from during mount', async () => {
-    // See https://github.com/facebook/react/issues/1353
     let a;
-
     class A extends React.Component {
       state = {x: 0};
-
-      UNSAFE_componentWillMount() {
+      constructor(props) {
+        super(props);
         a = this;
       }
-
       render() {
         return <div>A{this.state.x}</div>;
       }
     }
 
     class B extends React.Component {
-      UNSAFE_componentWillMount() {
+      componentWillMount() {
         a.setState({x: 1});
       }
-
       render() {
         return <div />;
       }
@@ -950,8 +928,6 @@       UNSAFE_componentWillReceiveProps(nextProps) {
         const newX = nextProps.x;
         this.setState({x: newX}, function () {
-          // State should have updated by the time this callback gets called
-          expect(this.state.x).toBe(newX);
           Scheduler.log('Callback');
         });
       }
@@ -982,11 +958,9 @@ 
     class B extends React.Component {
       state = {updates: 0};
-
       componentDidMount() {
         componentB = this;
       }
-
       render() {
         Scheduler.log('B');
         return <div />;
@@ -995,7 +969,6 @@ 
     class A extends React.Component {
       state = {showB: true};
-
       componentDidMount() {
         componentA = this;
       }
@@ -1011,974 +984,4 @@     });
     assertLog(['B']);
 
-    await act(() => {
-      // B will have scheduled an update but the batching should ensure that its
-      // update never fires.
-      componentB.setState({updates: 1});
-      componentA.setState({showB: false});
-    });
-
-    assertLog([]);
-  });
-
-  it('throws in setState if the update callback is not a function', async () => {
-    function Foo() {
-      this.a = 1;
-      this.b = 2;
-    }
-
-    class A extends React.Component {
-      state = {};
-
-      render() {
-        return <div />;
-      }
-    }
-
-    let container = document.createElement('div');
-    let root = ReactDOMClient.createRoot(container);
-    let component;
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(async () => {
-      await act(() => {
-        component.setState({}, 'no');
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
-    );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          'a function. Instead received: no.',
-      ],
-      {withoutStack: true},
-    );
-    container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(async () => {
-      await act(() => {
-        component.setState({}, {foo: 'bar'});
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
-    );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
-      ],
-      {withoutStack: true},
-    );
-    container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(
-      act(() => {
-        component.setState({}, new Foo());
-      }),
-    ).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
-    );
-  });
-
-  it('throws in forceUpdate if the update callback is not a function', async () => {
-    function Foo() {
-      this.a = 1;
-      this.b = 2;
-    }
-
-    class A extends React.Component {
-      state = {};
-
-      render() {
-        return <div />;
-      }
-    }
-
-    let container = document.createElement('div');
-    let root = ReactDOMClient.createRoot(container);
-    let component;
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(async () => {
-      await act(() => {
-        component.forceUpdate('no');
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: no',
-    );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          'a function. Instead received: no.',
-      ],
-      {withoutStack: true},
-    );
-    container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(async () => {
-      await act(() => {
-        component.forceUpdate({foo: 'bar'});
-      });
-    }).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
-    );
-    assertConsoleErrorDev(
-      [
-        'Expected the last optional `callback` argument to be ' +
-          "a function. Instead received: { foo: 'bar' }.",
-      ],
-      {withoutStack: true},
-    );
-    // Make sure the warning is deduplicated and doesn't fire again
-    container = document.createElement('div');
-    root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<A ref={current => (component = current)} />);
-    });
-
-    await expect(
-      act(() => {
-        component.forceUpdate(new Foo());
-      }),
-    ).rejects.toThrowError(
-      'Invalid argument passed as callback. Expected a function. Instead ' +
-        'received: [object Object]',
-    );
-  });
-
-  it('does not update one component twice in a batch (#2410)', async () => {
-    let parent;
-    class Parent extends React.Component {
-      childRef = React.createRef();
-
-      componentDidMount() {
-        parent = this;
-      }
-      getChild = () => {
-        return this.childRef.current;
-      };
-
-      render() {
-        return <Child ref={this.childRef} />;
-      }
-    }
-
-    let renderCount = 0;
-    let postRenderCount = 0;
-    let once = false;
-
-    class Child extends React.Component {
-      state = {updated: false};
-
-      UNSAFE_componentWillUpdate() {
-        if (!once) {
-          once = true;
-          this.setState({updated: true});
-        }
-      }
-
-      componentDidMount() {
-        expect(renderCount).toBe(postRenderCount + 1);
-        postRenderCount++;
-      }
-
-      componentDidUpdate() {
-        expect(renderCount).toBe(postRenderCount + 1);
-        postRenderCount++;
-      }
-
-      render() {
-        expect(renderCount).toBe(postRenderCount);
-        renderCount++;
-        return <div />;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Parent />);
-    });
-
-    const child = parent.getChild();
-    await act(() => {
-      parent.forceUpdate();
-      child.forceUpdate();
-    });
-
-    expect.assertions(6);
-  });
-
-  it('does not update one component twice in a batch (#6371)', async () => {
-    let callbacks = [];
-    function emitChange() {
-      callbacks.forEach(c => c());
-    }
-
-    class App extends React.Component {
-      constructor(props) {
-        super(props);
-        this.state = {showChild: true};
-      }
-      componentDidMount() {
-        this.setState({showChild: false});
-      }
-      render() {
-        return (
-          <div>
-            <ForceUpdatesOnChange />
-            {this.state.showChild && <EmitsChangeOnUnmount />}
-          </div>
-        );
-      }
-    }
-
-    class EmitsChangeOnUnmount extends React.Component {
-      componentWillUnmount() {
-        emitChange();
-      }
-      render() {
-        return null;
-      }
-    }
-
-    class ForceUpdatesOnChange extends React.Component {
-      componentDidMount() {
-        this.onChange = () => this.forceUpdate();
-        this.onChange();
-        callbacks.push(this.onChange);
-      }
-      componentWillUnmount() {
-        callbacks = callbacks.filter(c => c !== this.onChange);
-      }
-      render() {
-        return <div key={Math.random()} onClick={function () {}} />;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-    await act(() => {
-      root.render(<App />);
-    });
-
-    // Error should not be thrown.
-    expect(true).toBe(true);
-  });
-
-  it('handles reentrant mounting in synchronous mode', async () => {
-    let onChangeCalled = false;
-    class Editor extends React.Component {
-      render() {
-        return <div>{this.props.text}</div>;
-      }
-      componentDidMount() {
-        Scheduler.log('Mount');
-        // This should be called only once but we guard just in case.
-        if (!this.props.rendered) {
-          this.props.onChange({rendered: true});
-        }
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    function render() {
-      root.render(
-        <Editor
-          onChange={newProps => {
-            onChangeCalled = true;
-            props = {...props, ...newProps};
-            render();
-          }}
-          {...props}
-        />,
-      );
-    }
-
-    let props = {text: 'hello', rendered: false};
-    await act(() => {
-      render();
-    });
-    assertLog(['Mount']);
-    props = {...props, text: 'goodbye'};
-    await act(() => {
-      render();
-    });
-
-    assertLog([]);
-    expect(container.textContent).toBe('goodbye');
-    expect(onChangeCalled).toBeTruthy();
-  });
-
-  it('mounts and unmounts are batched', async () => {
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(<div>Hello</div>);
-      expect(container.textContent).toBe('');
-      root.unmount(container);
-      expect(container.textContent).toBe('');
-    });
-
-    expect(container.textContent).toBe('');
-  });
-
-  it('uses correct base state for setState inside render phase', async () => {
-    class Foo extends React.Component {
-      state = {step: 0};
-      render() {
-        const memoizedStep = this.state.step;
-        this.setState(baseState => {
-          const baseStep = baseState.step;
-          Scheduler.log(`base: ${baseStep}, memoized: ${memoizedStep}`);
-          return baseStep === 0 ? {step: 1} : null;
-        });
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Foo />);
-    });
-    assertConsoleErrorDev([
-      'Cannot update during an existing state transition (such as within `render`). ' +
-        'Render methods should be a pure function of props and state.\n' +
-        '    in Foo (at **)',
-    ]);
-
-    assertLog(['base: 0, memoized: 0', 'base: 1, memoized: 1']);
-  });
-
-  it('does not re-render if state update is null', async () => {
-    const container = document.createElement('div');
-
-    let instance;
-    class Foo extends React.Component {
-      render() {
-        instance = this;
-        Scheduler.log('render');
-        return <div />;
-      }
-    }
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Foo />);
-    });
-
-    assertLog(['render']);
-    await act(() => {
-      instance.setState(() => null);
-    });
-    assertLog([]);
-  });
-
-  it('synchronously renders hidden subtrees', async () => {
-    const container = document.createElement('div');
-
-    function Baz() {
-      Scheduler.log('Baz');
-      return null;
-    }
-
-    function Bar() {
-      Scheduler.log('Bar');
-      return null;
-    }
-
-    function Foo() {
-      Scheduler.log('Foo');
-      return (
-        <div>
-          <div hidden={true}>
-            <Bar />
-          </div>
-          <Baz />
-        </div>
-      );
-    }
-
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      // Mount
-      root.render(<Foo />);
-    });
-    assertLog(['Foo', 'Bar', 'Baz']);
-
-    await act(() => {
-      // Update
-      root.render(<Foo />);
-    });
-    assertLog(['Foo', 'Bar', 'Baz']);
-  });
-
-  // @gate www
-  it('delays sync updates inside hidden subtrees in Concurrent Mode', async () => {
-    const container = document.createElement('div');
-
-    function Baz() {
-      Scheduler.log('Baz');
-      return <p>baz</p>;
-    }
-
-    let setCounter;
-    function Bar() {
-      const [counter, _setCounter] = React.useState(0);
-      setCounter = _setCounter;
-      Scheduler.log('Bar');
-      return <p>bar {counter}</p>;
-    }
-
-    function Foo() {
-      Scheduler.log('Foo');
-      React.useEffect(() => {
-        Scheduler.log('Foo#effect');
-      });
-      return (
-        <div>
-          <LegacyHiddenDiv mode="hidden">
-            <Bar />
-          </LegacyHiddenDiv>
-          <Baz />
-        </div>
-      );
-    }
-
-    const root = ReactDOMClient.createRoot(container);
-    let hiddenDiv;
-    await act(async () => {
-      root.render(<Foo />);
-      await waitFor(['Foo', 'Baz', 'Foo#effect']);
-      hiddenDiv = container.firstChild.firstChild;
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('');
-      // Run offscreen update
-      await waitForAll(['Bar']);
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
-    });
-
-    ReactDOM.flushSync(() => {
-      setCounter(1);
-    });
-    // Should not flush yet
-    expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
-
-    // Run offscreen update
-    await waitForAll(['Bar']);
-    expect(hiddenDiv.innerHTML).toBe('<p>bar 1</p>');
-  });
-
-  it('can render ridiculously large number of roots without triggering infinite update loop error', async () => {
-    function Component({trigger}) {
-      const [state, setState] = React.useState(0);
-
-      React.useEffect(() => {
-        if (trigger) {
-          Scheduler.log('Trigger');
-          setState(c => c + 1);
-        }
-      }, [trigger]);
-
-      return <div>{state}</div>;
-    }
-
-    class Foo extends React.Component {
-      componentDidMount() {
-        const limit = 1200;
-        for (let i = 0; i < limit; i++) {
-          if (i < limit - 1) {
-            ReactDOMClient.createRoot(document.createElement('div')).render(
-              <Component />,
-            );
-          } else {
-            // The "nested update limit" error isn't thrown until setState
-            ReactDOMClient.createRoot(document.createElement('div')).render(
-              <Component trigger={true} />,
-            );
-          }
-        }
-      }
-      render() {
-        return null;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-    await act(() => {
-      root.render(<Foo />);
-    });
-
-    // Make sure the setState trigger runs.
-    assertLog(['Trigger']);
-  });
-
-  it('resets the update counter for unrelated updates', async () => {
-    const container = document.createElement('div');
-    const ref = React.createRef();
-
-    class EventuallyTerminating extends React.Component {
-      state = {step: 0};
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-      componentDidUpdate() {
-        if (this.state.step < limit) {
-          this.setState({step: this.state.step + 1});
-        }
-      }
-      render() {
-        return this.state.step;
-      }
-    }
-
-    let limit = 55;
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<EventuallyTerminating ref={ref} />);
-      });
-    }).rejects.toThrow('Maximum');
-
-    // Verify that we don't go over the limit if these updates are unrelated.
-    limit -= 10;
-    await act(() => {
-      root.render(<EventuallyTerminating ref={ref} />);
-    });
-    expect(container.textContent).toBe(limit.toString());
-
-    await act(() => {
-      ref.current.setState({step: 0});
-    });
-    expect(container.textContent).toBe(limit.toString());
-
-    await act(() => {
-      ref.current.setState({step: 0});
-    });
-    expect(container.textContent).toBe(limit.toString());
-
-    limit += 10;
-    await expect(async () => {
-      await act(() => {
-        ref.current.setState({step: 0});
-      });
-    }).rejects.toThrow('Maximum');
-    expect(ref.current).toBe(null);
-  });
-
-  it('does not fall into an infinite update loop', async () => {
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-
-      componentDidUpdate() {
-        this.setState({step: 2});
-      }
-
-      render() {
-        return (
-          <div>
-            Hello {this.props.name}
-            {this.state.step}
-          </div>
-        );
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('does not fall into an infinite update loop with useLayoutEffect', async () => {
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useLayoutEffect(() => {
-        setStep(x => x + 1);
-      });
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('can recover after falling into an infinite update loop', async () => {
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-      componentDidUpdate() {
-        this.setState({step: 2});
-      }
-      render() {
-        return this.state.step;
-      }
-    }
-
-    class Terminating extends React.Component {
-      state = {step: 0};
-      componentDidMount() {
-        this.setState({step: 1});
-      }
-      render() {
-        return this.state.step;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-
-    await act(() => {
-      root.render(<Terminating />);
-    });
-    expect(container.textContent).toBe('1');
-
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-    await act(() => {
-      root.render(<Terminating />);
-    });
-    expect(container.textContent).toBe('1');
-  });
-
-  it('does not fall into mutually recursive infinite update loop with same container', async () => {
-    // Note: this test would fail if there were two or more different roots.
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    class A extends React.Component {
-      componentDidMount() {
-        root.render(<B />);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    class B extends React.Component {
-      componentDidMount() {
-        root.render(<A />);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    await expect(async () => {
-      await act(() => {
-        root.render(<A />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('does not fall into an infinite error loop', async () => {
-    function BadRender() {
-      throw new Error('error');
-    }
-
-    class ErrorBoundary extends React.Component {
-      componentDidCatch() {
-        // Schedule a no-op state update to avoid triggering a DEV warning in the test.
-        this.setState({});
-
-        this.props.parent.remount();
-      }
-      render() {
-        return <BadRender />;
-      }
-    }
-
-    class NonTerminating extends React.Component {
-      state = {step: 0};
-      remount() {
-        this.setState(state => ({step: state.step + 1}));
-      }
-      render() {
-        return <ErrorBoundary key={this.state.step} parent={this} />;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
-  });
-
-  it('can schedule ridiculously many updates within the same batch without triggering a maximum update error', async () => {
-    const subscribers = [];
-    const limit = 1200;
-    class Child extends React.Component {
-      state = {value: 'initial'};
-      componentDidMount() {
-        subscribers.push(this);
-      }
-      render() {
-        return null;
-      }
-    }
-
-    class App extends React.Component {
-      render() {
-        const children = [];
-        for (let i = 0; i < limit; i++) {
-          children.push(<Child key={i} />);
-        }
-        return children;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<App />);
-    });
-
-    await act(() => {
-      subscribers.forEach(s => {
-        s.setState({value: 'update'});
-      });
-    });
-
-    expect(subscribers.length).toBe(limit);
-  });
-
-  it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
-    let setState;
-    function App() {
-      const [, _setState] = React.useState(0);
-      setState = _setState;
-      return <Child />;
-    }
-
-    function Child(step) {
-      // This will cause an infinite update loop, and a warning in dev.
-      setState(n => n + 1);
-      return null;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => ReactDOM.flushSync(() => root.render(<App />)));
-    }).rejects.toThrow('Maximum update depth exceeded');
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  it("does not infinite loop if there's an async render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
-    let setState;
-    function App() {
-      const [, _setState] = React.useState(0);
-      setState = _setState;
-      return <Child />;
-    }
-
-    function Child(step) {
-      // This will cause an infinite update loop, and a warning in dev.
-      setState(n => n + 1);
-      return null;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => {
-        React.startTransition(() => root.render(<App />));
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  // TODO: Replace this branch with @gate pragmas
-  if (__DEV__) {
-    it('warns about a deferred infinite update loop with useEffect', async () => {
-      function NonTerminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(function myEffect() {
-          setStep(x => x + 1);
-        });
-        return step;
-      }
-
-      function App() {
-        return <NonTerminating />;
-      }
-
-      let error = null;
-      let ownerStack = null;
-      let debugStack = null;
-      const originalConsoleError = console.error;
-      console.error = e => {
-        error = e;
-        ownerStack = React.captureOwnerStack();
-        debugStack = new Error().stack;
-        Scheduler.log('stop');
-      };
-      try {
-        const container = document.createElement('div');
-        const root = ReactDOMClient.createRoot(container);
-        root.render(<App />);
-        await waitFor(['stop']);
-      } finally {
-        console.error = originalConsoleError;
-      }
-
-      expect(error).toContain('Maximum update depth exceeded');
-      // The currently executing effect should be on the native stack
-      expect(debugStack).toContain('at myEffect');
-      expect(ownerStack).toContain('at App');
-    });
-
-    it('can have nested updates if they do not cross the limit', async () => {
-      let _setStep;
-      const LIMIT = 50;
-
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        _setStep = setStep;
-        React.useEffect(() => {
-          if (step < LIMIT) {
-            setStep(x => x + 1);
-          }
-        });
-        Scheduler.log(step);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
-      expect(container.textContent).toBe('50');
-      await act(() => {
-        _setStep(0);
-      });
-      expect(container.textContent).toBe('50');
-    });
-
-    it('can have many updates inside useEffect without triggering a warning', async () => {
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(() => {
-          for (let i = 0; i < 1000; i++) {
-            setStep(x => x + 1);
-          }
-          Scheduler.log('Done');
-        }, []);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(['Done']);
-      expect(container.textContent).toBe('1000');
-    });
-  }
-
-  it('prevents infinite update loop triggered by synchronous updates in useEffect', async () => {
-    // Ignore flushSync warning
-    spyOnDev(console, 'error').mockImplementation(() => {});
-
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useEffect(() => {
-        // Other examples of synchronous updates in useEffect are imperative
-        // event dispatches like `el.focus`, or `useSyncExternalStore`, which
-        // may schedule a synchronous update upon subscribing if it detects
-        // that the store has been mutated since the initial render.
-        //
-        // (Originally I wrote this test using `el.focus` but those errors
-        // get dispatched in a JSDOM event and I don't know how to "catch" those
-        // so that they don't fail the test.)
-        ReactDOM.flushSync(() => {
-          setStep(step + 1);
-        });
-      }, [step]);
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        ReactDOM.flushSync(() => {
-          root.render(<NonTerminating />);
-        });
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-  });
-});+    await act(()