
index ee4adf12f..0e95a56ed 100644
--- a/react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected):tmp/tmpaw25_br5_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual):tmp/tmprd1ekoqz_actual.txt	
@@ -11,14 +11,13 @@
 
 let React;
 let ReactDOM;
-let findDOMNode;
 let ReactDOMClient;
+let findDOMNode;
 let act;
 let Scheduler;
 let waitForAll;
 let waitFor;
 let assertLog;
-let assertConsoleErrorDev;
 
 describe('ReactUpdates', () => {
   beforeEach(() => {
@@ -30,8 +29,6 @@ describe('ReactUpdates', () => {
       ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
         .findDOMNode;
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
     Scheduler = require('scheduler');
 
     const InternalTestUtils = require('internal-test-utils');
@@ -372,7 +369,6 @@ describe('ReactUpdates', () => {
 
   it('should batch forceUpdate together', async () => {
     let instance;
-    let shouldUpdateCount = 0;
     class Component extends React.Component {
       state = {x: 0};
 
@@ -381,7 +377,7 @@ describe('ReactUpdates', () => {
         instance = this;
       }
       shouldComponentUpdate() {
-        shouldUpdateCount++;
+        Scheduler.log('shouldUpdate');
       }
 
       componentDidUpdate() {
@@ -415,9 +411,8 @@ describe('ReactUpdates', () => {
     });
 
     // shouldComponentUpdate shouldn't be called since we're forcing
-    expect(shouldUpdateCount).toBe(0);
-    assertLog(['Update', 'callback', 'forceUpdate']);
     expect(instance.state.x).toBe(1);
+    assertLog(['Update', 'callback', 'forceUpdate']);
     expect(container.firstChild.textContent).toBe('1');
   });
 
@@ -454,6 +449,7 @@ describe('ReactUpdates', () => {
     });
 
     assertLog(['Parent render', 'Child render']);
+    assertLog([]);
 
     await act(() => {
       instance.setState({x: 1});
@@ -563,6 +559,7 @@ describe('ReactUpdates', () => {
     class App extends React.Component {
       switcherRef = React.createRef();
       childRef = React.createRef();
+
       constructor(props) {
         super(props);
         instance = this;
@@ -737,12 +734,16 @@ describe('ReactUpdates', () => {
       state = {x: 0};
 
       render() {
-        updates.push('Inner-render-' + this.props.x + '-' + this.state.x);
+        updates.push(
+          'Inner-render-' + this.props.x + '-' + this.state.x,
+        );
         return <div />;
       }
 
       componentDidUpdate() {
-        updates.push('Inner-didUpdate-' + this.props.x + '-' + this.state.x);
+        updates.push(
+          'Inner-didUpdate-' + this.props.x + '-' + this.state.x,
+        );
       }
     }
 
@@ -875,7 +876,7 @@ describe('ReactUpdates', () => {
         return <div />;
       }
 
-      UNSAFE_componentWillUpdate() {
+      componentDidUpdate() {
         x.go();
       }
     }
@@ -909,7 +910,7 @@ describe('ReactUpdates', () => {
     class A extends React.Component {
       state = {x: 0};
 
-      UNSAFE_componentWillMount() {
+      componentWillMount() {
         a = this;
       }
 
@@ -919,7 +920,7 @@ describe('ReactUpdates', () => {
     }
 
     class B extends React.Component {
-      UNSAFE_componentWillMount() {
+      componentWillMount() {
         a.setState({x: 1});
       }
 
@@ -1084,14 +1085,21 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(
-      act(() => {
+    await expect(async () => {
+      await act(() => {
         component.setState({}, new Foo());
-      }),
-    ).rejects.toThrowError(
+      });
+    }).rejects.toThrowError(
       'Invalid argument passed as callback. Expected a function. Instead ' +
         'received: [object Object]',
     );
+    assertConsoleErrorDev(
+      [
+        'Expected the last optional `callback` argument to be ' +
+          "a function. Instead received: { a: 1, b: 2 }.",
+      ],
+      {withoutStack: true},
+    );
   });
 
   it('throws in forceUpdate if the update callback is not a function', async () => {
@@ -1158,14 +1166,21 @@ describe('ReactUpdates', () => {
       root.render(<A ref={current => (component = current)} />);
     });
 
-    await expect(
-      act(() => {
+    await expect(async () => {
+      await act(() => {
         component.forceUpdate(new Foo());
-      }),
-    ).rejects.toThrowError(
+      });
+    }).rejects.toThrowError(
       'Invalid argument passed as callback. Expected a function. Instead ' +
         'received: [object Object]',
     );
+    assertConsoleErrorDev(
+      [
+        'Expected the last optional `callback` argument to be ' +
+          "a function. Instead received: { a: 1, b: 2 }.",
+      ],
+      {withoutStack: true},
+    );
   });
 
   it('does not update one component twice in a batch (#2410)', async () => {
@@ -1237,22 +1252,17 @@ describe('ReactUpdates', () => {
       callbacks.forEach(c => c());
     }
 
-    class App extends React.Component {
-      constructor(props) {
-        super(props);
-        this.state = {showChild: true};
-      }
-      componentDidMount() {
-        this.setState({showChild: false});
-      }
-      render() {
-        return (
-          <div>
-            <ForceUpdatesOnChange />
-            {this.state.showChild && <EmitsChangeOnUnmount />}
-          </div>
-        );
-      }
+    function App() {
+      const [showChild, setShowChild] = React.useState(true);
+      React.useEffect(() => {
+        setShowChild(false);
+      }, []);
+      return (
+        <div>
+          <ForceUpdatesOnChange />
+          {showChild && <EmitsChangeOnUnmount />}
+        </div>
+      );
     }
 
     class EmitsChangeOnUnmount extends React.Component {
@@ -1287,6 +1297,20 @@ describe('ReactUpdates', () => {
     expect(true).toBe(true);
   });
 
+  it('unmounts and remounts a root in the same batch', async () => {
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+
+    await act(() => {
+      root.render(<div>Hello</div>);
+      expect(container.textContent).toBe('');
+      root.unmount(container);
+      expect(container.textContent).toBe('');
+    });
+
+    expect(container.textContent).toBe('');
+  });
+
   it('handles reentrant mounting in synchronous mode', async () => {
     let onChangeCalled = false;
     class Editor extends React.Component {
@@ -1322,8 +1346,9 @@ describe('ReactUpdates', () => {
       render();
     });
     assertLog(['Mount']);
-    props = {...props, text: 'goodbye'};
+
     await act(() => {
+      props = {...props, text: 'goodbye'};
       render();
     });
 
@@ -1470,17 +1495,17 @@ describe('ReactUpdates', () => {
 
     const root = ReactDOMClient.createRoot(container);
     let hiddenDiv;
-    await act(async () => {
+    await act(() => {
       root.render(<Foo />);
-      await waitFor(['Foo', 'Baz', 'Foo#effect']);
-      hiddenDiv = container.firstChild.firstChild;
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('');
-      // Run offscreen update
-      await waitForAll(['Bar']);
-      expect(hiddenDiv.hidden).toBe(true);
-      expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
     });
+    await waitFor(['Foo', 'Baz', 'Foo#effect']);
+    hiddenDiv = container.firstChild.firstChild;
+    expect(hiddenDiv.hidden).toBe(true);
+    expect(hiddenDiv.innerHTML).toBe('');
+    // Run offscreen update
+    await waitForAll(['Bar']);
+    expect(hiddenDiv.hidden).toBe(true);
+    expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
 
     ReactDOM.flushSync(() => {
       setCounter(1);
@@ -1622,7 +1647,7 @@ describe('ReactUpdates', () => {
     }).rejects.toThrow('Maximum');
   });
 
-  it('does not fall into an infinite update loop with useLayoutEffect', async () => {
+  it('does not fall into an infinite update loop with useLayoutEffect', () => {
     function NonTerminating() {
       const [step, setStep] = React.useState(0);
       React.useLayoutEffect(() => {
@@ -1633,32 +1658,33 @@ describe('ReactUpdates', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<NonTerminating />);
-      });
-    }).rejects.toThrow('Maximum');
+    expect(root.render(<NonTerminating />)).toThrow('Maximum');
   });
 
   it('can recover after falling into an infinite update loop', async () => {
     class NonTerminating extends React.Component {
       state = {step: 0};
+
       componentDidMount() {
         this.setState({step: 1});
       }
+
       componentDidUpdate() {
         this.setState({step: 2});
       }
+
       render() {
-        return this.state.step;
+        return null;
       }
     }
 
     class Terminating extends React.Component {
       state = {step: 0};
+
       componentDidMount() {
         this.setState({step: 1});
       }
+
       render() {
         return this.state.step;
       }
@@ -1688,7 +1714,7 @@ describe('ReactUpdates', () => {
     expect(container.textContent).toBe('1');
   });
 
-  it('does not fall into mutually recursive infinite update loop with same container', async () => {
+  it('does not fall ?,into mutually recursive infinite update loop with same container', async () => {
     // Note: this test would fail if there were two or more different roots.
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
@@ -1791,8 +1817,8 @@ describe('ReactUpdates', () => {
     expect(subscribers.length).toBe(limit);
   });
 
-  it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
+  it("does not infinite loop if there's a synchronous render phase update on another component", () => {
+    if (gate(flags => !	flags.enableInfiniteLoopDetection)) {
       return;
     }
     let setState;
@@ -1811,9 +1837,9 @@ describe('ReactUpdates', () => {
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    await expect(async () => {
-      await act(() => ReactDOM.flushSync(() => root.render(<App />)));
-    }).rejects.toThrow('Maximum update depth exceeded');
+    expect(() => {
+      ReactDOM.flushSync(() => root.render(<App />));
+    }).toThrow('Maximum update depth exceeded');
     assertConsoleErrorDev([
       'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
         'To locate the bad setState() call inside `Child`, ' +
@@ -1823,7 +1849,7 @@ describe('ReactUpdates', () => {
   });
 
   it("does not infinite loop if there's an async render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
+    if (gate(flags => !flags.enableInfiniteLoopDetection)) {
       return;
     }
     let setState;
@@ -1908,7 +1934,6 @@ describe('ReactUpdates', () => {
             setStep(x => x + 1);
           }
         });
-        Scheduler.log(step);
         return step;
       }
 
