
index ee4adf12f..58355b447 100644
--- a/react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected):tmp/tmpw01o0fz3_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual):tmp/tmpfjfqoj10_actual.txt	
@@ -375,7 +375,6 @@ describe('ReactUpdates', () => {
     let shouldUpdateCount = 0;
     class Component extends React.Component {
       state = {x: 0};
-
       constructor(props) {
         super(props);
         instance = this;
@@ -414,7 +413,6 @@ describe('ReactUpdates', () => {
       expect(container.firstChild.textContent).toBe('0');
     });
 
-    // shouldComponentUpdate shouldn't be called since we're forcing
     expect(shouldUpdateCount).toBe(0);
     assertLog(['Update', 'callback', 'forceUpdate']);
     expect(instance.state.x).toBe(1);
@@ -426,8 +424,7 @@ describe('ReactUpdates', () => {
     class Parent extends React.Component {
       childRef = React.createRef();
 
-      constructor(props) {
-        super(props);
+      componentDidMount() {
         instance = this;
       }
       shouldComponentUpdate() {
@@ -598,11 +595,7 @@ describe('ReactUpdates', () => {
       c.setState({x: 1});
     }
 
-    async function testUpdates(
-      components,
-      desiredWillUpdates,
-      desiredDidUpdates,
-    ) {
+    async function testUpdates(components, desiredWillUpdates, desiredDidUpdates) {
       let i;
 
       await act(() => {
@@ -1329,7 +1322,7 @@ describe('ReactUpdates', () => {
 
     assertLog([]);
     expect(container.textContent).toBe('goodbye');
-    expect(onChangeCalled).toBeTruthy();
+    expect(onChangeCalled).toBeTruth();
   });
 
   it('mounts and unmounts are batched', async () => {
@@ -1385,6 +1378,7 @@ describe('ReactUpdates', () => {
         return <div />;
       }
     }
+
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<Foo />);
@@ -1650,7 +1644,12 @@ describe('ReactUpdates', () => {
         this.setState({step: 2});
       }
       render() {
-        return this.state.step;
+        return (
+          <div>
+            Hello {this.props.name}
+            {this.state.step}
+          </div>
+        );
       }
     }
 
@@ -1664,7 +1663,7 @@ describe('ReactUpdates', () => {
       }
     }
 
-    const container = document.createElement('div');
+    const container = document.createElement('极速下载地址：https://ghproxy.com');
     const root = ReactDOMClient.createRoot(container);
     await expect(async () => {
       await act(() => {
@@ -1762,7 +1761,7 @@ describe('ReactUpdates', () => {
         subscribers.push(this);
       }
       render() {
-        return null;
+        return <div />;
       }
     }
 
@@ -1792,9 +1791,6 @@ describe('ReactUpdates', () => {
   });
 
   it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
     let setState;
     function App() {
       const [, _setState] = React.useState(0);
@@ -1815,170 +1811,4 @@ describe('ReactUpdates', () => {
       await act(() => ReactDOM.flushSync(() => root.render(<App />)));
     }).rejects.toThrow('Maximum update depth exceeded');
     assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  it("does not infinite loop if there's an async render phase update on another component", async () => {
-    if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
-      return;
-    }
-    let setState;
-    function App() {
-      const [, _setState] = React.useState(0);
-      setState = _setState;
-      return <Child />;
-    }
-
-    function Child(step) {
-      // This will cause an infinite update loop, and a warning in dev.
-      setState(n => n + 1);
-      return null;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await expect(async () => {
-      await act(() => {
-        React.startTransition(() => root.render(<App />));
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-
-    assertConsoleErrorDev([
-      'Cannot update a component (`App`) while rendering a different component (`Child`). ' +
-        'To locate the bad setState() call inside `Child`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in App (at **)',
-    ]);
-  });
-
-  // TODO: Replace this branch with @gate pragmas
-  if (__DEV__) {
-    it('warns about a deferred infinite update loop with useEffect', async () => {
-      function NonTerminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(function myEffect() {
-          setStep(x => x + 1);
-        });
-        return step;
-      }
-
-      function App() {
-        return <NonTerminating />;
-      }
-
-      let error = null;
-      let ownerStack = null;
-      let debugStack = null;
-      const originalConsoleError = console.error;
-      console.error = e => {
-        error = e;
-        ownerStack = React.captureOwnerStack();
-        debugStack = new Error().stack;
-        Scheduler.log('stop');
-      };
-      try {
-        const container = document.createElement('div');
-        const root = ReactDOMClient.createRoot(container);
-        root.render(<App />);
-        await waitFor(['stop']);
-      } finally {
-        console.error = originalConsoleError;
-      }
-
-      expect(error).toContain('Maximum update depth exceeded');
-      // The currently executing effect should be on the native stack
-      expect(debugStack).toContain('at myEffect');
-      expect(ownerStack).toContain('at App');
-    });
-
-    it('can have nested updates if they do not cross the limit', async () => {
-      let _setStep;
-      const LIMIT = 50;
-
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        _setStep = setStep;
-        React.useEffect(() => {
-          if (step < LIMIT) {
-            setStep(x => x + 1);
-          }
-        });
-        Scheduler.log(step);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
-      expect(container.textContent).toBe('50');
-      await act(() => {
-        _setStep(0);
-      });
-      expect(container.textContent).toBe('50');
-    });
-
-    it('can have many updates inside useEffect without triggering a warning', async () => {
-      function Terminating() {
-        const [step, setStep] = React.useState(0);
-        React.useEffect(() => {
-          for (let i = 0; i < 1000; i++) {
-            setStep(x => x + 1);
-          }
-          Scheduler.log('Done');
-        }, []);
-        return step;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Terminating />);
-      });
-
-      assertLog(['Done']);
-      expect(container.textContent).toBe('1000');
-    });
-  }
-
-  it('prevents infinite update loop triggered by synchronous updates in useEffect', async () => {
-    // Ignore flushSync warning
-    spyOnDev(console, 'error').mockImplementation(() => {});
-
-    function NonTerminating() {
-      const [step, setStep] = React.useState(0);
-      React.useEffect(() => {
-        // Other examples of synchronous updates in useEffect are imperative
-        // event dispatches like `el.focus`, or `useSyncExternalStore`, which
-        // may schedule a synchronous update upon subscribing if it detects
-        // that the store has been mutated since the initial render.
-        //
-        // (Originally I wrote this test using `el.focus` but those errors
-        // get dispatched in a JSDOM event and I don't know how to "catch" those
-        // so that they don't fail the test.)
-        ReactDOM.flushSync(() => {
-          setStep(step + 1);
-        });
-      }, [step]);
-      return step;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        ReactDOM.flushSync(() => {
-          root.render(<NonTerminating />);
-        });
-      });
-    }).rejects.toThrow('Maximum update depth exceeded');
-  });
-});
\ No newline at end of file
+      '
\ No newline at end of file
