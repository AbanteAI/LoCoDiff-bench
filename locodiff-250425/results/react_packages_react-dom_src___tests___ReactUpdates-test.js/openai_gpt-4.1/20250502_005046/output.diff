
index ee4adf12..b300c343 100644
--- a/react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected):tmp/tmp3z1hjr1o_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual):tmp/tmphrezcijo_actual.txt	
@@ -7,8 +7,6 @@
  * @emails react-core
  */
 
-'use strict';
-
 let React;
 let ReactDOM;
 let findDOMNode;
@@ -1326,7 +1324,6 @@ describe('ReactUpdates', () => {
     await act(() => {
       render();
     });
-
     assertLog([]);
     expect(container.textContent).toBe('goodbye');
     expect(onChangeCalled).toBeTruthy();
@@ -1470,14 +1467,14 @@ describe('ReactUpdates', () => {
 
     const root = ReactDOMClient.createRoot(container);
     let hiddenDiv;
-    await act(async () => {
+    await act(() => {
       root.render(<Foo />);
-      await waitFor(['Foo', 'Baz', 'Foo#effect']);
+      waitFor(['Foo', 'Baz', 'Foo#effect']);
       hiddenDiv = container.firstChild.firstChild;
       expect(hiddenDiv.hidden).toBe(true);
       expect(hiddenDiv.innerHTML).toBe('');
       // Run offscreen update
-      await waitForAll(['Bar']);
+      waitForAll(['Bar']);
       expect(hiddenDiv.hidden).toBe(true);
       expect(hiddenDiv.innerHTML).toBe('<p>bar 0</p>');
     });
@@ -1601,7 +1598,6 @@ describe('ReactUpdates', () => {
       componentDidUpdate() {
         this.setState({step: 2});
       }
-
       render() {
         return (
           <div>
@@ -1906,9 +1902,9 @@ describe('ReactUpdates', () => {
         React.useEffect(() => {
           if (step < LIMIT) {
             setStep(x => x + 1);
+            Scheduler.log(step);
           }
         });
-        Scheduler.log(step);
         return step;
       }
 
