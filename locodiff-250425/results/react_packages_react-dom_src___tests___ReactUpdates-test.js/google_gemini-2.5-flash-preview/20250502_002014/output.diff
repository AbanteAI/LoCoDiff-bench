--- react_packages_react-dom_src___tests___ReactUpdates-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactUpdates-test.js_extracted.txt (actual)@@ -25,10 +25,10 @@     jest.resetModules();
     React = require('react');
     ReactDOM = require('react-dom');
-    ReactDOMClient = require('react-dom/client');
     findDOMNode =
       ReactDOM.__DOM_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE
         .findDOMNode;
+    ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
     assertConsoleErrorDev =
       require('internal-test-utils').assertConsoleErrorDev;
@@ -373,6 +373,7 @@   it('should batch forceUpdate together', async () => {
     let instance;
     let shouldUpdateCount = 0;
+
     class Component extends React.Component {
       state = {x: 0};
 
@@ -563,6 +564,7 @@     class App extends React.Component {
       switcherRef = React.createRef();
       childRef = React.createRef();
+
       constructor(props) {
         super(props);
         instance = this;
@@ -584,10 +586,10 @@ 
     function expectUpdates(desiredWillUpdates, desiredDidUpdates) {
       let i;
-      for (i = 0; i < desiredWillUpdates; i++) {
+      for (i = 0; i < desiredWillUpdates.length; i++) {
         expect(willUpdates).toContain(desiredWillUpdates[i]);
       }
-      for (i = 0; i < desiredDidUpdates; i++) {
+      for (i = 0; i < desiredDidUpdates.length; i++) {
         expect(didUpdates).toContain(desiredDidUpdates[i]);
       }
       willUpdates = [];
@@ -1791,6 +1793,7 @@     expect(subscribers.length).toBe(limit);
   });
 
+  // @gate www
   it("does not infinite loop if there's a synchronous render phase update on another component", async () => {
     if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
       return;
@@ -1822,6 +1825,7 @@     ]);
   });
 
+  // @gate www
   it("does not infinite loop if there's an async render phase update on another component", async () => {
     if (gate(flags => !flags.enableInfiniteRenderLoopDetection)) {
       return;
@@ -1893,6 +1897,7 @@       expect(error).toContain('Maximum update depth exceeded');
       // The currently executing effect should be on the native stack
       expect(debugStack).toContain('at myEffect');
+      expect(ownerStack).toContain('at NonTerminating');
       expect(ownerStack).toContain('at App');
     });
 
@@ -1923,6 +1928,7 @@       await act(() => {
         _setStep(0);
       });
+      assertLog(Array.from({length: LIMIT + 1}, (_, k) => k));
       expect(container.textContent).toBe('50');
     });
 
