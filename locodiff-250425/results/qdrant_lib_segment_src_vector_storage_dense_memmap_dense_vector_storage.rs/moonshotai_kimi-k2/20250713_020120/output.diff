
index e66df55cf..d8a42fcba 100644
--- a/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected):tmp/tmp5br48slw_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual):tmp/tmpl6f5bnpp_actual.txt	
@@ -365,7 +365,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 3);
@@ -402,7 +402,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 5);
@@ -420,7 +420,6 @@ mod tests {
         let res = raw_scorer.peek_top_all(2, &DEFAULT_STOPPED).unwrap();
 
         assert_eq!(res.len(), 2);
-
         assert_ne!(res[0].idx, 2);
 
         let res = raw_scorer
@@ -473,7 +472,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 5);
@@ -604,7 +603,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         assert_eq!(
@@ -615,18 +614,14 @@ mod tests {
 
         let vector = vec![0.0, 1.0, 1.1, 1.0];
         let query = vector.as_slice().into();
-        let scorer = new_raw_scorer_for_test(
+        let closest = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
+        .unwrap()
+        .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
         .unwrap();
-        let closest = scorer
-            .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
-            .unwrap();
-
-        drop(scorer);
-
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
@@ -684,7 +679,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         let vector = vec![-1.0, -1.0, -1.0, -1.0];
@@ -770,7 +765,7 @@ mod tests {
                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage.update_from(&mut iter, &DEFAULT_STOPPED).unwrap();
         }
 
         let config: QuantizationConfig = ScalarQuantizationConfig {
@@ -802,7 +797,6 @@ mod tests {
             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-
         for i in 0..5 {
             let quant = scorer_quant.score_point(i);
             let orig = scorer_orig.score_point(i);
@@ -812,7 +806,6 @@ mod tests {
             let orig = scorer_orig.score_internal(0, i);
             assert!((orig - quant).abs() < 0.15);
         }
-
         let files = storage.files();
         let quantization_files = quantized_vectors.files();
 
