
index e66df55c..c6d2edae 100644
--- a/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected):tmp/tmpvm3w5irv_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual):tmp/tmpz148kfjg_actual.txt	
@@ -1,5 +1,5 @@
 use std::borrow::Cow;
-use std::fs::{File, OpenOptions, create_dir_all};
+use std::fs::{create_dir_all, File, OpenOptions};
 use std::io::{self, Write};
 use std::mem::MaybeUninit;
 use std::ops::Range;
@@ -12,8 +12,8 @@ use common::types::PointOffsetType;
 use memory::fadvise::clear_disk_cache;
 use memory::mmap_ops;
 
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::common::Flusher;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{VectorElementType, VectorRef};
@@ -55,6 +55,17 @@ impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
         clear_disk_cache(&self.deleted_path)?;
         Ok(())
     }
+
+    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
+        self.mmap_store.as_ref().unwrap()
+    }
+
+    pub fn has_async_reader(&self) -> bool {
+        self.mmap_store
+            .as_ref()
+            .map(|x| x.has_async_reader())
+            .unwrap_or(false)
+    }
 }
 
 pub fn open_memmap_vector_storage(
@@ -76,8 +87,7 @@ pub fn open_memmap_vector_storage_byte(
     dim: usize,
     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
-    let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+    let storage = open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
     Ok(VectorStorageEnum::DenseMemmapByte(storage))
 }
 
@@ -86,8 +96,7 @@ pub fn open_memmap_vector_storage_half(
     dim: usize,
     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
-    let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+    let storage = open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
     Ok(VectorStorageEnum::DenseMemmapHalf(storage))
 }
 
@@ -126,19 +135,6 @@ fn open_memmap_vector_storage_with_async_io_impl<T: PrimitiveVectorElement>(
     }))
 }
 
-impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
-    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
-        self.mmap_store.as_ref().unwrap()
-    }
-
-    pub fn has_async_reader(&self) -> bool {
-        self.mmap_store
-            .as_ref()
-            .map(|x| x.has_async_reader())
-            .unwrap_or(false)
-    }
-}
-
 impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for MemmapDenseVectorStorage<T> {
     fn vector_dim(&self) -> usize {
         self.mmap_store.as_ref().unwrap().dim
@@ -302,14 +298,14 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::data_types::vectors::{DenseVector, QueryVector};
     use crate::fixtures::payload_context_fixture::FixtureIdTracker;
     use crate::id_tracker::id_tracker_base::IdTracker;
     use crate::types::{PointIdType, QuantizationConfig, ScalarQuantizationConfig};
     use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
     use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
-    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
+    use crate::vector_storage::{new_raw_scorer_for_test, DEFAULT_STOPPED};
 
     #[test]
     fn test_basic_persistence() {
@@ -417,7 +413,9 @@ mod tests {
             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-        let res = raw_scorer.peek_top_all(2, &DEFAULT_STOPPED).unwrap();
+        let res = raw_scorer
+            .peek_top_all(2, &DEFAULT_STOPPED)
+            .unwrap();
 
         assert_eq!(res.len(), 2);
 
@@ -509,7 +507,6 @@ mod tests {
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
         assert_eq!(closest[2].idx, 4);
-        drop(scorer);
 
         // Delete 1, redelete 2
         storage.delete_vector(1 as PointOffsetType).unwrap();
@@ -535,7 +532,6 @@ mod tests {
         assert_eq!(closest.len(), 2, "must have 2 vectors, 3 are deleted");
         assert_eq!(closest[0].idx, 4);
         assert_eq!(closest[1].idx, 0);
-        drop(scorer);
 
         // Delete all
         storage.delete_vector(0 as PointOffsetType).unwrap();
@@ -625,8 +621,6 @@ mod tests {
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
             .unwrap();
 
-        drop(scorer);
-
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
@@ -781,12 +775,12 @@ mod tests {
         .into();
 
         let stopped = Arc::new(AtomicBool::new(false));
-        let hardware_counter = HardwareCounterCell::new();
         let quantized_vectors =
             QuantizedVectors::create(&storage, &config, dir.path(), 1, &stopped).unwrap();
 
         let query: QueryVector = [0.5, 0.5, 0.5, 0.5].into();
 
+        let hardware_counter = HardwareCounterCell::new();
         let scorer_quant = quantized_vectors
             .raw_scorer(
                 query.clone(),
