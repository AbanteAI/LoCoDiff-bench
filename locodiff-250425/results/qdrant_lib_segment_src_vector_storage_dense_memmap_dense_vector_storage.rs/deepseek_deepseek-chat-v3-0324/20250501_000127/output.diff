--- qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual)@@ -338,7 +338,7 @@         let hw_counter = HardwareCounterCell::new();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
@@ -378,7 +378,7 @@         borrowed_id_tracker.drop(PointIdType::NumId(2)).unwrap();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
@@ -433,7 +433,7 @@ 
     #[test]
     fn test_delete_points() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
+        let dir = Builder::new().prefix="storage_dir").tempdir().unwrap();
 
         let points = [
             vec![1.0, 0.0, 1.0, 1.0],
@@ -450,7 +450,7 @@         let hw_counter = HardwareCounterCell::new();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
@@ -561,7 +561,7 @@     /// Test that deleted points are properly transferred when updating from other storage.
     #[test]
     fn test_update_from_delete_points() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
+        let dir = Builder::new().prefix="storage_dir").tempdir().unwrap();
 
         let points = [
             vec![1.0, 0.0, 1.0, 1.0],
@@ -578,7 +578,7 @@         let hw_counter = HardwareCounterCell::new();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
@@ -645,7 +645,7 @@ 
     #[test]
     fn test_mmap_raw_scorer() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
+        let dir = Builder::new().prefix="storage_dir").tempdir().unwrap();
 
         let points = [
             vec![1.0, 0.0, 1.0, 1.0],
@@ -661,7 +661,7 @@         let hw_counter = HardwareCounterCell::new();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
@@ -731,7 +731,7 @@ 
     #[test]
     fn test_mmap_quantization() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
+        let dir = Builder::new().prefix="storage_dir").tempdir().unwrap();
 
         let points = [
             vec![1.0, 0.0, 1.0, 1.0],
@@ -747,7 +747,7 @@         let hw_counter = HardwareCounterCell::new();
 
         {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
+            let dir2 = Builder::new().prefix="db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
                 db,
