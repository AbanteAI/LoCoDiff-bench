--- qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual)@@ -25,36 +25,12 @@ const VECTORS_PATH: &str = "matrix.dat";
 const DELETED_PATH: &str = "deleted.dat";
 
-/// Stores all dense vectors in mem-mapped file
-///
-/// It is not possible to insert new vectors into mem-mapped storage,
-/// but possible to mark some vectors as removed
-///
-/// Mem-mapped storage can only be constructed from another storage
 #[derive(Debug)]
 pub struct MemmapDenseVectorStorage<T: PrimitiveVectorElement> {
     vectors_path: PathBuf,
     deleted_path: PathBuf,
     mmap_store: Option<MmapDenseVectors<T>>,
     distance: Distance,
-}
-
-impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        if let Some(mmap_store) = &self.mmap_store {
-            mmap_store.populate()?;
-        }
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        clear_disk_cache(&self.vectors_path)?;
-        clear_disk_cache(&self.deleted_path)?;
-        Ok(())
-    }
 }
 
 pub fn open_memmap_vector_storage(
@@ -127,6 +103,14 @@ }
 
 impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
+    pub fn prefault_mmap_pages(&self) -> Option<mmap_ops::PrefaultMmapPages> {
+        Some(
+            self.mmap_store
+                .as_ref()?
+                .prefault_mmap_pages(&self.vectors_path),
+        )
+    }
+
     pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
         self.mmap_store.as_ref().unwrap()
     }
@@ -136,6 +120,24 @@             .as_ref()
             .map(|x| x.has_async_reader())
             .unwrap_or(false)
+    }
+}
+
+impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    pub fn populate(&self) -> OperationResult<()> {
+        if let Some(mmap_store) = &self.mmap_store {
+            mmap_store.populate()?;
+        }
+        Ok(())
+    }
+
+    /// Drop disk cache.
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        clear_disk_cache(&self.vectors_path)?;
+        clear_disk_cache(&self.deleted_path)?;
+        Ok(())
     }
 }
 
@@ -163,6 +165,10 @@ }
 
 impl<T: PrimitiveVectorElement> VectorStorage for MemmapDenseVectorStorage<T> {
+    fn vector_dim(&self) -> usize {
+        self.mmap_store.as_ref().unwrap().dim
+    }
+
     fn distance(&self) -> Distance {
         self.distance
     }
@@ -215,7 +221,6 @@             .map(|x| x.has_async_reader())
             .unwrap_or(get_async_scorer());
 
-        // Extend vectors file, write other vectors into it
         let mut vectors_file = open_append(&self.vectors_path)?;
         let mut deleted_ids = vec![];
         for (offset, (other_vector, other_deleted)) in other_vectors.enumerate() {
@@ -225,7 +230,6 @@             vectors_file.write_all(raw_bites)?;
             end_index += 1;
 
-            // Remember deleted IDs so we can propagate deletions later
             if other_deleted {
                 deleted_ids.push(start_index as PointOffsetType + offset as PointOffsetType);
             }
@@ -233,7 +237,6 @@         vectors_file.sync_all()?;
         drop(vectors_file);
 
-        // Load store with updated files
         self.mmap_store.replace(MmapDenseVectors::open(
             &self.vectors_path,
             &self.deleted_path,
@@ -241,10 +244,6 @@             with_async_io,
         )?);
 
-        // Flush deleted flags into store
-        // We must do that in the updated store, and cannot do it in the previous loop. That is
-        // because the file backing delete storage must be resized, and for that we'd need to know
-        // the exact number of vectors beforehand. When opening the store it is done automatically.
         let store = self.mmap_store.as_mut().unwrap();
         for id in deleted_ids {
             check_process_stopped(stopped)?;
@@ -308,8 +307,8 @@     use crate::id_tracker::id_tracker_base::IdTracker;
     use crate::types::{PointIdType, QuantizationConfig, ScalarQuantizationConfig};
     use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
+    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
     use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
-    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
 
     #[test]
     fn test_basic_persistence() {
@@ -326,7 +325,6 @@         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let mut borrowed_id_tracker = id_tracker.borrow_mut();
 
-        // Assert this storage lists both the vector and deleted file
         let files = storage.files();
         for file_name in [VECTORS_PATH, DELETED_PATH] {
             files
@@ -335,9 +333,8 @@                 .expect("storage is missing required file");
         }
 
-        let hw_counter = HardwareCounterCell::new();
-
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -345,7 +342,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -378,6 +375,7 @@         borrowed_id_tracker.drop(PointIdType::NumId(2)).unwrap();
 
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -385,7 +383,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -420,7 +418,6 @@         let res = raw_scorer.peek_top_all(2, &DEFAULT_STOPPED).unwrap();
 
         assert_eq!(res.len(), 2);
-
         assert_ne!(res[0].idx, 2);
 
         let res = raw_scorer
@@ -447,9 +444,8 @@         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
 
-        let hw_counter = HardwareCounterCell::new();
-
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -457,7 +453,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -479,7 +475,6 @@         assert_eq!(storage.total_vector_count(), 5);
         assert_eq!(storage.deleted_vector_count(), 0);
 
-        // Delete select number of points
         delete_mask
             .into_iter()
             .enumerate()
@@ -495,23 +490,19 @@ 
         let vector = vec![0.0, 1.0, 1.1, 1.0];
         let query = vector.as_slice().into();
-        let scorer = new_raw_scorer_for_test(
+        let closest = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
+        .unwrap()
+        .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
         .unwrap();
-
-        let closest = scorer
-            .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
-            .unwrap();
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
         assert_eq!(closest[2].idx, 4);
-        drop(scorer);
-
-        // Delete 1, redelete 2
+
         storage.delete_vector(1 as PointOffsetType).unwrap();
         storage.delete_vector(2 as PointOffsetType).unwrap();
         assert_eq!(
@@ -523,21 +514,18 @@         let vector = vec![1.0, 0.0, 0.0, 0.0];
         let query = vector.as_slice().into();
 
-        let scorer = new_raw_scorer_for_test(
+        let closest = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
+        .unwrap()
+        .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
         .unwrap();
-        let closest = scorer
-            .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
-            .unwrap();
         assert_eq!(closest.len(), 2, "must have 2 vectors, 3 are deleted");
         assert_eq!(closest[0].idx, 4);
         assert_eq!(closest[1].idx, 0);
-        drop(scorer);
-
-        // Delete all
+
         storage.delete_vector(0 as PointOffsetType).unwrap();
         storage.delete_vector(4 as PointOffsetType).unwrap();
         assert_eq!(
@@ -546,19 +534,18 @@             "all vectors must be deleted"
         );
 
-        let vector = vec![1.0, 0.0, 0.0, 0.0];
-        let query = vector.as_slice().into();
-        let scorer = new_raw_scorer_for_test(
+        let query = vec![1.0, 0.0, 0.0, 0.0].as_slice().into();
+        let closest = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
+        .unwrap()
+        .peek_top_all(5, &DEFAULT_STOPPED)
         .unwrap();
-        let closest = scorer.peek_top_all(5, &DEFAULT_STOPPED).unwrap();
         assert!(closest.is_empty(), "must have no results, all deleted");
     }
 
-    /// Test that deleted points are properly transferred when updating from other storage.
     #[test]
     fn test_update_from_delete_points() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -575,9 +562,8 @@         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
 
-        let hw_counter = HardwareCounterCell::new();
-
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -585,7 +571,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -613,26 +599,20 @@             "2 vectors must be deleted from other storage"
         );
 
-        let vector = vec![0.0, 1.0, 1.1, 1.0];
-        let query = vector.as_slice().into();
-        let scorer = new_raw_scorer_for_test(
+        let query = vec![0.0, 1.0, 1.1, 1.0].as_slice().into();
+        let closest = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
+        .unwrap()
+        .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
         .unwrap();
-        let closest = scorer
-            .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
-            .unwrap();
-
-        drop(scorer);
-
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
         assert_eq!(closest[2].idx, 4);
 
-        // Delete all
         storage.delete_vector(0 as PointOffsetType).unwrap();
         storage.delete_vector(1 as PointOffsetType).unwrap();
         storage.delete_vector(4 as PointOffsetType).unwrap();
@@ -658,9 +638,8 @@         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
 
-        let hw_counter = HardwareCounterCell::new();
-
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -668,7 +647,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -687,12 +666,11 @@             storage.update_from(&mut iter, &Default::default()).unwrap();
         }
 
-        let vector = vec![-1.0, -1.0, -1.0, -1.0];
-        let query = vector.as_slice().into();
+        let query = vec![-1.0, -1.0, -1.0, -1.0].as_slice().into();
         let query_points: Vec<PointOffsetType> = vec![0, 2, 4];
 
         let scorer = new_raw_scorer_for_test(
-            query,
+            query.clone(),
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
@@ -712,9 +690,9 @@ 
     #[test]
     fn test_casts() {
-        let data: DenseVector = vec![0.42, 0.069, 333.1, 100500.];
-
-        let raw_data = transmute_to_u8_slice(&data);
+        let data: DenseVector = vec![0.42, 0.069, 333.1, 100500.].into();
+
+        let raw_data = unsafe { transmute_to_u8_slice(&data) };
 
         eprintln!("raw_data.len() = {:#?}", raw_data.len());
 
@@ -744,9 +722,8 @@         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
 
-        let hw_counter = HardwareCounterCell::new();
-
         {
+            let hw_counter = HardwareCounterCell::new();
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
             let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
             let mut storage2 = open_simple_dense_vector_storage(
@@ -754,7 +731,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &Default::default(),
             )
             .unwrap();
             {
@@ -781,7 +758,6 @@         .into();
 
         let stopped = Arc::new(AtomicBool::new(false));
-        let hardware_counter = HardwareCounterCell::new();
         let quantized_vectors =
             QuantizedVectors::create(&storage, &config, dir.path(), 1, &stopped).unwrap();
 
@@ -792,17 +768,16 @@                 query.clone(),
                 borrowed_id_tracker.deleted_point_bitslice(),
                 storage.deleted_vector_bitslice(),
-                hardware_counter,
+                &stopped,
+                HardwareCounterCell::new(),
             )
             .unwrap();
-
         let scorer_orig = new_raw_scorer_for_test(
             query.clone(),
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-
         for i in 0..5 {
             let quant = scorer_quant.score_point(i);
             let orig = scorer_orig.score_point(i);
@@ -812,21 +787,20 @@             let orig = scorer_orig.score_internal(0, i);
             assert!((orig - quant).abs() < 0.15);
         }
-
         let files = storage.files();
         let quantization_files = quantized_vectors.files();
 
-        // test save-load
         let quantized_vectors = QuantizedVectors::load(&storage, dir.path()).unwrap();
         assert_eq!(files, storage.files());
         assert_eq!(quantization_files, quantized_vectors.files());
-        let hardware_counter = HardwareCounterCell::new();
+
         let scorer_quant = quantized_vectors
             .raw_scorer(
                 query.clone(),
                 borrowed_id_tracker.deleted_point_bitslice(),
                 storage.deleted_vector_bitslice(),
-                hardware_counter,
+                &stopped,
+                HardwareCounterCell::new(),
             )
             .unwrap();
         let scorer_orig = new_raw_scorer_for_test(
