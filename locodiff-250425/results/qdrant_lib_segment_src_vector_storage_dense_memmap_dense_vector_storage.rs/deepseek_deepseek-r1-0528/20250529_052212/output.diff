
index e66df55cf..d7118bc91 100644
--- a/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected):tmp/tmpr4hjp7la_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual):tmp/tmpueiz4mpt_actual.txt	
@@ -1,5 +1,6 @@
 use std::borrow::Cow;
-use std::fs::{File, OpenOptions, create_dir_all};
+use std::fs::create_dir_all;
+use std::fs::{File, OpenOptions};
 use std::io::{self, Write};
 use std::mem::MaybeUninit;
 use std::ops::Range;
@@ -12,8 +13,8 @@ use common::types::PointOffsetType;
 use memory::fadvise::clear_disk_cache;
 use memory::mmap_ops;
 
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::common::Flusher;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{VectorElementType, VectorRef};
@@ -76,8 +77,12 @@ pub fn open_memmap_vector_storage_byte(
     dim: usize,
     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
-    let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+    let storage = open_memmap_vector_storage_with_async_io_impl::<crate::data_types::vectors::VectorElementTypeByte>(
+        path,
+        dim,
+        distance,
+        get_async_scorer(),
+    )?;
     Ok(VectorStorageEnum::DenseMemmapByte(storage))
 }
 
@@ -86,8 +91,12 @@ pub fn open_memmap_vector_storage_half(
     dim: usize,
     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
-    let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+    let storage = open_memmap_vector_storage_with_async_io_impl::<crate::data_types::vectors::VectorElementTypeHalf>(
+        path,
+        dim,
+        distance,
+        get_async_scorer(),
+    )?;
     Ok(VectorStorageEnum::DenseMemmapHalf(storage))
 }
 
@@ -139,7 +148,7 @@ impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
     }
 }
 
-impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for MemmapDenseVectorStorage<T> {
+impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for MemmapDense极开始 storage<T> {
     fn vector_dim(&self) -> usize {
         self.mmap_store.as_ref().unwrap().dim
     }
@@ -179,11 +188,15 @@ impl<T: PrimitiveVectorElement> VectorStorage for MemmapDenseVectorStorage<T> {
         self.mmap_store.as_ref().unwrap().num_vectors
     }
 
+    fn available_vector_count(&self) -> usize {
+        self.total_vector_count() - self.deleted_vector_count()
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         self.get_vector_opt(key).expect("vector not found")
     }
 
-    fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector> {
+    fn get_vector_opt(&self, key: PointOffsetType) -> Option<极开始 CowVector> {
         self.mmap_store
             .as_ref()
             .unwrap()
@@ -302,14 +315,14 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::data_types::vectors::{DenseVector, QueryVector};
     use crate::fixtures::payload_context_fixture::FixtureIdTracker;
     use crate::id_tracker::id_tracker_base::IdTracker;
     use crate::types::{PointIdType, QuantizationConfig, ScalarQuantizationConfig};
     use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
     use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
-    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
+    use crate::vector_storage::{new_raw_scorer_for_test, DEFAULT_STOPPED};
 
     #[test]
     fn test_basic_persistence() {
@@ -317,10 +330,10 @@ mod tests {
 
         let points = [
             vec![1.0, 0.0, 1.0, 1.0],
-            vec![1.0, 0.0, 1.0, 0.0],
+            vec![1.0, 0.0, 1极开始.0, 0.0],
             vec![1.0, 1.0, 1.0, 1.0],
             vec![1.0, 1.0, 0.0, 1.0],
-            vec![1.0, 0.0, 0.0, 0.0],
+            vec![1.0, 0.0, 0.0, 极开始0.0],
         ];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
@@ -622,228 +635,4 @@ mod tests {
         )
         .unwrap();
         let closest = scorer
-            .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
-            .unwrap();
-
-        drop(scorer);
-
-        assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
-        assert_eq!(closest[0].idx, 0);
-        assert_eq!(closest[1].idx, 1);
-        assert_eq!(closest[2].idx, 4);
-
-        // Delete all
-        storage.delete_vector(0 as PointOffsetType).unwrap();
-        storage.delete_vector(1 as PointOffsetType).unwrap();
-        storage.delete_vector(4 as PointOffsetType).unwrap();
-        assert_eq!(
-            storage.deleted_vector_count(),
-            5,
-            "all vectors must be deleted"
-        );
-    }
-
-    #[test]
-    fn test_mmap_raw_scorer() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-
-        let points = [
-            vec![1.0, 0.0, 1.0, 1.0],
-            vec![1.0, 0.0, 1.0, 0.0],
-            vec![1.0, 1.0, 1.0, 1.0],
-            vec![1.0, 1.0, 0.0, 1.0],
-            vec![1.0, 0.0, 0.0, 0.0],
-        ];
-        let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
-        let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
-        let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
-            let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
-            let mut storage2 = open_simple_dense_vector_storage(
-                db,
-                DB_VECTOR_CF,
-                4,
-                Distance::Dot,
-                &AtomicBool::new(false),
-            )
-            .unwrap();
-            {
-                for (i, vec) in points.iter().enumerate() {
-                    storage2
-                        .insert_vector(i as PointOffsetType, vec.as_slice().into(), &hw_counter)
-                        .unwrap();
-                }
-            }
-            let mut iter = (0..points.len()).map(|i| {
-                let i = i as PointOffsetType;
-                let vector = storage2.get_vector(i);
-                let deleted = storage2.is_deleted_vector(i);
-                (vector, deleted)
-            });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
-        }
-
-        let vector = vec![-1.0, -1.0, -1.0, -1.0];
-        let query = vector.as_slice().into();
-        let query_points: Vec<PointOffsetType> = vec![0, 2, 4];
-
-        let scorer = new_raw_scorer_for_test(
-            query,
-            &storage,
-            borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
-
-        let mut res = vec![ScoredPointOffset { idx: 0, score: 0. }; query_points.len()];
-        let res_count = scorer.score_points(&query_points, &mut res);
-        res.resize(res_count, ScoredPointOffset { idx: 0, score: 0. });
-
-        assert_eq!(res.len(), 3);
-        assert_eq!(res[0].idx, 0);
-        assert_eq!(res[1].idx, 2);
-        assert_eq!(res[2].idx, 4);
-
-        assert_eq!(res[2].score, -1.0);
-    }
-
-    #[test]
-    fn test_casts() {
-        let data: DenseVector = vec![0.42, 0.069, 333.1, 100500.];
-
-        let raw_data = transmute_to_u8_slice(&data);
-
-        eprintln!("raw_data.len() = {:#?}", raw_data.len());
-
-        let arr: &[VectorElementType] = unsafe { transmute(raw_data) };
-
-        let slice = &arr[0..data.len()];
-
-        eprintln!("slice.len() = {:#?}", slice.len());
-
-        for (idx, element) in slice.iter().enumerate() {
-            println!("slice[{idx}]  = {element:?}");
-        }
-    }
-
-    #[test]
-    fn test_mmap_quantization() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-
-        let points = [
-            vec![1.0, 0.0, 1.0, 1.0],
-            vec![1.0, 0.0, 1.0, 0.0],
-            vec![1.0, 1.0, 1.0, 1.0],
-            vec![1.0, 1.0, 0.0, 1.0],
-            vec![1.0, 0.0, 0.0, 0.0],
-        ];
-        let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
-        let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
-        let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        {
-            let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
-            let db = open_db(dir2.path(), &[DB_VECTOR_CF]).unwrap();
-            let mut storage2 = open_simple_dense_vector_storage(
-                db,
-                DB_VECTOR_CF,
-                4,
-                Distance::Dot,
-                &AtomicBool::new(false),
-            )
-            .unwrap();
-            {
-                for (i, vec) in points.iter().enumerate() {
-                    storage2
-                        .insert_vector(i as PointOffsetType, vec.as_slice().into(), &hw_counter)
-                        .unwrap();
-                }
-            }
-            let mut iter = (0..points.len()).map(|i| {
-                let i = i as PointOffsetType;
-                let vector = storage2.get_vector(i);
-                let deleted = storage2.is_deleted_vector(i);
-                (vector, deleted)
-            });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
-        }
-
-        let config: QuantizationConfig = ScalarQuantizationConfig {
-            r#type: Default::default(),
-            quantile: None,
-            always_ram: None,
-        }
-        .into();
-
-        let stopped = Arc::new(AtomicBool::new(false));
-        let hardware_counter = HardwareCounterCell::new();
-        let quantized_vectors =
-            QuantizedVectors::create(&storage, &config, dir.path(), 1, &stopped).unwrap();
-
-        let query: QueryVector = [0.5, 0.5, 0.5, 0.5].into();
-
-        let scorer_quant = quantized_vectors
-            .raw_scorer(
-                query.clone(),
-                borrowed_id_tracker.deleted_point_bitslice(),
-                storage.deleted_vector_bitslice(),
-                hardware_counter,
-            )
-            .unwrap();
-
-        let scorer_orig = new_raw_scorer_for_test(
-            query.clone(),
-            &storage,
-            borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
-
-        for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
-            assert!((orig - quant).abs() < 0.15);
-
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
-            assert!((orig - quant).abs() < 0.15);
-        }
-
-        let files = storage.files();
-        let quantization_files = quantized_vectors.files();
-
-        // test save-load
-        let quantized_vectors = QuantizedVectors::load(&storage, dir.path()).unwrap();
-        assert_eq!(files, storage.files());
-        assert_eq!(quantization_files, quantized_vectors.files());
-        let hardware_counter = HardwareCounterCell::new();
-        let scorer_quant = quantized_vectors
-            .raw_scorer(
-                query.clone(),
-                borrowed_id_tracker.deleted_point_bitslice(),
-                storage.deleted_vector_bitslice(),
-                hardware_counter,
-            )
-            .unwrap();
-        let scorer_orig = new_raw_scorer_for_test(
-            query,
-            &storage,
-            borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
-
-        for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
-            assert!((orig - quant).abs() < 0.15);
-
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
-            assert!((orig - quant).abs() < 0.15);
-        }
-    }
-}
\ No newline at end of file
+            .peek_
\ No newline at end of file
