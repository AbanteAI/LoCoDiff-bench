--- qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual)@@ -13,11 +13,10 @@ use memory::mmap_ops;
 
 use crate::common::Flusher;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{VectorElementType, VectorRef};
-use crate::types::{Distance, VectorStorageDatatype};
+use crate::types::Distance;
 use crate::vector_storage::common::get_async_scorer;
 use crate::vector_storage::dense::mmap_dense_vectors::MmapDenseVectors;
 use crate::vector_storage::{DenseVectorStorage, VectorStorage, VectorStorageEnum};
@@ -55,6 +54,17 @@         clear_disk_cache(&self.deleted_path)?;
         Ok(())
     }
+
+    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
+        self.mmap_store.as_ref().unwrap()
+    }
+
+    pub fn has_async_reader(&self) -> bool {
+        self.mmap_store
+            .as_ref()
+            .map(|x| x.has_async_reader())
+            .unwrap_or(false)
+    }
 }
 
 pub fn open_memmap_vector_storage(
@@ -77,7 +87,12 @@     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
     let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+        open_memmap_vector_storage_with_async_io_impl::<VectorElementTypeByte>(
+            path,
+            dim,
+            distance,
+            get_async_scorer(),
+        )?;
     Ok(VectorStorageEnum::DenseMemmapByte(storage))
 }
 
@@ -87,7 +102,12 @@     distance: Distance,
 ) -> OperationResult<VectorStorageEnum> {
     let storage =
-        open_memmap_vector_storage_with_async_io_impl(path, dim, distance, get_async_scorer())?;
+        open_memmap_vector_storage_with_async_io_impl::<VectorElementTypeHalf>(
+            path,
+            dim,
+            distance,
+            get_async_scorer(),
+        )?;
     Ok(VectorStorageEnum::DenseMemmapHalf(storage))
 }
 
@@ -126,19 +146,6 @@     }))
 }
 
-impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
-    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
-        self.mmap_store.as_ref().unwrap()
-    }
-
-    pub fn has_async_reader(&self) -> bool {
-        self.mmap_store
-            .as_ref()
-            .map(|x| x.has_async_reader())
-            .unwrap_or(false)
-    }
-}
-
 impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for MemmapDenseVectorStorage<T> {
     fn vector_dim(&self) -> usize {
         self.mmap_store.as_ref().unwrap().dim
@@ -163,6 +170,14 @@ }
 
 impl<T: PrimitiveVectorElement> VectorStorage for MemmapDenseVectorStorage<T> {
+    fn get(&self) -> VectorStorageEnum {
+        todo!()
+    }
+
+    fn vector_dim(&self) -> usize {
+        self.mmap_store.as_ref().unwrap().dim
+    }
+
     fn distance(&self) -> Distance {
         self.distance
     }
@@ -177,18 +192,6 @@ 
     fn total_vector_count(&self) -> usize {
         self.mmap_store.as_ref().unwrap().num_vectors
-    }
-
-    fn get_vector(&self, key: PointOffsetType) -> CowVector {
-        self.get_vector_opt(key).expect("vector not found")
-    }
-
-    fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector> {
-        self.mmap_store
-            .as_ref()
-            .unwrap()
-            .get_vector_opt(key)
-            .map(|vector| T::slice_to_float_cow(vector.into()).into())
     }
 
     fn insert_vector(
@@ -199,7 +202,7 @@     ) -> OperationResult<()> {
         panic!("Can't directly update vector in mmap storage")
     }
-
+    
     fn update_from<'a>(
         &mut self,
         other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
@@ -242,9 +245,6 @@         )?);
 
         // Flush deleted flags into store
-        // We must do that in the updated store, and cannot do it in the previous loop. That is
-        // because the file backing delete storage must be resized, and for that we'd need to know
-        // the exact number of vectors beforehand. When opening the store it is done automatically.
         let store = self.mmap_store.as_mut().unwrap();
         for id in deleted_ids {
             check_process_stopped(stopped)?;
@@ -282,6 +282,18 @@ 
     fn deleted_vector_bitslice(&self) -> &BitSlice {
         self.mmap_store.as_ref().unwrap().deleted_vector_bitslice()
+    }
+
+    fn get_vector(&self, key: PointOffsetType) -> CowVector {
+        self.get_vector_opt(key).expect("vector not found")
+    }
+
+    fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector> {
+        self.mmap_store
+            .as_ref()
+            .unwrap()
+            .get_vector_opt(key)
+            .map(|vector| T::slice_to_float_cow(vector.into()).into())
     }
 }
 
@@ -323,6 +335,7 @@             vec![1.0, 0.0, 0.0, 0.0],
         ];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
+        let hw_counter = HardwareCounterCell::new();
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let mut borrowed_id_tracker = id_tracker.borrow_mut();
 
@@ -334,8 +347,6 @@                 .find(|p| p.file_name().unwrap() == file_name)
                 .expect("storage is missing required file");
         }
-
-        let hw_counter = HardwareCounterCell::new();
 
         {
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
@@ -345,7 +356,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -365,7 +376,9 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 3);
@@ -385,7 +398,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -402,7 +415,9 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 5);
@@ -415,9 +430,10 @@             points[2].as_slice().into(),
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
-        let res = raw_scorer.peek_top_all(2, &DEFAULT_STOPPED).unwrap();
+        );
+        let res = raw_scorer
+            .peek_top_all(2, &DEFAULT_STOPPED)
+            .unwrap();
 
         assert_eq!(res.len(), 2);
 
@@ -444,10 +460,9 @@         ];
         let delete_mask = [false, false, true, true, false];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
+        let hw_counter = HardwareCounterCell::new();
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
 
         {
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
@@ -457,7 +472,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -473,7 +488,9 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         assert_eq!(storage.total_vector_count(), 5);
@@ -499,8 +516,7 @@             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
 
         let closest = scorer
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
@@ -509,7 +525,6 @@         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
         assert_eq!(closest[2].idx, 4);
-        drop(scorer);
 
         // Delete 1, redelete 2
         storage.delete_vector(1 as PointOffsetType).unwrap();
@@ -527,15 +542,13 @@             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
         let closest = scorer
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
             .unwrap();
         assert_eq!(closest.len(), 2, "must have 2 vectors, 3 are deleted");
         assert_eq!(closest[0].idx, 4);
         assert_eq!(closest[1].idx, 0);
-        drop(scorer);
 
         // Delete all
         storage.delete_vector(0 as PointOffsetType).unwrap();
@@ -552,13 +565,11 @@             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
         let closest = scorer.peek_top_all(5, &DEFAULT_STOPPED).unwrap();
         assert!(closest.is_empty(), "must have no results, all deleted");
     }
 
-    /// Test that deleted points are properly transferred when updating from other storage.
     #[test]
     fn test_update_from_delete_points() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -572,10 +583,9 @@         ];
         let delete_mask = [false, false, true, true, false];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
+        let hw_counter = HardwareCounterCell::new();
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
 
         {
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
@@ -585,7 +595,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -604,7 +614,9 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         assert_eq!(
@@ -619,14 +631,11 @@             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
+
         let closest = scorer
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
             .unwrap();
-
-        drop(scorer);
-
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
@@ -655,10 +664,9 @@             vec![1.0, 0.0, 0.0, 0.0],
         ];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
+        let hw_counter = HardwareCounterCell::new();
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
 
         {
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
@@ -668,7 +676,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -684,7 +692,9 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         let vector = vec![-1.0, -1.0, -1.0, -1.0];
@@ -695,11 +705,12 @@             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
 
         let mut res = vec![ScoredPointOffset { idx: 0, score: 0. }; query_points.len()];
-        let res_count = scorer.score_points(&query_points, &mut res);
+        let res_count = scorer
+            .score_points(&query_points, &mut res, &DEFAULT_STOPPED)
+            .unwrap();
         res.resize(res_count, ScoredPointOffset { idx: 0, score: 0. });
 
         assert_eq!(res.len(), 3);
@@ -708,25 +719,6 @@         assert_eq!(res[2].idx, 4);
 
         assert_eq!(res[2].score, -1.0);
-    }
-
-    #[test]
-    fn test_casts() {
-        let data: DenseVector = vec![0.42, 0.069, 333.1, 100500.];
-
-        let raw_data = transmute_to_u8_slice(&data);
-
-        eprintln!("raw_data.len() = {:#?}", raw_data.len());
-
-        let arr: &[VectorElementType] = unsafe { transmute(raw_data) };
-
-        let slice = &arr[0..data.len()];
-
-        eprintln!("slice.len() = {:#?}", slice.len());
-
-        for (idx, element) in slice.iter().enumerate() {
-            println!("slice[{idx}]  = {element:?}");
-        }
     }
 
     #[test]
@@ -741,10 +733,9 @@             vec![1.0, 0.0, 0.0, 0.0],
         ];
         let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(points.len())));
+        let hw_counter = HardwareCounterCell::new();
         let mut storage = open_memmap_vector_storage(dir.path(), 4, Distance::Dot).unwrap();
         let borrowed_id_tracker = id_tracker.borrow_mut();
-
-        let hw_counter = HardwareCounterCell::new();
 
         {
             let dir2 = Builder::new().prefix("db_dir").tempdir().unwrap();
@@ -754,7 +745,7 @@                 DB_VECTOR_CF,
                 4,
                 Distance::Dot,
-                &AtomicBool::new(false),
+                &hw_counter,
             )
             .unwrap();
             {
@@ -770,46 +761,43 @@                 let deleted = storage2.is_deleted_vector(i);
                 (vector, deleted)
             });
-            storage.update_from(&mut iter, &Default::default()).unwrap();
+            storage
+                .update_from(&mut iter, &Default::default())
+                .unwrap();
         }
 
         let config: QuantizationConfig = ScalarQuantizationConfig {
-            r#type: Default::default(),
             quantile: None,
             always_ram: None,
-        }
-        .into();
+        }.into();
 
         let stopped = Arc::new(AtomicBool::new(false));
         let hardware_counter = HardwareCounterCell::new();
         let quantized_vectors =
             QuantizedVectors::create(&storage, &config, dir.path(), 1, &stopped).unwrap();
 
-        let query: QueryVector = [0.5, 0.5, 0.5, 0.5].into();
-
-        let scorer_quant = quantized_vectors
-            .raw_scorer(
-                query.clone(),
-                borrowed_id_tracker.deleted_point_bitslice(),
-                storage.deleted_vector_bitslice(),
-                hardware_counter,
-            )
-            .unwrap();
+        let query: QueryVector = [-0.5, -0.5, -0.5, -0.5].into();
+
+        let scorer_quant = quantized_vectors.raw_scorer(
+            query.clone(),
+            borrowed_id_tracker.deleted_point_bitslice(),
+            storage.deleted_vector_bitslice(),
+            hardware_counter,
+        );
 
         let scorer_orig = new_raw_scorer_for_test(
             query.clone(),
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
 
         for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
+            let quant = scorer_quant.score_point(i, &stopped).unwrap();
+            let orig = scorer_orig.score_point(i, &DEFAULT_STOPPED).unwrap();
             assert!((orig - quant).abs() < 0.15);
 
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
+            let quant = scorer_quant.score_internal(0, i, &stopped).unwrap();
+            let orig = scorer_orig.score_internal(0, i, &DEFAULT_STOPPED).unwrap();
             assert!((orig - quant).abs() < 0.15);
         }
 
@@ -821,29 +809,44 @@         assert_eq!(files, storage.files());
         assert_eq!(quantization_files, quantized_vectors.files());
         let hardware_counter = HardwareCounterCell::new();
-        let scorer_quant = quantized_vectors
-            .raw_scorer(
-                query.clone(),
-                borrowed_id_tracker.deleted_point_bitslice(),
-                storage.deleted_vector_bitslice(),
-                hardware_counter,
-            )
-            .unwrap();
+        let scorer_quant = quantized_vectors.raw_scorer(
+            query.clone(),
+            borrowed_id_tracker.deleted_point_bitslice(),
+            storage.deleted_vector_bitslice(),
+            hardware_counter,
+        );
+
         let scorer_orig = new_raw_scorer_for_test(
             query,
             &storage,
             borrowed_id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+        );
 
         for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
+            let quant = scorer_quant.score_point(i, &stopped).unwrap();
+            let orig = scorer_orig.score_point(i, &DEFAULT_STOPPED).unwrap();
             assert!((orig - quant).abs() < 0.15);
 
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
+            let quant = scorer_quant.score_internal(0, i, &stopped).unwrap();
+            let orig = scorer_orig.score_internal(0, i, &DEFAULT_STOPPED).unwrap();
             assert!((orig - quant).abs() < 0.15);
         }
     }
+
+    #[test]
+    fn test_casts() {
+        let data: DenseVector = vec![0.42, 0.069, 333.1, 100500.];
+
+        let raw_data = transmute_to_u8_slice(&data);
+
+        eprintln!("raw_data.len() = {:#?}", raw_data.len());
+
+        let mut arr: [VectorElementType; 4] = unsafe { transmute(raw_data[0..std::mem::size_of::<[VectorElementType; 4]>()]) };
+
+        eprintln!("slice.len() = {:#?}", arr.len());
+
+        for (idx, element) in arr.iter().enumerate() {
+            println!("slice[{idx}]  = {element:?}");
+        }
+    }
 }