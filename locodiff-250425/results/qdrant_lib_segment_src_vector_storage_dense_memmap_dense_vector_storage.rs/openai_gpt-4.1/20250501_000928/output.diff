--- qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual)@@ -179,6 +179,10 @@         self.mmap_store.as_ref().unwrap().num_vectors
     }
 
+    fn available_vector_count(&self) -> usize {
+        self.mmap_store.as_ref().unwrap().num_vectors
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         self.get_vector_opt(key).expect("vector not found")
     }
@@ -309,7 +313,7 @@     use crate::types::{PointIdType, QuantizationConfig, ScalarQuantizationConfig};
     use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
     use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
-    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
+    use crate::vector_storage::{new_raw_scorer_for_test, DEFAULT_STOPPED};
 
     #[test]
     fn test_basic_persistence() {
@@ -624,9 +628,6 @@         let closest = scorer
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
             .unwrap();
-
-        drop(scorer);
-
         assert_eq!(closest.len(), 3, "must have 3 vectors, 2 are deleted");
         assert_eq!(closest[0].idx, 0);
         assert_eq!(closest[1].idx, 1);
@@ -802,7 +803,6 @@             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-
         for i in 0..5 {
             let quant = scorer_quant.score_point(i);
             let orig = scorer_orig.score_point(i);
