
index e66df55c..2a294b83 100644
--- a/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected):tmp/tmp8pltgq1r_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual):tmp/tmp3twdy2o1_actual.txt	
@@ -1,5 +1,5 @@
 use std::borrow::Cow;
-use std::fs::{File, OpenOptions, create_dir_all};
+use std::fs::{create_dir_all, File, OpenOptions};
 use std::io::{self, Write};
 use std::mem::MaybeUninit;
 use std::ops::Range;
@@ -12,8 +12,8 @@ use common::types::PointOffsetType;
 use memory::fadvise::clear_disk_cache;
 use memory::mmap_ops;
 
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::common::Flusher;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{VectorElementType, VectorRef};
@@ -302,14 +302,14 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::data_types::vectors::{DenseVector, QueryVector};
     use crate::fixtures::payload_context_fixture::FixtureIdTracker;
     use crate::id_tracker::id_tracker_base::IdTracker;
     use crate::types::{PointIdType, QuantizationConfig, ScalarQuantizationConfig};
     use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
+    use crate::vector_storage::{new_raw_scorer_for_test, DEFAULT_STOPPED};
     use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
-    use crate::vector_storage::{DEFAULT_STOPPED, new_raw_scorer_for_test};
 
     #[test]
     fn test_basic_persistence() {
@@ -501,7 +501,6 @@ mod tests {
             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-
         let closest = scorer
             .peek_top_iter(&mut [0, 1, 2, 3, 4].iter().cloned(), 5, &DEFAULT_STOPPED)
             .unwrap();
@@ -699,7 +698,7 @@ mod tests {
         .unwrap();
 
         let mut res = vec![ScoredPointOffset { idx: 0, score: 0. }; query_points.len()];
-        let res_count = scorer.score_points(&query_points, &mut res);
+        let res_count = scorer.score_points(&query_points, &mut res).unwrap();
         res.resize(res_count, ScoredPointOffset { idx: 0, score: 0. });
 
         assert_eq!(res.len(), 3);
@@ -804,12 +803,12 @@ mod tests {
         .unwrap();
 
         for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
+            let quant = scorer_quant.score_point(i).unwrap();
+            let orig = scorer_orig.score_point(i).unwrap();
             assert!((orig - quant).abs() < 0.15);
 
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
+            let quant = scorer_quant.score_internal(0, i).unwrap();
+            let orig = scorer_orig.score_internal(0, i).unwrap();
             assert!((orig - quant).abs() < 0.15);
         }
 
@@ -837,12 +836,12 @@ mod tests {
         .unwrap();
 
         for i in 0..5 {
-            let quant = scorer_quant.score_point(i);
-            let orig = scorer_orig.score_point(i);
+            let quant = scorer_quant.score_point(i).unwrap();
+            let orig = scorer_orig.score_point(i).unwrap();
             assert!((orig - quant).abs() < 0.15);
 
-            let quant = scorer_quant.score_internal(0, i);
-            let orig = scorer_orig.score_internal(0, i);
+            let quant = scorer_quant.score_internal(0, i).unwrap();
+            let orig = scorer_orig.score_internal(0, i).unwrap();
             assert!((orig - quant).abs() < 0.15);
         }
     }
