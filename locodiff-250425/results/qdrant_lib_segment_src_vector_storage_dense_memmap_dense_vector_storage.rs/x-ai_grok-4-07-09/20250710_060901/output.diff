
index e66df55cf..f31a4137b 100644
--- a/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_expectedoutput.txt (expected):tmp/tmp8k4990sj_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_dense_memmap_dense_vector_storage.rs_extracted.txt (actual):tmp/tmpjg11ozmb_actual.txt	
@@ -20,7 +20,7 @@ use crate::data_types::vectors::{VectorElementType, VectorRef};
 use crate::types::{Distance, VectorStorageDatatype};
 use crate::vector_storage::common::get_async_scorer;
 use crate::vector_storage::dense::mmap_dense_vectors::MmapDenseVectors;
-use crate::vector_storage::{DenseVectorStorage, VectorStorage, VectorStorageEnum};
+use crate::vector_storage::{DenseVectorStorage, VectorStorage, VectorStorageEnum, DEFAULT_STOPPED};
 
 const VECTORS_PATH: &str = "matrix.dat";
 const DELETED_PATH: &str = "deleted.dat";
@@ -55,6 +55,17 @@ impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
         clear_disk_cache(&self.deleted_path)?;
         Ok(())
     }
+
+    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
+        self.mmap_store.as_ref().unwrap()
+    }
+
+    pub fn has_async_reader(&self) -> bool {
+        self.mmap_store
+            .as_ref()
+            .map(|x| x.has_async_reader())
+            .unwrap_or(false)
+    }
 }
 
 pub fn open_memmap_vector_storage(
@@ -126,19 +137,6 @@ fn open_memmap_vector_storage_with_async_io_impl<T: PrimitiveVectorElement>(
     }))
 }
 
-impl<T: PrimitiveVectorElement> MemmapDenseVectorStorage<T> {
-    pub fn get_mmap_vectors(&self) -> &MmapDenseVectors<T> {
-        self.mmap_store.as_ref().unwrap()
-    }
-
-    pub fn has_async_reader(&self) -> bool {
-        self.mmap_store
-            .as_ref()
-            .map(|x| x.has_async_reader())
-            .unwrap_or(false)
-    }
-}
-
 impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for MemmapDenseVectorStorage<T> {
     fn vector_dim(&self) -> usize {
         self.mmap_store.as_ref().unwrap().dim
@@ -802,7 +800,6 @@ mod tests {
             borrowed_id_tracker.deleted_point_bitslice(),
         )
         .unwrap();
-
         for i in 0..5 {
             let quant = scorer_quant.score_point(i);
             let orig = scorer_orig.score_point(i);
