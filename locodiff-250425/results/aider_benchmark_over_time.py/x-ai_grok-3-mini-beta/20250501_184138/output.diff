--- aider_benchmark_over_time.py_expectedoutput.txt (expected)+++ aider_benchmark_over_time.py_extracted.txt (actual)@@ -1,12 +1,10 @@-from dataclasses import dataclass
-from datetime import date
-from typing import Dict, List, Tuple
-
 import matplotlib.pyplot as plt
 import yaml
 from imgcat import imgcat
 from matplotlib import rc
-
+from dataclasses import dataclass
+from typing import List, Tuple, Dict
+from datetime import date
 
 @dataclass
 class ModelData:
@@ -62,10 +60,9 @@             return "Mistral"
         return model
 
-
 class BenchmarkPlotter:
-    LABEL_FONT_SIZE = 16
-
+    LABEL_FONT_SIZE = 16  # Font size for scatter plot dot labels
+    
     def __init__(self):
         self.setup_plot_style()
 
@@ -78,7 +75,7 @@     def load_data(self, yaml_file: str) -> List[ModelData]:
         with open(yaml_file, "r") as file:
             data = yaml.safe_load(file)
-
+            
         models = []
         for entry in data:
             if "released" in entry and "pass_rate_2" in entry:
@@ -111,17 +108,17 @@             sorted_group = sorted(group, key=lambda x: x.release_date)
             dates = [m.release_date for m in sorted_group]
             rates = [m.pass_rate for m in sorted_group]
-
+            
             # Plot line
             ax.plot(dates, rates, c=color, alpha=0.5, linewidth=1)
-
+            
             # Plot points
             ax.scatter(dates, rates, c=color, alpha=0.5, s=120)
-
+            
             # Add label for first point
             first_model = sorted_group[0]
             ax.annotate(
-                first_model.legend_label,
+                first_model.legend_label, 
                 (first_model.release_date, first_model.pass_rate),
                 xytext=(10, 5),
                 textcoords="offset points",
@@ -152,17 +149,15 @@         self.set_labels_and_style(ax)
         self.save_and_display(fig)
 
-
 def main():
     plotter = BenchmarkPlotter()
     models = plotter.load_data("aider/website/_data/edit_leaderboard.yml")
-
+    
     # Print release dates and model names
     for model in sorted(models, key=lambda x: x.release_date):
         print(f"{model.release_date}: {model.name}")
-
+        
     plotter.plot("aider/website/_data/edit_leaderboard.yml")
-
 
 if __name__ == "__main__":
     main()