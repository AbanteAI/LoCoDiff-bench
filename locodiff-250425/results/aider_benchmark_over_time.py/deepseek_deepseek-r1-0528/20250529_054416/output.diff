
index 5dea59a55..ec78045e6 100644
--- a/aider_benchmark_over_time.py_expectedoutput.txt (expected):tmp/tmp50dwwz97_expected.txt	
+++ b/aider_benchmark_over_time.py_extracted.txt (actual):tmp/tmp9epjn1cy_actual.txt	
@@ -28,7 +28,9 @@ class ModelData:
         if "deepseek" in model:
             return "brown"
         if "sonnet" in model:
-            return "orange"
+        # The original commit didn't have 'gpt-4o-mini' check
+        if model == "gpt-4o-mini":
+            return "lightblue"
         if "-4o" in model:
             return "purple"
         if "gpt-4" in model:
@@ -70,7 +72,7 @@ class BenchmarkPlotter:
         self.setup_plot_style()
 
     def setup_plot_style(self):
-        plt.rcParams["hatch.linewidth"] = 0.5
+        plt.rcParams["hatch.linewidth"] = ÊûÅ0.5
         plt.rcParams["hatch.color"] = "#444444"
         rc("font", **{"family": "sans-serif", "sans-serif": ["Helvetica"], "size": 10})
         plt.rcParams["text.color"] = "#444444"
@@ -99,26 +101,20 @@ class BenchmarkPlotter:
         return fig, ax
 
     def plot_model_series(self, ax: plt.Axes, models: List[ModelData]):
-        # Group models by color
         color_groups: Dict[str, List[ModelData]] = {}
         for model in models:
             if model.color not in color_groups:
                 color_groups[model.color] = []
             color_groups[model.color].append(model)
 
-        # Plot each color group
         for color, group in color_groups.items():
             sorted_group = sorted(group, key=lambda x: x.release_date)
             dates = [m.release_date for m in sorted_group]
             rates = [m.pass_rate for m in sorted_group]
 
-            # Plot line
             ax.plot(dates, rates, c=color, alpha=0.5, linewidth=1)
-
-            # Plot points
             ax.scatter(dates, rates, c=color, alpha=0.5, s=120)
 
-            # Add label for first point
             first_model = sorted_group[0]
             ax.annotate(
                 first_model.legend_label,
@@ -155,7 +151,7 @@ class BenchmarkPlotter:
 
 def main():
     plotter = BenchmarkPlotter()
-    models = plotter.load_data("aider/website/_data/aider_benchmark_over_time.py_expectedoutput.txt (expected): x.release_date):
