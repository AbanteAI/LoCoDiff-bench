--- aider_benchmark_over_time.py_expectedoutput.txt (expected)+++ aider_benchmark_over_time.py_extracted.txt (actual)@@ -99,26 +99,20 @@         return fig, ax
 
     def plot_model_series(self, ax: plt.Axes, models: List[ModelData]):
-        # Group models by color
         color_groups: Dict[str, List[ModelData]] = {}
         for model in models:
             if model.color not in color_groups:
                 color_groups[model.color] = []
             color_groups[model.color].append(model)
 
-        # Plot each color group
         for color, group in color_groups.items():
             sorted_group = sorted(group, key=lambda x: x.release_date)
             dates = [m.release_date for m in sorted_group]
             rates = [m.pass_rate for m in sorted_group]
 
-            # Plot line
             ax.plot(dates, rates, c=color, alpha=0.5, linewidth=1)
-
-            # Plot points
             ax.scatter(dates, rates, c=color, alpha=0.5, s=120)
 
-            # Add label for first point
             first_model = sorted_group[0]
             ax.annotate(
                 first_model.legend_label,
@@ -133,7 +127,9 @@     def set_labels_and_style(self, ax: plt.Axes):
         ax.set_xlabel("Model release date", fontsize=18, color="#555")
         ax.set_ylabel(
-            "Aider code editing benchmark,\npercent completed correctly", fontsize=18, color="#555"
+            "Aider code editing benchmark,\npercent completed correctly",
+            fontsize=18,
+            color="#555",
         )
         ax.set_title("LLM code editing skill by model release date", fontsize=20)
         ax.set_ylim(30, 90)
@@ -157,7 +153,6 @@     plotter = BenchmarkPlotter()
     models = plotter.load_data("aider/website/_data/edit_leaderboard.yml")
 
-    # Print release dates and model names
     for model in sorted(models, key=lambda x: x.release_date):
         print(f"{model.release_date}: {model.name}")
 
