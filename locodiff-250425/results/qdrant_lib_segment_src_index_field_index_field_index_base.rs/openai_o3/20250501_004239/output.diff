
index dd66b0d0..30be58cc 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpmyjf9jm5_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpfyiilk_f_actual.txt	
@@ -1,13 +1,14 @@
 use std::fmt::Formatter;
 use std::path::PathBuf;
 
+use common::counter::hardware_accumulator::HwMeasurementAcc;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
 use super::bool_index::simple_bool_index::BoolIndexBuilder;
+use super::bool_index::BoolIndex;
 use super::facet_index::FacetIndexEnum;
 use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
 use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
@@ -16,8 +17,8 @@ use super::map_index::{MapIndex, MapIndexBuilder, MapIndexMmapBuilder};
 use super::numeric_index::{
     NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, StreamRange,
 };
-use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::order_by::OrderValue;
 use crate::index::field_index::geo_index::GeoMapIndex;
 use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
@@ -120,8 +121,6 @@ pub trait ValueIndexer {
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
 }
 
-/// Common interface for all possible types of field indexes
-/// Enables polymorphism on field indexes
 pub enum FieldIndex {
     IntIndex(NumericIndex<IntPayloadType, IntPayloadType>),
     DatetimeIndex(NumericIndex<IntPayloadType, DateTimePayloadType>),
@@ -157,7 +156,6 @@ impl std::fmt::Debug for FieldIndex {
 impl FieldIndex {
     /// Try to check condition for a payload given a field index.
     /// Required because some index parameters may influence the condition checking logic.
-    /// For example, full text index may have different tokenizers.
     ///
     /// Returns `None` if there is no special logic for the given index
     /// returns `Some(true)` if condition is satisfied
@@ -197,8 +195,8 @@ impl FieldIndex {
 
     fn get_payload_field_index(&self) -> &dyn PayloadFieldIndex {
         match self {
-            FieldIndex::IntIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::IntIndex(payload_field_index) => payload_field_index,
+            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index,
             FieldIndex::IntMapIndex(payload_field_index) => payload_field_index,
             FieldIndex::KeywordIndex(payload_field_index) => payload_field_index,
             FieldIndex::FloatIndex(payload_field_index) => payload_field_index.inner(),
