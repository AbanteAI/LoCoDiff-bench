--- qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual)@@ -22,7 +22,7 @@ use crate::index::field_index::geo_index::GeoMapIndex;
 use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
 use crate::index::field_index::numeric_index::NumericIndexInner;
-use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
+use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition}; 
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
     DateTimePayloadType, FieldCondition, FloatPayloadType, IntPayloadType, Match, MatchText,
@@ -326,8 +326,8 @@ 
     pub fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
         match self {
-            FieldIndex::IntIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::DatetimeIndex(index) => index.mut_inner().remove_point(point_id),
+            FieldIndex::IntIndex(index) => index.remove_point(point_id),
+            FieldIndex::DatetimeIndex(index) => index.remove_point(point_id),
             FieldIndex::IntMapIndex(index) => index.remove_point(point_id),
             FieldIndex::KeywordIndex(index) => index.remove_point(point_id),
             FieldIndex::FloatIndex(index) => index.mut_inner().remove_point(point_id),
@@ -588,70 +588,4 @@             Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
             Self::DatetimeIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
             Self::DatetimeMmapIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::IntMapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::IntMapMmapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::KeywordIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::KeywordMmapIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::FloatIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::FloatMmapIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::GeoIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::GeoMmapIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::BoolIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize()?),
-            Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize()?),
-            Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
-        })
-    }
-}
-
-pub enum NumericFieldIndex<'a> {
-    IntIndex(&'a NumericIndexInner<IntPayloadType>),
-    FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
-}
-
-impl<'a> StreamRange<OrderValue> for NumericFieldIndex<'a> {
-    fn stream_range(
-        &self,
-        range: &RangeInterface,
-    ) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-        }
-    }
-}
-
-impl<'a> NumericFieldIndex<'a> {
-    pub fn get_ordering_values(
-        &self,
-        idx: PointOffsetType,
-    ) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Int),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Float),
-            ),
-        }
-    }
-}+            Self::IntMapIndex(index) => FieldIndex::IntMap