
index dd66b0d0b..490089660 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpb3mw31lm_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpgd948vga_actual.txt	
@@ -561,97 +561,4 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::IntIndex(index) => index.add_point(id, payload, hw_counter),
             Self::IntMmapIndex(index) => index.add_point(id, payload, hw_counter),
             Self::DatetimeIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::DatetimeMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextMmapIndex(builder) => {
-                FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter)
-            }
-            Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::NullIndex(index) => index.add_point(id, payload, hw_counter),
-        }
-    }
-
-    fn finalize(self) -> OperationResult<FieldIndex> {
-        Ok(match self {
-            Self::IntIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::DatetimeIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::DatetimeMmapIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::IntMapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::IntMapMmapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::KeywordIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::KeywordMmapIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::FloatIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::FloatMmapIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::GeoIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::GeoMmapIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::BoolIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize()?),
-            Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize()?),
-            Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
-        })
-    }
-}
-
-pub enum NumericFieldIndex<'a> {
-    IntIndex(&'a NumericIndexInner<IntPayloadType>),
-    FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
-}
-
-impl<'a> StreamRange<OrderValue> for NumericFieldIndex<'a> {
-    fn stream_range(
-        &self,
-        range: &RangeInterface,
-    ) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-        }
-    }
-}
-
-impl<'a> NumericFieldIndex<'a> {
-    pub fn get_ordering_values(
-        &self,
-        idx: PointOffsetType,
-    ) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Int),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Float),
-            ),
-        }
-    }
-}
\ No newline at end of file
+            SelfÊûÅ
\ No newline at end of file
