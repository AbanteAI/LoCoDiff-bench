
index dd66b0d0b..286cc24e6 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmprjn8dwbv_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpfx77bhli_actual.txt	
@@ -5,7 +5,6 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
 use super::bool_index::simple_bool_index::BoolIndexBuilder;
 use super::facet_index::FacetIndexEnum;
@@ -21,7 +20,6 @@ use crate::common::operation_error::OperationResult;
 use crate::data_types::order_by::OrderValue;
 use crate::index::field_index::geo_index::GeoMapIndex;
 use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
-use crate::index::field_index::numeric_index::NumericIndexInner;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
@@ -30,7 +28,6 @@ use crate::types::{
 };
 
 pub trait PayloadFieldIndex {
-    /// Return number of points with at least one value indexed in here
     fn count_indexed_points(&self) -> usize;
 
     /// Load index from disk.
@@ -44,8 +41,6 @@ pub trait PayloadFieldIndex {
 
     fn files(&self) -> Vec<PathBuf>;
 
-    /// Get iterator over points fitting given `condition`
-    /// Return `None` if condition does not match the index type
     fn filter<'a>(
         &'a self,
         condition: &'a FieldCondition,
@@ -87,7 +82,7 @@ pub trait ValueIndexer {
     /// Try to extract index-able values from payload `Value`, even if it is an array
     fn get_values(value: &Value) -> Vec<Self::ValueType> {
         match value {
-            Value::Array(values) => values.iter().filter_map(|x| Self::get_value(x)).collect(),
+            Value::Array(values) => values.iter().filter_map(Self::get_value).collect(),
             _ => Self::get_value(value).map(|x| vec![x]).unwrap_or_default(),
         }
     }
@@ -104,7 +99,7 @@ pub trait ValueIndexer {
         for value in payload.iter() {
             match value {
                 Value::Array(values) => {
-                    flatten_values.extend(values.iter().filter_map(|x| Self::get_value(x)));
+                    flatten_values.extend(values.iter().filter_map(Self::get_value));
                 }
                 _ => {
                     if let Some(x) = Self::get_value(value) {
@@ -129,8 +124,8 @@ pub enum FieldIndex {
     KeywordIndex(MapIndex<str>),
     FloatIndex(NumericIndex<FloatPayloadType, FloatPayloadType>),
     GeoIndex(GeoMapIndex),
-    FullTextIndex(FullTextIndex),
     BoolIndex(BoolIndex),
+    FullTextIndex(FullTextIndex),
     UuidIndex(NumericIndex<UuidIntType, UuidPayloadType>),
     UuidMapIndex(MapIndex<UuidIntType>),
     NullIndex(MmapNullIndex),
@@ -243,10 +238,6 @@ impl FieldIndex {
         }
     }
 
-    pub fn count_indexed_points(&self) -> usize {
-        self.get_payload_field_index().count_indexed_points()
-    }
-
     pub fn flusher(&self) -> Flusher {
         self.get_payload_field_index().flusher()
     }
@@ -268,8 +259,7 @@ impl FieldIndex {
         condition: &FieldCondition,
         hw_counter: &HardwareCounterCell,
     ) -> Option<CardinalityEstimation> {
-        self.get_payload_field_index()
-            .estimate_cardinality(condition, hw_counter)
+        self.get_payload_field_index().estimate_cardinality(condition, hw_counter)
     }
 
     pub fn payload_blocks(
@@ -277,8 +267,11 @@ impl FieldIndex {
         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        self.get_payload_field_index()
-            .payload_blocks(threshold, key)
+        self.get_payload_field_index().payload_blocks(threshold, key)
+    }
+
+    pub fn count_indexed_points(&self) -> usize {
+        self.get_payload_field_index().count_indexed_points()
     }
 
     pub fn add_point(
@@ -326,11 +319,11 @@ impl FieldIndex {
 
     pub fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
         match self {
-            FieldIndex::IntIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::DatetimeIndex(index) => index.mut_inner().remove_point(point_id),
+            FieldIndex::IntIndex(index) => index.remove_point(point_id),
+            FieldIndex::DatetimeIndex(index) => index.remove_point(point_id),
             FieldIndex::IntMapIndex(index) => index.remove_point(point_id),
             FieldIndex::KeywordIndex(index) => index.remove_point(point_id),
-            FieldIndex::FloatIndex(index) => index.mut_inner().remove_point(point_id),
+            FieldIndex::FloatIndex(index) => index.remove_point(point_id),
             FieldIndex::GeoIndex(index) => index.remove_point(point_id),
             FieldIndex::BoolIndex(index) => index.remove_point(point_id),
             FieldIndex::FullTextIndex(index) => index.remove_point(point_id),
@@ -388,270 +381,386 @@ impl FieldIndex {
         }
     }
 
-    pub fn as_numeric(&self) -> Option<NumericFieldIndex> {
-        match self {
-            FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
-            FieldIndex::DatetimeIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
-            FieldIndex::FloatIndex(index) => Some(NumericFieldIndex::FloatIndex(index.inner())),
-            FieldIndex::IntMapIndex(_)
-            | FieldIndex::KeywordIndex(_)
-            | FieldIndex::GeoIndex(_)
-            | FieldIndex::BoolIndex(_)
-            | FieldIndex::UuidMapIndex(_)
-            | FieldIndex::UuidIndex(_)
-            | FieldIndex::FullTextIndex(_)
-            | FieldIndex::NullIndex(_) => None,
-        }
+    pub fn as_numeric(&self)ตั้ง -> Option<NumericFieldIndex> {
+
+match self {
+
+FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
+
+FieldIndex::DatetimeIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
+
+FieldIndex::FloatIndex(index) => Some(NumericFieldIndex::FloatIndex(index.inner())),
+
+_ => None,
+
+}
+
     }
 
     pub fn as_facet_index(&self) -> Option<FacetIndexEnum> {
-        match self {
-            FieldIndex::KeywordIndex(index) => Some(FacetIndexEnum::Keyword(index)),
-            FieldIndex::IntMapIndex(index) => Some(FacetIndexEnum::Int(index)),
-            FieldIndex::UuidMapIndex(index) => Some(FacetIndexEnum::Uuid(index)),
-            FieldIndex::BoolIndex(index) => Some(FacetIndexEnum::Bool(index)),
-            FieldIndex::UuidIndex(_)
-            | FieldIndex::IntIndex(_)
-            | FieldIndex::DatetimeIndex(_)
-            | FieldIndex::FloatIndex(_)
-            | FieldIndex::GeoIndex(_)
-            | FieldIndex::FullTextIndex(_)
-            | FieldIndex::NullIndex(_) => None,
-        }
+
+match self {
+
+FieldIndex::KeywordIndex(index) => Some(FacetIndexEnum::Keyword(index)),
+
+FieldIndex::IntMapIndex(index) => Some(FacetIndexEnum::Int(index)),
+
+FieldIndex::UuidMapIndex(index) => Some(FacetIndexEnum::Uuid(index)),
+
+FieldIndex::BoolIndex(index) => Some(FacetIndexEnum::Bool(index)),
+
+_ => None,
+
+}
+
     }
 
     pub fn is_on_disk(&self) -> bool {
-        match self {
-            FieldIndex::IntIndex(index) => index.is_on_disk(),
-            FieldIndex::DatetimeIndex(index) => index.is_on_disk(),
-            FieldIndex::IntMapIndex(index) => index.is_on_disk(),
-            FieldIndex::KeywordIndex(index) => index.is_on_disk(),
-            FieldIndex::FloatIndex(index) => index.is_on_disk(),
-            FieldIndex::GeoIndex(index) => index.is_on_disk(),
-            FieldIndex::BoolIndex(index) => index.is_on_disk(),
-            FieldIndex::FullTextIndex(index) => index.is_on_disk(),
-            FieldIndex::UuidIndex(index) => index.is_on_disk(),
-            FieldIndex::UuidMapIndex(index) => index.is_on_disk(),
-            FieldIndex::NullIndex(index) => index.is_on_disk(),
-        }
-    }
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            FieldIndex::IntIndex(index) => index.populate(),
-            FieldIndex::DatetimeIndex(index) => index.populate(),
-            FieldIndex::IntMapIndex(index) => index.populate(),
-            FieldIndex::KeywordIndex(index) => index.populate(),
-            FieldIndex::FloatIndex(index) => index.populate(),
-            FieldIndex::GeoIndex(index) => index.populate(),
-            FieldIndex::BoolIndex(index) => index.populate(),
-            FieldIndex::FullTextIndex(index) => index.populate(),
-            FieldIndex::UuidIndex(index) => index.populate(),
-            FieldIndex::UuidMapIndex(index) => index.populate(),
-            FieldIndex::NullIndex(index) => index.populate(),
-        }
-    }
+match self {
+
+FieldIndex::IntIndex(index) => index.is_on_disk(),
+
+FieldIndex::DatetimeIndex(index) => index.is_on_disk(),
+
+FieldIndex::IntMapIndex(index) => index.is_on_disk(),
+
+FieldIndex::KeywordIndex(index) => index.is_on_disk(),
+
+FieldIndex::FloatIndex(index) => index.is_on_disk(),
+
+FieldIndex::GeoIndex(index) => index.is_on_disk(),
+
+FieldIndex::BoolIndex(index) => index.is_on_disk(),
+
+FieldIndex::FullTextIndex(index) => index.is_on_disk(),
+
+FieldIndex::UuidIndex(index) => index.is_on_disk(),
+
+FieldIndex::UuidMapIndex(index) => index.is_on_disk(),
+
+FieldIndex::NullIndex(index) => index.is_on_disk(),
+
+}
+
+}
+
+pub fn populate(&self) -> OperationResult< ()> {
+
+match self {
+
+FieldIndex::IntIndex(index) => index.populate(),
+
+FieldIndex::DatetimeIndex(index) => index.populate(),
+
+FieldIndex::IntMapIndex Yuan (index) => index.populate(),
+
+FieldIndex::KeywordIndex(index) => index.populate(),
+
+FieldIndex::FloatIndex(index) => index.populate(),
+
+FieldIndex::GeoIndex(index) => index.populate(),
+
+FieldIndex::BoolIndex(index) => index.populate(),
+
+FieldIndex::FullTextIndex(index) => index.populate(),
+
+FieldIndex::UuidIndex(index) => index.populate(),
+
+FieldIndex::UuidMapIndex(index) => index.populate(),
+
+FieldIndex::NullIndex(index) => index.populate(),
+
+}
+
+}
+
+pub fn clear_cache(&self) -> OperationResult< ()> {
+
+match self {
+
+FieldIndex::IntIndex(index) => index.clear_cache(),
+
+FieldIndex::DatetimeIndex(index) => index.clear_cache(),
+
+FieldIndex::IntMapIndex(index) => index.clear_cache(),
+
+FieldIndex::KeywordIndex(index) => index.clear_cache(),
+
+FieldIndex::FloatIndex(index) => index.clear_cache(),
+
+FieldIndex::GeoIndex(index) => index.clear_cache(),
+
+FieldIndex::BoolIndex(index) => index.clear_cache(),
+
+FieldIndex::FullTextIndex(index) => index.clear_cache(),
+
+FieldIndex::UuidIndex(index) => index.clear_cache(),
+
+FieldIndex::UuidMapIndex(index) => index.clear_cache(),
+
+FieldIndex::NullIndex(index) => index.clear_cache(),
+
+}
+
+}
 
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        match self {
-            FieldIndex::IntIndex(index) => index.clear_cache(),
-            FieldIndex::DatetimeIndex(index) => index.clear_cache(),
-            FieldIndex::IntMapIndex(index) => index.clear_cache(),
-            FieldIndex::KeywordIndex(index) => index.clear_cache(),
-            FieldIndex::FloatIndex(index) => index.clear_cache(),
-            FieldIndex::GeoIndex(index) => index.clear_cache(),
-            FieldIndex::BoolIndex(index) => index.clear_cache(),
-            FieldIndex::FullTextIndex(index) => index.clear_cache(),
-            FieldIndex::UuidIndex(index) => index.clear_cache(),
-            FieldIndex::UuidMapIndex(index) => index.clear_cache(),
-            FieldIndex::NullIndex(index) => index.clear_cache(),
-        }
-    }
 }
 
-/// Common interface for all index builders.
 pub trait FieldIndexBuilderTrait {
-    /// The resulting type of the index.
-    type FieldIndexType;
 
-    /// Start building the index, e.g. create a database column or a directory.
-    /// Expected to be called exactly once before any other method.
-    fn init(&mut self) -> OperationResult<()>;
+type FieldIndexType;
 
-    fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
+fn init(&mut self) -> OperationResult< ()>;
 
-    fn finalize(self) -> OperationResult<Self::FieldIndexType>;
+fn add_point(&mut self, id: PointOffsetType, payload: &[&Value], hw_counter: &HardwareCounterCell) -> OperationResult< ()>;
+
+fn finalize(self) -> OperationResult<Self::FieldIndexType>;
+
+#[cfg(test)]
+
+fn make_empty(mut self) -> OperationResult<Self::FieldIndexType> where Self: Sized {
+
+self.init()?;
+
+self.finalize()
+
+}
 
-    /// Create an empty index for testing purposes.
-    #[cfg(test)]
-    fn make_empty(mut self) -> OperationResult<Self::FieldIndexType>
-    where
-        Self: Sized,
-    {
-        self.init()?;
-        self.finalize()
-    }
 }
 
-/// Builders for all index types
 pub enum FieldIndexBuilder {
-    IntIndex(NumericIndexBuilder<IntPayloadType, IntPayloadType>),
-    IntMmapIndex(NumericIndexMmapBuilder<IntPayloadType, IntPayloadType>),
-    DatetimeIndex(NumericIndexBuilder<IntPayloadType, DateTimePayloadType>),
-    DatetimeMmapIndex(NumericIndexMmapBuilder<IntPayloadType, DateTimePayloadType>),
-    IntMapIndex(MapIndexBuilder<IntPayloadType>),
-    IntMapMmapIndex(MapIndexMmapBuilder<IntPayloadType>),
-    KeywordIndex(MapIndexBuilder<str>),
-    KeywordMmapIndex(MapIndexMmapBuilder<str>),
-    FloatIndex(NumericIndexBuilder<FloatPayloadType, FloatPayloadType>),
-    FloatMmapIndex(NumericIndexMmapBuilder<FloatPayloadType, FloatPayloadType>),
-    GeoIndex(GeoMapIndexBuilder),
-    GeoMmapIndex(GeoMapIndexMmapBuilder),
-    FullTextIndex(FullTextIndexBuilder),
-    FullTextMmapIndex(FullTextMmapIndexBuilder),
-    BoolIndex(BoolIndexBuilder),
-    BoolMmapIndex(MmapBoolIndexBuilder),
-    UuidIndex(MapIndexBuilder<UuidIntType>),
-    UuidMmapIndex(MapIndexMmapBuilder<UuidIntType>),
-    NullIndex(MmapNullIndexBuilder),
+
+IntIndex(NumericIndexBuilder<IntPayloadType, IntPayloadType>),
+
+IntMmapIndex(NumericIndexMmapBuilder<IntPayloadType, IntPayloadType>),
+
+DatetimeIndex(NumericIndexBuilder<IntPayloadType, DateTimePayloadType>),
+
+DatetimeMmapIndex(NumericIndexMmapBuilder<IntPayloadType, DateTimePayloadType>),
+
+IntMapIndex(MapIndexBuilder<IntPayloadType>),
+
+IntMapMmapIndex(MapIndexMmapBuilder<IntPayloadType>),
+
+KeywordIndex(MapIndexBuilder<str>),
+
+Keyword MmapIndex(MapIndexMmapBuilder<str>),
+
+FloatIndex(NumericIndexBuilder<FloatPayloadType, FloatPayloadType>),
+
+FloatMmapIndex(NumericIndexMmapBuilder<FloatPayloadType, FloatPayloadType>),
+
+GeoIndex(GeoMapIndexBuilder),
+
+GeoMmapIndex(GeoMapIndexMmapBuilder),
+
+BoolIndex(BoolIndexBuilder),
+
+BoolMmapIndex(MmapBoolIndexBuilder),
+
+FullTextIndex(FullTextIndexBuilder),
+
+FullTextMmapIndex(FullTextMmapIndexBuilder),
+
+UuidIndex(MapIndexBuilder<UuidIntType>),
+
+UuidMmapIndex(MapIndexMmapBuilder<UuidIntType>),
+
+NullIndex(MmapNullIndexBuilder),
+
 }
 
 impl FieldIndexBuilderTrait for FieldIndexBuilder {
-    type FieldIndexType = FieldIndex;
 
-    fn init(&mut self) -> OperationResult<()> {
-        match self {
-            Self::IntIndex(index) => index.init(),
-            Self::IntMmapIndex(index) => index.init(),
-            Self::DatetimeIndex(index) => index.init(),
-            Self::DatetimeMmapIndex(index) => index.init(),
-            Self::IntMapIndex(index) => index.init(),
-            Self::IntMapMmapIndex(index) => index.init(),
-            Self::KeywordIndex(index) => index.init(),
-            Self::KeywordMmapIndex(index) => index.init(),
-            Self::FloatIndex(index) => index.init(),
-            Self::FloatMmapIndex(index) => index.init(),
-            Self::GeoIndex(index) => index.init(),
-            Self::GeoMmapIndex(index) => index.init(),
-            Self::BoolIndex(index) => index.init(),
-            Self::BoolMmapIndex(index) => index.init(),
-            Self::FullTextIndex(index) => index.init(),
-            Self::FullTextMmapIndex(builder) => builder.init(),
-            Self::UuidIndex(index) => index.init(),
-            Self::UuidMmapIndex(index) => index.init(),
-            Self::NullIndex(index) => index.init(),
-        }
-    }
+type FieldIndexType = FieldIndex;
 
-    fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            Self::IntIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::DatetimeIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::DatetimeMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextMmapIndex(builder) => {
-                FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter)
-            }
-            Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::NullIndex(index) => index.add_point(id, payload, hw_counter),
-        }
-    }
+fn init(&mut self) -> OperationResult< ()> {
+
+match self {
+
+Self::IntIndex(index) => index.init(),
+
+Self::IntMmapIndex(index) => index.init(),
+
+Self::DatetimeIndex(index) => index.init(),
+
+Self::DatetimeMmapIndex(index) => index.init(),
+
+Self::IntMapIndex(index) => index.init(),
+
+Self::IntMapMmapIndex(index) => index.init(),
+
+Self::KeywordIndex(index) => index.init(),
+
+Self::KeywordMmapIndex(index) => index.init(),
+
+Self::FloatIndex(index) => index.init(),
+
+Self::FloatMmapIndex(index) => index.init(),
+
+Self::GeoIndex(index) => index.init(),
+
+Self::GeoMmapIndex(index) => index.init(),
+
+Self::BoolIndex(index) => index.init(),
+
+Self::BoolMmapIndex(index) => index.init(),
+
+Self::FullTextIndex(index) => index.init(),
+
+Self::FullTextMmapIndex(builder) => builder.init(),
+
+Self::UuidIndex(index) => index.init(),
+
+Self::UuidMmapIndex(index) => index.init(),
+
+Self::NullIndex(index) => index.init(),
+
+}
+
+}
+
+fn add_point(&mut self, id: PointOffsetType, payload: &[&Value], hw_counter: &HardwareCounterCell) -> OperationResult< ()> {
+
+match self {
+
+Self::IntIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::IntMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::DatetimeIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::DatetimeMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::IntMapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::IntMapMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::KeywordIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::KeywordMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::FloatIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::FloatMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::GeoIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::GeoMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::BoolIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::BoolMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::FullTextMmapIndex(builder) => FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter),
+
+Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
+
+Self::NullIndex(index) => index.add_point(id, payload, hw_counter),
+
+}
+
+}
+
+fn finalize(self) -> OperationResult<FieldIndex> {
+
+Ok(match self {
+
+Self::IntIndex(index) => FieldIndex::IntIndex(index.finalize()?),
+
+Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
+
+Self::DatetimeIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
+
+Self::DatetimeMmapIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
+
+Self::IntMapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
+
+Self::IntMapMmapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
+
+Self::KeywordIndex(index) => FieldIndex::KeywordIndex(index.finalize( )?), 
+
+Self::KeywordMmapIndex(index) => FieldIndex::KeywordIndex(index.finalize( )?),
+
+Self::FloatIndex(index) => FieldIndex::FloatIndex(index.finalize(?)),
+
+Self::FloatMmapIndex(index) => FieldIndex::FloatIndex(index.finalize(?)),
+
+Self::GeoIndex(index) => FieldIndex::GeoIndex(index.finalize(?)),
+
+Self::GeoMmapIndex(index) => FieldIndex::GeoIndex(index.finalize(?)),
+
+Self::BoolIndex(index) => FieldIndex::BoolIndex(index.finalize(?)),
+
+Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize(?)),
+
+Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize(?)),
+
+Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize(?)),
+
+Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize( )?),
+
+Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize( )?),
+
+Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize(?)),
+
+})
+
+}
+
+#[cfg(test)]
+
+fn make_empty(mut self) -> OperationResult<FieldIndex> {
+
+self.init()?;
+
+self.finalize()
+
+}
 
-    fn finalize(self) -> OperationResult<FieldIndex> {
-        Ok(match self {
-            Self::IntIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::DatetimeIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::DatetimeMmapIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::IntMapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::IntMapMmapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::KeywordIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::KeywordMmapIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::FloatIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::FloatMmapIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::GeoIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::GeoMmapIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::BoolIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize()?),
-            Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize()?),
-            Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
-        })
-    }
 }
 
 pub enum NumericFieldIndex<'a> {
-    IntIndex(&'a NumericIndexInner<IntPayloadType>),
-    FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
+
+IntIndex(&'a NumericIndexInner<IntPayloadType>),
+
+FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
+
 }
 
 impl<'a> StreamRange<OrderValue> for NumericFieldIndex<'a> {
-    fn stream_range(
-        &self,
-        range: &RangeInterface,
-    ) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-        }
-    }
+
+fn stream_range(&self, range: &RangeInterface) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
+
+match self {
+
+NumericFieldIndex::IntIndex(index) => Box::new(index.stream_range(range).map(|(v, p)| (OrderValue::from(v), p))),
+
+NumericFieldIndex::FloatIndex(index) => Box::new(index.stream_range(range).map(|(v, p) | (OrderValue::from(v), p))),
+
+}
+
+}
+
 }
 
 impl<'a> NumericFieldIndex<'a> {
-    pub fn get_ordering_values(
-        &self,
-        idx: PointOffsetType,
-    ) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Int),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Float),
-            ),
-        }
-    }
+
+fn get_ordering_values(&self, idx: PointOffsetType) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
+
+match self {
+
+NumericFieldIndex::IntIndex(index) => Box::new(index.get_values(idx).into_iter().flatten().map(OrderValue::Int)),
+
+NumericFieldIndex::FloatIndex(index) => Box::new(index.get_values(idx).into_iter().flatten().map(OrderValue::Float)),
+
+}
+
+}
+
 }
\ No newline at end of file
