
index dd66b0d0b..59b0a92c0 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpzlle6uv0_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmp0by1dndl_actual.txt	
@@ -5,9 +5,9 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
 use super::bool_index::simple_bool_index::BoolIndexBuilder;
+use super::bool_index::BoolIndex;
 use super::facet_index::FacetIndexEnum;
 use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
 use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
@@ -44,6 +44,17 @@ pub trait PayloadFieldIndex {
 
     fn files(&self) -> Vec<PathBuf>;
 
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    fn populate(&self) -> OperationResult<()> {
+        Ok(())
+    }
+
+    /// Drop disk cache.
+    fn clear_cache(&self) -> OperationResult<()> {
+        Ok(())
+    }
+
     /// Get iterator over points fitting given `condition`
     /// Return `None` if condition does not match the index type
     fn filter<'a>(
@@ -255,6 +266,57 @@ impl FieldIndex {
         self.get_payload_field_index().files()
     }
 
+    pub fn is_on_disk(&self) -> bool {
+        match self {
+            FieldIndex::IntIndex(index) => index.is_on_disk(),
+            FieldIndex::DatetimeIndex(index) => index.is_on_disk(),
+            FieldIndex::IntMapIndex(index) => index.is_on_disk(),
+            FieldIndex::KeywordIndex(index) => index.is_on_disk(),
+            FieldIndex::FloatIndex(index) => index.is_on_disk(),
+            FieldIndex::GeoIndex(index) => index.is_on_disk(),
+            FieldIndex::BoolIndex(index) => index.is_on_disk(),
+            FieldIndex::FullTextIndex(index) => index.is_on_disk(),
+            FieldIndex::UuidIndex(index) => index.is_on_disk(),
+            FieldIndex::UuidMapIndex(index) => index.is_on_disk(),
+            FieldIndex::NullIndex(index) => index.is_on_disk(),
+        }
+    }
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    pub fn populate(&self) -> OperationResult<()> {
+        match self {
+            FieldIndex::IntIndex(index) => index.populate(),
+            FieldIndex::DatetimeIndex(index) => index.populate(),
+            FieldIndex::IntMapIndex(index) => index.populate(),
+            FieldIndex::KeywordIndex(index) => index.populate(),
+            FieldIndex::FloatIndex(index) => index.populate(),
+            FieldIndex::GeoIndex(index) => index.populate(),
+            FieldIndex::BoolIndex(index) => index.populate(),
+            FieldIndex::FullTextIndex(index) => index.populate(),
+            FieldIndex::UuidIndex(index) => index.populate(),
+            FieldIndex::UuidMapIndex(index) => index.populate(),
+            FieldIndex::NullIndex(index) => index.populate(),
+        }
+    }
+
+    /// Drop disk cache.
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        match self {
+            FieldIndex::IntIndex(index) => index.clear_cache(),
+            FieldIndex::DatetimeIndex(index) => index.clear_cache(),
+            FieldIndex::IntMapIndex(index) => index.clear_cache(),
+            FieldIndex::KeywordIndex(index) => index.clear_cache(),
+            FieldIndex::FloatIndex(index) => index.clear_cache(),
+            FieldIndex::GeoIndex(index) => index.clear_cache(),
+            FieldIndex::BoolIndex(index) => index.clear_cache(),
+            FieldIndex::FullTextIndex(index) => index.clear_cache(),
+            FieldIndex::UuidIndex(index) => index.clear_cache(),
+            FieldIndex::UuidMapIndex(index) => index.clear_cache(),
+            FieldIndex::NullIndex(index) => index.clear_cache(),
+        }
+    }
+
     pub fn filter<'a>(
         &'a self,
         condition: &'a FieldCondition,
@@ -334,7 +396,7 @@ impl FieldIndex {
             FieldIndex::GeoIndex(index) => index.remove_point(point_id),
             FieldIndex::BoolIndex(index) => index.remove_point(point_id),
             FieldIndex::FullTextIndex(index) => index.remove_point(point_id),
-            FieldIndex::UuidIndex(index) => index.remove_point(point_id),
+            FieldIndex::UuidIndex(index) => index.mut_inner().remove_point(point_id),
             FieldIndex::UuidMapIndex(index) => index.remove_point(point_id),
             FieldIndex::NullIndex(index) => index.remove_point(point_id),
         }
@@ -419,55 +481,53 @@ impl FieldIndex {
             | FieldIndex::NullIndex(_) => None,
         }
     }
+}
 
-    pub fn is_on_disk(&self) -> bool {
-        match self {
-            FieldIndex::IntIndex(index) => index.is_on_disk(),
-            FieldIndex::DatetimeIndex(index) => index.is_on_disk(),
-            FieldIndex::IntMapIndex(index) => index.is_on_disk(),
-            FieldIndex::KeywordIndex(index) => index.is_on_disk(),
-            FieldIndex::FloatIndex(index) => index.is_on_disk(),
-            FieldIndex::GeoIndex(index) => index.is_on_disk(),
-            FieldIndex::BoolIndex(index) => index.is_on_disk(),
-            FieldIndex::FullTextIndex(index) => index.is_on_disk(),
-            FieldIndex::UuidIndex(index) => index.is_on_disk(),
-            FieldIndex::UuidMapIndex(index) => index.is_on_disk(),
-            FieldIndex::NullIndex(index) => index.is_on_disk(),
-        }
-    }
+pub enum NumericFieldIndex<'a> {
+    IntIndex(&'a NumericIndexInner<IntPayloadType>),
+    FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
+}
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
+impl<'a> StreamRange<OrderValue> for NumericFieldIndex<'a> {
+    fn stream_range(
+        &self,
+        range: &RangeInterface,
+    ) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
         match self {
-            FieldIndex::IntIndex(index) => index.populate(),
-            FieldIndex::DatetimeIndex(index) => index.populate(),
-            FieldIndex::IntMapIndex(index) => index.populate(),
-            FieldIndex::KeywordIndex(index) => index.populate(),
-            FieldIndex::FloatIndex(index) => index.populate(),
-            FieldIndex::GeoIndex(index) => index.populate(),
-            FieldIndex::BoolIndex(index) => index.populate(),
-            FieldIndex::FullTextIndex(index) => index.populate(),
-            FieldIndex::UuidIndex(index) => index.populate(),
-            FieldIndex::UuidMapIndex(index) => index.populate(),
-            FieldIndex::NullIndex(index) => index.populate(),
+            NumericFieldIndex::IntIndex(index) => Box::new(
+                index
+                    .stream_range(range)
+                    .map(|(v, p)| (OrderValue::from(v), p)),
+            ),
+            NumericFieldIndex::FloatIndex(index) => Box::new(
+                index
+                    .stream_range(range)
+                    .map(|(v, p)| (OrderValue::from(v), p)),
+            ),
         }
     }
+}
 
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
+impl<'a> NumericFieldIndex<'a> {
+    pub fn get_ordering_values(
+        &self,
+        idx: PointOffsetType,
+    ) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
         match self {
-            FieldIndex::IntIndex(index) => index.clear_cache(),
-            FieldIndex::DatetimeIndex(index) => index.clear_cache(),
-            FieldIndex::IntMapIndex(index) => index.clear_cache(),
-            FieldIndex::KeywordIndex(index) => index.clear_cache(),
-            FieldIndex::FloatIndex(index) => index.clear_cache(),
-            FieldIndex::GeoIndex(index) => index.clear_cache(),
-            FieldIndex::BoolIndex(index) => index.clear_cache(),
-            FieldIndex::FullTextIndex(index) => index.clear_cache(),
-            FieldIndex::UuidIndex(index) => index.clear_cache(),
-            FieldIndex::UuidMapIndex(index) => index.clear_cache(),
-            FieldIndex::NullIndex(index) => index.clear_cache(),
+            NumericFieldIndex::IntIndex(index) => Box::new(
+                index
+                    .get_values(idx)
+                    .into_iter()
+                    .flatten()
+                    .map(OrderValue::Int),
+            ),
+            NumericFieldIndex::FloatIndex(index) => Box::new(
+                index
+                    .get_values(idx)
+                    .into_iter()
+                    .flatten()
+                    .map(OrderValue::Float),
+            ),
         }
     }
 }
@@ -605,53 +665,4 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
         })
     }
-}
-
-pub enum NumericFieldIndex<'a> {
-    IntIndex(&'a NumericIndexInner<IntPayloadType>),
-    FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
-}
-
-impl<'a> StreamRange<OrderValue> for NumericFieldIndex<'a> {
-    fn stream_range(
-        &self,
-        range: &RangeInterface,
-    ) -> Box<dyn DoubleEndedIterator<Item = (OrderValue, PointOffsetType)> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .stream_range(range)
-                    .map(|(v, p)| (OrderValue::from(v), p)),
-            ),
-        }
-    }
-}
-
-impl<'a> NumericFieldIndex<'a> {
-    pub fn get_ordering_values(
-        &self,
-        idx: PointOffsetType,
-    ) -> Box<dyn Iterator<Item = OrderValue> + 'a> {
-        match self {
-            NumericFieldIndex::IntIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Int),
-            ),
-            NumericFieldIndex::FloatIndex(index) => Box::new(
-                index
-                    .get_values(idx)
-                    .into_iter()
-                    .flatten()
-                    .map(OrderValue::Float),
-            ),
-        }
-    }
 }
\ No newline at end of file
