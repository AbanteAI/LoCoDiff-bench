
index dd66b0d0..edc88a2a 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpoc43pob9_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmp2z4f4end_actual.txt	
@@ -14,14 +14,14 @@ use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
 use super::geo_index::{GeoMapIndexBuilder, GeoMapIndexMmapBuilder};
 use super::map_index::{MapIndex, MapIndexBuilder, MapIndexMmapBuilder};
 use super::numeric_index::{
-    NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, StreamRange,
+    NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, NumericIndexInner, StreamRange,
 };
 use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
 use crate::data_types::order_by::OrderValue;
 use crate::index::field_index::geo_index::GeoMapIndex;
 use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
-use crate::index::field_index::numeric_index::NumericIndexInner;
+use crate::index::field_index::numeric_index::NumericIndexInner as _;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
@@ -67,6 +67,13 @@ pub trait PayloadFieldIndex {
         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
+
+    /// Returns an amount of unique indexed points
+    fn values_count(&self, point_id: PointOffsetType) -> usize;
+
+    fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
+
+    fn get_telemetry_data(&self) -> PayloadIndexTelemetry;
 }
 
 pub trait ValueIndexer {
@@ -227,22 +234,6 @@ impl FieldIndex {
         }
     }
 
-    pub fn cleanup(self) -> OperationResult<()> {
-        match self {
-            FieldIndex::IntIndex(index) => index.cleanup(),
-            FieldIndex::DatetimeIndex(index) => index.cleanup(),
-            FieldIndex::IntMapIndex(index) => index.cleanup(),
-            FieldIndex::KeywordIndex(index) => index.cleanup(),
-            FieldIndex::FloatIndex(index) => index.cleanup(),
-            FieldIndex::GeoIndex(index) => index.cleanup(),
-            FieldIndex::BoolIndex(index) => index.cleanup(),
-            FieldIndex::FullTextIndex(index) => index.cleanup(),
-            FieldIndex::UuidIndex(index) => index.cleanup(),
-            FieldIndex::UuidMapIndex(index) => index.cleanup(),
-            FieldIndex::NullIndex(index) => index.cleanup(),
-        }
-    }
-
     pub fn count_indexed_points(&self) -> usize {
         self.get_payload_field_index().count_indexed_points()
     }
@@ -397,8 +388,8 @@ impl FieldIndex {
             | FieldIndex::KeywordIndex(_)
             | FieldIndex::GeoIndex(_)
             | FieldIndex::BoolIndex(_)
-            | FieldIndex::UuidMapIndex(_)
             | FieldIndex::UuidIndex(_)
+            | FieldIndex::UuidMapIndex(_)
             | FieldIndex::FullTextIndex(_)
             | FieldIndex::NullIndex(_) => None,
         }
