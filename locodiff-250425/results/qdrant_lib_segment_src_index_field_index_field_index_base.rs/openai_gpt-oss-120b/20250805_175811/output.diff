
index dd66b0d0b..5859fc355 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmplk7ukysk_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpqd61uw1l_actual.txt	
@@ -5,9 +5,9 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
+use super::bool_index::BoolIndexBuilder;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
-use super::bool_index::simple_bool_index::BoolIndexBuilder;
+use super::bool_index::BoolIndex;
 use super::facet_index::FacetIndexEnum;
 use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
 use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
@@ -16,11 +16,12 @@ use super::map_index::{MapIndex, MapIndexBuilder, MapIndexMmapBuilder};
 use super::numeric_index::{
     NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, StreamRange,
 };
-use crate::common::Flusher;
+use super::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
+
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::order_by::OrderValue;
 use crate::index::field_index::geo_index::GeoMapIndex;
-use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
 use crate::index::field_index::numeric_index::NumericIndexInner;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
 use crate::telemetry::PayloadIndexTelemetry;
@@ -31,7 +32,7 @@ use crate::types::{
 
 pub trait PayloadFieldIndex {
     /// Return number of points with at least one value indexed in here
-    fn count_indexed_points(&self) -> usize;
+    fn indexed_points(&self) -> usize;
 
     /// Load index from disk.
     fn load(&mut self) -> OperationResult<bool>;
@@ -42,6 +43,7 @@ pub trait PayloadFieldIndex {
     /// Return function that flushes all pending updates to disk.
     fn flusher(&self) -> Flusher;
 
+    /// Return the list of underlying files for the index
     fn files(&self) -> Vec<PathBuf>;
 
     /// Get iterator over points fitting given `condition`
@@ -67,6 +69,17 @@ pub trait PayloadFieldIndex {
         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
+
+    /// Returns an amount of unique indexed points
+    fn count_indexed_points(&self) -> usize;
+
+    fn get_telemetry_data(&self) -> PayloadIndexTelemetry;
+
+    /// Returns the amount of values for a given point
+    fn values_count(&self, point_id: PointOffsetType) -> usize;
+
+    /// Returns an amount of unique indexed points
+    fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
 }
 
 pub trait ValueIndexer {
@@ -120,8 +133,6 @@ pub trait ValueIndexer {
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
 }
 
-/// Common interface for all possible types of field indexes
-/// Enables polymorphism on field indexes
 pub enum FieldIndex {
     IntIndex(NumericIndex<IntPayloadType, IntPayloadType>),
     DatetimeIndex(NumericIndex<IntPayloadType, DateTimePayloadType>),
@@ -129,8 +140,8 @@ pub enum FieldIndex {
     KeywordIndex(MapIndex<str>),
     FloatIndex(NumericIndex<FloatPayloadType, FloatPayloadType>),
     GeoIndex(GeoMapIndex),
-    FullTextIndex(FullTextIndex),
     BoolIndex(BoolIndex),
+    FullTextIndex(FullTextIndex),
     UuidIndex(NumericIndex<UuidIntType, UuidPayloadType>),
     UuidMapIndex(MapIndex<UuidIntType>),
     NullIndex(MmapNullIndex),
@@ -139,17 +150,17 @@ pub enum FieldIndex {
 impl std::fmt::Debug for FieldIndex {
     fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
         match self {
-            FieldIndex::IntIndex(_index) => write!(f, "IntIndex"),
-            FieldIndex::DatetimeIndex(_index) => write!(f, "DatetimeIndex"),
-            FieldIndex::IntMapIndex(_index) => write!(f, "IntMapIndex"),
-            FieldIndex::KeywordIndex(_index) => write!(f, "KeywordIndex"),
-            FieldIndex::FloatIndex(_index) => write!(f, "FloatIndex"),
-            FieldIndex::GeoIndex(_index) => write!(f, "GeoIndex"),
-            FieldIndex::BoolIndex(_index) => write!(f, "BoolIndex"),
-            FieldIndex::FullTextIndex(_index) => write!(f, "FullTextIndex"),
-            FieldIndex::UuidIndex(_index) => write!(f, "UuidIndex"),
-            FieldIndex::UuidMapIndex(_index) => write!(f, "UuidMapIndex"),
-            FieldIndex::NullIndex(_index) => write!(f, "NullIndex"),
+            FieldIndex::IntIndex(_) => write!(f, "IntIndex"),
+            FieldIndex::DatetimeIndex(_) => write!(f, "DatetimeIndex"),
+            FieldIndex::IntMapIndex(_) => write!(f, "IntMapIndex"),
+            FieldIndex::KeywordIndex(_) => write!(f, "KeywordIndex"),
+            FieldIndex::FloatIndex(_) => write!(f, "FloatIndex"),
+            FieldIndex::GeoIndex(_) => write!(f, "GeoIndex"),
+            FieldIndex::BoolIndex(_) => write!(f, "BoolIndex"),
+            FieldIndex::FullTextIndex(_) => write!(f, "FullTextIndex"),
+            FieldIndex::UuidIndex(_) => write!(f, "UuidIndex"),
+            FieldIndex::UuidMapIndex(_) => write!(f, "UuidMapIndex"),
+            FieldIndex::NullIndex(_) => write!(f, "NullIndex"),
         }
     }
 }
@@ -157,7 +168,6 @@ impl std::fmt::Debug for FieldIndex {
 impl FieldIndex {
     /// Try to check condition for a payload given a field index.
     /// Required because some index parameters may influence the condition checking logic.
-    /// For example, full text index may have different tokenizers.
     ///
     /// Returns `None` if there is no special logic for the given index
     /// returns `Some(true)` if condition is satisfied
@@ -197,11 +207,11 @@ impl FieldIndex {
 
     fn get_payload_field_index(&self) -> &dyn PayloadFieldIndex {
         match self {
-            FieldIndex::IntIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::IntIndex(payload_field_index) => payload_field_index,
+            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index,
             FieldIndex::IntMapIndex(payload_field_index) => payload_field_index,
             FieldIndex::KeywordIndex(payload_field_index) => payload_field_index,
-            FieldIndex::FloatIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::FloatIndex(payload_field_index) => payload_field_index,
             FieldIndex::GeoIndex(payload_field_index) => payload_field_index,
             FieldIndex::BoolIndex(payload_field_index) => payload_field_index,
             FieldIndex::FullTextIndex(payload_field_index) => payload_field_index,
@@ -243,10 +253,6 @@ impl FieldIndex {
         }
     }
 
-    pub fn count_indexed_points(&self) -> usize {
-        self.get_payload_field_index().count_indexed_points()
-    }
-
     pub fn flusher(&self) -> Flusher {
         self.get_payload_field_index().flusher()
     }
@@ -281,127 +287,20 @@ impl FieldIndex {
             .payload_blocks(threshold, key)
     }
 
-    pub fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            FieldIndex::IntIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::DatetimeIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::IntMapIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::KeywordIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::FloatIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::GeoIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::BoolIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::FullTextIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::UuidIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::UuidMapIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::NullIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-        }
-    }
-
-    pub fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
-        match self {
-            FieldIndex::IntIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::DatetimeIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::IntMapIndex(index) => index.remove_point(point_id),
-            FieldIndex::KeywordIndex(index) => index.remove_point(point_id),
-            FieldIndex::FloatIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::GeoIndex(index) => index.remove_point(point_id),
-            FieldIndex::BoolIndex(index) => index.remove_point(point_id),
-            FieldIndex::FullTextIndex(index) => index.remove_point(point_id),
-            FieldIndex::UuidIndex(index) => index.remove_point(point_id),
-            FieldIndex::UuidMapIndex(index) => index.remove_point(point_id),
-            FieldIndex::NullIndex(index) => index.remove_point(point_id),
-        }
+    pub fn count_indexed_points(&self) -> usize {
+        self.get_payload_field_index().count_indexed_points()
     }
 
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
-        match self {
-            FieldIndex::IntIndex(index) => index.get_telemetry_data(),
-            FieldIndex::DatetimeIndex(index) => index.get_telemetry_data(),
-            FieldIndex::IntMapIndex(index) => index.get_telemetry_data(),
-            FieldIndex::KeywordIndex(index) => index.get_telemetry_data(),
-            FieldIndex::FloatIndex(index) => index.get_telemetry_data(),
-            FieldIndex::GeoIndex(index) => index.get_telemetry_data(),
-            FieldIndex::BoolIndex(index) => index.get_telemetry_data(),
-            FieldIndex::FullTextIndex(index) => index.get_telemetry_data(),
-            FieldIndex::UuidIndex(index) => index.get_telemetry_data(),
-            FieldIndex::UuidMapIndex(index) => index.get_telemetry_data(),
-            FieldIndex::NullIndex(index) => index.get_telemetry_data(),
-        }
+        self.get_payload_field_index().get_telemetry_data()
     }
 
     pub fn values_count(&self, point_id: PointOffsetType) -> usize {
-        match self {
-            FieldIndex::IntIndex(index) => index.values_count(point_id),
-            FieldIndex::DatetimeIndex(index) => index.values_count(point_id),
-            FieldIndex::IntMapIndex(index) => index.values_count(point_id),
-            FieldIndex::KeywordIndex(index) => index.values_count(point_id),
-            FieldIndex::FloatIndex(index) => index.values_count(point_id),
-            FieldIndex::GeoIndex(index) => index.values_count(point_id),
-            FieldIndex::BoolIndex(index) => index.values_count(point_id),
-            FieldIndex::FullTextIndex(index) => index.values_count(point_id),
-            FieldIndex::UuidIndex(index) => index.values_count(point_id),
-            FieldIndex::UuidMapIndex(index) => index.values_count(point_id),
-            FieldIndex::NullIndex(index) => index.values_count(point_id),
-        }
+        self.get_payload_field_index().values_count(point_id)
     }
 
     pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
-        match self {
-            FieldIndex::IntIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::DatetimeIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::IntMapIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::KeywordIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::FloatIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::GeoIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::BoolIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::FullTextIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::UuidIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::UuidMapIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::NullIndex(index) => index.values_is_empty(point_id),
-        }
-    }
-
-    pub fn as_numeric(&self) -> Option<NumericFieldIndex> {
-        match self {
-            FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
-            FieldIndex::DatetimeIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
-            FieldIndex::FloatIndex(index) => Some(NumericFieldIndex::FloatIndex(index.inner())),
-            FieldIndex::IntMapIndex(_)
-            | FieldIndex::KeywordIndex(_)
-            | FieldIndex::GeoIndex(_)
-            | FieldIndex::BoolIndex(_)
-            | FieldIndex::UuidMapIndex(_)
-            | FieldIndex::UuidIndex(_)
-            | FieldIndex::FullTextIndex(_)
-            | FieldIndex::NullIndex(_) => None,
-        }
+        self.get_payload_field_index().values_is_empty(point_id)
     }
 
     pub fn as_facet_index(&self) -> Option<FacetIndexEnum> {
@@ -420,6 +319,22 @@ impl FieldIndex {
         }
     }
 
+    pub fn as_numeric(&self) -> Option<NumericFieldIndex> {
+        match self {
+            FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
+            FieldIndex::DatetimeIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
+            FieldIndex::FloatIndex(index) => Some(NumericFieldIndex::FloatIndex(index.inner())),
+            FieldIndex::IntMapIndex(_)
+            | FieldIndex::KeywordIndex(_)
+            | FieldIndex::GeoIndex(_)
+            | FieldIndex::BoolIndex(_)
+            | FieldIndex::FullTextIndex(_)
+            | FieldIndex::UuidIndex(_)
+            | FieldIndex::UuidMapIndex(_)
+            | FieldIndex::NullIndex(_) => None,
+        }
+    }
+
     pub fn is_on_disk(&self) -> bool {
         match self {
             FieldIndex::IntIndex(index) => index.is_on_disk(),
@@ -472,9 +387,9 @@ impl FieldIndex {
     }
 }
 
-/// Common interface for all index builders.
+/*------------------- FieldIndexBuilder -------------------*/
+
 pub trait FieldIndexBuilderTrait {
-    /// The resulting type of the index.
     type FieldIndexType;
 
     /// Start building the index, e.g. create a database column or a directory.
@@ -490,7 +405,6 @@ pub trait FieldIndexBuilderTrait {
 
     fn finalize(self) -> OperationResult<Self::FieldIndexType>;
 
-    /// Create an empty index for testing purposes.
     #[cfg(test)]
     fn make_empty(mut self) -> OperationResult<Self::FieldIndexType>
     where
@@ -515,10 +429,11 @@ pub enum FieldIndexBuilder {
     FloatMmapIndex(NumericIndexMmapBuilder<FloatPayloadType, FloatPayloadType>),
     GeoIndex(GeoMapIndexBuilder),
     GeoMmapIndex(GeoMapIndexMmapBuilder),
-    FullTextIndex(FullTextIndexBuilder),
-    FullTextMmapIndex(FullTextMmapIndexBuilder),
     BoolIndex(BoolIndexBuilder),
     BoolMmapIndex(MmapBoolIndexBuilder),
+    FullTextIndex(FullTextIndexBuilder),
+    FullTextMmapIndex(FullTextMmapIndexBuilder),
+    BinaryIndex, // placeholder for compatibility, actual implementation removed
     UuidIndex(MapIndexBuilder<UuidIntType>),
     UuidMmapIndex(MapIndexMmapBuilder<UuidIntType>),
     NullIndex(MmapNullIndexBuilder),
@@ -545,6 +460,7 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::BoolMmapIndex(index) => index.init(),
             Self::FullTextIndex(index) => index.init(),
             Self::FullTextMmapIndex(builder) => builder.init(),
+            Self::BinaryIndex => Ok(()), // no-op
             Self::UuidIndex(index) => index.init(),
             Self::UuidMmapIndex(index) => index.init(),
             Self::NullIndex(index) => index.init(),
@@ -576,13 +492,14 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::FullTextMmapIndex(builder) => {
                 FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter)
             }
+            Self::BinaryIndex => Ok(()), // no-op
             Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
             Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
             Self::NullIndex(index) => index.add_point(id, payload, hw_counter),
         }
     }
 
-    fn finalize(self) -> OperationResult<FieldIndex> {
+    fn finalize(self) -> OperationResult<Self::FieldIndexType> {
         Ok(match self {
             Self::IntIndex(index) => FieldIndex::IntIndex(index.finalize()?),
             Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
@@ -600,6 +517,7 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
             Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize()?),
             Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize()?),
+            Self::BinaryIndex => panic!("Binary index not supported"),
             Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
             Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
             Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
@@ -607,6 +525,8 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
     }
 }
 
+/*------------------- NumericFieldIndex -------------------*/
+
 pub enum NumericFieldIndex<'a> {
     IntIndex(&'a NumericIndexInner<IntPayloadType>),
     FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
