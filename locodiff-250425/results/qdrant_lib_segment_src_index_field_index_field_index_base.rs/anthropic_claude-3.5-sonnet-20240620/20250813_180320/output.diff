
index dd66b0d0b..a143c40d1 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpdn7r7rxf_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpt6pxjxnm_actual.txt	
@@ -1,27 +1,18 @@
-use std::fmt::Formatter;
-use std::path::PathBuf;
-
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
+use smol_str::SmolStr;
 
-use super::bool_index::BoolIndex;
-use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
-use super::bool_index::simple_bool_index::BoolIndexBuilder;
-use super::facet_index::FacetIndexEnum;
-use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
-use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
-use super::geo_index::{GeoMapIndexBuilder, GeoMapIndexMmapBuilder};
-use super::map_index::{MapIndex, MapIndexBuilder, MapIndexMmapBuilder};
-use super::numeric_index::{
-    NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, StreamRange,
-};
 use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
 use crate::data_types::order_by::OrderValue;
+use crate::index::field_index::binary_index::BinaryIndex;
+use crate::index::field_index::facet_index::FacetIndexEnum;
+use crate::index::field_index::full_text_index::text_index::FullTextIndex;
 use crate::index::field_index::geo_index::GeoMapIndex;
-use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
-use crate::index::field_index::numeric_index::NumericIndexInner;
+use crate::index::field_index::map_index::MapIndex;
+use crate::index::field_index::null_index::mmap_null_index::MmapNullIndex;
+use crate::index::field_index::numeric_index::{NumericIndex, NumericIndexInner, StreamRange};
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
@@ -29,99 +20,9 @@ use crate::types::{
     PayloadKeyType, RangeInterface, UuidIntType, UuidPayloadType,
 };
 
-pub trait PayloadFieldIndex {
-    /// Return number of points with at least one value indexed in here
-    fn count_indexed_points(&self) -> usize;
-
-    /// Load index from disk.
-    fn load(&mut self) -> OperationResult<bool>;
-
-    /// Remove db content or files of the current payload index
-    fn cleanup(self) -> OperationResult<()>;
-
-    /// Return function that flushes all pending updates to disk.
-    fn flusher(&self) -> Flusher;
-
-    fn files(&self) -> Vec<PathBuf>;
-
-    /// Get iterator over points fitting given `condition`
-    /// Return `None` if condition does not match the index type
-    fn filter<'a>(
-        &'a self,
-        condition: &'a FieldCondition,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>>;
-
-    /// Return estimation of amount of points which satisfy given condition.
-    /// Returns `None` if the condition does not match the index type
-    fn estimate_cardinality(
-        &self,
-        condition: &FieldCondition,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<CardinalityEstimation>;
-
-    /// Iterate conditions for payload blocks with minimum size of `threshold`
-    /// Required for building HNSW index
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
-}
-
-pub trait ValueIndexer {
-    type ValueType;
-
-    /// Add multiple values associated with a single point
-    /// This function should be called only once for each point
-    fn add_many(
-        &mut self,
-        id: PointOffsetType,
-        values: Vec<Self::ValueType>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
-
-    /// Extract index-able value from payload `Value`
-    fn get_value(value: &Value) -> Option<Self::ValueType>;
-
-    /// Try to extract index-able values from payload `Value`, even if it is an array
-    fn get_values(value: &Value) -> Vec<Self::ValueType> {
-        match value {
-            Value::Array(values) => values.iter().filter_map(|x| Self::get_value(x)).collect(),
-            _ => Self::get_value(value).map(|x| vec![x]).unwrap_or_default(),
-        }
-    }
-
-    /// Add point with payload to index
-    fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        self.remove_point(id)?;
-        let mut flatten_values: Vec<_> = vec![];
-        for value in payload.iter() {
-            match value {
-                Value::Array(values) => {
-                    flatten_values.extend(values.iter().filter_map(|x| Self::get_value(x)));
-                }
-                _ => {
-                    if let Some(x) = Self::get_value(value) {
-                        flatten_values.push(x);
-                    }
-                }
-            }
-        }
-        self.add_many(id, flatten_values, hw_counter)
-    }
-
-    /// remove a point from the index
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
-}
+use std::fmt::Formatter;
+use std::path::PathBuf;
 
-/// Common interface for all possible types of field indexes
-/// Enables polymorphism on field indexes
 pub enum FieldIndex {
     IntIndex(NumericIndex<IntPayloadType, IntPayloadType>),
     DatetimeIndex(NumericIndex<IntPayloadType, DateTimePayloadType>),
@@ -130,100 +31,27 @@ pub enum FieldIndex {
     FloatIndex(NumericIndex<FloatPayloadType, FloatPayloadType>),
     GeoIndex(GeoMapIndex),
     FullTextIndex(FullTextIndex),
-    BoolIndex(BoolIndex),
+    BinaryIndex(BinaryIndex),
     UuidIndex(NumericIndex<UuidIntType, UuidPayloadType>),
     UuidMapIndex(MapIndex<UuidIntType>),
     NullIndex(MmapNullIndex),
 }
 
-impl std::fmt::Debug for FieldIndex {
-    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
-        match self {
-            FieldIndex::IntIndex(_index) => write!(f, "IntIndex"),
-            FieldIndex::DatetimeIndex(_index) => write!(f, "DatetimeIndex"),
-            FieldIndex::IntMapIndex(_index) => write!(f, "IntMapIndex"),
-            FieldIndex::KeywordIndex(_index) => write!(f, "KeywordIndex"),
-            FieldIndex::FloatIndex(_index) => write!(f, "FloatIndex"),
-            FieldIndex::GeoIndex(_index) => write!(f, "GeoIndex"),
-            FieldIndex::BoolIndex(_index) => write!(f, "BoolIndex"),
-            FieldIndex::FullTextIndex(_index) => write!(f, "FullTextIndex"),
-            FieldIndex::UuidIndex(_index) => write!(f, "UuidIndex"),
-            FieldIndex::UuidMapIndex(_index) => write!(f, "UuidMapIndex"),
-            FieldIndex::NullIndex(_index) => write!(f, "NullIndex"),
-        }
-    }
-}
-
 impl FieldIndex {
-    /// Try to check condition for a payload given a field index.
-    /// Required because some index parameters may influence the condition checking logic.
-    /// For example, full text index may have different tokenizers.
-    ///
-    /// Returns `None` if there is no special logic for the given index
-    /// returns `Some(true)` if condition is satisfied
-    /// returns `Some(false)` if condition is not satisfied
-    pub fn special_check_condition(
-        &self,
-        condition: &FieldCondition,
-        payload_value: &Value,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<bool> {
-        match self {
-            FieldIndex::IntIndex(_) => None,
-            FieldIndex::DatetimeIndex(_) => None,
-            FieldIndex::IntMapIndex(_) => None,
-            FieldIndex::KeywordIndex(_) => None,
-            FieldIndex::FloatIndex(_) => None,
-            FieldIndex::GeoIndex(_) => None,
-            FieldIndex::BoolIndex(_) => None,
-            FieldIndex::FullTextIndex(full_text_index) => match &condition.r#match {
-                Some(Match::Text(MatchText { text })) => {
-                    let query = full_text_index.parse_query(text, hw_counter);
-                    for value in FullTextIndex::get_values(payload_value) {
-                        let document = full_text_index.parse_document(&value, hw_counter);
-                        if query.check_match(&document) {
-                            return Some(true);
-                        }
-                    }
-                    Some(false)
-                }
-                _ => None,
-            },
-            FieldIndex::UuidIndex(_) => None,
-            FieldIndex::UuidMapIndex(_) => None,
-            FieldIndex::NullIndex(_) => None,
-        }
-    }
-
-    fn get_payload_field_index(&self) -> &dyn PayloadFieldIndex {
-        match self {
-            FieldIndex::IntIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::IntMapIndex(payload_field_index) => payload_field_index,
-            FieldIndex::KeywordIndex(payload_field_index) => payload_field_index,
-            FieldIndex::FloatIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::GeoIndex(payload_field_index) => payload_field_index,
-            FieldIndex::BoolIndex(payload_field_index) => payload_field_index,
-            FieldIndex::FullTextIndex(payload_field_index) => payload_field_index,
-            FieldIndex::UuidIndex(payload_field_index) => payload_field_index.inner(),
-            FieldIndex::UuidMapIndex(payload_field_index) => payload_field_index,
-            FieldIndex::NullIndex(payload_field_index) => payload_field_index,
-        }
-    }
 
     pub fn load(&mut self) -> OperationResult<bool> {
         match self {
-            FieldIndex::IntIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::IntMapIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::KeywordIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::FloatIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::GeoIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::BoolIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::FullTextIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::UuidIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::UuidMapIndex(payload_field_index) => payload_field_index.load(),
-            FieldIndex::NullIndex(payload_field_index) => payload_field_index.load(),
+            FieldIndex::IntIndex(index) => index.load(),
+            FieldIndex::DatetimeIndex(index) => index.load(),
+            FieldIndex::IntMapIndex(index) => index.load(),
+            FieldIndex::KeywordIndex(index) => index.load(),
+            FieldIndex::FloatIndex(index) => index.load(),
+            FieldIndex::GeoIndex(index) => index.load(),
+            FieldIndex::BinaryIndex(index) => index.load(),
+            FieldIndex::FullTextIndex(index) => index.load(),
+            FieldIndex::UuidIndex(index) => index.load(),
+            FieldIndex::UuidMapIndex(index) => index.load(),
+            FieldIndex::NullIndex(index) => index.load(),
         }
     }
 
@@ -235,7 +63,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.cleanup(),
             FieldIndex::FloatIndex(index) => index.cleanup(),
             FieldIndex::GeoIndex(index) => index.cleanup(),
-            FieldIndex::BoolIndex(index) => index.cleanup(),
+            FieldIndex::BinaryIndex(index) => index.cleanup(),
             FieldIndex::FullTextIndex(index) => index.cleanup(),
             FieldIndex::UuidIndex(index) => index.cleanup(),
             FieldIndex::UuidMapIndex(index) => index.cleanup(),
@@ -243,10 +71,6 @@ impl FieldIndex {
         }
     }
 
-    pub fn count_indexed_points(&self) -> usize {
-        self.get_payload_field_index().count_indexed_points()
-    }
-
     pub fn flusher(&self) -> Flusher {
         self.get_payload_field_index().flusher()
     }
@@ -288,51 +112,29 @@ impl FieldIndex {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()> {
         match self {
-            FieldIndex::IntIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::DatetimeIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::IntMapIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::KeywordIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::FloatIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::GeoIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::BoolIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::FullTextIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::UuidIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::UuidMapIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
-            FieldIndex::NullIndex(payload_field_index) => {
-                payload_field_index.add_point(id, payload, hw_counter)
-            }
+            FieldIndex::IntIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::DatetimeIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::IntMapIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::KeywordIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::FloatIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::GeoIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::BinaryIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::UuidIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::UuidMapIndex(index) => index.add_point(id, payload, hw_counter),
+            FieldIndex::NullIndex(index) => index.add_point(id, payload, hw_counter),
         }
     }
 
     pub fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
         match self {
-            FieldIndex::IntIndex(index) => index.mut_inner().remove_point(point_id),
-            FieldIndex::DatetimeIndex(index) => index.mut_inner().remove_point(point_id),
+            FieldIndex::IntIndex(index) => index.remove_point(point_id),
+            FieldIndex::DatetimeIndex(index) => index.remove_point(point_id),
             FieldIndex::IntMapIndex(index) => index.remove_point(point_id),
             FieldIndex::KeywordIndex(index) => index.remove_point(point_id),
-            FieldIndex::FloatIndex(index) => index.mut_inner().remove_point(point_id),
+            FieldIndex::FloatIndex(index) => index.remove_point(point_id),
             FieldIndex::GeoIndex(index) => index.remove_point(point_id),
-            FieldIndex::BoolIndex(index) => index.remove_point(point_id),
+            FieldIndex::BinaryIndex(index) => index.remove_point(point_id),
             FieldIndex::FullTextIndex(index) => index.remove_point(point_id),
             FieldIndex::UuidIndex(index) => index.remove_point(point_id),
             FieldIndex::UuidMapIndex(index) => index.remove_point(point_id),
@@ -348,7 +150,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.get_telemetry_data(),
             FieldIndex::FloatIndex(index) => index.get_telemetry_data(),
             FieldIndex::GeoIndex(index) => index.get_telemetry_data(),
-            FieldIndex::BoolIndex(index) => index.get_telemetry_data(),
+            FieldIndex::BinaryIndex(index) => index.get_telemetry_data(),
             FieldIndex::FullTextIndex(index) => index.get_telemetry_data(),
             FieldIndex::UuidIndex(index) => index.get_telemetry_data(),
             FieldIndex::UuidMapIndex(index) => index.get_telemetry_data(),
@@ -364,7 +166,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.values_count(point_id),
             FieldIndex::FloatIndex(index) => index.values_count(point_id),
             FieldIndex::GeoIndex(index) => index.values_count(point_id),
-            FieldIndex::BoolIndex(index) => index.values_count(point_id),
+            FieldIndex::BinaryIndex(index) => index.values_count(point_id),
             FieldIndex::FullTextIndex(index) => index.values_count(point_id),
             FieldIndex::UuidIndex(index) => index.values_count(point_id),
             FieldIndex::UuidMapIndex(index) => index.values_count(point_id),
@@ -380,7 +182,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.values_is_empty(point_id),
             FieldIndex::FloatIndex(index) => index.values_is_empty(point_id),
             FieldIndex::GeoIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::BoolIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::BinaryIndex(index) => index.values_is_empty(point_id),
             FieldIndex::FullTextIndex(index) => index.values_is_empty(point_id),
             FieldIndex::UuidIndex(index) => index.values_is_empty(point_id),
             FieldIndex::UuidMapIndex(index) => index.values_is_empty(point_id),
@@ -393,14 +195,7 @@ impl FieldIndex {
             FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
             FieldIndex::DatetimeIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
             FieldIndex::FloatIndex(index) => Some(NumericFieldIndex::FloatIndex(index.inner())),
-            FieldIndex::IntMapIndex(_)
-            | FieldIndex::KeywordIndex(_)
-            | FieldIndex::GeoIndex(_)
-            | FieldIndex::BoolIndex(_)
-            | FieldIndex::UuidMapIndex(_)
-            | FieldIndex::UuidIndex(_)
-            | FieldIndex::FullTextIndex(_)
-            | FieldIndex::NullIndex(_) => None,
+            _ => None,
         }
     }
 
@@ -409,14 +204,8 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => Some(FacetIndexEnum::Keyword(index)),
             FieldIndex::IntMapIndex(index) => Some(FacetIndexEnum::Int(index)),
             FieldIndex::UuidMapIndex(index) => Some(FacetIndexEnum::Uuid(index)),
-            FieldIndex::BoolIndex(index) => Some(FacetIndexEnum::Bool(index)),
-            FieldIndex::UuidIndex(_)
-            | FieldIndex::IntIndex(_)
-            | FieldIndex::DatetimeIndex(_)
-            | FieldIndex::FloatIndex(_)
-            | FieldIndex::GeoIndex(_)
-            | FieldIndex::FullTextIndex(_)
-            | FieldIndex::NullIndex(_) => None,
+            FieldIndex::BinaryIndex(index) => Some(FacetIndexEnum::Bool(index)),
+            _ => None,
         }
     }
 
@@ -428,7 +217,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.is_on_disk(),
             FieldIndex::FloatIndex(index) => index.is_on_disk(),
             FieldIndex::GeoIndex(index) => index.is_on_disk(),
-            FieldIndex::BoolIndex(index) => index.is_on_disk(),
+            FieldIndex::BinaryIndex(index) => index.is_on_disk(),
             FieldIndex::FullTextIndex(index) => index.is_on_disk(),
             FieldIndex::UuidIndex(index) => index.is_on_disk(),
             FieldIndex::UuidMapIndex(index) => index.is_on_disk(),
@@ -436,8 +225,6 @@ impl FieldIndex {
         }
     }
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
         match self {
             FieldIndex::IntIndex(index) => index.populate(),
@@ -446,7 +233,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.populate(),
             FieldIndex::FloatIndex(index) => index.populate(),
             FieldIndex::GeoIndex(index) => index.populate(),
-            FieldIndex::BoolIndex(index) => index.populate(),
+            FieldIndex::BinaryIndex(index) => index.populate(),
             FieldIndex::FullTextIndex(index) => index.populate(),
             FieldIndex::UuidIndex(index) => index.populate(),
             FieldIndex::UuidMapIndex(index) => index.populate(),
@@ -454,7 +241,6 @@ impl FieldIndex {
         }
     }
 
-    /// Drop disk cache.
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
             FieldIndex::IntIndex(index) => index.clear_cache(),
@@ -463,7 +249,7 @@ impl FieldIndex {
             FieldIndex::KeywordIndex(index) => index.clear_cache(),
             FieldIndex::FloatIndex(index) => index.clear_cache(),
             FieldIndex::GeoIndex(index) => index.clear_cache(),
-            FieldIndex::BoolIndex(index) => index.clear_cache(),
+            FieldIndex::BinaryIndex(index) => index.clear_cache(),
             FieldIndex::FullTextIndex(index) => index.clear_cache(),
             FieldIndex::UuidIndex(index) => index.clear_cache(),
             FieldIndex::UuidMapIndex(index) => index.clear_cache(),
@@ -472,141 +258,6 @@ impl FieldIndex {
     }
 }
 
-/// Common interface for all index builders.
-pub trait FieldIndexBuilderTrait {
-    /// The resulting type of the index.
-    type FieldIndexType;
-
-    /// Start building the index, e.g. create a database column or a directory.
-    /// Expected to be called exactly once before any other method.
-    fn init(&mut self) -> OperationResult<()>;
-
-    fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
-
-    fn finalize(self) -> OperationResult<Self::FieldIndexType>;
-
-    /// Create an empty index for testing purposes.
-    #[cfg(test)]
-    fn make_empty(mut self) -> OperationResult<Self::FieldIndexType>
-    where
-        Self: Sized,
-    {
-        self.init()?;
-        self.finalize()
-    }
-}
-
-/// Builders for all index types
-pub enum FieldIndexBuilder {
-    IntIndex(NumericIndexBuilder<IntPayloadType, IntPayloadType>),
-    IntMmapIndex(NumericIndexMmapBuilder<IntPayloadType, IntPayloadType>),
-    DatetimeIndex(NumericIndexBuilder<IntPayloadType, DateTimePayloadType>),
-    DatetimeMmapIndex(NumericIndexMmapBuilder<IntPayloadType, DateTimePayloadType>),
-    IntMapIndex(MapIndexBuilder<IntPayloadType>),
-    IntMapMmapIndex(MapIndexMmapBuilder<IntPayloadType>),
-    KeywordIndex(MapIndexBuilder<str>),
-    KeywordMmapIndex(MapIndexMmapBuilder<str>),
-    FloatIndex(NumericIndexBuilder<FloatPayloadType, FloatPayloadType>),
-    FloatMmapIndex(NumericIndexMmapBuilder<FloatPayloadType, FloatPayloadType>),
-    GeoIndex(GeoMapIndexBuilder),
-    GeoMmapIndex(GeoMapIndexMmapBuilder),
-    FullTextIndex(FullTextIndexBuilder),
-    FullTextMmapIndex(FullTextMmapIndexBuilder),
-    BoolIndex(BoolIndexBuilder),
-    BoolMmapIndex(MmapBoolIndexBuilder),
-    UuidIndex(MapIndexBuilder<UuidIntType>),
-    UuidMmapIndex(MapIndexMmapBuilder<UuidIntType>),
-    NullIndex(MmapNullIndexBuilder),
-}
-
-impl FieldIndexBuilderTrait for FieldIndexBuilder {
-    type FieldIndexType = FieldIndex;
-
-    fn init(&mut self) -> OperationResult<()> {
-        match self {
-            Self::IntIndex(index) => index.init(),
-            Self::IntMmapIndex(index) => index.init(),
-            Self::DatetimeIndex(index) => index.init(),
-            Self::DatetimeMmapIndex(index) => index.init(),
-            Self::IntMapIndex(index) => index.init(),
-            Self::IntMapMmapIndex(index) => index.init(),
-            Self::KeywordIndex(index) => index.init(),
-            Self::KeywordMmapIndex(index) => index.init(),
-            Self::FloatIndex(index) => index.init(),
-            Self::FloatMmapIndex(index) => index.init(),
-            Self::GeoIndex(index) => index.init(),
-            Self::GeoMmapIndex(index) => index.init(),
-            Self::BoolIndex(index) => index.init(),
-            Self::BoolMmapIndex(index) => index.init(),
-            Self::FullTextIndex(index) => index.init(),
-            Self::FullTextMmapIndex(builder) => builder.init(),
-            Self::UuidIndex(index) => index.init(),
-            Self::UuidMmapIndex(index) => index.init(),
-            Self::NullIndex(index) => index.init(),
-        }
-    }
-
-    fn add_point(
-        &mut self,
-        id: PointOffsetType,
-        payload: &[&Value],
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            Self::IntIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::DatetimeIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::DatetimeMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::IntMapMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::KeywordMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FloatMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::GeoMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::BoolMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::FullTextMmapIndex(builder) => {
-                FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter)
-            }
-            Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
-            Self::NullIndex(index) => index.add_point(id, payload, hw_counter),
-        }
-    }
-
-    fn finalize(self) -> OperationResult<FieldIndex> {
-        Ok(match self {
-            Self::IntIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::IntMmapIndex(index) => FieldIndex::IntIndex(index.finalize()?),
-            Self::DatetimeIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::DatetimeMmapIndex(index) => FieldIndex::DatetimeIndex(index.finalize()?),
-            Self::IntMapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::IntMapMmapIndex(index) => FieldIndex::IntMapIndex(index.finalize()?),
-            Self::KeywordIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::KeywordMmapIndex(index) => FieldIndex::KeywordIndex(index.finalize()?),
-            Self::FloatIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::FloatMmapIndex(index) => FieldIndex::FloatIndex(index.finalize()?),
-            Self::GeoIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::GeoMmapIndex(index) => FieldIndex::GeoIndex(index.finalize()?),
-            Self::BoolIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::BoolMmapIndex(index) => FieldIndex::BoolIndex(index.finalize()?),
-            Self::FullTextIndex(index) => FieldIndex::FullTextIndex(index.finalize()?),
-            Self::FullTextMmapIndex(builder) => FieldIndex::FullTextIndex(builder.finalize()?),
-            Self::UuidIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::UuidMmapIndex(index) => FieldIndex::UuidMapIndex(index.finalize()?),
-            Self::NullIndex(index) => FieldIndex::NullIndex(index.finalize()?),
-        })
-    }
-}
-
 pub enum NumericFieldIndex<'a> {
     IntIndex(&'a NumericIndexInner<IntPayloadType>),
     FloatIndex(&'a NumericIndexInner<FloatPayloadType>),
