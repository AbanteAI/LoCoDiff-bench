
index dd66b0d0..0ee59bb3 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmp6822u9wn_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpyjg96qix_actual.txt	
@@ -1,27 +1,26 @@
 use std::fmt::Formatter;
 use std::path::PathBuf;
 
+use common::counter::hardware_accumulator::HwMeasurementAcc;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
 use super::bool_index::simple_bool_index::BoolIndexBuilder;
+use super::bool_index::BoolIndex;
 use super::facet_index::FacetIndexEnum;
 use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
 use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
-use super::geo_index::{GeoMapIndexBuilder, GeoMapIndexMmapBuilder};
+use super::geo_index::{GeoMapIndex, GeoMapIndexBuilder, GeoMapIndexMmapBuilder};
 use super::map_index::{MapIndex, MapIndexBuilder, MapIndexMmapBuilder};
 use super::numeric_index::{
-    NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, StreamRange,
+    NumericIndex, NumericIndexBuilder, NumericIndexMmapBuilder, NumericIndexInner, StreamRange,
 };
-use crate::common::Flusher;
+use super::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::order_by::OrderValue;
-use crate::index::field_index::geo_index::GeoMapIndex;
-use crate::index::field_index::null_index::mmap_null_index::{MmapNullIndex, MmapNullIndexBuilder};
-use crate::index::field_index::numeric_index::NumericIndexInner;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
@@ -44,7 +43,7 @@ pub trait PayloadFieldIndex {
 
     fn files(&self) -> Vec<PathBuf>;
 
-    /// Get iterator over points fitting given `condition`
+    /// Get iterator over points fitting given `condition`.
     /// Return `None` if condition does not match the index type
     fn filter<'a>(
         &'a self,
@@ -67,6 +66,15 @@ pub trait PayloadFieldIndex {
         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
+
+    fn is_on_disk(&self) -> bool;
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    fn populate(&self) -> OperationResult<()>;
+
+    /// Drop disk cache.
+    fn clear_cache(&self) -> OperationResult<()>;
 }
 
 pub trait ValueIndexer {
@@ -118,6 +126,10 @@ pub trait ValueIndexer {
 
     /// remove a point from the index
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
+
+    fn values_count(&self, point_id: PointOffsetType) -> usize;
+
+    fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
 }
 
 /// Common interface for all possible types of field indexes
