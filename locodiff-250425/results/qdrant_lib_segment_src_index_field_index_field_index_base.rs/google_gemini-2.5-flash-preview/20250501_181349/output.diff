
index dd66b0d0..58b1dced 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpc_uxzck7_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmplan5rzsu_actual.txt	
@@ -5,9 +5,9 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde_json::Value;
 
-use super::bool_index::BoolIndex;
 use super::bool_index::mmap_bool_index::MmapBoolIndexBuilder;
 use super::bool_index::simple_bool_index::BoolIndexBuilder;
+use super::bool_index::BoolIndex;
 use super::facet_index::FacetIndexEnum;
 use super::full_text_index::mmap_text_index::FullTextMmapIndexBuilder;
 use super::full_text_index::text_index::{FullTextIndex, FullTextIndexBuilder};
@@ -44,8 +44,8 @@ pub trait PayloadFieldIndex {
 
     fn files(&self) -> Vec<PathBuf>;
 
-    /// Get iterator over points fitting given `condition`
-    /// Return `None` if condition does not match the index type
+    /// Get iterator over points fitting given `condition`.
+    /// Return `None` if condition does not match the index type.
     fn filter<'a>(
         &'a self,
         condition: &'a FieldCondition,
@@ -117,7 +117,7 @@ pub trait ValueIndexer {
     }
 
     /// remove a point from the index
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
+    fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()>;
 }
 
 /// Common interface for all possible types of field indexes
@@ -169,13 +169,13 @@ impl FieldIndex {
         hw_counter: &HardwareCounterCell,
     ) -> Option<bool> {
         match self {
-            FieldIndex::IntIndex(_) => None,
-            FieldIndex::DatetimeIndex(_) => None,
-            FieldIndex::IntMapIndex(_) => None,
-            FieldIndex::KeywordIndex(_) => None,
-            FieldIndex::FloatIndex(_) => None,
-            FieldIndex::GeoIndex(_) => None,
-            FieldIndex::BoolIndex(_) => None,
+            FieldIndex::IntIndex(_)
+            | FieldIndex::DatetimeIndex(_)
+            | FieldIndex::IntMapIndex(_)
+            | FieldIndex::KeywordIndex(_)
+            | FieldIndex::FloatIndex(_)
+            | FieldIndex::GeoIndex(_)
+            | FieldIndex::BoolIndex(_) => None,
             FieldIndex::FullTextIndex(full_text_index) => match &condition.r#match {
                 Some(Match::Text(MatchText { text })) => {
                     let query = full_text_index.parse_query(text, hw_counter);
@@ -189,9 +189,9 @@ impl FieldIndex {
                 }
                 _ => None,
             },
-            FieldIndex::UuidIndex(_) => None,
-            FieldIndex::UuidMapIndex(_) => None,
-            FieldIndex::NullIndex(_) => None,
+            FieldIndex::UuidIndex(_) | FieldIndex::UuidMapIndex(_) | FieldIndex::NullIndex(_) => {
+                None
+            }
         }
     }
 
@@ -492,7 +492,7 @@ pub trait FieldIndexBuilderTrait {
 
     /// Create an empty index for testing purposes.
     #[cfg(test)]
-    fn make_empty(mut self) -> OperationResult<Self::FieldIndexType>
+    fn make_empty(mut self, hw_counter: &HardwareCounterCell) -> OperationResult<Self::FieldIndexType>
     where
         Self: Sized,
     {
@@ -574,7 +574,7 @@ impl FieldIndexBuilderTrait for FieldIndexBuilder {
             Self::BoolMmapIndex(index) => index.add_point(id, payload, hw_counter),
             Self::FullTextIndex(index) => index.add_point(id, payload, hw_counter),
             Self::FullTextMmapIndex(builder) => {
-                FieldIndexBuilderTrait::add_point(builder, id, payload, hw_counter)
+                Self::add_point(builder, id, payload, hw_counter)
             }
             Self::UuidIndex(index) => index.add_point(id, payload, hw_counter),
             Self::UuidMmapIndex(index) => index.add_point(id, payload, hw_counter),
@@ -653,5 +653,4 @@ impl<'a> NumericFieldIndex<'a> {
                     .map(OrderValue::Float),
             ),
         }
-    }
-}
\ No newline at end of file
+    }
\ No newline at end of file
