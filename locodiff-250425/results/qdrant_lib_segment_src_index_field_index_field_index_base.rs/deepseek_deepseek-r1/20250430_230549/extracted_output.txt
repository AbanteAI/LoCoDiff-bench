use serde_json::Value;
use smol_str::SmolStr;

use crate::common::operation_error::OperationResult;
use crate::common::utils::MultiValue;
use crate::common::Flusher;
use crate::index::field_index::geo_index::GeoMapIndex;
use crate::index::field_index::map_index::MapIndex;
use crate::index::field_index::numeric_index::NumericIndex;
use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition};
use crate::types::{
    FieldCondition, FloatPayloadType, IntPayloadType, PayloadKeyType, PointOffsetType,
};

pub trait PayloadFieldIndex {
    /// Return number of points with at least one value indexed in here
    fn count_indexed_points(&self) -> usize;

    /// Load index from disk.
    fn load(&mut self) -> OperationResult<bool>;

    /// Remove db content of the current payload index
    fn clear(self) -> OperationResult<()>;

    /// Return function that flushes all pending updates to disk.
    fn flusher(&self) -> Flusher;

    /// Get iterator over points fitting given `condition`
    /// Return `None` if condition does not match the index type
    fn filter<'a>(
        &'a self,
        condition: &'a FieldCondition,
    ) -> OperationResult<Box<dyn Iterator<Item = PointOffsetType> + 'a>>;

    /// Return estimation of points amount which satisfy given condition
    fn estimate_cardinality(
        &self,
        condition: &FieldCondition,
    ) -> OperationResult<CardinalityEstimation>;

    /// Iterate conditions for payload blocks with minimum size of `threshold`
    /// Required for building HNSW index
    fn payload_blocks(
        &self,
        threshold: usize,
        key: PayloadKeyType,
    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
}

pub trait ValueIndexer<T> {
    /// Add multiple values associated with a single point
    fn add_many(&mut self, id: PointOffsetType, values: Vec<T>) -> OperationResult<()>;

    /// Extract index-able value from payload `Value`
    fn get_value(&self, value: &Value) -> Option<T>;

    /// Add point with payload to index
    fn add_point(&mut self, id: PointOffsetType, payload: &MultiValue<&Value>) -> OperationResult<()> {
        self.remove_point(id)?;
        match payload {
            MultiValue::Multiple(values) => {
                let mut flatten_values = vec![];
                for value in values {
                    match value {
                        Value::Array(sub_values) => {
                            flatten_values.extend(sub_values.iter().filter_map(|x| self.get_value(x)));
                        }
                        _ => {
                            if let Some(x) = self.get_value(value) {
                                flatten_values.push(x);
                            }
                        }
                    }
                }
                self.add_many(id, flatten_values)
            }
            MultiValue::Single(some_value) => {
                if let Some(Value::Array(values)) = some_value {
                    self.add_many(id, values.iter().filter_map(|x| self.get_value(x)).collect())
                } else if let Some(value) = some_value.and_then(|v| self.get_value(v)) {
                    self.add_many(id, vec![value])
                } else {
                    Ok(())
                }
            }
        }
    }

    /// remove a point from the index
    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()>;
}

/// Common interface for all possible types of field indexes
/// Enables polymorphism on field indexes
#[allow(clippy::enum_variant_names)]
#[derive(Serialize, Deserialize)]
pub enum FieldIndex {
    IntIndex(NumericIndex<IntPayloadType>),
    IntMapIndex(MapIndex<IntPayloadType>),
    KeywordIndex(MapIndex<SmolStr>),
    FloatIndex(NumericIndex<FloatPayloadType>),
    GeoIndex(GeoMapIndex),
}

impl FieldIndex {
    pub fn get_payload_field_index(&self) -> &dyn PayloadFieldIndex {
        match self {
            FieldIndex::IntIndex(payload_field_index) => payload_field_index,
            FieldIndex::IntMapIndex(payload_field_index) => payload_field_index,
            FieldIndex::KeywordIndex(payload_field_index) => payload_field_index,
            FieldIndex::FloatIndex(payload_field_index) => payload_field_index,
            FieldIndex::GeoIndex(payload_field_index) => payload_field_index,
        }
    }
}

impl PayloadFieldIndex for FieldIndex {
    fn count_indexed_points(&self) -> usize {
        self.get_payload_field_index().count_indexed_points()
    }

    fn load(&mut self) -> OperationResult<bool> {
        self.get_payload_field_index_mut().load()
    }

    fn clear(self) -> OperationResult<()> {
        match self {
            FieldIndex::IntIndex(index) => index.clear(),
            FieldIndex::IntMapIndex(index) => index.clear(),
            FieldIndex::KeywordIndex(index) => index.clear(),
            FieldIndex::FloatIndex(index) => index.clear(),
            FieldIndex::GeoIndex(index) => index.clear(),
        }
    }

    fn flusher(&self) -> Flusher {
        self.get_payload_field_index().flusher()
    }

    fn filter<'a>(
        &'a self,
        condition: &'a FieldCondition,
    ) -> OperationResult<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
        self.get_payload_field_index().filter(condition)
    }

    fn estimate_cardinality(
        &self,
        condition: &FieldCondition,
    ) -> OperationResult<CardinalityEstimation> {
        self.get_payload_field_index().estimate_cardinality(condition)
    }

    fn payload_blocks(
        &self,
        threshold: usize,
        key: PayloadKeyType,
    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
        self.get_payload_field_index().payload_blocks(threshold, key)
    }
}