
index dd66b0d0b..fe8d7dd55 100644
--- a/qdrant_lib_segment_src_index_field_index_field_index_base.rs_expectedoutput.txt (expected):tmp/tmpn3bo2idq_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_field_index_base.rs_extracted.txt (actual):tmp/tmpd7brj38p_actual.txt	
@@ -67,6 +67,30 @@ pub trait PayloadFieldIndex {
         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_>;
+
+    fn values_count(&self, point_id: PointOffsetType) -> usize;
+
+    fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
+
+    fn add_point(
+        &mut self,
+        id: PointOffsetType,
+        payload: &[&Value],
+        hw_counter: &HardwareCounterCell,
+    ) -> OperationResult<()>;
+
+    fn remove_point(&mut self, point_id: PointOffsetType) -> OperationResult<()>;
+
+    fn get_telemetry_data(&self) -> PayloadIndexTelemetry;
+
+    fn is_on_disk(&self) -> bool;
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    fn populate(&self) -> OperationResult<()>;
+
+    /// Drop disk cache.
+    fn clear_cache(&self) -> OperationResult<()>;
 }
 
 pub trait ValueIndexer {
@@ -227,6 +251,22 @@ impl FieldIndex {
         }
     }
 
+    fn get_payload_field_index(&self) -> &dyn PayloadFieldIndex {
+        match self {
+            FieldIndex::IntIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::DatetimeIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::IntMapIndex(payload_field_index) => payload_field_index,
+            FieldIndex::KeywordIndex(payload_field_index) => payload_field_index,
+            FieldIndex::FloatIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::GeoIndex(payload_field_index) => payload_field_index,
+            FieldIndex::BoolIndex(payload_field_index) => payload_field_index,
+            FieldIndex::FullTextIndex(payload_field_index) => payload_field_index,
+            FieldIndex::UuidIndex(payload_field_index) => payload_field_index.inner(),
+            FieldIndex::UuidMapIndex(payload_field_index) => payload_field_index,
+            FieldIndex::NullIndex(payload_field_index) => payload_field_index,
+        }
+    }
+
     pub fn cleanup(self) -> OperationResult<()> {
         match self {
             FieldIndex::IntIndex(index) => index.cleanup(),
@@ -281,6 +321,38 @@ impl FieldIndex {
             .payload_blocks(threshold, key)
     }
 
+    pub fn values_count(&self, point_id: PointOffsetType) -> usize {
+        match self {
+            FieldIndex::IntIndex(index) => index.values_count(point_id),
+            FieldIndex::DatetimeIndex(index) => index.values_count(point_id),
+            FieldIndex::IntMapIndex(index) => index.values_count(point_id),
+            FieldIndex::KeywordIndex(index) => index.values_count(point_id),
+            FieldIndex::FloatIndex(index) => index.values_count(point_id),
+            FieldIndex::GeoIndex(index) => index.values_count(point_id),
+            FieldIndex::BoolIndex(index) => index.values_count(point_id),
+            FieldIndex::FullTextIndex(index) => index.values_count(point_id),
+            FieldIndex::UuidIndex(index) => index.values_count(point_id),
+            FieldIndex::UuidMapIndex(index) => index.values_count(point_id),
+            FieldIndex::NullIndex(index) => index.values_count(point_id),
+        }
+    }
+
+    pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
+        match self {
+            FieldIndex::IntIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::DatetimeIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::IntMapIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::KeywordIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::FloatIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::GeoIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::BoolIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::FullTextIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::UuidIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::UuidMapIndex(index) => index.values_is_empty(point_id),
+            FieldIndex::NullIndex(index) => index.values_is_empty(point_id),
+        }
+    }
+
     pub fn add_point(
         &mut self,
         id: PointOffsetType,
@@ -356,38 +428,6 @@ impl FieldIndex {
         }
     }
 
-    pub fn values_count(&self, point_id: PointOffsetType) -> usize {
-        match self {
-            FieldIndex::IntIndex(index) => index.values_count(point_id),
-            FieldIndex::DatetimeIndex(index) => index.values_count(point_id),
-            FieldIndex::IntMapIndex(index) => index.values_count(point_id),
-            FieldIndex::KeywordIndex(index) => index.values_count(point_id),
-            FieldIndex::FloatIndex(index) => index.values_count(point_id),
-            FieldIndex::GeoIndex(index) => index.values_count(point_id),
-            FieldIndex::BoolIndex(index) => index.values_count(point_id),
-            FieldIndex::FullTextIndex(index) => index.values_count(point_id),
-            FieldIndex::UuidIndex(index) => index.values_count(point_id),
-            FieldIndex::UuidMapIndex(index) => index.values_count(point_id),
-            FieldIndex::NullIndex(index) => index.values_count(point_id),
-        }
-    }
-
-    pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
-        match self {
-            FieldIndex::IntIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::DatetimeIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::IntMapIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::KeywordIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::FloatIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::GeoIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::BoolIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::FullTextIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::UuidIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::UuidMapIndex(index) => index.values_is_empty(point_id),
-            FieldIndex::NullIndex(index) => index.values_is_empty(point_id),
-        }
-    }
-
     pub fn as_numeric(&self) -> Option<NumericFieldIndex> {
         match self {
             FieldIndex::IntIndex(index) => Some(NumericFieldIndex::IntIndex(index.inner())),
