
index 5ea95b92..3682094f 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmpz6jr2qok_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmp1k95o7sa_actual.txt	
@@ -21,24 +21,12 @@ import { TLUiEventSource, useUiEvents } from '../context/events'
 import { pasteFiles } from './clipboard/pasteFiles'
 import { pasteUrl } from './clipboard/pasteUrl'
 
-// Expected paste mime types. The earlier in this array they appear, the higher preference we give
-// them. For example, we prefer the `web image/png+tldraw` type to plain `image/png` as it does not
-// strip some of the extra metadata we write into it.
-const expectedPasteFileMimeTypes = [
-	TLDRAW_CUSTOM_PNG_MIME_TYPE,
-	'image/png',
-	'image/jpeg',
-	'image/webp',
-	'image/svg+xml',
-] satisfies string[]
-
 /**
  * Strip HTML tags from a string.
  * @param html - The HTML to strip.
  * @internal
  */
 function stripHtml(html: string) {
-	// See <https://github.com/developit/preact-markup/blob/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): string) => {
 const INPUTS = ['input', 'select', 'textarea']
 
 /**
- * Get whether to disallow clipboard events.
+ * Get whether to disallow keyboard shortcuts.
  *
  * @internal
  */
 function areShortcutsDisabled(editor: Editor) {
 	const { activeElement } = document
-
 	return (
 		editor.menus.hasAnyOpenMenus() ||
 		(activeElement &&
@@ -109,10 +96,10 @@ const handleText = (
 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
 		editor.putExternalContent({
@@ -162,10 +149,17 @@ type ClipboardThing =
 			source: Promise<string>
 	  }
 
+// The earlier a mime type appears in this list, the higher the preference we give it.
+const expectedPasteFileMimeTypes = [
+	TLDRAW_CUSTOM_PNG_MIME_TYPE,
+	'image/png',
+	'image/jpeg',
+	'image/webp',
+	'image/svg+xml',
+] as const
+
 /**
- * Handle a paste using event clipboard data. This is the "original"
- * paste method that uses the clipboard data from the paste event.
- * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): DataTransfer,
 	point?: VecLike
 ) => {
-	// Do not paste while in any editing state
 	if (editor.getEditingShapeId() !== null) return
-
-	if (!clipboardData) {
-		throw Error('No clipboard data')
-	}
+	if (!clipboardData) throw Error('No clipboard data')
 
 	const things: ClipboardThing[] = []
 
 	for (const item of Object.values(clipboardData.items)) {
 		switch (item.kind) {
 			case 'file': {
-				// files are always blobs
 				things.push({
 					type: 'file',
 					source: new Promise((r) => r(item.getAsFile())) as Promise<File | null>,
@@ -197,7 +186,6 @@ const handlePasteFromEventClipboardData = async (
 				break
 			}
 			case 'string': {
-				// strings can be text or html
 				if (item.type === 'text/html') {
 					things.push({
 						type: 'html',
@@ -221,11 +209,7 @@ const handlePasteFromEventClipboardData = async (
 
 /**
  * Handle a paste using items retrieved from the Clipboard API.
- * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): VecLike
 	fallbackFiles?: File[]
 }) => {
-	// We need to populate the array of clipboard things
-	// based on the ClipboardItems from the Clipboard API.
-	// This is done in a different way than when using
-	// the clipboard data from the paste event.
-
 	const things: ClipboardThing[] = []
 
 	for (const item of clipboardItems) {
@@ -297,9 +276,6 @@ const handlePasteFromClipboardApi = async ({
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
 	} else if (fallbackFiles?.length && things.length === 0) {
-		// Files pasted in Safari from your computer don't have types, so we need to use the fallback files directly
-		// if they're available. This only works if pasted keyboard shortcuts. Pasting from the menu in Safari seems to never
-		// let you access files that are copied from your computer.
 		things.push(
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
@@ -309,30 +285,16 @@ const handlePasteFromClipboardApi = async ({
 }
 
 async function handleClipboardThings(editor: Editor, things: ClipboardThing[], point?: VecLike) {
-	// 1. Handle files
-	//
-	// We need to handle files separately because if we want them to
-	// be placed next to each other, we need to create them all at once.
-
 	const files = things.filter(
 		(t) => (t.type === 'file' || t.type === 'blob') && t.source !== null
 	) as Extract<ClipboardThing, { type: 'file' } | { type: 'blob' }>[]
 
-	// Just paste the files, nothing else
 	if (files.length) {
-		if (files.length > editor.options.maxFilesAtOnce) {
-			throw Error('Too many files')
-		}
+		if (files.length > editor.options.maxFilesAtOnce) throw Error('Too many files')
 		const fileBlobs = compact(await Promise.all(files.map((t) => t.source)))
 		return await pasteFiles(editor, fileBlobs, point)
 	}
 
-	// 2. Generate clipboard results for non-file things
-	//
-	// Getting the source from the items is async, however they must be accessed syncronously;
-	// we can't await them in a loop. So we'll map them to promises and await them all at once,
-	// then make decisions based on what we find.
-
 	const results = await Promise.all<TLExternalContentSource>(
 		things
 			.filter((t) => t.type !== 'file')
@@ -342,24 +304,22 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 						const thing = t as Exclude<ClipboardThing, { type: 'file' } | { type: 'blob' }>
 
 						if (thing.type === 'file') {
-							r({ type: 'error', data: null, reason: 'unexpected file' })
+							r({ type: 'error', data: null, reason: 'unexpected file' } as any)
 							return
 						}
 
 						thing.source.then((text) => {
-							// first, see if we can find tldraw content, which is JSON inside of an html comment
 							const tldrawHtmlComment = text.match(/<div data-tldraw[^>]*>(.*)<\/div>/)?.[1]
 
 							if (tldrawHtmlComment) {
 								try {
-									// If we've found tldraw content in the html string, use that as JSON
 									const jsonComment = lz.decompressFromBase64(tldrawHtmlComment)
 									if (jsonComment === null) {
 										r({
 											type: 'error',
 											data: jsonComment,
 											reason: `found tldraw data comment but could not parse base64`,
-										})
+										} as any)
 										return
 									} else {
 										const json = JSON.parse(jsonComment)
@@ -368,7 +328,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 												type: 'error',
 												data: json,
 												reason: `found tldraw data comment but JSON was of a different type: ${json.type}`,
-											})
+											} as any)
 										}
 
 										if (typeof json.data === 'string') {
@@ -377,11 +337,11 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 												data: json,
 												reason:
 													'found tldraw json but data was a string instead of a TLClipboardModel object',
-											})
+											} as any)
 											return
 										}
 
-										r({ type: 'tldraw', data: json.data })
+										r({ type: 'tldraw', content: json.data } as any)
 										return
 									}
 								} catch {
@@ -390,79 +350,60 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 										data: tldrawHtmlComment,
 										reason:
 											'found tldraw json but data was a string instead of a TLClipboardModel object',
-									})
+									} as any)
 									return
 								}
 							} else {
 								if (thing.type === 'html') {
-									r({ type: 'text', data: text, subtype: 'html' })
+									r({ type: 'text', data: text, subtype: 'html' } as any)
 									return
 								}
 
 								if (thing.type === 'url') {
-									r({ type: 'text', data: text, subtype: 'url' })
+									r({ type: 'text', data: text, subtype: 'url' } as any)
 									return
 								}
 
-								// if we have not found a tldraw comment, Otherwise, try to parse the text as JSON directly.
 								try {
 									const json = JSON.parse(text)
 									if (json.type === 'excalidraw/clipboard') {
-										// If the clipboard contains content copied from excalidraw, then paste that
-										r({ type: 'excalidraw', data: json })
+										r({ type: 'excalidraw', content: json } as any)
 										return
 									} else {
-										r({ type: 'text', data: text, subtype: 'json' })
+										r({ type: 'text', data: text, subtype: 'json' } as any)
 										return
 									}
 								} catch {
-									// If we could not parse the text as JSON, then it's just text
-									r({ type: 'text', data: text, subtype: 'text' })
+									r({ type: 'text', data: text, subtype: 'text' } as any)
 									return
 								}
 							}
-
-							r({ type: 'error', data: text, reason: 'unhandled case' })
 						})
 					})
 			)
 	)
 
-	// 3.
-	//
-	// Now that we know what kind of stuff we're dealing with, we can actual create some content.
-	// There are priorities here, so order matters: we've already handled images and files, which
-	// take first priority; then we want to handle tldraw content, then excalidraw content, then
-	// html content, then links, and finally text content.
-
-	// Try to paste tldraw content
 	for (const result of results) {
 		if (result.type === 'tldraw') {
 			editor.markHistoryStoppingPoint('paste')
-			editor.putExternalContent({ type: 'tldraw', content: result.data, point })
+			editor.putExternalContent({ type: 'tldraw', content: (result as any).content, point })
 			return
 		}
 	}
 
-	// Try to paste excalidraw content
 	for (const result of results) {
 		if (result.type === 'excalidraw') {
 			editor.markHistoryStoppingPoint('paste')
-			editor.putExternalContent({ type: 'excalidraw', content: result.data, point })
+			editor.putExternalContent({ type: 'excalidraw', content: (result as any).content, point })
 			return
 		}
 	}
 
-	// Try to paste html content
 	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'html') {
-			// try to find a link
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
+		if (result.type === 'text' && (result as any).subtype === 'html') {
+			const rootNode = new DOMParser().parseFromString((result as any).data, 'text/html')
 			const bodyNode = rootNode.querySelector('body')
 
-			// Edge on Windows 11 home appears to paste a link as a single <a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected): Editor, things: ClipboardThing[], p
 				return
 			}
 
-			// If the html is NOT a link, and we have NO OTHER texty content, then paste the html as text
-			if (!results.some((r) => r.type === 'text' && r.subtype !== 'html') && result.data.trim()) {
-				const html = stripHtml(result.data) ?? ''
+			if (!(results as any).some((r: any) => r.type === 'text' && r.subtype !== 'html') && (result as any).data.trim()) {
+				const html = stripHtml((result as any).data) ?? ''
 				if (html) {
-					handleText(editor, stripHtml(result.data), point, results)
+					handleText(editor, html, point, results)
 					return
 				}
 			}
 
-			// If the html is NOT a link, and we have other texty content, then paste the html as a text shape
-			if (results.some((r) => r.type === 'text' && r.subtype !== 'html')) {
-				const html = stripHtml(result.data) ?? ''
+			if ((results as any).some((r: any) => r.type === 'text' && r.subtype !== 'html')) {
+				const html = stripHtml((result as any).data) ?? ''
 				if (html) {
 					editor.markHistoryStoppingPoint('paste')
 					editor.putExternalContent({
 						type: 'text',
 						text: html,
-						html: result.data,
+						html: (result as any).data,
 						point,
 						sources: results,
 					})
@@ -503,41 +442,13 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 			}
 		}
 
-		// Allow you to paste YouTube or Google Maps embeds, for example.
-		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
-			// try to find an iframe
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
-			const bodyNode = rootNode.querySelector('body')
-
-			const isSingleIframe =
-				bodyNode &&
-				Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
-				bodyNode.firstElementChild &&
-				bodyNode.firstElementChild.tagName === 'IFRAME' &&
-				bodyNode.firstElementChild.hasAttribute('src') &&
-				bodyNode.firstElementChild.getAttribute('src') !== ''
-
-			if (isSingleIframe) {
-				const src = bodyNode.firstElementChild.getAttribute('src')!
-				handleText(editor, src, point, results)
-				return
-			}
-		}
-	}
-
-	// Try to paste a link
-	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'url') {
-			pasteUrl(editor, result.data, point, results)
+		if (result.type === 'text' && (result as any).subtype === 'text' && (result as any).data.trim()) {
+			handleText(editor, (result as any).data, point, results)
 			return
 		}
-	}
 
-	// Finally, if we haven't bailed on anything yet, we can paste text content
-	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {
-			// The clipboard may include multiple text items, but we only want to paste the first one
-			handleText(editor, result.data, point, results)
+		if (result.type === 'text' && (result as any).subtype === 'url') {
+			pasteUrl(editor, (result as any).data, point, results)
 			return
 		}
 	}
@@ -547,16 +458,13 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
  * When the user copies, write the contents to local storage and to the clipboard
  *
  * @param editor - The editor instance.
- * @public
  */
 const handleNativeOrMenuCopy = async (editor: Editor) => {
 	const content = await editor.resolveAssetsInContent(
 		editor.getContentFromCurrentPage(editor.getSelectedShapeIds())
 	)
 	if (!content) {
-		if (navigator && navigator.clipboard) {
-			navigator.clipboard.writeText('')
-		}
+		if (navigator && navigator.clipboard) navigator.clipboard.writeText('')
 		return
 	}
 
@@ -568,45 +476,32 @@ const handleNativeOrMenuCopy = async (editor: Editor) => {
 		})
 	)
 
-	if (typeof navigator === 'undefined') {
-		return
-	} else {
-		// Extract the text from the clipboard
-		const textItems = content.shapes
-			.map((shape) => {
-				const util = editor.getShapeUtil(shape)
-				return util.getText(shape)
-			})
-			.filter(isDefined)
-
-		if (navigator.clipboard?.write) {
-			const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
-				type: 'text/html',
-			})
-
-			let textContent = textItems.join(' ')
+	const textItems = content.shapes
+		.map((shape) => {
+			const util = editor.getShapeUtil(shape)
+			return util.getText(shape)
+		})
+		.filter(isDefined)
 
-			// This is a bug in chrome android where it won't paste content if
-			// the text/plain content is "" so we need to always add an empty
-			// space 🤬
-			if (textContent === '') {
-				textContent = ' '
-			}
+	if (navigator.clipboard?.write) {
+		const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
+			type: 'text/html',
+		})
 
-			navigator.clipboard.write([
-				new ClipboardItem({
-					'text/html': htmlBlob,
-					// What is this second blob used for?
-					'text/plain': new Blob([textContent], { type: 'text/plain' }),
-				}),
-			])
-		} else if (navigator.clipboard.writeText) {
-			navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
-		}
+		let textContent = textItems.join(' ')
+		if (textContent === '') textContent = ' '
+
+		navigator.clipboard.write([
+			new ClipboardItem({
+				'text/html': htmlBlob,
+				'text/plain': new Blob([textContent], { type: 'text/plain' }),
+			}),
+		])
+	} else if (navigator.clipboard.writeText) {
+		navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
 	}
 }
 
-/** @public */
 export function useMenuClipboardEvents() {
 	const editor = useMaybeEditor()
 	const trackEvent = useUiEvents()
@@ -641,16 +536,12 @@ export function useMenuClipboardEvents() {
 			point?: VecLike
 		) {
 			if (!editor) return
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null) return
 
 			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
 				handlePasteFromClipboardApi({ editor, clipboardItems: data, point })
 				trackEvent('paste', { source: 'menu' })
 			} else {
-				// Read it first and then recurse, kind of weird
 				navigator.clipboard.read().then((clipboardItems) => {
 					paste(clipboardItems, source, point)
 				})
@@ -659,14 +550,9 @@ export function useMenuClipboardEvents() {
 		[editor, trackEvent]
 	)
 
-	return {
-		copy,
-		cut,
-		paste,
-	}
+	return { copy, cut, paste }
 }
 
-/** @public */
 export function useNativeClipboardEvents() {
 	const editor = useEditor()
 	const trackEvent = useUiEvents()
@@ -677,14 +563,14 @@ export function useNativeClipboardEvents() {
 
 	useEffect(() => {
 		if (!appIsFocused) return
+
 		const copy = async (e: ClipboardEvent) => {
 			if (
 				editor.getSelectedShapeIds().length === 0 ||
 				editor.getEditingShapeId() !== null ||
 				areShortcutsDisabled(editor)
-			) {
+			)
 				return
-			}
 
 			preventDefault(e)
 			await handleNativeOrMenuCopy(editor)
@@ -696,9 +582,9 @@ export function useNativeClipboardEvents() {
 				editor.getSelectedShapeIds().length === 0 ||
 				editor.getEditingShapeId() !== null ||
 				areShortcutsDisabled(editor)
-			) {
+			)
 				return
-			}
+
 			preventDefault(e)
 			await handleNativeOrMenuCopy(editor)
 			editor.deleteShapes(editor.getSelectedShapeIds())
@@ -708,7 +594,6 @@ export function useNativeClipboardEvents() {
 		let disablingMiddleClickPaste = false
 		const pointerUpHandler = (e: PointerEvent) => {
 			if (e.button === 1) {
-				// middle mouse button
 				disablingMiddleClickPaste = true
 				editor.timers.requestAnimationFrame(() => {
 					disablingMiddleClickPaste = false
@@ -722,20 +607,10 @@ export function useNativeClipboardEvents() {
 				return
 			}
 
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null || areShortcutsDisabled(editor)) return
 
-			// Where should the shapes go?
-			let point: Vec | undefined = undefined
+			let point: Vec | undefined
 			let pasteAtCursor = false
-
-			// | Shiftkey | Paste at cursor mode | Paste at point? |
-			// |    N 		|         N            |       N 				 |
-			// |    Y 		|         N            |       Y 				 |
-			// |    N 		|         Y            |       Y 				 |
-			// |    Y 		|         Y            |       N 				 |
 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
@@ -746,13 +621,7 @@ export function useNativeClipboardEvents() {
 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
 			if (navigator.clipboard?.read) {
-				// We can't read files from the filesystem using the clipboard API though - they'll
-				// just come in as the file names instead. So we'll use the clipboard event's files
-				// as a fallback - if we only got text, but do have files, we use those instead.
 				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
@@ -761,7 +630,6 @@ export function useNativeClipboardEvents() {
 						}
 					},
 					() => {
-						// if reading from the clipboard fails, try to use the event clipboard data
 						pasteFromEvent()
 					}
 				)
