
index 5ea95b92..2cce832a 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmpiq39f9ac_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmpglsov2t6_actual.txt	
@@ -32,6 +32,8 @@ const expectedPasteFileMimeTypes = [
 	'image/svg+xml',
 ] satisfies string[]
 
+const INPUTS = ['input', 'select', 'textarea']
+
 /**
  * Strip HTML tags from a string.
  * @param html - The HTML to strip.
@@ -44,47 +46,13 @@ function stripHtml(html: string) {
 	return doc.body.textContent || doc.body.innerText || ''
 }
 
-/** @public */
-export const isValidHttpURL = (url: string) => {
-	try {
-		const u = new URL(url)
-		return u.protocol === 'http:' || u.protocol === 'https:'
-	} catch {
-		return false
-	}
-}
-
-/** @public */
-const getValidHttpURLList = (url: string) => {
-	const urls = url.split(/[\n\s]/)
-	for (const url of urls) {
-		try {
-			const u = new URL(url)
-			if (!(u.protocol === 'http:' || u.protocol === 'https:')) {
-				return
-			}
-		} catch {
-			return
-		}
-	}
-	return uniq(urls)
-}
-
-/** @public */
-const isSvgText = (text: string) => {
-	return /^<svg/.test(text)
-}
-
-const INPUTS = ['input', 'select', 'textarea']
-
 /**
- * Get whether to disallow clipboard events.
+ * Get whether to disallow clipboard shortcuts.
  *
  * @internal
  */
 function areShortcutsDisabled(editor: Editor) {
 	const { activeElement } = document
-
 	return (
 		editor.menus.hasAnyOpenMenus() ||
 		(activeElement &&
@@ -98,6 +66,7 @@ function areShortcutsDisabled(editor: Editor) {
  * @param editor - The editor instance.
  * @param data - The text to paste.
  * @param point - The point at which to paste the text.
+ * @param sources - The original clipboard items.
  * @internal
  */
 const handleText = (
@@ -109,29 +78,56 @@ const handleText = (
 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
-		editor.putExternalContent({
-			type: 'svg-text',
-			text: data,
-			point,
-			sources,
-		})
+		editor.putExternalContent({ type: 'svg-text', text: data, point, sources })
 	} else {
 		editor.markHistoryStoppingPoint('paste')
-		editor.putExternalContent({
-			type: 'text',
-			text: data,
-			point,
-			sources,
-		})
+		editor.putExternalContent({ type: 'text', text: data, point, sources })
 	}
 }
 
+/**
+ * @public
+ */
+export const isValidHttpURL = (url: string) => {
+	try {
+		const u = new URL(url)
+		return u.protocol === 'http:' || u.protocol === 'https:'
+	} catch {
+		return false
+	}
+}
+
+/**
+ * @public
+ */
+const getValidHttpURLList = (url: string) => {
+	const urls = url.split(/[\n\s]/)
+	for (const u of urls) {
+		try {
+			const parsed = new URL(u)
+			if (!(parsed.protocol === 'http:' || parsed.protocol === 'https:')) {
+				return
+			}
+		} catch {
+			return
+		}
+	}
+	return uniq(urls)
+}
+
+/**
+ * @public
+ */
+const isSvgText = (text: string) => {
+	return /^<svg/.test(text)
+}
+
 /**
  * Something found on the clipboard, either through the event's clipboard data or the browser's clipboard API.
  * @internal
@@ -145,26 +141,19 @@ type ClipboardThing =
 			type: 'blob'
 			source: Promise<Blob | null>
 	  }
-	| {
-			type: 'url'
-			source: Promise<string>
-	  }
-	| {
-			type: 'html'
-			source: Promise<string>
-	  }
-	| {
-			type: 'text'
-			source: Promise<string>
-	  }
 	| {
 			type: string
 			source: Promise<string>
 	  }
 
 /**
- * Handle a paste using event clipboard data. This is the "original"
- * paste method that uses the clipboard data from the paste event.
+ * The source items to hand to external-content handlers.
+ * @internal
+ */
+type ExternalContentResult = TLExternalContentSource
+
+/**
+ * Handle a paste using event clipboard data. Uses the clipboardData from the paste event.
  * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): ClipboardThing[] = []
 
-	for (const item of Object.values(clipboardData.items)) {
-		switch (item.kind) {
-			case 'file': {
-				// files are always blobs
-				things.push({
-					type: 'file',
-					source: new Promise((r) => r(item.getAsFile())) as Promise<File | null>,
-				})
-				break
-			}
-			case 'string': {
-				// strings can be text or html
-				if (item.type === 'text/html') {
-					things.push({
-						type: 'html',
-						source: new Promise((r) => item.getAsString(r)) as Promise<string>,
-					})
-				} else if (item.type === 'text/plain') {
-					things.push({
-						type: 'text',
-						source: new Promise((r) => item.getAsString(r)) as Promise<string>,
-					})
-				} else {
-					things.push({ type: item.type, source: new Promise((r) => item.getAsString(r)) })
-				}
-				break
-			}
-		}
+	// Files from the event (e.g. Safari / Chrome),
+	for (const file of Array.from(clipboardData.files || [])) {
+		things.push({ type: 'file', source: Promise.resolve(file) })
 	}
 
-	handleClipboardThings(editor, things, point)
+	// Text / HTML
+	if (clipboardData.getData('text/html')) {
+		things.push({
+			type: 'html',
+			source: Promise.resolve(clipboardData.getData('text/html')),
+		})
+	}
+	if (clipboardData.getData('text/plain')) {
+		things.push({
+			type: 'text',
+			source: Promise.resolve(clipboardData.getData('text/plain')),
+		})
+	}
+
+	await handleClipboardThings(editor, things, point)
 }
 
 /**
  * Handle a paste using items retrieved from the Clipboard API.
  * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): VecLike
 	fallbackFiles?: File[]
 }) => {
-	// We need to populate the array of clipboard things
-	// based on the ClipboardItems from the Clipboard API.
-	// This is done in a different way than when using
-	// the clipboard data from the paste event.
-
 	const things: ClipboardThing[] = []
 
 	for (const item of clipboardItems) {
+		// Files: look for our preferred mime types in order
 		for (const type of expectedPasteFileMimeTypes) {
 			if (item.types.includes(type)) {
 				const blobPromise = item
 					.getType(type)
 					.then((blob) => FileHelpers.rewriteMimeType(blob, getCanonicalClipboardReadType(type)))
-				things.push({
-					type: 'blob',
-					source: blobPromise,
-				})
+				things.push({ type: 'blob', source: blobPromise })
 				break
 			}
 		}
 
+		// HTML
 		if (item.types.includes('text/html')) {
 			things.push({
 				type: 'html',
@@ -270,6 +243,7 @@ const handlePasteFromClipboardApi = async ({
 			})
 		}
 
+		// URI-list
 		if (item.types.includes('text/uri-list')) {
 			things.push({
 				type: 'url',
@@ -280,6 +254,7 @@ const handlePasteFromClipboardApi = async ({
 			})
 		}
 
+		// plaintext
 		if (item.types.includes('text/plain')) {
 			things.push({
 				type: 'text',
@@ -291,15 +266,14 @@ const handlePasteFromClipboardApi = async ({
 		}
 	}
 
+	// Fallback for Safari / local files: if we only got text, but do have files,
+	// use those instead.
 	if (fallbackFiles?.length && things.length === 1 && things[0].type === 'text') {
 		things.pop()
 		things.push(
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
 	} else if (fallbackFiles?.length && things.length === 0) {
-		// Files pasted in Safari from your computer don't have types, so we need to use the fallback files directly
-		// if they're available. This only works if pasted keyboard shortcuts. Pasting from the menu in Safari seems to never
-		// let you access files that are copied from your computer.
 		things.push(
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
@@ -308,193 +282,85 @@ const handlePasteFromClipboardApi = async ({
 	return await handleClipboardThings(editor, things, point)
 }
 
+/**
+ * Process clipboard items (files/blobs/text/html/url) into content.
+ * @internal
+ */
 async function handleClipboardThings(editor: Editor, things: ClipboardThing[], point?: VecLike) {
-	// 1. Handle files
-	//
-	// We need to handle files separately because if we want them to
-	// be placed next to each other, we need to create them all at once.
-
-	const files = things.filter(
-		(t) => (t.type === 'file' || t.type === 'blob') && t.source !== null
-	) as Extract<ClipboardThing, { type: 'file' } | { type: 'blob' }>[]
-
-	// Just paste the files, nothing else
-	if (files.length) {
-		if (files.length > editor.options.maxFilesAtOnce) {
+	// 1. Handle files / blobs
+	const files = things.filter((t) => (t.type === 'file' || t.type === 'blob') && t.source !== null)
+	const fileItems = await Promise.all(files.map((t) => t.source!))
+	if (fileItems.length) {
+		if (fileItems.length > editor.options.maxFilesAtOnce) {
 			throw Error('Too many files')
 		}
-		const fileBlobs = compact(await Promise.all(files.map((t) => t.source)))
-		return await pasteFiles(editor, fileBlobs, point)
+		return await pasteFiles(editor, compact(fileItems) as (File | Blob)[], point)
 	}
 
-	// 2. Generate clipboard results for non-file things
-	//
-	// Getting the source from the items is async, however they must be accessed syncronously;
-	// we can't await them in a loop. So we'll map them to promises and await them all at once,
-	// then make decisions based on what we find.
-
-	const results = await Promise.all<TLExternalContentSource>(
-		things
-			.filter((t) => t.type !== 'file')
-			.map(
-				(t) =>
-					new Promise((r) => {
-						const thing = t as Exclude<ClipboardThing, { type: 'file' } | { type: 'blob' }>
-
-						if (thing.type === 'file') {
-							r({ type: 'error', data: null, reason: 'unexpected file' })
-							return
-						}
-
-						thing.source.then((text) => {
-							// first, see if we can find tldraw content, which is JSON inside of an html comment
-							const tldrawHtmlComment = text.match(/<div data-tldraw[^>]*>(.*)<\/div>/)?.[1]
-
-							if (tldrawHtmlComment) {
-								try {
-									// If we've found tldraw content in the html string, use that as JSON
-									const jsonComment = lz.decompressFromBase64(tldrawHtmlComment)
-									if (jsonComment === null) {
-										r({
-											type: 'error',
-											data: jsonComment,
-											reason: `found tldraw data comment but could not parse base64`,
-										})
-										return
-									} else {
-										const json = JSON.parse(jsonComment)
-										if (json.type !== 'application/tldraw') {
-											r({
-												type: 'error',
-												data: json,
-												reason: `found tldraw data comment but JSON was of a different type: ${json.type}`,
-											})
-										}
-
-										if (typeof json.data === 'string') {
-											r({
-												type: 'error',
-												data: json,
-												reason:
-													'found tldraw json but data was a string instead of a TLClipboardModel object',
-											})
-											return
-										}
-
-										r({ type: 'tldraw', data: json.data })
-										return
-									}
-								} catch {
-									r({
-										type: 'error',
-										data: tldrawHtmlComment,
-										reason:
-											'found tldraw json but data was a string instead of a TLClipboardModel object',
-									})
-									return
-								}
-							} else {
-								if (thing.type === 'html') {
-									r({ type: 'text', data: text, subtype: 'html' })
-									return
-								}
-
-								if (thing.type === 'url') {
-									r({ type: 'text', data: text, subtype: 'url' })
-									return
-								}
-
-								// if we have not found a tldraw comment, Otherwise, try to parse the text as JSON directly.
-								try {
-									const json = JSON.parse(text)
-									if (json.type === 'excalidraw/clipboard') {
-										// If the clipboard contains content copied from excalidraw, then paste that
-										r({ type: 'excalidraw', data: json })
-										return
-									} else {
-										r({ type: 'text', data: text, subtype: 'json' })
-										return
-									}
-								} catch {
-									// If we could not parse the text as JSON, then it's just text
-									r({ type: 'text', data: text, subtype: 'text' })
-									return
-								}
-							}
-
-							r({ type: 'error', data: text, reason: 'unhandled case' })
-						})
-					})
-			)
+	// 2. Gather the external content results
+	const results = await Promise.all<ExternalContentResult>(
+		things.filter((t) => t.type !== 'file').map((t) => t.source.then((data) => {
+			return { type: t.type, data } as any
+		}))
 	)
 
-	// 3.
-	//
-	// Now that we know what kind of stuff we're dealing with, we can actual create some content.
-	// There are priorities here, so order matters: we've already handled images and files, which
-	// take first priority; then we want to handle tldraw content, then excalidraw content, then
-	// html content, then links, and finally text content.
-
-	// Try to paste tldraw content
+	// 3. Priority-based external content handling
+	// 3a. tldraw content
 	for (const result of results) {
 		if (result.type === 'tldraw') {
 			editor.markHistoryStoppingPoint('paste')
-			editor.putExternalContent({ type: 'tldraw', content: result.data, point })
+			editor.putExternalContent({ type: 'tldraw', content: (result as any).data, point })
 			return
 		}
 	}
 
-	// Try to paste excalidraw content
+	// 3b. excalidraw content
 	for (const result of results) {
 		if (result.type === 'excalidraw') {
 			editor.markHistoryStoppingPoint('paste')
-			editor.putExternalContent({ type: 'excalidraw', content: result.data, point })
+			editor.putExternalContent({ type: 'excalidraw', content: (result as any).data, point })
 			return
 		}
 	}
 
-	// Try to paste html content
+	// 3c. HTML paste
 	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'html') {
-			// try to find a link
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
+		if ((result as any).subtype === 'html') {
+			const htmlData = (result as any).data as string
+			const rootNode = new DOMParser().parseFromString(htmlData, 'text/html')
 			const bodyNode = rootNode.querySelector('body')
 
-			// Edge on Windows 11 home appears to paste a link as a single <a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected): 'text',
-						text: html,
-						html: result.data,
+						text: txt,
+						html: htmlData,
 						point,
 						sources: results,
 					})
@@ -502,59 +368,56 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 				}
 			}
 		}
+	}
 
-		// Allow you to paste YouTube or Google Maps embeds, for example.
-		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
-			// try to find an iframe
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
+	// 3d. iframe embeds
+	for (const result of results) {
+		if (result.type === 'text' && (result as any).subtype === 'text' && (result as any).data.startsWith('<iframe ')) {
+			const htmlData = (result as any).data as string
+			const rootNode = new DOMParser().parseFromString(htmlData, 'text/html')
 			const bodyNode = rootNode.querySelector('body')
-
 			const isSingleIframe =
 				bodyNode &&
 				Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
-				bodyNode.firstElementChild &&
-				bodyNode.firstElementChild.tagName === 'IFRAME' &&
-				bodyNode.firstElementChild.hasAttribute('src') &&
-				bodyNode.firstElementChild.getAttribute('src') !== ''
-
+				bodyNode.firstElementChild!.tagName === 'IFRAME' &&
+				bodyNode.firstElementChild!.getAttribute('src')
 			if (isSingleIframe) {
-				const src = bodyNode.firstElementChild.getAttribute('src')!
+				const src = bodyNode.firstElementChild!.getAttribute('src')!
 				handleText(editor, src, point, results)
 				return
 			}
 		}
 	}
 
-	// Try to paste a link
+	// 3e. URL-only paste
 	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'url') {
-			pasteUrl(editor, result.data, point, results)
+		if (result.type === 'text' && (result as any).subtype === 'url') {
+			pasteUrl(editor, (result as any).data, point, results)
 			return
 		}
 	}
 
-	// Finally, if we haven't bailed on anything yet, we can paste text content
+	// 3f. plain text
 	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {
-			// The clipboard may include multiple text items, but we only want to paste the first one
-			handleText(editor, result.data, point, results)
+		if (result.type === 'text' && (result as any).subtype === 'text' && (result as any).data.trim()) {
+			handleText(editor, (result as any).data, point, results)
 			return
 		}
 	}
 }
 
 /**
- * When the user copies, write the contents to local storage and to the clipboard
+ * When the user copies (native or menu), write the shapes to the clipboard.
  *
  * @param editor - The editor instance.
- * @public
+ * @internal
  */
 const handleNativeOrMenuCopy = async (editor: Editor) => {
 	const content = await editor.resolveAssetsInContent(
 		editor.getContentFromCurrentPage(editor.getSelectedShapeIds())
 	)
 	if (!content) {
-		if (navigator && navigator.clipboard) {
+		if (navigator.clipboard) {
 			navigator.clipboard.writeText('')
 		}
 		return
@@ -568,41 +431,30 @@ const handleNativeOrMenuCopy = async (editor: Editor) => {
 		})
 	)
 
-	if (typeof navigator === 'undefined') {
-		return
-	} else {
-		// Extract the text from the clipboard
-		const textItems = content.shapes
-			.map((shape) => {
-				const util = editor.getShapeUtil(shape)
-				return util.getText(shape)
-			})
-			.filter(isDefined)
-
-		if (navigator.clipboard?.write) {
-			const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
-				type: 'text/html',
-			})
-
-			let textContent = textItems.join(' ')
-
-			// This is a bug in chrome android where it won't paste content if
-			// the text/plain content is "" so we need to always add an empty
-			// space 🤬
-			if (textContent === '') {
-				textContent = ' '
-			}
+	// Extract text for plaintext fallback
+	const textItems = content.shapes
+		.map((shape) => {
+			const util = editor.getShapeUtil(shape)
+			return util.getText(shape)
+		})
+		.filter(isDefined)
 
-			navigator.clipboard.write([
-				new ClipboardItem({
-					'text/html': htmlBlob,
-					// What is this second blob used for?
-					'text/plain': new Blob([textContent], { type: 'text/plain' }),
-				}),
-			])
-		} else if (navigator.clipboard.writeText) {
-			navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
+	if (navigator.clipboard?.write) {
+		const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
+			type: 'text/html',
+		})
+		let textContent = textItems.join(' ')
+		if (textContent === '') {
+			textContent = ' '
 		}
+		navigator.clipboard.write([
+			new ClipboardItem({
+				'text/html': htmlBlob,
+				'text/plain': new Blob([textContent], { type: 'text/plain' }),
+			}),
+		])
+	} else if (navigator.clipboard.writeText) {
+		navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
 	}
 }
 
@@ -615,7 +467,6 @@ export function useMenuClipboardEvents() {
 		async function onCopy(source: TLUiEventSource) {
 			assert(editor, 'editor is required for copy')
 			if (editor.getSelectedShapeIds().length === 0) return
-
 			await handleNativeOrMenuCopy(editor)
 			trackEvent('copy', { source })
 		},
@@ -626,7 +477,6 @@ export function useMenuClipboardEvents() {
 		async function onCut(source: TLUiEventSource) {
 			if (!editor) return
 			if (editor.getSelectedShapeIds().length === 0) return
-
 			await handleNativeOrMenuCopy(editor)
 			editor.deleteShapes(editor.getSelectedShapeIds())
 			trackEvent('cut', { source })
@@ -635,49 +485,44 @@ export function useMenuClipboardEvents() {
 	)
 
 	const paste = useCallback(
-		async function onPaste(
+		function onPaste(
 			data: DataTransfer | ClipboardItem[],
 			source: TLUiEventSource,
 			point?: VecLike
 		) {
 			if (!editor) return
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null) return
 
+			// If coming from the menu's "Paste" command, `data` may be an array of ClipboardItems.
 			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
-				handlePasteFromClipboardApi({ editor, clipboardItems: data, point })
-				trackEvent('paste', { source: 'menu' })
+				handlePasteFromClipboardApi({ editor, clipboardItems: data as ClipboardItem[], point })
+				trackEvent('paste', { source })
 			} else {
-				// Read it first and then recurse, kind of weird
+				// Otherwise, try the native clipboard API
 				navigator.clipboard.read().then((clipboardItems) => {
-					paste(clipboardItems, source, point)
+					if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
+						handlePasteFromClipboardApi({ editor, clipboardItems, point })
+						trackEvent('paste', { source })
+					}
 				})
 			}
 		},
 		[editor, trackEvent]
 	)
 
-	return {
-		copy,
-		cut,
-		paste,
-	}
+	return { copy, cut, paste }
 }
 
 /** @public */
 export function useNativeClipboardEvents() {
 	const editor = useEditor()
 	const trackEvent = useUiEvents()
-
-	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [
-		editor,
-	])
+	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [editor])
 
 	useEffect(() => {
 		if (!appIsFocused) return
-		const copy = async (e: ClipboardEvent) => {
+
+		const onCopy = async (e: ClipboardEvent) => {
 			if (
 				editor.getSelectedShapeIds().length === 0 ||
 				editor.getEditingShapeId() !== null ||
@@ -685,13 +530,12 @@ export function useNativeClipboardEvents() {
 			) {
 				return
 			}
-
 			preventDefault(e)
 			await handleNativeOrMenuCopy(editor)
 			trackEvent('copy', { source: 'kbd' })
 		}
 
-		async function cut(e: ClipboardEvent) {
+		const onCut = async (e: ClipboardEvent) => {
 			if (
 				editor.getSelectedShapeIds().length === 0 ||
 				editor.getEditingShapeId() !== null ||
@@ -706,7 +550,7 @@ export function useNativeClipboardEvents() {
 		}
 
 		let disablingMiddleClickPaste = false
-		const pointerUpHandler = (e: PointerEvent) => {
+		const onPointerUp = (e: PointerEvent) => {
 			if (e.button === 1) {
 				// middle mouse button
 				disablingMiddleClickPaste = true
@@ -716,26 +560,16 @@ export function useNativeClipboardEvents() {
 			}
 		}
 
-		const paste = (e: ClipboardEvent) => {
+		const onPaste = (e: ClipboardEvent) => {
 			if (disablingMiddleClickPaste) {
 				stopEventPropagation(e)
 				return
 			}
-
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null || areShortcutsDisabled(editor)) return
 
-			// Where should the shapes go?
-			let point: Vec | undefined = undefined
+			// Determine paste location
+			let point: Vec | undefined
 			let pasteAtCursor = false
-
-			// | Shiftkey | Paste at cursor mode | Paste at point? |
-			// |    N 		|         N            |       N 				 |
-			// |    Y 		|         N            |       Y 				 |
-			// |    N 		|         Y            |       Y 				 |
-			// |    Y 		|         Y            |       N 				 |
 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
@@ -746,13 +580,8 @@ export function useNativeClipboardEvents() {
 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
+			// Prefer the async clipboard API when available
 			if (navigator.clipboard?.read) {
-				// We can't read files from the filesystem using the clipboard API though - they'll
-				// just come in as the file names instead. So we'll use the clipboard event's files
-				// as a fallback - if we only got text, but do have files, we use those instead.
 				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
@@ -761,7 +590,7 @@ export function useNativeClipboardEvents() {
 						}
 					},
 					() => {
-						// if reading from the clipboard fails, try to use the event clipboard data
+						// Fallback if the read() fails
 						pasteFromEvent()
 					}
 				)
@@ -773,16 +602,24 @@ export function useNativeClipboardEvents() {
 			trackEvent('paste', { source: 'kbd' })
 		}
 
-		document.addEventListener('copy', copy)
-		document.addEventListener('cut', cut)
-		document.addEventListener('paste', paste)
-		document.addEventListener('pointerup', pointerUpHandler)
+		document.addEventListener('copy', onCopy)
+		document.addEventListener('cut', onCut)
+		document.addEventListener('paste', onPaste)
+		document.addEventListener('pointerup', onPointerUp)
 
 		return () => {
-			document.removeEventListener('copy', copy)
-			document.removeEventListener('cut', cut)
-			document.removeEventListener('paste', paste)
-			document.removeEventListener('pointerup', pointerUpHandler)
+			document.removeEventListener('copy', onCopy)
+			document.removeEventListener('cut', onCut)
+			document.removeEventListener('paste', onPaste)
+			document.removeEventListener('pointerup', onPointerUp)
 		}
 	}, [editor, trackEvent, appIsFocused])
+}
+
+/**
+ * Whether a string starts with `<svg`
+ * @internal
+ */
+function isSvgText(text: string) {
+	return /^<svg/.test(text)
 }
\ No newline at end of file
