--- tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual)@@ -323,7 +323,10 @@ 		if (files.length > editor.options.maxFilesAtOnce) {
 			throw Error('Too many files')
 		}
-		const fileBlobs = compact(await Promise.all(files.map((t) => t.source)))
+		const fileBlobs = await Promise.all(files.map((t) => t.source!))
+		const urls = (fileBlobs.filter(Boolean) as (File | Blob)[]).map((blob) =>
+			URL.createObjectURL(blob)
+		)
 		return await pasteFiles(editor, fileBlobs, point)
 	}
 
@@ -668,15 +671,15 @@ 
 /** @public */
 export function useNativeClipboardEvents() {
-	const editor = useEditor()
+	const editor = useMaybeEditor()
 	const trackEvent = useUiEvents()
 
-	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [
+	const appIsFocused = useValue('editor.isFocused', () => editor?.getInstanceState().isFocused, [
 		editor,
 	])
 
 	useEffect(() => {
-		if (!appIsFocused) return
+		if (!editor || !appIsFocused) return
 		const copy = async (e: ClipboardEvent) => {
 			if (
 				editor.getSelectedShapeIds().length === 0 ||
@@ -746,9 +749,7 @@ 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
+			// First try to use the clipboard API:
 			if (navigator.clipboard?.read) {
 				// We can't read files from the filesystem using the clipboard API though - they'll
 				// just come in as the file names instead. So we'll use the clipboard event's files
