
index 5ea95b92..b8773a25 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmpb3xr27dk_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmphmozgcx1_actual.txt	
@@ -502,42 +502,25 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 				}
 			}
 		}
-
-		// Allow you to paste YouTube or Google Maps embeds, for example.
-		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
-			// try to find an iframe
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
-			const bodyNode = rootNode.querySelector('body')
-
-			const isSingleIframe =
-				bodyNode &&
-				Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
-				bodyNode.firstElementChild &&
-				bodyNode.firstElementChild.tagName === 'IFRAME' &&
-				bodyNode.firstElementChild.hasAttribute('src') &&
-				bodyNode.firstElementChild.getAttribute('src') !== ''
-
-			if (isSingleIframe) {
-				const src = bodyNode.firstElementChild.getAttribute('src')!
-				handleText(editor, src, point, results)
-				return
-			}
-		}
 	}
 
-	// Try to paste a link
-	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'url') {
-			pasteUrl(editor, result.data, point, results)
-			return
-		}
-	}
-
-	// Finally, if we haven't bailed on anything yet, we can paste text content
-	for (const result of results) {
-		if (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {
-			// The clipboard may include multiple text items, but we only want to paste the first one
-			handleText(editor, result.data, point, results)
+	// Allow you to paste YouTube or Google Maps embeds, for example.
+	if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
+		// try to find an iframe
+		const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
+		const bodyNode = rootNode.querySelector('body')
+
+		const isSingleIframe =
+			bodyNode &&
+			Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
+			bodyNode.firstElementChild &&
+			bodyNode.firstElementChild.tagName === 'IFRAME' &&
+			bodyNode.firstElementChild.hasAttribute('src') &&
+			bodyNode.firstElementChild.getAttribute('src') !== ''
+
+		if (isSingleIframe) {
+			const src = bodyNode.firstElementChild.getAttribute('src')!
+			handleText(editor, src, point, results)
 			return
 		}
 	}
@@ -671,9 +654,11 @@ export function useNativeClipboardEvents() {
 	const editor = useEditor()
 	const trackEvent = useUiEvents()
 
-	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [
-		editor,
-	])
+	const appIsFocused = useValue(
+		'editor.isFocused',
+		() => editor.getInstanceState().isFocused,
+		[editor]
+	)
 
 	useEffect(() => {
 		if (!appIsFocused) return
@@ -716,7 +701,7 @@ export function useNativeClipboardEvents() {
 			}
 		}
 
-		const paste = (e: ClipboardEvent) => {
+		const paste = async (e: ClipboardEvent) => {
 			if (disablingMiddleClickPaste) {
 				stopEventPropagation(e)
 				return
