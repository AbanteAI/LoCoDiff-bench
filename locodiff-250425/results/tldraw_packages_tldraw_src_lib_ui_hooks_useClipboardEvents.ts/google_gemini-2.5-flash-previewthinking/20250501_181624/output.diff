--- tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual)@@ -21,6 +21,7 @@ import { pasteFiles } from './clipboard/pasteFiles'
 import { pasteUrl } from './clipboard/pasteUrl'
 
+
 // Expected paste mime types. The earlier in this array they appear, the higher preference we give
 // them. For example, we prefer the `web image/png+tldraw` type to plain `image/png` as it does not
 // strip some of the extra metadata we write into it.
@@ -44,6 +45,7 @@ 	return doc.body.textContent || doc.body.innerText || ''
 }
 
+
 /** @public */
 export const isValidHttpURL = (url: string) => {
 	try {
@@ -88,10 +90,11 @@ 	return (
 		editor.menus.hasAnyOpenMenus() ||
 		(activeElement &&
-			((activeElement as HTMLElement).isContentEditable ||
+			(activeElement.getAttribute('contenteditable') ||
 				INPUTS.indexOf(activeElement.tagName.toLowerCase()) > -1))
 	)
 }
+
 
 /**
  * Handle text pasted into the editor.
@@ -109,10 +112,10 @@ 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
 		editor.putExternalContent({
@@ -162,6 +165,7 @@ 			source: Promise<string>
 	  }
 
+
 /**
  * Handle a paste using event clipboard data. This is the "original"
  * paste method that uses the clipboard data from the paste event.
@@ -335,7 +339,7 @@ 
 	const results = await Promise.all<TLExternalContentSource>(
 		things
-			.filter((t) => t.type !== 'file')
+			.filter((t) => t.type !== 'file' && t.type !== 'blob')
 			.map(
 				(t) =>
 					new Promise((r) => {
@@ -739,12 +743,6 @@ 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
-
-			const pasteFromEvent = () => {
-				if (e.clipboardData) {
-					handlePasteFromEventClipboardData(editor, e.clipboardData, point)
-				}
-			}
 
 			// if we can read from the clipboard API, we want to try using that first. that allows
 			// us to access most things, and doesn't strip out metadata added to tldraw's own
@@ -773,6 +771,12 @@ 			trackEvent('paste', { source: 'kbd' })
 		}
 
+		const pasteFromEvent = () => {
+			if (e.clipboardData) {
+				handlePasteFromEventClipboardData(editor, e.clipboardData, point)
+			}
+		}
+
 		document.addEventListener('copy', copy)
 		document.addEventListener('cut', cut)
 		document.addEventListener('paste', paste)
