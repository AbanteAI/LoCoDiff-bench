
index 5ea95b92..0c252673 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmpm4mpp0ut_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmp224ysfll_actual.txt	
@@ -32,18 +32,6 @@ const expectedPasteFileMimeTypes = [
 	'image/svg+xml',
 ] satisfies string[]
 
-/**
- * Strip HTML tags from a string.
- * @param html - The HTML to strip.
- * @internal
- */
-function stripHtml(html: string) {
-	// See <https://github.com/developit/preact-markup/blob/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): string) => {
 	try {
@@ -75,11 +63,22 @@ const isSvgText = (text: string) => {
 	return /^<svg/.test(text)
 }
 
+/**
+ * Strip HTML tags from a string.
+ * @param html - The HTML to strip.
+ * @internal
+ */
+function stripHtml(html: string) {
+	// See <https://github.com/developit/preact-markup/blob/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): Editor) {
@@ -109,10 +108,10 @@ const handleText = (
 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
 		editor.putExternalContent({
@@ -137,30 +136,12 @@ const handleText = (
  * @internal
  */
 type ClipboardThing =
-	| {
-			type: 'file'
-			source: Promise<File | null>
-	  }
-	| {
-			type: 'blob'
-			source: Promise<Blob | null>
-	  }
-	| {
-			type: 'url'
-			source: Promise<string>
-	  }
-	| {
-			type: 'html'
-			source: Promise<string>
-	  }
-	| {
-			type: 'text'
-			source: Promise<string>
-	  }
-	| {
-			type: string
-			source: Promise<string>
-	  }
+	| { type: 'file'; source: Promise<File | null> }
+	| { type: 'blob'; source: Promise<Blob | null> }
+	| { type: 'url'; source: Promise<string> }
+	| { type: 'html'; source: Promise<string> }
+	| { type: 'text'; source: Promise<string> }
+	| { type: string; source: Promise<string> }
 
 /**
  * Handle a paste using event clipboard data. This is the "original"
@@ -189,7 +170,6 @@ const handlePasteFromEventClipboardData = async (
 	for (const item of Object.values(clipboardData.items)) {
 		switch (item.kind) {
 			case 'file': {
-				// files are always blobs
 				things.push({
 					type: 'file',
 					source: new Promise((r) => r(item.getAsFile())) as Promise<File | null>,
@@ -197,7 +177,6 @@ const handlePasteFromEventClipboardData = async (
 				break
 			}
 			case 'string': {
-				// strings can be text or html
 				if (item.type === 'text/html') {
 					things.push({
 						type: 'html',
@@ -216,7 +195,7 @@ const handlePasteFromEventClipboardData = async (
 		}
 	}
 
-	handleClipboardThings(editor, things, point)
+	return handleClipboardThings(editor, things, point)
 }
 
 /**
@@ -226,6 +205,7 @@ const handlePasteFromEventClipboardData = async (
  * @param editor - The editor
  * @param clipboardItems - The clipboard items to handle
  * @param point - The point to paste at
+ * @param fallbackFiles - Files from DataTransfer.files to use as fallback
  * @internal
  */
 const handlePasteFromClipboardApi = async ({
@@ -239,11 +219,6 @@ const handlePasteFromClipboardApi = async ({
 	point?: VecLike
 	fallbackFiles?: File[]
 }) => {
-	// We need to populate the array of clipboard things
-	// based on the ClipboardItems from the Clipboard API.
-	// This is done in a different way than when using
-	// the clipboard data from the paste event.
-
 	const things: ClipboardThing[] = []
 
 	for (const item of clipboardItems) {
@@ -252,10 +227,7 @@ const handlePasteFromClipboardApi = async ({
 				const blobPromise = item
 					.getType(type)
 					.then((blob) => FileHelpers.rewriteMimeType(blob, getCanonicalClipboardReadType(type)))
-				things.push({
-					type: 'blob',
-					source: blobPromise,
-				})
+				things.push({ type: 'blob', source: blobPromise })
 				break
 			}
 		}
@@ -297,9 +269,6 @@ const handlePasteFromClipboardApi = async ({
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
 	} else if (fallbackFiles?.length && things.length === 0) {
-		// Files pasted in Safari from your computer don't have types, so we need to use the fallback files directly
-		// if they're available. This only works if pasted keyboard shortcuts. Pasting from the menu in Safari seems to never
-		// let you access files that are copied from your computer.
 		things.push(
 			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
 		)
@@ -310,10 +279,6 @@ const handlePasteFromClipboardApi = async ({
 
 async function handleClipboardThings(editor: Editor, things: ClipboardThing[], point?: VecLike) {
 	// 1. Handle files
-	//
-	// We need to handle files separately because if we want them to
-	// be placed next to each other, we need to create them all at once.
-
 	const files = things.filter(
 		(t) => (t.type === 'file' || t.type === 'blob') && t.source !== null
 	) as Extract<ClipboardThing, { type: 'file' } | { type: 'blob' }>[]
@@ -323,16 +288,11 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		if (files.length > editor.options.maxFilesAtOnce) {
 			throw Error('Too many files')
 		}
-		const fileBlobs = compact(await Promise.all(files.map((t) => t.source)))
+		const fileBlobs = compact(await Promise.all(files.map((t) => t.source!)))
 		return await pasteFiles(editor, fileBlobs, point)
 	}
 
 	// 2. Generate clipboard results for non-file things
-	//
-	// Getting the source from the items is async, however they must be accessed syncronously;
-	// we can't await them in a loop. So we'll map them to promises and await them all at once,
-	// then make decisions based on what we find.
-
 	const results = await Promise.all<TLExternalContentSource>(
 		things
 			.filter((t) => t.type !== 'file')
@@ -341,11 +301,6 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 					new Promise((r) => {
 						const thing = t as Exclude<ClipboardThing, { type: 'file' } | { type: 'blob' }>
 
-						if (thing.type === 'file') {
-							r({ type: 'error', data: null, reason: 'unexpected file' })
-							return
-						}
-
 						thing.source.then((text) => {
 							// first, see if we can find tldraw content, which is JSON inside of an html comment
 							const tldrawHtmlComment = text.match(/<div data-tldraw[^>]*>(.*)<\/div>/)?.[1]
@@ -404,7 +359,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 									return
 								}
 
-								// if we have not found a tldraw comment, Otherwise, try to parse the text as JSON directly.
+								// if we have not found a tldraw comment, try to parse the text as JSON directly.
 								try {
 									const json = JSON.parse(text)
 									if (json.type === 'excalidraw/clipboard') {
@@ -428,12 +383,9 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 			)
 	)
 
-	// 3.
-	//
-	// Now that we know what kind of stuff we're dealing with, we can actual create some content.
+	// 3. Now that we know what kind of stuff we're dealing with, we can actually create some content.
 	// There are priorities here, so order matters: we've already handled images and files, which
-	// take first priority; then we want to handle tldraw content, then excalidraw content, then
-	// html content, then links, and finally text content.
+	// take first priority; then tldraw content; then excalidraw content; then html content; then links; and finally text content.
 
 	// Try to paste tldraw content
 	for (const result of results) {
@@ -461,7 +413,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 			const bodyNode = rootNode.querySelector('body')
 
 			// Edge on Windows 11 home appears to paste a link as a single <a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected): Editor, things: ClipboardThing[], p
 			if (!results.some((r) => r.type === 'text' && r.subtype !== 'html') && result.data.trim()) {
 				const html = stripHtml(result.data) ?? ''
 				if (html) {
-					handleText(editor, stripHtml(result.data), point, results)
+					handleText(editor, html, point, results)
 					return
 				}
 			}
@@ -502,8 +454,10 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 				}
 			}
 		}
+	}
 
-		// Allow you to paste YouTube or Google Maps embeds, for example.
+	// Allow you to paste YouTube or Google Maps embeds, for example.
+	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
 			// try to find an iframe
 			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
@@ -536,7 +490,6 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 	// Finally, if we haven't bailed on anything yet, we can paste text content
 	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {
-			// The clipboard may include multiple text items, but we only want to paste the first one
 			handleText(editor, result.data, point, results)
 			return
 		}
@@ -568,41 +521,32 @@ const handleNativeOrMenuCopy = async (editor: Editor) => {
 		})
 	)
 
-	if (typeof navigator === 'undefined') {
-		return
-	} else {
-		// Extract the text from the clipboard
-		const textItems = content.shapes
-			.map((shape) => {
-				const util = editor.getShapeUtil(shape)
-				return util.getText(shape)
-			})
-			.filter(isDefined)
-
-		if (navigator.clipboard?.write) {
-			const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
-				type: 'text/html',
-			})
-
-			let textContent = textItems.join(' ')
+	// Extract the text from the clipboard
+	const textItems = content.shapes
+		.map((shape) => {
+			const util = editor.getShapeUtil(shape)
+			return util.getText(shape)
+		})
+		.filter(isDefined)
 
-			// This is a bug in chrome android where it won't paste content if
-			// the text/plain content is "" so we need to always add an empty
-			// space 🤬
-			if (textContent === '') {
-				textContent = ' '
-			}
+	if (navigator.clipboard?.write) {
+		const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
+			type: 'text/html',
+		})
 
-			navigator.clipboard.write([
-				new ClipboardItem({
-					'text/html': htmlBlob,
-					// What is this second blob used for?
-					'text/plain': new Blob([textContent], { type: 'text/plain' }),
-				}),
-			])
-		} else if (navigator.clipboard.writeText) {
-			navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
+		let textContent = textItems.join(' ')
+		if (textContent === '') {
+			textContent = ' '
 		}
+
+		navigator.clipboard.write([
+			new ClipboardItem({
+				'text/html': htmlBlob,
+				'text/plain': new Blob([textContent], { type: 'text/plain' }),
+			}),
+		])
+	} else if (navigator.clipboard.writeText) {
+		navigator.clipboard.writeText(`<div data-tldraw>${stringifiedClipboard}</div>`)
 	}
 }
 
@@ -635,22 +579,19 @@ export function useMenuClipboardEvents() {
 	)
 
 	const paste = useCallback(
-		async function onPaste(
+		function onPaste(
 			data: DataTransfer | ClipboardItem[],
 			source: TLUiEventSource,
 			point?: VecLike
 		) {
 			if (!editor) return
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
+			// If we're editing a shape, we would want the user's paste to go to that shape
 			if (editor.getEditingShapeId() !== null) return
 
 			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
 				handlePasteFromClipboardApi({ editor, clipboardItems: data, point })
 				trackEvent('paste', { source: 'menu' })
 			} else {
-				// Read it first and then recurse, kind of weird
 				navigator.clipboard.read().then((clipboardItems) => {
 					paste(clipboardItems, source, point)
 				})
@@ -671,9 +612,7 @@ export function useNativeClipboardEvents() {
 	const editor = useEditor()
 	const trackEvent = useUiEvents()
 
-	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [
-		editor,
-	])
+	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [editor])
 
 	useEffect(() => {
 		if (!appIsFocused) return
@@ -685,7 +624,6 @@ export function useNativeClipboardEvents() {
 			) {
 				return
 			}
-
 			preventDefault(e)
 			await handleNativeOrMenuCopy(editor)
 			trackEvent('copy', { source: 'kbd' })
@@ -722,20 +660,17 @@ export function useNativeClipboardEvents() {
 				return
 			}
 
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null || areShortcutsDisabled(editor)) return
 
 			// Where should the shapes go?
 			let point: Vec | undefined = undefined
 			let pasteAtCursor = false
 
-			// | Shiftkey | Paste at cursor mode | Paste at point? |
-			// |    N 		|         N            |       N 				 |
-			// |    Y 		|         N            |       Y 				 |
-			// |    N 		|         Y            |       Y 				 |
-			// |    Y 		|         Y            |       N 				 |
+			// | ShiftKey | Paste at cursor mode | Paste at point? |
+			// |    N     |         N            |       N        |
+			// |    Y     |         N            |       Y        |
+			// |    N     |         Y            |       Y        |
+			// |    Y     |         Y            |       N        |
 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
@@ -746,13 +681,8 @@ export function useNativeClipboardEvents() {
 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
+			// Try the clipboard API first
 			if (navigator.clipboard?.read) {
-				// We can't read files from the filesystem using the clipboard API though - they'll
-				// just come in as the file names instead. So we'll use the clipboard event's files
-				// as a fallback - if we only got text, but do have files, we use those instead.
 				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
@@ -761,7 +691,6 @@ export function useNativeClipboardEvents() {
 						}
 					},
 					() => {
-						// if reading from the clipboard fails, try to use the event clipboard data
 						pasteFromEvent()
 					}
 				)
