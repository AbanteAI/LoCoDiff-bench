
index 5ea95b92f..9ad3e596b 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmpb6y6yie8_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmptsz7dppz_actual.txt	
@@ -21,9 +21,7 @@ import { TLUiEventSource, useUiEvents } from '../context/events'
 import { pasteFiles } from './clipboard/pasteFiles'
 import { pasteUrl } from './clipboard/pasteUrl'
 
-// Expected paste mime types. The earlier in this array they appear, the higher preference we give
-// them. For example, we prefer the `web image/png+tldraw` type to plain `image/png` as it does not
-// strip some of the extra metadata we write into it.
+/** Expected paste mime types. The earlier in this array they appear, the higher preference we give. */
 const expectedPasteFileMimeTypes = [
 	TLDRAW_CUSTOM_PNG_MIME_TYPE,
 	'image/png',
@@ -32,13 +30,8 @@ const expectedPasteFileMimeTypes = [
 	'image/svg+xml',
 ] satisfies string[]
 
-/**
- * Strip HTML tags from a string.
- * @param html - The HTML to strip.
- * @internal
- */
+/** Strip HTML tags from a string. */
 function stripHtml(html: string) {
-	// See <https://github.com/developit/preact-markup/blob/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): Editor) {
 	const { activeElement } = document
-
 	return (
 		editor.menus.hasAnyOpenMenus() ||
 		(activeElement &&
@@ -95,9 +86,6 @@ function areShortcutsDisabled(editor: Editor) {
 
 /**
  * Handle text pasted into the editor.
- * @param editor - The editor instance.
- * @param data - The text to paste.
- * @param point - The point at which to paste the text.
  * @internal
  */
 const handleText = (
@@ -133,43 +121,7 @@ const handleText = (
 }
 
 /**
- * Something found on the clipboard, either through the event's clipboard data or the browser's clipboard API.
- * @internal
- */
-type ClipboardThing =
-	| {
-			type: 'file'
-			source: Promise<File | null>
-	  }
-	| {
-			type: 'blob'
-			source: Promise<Blob | null>
-	  }
-	| {
-			type: 'url'
-			source: Promise<string>
-	  }
-	| {
-			type: 'html'
-			source: Promise<string>
-	  }
-	| {
-			type: 'text'
-			source: Promise<string>
-	  }
-	| {
-			type: string
-			source: Promise<string>
-	  }
-
-/**
- * Handle a paste using event clipboard data. This is the "original"
- * paste method that uses the clipboard data from the paste event.
- * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): {
-				// files are always blobs
 				things.push({
 					type: 'file',
 					source: new Promise((r) => r(item.getAsFile())) as Promise<File | null>,
@@ -197,7 +148,6 @@ const handlePasteFromEventClipboardData = async (
 				break
 			}
 			case 'string': {
-				// strings can be text or html
 				if (item.type === 'text/html') {
 					things.push({
 						type: 'html',
@@ -221,11 +171,6 @@ const handlePasteFromEventClipboardData = async (
 
 /**
  * Handle a paste using items retrieved from the Clipboard API.
- * https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual): VecLike
 	fallbackFiles?: File[]
 }) => {
-	// We need to populate the array of clipboard things
-	// based on the ClipboardItems from the Clipboard API.
-	// This is done in a different way than when using
-	// the clipboard data from the paste event.
-
 	const things: ClipboardThing[] = []
 
 	for (const item of clipboardItems) {
@@ -252,10 +192,7 @@ const handlePasteFromClipboardApi = async ({
 				const blobPromise = item
 					.getType(type)
 					.then((blob) => FileHelpers.rewriteMimeType(blob, getCanonicalClipboardReadType(type)))
-				things.push({
-					type: 'blob',
-					source: blobPromise,
-				})
+				things.push({ type: 'blob', source: blobPromise })
 				break
 			}
 		}
@@ -263,62 +200,75 @@ const handlePasteFromClipboardApi = async ({
 		if (item.types.includes('text/html')) {
 			things.push({
 				type: 'html',
-				source: (async () => {
-					const blob = await item.getType('text/html')
-					return await FileHelpers.blobToText(blob)
-				})(),
+				source: new Promise<string>((r) =>
+					item
+						.getType('text/html')
+						.then((blob) => FileHelpers.blobToText(blob))
+						.then(r)
+				),
 			})
 		}
 
 		if (item.types.includes('text/uri-list')) {
 			things.push({
 				type: 'url',
-				source: (async () => {
-					const blob = await item.getType('text/uri-list')
-					return await FileHelpers.blobToText(blob)
-				})(),
+				source: new Promise<string>((r) =>
+					item
+						.getType('text/uri-list')
+						.then((blob) => FileHelpers.blobToText(blob))
+						.then(r)
+				),
 			})
 		}
 
 		if (item.types.includes('text/plain')) {
 			things.push({
 				type: 'text',
-				source: (async () => {
-					const blob = await item.getType('text/plain')
-					return await FileHelpers.blobToText(blob)
-				})(),
+				source: new Promise<string>((r) =>
+					item
+						.getType('text/plain')
+						.then((blob) => FileHelpers.blobToText(blob))
+						.then(r)
+				),
 			})
 		}
 	}
 
-	if (fallbackFiles?.length && things.length === 1 && things[0].type === 'text') {
+	if (fallbackFiles && things.length === 1 && things[0].type === 'text') {
 		things.pop()
 		things.push(
-			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
+			...fallbackFiles.map((f): ClipboardThing => ({
+				type: 'file',
+				source: Promise.resolve(f),
+			}))
 		)
 	} else if (fallbackFiles?.length && things.length === 0) {
-		// Files pasted in Safari from your computer don't have types, so we need to use the fallback files directly
-		// if they're available. This only works if pasted keyboard shortcuts. Pasting from the menu in Safari seems to never
-		// let you access files that are copied from your computer.
+		// Safari files pasted from computer have no types
 		things.push(
-			...fallbackFiles.map((f): ClipboardThing => ({ type: 'file', source: Promise.resolve(f) }))
+			...fallbackFiles.map((f): ClipboardThing => ({
+				type: 'file',
+				source: Promise.resolve(f),
+			}))
 		)
 	}
 
 	return await handleClipboardThings(editor, things, point)
 }
 
-async function handleClipboardThings(editor: Editor, things: ClipboardThing[], point?: VecLike) {
+/**
+ * Core processing of clipboard items.
+ * @internal
+ */
+async function handleClipboardThings(
+	editor: Editor,
+	things: ClipboardThing[],
+	point?: VecLike
+) {
 	// 1. Handle files
-	//
-	// We need to handle files separately because if we want them to
-	// be placed next to each other, we need to create them all at once.
-
 	const files = things.filter(
 		(t) => (t.type === 'file' || t.type === 'blob') && t.source !== null
 	) as Extract<ClipboardThing, { type: 'file' } | { type: 'blob' }>[]
 
-	// Just paste the files, nothing else
 	if (files.length) {
 		if (files.length > editor.options.maxFilesAtOnce) {
 			throw Error('Too many files')
@@ -327,32 +277,26 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		return await pasteFiles(editor, fileBlobs, point)
 	}
 
-	// 2. Generate clipboard results for non-file things
-	//
-	// Getting the source from the items is async, however they must be accessed syncronously;
-	// we can't await them in a loop. So we'll map them to promises and await them all at once,
-	// then make decisions based on what we find.
-
+	// 2. Generate clipboard results for nonâ€‘file things
 	const results = await Promise.all<TLExternalContentSource>(
 		things
 			.filter((t) => t.type !== 'file')
 			.map(
 				(t) =>
 					new Promise((r) => {
-						const thing = t as Exclude<ClipboardThing, { type: 'file' } | { type: 'blob' }>
-
-						if (thing.type === 'file') {
-							r({ type: 'error', data: null, reason: 'unexpected file' })
-							return
-						}
+						const thing = t as Exclude<
+							ClipboardThing,
+							{ type: 'file' } | { type: 'blob' }
+						>
 
 						thing.source.then((text) => {
-							// first, see if we can find tldraw content, which is JSON inside of an html comment
-							const tldrawHtmlComment = text.match(/<div data-tldraw[^>]*>(.*)<\/div>/)?.[1]
+							// check for tldraw comment
+							const tldrawHtmlComment = text.match(
+								/<div data-tldraw[^>]*>(.*)<\/div>/
+							)?.[1]
 
 							if (tldrawHtmlComment) {
 								try {
-									// If we've found tldraw content in the html string, use that as JSON
 									const jsonComment = lz.decompressFromBase64(tldrawHtmlComment)
 									if (jsonComment === null) {
 										r({
@@ -361,35 +305,32 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 											reason: `found tldraw data comment but could not parse base64`,
 										})
 										return
-									} else {
-										const json = JSON.parse(jsonComment)
-										if (json.type !== 'application/tldraw') {
-											r({
-												type: 'error',
-												data: json,
-												reason: `found tldraw data comment but JSON was of a different type: ${json.type}`,
-											})
-										}
-
-										if (typeof json.data === 'string') {
-											r({
-												type: 'error',
-												data: json,
-												reason:
-													'found tldraw json but data was a string instead of a TLClipboardModel object',
-											})
-											return
-										}
-
-										r({ type: 'tldraw', data: json.data })
+									}
+									const json = JSON.parse(jsonComment)
+									if (json.type !== 'application/tldraw') {
+										r({
+											type: 'error',
+											data: json,
+											reason: `found tldraw data comment but JSON was of a different type: ${json.type}`,
+										})
+										return
+									}
+									if (typeof json.data === 'string') {
+										r({
+											type: 'error',
+											data: json,
+											reason:
+												'found tldraw json but data was a string instead of a TLClipboardModel object',
+										})
 										return
 									}
+									r({ type: 'tldraw', data: json.data })
+									return
 								} catch {
 									r({
 										type: 'error',
 										data: tldrawHtmlComment,
-										reason:
-											'found tldraw json but data was a string instead of a TLClipboardModel object',
+										reason: `failed to parse tldraw comment`,
 									})
 									return
 								}
@@ -398,44 +339,32 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 									r({ type: 'text', data: text, subtype: 'html' })
 									return
 								}
-
 								if (thing.type === 'url') {
 									r({ type: 'text', data: text, subtype: 'url' })
 									return
 								}
-
-								// if we have not found a tldraw comment, Otherwise, try to parse the text as JSON directly.
+								// try JSON
 								try {
 									const json = JSON.parse(text)
 									if (json.type === 'excalidraw/clipboard') {
-										// If the clipboard contains content copied from excalidraw, then paste that
 										r({ type: 'excalidraw', data: json })
 										return
-									} else {
-										r({ type: 'text', data: text, subtype: 'json' })
-										return
 									}
+									r({ type: 'text', data: text, subtype: 'json' })
+									return
 								} catch {
-									// If we could not parse the text as JSON, then it's just text
 									r({ type: 'text', data: text, subtype: 'text' })
 									return
 								}
 							}
-
-							r({ type: 'error', data: text, reason: 'unhandled case' })
 						})
 					})
 			)
 	)
 
-	// 3.
-	//
-	// Now that we know what kind of stuff we're dealing with, we can actual create some content.
-	// There are priorities here, so order matters: we've already handled images and files, which
-	// take first priority; then we want to handle tldraw content, then excalidraw content, then
-	// html content, then links, and finally text content.
+	// 3. Paste based on priority
 
-	// Try to paste tldraw content
+	// tldraw content
 	for (const result of results) {
 		if (result.type === 'tldraw') {
 			editor.markHistoryStoppingPoint('paste')
@@ -444,7 +373,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		}
 	}
 
-	// Try to paste excalidraw content
+	// excalidraw content
 	for (const result of results) {
 		if (result.type === 'excalidraw') {
 			editor.markHistoryStoppingPoint('paste')
@@ -453,16 +382,12 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		}
 	}
 
-	// Try to paste html content
+	// html content
 	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'html') {
-			// try to find a link
 			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
 			const bodyNode = rootNode.querySelector('body')
 
-			// Edge on Windows 11 home appears to paste a link as a single <a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected): Editor, things: ClipboardThing[], p
 				return
 			}
 
-			// If the html is NOT a link, and we have NO OTHER texty content, then paste the html as text
 			if (!results.some((r) => r.type === 'text' && r.subtype !== 'html') && result.data.trim()) {
 				const html = stripHtml(result.data) ?? ''
 				if (html) {
-					handleText(editor, stripHtml(result.data), point, results)
-					return
-				}
-			}
-
-			// If the html is NOT a link, and we have other texty content, then paste the html as a text shape
-			if (results.some((r) => r.type === 'text' && r.subtype !== 'html')) {
-				const html = stripHtml(result.data) ?? ''
-				if (html) {
-					editor.markHistoryStoppingPoint('paste')
-					editor.putExternalContent({
-						type: 'text',
-						text: html,
-						html: result.data,
-						point,
-						sources: results,
-					})
-					return
+					handleText(editor, html, point, results)
 				}
+				return
 			}
 		}
+	}
 
-		// Allow you to paste YouTube or Google Maps embeds, for example.
+	// iframe embeds (e.g., YouTube, Google Maps)
+	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
-			// try to find an iframe
 			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
 			const bodyNode = rootNode.querySelector('body')
-
 			const isSingleIframe =
 				bodyNode &&
 				Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
@@ -525,7 +433,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		}
 	}
 
-	// Try to paste a link
+	// link
 	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'url') {
 			pasteUrl(editor, result.data, point, results)
@@ -533,10 +441,28 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 		}
 	}
 
-	// Finally, if we haven't bailed on anything yet, we can paste text content
+	// html with other text content â€“ create a text shape with html stored
+	for (const result of results) {
+		if (result.type === 'text' && result.subtype !== 'html') {
+			// we have at least one nonâ€‘html text source
+			editor.markHistoryStoppingPoint('paste')
+			editor.putExternalContent({
+				type: 'text',
+				text: stripHtml(results
+					.filter((r) => r.type === 'text')
+					.map((r) => (r as any).data)
+					.join(' ')),
+				html: results.find((r) => r.type === 'text' && r.subtype === 'html')?.data,
+				point,
+				sources: results,
+			})
+			return
+		}
+	}
+
+	// plain text
 	for (const result of results) {
 		if (result.type === 'text' && result.subtype === 'text' && result.data.trim()) {
-			// The clipboard may include multiple text items, but we only want to paste the first one
 			handleText(editor, result.data, point, results)
 			return
 		}
@@ -544,9 +470,7 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 }
 
 /**
- * When the user copies, write the contents to local storage and to the clipboard
- *
- * @param editor - The editor instance.
+ * Write the contents to the clipboard and local storage.
  * @public
  */
 const handleNativeOrMenuCopy = async (editor: Editor) => {
@@ -571,33 +495,23 @@ const handleNativeOrMenuCopy = async (editor: Editor) => {
 	if (typeof navigator === 'undefined') {
 		return
 	} else {
-		// Extract the text from the clipboard
-		const textItems = content.shapes
+		const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
+			type: 'text/html',
+		})
+
+		let textContent = content.shapes
 			.map((shape) => {
 				const util = editor.getShapeUtil(shape)
-				return util.getText(shape)
+				return util.getText?.(shape)
 			})
 			.filter(isDefined)
+			.join(' ')
 
 		if (navigator.clipboard?.write) {
-			const htmlBlob = new Blob([`<div data-tldraw>${stringifiedClipboard}</div>`], {
-				type: 'text/html',
-			})
-
-			let textContent = textItems.join(' ')
-
-			// This is a bug in chrome android where it won't paste content if
-			// the text/plain content is "" so we need to always add an empty
-			// space ðŸ¤¬
-			if (textContent === '') {
-				textContent = ' '
-			}
-
 			navigator.clipboard.write([
 				new ClipboardItem({
 					'text/html': htmlBlob,
-					// What is this second blob used for?
-					'text/plain': new Blob([textContent], { type: 'text/plain' }),
+					'text/plain': new Blob([textContent || ' '], { type: 'text/plain' }),
 				}),
 			])
 		} else if (navigator.clipboard.writeText) {
@@ -611,28 +525,22 @@ export function useMenuClipboardEvents() {
 	const editor = useMaybeEditor()
 	const trackEvent = useUiEvents()
 
-	const copy = useCallback(
-		async function onCopy(source: TLUiEventSource) {
-			assert(editor, 'editor is required for copy')
-			if (editor.getSelectedShapeIds().length === 0) return
+	const copy = useCallback(async function onCopy(source: TLUiEventSource) {
+		assert(editor, 'editor is required for copy')
+		if (editor.getSelectedShapeIds().length === 0) return
 
-			await handleNativeOrMenuCopy(editor)
-			trackEvent('copy', { source })
-		},
-		[editor, trackEvent]
-	)
+		await handleNativeOrMenuCopy(editor)
+		trackEvent('copy', { source })
+	}, [editor, trackEvent])
 
-	const cut = useCallback(
-		async function onCut(source: TLUiEventSource) {
-			if (!editor) return
-			if (editor.getSelectedShapeIds().length === 0) return
+	const cut = useCallback(async function onCut(source: TLUiEventSource) {
+		if (!editor) return
+		if (editor.getSelectedShapeIds().length === 0) return
 
-			await handleNativeOrMenuCopy(editor)
-			editor.deleteShapes(editor.getSelectedShapeIds())
-			trackEvent('cut', { source })
-		},
-		[editor, trackEvent]
-	)
+		await handleNativeOrMenuCopy(editor)
+		editor.deleteShapes(editor.getSelectedShapeIds())
+		trackEvent('cut', { source })
+	}, [editor, trackEvent])
 
 	const paste = useCallback(
 		async function onPaste(
@@ -641,16 +549,13 @@ export function useMenuClipboardEvents() {
 			point?: VecLike
 		) {
 			if (!editor) return
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
-			if (editor.getEditingShapeId() !== null) return
+			if (editor.getEditingShapeId() !== null || areShortcutsDisabled(editor)) return
 
 			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
 				handlePasteFromClipboardApi({ editor, clipboardItems: data, point })
 				trackEvent('paste', { source: 'menu' })
 			} else {
-				// Read it first and then recurse, kind of weird
+				// read then recurse
 				navigator.clipboard.read().then((clipboardItems) => {
 					paste(clipboardItems, source, point)
 				})
@@ -685,13 +590,12 @@ export function useNativeClipboardEvents() {
 			) {
 				return
 			}
-
 			preventDefault(e)
 			await handleNativeOrMenuCopy(editor)
 			trackEvent('copy', { source: 'kbd' })
 		}
 
-		async function cut(e: ClipboardEvent) {
+		const cut = async (e: ClipboardEvent) => {
 			if (
 				editor.getSelectedShapeIds().length === 0 ||
 				editor.getEditingShapeId() !== null ||
@@ -722,20 +626,11 @@ export function useNativeClipboardEvents() {
 				return
 			}
 
-			// If we're editing a shape, or we are focusing an editable input, then
-			// we would want the user's paste interaction to go to that element or
-			// input instead; e.g. when pasting text into a text shape's content
 			if (editor.getEditingShapeId() !== null || areShortcutsDisabled(editor)) return
 
-			// Where should the shapes go?
+			// Determine paste location
 			let point: Vec | undefined = undefined
 			let pasteAtCursor = false
-
-			// | Shiftkey | Paste at cursor mode | Paste at point? |
-			// |    N 		|         N            |       N 				 |
-			// |    Y 		|         N            |       Y 				 |
-			// |    N 		|         Y            |       Y 				 |
-			// |    Y 		|         Y            |       N 				 |
 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
@@ -746,22 +641,20 @@ export function useNativeClipboardEvents() {
 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
 			if (navigator.clipboard?.read) {
-				// We can't read files from the filesystem using the clipboard API though - they'll
-				// just come in as the file names instead. So we'll use the clipboard event's files
-				// as a fallback - if we only got text, but do have files, we use those instead.
 				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
 						if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
-							handlePasteFromClipboardApi({ editor, clipboardItems, point, fallbackFiles })
+							handlePasteFromClipboardApi({
+								editor,
+								clipboardItems,
+								point,
+								fallbackFiles,
+							})
 						}
 					},
 					() => {
-						// if reading from the clipboard fails, try to use the event clipboard data
 						pasteFromEvent()
 					}
 				)
@@ -785,4 +678,31 @@ export function useNativeClipboardEvents() {
 			document.removeEventListener('pointerup', pointerUpHandler)
 		}
 	}, [editor, trackEvent, appIsFocused])
-}
\ No newline at end of file
+}
+
+/** Types used internally */
+type ClipboardThing =
+	| {
+			type: 'file'
+			source: Promise<File | null>
+	  }
+	| {
+			type: 'blob'
+			source: Promise<Blob | null>
+	  }
+	| {
+			type: 'url'
+			source: Promise<string>
+	  }
+	| {
+			type: 'html'
+			source: Promise<string>
+	  }
+	| {
+			type: 'text'
+			source: Promise<string>
+	  }
+	| {
+			type: string
+			source: Promise<string>
+	  }
\ No newline at end of file
