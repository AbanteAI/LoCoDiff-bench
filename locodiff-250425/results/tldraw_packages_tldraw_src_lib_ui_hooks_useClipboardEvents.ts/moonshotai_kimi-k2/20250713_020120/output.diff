
index 5ea95b92f..9fb97f3e6 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmp4_u7cbll_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmpyhy7cma1_actual.txt	
@@ -78,8 +78,8 @@ const isSvgText = (text: string) => {
 const INPUTS = ['input', 'select', 'textarea']
 
 /**
- * Get whether to disallow clipboard events.
- *
+ * Get whether clipboard events are disabled.
+ * @param editor - The editor instance.
  * @internal
  */
 function areShortcutsDisabled(editor: Editor) {
@@ -109,10 +109,10 @@ const handleText = (
 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
 		editor.putExternalContent({
@@ -652,7 +652,7 @@ export function useMenuClipboardEvents() {
 			} else {
 				// Read it first and then recurse, kind of weird
 				navigator.clipboard.read().then((clipboardItems) => {
-					paste(clipboardItems, source, point)
+					onPaste(clipboardItems, source, point)
 				})
 			}
 		},
@@ -732,10 +732,10 @@ export function useNativeClipboardEvents() {
 			let pasteAtCursor = false
 
 			// | Shiftkey | Paste at cursor mode | Paste at point? |
-			// |    N 		|         N            |       N 				 |
-			// |    Y 		|         N            |       Y 				 |
-			// |    N 		|         Y            |       Y 				 |
-			// |    Y 		|         Y            |       N 				 |
+			// | 	 N 		 |         N            |       N 				 |
+			// | 	 Y 		 |         N            |       Y 				 |
+			// | 	 N 		 |         Y            |       Y 				 |
+			// | 	 Y 		 |         Y            |       N 				 |
 			if (editor.inputs.shiftKey) pasteAtCursor = true
 			if (editor.user.getIsPasteAtCursorMode()) pasteAtCursor = !pasteAtCursor
 			if (pasteAtCursor) point = editor.inputs.currentPagePoint
@@ -746,14 +746,8 @@ export function useNativeClipboardEvents() {
 				}
 			}
 
-			// if we can read from the clipboard API, we want to try using that first. that allows
-			// us to access most things, and doesn't strip out metadata added to tldraw's own
-			// copy-as-png features - so copied shapes come back in at the correct size.
+			// First try to use the clipboard API:
 			if (navigator.clipboard?.read) {
-				// We can't read files from the filesystem using the clipboard API though - they'll
-				// just come in as the file names instead. So we'll use the clipboard event's files
-				// as a fallback - if we only got text, but do have files, we use those instead.
-				const fallbackFiles = Array.from(e.clipboardData?.files || [])
 				navigator.clipboard.read().then(
 					(clipboardItems) => {
 						if (Array.isArray(clipboardItems) && clipboardItems[0] instanceof ClipboardItem) {
