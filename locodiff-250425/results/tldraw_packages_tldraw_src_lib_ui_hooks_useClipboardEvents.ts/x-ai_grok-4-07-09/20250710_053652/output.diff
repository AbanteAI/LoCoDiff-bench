
index 5ea95b92f..1515f21b3 100644
--- a/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_expectedoutput.txt (expected):tmp/tmp0khkfr2s_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_ui_hooks_useClipboardEvents.ts_extracted.txt (actual):tmp/tmp_xkw0fam_actual.txt	
@@ -109,10 +109,10 @@ const handleText = (
 	const validUrlList = getValidHttpURLList(data)
 	if (validUrlList) {
 		for (const url of validUrlList) {
-			pasteUrl(editor, url, point)
+			pasteUrl(editor, url, point, sources)
 		}
 	} else if (isValidHttpURL(data)) {
-		pasteUrl(editor, data, point)
+		pasteUrl(editor, data, point, sources)
 	} else if (isSvgText(data)) {
 		editor.markHistoryStoppingPoint('paste')
 		editor.putExternalContent({
@@ -162,6 +162,30 @@ type ClipboardThing =
 			source: Promise<string>
 	  }
 
+/**
+ * The result of processing a `ClipboardThing`.
+ * @internal
+ */
+type ClipboardResult =
+	| {
+			type: 'tldraw'
+			data: any
+	  }
+	| {
+			type: 'excalidraw'
+			data: any
+	  }
+	| {
+			type: 'text'
+			data: string
+			subtype: 'json' | 'html' | 'text' | 'url'
+	  }
+	| {
+			type: 'error'
+			data: string | null
+			reason: string
+	  }
+
 /**
  * Handle a paste using event clipboard data. This is the "original"
  * paste method that uses the clipboard data from the paste event.
@@ -226,6 +250,7 @@ const handlePasteFromEventClipboardData = async (
  * @param editor - The editor
  * @param clipboardItems - The clipboard items to handle
  * @param point - The point to paste at
+ * @param fallbackFiles - Files from a native paste event. We will use these as a fallback if the clipboard API doesn't give us any files
  * @internal
  */
 const handlePasteFromClipboardApi = async ({
@@ -501,26 +526,26 @@ async function handleClipboardThings(editor: Editor, things: ClipboardThing[], p
 					return
 				}
 			}
-		}
-
-		// Allow you to paste YouTube or Google Maps embeds, for example.
-		if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
-			// try to find an iframe
-			const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
-			const bodyNode = rootNode.querySelector('body')
 
-			const isSingleIframe =
-				bodyNode &&
-				Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
-				bodyNode.firstElementChild &&
-				bodyNode.firstElementChild.tagName === 'IFRAME' &&
-				bodyNode.firstElementChild.hasAttribute('src') &&
-				bodyNode.firstElementChild.getAttribute('src') !== ''
-
-			if (isSingleIframe) {
-				const src = bodyNode.firstElementChild.getAttribute('src')!
-				handleText(editor, src, point, results)
-				return
+			// Allow you to paste YouTube or Google Maps embeds, for example.
+			if (result.type === 'text' && result.subtype === 'text' && result.data.startsWith('<iframe ')) {
+				// try to find an iframe
+				const rootNode = new DOMParser().parseFromString(result.data, 'text/html')
+				const bodyNode = rootNode.querySelector('body')
+
+				const isSingleIframe =
+					bodyNode &&
+					Array.from(bodyNode.children).filter((el) => el.nodeType === 1).length === 1 &&
+					bodyNode.firstElementChild &&
+					bodyNode.firstElementChild.tagName === 'IFRAME' &&
+					bodyNode.firstElementChild.hasAttribute('src') &&
+					bodyNode.firstElementChild.getAttribute('src') !== ''
+
+				if (isSingleIframe) {
+					const src = bodyNode.firstElementChild.getAttribute('src')!
+					handleText(editor, src, point, results)
+					return
+				}
 			}
 		}
 	}
@@ -619,7 +644,7 @@ export function useMenuClipboardEvents() {
 			await handleNativeOrMenuCopy(editor)
 			trackEvent('copy', { source })
 		},
-		[editor, trackEvent]
+		[trackEvent]
 	)
 
 	const cut = useCallback(
@@ -631,7 +656,7 @@ export function useMenuClipboardEvents() {
 			editor.deleteShapes(editor.getSelectedShapeIds())
 			trackEvent('cut', { source })
 		},
-		[editor, trackEvent]
+		[trackEvent]
 	)
 
 	const paste = useCallback(
@@ -644,6 +669,7 @@ export function useMenuClipboardEvents() {
 			// If we're editing a shape, or we are focusing an editable input, then
 			// we would want the user's paste interaction to go to that element or
 			// input instead; e.g. when pasting text into a text shape's content
+
 			if (editor.getEditingShapeId() !== null) return
 
 			if (Array.isArray(data) && data[0] instanceof ClipboardItem) {
@@ -656,7 +682,7 @@ export function useMenuClipboardEvents() {
 				})
 			}
 		},
-		[editor, trackEvent]
+		[trackEvent]
 	)
 
 	return {
@@ -671,9 +697,11 @@ export function useNativeClipboardEvents() {
 	const editor = useEditor()
 	const trackEvent = useUiEvents()
 
-	const appIsFocused = useValue('editor.isFocused', () => editor.getInstanceState().isFocused, [
-		editor,
-	])
+	const appIsFocused = useValue<'editor.isFocused'>(
+		'editor.isFocused',
+		() => editor.getInstanceState().isFocused,
+		[editor]
+	)
 
 	useEffect(() => {
 		if (!appIsFocused) return
