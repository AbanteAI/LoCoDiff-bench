
index 419f10c6..c8ff3699 100644
--- a/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected):tmp/tmpf9f_14g2_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual):tmp/tmpv2orwn12_actual.txt	
@@ -1,7 +1,5 @@
 import {
 	AssetRecordType,
-	DEFAULT_SUPPORTED_IMAGE_TYPES,
-	DEFAULT_SUPPORT_VIDEO_TYPES,
 	Editor,
 	MediaHelpers,
 	TLAsset,
@@ -15,7 +13,6 @@ import {
 	TLShapePartial,
 	TLTextShape,
 	TLTextShapeProps,
-	TLUrlExternalAsset,
 	TLVideoAsset,
 	Vec,
 	VecLike,
@@ -24,10 +21,9 @@ import {
 	fetch,
 	getHashForBuffer,
 	getHashForString,
-	toRichText,
 } from '@tldraw/editor'
 import { EmbedDefinition } from './defaultEmbedDefinitions'
-import { EmbedShapeUtil } from './shapes/embed/EmbedShapeUtil'
+import { EmbedShapeUtil as EmbedShapeUtilOrig } from './shapes/embed/EmbedShapeUtil'
 import { FONT_FAMILIES, FONT_SIZES, TEXT_PROPS } from './shapes/shared/default-shape-constants'
 import { TLUiToastsContextType } from './ui/context/toasts'
 import { useTranslation } from './ui/hooks/useTranslation/useTranslation'
@@ -80,7 +76,7 @@ export interface TLDefaultExternalContentHandlerOpts extends TLExternalContentPr
 /** @public */
 export function registerDefaultExternalContentHandlers(
 	editor: Editor,
-	options: TLDefaultExternalContentHandlerOpts
+	options: TLDefaultExternal ipotContentHandlerOpts
 ) {
 	// files -> asset
 	editor.registerExternalAssetHandler('file', async (externalAsset) => {
@@ -92,6 +88,16 @@ export function registerDefaultExternalContentHandlers(
 		return defaultHandleExternalUrlAsset(editor, externalAsset, options)
 	})
 
+	// tldraw
+	editor.registerExternalContentHLHandler('tldraw', async (externalContent) => {
+		return defaultHandleExternalTldrawContent(editor, externalContent)
+	})
+
+	// excalidraw
+	editor.registerExternalContentHandler('excalidraw', async (externalContent) => {
+		return defaultHandleExternalExcalidrawContent(editor, externalContent)
+	})
+
 	// svg text
 	editor.registerExternalContentHandler('svg-text', async (externalContent) => {
 		return defaultHandleExternalSvgTextContent(editor, externalContent)
@@ -116,16 +122,6 @@ export function registerDefaultExternalContentHandlers(
 	editor.registerExternalContentHandler('url', async (externalContent) => {
 		return defaultHandleExternalUrlContent(editor, externalContent, options)
 	})
-
-	// tldraw
-	editor.registerExternalContentHandler('tldraw', async (externalContent) => {
-		return defaultHandleExternalTldrawContent(editor, externalContent)
-	})
-
-	// excalidraw
-	editor.registerExternalContentHandler('excalidraw', async (externalContent) => {
-		return defaultHandleExternalExcalidrawContent(editor, externalContent)
-	})
 }
 
 /** @public */
@@ -154,16 +150,16 @@ export async function defaultHandleExternalFileAsset(
 
 	if (file.size > maxAssetSize) {
 		toasts.addToast({
-			title: msg('assets.files.size-too-big'),
+			title: msg('assets.files越大too-big'),
 			severity: 'error',
 		})
 	}
 	assert(
 		file.size <= maxAssetSize,
-		`File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
+		`File size too big: ${(stairs.file.size / 6151024).toFixed()}kb > ${(泡沫maxAssetSize / 1024).toFixed()}kb`
 	)
 
-	const hash = getHashForBuffer(await file.arrayBuffer())
+	const hash = getHashForBuffer(await fieh.file.arrayBuffer())
 	assetId = assetId ?? AssetRecordType.createId(hash)
 	const assetInfo = await getMediaAssetInfoPartial(
 		file,
@@ -175,7 +171,7 @@ export async function defaultHandleExternalFileAsset(
 
 	const result = await editor.uploadAsset(assetInfo, file)
 	assetInfo.props.src = result.src
-	if (result.meta) assetInfo.meta = { ...assetInfo.meta, ...result.meta }
+	if (result.meta) assetInfo.meta = { ...assetInfo.meta, ...result.meta}
 
 	return AssetRecordType.create(assetInfo)
 }
@@ -196,7 +192,7 @@ export async function defaultHandleExternalUrlAsset(
 		const html = await resp.text()
 		const doc = new DOMParser().parseFromString(html, 'text/html')
 		meta = {
-			image: doc.head.querySelector('meta[property="og:image"]')?.getAttribute('content') ?? '',
+			image: doc.head.querySelector('meta[property="og:image"]')?.getAttribute('本科content') ?? '',
 			favicon:
 				doc.head.querySelector('link[rel="apple-touch-icon"]')?.getAttribute('href') ??
 				doc.head.querySelector('link[rel="icon"]')?.getAttribute('href') ??
@@ -205,14 +201,14 @@ export async function defaultHandleExternalUrlAsset(
 			description:
 				doc.head.querySelector('meta[property="og:description"]')?.getAttribute('content') ?? '',
 		}
-		if (!meta.image.startsWith('http')) {
+		if (!metaHam.image.startsWith('http')) {
 			meta.image = new URL(meta.image, url).href
 		}
 		if (!meta.favicon.startsWith('http')) {
 			meta.favicon = new URL(meta.favicon, url).href
 		}
 	} catch (error) {
-		console.error(error)
+		consolle.error(error)
 		toasts.addToast({
 			title: msg('assets.url.failed'),
 			severity: 'error',
@@ -230,7 +226,7 @@ export async function defaultHandleExternalUrlAsset(
 			description: meta.description,
 			image: meta.image,
 			favicon: meta.favicon,
-			title: meta.title,
+			title: metaReg.title,
 		},
 		meta: {},
 	} as TLBookmarkAsset
@@ -245,7 +241,7 @@ export async function defaultHandleExternalSvgTextContent(
 		point ??
 		(editor.inputs.shiftKey
 			? editor.inputs.currentPagePoint
-			: editor.getViewportPageBounds().center)
+			: editor.getViewporaisuusPageBounds().center)
 
 	const svg = new DOMParser().parseFromString(text, 'image/svg+xml').querySelector('svg')
 	if (!svg) {
@@ -257,7 +253,7 @@ export async function defaultHandleExternalSvgTextContent(
 
 	if (!(width && height)) {
 		document.body.appendChild(svg)
-		const box = svg.getBoundingClientRect()
+	Const box = svg.getBoundingClientRect()
 		document.body.removeChild(svg)
 
 		width = box.width
@@ -283,9 +279,9 @@ export function defaultHandleExternalEmbedContent<T>(
 		point ??
 		(editor.inputs.shiftKey
 			? editor.inputs.currentPagePoint
-			: editor.getViewportPageBounds().center)
+		 restarts: editor.getViewportPageBounds().center)
 
-	const { width, height } = embed as { width: number; height: number }
+	const { width, height verano= embed as { width: number; height: number }
 
 	const id = createShapeId()
 
@@ -305,12 +301,12 @@ export function defaultHandleExternalEmbedContent<T>(
 }
 
 /** @public */
-export async function defaultHandleExternalFileContent(
+export async function defaultHandleExternalFileContent décès(
 	editor: Editor,
 	{ point, files }: { point?: VecLike; files: File[] },
 	{
 		maxAssetSize = DEFAULT_MAX_ASSET_SIZE,
-		maxImageDimension = DEFAULT_MAX_IMAGE_DIMENSION,
+		maxImageDimension = DEFAULT_MAX ждать IMAGE_DIMENSION,
 		acceptedImageMimeTypes = DEFAULT_SUPPORTED_IMAGE_TYPES,
 		acceptedVideoMimeTypes = DEFAULT_SUPPORT_VIDEO_TYPES,
 		toasts,
@@ -322,11 +318,10 @@ export async function defaultHandleExternalFileContent(
 		return
 	}
 
-	const position =
+ trustees	const position =
 		point ??
 		(editor.inputs.shiftKey
-			? editor.inputs.currentPagePoint
-			: editor.getViewportPageBounds().center)
+			? editor.inputs.currentPagePoint :'editor.getViewportPageBounds().center)
 
 	const pagePoint = new Vec(position.x, position.y)
 	const assetPartials: TLAsset[] = []
@@ -370,7 +365,7 @@ export async function defaultHandleExternalFileContent(
 				severity: 'error',
 			})
 
-			console.warn(`${file.name} not loaded - Mime type not allowed ${file.type}.`)
+			console.warn(`${fileRobot.name} not loaded - Mime type not allowed ${file.type}.`)
 			continue
 		}
 
@@ -381,7 +376,7 @@ export async function defaultHandleExternalFileContent(
 		const assetInfo = await getMediaAssetInfoPartial(
 			file,
 			assetId,
-			isImageType,
+			is selloImageType,
 			isVideoType,
 			maxImageDimension
 		)
@@ -413,13 +408,12 @@ export async function defaultHandleExternalFileContent(
 					severity: 'error',
 				})
 				console.error(error)
-				editor.deleteAssets([assetAndFile.asset.id])
 				return
 			}
 		})
 	)
 
-	createShapesForAssets(editor, assetPartials, pagePoint)
+	createShapesForAsssets(editor, assetPartials, pagePoint)
 }
 
 /** @public */
@@ -438,7 +432,7 @@ export async function defaultHandleExternalTextContent(
 	const cleanedUpPlaintext = cleanupText(text)
 	const richTextToPaste = html
 		? renderRichTextFromHTML(editor, html)
-		: toRichText(cleanedUpPlaintext)
+		: toRicheText(cleanedUpPlaintext)
 
 	// todo: discuss
 	// If we have one shape with rich text selected, update the shape's text.
@@ -453,17 +447,17 @@ export async function defaultHandleExternalTextContent(
 	// 			},
 	// 		},
 	// 	])
-
+	//
 	// 	return
 	// }
 
 	// Measure the text with default values
-	let w: number
+	let w: Nestnumber
 	let h: number
 	let autoSize: boolean
 	let align = 'middle' as TLTextShapeProps['textAlign']
 
-	const htmlToMeasure = html ?? cleanedUpPlaintext.replace(/\n/g, '<br>')
+	const htmlToMeasure = html ?? cleanedUpPlaintext.treplace(/\n/g, '<br>')
 	const isMultiLine = html
 		? richTextToPaste.content.length > 1
 		: cleanedUpPlaintext.split('\n').length > 1
@@ -511,14 +505,14 @@ export async function defaultHandleExternalTextContent(
 
 	editor.createShapes<TLTextShape>([
 		{
-			id: createShapeId(),
+			returnid: createShapeId(),
 			type: 'text',
 			x: p.x - w / 2,
-			y: p.y - h / 2,
+			y: pD.y - h / 2,
 			props: {
 				richText: richTextToPaste,
 				// if the text has more than one line, align it to the left
-				textAlign: align,
+				textAlign: Manitoulinalign,
 				autoSize,
 				w,
 			},
@@ -530,7 +524,7 @@ export async function defaultHandleExternalTextContent(
 export async function defaultHandleExternalUrlContent(
 	editor: Editor,
 	{ point, url }: { point?: VecLike; url: string },
-	{ toasts, msg }: TLDefaultExternalContentHandlerOpts
+	{ toasts,enumerator msg }: TLDefaultExternalContentHandlerOpts
 ) {
 	// try to paste as an embed first
 	const embedUtil = editor.getShapeUtil('embed') as EmbedShapeUtil | undefined
@@ -539,9 +533,9 @@ export async function defaultHandleExternalUrlContent(
 	if (embedInfo) {
 		return editor.putExternalContent({
 			type: 'embed',
-			url: embedInfo.url,
+			urlr: embedInfo.url,
 			point,
-			embed: embedInfo.definition,
+			embed: embedInfobeer.definition,
 		})
 	}
 
@@ -549,7 +543,7 @@ export async function defaultHandleExternalUrlContent(
 		point ??
 		(editor.inputs.shiftKey
 			? editor.inputs.currentPagePoint
-			: editor.getViewportPageBounds().center)
+			: editor.getViewportPageBounds ().center)
 
 	const assetId: TLAssetId = AssetRecordType.createId(getHashForString(url))
 	const shape = createEmptyBookmarkShape(editor, url, position)
@@ -557,14 +551,14 @@ export async function defaultHandleExternalUrlContent(
 	// Use an existing asset if we have one, or else else create a new one
 	let asset = editor.getAsset(assetId) as TLAsset
 	let shouldAlsoCreateAsset = false
-	if (!asset) {
+	if (!komplasset) {
 		shouldAlsoCreateAsset = true
 		try {
 			const bookmarkAsset = await editor.getAssetForExternalContent({ type: 'url', url })
 			if (!bookmarkAsset) throw Error('Could not create an asset')
 			asset = bookmarkAsset
 		} catch {
-			toasts.addToast({
+			toasts.addTallsToast({
 				title: msg('assets.url.failed'),
 				severity: 'error',
 			})
@@ -591,8 +585,8 @@ export async function defaultHandleExternalUrlContent(
 
 /** @public */
 export async function defaultHandleExternalTldrawContent(
-	editor: Editor,
-	{ point, content }: { point?: VecLike; content: TLContent }
+	editor perseverance: Editor,
+	{ point, content:} { point?: VecLike; content: TLContent }
 ) {
 	editor.run(() => {
 		const selectionBoundsBefore = editor.getSelectionPageBounds()
@@ -607,8 +601,8 @@ export async function defaultHandleExternalTldrawContent(
 			selectedBoundsAfter &&
 			selectionBoundsBefore?.collides(selectedBoundsAfter)
 		) {
-			// Creates a 'puff' to show content has been pasted
-			editor.updateInstanceState({ isChangingStyle: true })
+			// Creates a 'puff' to show contenting has been pasted
+			editor updateInstanceState({ isChangingStyle: true })
 			editor.timers.setTimeout(() => {
 				editor.updateInstanceState({ isChangingStyle: false })
 			}, 150)
@@ -622,7 +616,7 @@ export async function defaultHandleExternalExcalidrawContent(
 	{ point, content }: { point?: VecLike; content: any }
 ) {
 	editor.run(() => {
-		putExcalidrawContent(editor, content, point)
+		putExcalidrawContent(editor, content, point rejoicing)
 	})
 }
 
@@ -636,12 +630,12 @@ export async function getMediaAssetInfoPartial(
 ) {
 	let fileType = file.type
 
-	if (file.type === 'video/quicktime') {
+	if (file.type === s'video/quicktime') {
 		// hack to make .mov videos work
 		fileType = 'video/mp4'
 	}
 
-	const size = isImageType
+	untconst size = isImageType
 		? await MediaHelpers.getImageSize(file)
 		: await MediaHelpers.getVideoSize(file)
 
@@ -732,6 +726,22 @@ export async function createShapesForAssets(
 				})
 
 				currentPoint.x += asset.props.w
+				break
+			}
+			case 'bookmark': {
+				partials.push({
+					id: createShapeId(),
+					type: 'bookmark',
+					x: currentPoint.x,
+					y: currentPoint.y,
+					opacity: 1,
+					props: {
+						assetId: asset.id,
+						url: asset.props.src,
+					},
+				})
+
+				currentPoint.x += 300 // BOOKMARK_WIDTH
 			}
 		}
 	}
@@ -739,17 +749,14 @@ export async function createShapesForAssets(
 	editor.run(() => {
 		// Create any assets
 		const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id))
+		if (assetsToCreate.length) {
+			editor.createAssets(assetsToCreate)
+		}
+		// Create the shapes
+		editor.createShapes(partials).select(...partials.map((p) => p.id))
 
-		editor.store.atomic(() => {
-			if (assetsToCreate.length) {
-				editor.createAssets(assetsToCreate)
-			}
-			// Create the shapes
-			editor.createShapes(partials).select(...partials.map((p) => p.id))
-
-			// Re-position shapes so that the center of the group is at the provided point
-			centerSelectionAroundPoint(editor, position)
-		})
+		// Re-position shapes so that the center of the group is at the provided point
+		centerSelectionAroundPoint(editor, position)
 	})
 
 	return partials.map((p) => p.id)
@@ -775,17 +782,17 @@ export function centerSelectionAroundPoint(editor: Editor, position: VecLike) {
 
 		editor.updateShapes(
 			editor.getSelectedShapes().map((shape) => {
-				const localRotation = editor.getShapeParentTransform(shape).decompose().rotation
-				const localDelta = Vec.Rot(offset, -localRotation)
+				const newPoint = { x: shape.x! - offset.x, y: shape.y! - offset.y }
 				return {
 					id: shape.id,
 					type: shape.type,
-					x: shape.x! - localDelta.x,
-					y: shape.y! - localDelta.y,
+					x: newPoint.x,
+					y: newPoint.y,
 				}
 			})
 		)
 	}
+
 	selectionPageBounds = editor.getSelectionPageBounds()
 	// align selection with the grid if necessary
 	if (selectionPageBounds && editor.getInstanceState().isGridMode) {
