
index 419f10c6..643b53d2 100644
--- a/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected):tmp/tmp2r2qx4ax_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual):tmp/tmpk6b9gues_actual.txt	
@@ -15,12 +15,12 @@ import {
 	TLShapePartial,
 	TLTextShape,
 	TLTextShapeProps,
+	TLUiToastsContextType,
 	TLUrlExternalAsset,
 	TLVideoAsset,
 	Vec,
 	VecLike,
 	assert,
-	createShapeId,
 	fetch,
 	getHashForBuffer,
 	getHashForString,
@@ -29,12 +29,11 @@ import {
 import { EmbedDefinition } from './defaultEmbedDefinitions'
 import { EmbedShapeUtil } from './shapes/embed/EmbedShapeUtil'
 import { FONT_FAMILIES, FONT_SIZES, TEXT_PROPS } from './shapes/shared/default-shape-constants'
-import { TLUiToastsContextType } from './ui/context/toasts'
 import { useTranslation } from './ui/hooks/useTranslation/useTranslation'
 import { containBoxSize } from './utils/assets/assets'
 import { putExcalidrawContent } from './utils/excalidraw/putExcalidrawContent'
-import { renderRichTextFromHTML } from './utils/text/richText'
 import { cleanupText, isRightToLeftLanguage } from './utils/text/text'
+import { renderRichTextFromHTML } from './utils/text/richText'
 
 /**
  * 5000px
@@ -51,12 +50,12 @@ export const DEFAULT_MAX_ASSET_SIZE = 10 * 1024 * 1024
 export interface TLExternalContentProps {
 	/**
 	 * The maximum dimension (width or height) of an image. Images larger than this will be rescaled
-	 * to fit. Defaults to infinity.
+	 * to fit. Defaults to DEFAULT_MAX_IMAGE_DIMENSION.
 	 */
 	maxImageDimension?: number
 	/**
 	 * The maximum size (in bytes) of an asset. Assets larger than this will be rejected. Defaults
-	 * to 10mb (10 * 1024 * 1024).
+	 * to DEFAULT_MAX_ASSET_SIZE.
 	 */
 	maxAssetSize?: number
 	/**
@@ -220,7 +219,6 @@ export async function defaultHandleExternalUrlAsset(
 		meta = { image: '', favicon: '', title: '', description: '' }
 	}
 
-	// Create the bookmark asset from the meta
 	return {
 		id: AssetRecordType.createId(getHashForString(url)),
 		typeName: 'asset',
@@ -341,7 +339,6 @@ export async function defaultHandleExternalFileContent(
 				title: msg('assets.files.size-too-big'),
 				severity: 'error',
 			})
-
 			console.warn(
 				`File size too big: ${(file.size / 1024).toFixed()}kb > ${(
 					maxAssetSize / 1024
@@ -362,7 +359,6 @@ export async function defaultHandleExternalFileContent(
 			continue
 		}
 
-		// We can only accept certain extensions (either images or a videos)
 		const acceptedTypes = [...acceptedImageMimeTypes, ...acceptedVideoMimeTypes]
 		if (!acceptedTypes.includes(file.type)) {
 			toasts.addToast({
@@ -393,19 +389,16 @@ export async function defaultHandleExternalFileContent(
 		assetsToUpdate.push({ asset: assetInfo, file, temporaryAssetPreview })
 	}
 
-	Promise.allSettled(
+	await Promise.allSettled(
 		assetsToUpdate.map(async (assetAndFile) => {
 			try {
 				const newAsset = await editor.getAssetForExternalContent({
 					type: 'file',
 					file: assetAndFile.file,
 				})
-
 				if (!newAsset) {
 					throw Error('Could not create an asset')
 				}
-
-				// Save the new asset under the old asset's id
 				editor.updateAssets([{ ...newAsset, id: assetAndFile.asset.id }])
 			} catch (error) {
 				toasts.addToast({
@@ -453,11 +446,10 @@ export async function defaultHandleExternalTextContent(
 	// 			},
 	// 		},
 	// 	])
-
+	//
 	// 	return
 	// }
 
-	// Measure the text with default values
 	let w: number
 	let h: number
 	let autoSize: boolean
@@ -468,7 +460,6 @@ export async function defaultHandleExternalTextContent(
 		? richTextToPaste.content.length > 1
 		: cleanedUpPlaintext.split('\n').length > 1
 
-	// check whether the text contains the most common characters in RTL languages
 	const isRtl = isRightToLeftLanguage(cleanedUpPlaintext)
 
 	if (isMultiLine) {
@@ -499,7 +490,6 @@ export async function defaultHandleExternalTextContent(
 		autoSize = false
 		align = isRtl ? 'end' : 'start'
 	} else {
-		// autosize is fine
 		w = rawSize.w
 		h = rawSize.h
 		autoSize = true
@@ -517,7 +507,6 @@ export async function defaultHandleExternalTextContent(
 			y: p.y - h / 2,
 			props: {
 				richText: richTextToPaste,
-				// if the text has more than one line, align it to the left
 				textAlign: align,
 				autoSize,
 				w,
@@ -532,7 +521,6 @@ export async function defaultHandleExternalUrlContent(
 	{ point, url }: { point?: VecLike; url: string },
 	{ toasts, msg }: TLDefaultExternalContentHandlerOpts
 ) {
-	// try to paste as an embed first
 	const embedUtil = editor.getShapeUtil('embed') as EmbedShapeUtil | undefined
 	const embedInfo = embedUtil?.getEmbedDefinition(url)
 
@@ -554,7 +542,6 @@ export async function defaultHandleExternalUrlContent(
 	const assetId: TLAssetId = AssetRecordType.createId(getHashForString(url))
 	const shape = createEmptyBookmarkShape(editor, url, position)
 
-	// Use an existing asset if we have one, or else else create a new one
 	let asset = editor.getAsset(assetId) as TLAsset
 	let shouldAlsoCreateAsset = false
 	if (!asset) {
@@ -607,7 +594,6 @@ export async function defaultHandleExternalTldrawContent(
 			selectedBoundsAfter &&
 			selectionBoundsBefore?.collides(selectedBoundsAfter)
 		) {
-			// Creates a 'puff' to show content has been pasted
 			editor.updateInstanceState({ isChangingStyle: true })
 			editor.timers.setTimeout(() => {
 				editor.updateInstanceState({ isChangingStyle: false })
@@ -627,66 +613,32 @@ export async function defaultHandleExternalExcalidrawContent(
 }
 
 /** @public */
-export async function getMediaAssetInfoPartial(
-	file: File,
-	assetId: TLAssetId,
-	isImageType: boolean,
-	isVideoType: boolean,
-	maxImageDimension?: number
-) {
-	let fileType = file.type
-
-	if (file.type === 'video/quicktime') {
-		// hack to make .mov videos work
-		fileType = 'video/mp4'
-	}
-
-	const size = isImageType
-		? await MediaHelpers.getImageSize(file)
-		: await MediaHelpers.getVideoSize(file)
-
-	const isAnimated = (await MediaHelpers.isAnimated(file)) || isVideoType
-
-	const assetInfo = {
-		id: assetId,
-		type: isImageType ? 'image' : 'video',
-		typeName: 'asset',
+export function createEmptyBookmarkShape(
+	editor: Editor,
+	url: string,
+	position: VecLike
+): TLBookmarkShape {
+	const partial: TLShapePartial = {
+		id: createShapeId(),
+		type: 'bookmark',
+		x: position.x - 150,
+		y: position.y - 160,
+		opacity: 1,
 		props: {
-			name: file.name,
-			src: '',
-			w: size.w,
-			h: size.h,
-			fileSize: file.size,
-			mimeType: fileType,
-			isAnimated,
+			assetId: null,
+			url,
 		},
-		meta: {},
-	} as TLImageAsset | TLVideoAsset
-
-	if (maxImageDimension && isFinite(maxImageDimension)) {
-		const size = { w: assetInfo.props.w, h: assetInfo.props.h }
-		const resizedSize = containBoxSize(size, { w: maxImageDimension, h: maxImageDimension })
-		if (size !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
-			assetInfo.props.w = resizedSize.w
-			assetInfo.props.h = resizedSize.h
-		}
 	}
 
-	return assetInfo
+	editor.run(() => {
+		editor.createShapes([partial]).select(partial.id)
+		centerSelectionAroundPoint(editor, position)
+	})
+
+	return editor.getShape(partial.id) as TLBookmarkShape
 }
 
-/**
- * A helper function for an external content handler. It creates bookmarks,
- * images or video shapes corresponding to the type of assets provided.
- *
- * @param editor - The editor instance
- *
- * @param assets - An array of asset Ids
- *
- * @param position - the position at which to create the shapes
- *
- * @public
- */
+/** @public */
 export async function createShapesForAssets(
 	editor: Editor,
 	assets: TLAsset[],
@@ -700,6 +652,21 @@ export async function createShapesForAssets(
 	for (let i = 0; i < assets.length; i++) {
 		const asset = assets[i]
 		switch (asset.type) {
+			case 'bookmark': {
+				partials.push({
+					id: createShapeId(),
+					type: 'bookmark',
+					x: currentPoint.x,
+					y: currentPoint.y,
+					opacity: 1,
+					props: {
+						assetId: asset.id,
+						url: asset.props.src,
+					},
+				})
+				currentPoint.x += 300 // BOOKMARK_WIDTH
+				break
+			}
 			case 'image': {
 				partials.push({
 					id: createShapeId(),
@@ -713,7 +680,6 @@ export async function createShapesForAssets(
 						h: asset.props.h,
 					},
 				})
-
 				currentPoint.x += asset.props.w
 				break
 			}
@@ -730,16 +696,13 @@ export async function createShapesForAssets(
 						h: asset.props.h,
 					},
 				})
-
 				currentPoint.x += asset.props.w
 			}
 		}
 	}
 
 	editor.run(() => {
-		// Create any assets
 		const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id))
-
 		editor.store.atomic(() => {
 			if (assetsToCreate.length) {
 				editor.createAssets(assetsToCreate)
@@ -755,16 +718,7 @@ export async function createShapesForAssets(
 	return partials.map((p) => p.id)
 }
 
-/**
- * Repositions selected shapes do that the center of the group is
- * at the provided position
- *
- * @param editor - The editor instance
- *
- * @param position - the point to center the shapes around
- *
- * @public
- */
+/** @public */
 export function centerSelectionAroundPoint(editor: Editor, position: VecLike) {
 	// Re-position shapes so that the center of the group is at the provided point
 	const viewportPageBounds = editor.getViewportPageBounds()
@@ -786,8 +740,8 @@ export function centerSelectionAroundPoint(editor: Editor, position: VecLike) {
 			})
 		)
 	}
-	selectionPageBounds = editor.getSelectionPageBounds()
 	// align selection with the grid if necessary
+	selectionPageBounds = editor.getSelectionPageBounds()
 	if (selectionPageBounds && editor.getInstanceState().isGridMode) {
 		const gridSize = editor.getDocumentSettings().gridSize
 		const topLeft = new Vec(selectionPageBounds.minX, selectionPageBounds.minY)
@@ -813,27 +767,50 @@ export function centerSelectionAroundPoint(editor: Editor, position: VecLike) {
 }
 
 /** @public */
-export function createEmptyBookmarkShape(
-	editor: Editor,
-	url: string,
-	position: VecLike
-): TLBookmarkShape {
-	const partial: TLShapePartial = {
-		id: createShapeId(),
-		type: 'bookmark',
-		x: position.x - 150,
-		y: position.y - 160,
-		opacity: 1,
+export async function getMediaAssetInfoPartial(
+	file: File,
+	assetId: TLAssetId,
+	isImageType: boolean,
+	isVideoType: boolean,
+	maxImageDimension?: number
+) {
+	let fileType = file.type
+
+	if (file.type === 'video/quicktime') {
+		// hack to make .mov videos work
+		fileType = 'video/mp4'
+	}
+
+	const size = isImageType
+		? await MediaHelpers.getImageSize(file)
+		: await MediaHelpers.getVideoSize(file)
+
+	const isAnimated = (await MediaHelpers.isAnimated(file)) || isVideoType
+
+	const assetInfo = {
+		id: assetId,
+		type: isImageType ? 'image' : 'video',
+		typeName: 'asset',
 		props: {
-			assetId: null,
-			url,
+			name: file.name,
+			src: '',
+			w: size.w,
+			h: size.h,
+			fileSize: file.size,
+			mimeType: fileType,
+			isAnimated,
 		},
-	}
+		meta: {},
+	} as TLImageAsset | TLVideoAsset
 
-	editor.run(() => {
-		editor.createShapes([partial]).select(partial.id)
-		centerSelectionAroundPoint(editor, position)
-	})
+	if (maxImageDimension && isFinite(maxImageDimension)) {
+		const sizeBox = { w: assetInfo.props.w, h: assetInfo.props.h }
+		const resizedSize = containBoxSize(sizeBox, { w: maxImageDimension, h: maxImageDimension })
+		if (sizeBox !== resizedSize && MediaHelpers.isStaticImageType(fileType)) {
+			assetInfo.props.w = resizedSize.w
+			assetInfo.props.h = resizedSize.h
+		}
+	}
 
-	return editor.getShape(partial.id) as TLBookmarkShape
+	return assetInfo
 }
\ No newline at end of file
