--- tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual)@@ -3,6 +3,8 @@ 	DEFAULT_SUPPORTED_IMAGE_TYPES,
 	DEFAULT_SUPPORT_VIDEO_TYPES,
 	Editor,
+	fetch,
+	FileHelpers,
 	MediaHelpers,
 	TLAsset,
 	TLAssetId,
@@ -21,7 +23,6 @@ 	VecLike,
 	assert,
 	createShapeId,
-	fetch,
 	getHashForBuffer,
 	getHashForString,
 	toRichText,
@@ -664,9 +665,9 @@ 	} as TLImageAsset | TLVideoAsset
 
 	if (maxImageDimension && isFinite(maxImageDimension)) {
-		const size = { w: assetInfo.props.w, h: assetInfo.props.h }
-		const resizedSize = containBoxSize(size, { w: maxImageDimension, h: maxImageDimension })
-		if (size !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
+		const sizeInner = { w: assetInfo.props.w, h: assetInfo.props.h }
+		const resizedSize = containBoxSize(sizeInner, { w: maxImageDimension, h: maxImageDimension })
+		if (sizeInner !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
 			assetInfo.props.w = resizedSize.w
 			assetInfo.props.h = resizedSize.h
 		}
@@ -687,11 +688,7 @@  *
  * @public
  */
-export async function createShapesForAssets(
-	editor: Editor,
-	assets: TLAsset[],
-	position: VecLike
-): Promise<TLShapeId[]> {
+export async function createShapesForAssets(editor: Editor, assets: TLAsset[], position: VecLike): Promise<TLShapeId[]> {
 	if (!assets.length) return []
 
 	const currentPoint = Vec.From(position)
@@ -732,6 +729,7 @@ 				})
 
 				currentPoint.x += asset.props.w
+				break
 			}
 		}
 	}
