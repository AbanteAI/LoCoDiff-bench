
index 419f10c6..80a2baba 100644
--- a/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected):tmp/tmptndv288a_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual):tmp/tmpavu10s9g_actual.txt	
@@ -136,7 +136,6 @@ export async function defaultHandleExternalFileAsset(
 		acceptedImageMimeTypes = DEFAULT_SUPPORTED_IMAGE_TYPES,
 		acceptedVideoMimeTypes = DEFAULT_SUPPORT_VIDEO_TYPES,
 		maxAssetSize = DEFAULT_MAX_ASSET_SIZE,
-		maxImageDimension = DEFAULT_MAX_IMAGE_DIMENSION,
 		toasts,
 		msg,
 	}: TLDefaultExternalContentHandlerOpts
@@ -170,7 +169,7 @@ export async function defaultHandleExternalFileAsset(
 		assetId,
 		isImageType,
 		isVideoType,
-		maxImageDimension
+		DEFAULT_MAX_IMAGE_DIMENSION
 	)
 
 	const result = await editor.uploadAsset(assetInfo, file)
@@ -440,29 +439,6 @@ export async function defaultHandleExternalTextContent(
 		? renderRichTextFromHTML(editor, html)
 		: toRichText(cleanedUpPlaintext)
 
-	// todo: discuss
-	// If we have one shape with rich text selected, update the shape's text.
-	// const onlySelectedShape = editor.getOnlySelectedShape()
-	// if (onlySelectedShape && 'richText' in onlySelectedShape.props) {
-	// 	editor.updateShapes([
-	// 		{
-	// 			id: onlySelectedShape.id,
-	// 			type: onlySelectedShape.type,
-	// 			props: {
-	// 				richText: richTextToPaste,
-	// 			},
-	// 		},
-	// 	])
-
-	// 	return
-	// }
-
-	// Measure the text with default values
-	let w: number
-	let h: number
-	let autoSize: boolean
-	let align = 'middle' as TLTextShapeProps['textAlign']
-
 	const htmlToMeasure = html ?? cleanedUpPlaintext.replace(/\n/g, '<br>')
 	const isMultiLine = html
 		? richTextToPaste.content.length > 1
@@ -641,9 +617,7 @@ export async function getMediaAssetInfoPartial(
 		fileType = 'video/mp4'
 	}
 
-	const size = isImageType
-		? await MediaHelpers.getImageSize(file)
-		: await MediaHelpers.getVideoSize(file)
+	const size = isImageType ? await MediaHelpers.getImageSize(file) : await MediaHelpers.getVideoSize(file)
 
 	const isAnimated = (await MediaHelpers.isAnimated(file)) || isVideoType
 
