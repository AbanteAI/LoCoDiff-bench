
index 419f10c6..007efb2a 100644
--- a/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected):tmp/tmpuzoi4nd7_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual):tmp/tmpvqv8o6lr_actual.txt	
@@ -675,86 +675,6 @@ export async function getMediaAssetInfoPartial(
 	return assetInfo
 }
 
-/**
- * A helper function for an external content handler. It creates bookmarks,
- * images or video shapes corresponding to the type of assets provided.
- *
- * @param editor - The editor instance
- *
- * @param assets - An array of asset Ids
- *
- * @param position - the position at which to create the shapes
- *
- * @public
- */
-export async function createShapesForAssets(
-	editor: Editor,
-	assets: TLAsset[],
-	position: VecLike
-): Promise<TLShapeId[]> {
-	if (!assets.length) return []
-
-	const currentPoint = Vec.From(position)
-	const partials: TLShapePartial[] = []
-
-	for (let i = 0; i < assets.length; i++) {
-		const asset = assets[i]
-		switch (asset.type) {
-			case 'image': {
-				partials.push({
-					id: createShapeId(),
-					type: 'image',
-					x: currentPoint.x,
-					y: currentPoint.y,
-					opacity: 1,
-					props: {
-						assetId: asset.id,
-						w: asset.props.w,
-						h: asset.props.h,
-					},
-				})
-
-				currentPoint.x += asset.props.w
-				break
-			}
-			case 'video': {
-				partials.push({
-					id: createShapeId(),
-					type: 'video',
-					x: currentPoint.x,
-					y: currentPoint.y,
-					opacity: 1,
-					props: {
-						assetId: asset.id,
-						w: asset.props.w,
-						h: asset.props.h,
-					},
-				})
-
-				currentPoint.x += asset.props.w
-			}
-		}
-	}
-
-	editor.run(() => {
-		// Create any assets
-		const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id))
-
-		editor.store.atomic(() => {
-			if (assetsToCreate.length) {
-				editor.createAssets(assetsToCreate)
-			}
-			// Create the shapes
-			editor.createShapes(partials).select(...partials.map((p) => p.id))
-
-			// Re-position shapes so that the center of the group is at the provided point
-			centerSelectionAroundPoint(editor, position)
-		})
-	})
-
-	return partials.map((p) => p.id)
-}
-
 /**
  * Repositions selected shapes do that the center of the group is
  * at the provided position
@@ -836,4 +756,84 @@ export function createEmptyBookmarkShape(
 	})
 
 	return editor.getShape(partial.id) as TLBookmarkShape
+}
+
+/**
+ * A helper function for an external content handler. It creates bookmarks,
+ * images or video shapes corresponding to the type of assets provided.
+ *
+ * @param editor - The editor instance
+ *
+ * @param assets - An array of asset Ids
+ *
+ * @param position - the position at which to create the shapes
+ *
+ * @public
+ */
+export async function createShapesForAssets(
+	editor: Editor,
+	assets: TLAsset[],
+	position: VecLike
+): Promise<TLShapeId[]> {
+	if (!assets.length) return []
+
+	const currentPoint = Vec.From(position)
+	const partials: TLShapePartial[] = []
+
+	for (let i = 0; i < assets.length; i++) {
+		const asset = assets[i]
+		switch (asset.type) {
+			case 'image': {
+				partials.push({
+					id: createShapeId(),
+					type: 'image',
+					x: currentPoint.x,
+					y: currentPoint.y,
+					opacity: 1,
+					props: {
+						assetId: asset.id,
+						w: asset.props.w,
+						h: asset.props.h,
+					},
+				})
+
+				currentPoint.x += asset.props.w
+				break
+			}
+			case 'video': {
+				partials.push({
+					id: createShapeId(),
+					type: 'video',
+					x: currentPoint.x,
+					y: currentPoint.y,
+					opacity: 1,
+					props: {
+						assetId: asset.id,
+						w: asset.props.w,
+						h: asset.props.h,
+					},
+				})
+
+				currentPoint.x += asset.props.w
+			}
+		}
+	}
+
+	editor.run(() => {
+		// Create any assets
+		const assetsToCreate = assets.filter((asset) => !editor.getAsset(asset.id))
+
+		editor.store.atomic(() => {
+			if (assetsToCreate.length) {
+				editor.createAssets(assetsToCreate)
+			}
+			// Create the shapes
+			editor.createShapes(partials).select(...partials.map((p) => p.id))
+
+			// Re-position shapes so that the center of the group is at the provided point
+			centerSelectionAroundPoint(editor, position)
+		})
+	})
+
+	return partials.map((p) => p.id)
 }
\ No newline at end of file
