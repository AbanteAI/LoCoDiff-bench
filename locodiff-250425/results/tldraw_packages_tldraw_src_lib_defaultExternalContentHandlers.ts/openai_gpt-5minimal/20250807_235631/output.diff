
index 419f10c61..b379161f9 100644
--- a/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_expectedoutput.txt (expected):tmp/tmprhm_mxho_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_defaultExternalContentHandlers.ts_extracted.txt (actual):tmp/tmptnkdkqwq_actual.txt	
@@ -343,9 +343,7 @@ export async function defaultHandleExternalFileContent(
 			})
 
 			console.warn(
-				`File size too big: ${(file.size / 1024).toFixed()}kb > ${(
-					maxAssetSize / 1024
-				).toFixed()}kb`
+				`File size too big: ${(file.size / 1024).toFixed()}kb > ${(maxAssetSize / 1024).toFixed()}kb`
 			)
 			continue
 		}
@@ -626,55 +624,6 @@ export async function defaultHandleExternalExcalidrawContent(
 	})
 }
 
-/** @public */
-export async function getMediaAssetInfoPartial(
-	file: File,
-	assetId: TLAssetId,
-	isImageType: boolean,
-	isVideoType: boolean,
-	maxImageDimension?: number
-) {
-	let fileType = file.type
-
-	if (file.type === 'video/quicktime') {
-		// hack to make .mov videos work
-		fileType = 'video/mp4'
-	}
-
-	const size = isImageType
-		? await MediaHelpers.getImageSize(file)
-		: await MediaHelpers.getVideoSize(file)
-
-	const isAnimated = (await MediaHelpers.isAnimated(file)) || isVideoType
-
-	const assetInfo = {
-		id: assetId,
-		type: isImageType ? 'image' : 'video',
-		typeName: 'asset',
-		props: {
-			name: file.name,
-			src: '',
-			w: size.w,
-			h: size.h,
-			fileSize: file.size,
-			mimeType: fileType,
-			isAnimated,
-		},
-		meta: {},
-	} as TLImageAsset | TLVideoAsset
-
-	if (maxImageDimension && isFinite(maxImageDimension)) {
-		const size = { w: assetInfo.props.w, h: assetInfo.props.h }
-		const resizedSize = containBoxSize(size, { w: maxImageDimension, h: maxImageDimension })
-		if (size !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
-			assetInfo.props.w = resizedSize.w
-			assetInfo.props.h = resizedSize.h
-		}
-	}
-
-	return assetInfo
-}
-
 /**
  * A helper function for an external content handler. It creates bookmarks,
  * images or video shapes corresponding to the type of assets provided.
@@ -836,4 +785,53 @@ export function createEmptyBookmarkShape(
 	})
 
 	return editor.getShape(partial.id) as TLBookmarkShape
+}
+
+/** @public */
+export async function getMediaAssetInfoPartial(
+	file: File,
+	assetId: TLAssetId,
+	isImageType: boolean,
+	isVideoType: boolean,
+	maxImageDimension?: number
+) {
+	let fileType = file.type
+
+	if (file.type === 'video/quicktime') {
+		// hack to make .mov videos work
+		fileType = 'video/mp4'
+	}
+
+	const size = isImageType
+		? await MediaHelpers.getImageSize(file)
+		: await MediaHelpers.getVideoSize(file)
+
+	const isAnimated = (await MediaHelpers.isAnimated(file)) || isVideoType
+
+	const assetInfo = {
+		id: assetId,
+		type: isImageType ? 'image' : 'video',
+		typeName: 'asset',
+		props: {
+			name: file.name,
+			src: '',
+			w: size.w,
+			h: size.h,
+			fileSize: file.size,
+			mimeType: fileType,
+			isAnimated,
+		},
+		meta: {},
+	} as TLImageAsset | TLVideoAsset
+
+	if (maxImageDimension && isFinite(maxImageDimension)) {
+		const s = { w: assetInfo.props.w, h: assetInfo.props.h }
+		const resizedSize = containBoxSize(s, { w: maxImageDimension, h: maxImageDimension })
+		if (s !== resizedSize && MediaHelpers.isStaticImageType(file.type)) {
+			assetInfo.props.w = resizedSize.w
+			assetInfo.props.h = resizedSize.h
+		}
+	}
+
+	return assetInfo
 }
\ No newline at end of file
