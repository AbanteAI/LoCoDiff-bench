
index 6405bedb..bf9c9001 100644
--- a/ghostty_src_apprt_gtk_Tab.zig_expectedoutput.txt (expected):tmp/tmpu_9l4i_1_expected.txt	
+++ b/ghostty_src_apprt_gtk_Tab.zig_extracted.txt (actual):tmp/tmp71wpqi4y_actual.txt	
@@ -22,7 +22,6 @@ const log = std.log.scoped(.gtk);
 
 pub const GHOSTTY_TAB = "ghostty_tab";
 
-/// The window that owns this tab.
 window: *Window,
 
 /// The tab label. The tab label is the text that appears on the tab.
@@ -48,8 +47,6 @@ pub fn create(alloc: Allocator, window: *Window, parent_: ?*CoreSurface) !*Tab {
     return tab;
 }
 
-/// Initialize the tab, create a surface, and add it to the window. "self" needs
-/// to be a stable pointer, since it is used for GTK events.
 pub fn init(self: *Tab, window: *Window, parent_: ?*CoreSurface) !void {
     self.* = .{
         .window = window,
@@ -98,18 +95,17 @@ pub fn init(self: *Tab, window: *Window, parent_: ?*CoreSurface) !void {
     surface.grabFocus();
 }
 
-/// Deinits tab by deiniting child elem.
-pub fn deinit(self: *Tab, alloc: Allocator) void {
-    self.elem.deinit(alloc);
-}
-
 /// Deinit and deallocate the tab.
 pub fn destroy(self: *Tab, alloc: Allocator) void {
     self.deinit(alloc);
     alloc.destroy(self);
 }
 
-// TODO: move this
+/// Deinits tab by deiniting child elem.
+pub fn deinit(self: *Tab, alloc: Allocator) void {
+    self.elem.deinit(alloc);
+}
+
 /// Replace the surface element that this tab is showing.
 pub fn replaceElem(self: *Tab, elem: Surface.Container.Elem) void {
     // Remove our previous widget
@@ -120,19 +116,6 @@ pub fn replaceElem(self: *Tab, elem: Surface.Container.Elem) void {
     self.elem = elem;
 }
 
-pub fn setTitleText(self: *Tab, title: [:0]const u8) void {
-    self.window.notebook.setTabTitle(self, title);
-}
-
-pub fn setTooltipText(self: *Tab, tooltip: [:0]const u8) void {
-    self.window.notebook.setTabTooltip(self, tooltip);
-}
-
-/// Remove this tab from the window.
-pub fn remove(self: *Tab) void {
-    self.window.closeTab(self);
-}
-
 /// Helper function to check if any surface in the split hierarchy needs close confirmation
 fn needsConfirm(elem: Surface.Container.Elem) bool {
     return switch (elem) {
@@ -161,11 +144,22 @@ pub fn closeWithConfirmation(tab: *Tab) void {
     }
 }
 
+pub fn setTitleText(self: *Tab, title: [:0]const u8) void {
+    self.window.notebook.setTabTitle(self, title);
+}
+
+pub fn setTooltipText(self: *Tab, tooltip: [:0]const u8) void {
+    self.window.notebook.setTabTooltip(self, tooltip);
+}
+
+/// Remove this tab from the window.
+pub fn remove(self: *Tab) void {
+    self.window.closeTab(self);
+}
+
 fn gtkDestroy(_: *gtk.Box, self: *Tab) callconv(.C) void {
     log.debug("tab box destroy", .{});
 
-    const alloc = self.window.app.core_app.alloc;
-
     // When our box is destroyed, we want to destroy our tab, too.
-    self.destroy(alloc);
+    self.destroy(self.window.app.core_app.alloc);
 }
\ No newline at end of file
