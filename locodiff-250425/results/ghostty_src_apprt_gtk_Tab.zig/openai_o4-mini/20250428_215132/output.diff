--- ghostty_src_apprt_gtk_Tab.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_gtk_Tab.zig_extracted.txt (actual)@@ -29,8 +29,7 @@ label_text: *gtk.Label,
 
 /// We'll put our children into this box instead of packing them
-/// directly, so that we can send the box into `c.g_signal_connect_data`
-/// for the close button
+/// directly, so that we can send the box into signals for the close button
 box: *gtk.Box,
 
 /// The element of this tab so that we can handle splits and so on.
@@ -48,8 +47,6 @@     return tab;
 }
 
-/// Initialize the tab, create a surface, and add it to the window. "self" needs
-/// to be a stable pointer, since it is used for GTK events.
 pub fn init(self: *Tab, window: *Window, parent_: ?*CoreSurface) !void {
     self.* = .{
         .window = window,
@@ -70,9 +67,7 @@     self.box = box;
 
     // Create the initial surface since all tabs start as a single non-split
-    var surface = try Surface.create(window.app.core_app.alloc, window.app, .{
-        .parent = parent_,
-    });
+    var surface = try Surface.create(window.app.core_app.alloc, window.app, .{ .parent = parent_ });
     errdefer surface.unref();
     surface.container = .{ .tab_ = self };
     self.elem = .{ .surface = surface };
@@ -98,7 +93,7 @@     surface.grabFocus();
 }
 
-/// Deinits tab by deiniting child elem.
+/// Deinit child elements of the tab.
 pub fn deinit(self: *Tab, alloc: Allocator) void {
     self.elem.deinit(alloc);
 }
@@ -109,7 +104,6 @@     alloc.destroy(self);
 }
 
-// TODO: move this
 /// Replace the surface element that this tab is showing.
 pub fn replaceElem(self: *Tab, elem: Surface.Container.Elem) void {
     // Remove our previous widget
@@ -133,7 +127,6 @@     self.window.closeTab(self);
 }
 
-/// Helper function to check if any surface in the split hierarchy needs close confirmation
 fn needsConfirm(elem: Surface.Container.Elem) bool {
     return switch (elem) {
         .surface => |s| s.core_surface.needsConfirmQuit(),
@@ -153,7 +146,6 @@                 tab.remove();
                 return;
             }
-
             CloseDialog.show(.{ .tab = tab }) catch |err| {
                 log.err("failed to open close dialog={}", .{err});
             };
@@ -164,8 +156,7 @@ fn gtkDestroy(_: *gtk.Box, self: *Tab) callconv(.C) void {
     log.debug("tab box destroy", .{});
 
+    // When our box is destroyed, we want to destroy our tab, too.
     const alloc = self.window.app.core_app.alloc;
-
-    // When our box is destroyed, we want to destroy our tab, too.
     self.destroy(alloc);
 }