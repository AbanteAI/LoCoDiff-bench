--- ghostty_src_apprt_gtk_Tab.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_gtk_Tab.zig_extracted.txt (actual)@@ -16,6 +16,7 @@ 
 const Surface = @import("Surface.zig");
 const Window = @import("Window.zig");
+const c = @import("c.zig").c;
 const CloseDialog = @import("CloseDialog.zig");
 
 const log = std.log.scoped(.gtk);
@@ -77,8 +78,9 @@     surface.container = .{ .tab_ = self };
     self.elem = .{ .surface = surface };
 
+    // FIXME: when Tab.zig is converted to zig-gobject
     // Add Surface to the Tab
-    self.box.append(surface.primaryWidget());
+    c.gtk_box_append(self.box, @ptrCast(@alignCast(surface.primaryWidget())));
 
     // Set the userdata of the box to point to this tab.
     self.box.as(gobject.Object).setData(GHOSTTY_TAB, self);
@@ -109,14 +111,14 @@     alloc.destroy(self);
 }
 
-// TODO: move this
 /// Replace the surface element that this tab is showing.
 pub fn replaceElem(self: *Tab, elem: Surface.Container.Elem) void {
     // Remove our previous widget
-    self.box.remove(self.elem.widget());
+    // FIXME: when Tab.zig is converted to zig-gobject
+    c.gtk_box_remove(self.box, @ptrCast(@alignCast(self.elem.widget())));
 
     // Add our new one
-    self.box.append(elem.widget());
+    c.gtk_box_append(self.box, @ptrCast(@alignCast(elem.widget())));
     self.elem = elem;
 }
 
@@ -161,6 +163,17 @@     }
 }
 
+fn gtkTabCloseConfirmation(
+    alert: *c.GtkMessageDialog,
+    response: c.gint,
+    ud: ?*anyopaque,
+) callconv(.C) void {
+    const tab: *Tab = @ptrCast(@alignCast(ud));
+    c.gtk_window_destroy(@ptrCast(alert));
+    if (response != c.GTK_RESPONSE_YES) return;
+    tab.remove();
+}
+
 fn gtkDestroy(_: *gtk.Box, self: *Tab) callconv(.C) void {
     log.debug("tab box destroy", .{});
 
