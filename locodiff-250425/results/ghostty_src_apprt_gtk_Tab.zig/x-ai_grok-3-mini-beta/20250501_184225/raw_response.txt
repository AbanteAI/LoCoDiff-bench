```zig
const Tab = @This();

const std = @import("std");
const Allocator = std.mem.Allocator;
const assert = std.debug.assert;

const font = @import("../../font/main.zig");
const input = @import("../../input.zig");
const CoreSurface = @import("../../Surface.zig");

const Surface = @import("Surface.zig");
const Window = @import("Window.zig");
const c = @import("c.zig").c;
const adwaita = @import("adwaita.zig");
const CloseDialog = @import("CloseDialog.zig");

const log = std.log.scoped(.gtk);

pub const GHOSTTY_TAB = "ghostty_tab";

window: *Window,

label_text: *c.GtkLabel,

box: *c.GtkBox,

elem: Surface.Container.Elem,

focus_child: ?*Surface,

pub fn create(alloc: Allocator, window: *Window, parent_: ?*CoreSurface) !*Tab {
    var tab = try alloc.create(Tab);
    errdefer alloc.destroy(tab);
    try tab.init(window, parent_);
    return tab;
}

pub fn init(self: *Tab, window: *Window, parent_: ?*CoreSurface) !void {
    self.* = .{
        .window = window,
        .label_text = undefined,
        .box = undefined,
        .elem = undefined,
        .focus_child = null,
    };

    const box = c.gtk_box_new(c.GTK_ORIENTATION_VERTICAL, 0);
    c.gtk_widget_set_hexpand(box, 1);
    c.gtk_widget_set_vexpand(box, 1);
    self.box = @ptrCast(box);

    var surface = try Surface.create(window.app.core_app.alloc, window.app, .{
        .parent = parent_,
    });
    errdefer surface.unref();
    surface.container = .{ .tab_ = self };
    self.elem = .{ .surface = surface };

    c.gtk_box_append(self.box, @ptrCast(@alignCast(surface.primaryWidget())));

    c.g_object_set_data(@ptrCast(box), GHOSTTY_TAB, self);
    window.notebook.addTab(self, "Ghostty");

    _ = c.g_signal_connect_data(box, "destroy", c.G_CALLBACK(&gtkDestroy), self, null, c.G_CONNECT_DEFAULT);

    surface.grabFocus();
}

pub fn destroy(self: *Tab, alloc: Allocator) void {
    self.deinit(alloc);
    alloc.destroy(self);
}

pub fn deinit(self: *Tab, alloc: Allocator) void {
    self.elem.deinit(alloc);
}

pub fn replaceElem(self: *Tab, elem: Surface.Container.Elem) void {
    c.gtk_box_remove(self.box, @ptrCast(@alignCast(self.elem.widget())));

    c.gtk_box_append(self.box, @ptrCast(@alignCast(elem.widget())));
    self.elem = elem;
}

pub fn setTitleText(self: *Tab, title: [:0]const u8) void {
    self.window.notebook.setTabTitle(self, title);
}

pub fn setTooltipText(self: *Tab, tooltip: [:0]const u8) void {
    self.window.notebook.setTabTooltip(self, tooltip);
}

pub fn remove(self: *Tab) void {
    self.window.closeTab(self);
}

fn needsConfirm(elem: Surface.Container.Elem) bool {
    return switch (elem) {
        .surface => |s| s.core_surface.needsConfirmQuit(),
        .split => |s| needsConfirm(s.top_left) or needsConfirm(s.bottom_right),
    };
}

pub fn closeWithConfirmation(tab: *Tab) void {
    switch (tab.elem) {
        .surface => |s| s.closeWithConfirmation(
            s.core_surface.needsConfirmQuit(),
            .{ .tab = tab },
        ),
        .split => |s| {
            if (!needsConfirm(s.top_left) and !needsConfirm(s.bottom_right)) {
                tab.remove();
                return;
            }

            CloseDialog.show(.{ .tab = tab }) catch |err| {
                log.err("failed to open close dialog={}", .{err});
            };
        },
    }
}

fn gtkDestroy(v: *c.GtkWidget, ud: ?*anyopaque) callconv(.C) void {
    _ = v;
    log.debug("tab box destroy", .{});

    const tab: *Tab = @ptrCast(@alignCast(ud.?));
    tab.destroy(tab.window.app.core_app.alloc);
}
```