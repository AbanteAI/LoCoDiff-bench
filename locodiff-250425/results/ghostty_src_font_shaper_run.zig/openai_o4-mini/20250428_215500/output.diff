--- ghostty_src_font_shaper_run.zig_expectedoutput.txt (expected)+++ ghostty_src_font_shaper_run.zig_extracted.txt (actual)@@ -51,7 +51,6 @@                 const rev_i = cells.len - i - 1;
                 if (!cells[rev_i].isEmpty()) break :max rev_i + 1;
             }
-
             break :max 0;
         };
 
@@ -67,7 +66,7 @@         if (self.i >= max) return null;
 
         // Track the font for our current run
-        var current_font: font.Collection.Index = .{};
+        var current_font: font.Collection.Index = {};
 
         // Allow the hook to prepare
         try self.hooks.prepare();
@@ -155,6 +154,7 @@                 }
 
                 if (style.flags.italic) break :style .italic;
+
                 break :style .regular;
             };
 
@@ -175,107 +175,48 @@                 break :emoji null;
             };
 
-            // If our cursor is on this line then we break the run around the
-            // cursor. This means that any row with a cursor has at least
-            // three breaks: before, exactly the cursor, and after.
-            //
-            // We do not break a cell that is exactly the grapheme. If there
-            // are cells following that contain joiners, we allow those to
-            // break. This creates an effect where hovering over an emoji
-            // such as a skin-tone emoji is fine, but hovering over the
-            // joiners will show the joiners allowing you to modify the
-            // emoji.
-            if (!cell.hasGrapheme()) {
-                if (self.cursor_x) |cursor_x| {
-                    // Exactly: self.i is the cursor and we iterated once. This
-                    // means that we started exactly at the cursor and did at
-                    // exactly one iteration. Why exactly one? Because we may
-                    // start at our cursor but do many if our cursor is exactly
-                    // on an emoji.
-                    if (self.i == cursor_x and j == self.i + 1) break;
-
-                    // Before: up to and not including the cursor. This means
-                    // that we started before the cursor (self.i < cursor_x)
-                    // and j is now at the cursor meaning we haven't yet processed
-                    // the cursor.
-                    if (self.i < cursor_x and j == cursor_x) {
-                        assert(j > 0);
-                        break;
-                    }
-
-                    // After: after the cursor. We don't need to do anything
-                    // special, we just let the run complete.
-                }
-            }
-
-            // We need to find a font that supports this character. If
-            // there are additional zero-width codepoints (to form a single
-            // grapheme, i.e. combining characters), we need to find a font
-            // that supports all of them.
+            // If we're a Kitty unicode placeholder then we add a blank.
+            if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
+                try self.addCodepoint(&hasher, ' ', @intCast(cluster));
+                continue;
+            }
+
             const font_info: struct {
                 idx: font.Collection.Index,
                 fallback: ?u32 = null,
             } = font_info: {
-                // If we find a font that supports this entire grapheme
-                // then we use that.
-                if (try self.indexForCell(
-                    alloc,
-                    cell,
-                    font_style,
-                    presentation,
-                )) |idx| break :font_info .{ .idx = idx };
-
-                // Otherwise we need a fallback character. Prefer the
-                // official replacement character.
+                if (try self.indexForCell(alloc, cell, font_style, presentation)) |idx| break :font_info .{ .idx = idx };
                 if (try self.grid.getIndex(
                     alloc,
                     0xFFFD, // replacement char
                     font_style,
                     presentation,
                 )) |idx| break :font_info .{ .idx = idx, .fallback = 0xFFFD };
-
-                // Fallback to space
                 if (try self.grid.getIndex(
                     alloc,
                     ' ',
                     font_style,
                     presentation,
                 )) |idx| break :font_info .{ .idx = idx, .fallback = ' ' };
-
-                // We can't render at all. This is a bug, we should always
-                // have a font that can render a space.
                 unreachable;
             };
 
-            //log.warn("char={x} info={}", .{ cell.char, font_info });
             if (j == self.i) current_font = font_info.idx;
 
-            // If our fonts are not equal, then we're done with our run.
             if (font_info.idx.int() != current_font.int()) break;
 
-            // If we're a fallback character, add that and continue; we
-            // don't want to add the entire grapheme.
             if (font_info.fallback) |cp| {
                 try self.addCodepoint(&hasher, cp, @intCast(cluster));
                 continue;
             }
 
-            // If we're a Kitty unicode placeholder then we add a blank.
-            if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
-                try self.addCodepoint(&hasher, ' ', @intCast(cluster));
-                continue;
-            }
-
-            // Add all the codepoints for our grapheme
-            try self.addCodepoint(
-                &hasher,
+            try self.addCodepoint(&hasher,
                 if (cell.codepoint() == 0) ' ' else cell.codepoint(),
                 @intCast(cluster),
             );
             if (cell.hasGrapheme()) {
                 const cps = self.row.grapheme(cell).?;
                 for (cps) |cp| {
-                    // Do not send presentation modifiers
                     if (cp == 0xFE0E or cp == 0xFE0F) continue;
                     try self.addCodepoint(&hasher, cp, @intCast(cluster));
                 }
@@ -334,7 +275,6 @@             );
         }
 
-        // Get the font index for the primary codepoint.
         const primary_cp: u32 = cell.codepoint();
         const primary = try self.grid.getIndex(
             alloc,
@@ -343,47 +283,25 @@             presentation,
         ) orelse return null;
 
-        // Easy, and common: we aren't a multi-codepoint grapheme, so
-        // we just return whatever index for the cell codepoint.
         if (!cell.hasGrapheme()) return primary;
 
-        // If this is a grapheme, we need to find a font that supports
-        // all of the codepoints in the grapheme.
         const cps = self.row.grapheme(cell) orelse return primary;
         var candidates = try std.ArrayList(font.Collection.Index).initCapacity(alloc, cps.len + 1);
         defer candidates.deinit();
         candidates.appendAssumeCapacity(primary);
 
         for (cps) |cp| {
-            // Ignore Emoji ZWJs
             if (cp == 0xFE0E or cp == 0xFE0F or cp == 0x200D) continue;
-
-            // Find a font that supports this codepoint. If none support this
-            // then the whole grapheme can't be rendered so we return null.
-            //
-            // We explicitly do not require the additional grapheme components
-            // to support the base presentation, since it is common for emoji
-            // fonts to support the base emoji with emoji presentation but not
-            // certain ZWJ-combined characters like the male and female signs.
-            const idx = try self.grid.getIndex(
-                alloc,
-                cp,
-                style,
-                null,
-            ) orelse return null;
+            const idx = try self.grid.getIndex(alloc, cp, style, null) orelse return null;
             candidates.appendAssumeCapacity(idx);
         }
 
-        // We need to find a candidate that has ALL of our codepoints
         for (candidates.items) |idx| {
             if (!self.grid.hasCodepoint(idx, primary_cp, presentation)) continue;
             for (cps) |cp| {
-                // Ignore Emoji ZWJs
                 if (cp == 0xFE0E or cp == 0xFE0F or cp == 0x200D) continue;
                 if (!self.grid.hasCodepoint(idx, cp, null)) break;
             } else {
-                // If the while completed, then we have a candidate that
-                // supports all of our codepoints.
                 return idx;
             }
         }
