
index e41616d2..96a85557 100644
--- a/ghostty_src_font_shaper_run.zig_expectedoutput.txt (expected):tmp/tmpp0i7k4ie_expected.txt	
+++ b/ghostty_src_font_shaper_run.zig_extracted.txt (actual):tmp/tmpl4xoa8g9_actual.txt	
@@ -51,7 +51,6 @@ pub const RunIterator = struct {
                 const rev_i = cells.len - i - 1;
                 if (!cells[rev_i].isEmpty()) break :max rev_i + 1;
             }
-
             break :max 0;
         };
 
@@ -92,11 +91,8 @@ pub const RunIterator = struct {
                     const start_x = sel.start().x;
                     const end_x = sel.end().x;
 
-                    if (start_x > 0 and
-                        j == start_x) break;
-
-                    if (end_x > 0 and
-                        j == end_x + 1) break;
+                    if (start_x > 0 and j == start_x) break;
+                    if (end_x > 0 and j == end_x + 1) break;
                 }
             }
 
@@ -114,7 +110,7 @@ pub const RunIterator = struct {
 
                 // If the prev cell and this cell are both plain
                 // codepoints then we check if they are commonly "bad"
-                // ligatures and spit the run if they are.
+                // ligatures and split the run if they are.
                 if (prev_cell.content_tag == .codepoint and
                     cell.content_tag == .codepoint)
                 {
@@ -125,13 +121,11 @@ pub const RunIterator = struct {
                             const cp = cell.codepoint();
                             if (cp == 'l' or cp == 'i') break;
                         },
-
                         // st
                         's' => {
                             const cp = cell.codepoint();
                             if (cp == 't') break;
                         },
-
                         else => {},
                     }
                 }
@@ -153,14 +147,13 @@ pub const RunIterator = struct {
                     if (style.flags.italic) break :style .bold_italic;
                     break :style .bold;
                 }
-
                 if (style.flags.italic) break :style .italic;
                 break :style .regular;
             };
 
             // Determine the presentation format for this glyph.
             const presentation: ?font.Presentation = if (cell.hasGrapheme()) p: {
-                // We only check the FIRST codepoint because I believe the
+                // We only check the FIRST codepoint because the
                 // presentation format must be directly adjacent to the codepoint.
                 const cps = self.row.grapheme(cell) orelse break :p null;
                 assert(cps.len > 0);
@@ -168,50 +161,19 @@ pub const RunIterator = struct {
                 if (cps[0] == 0xFE0F) break :p .emoji;
                 break :p null;
             } else emoji: {
-                // If we're not a grapheme, our individual char could be
-                // an emoji so we want to check if we expect emoji presentation.
                 // The font grid indexForCodepoint we use below will do this
                 // automatically.
                 break :emoji null;
             };
 
-            // If our cursor is on this line then we break the run around the
-            // cursor. This means that any row with a cursor has at least
-            // three breaks: before, exactly the cursor, and after.
-            //
-            // We do not break a cell that is exactly the grapheme. If there
-            // are cells following that contain joiners, we allow those to
-            // break. This creates an effect where hovering over an emoji
-            // such as a skin-tone emoji is fine, but hovering over the
-            // joiners will show the joiners allowing you to modify the
-            // emoji.
-            if (!cell.hasGrapheme()) {
-                if (self.cursor_x) |cursor_x| {
-                    // Exactly: self.i is the cursor and we iterated once. This
-                    // means that we started exactly at the cursor and did at
-                    // exactly one iteration. Why exactly one? Because we may
-                    // start at our cursor but do many if our cursor is exactly
-                    // on an emoji.
-                    if (self.i == cursor_x and j == self.i + 1) break;
-
-                    // Before: up to and not including the cursor. This means
-                    // that we started before the cursor (self.i < cursor_x)
-                    // and j is now at the cursor meaning we haven't yet processed
-                    // the cursor.
-                    if (self.i < cursor_x and j == cursor_x) {
-                        assert(j > 0);
-                        break;
-                    }
-
-                    // After: after the cursor. We don't need to do anything
-                    // special, we just let the run complete.
-                }
+            // If we're a Kitty unicode placeholder then we add a blank.
+            if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
+                try self.addCodepoint(&hasher, ' ', @intCast(cluster));
+                continue;
             }
 
-            // We need to find a font that supports this character. If
-            // there are additional zero-width codepoints (to form a single
-            // grapheme, i.e. combining characters), we need to find a font
-            // that supports all of them.
+            // We need to find a font index for this cell. This includes
+            // multi-codepoint graphemes.
             const font_info: struct {
                 idx: font.Collection.Index,
                 fallback: ?u32 = null,
@@ -229,7 +191,7 @@ pub const RunIterator = struct {
                 // official replacement character.
                 if (try self.grid.getIndex(
                     alloc,
-                    0xFFFD, // replacement char
+                    0xFFFD,
                     font_style,
                     presentation,
                 )) |idx| break :font_info .{ .idx = idx, .fallback = 0xFFFD };
@@ -247,7 +209,6 @@ pub const RunIterator = struct {
                 unreachable;
             };
 
-            //log.warn("char={x} info={}", .{ cell.char, font_info });
             if (j == self.i) current_font = font_info.idx;
 
             // If our fonts are not equal, then we're done with our run.
@@ -260,12 +221,6 @@ pub const RunIterator = struct {
                 continue;
             }
 
-            // If we're a Kitty unicode placeholder then we add a blank.
-            if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
-                try self.addCodepoint(&hasher, ' ', @intCast(cluster));
-                continue;
-            }
-
             // Add all the codepoints for our grapheme
             try self.addCodepoint(
                 &hasher,
@@ -309,12 +264,6 @@ pub const RunIterator = struct {
         try self.hooks.addCodepoint(cp, cluster);
     }
 
-    /// Find a font index that supports the grapheme for the given cell,
-    /// or null if no such font exists.
-    ///
-    /// This is used to find a font that supports the entire grapheme.
-    /// We look for fonts that support each individual codepoint and then
-    /// find the common font amongst all candidates.
     fn indexForCell(
         self: *RunIterator,
         alloc: Allocator,
@@ -322,8 +271,8 @@ pub const RunIterator = struct {
         style: font.Style,
         presentation: ?font.Presentation,
     ) !?font.Collection.Index {
-        if (cell.isEmpty() or
-            cell.codepoint() == 0 or
+        // If the cell is empty, null codepoint, or kitty placeholder, send space
+        if (cell.isEmpty() or cell.codepoint() == 0 or
             cell.codepoint() == terminal.kitty.graphics.unicode.placeholder)
         {
             return try self.grid.getIndex(
@@ -344,7 +293,7 @@ pub const RunIterator = struct {
         ) orelse return null;
 
         // Easy, and common: we aren't a multi-codepoint grapheme, so
-        // we just return whatever index for the cell codepoint.
+        // we just return the primary index.
         if (!cell.hasGrapheme()) return primary;
 
         // If this is a grapheme, we need to find a font that supports
@@ -355,16 +304,10 @@ pub const RunIterator = struct {
         candidates.appendAssumeCapacity(primary);
 
         for (cps) |cp| {
-            // Ignore Emoji ZWJs
+            // Do not send presentation modifiers or joiners
             if (cp == 0xFE0E or cp == 0xFE0F or cp == 0x200D) continue;
-
             // Find a font that supports this codepoint. If none support this
             // then the whole grapheme can't be rendered so we return null.
-            //
-            // We explicitly do not require the additional grapheme components
-            // to support the base presentation, since it is common for emoji
-            // fonts to support the base emoji with emoji presentation but not
-            // certain ZWJ-combined characters like the male and female signs.
             const idx = try self.grid.getIndex(
                 alloc,
                 cp,
@@ -378,11 +321,11 @@ pub const RunIterator = struct {
         for (candidates.items) |idx| {
             if (!self.grid.hasCodepoint(idx, primary_cp, presentation)) continue;
             for (cps) |cp| {
-                // Ignore Emoji ZWJs
+                // Ignore modifiers and joiners
                 if (cp == 0xFE0E or cp == 0xFE0F or cp == 0x200D) continue;
                 if (!self.grid.hasCodepoint(idx, cp, null)) break;
             } else {
-                // If the while completed, then we have a candidate that
+                // If the loop completed, then we have a candidate that
                 // supports all of our codepoints.
                 return idx;
             }
