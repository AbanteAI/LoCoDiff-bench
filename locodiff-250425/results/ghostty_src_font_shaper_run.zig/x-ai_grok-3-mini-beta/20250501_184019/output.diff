
index e41616d2..2023d573 100644
--- a/ghostty_src_font_shaper_run.zig_expectedoutput.txt (expected):tmp/tmpqdzw5sja_expected.txt	
+++ b/ghostty_src_font_shaper_run.zig_extracted.txt (actual):tmp/tmpprtp3njn_actual.txt	
@@ -66,12 +66,6 @@ pub const RunIterator = struct {
         // We're over at the max
         if (self.i >= max) return null;
 
-        // Track the font for our current run
-        var current_font: font.Collection.Index = .{};
-
-        // Allow the hook to prepare
-        try self.hooks.prepare();
-
         // Initialize our hash for this run.
         var hasher = Hasher.init(0);
 
@@ -106,15 +100,12 @@ pub const RunIterator = struct {
                 .spacer_head, .spacer_tail => continue,
             }
 
-            // If our cell attributes are changing, then we split the run.
-            // This prevents a single glyph for ">=" to be rendered with
-            // one color when the two components have different styling.
+            // If the prev cell and this cell are both plain
+            // codepoints then we check if they are commonly "bad"
+            // ligatures and spit the run if they are.
             if (j > self.i) style: {
                 const prev_cell = cells[j - 1];
 
-                // If the prev cell and this cell are both plain
-                // codepoints then we check if they are commonly "bad"
-                // ligatures and spit the run if they are.
                 if (prev_cell.content_tag == .codepoint and
                     cell.content_tag == .codepoint)
                 {
@@ -242,6 +233,12 @@ pub const RunIterator = struct {
                     presentation,
                 )) |idx| break :font_info .{ .idx = idx, .fallback = ' ' };
 
+                // If we're a Kitty unicode placeholder then we add a blank.
+                if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
+                    try self.addCodepoint(&hasher, ' ', @intCast(cluster));
+                    continue;
+                }
+
                 // We can't render at all. This is a bug, we should always
                 // have a font that can render a space.
                 unreachable;
@@ -251,7 +248,7 @@ pub const RunIterator = struct {
             if (j == self.i) current_font = font_info.idx;
 
             // If our fonts are not equal, then we're done with our run.
-            if (font_info.idx.int() != current_font.int()) break;
+            if (font_info.idx != current_font) break;
 
             // If we're a fallback character, add that and continue; we
             // don't want to add the entire grapheme.
@@ -260,12 +257,6 @@ pub const RunIterator = struct {
                 continue;
             }
 
-            // If we're a Kitty unicode placeholder then we add a blank.
-            if (cell.codepoint() == terminal.kitty.graphics.unicode.placeholder) {
-                try self.addCodepoint(&hasher, ' ', @intCast(cluster));
-                continue;
-            }
-
             // Add all the codepoints for our grapheme
             try self.addCodepoint(
                 &hasher,
@@ -313,8 +304,6 @@ pub const RunIterator = struct {
     /// or null if no such font exists.
     ///
     /// This is used to find a font that supports the entire grapheme.
-    /// We look for fonts that support each individual codepoint and then
-    /// find the common font amongst all candidates.
     fn indexForCell(
         self: *RunIterator,
         alloc: Allocator,
