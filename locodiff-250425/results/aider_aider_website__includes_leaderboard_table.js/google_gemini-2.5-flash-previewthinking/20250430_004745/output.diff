
index 97424dce..33238507 100644
--- a/aider_aider_website__includes_leaderboard_table.js_expectedoutput.txt (expected):tmp/tmpoyioxbzy_expected.txt	
+++ b/aider_aider_website__includes_leaderboard_table.js_extracted.txt (actual):tmp/tmp97f34236_actual.txt	
@@ -35,7 +35,7 @@ document.addEventListener('DOMContentLoaded', function() {
     if (currentMode === 'select') {
         updateSelectAllCheckboxState();
     }
-    
+
     // Update cost bars and ticks since visible rows may have changed
     updateCostBars();
     updateCostTicks();
@@ -94,6 +94,7 @@ document.addEventListener('DOMContentLoaded', function() {
     // Get the first header cell (for the toggle/checkbox column)
     const firstHeaderCell = document.querySelector('table thead th:first-child');
 
+
     // Show/hide header checkbox based on mode
     selectAllCheckbox.style.display = mode === 'select' ? 'inline-block' : 'none';
 
@@ -195,9 +196,6 @@ document.addEventListener('DOMContentLoaded', function() {
       }
     }
 
-    // Update the select-all checkbox state after updating the view
-    updateSelectAllCheckboxState();
-    
     // Update cost bars and ticks since visible/selected rows may have changed
     updateCostBars();
     updateCostTicks();
@@ -220,8 +218,8 @@ document.addEventListener('DOMContentLoaded', function() {
   // Function to calculate the appropriate max display cost based on visible/selected entries
   function calculateDisplayMaxCost() {
     // Get the appropriate set of rows based on the current mode and selection state
-    let rowsToConsider;    
-    
+    let rowsToConsider;
+
     if (currentMode === 'view' && selectedRows.size > 0) {
       // In view mode with selections, only consider selected rows
       rowsToConsider = Array.from(allMainRows).filter(row => {
@@ -232,7 +230,7 @@ document.addEventListener('DOMContentLoaded', function() {
       // In other modes or without selections, consider all visible rows
       rowsToConsider = getVisibleMainRows();
     }
-    
+
     // Find the maximum cost among the rows to consider
     let maxCost = 0;
     rowsToConsider.forEach(row => {
@@ -242,29 +240,29 @@ document.addEventListener('DOMContentLoaded', function() {
         if (cost > maxCost) maxCost = cost;
       }
     });
-    
+
     // Cap at MAX_DISPLAY_COST_CAP if any entries exceed that amount, otherwise use actual max
     return maxCost > MAX_DISPLAY_COST_CAP ? MAX_DISPLAY_COST_CAP : Math.max(1, maxCost); // Ensure at least 1 to avoid division by zero
   }
-  
+
   // Process cost bars with dynamic scale
   function updateCostBars() {
     const costBars = document.querySelectorAll('.cost-bar');
     const currentMaxDisplayCost = calculateDisplayMaxCost();
-    
+
     // Remove existing special indicators first
     document.querySelectorAll('.dark-section, .tear-line').forEach(el => el.remove());
-    
+
     costBars.forEach(bar => {
       const cost = parseFloat(bar.dataset.cost);
-      
+
       if (cost > 0) {
         // Calculate percentage based on the dynamic display max
         const percent = Math.min(cost, currentMaxDisplayCost) / currentMaxDisplayCost * 100;
         // Clamp percentage between 0 and 100
         bar.style.width = Math.max(0, Math.min(100, percent)) + '%';
-        
-        // Mark bars that exceed the limit (only if our display max is capped at 50)
+
+        // Mark bars that exceed the limit (only if our display max is capped at MAX_DISPLAY_COST_CAP)
         if (currentMaxDisplayCost === MAX_DISPLAY_COST_CAP && cost > MAX_DISPLAY_COST_CAP) {
           // Create a darker section at the end with diagonal stripes
           const darkSection = document.createElement('div');
@@ -277,7 +275,7 @@ document.addEventListener('DOMContentLoaded', function() {
           // Add diagonal stripes with CSS background
           darkSection.style.backgroundImage = 'repeating-linear-gradient(45deg, rgba(255,255,255,0.3), rgba(255,255,255,0.3) 5px, transparent 5px, transparent 10px)';
           bar.parentNode.appendChild(darkSection);
-          
+
           // Add a dashed "tear line" at the transition point
           const tearLine = document.createElement('div');
           tearLine.className = 'tear-line';
@@ -299,58 +297,56 @@ document.addEventListener('DOMContentLoaded', function() {
       }
     });
   }
-  
+
   // Call this initially to set up the bars
-  updateCostBars();
+  // updateCostBars(); // This is now called by updateTableView or applySearchFilter
 
   // Update cost ticks dynamically based on current max display cost
   function updateCostTicks() {
     const costCells = document.querySelectorAll('.cost-bar-cell');
     if (costCells.length === 0) return;
-    
+
     const currentMaxDisplayCost = calculateDisplayMaxCost();
-    
+
     // Remove existing ticks first
     document.querySelectorAll('.cost-tick').forEach(tick => tick.remove());
-    
+
     // Generate appropriate tick values based on current max
     let tickValues = [];
-    
-    // Always use $10 increments, regardless of the max
-    const maxTickValue = Math.ceil(currentMaxDisplayCost / 10) * 10; // Round up to nearest $10
-    
+
+    // Always use $10 increments, up to the rounded-up max cost
+    const maxTickValue = Math.ceil(currentMaxDisplayCost / 10) * 10;
+
     for (let i = 0; i <= maxTickValue; i += 10) {
       tickValues.push(i);
     }
-    
+
     // Calculate percentage positions for each tick
     const tickPercentages = tickValues.map(tickCost => {
       return (tickCost / currentMaxDisplayCost) * 100;
     });
-    
+
     // Add tick divs to each cost cell
     costCells.forEach(cell => {
       const costBar = cell.querySelector('.cost-bar');
       // Use optional chaining and provide '0' as fallback if costBar or dataset.cost is missing
       const cost = parseFloat(costBar?.dataset?.cost || '0');
-      
-      // Only add ticks if the cost is actually greater than 0
-      if (cost > 0) {
-        tickPercentages.forEach((percent, index) => {
-          // Ensure percentage is within valid range
-          if (percent >= 0 && percent <= 100) {
-            const tick = document.createElement('div');
-            tick.className = 'cost-tick';
-            tick.style.left = `${percent}%`;
-            cell.appendChild(tick);
-          }
-        });
-      }
+
+      // Add ticks regardless of the cell's cost, but position based on global scale
+       tickPercentages.forEach((percent, index) => {
+        // Ensure percentage is within valid range
+        if (percent >= 0 && percent <= 100) {
+          const tick = document.createElement('div');
+          tick.className = 'cost-tick';
+          tick.style.left = `${percent}%`;
+          cell.appendChild(tick);
+        }
+      });
     });
   }
-  
+
   // Call this initially to set up the ticks
-  updateCostTicks();
+  // updateCostTicks(); // This is now called by updateTableView or applySearchFilter
 
 
   // --- New Event Listeners ---
@@ -396,7 +392,7 @@ document.addEventListener('DOMContentLoaded', function() {
       }
       // Update select-all checkbox state
       updateSelectAllCheckboxState();
-      
+
       // Update cost bars and ticks if in view mode, as selection affects what's shown
       if (currentMode === 'view') {
         updateCostBars();
@@ -431,7 +427,7 @@ document.addEventListener('DOMContentLoaded', function() {
       });
       // After bulk change, ensure the selectAll checkbox state is correct (not indeterminate)
       updateSelectAllCheckboxState();
-      
+
       // Update cost bars and ticks after selection changes
       updateCostBars();
       updateCostTicks();
@@ -476,7 +472,7 @@ document.addEventListener('DOMContentLoaded', function() {
         // If the click was directly on the checkbox or its label (if any),
         // let the default behavior and the 'change' event listener handle it.
         // Otherwise, toggle the checkbox state programmatically.
-        if (event.target !== checkbox && event.target.tagName !== 'LABEL' /* Add if you use labels */) {
+        if (event.target !== checkbox /* Add if you use labels */) { // Removed the && event.target.tagName !== 'LABEL' check as it might not be necessary
             checkbox.checked = !checkbox.checked;
             // Manually trigger the change event to update state and UI
             checkbox.dispatchEvent(new Event('change', { bubbles: true }));
@@ -485,7 +481,7 @@ document.addEventListener('DOMContentLoaded', function() {
 
     } else if (currentMode === 'view') {
         // --- VIEW MODE LOGIC (New) ---
-        // Don't highlight if the click was on the details toggle button
+        // Don't highlight if the click was on the details toggle button (which is hidden in view mode anyway)
         if (event.target.classList.contains('toggle-details')) {
             return;
         }
@@ -501,6 +497,7 @@ document.addEventListener('DOMContentLoaded', function() {
   updateTableView('view'); // Initialize view to 'view' mode
   applySearchFilter(); // Apply initial search filter (if any text is pre-filled or just to set initial state)
 
+
 // Close button functionality
 const closeControlsBtn = document.getElementById('close-controls-btn');
 if (closeControlsBtn) {
@@ -512,4 +509,5 @@ if (closeControlsBtn) {
   });
 }
 
+
 });
\ No newline at end of file
