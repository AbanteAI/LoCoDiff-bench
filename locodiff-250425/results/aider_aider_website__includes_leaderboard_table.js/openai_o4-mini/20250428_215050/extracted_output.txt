document.addEventListener('DOMContentLoaded', function() {
  let currentMode = 'view'; // 'view', 'select', 'detail'
  let selectedRows = new Set(); // Store indices of selected rows
  const MAX_DISPLAY_COST_CAP = 75; // Define the constant here

  const allMainRows = document.querySelectorAll('tr[id^="main-row-"]');
  const allDetailsRows = document.querySelectorAll('tr[id^="details-"]');
  const searchInput = document.getElementById('editSearchInput');
  const modeViewButton = document.getElementById('mode-view-btn');
  const modeDetailButton = document.getElementById('mode-detail-btn');
  const modeSelectButton = document.getElementById('mode-select-btn');
  const modeButtons = [modeViewButton, modeSelectButton, modeDetailButton];
  const selectAllCheckbox = document.getElementById('select-all-checkbox');
  const leaderboardTitle = document.getElementById('leaderboard-title'); // Get title element
  const defaultTitle = "Aider polyglot coding leaderboard";
  const filteredTitle = "Aider polyglot coding benchmark results (selected)";

  function applySearchFilter() {
    const searchTerm = searchInput.value.toLowerCase();
    allMainRows.forEach(row => {
      const textContent = row.textContent.toLowerCase();
      const detailsRow = document.getElementById(row.id.replace('main-row-', 'details-'));
      const matchesSearch = textContent.includes(searchTerm);

      if (matchesSearch) {
        row.classList.remove('hidden-by-search');
        if (detailsRow) detailsRow.classList.remove('hidden-by-search');
      } else {
        row.classList.add('hidden-by-search');
        if (detailsRow) detailsRow.classList.add('hidden-by-search');
      }
    });
    // After applying search filter, re-apply view mode filter and update select-all state
    updateTableView(currentMode);
    if (currentMode === 'select') {
      updateSelectAllCheckboxState();
    }
    // Update cost bars and ticks since visible rows may have changed
    updateCostBars();
    updateCostTicks();
  }

  function getVisibleMainRows() {
    return Array.from(allMainRows).filter(row =>
      !row.classList.contains('hidden-by-search') && !row.classList.contains('hidden-by-mode')
    );
  }

  function updateSelectAllCheckboxState() {
    if (currentMode !== 'select') return; // Only relevant in select mode

    const visibleRows = getVisibleMainRows();
    const visibleRowCount = visibleRows.length;
    const selectedVisibleRowCount = visibleRows.filter(row =>
      selectedRows.has(row.querySelector('.row-selector')?.dataset.rowIndex)
    ).length;

    if (visibleRowCount === 0) {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = false;
    } else if (selectedVisibleRowCount === visibleRowCount) {
      selectAllCheckbox.checked = true;
      selectAllCheckbox.indeterminate = false;
    } else if (selectedVisibleRowCount > 0) {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = true;
    } else {
      selectAllCheckbox.checked = false;
      selectAllCheckbox.indeterminate = false;
    }
  }

  function updateTableView(mode) {
    currentMode = mode; // Update global state

    // Update button styles first
    modeButtons.forEach(btn => {
      btn.classList.remove('active');
      btn.style.backgroundColor = '';
      btn.style.color = '';
    });
    let activeButton = mode === 'view' ? modeViewButton
                     : mode === 'select' ? modeSelectButton
                     : modeDetailButton;
    activeButton.classList.add('active');
    activeButton.style.backgroundColor = '#e7f3ff';
    activeButton.style.color = '#495057';

    // Get the first header cell (for the toggle/checkbox column)
    const firstHeaderCell = document.querySelector('table thead th:first-child');

    // Show/hide header checkbox based on mode
    selectAllCheckbox.style.display = mode === 'select' ? 'inline-block' : 'none';

    allMainRows.forEach(row => {
      const rowIndex = row.querySelector('.row-selector')?.dataset.rowIndex;
      const toggleButton = row.querySelector('.toggle-details');
      const selectorCheckbox = row.querySelector('.row-selector');
      const firstCell = row.querySelector('td:first-child');
      const detailsRow = document.getElementById(`details-${rowIndex}`);
      const isSelected = selectedRows.has(rowIndex);

      // Reset visibility classes before applying mode logic
      row.classList.remove('hidden-by-mode');
      if (detailsRow) detailsRow.classList.remove('hidden-by-mode');

      // Show/hide the first column (header and data cells) based on mode
      if (firstHeaderCell) {
        firstHeaderCell.style.display = mode === 'view' ? 'none' : '';
      }
      if (firstCell) {
        firstCell.style.display = mode === 'view' ? 'none' : '';
      }

      if (mode === 'view') { // --- VIEW MODE ---
        toggleButton.style.display = 'none';
        selectorCheckbox.style.display = 'none';
        row.classList.remove('row-selected');
        // In 'view' mode, hide row if selections exist AND this row is NOT selected
        if (selectedRows.size > 0 && !isSelected) {
          row.classList.add('hidden-by-mode');
          if (detailsRow) detailsRow.classList.add('hidden-by-mode');
        }
        // Always hide details row content in view mode
        if (detailsRow) {
          detailsRow.style.display = 'none';
        }

      } else if (mode === 'select') { // --- SELECT MODE ---
        toggleButton.style.display = 'none';
        selectorCheckbox.style.display = 'inline-block';
        selectorCheckbox.checked = isSelected;
        row.classList.toggle('row-selected', isSelected);
        row.classList.remove('view-highlighted');
        if (detailsRow) detailsRow.style.display = 'none';
        row.classList.remove('hidden-by-mode');
        if (detailsRow) detailsRow.classList.remove('hidden-by-mode');

      } else { // --- DETAIL MODE ---
        toggleButton.style.display = 'inline-block';
        selectorCheckbox.style.display = 'none';
        row.classList.remove('row-selected');
        row.classList.remove('view-highlighted');
        row.classList.remove('hidden-by-mode');
        if (detailsRow) {
          detailsRow.classList.remove('hidden-by-mode');
          if (detailsRow.classList.contains('hidden-by-search')) {
            detailsRow.style.display = 'none';
          }
        }
      }

      // Ensure rows hidden by search remain hidden regardless of mode
      if (row.classList.contains('hidden-by-search')) {
        row.style.display = 'none';
        if (detailsRow) detailsRow.style.display = 'none';
      } else if (!row.classList.contains('hidden-by-mode')) {
        row.style.display = '';
      } else {
        row.style.display = 'none';
        if (detailsRow) detailsRow.style.display = 'none';
      }
    });

    // Update the leaderboard title based on mode and selection
    if (leaderboardTitle) {
      if (currentMode === 'view' && selectedRows.size > 0) {
        leaderboardTitle.textContent = filteredTitle;
      } else {
        leaderboardTitle.textContent = defaultTitle;
      }
    }

    // Update the select-all checkbox state after updating the view
    updateSelectAllCheckboxState();

    // Update cost bars and ticks since visible/selected rows may have changed
    updateCostBars();
    updateCostTicks();
  }

  // Add percentage ticks for non-cost bars
  const percentCells = document.querySelectorAll('.bar-cell:not(.cost-bar-cell)');
  percentCells.forEach(cell => {
    for (let i = 0; i <= 100; i += 10) {
      const tick = document.createElement('div');
      tick.className = 'percent-tick';
      tick.style.left = `${i}%`;
      cell.appendChild(tick);
    }
  });

  // --- Dynamic Cost Bar Scaling & Ticks ---

  function calculateDisplayMaxCost() {
    let rowsToConsider;
    if (currentMode === 'view' && selectedRows.size > 0) {
      rowsToConsider = Array.from(allMainRows).filter(row => {
        const rowIndex = row.querySelector('.row-selector')?.dataset.rowIndex;
        return rowIndex && selectedRows.has(rowIndex) && !row.classList.contains('hidden-by-search');
      });
    } else {
      rowsToConsider = getVisibleMainRows();
    }
    let maxCost = 0;
    rowsToConsider.forEach(row => {
      const costBar = row.querySelector('.cost-bar');
      if (costBar) {
        const cost = parseFloat(costBar.dataset.cost || '0');
        if (cost > maxCost) maxCost = cost;
      }
    });
    return maxCost > MAX_DISPLAY_COST_CAP
      ? MAX_DISPLAY_COST_CAP
      : Math.max(1, maxCost);
  }

  function updateCostBars() {
    const costBars = document.querySelectorAll('.cost-bar');
    const currentMaxDisplayCost = calculateDisplayMaxCost();
    // Remove existing special indicators
    document.querySelectorAll('.bar-viz.dark-section, .tear-line').forEach(el => el.remove());
    costBars.forEach(bar => {
      const cost = parseFloat(bar.dataset.cost);
      if (cost > 0) {
        const percent = Math.min(cost, currentMaxDisplayCost) / currentMaxDisplayCost * 100;
        bar.style.width = Math.max(0, Math.min(100, percent)) + '%';
        if (currentMaxDisplayCost === MAX_DISPLAY_COST_CAP && cost > MAX_DISPLAY_COST_CAP) {
          const darkSection = document.createElement('div');
          darkSection.className = 'bar-viz dark-section';
          darkSection.style.width = '15%';
          darkSection.style.left = '85%';
          darkSection.style.backgroundColor = 'rgba(13, 110, 253, 0.6)';
          darkSection.style.borderRight = '1px solid rgba(13, 110, 253, 0.8)';
          darkSection.style.zIndex = '1';
          darkSection.style.backgroundImage =
            'repeating-linear-gradient(45deg, rgba(255,255,255,0.3), rgba(255,255,255,0.3) 5px, transparent 5px, transparent 10px)';
          bar.parentNode.appendChild(darkSection);

          const tearLine = document.createElement('div');
          tearLine.className = 'tear-line';
          tearLine.style.position = 'absolute';
          tearLine.style.left = '85%';
          tearLine.style.top = '50%';
          tearLine.style.transform = 'translateY(-50%)';
          tearLine.style.height = '54px';
          tearLine.style.width = '2px';
          tearLine.style.backgroundColor = 'white';
          tearLine.style.borderLeft = '2px dashed rgba(0, 0, 0, 0.3)';
          tearLine.style.zIndex = '2';
          bar.parentNode.appendChild(tearLine);
        }
      } else {
        bar.style.width = '0%';
      }
    });
  }

  function updateCostTicks() {
    const costCells = document.querySelectorAll('.cost-bar-cell');
    if (costCells.length === 0) return;
    const currentMaxDisplayCost = calculateDisplayMaxCost();
    // Remove existing ticks
    document.querySelectorAll('.cost-tick').forEach(tick => tick.remove());
    const tickValues = [];
    const maxTickValue = Math.ceil(currentMaxDisplayCost / 10) * 10;
    for (let i = 0; i <= maxTickValue; i += 10) {
      tickValues.push(i);
    }
    const tickPercentages = tickValues.map(tc => (tc / currentMaxDisplayCost) * 100);

    costCells.forEach(cell => {
      const costBar = cell.querySelector('.cost-bar');
      const cost = parseFloat(costBar?.dataset?.cost || '0');
      if (cost > 0) {
        tickPercentages.forEach(percent => {
          if (percent >= 0 && percent <= 100) {
            const tick = document.createElement('div');
            tick.className = 'cost-tick';
            tick.style.left = `${percent}%`;
            cell.appendChild(tick);
          }
        });
      }
    });
  }

  // --- Event Listeners ---

  // Mode buttons
  modeButtons.forEach(button => {
    button.addEventListener('click', function() {
      const newMode = this.dataset.mode;
      if (newMode !== currentMode) {
        modeButtons.forEach(btn => {
          btn.classList.remove('active');
          btn.style.backgroundColor = '';
          btn.style.color = '';
        });
        this.classList.add('active');
        this.style.backgroundColor = '#e7f3ff';
        this.style.color = '#495057';

        updateTableView(newMode);
        applySearchFilter();
      }
    });
  });

  // Table body delegation
  const tableBody = document.querySelector('table tbody');
  tableBody.addEventListener('change', function(event) {
    if (event.target.classList.contains('row-selector') && currentMode === 'select') {
      const checkbox = event.target;
      const rowIndex = checkbox.dataset.rowIndex;
      const mainRow = checkbox.closest('tr');

      if (checkbox.checked) {
        selectedRows.add(rowIndex);
        mainRow.classList.add('row-selected');
      } else {
        selectedRows.delete(rowIndex);
        mainRow.classList.remove('row-selected');
      }
      updateSelectAllCheckboxState();
      if (currentMode === 'view') {
        updateCostBars();
        updateCostTicks();
      }
    }
  });

  // Select All checkbox
  selectAllCheckbox.addEventListener('change', function() {
    if (currentMode !== 'select') return;
    const isChecked = selectAllCheckbox.checked;
    const visibleRows = getVisibleMainRows();
    visibleRows.forEach(row => {
      const checkbox = row.querySelector('.row-selector');
      const rowIndex = checkbox?.dataset.rowIndex;
      if (!checkbox || !rowIndex) return;
      if (checkbox.checked !== isChecked) {
        checkbox.checked = isChecked;
        row.classList.toggle('row-selected', isChecked);
        if (isChecked) selectedRows.add(rowIndex);
        else selectedRows.delete(rowIndex);
      }
    });
    updateSelectAllCheckboxState();
    updateCostBars();
    updateCostTicks();
  });

  // Search input
  searchInput.addEventListener('input', applySearchFilter);

  // Toggle details buttons
  const toggleButtons = document.querySelectorAll('.toggle-details');
  toggleButtons.forEach(button => {
    button.addEventListener('click', function() {
      if (currentMode !== 'detail') return;
      const targetId = this.getAttribute('data-target');
      const targetRow = document.getElementById(targetId);
      const mainRow = this.closest('tr');

      if (targetRow &&
          !mainRow.classList.contains('hidden-by-mode') &&
          !mainRow.classList.contains('hidden-by-search')) {
        const isVisible = targetRow.style.display !== 'none';
        targetRow.style.display = isVisible ? 'none' : 'table-row';
        this.textContent = isVisible ? '▶' : '▼';
      }
    });
  });

  // Row click listener
  tableBody.addEventListener('click', function(event) {
    const clickedRow = event.target.closest('tr');
    if (!clickedRow || !clickedRow.id.startsWith('main-row-')) return;

    if (currentMode === 'select') {
      const checkbox = clickedRow.querySelector('.row-selector');
      if (!checkbox) return;
      if (event.target !== checkbox && event.target.tagName !== 'LABEL') {
        checkbox.checked = !checkbox.checked;
        checkbox.dispatchEvent(new Event('change', { bubbles: true }));
      }
    } else if (currentMode === 'view') {
      if (event.target.classList.contains('toggle-details')) return;
      clickedRow.classList.toggle('view-highlighted');
    }
  });

  // Close controls button
  const closeControlsBtn = document.getElementById('close-controls-btn');
  if (closeControlsBtn) {
    closeControlsBtn.addEventListener('click', function() {
      const controlsContainer = document.getElementById('controls-container');
      if (controlsContainer) controlsContainer.style.display = 'none';
    });
  }

  // Initial setup
  updateTableView('view');
  applySearchFilter();
});