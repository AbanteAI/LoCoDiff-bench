
index 97424dcee..bea4ffe13 100644
--- a/aider_aider_website__includes_leaderboard_table.js_expectedoutput.txt (expected):tmp/tmpwreukenb_expected.txt	
+++ b/aider_aider_website__includes_leaderboard_table.js_extracted.txt (actual):tmp/tmpc2mpwica_actual.txt	
@@ -94,6 +94,7 @@ document.addEventListener('DOMContentLoaded', function() {
     // Get the first header cell (for the toggle/checkbox column)
     const firstHeaderCell = document.querySelector('table thead th:first-child');
 
+
     // Show/hide header checkbox based on mode
     selectAllCheckbox.style.display = mode === 'select' ? 'inline-block' : 'none';
 
@@ -220,7 +221,7 @@ document.addEventListener('DOMContentLoaded', function() {
   // Function to calculate the appropriate max display cost based on visible/selected entries
   function calculateDisplayMaxCost() {
     // Get the appropriate set of rows based on the current mode and selection state
-    let rowsToConsider;    
+    let rowsToConsider;
     
     if (currentMode === 'view' && selectedRows.size > 0) {
       // In view mode with selections, only consider selected rows
@@ -264,7 +265,7 @@ document.addEventListener('DOMContentLoaded', function() {
         // Clamp percentage between 0 and 100
         bar.style.width = Math.max(0, Math.min(100, percent)) + '%';
         
-        // Mark bars that exceed the limit (only if our display max is capped at 50)
+        // Mark bars that exceed the limit (only if our display max is capped at MAX_DISPLAY_COST_CAP)
         if (currentMaxDisplayCost === MAX_DISPLAY_COST_CAP && cost > MAX_DISPLAY_COST_CAP) {
           // Create a darker section at the end with diagonal stripes
           const darkSection = document.createElement('div');
@@ -342,6 +343,9 @@ document.addEventListener('DOMContentLoaded', function() {
             const tick = document.createElement('div');
             tick.className = 'cost-tick';
             tick.style.left = `${percent}%`;
+            
+            // No dollar amount labels
+            
             cell.appendChild(tick);
           }
         });
@@ -449,7 +453,7 @@ document.addEventListener('DOMContentLoaded', function() {
 
       const targetId = this.getAttribute('data-target');
       const targetRow = document.getElementById(targetId);
-      const mainRow = this.closest('tr'); // Get the main row associated with this button
+      const mainRow = this.closest('tr');
 
       if (targetRow && !mainRow.classList.contains('hidden-by-mode') && !mainRow.classList.contains('hidden-by-search')) {
         const isVisible = targetRow.style.display !== 'none';
@@ -497,19 +501,20 @@ document.addEventListener('DOMContentLoaded', function() {
   });
 
 
+  // Close button functionality
+  const closeControlsBtn = document.getElementById('close-controls-btn');
+  if (closeControlsBtn) {
+    closeControlsBtn.addEventListener('click', function() {
+      const controlsContainer = document.getElementById('controls-container');
+      if (controlsContainer) {
+        controlsContainer.style.display = 'none';
+      }
+    });
+  }
+
   // --- Initial Setup ---
   updateTableView('view'); // Initialize view to 'view' mode
   applySearchFilter(); // Apply initial search filter (if any text is pre-filled or just to set initial state)
 
-// Close button functionality
-const closeControlsBtn = document.getElementById('close-controls-btn');
-if (closeControlsBtn) {
-  closeControlsBtn.addEventListener('click', function() {
-    const controlsContainer = document.getElementById('controls-container');
-    if (controlsContainer) {
-      controlsContainer.style.display = 'none';
-    }
-  });
-}
 
 });
\ No newline at end of file
