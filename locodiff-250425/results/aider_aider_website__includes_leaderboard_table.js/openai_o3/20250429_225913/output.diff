
index 97424dce..6e714d6a 100644
--- a/aider_aider_website__includes_leaderboard_table.js_expectedoutput.txt (expected):tmp/tmpqxs45b9d_expected.txt	
+++ b/aider_aider_website__includes_leaderboard_table.js_extracted.txt (actual):tmp/tmpwidclj21_actual.txt	
@@ -128,11 +128,6 @@ document.addEventListener('DOMContentLoaded', function() {
           if (selectedRows.size > 0 && !isSelected) {
               row.classList.add('hidden-by-mode');
               if (detailsRow) detailsRow.classList.add('hidden-by-mode');
-          } else {
-              // Ensure row is not hidden by mode if it's selected or no selections exist
-              // This is handled by the reset at the start of the loop:
-              // row.classList.remove('hidden-by-mode');
-              // if (detailsRow) detailsRow.classList.remove('hidden-by-mode');
           }
           // Always hide details row content in view mode regardless of visibility class
           if (detailsRow) {
@@ -169,7 +164,6 @@ document.addEventListener('DOMContentLoaded', function() {
           }
       }
 
-
       // Ensure rows hidden by search remain hidden regardless of mode
       if (row.classList.contains('hidden-by-search')) {
           row.style.display = 'none';
@@ -183,7 +177,6 @@ document.addEventListener('DOMContentLoaded', function() {
           if (detailsRow) detailsRow.style.display = 'none';
       }
 
-
     });
 
     // Update the leaderboard title based on mode and selection
@@ -264,7 +257,7 @@ document.addEventListener('DOMContentLoaded', function() {
         // Clamp percentage between 0 and 100
         bar.style.width = Math.max(0, Math.min(100, percent)) + '%';
         
-        // Mark bars that exceed the limit (only if our display max is capped at 50)
+        // Mark bars that exceed the limit (only if our display max is capped)
         if (currentMaxDisplayCost === MAX_DISPLAY_COST_CAP && cost > MAX_DISPLAY_COST_CAP) {
           // Create a darker section at the end with diagonal stripes
           const darkSection = document.createElement('div');
@@ -313,10 +306,8 @@ document.addEventListener('DOMContentLoaded', function() {
     // Remove existing ticks first
     document.querySelectorAll('.cost-tick').forEach(tick => tick.remove());
     
-    // Generate appropriate tick values based on current max
+    // Generate appropriate tick values: always $10 increments
     let tickValues = [];
-    
-    // Always use $10 increments, regardless of the max
     const maxTickValue = Math.ceil(currentMaxDisplayCost / 10) * 10; // Round up to nearest $10
     
     for (let i = 0; i <= maxTickValue; i += 10) {
@@ -336,7 +327,7 @@ document.addEventListener('DOMContentLoaded', function() {
       
       // Only add ticks if the cost is actually greater than 0
       if (cost > 0) {
-        tickPercentages.forEach((percent, index) => {
+        tickPercentages.forEach((percent) => {
           // Ensure percentage is within valid range
           if (percent >= 0 && percent <= 100) {
             const tick = document.createElement('div');
@@ -468,7 +459,7 @@ document.addEventListener('DOMContentLoaded', function() {
 
     // --- START conditional logic ---
     if (currentMode === 'select') {
-        // --- SELECT MODE LOGIC (Existing) ---
+        // --- SELECT MODE LOGIC ---
         // Find the checkbox within this row
         const checkbox = clickedRow.querySelector('.row-selector');
         if (!checkbox) return; // No checkbox found in this row
@@ -476,7 +467,7 @@ document.addEventListener('DOMContentLoaded', function() {
         // If the click was directly on the checkbox or its label (if any),
         // let the default behavior and the 'change' event listener handle it.
         // Otherwise, toggle the checkbox state programmatically.
-        if (event.target !== checkbox && event.target.tagName !== 'LABEL' /* Add if you use labels */) {
+        if (event.target !== checkbox && event.target.tagName !== 'LABEL') {
             checkbox.checked = !checkbox.checked;
             // Manually trigger the change event to update state and UI
             checkbox.dispatchEvent(new Event('change', { bubbles: true }));
@@ -484,7 +475,7 @@ document.addEventListener('DOMContentLoaded', function() {
         // --- END SELECT MODE LOGIC ---
 
     } else if (currentMode === 'view') {
-        // --- VIEW MODE LOGIC (New) ---
+        // --- VIEW MODE LOGIC ---
         // Don't highlight if the click was on the details toggle button
         if (event.target.classList.contains('toggle-details')) {
             return;
@@ -501,6 +492,7 @@ document.addEventListener('DOMContentLoaded', function() {
   updateTableView('view'); // Initialize view to 'view' mode
   applySearchFilter(); // Apply initial search filter (if any text is pre-filled or just to set initial state)
 
+
 // Close button functionality
 const closeControlsBtn = document.getElementById('close-controls-btn');
 if (closeControlsBtn) {
