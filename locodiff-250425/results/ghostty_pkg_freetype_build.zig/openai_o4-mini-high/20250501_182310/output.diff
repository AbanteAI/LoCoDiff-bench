--- ghostty_pkg_freetype_build.zig_expectedoutput.txt (expected)+++ ghostty_pkg_freetype_build.zig_extracted.txt (actual)@@ -76,40 +76,12 @@     defer flags.deinit();
     try flags.appendSlice(&.{
         "-DFT2_BUILD_LIBRARY",
-
         "-DFT_CONFIG_OPTION_SYSTEM_ZLIB=1",
-
         "-DHAVE_UNISTD_H",
         "-DHAVE_FCNTL_H",
-
         "-fno-sanitize=undefined",
     });
-
-    const dynamic_link_opts = options.dynamic_link_opts;
-
-    // Zlib
-    if (b.systemIntegrationOption("zlib", .{})) {
-        lib.linkSystemLibrary2("zlib", dynamic_link_opts);
-    } else {
-        const zlib_dep = b.dependency("zlib", .{ .target = target, .optimize = optimize });
-        lib.linkLibrary(zlib_dep.artifact("z"));
-    }
-
-    // Libpng
-    _ = b.systemIntegrationOption("libpng", .{}); // So it shows up in help
-    if (libpng_enabled) {
-        try flags.append("-DFT_CONFIG_OPTION_USE_PNG=1");
-
-        if (b.systemIntegrationOption("libpng", .{})) {
-            lib.linkSystemLibrary2("libpng", dynamic_link_opts);
-        } else {
-            const libpng_dep = b.dependency(
-                "libpng",
-                .{ .target = target, .optimize = optimize },
-            );
-            lib.linkLibrary(libpng_dep.artifact("png"));
-        }
-    }
+    if (libpng_enabled) try flags.append("-DFT_CONFIG_OPTION_USE_PNG=1");
 
     if (b.lazyDependency("freetype", .{})) |upstream| {
         lib.addIncludePath(upstream.path("include"));
@@ -160,7 +132,6 @@ 
     b.installArtifact(lib);
 
-    return lib;
 }
 
 const srcs: []const []const u8 = &.{
