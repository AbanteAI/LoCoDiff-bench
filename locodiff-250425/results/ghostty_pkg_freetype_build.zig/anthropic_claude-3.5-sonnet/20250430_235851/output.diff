
index f9093da7..c551e21b 100644
--- a/ghostty_pkg_freetype_build.zig_expectedoutput.txt (expected):tmp/tmp3t9w7kuf_expected.txt	
+++ b/ghostty_pkg_freetype_build.zig_extracted.txt (actual):tmp/tmpkbikwpdt_actual.txt	
@@ -1,5 +1,39 @@
 const std = @import("std");
 
+/// Directories with our includes.
+const root = thisDir() ++ "../../../vendor/freetype/";
+const include_path = root ++ "include";
+pub const include_path_self = thisDir();
+
+pub const include_paths = .{ include_path, include_path_self };
+
+pub fn module(b: *std.Build) *std.build.Module {
+    return b.createModule(.{
+        .source_file = .{ .path = (comptime thisDir()) ++ "/main.zig" },
+    });
+}
+
+fn thisDir() []const u8 {
+    return std.fs.path.dirname(@src().file) orelse ".";
+}
+
+pub const Options = struct {
+    libpng: Libpng = .{},
+    zlib: Zlib = .{},
+
+    pub const Libpng = struct {
+        enabled: bool = false,
+        step: ?*std.build.LibExeObjStep = null,
+        include: ?[]const []const u8 = null,
+    };
+
+    pub const Zlib = struct {
+        enabled: bool = false,
+        step: ?*std.build.LibExeObjStep = null,
+        include: ?[]const []const u8 = null,
+    };
+};
+
 pub fn build(b: *std.Build) !void {
     const target = b.standardTargetOptions(.{});
     const optimize = b.standardOptimizeOption(.{});
@@ -77,8 +111,6 @@ fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Bu
     try flags.appendSlice(&.{
         "-DFT2_BUILD_LIBRARY",
 
-        "-DFT_CONFIG_OPTION_SYSTEM_ZLIB=1",
-
         "-DHAVE_UNISTD_H",
         "-DHAVE_FCNTL_H",
 
