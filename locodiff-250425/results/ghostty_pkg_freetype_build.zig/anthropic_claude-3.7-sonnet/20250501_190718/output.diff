--- ghostty_pkg_freetype_build.zig_expectedoutput.txt (expected)+++ ghostty_pkg_freetype_build.zig_extracted.txt (actual)@@ -1,169 +1,139 @@ const std = @import("std");
 
-pub fn build(b: *std.Build) !void {
-    const target = b.standardTargetOptions(.{});
-    const optimize = b.standardOptimizeOption(.{});
-    const libpng_enabled = b.option(bool, "enable-libpng", "Build libpng") orelse false;
+/// Directories with our includes.
+const root = thisDir() ++ "../../../vendor/freetype/";
+const include_path = root ++ "include";
+pub const include_path_self = thisDir();
 
-    const module = b.addModule("freetype", .{
-        .root_source_file = b.path("main.zig"),
-        .target = target,
-        .optimize = optimize,
+pub const include_paths = .{ include_path, include_path_self };
+
+pub fn module(b: *std.Build) *std.build.Module {
+    return b.createModule(.{
+        .source_file = .{ .path = (comptime thisDir()) ++ "/main.zig" },
     });
+}
 
-    // For dynamic linking, we prefer dynamic linking and to search by
-    // mode first. Mode first will search all paths for a dynamic library
-    // before falling back to static.
-    const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
-        .preferred_link_mode = .dynamic,
-        .search_strategy = .mode_first,
+fn thisDir() []const u8 {
+    return std.fs.path.dirname(@src().file) orelse ".";
+}
+
+pub const Options = struct {
+    libpng: Libpng = .{},
+    zlib: Zlib = .{},
+
+    pub const Libpng = struct {
+        enabled: bool = false,
+        step: ?*std.build.LibExeObjStep = null,
+        include: ?[]const []const u8 = null,
     };
 
-    var test_exe: ?*std.Build.Step.Compile = null;
-    if (target.query.isNative()) {
-        test_exe = b.addTest(.{
-            .name = "test",
-            .root_source_file = b.path("main.zig"),
-            .target = target,
-            .optimize = optimize,
-        });
-        const tests_run = b.addRunArtifact(test_exe.?);
-        const test_step = b.step("test", "Run tests");
-        test_step.dependOn(&tests_run.step);
-    }
+    pub const Zlib = struct {
+        enabled: bool = false,
+        step: ?*std.build.LibExeObjStep = null,
+        include: ?[]const []const u8 = null,
+    };
+};
 
-    module.addIncludePath(b.path(""));
-
-    if (b.systemIntegrationOption("freetype", .{})) {
-        module.linkSystemLibrary("freetype2", dynamic_link_opts);
-        if (test_exe) |exe| {
-            exe.linkSystemLibrary2("freetype2", dynamic_link_opts);
-        }
-    } else {
-        const lib = try buildLib(b, module, .{
-            .target = target,
-            .optimize = optimize,
-
-            .libpng_enabled = libpng_enabled,
-
-            .dynamic_link_opts = dynamic_link_opts,
-        });
-
-        if (test_exe) |exe| {
-            exe.linkLibrary(lib);
-        }
-    }
+pub fn link(
+    b: *std.Build,
+    step: *std.build.LibExeObjStep,
+    opt: Options,
+) !*std.build.LibExeObjStep {
+    const lib = try buildFreetype(b, step, opt);
+    step.linkLibrary(lib);
+    step.addIncludePath(.{ .path = include_path });
+    step.addIncludePath(.{ .path = include_path_self });
+    return lib;
 }
 
-fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Build.Step.Compile {
-    const target = options.target;
-    const optimize = options.optimize;
-
-    const libpng_enabled = options.libpng_enabled;
-
+pub fn buildFreetype(
+    b: *std.Build,
+    step: *std.build.LibExeObjStep,
+    opt: Options,
+) !*std.build.LibExeObjStep {
+    const target = step.target;
     const lib = b.addStaticLibrary(.{
         .name = "freetype",
         .target = target,
-        .optimize = optimize,
+        .optimize = step.optimize,
     });
+
+    // Include
+    lib.addIncludePath(.{ .path = include_path });
+
+    // Link
     lib.linkLibC();
-    if (target.result.os.tag.isDarwin()) {
-        const apple_sdk = @import("apple_sdk");
-        try apple_sdk.addPaths(b, lib.root_module);
+    if (opt.libpng.enabled) {
+        if (opt.libpng.step) |libpng|
+            lib.linkLibrary(libpng)
+        else
+            lib.linkSystemLibrary("libpng");
+
+        if (opt.libpng.include) |dirs|
+            for (dirs) |dir| lib.addIncludePath(.{ .path = dir });
+    }
+    if (opt.zlib.enabled) {
+        if (opt.zlib.step) |zlib|
+            lib.linkLibrary(zlib)
+        else
+            lib.linkSystemLibrary("z");
+
+        if (opt.zlib.include) |dirs|
+            for (dirs) |dir| lib.addIncludePath(.{ .path = dir });
     }
 
+    // Compile
     var flags = std.ArrayList([]const u8).init(b.allocator);
     defer flags.deinit();
+
     try flags.appendSlice(&.{
         "-DFT2_BUILD_LIBRARY",
-
-        "-DFT_CONFIG_OPTION_SYSTEM_ZLIB=1",
 
         "-DHAVE_UNISTD_H",
         "-DHAVE_FCNTL_H",
 
         "-fno-sanitize=undefined",
     });
+    if (opt.libpng.enabled) try flags.append("-DFT_CONFIG_OPTION_USE_PNG=1");
+    if (opt.zlib.enabled) try flags.append("-DFT_CONFIG_OPTION_SYSTEM_ZLIB=1");
 
-    const dynamic_link_opts = options.dynamic_link_opts;
-
-    // Zlib
-    if (b.systemIntegrationOption("zlib", .{})) {
-        lib.linkSystemLibrary2("zlib", dynamic_link_opts);
-    } else {
-        const zlib_dep = b.dependency("zlib", .{ .target = target, .optimize = optimize });
-        lib.linkLibrary(zlib_dep.artifact("z"));
+    // C files
+    lib.addCSourceFiles(.{
+        .root = .{ .path = root },
+        .files = srcs,
+        .flags = flags.items,
+    });
+    switch (target.result.os.tag) {
+        .linux => lib.addCSourceFile(.{
+            .file = .{ .path = root ++ "builds/unix/ftsystem.c" },
+            .flags = flags.items,
+        }),
+        .windows => lib.addCSourceFile(.{
+            .file = .{ .path = root ++ "builds/windows/ftsystem.c" },
+            .flags = flags.items,
+        }),
+        else => lib.addCSourceFile(.{
+            .file = .{ .path = root ++ "src/base/ftsystem.c" },
+            .flags = flags.items,
+        }),
     }
-
-    // Libpng
-    _ = b.systemIntegrationOption("libpng", .{}); // So it shows up in help
-    if (libpng_enabled) {
-        try flags.append("-DFT_CONFIG_OPTION_USE_PNG=1");
-
-        if (b.systemIntegrationOption("libpng", .{})) {
-            lib.linkSystemLibrary2("libpng", dynamic_link_opts);
-        } else {
-            const libpng_dep = b.dependency(
-                "libpng",
-                .{ .target = target, .optimize = optimize },
-            );
-            lib.linkLibrary(libpng_dep.artifact("png"));
-        }
+    switch (target.result.os.tag) {
+        .windows => {
+            lib.addCSourceFile(.{
+                .file = .{ .path = root ++ "builds/windows/ftdebug.c" },
+                .flags = flags.items,
+            });
+        },
+        else => lib.addCSourceFile(.{
+            .file = .{ .path = root ++ "src/base/ftdebug.c" },
+            .flags = flags.items,
+        }),
     }
-
-    if (b.lazyDependency("freetype", .{})) |upstream| {
-        lib.addIncludePath(upstream.path("include"));
-        module.addIncludePath(upstream.path("include"));
-        lib.addCSourceFiles(.{
-            .root = upstream.path(""),
-            .files = srcs,
-            .flags = flags.items,
-        });
-
-        switch (target.result.os.tag) {
-            .linux => lib.addCSourceFile(.{
-                .file = upstream.path("builds/unix/ftsystem.c"),
-                .flags = flags.items,
-            }),
-            .windows => lib.addCSourceFile(.{
-                .file = upstream.path("builds/windows/ftsystem.c"),
-                .flags = flags.items,
-            }),
-            else => lib.addCSourceFile(.{
-                .file = upstream.path("src/base/ftsystem.c"),
-                .flags = flags.items,
-            }),
-        }
-        switch (target.result.os.tag) {
-            .windows => {
-                lib.addCSourceFile(.{
-                    .file = upstream.path("builds/windows/ftdebug.c"),
-                    .flags = flags.items,
-                });
-                lib.addWin32ResourceFile(.{
-                    .file = upstream.path("src/base/ftver.rc"),
-                });
-            },
-            else => lib.addCSourceFile(.{
-                .file = upstream.path("src/base/ftdebug.c"),
-                .flags = flags.items,
-            }),
-        }
-
-        lib.installHeader(b.path("freetype-zig.h"), "freetype-zig.h");
-        lib.installHeadersDirectory(
-            upstream.path("include"),
-            "",
-            .{ .include_extensions = &.{".h"} },
-        );
-    }
-
-    b.installArtifact(lib);
 
     return lib;
 }
 
-const srcs: []const []const u8 = &.{
+const srcs = &.{
     "src/autofit/autofit.c",
     "src/base/ftbase.c",
     "src/base/ftbbox.c",
