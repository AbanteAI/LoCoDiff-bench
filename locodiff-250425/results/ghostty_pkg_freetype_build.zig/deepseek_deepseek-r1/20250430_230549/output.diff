
index f9093da7..cd8678f6 100644
--- a/ghostty_pkg_freetype_build.zig_expectedoutput.txt (expected):tmp/tmp06735u_v_expected.txt	
+++ b/ghostty_pkg_freetype_build.zig_extracted.txt (actual):tmp/tmp_b1h46cu_actual.txt	
@@ -11,9 +11,6 @@ pub fn build(b: *std.Build) !void {
         .optimize = optimize,
     });
 
-    // For dynamic linking, we prefer dynamic linking and to search by
-    // mode first. Mode first will search all paths for a dynamic library
-    // before falling back to static.
     const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
         .preferred_link_mode = .dynamic,
         .search_strategy = .mode_first,
@@ -43,9 +40,7 @@ pub fn build(b: *std.Build) !void {
         const lib = try buildLib(b, module, .{
             .target = target,
             .optimize = optimize,
-
             .libpng_enabled = libpng_enabled,
-
             .dynamic_link_opts = dynamic_link_opts,
         });
 
@@ -58,7 +53,6 @@ pub fn build(b: *std.Build) !void {
 fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Build.Step.Compile {
     const target = options.target;
     const optimize = options.optimize;
-
     const libpng_enabled = options.libpng_enabled;
 
     const lib = b.addStaticLibrary(.{
@@ -76,18 +70,14 @@ fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Bu
     defer flags.deinit();
     try flags.appendSlice(&.{
         "-DFT2_BUILD_LIBRARY",
-
         "-DFT_CONFIG_OPTION_SYSTEM_ZLIB=1",
-
         "-DHAVE_UNISTD_H",
         "-DHAVE_FCNTL_H",
-
         "-fno-sanitize=undefined",
     });
 
     const dynamic_link_opts = options.dynamic_link_opts;
 
-    // Zlib
     if (b.systemIntegrationOption("zlib", .{})) {
         lib.linkSystemLibrary2("zlib", dynamic_link_opts);
     } else {
@@ -95,18 +85,13 @@ fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Bu
         lib.linkLibrary(zlib_dep.artifact("z"));
     }
 
-    // Libpng
-    _ = b.systemIntegrationOption("libpng", .{}); // So it shows up in help
+    _ = b.systemIntegrationOption("libpng", .{});
     if (libpng_enabled) {
         try flags.append("-DFT_CONFIG_OPTION_USE_PNG=1");
-
         if (b.systemIntegrationOption("libpng", .{})) {
             lib.linkSystemLibrary2("libpng", dynamic_link_opts);
         } else {
-            const libpng_dep = b.dependency(
-                "libpng",
-                .{ .target = target, .optimize = optimize },
-            );
+            const libpng_dep = b.dependency("libpng", .{ .target = target, .optimize = optimize });
             lib.linkLibrary(libpng_dep.artifact("png"));
         }
     }
@@ -116,7 +101,48 @@ fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Bu
         module.addIncludePath(upstream.path("include"));
         lib.addCSourceFiles(.{
             .root = upstream.path(""),
-            .files = srcs,
+            .files = &.{
+                "src/autofit/autofit.c",
+                "src/base/ftbase.c",
+                "src/base/ftbbox.c",
+                "src/base/ftbdf.c",
+                "src/base/ftbitmap.c",
+                "src/base/ftcid.c",
+                "src/base/ftfstype.c",
+                "src/base/ftgasp.c",
+                "src/base/ftglyph.c",
+                "src/base/ftgxval.c",
+                "src/base/ftinit.c",
+                "src/base/ftmm.c",
+                "src/base/ftotval.c",
+                "src/base/ftpatent.c",
+                "src/base/ftpfr.c",
+                "src/base/ftstroke.c",
+                "src/base/ftsynth.c",
+                "src/base/fttype1.c",
+                "src/base/ftwinfnt.c",
+                "src/bdf/bdf.c",
+                "src/bzip2/ftbzip2.c",
+                "src/cache/ftcache.c",
+                "src/cff/cff.c",
+                "src/cid/type1cid.c",
+                "src/gzip/ftgzip.c",
+                "src/lzw/ftlzw.c",
+                "src/pcf/pcf.c",
+                "src/pfr/pfr.c",
+                "src/psaux/psaux.c",
+                "src/pshinter/pshinter.c",
+                "src/psnames/psnames.c",
+                "src/raster/raster.c",
+                "src/sdf/sdf.c",
+                "src/sfnt/sfnt.c",
+                "src/smooth/smooth.c",
+                "src/svg/svg.c",
+                "src/truetype/truetype.c",
+                "src/type1/type1.c",
+                "src/type42/type42.c",
+                "src/winfonts/winfnt.c",
+            },
             .flags = flags.items,
         });
 
@@ -159,49 +185,5 @@ fn buildLib(b: *std.Build, module: *std.Build.Module, options: anytype) !*std.Bu
     }
 
     b.installArtifact(lib);
-
     return lib;
-}
-
-const srcs: []const []const u8 = &.{
-    "src/autofit/autofit.c",
-    "src/base/ftbase.c",
-    "src/base/ftbbox.c",
-    "src/base/ftbdf.c",
-    "src/base/ftbitmap.c",
-    "src/base/ftcid.c",
-    "src/base/ftfstype.c",
-    "src/base/ftgasp.c",
-    "src/base/ftglyph.c",
-    "src/base/ftgxval.c",
-    "src/base/ftinit.c",
-    "src/base/ftmm.c",
-    "src/base/ftotval.c",
-    "src/base/ftpatent.c",
-    "src/base/ftpfr.c",
-    "src/base/ftstroke.c",
-    "src/base/ftsynth.c",
-    "src/base/fttype1.c",
-    "src/base/ftwinfnt.c",
-    "src/bdf/bdf.c",
-    "src/bzip2/ftbzip2.c",
-    "src/cache/ftcache.c",
-    "src/cff/cff.c",
-    "src/cid/type1cid.c",
-    "src/gzip/ftgzip.c",
-    "src/lzw/ftlzw.c",
-    "src/pcf/pcf.c",
-    "src/pfr/pfr.c",
-    "src/psaux/psaux.c",
-    "src/pshinter/pshinter.c",
-    "src/psnames/psnames.c",
-    "src/raster/raster.c",
-    "src/sdf/sdf.c",
-    "src/sfnt/sfnt.c",
-    "src/smooth/smooth.c",
-    "src/svg/svg.c",
-    "src/truetype/truetype.c",
-    "src/type1/type1.c",
-    "src/type42/type42.c",
-    "src/winfonts/winfnt.c",
-};
\ No newline at end of file
+}
\ No newline at end of file
