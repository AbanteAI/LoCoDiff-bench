
index e13fe6a37..42f9ce5d9 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaFileShareMenu_Tabs_TlaExportTab.tsx_expectedoutput.txt (expected):tmp/tmplfm30pud_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaFileShareMenu_Tabs_TlaExportTab.tsx_extracted.txt (actual):tmp/tmp19kbnqh0_actual.txt	
@@ -14,10 +14,10 @@ import {
 } from 'tldraw'
 import { globalEditor } from '../../../../utils/globalEditor'
 import { TldrawApp } from '../../../app/TldrawApp'
+import { F, defineMessages, useMsg } from '../../../utils/i18n'
 import { useMaybeApp } from '../../../hooks/useAppState'
 import { useTldrawAppUiEvents } from '../../../utils/app-ui-events'
 import { getCurrentEditor } from '../../../utils/getCurrentEditor'
-import { F, defineMessages, useMsg } from '../../../utils/i18n'
 import {
 	TldrawAppSessionState,
 	getLocalSessionState,
@@ -191,16 +191,17 @@ function ExportThemeSelect({
 			<TlaMenuControlLabel>
 				<F defaultMessage="Theme" />
 			</TlaMenuControlLabel>
-			<TlaSelect
-				value={value}
-				label={label}
-				onChange={handleChange}
-				options={[
-					{ value: 'auto', label: <F defaultMessage="Auto" /> },
-					{ value: 'light', label: <F defaultMessage="Light" /> },
-					{ value: 'dark', label: <F defaultMessage="Dark" /> },
-				]}
-			/>
+			<TlaSelect value={value} label={label} onChange={handleChange}>
+				<option value="auto">
+					<F defaultMessage="Auto" />
+				</option>
+				<option value="light">
+					<F defaultMessage="Light" />
+				</option>
+				<option value="dark">
+					<F defaultMessage="Dark" />
+				</option>
+			</TlaSelect>
 		</TlaMenuControl>
 	)
 }
@@ -322,61 +323,4 @@ function ExportPreviewImage() {
 			<img ref={ref} className={styles.exportPreviewInner} />
 			<div
 				ref={rImagePreviewSize}
-				className={classNames(styles.exportPreviewSize, 'tla-text_ui__small')}
-			/>
-		</div>
-	)
-}
-
-async function getEditorImage(
-	editor: Editor,
-	shapes: TLShape[],
-	preferences: TldrawAppSessionState['exportSettings'],
-	cb: (info: { src: string; width: number; height: number }) => void
-) {
-	const { exportPadding, exportBackground, exportTheme } = preferences
-
-	const commonBounds = Box.Common(shapes.map((s) => editor.getShapePageBounds(s)!))
-
-	// image max is 216x216, so let's say 500 to be nice and safe
-	const scale = Math.min(500 / commonBounds.width, 500 / commonBounds.height)
-
-	const result = await editor.toImage(shapes, {
-		scale,
-		format: 'png',
-		padding: exportPadding ? editor.options.defaultSvgPadding : 0,
-		background: exportBackground,
-		darkMode: exportTheme === 'auto' ? undefined : exportTheme === 'dark',
-	})
-
-	if (!result) return
-
-	const src = await FileHelpers.blobToDataUrl(result.blob)
-
-	cb({ src, width: Math.ceil(result.width / scale), height: Math.ceil(result.height / scale) })
-}
-
-const getEditorImageSlowly = debounce(getEditorImage, 60)
-
-function getExportPreferences(app: TldrawApp | null) {
-	const sessionState = getLocalSessionState()
-
-	let { exportPadding, exportBackground, exportTheme, exportFormat } = sessionState.exportSettings
-
-	if (app && sessionState.auth) {
-		const user = app.getUser()
-		if (user) {
-			exportPadding = user.exportPadding
-			exportBackground = user.exportBackground
-			exportTheme = user.exportTheme
-			exportFormat = user.exportFormat
-		}
-	}
-
-	return {
-		exportPadding,
-		exportBackground,
-		exportTheme,
-		exportFormat,
-	}
-}
\ No newline at end of file
+				className={classNames(styles.exportPreviewSize
\ No newline at end of file
