
index e13fe6a37..0951093b6 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaFileShareMenu_Tabs_TlaExportTab.tsx_expectedoutput.txt (expected):tmp/tmp3x3hmyt0_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaFileShareMenu_Tabs_TlaExportTab.tsx_extracted.txt (actual):tmp/tmpy2zc_rsb_actual.txt	
@@ -17,7 +17,6 @@ import { TldrawApp } from '../../../app/TldrawApp'
 import { useMaybeApp } from '../../../hooks/useAppState'
 import { useTldrawAppUiEvents } from '../../../utils/app-ui-events'
 import { getCurrentEditor } from '../../../utils/getCurrentEditor'
-import { F, defineMessages, useMsg } from '../../../utils/i18n'
 import {
 	TldrawAppSessionState,
 	getLocalSessionState,
@@ -33,36 +32,38 @@ import {
 	TlaMenuSection,
 } from '../../tla-menu/tla-menu'
 import styles from '../file-share-menu.module.css'
+import { F, defineMessages, useMsg } from '../../../utils/i18n'
 
 export function TlaExportTab() {
 	const app = useMaybeApp()
 
 	const preferences = useValue('preferences', () => getExportPreferences(app), [app])
 
-	const onChange = useCallback(
+	const onChange = useCallback<
 		<T extends keyof TldrawAppSessionState['exportSettings']>(
 			key: T,
 			value: TldrawAppSessionState['exportSettings'][T]
-		) => {
-			if (app) {
-				app.updateUserExportPreferences({ [key]: value })
-			} else {
-				updateLocalSessionState((s) => ({ exportSettings: { ...s.exportSettings, [key]: value } }))
-			}
-		},
-		[app]
-	)
+		) => void
+	>((key, value) => {
+		if (app) {
+			app.updateUserExportPreferences({ [key]: value })
+		} else {
+			updateLocalSessionState((s) => ({
+				exportSettings: { ...s.exportSettings, [key]: value },
+			}))
+		}
+	}, [app])
 
 	const { exportPadding, exportBackground, exportTheme, exportFormat } = preferences
 
 	return (
 		<TlaMenuSection>
-			<TlaMenuControlGroup>
+			<TlaControlGroup>
 				<ExportBackgroundToggle onChange={onChange} value={exportBackground} />
 				<ExportPaddingToggle onChange={onChange} value={exportPadding} />
-				<ExportThemeSelect onChange={onChange} value={exportTheme} />
-				<ExportFormatSelect onChange={onChange} value={exportFormat} />
-			</TlaMenuControlGroup>
+				<ExportThemeSelect value={exportTheme} onChange={onChange} />
+				<ExportFormatSelect value={exportFormat} onChange={onChange} />
+			</TlaControlGroup>
 			<ExportPreviewImage />
 			<ExportImageButton />
 		</TlaMenuSection>
@@ -84,16 +85,19 @@ function ExportPaddingToggle({
 	const handleChange = useCallback(() => {
 		const padding = !value
 		onChange('exportPadding', padding)
-		trackEvent('toggle-export-padding', { padding, source: 'file-share-menu' })
+		trackEvent('toggle-export-padding', {
+			padding,
+			source: 'file-share-menu',
+		})
 	}, [trackEvent, value, onChange])
 
 	return (
 		<TlaMenuControl>
 			<TlaMenuControlLabel>
 				<F defaultMessage="Padding" />
-			</TlaMenuControlLabel>
+			</TlaMenuLabel>
 			<TlaSwitch checked={value} onChange={handleChange} />
-		</TlaMenuControl>
+		</TlaControl>
 	)
 }
 
@@ -112,16 +116,19 @@ function ExportBackgroundToggle({
 	const handleChange = useCallback(() => {
 		const background = !value
 		onChange('exportBackground', background)
-		trackEvent('toggle-export-background', { background, source: 'file-share-menu' })
+		trackEvent('toggle-export-background', {
+			background,
+			source: 'file-share-menu',
+		})
 	}, [value, onChange, trackEvent])
 
 	return (
 		<TlaMenuControl>
-			<TlaMenuControlLabel>
+			<TlaMenuLabel>
 				<F defaultMessage="Background" />
-			</TlaMenuControlLabel>
+			</TlaMenuLabel>
 			<TlaSwitch checked={value} onChange={handleChange} />
-		</TlaMenuControl>
+		</TlaControl>
 	)
 }
 
@@ -140,16 +147,19 @@ function ExportFormatSelect({
 	const handleChange = useCallback(
 		(value: TldrawAppSessionState['exportSettings']['exportFormat']) => {
 			onChange('exportFormat', value)
-			trackEvent('set-export-format', { format: value, source: 'file-share-menu' })
+			trackEvent('set-export-format', {
+				format: value,
+				source: 'file-share-menu',
+			})
 		},
 		[onChange, trackEvent]
 	)
 
 	return (
 		<TlaMenuControl>
-			<TlaMenuControlLabel>
+			<TlaMenuLabel>
 				<F defaultMessage="Export as" />
-			</TlaMenuControlLabel>
+			</TlaMenuLabel>
 			<TlaSelect
 				value={value}
 				label={value === 'svg' ? 'SVG' : 'PNG'}
@@ -159,7 +169,7 @@ function ExportFormatSelect({
 					{ value: 'png', label: <F defaultMessage="PNG" /> },
 				]}
 			/>
-		</TlaMenuControl>
+		</TlaControls>
 	)
 }
 
@@ -178,37 +188,35 @@ function ExportThemeSelect({
 }) {
 	const label = useMsg(messages[value as 'auto' | 'light' | 'dark'])
 	const trackEvent = useTldrawAppUiEvents()
+
 	const handleChange = useCallback(
 		(value: TldrawAppSessionState['exportSettings']['exportTheme']) => {
 			onChange('exportTheme', value)
-			trackEvent('set-export-theme', { theme: value, source: 'file-share-menu' })
+			trackEvent('set-export-theme', {
+				theme: value,
+				source: 'file-share-menu',
+			})
 		},
 		[onChange, trackEvent]
 	)
 
 	return (
 		<TlaMenuControl>
-			<TlaMenuControlLabel>
+			<TlaMenuLabel>
 				<F defaultMessage="Theme" />
-			</TlaMenuControlLabel>
-			<TlaSelect
-				value={value}
-				label={label}
-				onChange={handleChange}
-				options={[
-					{ value: 'auto', label: <F defaultMessage="Auto" /> },
-					{ value: 'light', label: <F defaultMessage="Light" /> },
-					{ value: 'dark', label: <F defaultMessage="Dark" /> },
-				]}
-			/>
-		</TlaMenuControl>
+			</TlaMenuLabel>
+			<TlaSelect value={value} label={label} onChange={handleChange} options={[
+				{ value: 'auto', label: <F defaultMessage="Auto" /> },
+				{ value: 'light', label: <F defaultMessage="Light" /> },
+				{ value: 'dark', label: <F defaultMessage="Dark" /> },
+			]} />
+		</TlaControl>
 	)
 }
 
 function ExportImageButton() {
 	const app = useMaybeApp()
 	const trackEvent = useTldrawAppUiEvents()
-
 	const [exported, setExported] = useState(false)
 
 	const handleClick = useCallback(() => {
@@ -217,7 +225,9 @@ function ExportImageButton() {
 		const editor = getCurrentEditor()
 		if (!editor) return
 
-		const { exportPadding, exportBackground, exportTheme, exportFormat } = getExportPreferences(app)
+		const { exportPadding, exportBackground, exportTheme, exportFormat } = getExportPreferences(
+			app
+		)
 
 		let fullPage = false
 
@@ -232,7 +242,7 @@ function ExportImageButton() {
 			background: exportBackground,
 			darkMode: exportTheme === 'auto' ? undefined : exportTheme === 'dark',
 			format: exportFormat as TLExportType,
-		}
+		} as const
 
 		exportAs(editor, ids, opts)
 
@@ -254,18 +264,15 @@ function ExportImageButton() {
 	}, [exported, trackEvent, app])
 
 	return (
-		<>
-			<TlaButton className="tla-share-menu__copy-button" onClick={handleClick} iconRight="export">
-				<F defaultMessage="Export image" />
-			</TlaButton>
-		</>
+		<TlaButton className="tla-share-menu__copy-button" onClick={handleClick} iconRight="export">
+			<F defaultMessage="Export image" />
+		</TlaButton>
 	)
 }
 
 function ExportPreviewImage() {
 	const app = useMaybeApp()
 	const ref = useRef<HTMLImageElement>(null)
-
 	const rImagePreviewSize = useRef<HTMLDivElement>(null)
 
 	useReactor(
@@ -278,7 +285,6 @@ function ExportPreviewImage() {
 
 			const preferences = getExportPreferences(app)
 
-			// We need shapes here so that the reactor updates when selected shapes change
 			let shapes = editor.getSelectedShapes()
 			if (shapes.length === 0) {
 				shapes = compact(
@@ -297,17 +303,17 @@ function ExportPreviewImage() {
 				return
 			}
 
-			// while lots of shapes are selected, debounce a little so that the thread doesn't freeze when editing the page
 			const fn = shapes.length > 20 ? getEditorImageSlowly : getEditorImage
 
 			fn(editor, shapes, preferences, ({ src, width, height }) => {
 				if (cancelled) return
-				const elm = ref.current
-				if (!elm) return
-				// We want to use an image element here so that a user can right click and copy / save / drag the qr code
-				elm.setAttribute('src', src)
+				const imgElm = ref.current
+				if (!imgElm) return
+				imgElm.setAttribute('src', src)
 				const sizeElm = rImagePreviewSize.current
-				if (sizeElm) sizeElm.textContent = `${width.toFixed()}×${height.toFixed()}`
+				if (sizeElm) {
+					sizeElm.textContent = `${width.toFixed()}×${height.toFixed()}`
+				}
 			})
 
 			return () => {
@@ -338,7 +344,6 @@ async function getEditorImage(
 
 	const commonBounds = Box.Common(shapes.map((s) => editor.getShapePageBounds(s)!))
 
-	// image max is 216x216, so let's say 500 to be nice and safe
 	const scale = Math.min(500 / commonBounds.width, 500 / commonBounds.height)
 
 	const result = await editor.toImage(shapes, {
@@ -360,11 +365,11 @@ const getEditorImageSlowly = debounce(getEditorImage, 60)
 
 function getExportPreferences(app: TldrawApp | null) {
 	const sessionState = getLocalSessionState()
-
-	let { exportPadding, exportBackground, exportTheme, exportFormat } = sessionState.exportSettings
+	let { exportPadding, exportBackground, exportTheme, exportFormat } =
+		sessionState.exportSettings
 
 	if (app && sessionState.auth) {
-		const user = app.getUser()
+		const user = app.getUser(sessionState.auth.userId)
 		if (user) {
 			exportPadding = user.exportPadding
 			exportBackground = user.exportBackground
