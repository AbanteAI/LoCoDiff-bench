
index 1992834e..ab330401 100644
--- a/aider_aider_coders_patch_coder.py_expectedoutput.txt (expected):tmp/tmpbuihip71_expected.txt	
+++ b/aider_aider_coders_patch_coder.py_extracted.txt (actual):tmp/tmp9_cs2epz_actual.txt	
@@ -1,5 +1,6 @@
 import pathlib
-from dataclasses import dataclass, field
+import re
+from dataclasses import dataclass, field 
 from enum import Enum
 from typing import Dict, List, Optional, Tuple
 
@@ -8,7 +9,7 @@ from .patch_prompts import PatchPrompts
 
 
 # --------------------------------------------------------------------------- #
-#  Domain objects & Exceptions (Adapted from apply_patch.py)
+#  Domain objects & Exceptions (Adapted from apply_patch.py) 
 # --------------------------------------------------------------------------- #
 class DiffError(ValueError):
     """Any problem detected while parsing or applying a patch."""
@@ -16,11 +17,11 @@ class DiffError(ValueError):
 
 class ActionType(str, Enum):
     ADD = "Add"
-    DELETE = "Delete"
+    DELETE = "Delete" 
     UPDATE = "Update"
 
 
-@dataclass
+@dataclass 
 class Chunk:
     orig_index: int = -1  # Line number in the *original* file block where the change starts
     del_lines: List[str] = field(default_factory=list)
@@ -34,7 +35,7 @@ class PatchAction:
     # For ADD:
     new_content: Optional[str] = None
     # For UPDATE:
-    chunks: List[Chunk] = field(default_factory=list)
+    chunks: List[Chunk] = field(default_factory=list)  
     move_path: Optional[str] = None
 
 
@@ -102,7 +103,7 @@ def peek_next_section(lines: List[str], index: int) -> Tuple[List[str], List[Chu
     del_lines: List[str] = []
     ins_lines: List[str] = []
     chunks: List[Chunk] = []
-    mode = "keep"  # Start by expecting context lines
+    mode = "keep"  # Start by expecting context lines 
     start_index = index
 
     while index < len(lines):
@@ -115,7 +116,7 @@ def peek_next_section(lines: List[str], index: int) -> Tuple[List[str], List[Chu
                 "@@",
                 "*** End Patch",
                 "*** Update File:",
-                "*** Delete File:",
+                "*** Delete File:", 
                 "*** Add File:",
                 "*** End of File",  # Special terminator
             )
@@ -209,7 +210,7 @@ def identify_files_needed(text: str) -> List[str]:
 # --------------------------------------------------------------------------- #
 class PatchCoder(Coder):
     """
-    A coder that uses a custom patch format for code modifications,
+    A coder that uses a custom patch format for code modifications,  
     inspired by the format described in tmp.gpt41edits.txt.
     Applies patches using logic adapted from the reference apply_patch.py script.
     """
@@ -328,7 +329,7 @@ class PatchCoder(Coder):
 
                 existing_action = patch.actions.get(path)
                 if existing_action is not None:
-                    # Merge additional UPDATE block into the existing one
+                    # Merge additional UPDATE block into the existing one 
                     if existing_action.type != ActionType.UPDATE:
                         raise DiffError(f"Conflicting actions for file: {path}")
 
@@ -347,7 +348,7 @@ class PatchCoder(Coder):
                     action, index, fuzz = self._parse_update_file_sections(
                         lines, index, file_content
                     )
-                    action.path = path
+                    action.path = path  
                     action.move_path = move_to
                     patch.actions[path] = action
                     fuzz_accumulator += fuzz
@@ -546,12 +547,12 @@ class PatchCoder(Coder):
         action = PatchAction(type=ActionType.ADD, path="", new_content="\n".join(added_lines))
         return action, index
 
-    def apply_edits(self, edits: List[PatchAction]):
+    def apply_edits(self, edits: List[EditResult]):
         """
         Applies the parsed PatchActions to the corresponding files.
         """
         if not edits:
-            return
+            return 
 
         # Group edits by original path? Not strictly needed if processed sequentially.
 
