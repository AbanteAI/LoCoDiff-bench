
index 1992834e..df9a5019 100644
--- a/aider_aider_coders_patch_coder.py_expectedoutput.txt (expected):tmp/tmp3iyftuft_expected.txt	
+++ b/aider_aider_coders_patch_coder.py_extracted.txt (actual):tmp/tmp1hkq7rmn_actual.txt	
@@ -147,6 +147,7 @@ def peek_next_section(lines: List[str], index: int) -> Tuple[List[str], List[Chu
             # but strict format requires ' '. Raise error for strictness.
             raise DiffError(f"Invalid line prefix in update section: {line}")
 
+
         # If mode changes from add/delete back to keep, finalize the previous chunk
         if mode == "keep" and last_mode != "keep":
             if del_lines or ins_lines:
@@ -484,6 +485,7 @@ class PatchCoder(Coder):
                     scope_txt = "\n".join(scope_lines)
                     raise DiffError(f"Could not find scope context:\n{scope_txt}")
 
+
             # Peek and parse the next context/change section
             context_block, chunks_in_section, next_index, is_eof = peek_next_section(lines, index)
 
@@ -513,6 +515,7 @@ class PatchCoder(Coder):
 
         return action, index, total_fuzz
 
+
     def _parse_add_file_content(self, lines: List[str], index: int) -> Tuple[PatchAction, int]:
         """Parses the content (+) lines for an Add File action."""
         added_lines: List[str] = []
@@ -546,7 +549,7 @@ class PatchCoder(Coder):
         action = PatchAction(type=ActionType.ADD, path="", new_content="\n".join(added_lines))
         return action, index
 
-    def apply_edits(self, edits: List[PatchAction]):
+    def apply_edits(self, edits: List[EditResult]):
         """
         Applies the parsed PatchActions to the corresponding files.
         """
@@ -618,6 +621,7 @@ class PatchCoder(Coder):
                     else:
                         self.io.tool_output(f"Updating {action.path}")
 
+
                     # Ensure parent directory exists for target
                     target_path_obj.parent.mkdir(parents=True, exist_ok=True)
                     self.io.write_text(target_full_path, new_content)
