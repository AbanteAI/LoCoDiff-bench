
index d55d5dc5..303bcab5 100644
--- a/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_expectedoutput.txt (expected):tmp/tmpe6t54w4n_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_extracted.txt (actual):tmp/tmpu6vu1npj_actual.txt	
@@ -40,28 +40,35 @@ import WarnIfLegacyBackendDetected from './WarnIfLegacyBackendDetected';
 import {useLocalStorage} from './hooks';
 import ThemeProvider from './ThemeProvider';
 import {LOCAL_STORAGE_DEFAULT_TAB_KEY} from '../../constants';
+import type {FetchFileWithCaching} from './Components/FetchFileWithCachingContext';
+import type {HookNamesModuleLoaderFunction} from 'react-devtools-shared/src/devtools/views/Components/HookNamesModuleLoaderContext';
+import type {FrontendBridge} from 'react-devtools-shared/src/bridge';
+import type {BrowserTheme} from 'react-devtools-shared/src/types';
+import type {Source} from 'react-devtools-shared/src/shared/types';
 import {logEvent} from '../../Logger';
 
 import styles from './DevTools.css';
 
 import './root.css';
 
-import type {FetchFileWithCaching} from './Components/FetchFileWithCachingContext';
-import type {HookNamesModuleLoaderFunction} from 'react-devtools-shared/src/devtools/views/Components/HookNamesModuleLoaderContext';
-import type {FrontendBridge} from 'react-devtools-shared/src/bridge';
-import type {BrowserTheme} from 'react-devtools-shared/src/frontend/types';
-import type {Source} from 'react-devtools-shared/src/shared/types';
-
 export type TabID = 'components' | 'profiler';
 
+export type FetchFileWithCaching = (url: string) => Promise<string>;
+export type PrefetchSourceFiles = (
+  hooksTree: HooksTree,
+  fetchFileWithCaching: FetchFileWithCaching | null,
+) => void;
+
 export type ViewElementSource = (
   source: Source,
   symbolicatedSource: Source | null,
 ) => void;
+
 export type ViewAttributeSource = (
   id: number,
   path: Array<string | number>,
 ) => void;
+
 export type CanViewElementSource = (
   source: Source,
   symbolicatedSource: Source | null,
@@ -72,38 +79,25 @@ export type Props = {
   browserTheme?: BrowserTheme,
   canViewElementSourceFunction?: ?CanViewElementSource,
   defaultTab?: TabID,
-  enabledInspectedElementContextMenu?: boolean,
+  componentsPortalContainer?: Element,
+  overrideTab?: TabID,
+  profilerPortalContainer?: Element,
   showTabBar?: boolean,
   store: Store,
   warnIfLegacyBackendDetected?: boolean,
   warnIfUnsupportedVersionDetected?: boolean,
   viewAttributeSourceFunction?: ?ViewAttributeSource,
   viewElementSourceFunction?: ?ViewElementSource,
+  fetchFileWithCaching?: ?FetchFileWithCaching,
+  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
+  prefetchSourceFiles?: ?PrefetchSourceFiles,
+  purgeCachedHookNamesMetadata?: ?PurgeCachedHookNamesMetadata,
   readOnly?: boolean,
   hideSettings?: boolean,
   hideToggleErrorAction?: boolean,
   hideToggleSuspenseAction?: boolean,
   hideLogAction?: boolean,
   hideViewSourceAction?: boolean,
-
-  // This property is used only by the web extension target.
-  // The built-in tab UI is hidden in that case, in favor of the browser's own panel tabs.
-  // This is done to save space within the app.
-  // Because of this, the extension needs to be able to change which tab is active/rendered.
-  overrideTab?: TabID,
-
-  // To avoid potential multi-root trickiness, the web extension uses portals to render tabs.
-  // The root <DevTools> app is rendered in the top-level extension window,
-  // but individual tabs (e.g. Components, Profiling) can be rendered into portals within their browser panels.
-  componentsPortalContainer?: Element,
-  profilerPortalContainer?: Element,
-
-  // Loads and parses source maps for function components
-  // and extracts hook "names" based on the variables the hook return values get assigned to.
-  // Not every DevTools build can load source maps, so this property is optional.
-  fetchFileWithCaching?: ?FetchFileWithCaching,
-  // TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.
-  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
 };
 
 const componentsTab = {
@@ -112,6 +106,7 @@ const componentsTab = {
   label: 'Components',
   title: 'React Components',
 };
+
 const profilerTab = {
   id: ('profiler': TabID),
   icon: 'profiler',
@@ -125,11 +120,8 @@ export default function DevTools({
   bridge,
   browserTheme = 'light',
   canViewElementSourceFunction,
-  componentsPortalContainer,
   defaultTab = 'components',
-  enabledInspectedElementContextMenu = false,
-  fetchFileWithCaching,
-  hookNamesModuleLoaderFunction,
+  componentsPortalContainer,
   overrideTab,
   profilerPortalContainer,
   showTabBar = false,
@@ -138,6 +130,10 @@ export default function DevTools({
   warnIfUnsupportedVersionDetected = false,
   viewAttributeSourceFunction,
   viewElementSourceFunction,
+  fetchFileWithCaching,
+  hookNamesModuleLoaderFunction,
+  prefetchSourceFiles,
+  purgeCachedHookNamesMetadata,
   readOnly,
   hideSettings,
   hideToggleErrorAction,
@@ -151,18 +147,13 @@ export default function DevTools({
   );
 
   let tab = currentTab;
-
   if (overrideTab != null) {
     tab = overrideTab;
   }
 
   const selectTab = useCallback(
     (tabId: TabID) => {
-      // We show the TabBar when DevTools is NOT rendered as a browser extension.
-      // In this case, we want to capture when people select tabs with the TabBar.
-      // When DevTools is rendered as an extension, we capture this event when
-      // the browser devtools panel changes.
-      if (showTabBar === true) {
+      if (showTabBar) {
         if (tabId === 'components') {
           logEvent({event_name: 'selected-components-tab'});
         } else {
@@ -215,12 +206,10 @@ export default function DevTools({
     if (!showTabBar) {
       return;
     }
-
     const div = devToolsRef.current;
     if (div === null) {
       return;
     }
-
     const ownerWindow = div.ownerDocument.defaultView;
     const handleKeyDown = (event: KeyboardEvent) => {
       if (event.ctrlKey || event.metaKey) {
@@ -242,7 +231,7 @@ export default function DevTools({
     return () => {
       ownerWindow.removeEventListener('keydown', handleKeyDown);
     };
-  }, [showTabBar]);
+  }, [showTabBar, selectTab]);
 
   useLayoutEffect(() => {
     return () => {
@@ -303,9 +292,7 @@ export default function DevTools({
                                     className={styles.TabContent}
                                     hidden={tab !== 'components'}>
                                     <Components
-                                      portalContainer={
-                                        componentsPortalContainer
-                                      }
+                                      portalContainer={componentsPortalContainer}
                                     />
                                   </div>
                                   <div
