
index d55d5dc5b..b77dab4ad 100644
--- a/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_expectedoutput.txt (expected):tmp/tmp2gqk803n_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_extracted.txt (actual):tmp/tmps1wy1ems_actual.txt	
@@ -8,12 +8,17 @@
  */
 
 // Reach styles need to come before any component styles.
-// This makes overriding the styles simpler.
 import '@reach/menu-button/styles.css';
 import '@reach/tooltip/styles.css';
 
 import * as React from 'react';
-import {useCallback, useEffect, useLayoutEffect, useMemo, useRef} from 'react';
+import {
+  useCallback,
+  useEffect,
+  useLayoutEffect,
+  useMemo,
+  useRef,
+} from 'react';
 import Store from '../store';
 import {
   BridgeContext,
@@ -28,7 +33,6 @@ import {SettingsContextController} from './Settings/SettingsContext';
 import {TreeContextController} from './Components/TreeContext';
 import ViewElementSourceContext from './Components/ViewElementSourceContext';
 import FetchFileWithCachingContext from './Components/FetchFileWithCachingContext';
-import {InspectedElementContextController} from './Components/InspectedElementContext';
 import HookNamesModuleLoaderContext from 'react-devtools-shared/src/devtools/views/Components/HookNamesModuleLoaderContext';
 import {ProfilerContextController} from './Profiler/ProfilerContext';
 import {TimelineContextController} from 'react-devtools-timeline/src/TimelineContext';
@@ -37,13 +41,10 @@ import ReactLogo from './ReactLogo';
 import UnsupportedBridgeProtocolDialog from './UnsupportedBridgeProtocolDialog';
 import UnsupportedVersionDialog from './UnsupportedVersionDialog';
 import WarnIfLegacyBackendDetected from './WarnIfLegacyBackendDetected';
-import {useLocalStorage} from './hooks';
 import ThemeProvider from './ThemeProvider';
-import {LOCAL_STORAGE_DEFAULT_TAB_KEY} from '../../constants';
-import {logEvent} from '../../Logger';
+import {InspectedElementContextController} from './Components/InspectedElementContext';
 
 import styles from './DevTools.css';
-
 import './root.css';
 
 import type {FetchFileWithCaching} from './Components/FetchFileWithCachingContext';
@@ -51,6 +52,9 @@ import type {HookNamesModuleLoaderFunction} from 'react-devtools-shared/src/devt
 import type {FrontendBridge} from 'react-devtools-shared/src/bridge';
 import type {BrowserTheme} from 'react-devtools-shared/src/frontend/types';
 import type {Source} from 'react-devtools-shared/src/shared/types';
+import type {TabID} from './constants'; // placeholder; actual type defined below
+import {logEvent} from '../../Logger';
+import {LOCAL_STORAGE_DEFAULT_TAB_KEY} from '../../constants';
 
 export type TabID = 'components' | 'profiler';
 
@@ -58,10 +62,12 @@ export type ViewElementSource = (
   source: Source,
   symbolicatedSource: Source | null,
 ) => void;
+
 export type ViewAttributeSource = (
   id: number,
   path: Array<string | number>,
 ) => void;
+
 export type CanViewElementSource = (
   source: Source,
   symbolicatedSource: Source | null,
@@ -73,107 +79,66 @@ export type Props = {
   canViewElementSourceFunction?: ?CanViewElementSource,
   defaultTab?: TabID,
   enabledInspectedElementContextMenu?: boolean,
+  fetchFileWithCaching?: ?FetchFileWithCaching,
+  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
   showTabBar?: boolean,
   store: Store,
   warnIfLegacyBackendDetected?: boolean,
   warnIfUnsupportedVersionDetected?: boolean,
   viewAttributeSourceFunction?: ?ViewAttributeSource,
   viewElementSourceFunction?: ?ViewElementSource,
+  // Options
   readOnly?: boolean,
   hideSettings?: boolean,
   hideToggleErrorAction?: boolean,
   hideToggleSuspenseAction?: boolean,
   hideLogAction?: boolean,
   hideViewSourceAction?: boolean,
-
-  // This property is used only by the web extension target.
-  // The built-in tab UI is hidden in that case, in favor of the browser's own panel tabs.
-  // This is done to save space within the app.
-  // Because of this, the extension needs to be able to change which tab is active/rendered.
-  overrideTab?: TabID,
-
-  // To avoid potential multi-root trickiness, the web extension uses portals to render tabs.
-  // The root <DevTools> app is rendered in the top-level extension window,
-  // but individual tabs (e.g. Components, Profiling) can be rendered into portals within their browser panels.
+  // Portal containers
   componentsPortalContainer?: Element,
   profilerPortalContainer?: Element,
-
-  // Loads and parses source maps for function components
-  // and extracts hook "names" based on the variables the hook return values get assigned to.
-  // Not every DevTools build can load source maps, so this property is optional.
-  fetchFileWithCaching?: ?FetchFileWithCaching,
-  // TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.
-  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
-};
-
-const componentsTab = {
-  id: ('components': TabID),
-  icon: 'components',
-  label: 'Components',
-  title: 'React Components',
-};
-const profilerTab = {
-  id: ('profiler': TabID),
-  icon: 'profiler',
-  label: 'Profiler',
-  title: 'React Profiler',
+  // Overrides
+  overrideTab?: TabID,
 };
 
-const tabs = [componentsTab, profilerTab];
-
 export default function DevTools({
   bridge,
   browserTheme = 'light',
   canViewElementSourceFunction,
-  componentsPortalContainer,
   defaultTab = 'components',
   enabledInspectedElementContextMenu = false,
   fetchFileWithCaching,
   hookNamesModuleLoaderFunction,
-  overrideTab,
-  profilerPortalContainer,
   showTabBar = false,
   store,
   warnIfLegacyBackendDetected = false,
   warnIfUnsupportedVersionDetected = false,
   viewAttributeSourceFunction,
   viewElementSourceFunction,
+  // Options
   readOnly,
   hideSettings,
   hideToggleErrorAction,
   hideToggleSuspenseAction,
   hideLogAction,
   hideViewSourceAction,
-}: Props): React.Node {
+  // Portals
+  componentsPortalContainer,
+  profilerPortalContainer,
+  // Override
+  overrideTab,
+}: Props) {
   const [currentTab, setTab] = useLocalStorage<TabID>(
     LOCAL_STORAGE_DEFAULT_TAB_KEY,
     defaultTab,
   );
 
+  // Apply override if provided (e.g., extension panel changes)
   let tab = currentTab;
-
   if (overrideTab != null) {
     tab = overrideTab;
   }
 
-  const selectTab = useCallback(
-    (tabId: TabID) => {
-      // We show the TabBar when DevTools is NOT rendered as a browser extension.
-      // In this case, we want to capture when people select tabs with the TabBar.
-      // When DevTools is rendered as an extension, we capture this event when
-      // the browser devtools panel changes.
-      if (showTabBar === true) {
-        if (tabId === 'components') {
-          logEvent({event_name: 'selected-components-tab'});
-        } else {
-          logEvent({event_name: 'selected-profiler-tab'});
-        }
-      }
-      setTab(tabId);
-    },
-    [setTab, showTabBar],
-  );
-
   const options = useMemo(
     () => ({
       readOnly: readOnly || false,
@@ -209,8 +174,21 @@ export default function DevTools({
     [enabledInspectedElementContextMenu, viewAttributeSourceFunction],
   );
 
-  const devToolsRef = useRef<HTMLElement | null>(null);
+  const selectTab = useCallback(
+    (tabId: TabID) => {
+      if (showTabBar === true) {
+        if (tabId === 'components') {
+          logEvent({event_name: 'selected-components-tab'});
+        } else {
+          logEvent({event_name: 'selected-profiler-tab'});
+        }
+      }
+      setTab(tabId);
+    },
+    [setTab, showTabBar],
+  );
 
+  // Shortcut keys (⌃/⌘ + 1/2) for switching tabs when the tab bar is visible.
   useEffect(() => {
     if (!showTabBar) {
       return;
@@ -242,12 +220,17 @@ export default function DevTools({
     return () => {
       ownerWindow.removeEventListener('keydown', handleKeyDown);
     };
-  }, [showTabBar]);
+  }, [showTabBar, selectTab]);
 
+  // Log that DevTools has been loaded.
+  useEffect(() => {
+    logEvent({event_name: 'loaded-dev-tools'});
+  }, []);
+
+  // Ensure Bridge shutdown on unmount.
   useLayoutEffect(() => {
     return () => {
       try {
-        // Shut the Bridge down synchronously (during unmount).
         bridge.shutdown();
       } catch (error) {
         // Attempting to use a disconnected port.
@@ -255,9 +238,7 @@ export default function DevTools({
     };
   }, [bridge]);
 
-  useEffect(() => {
-    logEvent({event_name: 'loaded-dev-tools'});
-  }, []);
+  const devToolsRef = useRef<HTMLElement | null>(null);
 
   return (
     <BridgeContext.Provider value={bridge}>
@@ -303,9 +284,7 @@ export default function DevTools({
                                     className={styles.TabContent}
                                     hidden={tab !== 'components'}>
                                     <Components
-                                      portalContainer={
-                                        componentsPortalContainer
-                                      }
+                                      portalContainer={componentsPortalContainer}
                                     />
                                   </div>
                                   <div
