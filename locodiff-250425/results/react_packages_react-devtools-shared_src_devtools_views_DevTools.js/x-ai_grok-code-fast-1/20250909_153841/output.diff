
index d55d5dc5b..f5b070573 100644
--- a/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_expectedoutput.txt (expected):tmp/tmprs0mgyua_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_views_DevTools.js_extracted.txt (actual):tmp/tmpknf01wdz_actual.txt	
@@ -3,12 +3,12 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @flow
  */
 
+// @flow
+
 // Reach styles need to come before any component styles.
-// This makes overriding the styles simpler.
+// This makes scoping the styles simpler.
 import '@reach/menu-button/styles.css';
 import '@reach/tooltip/styles.css';
 
@@ -46,6 +46,7 @@ import styles from './DevTools.css';
 
 import './root.css';
 
+import type {InspectedElement} from 'react-devtools-shared/src/devtools/views/Components/types';
 import type {FetchFileWithCaching} from './Components/FetchFileWithCachingContext';
 import type {HookNamesModuleLoaderFunction} from 'react-devtools-shared/src/devtools/views/Components/HookNamesModuleLoaderContext';
 import type {FrontendBridge} from 'react-devtools-shared/src/bridge';
@@ -72,7 +73,6 @@ export type Props = {
   browserTheme?: BrowserTheme,
   canViewElementSourceFunction?: ?CanViewElementSource,
   defaultTab?: TabID,
-  enabledInspectedElementContextMenu?: boolean,
   showTabBar?: boolean,
   store: Store,
   warnIfLegacyBackendDetected?: boolean,
@@ -85,24 +85,8 @@ export type Props = {
   hideToggleSuspenseAction?: boolean,
   hideLogAction?: boolean,
   hideViewSourceAction?: boolean,
-
-  // This property is used only by the web extension target.
-  // The built-in tab UI is hidden in that case, in favor of the browser's own panel tabs.
-  // This is done to save space within the app.
-  // Because of this, the extension needs to be able to change which tab is active/rendered.
-  overrideTab?: TabID,
-
-  // To avoid potential multi-root trickiness, the web extension uses portals to render tabs.
-  // The root <DevTools> app is rendered in the top-level extension window,
-  // but individual tabs (e.g. Components, Profiling) can be rendered into portals within their browser panels.
-  componentsPortalContainer?: Element,
-  profilerPortalContainer?: Element,
-
-  // Loads and parses source maps for function components
-  // and extracts hook "names" based on the variables the hook return values get assigned to.
-  // Not every DevTools build can load source maps, so this property is optional.
+  enabledInspectedElementContextMenu?: boolean,
   fetchFileWithCaching?: ?FetchFileWithCaching,
-  // TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.
   hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
 };
 
@@ -123,15 +107,9 @@ const tabs = [componentsTab, profilerTab];
 
 export default function DevTools({
   bridge,
-  browserTheme = 'light',
+  browserTheme,
   canViewElementSourceFunction,
-  componentsPortalContainer,
   defaultTab = 'components',
-  enabledInspectedElementContextMenu = false,
-  fetchFileWithCaching,
-  hookNamesModuleLoaderFunction,
-  overrideTab,
-  profilerPortalContainer,
   showTabBar = false,
   store,
   warnIfLegacyBackendDetected = false,
@@ -144,8 +122,11 @@ export default function DevTools({
   hideToggleSuspenseAction,
   hideLogAction,
   hideViewSourceAction,
+  enabledInspectedElementContextMenu = false,
+  fetchFileWithCaching,
+  hookNamesModuleLoaderFunction,
 }: Props): React.Node {
-  const [currentTab, setTab] = useLocalStorage<TabID>(
+  let [currentTab, setTab] = useLocalStorage<TabID>(
     LOCAL_STORAGE_DEFAULT_TAB_KEY,
     defaultTab,
   );
@@ -162,6 +143,8 @@ export default function DevTools({
       // In this case, we want to capture when people select tabs with the TabBar.
       // When DevTools is rendered as an extension, we capture this event when
       // the browser devtools panel changes.
+      // This is done to save space within the app.
+      // Because of this, the extension needs to be able to change which tab is active/rendered.
       if (showTabBar === true) {
         if (tabId === 'components') {
           logEvent({event_name: 'selected-components-tab'});
@@ -204,9 +187,8 @@ export default function DevTools({
   const contextMenu = useMemo(
     () => ({
       isEnabledForInspectedElement: enabledInspectedElementContextMenu,
-      viewAttributeSourceFunction: viewAttributeSourceFunction || null,
     }),
-    [enabledInspectedElementContextMenu, viewAttributeSourceFunction],
+    [enabledInspectedElementContextMenu],
   );
 
   const devToolsRef = useRef<HTMLElement | null>(null);
@@ -247,7 +229,6 @@ export default function DevTools({
   useLayoutEffect(() => {
     return () => {
       try {
-        // Shut the Bridge down synchronously (during unmount).
         bridge.shutdown();
       } catch (error) {
         // Attempting to use a disconnected port.
@@ -303,9 +284,7 @@ export default function DevTools({
                                     className={styles.TabContent}
                                     hidden={tab !== 'components'}>
                                     <Components
-                                      portalContainer={
-                                        componentsPortalContainer
-                                      }
+                                      portalContainer={componentsPortalContainer}
                                     />
                                   </div>
                                   <div
