--- react_packages_react-devtools-shared_src_devtools_views_DevTools.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src_devtools_views_DevTools.js_extracted.txt (actual)@@ -13,7 +13,13 @@ import '@reach/tooltip/styles.css';
 
 import * as React from 'react';
-import {useCallback, useEffect, useLayoutEffect, useMemo, useRef} from 'react';
+import {
+  useCallback,
+  useEffect,
+  useLayoutEffect,
+  useMemo,
+  useRef,
+} from 'react';
 import Store from '../store';
 import {
   BridgeContext,
@@ -71,8 +77,14 @@   bridge: FrontendBridge,
   browserTheme?: BrowserTheme,
   canViewElementSourceFunction?: ?CanViewElementSource,
+  componentsPortalContainer?: Element,
   defaultTab?: TabID,
   enabledInspectedElementContextMenu?: boolean,
+  fetchFileWithCaching?: ?FetchFileWithCaching,
+  // TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.
+  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
+  overrideTab?: TabID,
+  profilerPortalContainer?: Element,
   showTabBar?: boolean,
   store: Store,
   warnIfLegacyBackendDetected?: boolean,
@@ -85,25 +97,6 @@   hideToggleSuspenseAction?: boolean,
   hideLogAction?: boolean,
   hideViewSourceAction?: boolean,
-
-  // This property is used only by the web extension target.
-  // The built-in tab UI is hidden in that case, in favor of the browser's own panel tabs.
-  // This is done to save space within the app.
-  // Because of this, the extension needs to be able to change which tab is active/rendered.
-  overrideTab?: TabID,
-
-  // To avoid potential multi-root trickiness, the web extension uses portals to render tabs.
-  // The root <DevTools> app is rendered in the top-level extension window,
-  // but individual tabs (e.g. Components, Profiling) can be rendered into portals within their browser panels.
-  componentsPortalContainer?: Element,
-  profilerPortalContainer?: Element,
-
-  // Loads and parses source maps for function components
-  // and extracts hook "names" based on the variables the hook return values get assigned to.
-  // Not every DevTools build can load source maps, so this property is optional.
-  fetchFileWithCaching?: ?FetchFileWithCaching,
-  // TODO (Webpack 5) Hopefully we can remove this prop after the Webpack 5 migration.
-  hookNamesModuleLoaderFunction?: ?HookNamesModuleLoaderFunction,
 };
 
 const componentsTab = {
@@ -242,7 +235,7 @@     return () => {
       ownerWindow.removeEventListener('keydown', handleKeyDown);
     };
-  }, [showTabBar]);
+  }, [showTabBar, selectTab]);
 
   useLayoutEffect(() => {
     return () => {
@@ -258,7 +251,7 @@   useEffect(() => {
     logEvent({event_name: 'loaded-dev-tools'});
   }, []);
-
++
   return (
     <BridgeContext.Provider value={bridge}>
       <StoreContext.Provider value={store}>
