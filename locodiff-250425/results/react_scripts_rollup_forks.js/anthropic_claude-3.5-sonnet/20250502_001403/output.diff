
index d38f3657..4e26bfeb 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpp1xnh_8g_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpmcj9t2dc_actual.txt	
@@ -50,8 +50,8 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
 // algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
 // the behavior is easier to predict.
 const forks = Object.freeze({
-  // Without this fork, importing `shared/ReactSharedInternals` inside
-  // the `react` package itself would not work due to a cyclical dependency.
+  // NOTE: This is hard-coded to the main entry point of the (third-party)
+  // object-assign package.
   './packages/shared/ReactSharedInternals.js': (
     bundleType,
     entry,
@@ -455,30 +455,6 @@ const forks = Object.freeze({
         return null;
     }
   },
-
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.startsWith('use-sync-external-store/shim')) {
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
-    }
-    if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
-    }
-    return null;
-  },
-
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.endsWith('.native')) {
-      return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
-    }
-  },
 });
 
 module.exports = forks;
\ No newline at end of file
