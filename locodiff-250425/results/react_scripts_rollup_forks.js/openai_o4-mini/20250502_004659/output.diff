--- react_scripts_rollup_forks.js_expectedoutput.txt (expected)+++ react_scripts_rollup_forks.js_extracted.txt (actual)@@ -1,8 +1,8 @@ 'use strict';
 
-const fs = require('node:fs');
 const {bundleTypes, moduleTypes} = require('./bundles');
 const inlinedHostConfigs = require('../shared/inlinedHostConfigs');
+const fs = require('node:fs');
 
 const {
   FB_WWW_DEV,
@@ -18,23 +18,24 @@ const {RENDERER, RECONCILER} = moduleTypes;
 
 const RELEASE_CHANNEL = process.env.RELEASE_CHANNEL;
-
-// Default to building in experimental mode. If the release channel is set via
-// an environment variable, then check if it's "experimental".
 const __EXPERIMENTAL__ =
   typeof RELEASE_CHANNEL === 'string'
     ? RELEASE_CHANNEL === 'experimental'
     : true;
 
-function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
+// Fork paths are relative to the project root. They must include the full path,
+// including the extension. We intentionally don't use Node's module resolution
+// algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
+// the behavior is easier to predict.
+function findNearestExistingForkFile(pathPrefix, segmentedIdentifier, suffix) {
   const segments = segmentedIdentifier.split('-');
   while (segments.length) {
     const candidate = segments.join('-');
-    const forkPath = path + candidate + suffix;
+    const forkPath = pathPrefix + candidate + suffix;
     try {
       fs.statSync(forkPath);
       return forkPath;
-    } catch (error) {
+    } catch (err) {
       // Try the next candidate.
     }
     segments.pop();
@@ -44,11 +45,6 @@ 
 // If you need to replace a file with another file for a specific environment,
 // add it to this list with the logic for choosing the right replacement.
-
-// Fork paths are relative to the project root. They must include the full path,
-// including the extension. We intentionally don't use Node's module resolution
-// algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
-// the behavior is easier to predict.
 const forks = Object.freeze({
   // Without this fork, importing `shared/ReactSharedInternals` inside
   // the `react` package itself would not work due to a cyclical dependency.
@@ -65,65 +61,15 @@     if (entry === 'react/src/ReactServer.js') {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
-    if (entry === 'react-markup/src/ReactMarkupServer.js') {
-      // Inside the ReactMarkupServer render we don't refer to any shared internals
-      // but instead use our own internal copy of the state because you cannot use
-      // any of this state from a component anyway. E.g. you can't use a client hook.
-      return './packages/react/src/ReactSharedInternalsClient.js';
-    }
     if (bundle.condition === 'react-server') {
       return './packages/react-server/src/ReactSharedInternalsServer.js';
     }
     if (!entry.startsWith('react/') && dependencies.indexOf('react') === -1) {
-      // React internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
       return new Error(
         'Cannot use a module that depends on ReactSharedInternals ' +
           'from "' +
           entry +
           '" because it does not declare "react" in the package ' +
-          'dependencies or peerDependencies.'
-      );
-    }
-    return null;
-  },
-
-  // Without this fork, importing `shared/ReactDOMSharedInternals` inside
-  // the `react-dom` package itself would not work due to a cyclical dependency.
-  './packages/shared/ReactDOMSharedInternals.js': (
-    bundleType,
-    entry,
-    dependencies
-  ) => {
-    if (
-      entry === 'react-dom' ||
-      entry === 'react-dom/src/ReactDOMFB.js' ||
-      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
-      entry === 'react-dom/src/ReactDOMServer.js' ||
-      entry === 'react-markup/src/ReactMarkupClient.js' ||
-      entry === 'react-markup/src/ReactMarkupServer.js'
-    ) {
-      if (
-        bundleType === FB_WWW_DEV ||
-        bundleType === FB_WWW_PROD ||
-        bundleType === FB_WWW_PROFILING
-      ) {
-        return './packages/react-dom/src/ReactDOMSharedInternalsFB.js';
-      } else {
-        return './packages/react-dom/src/ReactDOMSharedInternals.js';
-      }
-    }
-    if (
-      !entry.startsWith('react-dom/') &&
-      dependencies.indexOf('react-dom') === -1
-    ) {
-      // React DOM internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
-      return new Error(
-        'Cannot use a module that depends on ReactDOMSharedInternals ' +
-          'from "' +
-          entry +
-          '" because it does not declare "react-dom" in the package ' +
           'dependencies or peerDependencies.'
       );
     }
@@ -139,10 +85,6 @@           case RN_FB_PROD:
           case RN_FB_PROFILING:
             return './packages/shared/forks/ReactFeatureFlags.native-fb.js';
-          case RN_OSS_DEV:
-          case RN_OSS_PROD:
-          case RN_OSS_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
           default:
             throw Error(
               `Unexpected entry (${entry}) and bundleType (${bundleType})`
@@ -154,10 +96,6 @@           case RN_FB_PROD:
           case RN_FB_PROFILING:
             return './packages/shared/forks/ReactFeatureFlags.native-fb.js';
-          case RN_OSS_DEV:
-          case RN_OSS_PROD:
-          case RN_OSS_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
           default:
             throw Error(
               `Unexpected entry (${entry}) and bundleType (${bundleType})`
@@ -165,10 +103,6 @@         }
       case 'react-test-renderer':
         switch (bundleType) {
-          case RN_FB_DEV:
-          case RN_FB_PROD:
-          case RN_FB_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js';
           case FB_WWW_DEV:
           case FB_WWW_PROD:
           case FB_WWW_PROFILING:
@@ -185,11 +119,13 @@           case RN_FB_PROD:
           case RN_FB_PROFILING:
             return './packages/shared/forks/ReactFeatureFlags.native-fb.js';
-        }
-    }
-    return null;
-  },
-
+          default:
+            return null;
+        }
+    }
+  },
+
+  // Fork Scheduler feature flags for FB and RN bundles.
   './packages/scheduler/src/SchedulerFeatureFlags.js': (
     bundleType,
     entry,
@@ -209,6 +145,7 @@     }
   },
 
+  // Fork the prepareStackTrace helper for server builds.
   './packages/shared/DefaultPrepareStackTrace.js': (
     bundleType,
     entry,
@@ -218,7 +155,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (!rendererInfo.isServerSupported) {
@@ -239,6 +175,7 @@     return null;
   },
 
+  // Fork the host config shim for ReactFiber.
   './packages/react-reconciler/src/ReactFiberConfig.js': (
     bundleType,
     entry,
@@ -251,7 +188,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         const foundFork = findNearestExistingForkFile(
@@ -262,7 +198,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -273,6 +208,7 @@     );
   },
 
+  // Fork the streaming host config for Fizz in react-server.
   './packages/react-server/src/ReactServerStreamConfig.js': (
     bundleType,
     entry,
@@ -285,12 +221,8 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         const foundFork = findNearestExistingForkFile(
           './packages/react-server/src/forks/ReactServerStreamConfig.',
           rendererInfo.shortName,
@@ -299,7 +231,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -310,6 +241,7 @@     );
   },
 
+  // Fork the format config for Fizz.
   './packages/react-server/src/ReactFizzConfig.js': (
     bundleType,
     entry,
@@ -322,12 +254,8 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         const foundFork = findNearestExistingForkFile(
           './packages/react-server/src/forks/ReactFizzConfig.',
           rendererInfo.shortName,
@@ -336,7 +264,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -347,6 +274,7 @@     );
   },
 
+  // Fork the Flight server config for Relay server.
   './packages/react-server/src/ReactFlightServerConfig.js': (
     bundleType,
     entry,
@@ -359,17 +287,13 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightServerConfig with "${entry}" entry point ` +
-              'in ./scripts/shared/inlinedHostConfigs.js. Update the renderer config to ' +
-              'activate flight suppport and add a matching fork implementation for ReactFlightServerConfig.'
+              'in ./scripts/shared/inlinedHostConfigs.js. ' +
+              'Update the renderer config or add a matching fork implementation.'
           );
         }
         const foundFork = findNearestExistingForkFile(
@@ -380,7 +304,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -391,6 +314,7 @@     );
   },
 
+  // Fork the Flight client config for Relay client.
   './packages/react-client/src/ReactFlightClientConfig.js': (
     bundleType,
     entry,
@@ -403,17 +327,13 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightClientConfig with "${entry}" entry point ` +
-              'in ./scripts/shared/inlinedHostConfigs.js. Update the renderer config to ' +
-              'activate flight suppport and add a matching fork implementation for ReactFlightClientConfig.'
+              'in ./scripts/shared/inlinedHostConfigs.js. ' +
+              'Update the renderer config or add a matching fork implementation.'
           );
         }
         const foundFork = findNearestExistingForkFile(
@@ -424,7 +344,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -435,6 +354,32 @@     );
   },
 
+  // React DOM uses a shared internals module for client, testing, FB, and server builds.
+  './packages/react-dom/src/ReactDOMSharedSubset.js': (
+    bundleType,
+    entry,
+    dependencies
+  ) => {
+    if (
+      entry === 'react-dom/src/ReactDOMFB.js' ||
+      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
+      entry === 'react-dom/src/ReactDOMServer.js'
+    ) {
+      return './packages/react-dom/src/ReactDOMSharedInternals.js';
+    }
+    if (
+      !entry.startsWith('react-dom/') &&
+      dependencies.indexOf('react-dom') === -1
+    ) {
+      return new Error(
+        'Cannot use a module that depends on ReactDOMSharedInternals ' +
+          `from "${entry}" because it does not declare "react-dom" in the ` +
+          'package dependencies or peerDependencies.'
+      );
+    }
+    return null;
+  },
+
   // We wrap top-level listeners into guards on www.
   './packages/react-dom-bindings/src/events/EventListener.js': (
     bundleType,
@@ -445,7 +390,7 @@       case FB_WWW_PROD:
       case FB_WWW_PROFILING:
         if (__EXPERIMENTAL__) {
-          // In modern builds we don't use the indirection. We just use raw DOM.
+          // In modern builds we don’t use the indirection. We just use raw DOM.
           return null;
         } else {
           // Use the www fork which is integrated with TimeSlice profiling.
@@ -456,6 +401,7 @@     }
   },
 
+  // use-sync-external-store forks for UMD-like builds.
   './packages/use-sync-external-store/src/useSyncExternalStore.js': (
     bundleType,
     entry
@@ -464,8 +410,7 @@       return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
     }
     if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
+      // Internal modules that aren’t shims should use the built-in API.
       return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
     }
     return null;
