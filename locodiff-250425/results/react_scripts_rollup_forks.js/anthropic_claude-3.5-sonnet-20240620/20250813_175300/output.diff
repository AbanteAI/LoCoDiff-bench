
index d38f3657d..805001ac0 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmp4gbommfg_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpt59277qu_actual.txt	
@@ -82,7 +82,7 @@ const forks = Object.freeze({
           'from "' +
           entry +
           '" because it does not declare "react" in the package ' +
-          'dependencies or peerDependencies.'
+          'dependencies.'
       );
     }
     return null;
@@ -124,7 +124,7 @@ const forks = Object.freeze({
           'from "' +
           entry +
           '" because it does not declare "react-dom" in the package ' +
-          'dependencies or peerDependencies.'
+          'dependencies.'
       );
     }
     return null;
@@ -434,51 +434,6 @@ const forks = Object.freeze({
         'Did you mean to add it there to associate it with a specific renderer?'
     );
   },
-
-  // We wrap top-level listeners into guards on www.
-  './packages/react-dom-bindings/src/events/EventListener.js': (
-    bundleType,
-    entry
-  ) => {
-    switch (bundleType) {
-      case FB_WWW_DEV:
-      case FB_WWW_PROD:
-      case FB_WWW_PROFILING:
-        if (__EXPERIMENTAL__) {
-          // In modern builds we don't use the indirection. We just use raw DOM.
-          return null;
-        } else {
-          // Use the www fork which is integrated with TimeSlice profiling.
-          return './packages/react-dom-bindings/src/events/forks/EventListener-www.js';
-        }
-      default:
-        return null;
-    }
-  },
-
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.startsWith('use-sync-external-store/shim')) {
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
-    }
-    if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
-    }
-    return null;
-  },
-
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.endsWith('.native')) {
-      return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
-    }
-  },
 });
 
 module.exports = forks;
\ No newline at end of file
