
index d38f3657d..f27d24fc2 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpaj5bdb47_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmp1l5oca2r_actual.txt	
@@ -65,12 +65,6 @@ const forks = Object.freeze({
     if (entry === 'react/src/ReactServer.js') {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
-    if (entry === 'react-markup/src/ReactMarkupServer.js') {
-      // Inside the ReactMarkupServer render we don't refer to any shared internals
-      // but instead use our own internal copy of the state because you cannot use
-      // any of this state from a component anyway. E.g. you can't use a client hook.
-      return './packages/react/src/ReactSharedInternalsClient.js';
-    }
     if (bundle.condition === 'react-server') {
       return './packages/react-server/src/ReactSharedInternalsServer.js';
     }
@@ -97,6 +91,7 @@ const forks = Object.freeze({
   ) => {
     if (
       entry === 'react-dom' ||
+      entry === 'react-dom/server-rendering-stub' ||
       entry === 'react-dom/src/ReactDOMFB.js' ||
       entry === 'react-dom/src/ReactDOMTestingFB.js' ||
       entry === 'react-dom/src/ReactDOMServer.js' ||
@@ -325,19 +320,19 @@ const forks = Object.freeze({
     // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
-        const foundFork = findNearestExistingForkFile(
-          './packages/react-server/src/forks/ReactFizzConfig.',
-          rendererInfo.shortName,
-          '.js'
-        );
-        if (foundFork) {
-          return foundFork;
+        if (rendererInfo.isServerSupported) {
+          const foundFork = findNearestExistingForkFile(
+            './packages/react-server/src/forks/ReactFizzConfig.',
+            rendererInfo.shortName,
+            '.js'
+          );
+          if (foundFork) {
+            return foundFork;
+          }
+          // fall through to error
+          break;
         }
-        // fall through to error
-        break;
+        return null;
       }
     }
     throw new Error(
@@ -436,10 +431,7 @@ const forks = Object.freeze({
   },
 
   // We wrap top-level listeners into guards on www.
-  './packages/react-dom-bindings/src/events/EventListener.js': (
-    bundleType,
-    entry
-  ) => {
+  './packages/react-dom-bindings/src/events/EventListener.js': (bundleType, entry) => {
     switch (bundleType) {
       case FB_WWW_DEV:
       case FB_WWW_PROD:
@@ -456,10 +448,7 @@ const forks = Object.freeze({
     }
   },
 
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
+  './packages/use-sync-external-store/src/useSyncExternalStore.js': (bundleType, entry) => {
     if (entry.startsWith('use-sync-external-store/shim')) {
       return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
     }
@@ -471,10 +460,7 @@ const forks = Object.freeze({
     return null;
   },
 
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
+  './packages/use-sync-external-store/src/isServerEnvironment.js': (bundleType, entry) => {
     if (entry.endsWith('.native')) {
       return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
     }
