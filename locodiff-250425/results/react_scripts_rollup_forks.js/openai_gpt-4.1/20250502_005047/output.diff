--- react_scripts_rollup_forks.js_expectedoutput.txt (expected)+++ react_scripts_rollup_forks.js_extracted.txt (actual)@@ -209,36 +209,6 @@     }
   },
 
-  './packages/shared/DefaultPrepareStackTrace.js': (
-    bundleType,
-    entry,
-    dependencies,
-    moduleType
-  ) => {
-    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
-      return null;
-    }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
-        const foundFork = findNearestExistingForkFile(
-          './packages/shared/forks/DefaultPrepareStackTrace.',
-          rendererInfo.shortName,
-          '.js'
-        );
-        if (foundFork) {
-          return foundFork;
-        }
-        // fall through to error
-        break;
-      }
-    }
-    return null;
-  },
-
   './packages/react-reconciler/src/ReactFiberConfig.js': (
     bundleType,
     entry,
@@ -456,29 +426,35 @@     }
   },
 
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.startsWith('use-sync-external-store/shim')) {
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
-    }
-    if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
+  './packages/shared/DefaultPrepareStackTrace.js': (
+    bundleType,
+    entry,
+    dependencies,
+    moduleType
+  ) => {
+    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
+      return null;
+    }
+    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
+        if (!rendererInfo.isServerSupported) {
+          return null;
+        }
+        const foundFork = findNearestExistingForkFile(
+          './packages/shared/forks/DefaultPrepareStackTrace.',
+          rendererInfo.shortName,
+          '.js'
+        );
+        if (foundFork) {
+          return foundFork;
+        }
+        // fall through to error
+        break;
+      }
     }
     return null;
   },
-
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.endsWith('.native')) {
-      return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
-    }
-  },
 });
 
 module.exports = forks;