
index d38f3657..d371db62 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpd46iomdq_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpsj_jiymq_actual.txt	
@@ -50,6 +50,13 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
 // algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
 // the behavior is easier to predict.
 const forks = Object.freeze({
+  // NOTE: This is hard-coded to the main entry point of the (third-party)
+  // react-shallow-renderer package.
+  './node_modules/react-shallow-renderer/index.js': () => {
+    // Use ESM build of `react-shallow-renderer`.
+    return './node_modules/react-shallow-renderer/esm/index.js';
+  },
+
   // Without this fork, importing `shared/ReactSharedInternals` inside
   // the `react` package itself would not work due to a cyclical dependency.
   './packages/shared/ReactSharedInternals.js': (
@@ -97,10 +104,12 @@ const forks = Object.freeze({
   ) => {
     if (
       entry === 'react-dom' ||
+      entry === 'react-dom/server-rendering-stub' ||
       entry === 'react-dom/src/ReactDOMFB.js' ||
       entry === 'react-dom/src/ReactDOMTestingFB.js' ||
       entry === 'react-dom/src/ReactDOMServer.js' ||
-      entry === 'react-markup/src/ReactMarkupClient.js' ||
+      entry === 'react-dom/unstable_testing' ||
+      entry === 'react-markup/src/ReactHTMLClient.js' ||
       entry === 'react-markup/src/ReactMarkupServer.js'
     ) {
       if (
@@ -479,6 +488,4 @@ const forks = Object.freeze({
       return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
     }
   },
-});
-
-module.exports = forks;
\ No newline at end of file
+});
\ No newline at end of file
