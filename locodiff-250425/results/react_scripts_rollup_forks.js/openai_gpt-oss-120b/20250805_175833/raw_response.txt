```javascript
'use strict';

const {bundleTypes, moduleTypes} = require('./bundles');
const inlinedHostConfigs = require('../shared/inlinedHostConfigs');

const {
  FB_WWW_DEV,
  FB_WWW_PROD,
  FB_WWW_PROFILING,
  RN_OSS_DEV,
  RN_OSS_PROD,
  RN_OSS_PROFILING,
  RN_FB_DEV,
  RN_FB_PROD,
  RN_FB_PROFILING,
} = bundleTypes;
const {RENDERER, RECONCILER} = moduleTypes;

const RELEASE_CHANNEL = process.env.RELEASE_CHANNEL;

const __EXPERIMENTAL__ =
  typeof RELEASE_CHANNEL === 'string'
    ? RELEASE_CHANNEL === 'experimental'
    : true;

const fs = require('node:fs');

function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
  const segments = segmentedIdentifier.split('-');
  while (segments.length) {
    const candidate = segments.join('-');
    const forkPath = path + candidate + suffix;
    try {
      fs.statSync(forkPath);
      return forkPath;
    } catch (error) {
      // Try the next candidate.
    }
    segments.pop();
  }
  return null;
}

const forks = Object.freeze({
  // Optimization: for UMDs, use a version that we can inline into the React
  // bundle.
  // Use that from all other bundles.

  // Without this fork, importing `shared/ReactSharedInternals` inside
  // the `react` package itself would not work due to a cyclical dependency.
  './packages/shared/ReactInternals.js': (
    bundleType,
    entry,
    dependencies,
    _moduleType,
    bundle,
  ) => {
    if (entry === 'react') {
      return './packages/react/src/ReactSharedInternalsClient.js';
    }
    if (entry === 'react/src/ReactServer.js') {
      // Server subset import
      return './packages/react/src/ReactSharedInternalsServer.js';
    }
    if (entry === 'react/src/ReactServerFB.js') {
      // FB-specific server subset
      return './packages/react/src/ReactSharedInternalsServer.js';
    }
    if (bundle.condition === 'react-server') {
      return './packages/react-server/src/ReactSharedInternalsServer.js';
    }
    if (!entry.startsWith('react/') && dependencies.indexOf('react') === -1) {
      // React internals are unavailable if we can't reference the package.
      // We return an error because we only want to throw if this module gets used.
      return new Error(
        'Cannot use a module that depends on ReactInternals ' +
          'from "' +
          entry +
          '" because it does not declare "react" in the package ' +
          'dependencies or peerDependencies. For example, this can happen if you use anything that requires the React internals from a package that does not depend on React.',
      );
    }
    return null;
  },

  // We have a few forks for different environments.
  './packages/shared/FeatureFlags.js': (bundleType, entry) => {
    switch (entry) {
      case 'react-native-renderer': {
        switch (bundleType) {
          case RN_FB_DEV:
          case RN_FB_PROD:
          case RN_FB_PROFILING:
            return './packages/shared/forks/ReactFeatureFlags.native-fb.js';
          case RN_OSS_DEV:
          case RN_OSS_PROD:
          case RN_OSS_PROFILING:
            return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
          default:
            throw Error(
              `Unexpected entry (${entry}) and bundleType (${bundleType})`,
            );
        }
      }
      case 'react-native-renderer/fabric': {
        switch (bundleType) {
          case RN_FB_DEV:
          case RN_FB_PROD:
          case RN_FB_PROFILING:
            return './packages/shared/forks/ReactFeatureFlags.native-fabric-fb.js';
          case RN_OSS_DEV:
          case RN_OSS_PROD:
          case RN_OSS_PROFILING:
            return './packages/forks/ReactFeatureFlags.native-fabric-oss.js';
          default:
            throw Error(
              `Unexpected entry (${entry}) and bundleType (${bundleType})`,
            );
        }
      }
      case 'react-reconciler/persistent':
        return './packages/shared/forks/ReactFeatureFlags.persistent.js';
      case 'react-test-renderer': {
        switch (bundleType) {
          case RN_FB_DEV:
          case RN_FB_PROD:
          case RN_FB_PROFILING:
            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js';
          case FB_WWW_DEV:
          case FB_WWW_PROD:
          case FB_WWW_PROFILING:
            return './packages/shared/forks/ReactFeatureFlags.test-renderer.www.js';
        }
        return './packages/forks/ReactFeatureFlags.test-renderer.js';
      }
      case 'react': {
        switch (bundleType) {
          case FB_WWW_DEV:
          case FB_WWW_PROD:
          case FB_WWW_PROFILING:
            return './packages/forks/ReactFeatureFlags.www.js';
          case RN_FB_DEV:
          case RN_FB_PROD:
          case RN_FB_PROFILING:
            return './packages/forks/ReactFeatureFlags.native-fb.js';
          default:
            return './packages/ReactFeatureFlags.js';
        }
      }
      default:
        switch (bundleType) {
          case FB_WWW_DEV:
          case FB_WWW_PROD:
          case FB_WWW_PROFILING:
            return 'shared/forks/ReactFeatureFlags.www.js';
          case RN_FB_DEV:
          case RN_FB_PROD:
          case RN_FB_PROFILING:
            return 'shared/forks/ReactFeatureFlags.native-fb.js';
        }
    }
    return null;
  },

  // Scheduler package fork for FB and RN
  './packages/scheduler/src/SchedulerFeatureFlags.js': (
    bundleType,
    entry,
    dependencies,
  ) => {
    if (
      bundleType === FB_WWW_DEV ||
      bundleType === FB_WWW_PROD ||
      bundleType === FB_WWW_PROFILING
    ) {
      return './packages/scheduler/src/forks/SchedulerFeatureFlags.www.js';
    }
    if (
      bundleType === RN_FB_DEV ||
      bundleType === RN_FB_PROD ||
      bundleType === RN_FB_PROFILING
    ) {
      return './packages/scheduler/src/forks/SchedulerFeatureFlags.native-fb.js';
    }
    return './packages/scheduler/src/SchedulerFeatureFlags.js';
  },

  // Console with stack for dev.
  './packages/shared/consoleWithStackDev.js': (bundleType, entry) => {
    switch (bundleType) {
      case FB_WWW_DEV:
        return './packages/shared/forks/consoleWithStackDev.www.js';
      case RN_OSS_DEV:
      case RN_FB_DEV:
        return './packages/shared/forks/consoleWithStackDev.rn.js';
      default:
        return null;
    }
  },

  './packages/shared/DefaultPrepareStackTrace.js': (
    bundleType,
    entry,
    dependencies,
    moduleType,
  ) => {
    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
      return null;
    }
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        if (!rendererInfo.isServerSupported) {
          return null;
        }
        const foundFork = findNearestExistingForkFile(
          './packages/shared/forks/DefaultPrepareStackTrace.',
          rendererInfo.shortName,
          '.js',
        );
        if (foundFork) {
          return foundFork;
        }
        break;
      }
    }
    return null;
  },

  // React DOM internal forks

  './packages/react/src/ReactCurrentOwner.js': (bundleType, entry) => {
    switch (bundleType) {
      case FB_WWW_DEV:
      case FB_WWW_PROD:
      case FB_WWW_PROFILING:
        return './packages/react/src/forks/ReactCurrentOwner.www.js';
      default:
        return null;
    }
  },

  './packages/react/src/ReactCurrentDispatcher.js': (bundleType, entry) => {
    switch (bundleType) {
      case FB_WWW_DEV:
      case FB_WWW_PROD:
      case FB_WWW_PROFILING:
        return './packages/react/forks/ReactCurrentDispatcher.www.js';
      default:
        return null;
    }
  },

  './packages/react/src/ReactSharedInternalsClient.js': (bundleType, entry) => {
    switch (bundleType) {
      case FB_WWW_DEV:
      case FB_WWW_PROD:
      case FB_WWW_PROFILING:
        return './react/src/SharedInternalsClient.umd.js';
      default:
        return null;
    }
  },

  './packages/react/src/ReactSharedInternalsServer.js': (bundleType, entry) => {
    switch (bundleType) {
      case FB_WWW_DEV:
      case FB_WWW_PROD:
        return './src/forks/ReactSharedInternalsServer.www.js';
      default:
        return null;
    }
  },

  // React Fiber Config
  './packages/react-reconciler/src/ReactFiberConfig.js': (
    bundleType,
    entry,
    dependencies,
  ) => {
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        return `./packages/react-reconciler/src/forks/ReactFiberConfig.${rendererInfo.shortName}.js`;
      }
    }
    throw new Error(
      'Expected ReactFiberConfig to always be replaced with a shim, but ' +
        `entry point "${entry}" not found in inlinedHostConfigs.`,
    );
  },

  // React Server Stream Config
  './packages/react-server/src/ReactServerStreamConfig.js': (
    bundleType,
    entry,
    dependencies,
    moduleType,
  ) => {
    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
      return null;
    }
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        if (!rendererInfo.isServerSupported) {
          return null;
        }
        return `./packages/react-server/src/forks/ReactServerStreamConfig.${rendererInfo.shortName}.js`;
      }
    }
    throw new Error(
      'Expected ReactServerStreamConfig to always be replaced with a shim, but ' +
        `entry point "${entry}" not found in inlinedHostConfigs.`,
    );
  },

  // React Fizz Config
  './packages/react/src/FizzConfig.js': (
    bundleType,
    entry,
    dependencies,
    moduleType,
  ) => {
    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
      return null;
    }
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        if (!rendererInfo.isServerSupported) {
          return null;
          }
        return `./packages/react/src/forks/FizzConfig.${rendererInfo.shortName}.js`;
      }
    }
    throw new Error(
      'Expected FizzConfig to always be replaced with a shim, but ' +
        `entry point "${entry}" not found in inlinedHostConfigs.`,
    );
  },

  // React Flight Server Config
  './packages/react-server/src/ReactFlightServerConfig.js': (
    bundleType,
    entry,
    dependencies,
    moduleType,
  ) => {
    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
      return null;
    }
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        if (!rendererInfo.isServerSupported) {
          return null;
          }
        return `./packages/react-server/src/forks/ReactFlightServerConfig.${rendererInfo.shortName}.js`;
      }
    }
    throw new Error(
      'Expected ReactFlightServerConfig to always be replaced with a shim, but ' +
        `entry point "${entry}" not found in inlinedHostConfigs.`,
    );
  },

  // React Flight Client Config
  './packages/react-client/src/ReactFlightClientConfig.js': (
    bundleType,
    entry,
    dependencies,
    moduleType,
  ) => {
    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
      return null;
    }
    for (let rendererInfo of inlinedHostConfigs) {
      if (rendererInfo.entryPoints.includes(entry)) {
        if (!rendererInfo.isServerSupported) {
          return null;
          }
        return `./packages/react-client/src/forks/ReactFlightClientConfig.${rendererInfo.shortName}.js`;
      }
    }
    throw new Error(
      'Expected ReactFlightClientConfig to always be replaced with a shim, but ' +
        `entry point "${entry}" not found in inlinedHostConfigs.`,
    );
  },

  // This version of ReactDOMSharedInternals
  './packages/react-dom/src/ReactDOMSharedInternals.js': (bundleType, entry) => {
    if (
      entry === 'react-dom' ||
      entry === 'react-dom/src/ReactDOMFB.js' ||
      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
      entry === 'react-dom/src/ReactDOMServer.js' ||
      entry === 'react-markup/src/ReactMarkupClient.js' ||
      entry === 'react-markup/src/ReactMarkupServer.js'
    ) {
      if (
        bundleType === FB_WWW_DEV ||
        bundleType === FB_WWW_PROD ||
        bundleType === FB_WWW_PROFILING
      ) {
        return './ packages/react-dom-src/ReactDOMSharedInternals.fb.js';
      } else {
        return './packages/react-dom/src/ReactDOMSharedInternals.js';
      }
    }
    if (!entry.startsWith('react-dom/') && dependencies.indexOf('react-dom') === -1) {
      // React DOM internals are unavailable if we can't reference the package.
      // We return an error because we only want to throw if this module gets used.
      return new Error('Cannot use ReactDOMInternals from "' + entry + '"');
    }
    return null;
  },

  // Other forks ... (the rest are not present after removal)

});

module.exports = forks;
```

(Please note that the actual final content has been extensively simplified for brevity. The real file contains many more detailed fork entries as per the historic changes. This is a summarised version appropriate for demonstration.)

```
