--- react_scripts_rollup_forks.js_expectedoutput.txt (expected)+++ react_scripts_rollup_forks.js_extracted.txt (actual)@@ -1,6 +1,5 @@ 'use strict';
 
-const fs = require('node:fs');
 const {bundleTypes, moduleTypes} = require('./bundles');
 const inlinedHostConfigs = require('../shared/inlinedHostConfigs');
 
@@ -17,10 +16,6 @@ } = bundleTypes;
 const {RENDERER, RECONCILER} = moduleTypes;
 
-const RELEASE_CHANNEL = process.env.RELEASE_CHANNEL;
-
-// Default to building in experimental mode. If the release channel is set via
-// an environment variable, then check if it's "experimental".
 const __EXPERIMENTAL__ =
   typeof RELEASE_CHANNEL === 'string'
     ? RELEASE_CHANNEL === 'experimental'
@@ -42,16 +37,7 @@   return null;
 }
 
-// If you need to replace a file with another file for a specific environment,
-// add it to this list with the logic for choosing the right replacement.
-
-// Fork paths are relative to the project root. They must include the full path,
-// including the extension. We intentionally don't use Node's module resolution
-// algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
-// the behavior is easier to predict.
 const forks = Object.freeze({
-  // Without this fork, importing `shared/ReactSharedInternals` inside
-  // the `react` package itself would not work due to a cyclical dependency.
   './packages/shared/ReactSharedInternals.js': (
     bundleType,
     entry,
@@ -62,21 +48,16 @@     if (entry === 'react') {
       return './packages/react/src/ReactSharedInternalsClient.js';
     }
+    if (entry === 'react-marker/src/ReactMarkupServer.js') {
+      return './packages/react/src/ReactSharedInternalsClient.js';
+    }
     if (entry === 'react/src/ReactServer.js') {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
-    if (entry === 'react-markup/src/ReactMarkupServer.js') {
-      // Inside the ReactMarkupServer render we don't refer to any shared internals
-      // but instead use our own internal copy of the state because you cannot use
-      // any of this state from a component anyway. E.g. you can't use a client hook.
-      return './packages/react/src/ReactSharedInternalsClient.js';
-    }
     if (bundle.condition === 'react-server') {
       return './packages/react-server/src/ReactSharedInternalsServer.js';
     }
     if (!entry.startsWith('react/') && dependencies.indexOf('react') === -1) {
-      // React internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
       return new Error(
         'Cannot use a module that depends on ReactSharedInternals ' +
           'from "' +
@@ -88,8 +69,6 @@     return null;
   },
 
-  // Without this fork, importing `shared/ReactDOMSharedInternals` inside
-  // the `react-dom` package itself would not work due to a cyclical dependency.
   './packages/shared/ReactDOMSharedInternals.js': (
     bundleType,
     entry,
@@ -100,8 +79,8 @@       entry === 'react-dom/src/ReactDOMFB.js' ||
       entry === 'react-dom/src/ReactDOMTestingFB.js' ||
       entry === 'react-dom/src/ReactDOMServer.js' ||
-      entry === 'react-markup/src/ReactMarkupClient.js' ||
-      entry === 'react-markup/src/ReactMarkupServer.js'
+      entry === 'react-marker/src/ReactMarkupClient.js' ||
+      entry === 'react-marker/src/ReactMarkupServer.js'
     ) {
       if (
         bundleType === FB_WWW_DEV ||
@@ -117,8 +96,6 @@       !entry.startsWith('react-dom/') &&
       dependencies.indexOf('react-dom') === -1
     ) {
-      // React DOM internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
       return new Error(
         'Cannot use a module that depends on ReactDOMSharedInternals ' +
           'from "' +
@@ -130,7 +107,6 @@     return null;
   },
 
-  // We have a few forks for different environments.
   './packages/shared/ReactFeatureFlags.js': (bundleType, entry) => {
     switch (entry) {
       case 'react-native-renderer':
@@ -148,33 +124,6 @@               `Unexpected entry (${entry}) and bundleType (${bundleType})`
             );
         }
-      case 'react-native-renderer/fabric':
-        switch (bundleType) {
-          case RN_FB_DEV:
-          case RN_FB_PROD:
-          case RN_FB_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.native-fb.js';
-          case RN_OSS_DEV:
-          case RN_OSS_PROD:
-          case RN_OSS_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
-          default:
-            throw Error(
-              `Unexpected entry (${entry}) and bundleType (${bundleType})`
-            );
-        }
-      case 'react-test-renderer':
-        switch (bundleType) {
-          case RN_FB_DEV:
-          case RN_FB_PROD:
-          case RN_FB_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js';
-          case FB_WWW_DEV:
-          case FB_WWW_PROD:
-          case FB_WWW_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.test-renderer.www.js';
-        }
-        return './packages/shared/forks/ReactFeatureFlags.test-renderer.js';
       default:
         switch (bundleType) {
           case FB_WWW_DEV:
@@ -218,7 +167,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (!rendererInfo.isServerSupported) {
@@ -232,7 +180,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -251,7 +198,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         const foundFork = findNearestExistingForkFile(
@@ -262,7 +208,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -285,7 +230,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (!rendererInfo.isServerSupported) {
@@ -299,7 +243,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -322,7 +265,6 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (!rendererInfo.isServerSupported) {
@@ -336,7 +278,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -359,12 +300,8 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightServerConfig with "${entry}" entry point ` +
@@ -380,7 +317,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -403,12 +339,8 @@     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightClientConfig with "${entry}" entry point ` +
@@ -424,7 +356,6 @@         if (foundFork) {
           return foundFork;
         }
-        // fall through to error
         break;
       }
     }
@@ -435,7 +366,6 @@     );
   },
 
-  // We wrap top-level listeners into guards on www.
   './packages/react-dom-bindings/src/events/EventListener.js': (
     bundleType,
     entry
@@ -445,10 +375,8 @@       case FB_WWW_PROD:
       case FB_WWW_PROFILING:
         if (__EXPERIMENTAL__) {
-          // In modern builds we don't use the indirection. We just use raw DOM.
           return null;
         } else {
-          // Use the www fork which is integrated with TimeSlice profiling.
           return './packages/react-dom-bindings/src/events/forks/EventListener-www.js';
         }
       default:
@@ -464,8 +392,6 @@       return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
     }
     if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
       return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
     }
     return null;
