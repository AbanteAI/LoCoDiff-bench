
index d38f3657d..65023837a 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpjz28w7b8_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpl16j96bz_actual.txt	
@@ -1,6 +1,5 @@
 'use strict';
 
-const fs = require('node:fs');
 const {bundleTypes, moduleTypes} = require('./bundles');
 const inlinedHostConfigs = require('../shared/inlinedHostConfigs');
 
@@ -19,6 +18,15 @@ const {RENDERER, RECONCILER} = moduleTypes;
 
 const RELEASE_CHANNEL = process.env.RELEASE_CHANNEL;
 
+// Default to building in experimental mode. If the release channel is set via
+// an environment variable, then check if it's "experimental".
+const __EXPERIMENTAL__ =
+  typeof RELEASE_CHANNEL === 'string'
+    ? RELEASE_CHANNEL === 'experimental'
+    : true;
+
+const fs = require('node:fs');
+
 // Default to building in experimental mode. If the release channel is set via
 // an environment variable, then check if it's "experimental".
 const __EXPERIMENTAL__ =
@@ -50,6 +58,13 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
 // algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
 // the behavior is easier to predict.
 const forks = Object.freeze({
+  // NOTE: This is hard-coded to the main entry point of the (third-party)
+  // react-shallow-renderer package.
+  './node_modules/react-shallow-renderer/index.js': () => {
+    // Use ESM build of `react-shallow-renderer`.
+    return './node_modules/react-shallow-renderer/esm/index.js';
+  },
+
   // Without this fork, importing `shared/ReactSharedInternals` inside
   // the `react` package itself would not work due to a cyclical dependency.
   './packages/shared/ReactSharedInternals.js': (
@@ -65,12 +80,6 @@ const forks = Object.freeze({
     if (entry === 'react/src/ReactServer.js') {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
-    if (entry === 'react-markup/src/ReactMarkupServer.js') {
-      // Inside the ReactMarkupServer render we don't refer to any shared internals
-      // but instead use our own internal copy of the state because you cannot use
-      // any of this state from a component anyway. E.g. you can't use a client hook.
-      return './packages/react/src/ReactSharedInternalsClient.js';
-    }
     if (bundle.condition === 'react-server') {
       return './packages/react-server/src/ReactSharedInternalsServer.js';
     }
