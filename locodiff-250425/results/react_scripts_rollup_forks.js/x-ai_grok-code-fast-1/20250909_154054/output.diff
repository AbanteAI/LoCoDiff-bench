
index d38f3657d..acba29ac2 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmp1nn0tmbu_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmp5eupu50a_actual.txt	
@@ -44,7 +44,6 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
 
 // If you need to replace a file with another file for a specific environment,
 // add it to this list with the logic for choosing the right replacement.
-
 // Fork paths are relative to the project root. They must include the full path,
 // including the extension. We intentionally don't use Node's module resolution
 // algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
@@ -163,12 +162,14 @@ const forks = Object.freeze({
               `Unexpected entry (${entry}) and bundleType (${bundleType})`
             );
         }
+      case 'react-reconciler/persistent':
+        return './packages/shared/forks/ReactFeatureFlags.persistent.js';
       case 'react-test-renderer':
         switch (bundleType) {
-          case RN_FB_DEV:
-          case RN_FB_PROD:
-          case RN_FB_PROFILING:
-            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native-fb.js';
+          case RN_OSS_DEV:
+          case RN_OSS_PROD:
+          case RN_OSS_PROFILING:
+            return './packages/shared/forks/ReactFeatureFlags.test-renderer.native.js';
           case FB_WWW_DEV:
           case FB_WWW_PROD:
           case FB_WWW_PROFILING:
@@ -245,9 +246,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-reconciler') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -362,9 +360,6 @@ const forks = Object.freeze({
     // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightServerConfig with "${entry}" entry point ` +
@@ -406,9 +401,6 @@ const forks = Object.freeze({
     // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
         if (rendererInfo.isFlightSupported === false) {
           return new Error(
             `Expected not to use ReactFlightClientConfig with "${entry}" entry point ` +
@@ -455,30 +447,6 @@ const forks = Object.freeze({
         return null;
     }
   },
-
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.startsWith('use-sync-external-store/shim')) {
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
-    }
-    if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
-    }
-    return null;
-  },
-
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.endsWith('.native')) {
-      return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
-    }
-  },
 });
 
 module.exports = forks;
\ No newline at end of file
