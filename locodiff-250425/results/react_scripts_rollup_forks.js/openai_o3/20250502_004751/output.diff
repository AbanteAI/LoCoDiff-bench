
index d38f3657..e0764b95 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmp_306kqgd_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmphwmk59qm_actual.txt	
@@ -34,7 +34,7 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
     try {
       fs.statSync(forkPath);
       return forkPath;
-    } catch (error) {
+    } catch {
       // Try the next candidate.
     }
     segments.pop();
@@ -44,11 +44,11 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
 
 // If you need to replace a file with another file for a specific environment,
 // add it to this list with the logic for choosing the right replacement.
-
-// Fork paths are relative to the project root. They must include the full path,
-// including the extension. We intentionally don't use Node's module resolution
-// algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
-// the behavior is easier to predict.
+//
+// Fork paths are relative to the project root. They must include the full
+// path, including the extension. We intentionally don't use Node's module
+// resolution algorithm because 1) require.resolve doesn't work with ESM
+// modules, and 2) the behavior is easier to predict.
 const forks = Object.freeze({
   // Without this fork, importing `shared/ReactSharedInternals` inside
   // the `react` package itself would not work due to a cyclical dependency.
@@ -57,7 +57,7 @@ const forks = Object.freeze({
     entry,
     dependencies,
     _moduleType,
-    bundle
+    bundle,
   ) => {
     if (entry === 'react') {
       return './packages/react/src/ReactSharedInternalsClient.js';
@@ -82,49 +82,7 @@ const forks = Object.freeze({
           'from "' +
           entry +
           '" because it does not declare "react" in the package ' +
-          'dependencies or peerDependencies.'
-      );
-    }
-    return null;
-  },
-
-  // Without this fork, importing `shared/ReactDOMSharedInternals` inside
-  // the `react-dom` package itself would not work due to a cyclical dependency.
-  './packages/shared/ReactDOMSharedInternals.js': (
-    bundleType,
-    entry,
-    dependencies
-  ) => {
-    if (
-      entry === 'react-dom' ||
-      entry === 'react-dom/src/ReactDOMFB.js' ||
-      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
-      entry === 'react-dom/src/ReactDOMServer.js' ||
-      entry === 'react-markup/src/ReactMarkupClient.js' ||
-      entry === 'react-markup/src/ReactMarkupServer.js'
-    ) {
-      if (
-        bundleType === FB_WWW_DEV ||
-        bundleType === FB_WWW_PROD ||
-        bundleType === FB_WWW_PROFILING
-      ) {
-        return './packages/react-dom/src/ReactDOMSharedInternalsFB.js';
-      } else {
-        return './packages/react-dom/src/ReactDOMSharedInternals.js';
-      }
-    }
-    if (
-      !entry.startsWith('react-dom/') &&
-      dependencies.indexOf('react-dom') === -1
-    ) {
-      // React DOM internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
-      return new Error(
-        'Cannot use a module that depends on ReactDOMSharedInternals ' +
-          'from "' +
-          entry +
-          '" because it does not declare "react-dom" in the package ' +
-          'dependencies or peerDependencies.'
+          'dependencies or peerDependencies.',
       );
     }
     return null;
@@ -145,7 +103,7 @@ const forks = Object.freeze({
             return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
           default:
             throw Error(
-              `Unexpected entry (${entry}) and bundleType (${bundleType})`
+              `Unexpected entry (${entry}) and bundleType (${bundleType})`,
             );
         }
       case 'react-native-renderer/fabric':
@@ -160,7 +118,7 @@ const forks = Object.freeze({
             return './packages/shared/forks/ReactFeatureFlags.native-oss.js';
           default:
             throw Error(
-              `Unexpected entry (${entry}) and bundleType (${bundleType})`
+              `Unexpected entry (${entry}) and bundleType (${bundleType})`,
             );
         }
       case 'react-test-renderer':
@@ -193,7 +151,7 @@ const forks = Object.freeze({
   './packages/scheduler/src/SchedulerFeatureFlags.js': (
     bundleType,
     entry,
-    dependencies
+    _dependencies,
   ) => {
     switch (bundleType) {
       case FB_WWW_DEV:
@@ -209,11 +167,51 @@ const forks = Object.freeze({
     }
   },
 
-  './packages/shared/DefaultPrepareStackTrace.js': (
+  './packages/react-dom/src/ReactDOMSharedInternals.js': (
     bundleType,
     entry,
     dependencies,
-    moduleType
+    _moduleType,
+    bundle,
+  ) => {
+    if (
+      entry === 'react-dom' ||
+      entry === 'react-dom/src/ReactDOMFB.js' ||
+      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
+      entry === 'react-dom/src/ReactDOMServer.js' ||
+      entry === 'react-markup/src/ReactMarkupClient.js' ||
+      entry === 'react-markup/src/ReactMarkupServer.js'
+    ) {
+      if (
+        bundleType === FB_WWW_DEV ||
+        bundleType === FB_WWW_PROD ||
+        bundleType === FB_WWW_PROFILING
+      ) {
+        return './packages/react-dom/src/ReactDOMSharedInternalsFB.js';
+      } else {
+        return './packages/react-dom/src/ReactDOMSharedInternals.js';
+      }
+    }
+    if (
+      !entry.startsWith('react-dom/') &&
+      dependencies.indexOf('react-dom') === -1
+    ) {
+      return new Error(
+        'Cannot use a module that depends on ReactDOMSharedInternals ' +
+          'from "' +
+          entry +
+          '" because it does not declare "react-dom" in the package ' +
+          'dependencies or peerDependencies.',
+      );
+    }
+    return null;
+  },
+
+  './packages/shared/DefaultPrepareStackTrace.js': (
+    bundleType,
+    entry,
+    _dependencies,
+    moduleType,
   ) => {
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
@@ -227,7 +225,7 @@ const forks = Object.freeze({
         const foundFork = findNearestExistingForkFile(
           './packages/shared/forks/DefaultPrepareStackTrace.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -240,24 +238,18 @@ const forks = Object.freeze({
   },
 
   './packages/react-reconciler/src/ReactFiberConfig.js': (
-    bundleType,
+    _bundleType,
     entry,
-    dependencies,
-    moduleType
+    _dependencies,
+    _moduleType,
   ) => {
-    if (dependencies.indexOf('react-reconciler') !== -1) {
-      return null;
-    }
-    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
-      return null;
-    }
     // eslint-disable-next-line no-for-of-loops/no-for-of-loops
     for (let rendererInfo of inlinedHostConfigs) {
       if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
         const foundFork = findNearestExistingForkFile(
           './packages/react-reconciler/src/forks/ReactFiberConfig.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -269,19 +261,16 @@ const forks = Object.freeze({
     throw new Error(
       'Expected ReactFiberConfig to always be replaced with a shim, but ' +
         `found no mention of "${entry}" entry point in ./scripts/shared/inlinedHostConfigs.js. ` +
-        'Did you mean to add it there to associate it with a specific renderer?'
+        'Did you mean to add it there to associate it with a specific renderer?',
     );
   },
 
   './packages/react-server/src/ReactServerStreamConfig.js': (
-    bundleType,
+    _bundleType,
     entry,
-    dependencies,
-    moduleType
+    _dependencies,
+    moduleType,
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -294,7 +283,7 @@ const forks = Object.freeze({
         const foundFork = findNearestExistingForkFile(
           './packages/react-server/src/forks/ReactServerStreamConfig.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -306,19 +295,16 @@ const forks = Object.freeze({
     throw new Error(
       'Expected ReactServerStreamConfig to always be replaced with a shim, but ' +
         `found no mention of "${entry}" entry point in ./scripts/shared/inlinedHostConfigs.js. ` +
-        'Did you mean to add it there to associate it with a specific renderer?'
+        'Did you mean to add it there to associate it with a specific renderer?',
     );
   },
 
   './packages/react-server/src/ReactFizzConfig.js': (
-    bundleType,
+    _bundleType,
     entry,
-    dependencies,
-    moduleType
+    _dependencies,
+    moduleType,
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -331,7 +317,7 @@ const forks = Object.freeze({
         const foundFork = findNearestExistingForkFile(
           './packages/react-server/src/forks/ReactFizzConfig.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -343,19 +329,16 @@ const forks = Object.freeze({
     throw new Error(
       'Expected ReactFizzConfig to always be replaced with a shim, but ' +
         `found no mention of "${entry}" entry point in ./scripts/shared/inlinedHostConfigs.js. ` +
-        'Did you mean to add it there to associate it with a specific renderer?'
+        'Did you mean to add it there to associate it with a specific renderer?',
     );
   },
 
   './packages/react-server/src/ReactFlightServerConfig.js': (
-    bundleType,
+    _bundleType,
     entry,
-    dependencies,
-    moduleType
+    _dependencies,
+    moduleType,
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -369,13 +352,13 @@ const forks = Object.freeze({
           return new Error(
             `Expected not to use ReactFlightServerConfig with "${entry}" entry point ` +
               'in ./scripts/shared/inlinedHostConfigs.js. Update the renderer config to ' +
-              'activate flight suppport and add a matching fork implementation for ReactFlightServerConfig.'
+              'activate flight suppport and add a matching fork implementation for ReactFlightServerConfig.',
           );
         }
         const foundFork = findNearestExistingForkFile(
           './packages/react-server/src/forks/ReactFlightServerConfig.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -387,19 +370,16 @@ const forks = Object.freeze({
     throw new Error(
       'Expected ReactFlightServerConfig to always be replaced with a shim, but ' +
         `found no mention of "${entry}" entry point in ./scripts/shared/inlinedHostConfigs.js. ` +
-        'Did you mean to add it there to associate it with a specific renderer?'
+        'Did you mean to add it there to associate it with a specific renderer?',
     );
   },
 
   './packages/react-client/src/ReactFlightClientConfig.js': (
-    bundleType,
+    _bundleType,
     entry,
-    dependencies,
-    moduleType
+    _dependencies,
+    moduleType,
   ) => {
-    if (dependencies.indexOf('react-client') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -413,13 +393,13 @@ const forks = Object.freeze({
           return new Error(
             `Expected not to use ReactFlightClientConfig with "${entry}" entry point ` +
               'in ./scripts/shared/inlinedHostConfigs.js. Update the renderer config to ' +
-              'activate flight suppport and add a matching fork implementation for ReactFlightClientConfig.'
+              'activate flight suppport and add a matching fork implementation for ReactFlightClientConfig.',
           );
         }
         const foundFork = findNearestExistingForkFile(
           './packages/react-client/src/forks/ReactFlightClientConfig.',
           rendererInfo.shortName,
-          '.js'
+          '.js',
         );
         if (foundFork) {
           return foundFork;
@@ -431,14 +411,14 @@ const forks = Object.freeze({
     throw new Error(
       'Expected ReactFlightClientConfig to always be replaced with a shim, but ' +
         `found no mention of "${entry}" entry point in ./scripts/shared/inlinedHostConfigs.js. ` +
-        'Did you mean to add it there to associate it with a specific renderer?'
+        'Did you mean to add it there to associate it with a specific renderer?',
     );
   },
 
   // We wrap top-level listeners into guards on www.
   './packages/react-dom-bindings/src/events/EventListener.js': (
     bundleType,
-    entry
+    entry,
   ) => {
     switch (bundleType) {
       case FB_WWW_DEV:
@@ -455,30 +435,6 @@ const forks = Object.freeze({
         return null;
     }
   },
-
-  './packages/use-sync-external-store/src/useSyncExternalStore.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.startsWith('use-sync-external-store/shim')) {
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-shim.js';
-    }
-    if (entry !== 'use-sync-external-store') {
-      // Internal modules that aren't shims should use the native API from the
-      // react package.
-      return './packages/use-sync-external-store/src/forks/useSyncExternalStore.forward-to-built-in.js';
-    }
-    return null;
-  },
-
-  './packages/use-sync-external-store/src/isServerEnvironment.js': (
-    bundleType,
-    entry
-  ) => {
-    if (entry.endsWith('.native')) {
-      return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
-    }
-  },
 });
 
 module.exports = forks;
\ No newline at end of file
