
index d38f3657..40a87465 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpkzuj9rbx_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpwxbqxonx_actual.txt	
@@ -14,8 +14,9 @@ const {
   RN_FB_DEV,
   RN_FB_PROD,
   RN_FB_PROFILING,
-} = bundleTypes;
-const {RENDERER, RECONCILER} = moduleTypes;
+  RENDERER,
+  RECONCILER,
+} = moduleTypes;
 
 const RELEASE_CHANNEL = process.env.RELEASE_CHANNEL;
 
@@ -42,13 +43,6 @@ function findNearestExistingForkFile(path, segmentedIdentifier, suffix) {
   return null;
 }
 
-// If you need to replace a file with another file for a specific environment,
-// add it to this list with the logic for choosing the right replacement.
-
-// Fork paths are relative to the project root. They must include the full path,
-// including the extension. We intentionally don't use Node's module resolution
-// algorithm because 1) require.resolve doesn't work with ESM modules, and 2)
-// the behavior is easier to predict.
 const forks = Object.freeze({
   // Without this fork, importing `shared/ReactSharedInternals` inside
   // the `react` package itself would not work due to a cyclical dependency.
@@ -56,7 +50,7 @@ const forks = Object.freeze({
     bundleType,
     entry,
     dependencies,
-    _moduleType,
+    moduleType,
     bundle
   ) => {
     if (entry === 'react') {
@@ -65,12 +59,6 @@ const forks = Object.freeze({
     if (entry === 'react/src/ReactServer.js') {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
-    if (entry === 'react-markup/src/ReactMarkupServer.js') {
-      // Inside the ReactMarkupServer render we don't refer to any shared internals
-      // but instead use our own internal copy of the state because you cannot use
-      // any of this state from a component anyway. E.g. you can't use a client hook.
-      return './packages/react/src/ReactSharedInternalsClient.js';
-    }
     if (bundle.condition === 'react-server') {
       return './packages/react-server/src/ReactSharedInternalsServer.js';
     }
@@ -88,49 +76,6 @@ const forks = Object.freeze({
     return null;
   },
 
-  // Without this fork, importing `shared/ReactDOMSharedInternals` inside
-  // the `react-dom` package itself would not work due to a cyclical dependency.
-  './packages/shared/ReactDOMSharedInternals.js': (
-    bundleType,
-    entry,
-    dependencies
-  ) => {
-    if (
-      entry === 'react-dom' ||
-      entry === 'react-dom/src/ReactDOMFB.js' ||
-      entry === 'react-dom/src/ReactDOMTestingFB.js' ||
-      entry === 'react-dom/src/ReactDOMServer.js' ||
-      entry === 'react-markup/src/ReactMarkupClient.js' ||
-      entry === 'react-markup/src/ReactMarkupServer.js'
-    ) {
-      if (
-        bundleType === FB_WWW_DEV ||
-        bundleType === FB_WWW_PROD ||
-        bundleType === FB_WWW_PROFILING
-      ) {
-        return './packages/react-dom/src/ReactDOMSharedInternalsFB.js';
-      } else {
-        return './packages/react-dom/src/ReactDOMSharedInternals.js';
-      }
-    }
-    if (
-      !entry.startsWith('react-dom/') &&
-      dependencies.indexOf('react-dom') === -1
-    ) {
-      // React DOM internals are unavailable if we can't reference the package.
-      // We return an error because we only want to throw if this module gets used.
-      return new Error(
-        'Cannot use a module that depends on ReactDOMSharedInternals ' +
-          'from "' +
-          entry +
-          '" because it does not declare "react-dom" in the package ' +
-          'dependencies or peerDependencies.'
-      );
-    }
-    return null;
-  },
-
-  // We have a few forks for different environments.
   './packages/shared/ReactFeatureFlags.js': (bundleType, entry) => {
     switch (entry) {
       case 'react-native-renderer':
@@ -245,9 +190,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-reconciler') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -279,9 +221,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -316,9 +255,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -353,9 +289,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-server') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -397,9 +330,6 @@ const forks = Object.freeze({
     dependencies,
     moduleType
   ) => {
-    if (dependencies.indexOf('react-client') !== -1) {
-      return null;
-    }
     if (moduleType !== RENDERER && moduleType !== RECONCILER) {
       return null;
     }
@@ -445,7 +375,6 @@ const forks = Object.freeze({
       case FB_WWW_PROD:
       case FB_WWW_PROFILING:
         if (__EXPERIMENTAL__) {
-          // In modern builds we don't use the indirection. We just use raw DOM.
           return null;
         } else {
           // Use the www fork which is integrated with TimeSlice profiling.
