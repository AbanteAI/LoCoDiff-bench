
index d38f3657d..83cfdcaa6 100644
--- a/react_scripts_rollup_forks.js_expectedoutput.txt (expected):tmp/tmpatgivsdi_expected.txt	
+++ b/react_scripts_rollup_forks.js_extracted.txt (actual):tmp/tmpaeexh36k_actual.txt	
@@ -62,7 +62,9 @@ const forks = Object.freeze({
     if (entry === 'react') {
       return './packages/react/src/ReactSharedInternalsClient.js';
     }
-    if (entry === 'react/src/ReactServer.js') {
+    if (
+      entry === 'react/src/ReactServer.js'
+    ) {
       return './packages/react/src/ReactSharedInternalsServer.js';
     }
     if (entry === 'react-markup/src/ReactMarkupServer.js') {
@@ -209,36 +211,14 @@ const forks = Object.freeze({
     }
   },
 
-  './packages/shared/DefaultPrepareStackTrace.js': (
-    bundleType,
-    entry,
-    dependencies,
-    moduleType
-  ) => {
-    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
-      return null;
-    }
-    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
-    for (let rendererInfo of inlinedHostConfigs) {
-      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
-        if (!rendererInfo.isServerSupported) {
-          return null;
-        }
-        const foundFork = findNearestExistingForkFile(
-          './packages/shared/forks/DefaultPrepareStackTrace.',
-          rendererInfo.shortName,
-          '.js'
-        );
-        if (foundFork) {
-          return foundFork;
-        }
-        // fall through to error
-        break;
-      }
+  './packages/react/src/ReactSharedInternalsClient.js': (bundleType, entry) => {
+    switch (bundleType) {
+      default:
+        return null;
     }
-    return null;
   },
 
+  // Different dialogs for caught errors.
   './packages/react-reconciler/src/ReactFiberConfig.js': (
     bundleType,
     entry,
@@ -479,6 +459,36 @@ const forks = Object.freeze({
       return './packages/use-sync-external-store/src/forks/isServerEnvironment.native.js';
     }
   },
+
+  './packages/shared/DefaultPrepareStackTrace.js': (
+    bundleType,
+    entry,
+    dependencies,
+    moduleType
+  ) => {
+    if (moduleType !== RENDERER && moduleType !== RECONCILER) {
+      return null;
+    }
+    // eslint-disable-next-line no-for-of-loops/no-for-of-loops
+    for (let rendererInfo of inlinedHostConfigs) {
+      if (rendererInfo.entryPoints.indexOf(entry) !== -1) {
+        if (!rendererInfo.isServerSupported) {
+          return null;
+        }
+        const foundFork = findNearestExistingForkFile(
+          './packages/shared/forks/DefaultPrepareStackTrace.',
+          rendererInfo.shortName,
+          '.js'
+        );
+        if (foundFork) {
+          return foundFork;
+        }
+        // fall through to error
+        break;
+      }
+    }
+    return null;
+  },
 });
 
 module.exports = forks;
\ No newline at end of file
