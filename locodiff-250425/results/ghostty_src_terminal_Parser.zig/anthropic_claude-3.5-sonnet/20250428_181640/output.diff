
index ed477f2d..9174f7bd 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmp1sbabsdr_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmp40y1slqr_actual.txt	
@@ -424,25 +424,6 @@ test {
     }
 }
 
-test "esc: ESC ( B" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next('(');
-
-    {
-        const a = p.next('B');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .esc_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.esc_dispatch;
-        try testing.expect(d.final == 'B');
-        try testing.expect(d.intermediates.len == 1);
-        try testing.expect(d.intermediates[0] == '(');
-    }
-}
-
 test "csi: ESC [ H" {
     var p = init();
     _ = p.next(0x1B);
@@ -766,199 +747,4 @@ test "csi: colon for non-m final" {
     _ = p.next(0x1B);
     for ("[38:2h") |c| {
         const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    try testing.expect(p.state == .ground);
-}
-
-test "csi: request mode decrqm" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[?2026$") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('p');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'p');
-        try testing.expectEqual(@as(usize, 2), d.intermediates.len);
-        try testing.expectEqual(@as(usize, 1), d.params.len);
-        try testing.expectEqual(@as(u16, '?'), d.intermediates[0]);
-        try testing.expectEqual(@as(u16, '$'), d.intermediates[1]);
-        try testing.expectEqual(@as(u16, 2026), d.params[0]);
-    }
-}
-
-test "csi: change cursor" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[3 ") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('q');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'q');
-        try testing.expectEqual(@as(usize, 1), d.intermediates.len);
-        try testing.expectEqual(@as(usize, 1), d.params.len);
-        try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
-        try testing.expectEqual(@as(u16, 3), d.params[0]);
-    }
-}
-
-test "osc: change window title" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('0');
-    _ = p.next(';');
-    _ = p.next('a');
-    _ = p.next('b');
-    _ = p.next('c');
-
-    {
-        const a = p.next(0x07); // BEL
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .change_window_title);
-        try testing.expectEqualStrings("abc", cmd.change_window_title);
-    }
-}
-
-test "osc: change window title (end in esc)" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('0');
-    _ = p.next(';');
-    _ = p.next('a');
-    _ = p.next('b');
-    _ = p.next('c');
-
-    {
-        const a = p.next(0x1B);
-        _ = p.next('\\');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .change_window_title);
-        try testing.expectEqualStrings("abc", cmd.change_window_title);
-    }
-}
-
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
-test "osc: 112 incomplete sequence" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('1');
-    _ = p.next('1');
-    _ = p.next('2');
-
-    {
-        const a = p.next(0x07);
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .reset_color);
-        try testing.expectEqual(cmd.reset_color.kind, .cursor);
-    }
-}
-
-test "csi: too many params" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    for (0..100) |_| {
-        _ = p.next('1');
-        _ = p.next(';');
-    }
-    _ = p.next('1');
-
-    {
-        const a = p.next('C');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "dcs: XTGETTCAP" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("P+") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('q');
-        try testing.expect(p.state == .dcs_passthrough);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2].? == .dcs_hook);
-
-        const hook = a[2].?.dcs_hook;
-        try testing.expectEqualSlices(u8, &[_]u8{'+'}, hook.intermediates);
-        try testing.expectEqualSlices(u16, &[_]u16{}, hook.params);
-        try testing.expectEqual('q', hook.final);
-    }
-}
-
-test "dcs: params" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("P1000") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('p');
-        try testing.expect(p.state == .dcs_passthrough);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2].? == .dcs_hook);
-
-        const hook = a[2].?.dcs_hook;
-        try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
-        try testing.expectEqual('p', hook.final);
-    }
-}
\ No newline at end of file
+        try
\ No newline at end of file
