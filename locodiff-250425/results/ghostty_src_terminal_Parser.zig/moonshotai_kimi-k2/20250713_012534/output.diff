
index ed477f2d1..6615a27ea 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpfncreqg3_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpgs2kzgg0_actual.txt	
@@ -185,7 +185,7 @@ pub const Action = union(enum) {
 
             try writer.writeAll(" }");
         } else {
-            try format(writer, "@{x}", .{@intFromPtr(&self)});
+            try std.fmt.format(writer, "@{x}", .{@intFromPtr(&self)});
         }
     }
 };
@@ -223,7 +223,7 @@ param_acc: u16 = 0,
 param_acc_idx: u8 = 0,
 
 /// Parser for OSC sequences
-osc_parser: osc.Parser = .{},
+osc_parser: osc.Parser = .{};
 
 pub fn init() Parser {
     return .{};
@@ -333,6 +333,11 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
                 break :param null;
             }
 
+            // Ignore parameters that are empty
+            if (c == '0' and self.param_acc_idx == 0) {
+                break :param null;
+            }
+
             // A numeric value. Add it to our accumulator.
             if (self.param_acc_idx > 0) {
                 self.param_acc *|= 10;
@@ -510,10 +515,10 @@ test "csi: SGR ESC [ 38 : 2 m" {
     }
 }
 
-test "csi: SGR colon followed by semicolon" {
+test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[48:2") |c| {
+    for ("[48:2:240:143:104") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
@@ -526,23 +531,52 @@ test "csi: SGR colon followed by semicolon" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
+
+        const d = a[1].?.csi_dispatch;
+        try testing.expect(d.final == 'm');
+        try testing.expect(d.params.len == 5);
+        try testing.expectEqual(@as(u16, 48), d.params[0]);
+        try testing.expect(d.params_sep.isSet(0));
+        try testing.expectEqual(@as(u16, 2), d.params[1]);
+        try testing.expect(d.params_sep.isSet(1));
+        try testing.expectEqual(@as(u16, 240), d.params[2]);
+        try testing.expect(d.params_sep.isSet(2));
+        try testing.expectEqual(@as(u16, 143), d.params[3]);
+        try testing.expect(d.params_sep.isSet(3));
+        try testing.expectEqual(@as(u16, 104), d.params[4]);
+        try testing.expect(!d.params_sep.isSet(4));
     }
+}
 
+test "csi: SGR ESC [4:3m colon" {
+    var p = init();
     _ = p.next(0x1B);
     _ = p.next('[');
+    _ = p.next('4');
+    _ = p.next(':');
+    _ = p.next('3');
+
     {
-        const a = p.next('H');
+        const a = p.next('m');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
+
+        const d = a[1].?.csi_dispatch;
+        try testing.expect(d.final == 'm');
+        try testing.expect(d.params.len == 2);
+        try testing.expectEqual(@as(u16, 4), d.params[0]);
+        try testing.expect(d.params_sep.isSet(0));
+        try testing.expectEqual(@as(u16, 3), d.params[1]);
+        try testing.expect(!d.params_sep.isSet(1));
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
+test "csi: SGR colon followed by semicolon" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
+    for ("[48:2") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
@@ -556,48 +590,27 @@ test "csi: SGR mixed colon and semicolon" {
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
     }
-}
 
-test "csi: SGR ESC [ 48 : 2 m" {
-    var p = init();
     _ = p.next(0x1B);
-    for ("[48:2:240:143:104") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
+    _ = p.next('[');
     {
-        const a = p.next('m');
+        const a = p.next('H');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expect(d.params.len == 5);
-        try testing.expectEqual(@as(u16, 48), d.params[0]);
-        try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 2), d.params[1]);
-        try testing.expect(d.params_sep.isSet(1));
-        try testing.expectEqual(@as(u16, 240), d.params[2]);
-        try testing.expect(d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 143), d.params[3]);
-        try testing.expect(d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 104), d.params[4]);
-        try testing.expect(!d.params_sep.isSet(4));
     }
 }
 
-test "csi: SGR ESC [4:3m colon" {
+test "csi: SGR mixed colon and semicolon" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next('[');
-    _ = p.next('4');
-    _ = p.next(':');
-    _ = p.next('3');
+    for ("[38:5:1;48:5:0") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
 
     {
         const a = p.next('m');
@@ -605,14 +618,6 @@ test "csi: SGR ESC [4:3m colon" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expect(d.params.len == 2);
-        try testing.expectEqual(@as(u16, 4), d.params[0]);
-        try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 3), d.params[1]);
-        try testing.expect(!d.params_sep.isSet(1));
     }
 }
 
@@ -651,7 +656,6 @@ test "csi: SGR with many blank and colon" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,7 +707,6 @@ test "csi: SGR mixed colon and semicolon with blank" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
@@ -774,59 +777,6 @@ test "csi: colon for non-m final" {
     try testing.expect(p.state == .ground);
 }
 
-test "csi: request mode decrqm" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[?2026$") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('p');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'p');
-        try testing.expectEqual(@as(usize, 2), d.intermediates.len);
-        try testing.expectEqual(@as(usize, 1), d.params.len);
-        try testing.expectEqual(@as(u16, '?'), d.intermediates[0]);
-        try testing.expectEqual(@as(u16, '$'), d.intermediates[1]);
-        try testing.expectEqual(@as(u16, 2026), d.params[0]);
-    }
-}
-
-test "csi: change cursor" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[3 ") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('q');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'q');
-        try testing.expectEqual(@as(usize, 1), d.intermediates.len);
-        try testing.expectEqual(@as(usize, 1), d.params.len);
-        try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
-        try testing.expectEqual(@as(u16, 3), d.params[0]);
-    }
-}
-
 test "osc: change window title" {
     var p = init();
     _ = p.next(0x1B);
@@ -897,23 +847,57 @@ test "osc: 112 incomplete sequence" {
     }
 }
 
-test "csi: too many params" {
+test "csi: request mode decrqm" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next('[');
-    for (0..100) |_| {
-        _ = p.next('1');
-        _ = p.next(';');
+    for ("[?2026$") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
     }
-    _ = p.next('1');
 
     {
-        const a = p.next('C');
+        const a = p.next('p');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
+        try testing.expect(a[1].? == .csi_dispatch);
+        try testing.expect(a[2] == null);
+
+        const d = a[1].?.csi_dispatch;
+        try testing.expect(d.final == 'p');
+        try testing.expectEqual(@as(usize, 2), d.intermediates.len);
+        try testing.expectEqual(@as(usize, 1), d.params.len);
+        try testing.expectEqual(@as(u16, '?'), d.intermediates[0]);
+        try testing.expectEqual(@as(u16, '$'), d.intermediates[1]);
+        try testing.expectEqual(@as(u16, 2026), d.params[0]);
+    }
+}
+
+test "csi: change cursor" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("[3 ") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
         try testing.expect(a[2] == null);
     }
+
+    {
+        const a = p.next('q');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1].? == .csi_dispatch);
+        try testing.expect(a[2] == null);
+
+        const d = a[1].?.csi_dispatch;
+        try testing.expect(d.final == 'q');
+        try testing.expectEqual(@as(usize, 1), d.intermediates.len);
+        try testing.expectEqual(@as(usize, 1), d.params.len);
+        try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
+        try testing.expectEqual(@as(u16, 3), d.params[0]);
+    }
 }
 
 test "dcs: XTGETTCAP" {
@@ -961,4 +945,23 @@ test "dcs: params" {
         try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
         try testing.expectEqual('p', hook.final);
     }
+}
+
+test "csi: too many params" {
+    var p = init();
+    _ = p.next(0x1B);
+    _ = p.next('[');
+    for (0..100) |_| {
+        _ = p.next('1');
+        _ = p.next(';');
+    }
+    _ = p.next('1');
+
+    {
+        const a = p.next('C');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
 }
\ No newline at end of file
