--- ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_Parser.zig_extracted.txt (actual)@@ -282,7 +282,7 @@                     self.params[self.params_idx] = self.param_acc;
                     self.params_idx += 1;
                 }
-                break :dcs_hook .{
+                break :dcs_hook Action{
                     .dcs_hook = .{
                         .intermediates = self.intermediates[0..self.intermediates_idx],
                         .params = self.params[0..self.params_idx],
@@ -446,17 +446,17 @@ test "csi: ESC [ H" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next(0x5B);
-
-    {
-        const a = p.next(0x48);
+    _ = p.next('[');
+
+    {
+        const a = p.next('H');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
 
         const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 0x48);
+        try testing.expect(d.final == 'H');
         try testing.expect(d.params.len == 0);
     }
 }
@@ -464,13 +464,13 @@ test "csi: ESC [ 1 ; 4 H" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next(0x5B);
-    _ = p.next(0x31); // 1
-    _ = p.next(0x3B); // ;
-    _ = p.next(0x34); // 4
-
-    {
-        const a = p.next(0x48); // H
+    _ = p.next('[');
+    _ = p.next('1');
+    _ = p.next(';');
+    _ = p.next('4');
+
+    {
+        const a = p.next('H');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
@@ -532,25 +532,6 @@     _ = p.next('[');
     {
         const a = p.next('H');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
@@ -651,7 +632,6 @@     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,7 +683,6 @@     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
@@ -786,7 +765,7 @@ 
     {
         const a = p.next('p');
-        try testing.expect(p.state == .ground);
+        try testing.exexpect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
@@ -874,8 +853,6 @@     }
 }
 
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
 test "osc: 112 incomplete sequence" {
     var p = init();
     _ = p.next(0x1B);
@@ -897,6 +874,53 @@     }
 }
 
+test "dcs: XTGETTCAP" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("P+") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
+
+    {
+        const a = p.next('q');
+        try testing.expect(p.state == .dcs_passthrough);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2].? == .dcs_hook);
+        
+        const hook = a[2].?.dcs_hook;
+        try testing.expectEqualSlices(u8, &[_]u8{'+'}, hook.intermediates);
+        try testing.expectEqualSlices(u16, &[_]u16{}, hook.params);
+        try testing.expectEqual('q', hook.final);
+    }
+}
+
+test "dcs: params" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("P1000") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
+
+    {
+        const a = p.next('p');
+        try testing.expect(p.state == .dcs_passthrough);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2].? == .dcs_hook);
+
+        const hook = a[2].?.dcs_hook;
+        try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
+        try testing.expectEqual('p', hook.final);
+    }
+}
+
 test "csi: too many params" {
     var p = init();
     _ = p.next(0x1B);
@@ -914,51 +938,4 @@         try testing.expect(a[1] == null);
         try testing.expect(a[2] == null);
     }
-}
-
-test "dcs: XTGETTCAP" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("P+") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('q');
-        try testing.expect(p.state == .dcs_passthrough);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2].? == .dcs_hook);
-
-        const hook = a[2].?.dcs_hook;
-        try testing.expectEqualSlices(u8, &[_]u8{'+'}, hook.intermediates);
-        try testing.expectEqualSlices(u16, &[_]u16{}, hook.params);
-        try testing.expectEqual('q', hook.final);
-    }
-}
-
-test "dcs: params" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("P1000") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('p');
-        try testing.expect(p.state == .dcs_passthrough);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2].? == .dcs_hook);
-
-        const hook = a[2].?.dcs_hook;
-        try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
-        try testing.expectEqual('p', hook.final);
-    }
 }