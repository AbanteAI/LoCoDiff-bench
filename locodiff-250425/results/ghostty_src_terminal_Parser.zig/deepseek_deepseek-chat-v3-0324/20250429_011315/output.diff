
index ed477f2d..4ca22501 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpv1aslx1o_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmp6a82hdzf_actual.txt	
@@ -282,7 +282,7 @@ pub fn next(self: *Parser, c: u8) [3]?Action {
                     self.params[self.params_idx] = self.param_acc;
                     self.params_idx += 1;
                 }
-                break :dcs_hook .{
+                break :dcs_hook Action{
                     .dcs_hook = .{
                         .intermediates = self.intermediates[0..self.intermediates_idx],
                         .params = self.params[0..self.params_idx],
@@ -446,17 +446,17 @@ test "esc: ESC ( B" {
 test "csi: ESC [ H" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next(0x5B);
+    _ = p.next('[');
 
     {
-        const a = p.next(0x48);
+        const a = p.next('H');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
 
         const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 0x48);
+        try testing.expect(d.final == 'H');
         try testing.expect(d.params.len == 0);
     }
 }
@@ -464,13 +464,13 @@ test "csi: ESC [ H" {
 test "csi: ESC [ 1 ; 4 H" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next(0x5B);
-    _ = p.next(0x31); // 1
-    _ = p.next(0x3B); // ;
-    _ = p.next(0x34); // 4
+    _ = p.next('[');
+    _ = p.next('1');
+    _ = p.next(';');
+    _ = p.next('4');
 
     {
-        const a = p.next(0x48); // H
+        const a = p.next('H');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
@@ -539,25 +539,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -651,7 +632,6 @@ test "csi: SGR with many blank and colon" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,7 +683,6 @@ test "csi: SGR mixed colon and semicolon with blank" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
@@ -786,7 +765,7 @@ test "csi: request mode decrqm" {
 
     {
         const a = p.next('p');
-        try testing.expect(p.state == .ground);
+        try testing.exexpect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
@@ -874,8 +853,6 @@ test "osc: change window title (end in esc)" {
     }
 }
 
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
 test "osc: 112 incomplete sequence" {
     var p = init();
     _ = p.next(0x1B);
@@ -897,25 +874,6 @@ test "osc: 112 incomplete sequence" {
     }
 }
 
-test "csi: too many params" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    for (0..100) |_| {
-        _ = p.next('1');
-        _ = p.next(';');
-    }
-    _ = p.next('1');
-
-    {
-        const a = p.next('C');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "dcs: XTGETTCAP" {
     var p = init();
     _ = p.next(0x1B);
@@ -932,7 +890,7 @@ test "dcs: XTGETTCAP" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
         try testing.expect(a[2].? == .dcs_hook);
-
+        
         const hook = a[2].?.dcs_hook;
         try testing.expectEqualSlices(u8, &[_]u8{'+'}, hook.intermediates);
         try testing.expectEqualSlices(u16, &[_]u16{}, hook.params);
@@ -961,4 +919,23 @@ test "dcs: params" {
         try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
         try testing.expectEqual('p', hook.final);
     }
+}
+
+test "csi: too many params" {
+    var p = init();
+    _ = p.next(0x1B);
+    _ = p.next('[');
+    for (0..100) |_| {
+        _ = p.next('1');
+        _ = p.next(';');
+    }
+    _ = p.next('1');
+
+    {
+        const a = p.next('C');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
 }
\ No newline at end of file
