
index ed477f2d..e6660262 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpqbahzc1u_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpuivpvodo_actual.txt	
@@ -158,7 +158,7 @@ pub const Action = union(enum) {
 
             inline for (info.fields) |u_field| {
                 // If this is the active field...
-                if (self == @field(TagType, u_field.name)) {
+                if (@as(TagType, self) == @field(TagType, u_field.name)) {
                     const value = @field(self, u_field.name);
                     switch (@TypeOf(value)) {
                         // Unicode
@@ -316,12 +316,12 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
             break :collect null;
         },
         .param => param: {
+            // Ignore too many parameters
+            if (self.params_idx >= MAX_PARAMS) break :param null;
+
             // Semicolon separates parameters. If we encounter a semicolon
             // we need to store and move on to the next parameter.
             if (c == ';' or c == ':') {
-                // Ignore too many parameters
-                if (self.params_idx >= MAX_PARAMS) break :param null;
-
                 // Set param final value
                 self.params[self.params_idx] = self.param_acc;
                 if (c == ':') self.params_sep.set(self.params_idx);
@@ -358,7 +358,11 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
             // Finalize parameters if we have one
             if (self.param_acc_idx > 0) {
                 self.params[self.params_idx] = self.param_acc;
+                // Delimiter is after the param, so we don't set it here.
                 self.params_idx += 1;
+
+                // We don't need to reset the accumulator here since we are leaving
+                // the CSI param state immediately.
             }
 
             const result: Action = .{
@@ -458,6 +462,7 @@ test "csi: ESC [ H" {
         const d = a[1].?.csi_dispatch;
         try testing.expect(d.final == 0x48);
         try testing.expect(d.params.len == 0);
+        try testing.expect(d.params_sep.count() == 0);
     }
 }
 
@@ -480,7 +485,9 @@ test "csi: ESC [ 1 ; 4 H" {
         try testing.expect(d.final == 'H');
         try testing.expect(d.params.len == 2);
         try testing.expectEqual(@as(u16, 1), d.params[0]);
+        try testing.expect(!d.params_sep.isSet(0));
         try testing.expectEqual(@as(u16, 4), d.params[1]);
+        try testing.expect(!d.params_sep.isSet(1));
     }
 }
 
@@ -539,25 +546,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -797,7 +785,8 @@ test "csi: request mode decrqm" {
         try testing.expectEqual(@as(usize, 1), d.params.len);
         try testing.expectEqual(@as(u16, '?'), d.intermediates[0]);
         try testing.expectEqual(@as(u16, '$'), d.intermediates[1]);
-        try testing.expectEqual(@as(u16, 2026), d.params[0]);
+        try testing.expectEqualSlices(u16, &[_]u16{2026}, d.params);
+        try testing.expect(d.params_sep.count() == 0);
     }
 }
 
@@ -824,6 +813,7 @@ test "csi: change cursor" {
         try testing.expectEqual(@as(usize, 1), d.params.len);
         try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
         try testing.expectEqual(@as(u16, 3), d.params[0]);
+        try testing.expect(d.params_sep.count() == 0);
     }
 }
 
