
index ed477f2d1..5e38ea2c5 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmp9uctm77d_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpahgxup3s_actual.txt	
@@ -484,6 +484,76 @@ test "csi: ESC [ 1 ; 4 H" {
     }
 }
 
+test "osc: change window title" {
+    var p = init();
+    _ = p.next(0x1B);
+    _ = p.next(']');
+    _ = p.next('0');
+    _ = p.next(';');
+    _ = p.next('a');
+    _ = p.next('b');
+    _ = p.next('c');
+
+    {
+        const a = p.next(0x07); // BEL
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0].? == .osc_dispatch);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+
+        const cmd = a[0].?.osc_dispatch;
+        try testing.expect(cmd == .change_window_title);
+        try testing.expectEqualStrings("abc", cmd.change_window_title);
+    }
+}
+
+test "osc: change window title (end in esc)" {
+    var p = init();
+    _ = p.next(0x1B);
+    _ = p.next(']');
+    _ = p.next('0');
+    _ = p.next(';');
+    _ = p.next('a');
+    _ = p.next('b');
+    _ = p.next('c');
+
+    {
+        const a = p.next(0x1B);
+        _ = p.next('\\');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0].? == .osc_dispatch);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+
+        const cmd = a[0].?.osc_dispatch;
+        try testing.expect(cmd == .change_window_title);
+        try testing.expectEqualStrings("abc", cmd.change_window_title);
+    }
+}
+
+// https://github.com/darrenstarr/VtNetCore/pull/14
+// Saw this on HN, decided to add a test case because why not.
+test "osc: 112 incomplete sequence" {
+    var p = init();
+    _ = p.next(0x1B);
+    _ = p.next(']');
+    _ = p.next('1');
+    _ = p.next('1');
+    _ = p.next('2');
+
+    {
+        const a = p.next(0x07);
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0].? == .osc_dispatch);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+
+        const cmd = a[0].?.osc_dispatch;
+        try testing.expect(cmd == .reset_color);
+        try testing.expectEqual(cmd.reset_color.kind, .cursor);
+    }
+}
+
 test "csi: SGR ESC [ 38 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -539,25 +609,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,11 +754,10 @@ test "csi: SGR mixed colon and semicolon with blank" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
-test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
+test "csi: SGR mixed colon and semicolon" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136") |c| {
+    for ("[38:5:1;48:5:0") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
@@ -720,44 +770,6 @@ test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expectEqual(17, d.params.len);
-        try testing.expectEqual(@as(u16, 4), d.params[0]);
-        try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 3), d.params[1]);
-        try testing.expect(!d.params_sep.isSet(1));
-        try testing.expectEqual(@as(u16, 38), d.params[2]);
-        try testing.expect(!d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 2), d.params[3]);
-        try testing.expect(!d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 51), d.params[4]);
-        try testing.expect(!d.params_sep.isSet(4));
-        try testing.expectEqual(@as(u16, 51), d.params[5]);
-        try testing.expect(!d.params_sep.isSet(5));
-        try testing.expectEqual(@as(u16, 51), d.params[6]);
-        try testing.expect(!d.params_sep.isSet(6));
-        try testing.expectEqual(@as(u16, 48), d.params[7]);
-        try testing.expect(!d.params_sep.isSet(7));
-        try testing.expectEqual(@as(u16, 2), d.params[8]);
-        try testing.expect(!d.params_sep.isSet(8));
-        try testing.expectEqual(@as(u16, 170), d.params[9]);
-        try testing.expect(!d.params_sep.isSet(9));
-        try testing.expectEqual(@as(u16, 170), d.params[10]);
-        try testing.expect(!d.params_sep.isSet(10));
-        try testing.expectEqual(@as(u16, 170), d.params[11]);
-        try testing.expect(!d.params_sep.isSet(11));
-        try testing.expectEqual(@as(u16, 58), d.params[12]);
-        try testing.expect(!d.params_sep.isSet(12));
-        try testing.expectEqual(@as(u16, 2), d.params[13]);
-        try testing.expect(!d.params_sep.isSet(13));
-        try testing.expectEqual(@as(u16, 255), d.params[14]);
-        try testing.expect(!d.params_sep.isSet(14));
-        try testing.expectEqual(@as(u16, 97), d.params[15]);
-        try testing.expect(!d.params_sep.isSet(15));
-        try testing.expectEqual(@as(u16, 136), d.params[16]);
-        try testing.expect(!d.params_sep.isSet(16));
     }
 }
 
@@ -827,76 +839,6 @@ test "csi: change cursor" {
     }
 }
 
-test "osc: change window title" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('0');
-    _ = p.next(';');
-    _ = p.next('a');
-    _ = p.next('b');
-    _ = p.next('c');
-
-    {
-        const a = p.next(0x07); // BEL
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .change_window_title);
-        try testing.expectEqualStrings("abc", cmd.change_window_title);
-    }
-}
-
-test "osc: change window title (end in esc)" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('0');
-    _ = p.next(';');
-    _ = p.next('a');
-    _ = p.next('b');
-    _ = p.next('c');
-
-    {
-        const a = p.next(0x1B);
-        _ = p.next('\\');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .change_window_title);
-        try testing.expectEqualStrings("abc", cmd.change_window_title);
-    }
-}
-
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
-test "osc: 112 incomplete sequence" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('1');
-    _ = p.next('1');
-    _ = p.next('2');
-
-    {
-        const a = p.next(0x07);
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-
-        const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .reset_color);
-        try testing.expectEqual(cmd.reset_color.kind, .cursor);
-    }
-}
-
 test "csi: too many params" {
     var p = init();
     _ = p.next(0x1B);
