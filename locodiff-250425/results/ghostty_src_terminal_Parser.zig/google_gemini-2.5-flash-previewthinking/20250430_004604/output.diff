--- ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_Parser.zig_extracted.txt (actual)@@ -190,6 +190,15 @@     }
 };
 
+/// Keeps track of the parameter sep used for CSI params. We allow colons
+/// to be used ONLY by the 'm' CSI action.
+pub const ParamSepState = enum(u8) {
+    none = 0,
+    semicolon = ';',
+    colon = ':',
+    mixed = 1,
+};
+
 /// Maximum number of intermediate characters during parsing. This is
 /// 4 because we also use the intermediates array for UTF8 decoding which
 /// can be at most 4 bytes.
@@ -246,6 +255,24 @@ 
     // After generating the actions, we set our next state.
     defer self.state = next_state;
+
+    // In debug mode, we log bad state transitions.
+    if (builtin.mode == .Debug) {
+        if (@intFromEnum(next_state) >= table[@enumToInt(State.ground)][@enumToInt(State.ground)].state) {
+             // We index the state table by the state ordinal. We intentionally remove State.anywhere
+             // as a real state in this enum. This means state ordinals won't line up perfectly.
+             // We check against the ground state's self-transition here which will always be a valid
+             // state transition.
+             // Note: This needs to be >= ground state ordinal because DSC states, for example, have
+             // large ordinals.
+        } else {
+            log.debug(
+                "state transition from '{}' -> '{}', likely binary input: {x}",
+                .{ self.state, next_state, c },
+            );
+        }
+    }
+
 
     // When going from one state to another, the actions take place in this order:
     //
@@ -313,6 +340,7 @@         .execute => Action{ .execute = c },
         .collect => collect: {
             self.collect(c);
+            // The client is expected to perform no action.
             break :collect null;
         },
         .param => param: {
@@ -333,6 +361,12 @@                 break :param null;
             }
 
+            // Parameter value should be a digit.
+            if (c < '0' or c > '9') {
+                log.warn("parameter value expected digit, got {x}", .{c});
+                break :param null;
+            }
+
             // A numeric value. Add it to our accumulator.
             if (self.param_acc_idx > 0) {
                 self.param_acc *|= 10;
@@ -343,6 +377,7 @@             // we're out of bounds and we exit immediately.
             self.param_acc_idx, const overflow = @addWithOverflow(self.param_acc_idx, 1);
             if (overflow > 0) break :param null;
+
 
             // The client is expected to perform no action.
             break :param null;
@@ -358,6 +393,8 @@             // Finalize parameters if we have one
             if (self.param_acc_idx > 0) {
                 self.params[self.params_idx] = self.param_acc;
+                // Assumes last byte wasn't ':'
+                // TODO: ensure last byte can't be ':'
                 self.params_idx += 1;
             }
 
@@ -413,6 +450,7 @@         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .print);
         try testing.expect(a[2] == null);
+        try testing.expectEqual(@as(u21, 'a'), a[1].?.print);
     }
 
     {
@@ -421,6 +459,7 @@         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .execute);
         try testing.expect(a[2] == null);
+        try testing.expectEqual(@as(u8, 0x19), a[1].?.execute);
     }
 }
 
@@ -458,6 +497,7 @@         const d = a[1].?.csi_dispatch;
         try testing.expect(d.final == 0x48);
         try testing.expect(d.params.len == 0);
+        try testing.expectEqual(d.params_sep.count(), 0);
     }
 }
 
@@ -468,7 +508,7 @@     _ = p.next(0x31); // 1
     _ = p.next(0x3B); // ;
     _ = p.next(0x34); // 4
-
+    //
     {
         const a = p.next(0x48); // H
         try testing.expect(p.state == .ground);
@@ -481,6 +521,7 @@         try testing.expect(d.params.len == 2);
         try testing.expectEqual(@as(u16, 1), d.params[0]);
         try testing.expectEqual(@as(u16, 4), d.params[1]);
+        try testing.expectEqual(d.params_sep.count(), 0);
     }
 }
 
@@ -532,25 +573,6 @@     _ = p.next('[');
     {
         const a = p.next('H');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
@@ -670,7 +692,6 @@         try testing.expect(a[2] == null);
 
         const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
         try testing.expectEqual(14, d.params.len);
         try testing.expectEqual(@as(u16, 0), d.params[0]);
         try testing.expect(!d.params_sep.isSet(0));
@@ -798,6 +819,7 @@         try testing.expectEqual(@as(u16, '?'), d.intermediates[0]);
         try testing.expectEqual(@as(u16, '$'), d.intermediates[1]);
         try testing.expectEqual(@as(u16, 2026), d.params[0]);
+        try testing.expectEqual(d.params_sep.count(), 0);
     }
 }
 
@@ -824,6 +846,7 @@         try testing.expectEqual(@as(usize, 1), d.params.len);
         try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
         try testing.expectEqual(@as(u16, 3), d.params[0]);
+        try testing.expectEqual(d.params_sep.count(), 0);
     }
 }
 
