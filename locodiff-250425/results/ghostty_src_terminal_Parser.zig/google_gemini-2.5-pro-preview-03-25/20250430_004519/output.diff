
index ed477f2d..83990d58 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpccg1rpw4_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmp4z3ssn6v_actual.txt	
@@ -353,7 +353,7 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
         },
         .csi_dispatch => csi_dispatch: {
             // Ignore too many parameters
-            if (self.params_idx >= MAX_PARAMS) break :csi_dispatch null;
+            if (self.param_acc_idx > 0 and self.params_idx >= MAX_PARAMS) break :csi_dispatch null;
 
             // Finalize parameters if we have one
             if (self.param_acc_idx > 0) {
@@ -480,7 +480,9 @@ test "csi: ESC [ 1 ; 4 H" {
         try testing.expect(d.final == 'H');
         try testing.expect(d.params.len == 2);
         try testing.expectEqual(@as(u16, 1), d.params[0]);
+        try testing.expect(!d.params_sep.isSet(0));
         try testing.expectEqual(@as(u16, 4), d.params[1]);
+        try testing.expect(!d.params_sep.isSet(1));
     }
 }
 
@@ -539,25 +541,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
