--- ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_Parser.zig_extracted.txt (actual)@@ -201,7 +201,7 @@ /// data. This used to be 16 but Kakoune has a SGR command that uses 17
 /// parameters.
 ///
-/// We could in the future make this the static limit and then allocate after
+//// We could in the future make this the static limit and then allocate after
 /// but that's a lot more work and practically its so rare to exceed this
 /// number. I implore TUI authors to not use more than this number of CSI
 /// params, but I suspect we'll introduce a slow path with heap allocation
@@ -510,54 +510,6 @@     }
 }
 
-test "csi: SGR colon followed by semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[48:2") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    {
-        const a = p.next('H');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -648,6 +600,25 @@         try testing.expect(d.params_sep.isSet(4));
         try testing.expectEqual(@as(u16, 104), d.params[5]);
         try testing.expect(!d.params_sep.isSet(5));
+    }
+}
+
+test "csi: SGR mixed colon and semicolon" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("[38:5:1;48:5:0") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
+
+    {
+        const a = p.next('m');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1].? == .csi_dispatch);
+        try testing.expect(a[2] == null);
     }
 }
 
