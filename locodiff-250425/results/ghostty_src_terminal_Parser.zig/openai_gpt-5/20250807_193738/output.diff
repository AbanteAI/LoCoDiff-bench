
index ed477f2d1..ceccc7c73 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpkixjpjn5_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpcdq0q2ax_actual.txt	
@@ -539,10 +539,10 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
+test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
+    for ("[48:2:240:143:104") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
@@ -555,13 +555,27 @@ test "csi: SGR mixed colon and semicolon" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
+
+        const d = a[1].?.csi_dispatch;
+        try testing.expect(d.final == 'm');
+        try testing.expect(d.params.len == 5);
+        try testing.expectEqual(@as(u16, 48), d.params[0]);
+        try testing.expect(d.params_sep.isSet(0));
+        try testing.expectEqual(@as(u16, 2), d.params[1]);
+        try testing.expect(d.params_sep.isSet(1));
+        try testing.expectEqual(@as(u16, 240), d.params[2]);
+        try testing.expect(d.params_sep.isSet(2));
+        try testing.expectEqual(@as(u16, 143), d.params[3]);
+        try testing.expect(d.params_sep.isSet(3));
+        try testing.expectEqual(@as(u16, 104), d.params[4]);
+        try testing.expect(!d.params_sep.isSet(4));
     }
 }
 
-test "csi: SGR ESC [ 48 : 2 m" {
+test "csi: SGR mixed colon and semicolon" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[48:2:240:143:104") |c| {
+    for ("[38:5:1;48:5:0") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
@@ -574,20 +588,6 @@ test "csi: SGR ESC [ 48 : 2 m" {
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expect(d.params.len == 5);
-        try testing.expectEqual(@as(u16, 48), d.params[0]);
-        try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 2), d.params[1]);
-        try testing.expect(d.params_sep.isSet(1));
-        try testing.expectEqual(@as(u16, 240), d.params[2]);
-        try testing.expect(d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 143), d.params[3]);
-        try testing.expect(d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 104), d.params[4]);
-        try testing.expect(!d.params_sep.isSet(4));
     }
 }
 
@@ -761,19 +761,6 @@ test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     }
 }
 
-test "csi: colon for non-m final" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:2h") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    try testing.expect(p.state == .ground);
-}
-
 test "csi: request mode decrqm" {
     var p = init();
     _ = p.next(0x1B);
@@ -897,6 +884,19 @@ test "osc: 112 incomplete sequence" {
     }
 }
 
+test "csi: colon for non-m final" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("[38:2h") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
+
+    try testing.expect(p.state == .ground);
+}
+
 test "csi: too many params" {
     var p = init();
     _ = p.next(0x1B);
