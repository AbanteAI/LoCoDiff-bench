
index ed477f2d..b3e194bf 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpmeo9q2ni_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmptxqwfobn_actual.txt	
@@ -237,6 +237,10 @@ pub fn deinit(self: *Parser) void {
 /// Up to 3 actions may need to be executed -- in order -- representing
 /// the state exit, transition, and entry actions.
 pub fn next(self: *Parser, c: u8) [3]?Action {
+    // If we're processing UTF-8, we handle this manually.
+    // UTF-8 decoding is no longer performed in the parser,
+    // see stream.zig
+
     const effect = table[c][@intFromEnum(self.state)];
 
     // log.info("next: {x}", .{c});
@@ -264,7 +268,7 @@ pub fn next(self: *Parser, c: u8) [3]?Action {
             else => null,
         },
 
-        self.doAction(action, c),
+        doAction(self, action, c),
 
         // Entry depends on new state
         if (self.state == next_state) null else switch (next_state) {
@@ -296,16 +300,6 @@ pub fn next(self: *Parser, c: u8) [3]?Action {
     };
 }
 
-pub fn collect(self: *Parser, c: u8) void {
-    if (self.intermediates_idx >= MAX_INTERMEDIATE) {
-        log.warn("invalid intermediates count", .{});
-        return;
-    }
-
-    self.intermediates[self.intermediates_idx] = c;
-    self.intermediates_idx += 1;
-}
-
 fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
     return switch (action) {
         .none, .ignore => null,
@@ -316,8 +310,7 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
             break :collect null;
         },
         .param => param: {
-            // Semicolon separates parameters. If we encounter a semicolon
-            // we need to store and move on to the next parameter.
+            // Semicolon and colon separate parameters.
             if (c == ';' or c == ':') {
                 // Ignore too many parameters
                 if (self.params_idx >= MAX_PARAMS) break :param null;
@@ -387,11 +380,28 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
                 .final = c,
             },
         },
+        .dcs_hook => Action{
+            .dcs_hook = .{
+                .intermediates = self.intermediates[0..self.intermediates_idx],
+                .params = self.params[0..self.params_idx],
+                .final = c,
+            },
+        },
         .put => Action{ .dcs_put = c },
         .apc_put => Action{ .apc_put = c },
     };
 }
 
+pub fn collect(self: *Parser, c: u8) void {
+    if (self.intermediates_idx >= MAX_INTERMEDIATE) {
+        log.warn("invalid intermediates count", .{});
+        return;
+    }
+
+    self.intermediates[self.intermediates_idx] = c;
+    self.intermediates_idx += 1;
+}
+
 pub fn clear(self: *Parser) void {
     self.intermediates_idx = 0;
     self.params_idx = 0;
@@ -468,7 +478,7 @@ test "csi: ESC [ 1 ; 4 H" {
     _ = p.next(0x31); // 1
     _ = p.next(0x3B); // ;
     _ = p.next(0x34); // 4
-
+    //
     {
         const a = p.next(0x48); // H
         try testing.expect(p.state == .ground);
@@ -539,25 +549,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
