--- ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_Parser.zig_extracted.txt (actual)@@ -5,8 +5,6 @@ const Parser = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
-const assert = std.debug.assert;
 const testing = std.testing;
 const table = @import("parse_table.zig").table;
 const osc = @import("osc.zig");
@@ -539,25 +537,6 @@     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -651,7 +630,6 @@     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,7 +681,6 @@     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
@@ -874,8 +851,6 @@     }
 }
 
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
 test "osc: 112 incomplete sequence" {
     var p = init();
     _ = p.next(0x1B);
