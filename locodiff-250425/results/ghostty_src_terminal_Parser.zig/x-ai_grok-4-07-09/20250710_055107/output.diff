
index ed477f2d1..0c35accfc 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmps6h261g2_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpm7n3ril__actual.txt	
@@ -185,7 +185,7 @@ pub const Action = union(enum) {
 
             try writer.writeAll(" }");
         } else {
-            try format(writer, "@{x}", .{@intFromPtr(&self)});
+            try std.fmt.format(writer, "@{x}", .{@intFromPtr(&self)});
         }
     }
 };
@@ -282,7 +282,7 @@ pub fn next(self: *Parser, c: u8) [3]?Action {
                     self.params[self.params_idx] = self.param_acc;
                     self.params_idx += 1;
                 }
-                break :dcs_hook .{
+                break :dcs_hook Action{
                     .dcs_hook = .{
                         .intermediates = self.intermediates[0..self.intermediates_idx],
                         .params = self.params[0..self.params_idx],
@@ -313,6 +313,8 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
         .execute => Action{ .execute = c },
         .collect => collect: {
             self.collect(c);
+
+            // The client is expected to perform no action.
             break :collect null;
         },
         .param => param: {
@@ -333,16 +335,15 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
                 break :param null;
             }
 
+            // Ignore parameters that are too long
+            if (self.param_acc_idx == std.math.maxInt(u8)) break :param null;
+
             // A numeric value. Add it to our accumulator.
             if (self.param_acc_idx > 0) {
                 self.param_acc *|= 10;
             }
             self.param_acc +|= c - '0';
-
-            // Increment our accumulator index. If we overflow then
-            // we're out of bounds and we exit immediately.
-            self.param_acc_idx, const overflow = @addWithOverflow(self.param_acc_idx, 1);
-            if (overflow > 0) break :param null;
+            self.param_acc_idx += 1;
 
             // The client is expected to perform no action.
             break :param null;
@@ -510,54 +511,6 @@ test "csi: SGR ESC [ 38 : 2 m" {
     }
 }
 
-test "csi: SGR colon followed by semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[48:2") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    {
-        const a = p.next('H');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -651,7 +604,25 @@ test "csi: SGR with many blank and colon" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence.
+test "csi: SGR mixed colon and semicolon" {
+    var p = init();
+    _ = p.next(0x1B);
+    for ("[38:5:1;48:5:0") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
+
+    {
+        const a = p.next('m');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1].? == .csi_dispatch);
+        try testing.expect(a[2] == null);
+    }
+}
+
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -703,7 +674,6 @@ test "csi: SGR mixed colon and semicolon with blank" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
