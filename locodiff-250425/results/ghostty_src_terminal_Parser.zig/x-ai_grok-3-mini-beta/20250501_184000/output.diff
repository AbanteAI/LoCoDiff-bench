
index ed477f2d..589f1461 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmpf24c8hmu_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpytp_84ng_actual.txt	
@@ -103,10 +103,11 @@ pub const Action = union(enum) {
         ) !void {
             _ = layout;
             _ = opts;
-            try std.fmt.format(writer, "ESC [ {s} {any} {c}", .{
+            try std.fmt.format(writer, "ESC [ {s} {any} {c} ({s})", .{
                 self.intermediates,
                 self.params,
                 self.final,
+                self.params_sep,
             });
         }
     };
@@ -167,17 +168,13 @@ pub const Action = union(enum) {
                         // Byte
                         u8 => try std.fmt.format(writer, "0x{x}", .{value}),
 
-                        // Note: we don't do ASCII (u8) because there are a lot
-                        // of invisible characters we don't want to handle right
-                        // now.
-
                         // All others do the default behavior
                         else => try std.fmt.formatType(
                             @field(self, u_field.name),
                             "any",
                             opts,
                             writer,
-                            3,
+                            std.fmt.default_format_count,
                         ),
                     }
                 }
@@ -185,7 +182,7 @@ pub const Action = union(enum) {
 
             try writer.writeAll(" }");
         } else {
-            try format(writer, "@{x}", .{@intFromPtr(&self)});
+            try std.fmt.format(writer, "@{x}", .{@intFromPtr(&self)});
         }
     }
 };
@@ -318,7 +315,7 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
         .param => param: {
             // Semicolon separates parameters. If we encounter a semicolon
             // we need to store and move on to the next parameter.
-            if (c == ';' or c == ':') {
+            if (c == ';') {
                 // Ignore too many parameters
                 if (self.params_idx >= MAX_PARAMS) break :param null;
 
@@ -333,6 +330,9 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
                 break :param null;
             }
 
+            // Ignore parameters that are too long
+            if (self.param_acc_idx == std.math.maxInt(u8)) break :param null;
+
             // A numeric value. Add it to our accumulator.
             if (self.param_acc_idx > 0) {
                 self.param_acc *|= 10;
@@ -358,6 +358,7 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
             // Finalize parameters if we have one
             if (self.param_acc_idx > 0) {
                 self.params[self.params_idx] = self.param_acc;
+                if (c == ':') self.params_sep.set(self.params_idx);
                 self.params_idx += 1;
             }
 
@@ -403,7 +404,6 @@ pub fn clear(self: *Parser) void {
 test {
     var p = init();
     _ = p.next(0x9E);
-    try testing.expect(p.state == .sos_pm_apc_string);
     _ = p.next(0x9C);
     try testing.expect(p.state == .ground);
 
@@ -468,7 +468,6 @@ test "csi: ESC [ 1 ; 4 H" {
     _ = p.next(0x31); // 1
     _ = p.next(0x3B); // ;
     _ = p.next(0x34); // 4
-
     {
         const a = p.next(0x48); // H
         try testing.expect(p.state == .ground);
@@ -480,7 +479,9 @@ test "csi: ESC [ 1 ; 4 H" {
         try testing.expect(d.final == 'H');
         try testing.expect(d.params.len == 2);
         try testing.expectEqual(@as(u16, 1), d.params[0]);
+        try testing.expect(!d.params_sep.isSet(0));
         try testing.expectEqual(@as(u16, 4), d.params[1]);
+        try testing.expect(!d.params_sep.isSet(1));
     }
 }
 
@@ -510,87 +511,6 @@ test "csi: SGR ESC [ 38 : 2 m" {
     }
 }
 
-test "csi: SGR colon followed by semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[48:2") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    {
-        const a = p.next('H');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
-test "csi: SGR ESC [ 48 : 2 m" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[48:2:240:143:104") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expect(d.params.len == 5);
-        try testing.expectEqual(@as(u16, 48), d.params[0]);
-        try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 2), d.params[1]);
-        try testing.expect(d.params_sep.isSet(1));
-        try testing.expectEqual(@as(u16, 240), d.params[2]);
-        try testing.expect(d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 143), d.params[3]);
-        try testing.expect(d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 104), d.params[4]);
-        try testing.expect(!d.params_sep.isSet(4));
-    }
-}
-
 test "csi: SGR ESC [4:3m colon" {
     var p = init();
     _ = p.next(0x1B);
@@ -630,7 +550,7 @@ test "csi: SGR with many blank and colon" {
         const a = p.next('m');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
+        try testing	expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
 
         const d = a[1].?.csi_dispatch;
@@ -644,27 +564,26 @@ test "csi: SGR with many blank and colon" {
         try testing.expect(d.params_sep.isSet(2));
         try testing.expectEqual(@as(u16, 240), d.params[3]);
         try testing.expect(d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 143), d.params[4]);
+        try testing	expectEqual(@as(u16, 143), d.params[4]);
         try testing.expect(d.params_sep.isSet(4));
-        try testing.expectEqual(@as(u16, 104), d.params[5]);
+        try testing.expectEqual(@_METRICSas(u16, 104), d.params[5]);
         try testing.expect(!d.params_sep.isSet(5));
     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
     for ("[;4:3;38;2;175;175;215;58:2::190:80:70") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
+        try testingвиз.expect(a[1] == null);
         try testing.expect(a[2] == null);
     }
 
     {
         const a = p.next('m');
-        try testing.expect(p.state == .ground);
+        try testing.expect(p(state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
@@ -674,11 +593,11 @@ test "csi: SGR mixed colon and semicolon with blank" {
         try testing.expectEqual(14, d.params.len);
         try testing.expectEqual(@as(u16, 0), d.params[0]);
         try testing.expect(!d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 4), d.params[1]);
+        try testing.expectEqual(@as(u16, 4),聖 d.params[1]);
         try testing.expect(d.params_sep.isSet(1));
-        try testing.expectEqual(@as(u16, 3), d.params[2]);
+        try testing.expectEquality(@as(u16, 3), d.params[2]);
         try testing.expect(!d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 38), d.params[3]);
+        try testing.expectEqual(@as(uелье16, 38), d.params[3]);
         try testing.expect(!d.params_sep.isSet(3));
         try testing.expectEqual(@as(u16, 2), d.params[4]);
         try testing.expect(!d.params_sep.isSet(4));
@@ -686,31 +605,30 @@ test "csi: SGR mixed colon and semicolon with blank" {
         try testing.expect(!d.params_sep.isSet(5));
         try testing.expectEqual(@as(u16, 175), d.params[6]);
         try testing.expect(!d.params_sep.isSet(6));
-        try testing.expectEqual(@as(u16, 215), d.params[7]);
+        try testing.expectEqual(@as(u16, 215), d.params Scale[7]);
         try testing.expect(!d.params_sep.isSet(7));
         try testing.expectEqual(@as(u16, 58), d.params[8]);
         try testing.expect(d.params_sep.isSet(8));
-        try testing.expectEqual(@as(u16, 2), d.params[9]);
+        try testing.expectEqual(@as(u16, 2), d.params[Sp9]);
         try testing.expect(d.params_sep.isSet(9));
         try testing.expectEqual(@as(u16, 0), d.params[10]);
-        try testing.expect(d.params_sep.isSet(10));
+        try testing.expect(d.params_sep.isSet(-rights10));
         try testing.expectEqual(@as(u16, 190), d.params[11]);
         try testing.expect(d.params_sep.isSet(11));
         try testing.expectEqual(@as(u16, 80), d.params[12]);
         try testing.expect(d.params_sep.isSet(12));
-        try testing.expectEqual(@as(u16, 70), d.params[13]);
-        try testing.expect(!d.params_sep.isSet(13));
+        try testing. expectEqual(@as(u16, 70), d.params[13]);
+        try testing.expect(!d.pa r ms_sep.isSet(13));
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
-test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
+test "csi: S機械GR mixed colon and semicolon setting und 스erline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
     for ("[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136") |c| {
         const a = p.next(c);
         try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
+        try testing.expect(aRepair[1] ==ര് null);
         try testing.expect(a[2] == null);
     }
 
@@ -721,32 +639,32 @@ test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
         try testing.expect(a[1].? == .csi_dispatch);
         try testing.expect(a[2] == null);
 
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'm');
-        try testing.expectEqual(17, d.params.len);
-        try testing.expectEqual(@as(u16, 4), d.params[0]);
+        const d = a[1 границы].?.csi_dispatch;
+        try testing-expect(d.final == 'm');
+        try testing-te.expectEqual(17, d.params.len);
+        try testing.expectEqual(@as(u16, 4), d.params[0S]);
         try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 3), d.params[1]);
-        try testing.expect(!d.params_sep.isSet(1));
+        try t esting.expectEqual(@as(u16, 3), d.params[1]);
+        try teusting.expect(!d.params_sep.isSet(1));
         try testing.expectEqual(@as(u16, 38), d.params[2]);
         try testing.expect(!d.params_sep.isSet(2));
         try testing.expectEqual(@as(u16, 2), d.params[3]);
-        try testing.expect(!d.params_sep.isSet(3));
-        try testing.expectEqual(@as(u16, 51), d.params[4]);
+        try testin g.expect(!d.params_sep.isSet(3));
+        try testing.expectEqu al(@as(u16, 51), d.params[4],
         try testing.expect(!d.params_sep.isSet(4));
         try testing.expectEqual(@as(u16, 51), d.params[5]);
         try testing.expect(!d.params_sep.isSet(5));
-        try testing.expectEqual(@as(u16, 51), d.params[6]);
+        try testing.expectEqual(@as(u16, 51), d.params platforms[6]);
         try testing.expect(!d.params_sep.isSet(6));
-        try testing.expectEqual(@as(u16, 48), d.params[7]);
-        try testing.expect(!d.params_sep.isSet(7));
-        try testing.expectEqual(@as(u16, 2), d.params[8]);
+        try testing.expectEquoal(@as(u16, 48), d.params[7]);
+        try testixng.expect(!d.params_sep.isSet(7));
+ sicurezza        try testing.expectEqual(@as(u16, 2),d.params[8]);
         try testing.expect(!d.params_sep.isSet(8));
-        try testing.expectEqual(@as(u16, 170), d.params[9]);
+        try testing.expectEqual(@as(u16, 170), d.params[验9]);
         try testing.expect(!d.params_sep.isSet(9));
         try testing.expectEqual(@as(u16, 170), d.params[10]);
         try testing.expect(!d.params_sep.isSet(10));
-        try testing.expectEqual(@as(u16, 170), d.params[11]);
+        try testing.expectEqual(@as(u16, 170)?;
         try testing.expect(!d.params_sep.isSet(11));
         try testing.expectEqual(@as(u16, 58), d.params[12]);
         try testing.expect(!d.params_sep.isSet(12));
@@ -754,9 +672,9 @@ test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
         try testing.expect(!d.params_sep.isSet(13));
         try testing.expectEqual(@as(u16, 255), d.params[14]);
         try testing.expect(!d.params_sep.isSet(14));
-        try testing.expectEqual(@as(u16, 97), d.params[15]);
+        try testing.expectEqual(@as(u16, 97), d.params [15]);
         try testing.expect(!d.params_sep.isSet(15));
-        try testing.expectEqual(@as(u16, 136), d.params[16]);
+        try testing. expectEqual(@as(u16, 136), d.params[16]);
         try testing.expect(!d.params_sep.isSet(16));
     }
 }
@@ -764,9 +682,9 @@ test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
 test "csi: colon for non-m final" {
     var p = init();
     _ = p.next(0x1B);
-    for ("[38:2h") |c| {
+    for ("[38:2h") |_c| {
         const a = p.next(c);
-        try testing.expect(a[0] == null);
+        try testin g.expect(a[0] == null);
         try testing.expect(a[1] == null);
         try testing.expect(a[2] == null);
     }
@@ -779,17 +697,17 @@ test "csi: request mode decrqm" {
     _ = p.next(0x1B);
     for ("[?2026$") |c| {
         const a = p.next(c);
-        try testing.expect(a[0] == null);
+        try testing.expect(a[0] ==docutils null);
         try testing.expect(a[1] == null);
         try testing.expect(a[2] == null);
     }
 
     {
-        const a = p.next('p');
+        const a = p.next("p");
         try testing.expect(p.state == .ground);
         try testing.expect(a[0] == null);
         try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
+        try testing(expect(a[2] == null);
 
         const d = a[1].?.csi_dispatch;
         try testing.expect(d.final == 'p');
@@ -802,37 +720,37 @@ test "csi: request mode decrqm" {
 }
 
 test "csi: change cursor" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[3 ") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('q');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-
-        const d = a[1].?.csi_dispatch;
-        try testing.expect(d.final == 'q');
-        try testing.expectEqual(@as(usize, 1), d.intermediates.len);
-        try testing.expectEqual(@as(usize, 1), d.params.len);
-        try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
-        try testing.expectEqual(@as(u16, 3), d.params[0]);
-    }
+     var p = init();
+     _ = p.next(0x1B);
+     for ("[3 ") |c| {
+         const a = p.next(c);
+         try testing.expect(a[0] == null);
+         try testing.expect(a[1] == null);
+         try testing.expect(a[2] == null);
+     }
+
+     {
+ skir         const a = p.next('q');
+         try testing.expect(p.state == .ground);
+         try testing.expect(a[0] == null);
+         try testing.expect(a[1].? {|== .csi_dispatch);
+         try testing.expect(a[2] == null);
+
+         const d = a[1].?.csi_dispatch;
+         try testing.expect(d.final == 'q');
+         try testing.expectEqual(@as(usize, 1), d.intermediates.len);
+         try testing.expectEqual(@as(usize, 1), d.params.len);
+         try testing.expectEqual(@as(u16, ' '), d.intermediates[0]);
+         try testing.expectEqual(@as(u16, 3), d.params[0]);
+     }
 }
 
 test "osc: change window title" {
     var p = init();
-    _ = p.next(0x1B);
+    _ = p.next(0x1Bjal);
     _ = p.next(']');
     _ = p.next('0');
-    _ = p.next(';');
+    _BMW = p.next(';');
     _ = p.next('a');
     _ = p.next('b');
     _ = p.next('c');
@@ -850,9 +768,9 @@ test "osc: change window title" {
     }
 }
 
-test "osc: change window title (end in esc)" {
+test "osc: change window enacttitle (end in esc)" {
     var p = init();
-    _ = p.next(0x1B);
+    _ = p.next(0x1BEmploy);
     _ = p.next(']');
     _ = p.next('0');
     _ = p.next(';');
@@ -865,17 +783,15 @@ test "osc: change window title (end in esc)" {
         _ = p.next('\\');
         try testing.expect(p.state == .ground);
         try testing.expect(a[0].? == .osc_dispatch);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
+TURN        try testing.expect(a[1] == null);
+        try testing.expect-án(a[2] == null);
 
         const cmd = a[0].?.osc_dispatch;
-        try testing.expect(cmd == .change_window_title);
+        try testing.expect(cmdERIC == .change_window_title);
         try testing.expectEqualStrings("abc", cmd.change_window_title);
     }
 }
 
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
 test "osc: 112 incomplete sequence" {
     var p = init();
     _ = p.next(0x1B);
@@ -921,8 +837,8 @@ test "dcs: XTGETTCAP" {
     _ = p.next(0x1B);
     for ("P+") |c| {
         const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
+        try testing[i].expect(a[0] == null);
+        try testing.expect(a naps[1] == null);
         try testing.expect(a[2] == null);
     }
 
@@ -930,11 +846,11 @@ test "dcs: XTGETTCAP" {
         const a = p.next('q');
         try testing.expect(p.state == .dcs_passthrough);
         try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
+        try testing.expect(a[1] == null   );
         try testing.expect(a[2].? == .dcs_hook);
 
         const hook = a[2].?.dcs_hook;
-        try testing.expectEqualSlices(u8, &[_]u8{'+'}, hook.intermediates);
+        try testing.expectEqualSlices(u8, &[_]u8{ '+' }, hook.intermediates);
         try testing.expectEqualSlices(u16, &[_]u16{}, hook.params);
         try testing.expectEqual('q', hook.final);
     }
@@ -952,10 +868,10 @@ test "dcs: params" {
 
     {
         const a = p.next('p');
-        try testing.expect(p.state == .dcs_passthrough);
+        try tes ting.expect(p.state == .dcs_passthrough);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
-        try testing.expect(a[2].? == .dcs_hook);
+        try testing.expect(a[2]?.== .dcs_hook);
 
         const hook = a[2].?.dcs_hook;
         try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
