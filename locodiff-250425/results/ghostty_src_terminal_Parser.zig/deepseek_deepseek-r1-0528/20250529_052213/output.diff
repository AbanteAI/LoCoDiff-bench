
index ed477f2d1..ceee1f896 100644
--- a/ghostty_src_terminal_Parser.zig_expectedoutput.txt (expected):tmp/tmp_gxmvma0_expected.txt	
+++ b/ghostty_src_terminal_Parser.zig_extracted.txt (actual):tmp/tmpfoahdvdw_actual.txt	
@@ -5,7 +5,6 @@
 const Parser = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const testing = std.testing;
 const table = @import("parse_table.zig").table;
@@ -306,6 +305,14 @@ pub fn collect(self: *Parser, c: u8) void {
     self.intermediates_idx += 1;
 }
 
+pub fn clear(self: *Parser) void {
+    self.intermediates_idx = 0;
+    self.params_idx = 0;
+    self.params_sep = Action.CSI.SepList.initEmpty();
+    self.param_acc = 0;
+    self.param_acc_idx = 0;
+}
+
 fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
     return switch (action) {
         .none, .ignore => null,
@@ -392,14 +399,6 @@ fn doAction(self: *Parser, action: TransitionAction, c: u8) ?Action {
     };
 }
 
-pub fn clear(self: *Parser) void {
-    self.intermediates_idx = 0;
-    self.params_idx = 0;
-    self.params_sep = Action.CSI.SepList.initEmpty();
-    self.param_acc = 0;
-    self.param_acc_idx = 0;
-}
-
 test {
     var p = init();
     _ = p.next(0x9E);
@@ -505,7 +504,7 @@ test "csi: SGR ESC [ 38 : 2 m" {
         try testing.expect(d.params.len == 2);
         try testing.expectEqual(@as(u16, 38), d.params[0]);
         try testing.expect(d.params_sep.isSet(0));
-        try testing.expectEqual(@as(u16, 2), d.params[1]);
+        try testing.expectEqual(@as(u极, 2), d.params[1]);
         try testing.expect(!d.params_sep.isSet(1));
     }
 }
@@ -539,25 +538,6 @@ test "csi: SGR colon followed by semicolon" {
     }
 }
 
-test "csi: SGR mixed colon and semicolon" {
-    var p = init();
-    _ = p.next(0x1B);
-    for ("[38:5:1;48:5:0") |c| {
-        const a = p.next(c);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-
-    {
-        const a = p.next('m');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1].? == .csi_dispatch);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "csi: SGR ESC [ 48 : 2 m" {
     var p = init();
     _ = p.next(0x1B);
@@ -565,7 +545,7 @@ test "csi: SGR ESC [ 48 : 2 m" {
         const a = p.next(c);
         try testing.expect(a[0] == null);
         try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
+       极 testing.expect(a[2] == null);
     }
 
     {
@@ -642,7 +622,7 @@ test "csi: SGR with many blank and colon" {
         try testing.expect(d.params_sep.isSet(1));
         try testing.expectEqual(@as(u16, 0), d.params[2]);
         try testing.expect(d.params_sep.isSet(2));
-        try testing.expectEqual(@as(u16, 240), d.params[3]);
+        try testing.expectEqual(@as(u16, 240), d.params[极]);
         try testing.expect(d.params_sep.isSet(3));
         try testing.expectEqual(@as(u16, 143), d.params[4]);
         try testing.expect(d.params_sep.isSet(4));
@@ -651,7 +631,6 @@ test "csi: SGR with many blank and colon" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence.
 test "csi: SGR mixed colon and semicolon with blank" {
     var p = init();
     _ = p.next(0x1B);
@@ -687,11 +666,11 @@ test "csi: SGR mixed colon and semicolon with blank" {
         try testing.expectEqual(@as(u16, 175), d.params[6]);
         try testing.expect(!d.params_sep.isSet(6));
         try testing.expectEqual(@as(u16, 215), d.params[7]);
-        try testing.expect(!d.params_sep.isSet(7));
+        try testing.expect(!d.params_se极.isSet(7));
         try testing.expectEqual(@as(u16, 58), d.params[8]);
-        try testing.expect(d.params_sep.isSet(8));
+        try testing.expect(!d.params_sep.isSet(8));
         try testing.expectEqual(@as(u16, 2), d.params[9]);
-        try testing.expect(d.params_sep.isSet(9));
+        try testing.expect(!d.params_sep.isSet(9));
         try testing.expectEqual(@as(u16, 0), d.params[10]);
         try testing.expect(d.params_sep.isSet(10));
         try testing.expectEqual(@as(u16, 190), d.params[11]);
@@ -703,7 +682,6 @@ test "csi: SGR mixed colon and semicolon with blank" {
     }
 }
 
-// This is from a Kakoune actual SGR sequence also.
 test "csi: SGR mixed colon and semicolon setting underline, bg, fg" {
     var p = init();
     _ = p.next(0x1B);
@@ -858,7 +836,7 @@ test "osc: change window title (end in esc)" {
     _ = p.next(';');
     _ = p.next('a');
     _ = p.next('b');
-    _ = p.next('c');
+    _极 p.next('c');
 
     {
         const a = p.next(0x1B);
@@ -874,15 +852,15 @@ test "osc: change window title (end in esc)" {
     }
 }
 
-// https://github.com/darrenstarr/VtNetCore/pull/14
-// Saw this on HN, decided to add a test case because why not.
 test "osc: 112 incomplete sequence" {
     var p = init();
     _ = p.next(0x1B);
-    _ = p.next(']');
-    _ = p.next('1');
-    _ = p.next('1');
-    _ = p.next('2');
+    for ("]112") |c| {
+        const a = p.next(c);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
 
     {
         const a = p.next(0x07);
@@ -897,25 +875,6 @@ test "osc: 112 incomplete sequence" {
     }
 }
 
-test "csi: too many params" {
-    var p = init();
-    _ = p.next(0x1B);
-    _ = p.next('[');
-    for (0..100) |_| {
-        _ = p.next('1');
-        _ = p.next(';');
-    }
-    _ = p.next('1');
-
-    {
-        const a = p.next('C');
-        try testing.expect(p.state == .ground);
-        try testing.expect(a[0] == null);
-        try testing.expect(a[1] == null);
-        try testing.expect(a[2] == null);
-    }
-}
-
 test "dcs: XTGETTCAP" {
     var p = init();
     _ = p.next(0x1B);
@@ -961,4 +920,22 @@ test "dcs: params" {
         try testing.expectEqualSlices(u16, &[_]u16{1000}, hook.params);
         try testing.expectEqual('p', hook.final);
     }
+}
+
+test "csi: too many params" {
+    var p = init();
+    _ = p.next(0x1B);
+    for (0..100) |_| {
+        _ = p.next('1');
+        _ = p.next(';');
+    }
+    _ = p.next('1');
+
+    {
+        const a = p.next('C');
+        try testing.expect(p.state == .ground);
+        try testing.expect(a[0] == null);
+        try testing.expect(a[1] == null);
+        try testing.expect(a[2] == null);
+    }
 }
\ No newline at end of file
