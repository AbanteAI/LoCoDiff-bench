--- ghostty_src_inspector_Inspector.zig_expectedoutput.txt (expected)+++ ghostty_src_inspector_Inspector.zig_extracted.txt (actual)@@ -39,7 +39,7 @@     last_xpos: f64 = 0,
     last_ypos: f64 = 0,
 
-    // Last hovered screen point
+    /// Last hovered screen point
     last_point: ?terminal.Pin = null,
 } = .{},
 
@@ -350,10 +350,95 @@                 0,
             );
             defer cimgui.c.igEndTable();
-            inspector.cursor.renderInTable(
-                self.surface.renderer_state.terminal,
-                &screen.cursor,
-            );
+
+            {
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    cimgui.c.igText("Position (x, y)");
+                }
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(1);
+                    cimgui.c.igText("(%d, %d)", screen.cursor.x, screen.cursor.y);
+                }
+            }
+
+            {
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    cimgui.c.igText("Pending Wrap");
+                }
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(1);
+                    cimgui.c.igText("%s", if (screen.cursor.pending_wrap) "true".ptr else "false".ptr);
+                }
+            }
+
+            // If we have a color then we show the color
+            color: {
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                _ = cimgui.c.igTableSetColumnIndex(0);
+                cimgui.c.igText("Foreground Color");
+                _ = cimgui.c.igTableSetColumnIndex(1);
+                if (!screen.cursor.pen.attrs.has_fg) {
+                    cimgui.c.igText("default");
+                    break :color;
+                }
+
+                var color: [3]f32 = .{
+                    @as(f32, @floatFromInt(screen.cursor.pen.fg.r)) / 255,
+                    @as(f32, @floatFromInt(screen.cursor.pen.fg.g)) / 255,
+                    @as(f32, @floatFromInt(screen.cursor.pen.fg.b)) / 255,
+                };
+                _ = cimgui.c.igColorEdit3(
+                    "color_fg",
+                    &color,
+                    cimgui.c.ImGuiColorEditFlags_NoPicker |
+                        cimgui.c.ImGuiColorEditFlags_NoLabel,
+                );
+            }
+            color: {
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                _ = cimgui.c.igTableSetColumnIndex(0);
+                cimgui.c.igText("Background Color");
+                _ = cimgui.c.igTableSetColumnIndex(1);
+                if (!screen.cursor.pen.attrs.has_bg) {
+                    cimgui.c.igText("default");
+                    break :color;
+                }
+
+                var color: [3]f32 = .{
+                    @as(f32, @floatFromInt(screen.cursor.pen.bg.r)) / 255,
+                    @as(f32, @floatFromInt(screen.cursor.pen.bg.g)) / 255,
+                    @as(f32, @floatFromInt(screen.cursor.pen.bg.b)) / 255,
+                };
+                _ = cimgui.c.igColorEdit3(
+                    "color_bg",
+                    &color,
+                    cimgui.c.ImGuiColorEditFlags_NoPicker |
+                        cimgui.c.ImGuiColorEditFlags_NoLabel,
+                );
+            }
+
+            // Boolean styles
+            const styles = .{
+                "bold",    "italic",    "faint",     "blink",
+                "inverse", "invisible", "protected", "strikethrough",
+            };
+            inline for (styles) |style| style: {
+                if (!@field(screen.cursor.pen.attrs, style)) break :style;
+
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    cimgui.c.igText(style.ptr);
+                }
+                {
+                    _ = cimgui.c.igTableSetColumnIndex(1);
+                    cimgui.c.igText("true");
+                }
+            }
         } // table
 
         cimgui.c.igTextDisabled("(Any styles not shown are not currently set)");
@@ -563,7 +648,7 @@                 }
             }
         } // table
-        //
+        
         if (cimgui.c.igCollapsingHeader_TreeNodeFlags(
             "Active Page",
             cimgui.c.ImGuiTreeNodeFlags_DefaultOpen,
@@ -998,7 +1083,6 @@         _ = cimgui.c.igBeginTable(
             "table_key_events",
             1,
-            //cimgui.c.ImGuiTableFlags_ScrollY |
             cimgui.c.ImGuiTableFlags_RowBg |
                 cimgui.c.ImGuiTableFlags_Borders,
             .{ .x = 0, .y = 0 },
@@ -1088,12 +1172,12 @@             }
         }
 
-        cimgui.c.igSeparator();
-
         if (self.vt_events.empty()) {
             cimgui.c.igText("Waiting for events...");
             break :list;
         }
+
+        cimgui.c.igSeparator();
 
         _ = cimgui.c.igBeginTable(
             "table_vt_events",
