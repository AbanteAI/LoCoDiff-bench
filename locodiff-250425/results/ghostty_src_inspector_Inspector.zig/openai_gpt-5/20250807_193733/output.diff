
index e43b28bfd..b8d4292be 100644
--- a/ghostty_src_inspector_Inspector.zig_expectedoutput.txt (expected):tmp/tmpb9wfb3yn_expected.txt	
+++ b/ghostty_src_inspector_Inspector.zig_extracted.txt (actual):tmp/tmpmz8q7hjq_actual.txt	
@@ -302,6 +302,10 @@ fn setupLayout(self: *Inspector, dock_id_main: cimgui.c.ImGuiID) void {
     cimgui.c.igDockBuilderFinish(dock_id_main);
 }
 
+fn bytesToKb(bytes: usize) usize {
+    return bytes / 1024;
+}
+
 fn renderScreenWindow(self: *Inspector) void {
     // Start our window. If we're collapsed we do nothing.
     defer cimgui.c.igEnd();
@@ -1079,8 +1083,8 @@ fn renderTermioWindow(self: *Inspector) void {
         if (!self.vt_events.empty()) {
             cimgui.c.igSameLine(0, cimgui.c.igGetStyle().*.ItemInnerSpacing.x);
             if (cimgui.c.igButton("Clear", .{ .x = 0, .y = 0 })) {
-                var it = self.vt_events.iterator(.forward);
-                while (it.next()) |v| v.deinit(self.surface.alloc);
+                var it2 = self.vt_events.iterator(.forward);
+                while (it2.next()) |v| v.deinit(self.surface.alloc);
                 self.vt_events.clear();
 
                 // We also reset the sequence number.
@@ -1134,18 +1138,18 @@ fn renderTermioWindow(self: *Inspector) void {
                     // If no event is selected, select the first/last event based on direction
                     if (self.selected_event_seq == null) {
                         if (!self.vt_events.empty()) {
-                            var it = self.vt_events.iterator(if (key_pressed == .up) .forward else .reverse);
-                            if (it.next()) |ev| {
+                            var it3 = self.vt_events.iterator(if (key_pressed == .up) .forward else .reverse);
+                            if (it3.next()) |ev| {
                                 self.selected_event_seq = @as(u32, @intCast(ev.seq));
                             }
                         }
                     } else {
                         // Find next/previous event based on current selection
-                        var it = self.vt_events.iterator(.reverse);
+                        var it3 = self.vt_events.iterator(.reverse);
                         switch (key_pressed) {
                             .down => {
                                 var found = false;
-                                while (it.next()) |ev| {
+                                while (it3.next()) |ev| {
                                     if (found) {
                                         self.selected_event_seq = @as(u32, @intCast(ev.seq));
                                         break;
@@ -1157,7 +1161,7 @@ fn renderTermioWindow(self: *Inspector) void {
                             },
                             .up => {
                                 var prev_ev: ?*const inspector.termio.VTEvent = null;
-                                while (it.next()) |ev| {
+                                while (it3.next()) |ev| {
                                     if (ev.seq == self.selected_event_seq.?) {
                                         if (prev_ev) |prev| {
                                             self.selected_event_seq = @as(u32, @intCast(prev.seq));
