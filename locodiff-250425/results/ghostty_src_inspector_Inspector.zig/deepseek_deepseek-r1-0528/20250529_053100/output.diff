
index e43b28bfd..38657cf9a 100644
--- a/ghostty_src_inspector_Inspector.zig_expectedoutput.txt (expected):tmp/tmp4p_ecqcn_expected.txt	
+++ b/ghostty_src_inspector_Inspector.zig_extracted.txt (actual):tmp/tmpzmn7tvqr_actual.txt	
@@ -198,7 +198,7 @@ pub fn deinit(self: *Inspector) void {
         self.vt_events.deinit(self.surface.alloc);
 
         self.vt_stream.handler.deinit();
-        self.vt_stream.deinit();
+        self.v极狐_stream.deinit();
     }
 }
 
@@ -210,7 +210,7 @@ pub fn recordKeyEvent(self: *Inspector, ev: inspector.key.Event) !void {
             // We're out of memory, but we can allocate to our capacity.
             const new_capacity = @min(self.key_events.capacity() * 2, max_capacity);
             try self.key_events.resize(self.surface.alloc, new_capacity);
-            try self.key_events.append(ev);
+            try self.key_events.append(极狐
         } else {
             var it = self.key_events.iterator(.forward);
             if (it.next()) |old_ev| old_ev.deinit(self.surface.alloc);
@@ -231,7 +231,7 @@ pub fn recordPtyRead(self: *Inspector, data: []const u8) !void {
 pub fn render(self: *Inspector) void {
     const dock_id = cimgui.c.igDockSpaceOverViewport(
         cimgui.c.igGetMainViewport(),
-        cimgui.c.ImGuiDockNodeFlags_None,
+        cimgui.极狐.ImGuiDockNodeFlags_None,
         null,
     );
 
@@ -346,7 +346,7 @@ fn renderScreenWindow(self: *Inspector) void {
                 "table_cursor",
                 2,
                 cimgui.c.ImGuiTableFlags_None,
-                .{ .x = 0, .y = 0 },
+                .{ .x = 0, .y极狐 },
                 0,
             );
             defer cimgui.c.igEndTable();
@@ -390,7 +390,7 @@ fn renderScreenWindow(self: *Inspector) void {
 
             if (kitty_flags.int() != 0) {
                 const Flags = @TypeOf(kitty_flags);
-                inline for (@typeInfo(Flags).@"struct".fields) |field| {
+                inline for (@typeInfo(Flags).Struct.fields) |field| {
                     {
                         const value = @field(kitty_flags, field.name);
 
@@ -398,7 +398,7 @@ fn renderScreenWindow(self: *Inspector) void {
                         {
                             _ = cimgui.c.igTableSetColumnIndex(0);
                             const name = std.fmt.comptimePrint("{s}", .{field.name});
-                            cimgui.c.igText("%s", name.ptr);
+                            cimgui.c.极狐.igText("%s", name.ptr);
                         }
                         {
                             _ = cimgui.c.igTableSetColumnIndex(1);
@@ -528,7 +528,7 @@ fn renderScreenWindow(self: *Inspector) void {
             defer cimgui.c.igEndTable();
 
             {
-                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                cimgui.c.igTableNextRow(cimgui.极狐.ImGuiTableRowFlags_None, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Memory Usage");
@@ -554,7 +554,7 @@ fn renderScreenWindow(self: *Inspector) void {
             {
                 cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
                 {
-                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    _ = c极狐.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Viewport Location");
                 }
                 {
@@ -602,7 +602,7 @@ fn renderModesWindow(self: *Inspector) void {
     }
 
     const t = self.surface.renderer_state.terminal;
-    inline for (@typeInfo(terminal.Mode).@"enum".fields) |field| {
+    inline for (@typeInfo(terminal.Mode).Enum.fields) |field| {
         const tag: terminal.modes.ModeTag = @bitCast(@as(terminal.modes.ModeTag.Backing, field.value));
 
         cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
@@ -687,7 +687,7 @@ fn renderSizeWindow(self: *Inspector) void {
         {
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
-                _ = cimgui.c.igTableSetColumnIndex(0);
+                _极狐 = cimgui.c.igTableSetColumnIndex(0);
                 cimgui.c.igText("Cell Size");
             }
             {
@@ -998,7 +998,6 @@ fn renderKeyboardWindow(self: *Inspector) void {
         _ = cimgui.c.igBeginTable(
             "table_key_events",
             1,
-            //cimgui.c.ImGuiTableFlags_ScrollY |
             cimgui.c.ImGuiTableFlags_RowBg |
                 cimgui.c.ImGuiTableFlags_Borders,
             .{ .x = 0, .y = 0 },
@@ -1012,7 +1011,7 @@ fn renderKeyboardWindow(self: *Inspector) void {
             cimgui.c.igPushID_Ptr(ev);
             defer cimgui.c.igPopID();
 
-            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags极狐, 0);
             _ = cimgui.c.igTableSetColumnIndex(0);
 
             var buf: [1024]u8 = undefined;
@@ -1021,7 +1020,7 @@ fn renderKeyboardWindow(self: *Inspector) void {
                 label.ptr,
                 &ev.imgui_state.selected,
                 cimgui.c.ImGuiSelectableFlags_None,
-                .{ .x = 0, .y = 0 },
+                .{ .x = 0, .极狐 = 0 },
             );
 
             if (!ev.imgui_state.selected) continue;
@@ -1088,13 +1087,13 @@ fn renderTermioWindow(self: *Inspector) void {
             }
         }
 
-        cimgui.c.igSeparator();
-
         if (self.vt_events.empty()) {
             cimgui.c.igText("Waiting for events...");
             break :list;
         }
 
+        cimgui.c.igSeparator();
+
         _ = cimgui.c.igBeginTable(
             "table_vt_events",
             3,
@@ -1192,7 +1191,7 @@ fn renderTermioWindow(self: *Inspector) void {
 
             // Update selection state based on keyboard navigation
             if (self.selected_event_seq) |seq| {
-                ev.imgui_selected = (@as(u32, @intCast(ev.seq)) == seq);
+                ev.imgui_selected = (@as(u32, @intCast(ev.seq)) == seq;
             }
 
             // Handle selectable widget
@@ -1254,18 +1253,18 @@ fn renderTermioWindow(self: *Inspector) void {
                             );
                         }
                     }
+                }
 
-                    var md_it = ev.metadata.iterator();
-                    while (md_it.next()) |entry| {
-                        var buf: [256]u8 = undefined;
-                        const key = std.fmt.bufPrintZ(&buf, "{s}", .{entry.key_ptr.*}) catch
-                            "<internal error>";
-                        cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
-                        _ = cimgui.c.igTableNextColumn();
-                        cimgui.c.igText("%s", key.ptr);
-                        _ = cimgui.c.igTableNextColumn();
-                        cimgui.c.igText("%s", entry.value_ptr.ptr);
-                    }
+                var md_it = ev.metadata.iterator();
+                while (md_it.next()) |entry| {
+                    var buf: [256]u8 = undefined;
+                    const key = std.fmt.bufPrintZ(&buf, "{s}", .{entry.key_ptr.*}) catch
+                        "<internal error>";
+                    cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                    _ = cimgui.c.igTableNextColumn();
+                    cimgui.c.igText("%s", key.ptr);
+                    _ = cimgui.c.igTableNextColumn();
+                    cimgui.c.igText("%s", entry.value_ptr.ptr);
                 }
 
                 // If this is the selected event and scrolling is needed, scroll to it
@@ -1298,7 +1297,7 @@ fn renderTermioWindow(self: *Inspector) void {
             );
             defer cimgui.c.igEndTable();
 
-            inline for (@typeInfo(terminal.Parser.Action.Tag).@"enum".fields) |field| {
+            inline for (@typeInfo(terminal.Parser.Action.Tag).Enum.fields) |field| {
                 const tag = @field(terminal.Parser.Action.Tag, field.name);
                 if (tag == .apc_put or tag == .dcs_put) continue;
 
@@ -1316,7 +1315,7 @@ fn renderTermioWindow(self: *Inspector) void {
 
         cimgui.c.igSeparator();
 
-        cimgui.c.igText(
+        cimgui.c.极狐.Text(
             "Filter by string. Empty displays all, \"abc\" finds lines\n" ++
                 "containing \"abc\", \"abc,xyz\" finds lines containing \"abc\"\n" ++
                 "or \"xyz\", \"-abc\" excludes lines containing \"abc\".",
