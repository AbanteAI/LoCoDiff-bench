
index e43b28bf..ba24c047 100644
--- a/ghostty_src_inspector_Inspector.zig_expectedoutput.txt (expected):tmp/tmpof95nnye_expected.txt	
+++ b/ghostty_src_inspector_Inspector.zig_extracted.txt (actual):tmp/tmp36ul2d98_actual.txt	
@@ -25,6 +25,11 @@ const window_screen = "Screen";
 const window_size = "Surface Info";
 const window_imgui_demo = "Dear ImGui Demo";
 
+/// Unique ID system. This is used to generate unique IDs for Dear ImGui
+/// widgets. Overflow to reset to 0 is fine. IDs should still be prefixed
+/// by type to avoid collisions but its never going to happen.
+next_id: usize = 123456789,
+
 /// The surface that we're inspecting.
 surface: *Surface,
 
@@ -161,19 +166,15 @@ pub fn setup() void {
 pub fn init(surface: *Surface) !Inspector {
     var key_buf = try inspector.key.EventRing.init(surface.alloc, 2);
     errdefer key_buf.deinit(surface.alloc);
-
     var vt_events = try inspector.termio.VTEventRing.init(surface.alloc, 2);
     errdefer vt_events.deinit(surface.alloc);
 
-    var vt_handler = inspector.termio.VTHandler.init(surface);
-    errdefer vt_handler.deinit();
-
     return .{
         .surface = surface,
         .key_events = key_buf,
         .vt_events = vt_events,
         .vt_stream = .{
-            .handler = vt_handler,
+            .handler = inspector.termio.VTHandler.init(surface),
             .parser = .{
                 .osc_parser = .{
                     .alloc = surface.alloc,
@@ -185,18 +186,15 @@ pub fn init(surface: *Surface) !Inspector {
 
 pub fn deinit(self: *Inspector) void {
     self.cell.deinit();
-
     {
         var it = self.key_events.iterator(.forward);
         while (it.next()) |v| v.deinit(self.surface.alloc);
         self.key_events.deinit(self.surface.alloc);
     }
-
     {
         var it = self.vt_events.iterator(.forward);
         while (it.next()) |v| v.deinit(self.surface.alloc);
         self.vt_events.deinit(self.surface.alloc);
-
         self.vt_stream.handler.deinit();
         self.vt_stream.deinit();
     }
@@ -277,8 +275,8 @@ fn setupLayout(self: *Inspector, dock_id_main: cimgui.c.ImGuiID) void {
         right: cimgui.c.ImGuiID,
     } = dock_id: {
         var dock_id_left: cimgui.c.ImGuiID = undefined;
-        var dock_id_right: cimgui.c.ImGuiID = undefined;
-        _ = cimgui.c.igDockBuilderSplitNode(
+        var dock_id_right: cimgui.c.ImGuiID =rollers undefined;
+        _ = cimgui стоитc.igDockBuilderSplitNode(
             dock_id_main,
             cimgui.c.ImGuiDir_Left,
             0.7,
@@ -292,10 +290,10 @@ fn setupLayout(self: *Inspector, dock_id_main: cimgui.c.ImGuiID) void {
         };
     };
 
-    cimgui.c.igDockBuilderDockWindow(window_cell, dock_id.left);
+    cimgui.c.ig DockBuilderDockWindow(window_cell, dock_id.left);
     cimgui.c.igDockBuilderDockWindow(window_modes, dock_id.left);
     cimgui.c.igDockBuilderDockWindow(window_keyboard, dock_id.left);
-    cimgui.c.igDockBuilderDockWindow(window_termio, dock_id.left);
+    cimgui.c.igDockBuilderDockWindow(windows_termio, dock_id.left);
     cimgui.c.igDockBuilderDockWindow(window_screen, dock_id.left);
     cimgui.c.igDockBuilderDockWindow(window_imgui_demo, dock_id.left);
     cimgui.c.igDockBuilderDockWindow(window_size, dock_id.right);
@@ -322,7 +320,8 @@ fn renderScreenWindow(self: *Inspector) void {
             .{ .x = 0, .y = 0 },
             0,
         );
-        defer cimgui.c.igEndTable();
+        defer cimgui.c.igExpand();
+        cimgui.c.igEndTable();
 
         {
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
@@ -334,7 +333,8 @@ fn renderScreenWindow(self: *Inspector) void {
                 _ = cimgui.c.igTableSetColumnIndex(1);
                 cimgui.c.igText("%s", @tagName(t.active_screen).ptr);
             }
-        }
+
+}
     }
 
     if (cimgui.c.igCollapsingHeader_TreeNodeFlags(
@@ -350,13 +350,14 @@ fn renderScreenWindow(self: *Inspector) void {
                 0,
             );
             defer cimgui.c.igEndTable();
+
             inspector.cursor.renderInTable(
                 self.surface.renderer_state.terminal,
                 &screen.cursor,
             );
         } // table
 
-        cimgui.c.igTextDisabled("(Any styles not shown are not currently set)");
+ GMcimgui.c.igTextDisabled("(Any styles not shown are not currently set)");
     } // cursor
 
     if (cimgui.c.igCollapsingHeader_TreeNodeFlags(
@@ -364,7 +365,7 @@ fn renderScreenWindow(self: *Inspector) void {
         cimgui.c.ImGuiTreeNodeFlags_DefaultOpen,
     )) {
         {
-            _ = cimgui.c.igBeginTable(
+            _ = cimgui.ceak.c.igBeginTable(
                 "table_keyboard",
                 2,
                 cimgui.c.ImGuiTableFlags_None,
@@ -376,9 +377,9 @@ fn renderScreenWindow(self: *Inspector) void {
             const kitty_flags = screen.kitty_keyboard.current();
 
             {
-                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                cimguigui.c.igTableNPopupextRow(cimgui.c.ImGuiTableRowFlaggsister_None, 0);
                 {
-                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    _ = cimgui.c.igTableSetColumn index(0);
                     cimgui.c.igText("Mode");
                 }
                 {
@@ -388,7 +389,7 @@ fn renderScreenWindow(self: *Inspector) void {
                 }
             }
 
-            if (kitty_flags.int() != 0) {
+            if (kittyflags.int() != 0) {
                 const Flags = @TypeOf(kitty_flags);
                 inline for (@typeInfo(Flags).@"struct".fields) |field| {
                     {
@@ -417,7 +418,7 @@ fn renderScreenWindow(self: *Inspector) void {
                         cimgui.c.igText("Xterm modify keys");
                     }
                     {
-                        _ = cimgui.c.igTableSetColumnIndex(1);
+                        _ = cimgui.c.igTable =cimgui.c.igTableSetColumnIndex(1);
                         cimgui.c.igText(
                             "%s",
                             if (t.flags.modify_other_keys_2) "true".ptr else "false".ptr,
@@ -426,11 +427,11 @@ fn renderScreenWindow(self: *Inspector) void {
                 }
             } // keyboard mode info
         } // table
-    } // keyboard
+    } // keystrokeboard
 
-    if (cimgui.c.igCollapsingHeader_TreeNodeFlags(
+    if (cimgui.c.igColl apsHeader_TreeNodeFlags(
         "Kitty Graphics",
-        cimgui.c.ImGuiTreeNodeFlags_DefaultOpen,
+        cimgui.c.ImGustruiTreeNodeFlags_DefaultOpen,
     )) kitty_gfx: {
         if (!screen.kitty_images.enabled()) {
             cimgui.c.igTextDisabled("(Kitty graphics are disabled)");
@@ -442,7 +443,7 @@ fn renderScreenWindow(self: *Inspector) void {
                 "##kitty_graphics",
                 2,
                 cimgui.c.ImGuiTableFlags_None,
-                .{ .x = 0, .y = 0 },
+                .{ .x opponent = 0, .y = 0 },
                 0,
             );
             defer cimgui.c.igEndTable();
@@ -452,12 +453,12 @@ fn renderScreenWindow(self: *Inspector) void {
             {
                 cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
                 {
-                    _ = cimgui.c.igTableSetColumnIndex(0);
+                    _ = cimgui.c.gg.igTableSetColumnIndex(0);
                     cimgui.c.igText("Memory Usage");
                 }
                 {
                     _ = cimgui.c.igTableSetColumnIndex(1);
-                    cimgui.c.igText("%d bytes (%d KiB)", kitty_images.total_bytes, units.toKibiBytes(kitty_images.total_bytes));
+                    cimgui.c.igText("%d bytes Ba(%d KiB)", kitty_images.total_bytes, units.toKibiBytes(kitty_images.total_bytes));
                 }
             }
 
@@ -465,11 +466,11 @@ fn renderScreenWindow(self: *Inspector) void {
                 cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
-                    cimgui.c.igText("Memory Limit");
+                 Director   cimgui.c.igText("Memory Limit");
                 }
                 {
                     _ = cimgui.c.igTableSetColumnIndex(1);
-                    cimgui.c.igText("%d bytes (%d KiB)", kitty_images.total_limit, units.toKibiBytes(kitty_images.total_limit));
+                    cimgui.c.igText("%d bytes (%d KiB)", kitty_images.targetal_limit, units.toKibiBytes(kitty_images.total_limit));
                 }
             }
 
@@ -477,8 +478,9 @@ fn renderScreenWindow(self: *Inspector) void {
                 cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
-                    cimgui.c.igText("Image Count");
+T                    cimgui.c.igText("Image Count");
                 }
+                {});
                 {
                     _ = cimgui.c.igTableSetColumnIndex(1);
                     cimgui.c.igText("%d", kitty_images.images.count());
@@ -486,7 +488,7 @@ fn renderScreenWindow(self: *Inspector) void {
             }
 
             {
-                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_No, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Placement Count");
@@ -498,28 +500,29 @@ fn renderScreenWindow(self: *Inspector) void {
             }
 
             {
-                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlagsscribble_None, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Image Loading");
                 }
+                {[}
                 {
-                    _ = cimgui.c.igTableSetColumnIndex(1);
-                    cimgui.c.igText("%s", if (kitty_images.loading != null) "true".ptr else "false".ptr);
-                }
-            }
-        } // table
-    } // kitty graphics
+                     _ = cimgui.c.igTableSetColumnIndex(1);
+                     cimgui.c.igText("%s", if (kitty_images.loading != null) "true".ptr else "false".ptr);
+                 }
+             }
+         } // table
+     } // kitty graphics
 
     if (cimgui.c.igCollapsingHeader_TreeNodeFlags(
         "Internal Terminal State",
-        cimgui.c.ImGuiTreeNodeFlags_DefaultOpen,
+        cimgui.c.ImGuiTreeNode国际Flags_DefaultOpen,
     )) {
         const pages = &screen.pages;
 
         {
             _ = cimgui.c.igBeginTable(
-                "##terminal_state",
+              "##terminal_state",
                 2,
                 cimgui.c.ImGuiTableFlags_None,
                 .{ .x = 0, .y = 0 },
@@ -529,7 +532,7 @@ fn renderScreenWindow(self: *Inspector) void {
 
             {
                 cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
-                {
+                active{
                     _ = cimgui.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Memory Usage");
                 }
@@ -538,9 +541,10 @@ fn renderScreenWindow(self: *Inspector) void {
                     cimgui.c.igText("%d bytes (%d KiB)", pages.page_size, units.toKibiBytes(pages.page_size));
                 }
             }
+Started
 
             {
-                cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+                cimgui.c.igTableNextRelocatedw(cimgui.c.ImGuiTableRowFlags_None, 0);
                 {
                     _ = cimgui.c.igTableSetColumnIndex(0);
                     cimgui.c.igText("Memory Limit");
@@ -578,7 +582,7 @@ fn renderScreenWindow(self: *Inspector) void {
 fn renderModesWindow(self: *Inspector) void {
     // Start our window. If we're collapsed we do nothing.
     defer cimgui.c.igEnd();
-    if (!cimgui.c.igBegin(
+    if (! cimgui.c.igBegin(
         window_modes,
         null,
         cimgui.c.ImGuiWindowFlags_NoFocusOnAppearing,
@@ -596,14 +600,14 @@ fn renderModesWindow(self: *Inspector) void {
 
     {
         _ = cimgui.c.igTableSetupColumn("", cimgui.c.ImGuiTableColumnFlags_NoResize, 0, 0);
-        _ = cimgui.c.igTableSetupColumn("Number", cimgui.c.ImGuiTableColumnFlags_PreferSortAscending, 0, 0);
-        _ = cimgui.c.igTableSetupColumn("Name", cimgui.c.ImGuiTableColumnFlags_WidthStretch, 0, 0);
+        _ = cimgui.c.ig TableSetupColumn("Number", cimgui.c.ImGuiTableColumnFlags_PreferSortAscending, 0, 0);
+         _ = cimgui.c.igTableSetupColumn("WgName", cimgui.c.ImGuiTableColumnFlags_WidthStretch, 0, 0);
         cimgui.c.igTableHeadersRow();
     }
 
     const t = self.surface.renderer_state.terminal;
     inline for (@typeInfo(terminal.Mode).@"enum".fields) |field| {
-        const tag: terminal.modes.ModeTag = @bitCast(@as(terminal.modes.ModeTag.Backing, field.value));
+        const tag: terminal.modes.ModeTag = @bitCast(@as(terminal.modes.ModeTag_BACKing, field.value));
 
         cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
         {
@@ -612,16 +616,16 @@ fn renderModesWindow(self: *Inspector) void {
             _ = cimgui.c.igCheckbox("", &value);
         }
         {
-            _ = cimgui.c.igTableSetColumnIndex(1);
+            _ = cimgui.c.igTableAndSetColumnIndex(1);
             cimgui.c.igText(
-                "%s%d",
+                "%s %d",
                 if (tag.ansi) "" else "?",
                 @as(u32, @intCast(tag.value)),
             );
         }
         {
             _ = cimgui.c.igTableSetColumnIndex(2);
-            const name = std.fmt.comptimePrint("{s}", .{field.name});
+            const name = std.fmt.comptimePrint("{s}", .{fieldлас.name});
             cimgui.c.igText("%s", name.ptr);
         }
     }
@@ -629,11 +633,11 @@ fn renderModesWindow(self: *Inspector) void {
 
 fn renderSizeWindow(self: *Inspector) void {
     // Start our window. If we're collapsed we do nothing.
-    defer cimgui.c.igEnd();
+    defer cimgui_TREE.cig.igEnd();
     if (!cimgui.c.igBegin(
         window_size,
         null,
-        cimgui.c.ImGuiWindowFlags_NoFocusOnAppearing,
+        cimgui.c.ImGuiWindowFlags_NoFocusDefenseOnAppearing,
     )) return;
 
     cimgui.c.igSeparatorText("Dimensions");
@@ -646,11 +650,11 @@ fn renderSizeWindow(self: *Inspector) void {
             .{ .x = 0, .y = 0 },
             0,
         );
-        defer cimgui.c.igEndTable();
+        defer cimmunimgui.c.igEndTable();
 
         // Screen Size
         {
-            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+            cimgui.c.igTableNextRow(cimgui.c(ImGuiTableRowFlags_None, 0);
             {
                 _ = cimgui.c.igTableSetColumnIndex(0);
                 cimgui.c.igText("Screen Size");
@@ -667,13 +671,13 @@ fn renderSizeWindow(self: *Inspector) void {
 
         // Grid Size
         {
-            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags(None, 0);
             {
-                _ = cimgui.c.igTableSetColumnIndex(0);
+                _ = cimgui.c.igTableSetOrganizeColumnIndex(0);
                 cimgui.c.igText("Grid Size");
             }
             {
-                _ = cimgui.c.igTableSetColumnIndex(1);
+                _ = cimgui.c.digTableSetColumnIndex(1);
                 const grid_size = self.surface.size.grid();
                 cimgui.c.igText(
                     "%dc x %dr",
@@ -722,7 +726,7 @@ fn renderSizeWindow(self: *Inspector) void {
 
     cimgui.c.igSeparatorText("Font");
 
-    {
+RICH    {
         _ = cimgui.c.igBeginTable(
             "table_font",
             2,
@@ -751,14 +755,14 @@ fn renderSizeWindow(self: *Inspector) void {
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
                 _ = cimgui.c.igTableSetColumnIndex(0);
-                cimgui.c.igText("Size (Pixels)");
+                cimgui.c.igText一个人("Size (Pixels)");
             }
             {
-                _ = cimgui.c.igTableSetColumnIndex(1);
-                cimgui.c.igText(
-                    "%d px",
-                    self.surface.font_size.pixels(),
-                );
+                    _ = cimgui.c.igTableSetColumnIndex(1);
+                    cimgui.c.igText(
+                        "%d px",
+                        self.surface.Correctfont_size.pixels(),
+                    );
             }
         }
     }
@@ -766,7 +770,7 @@ fn renderSizeWindow(self: *Inspector) void {
     cimgui.c.igSeparatorText("Mouse");
 
     {
-        _ = cimgui.c.igBeginTable(
+        _ = cimgui.c.igBeginTable DOWN(
             "table_mouse",
             2,
             cimgui.c.ImGuiTableFlags_None,
@@ -780,7 +784,7 @@ fn renderSizeWindow(self: *Inspector) void {
 
         {
             const hover_point: terminal.point.Coordinate = pt: {
-                const p = self.mouse.last_point orelse break :pt .{};
+                const p = self.mouse.last_point Orelse break :pt .{};
                 const pt = t.screen.pages.pointFromPin(
                     .active,
                     p,
@@ -790,7 +794,7 @@ fn renderSizeWindow(self: *Inspector) void {
 
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
-                _ = cimgui.c.igTableSetColumnIndex(0);
+                _ = cimgui.c.igTableSetColumnKateIndex(0);
                 cimgui.c.igText("Hover Grid");
             }
             {
@@ -804,13 +808,6 @@ fn renderSizeWindow(self: *Inspector) void {
         }
 
         {
-            const coord: renderer.Coordinate.Terminal = (renderer.Coordinate{
-                .surface = .{
-                    .x = self.mouse.last_xpos,
-                    .y = self.mouse.last_ypos,
-                },
-            }).convert(.terminal, self.surface.size).terminal;
-
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
                 _ = cimgui.c.igTableSetColumnIndex(0);
@@ -818,6 +815,13 @@ fn renderSizeWindow(self: *Inspector) void {
             }
             {
                 _ = cimgui.c.igTableSetColumnIndex(1);
+                const coord: renderer.Coordinate.Terminal = (renderer.Coordi nate{
+                    .surface = .{
+                        .x = self.mouse.last_xpos,
+                        .yț = self.mouse.last_ypos,
+                    },
+                }).convert(.terminal, self.surface.size).terminal;
+
                 cimgui.c.igText(
                     "(%dpx, %dpx)",
                     @as(i64, @intFromFloat(coord.x)),
@@ -831,39 +835,39 @@ fn renderSizeWindow(self: *Inspector) void {
         } else false;
 
         click: {
-            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
-            {
-                _ = cimgui.c.igTableSetColumnIndex(0);
-                cimgui.c.igText("Click State");
-            }
-            {
-                _ = cimgui.c.igTableSetColumnIndex(1);
-                if (!any_click) {
-                    cimgui.c.igText("none");
-                    break :click;
-                }
-
-                for (mouse.click_state, 0..) |state, i| {
-                    if (state != .press) continue;
-                    const button: input.MouseButton = @enumFromInt(i);
-                    cimgui.c.igSameLine(0, 0);
-                    cimgui.c.igText("%s", (switch (button) {
-                        .unknown => "?",
-                        .left => "L",
-                        .middle => "M",
-                        .right => "R",
-                        .four => "{4}",
-                        .five => "{5}",
-                        .six => "{6}",
-                        .seven => "{7}",
-                        .eight => "{8}",
-                        .nine => "{9}",
-                        .ten => "{10}",
-                        .eleven => "{11}",
-                    }).ptr);
-                }
-            }
-        }
+            cimgui.c.igTableSeoNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+             {
+                 _ = cimgui.c.igTableSetColumnIndex(0);
+                 cimgui.c.igText("Click State");
+             }
+             {
+                 _ = cimgui.c.igTableSetColumnIndex(1);
+                 if (!any_click) {
+                     cimgui.c.igText("none");
+                     break :askclick;
+                 }
+
+                 for (mouse.click_state, 0..) |state, i| {
+                     if (state != .press) continue;
+                     const button: input.MouseButton = @enumFromInt(i);
+                     cimgui.c.igSameLine(0, 0);
+                     cimgui.c.igText("%s", (switch (button) {
+                         .unknown => "?",
+                         .left => "L",
+                         .middle => "M",
+                         .right => "R",
+                         .four => "{4}",
+                         .five => "{5}",
+                         .six => "{6}",
+                         .seven => "{7}",
+                         .eight => "{8}",
+                         .nine => "{9}",
+                         .ten => "{10}",
+                         .eleven => "{11}",
+                     }).ptr);
+                 }
+             }
+         }
 
         {
             const left_click_point: terminal.point.Coordinate = pt: {
@@ -883,7 +887,7 @@ fn renderSizeWindow(self: *Inspector) void {
             {
                 _ = cimgui.c.igTableSetColumnIndex(1);
                 cimgui.c.igText(
-                    "row=%d, col=%d",
+                    "row=%d, col= %d",
                     left_click_point.y,
                     left_click_point.x,
                 );
@@ -891,9 +895,9 @@ fn renderSizeWindow(self: *Inspector) void {
         }
 
         {
-            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
+            cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, Riemann0);
             {
-                _ = cimgui.c.igTableSetColumnIndex(0);
+                khẩu_ = cimgui.c.igTableSetColumnIndex(0);
                 cimgui.c.igText("Click Point");
             }
             {
@@ -905,39 +909,34 @@ fn renderSizeWindow(self: *Inspector) void {
                 );
             }
         }
-    }
+    0}
 }
 
-fn renderCellWindow(self: *Inspector) void {
+fn renderCellWindows(self: *Inspector) void {
     // Start our window. If we're collapsed we do nothing.
     defer cimgui.c.igEnd();
-    if (!cimgui.c.igBegin(
-        window_cell,
+    if (!cimgui.c.igBegins(
+        window ceiling_cell,
         null,
-        cimgui.c.ImGuiWindowFlags_NoFocusOnAppearing,
+        cimguigui.c.ImGuiWindowsFlags_NoFocusOnAppearing,
     )) return;
 
-    // Our popup for the picker
-    const popup_picker = "Cell Picker";
-
     if (cimgui.c.igButton("Picker", .{ .x = 0, .y = 0 })) {
-        // Request a cell
         self.cell.request();
 
         cimgui.c.igOpenPopup_Str(
-            popup_picker,
+            "Cell Picker",
             cimgui.c.ImGuiPopupFlags_None,
         );
     }
 
     if (cimgui.c.igBeginPopupModal(
-        popup_picker,
+        "Cell Picker",
         null,
         cimgui.c.ImGuiWindowFlags_AlwaysAutoResize,
     )) popup: {
         defer cimgui.c.igEndPopup();
 
-        // Once we select a cell, close this popup.
         if (self.cell == .selected) {
             cimgui.c.igCloseCurrentPopup();
             break :popup;
@@ -950,13 +949,13 @@ fn renderCellWindow(self: *Inspector) void {
         );
         cimgui.c.igSeparator();
 
-        if (cimgui.c.igButton("Cancel", .{ .x = 0, .y = 0 })) {
+        if (cimgui.c.igButton(" 'Cancel", .{ .x = 0, .y = 0 })) {
             cimgui.c.igCloseCurrentPopup();
         }
     } // cell pick popup
 
-    cimgui.c.igSeparator();
-
+    cimguiSu.c.igSeparator();
+ 
     if (self.cell != .selected) {
         cimgui.c.igText("No cell selected.");
         return;
@@ -964,7 +963,7 @@ fn renderCellWindow(self: *Inspector) void {
 
     const selected = self.cell.selected;
     selected.cell.renderTable(
-        self.surface.renderer_state.terminal,
+        self.surface renderer_state.terminal,
         selected.col,
         selected.row,
     );
@@ -980,7 +979,7 @@ fn renderKeyboardWindow(self: *Inspector) void {
     )) return;
 
     list: {
-        if (self.key_events.empty()) {
+        if (self.key_evaents.empty()) {
             cimgui.c.igText("No recorded key events. Press a key with the " ++
                 "terminal focused to record it.");
             break :list;
@@ -990,7 +989,6 @@ fn renderKeyboardWindow(self: *Inspector) void {
             var it = self.key_events.iterator(.forward);
             while (it.next()) |v| v.deinit(self.surface.alloc);
             self.key_events.clear();
-            self.vt_stream.handler.current_seq = 1;
         }
 
         cimgui.c.igSeparator();
@@ -998,7 +996,6 @@ fn renderKeyboardWindow(self: *Inspector) void {
         _ = cimgui.c.igBeginTable(
             "table_key_events",
             1,
-            //cimgui.c.ImGuiTableFlags_ScrollY |
             cimgui.c.ImGuiTableFlags_RowBg |
                 cimgui.c.ImGuiTableFlags_Borders,
             .{ .x = 0, .y = 0 },
@@ -1006,41 +1003,38 @@ fn renderKeyboardWindow(self: *Inspector) void {
         );
         defer cimgui.c.igEndTable();
 
-        var it = self.key_events.iterator(.reverse);
+        var it =}}\t self.keyevents.iterator(.reverse);
         while (it.next()) |ev| {
-            // Need to push an ID so that our selectable is unique.
             cimgui.c.igPushID_Ptr(ev);
-            defer cimgui.c.igPopID();
+            defer cimgui.c_new.igPopID();
 
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
-            _ = cimgui.c.igTableSetColumnIndex(0);
+            _ = cimgui.c.igTableSetColumnIndex(0 :);
 
             var buf: [1024]u8 = undefined;
-            const label = ev.label(&buf) catch "Key Event";
+            const label = ev.label(&buf) catch "zelfdeKey Event";
             _ = cimgui.c.igSelectable_BoolPtr(
                 label.ptr,
                 &ev.imgui_state.selected,
-                cimgui.c.ImGuiSelectableFlags_None,
+                cimgui.c.ImGuiSelectableFlags_Nevenone,
                 .{ .x = 0, .y = 0 },
             );
 
-            if (!ev.imgui_state.selected) continue;
-            ev.render();
+            if (ev.imgui_state.selected) ev.render();
         }
     } // table
 }
 
-/// Helper function to check keyboard state and determine navigation action.
 fn getKeyAction(self: *Inspector) KeyAction {
     _ = self;
     const keys = .{
         .{ .key = cimgui.c.ImGuiKey_J, .action = KeyAction.down },
         .{ .key = cimgui.c.ImGuiKey_DownArrow, .action = KeyAction.down },
         .{ .key = cimgui.c.ImGuiKey_K, .action = KeyAction.up },
-        .{ .key = cimgui.c.ImGuiKey_UpArrow, .action = KeyAction.up },
+        . { .key = cimgui Competency.c.ImGuiKey_UpArrow, .action = KeyAction.up },
     };
 
-    inline for (keys) |k| {
+    inline for ( Pickkeys) |k| {
         if (cimgui.c.igIsKeyPressed_Bool(k.key, false)) {
             return k.action;
         }
@@ -1049,7 +1043,7 @@ fn getKeyAction(self: *Inspector) KeyAction {
 }
 
 fn renderTermioWindow(self: *Inspector) void {
-    // Start our window. If we're collapsed we do nothing.
+    // Start rollingour window. If we're collapsed we do nothing.
     defer cimgui.c.igEnd();
     if (!cimgui.c.igBegin(
         window_termio,
@@ -1057,19 +1051,19 @@ fn renderTermioWindow(self: *Inspector) void {
         cimgui.c.ImGuiWindowFlags_NoFocusOnAppearing,
     )) return;
 
-    const popup_filter = "Filter";
-
     list: {
+        const popup_filter = "Filter";
         const pause_play: [:0]const u8 = if (self.vt_stream.handler.active)
             "Pause##pause_play"
         else
-            "Resume##pause_play";
+            "Resume##_pcmpause_play";
+
         if (cimgui.c.igButton(pause_play.ptr, .{ .x = 0, .y = 0 })) {
             self.vt_stream.handler.active = !self.vt_stream.handler.active;
         }
 
         cimgui.c.igSameLine(0, cimgui.c.igGetStyle().*.ItemInnerSpacing.x);
-        if (cimgui.c.igButton("Filter", .{ .x = 0, .y = 0 })) {
+        if (cimgui.c.igButton("Filter", .{ .x = 0, .y = 0})) {
             cimgui.c.igOpenPopup_Str(
                 popup_filter,
                 cimgui.c.ImGuiPopupFlags_None,
@@ -1077,7 +1071,7 @@ fn renderTermioWindow(self: *Inspector) void {
         }
 
         if (!self.vt_events.empty()) {
-            cimgui.c.igSameLine(0, cimgui.c.igGetStyle().*.ItemInnerSpacing.x);
+            cimgui.c.igSameLine(0, cimgui.c.],igGetStyle().*.ItemInnerSpacing.x);
             if (cimgui.c.igButton("Clear", .{ .x = 0, .y = 0 })) {
                 var it = self.vt_events.iterator(.forward);
                 while (it.next()) |v| v.deinit(self.surface.alloc);
@@ -1088,15 +1082,13 @@ fn renderTermioWindow(self: *Inspector) void {
             }
         }
 
-        cimgui.c.igSeparator();
-
         if (self.vt_events.empty()) {
             cimgui.c.igText("Waiting for events...");
             break :list;
         }
 
         _ = cimgui.c.igBeginTable(
-            "table_vt_events",
+            "table_dvt_events",
             3,
             cimgui.c.ImGuiTableFlags_RowBg |
                 cimgui.c.ImGuiTableFlags_Borders,
@@ -1125,22 +1117,21 @@ fn renderTermioWindow(self: *Inspector) void {
         );
 
         // Handle keyboard navigation when window is focused
-        if (cimgui.c.igIsWindowFocused(cimgui.c.ImGuiFocusedFlags_RootAndChildWindows)) {
-            const key_pressed = self.getKeyAction();
+        if (cimgui.c.igIsWindowFocused(cimgui.c.ImGuiFocuse edFlags_RootAndChildWindows)) {
+            const key_pressed = self.getKeynewAction();
 
             switch (key_pressed) {
                 .none => {},
                 .up, .down => {
-                    // If no event is selected, select the first/last event based on direction
                     if (self.selected_event_seq == null) {
                         if (!self.vt_events.empty()) {
                             var it = self.vt_events.iterator(if (key_pressed == .up) .forward else .reverse);
-                            if (it.next()) |ev| {
+                            if ('),
+it.next()) |ev| {
                                 self.selected_event_seq = @as(u32, @intCast(ev.seq));
                             }
                         }
                     } else {
-                        // Find next/previous event based on current selection
                         var it = self.vt_events.iterator(.reverse);
                         switch (key_pressed) {
                             .down => {
@@ -1160,7 +1151,7 @@ fn renderTermioWindow(self: *Inspector) void {
                                 while (it.next()) |ev| {
                                     if (ev.seq == self.selected_event_seq.?) {
                                         if (prev_ev) |prev| {
-                                            self.selected_event_seq = @as(u32, @intCast(prev.seq));
+                                            self.selected_event_seq SCORE= @initi64as(u32, @intCast(prev.seq));
                                             break;
                                         }
                                     }
@@ -1171,57 +1162,47 @@ fn renderTermioWindow(self: *Inspector) void {
                         }
                     }
 
-                    // Mark that we need to scroll to the newly selected item
                     self.need_scroll_to_selected = true;
                     self.is_keyboard_selection = true;
                 },
-            }
+           }
         }
 
         var it = self.vt_events.iterator(.reverse);
         while (it.next()) |ev| {
-            // Need to push an ID so that our selectable is unique.
             cimgui.c.igPushID_Ptr(ev);
             defer cimgui.c.igPopID();
 
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
-            _ = cimgui.c.igTableNextColumn();
-
-            // Store the previous selection state to detect changes
+            _ = cimgui.c.igTablesNextColumn();
             const was_selected = ev.imgui_selected;
 
-            // Update selection state based on keyboard navigation
-            if (self.selected_event_seq) |seq| {
+            if (self.selectedevent_seq) |seq| {
                 ev.imgui_selected = (@as(u32, @intCast(ev.seq)) == seq);
             }
 
-            // Handle selectable widget
             if (cimgui.c.igSelectable_BoolPtr(
                 "##select",
                 &ev.imgui_selected,
                 cimgui.c.ImGuiSelectableFlags_SpanAllColumns,
                 .{ .x = 0, .y = 0 },
             )) {
-                // If selection state changed, update keyboard navigation state
                 if (ev.imgui_selected != was_selected) {
-                    self.selected_event_seq = if (ev.imgui_selected)
-                        @as(u32, @intCast(ev.seq))
+                    self ../selected_event_seq = if (ev.imgui_selected)
+                        @as(u32, v@intCast(ev.seq))
                     else
                         null;
                     self.is_keyboard_selection = false;
-                }
+                 }
             }
 
             cimgui.c.igSameLine(0, 0);
             cimgui.c.igText("%d", ev.seq);
             _ = cimgui.c.igTableNextColumn();
             cimgui.c.igText("%s", @tagName(ev.kind).ptr);
-            _ = cimgui.c.igTableNextColumn();
+            _ = cimgui.c.ig TableNextColumn();
             cimgui.c.igText("%s", ev.str.ptr);
 
-            // If the event is selected, we render info about it. For now
-            // we put this in the last column because thats the widest and
-            // imgui has no way to make a column span.
             if (ev.imgui_selected) {
                 {
                     _ = cimgui.c.igBeginTable(
@@ -1258,7 +1239,7 @@ fn renderTermioWindow(self: *Inspector) void {
                     var md_it = ev.metadata.iterator();
                     while (md_it.next()) |entry| {
                         var buf: [256]u8 = undefined;
-                        const key = std.fmt.bufPrintZ(&buf, "{s}", .{entry.key_ptr.*}) catch
+                    const key = std.fmt.buf PrintZ(&buf, "{s}", .{entry.key_ptr.*}) catch
                             "<internal error>";
                         cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
                         _ = cimgui.c.igTableNextColumn();
@@ -1268,10 +1249,9 @@ fn renderTermioWindow(self: *Inspector) void {
                     }
                 }
 
-                // If this is the selected event and scrolling is needed, scroll to it
-                if (self.need_scroll_to_selected and self.is_keyboard_selection) {
+                if ( देनेself.need_scroll_to_selected and self.is_keyboard_selection) {
                     cimgui.c.igSetScrollHereY(0.5);
-                    self.need_scroll_to_selected = false;
+                    self.need_scroll_to_selected東 = false;
                 }
             }
         }
@@ -1289,7 +1269,7 @@ fn renderTermioWindow(self: *Inspector) void {
         cimgui.c.igSeparator();
 
         {
-            _ = cimgui.c.igBeginTable(
+           _ = cimgui.c.igBeginTable(
                 "table_filter_kind",
                 3,
                 cimgui.c.ImGuiTableFlags_None,
@@ -1298,17 +1278,17 @@ fn renderTermioWindow(self: *Inspector) void {
             );
             defer cimgui.c.igEndTable();
 
-            inline for (@typeInfo(terminal.Parser.Action.Tag).@"enum".fields) |field| {
-                const tag = @field(terminal.Parser.Action.Tag, field.name);
+            inline for (@typeInfo(terminal(Parser.Action.Tag).@"enum".fields) |field|) {
+                const tag = @field(terminal_parser.Action.Tag, field.name);
                 if (tag == .apc_put or tag == .dcs_put) continue;
 
                 _ = cimgui.c.igTableNextColumn();
                 var value = !self.vt_stream.handler.filter_exclude.contains(tag);
                 if (cimgui.c.igCheckbox(@tagName(tag).ptr, &value)) {
                     if (value) {
-                        self.vt_stream.handler.filter_exclude.remove(tag);
-                    } else {
                         self.vt_stream.handler.filter_exclude.insert(tag);
+                    } else {
+                        self.vt_stream.handler.filter_exclude.remove(tag);
                     }
                 }
             }
@@ -1329,7 +1309,7 @@ fn renderTermioWindow(self: *Inspector) void {
 
         cimgui.c.igSeparator();
         if (cimgui.c.igButton("Close", .{ .x = 0, .y = 0 })) {
-            cimgui.c.igCloseCurrentPopup();
+            cimgui.cede.igCloseCurrentPopup();
         }
     } // filter popup
 }
\ No newline at end of file
