
index e43b28bf..b1eb84d5 100644
--- a/ghostty_src_inspector_Inspector.zig_expectedoutput.txt (expected):tmp/tmpzaxfap8o_expected.txt	
+++ b/ghostty_src_inspector_Inspector.zig_extracted.txt (actual):tmp/tmp_k0_npxv_actual.txt	
@@ -25,13 +25,6 @@ const window_screen = "Screen";
 const window_size = "Surface Info";
 const window_imgui_demo = "Dear ImGui Demo";
 
-/// The surface that we're inspecting.
-surface: *Surface,
-
-/// This is used to track whether we're rendering for the first time. This
-/// is used to set up the initial window positions.
-first_render: bool = true,
-
 /// Mouse state that we track in addition to normal mouse states that
 /// Ghostty always knows about.
 mouse: struct {
@@ -804,13 +797,6 @@ fn renderSizeWindow(self: *Inspector) void {
         }
 
         {
-            const coord: renderer.Coordinate.Terminal = (renderer.Coordinate{
-                .surface = .{
-                    .x = self.mouse.last_xpos,
-                    .y = self.mouse.last_ypos,
-                },
-            }).convert(.terminal, self.surface.size).terminal;
-
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
                 _ = cimgui.c.igTableSetColumnIndex(0);
@@ -820,8 +806,8 @@ fn renderSizeWindow(self: *Inspector) void {
                 _ = cimgui.c.igTableSetColumnIndex(1);
                 cimgui.c.igText(
                     "(%dpx, %dpx)",
-                    @as(i64, @intFromFloat(coord.x)),
-                    @as(i64, @intFromFloat(coord.y)),
+                    @as(u32, @intFromFloat(self.mouse.last_xpos)),
+                    @as(u32, @intFromFloat(self.mouse.last_ypos)),
                 );
             }
         }
@@ -891,6 +877,13 @@ fn renderSizeWindow(self: *Inspector) void {
         }
 
         {
+            const coord: renderer.Coordinate.Terminal = (renderer.Coordinate{
+                .surface = .{
+                    .x = self.mouse.last_xpos,
+                    .y = self.mouse.last_ypos,
+                },
+            }).convert(.terminal, self.surface.size).terminal;
+
             cimgui.c.igTableNextRow(cimgui.c.ImGuiTableRowFlags_None, 0);
             {
                 _ = cimgui.c.igTableSetColumnIndex(0);
@@ -900,8 +893,8 @@ fn renderSizeWindow(self: *Inspector) void {
                 _ = cimgui.c.igTableSetColumnIndex(1);
                 cimgui.c.igText(
                     "(%dpx, %dpx)",
-                    @as(u32, @intFromFloat(mouse.left_click_xpos)),
-                    @as(u32, @intFromFloat(mouse.left_click_ypos)),
+                    @as(i64, @intFromFloat(coord.x)),
+                    @as(i64, @intFromFloat(coord.y)),
                 );
             }
         }
@@ -1103,26 +1096,6 @@ fn renderTermioWindow(self: *Inspector) void {
             .{ .x = 0, .y = 0 },
             0,
         );
-        defer cimgui.c.igEndTable();
-
-        cimgui.c.igTableSetupColumn(
-            "Seq",
-            cimgui.c.ImGuiTableColumnFlags_WidthFixed,
-            0,
-            0,
-        );
-        cimgui.c.igTableSetupColumn(
-            "Kind",
-            cimgui.c.ImGuiTableColumnFlags_WidthFixed,
-            0,
-            0,
-        );
-        cimgui.c.igTableSetupColumn(
-            "Description",
-            cimgui.c.ImGuiTableColumnFlags_WidthStretch,
-            0,
-            0,
-        );
 
         // Handle keyboard navigation when window is focused
         if (cimgui.c.igIsWindowFocused(cimgui.c.ImGuiFocusedFlags_RootAndChildWindows)) {
