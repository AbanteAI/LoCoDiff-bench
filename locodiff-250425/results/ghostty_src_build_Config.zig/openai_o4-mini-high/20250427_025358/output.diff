--- ghostty_src_build_Config.zig_expectedoutput.txt (expected)+++ ghostty_src_build_Config.zig_extracted.txt (actual)@@ -174,10 +174,10 @@             "If not specified, git will be used. This must be a semantic version.",
     );
 
-    config.version = if (version_string) |v|
+    config.version = if (version_string) |v| {
         // If an explicit version is given, we always use it.
         try std.SemanticVersion.parse(v)
-    else version: {
+    } else version: {
         // If no explicit version is given, we try to detect it from git.
         const vsn = GitVersion.detect(b) catch |err| switch (err) {
             // If Git isn't available we just make an unknown dev version.
@@ -379,7 +379,6 @@             "glslang",
             "spirv-cross",
             "simdutf",
-
             // This is default false because it is used for testing
             // primarily and not official packaging. The packaging
             // guide advises against building the GLFW backend.
@@ -417,6 +416,7 @@         "{}",
         .{self.version},
     ));
+
     step.addOption(
         ReleaseChannel,
         "release_channel",
@@ -479,7 +479,7 @@ // `b.standardTargetOptions()` returns a more specific cpu like `apple_a15`.
 //
 // This is used to workaround compilation issues on macOS.
-// (see for example https://github.com/mitchellh/ghostty/issues/1640).
+// (see for example https://github.com/mitchellh/ghostty/issues/1640").
 pub fn genericMacOSTarget(
     b: *std.Build,
     arch: ?std.Target.Cpu.Arch,
@@ -499,7 +499,6 @@ /// from the "root" of the module, and I don't want to pollute our root
 /// directory with a bunch of individual zig files for each entrypoint.
 ///
-/// Therefore, main.zig uses this to switch between the different entrypoints.
 pub const ExeEntrypoint = enum {
     ghostty,
     helpgen,
