
index 724d15be2..17e1d6415 100644
--- a/ghostty_src_build_Config.zig_expectedoutput.txt (expected):tmp/tmpuh4r991e_expected.txt	
+++ b/ghostty_src_build_Config.zig_extracted.txt (actual):tmp/tmpl68gls6e_actual.txt	
@@ -111,6 +111,7 @@ pub fn init(b: *std.Build) !Config {
 
     //---------------------------------------------------------------
     // Comptime Interfaces
+
     config.font_backend = b.option(
         font.Backend,
         "font-backend",
@@ -132,6 +133,18 @@ pub fn init(b: *std.Build) !Config {
     //---------------------------------------------------------------
     // Feature Flags
 
+    config.x11 = b.option(
+        bool,
+        "gtk-x11",
+        "Enables linking against X11 libraries when using the GTK rendering backend.",
+    ) orelse gtk_targets.x11;
+
+    config.wayland = b.option(
+        bool,
+        "gtk-wayland",
+        "Enables linking against Wayland libraries when using the GTK rendering backend.",
+    ) orelse gtk_targets.wayland;
+
     config.flatpak = b.option(
         bool,
         "flatpak",
@@ -145,26 +158,10 @@ pub fn init(b: *std.Build) !Config {
     ) orelse sentry: {
         switch (target.result.os.tag) {
             .macos, .ios => break :sentry true,
-
-            // Note its false for linux because the crash reports on Linux
-            // don't have much useful information.
             else => break :sentry false,
         }
     };
 
-    config.wayland = b.option(
-        bool,
-        "gtk-wayland",
-        "Enables linking against Wayland libraries when using the GTK rendering backend.",
-    ) orelse gtk_targets.wayland;
-
-    config.x11 = b.option(
-        bool,
-        "gtk-x11",
-        "Enables linking against X11 libraries when using the GTK rendering backend.",
-    ) orelse gtk_targets.x11;
-
-    //---------------------------------------------------------------
     // Ghostty Exe Properties
 
     const version_string = b.option(
@@ -175,12 +172,9 @@ pub fn init(b: *std.Build) !Config {
     );
 
     config.version = if (version_string) |v|
-        // If an explicit version is given, we always use it.
         try std.SemanticVersion.parse(v)
     else version: {
-        // If no explicit version is given, we try to detect it from git.
         const vsn = GitVersion.detect(b) catch |err| switch (err) {
-            // If Git isn't available we just make an unknown dev version.
             error.GitNotFound,
             error.GitNotRepository,
             => break :version .{
@@ -190,22 +184,18 @@ pub fn init(b: *std.Build) !Config {
                 .pre = "dev",
                 .build = "0000000",
             },
-
             else => return err,
         };
         if (vsn.tag) |tag| {
-            // Tip releases behave just like any other pre-release so we skip.
             if (!std.mem.eql(u8, tag, "tip")) {
                 const expected = b.fmt("v{d}.{d}.{d}", .{
                     app_version.major,
                     app_version.minor,
                     app_version.patch,
                 });
-
                 if (!std.mem.eql(u8, tag, expected)) {
                     @panic("tagged releases must be in vX.Y.Z format matching build.zig");
                 }
-
                 break :version .{
                     .major = app_version.major,
                     .minor = app_version.minor,
@@ -213,7 +203,6 @@ pub fn init(b: *std.Build) !Config {
                 };
             }
         }
-
         break :version .{
             .major = app_version.major,
             .minor = app_version.minor,
@@ -226,21 +215,13 @@ pub fn init(b: *std.Build) !Config {
     //---------------------------------------------------------------
     // Binary Properties
 
-    // On NixOS, the built binary from `zig build` needs to patch the rpath
-    // into the built binary for it to be portable across the NixOS system
-    // it was built for. We default this to true if we can detect we're in
-    // a Nix shell and have LD_LIBRARY_PATH set.
     config.patch_rpath = b.option(
         []const u8,
         "patch-rpath",
         "Inject the LD_LIBRARY_PATH as the rpath in the built binary. " ++
             "This defaults to LD_LIBRARY_PATH if we're in a Nix shell environment on NixOS.",
     ) orelse patch_rpath: {
-        // We only do the patching if we're targeting our own CPU and its Linux.
         if (!(target.result.os.tag == .linux) or !target.query.isNativeCpu()) break :patch_rpath null;
-
-        // If we're in a nix shell we default to doing this.
-        // Note: we purposely never deinit envmap because we leak the strings
         if (env.get("IN_NIX_SHELL") == null) break :patch_rpath null;
         break :patch_rpath env.get("LD_LIBRARY_PATH");
     };
@@ -287,15 +268,10 @@ pub fn init(b: *std.Build) !Config {
         "emit-docs",
         "Build and install auto-generated documentation (requires pandoc)",
     ) orelse emit_docs: {
-        // If we are emitting any other artifacts then we default to false.
         if (config.emit_bench or
             config.emit_test_exe or
             config.emit_helpgen) break :emit_docs false;
-
-        // We always emit docs in system package mode.
         if (system_package) break :emit_docs true;
-
-        // We only default to true if we can find pandoc.
         const path = Command.expandPath(b.allocator, "pandoc") catch
             break :emit_docs false;
         defer if (path) |p| b.allocator.free(p);
@@ -343,17 +319,7 @@ pub fn init(b: *std.Build) !Config {
     //---------------------------------------------------------------
     // System Packages
 
-    // These are all our dependencies that can be used with system
-    // packages if they exist. We set them up here so that we can set
-    // their defaults early. The first call configures the integration and
-    // subsequent calls just return the configured value. This lets them
-    // show up properly in `--help`.
-
     {
-        // These dependencies we want to default false if we're on macOS.
-        // On macOS we don't want to use system libraries because we
-        // generally want a fat binary. This can be overridden with the
-        // `-fsys` flag.
         for (&[_][]const u8{
             "freetype",
             "harfbuzz",
@@ -361,28 +327,19 @@ pub fn init(b: *std.Build) !Config {
             "libpng",
             "zlib",
             "oniguruma",
-            "gtk4-layer-shell",
         }) |dep| {
             _ = b.systemIntegrationOption(
                 dep,
                 .{
-                    // If we're not on darwin we want to use whatever the
-                    // default is via the system package mode
                     .default = if (target.result.os.tag.isDarwin()) false else null,
                 },
             );
         }
 
-        // These default to false because they're rarely available as
-        // system packages so we usually want to statically link them.
         for (&[_][]const u8{
             "glslang",
             "spirv-cross",
             "simdutf",
-
-            // This is default false because it is used for testing
-            // primarily and not official packaging. The packaging
-            // guide advises against building the GLFW backend.
             "glfw3",
         }) |dep| {
             _ = b.systemIntegrationOption(dep, .{ .default = false });
@@ -394,8 +351,6 @@ pub fn init(b: *std.Build) !Config {
 
 /// Configure the build options with our values.
 pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
-    // We need to break these down individual because addOption doesn't
-    // support all types.
     step.addOption(bool, "flatpak", self.flatpak);
     step.addOption(bool, "x11", self.x11);
     step.addOption(bool, "wayland", self.wayland);
@@ -406,26 +361,6 @@ pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
     step.addOption(ExeEntrypoint, "exe_entrypoint", self.exe_entrypoint);
     step.addOption(WasmTarget, "wasm_target", self.wasm_target);
     step.addOption(bool, "wasm_shared", self.wasm_shared);
-
-    // Our version. We also add the string version so we don't need
-    // to do any allocations at runtime. This has to be long enough to
-    // accommodate realistic large branch names for dev versions.
-    var buf: [1024]u8 = undefined;
-    step.addOption(std.SemanticVersion, "app_version", self.version);
-    step.addOption([:0]const u8, "app_version_string", try std.fmt.bufPrintZ(
-        &buf,
-        "{}",
-        .{self.version},
-    ));
-    step.addOption(
-        ReleaseChannel,
-        "release_channel",
-        channel: {
-            const pre = self.version.pre orelse break :channel .stable;
-            if (pre.len == 0) break :channel .stable;
-            break :channel .tip;
-        },
-    );
 }
 
 /// Rehydrate our Config from the comptime options. Note that not all
@@ -434,7 +369,6 @@ pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
 pub fn fromOptions() Config {
     const options = @import("build_options");
     return .{
-        // Unused at runtime.
         .optimize = undefined,
         .target = undefined,
         .env = undefined,
@@ -454,23 +388,8 @@ pub fn fromOptions() Config {
 /// be used generally, it should only be used for Darwin-based OS currently.
 pub fn osVersionMin(tag: std.Target.Os.Tag) ?std.Target.Query.OsVersion {
     return switch (tag) {
-        // We support back to the earliest officially supported version
-        // of macOS by Apple. EOL versions are not supported.
-        .macos => .{ .semver = .{
-            .major = 13,
-            .minor = 0,
-            .patch = 0,
-        } },
-
-        // iOS 17 picked arbitrarily
-        .ios => .{ .semver = .{
-            .major = 17,
-            .minor = 0,
-            .patch = 0,
-        } },
-
-        // This should never happen currently. If we add a new target then
-        // we should add a new case here.
+        .macos => .{ .semver = .{ .major = 13, .minor = 0, .patch = 0 } },
+        .ios => .{ .semver = .{ .major = 17, .minor = 0, .patch = 0 } },
         else => null,
     };
 }
@@ -479,7 +398,6 @@ pub fn osVersionMin(tag: std.Target.Os.Tag) ?std.Target.Query.OsVersion {
 // `b.standardTargetOptions()` returns a more specific cpu like `apple_a15`.
 //
 // This is used to workaround compilation issues on macOS.
-// (see for example https://github.com/mitchellh/ghostty/issues/1640).
 pub fn genericMacOSTarget(
     b: *std.Build,
     arch: ?std.Target.Cpu.Arch,
