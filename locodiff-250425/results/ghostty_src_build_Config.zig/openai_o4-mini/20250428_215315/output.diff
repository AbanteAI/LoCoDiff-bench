--- ghostty_src_build_Config.zig_expectedoutput.txt (expected)+++ ghostty_src_build_Config.zig_extracted.txt (actual)@@ -111,6 +111,7 @@ 
     //---------------------------------------------------------------
     // Comptime Interfaces
+
     config.font_backend = b.option(
         font.Backend,
         "font-backend",
@@ -119,14 +120,14 @@ 
     config.app_runtime = b.option(
         apprt.Runtime,
-        "app-runtime",
+        "app_runtime",
         "The app runtime to use. Not all values supported on all platforms.",
     ) orelse apprt.Runtime.default(target.result);
 
     config.renderer = b.option(
         rendererpkg.Impl,
         "renderer",
-        "The app runtime to use. Not all values supported on all platforms.",
+        "The renderer implementation to use. Not all values supported on all platforms.",
     ) orelse rendererpkg.Impl.default(target.result, wasm_target);
 
     //---------------------------------------------------------------
@@ -145,9 +146,6 @@     ) orelse sentry: {
         switch (target.result.os.tag) {
             .macos, .ios => break :sentry true,
-
-            // Note its false for linux because the crash reports on Linux
-            // don't have much useful information.
             else => break :sentry false,
         }
     };
@@ -180,7 +178,6 @@     else version: {
         // If no explicit version is given, we try to detect it from git.
         const vsn = GitVersion.detect(b) catch |err| switch (err) {
-            // If Git isn't available we just make an unknown dev version.
             error.GitNotFound,
             error.GitNotRepository,
             => break :version .{
@@ -190,22 +187,18 @@                 .pre = "dev",
                 .build = "0000000",
             },
-
             else => return err,
         };
         if (vsn.tag) |tag| {
-            // Tip releases behave just like any other pre-release so we skip.
             if (!std.mem.eql(u8, tag, "tip")) {
                 const expected = b.fmt("v{d}.{d}.{d}", .{
                     app_version.major,
                     app_version.minor,
                     app_version.patch,
                 });
-
                 if (!std.mem.eql(u8, tag, expected)) {
                     @panic("tagged releases must be in vX.Y.Z format matching build.zig");
                 }
-
                 break :version .{
                     .major = app_version.major,
                     .minor = app_version.minor,
@@ -213,7 +206,6 @@                 };
             }
         }
-
         break :version .{
             .major = app_version.major,
             .minor = app_version.minor,
@@ -226,21 +218,13 @@     //---------------------------------------------------------------
     // Binary Properties
 
-    // On NixOS, the built binary from `zig build` needs to patch the rpath
-    // into the built binary for it to be portable across the NixOS system
-    // it was built for. We default this to true if we can detect we're in
-    // a Nix shell and have LD_LIBRARY_PATH set.
     config.patch_rpath = b.option(
         []const u8,
         "patch-rpath",
         "Inject the LD_LIBRARY_PATH as the rpath in the built binary. " ++
             "This defaults to LD_LIBRARY_PATH if we're in a Nix shell environment on NixOS.",
     ) orelse patch_rpath: {
-        // We only do the patching if we're targeting our own CPU and its Linux.
         if (!(target.result.os.tag == .linux) or !target.query.isNativeCpu()) break :patch_rpath null;
-
-        // If we're in a nix shell we default to doing this.
-        // Note: we purposely never deinit envmap because we leak the strings
         if (env.get("IN_NIX_SHELL") == null) break :patch_rpath null;
         break :patch_rpath env.get("LD_LIBRARY_PATH");
     };
@@ -287,20 +271,29 @@         "emit-docs",
         "Build and install auto-generated documentation (requires pandoc)",
     ) orelse emit_docs: {
-        // If we are emitting any other artifacts then we default to false.
-        if (config.emit_bench or
-            config.emit_test_exe or
-            config.emit_helpgen) break :emit_docs false;
-
-        // We always emit docs in system package mode.
+        if (config.emit_bench or config.emit_test_exe or config.emit_helpgen) break :emit_docs false;
         if (system_package) break :emit_docs true;
-
-        // We only default to true if we can find pandoc.
-        const path = Command.expandPath(b.allocator, "pandoc") catch
-            break :emit_docs false;
+        const path = Command.expandPath(b.allocator, "pandoc") catch break :emit_docs false;
         defer if (path) |p| b.allocator.free(p);
         break :emit_docs path != null;
     };
+
+    config.emit_webdata = b.option(
+        bool,
+        "emit-webdata",
+        "Build the website data for the website.",
+    ) orelse false;
+
+    config.emit_xcframework = b.option(
+        bool,
+        "emit-xcframework",
+        "Build and install the xcframework for the macOS library.",
+    ) orelse builtin.target.os.tag.isDarwin() and
+        target.result.os.tag == .macos and
+        config.app_runtime == .none and
+        (!config.emit_bench and
+            !config.emit_test_exe and
+            !config.emit_helpgen);
 
     config.emit_terminfo = b.option(
         bool,
@@ -323,31 +316,8 @@         .ReleaseSafe, .ReleaseFast, .ReleaseSmall => false,
     };
 
-    config.emit_webdata = b.option(
-        bool,
-        "emit-webdata",
-        "Build the website data for the website.",
-    ) orelse false;
-
-    config.emit_xcframework = b.option(
-        bool,
-        "emit-xcframework",
-        "Build and install the xcframework for the macOS library.",
-    ) orelse builtin.target.os.tag.isDarwin() and
-        target.result.os.tag == .macos and
-        config.app_runtime == .none and
-        (!config.emit_bench and
-            !config.emit_test_exe and
-            !config.emit_helpgen);
-
     //---------------------------------------------------------------
     // System Packages
-
-    // These are all our dependencies that can be used with system
-    // packages if they exist. We set them up here so that we can set
-    // their defaults early. The first call configures the integration and
-    // subsequent calls just return the configured value. This lets them
-    // show up properly in `--help`.
 
     {
         // These dependencies we want to default false if we're on macOS.
@@ -366,8 +336,6 @@             _ = b.systemIntegrationOption(
                 dep,
                 .{
-                    // If we're not on darwin we want to use whatever the
-                    // default is via the system package mode
                     .default = if (target.result.os.tag.isDarwin()) false else null,
                 },
             );
@@ -379,7 +347,6 @@             "glslang",
             "spirv-cross",
             "simdutf",
-
             // This is default false because it is used for testing
             // primarily and not official packaging. The packaging
             // guide advises against building the GLFW backend.
@@ -394,8 +361,6 @@ 
 /// Configure the build options with our values.
 pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
-    // We need to break these down individual because addOption doesn't
-    // support all types.
     step.addOption(bool, "flatpak", self.flatpak);
     step.addOption(bool, "x11", self.x11);
     step.addOption(bool, "wayland", self.wayland);
@@ -407,9 +372,6 @@     step.addOption(WasmTarget, "wasm_target", self.wasm_target);
     step.addOption(bool, "wasm_shared", self.wasm_shared);
 
-    // Our version. We also add the string version so we don't need
-    // to do any allocations at runtime. This has to be long enough to
-    // accommodate realistic large branch names for dev versions.
     var buf: [1024]u8 = undefined;
     step.addOption(std.SemanticVersion, "app_version", self.version);
     step.addOption([:0]const u8, "app_version_string", try std.fmt.bufPrintZ(
@@ -454,24 +416,9 @@ /// be used generally, it should only be used for Darwin-based OS currently.
 pub fn osVersionMin(tag: std.Target.Os.Tag) ?std.Target.Query.OsVersion {
     return switch (tag) {
-        // We support back to the earliest officially supported version
-        // of macOS by Apple. EOL versions are not supported.
-        .macos => .{ .semver = .{
-            .major = 13,
-            .minor = 0,
-            .patch = 0,
-        } },
-
-        // iOS 17 picked arbitrarily
-        .ios => .{ .semver = .{
-            .major = 17,
-            .minor = 0,
-            .patch = 0,
-        } },
-
-        // This should never happen currently. If we add a new target then
-        // we should add a new case here.
-        else => null,
+        .macos => .{ .semver = .{ .major = 13, .minor = 0, .patch = 0 } },
+        .ios   => .{ .semver = .{ .major = 17, .minor = 0, .patch = 0 } },
+        else   => null,
     };
 }
 
