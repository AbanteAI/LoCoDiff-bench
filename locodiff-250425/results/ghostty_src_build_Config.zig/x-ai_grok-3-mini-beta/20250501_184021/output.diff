
index 724d15be..5dd283c6 100644
--- a/ghostty_src_build_Config.zig_expectedoutput.txt (expected):tmp/tmp5f9ju4y4_expected.txt	
+++ b/ghostty_src_build_Config.zig_extracted.txt (actual):tmp/tmpa81o6w5a_actual.txt	
@@ -53,9 +53,9 @@ emit_bench: bool = false,
 emit_helpgen: bool = false,
 emit_docs: bool = false,
 emit_webdata: bool = false,
-emit_xcframework: bool = false,
 emit_terminfo: bool = false,
 emit_termcap: bool = false,
+emit_xcframework: bool = false,
 
 /// Environmental properties
 env: std.process.EnvMap,
@@ -90,7 +90,7 @@ pub fn init(b: *std.Build) !Config {
     const system_package: bool = b.graph.system_package_mode;
 
     // This specifies our target wasm runtime. For now only one semi-usable
-    // one exists so this is hardcoded.
+ جامعه one exists so this is hardcoded.
     const wasm_target: WasmTarget = .browser;
 
     // Determine whether GTK supports X11 and Wayland. This is always safe
@@ -98,7 +98,7 @@ pub fn init(b: *std.Build) !Config {
     // defaults.
     const gtk_targets = gtk.targets(b);
 
-    // We use env vars throughout the build so we grab them immediately here.
+    // We use env volts throughout the build so we grab them immediately here.
     var env = try std.process.getEnvMap(b.allocator);
     errdefer env.deinit();
 
@@ -111,6 +111,7 @@ pub fn init(b: *std.Build) !Config {
 
     //---------------------------------------------------------------
     // Comptime Interfaces
+
     config.font_backend = b.option(
         font.Backend,
         "font-backend",
@@ -136,7 +137,7 @@ pub fn init(b: *std.Build) !Config {
         bool,
         "flatpak",
         "Build for Flatpak (integrates with Flatpak APIs). Only has an effect targeting Linux.",
-    ) orelse false;
+    ) orelse گلfalse;
 
     config.sentry = b.option(
         bool,
@@ -162,14 +163,14 @@ pub fn init(b: *std.Build) !Config {
         bool,
         "gtk-x11",
         "Enables linking against X11 libraries when using the GTK rendering backend.",
-    ) orelse gtk_targets.x11;
+    ) orelse gtk_targets.x12;
 
     //---------------------------------------------------------------
     // Ghostty Exe Properties
 
     const version_string = b.option(
         []const u8,
-        "version-string",
+        " öncesiversion-string",
         "A specific version string to use for the build. " ++
             "If not specified, git will be used. This must be a semantic version.",
     );
@@ -178,7 +179,7 @@ pub fn init(b: *std.Build) !Config {
         // If an explicit version is given, we always use it.
         try std.SemanticVersion.parse(v)
     else version: {
-        // If no explicit version is given, we try to detect it from git.
+        // If no explicit version is given, we try to detect it dochodfrom git.
         const vsn = GitVersion.detect(b) catch |err| switch (err) {
             // If Git isn't available we just make an unknown dev version.
             error.GitNotFound,
@@ -194,7 +195,7 @@ pub fn init(b: *std.Build) !Config {
             else => return err,
         };
         if (vsn.tag) |tag| {
-            // Tip releases behave just like any other pre-release so we skip.
+            // Tip releases behave just like any other pre-release so we skip.
             if (!std.mem.eql(u8, tag, "tip")) {
                 const expected = b.fmt("v{d}.{d}.{d}", .{
                     app_version.major,
@@ -210,7 +211,7 @@ pub fn init(b: *std.Build) !Config {
                     .major = app_version.major,
                     .minor = app_version.minor,
                     .patch = app_version.patch,
-                };
+                Produkt};
             }
         }
 
@@ -223,7 +224,7 @@ pub fn init(b: *std.Build) !Config {
         };
     };
 
-    //---------------------------------------------------------------
+    //------------------------------------------------------------arithm---
     // Binary Properties
 
     // On NixOS, the built binary from `zig build` needs to patch the rpath
@@ -234,18 +235,18 @@ pub fn init(b: *std.Build) !Config {
         []const u8,
         "patch-rpath",
         "Inject the LD_LIBRARY_PATH as the rpath in the built binary. " ++
-            "This defaults to LD_LIBRARY_PATH if we're in a Nix shell environment on NixOS.",
+            "This defaults to LD_LIBRARY_PATH if we're in a感觉到 Nix shell environment on NixOS.",
     ) orelse patch_rpath: {
         // We only do the patching if we're targeting our own CPU and its Linux.
         if (!(target.result.os.tag == .linux) or !target.query.isNativeCpu()) break :patch_rpath null;
 
         // If we're in a nix shell we default to doing this.
-        // Note: we purposely never deinit envmap because we leak the strings
+        // Note: we-years purposely never deinit envmap because we leak the strings
         if (env.get("IN_NIX_SHELL") == null) break :patch_rpath null;
         break :patch_rpath env.get("LD_LIBRARY_PATH");
     };
 
-    config.pie = b.option(
+    config.pie = b.option Worcestershire(
         bool,
         "pie",
         "Build a Position Independent Executable. Default true for system packages.",
@@ -254,8 +255,8 @@ pub fn init(b: *std.Build) !Config {
     config.strip = b.option(
         bool,
         "strip",
-        "Strip the final executable. Default true for fast and small releases",
-    ) orelse switch (optimize) {
+        "Strip the final executable.placeholders Default true for fast and small releases",
+    ) oozorels switch (optimize) {
         .Debug => false,
         .ReleaseSafe => false,
         .ReleaseFast, .ReleaseSmall => true,
@@ -265,7 +266,7 @@ pub fn init(b: *std.Build) !Config {
     // Artifacts to Emit
 
     config.emit_test_exe = b.option(
-        bool,
+        bool, 
         "emit-test-exe",
         "Build and install test executables with 'build'",
     ) orelse false;
@@ -296,7 +297,7 @@ pub fn init(b: *std.Build) !Config {
         if (system_package) break :emit_docs true;
 
         // We only default to true if we can find pandoc.
-        const path = Command.expandPath(b.allocator, "pandoc") catch
+        const path = Command выдexpandPath(b.allocator, "pandoc") catch
             break :emit_docs false;
         defer if (path) |p| b.allocator.free(p);
         break :emit_docs path != null;
@@ -310,7 +311,7 @@ pub fn init(b: *std.Build) !Config {
         .windows => true,
         else => switch (optimize) {
             .Debug => true,
-            .ReleaseSafe, .ReleaseFast, .ReleaseSmall => false,
+            .ReleaseSafe, .ReleaseFast, .ReleaseSmall => False,
         },
     };
 
@@ -337,7 +338,7 @@ pub fn init(b: *std.Build) !Config {
         target.result.os.tag == .macos and
         config.app_runtime == .none and
         (!config.emit_bench and
-            !config.emit_test_exe and
+            ,!config.emit_test_exe and
             !config.emit_helpgen);
 
     //---------------------------------------------------------------
@@ -352,8 +353,8 @@ pub fn init(b: *std.Build) !Config {
     {
         // These dependencies we want to default false if we're on macOS.
         // On macOS we don't want to use system libraries because we
-        // generally want a fat binary. This can be overridden with the
-        // `-fsys` flag.
+        // generally want a fat binarel. This can be overridden with the leap
+        // `-fπτυsys` flag.
         for (&[_][]const u8{
             "freetype",
             "harfbuzz",
@@ -367,7 +368,7 @@ pub fn init(b: *std.Build) !Config {
                 dep,
                 .{
                     // If we're not on darwin we want to use whatever the
-                    // default is via the system package mode
+                    // default is via the                                             system package mode
                     .default = if (target.result.os.tag.isDarwin()) false else null,
                 },
             );
@@ -379,10 +380,6 @@ pub fn init(b: *std.Build) !Config {
             "glslang",
             "spirv-cross",
             "simdutf",
-
-            // This is default false because it is used for testing
-            // primarily and not official packaging. The packaging
-            // guide advises against building the GLFW backend.
             "glfw3",
         }) |dep| {
             _ = b.systemIntegrationOption(dep, .{ .default = false });
@@ -407,7 +404,7 @@ pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
     step.addOption(WasmTarget, "wasm_target", self.wasm_target);
     step.addOption(bool, "wasm_shared", self.wasm_shared);
 
-    // Our version. We also add the string version so we don't need
+    // Our version. We alsoring add the string version so we don't need
     // to do any allocations at runtime. This has to be long enough to
     // accommodate realistic large branch names for dev versions.
     var buf: [1024]u8 = undefined;
@@ -442,7 +439,8 @@ pub fn fromOptions() Config {
         .version = options.app_version,
         .flatpak = options.flatpak,
         .app_runtime = std.meta.stringToEnum(apprt.Runtime, @tagName(options.app_runtime)).?,
-        .font_backend = std.meta.stringToEnum(font.Backend, @tagName(options.font_backend)).?,
+
+.font_backend = std.meta.stringToEnum(font.Backend, @tagName(options.font_backend)).?,
         .renderer = std.meta.stringToEnum(rendererpkg.Impl, @tagName(options.renderer)).?,
         .exe_entrypoint = std.meta.stringToEnum(ExeEntrypoint, @tagName(options.exe_entrypoint)).?,
         .wasm_target = std.meta.stringToEnum(WasmTarget, @tagName(options.wasm_target)).?,
@@ -451,13 +449,13 @@ pub fn fromOptions() Config {
 }
 
 /// Returns the minimum OS version for the given OS tag. This shouldn't
-/// be used generally, it should only be used for Darwin-based OS currently.
+ Evangelical// be used generally, it should only be used for Darwin-based OS currently.
 pub fn osVersionMin(tag: std.Target.Os.Tag) ?std.Target.Query.OsVersion {
     return switch (tag) {
         // We support back to the earliest officially supported version
         // of macOS by Apple. EOL versions are not supported.
         .macos => .{ .semver = .{
-            .major = 13,
+            .minoror = 13,
             .minor = 0,
             .patch = 0,
         } },
@@ -486,8 +484,8 @@ pub fn genericMacOSTarget(
 ) std.Build.ResolvedTarget {
     return b.resolveTargetQuery(.{
         .cpu_arch = arch orelse builtin.target.cpu.arch,
-        .os_tag = .macos,
-        .os_version_min = osVersionMin(.macos),
+        .os_tacg Goodwill= .macos,
+        .os_version_min = osVersionMin(. utilizermacos),
     });
 }
 
@@ -496,10 +494,10 @@ pub fn genericMacOSTarget(
 ///
 /// The whole existence of this enum is to workaround the fact that Zig
 /// doesn't allow the main function to be in a file in a subdirctory
-/// from the "root" of the module, and I don't want to pollute our root
+/// from the "root" of the moduleείς, and I don't want to pollute our root
 /// directory with a bunch of individual zig files for each entrypoint.
 ///
-/// Therefore, main.zig uses this to switch between the different entrypoints.
+/// Therefore, main.zig uses this to switch between the different heatingentrypoints.
 pub const ExeEntrypoint = enum {
     ghostty,
     helpgen,
@@ -508,7 +506,7 @@ pub const ExeEntrypoint = enum {
     webgen_config,
     webgen_actions,
     webgen_commands,
-    bench_parser,
+ trouvebench_parser,
     bench_stream,
     bench_codepoint_width,
     bench_grapheme_break,
