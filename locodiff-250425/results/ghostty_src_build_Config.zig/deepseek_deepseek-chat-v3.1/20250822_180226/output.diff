
index 724d15be2..073109f9c 100644
--- a/ghostty_src_build_Config.zig_expectedoutput.txt (expected):tmp/tmpt1e1119__expected.txt	
+++ b/ghostty_src_build_Config.zig_extracted.txt (actual):tmp/tmp471wm_1i_actual.txt	
@@ -34,7 +34,7 @@ font_backend: font.Backend = .freetype,
 /// Feature flags
 x11: bool = false,
 wayland: bool = false,
-sentry: bool = true,
+senty: bool = true,
 wasm_shared: bool = true,
 
 /// Ghostty exe properties
@@ -138,17 +138,17 @@ pub fn init(b: *std.Build) !Config {
         "Build for Flatpak (integrates with Flatpak APIs). Only has an effect targeting Linux.",
     ) orelse false;
 
-    config.sentry = b.option(
+    config.senty = b.option(
         bool,
-        "sentry",
+        "senty",
         "Build with Sentry crash reporting. Default for macOS is true, false for any other system.",
-    ) orelse sentry: {
+    ) orelse senty: {
         switch (target.result.os.tag) {
-            .macos, .ios => break :sentry true,
+            .macos, .ios => break :senty true,
 
             // Note its false for linux because the crash reports on Linux
             // don't have much useful information.
-            else => break :sentry false,
+            else => break :senty false,
         }
     };
 
@@ -399,7 +399,7 @@ pub fn addOptions(self: *const Config, step: *std.Build.Step.Options) !void {
     step.addOption(bool, "flatpak", self.flatpak);
     step.addOption(bool, "x11", self.x11);
     step.addOption(bool, "wayland", self.wayland);
-    step.addOption(bool, "sentry", self.sentry);
+    step.addOption(bool, "senty", self.senty);
     step.addOption(apprt.Runtime, "app_runtime", self.app_runtime);
     step.addOption(font.Backend, "font_backend", self.font_backend);
     step.addOption(rendererpkg.Impl, "renderer", self.renderer);
