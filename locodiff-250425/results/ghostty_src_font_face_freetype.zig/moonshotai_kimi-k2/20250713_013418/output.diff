
index 94dc6911d..9f767fe34 100644
--- a/ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected):tmp/tmpoi_wivdn_expected.txt	
+++ b/ghostty_src_font_face_freetype.zig_extracted.txt (actual):tmp/tmp99j1dgwf_actual.txt	
@@ -562,16 +562,8 @@ pub const Face = struct {
             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
-        return Glyph{
+        return .{
             .width = tgt_w,
             .height = tgt_h,
             .offset_x = offset_x,
@@ -582,15 +574,6 @@ pub const Face = struct {
         };
     }
 
-    /// Convert 16.6 pixel format to pixels based on the scale factor of the
-    /// current font size.
-    fn unitsToPxY(self: Face, units: i32) i32 {
-        return @intCast(freetype.mulFix(
-            units,
-            @intCast(self.face.handle.*.size.*.metrics.y_scale),
-        ) >> 6);
-    }
-
     /// Convert 26.6 pixel format to f32
     fn f26dot6ToFloat(v: freetype.c.FT_F26Dot6) f32 {
         return @floatFromInt(v >> 6);
@@ -845,6 +828,10 @@ test {
     );
     defer ft_font.deinit();
 
+    try testing.expect(ft_font.isColorGlyph(0) == false);
+    try testing.expect(ft_font.isColorGlyph(1) == false);
+    try testing.expect(ft_font.hasColor() == false);
+
     // Generate all visible ASCII
     var i: u8 = 32;
     while (i < 127) : (i += 1) {
