
index 94dc6911d..a5d9a9d5d 100644
--- a/ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected):tmp/tmp_4yio1ft_expected.txt	
+++ b/ghostty_src_font_face_freetype.zig_extracted.txt (actual):tmp/tmp76pnl_z0_actual.txt	
@@ -140,18 +140,12 @@ pub const Face = struct {
         return "";
     }
 
-    /// Return a new face that is the same as this but also has synthetic
-    /// bold applied.
     pub fn syntheticBold(self: *const Face, opts: font.face.Options) !Face {
         // Increase face ref count
         self.face.ref();
         errdefer self.face.deinit();
 
-        var f = try initFace(
-            .{ .lib = self.lib },
-            self.face,
-            opts,
-        );
+        var f = try initFace(.{ .lib = self.lib }, self.face, opts);
         errdefer f.deinit();
         f.synthetic = self.synthetic;
         f.synthetic.bold = true;
@@ -166,11 +160,7 @@ pub const Face = struct {
         self.face.ref();
         errdefer self.face.deinit();
 
-        var f = try initFace(
-            .{ .lib = self.lib },
-            self.face,
-            opts,
-        );
+        var f = try initFace(.{ .lib = self.lib }, self.face, opts);
         errdefer f.deinit();
         f.synthetic = self.synthetic;
         f.synthetic.italic = true;
@@ -283,7 +273,6 @@ pub const Face = struct {
         }) catch return false;
 
         const glyph = self.face.handle.*.glyph;
-
         return glyph.*.bitmap.pixel_mode == freetype.c.FT_PIXEL_MODE_BGRA;
     }
 
@@ -306,11 +295,10 @@ pub const Face = struct {
 
         // If our glyph has color, we want to render the color
         try self.face.loadGlyph(glyph_index, .{
-            .color = self.face.hasColor(),
-
             // If we have synthetic bold, we have to set some additional
             // glyph properties before render so we don't render here.
             .render = !self.synthetic.bold,
+            .color = self.face.hasColor(),
 
             // use options from config
             .no_hinting = !self.load_flags.hinting,
@@ -337,9 +325,10 @@ pub const Face = struct {
             try self.face.renderGlyph(.normal);
         }
 
+        const bitmap_ft = glyph.*.bitmap;
+
         // This bitmap is blank. I've seen it happen in a font, I don't know why.
         // If it is empty, we just return a valid glyph struct that does nothing.
-        const bitmap_ft = glyph.*.bitmap;
         if (bitmap_ft.rows == 0) return .{
             .width = 0,
             .height = 0,
@@ -410,9 +399,7 @@ pub const Face = struct {
             }
 
             // If we already fit, we don't need to resize
-            if (original_height <= result.rows and original_width <= result.width) {
-                break :resized null;
-            }
+            if (original_height <= result.rows and original_width <= result.width) break :resized null;
 
             result.pitch = @as(c_int, @intCast(result.width)) * atlas.format.depth();
 
@@ -446,12 +433,12 @@ pub const Face = struct {
             alloc.free(bm.buffer[0..len]);
         };
 
-        const bitmap = bitmap_resized orelse (bitmap_converted orelse bitmap_ft);
+        const bitmap = bitmap_resized orelse bitmap_original;
         const tgt_w = bitmap.width;
         const tgt_h = bitmap.rows;
 
         // Must have non-empty bitmap because we return earlier
-        // if zero. We assume the rest of this that it is nont-zero so
+        // if zero. We assume the rest of this that it is non-zero so
         // this is important.
         assert(tgt_w > 0 and tgt_h > 0);
 
@@ -460,11 +447,7 @@ pub const Face = struct {
         // same ratio as the resize.
         const glyph_metrics = if (bitmap_resized) |bm| metrics: {
             // Our ratio for the resize
-            const ratio = ratio: {
-                const new: f64 = @floatFromInt(bm.rows);
-                const old: f64 = @floatFromInt(bitmap_original.rows);
-                break :ratio new / old;
-            };
+            const ratio = @as(f64, @floatFromInt(bm.rows)) / @as(f64, @floatFromInt(bitmap_original.rows));
 
             var copy = glyph.*;
             copy.bitmap_top = @as(c_int, @intFromFloat(@round(@as(f64, @floatFromInt(copy.bitmap_top)) * ratio)));
@@ -519,7 +502,7 @@ pub const Face = struct {
                 }
                 break :buffer temp;
             } else bitmap.buffer[0..(tgt_w * tgt_h * depth)];
-            defer if (buffer.ptr != bitmap.buffer) alloc.free(buffer);
+            defer if (needs_copy) alloc.free(buffer);
 
             // Write the glyph information into the atlas
             assert(region.width == tgt_w);
@@ -527,7 +510,7 @@ pub const Face = struct {
             atlas.set(region, buffer);
         }
 
-        const offset_y: c_int = offset_y: {
+        const offset_y = offset_y: {
             // For non-scalable colorized fonts, we assume they are pictographic
             // and just center the glyph. So far this has only applied to emoji
             // fonts. Emoji fonts don't always report a correct ascender/descender
@@ -562,14 +545,6 @@ pub const Face = struct {
             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
         return Glyph{
             .width = tgt_w,
@@ -578,7 +553,7 @@ pub const Face = struct {
             .offset_y = offset_y,
             .atlas_x = region.x,
             .atlas_y = region.y,
-            .advance_x = f26dot6ToFloat(glyph_metrics.advance.x),
+            .advance_x = f26dot6ToFloat(glyph.*.advance.x),
         };
     }
 
@@ -632,9 +607,9 @@ pub const Face = struct {
 
         const units_per_em = head.Units_Per_EM;
         const px_per_em: f64 = @floatFromInt(size_metrics.y_ppem);
-        const px_per_unit = px_per_em / @as(f64, @floatFromInt(units_per_em));
+        const px_per_unit = px_per_em / @floatFromInt(units_per_em);
 
-        const ascent: f64, const descent: f64, const line_gap: f64 = vertical_metrics: {
+        const ascent, const descent, const line_gap = vertical_metrics: {
             const hhea_ascent: f64 = @floatFromInt(hhea.Ascender);
             const hhea_descent: f64 = @floatFromInt(hhea.Descender);
             const hhea_line_gap: f64 = @floatFromInt(hhea.Line_Gap);
@@ -988,7 +963,6 @@ const terminus_i =
     \\........
     \\........
 ;
-// Including the newline
 const terminus_i_pitch = 9;
 
 test "bitmap glyph" {
