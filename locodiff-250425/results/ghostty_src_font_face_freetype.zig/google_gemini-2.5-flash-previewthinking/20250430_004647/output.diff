--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -8,6 +8,7 @@ const builtin = @import("builtin");
 const freetype = @import("freetype");
 const harfbuzz = @import("harfbuzz");
+const opentype = @import("../opentype.zig");
 const stb = @import("../../stb/main.zig");
 const assert = std.debug.assert;
 const testing = std.testing;
@@ -16,7 +17,6 @@ const Glyph = font.Glyph;
 const Library = font.Library;
 const convert = @import("freetype_convert.zig");
-const opentype = @import("../opentype.zig");
 const fastmem = @import("../../fastmem.zig");
 const quirks = @import("../../quirks.zig");
 const config = @import("../../config.zig");
@@ -119,9 +119,9 @@         self.* = undefined;
     }
 
-    /// Returns the font name. If allocation is required, buf will be used,
-    /// but sometimes allocation isn't required and a static string is
-    /// returned.
+    // Returns the font name. If allocation is required, buf will be used,
+    // but sometimes allocation isn't required and a static string is
+    // returned.
     pub fn name(self: *const Face, buf: []u8) Allocator.Error![]const u8 {
         // We don't use this today but its possible the table below
         // returns UTF-16 in which case we'd want to use this for conversion.
@@ -140,8 +140,8 @@         return "";
     }
 
-    /// Return a new face that is the same as this but also has synthetic
-    /// bold applied.
+    // Return a new face that is the same as this but also has synthetic
+    // bold applied.
     pub fn syntheticBold(self: *const Face, opts: font.face.Options) !Face {
         // Increase face ref count
         self.face.ref();
@@ -337,9 +337,10 @@             try self.face.renderGlyph(.normal);
         }
 
+        const bitmap_ft = glyph.*.bitmap;
+
         // This bitmap is blank. I've seen it happen in a font, I don't know why.
         // If it is empty, we just return a valid glyph struct that does nothing.
-        const bitmap_ft = glyph.*.bitmap;
         if (bitmap_ft.rows == 0) return .{
             .width = 0,
             .height = 0,
@@ -363,6 +364,7 @@                 @panic("unsupported pixel mode");
             },
         };
+        // assert(atlas.format == format); // Not true if format == null
 
         // If our atlas format doesn't match, look for conversions if possible.
         const bitmap_converted = if (format == null or atlas.format != format.?) blk: {
@@ -504,7 +506,7 @@             // We can avoid a buffer copy if our atlas width and bitmap
             // width match and the bitmap pitch is just the width (meaning
             // the data is tightly packed).
-            const needs_copy = !(tgt_w == bitmap.width and (bitmap.width * depth) == bitmap.pitch);
+            const needs_copy = !(tgt_w == bitmap.width and (@as(c_int, bitmap.width) * depth) == bitmap.pitch);
 
             // If we need to copy the data, we copy it into a temporary buffer.
             const buffer = if (needs_copy) buffer: {
@@ -536,7 +538,7 @@             //
             // NOTE(mitchellh): I don't know if this is right, this doesn't
             // _feel_ right, but it makes all my limited test cases work.
-            if (self.face.hasColor() and !self.face.isScalable()) {
+            if (self.face.has color and !self.face.isScalable()) {
                 break :offset_y @intCast(tgt_h + (metrics.cell_height -| tgt_h) / 2);
             }
 
@@ -582,15 +584,6 @@         };
     }
 
-    /// Convert 16.6 pixel format to pixels based on the scale factor of the
-    /// current font size.
-    fn unitsToPxY(self: Face, units: i32) i32 {
-        return @intCast(freetype.mulFix(
-            units,
-            @intCast(self.face.handle.*.size.*.metrics.y_scale),
-        ) >> 6);
-    }
-
     /// Convert 26.6 pixel format to f32
     fn f26dot6ToFloat(v: freetype.c.FT_F26Dot6) f32 {
         return @floatFromInt(v >> 6);
@@ -697,6 +690,7 @@                 hhea_line_gap * px_per_unit,
             };
         };
+
 
         // Some fonts have degenerate 'post' tables where the underline
         // thickness (and often position) are 0. We consider them null
@@ -920,8 +914,6 @@                 .cell_baseline = 0,
                 .underline_position = 0,
                 .underline_thickness = 0,
-                .strikethrough_position = 0,
-                .strikethrough_thickness = 0,
                 .overline_position = 0,
                 .overline_thickness = 0,
                 .box_thickness = 0,
@@ -930,6 +922,52 @@         );
         try testing.expectEqual(@as(u32, 24), glyph.height);
     }
+}
+
+test "metrics" {
+    const testFont = font.embedded.inconsolata;
+    const alloc = testing.allocator;
+
+    var lib = try Library.init();
+    defer lib.deinit();
+
+    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
+    defer atlas.deinit(alloc);
+
+    var ft_font = try Face.init(
+        lib,
+        testFont,
+        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
+    );
+    defer ft_font.deinit();
+
+    try testing.expectEqual(font.Metrics.FaceMetrics{
+        .cell_width = 8.0,
+        .ascent = 13.744,
+        .descent = -3.04,
+        .line_gap = 0.0,
+        .underline_position = 1.92,
+        .underline_thickness = 0.96,
+        .strikethrough_position = 4.906666666666666,
+        .strikethrough_thickness = 0.96,
+        .cap_height = null,
+        .ex_height = null,
+    }, try ft_font.getMetrics());
+
+    // Resize should change metrics
+    try ft_font.setSize(.{ .size = .{ .points = 24, .xdpi = 96, .ydpi = 96 } });
+    try testing.expectEqual(font.Metrics.FaceMetrics{
+        .cell_width = 16.0,
+        .ascent = 27.488,
+        .descent = -6.08,
+        .line_gap = 0.0,
+        .underline_position = 3.84,
+        .underline_thickness = 1.92,
+        .strikethrough_position = 9.813333333333333,
+        .strikethrough_thickness = 1.92,
+        .cap_height = null,
+        .ex_height = null,
+    }, try ft_font.getMetrics());
 }
 
 test "mono to rgba" {
