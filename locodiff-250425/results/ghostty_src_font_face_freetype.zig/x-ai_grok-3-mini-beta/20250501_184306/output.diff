--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -1,9 +1,5 @@ //! Face represents a single font face. A single font face has a single set
 //! of properties associated with it such as style, weight, etc.
-//!
-//! A Face isn't typically meant to be used directly. It is usually used
-//! via a Family in order to store it in an Atlas.
-
 const std = @import("std");
 const builtin = @import("builtin");
 const freetype = @import("freetype");
@@ -25,8 +21,7 @@ 
 pub const Face = struct {
     comptime {
-        // If we have the freetype backend, we should have load flags.
-        assert(font.face.FreetypeLoadFlags != void);
+        assert(font.FreetypeLoadFlags != void);
     }
 
     /// Our freetype library
@@ -39,7 +34,7 @@     hb_font: harfbuzz.Font,
 
     /// Freetype load flags for this font face.
-    load_flags: font.face.FreetypeLoadFlags,
+    load_flags: font.FreetypeLoadFlags,
 
     /// Set quirks.disableDefaultFontFeatures
     quirks_disable_default_font_features: bool = false,
@@ -59,20 +54,20 @@     };
 
     /// Initialize a new font face with the given source in-memory.
-    pub fn initFile(lib: Library, path: [:0]const u8, index: i32, opts: font.face.Options) !Face {
+    pub fn initFile(lib: Library, path: [:0]const u8, index: i32, opts: font.Options) !Face {
         const face = try lib.lib.initFace(path, index);
         errdefer face.deinit();
         return try initFace(lib, face, opts);
     }
 
     /// Initialize a new font face with the given source in-memory.
-    pub fn init(lib: Library, source: [:0]const u8, opts: font.face.Options) !Face {
+    pub fn init(lib: Library, source: [:0]const u8, opts: font.Options) !Face {
         const face = try lib.lib.initMemoryFace(source, 0);
         errdefer face.deinit();
         return try initFace(lib, face, opts);
     }
 
-    fn initFace(lib: Library, face: freetype.Face, opts: font.face.Options) !Face {
+    fn initFace(lib: Library, face: freetype.Face, opts: font.Options) !Face {
         try face.selectCharmap(.unicode);
         try setSize_(face, opts.size);
 
@@ -98,8 +93,8 @@             defer lib.lib.doneMMVar(mm);
             for (0..mm.num_axis) |i| {
                 const axis = mm.axis[i];
-                const id_raw = std.math.cast(c_int, axis.tag) orelse continue;
-                const id: font.face.Variation.Id = @bitCast(id_raw);
+                const id_raw = std.math.cast(u32, axis.tag) orelse continue;
+                const id: font.Variation.Id = @bitCast(id_raw);
                 log.debug("variation axis: name={s} id={s} min={} max={} def={}", .{
                     std.mem.sliceTo(axis.name, 0),
                     id.str(),
@@ -113,15 +108,6 @@         return result;
     }
 
-    pub fn deinit(self: *Face) void {
-        self.face.deinit();
-        self.hb_font.destroy();
-        self.* = undefined;
-    }
-
-    /// Returns the font name. If allocation is required, buf will be used,
-    /// but sometimes allocation isn't required and a static string is
-    /// returned.
     pub fn name(self: *const Face, buf: []u8) Allocator.Error![]const u8 {
         // We don't use this today but its possible the table below
         // returns UTF-16 in which case we'd want to use this for conversion.
@@ -142,7 +128,7 @@ 
     /// Return a new face that is the same as this but also has synthetic
     /// bold applied.
-    pub fn syntheticBold(self: *const Face, opts: font.face.Options) !Face {
+    pub fn syntheticBold(self: *const Face, opts: font.Options) !Face {
         // Increase face ref count
         self.face.ref();
         errdefer self.face.deinit();
@@ -161,7 +147,7 @@ 
     /// Return a new face that is the same as this but has a transformation
     /// matrix applied to italicize it.
-    pub fn syntheticItalic(self: *const Face, opts: font.face.Options) !Face {
+    pub fn syntheticItalic(self: *const Face, opts: font.Options) !Face {
         // Increase face ref count
         self.face.ref();
         errdefer self.face.deinit();
@@ -180,11 +166,14 @@ 
     /// Resize the font in-place. If this succeeds, the caller is responsible
     /// for clearing any glyph caches, font atlas data, etc.
-    pub fn setSize(self: *Face, opts: font.face.Options) !void {
+    pub fn setSize(self: *Face, opts: font.Options) !void {
         try setSize_(self.face, opts.size);
-    }
-
-    fn setSize_(face: freetype.Face, size: font.face.DesiredSize) !void {
+        // We don't update the metrics here because they should've already been
+        // calculated based on the primary face, and we don't want to mess with
+        // things we don't control.
+    }
+
+    fn setSize_(face: freetype.Face, size: font.DesiredSize) !void {
         // If we have fixed sizes, we just have to try to pick the one closest
         // to what the user requested. Otherwise, we can choose an arbitrary
         // pixel size.
@@ -212,12 +201,10 @@         try face.selectSize(best_i);
     }
 
-    /// Set the variation axes for this font. This will modify this font
-    /// in-place.
     pub fn setVariations(
         self: *Face,
-        vs: []const font.face.Variation,
-        opts: font.face.Options,
+        vs: []const font.Variation,
+        opts: font.Options,
     ) !void {
         _ = opts;
 
@@ -283,7 +270,6 @@         }) catch return false;
 
         const glyph = self.face.handle.*.glyph;
-
         return glyph.*.bitmap.pixel_mode == freetype.c.FT_PIXEL_MODE_BGRA;
     }
 
@@ -294,7 +280,7 @@         alloc: Allocator,
         atlas: *font.Atlas,
         glyph_index: u32,
-        opts: font.face.RenderOptions,
+        opts: font.RenderOptions,
     ) !Glyph {
         const metrics = opts.grid_metrics;
 
@@ -304,13 +290,11 @@         if (self.synthetic.italic) self.face.setTransform(&italic_matrix, null);
         defer if (self.synthetic.italic) self.face.setTransform(null, null);
 
-        // If our glyph has color, we want to render the color
-        try self.face.loadGlyph(glyph_index, .{
+        // If we have synthetic bold, we have to set some additional
+        // glyph properties before render so we don't render here.
+        self.face.loadGlyph(glyph_index, .{
+            .render = !self.synthetic.bold,
             .color = self.face.hasColor(),
-
-            // If we have synthetic bold, we have to set some additional
-            // glyph properties before render so we don't render here.
-            .render = !self.synthetic.bold,
 
             // use options from config
             .no_hinting = !self.load_flags.hinting,
@@ -337,8 +321,6 @@             try self.face.renderGlyph(.normal);
         }
 
-        // This bitmap is blank. I've seen it happen in a font, I don't know why.
-        // If it is empty, we just return a valid glyph struct that does nothing.
         const bitmap_ft = glyph.*.bitmap;
         if (bitmap_ft.rows == 0) return .{
             .width = 0,
@@ -360,14 +342,17 @@             freetype.c.FT_PIXEL_MODE_BGRA => .rgba,
             else => {
                 log.warn("glyph={} pixel mode={}", .{ glyph_index, bitmap_ft.pixel_mode });
-                @panic("unsupported pixel mode");
+                return error.UnsupportedPixelMode;
             },
         };
 
         // If our atlas format doesn't match, look for conversions if possible.
         const bitmap_converted = if (format == null or atlas.format != format.?) blk: {
             const func = convert.map[bitmap_ft.pixel_mode].get(atlas.format) orelse {
-                log.warn("glyph={} pixel mode={}", .{ glyph_index, bitmap_ft.pixel_mode });
+                log.debug("converting from pixel_mode={} to atlas_format={}", .{
+                    bitmap_ft.pixel_mode,
+                    atlas.format,
+                });
                 return error.UnsupportedPixelMode;
             };
 
@@ -450,9 +435,6 @@         const tgt_w = bitmap.width;
         const tgt_h = bitmap.rows;
 
-        // Must have non-empty bitmap because we return earlier
-        // if zero. We assume the rest of this that it is nont-zero so
-        // this is important.
         assert(tgt_w > 0 and tgt_h > 0);
 
         // If we resized our bitmap, we need to recalculate some metrics that
@@ -515,11 +497,11 @@                 while (i < bitmap.rows) : (i += 1) {
                     fastmem.copy(u8, dst_ptr, src_ptr[0 .. bitmap.width * depth]);
                     dst_ptr = dst_ptr[tgt_w * depth ..];
-                    src_ptr += @as(usize, @intCast(bitmap.pitch));
+                    src_ptr = src_ptr[@as(usize, @intCast(bitmap.pitch))..];
                 }
                 break :buffer temp;
             } else bitmap.buffer[0..(tgt_w * tgt_h * depth)];
-            defer if (buffer.ptr != bitmap.buffer) alloc.free(buffer);
+            defer if (needs_copy) alloc.free(buffer);
 
             // Write the glyph information into the atlas
             assert(region.width == tgt_w);
@@ -562,14 +544,6 @@             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
         return Glyph{
             .width = tgt_w,
@@ -578,26 +552,8 @@             .offset_y = offset_y,
             .atlas_x = region.x,
             .atlas_y = region.y,
-            .advance_x = f26dot6ToFloat(glyph_metrics.advance.x),
-        };
-    }
-
-    /// Convert 16.6 pixel format to pixels based on the scale factor of the
-    /// current font size.
-    fn unitsToPxY(self: Face, units: i32) i32 {
-        return @intCast(freetype.mulFix(
-            units,
-            @intCast(self.face.handle.*.size.*.metrics.y_scale),
-        ) >> 6);
-    }
-
-    /// Convert 26.6 pixel format to f32
-    fn f26dot6ToFloat(v: freetype.c.FT_F26Dot6) f32 {
-        return @floatFromInt(v >> 6);
-    }
-
-    fn f26dot6ToF64(v: freetype.c.FT_F26Dot6) f64 {
-        return @as(opentype.sfnt.F26Dot6, @bitCast(@as(u32, @intCast(v)))).to(f64);
+            .advance_x = f26dot6ToF64(glyph_metrics.advance.x),
+        };
     }
 
     pub const GetMetricsError = error{
@@ -621,7 +577,7 @@         const post = face.getSfntTable(.post) orelse return error.CopyTableError;
 
         // Read the 'OS/2' table out of the font data.
-        const os2_: ?*freetype.c.TT_OS2 = os2: {
+        const maybe_os2: ?*freetype.c.TT_OS2 = os2: {
             const os2 = face.getSfntTable(.os2) orelse break :os2 null;
             if (os2.version == 0xFFFF) break :os2 null;
             break :os2 os2;
@@ -639,7 +595,7 @@             const hhea_descent: f64 = @floatFromInt(hhea.Descender);
             const hhea_line_gap: f64 = @floatFromInt(hhea.Line_Gap);
 
-            if (os2_) |os2| {
+            if (maybe_os2) |os2| {
                 const os2_ascent: f64 = @floatFromInt(os2.sTypoAscender);
                 const os2_descent: f64 = @floatFromInt(os2.sTypoDescender);
                 const os2_line_gap: f64 = @floatFromInt(os2.sTypoLineGap);
@@ -717,7 +673,7 @@ 
         // Similar logic to the underline above.
         const strikethrough_position, const strikethrough_thickness = st: {
-            const os2 = os2_ orelse break :st .{ null, null };
+            const os2 = maybe_os2 orelse break :st .{ null, null };
 
             const has_broken_strikethrough = os2.yStrikeoutSize == 0;
 
@@ -768,7 +724,7 @@         // We use the cap and ex heights specified by the font if they're
         // available, otherwise we try to measure the `H` and `x` glyphs.
         const cap_height: ?f64, const ex_height: ?f64 = heights: {
-            if (os2_) |os2| {
+            if (maybe_os2) |os2| {
                 // The OS/2 table does not include these metrics in version 1.
                 if (os2.version >= 2) {
                     break :heights .{
@@ -777,7 +733,6 @@                     };
                 }
             }
-
             break :heights .{
                 cap: {
                     if (face.getCharIndex('H')) |glyph_index| {
@@ -826,207 +781,4 @@     pub fn copyTable(self: Face, alloc: Allocator, tag: *const [4]u8) !?[]u8 {
         return try self.face.loadSfntTable(alloc, freetype.Tag.init(tag));
     }
-};
-
-test {
-    const testFont = font.embedded.inconsolata;
-    const alloc = testing.allocator;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        _ = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-    }
-
-    // Test resizing
-    {
-        const g1 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 11), g1.height);
-
-        try ft_font.setSize(.{ .size = .{ .points = 24, .xdpi = 96, .ydpi = 96 } });
-        const g2 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 20), g2.height);
-    }
-}
-
-test "color emoji" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        ft_font.glyphIndex('🥸').?,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // Make sure this glyph has color
-    {
-        try testing.expect(ft_font.hasColor());
-        const glyph_id = ft_font.glyphIndex('🥸').?;
-        try testing.expect(ft_font.isColorGlyph(glyph_id));
-    }
-
-    // resize
-    {
-        const glyph = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('🥸').?,
-            .{ .grid_metrics = .{
-                .cell_width = 10,
-                .cell_height = 24,
-                .cell_baseline = 0,
-                .underline_position = 0,
-                .underline_thickness = 0,
-                .strikethrough_position = 0,
-                .strikethrough_thickness = 0,
-                .overline_position = 0,
-                .overline_thickness = 0,
-                .box_thickness = 0,
-                .cursor_height = 0,
-            } },
-        );
-        try testing.expectEqual(@as(u32, 24), glyph.height);
-    }
-}
-
-test "mono to rgba" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer ft_font.deinit();
-
-    // glyph 3 is mono in Noto
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        3,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-}
-
-test "svg font table" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expectEqual(430, table.len);
-}
-
-const terminus_i =
-    \\........
-    \\........
-    \\...#....
-    \\...#....
-    \\........
-    \\..##....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\..###...
-    \\........
-    \\........
-    \\........
-    \\........
-;
-// Including the newline
-const terminus_i_pitch = 9;
-
-test "bitmap glyph" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.terminus_ttf;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    // Any glyph at 12pt @ 96 DPI is a bitmap
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{
-        .points = 12,
-        .xdpi = 96,
-        .ydpi = 96,
-    } });
-    defer ft_font.deinit();
-
-    // glyph 77 = 'i'
-    const glyph = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        77,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // should render crisp
-    try testing.expectEqual(8, glyph.width);
-    try testing.expectEqual(16, glyph.height);
-    for (0..glyph.height) |y| {
-        for (0..glyph.width) |x| {
-            const pixel = terminus_i[y * terminus_i_pitch + x];
-            try testing.expectEqual(
-                @as(u8, if (pixel == '#') 255 else 0),
-                atlas.data[(glyph.atlas_y + y) * atlas.size + (glyph.atlas_x + x)],
-            );
-        }
-    }
-}+};