--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -8,7 +8,6 @@ const builtin = @import("builtin");
 const freetype = @import("freetype");
 const harfbuzz = @import("harfbuzz");
-const stb = @import("../../stb/main.zig");
 const assert = std.debug.assert;
 const testing = std.testing;
 const Allocator = std.mem.Allocator;
@@ -264,7 +263,7 @@ 
     /// Returns true if this font is colored. This can be used by callers to
     /// determine what kind of atlas to pass in.
-    pub fn hasColor(self: Face) bool {
+    fn hasColor(self: Face) bool {
         return self.face.hasColor();
     }
 
@@ -404,7 +403,7 @@                 result.width = metrics.cell_width * @as(u32, cell_width);
                 result.rows = (result.width * original_height) / original_width;
             } else {
-                // If we don't have a cell_width, we scale to fill vertically
+                // If we don't fit vertically, we scale to fill
                 result.rows = metrics.cell_height;
                 result.width = (metrics.cell_height * original_width) / original_height;
             }
@@ -446,7 +445,7 @@             alloc.free(bm.buffer[0..len]);
         };
 
-        const bitmap = bitmap_resized orelse (bitmap_converted orelse bitmap_ft);
+        const bitmap = bitmap_resized orelse bitmap_original;
         const tgt_w = bitmap.width;
         const tgt_h = bitmap.rows;
 
@@ -562,14 +561,6 @@             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
         return Glyph{
             .width = tgt_w,
@@ -683,350 +674,4 @@                 break :vertical_metrics .{
                     win_ascent * px_per_unit,
                     // usWinDescent is *positive* -> down unlike sTypoDescender
-                    // and hhea.Descender, so we flip its sign to fix this.
-                    -win_descent * px_per_unit,
-                    0.0,
-                };
-            }
-
-            // If our font has no OS/2 table, then we just
-            // blindly use the metrics from the hhea table.
-            break :vertical_metrics .{
-                hhea_ascent * px_per_unit,
-                hhea_descent * px_per_unit,
-                hhea_line_gap * px_per_unit,
-            };
-        };
-
-        // Some fonts have degenerate 'post' tables where the underline
-        // thickness (and often position) are 0. We consider them null
-        // if this is the case and use our own fallbacks when we calculate.
-        const has_broken_underline = post.underlineThickness == 0;
-
-        // If the underline position isn't 0 then we do use it,
-        // even if the thickness is't properly specified.
-        const underline_position = if (has_broken_underline and post.underlinePosition == 0)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
-
-        const underline_thickness = if (has_broken_underline)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
-
-        // Similar logic to the underline above.
-        const strikethrough_position, const strikethrough_thickness = st: {
-            const os2 = os2_ orelse break :st .{ null, null };
-
-            const has_broken_strikethrough = os2.yStrikeoutSize == 0;
-
-            const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 0)
-                null
-            else
-                @as(f64, @floatFromInt(os2.yStrikeoutPosition)) * px_per_unit;
-
-            const thick: ?f64 = if (has_broken_strikethrough)
-                null
-            else
-                @as(f64, @floatFromInt(os2.yStrikeoutSize)) * px_per_unit;
-
-            break :st .{ pos, thick };
-        };
-
-        // Cell width is calculated by calculating the widest width of the
-        // visible ASCII characters. Usually 'M' is widest but we just take
-        // whatever is widest.
-        //
-        // If we fail to load any visible ASCII we just use max_advance from
-        // the metrics provided by FreeType.
-        const cell_width: f64 = cell_width: {
-            var max: f64 = 0.0;
-            var c: u8 = ' ';
-            while (c < 127) : (c += 1) {
-                if (face.getCharIndex(c)) |glyph_index| {
-                    if (face.loadGlyph(glyph_index, .{
-                        .render = true,
-                        .no_svg = true,
-                    })) {
-                        max = @max(
-                            f26dot6ToF64(face.handle.*.glyph.*.advance.x),
-                            max,
-                        );
-                    } else |_| {}
-                }
-            }
-
-            // If we couldn't get any widths, just use FreeType's max_advance.
-            if (max == 0.0) {
-                break :cell_width f26dot6ToF64(size_metrics.max_advance);
-            }
-
-            break :cell_width max;
-        };
-
-        // We use the cap and ex heights specified by the font if they're
-        // available, otherwise we try to measure the `H` and `x` glyphs.
-        const cap_height: ?f64, const ex_height: ?f64 = heights: {
-            if (os2_) |os2| {
-                // The OS/2 table does not include these metrics in version 1.
-                if (os2.version >= 2) {
-                    break :heights .{
-                        @as(f64, @floatFromInt(os2.sCapHeight)) * px_per_unit,
-                        @as(f64, @floatFromInt(os2.sxHeight)) * px_per_unit,
-                    };
-                }
-            }
-
-            break :heights .{
-                cap: {
-                    if (face.getCharIndex('H')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
-                            break :cap f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
-                        } else |_| {}
-                    }
-                    break :cap null;
-                },
-                ex: {
-                    if (face.getCharIndex('x')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
-                            break :ex f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
-                        } else |_| {}
-                    }
-                    break :ex null;
-                },
-            };
-        };
-
-        return .{
-            .cell_width = cell_width,
-
-            .ascent = ascent,
-            .descent = descent,
-            .line_gap = line_gap,
-
-            .underline_position = underline_position,
-            .underline_thickness = underline_thickness,
-
-            .strikethrough_position = strikethrough_position,
-            .strikethrough_thickness = strikethrough_thickness,
-
-            .cap_height = cap_height,
-            .ex_height = ex_height,
-        };
-    }
-
-    /// Copy the font table data for the given tag.
-    pub fn copyTable(self: Face, alloc: Allocator, tag: *const [4]u8) !?[]u8 {
-        return try self.face.loadSfntTable(alloc, freetype.Tag.init(tag));
-    }
-};
-
-test {
-    const testFont = font.embedded.inconsolata;
-    const alloc = testing.allocator;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        _ = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-    }
-
-    // Test resizing
-    {
-        const g1 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 11), g1.height);
-
-        try ft_font.setSize(.{ .size = .{ .points = 24, .xdpi = 96, .ydpi = 96 } });
-        const g2 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 20), g2.height);
-    }
-}
-
-test "color emoji" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        ft_font.glyphIndex('ðŸ¥¸').?,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // Make sure this glyph has color
-    {
-        try testing.expect(ft_font.hasColor());
-        const glyph_id = ft_font.glyphIndex('ðŸ¥¸').?;
-        try testing.expect(ft_font.isColorGlyph(glyph_id));
-    }
-
-    // resize
-    {
-        const glyph = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('ðŸ¥¸').?,
-            .{ .grid_metrics = .{
-                .cell_width = 10,
-                .cell_height = 24,
-                .cell_baseline = 0,
-                .underline_position = 0,
-                .underline_thickness = 0,
-                .strikethrough_position = 0,
-                .strikethrough_thickness = 0,
-                .overline_position = 0,
-                .overline_thickness = 0,
-                .box_thickness = 0,
-                .cursor_height = 0,
-            } },
-        );
-        try testing.expectEqual(@as(u32, 24), glyph.height);
-    }
-}
-
-test "mono to rgba" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer ft_font.deinit();
-
-    // glyph 3 is mono in Noto
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        3,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-}
-
-test "svg font table" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expectEqual(430, table.len);
-}
-
-const terminus_i =
-    \\........
-    \\........
-    \\...#....
-    \\...#....
-    \\........
-    \\..##....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\..###...
-    \\........
-    \\........
-    \\........
-    \\........
-;
-// Including the newline
-const terminus_i_pitch = 9;
-
-test "bitmap glyph" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.terminus_ttf;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    // Any glyph at 12pt @ 96 DPI is a bitmap
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{
-        .points = 12,
-        .xdpi = 96,
-        .ydpi = 96,
-    } });
-    defer ft_font.deinit();
-
-    // glyph 77 = 'i'
-    const glyph = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        77,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // should render crisp
-    try testing.expectEqual(8, glyph.width);
-    try testing.expectEqual(16, glyph.height);
-    for (0..glyph.height) |y| {
-        for (0..glyph.width) |x| {
-            const pixel = terminus_i[y * terminus_i_pitch + x];
-            try testing.expectEqual(
-                @as(u8, if (pixel == '#') 255 else 0),
-                atlas.data[(glyph.atlas_y + y) * atlas.size + (glyph.atlas_x + x)],
-            );
-        }
-    }
-}+                    // and hhea.Descender, so we flip its sign to fix