--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -38,13 +38,16 @@     /// Harfbuzz font corresponding to this face.
     hb_font: harfbuzz.Font,
 
+    /// Metrics for this font face. These are useful for renderers.
+    metrics: font.Metrics,
+
     /// Freetype load flags for this font face.
     load_flags: font.face.FreetypeLoadFlags,
 
     /// Set quirks.disableDefaultFontFeatures
     quirks_disable_default_font_features: bool = false,
 
-    /// Set to true to apply a synthetic italic to the face.
+    /// Synthetic styling modes.
     synthetic: packed struct {
         italic: bool = false,
         bold: bool = false,
@@ -52,10 +55,10 @@ 
     /// The matrix applied to a regular font to create a synthetic italic.
     const italic_matrix: freetype.c.FT_Matrix = .{
-        .xx = 0x10000,
+        .xx = 0x10000, // 1
         .xy = 0x044ED, // approx. tan(15)
         .yx = 0,
-        .yy = 0x10000,
+        .yy = 0x10000, // 1
     };
 
     /// Initialize a new font face with the given source in-memory.
@@ -83,6 +86,7 @@             .lib = lib.lib,
             .face = face,
             .hb_font = hb_font,
+            .metrics = font.Metrics.calc(try getMetricsImpl(face)),
             .load_flags = opts.freetype_load_flags,
         };
         result.quirks_disable_default_font_features = quirks.disableDefaultFontFeatures(&result);
@@ -133,6 +137,9 @@         for (0..count) |i| {
             const entry = self.face.getSfntName(i) catch continue;
             if (entry.name_id == freetype.c.TT_NAME_ID_FONT_FAMILY) {
+                // We don't have the allocator here, but we expect that name isn't allocated outside
+                // since we don't pass an allocator.
+                assert(entry.string.ptr != null);
                 return entry.string[0..entry.string_len];
             }
         }
@@ -182,6 +189,7 @@     /// for clearing any glyph caches, font atlas data, etc.
     pub fn setSize(self: *Face, opts: font.face.Options) !void {
         try setSize_(self.face, opts.size);
+        self.metrics = font.Metrics.calc(try getMetricsImpl(self.face));
     }
 
     fn setSize_(face: freetype.Face, size: font.face.DesiredSize) !void {
@@ -260,12 +268,6 @@     /// face doesn't support this glyph, null is returned.
     pub fn glyphIndex(self: Face, cp: u32) ?u32 {
         return self.face.getCharIndex(cp);
-    }
-
-    /// Returns true if this font is colored. This can be used by callers to
-    /// determine what kind of atlas to pass in.
-    pub fn hasColor(self: Face) bool {
-        return self.face.hasColor();
     }
 
     /// Returns true if the given glyph ID is colorized.
@@ -306,11 +308,16 @@ 
         // If our glyph has color, we want to render the color
         try self.face.loadGlyph(glyph_index, .{
+            .render = !self.synthetic.bold,
             .color = self.face.hasColor(),
 
-            // If we have synthetic bold, we have to set some additional
-            // glyph properties before render so we don't render here.
-            .render = !self.synthetic.bold,
+            // Disable bitmap strikes for now since it causes issues with
+            // our cell metrics and rasterization. In the future, this is
+            // all fixable so we can enable it.
+            //
+            // This must be enabled for color faces though because those are
+            // often colored bitmaps, which we support.
+            .no_bitmap = !self.face.hasColor(),
 
             // use options from config
             .no_hinting = !self.load_flags.hinting,
@@ -337,9 +344,10 @@             try self.face.renderGlyph(.normal);
         }
 
+        const bitmap_ft = glyph.*.bitmap;
+
         // This bitmap is blank. I've seen it happen in a font, I don't know why.
         // If it is empty, we just return a valid glyph struct that does nothing.
-        const bitmap_ft = glyph.*.bitmap;
         if (bitmap_ft.rows == 0) return .{
             .width = 0,
             .height = 0,
@@ -363,20 +371,23 @@                 @panic("unsupported pixel mode");
             },
         };
+        assert(atlas.format == format);
 
         // If our atlas format doesn't match, look for conversions if possible.
-        const bitmap_converted = if (format == null or atlas.format != format.?) blk: {
+        const bitmap_original = bitmap_ft;
+        const bitmap_converted: ?freetype.c.struct_FT_Bitmap_ = blk: {
+            if (format == null or atlas.format != format.?) break :blk null;
+
             const func = convert.map[bitmap_ft.pixel_mode].get(atlas.format) orelse {
-                log.warn("glyph={} pixel mode={}", .{ glyph_index, bitmap_ft.pixel_mode });
+                log.debug("converting from pixel_mode={} to atlas_format={}", .{
+                    bitmap_ft.pixel_mode,
+                    atlas.format,
+                });
                 return error.UnsupportedPixelMode;
             };
 
-            log.debug("converting from pixel_mode={} to atlas_format={}", .{
-                bitmap_ft.pixel_mode,
-                atlas.format,
-            });
             break :blk try func(alloc, bitmap_ft);
-        } else null;
+        };
         defer if (bitmap_converted) |bm| {
             const len = @as(usize, @intCast(bm.pitch)) * @as(usize, @intCast(bm.rows));
             alloc.free(bm.buffer[0..len]);
@@ -389,7 +400,6 @@         // the atlas and force resizes quite frequently. We pay some CPU cost
         // up front to resize the glyph to avoid significant CPU cost to resize
         // and copy the atlas.
-        const bitmap_original = bitmap_converted orelse bitmap_ft;
         const bitmap_resized: ?freetype.c.struct_FT_Bitmap_ = resized: {
             const original_width = bitmap_original.width;
             const original_height = bitmap_original.rows;
@@ -446,7 +456,8 @@             alloc.free(bm.buffer[0..len]);
         };
 
-        const bitmap = bitmap_resized orelse (bitmap_converted orelse bitmap_ft);
+
+        const bitmap = bitmap_resized orelse (bitmap_converted orelse bitmap_original);
         const tgt_w = bitmap.width;
         const tgt_h = bitmap.rows;
 
@@ -462,7 +473,7 @@             // Our ratio for the resize
             const ratio = ratio: {
                 const new: f64 = @floatFromInt(bm.rows);
-                const old: f64 = @floatFromInt(bitmap_original.rows);
+                const old: f64 = @floatFromInt((bitmap_converted orelse bitmap_original).rows);
                 break :ratio new / old;
             };
 
@@ -606,8 +617,13 @@ 
     /// Get the `FaceMetrics` for this face.
     pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
-        const face = self.face;
-
+        return try getMetricsImpl(self.face);
+    }
+
+    /// Calculate the opentype metrics associated with a face. This is not public
+    /// because these metrics are only meaningful when used to calculate the final
+    /// `font.Metrics` which is publicly accessable.
+    fn getMetricsImpl(face: freetype.Face) GetMetricsError!font.Metrics.FaceMetrics {
         const size_metrics = face.handle.*.size.*.metrics;
 
         // This code relies on this assumption, and it should always be
@@ -714,6 +730,7 @@             null
         else
             @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
+
 
         // Similar logic to the underline above.
         const strikethrough_position, const strikethrough_thickness = st: {
@@ -745,10 +762,7 @@             var c: u8 = ' ';
             while (c < 127) : (c += 1) {
                 if (face.getCharIndex(c)) |glyph_index| {
-                    if (face.loadGlyph(glyph_index, .{
-                        .render = true,
-                        .no_svg = true,
-                    })) {
+                    if (face.loadGlyph(glyph_index, .{ .render = true, .no_svg = true })) {
                         max = @max(
                             f26dot6ToF64(face.handle.*.glyph.*.advance.x),
                             max,
@@ -781,10 +795,7 @@             break :heights .{
                 cap: {
                     if (face.getCharIndex('H')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
+                        if (face.loadGlyph(glyph_index, .{ .render = true, .no_svg = true })) {
                             break :cap f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
                         } else |_| {}
                     }
@@ -792,10 +803,7 @@                 },
                 ex: {
                     if (face.getCharIndex('x')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
+                        if (face.loadGlyph(glyph_index, .{ .render = true, .no_svg = true })) {
                             break :ex f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
                         } else |_| {}
                     }
@@ -903,7 +911,7 @@ 
     // Make sure this glyph has color
     {
-        try testing.expect(ft_font.hasColor());
+        try testing.expect(ft_font.face.hasColor());
         const glyph_id = ft_font.glyphIndex('ðŸ¥¸').?;
         try testing.expect(ft_font.isColorGlyph(glyph_id));
     }
