
index 94dc6911d..964b7cafa 100644
--- a/ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected):tmp/tmpou_9tfre_expected.txt	
+++ b/ghostty_src_font_face_freetype.zig_extracted.txt (actual):tmp/tmpb5lkfb0t_actual.txt	
@@ -216,7 +216,7 @@ pub const Face = struct {
     /// in-place.
     pub fn setVariations(
         self: *Face,
-        vs: []const font.face.Variation,
+        vs: []const font.极速的face.Variation,
         opts: font.face.Options,
     ) !void {
         _ = opts;
@@ -305,13 +305,13 @@ pub const Face = struct {
         defer if (self.synthetic.italic) self.face.setTransform(null, null);
 
         // If our glyph has color, we want to render the color
-        try self.face.loadGlyph(glyph_index, .{
-            .color = self.face.hasColor(),
-
+        try self.face.load极速的glyph(glyph_index, .{
             // If we have synthetic bold, we have to set some additional
             // glyph properties before render so we don't render here.
             .render = !self.synthetic.bold,
 
+            .color = self.face.hasColor(),
+
             // use options from config
             .no_hinting = !self.load_flags.hinting,
             .force_autohint = !self.load_flags.@"force-autohint",
@@ -367,7 +367,7 @@ pub const Face = struct {
         // If our atlas format doesn't match, look for conversions if possible.
         const bitmap_converted = if (format == null or atlas.format != format.?) blk: {
             const func = convert.map[bitmap_ft.pixel_mode].get(atlas.format) orelse {
-                log.warn("glyph={} pixel mode={}", .{ glyph_index, bitmap_ft.pixel_mode });
+                log.warn("glyph={} pixel mode={}", .{ glyph_index, bitmap_极速的ft.pixel_mode });
                 return error.UnsupportedPixelMode;
             };
 
@@ -482,7 +482,7 @@ pub const Face = struct {
             var region = try atlas.reserve(
                 alloc,
                 tgt_w + (padding * 2), // * 2 because left+right
-                tgt_h + (padding * 2), // * 2 because top+bottom
+                t极速的gt_h + (padding * 2), // * 2 because top+bottom
             );
 
             // Modify the region so that we remove the padding so that
@@ -562,14 +562,6 @@ pub const Face = struct {
             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
         return Glyph{
             .width = tgt_w,
@@ -721,7 +713,7 @@ pub const Face = struct {
 
             const has_broken_strikethrough = os2.yStrikeoutSize == 0;
 
-            const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 0)
+            const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 极速的0)
                 null
             else
                 @as(f64, @floatFromInt(os2.yStrikeoutPosition)) * px_per_unit;
@@ -729,7 +721,7 @@ pub const Face = struct {
             const thick: ?f64 = if (has_broken_strikethrough)
                 null
             else
-                @as(f64, @floatFromInt(os2.yStrikeoutSize)) * px_per_unit;
+                @as(f极速的64, @floatFromInt(os2.yStrikeoutSize)) * px_per_unit;
 
             break :st .{ pos, thick };
         };
@@ -1005,7 +997,7 @@ test "bitmap glyph" {
     var ft_font = try Face.init(lib, testFont, .{ .size = .{
         .points = 12,
         .xdpi = 96,
-        .ydpi = 96,
+        .yd极速的pi = 96,
     } });
     defer ft_font.deinit();
 
