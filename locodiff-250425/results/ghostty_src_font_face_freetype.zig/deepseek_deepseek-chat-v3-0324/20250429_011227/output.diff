--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -264,7 +264,7 @@ 
     /// Returns true if this font is colored. This can be used by callers to
     /// determine what kind of atlas to pass in.
-    pub fn hasColor(self: Face) bool {
+    fn hasColor(self: Face) bool {
         return self.face.hasColor();
     }
 
@@ -306,6 +306,7 @@ 
         // If our glyph has color, we want to render the color
         try self.face.loadGlyph(glyph_index, .{
+            .render = true,
             .color = self.face.hasColor(),
 
             // If we have synthetic bold, we have to set some additional
@@ -562,14 +563,6 @@             break :offset_x result;
         };
 
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
-
         // Store glyph metadata
         return Glyph{
             .width = tgt_w,
@@ -826,207 +819,4 @@     pub fn copyTable(self: Face, alloc: Allocator, tag: *const [4]u8) !?[]u8 {
         return try self.face.loadSfntTable(alloc, freetype.Tag.init(tag));
     }
-};
-
-test {
-    const testFont = font.embedded.inconsolata;
-    const alloc = testing.allocator;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        _ = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-    }
-
-    // Test resizing
-    {
-        const g1 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 11), g1.height);
-
-        try ft_font.setSize(.{ .size = .{ .points = 24, .xdpi = 96, .ydpi = 96 } });
-        const g2 = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('A').?,
-            .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-        );
-        try testing.expectEqual(@as(u32, 20), g2.height);
-    }
-}
-
-test "color emoji" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    );
-    defer ft_font.deinit();
-
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        ft_font.glyphIndex('ðŸ¥¸').?,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // Make sure this glyph has color
-    {
-        try testing.expect(ft_font.hasColor());
-        const glyph_id = ft_font.glyphIndex('ðŸ¥¸').?;
-        try testing.expect(ft_font.isColorGlyph(glyph_id));
-    }
-
-    // resize
-    {
-        const glyph = try ft_font.renderGlyph(
-            alloc,
-            &atlas,
-            ft_font.glyphIndex('ðŸ¥¸').?,
-            .{ .grid_metrics = .{
-                .cell_width = 10,
-                .cell_height = 24,
-                .cell_baseline = 0,
-                .underline_position = 0,
-                .underline_thickness = 0,
-                .strikethrough_position = 0,
-                .strikethrough_thickness = 0,
-                .overline_position = 0,
-                .overline_thickness = 0,
-                .box_thickness = 0,
-                .cursor_height = 0,
-            } },
-        );
-        try testing.expectEqual(@as(u32, 24), glyph.height);
-    }
-}
-
-test "mono to rgba" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .rgba);
-    defer atlas.deinit(alloc);
-
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer ft_font.deinit();
-
-    // glyph 3 is mono in Noto
-    _ = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        3,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-}
-
-test "svg font table" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12, .xdpi = 72, .ydpi = 72 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expectEqual(430, table.len);
-}
-
-const terminus_i =
-    \\........
-    \\........
-    \\...#....
-    \\...#....
-    \\........
-    \\..##....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\...#....
-    \\..###...
-    \\........
-    \\........
-    \\........
-    \\........
-;
-// Including the newline
-const terminus_i_pitch = 9;
-
-test "bitmap glyph" {
-    const alloc = testing.allocator;
-    const testFont = font.embedded.terminus_ttf;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    // Any glyph at 12pt @ 96 DPI is a bitmap
-    var ft_font = try Face.init(lib, testFont, .{ .size = .{
-        .points = 12,
-        .xdpi = 96,
-        .ydpi = 96,
-    } });
-    defer ft_font.deinit();
-
-    // glyph 77 = 'i'
-    const glyph = try ft_font.renderGlyph(
-        alloc,
-        &atlas,
-        77,
-        .{ .grid_metrics = font.Metrics.calc(try ft_font.getMetrics()) },
-    );
-
-    // should render crisp
-    try testing.expectEqual(8, glyph.width);
-    try testing.expectEqual(16, glyph.height);
-    for (0..glyph.height) |y| {
-        for (0..glyph.width) |x| {
-            const pixel = terminus_i[y * terminus_i_pitch + x];
-            try testing.expectEqual(
-                @as(u8, if (pixel == '#') 255 else 0),
-                atlas.data[(glyph.atlas_y + y) * atlas.size + (glyph.atlas_x + x)],
-            );
-        }
-    }
-}+};