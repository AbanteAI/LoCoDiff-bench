--- ghostty_src_font_face_freetype.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_freetype.zig_extracted.txt (actual)@@ -9,17 +9,18 @@ const freetype = @import("freetype");
 const harfbuzz = @import("harfbuzz");
 const stb = @import("../../stb/main.zig");
+const opentype = @import("../opentype.zig");
 const assert = std.debug.assert;
 const testing = std.testing;
 const Allocator = std.mem.Allocator;
+
 const font = @import("../main.zig");
 const Glyph = font.Glyph;
 const Library = font.Library;
+
 const convert = @import("freetype_convert.zig");
-const opentype = @import("../opentype.zig");
 const fastmem = @import("../../fastmem.zig");
 const quirks = @import("../../quirks.zig");
-const config = @import("../../config.zig");
 
 const log = std.log.scoped(.font_face);
 
@@ -178,10 +179,13 @@         return f;
     }
 
+    /// Deinitialize. handled earlier but we have self destructor.
+
     /// Resize the font in-place. If this succeeds, the caller is responsible
     /// for clearing any glyph caches, font atlas data, etc.
     pub fn setSize(self: *Face, opts: font.face.Options) !void {
         try setSize_(self.face, opts.size);
+        // Metrics are now handled by collections.
     }
 
     fn setSize_(face: freetype.Face, size: font.face.DesiredSize) !void {
@@ -276,14 +280,11 @@         self.face.loadGlyph(glyph_id, .{
             .render = true,
             .color = self.face.hasColor(),
-            // NO_SVG set to true because we don't currently support rendering
-            // SVG glyphs under FreeType, since that requires bundling another
-            // dependency to handle rendering the SVG.
+            // We don't support SVG rendering under FreeType currently.
             .no_svg = true,
         }) catch return false;
 
         const glyph = self.face.handle.*.glyph;
-
         return glyph.*.bitmap.pixel_mode == freetype.c.FT_PIXEL_MODE_BGRA;
     }
 
@@ -306,6 +307,7 @@ 
         // If our glyph has color, we want to render the color
         try self.face.loadGlyph(glyph_index, .{
+            .render = true,
             .color = self.face.hasColor(),
 
             // If we have synthetic bold, we have to set some additional
@@ -318,9 +320,7 @@             .monochrome = !self.load_flags.monochrome,
             .no_autohint = !self.load_flags.autohint,
 
-            // NO_SVG set to true because we don't currently support rendering
-            // SVG glyphs under FreeType, since that requires bundling another
-            // dependency to handle rendering the SVG.
+            // We don't support SVG rendering under FreeType currently.
             .no_svg = true,
         });
         const glyph = self.face.handle.*.glyph;
@@ -329,7 +329,7 @@         if (self.synthetic.bold) {
             // We need to scale the embolden amount based on the font size.
             // This is a heuristic I found worked well across a variety of
-            // founts: 1 pixel per 64 units of height.
+            // fonts: 1 pixel per 64 units of height.
             const height: f64 = @floatFromInt(self.face.handle.*.size.*.metrics.height);
             const ratio: f64 = 64.0 / 2048.0;
             const amount = @ceil(height * ratio);
@@ -394,25 +394,20 @@             const original_width = bitmap_original.width;
             const original_height = bitmap_original.rows;
             var result = bitmap_original;
-            // TODO: We are limiting this to only color glyphs, so mainly emoji.
-            // We can rework this after a future improvement (promised by Qwerasd)
-            // which implements more flexible resizing rules.
+            // Constrain colored glyphs (e.g. emoji) to within cell(s) width.
             if (atlas.format != .grayscale and opts.cell_width != null) {
                 const cell_width = opts.cell_width orelse unreachable;
-                // If we have a cell_width, we constrain
-                // the glyph to fit within the cell(s).
                 result.width = metrics.cell_width * @as(u32, cell_width);
                 result.rows = (result.width * original_height) / original_width;
             } else {
-                // If we don't have a cell_width, we scale to fill vertically
+                // Otherwise scale to fill vertically.
                 result.rows = metrics.cell_height;
                 result.width = (metrics.cell_height * original_width) / original_height;
             }
 
-            // If we already fit, we don't need to resize
-            if (original_height <= result.rows and original_width <= result.width) {
+            // If we already fit, don't resize.
+            if (original_height <= result.rows and original_width <= result.width)
                 break :resized null;
-            }
 
             result.pitch = @as(c_int, @intCast(result.width)) * atlas.format.depth();
 
@@ -434,8 +429,6 @@                 result.pitch,
                 atlas.format.depth(),
             ) == 0) {
-                // This should never fail because this is a fairly straightforward
-                // in-memory operation...
                 return error.GlyphResizeFailed;
             }
 
@@ -451,49 +444,45 @@         const tgt_h = bitmap.rows;
 
         // Must have non-empty bitmap because we return earlier
-        // if zero. We assume the rest of this that it is nont-zero so
+        // if zero. We assume the rest of this that it is non-zero so
         // this is important.
         assert(tgt_w > 0 and tgt_h > 0);
 
         // If we resized our bitmap, we need to recalculate some metrics that
         // we use such as the top/left offsets. These need to be scaled by the
         // same ratio as the resize.
-        const glyph_metrics = if (bitmap_resized) |bm| metrics: {
+        const glyph_metrics = if (bitmap_resized) |bm| metrics_scaled: {
             // Our ratio for the resize
-            const ratio = ratio: {
-                const new: f64 = @floatFromInt(bm.rows);
-                const old: f64 = @floatFromInt(bitmap_original.rows);
-                break :ratio new / old;
-            };
+            const ratio: f64 = @floatFromInt(bm.rows) / @floatFromInt(bitmap_original.rows);
 
             var copy = glyph.*;
             copy.bitmap_top = @as(c_int, @intFromFloat(@round(@as(f64, @floatFromInt(copy.bitmap_top)) * ratio)));
             copy.bitmap_left = @as(c_int, @intFromFloat(@round(@as(f64, @floatFromInt(copy.bitmap_left)) * ratio)));
-            break :metrics copy;
+            break :metrics_scaled copy;
         } else glyph.*;
 
         // Allocate our texture atlas region
-        const region = region: {
+        const region = region_blk: {
             // We need to add a 1px padding to the font so that we don't
             // get fuzzy issues when blending textures.
             const padding = 1;
 
             // Get the full padded region
-            var region = try atlas.reserve(
+            var r = try atlas.reserve(
                 alloc,
-                tgt_w + (padding * 2), // * 2 because left+right
-                tgt_h + (padding * 2), // * 2 because top+bottom
+                tgt_w + (padding * 2), // left+right
+                tgt_h + (padding * 2), // top+bottom
             );
 
             // Modify the region so that we remove the padding so that
             // we write to the non-zero location. The data in an Altlas
             // is always initialized to zero (Atlas.clear) so we don't
             // need to worry about zero-ing that.
-            region.x += padding;
-            region.y += padding;
-            region.width -= padding * 2;
-            region.height -= padding * 2;
-            break :region region;
+            r.x += padding;
+            r.y += padding;
+            r.width -= padding * 2;
+            r.height -= padding * 2;
+            break :region_blk r;
         };
 
         // Copy the image into the region.
@@ -507,7 +496,7 @@             const needs_copy = !(tgt_w == bitmap.width and (bitmap.width * depth) == bitmap.pitch);
 
             // If we need to copy the data, we copy it into a temporary buffer.
-            const buffer = if (needs_copy) buffer: {
+            const buffer = if (needs_copy) buffer_blk: {
                 const temp = try alloc.alloc(u8, tgt_w * tgt_h * depth);
                 var dst_ptr = temp;
                 var src_ptr = bitmap.buffer;
@@ -517,8 +506,8 @@                     dst_ptr = dst_ptr[tgt_w * depth ..];
                     src_ptr += @as(usize, @intCast(bitmap.pitch));
                 }
-                break :buffer temp;
-            } else bitmap.buffer[0..(tgt_w * tgt_h * depth)];
+                break :buffer_blk temp;
+            } else bitmap.buffer[0 .. (tgt_w * tgt_h * depth)];
             defer if (buffer.ptr != bitmap.buffer) alloc.free(buffer);
 
             // Write the glyph information into the atlas
@@ -527,31 +516,25 @@             atlas.set(region, buffer);
         }
 
-        const offset_y: c_int = offset_y: {
+        const offset_y: c_int = offset_y_calc: {
             // For non-scalable colorized fonts, we assume they are pictographic
             // and just center the glyph. So far this has only applied to emoji
-            // fonts. Emoji fonts don't always report a correct ascender/descender
-            // (mainly Apple Emoji) so we just center them. Also, since emoji font
-            // aren't scalable, cell_baseline is incorrect anyways.
-            //
-            // NOTE(mitchellh): I don't know if this is right, this doesn't
-            // _feel_ right, but it makes all my limited test cases work.
+            // fonts.
             if (self.face.hasColor() and !self.face.isScalable()) {
-                break :offset_y @intCast(tgt_h + (metrics.cell_height -| tgt_h) / 2);
+                break :offset_y_calc @intCast(tgt_h + (metrics.cell_height -| tgt_h) / 2);
             }
 
             // The Y offset is the offset of the top of our bitmap PLUS our
             // baseline calculation. The baseline calculation is so that everything
             // is properly centered when we render it out into a monospace grid.
             // Note: we add here because our X/Y is actually reversed, adding goes UP.
-            break :offset_y glyph_metrics.bitmap_top + @as(c_int, @intCast(metrics.cell_baseline));
-        };
-
-        const offset_x: i32 = offset_x: {
+            break :offset_y_calc glyph_metrics.bitmap_top + @as(c_int, @intCast(metrics.cell_baseline));
+        };
+
+        const offset_x: i32 = offset_x_calc: {
             var result: i32 = glyph_metrics.bitmap_left;
 
-            // If our cell was resized to be wider then we center our
-            // glyph in the cell.
+            // If our cell was resized to be wider then we center our glyph.
             if (metrics.original_cell_width) |original_width| {
                 if (original_width < metrics.cell_width) {
                     const diff = (metrics.cell_width - original_width) / 2;
@@ -559,19 +542,11 @@                 }
             }
 
-            break :offset_x result;
-        };
-
-        // log.warn("renderGlyph width={} height={} offset_x={} offset_y={} glyph_metrics={}", .{
-        //     tgt_w,
-        //     tgt_h,
-        //     glyph_metrics.bitmap_left,
-        //     offset_y,
-        //     glyph_metrics,
-        // });
+            break :offset_x_calc result;
+        };
 
         // Store glyph metadata
-        return Glyph{
+        return .{
             .width = tgt_w,
             .height = tgt_h,
             .offset_x = offset_x,
@@ -600,41 +575,33 @@         return @as(opentype.sfnt.F26Dot6, @bitCast(@as(u32, @intCast(v)))).to(f64);
     }
 
-    pub const GetMetricsError = error{
-        CopyTableError,
-    };
-
     /// Get the `FaceMetrics` for this face.
     pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
         const face = self.face;
 
         const size_metrics = face.handle.*.size.*.metrics;
 
-        // This code relies on this assumption, and it should always be
-        // true since we don't do any non-uniform scaling on the font ever.
+        // This code relies on this assumption.
         assert(size_metrics.x_ppem == size_metrics.y_ppem);
 
-        // Read the 'head' table out of the font data.
+        // Read required tables
         const head = face.getSfntTable(.head) orelse return error.CopyTableError;
-
-        // Read the 'post' table out of the font data.
         const post = face.getSfntTable(.post) orelse return error.CopyTableError;
 
-        // Read the 'OS/2' table out of the font data.
-        const os2_: ?*freetype.c.TT_OS2 = os2: {
-            const os2 = face.getSfntTable(.os2) orelse break :os2 null;
-            if (os2.version == 0xFFFF) break :os2 null;
-            break :os2 os2;
-        };
-
-        // Read the 'hhea' table out of the font data.
+        const os2_: ?*freetype.c.TT_OS2 = blk: {
+            const os2t = face.getSfntTable(.os2) orelse break :blk null;
+            if (os2t.version == 0xFFFF) break :blk null;
+            break :blk os2t;
+        };
+
         const hhea = face.getSfntTable(.hhea) orelse return error.CopyTableError;
 
         const units_per_em = head.Units_Per_EM;
         const px_per_em: f64 = @floatFromInt(size_metrics.y_ppem);
         const px_per_unit = px_per_em / @as(f64, @floatFromInt(units_per_em));
 
-        const ascent: f64, const descent: f64, const line_gap: f64 = vertical_metrics: {
+        // Vertical metrics
+        const ascent: f64, const descent: f64, const line_gap: f64 = vm: {
             const hhea_ascent: f64 = @floatFromInt(hhea.Ascender);
             const hhea_descent: f64 = @floatFromInt(hhea.Descender);
             const hhea_line_gap: f64 = @floatFromInt(hhea.Line_Gap);
@@ -644,132 +611,78 @@                 const os2_descent: f64 = @floatFromInt(os2.sTypoDescender);
                 const os2_line_gap: f64 = @floatFromInt(os2.sTypoLineGap);
 
-                // If the font says to use typo metrics, trust it.
-                // (The USE_TYPO_METRICS bit is bit 7)
+                // USE_TYPO_METRICS bit
                 if (os2.fsSelection & (1 << 7) != 0) {
-                    break :vertical_metrics .{
-                        os2_ascent * px_per_unit,
-                        os2_descent * px_per_unit,
-                        os2_line_gap * px_per_unit,
-                    };
+                    break :vm .{ os2_ascent * px_per_unit, os2_descent * px_per_unit, os2_line_gap * px_per_unit };
                 }
 
-                // Otherwise we prefer the height metrics from 'hhea' if they
-                // are available, or else OS/2 sTypo* metrics, and if all else
-                // fails then we use OS/2 usWin* metrics.
-                //
-                // This is not "standard" behavior, but it's our best bet to
-                // account for fonts being... just weird. It's pretty much what
-                // FreeType does to get its generic ascent and descent metrics.
-
                 if (hhea.Ascender != 0 or hhea.Descender != 0) {
-                    break :vertical_metrics .{
-                        hhea_ascent * px_per_unit,
-                        hhea_descent * px_per_unit,
-                        hhea_line_gap * px_per_unit,
-                    };
+                    break :vm .{ hhea_ascent * px_per_unit, hhea_descent * px_per_unit, hhea_line_gap * px_per_unit };
                 }
 
                 if (os2_ascent != 0 or os2_descent != 0) {
-                    break :vertical_metrics .{
-                        os2_ascent * px_per_unit,
-                        os2_descent * px_per_unit,
-                        os2_line_gap * px_per_unit,
-                    };
+                    break :vm .{ os2_ascent * px_per_unit, os2_descent * px_per_unit, os2_line_gap * px_per_unit };
                 }
 
                 const win_ascent: f64 = @floatFromInt(os2.usWinAscent);
                 const win_descent: f64 = @floatFromInt(os2.usWinDescent);
-                break :vertical_metrics .{
+                break :vm .{
                     win_ascent * px_per_unit,
-                    // usWinDescent is *positive* -> down unlike sTypoDescender
-                    // and hhea.Descender, so we flip its sign to fix this.
                     -win_descent * px_per_unit,
                     0.0,
                 };
             }
 
-            // If our font has no OS/2 table, then we just
-            // blindly use the metrics from the hhea table.
-            break :vertical_metrics .{
-                hhea_ascent * px_per_unit,
-                hhea_descent * px_per_unit,
-                hhea_line_gap * px_per_unit,
-            };
-        };
-
-        // Some fonts have degenerate 'post' tables where the underline
-        // thickness (and often position) are 0. We consider them null
-        // if this is the case and use our own fallbacks when we calculate.
+            // No OS/2 table
+            break :vm .{ hhea_ascent * px_per_unit, hhea_descent * px_per_unit, hhea_line_gap * px_per_unit };
+        };
+
+        // underline / strikethrough metrics
         const has_broken_underline = post.underlineThickness == 0;
-
-        // If the underline position isn't 0 then we do use it,
-        // even if the thickness is't properly specified.
-        const underline_position = if (has_broken_underline and post.underlinePosition == 0)
+        const underline_position: ?f64 = if (has_broken_underline and post.underlinePosition == 0)
             null
         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
-
-        const underline_thickness = if (has_broken_underline)
+        const underline_thickness: ?f64 = if (has_broken_underline)
             null
         else
             @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
 
-        // Similar logic to the underline above.
-        const strikethrough_position, const strikethrough_thickness = st: {
-            const os2 = os2_ orelse break :st .{ null, null };
-
-            const has_broken_strikethrough = os2.yStrikeoutSize == 0;
-
-            const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 0)
+        const strikethrough_position: ?f64, const strikethrough_thickness: ?f64 = blk_st: {
+            const os2 = os2_ orelse break :blk_st .{ null, null };
+
+            const broken = os2.yStrikeoutSize == 0;
+            const pos: ?f64 = if (broken and os2.yStrikeoutPosition == 0)
                 null
             else
                 @as(f64, @floatFromInt(os2.yStrikeoutPosition)) * px_per_unit;
 
-            const thick: ?f64 = if (has_broken_strikethrough)
+            const thick: ?f64 = if (broken)
                 null
             else
                 @as(f64, @floatFromInt(os2.yStrikeoutSize)) * px_per_unit;
 
-            break :st .{ pos, thick };
-        };
-
-        // Cell width is calculated by calculating the widest width of the
-        // visible ASCII characters. Usually 'M' is widest but we just take
-        // whatever is widest.
-        //
-        // If we fail to load any visible ASCII we just use max_advance from
-        // the metrics provided by FreeType.
-        const cell_width: f64 = cell_width: {
-            var max: f64 = 0.0;
+            break :blk_st .{ pos, thick };
+        };
+
+        // Cell width
+        const cell_width: f64 = cw: {
+            var max_width: f64 = 0.0;
             var c: u8 = ' ';
             while (c < 127) : (c += 1) {
-                if (face.getCharIndex(c)) |glyph_index| {
-                    if (face.loadGlyph(glyph_index, .{
-                        .render = true,
-                        .no_svg = true,
-                    })) {
-                        max = @max(
-                            f26dot6ToF64(face.handle.*.glyph.*.advance.x),
-                            max,
-                        );
-                    } else |_| {}
+                if (face.getCharIndex(c)) |gid| {
+                    if (face.loadGlyph(gid, .{ .render = true, .no_svg = true })) {
+                        max_width = @max(max_width, f26dot6ToF64(face.handle.*.glyph.*.advance.x));
+                    }
                 }
             }
-
-            // If we couldn't get any widths, just use FreeType's max_advance.
-            if (max == 0.0) {
-                break :cell_width f26dot6ToF64(size_metrics.max_advance);
-            }
-
-            break :cell_width max;
-        };
-
-        // We use the cap and ex heights specified by the font if they're
-        // available, otherwise we try to measure the `H` and `x` glyphs.
+            if (max_width == 0.0) break :cw f26dot6ToF64(size_metrics.max_advance);
+            break :cw max_width;
+        };
+
+        // Heights
         const cap_height: ?f64, const ex_height: ?f64 = heights: {
             if (os2_) |os2| {
-                // The OS/2 table does not include these metrics in version 1.
                 if (os2.version >= 2) {
                     break :heights .{
                         @as(f64, @floatFromInt(os2.sCapHeight)) * px_per_unit,
@@ -777,56 +690,53 @@                     };
                 }
             }
-
             break :heights .{
-                cap: {
-                    if (face.getCharIndex('H')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
-                            break :cap f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
-                        } else |_| {}
+                cap_blk: {
+                    if (face.getCharIndex('H')) |gid| {
+                        if (face.loadGlyph(gid, .{ .render = true, .no_svg = true })) {
+                            break :cap_blk f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
+                        }
                     }
-                    break :cap null;
+                    break :cap_blk null;
                 },
-                ex: {
-                    if (face.getCharIndex('x')) |glyph_index| {
-                        if (face.loadGlyph(glyph_index, .{
-                            .render = true,
-                            .no_svg = true,
-                        })) {
-                            break :ex f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
-                        } else |_| {}
+                ex_blk: {
+                    if (face.getCharIndex('x')) |gid| {
+                        if (face.loadGlyph(gid, .{ .render = true, .no_svg = true })) {
+                            break :ex_blk f26dot6ToF64(face.handle.*.glyph.*.metrics.height);
+                        }
                     }
-                    break :ex null;
+                    break :ex_blk null;
                 },
             };
         };
 
         return .{
             .cell_width = cell_width,
-
             .ascent = ascent,
             .descent = descent,
             .line_gap = line_gap,
-
             .underline_position = underline_position,
             .underline_thickness = underline_thickness,
-
             .strikethrough_position = strikethrough_position,
             .strikethrough_thickness = strikethrough_thickness,
-
             .cap_height = cap_height,
             .ex_height = ex_height,
         };
     }
+
+    const GetMetricsError = error{
+        CopyTableError,
+    };
 
     /// Copy the font table data for the given tag.
     pub fn copyTable(self: Face, alloc: Allocator, tag: *const [4]u8) !?[]u8 {
         return try self.face.loadSfntTable(alloc, freetype.Tag.init(tag));
     }
 };
+
+////////////////////////////////////////////////////////////////////////////////
+// Tests
+////////////////////////////////////////////////////////////////////////////////
 
 test {
     const testFont = font.embedded.inconsolata;
@@ -914,19 +824,21 @@             alloc,
             &atlas,
             ft_font.glyphIndex('🥸').?,
-            .{ .grid_metrics = .{
-                .cell_width = 10,
-                .cell_height = 24,
-                .cell_baseline = 0,
-                .underline_position = 0,
-                .underline_thickness = 0,
-                .strikethrough_position = 0,
-                .strikethrough_thickness = 0,
-                .overline_position = 0,
-                .overline_thickness = 0,
-                .box_thickness = 0,
-                .cursor_height = 0,
-            } },
+            .{
+                .grid_metrics = .{
+                    .cell_width = 10,
+                    .cell_height = 24,
+                    .cell_baseline = 0,
+                    .underline_position = 0,
+                    .underline_thickness = 0,
+                    .strikethrough_position = 0,
+                    .strikethrough_thickness = 0,
+                    .overline_position = 0,
+                    .overline_thickness = 0,
+                    .box_thickness = 0,
+                    .cursor_height = 0,
+                },
+            },
         );
         try testing.expectEqual(@as(u32, 24), glyph.height);
     }
