--- ghostty_src_App.zig_expectedoutput.txt (expected)+++ ghostty_src_App.zig_extracted.txt (actual)@@ -1,8 +1,3 @@-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
-const App = @This();
-
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
@@ -25,11 +20,17 @@ 
 const SurfaceList = std.ArrayListUnmanaged(*apprt.Surface);
 
+const App = @This();
+
 /// General purpose allocator
 alloc: Allocator,
 
 /// The list of surfaces that are currently active.
 surfaces: SurfaceList,
+
+/// The mailbox that can be used to send this thread messages. Note
+/// this is a blocking queue so if it is full you will get errors (or block).
+mailbox: Mailbox.Queue,
 
 /// This is true if the app that Ghostty is in is focused. This may
 /// mean that no surfaces (terminals) are focused but the app is still
@@ -50,24 +51,15 @@ /// you must always call hasSurface to validate it.
 focused_surface: ?*Surface = null,
 
-/// The mailbox that can be used to send this thread messages. Note
-/// this is a blocking queue so if it is full you will get errors (or block).
-mailbox: Mailbox.Queue,
-
-/// The set of font GroupCache instances shared by surfaces with the
-/// same font configuration.
-font_grid_set: font.SharedGridSet,
-
 // Used to rate limit desktop notifications. Some platforms (notably macOS) will
 // run out of resources if desktop notifications are sent too fast and the OS
 // will kill Ghostty.
 last_notification_time: ?std.time.Instant = null,
 last_notification_digest: u64 = 0,
 
-/// The conditional state of the configuration. See the equivalent field
-/// in the Surface struct for more information. In this case, this applies
-/// to the app-level config and as a default for new surfaces.
-config_conditional_state: configpkg.ConditionalState,
+/// The set of font GroupCache instances shared by surfaces with the
+/// same font configuration.
+font_grid_set: font.SharedGridSet,
 
 /// Set to false once we've created at least one surface. This
 /// never goes true again. This can be used by surfaces to determine
@@ -95,8 +87,10 @@         .alloc = alloc,
         .surfaces = .{},
         .mailbox = .{},
+        .quit = false,
         .font_grid_set = font_grid_set,
         .config_conditional_state = .{},
+        .first = true,
     };
     errdefer app.surfaces.deinit(alloc);
 
@@ -104,7 +98,6 @@ }
 
 pub fn destroy(self: *App) void {
-    // Clean up all our surfaces
     for (self.surfaces.items) |surface| surface.deinit();
     self.surfaces.deinit(self.alloc);
 
@@ -112,10 +105,16 @@     // We should have zero items in the grid set at this point because
     // destroy only gets called when the app is shutting down and this
     // should gracefully close all surfaces.
-    assert(self.font_grid_set.count() == 0);
+    assert(self.font_grid_set.len() == 0);
     self.font_grid_set.deinit();
 
     self.alloc.destroy(self);
+}
+
+///_WAKEUP_
+/// Request the app runtime to process app events via tick.
+pub fn wakeup(self: App) void {
+    if (self.wakeup_cb) |cb| cb();
 }
 
 /// Tick ticks the app loop. This will drain our mailbox and process those
@@ -126,8 +125,9 @@     var i: usize = 0;
     while (i < self.surfaces.items.len) {
         const surface = self.surfaces.items[i];
+        if (i == 0) self.first = false;
         if (surface.shouldClose()) {
-            surface.close(false);
+            surface.close();
             continue;
         }
 
@@ -161,26 +161,20 @@     const applied: *const configpkg.Config = if (applied_) |*c| c else config;
 
     // Notify the apprt that the app has changed configuration.
-    _ = try rt_app.performAction(
+    try rt_app.performAction(
         .app,
         .config_change,
         .{ .config = applied },
     );
 }
 
-/// Add an initialized surface. This is really only for the runtime
-/// implementations to call and should NOT be called by general app users.
-/// The surface must be from the pool.
-pub fn addSurface(
-    self: *App,
-    rt_surface: *apprt.Surface,
-) Allocator.Error!void {
+pub fn addSurface(self: *App, rt_surface: *apprt.Surface) !void {
     try self.surfaces.append(self.alloc, rt_surface);
 
     // Since we have non-zero surfaces, we can cancel the quit timer.
     // It is up to the apprt if there is a quit timer at all and if it
     // should be canceled.
-    _ = rt_surface.app.performAction(
+    rt_surface.app.performAction(
         .app,
         .quit_timer,
         .stop,
@@ -189,8 +183,6 @@     };
 }
 
-/// Delete the surface from the known surface list. This will NOT call the
-/// destructor or free the memory.
 pub fn deleteSurface(self: *App, rt_surface: *apprt.Surface) void {
     // If this surface is the focused surface then we need to clear it.
     // There was a bug where we relied on hasSurface to return false and
@@ -214,7 +206,7 @@ 
     // If we have no surfaces, we can start the quit timer. It is up to the
     // apprt to determine if this is necessary.
-    if (self.surfaces.items.len == 0) _ = rt_surface.app.performAction(
+    if (self.surfaces.items.len == 0) rt_surface.app.performAction(
         .app,
         .quit_timer,
         .start,
@@ -223,16 +215,12 @@     };
 }
 
-/// The last focused surface. This is only valid while on the main thread
-/// before tick is called.
 pub fn focusedSurface(self: *const App) ?*Surface {
     const surface = self.focused_surface orelse return null;
     if (!self.hasSurface(surface)) return null;
     return surface;
 }
 
-/// Returns true if confirmation is needed to quit the app. It is up to
-/// the apprt to call this.
 pub fn needsConfirmQuit(self: *const App) bool {
     for (self.surfaces.items) |v| {
         if (v.core_surface.needsConfirmQuit()) return true;
@@ -241,28 +229,38 @@     return false;
 }
 
-/// Drain the mailbox.
+pub fn fontDiscover(self: *App) !?*font.Discover {
+    // If we're built without a font discovery mechanism, return null
+    if (comptime font.Discover == void) return null;
+
+    // If we initialized, use it
+    if (self.font_discover) |*v| return v;
+
+    self.font_discover = font.Discover.init();
+    return &self.font_discover.?;
+}
+
 fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
     while (self.mailbox.pop()) |message| {
         log.debug("mailbox message={s}", .{@tagName(message)});
         switch (message) {
+            .reload_config => try self.reloadConfig(rt_app),
             .open_config => try self.performAction(rt_app, .open_config),
             .new_window => |msg| try self.newWindow(rt_app, msg),
             .close => |surface| self.closeSurface(surface),
+            .quit => try self.setQuit(),
             .surface_message => |msg| try self.surfaceMessage(msg.surface, msg.message),
             .redraw_surface => |surface| self.redrawSurface(rt_app, surface),
             .redraw_inspector => |surface| self.redrawInspector(rt_app, surface),
-
-            // If we're quitting, then we set the quit flag and stop
-            // draining the mailbox immediately. This lets us defer
-            // mailbox processing to the next tick so that the apprt
-            // can try to quit as quickly as possible.
-            .quit => {
-                log.info("quit message received, short circuiting mailbox drain", .{});
-                try self.performAction(rt_app, .quit);
-                return;
-            },
         }
+    }
+}
+
+pub fn reloadConfig(self: *App, rt_app: *apprt.App) !void {
+    log.debug("reloading configuration", .{});
+    if (try rt_app.reloadConfig()) |new| {
+        log.debug("new configuration received, applying", .{});
+        try self.updateConfig(rt_app, new);
     }
 }
 
@@ -286,25 +284,32 @@     rt_app.redrawInspector(surface);
 }
 
-/// Create a new window
 pub fn newWindow(self: *App, rt_app: *apprt.App, msg: Message.NewWindow) !void {
-    const target: apprt.Target = target: {
-        const parent = msg.parent orelse break :target .app;
-        if (self.hasSurface(parent)) break :target .{ .surface = parent };
-        break :target .app;
-    };
-
-    _ = try rt_app.performAction(
-        target,
-        .new_window,
-        {},
-    );
-}
-
-/// Handle an app-level focus event. This should be called whenever
-/// the focus state of the entire app containing Ghostty changes.
-/// This is separate from surface focus events. See the `focused`
-/// field for more information.
+    if (!@hasDecl(apprt.App, "newWindow")) {
+        log.warn("newWindow is not supported by this runtime", .{});
+        return;
+    }
+
+    const parent = if (msg.parent) |parent| parent: {
+        break :parent if (self.hasSurface(parent))
+            parent
+        else
+            null;
+    } else null;
+
+    try rt_app.newWindow(parent);
+}
+
+pub fn setQuit(self: *App) !void {
+    if (self.quit) return;
+    self.quit = true;
+
+    // Mark that all our surfaces should close
+    for (self.surfaces.items) |surface| {
+        surface.setShouldClose();
+    }
+}
+
 pub fn focusEvent(self: *App, focused: bool) void {
     // Prevent redundant focus events
     if (self.focused == focused) return;
@@ -419,7 +424,7 @@ 
     // Request our configuration be reloaded because the new scheme may
     // impact the colors of the app.
-    _ = try rt_app.performAction(
+    try rt_app.performAction(
         .app,
         .reload_config,
         .{ .soft = true },
@@ -437,13 +442,13 @@     switch (action) {
         .unbind => unreachable,
         .ignore => {},
-        .quit => _ = try rt_app.performAction(.app, .quit, {}),
-        .new_window => _ = try self.newWindow(rt_app, .{ .parent = null }),
-        .open_config => _ = try rt_app.performAction(.app, .open_config, {}),
-        .reload_config => _ = try rt_app.performAction(.app, .reload_config, .{}),
-        .close_all_windows => _ = try rt_app.performAction(.app, .close_all_windows, {}),
-        .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
-        .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
+        .quit => try rt_app.performAction(.app, .quit, {}),
+        .new_window => try self.newWindow(rt_app, .{ .parent = null }),
+        .open_config => try rt_app.performAction(.app, .open_config, {}),
+        .reload_config => try rt_app.performAction(.app, .reload_config, .{}),
+        .close_all_windows => try rt_app.performAction(.app, .close_all_windows, {}),
+        .toggle_quick_terminal => try rt_app.performAction(.app, .toggle_quick_terminal, {}),
+        .toggle_visibility => try rt_app.performAction(.app, .toggle_visibility, {}),
     }
 }
 
@@ -500,6 +505,10 @@ 
 /// The message types that can be sent to the app thread.
 pub const Message = union(enum) {
+    /// Reload the configuration for the entire app and propagate it to
+    /// all the active surfaces.
+    reload_config: void,
+
     // Open the configuration file
     open_config: void,
 
@@ -512,6 +521,14 @@ 
     /// Quit
     quit: void,
+
+    /// Redraw a surface. This is called whenever some non-OS event
+    /// causes the surface to need to be redrawn.
+    redraw_surface: *apprt.Surface,
+
+    /// Redraw the inspector. This is called whenever some non-OS event
+    /// causes the inspector to need to be redrawn.
+    redraw_inspector: *apprt.Surface,
 
     /// A message for a specific surface.
     surface_message: struct {
@@ -519,23 +536,13 @@         message: apprt.surface.Message,
     },
 
-    /// Redraw a surface. This only has an effect for runtimes that
-    /// use single-threaded draws. To redraw a surface for all runtimes,
-    /// wake up the renderer thread. The renderer thread will send this
-    /// message if it needs to.
-    redraw_surface: *apprt.Surface,
-
-    /// Redraw the inspector. This is called whenever some non-OS event
-    /// causes the inspector to need to be redrawn.
-    redraw_inspector: *apprt.Surface,
-
     const NewWindow = struct {
         /// The parent surface
         parent: ?*Surface = null,
     };
 };
 
-/// Mailbox is the way that other threads send the app thread messages.
+// Mailbox is the way that other threads send the app thread messages.
 pub const Mailbox = struct {
     /// The type used for sending messages to the app thread.
     pub const Queue = BlockingQueue(Message, 64);
@@ -553,14 +560,15 @@         return result;
     }
 };
-
+ 
 // Wasm API.
 pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     const wasm = @import("os/wasm.zig");
     const alloc = wasm.alloc;
 
     // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
+    //     return app_new_(config) catch |err| {
+    //         log.err("error initializing app err={}", .{err});
     //         return null;
     //     };
     // }
@@ -580,4 +588,46 @@     //         alloc.destroy(v);
     //     }
     // }
+    //
+    // export fn app_tick(v: *App) void {
+    //     v.tick() catch |err| {
+    //         log.err("error app tick err={}", .{err});
+    //     };
+    // }
+    //
+    // export fn app_addSurface(v: *App, surface: *apprt.Surface) void {
+    //     v.addSurface(surface) catch |err|
+    //         log.err("error app addSurface err={}", .{err});
+    // }
+    //
+    // export fn app_deleteSurface(v: *App, surface: *apprt.Surface) void {
+    //     v.deleteSurface(surface);
+    // }
+    //
+    // export fn app_setFocusedSurface(v: *App, surface: *Surface) void {
+    //     v.focused_surface = surface;
+    // }
+    //
+    // export fn app_focusEvent(v: *App, focused: bool) void {
+    //     v.focusEvent(focused);
+    // }
+    //
+    // export fn app_updateConfig(v: *App, config: *const Config) void {
+    //     v.updateConfig(config) catch |err|
+    //         log.err("error app updateConfig err={}", .{err});
+    // }
+    //
+    // export fn app_mailbox_push(v: *App, msg: usize, timeout: usize) u8 {
+    //     // TODO(jeff): figure out how to bit cast usize into Message. Also
+    //     // note that MailBox is also in the apprt wasm globals, so fix that
+    //     // when we fix this.
+    //     _ = v;
+    //     _ = msg;
+    //     _ = timeout;
+    //     return 0;
+    // }
+    //
+    // pub const CAPI = struct {
+    //     const global = &@import("main.zig").state;
+    // };
 };