
index 6a32b56a9..3b220184d 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpm922fz00_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpsy19_opf_actual.txt	
@@ -4,7 +4,6 @@
 const App = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const build_config = @import("build_config.zig");
@@ -43,7 +42,7 @@ surfaces: SurfaceList,
 ///
 /// This defaults to true since we assume that the app is focused when
 /// Ghostty is initialized but a well behaved apprt should call
-/// focusEvent to set this to the correct value right away.
+/// `focusEvent` to set this to the correct value right away.
 focused: bool = true,
 
 /// The last focused surface. This surface may not be valid;
@@ -54,16 +53,6 @@ focused_surface: ?*Surface = null,
 /// this is a blocking queue so if it is full you will get errors (or block).
 mailbox: Mailbox.Queue,
 
-/// The set of font GroupCache instances shared by surfaces with the
-/// same font configuration.
-font_grid_set: font.SharedGridSet,
-
-// Used to rate limit desktop notifications. Some platforms (notably macOS) will
-// run out of resources if desktop notifications are sent too fast and the OS
-// will kill Ghostty.
-last_notification_time: ?std.time.Instant = null,
-last_notification_digest: u64 = 0,
-
 /// The conditional state of the configuration. See the equivalent field
 /// in the Surface struct for more information. In this case, this applies
 /// to the app-level config and as a default for new surfaces.
@@ -74,6 +63,16 @@ config_conditional_state: configpkg.ConditionalState,
 /// if they are the first surface.
 first: bool = true,
 
+/// The set of font GroupCache instances shared by surfaces with the
+/// same font configuration.
+font_grid_set: font.SharedGridSet,
+
+// Used to rate limit desktop notifications. Some platforms (notably macOS) will
+// run out of resources if desktop notifications are sent too fast and the OS
+// will kill Ghostty.
+last_notification_time: ?std.time.Instant = null,
+last_notification_digest: u64 = 0,
+
 pub const CreateError = Allocator.Error || font.SharedGridSet.InitError;
 
 /// Initialize the main app instance. This creates the main window, sets
@@ -127,7 +126,7 @@ pub fn tick(self: *App, rt_app: *apprt.App) !void {
     while (i < self.surfaces.items.len) {
         const surface = self.surfaces.items[i];
         if (surface.shouldClose()) {
-            surface.close(false);
+            surface.close();
             continue;
         }
 
@@ -241,6 +240,20 @@ pub fn needsConfirmQuit(self: *const App) bool {
     return false;
 }
 
+/// Initialize once and return the font discovery mechanism. This remains
+/// initialized throughout the lifetime of the application because some
+/// font discovery mechanisms (i.e. fontconfig) are unsafe to reinit.
+pub fn fontDiscover(self: *App) !?*font.Discover {
+    // If we're built without a font discovery mechanism, return null
+    if (comptime font.Discover == void) return null;
+
+    // If we initialized, use it
+    if (self.font_discover) |*v| return v;
+
+    self.font_discover = font.Discover.init();
+    return &self.font_discover.?;
+}
+
 /// Drain the mailbox.
 fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
     while (self.mailbox.pop()) |message| {
@@ -433,7 +446,7 @@ pub fn performAction(
     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action.Scoped(.app),
-) !void {
+) !bool {
     switch (action) {
         .unbind => unreachable,
         .ignore => {},
@@ -445,6 +458,8 @@ pub fn performAction(
         .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
         .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
     }
+
+    return true;
 }
 
 /// Perform an app-wide binding action. If the action is surface-specific
@@ -459,7 +474,7 @@ pub fn performAllAction(
         // App-scoped actions are handled by the app so that they aren't
         // repeated for each surface (since each surface forwards
         // app-scoped actions back up).
-        .app => try self.performAction(
+        .app => _ = try self.performAction(
             rt_app,
             action.scoped(.app).?, // asserted through the scope match
         ),
