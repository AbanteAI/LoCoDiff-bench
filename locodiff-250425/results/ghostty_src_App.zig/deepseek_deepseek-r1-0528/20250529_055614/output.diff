
index 6a32b56a9..113b9a5f8 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmp2jf98hcq_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmp_1xojqp7_actual.txt	
@@ -1,17 +1,12 @@
-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
+//! App is the primary application-level logic for ghostty. This manages
+//! the runtime, surfaces, configuration, etc.
+
 const App = @This();
 
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
-const apprt = @import("apprt.zig");
-const Surface = @import("Surface.zig");
-const tracy = @import("tracy");
-const input = @import("input.zig");
 const configpkg = @import("config.zig");
 const Config = configpkg.Config;
 const BlockingQueue = @import("datastruct/main.zig").BlockingQueue;
@@ -20,11 +15,19 @@ const font = @import("font/main.zig");
 const internal_os = @import("os/main.zig");
 const macos = @import("macos");
 const objc = @import("objc");
+const DevMode = @import("DevMode.zig");
+const input = @import("input.zig");
+const tracy = @import("tracy");
+const apprt = @import("apprt.zig");
+const Surface = @import("Surface.zig");
 
 const log = std.log.scoped(.app);
 
 const SurfaceList = std.ArrayListUnmanaged(*apprt.Surface);
 
+/// The type used for sending messages to the app thread.
+pub const Mailbox = BlockingQueue(Message, 64);
+
 /// General purpose allocator
 alloc: Allocator,
 
@@ -58,9 +61,9 @@ mailbox: Mailbox.Queue,
 /// same font configuration.
 font_grid_set: font.SharedGridSet,
 
-// Used to rate limit desktop notifications. Some platforms (notably macOS) will
-// run out of resources if desktop notifications are sent too fast and the OS
-// will kill Ghostty.
+/// Used to rate limit desktop notifications. Some platforms (notably macOS) will
+/// run out of resources if desktop notifications are sent too fast and the OS
+/// will kill Ghostty.
 last_notification_time: ?std.time.Instant = null,
 last_notification_digest: u64 = 0,
 
@@ -127,7 +130,7 @@ pub fn tick(self: *App, rt_app: *apprt.App) !void {
     while (i < self.surfaces.items.len) {
         const surface = self.surfaces.items[i];
         if (surface.shouldClose()) {
-            surface.close(false);
+            rt_app.closeSurface(surface);
             continue;
         }
 
@@ -560,24 +563,21 @@ pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     const alloc = wasm.alloc;
 
     // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
+    //     return app_new_(config) catch |err| { log.warn("error initializing app err={}", .{err});
     //         return null;
     //     };
     // }
     //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
+    // fn app_new_(_: *const config.RuntimeOptions, config: *const Config) !*App {
+    //     const app = try App.create(global.alloc, config);
     //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
+    //     return app;
     // }
     //
-    // export fn app_free(ptr: ?*App) void {
+    // export fn ghostty_app_free(ptr: ?*App) void {
     //     if (ptr) |v| {
     //         v.destroy();
-    //         alloc.destroy(v);
+    //         v.alloc.destroy(v);
     //     }
     // }
 };
\ No newline at end of file
