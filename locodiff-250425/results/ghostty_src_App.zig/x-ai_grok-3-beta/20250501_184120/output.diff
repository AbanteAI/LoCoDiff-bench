--- ghostty_src_App.zig_expectedoutput.txt (expected)+++ ghostty_src_App.zig_extracted.txt (actual)@@ -1,10 +1,6 @@-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
 const App = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const build_config = @import("build_config.zig");
@@ -97,6 +93,7 @@         .mailbox = .{},
         .font_grid_set = font_grid_set,
         .config_conditional_state = .{},
+        .first = true,
     };
     errdefer app.surfaces.deinit(alloc);
 
@@ -187,6 +184,9 @@     ) catch |err| {
         log.warn("error stopping quit timer err={}", .{err});
     };
+
+    // This is no longer the first.
+    self.first = false;
 }
 
 /// Delete the surface from the known surface list. This will NOT call the
@@ -223,22 +223,22 @@     };
 }
 
+/// Returns true if confirmation is needed to quit the app. It is up to
+/// the apprt to call this.
+pub fn needsConfirmQuit(self: *const App) bool {
+    for (self.surfaces.items) |v| {
+        if (v.core_surface.needsConfirmQuit()) return true;
+    }
+
+    return false;
+}
+
 /// The last focused surface. This is only valid while on the main thread
 /// before tick is called.
 pub fn focusedSurface(self: *const App) ?*Surface {
     const surface = self.focused_surface orelse return null;
     if (!self.hasSurface(surface)) return null;
     return surface;
-}
-
-/// Returns true if confirmation is needed to quit the app. It is up to
-/// the apprt to call this.
-pub fn needsConfirmQuit(self: *const App) bool {
-    for (self.surfaces.items) |v| {
-        if (v.core_surface.needsConfirmQuit()) return true;
-    }
-
-    return false;
 }
 
 /// Drain the mailbox.
@@ -560,7 +560,8 @@     const alloc = wasm.alloc;
 
     // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
+    //     return app_new_(config) catch |err| {
+    //         log.err("error initializing app err={}", .{err});
     //         return null;
     //     };
     // }
