
index 6a32b56a..57adb6f9 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmprykv0rpk_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpbdvs8ptz_actual.txt	
@@ -1,10 +1,6 @@
-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
 const App = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const build_config = @import("build_config.zig");
@@ -97,6 +93,7 @@ pub fn create(
         .mailbox = .{},
         .font_grid_set = font_grid_set,
         .config_conditional_state = .{},
+        .first = true,
     };
     errdefer app.surfaces.deinit(alloc);
 
@@ -187,6 +184,9 @@ pub fn addSurface(
     ) catch |err| {
         log.warn("error stopping quit timer err={}", .{err});
     };
+
+    // This is no longer the first.
+    self.first = false;
 }
 
 /// Delete the surface from the known surface list. This will NOT call the
@@ -223,14 +223,6 @@ pub fn deleteSurface(self: *App, rt_surface: *apprt.Surface) void {
     };
 }
 
-/// The last focused surface. This is only valid while on the main thread
-/// before tick is called.
-pub fn focusedSurface(self: *const App) ?*Surface {
-    const surface = self.focused_surface orelse return null;
-    if (!self.hasSurface(surface)) return null;
-    return surface;
-}
-
 /// Returns true if confirmation is needed to quit the app. It is up to
 /// the apprt to call this.
 pub fn needsConfirmQuit(self: *const App) bool {
@@ -241,6 +233,14 @@ pub fn needsConfirmQuit(self: *const App) bool {
     return false;
 }
 
+/// The last focused surface. This is only valid while on the main thread
+/// before tick is called.
+pub fn focusedSurface(self: *const App) ?*Surface {
+    const surface = self.focused_surface orelse return null;
+    if (!self.hasSurface(surface)) return null;
+    return surface;
+}
+
 /// Drain the mailbox.
 fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
     while (self.mailbox.pop()) |message| {
@@ -560,7 +560,8 @@ pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     const alloc = wasm.alloc;
 
     // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
+    //     return app_new_(config) catch |err| {
+    //         log.err("error initializing app err={}", .{err});
     //         return null;
     //     };
     // }
