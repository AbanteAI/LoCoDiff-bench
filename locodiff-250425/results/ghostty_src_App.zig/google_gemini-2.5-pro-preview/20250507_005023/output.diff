
index 6a32b56a..7da301b4 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmp14pz3nv__expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpjvc8q3y4_actual.txt	
@@ -1,13 +1,15 @@
-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
+//! App is the core application logic. This is **not** the GUI application
+//! itself, but rather the non-GUI logic of the application lifecycle, event
+//! handling, etc.
+//!
+//! The App is meant to be used by an "apprt" (application runtime) which
+//! implements the platform-specific GUI and event loop.
 const App = @This();
 
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
 const tracy = @import("tracy");
@@ -43,7 +45,7 @@ surfaces: SurfaceList,
 ///
 /// This defaults to true since we assume that the app is focused when
 /// Ghostty is initialized but a well behaved apprt should call
-/// focusEvent to set this to the correct value right away.
+/// `focusEvent` to set this to the correct value right away.
 focused: bool = true,
 
 /// The last focused surface. This surface may not be valid;
@@ -362,7 +364,7 @@ pub fn keyEvent(
         .leader => return false,
 
         // Leaf entries are good
-        .leaf => |leaf| leaf,
+        .leaf => |lf| lf,
     };
 
     // If we aren't focused, then we only process global keybinds.
@@ -566,18 +568,15 @@ pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     // }
     //
     // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
+    //     const app = try App.create(alloc, opts.*, config);
     //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
+    //     return app;
     // }
     //
     // export fn app_free(ptr: ?*App) void {
     //     if (ptr) |v| {
     //         v.destroy();
-    //         alloc.destroy(v);
+    //         v.alloc.destroy(v);
     //     }
     // }
 };
\ No newline at end of file
