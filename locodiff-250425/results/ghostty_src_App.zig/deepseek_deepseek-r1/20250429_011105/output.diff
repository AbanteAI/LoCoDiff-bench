--- ghostty_src_App.zig_expectedoutput.txt (expected)+++ ghostty_src_App.zig_extracted.txt (actual)@@ -7,7 +7,6 @@ const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
 const tracy = @import("tracy");
@@ -18,18 +17,42 @@ const renderer = @import("renderer.zig");
 const font = @import("font/main.zig");
 const internal_os = @import("os/main.zig");
-const macos = @import("macos");
-const objc = @import("objc");
-
 const log = std.log.scoped(.app);
 
 const SurfaceList = std.ArrayListUnmanaged(*apprt.Surface);
+
+/// The type used for sending messages to the app thread.
+pub const Mailbox = BlockingQueue(Message, 64);
 
 /// General purpose allocator
 alloc: Allocator,
 
 /// The list of surfaces that are currently active.
 surfaces: SurfaceList,
+
+/// The set of font GroupCache instances shared by surfaces with the
+/// same font configuration.
+font_grid_set: font.SharedGridSet,
+
+/// Used to rate limit desktop notifications. Some platforms (notably macOS) will
+/// run out of resources if desktop notifications are sent too fast and the OS
+/// will kill Ghostty.
+last_notification_time: ?std.time.Instant = null,
+last_notification_digest: u64 = 0,
+
+/// The conditional state of the configuration. See the equivalent field
+/// in the Surface struct for more information. In this case, this applies
+/// to the app-level config and as a default for new surfaces.
+config_conditional_state: configpkg.ConditionalState,
+
+/// Set to false once we've created at least one surface. This
+/// never goes true again. This can be used by surfaces to determine
+/// if they are the first surface.
+first: bool = true,
+
+/// The mailbox that can be used to send this thread messages. Note
+/// this is a blocking queue so if it is full you will get errors (or block).
+mailbox: Mailbox.Queue,
 
 /// This is true if the app that Ghostty is in is focused. This may
 /// mean that no surfaces (terminals) are focused but the app is still
@@ -49,30 +72,6 @@ /// The last focused surface. This surface may not be valid;
 /// you must always call hasSurface to validate it.
 focused_surface: ?*Surface = null,
-
-/// The mailbox that can be used to send this thread messages. Note
-/// this is a blocking queue so if it is full you will get errors (or block).
-mailbox: Mailbox.Queue,
-
-/// The set of font GroupCache instances shared by surfaces with the
-/// same font configuration.
-font_grid_set: font.SharedGridSet,
-
-// Used to rate limit desktop notifications. Some platforms (notably macOS) will
-// run out of resources if desktop notifications are sent too fast and the OS
-// will kill Ghostty.
-last_notification_time: ?std.time.Instant = null,
-last_notification_digest: u64 = 0,
-
-/// The conditional state of the configuration. See the equivalent field
-/// in the Surface struct for more information. In this case, this applies
-/// to the app-level config and as a default for new surfaces.
-config_conditional_state: configpkg.ConditionalState,
-
-/// Set to false once we've created at least one surface. This
-/// never goes true again. This can be used by surfaces to determine
-/// if they are the first surface.
-first: bool = true,
 
 pub const CreateError = Allocator.Error || font.SharedGridSet.InitError;
 
@@ -433,10 +432,10 @@     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action.Scoped(.app),
-) !void {
+) !bool {
     switch (action) {
         .unbind => unreachable,
-        .ignore => {},
+        .ignore => return false,
         .quit => _ = try rt_app.performAction(.app, .quit, {}),
         .new_window => _ = try self.newWindow(rt_app, .{ .parent = null }),
         .open_config => _ = try rt_app.performAction(.app, .open_config, {}),
@@ -445,6 +444,8 @@         .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
         .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
     }
+
+    return true;
 }
 
 /// Perform an app-wide binding action. If the action is surface-specific
@@ -459,7 +460,7 @@         // App-scoped actions are handled by the app so that they aren't
         // repeated for each surface (since each surface forwards
         // app-scoped actions back up).
-        .app => try self.performAction(
+        .app => _ = try self.performAction(
             rt_app,
             action.scoped(.app).?, // asserted through the scope match
         ),
@@ -506,6 +507,11 @@     /// Create a new terminal window.
     new_window: NewWindow,
 
+    /// Create a new tab within the tab group of the focused window.
+    /// This does nothing if we're on a platform or using a window
+    /// environment that doesn't support tabs.
+    new_tab: NewTab,
+
     /// Close a surface. This notifies the runtime that a surface
     /// should close.
     close: *Surface,
@@ -533,6 +539,11 @@         /// The parent surface
         parent: ?*Surface = null,
     };
+
+    const NewTab = struct {
+        /// The parent surface
+        parent: ?*Surface = null,
+    };
 };
 
 /// Mailbox is the way that other threads send the app thread messages.
@@ -552,32 +563,4 @@ 
         return result;
     }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };