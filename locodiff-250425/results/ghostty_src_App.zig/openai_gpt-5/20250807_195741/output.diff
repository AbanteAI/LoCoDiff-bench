
index 6a32b56a9..06d5338d6 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpty8becrr_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpu4cyhhhh_actual.txt	
@@ -1,25 +1,19 @@
 //! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
+//! sets up the runtime, and manages surfaces.
 const App = @This();
 
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
+
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
-const tracy = @import("tracy");
 const input = @import("input.zig");
 const configpkg = @import("config.zig");
 const Config = configpkg.Config;
 const BlockingQueue = @import("datastruct/main.zig").BlockingQueue;
-const renderer = @import("renderer.zig");
 const font = @import("font/main.zig");
-const internal_os = @import("os/main.zig");
-const macos = @import("macos");
-const objc = @import("objc");
 
 const log = std.log.scoped(.app);
 
@@ -337,8 +331,6 @@ pub fn keyEventIsBinding(
 /// the event. If the event is not used, this will return false.
 ///
 /// If the app currently has focus then all key events are processed.
-/// If the app does not have focus then only global key events are
-/// processed.
 pub fn keyEvent(
     self: *App,
     rt_app: *apprt.App,
@@ -400,7 +392,6 @@ pub fn keyEvent(
 }
 
 /// Call to notify Ghostty that the color scheme for the app has changed.
-/// "Color scheme" in this case refers to system themes such as "light/dark".
 pub fn colorSchemeEvent(
     self: *App,
     rt_app: *apprt.App,
@@ -510,9 +501,6 @@ pub const Message = union(enum) {
     /// should close.
     close: *Surface,
 
-    /// Quit
-    quit: void,
-
     /// A message for a specific surface.
     surface_message: struct {
         surface: *Surface,
@@ -529,6 +517,9 @@ pub const Message = union(enum) {
     /// causes the inspector to need to be redrawn.
     redraw_inspector: *apprt.Surface,
 
+    /// Quit the app
+    quit: void,
+
     const NewWindow = struct {
         /// The parent surface
         parent: ?*Surface = null,
@@ -552,32 +543,4 @@ pub const Mailbox = struct {
 
         return result;
     }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };
\ No newline at end of file
