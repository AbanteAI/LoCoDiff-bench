
index 6a32b56a9..e850f03a0 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpegjrp4g__expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpcot45kyq_actual.txt	
@@ -1,13 +1,14 @@
 //! App is the primary GUI application for ghostty. This builds the window,
 //! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
+//
+// TODO(mitchellh): We currently only support single-threaded operation of
+// App. Almost all functions on App are not thread-safe.
 const App = @This();
 
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
 const tracy = @import("tracy");
@@ -315,7 +316,8 @@ pub fn focusEvent(self: *App, focused: bool) void {
 
 /// Returns true if the given key event would trigger a keybinding
 /// if it were to be processed. This is useful for determining if
-/// a key event should be sent to the terminal or not.
+/
+// a key event should be sent to the terminal or not.
 pub fn keyEventIsBinding(
     self: *App,
     rt_app: *apprt.App,
@@ -560,7 +562,8 @@ pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     const alloc = wasm.alloc;
 
     // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
+    //     return app_new_(config) catch |err| {
+    //         log.err("error initializing app err={}", .{err});
     //         return null;
     //     };
     // }
