
index 6a32b56a..a30e8895 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpmranq2aj_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpri_9vym8_actual.txt	
@@ -7,7 +7,6 @@ const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
 const tracy = @import("tracy");
@@ -25,6 +24,25 @@ const log = std.log.scoped(.app);
 
 const SurfaceList = std.ArrayListUnmanaged(*apprt.Surface);
 
+/// The type used for sending messages to the app thread.
+pub const Mailbox = struct {
+    /// The type used for sending messages to the app thread.
+    pub const Queue = BlockingQueue(Message, 64);
+
+    rt_app: *apprt.App,
+    mailbox: *Queue,
+
+    /// Send a message to the surface.
+    pub fn push(self: Mailbox, msg: Message, timeout: Queue.Timeout) Queue.Size {
+        const result = self.mailbox.push(msg, timeout);
+
+        // Wake up our app loop
+        self.rt_app.wakeup();
+
+        return result;
+    }
+};
+
 /// General purpose allocator
 alloc: Allocator,
 
@@ -64,11 +82,6 @@ font_grid_set: font.SharedGridSet,
 last_notification_time: ?std.time.Instant = null,
 last_notification_digest: u64 = 0,
 
-/// The conditional state of the configuration. See the equivalent field
-/// in the Surface struct for more information. In this case, this applies
-/// to the app-level config and as a default for new surfaces.
-config_conditional_state: configpkg.ConditionalState,
-
 /// Set to false once we've created at least one surface. This
 /// never goes true again. This can be used by surfaces to determine
 /// if they are the first surface.
@@ -95,8 +108,12 @@ pub fn create(
         .alloc = alloc,
         .surfaces = .{},
         .mailbox = .{},
+        .focused = true,
+        .focused_surface = null,
         .font_grid_set = font_grid_set,
-        .config_conditional_state = .{},
+        .last_notification_time = null,
+        .last_notification_digest = 0,
+        .first = true,
     };
     errdefer app.surfaces.deinit(alloc);
 
@@ -174,9 +191,17 @@ pub fn updateConfig(self: *App, rt_app: *apprt.App, config: *const Config) !void
 pub fn addSurface(
     self: *App,
     rt_surface: *apprt.Surface,
-) Allocator.Error!void {
+) Estimator.Error!void {
     try self.surfaces.append(self.alloc, rt_surface);
 
+    // Mark that we are no longer the first surface if this is our first.
+    if (@hasField(@TypeOf(rt_surface), "terminal")) {
+        if (self.first) {
+            self.first = false;
+        }
+    }
+
+
     // Since we have non-zero surfaces, we can cancel the quit timer.
     // It is up to the apprt if there is a quit timer at all and if it
     // should be canceled.
@@ -241,64 +266,18 @@ pub fn needsConfirmQuit(self: *const App) bool {
     return false;
 }
 
-/// Drain the mailbox.
-fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
-    while (self.mailbox.pop()) |message| {
-        log.debug("mailbox message={s}", .{@tagName(message)});
-        switch (message) {
-            .open_config => try self.performAction(rt_app, .open_config),
-            .new_window => |msg| try self.newWindow(rt_app, msg),
-            .close => |surface| self.closeSurface(surface),
-            .surface_message => |msg| try self.surfaceMessage(msg.surface, msg.message),
-            .redraw_surface => |surface| self.redrawSurface(rt_app, surface),
-            .redraw_inspector => |surface| self.redrawInspector(rt_app, surface),
-
-            // If we're quitting, then we set the quit flag and stop
-            // draining the mailbox immediately. This lets us defer
-            // mailbox processing to the next tick so that the apprt
-            // can try to quit as quickly as possible.
-            .quit => {
-                log.info("quit message received, short circuiting mailbox drain", .{});
-                try self.performAction(rt_app, .quit);
-                return;
-            },
-        }
-    }
-}
-
-pub fn closeSurface(self: *App, surface: *Surface) void {
-    if (!self.hasSurface(surface)) return;
-    surface.close();
-}
-
-pub fn focusSurface(self: *App, surface: *Surface) void {
-    if (!self.hasSurface(surface)) return;
-    self.focused_surface = surface;
-}
-
-fn redrawSurface(self: *App, rt_app: *apprt.App, surface: *apprt.Surface) void {
-    if (!self.hasSurface(&surface.core_surface)) return;
-    rt_app.redrawSurface(surface);
-}
-
-fn redrawInspector(self: *App, rt_app: *apprt.App, surface: *apprt.Surface) void {
-    if (!self.hasSurface(&surface.core_surface)) return;
-    rt_app.redrawInspector(surface);
-}
+/// Initialize once and return the font discovery mechanism. This remains
+/// initialized throughout the lifetime of the application because some
+/// font discovery mechanisms (i.e. fontconfig) are unsafe to reinit.
+pub fn fontDiscover(self: *App) Estimator.Error!?*font.Discover {
+    // If we're built without a font discovery mechanism, return null
+    if (comptime font.Discover == void) return null;
 
-/// Create a new window
-pub fn newWindow(self: *App, rt_app: *apprt.App, msg: Message.NewWindow) !void {
-    const target: apprt.Target = target: {
-        const parent = msg.parent orelse break :target .app;
-        if (self.hasSurface(parent)) break :target .{ .surface = parent };
-        break :target .app;
-    };
+    // If we initialized, use it
+    if (self.font_discover) |*v| return v;
 
-    _ = try rt_app.performAction(
-        target,
-        .new_window,
-        {},
-    );
+    self.font_discover = font.Discover.init();
+    return &self.font_discover.?;
 }
 
 /// Handle an app-level focus event. This should be called whenever
@@ -343,7 +322,7 @@ pub fn keyEvent(
     self: *App,
     rt_app: *apprt.App,
     event: input.KeyEvent,
-) bool {
+) AppError!bool {
     switch (event.action) {
         // We don't care about key release events.
         .release => return false,
@@ -399,33 +378,6 @@ pub fn keyEvent(
     return true;
 }
 
-/// Call to notify Ghostty that the color scheme for the app has changed.
-/// "Color scheme" in this case refers to system themes such as "light/dark".
-pub fn colorSchemeEvent(
-    self: *App,
-    rt_app: *apprt.App,
-    scheme: apprt.ColorScheme,
-) !void {
-    const new_scheme: configpkg.ConditionalState.Theme = switch (scheme) {
-        .light => .light,
-        .dark => .dark,
-    };
-
-    // If our scheme didn't change, then we don't do anything.
-    if (self.config_conditional_state.theme == new_scheme) return;
-
-    // Setup our conditional state which has the current color theme.
-    self.config_conditional_state.theme = new_scheme;
-
-    // Request our configuration be reloaded because the new scheme may
-    // impact the colors of the app.
-    _ = try rt_app.performAction(
-        .app,
-        .reload_config,
-        .{ .soft = true },
-    );
-}
-
 /// Perform a binding action. This only accepts actions that are scoped
 /// to the app. Callers can use performAllAction to perform any action
 /// and any non-app-scoped actions will be performed on all surfaces.
@@ -433,10 +385,10 @@ pub fn performAction(
     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action.Scoped(.app),
-) !void {
+) !bool {
     switch (action) {
         .unbind => unreachable,
-        .ignore => {},
+        .ignore => return false,
         .quit => _ = try rt_app.performAction(.app, .quit, {}),
         .new_window => _ = try self.newWindow(rt_app, .{ .parent = null }),
         .open_config => _ = try rt_app.performAction(.app, .open_config, {}),
@@ -445,6 +397,8 @@ pub fn performAction(
         .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
         .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
     }
+
+    return true;
 }
 
 /// Perform an app-wide binding action. If the action is surface-specific
@@ -454,12 +408,12 @@ pub fn performAllAction(
     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action,
-) !void {
+) !bool {
     switch (action.scope()) {
         // App-scoped actions are handled by the app so that they aren't
         // repeated for each surface (since each surface forwards
         // app-scoped actions back up).
-        .app => try self.performAction(
+        .app => return try self.performAction(
             rt_app,
             action.scoped(.app).?, // asserted through the scope match
         ),
@@ -475,19 +429,35 @@ pub fn performAllAction(
             };
         },
     }
+
+    return true;
 }
 
-/// Handle a window message
-fn surfaceMessage(self: *App, surface: *Surface, msg: apprt.surface.Message) !void {
-    // We want to ensure our window is still active. Window messages
-    // are quite rare and we normally don't have many windows so we do
-    // a simple linear search here.
-    if (self.hasSurface(surface)) {
-        try surface.handleMessage(msg);
-    }
+/// Call to notify Ghostty that the color scheme for the app has changed.
+/// "Color scheme" in this case refers to system themes such as "light/dark".
+pub fn colorSchemeEvent(
+    self: *App,
+    rt_app: *apprt.App,
+    scheme: apprt.ColorScheme,
+) !void {
+    const new_scheme: configpkg.ConditionalState.Theme = switch (scheme) {
+        .light => .light,
+        .dark => .dark,
+    };
 
-    // Window was not found, it probably quit before we handled the message.
-    // Not a problem.
+    // If our scheme didn't change, then we don't do anything.
+    if (self.config_conditional_state.theme == new_scheme) return;
+
+    // Setup our conditional state which has the current color theme.
+    self.config_conditional_state.theme = new_scheme;
+
+    // Request our configuration be reloaded because the new scheme may
+    // impact the colors of the app.
+    _ = try rt_app.performAction(
+        .app,
+        .reload_config,
+        .{ .soft = true },
+    );
 }
 
 fn hasSurface(self: *const App, surface: *const Surface) bool {
@@ -510,14 +480,10 @@ pub const Message = union(enum) {
     /// should close.
     close: *Surface,
 
-    /// Quit
-    quit: void,
-
-    /// A message for a specific surface.
-    surface_message: struct {
-        surface: *Surface,
-        message: apprt.surface.Message,
-    },
+    /// The last focused surface. The app keeps track of this to
+    /// enable "inheriting" various configurations from the last
+    /// surface.
+    focus: *Surface,
 
     /// Redraw a surface. This only has an effect for runtimes that
     /// use single-threaded draws. To redraw a surface for all runtimes,
@@ -535,49 +501,5 @@ pub const Message = union(enum) {
     };
 };
 
-/// Mailbox is the way that other threads send the app thread messages.
-pub const Mailbox = struct {
-    /// The type used for sending messages to the app thread.
-    pub const Queue = BlockingQueue(Message, 64);
-
-    rt_app: *apprt.App,
-    mailbox: *Queue,
-
-    /// Send a message to the surface.
-    pub fn push(self: Mailbox, msg: Message, timeout: Queue.Timeout) Queue.Size {
-        const result = self.mailbox.push(msg, timeout);
-
-        // Wake up our app loop
-        self.rt_app.wakeup();
-
-        return result;
-    }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
-};
\ No newline at end of file
+const Estimator = @import("font/text_estimator.zig");
+const AppError = Estimator.Error || Allocator.Error;
\ No newline at end of file
