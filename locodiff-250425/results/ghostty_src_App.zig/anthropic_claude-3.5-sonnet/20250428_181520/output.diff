--- ghostty_src_App.zig_expectedoutput.txt (expected)+++ ghostty_src_App.zig_extracted.txt (actual)@@ -69,7 +69,7 @@ /// to the app-level config and as a default for new surfaces.
 config_conditional_state: configpkg.ConditionalState,
 
-/// Set to false once we've created at least one surface. This
+/// Set to false once we've created at least one surface. This 
 /// never goes true again. This can be used by surfaces to determine
 /// if they are the first surface.
 first: bool = true,
@@ -118,7 +118,7 @@     self.alloc.destroy(self);
 }
 
-/// Tick ticks the app loop. This will drain our mailbox and process those
+// tick ticks the app loop. This will drain our mailbox and process those
 /// events. This should be called by the application runtime on every loop
 /// tick.
 pub fn tick(self: *App, rt_app: *apprt.App) !void {
@@ -231,252 +231,6 @@     return surface;
 }
 
-/// Returns true if confirmation is needed to quit the app. It is up to
-/// the apprt to call this.
-pub fn needsConfirmQuit(self: *const App) bool {
-    for (self.surfaces.items) |v| {
-        if (v.core_surface.needsConfirmQuit()) return true;
-    }
-
-    return false;
-}
-
-/// Drain the mailbox.
-fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
-    while (self.mailbox.pop()) |message| {
-        log.debug("mailbox message={s}", .{@tagName(message)});
-        switch (message) {
-            .open_config => try self.performAction(rt_app, .open_config),
-            .new_window => |msg| try self.newWindow(rt_app, msg),
-            .close => |surface| self.closeSurface(surface),
-            .surface_message => |msg| try self.surfaceMessage(msg.surface, msg.message),
-            .redraw_surface => |surface| self.redrawSurface(rt_app, surface),
-            .redraw_inspector => |surface| self.redrawInspector(rt_app, surface),
-
-            // If we're quitting, then we set the quit flag and stop
-            // draining the mailbox immediately. This lets us defer
-            // mailbox processing to the next tick so that the apprt
-            // can try to quit as quickly as possible.
-            .quit => {
-                log.info("quit message received, short circuiting mailbox drain", .{});
-                try self.performAction(rt_app, .quit);
-                return;
-            },
-        }
-    }
-}
-
-pub fn closeSurface(self: *App, surface: *Surface) void {
-    if (!self.hasSurface(surface)) return;
-    surface.close();
-}
-
-pub fn focusSurface(self: *App, surface: *Surface) void {
-    if (!self.hasSurface(surface)) return;
-    self.focused_surface = surface;
-}
-
-fn redrawSurface(self: *App, rt_app: *apprt.App, surface: *apprt.Surface) void {
-    if (!self.hasSurface(&surface.core_surface)) return;
-    rt_app.redrawSurface(surface);
-}
-
-fn redrawInspector(self: *App, rt_app: *apprt.App, surface: *apprt.Surface) void {
-    if (!self.hasSurface(&surface.core_surface)) return;
-    rt_app.redrawInspector(surface);
-}
-
-/// Create a new window
-pub fn newWindow(self: *App, rt_app: *apprt.App, msg: Message.NewWindow) !void {
-    const target: apprt.Target = target: {
-        const parent = msg.parent orelse break :target .app;
-        if (self.hasSurface(parent)) break :target .{ .surface = parent };
-        break :target .app;
-    };
-
-    _ = try rt_app.performAction(
-        target,
-        .new_window,
-        {},
-    );
-}
-
-/// Handle an app-level focus event. This should be called whenever
-/// the focus state of the entire app containing Ghostty changes.
-/// This is separate from surface focus events. See the `focused`
-/// field for more information.
-pub fn focusEvent(self: *App, focused: bool) void {
-    // Prevent redundant focus events
-    if (self.focused == focused) return;
-
-    log.debug("focus event focused={}", .{focused});
-    self.focused = focused;
-}
-
-/// Returns true if the given key event would trigger a keybinding
-/// if it were to be processed. This is useful for determining if
-/// a key event should be sent to the terminal or not.
-pub fn keyEventIsBinding(
-    self: *App,
-    rt_app: *apprt.App,
-    event: input.KeyEvent,
-) bool {
-    _ = self;
-
-    switch (event.action) {
-        .release => return false,
-        .press, .repeat => {},
-    }
-
-    // If we have a keybinding for this event then we return true.
-    return rt_app.config.keybind.set.getEvent(event) != null;
-}
-
-/// Handle a key event at the app-scope. If this key event is used,
-/// this will return true and the caller shouldn't continue processing
-/// the event. If the event is not used, this will return false.
-///
-/// If the app currently has focus then all key events are processed.
-/// If the app does not have focus then only global key events are
-/// processed.
-pub fn keyEvent(
-    self: *App,
-    rt_app: *apprt.App,
-    event: input.KeyEvent,
-) bool {
-    switch (event.action) {
-        // We don't care about key release events.
-        .release => return false,
-
-        // Continue processing key press events.
-        .press, .repeat => {},
-    }
-
-    // Get the keybind entry for this event. We don't support key sequences
-    // so we can look directly in the top-level set.
-    const entry = rt_app.config.keybind.set.getEvent(event) orelse return false;
-    const leaf: input.Binding.Set.Leaf = switch (entry.value_ptr.*) {
-        // Sequences aren't supported. Our configuration parser verifies
-        // this for global keybinds but we may still get an entry for
-        // a non-global keybind.
-        .leader => return false,
-
-        // Leaf entries are good
-        .leaf => |leaf| leaf,
-    };
-
-    // If we aren't focused, then we only process global keybinds.
-    if (!self.focused and !leaf.flags.global) return false;
-
-    // Global keybinds are done using performAll so that they
-    // can target all surfaces too.
-    if (leaf.flags.global) {
-        self.performAllAction(rt_app, leaf.action) catch |err| {
-            log.warn("error performing global keybind action action={s} err={}", .{
-                @tagName(leaf.action),
-                err,
-            });
-        };
-
-        return true;
-    }
-
-    // Must be focused to process non-global keybinds
-    assert(self.focused);
-    assert(!leaf.flags.global);
-
-    // If we are focused, then we process keybinds only if they are
-    // app-scoped. Otherwise, we do nothing. Surface-scoped should
-    // be processed by Surface.keyEvent.
-    const app_action = leaf.action.scoped(.app) orelse return false;
-    self.performAction(rt_app, app_action) catch |err| {
-        log.warn("error performing app keybind action action={s} err={}", .{
-            @tagName(app_action),
-            err,
-        });
-    };
-
-    return true;
-}
-
-/// Call to notify Ghostty that the color scheme for the app has changed.
-/// "Color scheme" in this case refers to system themes such as "light/dark".
-pub fn colorSchemeEvent(
-    self: *App,
-    rt_app: *apprt.App,
-    scheme: apprt.ColorScheme,
-) !void {
-    const new_scheme: configpkg.ConditionalState.Theme = switch (scheme) {
-        .light => .light,
-        .dark => .dark,
-    };
-
-    // If our scheme didn't change, then we don't do anything.
-    if (self.config_conditional_state.theme == new_scheme) return;
-
-    // Setup our conditional state which has the current color theme.
-    self.config_conditional_state.theme = new_scheme;
-
-    // Request our configuration be reloaded because the new scheme may
-    // impact the colors of the app.
-    _ = try rt_app.performAction(
-        .app,
-        .reload_config,
-        .{ .soft = true },
-    );
-}
-
-/// Perform a binding action. This only accepts actions that are scoped
-/// to the app. Callers can use performAllAction to perform any action
-/// and any non-app-scoped actions will be performed on all surfaces.
-pub fn performAction(
-    self: *App,
-    rt_app: *apprt.App,
-    action: input.Binding.Action.Scoped(.app),
-) !void {
-    switch (action) {
-        .unbind => unreachable,
-        .ignore => {},
-        .quit => _ = try rt_app.performAction(.app, .quit, {}),
-        .new_window => _ = try self.newWindow(rt_app, .{ .parent = null }),
-        .open_config => _ = try rt_app.performAction(.app, .open_config, {}),
-        .reload_config => _ = try rt_app.performAction(.app, .reload_config, .{}),
-        .close_all_windows => _ = try rt_app.performAction(.app, .close_all_windows, {}),
-        .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
-        .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
-    }
-}
-
-/// Perform an app-wide binding action. If the action is surface-specific
-/// then it will be performed on all surfaces. To perform only app-scoped
-/// actions, use performAction.
-pub fn performAllAction(
-    self: *App,
-    rt_app: *apprt.App,
-    action: input.Binding.Action,
-) !void {
-    switch (action.scope()) {
-        // App-scoped actions are handled by the app so that they aren't
-        // repeated for each surface (since each surface forwards
-        // app-scoped actions back up).
-        .app => try self.performAction(
-            rt_app,
-            action.scoped(.app).?, // asserted through the scope match
-        ),
-
-        // Surface-scoped actions are performed on all surfaces. Errors
-        // are logged but processing continues.
-        .surface => for (self.surfaces.items) |surface| {
-            _ = surface.core_surface.performBindingAction(action) catch |err| {
-                log.warn("error performing binding action on surface ptr={X} err={}", .{
-                    @intFromPtr(surface),
-                    err,
-                });
-            };
-        },
-    }
-}
-
 /// Handle a window message
 fn surfaceMessage(self: *App, surface: *Surface, msg: apprt.surface.Message) !void {
     // We want to ensure our window is still active. Window messages
@@ -558,26 +312,4 @@ pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
     const wasm = @import("os/wasm.zig");
     const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };