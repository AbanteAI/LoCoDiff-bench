--- ghostty_src_App.zig_expectedoutput.txt (expected)+++ ghostty_src_App.zig_extracted.txt (actual)@@ -1,6 +1,5 @@-//! App is the primary GUI application for ghostty. This builds the window,
-//! sets up the renderer, etc. The primary run loop is started by calling
-//! the "run" function.
+//! App is the primary application controller. This owns all the surfaces (windows/views),
+//! the apprt, etc. This should be the primary entrypoint into Ghostty core.
 const App = @This();
 
 const std = @import("std");
@@ -246,8 +245,8 @@     while (self.mailbox.pop()) |message| {
         log.debug("mailbox message={s}", .{@tagName(message)});
         switch (message) {
-            .open_config => try self.performAction(rt_app, .open_config),
-            .new_window => |msg| try self.newWindow(rt_app, msg),
+            .open_config => _ = try self.performAction(rt_app, .open_config),
+            .new_window => |msg| _ = try self.newWindow(rt_app, msg),
             .close => |surface| self.closeSurface(surface),
             .surface_message => |msg| try self.surfaceMessage(msg.surface, msg.message),
             .redraw_surface => |surface| self.redrawSurface(rt_app, surface),
@@ -259,7 +258,7 @@             // can try to quit as quickly as possible.
             .quit => {
                 log.info("quit message received, short circuiting mailbox drain", .{});
-                try self.performAction(rt_app, .quit);
+                _ = try self.performAction(rt_app, .quit);
                 return;
             },
         }
@@ -389,7 +388,7 @@     // app-scoped. Otherwise, we do nothing. Surface-scoped should
     // be processed by Surface.keyEvent.
     const app_action = leaf.action.scoped(.app) orelse return false;
-    self.performAction(rt_app, app_action) catch |err| {
+    _ = self.performAction(rt_app, app_action) catch |err| {
         log.warn("error performing app keybind action action={s} err={}", .{
             @tagName(app_action),
             err,
@@ -427,13 +426,14 @@ }
 
 /// Perform a binding action. This only accepts actions that are scoped
-/// to the app. Callers can use performAllAction to perform any action
+/// to the app. Callers can use performÃ¤llAction to perform any action
 /// and any non-app-scoped actions will be performed on all surfaces.
 pub fn performAction(
     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action.Scoped(.app),
-) !void {
+) !bool {
+    _ = self;
     switch (action) {
         .unbind => unreachable,
         .ignore => {},
@@ -455,11 +455,12 @@     rt_app: *apprt.App,
     action: input.Binding.Action,
 ) !void {
+    log.debug("perform all action: {s}", .{@tagName(action)});
     switch (action.scope()) {
         // App-scoped actions are handled by the app so that they aren't
         // repeated for each surface (since each surface forwards
         // app-scoped actions back up).
-        .app => try self.performAction(
+        .app => _ = try self.performAction(
             rt_app,
             action.scoped(.app).?, // asserted through the scope match
         ),
