
index 6a32b56a9..918e8eea4 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmp11366u7i_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmp9caoq7im_actual.txt	
@@ -5,9 +5,7 @@ const App = @This();
 
 const std = @import("std");
 const builtin = @import("builtin");
-const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
-const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
 const tracy = @import("tracy");
@@ -72,7 +70,7 @@ config_conditional_state: configpkg.ConditionalState,
 /// Set to false once we've created at least one surface. This
 /// never goes true again. This can be used by surfaces to determine
 /// if they are the first surface.
-first: bool = true,
+first: bool = true;
 
 pub const CreateError = Allocator.Error || font.SharedGridSet.InitError;
 
@@ -231,16 +229,6 @@ pub fn focusedSurface(self: *const App) ?*Surface {
     return surface;
 }
 
-/// Returns true if confirmation is needed to quit the app. It is up to
-/// the apprt to call this.
-pub fn needsConfirmQuit(self: *const App) bool {
-    for (self.surfaces.items) |v| {
-        if (v.core_surface.needsConfirmQuit()) return true;
-    }
-
-    return false;
-}
-
 /// Drain the mailbox.
 fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
     while (self.mailbox.pop()) |message| {
@@ -259,7 +247,7 @@ fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
             // can try to quit as quickly as possible.
             .quit => {
                 log.info("quit message received, short circuiting mailbox drain", .{});
-                try self.performAction(rt_app, .quit);
+                _ = try self.performAction(rt_app, .quit);
                 return;
             },
         }
@@ -301,6 +289,33 @@ pub fn newWindow(self: *App, rt_app: *apprt.App, msg: Message.NewWindow) !void {
     );
 }
 
+/// Call to notify Ghostty that the color scheme for the app has changed.
+/// "Color scheme" in this case refers to system themes such as "light/dark".
+pub fn colorSchemeEvent(
+    self: *App,
+    rt_app: *apprt.App,
+    scheme: apprt.ColorScheme,
+) !void {
+    const new_scheme: configpkg.ConditionalState.Theme = switch (scheme) {
+        .light => .light,
+        .dark => .dark,
+    };
+
+    // If our scheme didn't change, then we don't do anything.
+    if (self.config_conditional_state.theme == new_scheme) return;
+
+    // Setup our conditional state which has the current color theme.
+    self.config_conditional_state.theme = new_scheme;
+
+    // Request our configuration be reloaded because the new scheme may
+    // impact the colors of the app.
+    _ = try rt_app.performAction(
+        .app,
+        .reload_config,
+        .{ .soft = true },
+    );
+}
+
 /// Handle an app-level focus event. This should be called whenever
 /// the focus state of the entire app containing Ghostty changes.
 /// This is separate from surface focus events. See the `focused`
@@ -399,33 +414,6 @@ pub fn keyEvent(
     return true;
 }
 
-/// Call to notify Ghostty that the color scheme for the app has changed.
-/// "Color scheme" in this case refers to system themes such as "light/dark".
-pub fn colorSchemeEvent(
-    self: *App,
-    rt_app: *apprt.App,
-    scheme: apprt.ColorScheme,
-) !void {
-    const new_scheme: configpkg.ConditionalState.Theme = switch (scheme) {
-        .light => .light,
-        .dark => .dark,
-    };
-
-    // If our scheme didn't change, then we don't do anything.
-    if (self.config_conditional_state.theme == new_scheme) return;
-
-    // Setup our conditional state which has the current color theme.
-    self.config_conditional_state.theme = new_scheme;
-
-    // Request our configuration be reloaded because the new scheme may
-    // impact the colors of the app.
-    _ = try rt_app.performAction(
-        .app,
-        .reload_config,
-        .{ .soft = true },
-    );
-}
-
 /// Perform a binding action. This only accepts actions that are scoped
 /// to the app. Callers can use performAllAction to perform any action
 /// and any non-app-scoped actions will be performed on all surfaces.
@@ -433,7 +421,7 @@ pub fn performAction(
     self: *App,
     rt_app: *apprt.App,
     action: input.Binding.Action.Scoped(.app),
-) !void {
+) !bool {
     switch (action) {
         .unbind => unreachable,
         .ignore => {},
@@ -445,6 +433,7 @@ pub fn performAction(
         .toggle_quick_terminal => _ = try rt_app.performAction(.app, .toggle_quick_terminal, {}),
         .toggle_visibility => _ = try rt_app.performAction(.app, .toggle_visibility, {}),
     }
+    return true;
 }
 
 /// Perform an app-wide binding action. If the action is surface-specific
@@ -459,7 +448,7 @@ pub fn performAllAction(
         // App-scoped actions are handled by the app so that they aren't
         // repeated for each surface (since each surface forwards
         // app-scoped actions back up).
-        .app => try self.performAction(
+        .app => _ = try self.performAction(
             rt_app,
             action.scoped(.app).?, // asserted through the scope match
         ),
@@ -477,6 +466,16 @@ pub fn performAllAction(
     }
 }
 
+/// Returns true if confirmation is needed to quit the app. It is up to
+/// the apprt to call this.
+pub fn needsConfirmQuit(self: *const App) bool {
+    for (self.surfaces.items) |v| {
+        if (v.core_surface.needsConfirmQuit()) return true;
+    }
+
+    return false;
+}
+
 /// Handle a window message
 fn surfaceMessage(self: *App, surface: *Surface, msg: apprt.surface.Message) !void {
     // We want to ensure our window is still active. Window messages
@@ -552,32 +551,4 @@ pub const Mailbox = struct {
 
         return result;
     }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };
\ No newline at end of file
