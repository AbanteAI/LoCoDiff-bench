
index 6a32b56a..3430ad63 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpoostwnqp_expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmptjb2nzi__actual.txt	
@@ -115,6 +115,10 @@ pub fn destroy(self: *App) void {
     assert(self.font_grid_set.count() == 0);
     self.font_grid_set.deinit();
 
+    if (comptime font.Discover != void) {
+        if (self.font_discover) |*v| v.deinit();
+    }
+
     self.alloc.destroy(self);
 }
 
@@ -266,6 +270,14 @@ fn drainMailbox(self: *App, rt_app: *apprt.App) !void {
     }
 }
 
+pub fn reloadConfig(self: *App, rt_app: *apprt.App) !void {
+    log.debug("reloading configuration", .{});
+    if (try rt_app.reloadConfig()) |new| {
+        log.debug("new configuration received, applying", .{});
+        try self.updateConfig(rt_app, new);
+    }
+}
+
 pub fn closeSurface(self: *App, surface: *Surface) void {
     if (!self.hasSurface(surface)) return;
     surface.close();
@@ -552,32 +564,4 @@ pub const Mailbox = struct {
 
         return result;
     }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };
\ No newline at end of file
