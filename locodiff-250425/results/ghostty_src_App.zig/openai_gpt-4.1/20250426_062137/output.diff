
index 6a32b56a..dbdfc8c4 100644
--- a/ghostty_src_App.zig_expectedoutput.txt (expected):tmp/tmpi7stwbc__expected.txt	
+++ b/ghostty_src_App.zig_extracted.txt (actual):tmp/tmpy5zeln77_actual.txt	
@@ -4,9 +4,8 @@
 const App = @This();
 
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
-const Allocator = std.mem.Allocator;
+const builtin = @import("builtin");
 const build_config = @import("build_config.zig");
 const apprt = @import("apprt.zig");
 const Surface = @import("Surface.zig");
@@ -50,7 +49,6 @@ focused: bool = true,
 /// you must always call hasSurface to validate it.
 focused_surface: ?*Surface = null,
 
-/// The mailbox that can be used to send this thread messages. Note
 /// this is a blocking queue so if it is full you will get errors (or block).
 mailbox: Mailbox.Queue,
 
@@ -64,6 +62,8 @@ font_grid_set: font.SharedGridSet,
 last_notification_time: ?std.time.Instant = null,
 last_notification_digest: u64 = 0,
 
+pub const CreateError = Allocator.Error || font.SharedGridSet.InitError;
+
 /// The conditional state of the configuration. See the equivalent field
 /// in the Surface struct for more information. In this case, this applies
 /// to the app-level config and as a default for new surfaces.
@@ -74,8 +74,6 @@ config_conditional_state: configpkg.ConditionalState,
 /// if they are the first surface.
 first: bool = true,
 
-pub const CreateError = Allocator.Error || font.SharedGridSet.InitError;
-
 /// Initialize the main app instance. This creates the main window, sets
 /// up the renderer state, compiles the shaders, etc. This is the primary
 /// "startup" logic.
@@ -95,6 +93,7 @@ pub fn create(
         .alloc = alloc,
         .surfaces = .{},
         .mailbox = .{},
+        //.quit = false, // field removed
         .font_grid_set = font_grid_set,
         .config_conditional_state = .{},
     };
@@ -510,9 +509,6 @@ pub const Message = union(enum) {
     /// should close.
     close: *Surface,
 
-    /// Quit
-    quit: void,
-
     /// A message for a specific surface.
     surface_message: struct {
         surface: *Surface,
@@ -529,6 +525,10 @@ pub const Message = union(enum) {
     /// causes the inspector to need to be redrawn.
     redraw_inspector: *apprt.Surface,
 
+    /// Quit the app. This sets the quit flag on the app and will end
+    /// wait.
+    quit: void,
+
     const NewWindow = struct {
         /// The parent surface
         parent: ?*Surface = null,
@@ -552,32 +552,4 @@ pub const Mailbox = struct {
 
         return result;
     }
-};
-
-// Wasm API.
-pub const Wasm = if (!builtin.target.isWasm()) struct {} else struct {
-    const wasm = @import("os/wasm.zig");
-    const alloc = wasm.alloc;
-
-    // export fn app_new(config: *Config) ?*App {
-    //     return app_new_(config) catch |err| { log.err("error initializing app err={}", .{err});
-    //         return null;
-    //     };
-    // }
-    //
-    // fn app_new_(config: *Config) !*App {
-    //     const app = try App.create(alloc, config);
-    //     errdefer app.destroy();
-    //
-    //     const result = try alloc.create(App);
-    //     result.* = app;
-    //     return result;
-    // }
-    //
-    // export fn app_free(ptr: ?*App) void {
-    //     if (ptr) |v| {
-    //         v.destroy();
-    //         alloc.destroy(v);
-    //     }
-    // }
 };
\ No newline at end of file
