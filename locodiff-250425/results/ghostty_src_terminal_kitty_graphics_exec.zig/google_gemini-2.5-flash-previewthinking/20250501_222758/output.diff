--- ghostty_src_terminal_kitty_graphics_exec.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_kitty_graphics_exec.zig_extracted.txt (actual)@@ -7,11 +7,11 @@ const Terminal = @import("../Terminal.zig");
 const command = @import("graphics_command.zig");
 const image = @import("graphics_image.zig");
+const ImageStorage = @import("graphics_storage.zig").ImageStorage;
 const Command = command.Command;
 const Response = command.Response;
 const LoadingImage = image.LoadingImage;
 const Image = image.Image;
-const ImageStorage = @import("graphics_storage.zig").ImageStorage;
 
 const log = std.log.scoped(.kitty_gfx);
 
@@ -78,7 +78,7 @@ 
     // Handle the quiet settings
     if (resp_) |resp| {
-        if (!resp.ok()) {
+        if (!resp.ok() and resp.message.len > 0) {
             log.warn("erroneous kitty graphics response: {s}", .{resp.message});
         }
 
@@ -91,6 +91,7 @@ 
     return null;
 }
+
 /// Execute a "query" command.
 ///
 /// This command is used to attempt to load an image and respond with
@@ -118,7 +119,7 @@         encodeError(&result, err);
         return result;
     };
-    loading.deinit(alloc);
+    defer loading.deinit(alloc);
 
     return result;
 }
@@ -187,6 +188,14 @@     if (d.image_id == 0 and d.image_number == 0) {
         return .{ .message = "EINVAL: image ID or number required" };
     }
+    if (d.image_id > 0 and d.image_number > 0) {
+        return .{ .message = "EINVAL: image ID and number are mutually exclusive" };
+    }
+    if (d.virtual_placement) {
+        if (d.parent_id > 0) {
+            return .{ .message = "EINVAL: virtual placement cannot refer to a parent" };
+        }
+    }
 
     // Build up our response
     var result: Response = .{
@@ -212,14 +221,7 @@     // Location where the placement will go.
     const location: ImageStorage.Placement.Location = location: {
         // Virtual placements are not tracked
-        if (d.virtual_placement) {
-            if (d.parent_id > 0) {
-                result.message = "EINVAL: virtual placement cannot refer to a parent";
-                return result;
-            }
-
-            break :location .{ .virtual = {} };
-        }
+        if (d.virtual_placement) break :location .{ .virtual = {} };
 
         // Track a new pin for our cursor. The cursor is always tracked but we
         // don't want this one to move with the cursor.
@@ -350,7 +352,15 @@         errdefer alloc.destroy(loading_ptr);
         loading_ptr.* = loading;
         storage.loading = loading_ptr;
-        return .{ .image = loading.image, .more = true };
+
+        // If it is transmit and display, we pull out the display settings
+        // and store them so we can apply them when the last chunk arrives.
+        const display_: ?command.Display = if (cmd.control == .transmit_and_display)
+            &cmd.control.transmit_and_display.display
+        else
+            null;
+
+        return .{ .image = loading.image, .more = true, .display = display_ };
     }
 
     // Dump the image data before it is decompressed
