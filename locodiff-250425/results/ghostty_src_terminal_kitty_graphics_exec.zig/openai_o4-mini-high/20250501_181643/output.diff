
index ac4e9bf2..5c2781b6 100644
--- a/ghostty_src_terminal_kitty_graphics_exec.zig_expectedoutput.txt (expected):tmp/tmpam62xvil_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_exec.zig_extracted.txt (actual):tmp/tmp2g0w60w__actual.txt	
@@ -73,15 +73,12 @@ pub fn execute(
         .transmit_animation_frame,
         .control_animation,
         .compose_animation,
-        => .{ .message = "ERROR: unimplemented action" },
     };
 
-    // Handle the quiet settings
     if (resp_) |resp| {
         if (!resp.ok()) {
             log.warn("erroneous kitty graphics response: {s}", .{resp.message});
         }
-
         return switch (quiet) {
             .no => if (resp.empty()) null else resp,
             .ok => if (resp.ok()) null else resp,
@@ -91,6 +88,7 @@ pub fn execute(
 
     return null;
 }
+
 /// Execute a "query" command.
 ///
 /// This command is used to attempt to load an image and respond with
@@ -123,10 +121,7 @@ fn query(alloc: Allocator, cmd: *const Command) Response {
     return result;
 }
 
-/// Transmit image data.
-///
-/// This loads the image, validates it, and puts it into the terminal
-/// screen storage. It does not display the image.
+/// Transmit image data. This handles both transmit and transmit & display.
 fn transmit(
     alloc: Allocator,
     terminal: *Terminal,
@@ -138,6 +133,7 @@ fn transmit(
         .image_number = t.image_number,
         .placement_id = t.placement_id,
     };
+
     if (t.image_id > 0 and t.image_number > 0) {
         return .{ .message = "EINVAL: image ID and number are mutually exclusive" };
     }
@@ -168,14 +164,13 @@ fn transmit(
     // on a number or explicitly specified ID, then we don't respond.
     if (load.image.implicit_id) return .{};
 
-    // After the image is added, set the ID in case it changed.
-    // The resulting image number and placement ID never change.
+    // After the image is added, set the ID in case it changed. The
+    // resulting image number and placement ID never change.
     result.id = load.image.id;
 
     return result;
 }
 
-/// Display a previously transmitted image.
 fn display(
     alloc: Allocator,
     terminal: *Terminal,
@@ -183,12 +178,6 @@ fn display(
 ) Response {
     const d = cmd.display().?;
 
-    // Display requires image ID or number.
-    if (d.image_id == 0 and d.image_number == 0) {
-        return .{ .message = "EINVAL: image ID or number required" };
-    }
-
-    // Build up our response
     var result: Response = .{
         .id = d.image_id,
         .image_number = d.image_number,
@@ -255,7 +244,7 @@ fn display(
         p.deinit(&terminal.screen);
         encodeError(&result, err);
         return result;
-    };
+    }
 
     // Apply cursor movement setting. This only applies to pin placements.
     switch (p.location) {
@@ -275,7 +264,7 @@ fn display(
                     pin.x + size.cols + 1,
                 );
             },
-        },
+        }
     }
 
     return result;
@@ -335,17 +324,12 @@ fn loadAndAddImage(
     if (loading.image.id == 0) {
         loading.image.id = storage.next_image_id;
         storage.next_image_id +%= 1;
-
-        // If the image also has no number then its auto-ID is "implicit".
-        // See the doc comment on the Image.implicit_id field for more detail.
         if (loading.image.number == 0) loading.image.implicit_id = true;
     }
 
     // If this is chunked, this is the beginning of a new chunked transmission.
     // (We checked for an in-progress chunk above.)
     if (t.more_chunks) {
-        // We allocate the pointer on the heap because its rare and we
-        // don't want to always pay the memory cost to keep it around.
         const loading_ptr = try alloc.create(LoadingImage);
         errdefer alloc.destroy(loading_ptr);
         loading_ptr.* = loading;
@@ -361,13 +345,13 @@ fn loadAndAddImage(
     errdefer img.deinit(alloc);
     try storage.addImage(alloc, img);
 
-    // Get our display settings
-    const display_ = loading.display;
-
     // Ensure we deinit the loading state because we're done. The image
     // won't be deinit because of "complete" above.
     loading.deinit(alloc);
 
+    // Get our display settings
+    const display_ = loading.display;
+
     return .{ .image = img, .display = display_ };
 }
 
