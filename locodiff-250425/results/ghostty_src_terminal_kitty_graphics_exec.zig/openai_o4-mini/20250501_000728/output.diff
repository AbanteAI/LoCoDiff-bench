
index ac4e9bf2..edcaab74 100644
--- a/ghostty_src_terminal_kitty_graphics_exec.zig_expectedoutput.txt (expected):tmp/tmpyktptz12_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_exec.zig_extracted.txt (actual):tmp/tmp7y4956w0_actual.txt	
@@ -15,13 +15,6 @@ const ImageStorage = @import("graphics_storage.zig").ImageStorage;
 
 const log = std.log.scoped(.kitty_gfx);
 
-/// Execute a Kitty graphics command against the given terminal. This
-/// will never fail, but the response may indicate an error and the
-/// terminal state may not be updated to reflect the command. This will
-/// never put the terminal in an unrecoverable state, however.
-///
-/// The allocator must be the same allocator that was used to build
-/// the command.
 pub fn execute(
     alloc: Allocator,
     terminal: *Terminal,
@@ -47,9 +40,6 @@ pub fn execute(
 
     const resp_: ?Response = switch (cmd.control) {
         .query => query(alloc, cmd),
-        .display => display(alloc, terminal, cmd),
-        .delete => delete(alloc, terminal, cmd),
-
         .transmit, .transmit_and_display => resp: {
             // If we're transmitting, then our `q` setting value is complicated.
             // The `q` setting inherits the value from the starting command
@@ -66,22 +56,20 @@ pub fn execute(
                     loading.quiet = tag;
                 },
             };
-
             break :resp transmit(alloc, terminal, cmd);
         },
-
+        .display => display(alloc, terminal, cmd),
+        .delete => delete(alloc, terminal, cmd),
         .transmit_animation_frame,
         .control_animation,
         .compose_animation,
         => .{ .message = "ERROR: unimplemented action" },
     };
 
-    // Handle the quiet settings
     if (resp_) |resp| {
         if (!resp.ok()) {
             log.warn("erroneous kitty graphics response: {s}", .{resp.message});
         }
-
         return switch (quiet) {
             .no => if (resp.empty()) null else resp,
             .ok => if (resp.ok()) null else resp,
@@ -91,11 +79,7 @@ pub fn execute(
 
     return null;
 }
-/// Execute a "query" command.
-///
-/// This command is used to attempt to load an image and respond with
-/// success/error but does not persist any of the command to the terminal
-/// state.
+
 fn query(alloc: Allocator, cmd: *const Command) Response {
     const t = cmd.control.query;
 
@@ -106,7 +90,6 @@ fn query(alloc: Allocator, cmd: *const Command) Response {
         return .{ .message = "EINVAL: image ID required" };
     }
 
-    // Build a partial response to start
     var result: Response = .{
         .id = t.image_id,
         .image_number = t.image_number,
@@ -123,10 +106,6 @@ fn query(alloc: Allocator, cmd: *const Command) Response {
     return result;
 }
 
-/// Transmit image data.
-///
-/// This loads the image, validates it, and puts it into the terminal
-/// screen storage. It does not display the image.
 fn transmit(
     alloc: Allocator,
     terminal: *Terminal,
@@ -148,9 +127,6 @@ fn transmit(
     };
     errdefer load.image.deinit(alloc);
 
-    // If we're also displaying, then do that now. This function does
-    // both transmit and transmit and display. The display might also be
-    // deferred if it is multi-chunk.
     if (load.display) |d| {
         assert(!load.more);
         var d_copy = d;
@@ -175,27 +151,18 @@ fn transmit(
     return result;
 }
 
-/// Display a previously transmitted image.
 fn display(
     alloc: Allocator,
     terminal: *Terminal,
     cmd: *const Command,
 ) Response {
     const d = cmd.display().?;
-
-    // Display requires image ID or number.
-    if (d.image_id == 0 and d.image_number == 0) {
-        return .{ .message = "EINVAL: image ID or number required" };
-    }
-
-    // Build up our response
     var result: Response = .{
         .id = d.image_id,
         .image_number = d.image_number,
         .placement_id = d.placement_id,
     };
 
-    // Verify the requested image exists if we have an ID
     const storage = &terminal.screen.kitty_images;
     const img_: ?Image = if (d.image_id != 0)
         storage.imageById(d.image_id)
@@ -206,9 +173,6 @@ fn display(
         return result;
     };
 
-    // Make sure our response has the image id in case we looked up by number
-    result.id = img.id;
-
     // Location where the placement will go.
     const location: ImageStorage.Placement.Location = location: {
         // Virtual placements are not tracked
@@ -217,7 +181,6 @@ fn display(
                 result.message = "EINVAL: virtual placement cannot refer to a parent";
                 return result;
             }
-
             break :location .{ .virtual = {} };
         }
 
@@ -233,7 +196,6 @@ fn display(
         break :location .{ .pin = pin };
     };
 
-    // Add the placement
     const p: ImageStorage.Placement = .{
         .location = location,
         .x_offset = d.x_offset,
@@ -246,12 +208,7 @@ fn display(
         .rows = d.rows,
         .z = d.z,
     };
-    storage.addPlacement(
-        alloc,
-        img.id,
-        result.placement_id,
-        p,
-    ) catch |err| {
+    storage.addPlacement(alloc, img.id, d.placement_id, p) catch |err| {
         p.deinit(&terminal.screen);
         encodeError(&result, err);
         return result;
@@ -269,7 +226,6 @@ fn display(
                     log.warn("failed to move cursor: {}", .{err});
                     break;
                 };
-
                 terminal.setCursorPos(
                     terminal.screen.cursor.y,
                     pin.x + size.cols + 1,
@@ -281,7 +237,6 @@ fn display(
     return result;
 }
 
-/// Display a previously transmitted image.
 fn delete(
     alloc: Allocator,
     terminal: *Terminal,
@@ -289,8 +244,6 @@ fn delete(
 ) Response {
     const storage = &terminal.screen.kitty_images;
     storage.delete(alloc, terminal, cmd.control.delete);
-
-    // Delete never responds on success
     return .{};
 }
 
@@ -307,45 +260,30 @@ fn loadAndAddImage(
     const storage = &terminal.screen.kitty_images;
 
     // Determine our image. This also handles chunking and early exit.
-    var loading: LoadingImage = if (storage.loading) |loading| loading: {
+    var loading: LoadingImage = if (storage.loading) |loading_ptr| loading: {
         // Note: we do NOT want to call "cmd.toOwnedData" here because
         // we're _copying_ the data. We want the command data to be freed.
-        try loading.addData(alloc, cmd.data);
-
-        // If we have more then we're done
-        if (t.more_chunks) return .{ .image = loading.image, .more = true };
-
-        // We have no more chunks. We're going to be completing the
-        // image so we want to destroy the pointer to the loading
-        // image and copy it out.
+        try loading_ptr.data.appendSlice(alloc, cmd.data);
+        if (t.more_chunks) return .{ .image = loading_ptr.image, .more = true };
         defer {
-            alloc.destroy(loading);
+            loading_ptr.destroy(alloc);
             storage.loading = null;
         }
-
-        break :loading loading.*;
+        break :loading try loading_ptr.complete(alloc);
     } else try LoadingImage.init(alloc, cmd);
 
-    // We only want to deinit on error. If we're chunking, then we don't
-    // want to deinit at all. If we're not chunking, then we'll deinit
-    // after we've copied the image out.
     errdefer loading.deinit(alloc);
 
-    // If the image has no ID, we assign one
+    // If the image has no ID, we assign one.
     if (loading.image.id == 0) {
         loading.image.id = storage.next_image_id;
         storage.next_image_id +%= 1;
-
         // If the image also has no number then its auto-ID is "implicit".
-        // See the doc comment on the Image.implicit_id field for more detail.
         if (loading.image.number == 0) loading.image.implicit_id = true;
     }
 
     // If this is chunked, this is the beginning of a new chunked transmission.
-    // (We checked for an in-progress chunk above.)
     if (t.more_chunks) {
-        // We allocate the pointer on the heap because its rare and we
-        // don't want to always pay the memory cost to keep it around.
         const loading_ptr = try alloc.create(LoadingImage);
         errdefer alloc.destroy(loading_ptr);
         loading_ptr.* = loading;
