
index 153c7d551..3021722b3 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpzsadt8xq_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmpp88ftome_actual.txt	
@@ -3,8 +3,8 @@ use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
 
-use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
+use delegate::delegate;
 use parking_lot::RwLock;
 use rocksdb::DB;
 
@@ -91,30 +91,6 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
         self.point_to_values.get(idx as usize).map(Vec::len)
     }
 
-    pub fn total_unique_values_count(&self) -> usize {
-        self.map.len()
-    }
-
-    pub fn values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
-        self.map
-            .range((start_bound, end_bound))
-            .map(|point| point.idx)
-    }
-
-    pub fn orderable_values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.map
-            .range((start_bound, end_bound))
-            .map(|point| (point.val, point.idx))
-    }
-
     pub fn add_many_to_list(&mut self, idx: PointOffsetType, values: Vec<T>) {
         if self.point_to_values.len() <= idx as usize {
             self.point_to_values.resize_with(idx as usize + 1, Vec::new)
@@ -270,7 +246,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
             .map(|mut values| {
                 values.try_for_each(|value| {
                     let key = value.encode_key(idx);
-                    self.db_wrapper.remove(key)
+                    self.db_wrapper.remove(&key)
                 })
             })
             .transpose()?;
