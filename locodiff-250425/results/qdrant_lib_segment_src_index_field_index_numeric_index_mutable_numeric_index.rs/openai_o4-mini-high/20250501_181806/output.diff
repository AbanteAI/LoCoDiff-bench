
index 153c7d55..1a36d0a1 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmp1gw5_4bn_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmpp2oc252h_actual.txt	
@@ -2,15 +2,15 @@ use std::collections::BTreeSet;
 use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
+use std::mem::size_of_val;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
+use delegate::delegate;
 use parking_lot::RwLock;
 use rocksdb::DB;
 
-use super::{
-    Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name,
-};
+use super::{Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name};
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
 use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
@@ -21,7 +21,6 @@ pub struct MutableNumericIndex<T: Encodable + Numericable> {
     in_memory_index: InMemoryNumericIndex<T>,
 }
 
-// Numeric Index with insertions and deletions without persistence
 pub struct InMemoryNumericIndex<T: Encodable + Numericable> {
     pub map: BTreeSet<Point<T>>,
     pub histogram: Histogram<T>,
@@ -42,24 +41,17 @@ impl<T: Encodable + Numericable> Default for InMemoryNumericIndex<T> {
     }
 }
 
-impl<T: Encodable + Numericable + Default> FromIterator<(PointOffsetType, T)>
-    for InMemoryNumericIndex<T>
-{
+impl<T: Encodable + Numericable + Default> FromIterator<(PointOffsetType, T)> for InMemoryNumericIndex<T> {
     fn from_iter<I: IntoIterator<Item = (PointOffsetType, T)>>(iter: I) -> Self {
         let mut index = InMemoryNumericIndex::default();
-        for pair in iter {
-            let (idx, value) = pair;
-
+        for (idx, value) in iter {
             if index.point_to_values.len() <= idx as usize {
-                index
-                    .point_to_values
-                    .resize_with(idx as usize + 1, Vec::new)
+                index.point_to_values.resize_with(idx as usize + 1, Vec::new);
             }
-
             index.point_to_values[idx as usize].push(value);
 
             let key = Point::new(value, idx);
-            InMemoryNumericIndex::add_to_map(&mut index.map, &mut index.histogram, key);
+            Self::add_to_map(&mut index.map, &mut index.histogram, key);
         }
         for values in &index.point_to_values {
             if !values.is_empty() {
@@ -81,9 +73,7 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
 
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
         Some(Box::new(
-            self.point_to_values
-                .get(idx as usize)
-                .map(|v| v.iter().cloned())?,
+            self.point_to_values.get(idx as usize)?.iter().cloned(),
         ))
     }
 
@@ -99,10 +89,8 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
-        self.map
-            .range((start_bound, end_bound))
-            .map(|point| point.idx)
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
+        self.map.range((start_bound, end_bound)).map(|point| point.idx)
     }
 
     pub fn orderable_values_range(
@@ -110,14 +98,12 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
     ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.map
-            .range((start_bound, end_bound))
-            .map(|point| (point.val, point.idx))
+        self.map.range((start_bound, end_bound)).map(|point| (point.val, point.idx))
     }
 
     pub fn add_many_to_list(&mut self, idx: PointOffsetType, values: Vec<T>) {
         if self.point_to_values.len() <= idx as usize {
-            self.point_to_values.resize_with(idx as usize + 1, Vec::new)
+            self.point_to_values.resize_with(idx as usize + 1, Vec::new);
         }
         for value in &values {
             let key = Point::new(*value, idx);
@@ -145,9 +131,6 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
 
     fn add_to_map(map: &mut BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
         let was_added = map.insert(key.clone());
-        // Histogram works with unique values (idx + value) only, so we need to
-        // make sure that we don't add the same value twice.
-        // key is a combination of value + idx, so we can use it to ensure than the pair is unique
         if was_added {
             histogram.insert(
                 key,
@@ -227,10 +210,12 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
             .lock_db()
             .iter()?
             .map(|(key, value)| {
-                let value_idx =
-                    u32::from_be_bytes(value.as_ref().try_into().map_err(|_| {
-                        OperationError::service_error("incorrect numeric index value")
-                    })?);
+                let value_idx = u32::from_be_bytes(
+                    value
+                        .as_ref()
+                        .try_into()
+                        .map_err(|_| OperationError::service_error("incorrect numeric index value"))?,
+                );
                 let (idx, value) = T::decode_key(&key);
                 if idx != value_idx {
                     return Err(OperationError::service_error(
@@ -259,7 +244,6 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
             self.db_wrapper.put(&key, idx.to_be_bytes())?;
             hw_cell_wb.incr_delta(size_of_val(&key) + size_of_val(&idx));
         }
-
         self.in_memory_index.add_many_to_list(idx, values);
         Ok(())
     }
@@ -286,22 +270,27 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
     pub fn total_unique_values_count(&self) -> usize {
         self.in_memory_index.total_unique_values_count()
     }
+
     #[inline]
     pub fn check_values_any(&self, idx: PointOffsetType, check_fn: impl Fn(&T) -> bool) -> bool {
         self.in_memory_index.check_values_any(idx, check_fn)
     }
+
     #[inline]
     pub fn get_points_count(&self) -> usize {
         self.in_memory_index.get_points_count()
     }
+
     #[inline]
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
         self.in_memory_index.get_values(idx)
     }
+
     #[inline]
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
         self.in_memory_index.values_count(idx)
     }
+
     #[inline]
     pub fn values_range(
         &self,
@@ -310,19 +299,21 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
     ) -> impl Iterator<Item = PointOffsetType> {
         self.in_memory_index.values_range(start_bound, end_bound)
     }
+
     #[inline]
     pub fn orderable_values_range(
         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
     ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.in_memory_index
-            .orderable_values_range(start_bound, end_bound)
+        self.in_memory_index.orderable_values_range(start_bound, end_bound)
     }
+
     #[inline]
     pub fn get_histogram(&self) -> &Histogram<T> {
         self.in_memory_index.get_histogram()
     }
+
     #[inline]
     pub fn get_max_values_per_point(&self) -> usize {
         self.in_memory_index.get_max_values_per_point()
