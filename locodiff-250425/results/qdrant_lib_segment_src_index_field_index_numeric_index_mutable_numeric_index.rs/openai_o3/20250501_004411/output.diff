--- qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual)@@ -1,4 +1,6 @@ use std::collections::BTreeSet;
+use std::iter::FromIterator;
+use std::mem::size_of_val;
 use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
@@ -9,7 +11,7 @@ use rocksdb::DB;
 
 use super::{
-    Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name,
+    numeric_index_storage_cf_name, Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION,
 };
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
@@ -21,7 +23,7 @@     in_memory_index: InMemoryNumericIndex<T>,
 }
 
-// Numeric Index with insertions and deletions without persistence
+/// Numeric index that is fully kept in memory, supports insertions and deletions.
 pub struct InMemoryNumericIndex<T: Encodable + Numericable> {
     pub map: BTreeSet<Point<T>>,
     pub histogram: Histogram<T>,
@@ -47,17 +49,13 @@ {
     fn from_iter<I: IntoIterator<Item = (PointOffsetType, T)>>(iter: I) -> Self {
         let mut index = InMemoryNumericIndex::default();
-        for pair in iter {
-            let (idx, value) = pair;
-
+        for (idx, value) in iter {
             if index.point_to_values.len() <= idx as usize {
                 index
                     .point_to_values
                     .resize_with(idx as usize + 1, Vec::new)
             }
-
             index.point_to_values[idx as usize].push(value);
-
             let key = Point::new(value, idx);
             InMemoryNumericIndex::add_to_map(&mut index.map, &mut index.histogram, key);
         }
@@ -91,6 +89,10 @@         self.point_to_values.get(idx as usize).map(Vec::len)
     }
 
+    pub fn get_points_count(&self) -> usize {
+        self.points_count
+    }
+
     pub fn total_unique_values_count(&self) -> usize {
         self.map.len()
     }
@@ -99,7 +101,7 @@         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
         self.map
             .range((start_bound, end_bound))
             .map(|point| point.idx)
@@ -133,7 +135,7 @@     pub fn remove_point(&mut self, idx: PointOffsetType) {
         if let Some(values) = self.point_to_values.get_mut(idx as usize) {
             if !values.is_empty() {
-                self.points_count = self.points_count.checked_sub(1).unwrap_or_default();
+                self.points_count = self.points_count.saturating_sub(1);
             }
             for value in values.iter() {
                 let key = Point::new(*value, idx);
@@ -145,9 +147,6 @@ 
     fn add_to_map(map: &mut BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
         let was_added = map.insert(key.clone());
-        // Histogram works with unique values (idx + value) only, so we need to
-        // make sure that we don't add the same value twice.
-        // key is a combination of value + idx, so we can use it to ensure than the pair is unique
         if was_added {
             histogram.insert(
                 key,
@@ -180,10 +179,6 @@         &self.histogram
     }
 
-    pub fn get_points_count(&self) -> usize {
-        self.points_count
-    }
-
     pub fn get_max_values_per_point(&self) -> usize {
         self.max_values_per_point
     }
@@ -208,8 +203,7 @@     pub fn new(db: Arc<RwLock<DB>>, field: &str) -> Self {
         let store_cf_name = numeric_index_storage_cf_name(field);
         let db_wrapper = DatabaseColumnScheduledDeleteWrapper::new(DatabaseColumnWrapper::new(
-            db,
-            &store_cf_name,
+            db, &store_cf_name,
         ));
         Self {
             db_wrapper,
@@ -227,10 +221,9 @@             .lock_db()
             .iter()?
             .map(|(key, value)| {
-                let value_idx =
-                    u32::from_be_bytes(value.as_ref().try_into().map_err(|_| {
-                        OperationError::service_error("incorrect numeric index value")
-                    })?);
+                let value_idx = u32::from_be_bytes(value.as_ref().try_into().map_err(|_| {
+                    OperationError::service_error("incorrect numeric index value")
+                })?);
                 let (idx, value) = T::decode_key(&key);
                 if idx != value_idx {
                     return Err(OperationError::service_error(
@@ -286,30 +279,36 @@     pub fn total_unique_values_count(&self) -> usize {
         self.in_memory_index.total_unique_values_count()
     }
+
     #[inline]
     pub fn check_values_any(&self, idx: PointOffsetType, check_fn: impl Fn(&T) -> bool) -> bool {
         self.in_memory_index.check_values_any(idx, check_fn)
     }
+
     #[inline]
     pub fn get_points_count(&self) -> usize {
         self.in_memory_index.get_points_count()
     }
+
     #[inline]
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
         self.in_memory_index.get_values(idx)
     }
+
     #[inline]
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
         self.in_memory_index.values_count(idx)
     }
+
     #[inline]
     pub fn values_range(
         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
         self.in_memory_index.values_range(start_bound, end_bound)
     }
+
     #[inline]
     pub fn orderable_values_range(
         &self,
@@ -319,10 +318,12 @@         self.in_memory_index
             .orderable_values_range(start_bound, end_bound)
     }
+
     #[inline]
     pub fn get_histogram(&self) -> &Histogram<T> {
         self.in_memory_index.get_histogram()
     }
+
     #[inline]
     pub fn get_max_values_per_point(&self) -> usize {
         self.in_memory_index.get_max_values_per_point()
