
index 153c7d551..e0193fe18 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpvd80_pp5_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmppvx79trr_actual.txt	
@@ -1,4 +1,4 @@
-use std::collections::BTreeSet;
+use std::mem::size_of;
 use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
@@ -9,7 +9,7 @@ use parking_lot::RwLock;
 use rocksdb::DB;
 
 use super::{
-    Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name,
+    numeric_index_storage_cf_name, Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION,
 };
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
@@ -99,7 +99,7 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
         self.map
             .range((start_bound, end_bound))
             .map(|point| point.idx)
@@ -257,7 +257,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         for value in &values {
             let key = value.encode_key(idx);
             self.db_wrapper.put(&key, idx.to_be_bytes())?;
-            hw_cell_wb.incr_delta(size_of_val(&key) + size_of_val(&idx));
+            hw_cell_wb.incr_delta(size_of_val(&key) + size_of::<PointOffsetType>());
         }
 
         self.in_memory_index.add_many_to_list(idx, values);
@@ -307,7 +307,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
         self.in_memory_index.values_range(start_bound, end_bound)
     }
     #[inline]
