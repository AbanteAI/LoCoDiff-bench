
index 153c7d55..6c3fbc55 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpqr_sk1d5_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmpfw7ztdui_actual.txt	
@@ -8,9 +8,7 @@ use common::types::PointOffsetType;
 use parking_lot::RwLock;
 use rocksdb::DB;
 
-use super::{
-    Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name,
-};
+use super::{Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name};
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
 use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
@@ -42,9 +40,7 @@ impl<T: Encodable + Numericable> Default for InMemoryNumericIndex<T> {
     }
 }
 
-impl<T: Encodable + Numericable + Default> FromIterator<(PointOffsetType, T)>
-    for InMemoryNumericIndex<T>
-{
+impl<T: Encodable + Numericable + Default> FromIterator<(PointOffsetType, T)> for InMemoryNumericIndex<T> {
     fn from_iter<I: IntoIterator<Item = (PointOffsetType, T)>>(iter: I) -> Self {
         let mut index = InMemoryNumericIndex::default();
         for pair in iter {
@@ -79,37 +75,13 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
             .unwrap_or(false)
     }
 
-    pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
-        Some(Box::new(
-            self.point_to_values
-                .get(idx as usize)
-                .map(|v| v.iter().cloned())?,
-        ))
-    }
-
-    pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
-        self.point_to_values.get(idx as usize).map(Vec::len)
-    }
-
-    pub fn total_unique_values_count(&self) -> usize {
-        self.map.len()
-    }
-
-    pub fn values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    pub fn values_range(&self, start_bound: Bound<Point<T>>, end_bound: Bound<Point<T>>) -> impl Iterator<Item = PointOffsetType> {
         self.map
             .range((start_bound, end_bound))
             .map(|point| point.idx)
     }
 
-    pub fn orderable_values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
+    pub fn orderable_values_range(&self, start_bound: Bound<Point<T>>, end_bound: Bound<Point<T>>) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
         self.map
             .range((start_bound, end_bound))
             .map(|point| (point.val, point.idx))
@@ -145,12 +117,9 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
 
     fn add_to_map(map: &mut BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
         let was_added = map.insert(key.clone());
-        // Histogram works with unique values (idx + value) only, so we need to
-        // make sure that we don't add the same value twice.
-        // key is a combination of value + idx, so we can use it to ensure than the pair is unique
         if was_added {
             histogram.insert(
-                key,
+                key.clone(),
                 |x| Self::get_histogram_left_neighbor(map, x.clone()),
                 |x| Self::get_histogram_right_neighbor(map, x.clone()),
             );
@@ -286,43 +255,42 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
     pub fn total_unique_values_count(&self) -> usize {
         self.in_memory_index.total_unique_values_count()
     }
+
     #[inline]
     pub fn check_values_any(&self, idx: PointOffsetType, check_fn: impl Fn(&T) -> bool) -> bool {
         self.in_memory_index.check_values_any(idx, check_fn)
     }
+
     #[inline]
     pub fn get_points_count(&self) -> usize {
         self.in_memory_index.get_points_count()
     }
+
     #[inline]
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
         self.in_memory_index.get_values(idx)
     }
+
     #[inline]
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
         self.in_memory_index.values_count(idx)
     }
+
     #[inline]
-    pub fn values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl Iterator<Item = PointOffsetType> {
+    pub fn values_range(&self, start_bound: Bound<Point<T>>, end_bound: Bound<Point<T>>) -> impl Iterator<Item = PointOffsetType> {
         self.in_memory_index.values_range(start_bound, end_bound)
     }
+
     #[inline]
-    pub fn orderable_values_range(
-        &self,
-        start_bound: Bound<Point<T>>,
-        end_bound: Bound<Point<T>>,
-    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.in_memory_index
-            .orderable_values_range(start_bound, end_bound)
+    pub fn orderable_values_range(&self, start_bound: Bound<Point<T>>, end_bound: Bound<Point<T>>) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
+        self.in_memory_index.orderable_values_range(start_bound, end_bound)
     }
+
     #[inline]
     pub fn get_histogram(&self) -> &Histogram<T> {
         self.in_memory_index.get_histogram()
     }
+
     #[inline]
     pub fn get_max_values_per_point(&self) -> usize {
         self.in_memory_index.get_max_values_per_point()
