
index 153c7d551..f09a88903 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpdkzsnp18_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmplu00tfwv_actual.txt	
@@ -3,7 +3,6 @@ use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
 
-use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use parking_lot::RwLock;
 use rocksdb::DB;
@@ -257,7 +256,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         for value in &values {
             let key = value.encode_key(idx);
             self.db_wrapper.put(&key, idx.to_be_bytes())?;
-            hw_cell_wb.incr_delta(size_of_val(&key) + size_of_val(&idx));
+            hw_cell_wb.incr_delta(std::mem::size_of_val(&key) + std::mem::size_of_val(&idx));
         }
 
         self.in_memory_index.add_many_to_list(idx, values);
@@ -282,27 +281,26 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         &self.in_memory_index.map
     }
 
-    #[inline]
     pub fn total_unique_values_count(&self) -> usize {
         self.in_memory_index.total_unique_values_count()
     }
-    #[inline]
+
     pub fn check_values_any(&self, idx: PointOffsetType, check_fn: impl Fn(&T) -> bool) -> bool {
         self.in_memory_index.check_values_any(idx, check_fn)
     }
-    #[inline]
+
     pub fn get_points_count(&self) -> usize {
         self.in_memory_index.get_points_count()
     }
-    #[inline]
+
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
         self.in_memory_index.get_values(idx)
     }
-    #[inline]
+
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
         self.in_memory_index.values_count(idx)
     }
-    #[inline]
+
     pub fn values_range(
         &self,
         start_bound: Bound<Point<T>>,
@@ -310,7 +308,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
     ) -> impl Iterator<Item = PointOffsetType> {
         self.in_memory_index.values_range(start_bound, end_bound)
     }
-    #[inline]
+
     pub fn orderable_values_range(
         &self,
         start_bound: Bound<Point<T>>,
@@ -319,11 +317,11 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         self.in_memory_index
             .orderable_values_range(start_bound, end_bound)
     }
-    #[inline]
+
     pub fn get_histogram(&self) -> &Histogram<T> {
         self.in_memory_index.get_histogram()
     }
-    #[inline]
+
     pub fn get_max_values_per_point(&self) -> usize {
         self.in_memory_index.get_max_values_per_point()
     }
