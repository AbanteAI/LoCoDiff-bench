--- qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual)@@ -1,4 +1,19 @@-use std::collections::BTreeSet;
+//! Copyright 2022 Qdrant B.V. 
+//! Licensed under the Qdrant Community Edition License Agreement (the "Qdrant Community Edition License"); you may not use this file except in compliance with the Qdrant Community Edition License. You may obtain a copy of the Qdrant Community Edition License at
+//! https://github.com/qdrant/qdrant/blob/main/licenses/qdrant_community_edition_license.txt.
+
+//! Unless required by applicable law or agreed to in writing, software
+//! distributed under the Qdrant Community Edition License is distributed on
+//! an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
+//! express or implied. See the Qdrant Community Edition License for the
+//! specific language governing permissions and limitations under the Qdrant
+//! Community Edition License.
+//! Unless you have purchased a commercial license from Qdrant,
+//! the Qdrant Public License does NOT apply to this file,
+//! in accordance with the Qdrant Open Source License Terms.
+//! Please review the Qdrant Open Source Terms for more details:
+//! https://github.com/qdrant/qdrant/blob/main/licenses/qdrant_open_source_license_terms.txt
+use std::mem::size_of;
 use std::ops::Bound;
 use std::ops::Bound::{Excluded, Unbounded};
 use std::sync::Arc;
@@ -21,9 +36,8 @@     in_memory_index: InMemoryNumericIndex<T>,
 }
 
-// Numeric Index with insertions and deletions without persistence
 pub struct InMemoryNumericIndex<T: Encodable + Numericable> {
-    pub map: BTreeSet<Point<T>>,
+    pub map: std::collections::BTreeSet<Point<T>>,
     pub histogram: Histogram<T>,
     pub points_count: usize,
     pub max_values_per_point: usize,
@@ -33,7 +47,7 @@ impl<T: Encodable + Numericable> Default for InMemoryNumericIndex<T> {
     fn default() -> Self {
         Self {
-            map: BTreeSet::new(),
+            map: std::collections::BTreeSet::new(),
             histogram: Histogram::new(HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION),
             points_count: 0,
             max_values_per_point: 0,
@@ -47,24 +61,21 @@ {
     fn from_iter<I: IntoIterator<Item = (PointOffsetType, T)>>(iter: I) -> Self {
         let mut index = InMemoryNumericIndex::default();
-        for pair in iter {
-            let (idx, value) = pair;
-
+        for (idx, value) in iter {
             if index.point_to_values.len() <= idx as usize {
                 index
                     .point_to_values
-                    .resize_with(idx as usize + 1, Vec::new)
+                    .resize_with(idx as usize + 1, Vec::new);
             }
-
             index.point_to_values[idx as usize].push(value);
-
             let key = Point::new(value, idx);
             InMemoryNumericIndex::add_to_map(&mut index.map, &mut index.histogram, key);
         }
         for values in &index.point_to_values {
             if !values.is_empty() {
                 index.points_count += 1;
-                index.max_values_per_point = index.max_values_per_point.max(values.len());
+                index.max_values_per_point =
+                    index.max_values_per_point.max(values.len());
             }
         }
         index
@@ -80,19 +91,13 @@     }
 
     pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
-        Some(Box::new(
-            self.point_to_values
-                .get(idx as usize)
-                .map(|v| v.iter().cloned())?,
-        ))
+        self.point_to_values
+            .get(idx as usize)
+            .map(|v| Box::new(v.iter().cloned()) as Box<dyn Iterator<Item = T> + '_>)
     }
 
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
         self.point_to_values.get(idx as usize).map(Vec::len)
-    }
-
-    pub fn total_unique_values_count(&self) -> usize {
-        self.map.len()
     }
 
     pub fn values_range(
@@ -115,13 +120,55 @@             .map(|point| (point.val, point.idx))
     }
 
+    fn add_to_map(map: &mut std::collections::BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
+        let was_added = map.insert(key.clone());
+        if was_added {
+            histogram.insert(
+                key,
+                |x| InMemoryNumericIndex::get_histogram_left_neighbor(map, x.clone()),
+                |x| InMemoryNumericIndex::get_histogram_right_neighbor(map, x.clone()),
+            );
+        }
+    }
+
+    fn remove_from_map(map: &mut std::collections::BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
+        let was_removed = map.remove(&key);
+        if was_removed {
+            histogram.remove(
+                &key,
+                |x| InMemoryNumericIndex::get_histogram_left_neighbor(map, x.clone()),
+                |x| InMemoryNumericIndex::get_histogram_right_neighbor(map, x.clone()),
+            );
+        }
+    }
+
+    fn get_histogram_left_neighbor(map: &std::collections::BTreeSet<Point<T>>, key: Point<T>) -> Option<Point<T>> {
+        map.range((Unbounded, Excluded(key))).next_back().cloned()
+    }
+
+    fn get_histogram_right_neighbor(map: &std::collections::BTreeSet<Point<T>>, key: Point<T>) -> Option<Point<T>> {
+        map.range((Excluded(key), Unbounded)).next().cloned()
+    }
+
+    pub fn get_histogram(&self) -> &Histogram<T> {
+        &self.histogram
+    }
+
+    pub fn get_points_count(&self) -> usize {
+        self.points_count
+    }
+
+    pub fn get_max_values_per_point(&self) -> usize {
+        self.max_values_per_point
+    }
+
     pub fn add_many_to_list(&mut self, idx: PointOffsetType, values: Vec<T>) {
         if self.point_to_values.len() <= idx as usize {
-            self.point_to_values.resize_with(idx as usize + 1, Vec::new)
+            self.point_to_values.resize_with(idx as usize + 1, Vec::new);
         }
         for value in &values {
             let key = Point::new(*value, idx);
-            Self::add_to_map(&mut self.map, &mut self.histogram, key);
+            InMemoryNumericIndex::add_to_map(&mut self.map, &mut self.histogram, key);
         }
         if !values.is_empty() {
             self.points_count += 1;
@@ -137,55 +184,10 @@             }
             for value in values.iter() {
                 let key = Point::new(*value, idx);
-                Self::remove_from_map(&mut self.map, &mut self.histogram, key);
+                InMemoryNumericIndex::remove_from_map(&mut self.map, &mut self.histogram, key);
             }
             *values = Default::default();
         }
-    }
-
-    fn add_to_map(map: &mut BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
-        let was_added = map.insert(key.clone());
-        // Histogram works with unique values (idx + value) only, so we need to
-        // make sure that we don't add the same value twice.
-        // key is a combination of value + idx, so we can use it to ensure than the pair is unique
-        if was_added {
-            histogram.insert(
-                key,
-                |x| Self::get_histogram_left_neighbor(map, x.clone()),
-                |x| Self::get_histogram_right_neighbor(map, x.clone()),
-            );
-        }
-    }
-
-    fn remove_from_map(map: &mut BTreeSet<Point<T>>, histogram: &mut Histogram<T>, key: Point<T>) {
-        let was_removed = map.remove(&key);
-        if was_removed {
-            histogram.remove(
-                &key,
-                |x| Self::get_histogram_left_neighbor(map, x.clone()),
-                |x| Self::get_histogram_right_neighbor(map, x.clone()),
-            );
-        }
-    }
-
-    fn get_histogram_left_neighbor(map: &BTreeSet<Point<T>>, key: Point<T>) -> Option<Point<T>> {
-        map.range((Unbounded, Excluded(key))).next_back().cloned()
-    }
-
-    fn get_histogram_right_neighbor(map: &BTreeSet<Point<T>>, key: Point<T>) -> Option<Point<T>> {
-        map.range((Excluded(key), Unbounded)).next().cloned()
-    }
-
-    pub fn get_histogram(&self) -> &Histogram<T> {
-        &self.histogram
-    }
-
-    pub fn get_points_count(&self) -> usize {
-        self.points_count
-    }
-
-    pub fn get_max_values_per_point(&self) -> usize {
-        self.max_values_per_point
     }
 }
 
@@ -278,7 +280,7 @@         Ok(())
     }
 
-    pub fn map(&self) -> &BTreeSet<Point<T>> {
+    pub fn map(&self) -> &std::collections::BTreeSet<Point<T>> {
         &self.in_memory_index.map
     }
 
@@ -316,8 +318,7 @@         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
     ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.in_memory_index
-            .orderable_values_range(start_bound, end_bound)
+        self.in_memory_index.orderable_values_range(start_bound, end_bound)
     }
     #[inline]
     pub fn get_histogram(&self) -> &Histogram<T> {
