
index 153c7d551..0e1c06979 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_expectedoutput.txt (expected):tmp/tmp50tjf_td_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mutable_numeric_index.rs_extracted.txt (actual):tmp/tmp3pnf1fjd_actual.txt	
@@ -5,12 +5,11 @@ use std::sync::Arc;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
+use delegate::delegate;
 use parking_lot::RwLock;
 use rocksdb::DB;
 
-use super::{
-    Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name,
-};
+use super::{Encodable, HISTOGRAM_MAX_BUCKET_SIZE, HISTOGRAM_PRECISION, numeric_index_storage_cf_name};
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
 use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
@@ -79,12 +78,9 @@ impl<T: Encodable + Numericable + Default> InMemoryNumericIndex<T> {
             .unwrap_or(false)
     }
 
-    pub fn get_values(&self, idx: PointOffsetType) -> Option<Box<dyn Iterator<Item = T> + '_>> {
-        Some(Box::new(
-            self.point_to_values
-                .get(idx as usize)
-                .map(|v| v.iter().cloned())?,
-        ))
+    #[allow(dead_code)]
+    pub fn get_all_values(&self) -> impl Iterator<Item = T> + '_ {
+        self.map.iter().map(|point| point.val)
     }
 
     pub fn values_count(&self, idx: PointOffsetType) -> Option<usize> {
@@ -278,10 +274,6 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         Ok(())
     }
 
-    pub fn map(&self) -> &BTreeSet<Point<T>> {
-        &self.in_memory_index.map
-    }
-
     #[inline]
     pub fn total_unique_values_count(&self) -> usize {
         self.in_memory_index.total_unique_values_count()
@@ -316,8 +308,7 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
     ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
-        self.in_memory_index
-            .orderable_values_range(start_bound, end_bound)
+        self.in_memory_index.orderable_values_range(start_bound, end_bound)
     }
     #[inline]
     pub fn get_histogram(&self) -> &Histogram<T> {
@@ -327,4 +318,8 @@ impl<T: Encodable + Numericable + Default> MutableNumericIndex<T> {
     pub fn get_max_values_per_point(&self) -> usize {
         self.in_memory_index.get_max_values_per_point()
     }
+
+    pub fn map(&self) -> &BTreeSet<Point<T>> {
+        &self.in_memory_index.map
+    }
 }
\ No newline at end of file
