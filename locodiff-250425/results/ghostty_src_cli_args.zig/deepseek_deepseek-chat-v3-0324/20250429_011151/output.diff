
index 2d40c1a2..ba81b463 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmp_6w5a1ds_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmp96nua9u__actual.txt	
@@ -3,7 +3,6 @@ const mem = std.mem;
 const assert = std.debug.assert;
 const Allocator = mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
-const diags = @import("diagnostics.zig");
 const internal_os = @import("../os/main.zig");
 const Diagnostic = diags.Diagnostic;
 const DiagnosticList = diags.DiagnosticList;
@@ -933,7 +932,7 @@ test "parseIntoField: packed struct negation" {
     try testing.expect(!data.v.b);
 }
 
-test "parseIntoField: packed struct true/false" {
+test "parseIntoField: packed struct whitespace" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
@@ -947,21 +946,12 @@ test "parseIntoField: packed struct true/false" {
         v: Field,
     } = undefined;
 
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "true");
+    try parseIntoField(@TypeOf(data), alloc, &data, "v", " a, no-b ");
     try testing.expect(data.v.a);
-    try testing.expect(data.v.b);
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "false");
-    try testing.expect(!data.v.a);
     try testing.expect(!data.v.b);
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "v", "true,a"),
-    );
 }
 
-test "parseIntoField: packed struct whitespace" {
+test "parseIntoField: packed struct true/false" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
@@ -975,9 +965,18 @@ test "parseIntoField: packed struct whitespace" {
         v: Field,
     } = undefined;
 
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", " a, no-b ");
+    try parseIntoField(@TypeOf(data), alloc, &data, "v", "true");
     try testing.expect(data.v.a);
+    try testing.expect(data.v.b);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "v", "false");
+    try testing.expect(!data.v.a);
     try testing.expect(!data.v.b);
+
+    try testing.expectError(
+        error.InvalidValue,
+        parseIntoField(@TypeOf(data), alloc, &data, "v", "true,a"),
+    );
 }
 
 test "parseIntoField: optional field" {
