--- ghostty_src_cli_args.zig_expectedoutput.txt (expected)+++ ghostty_src_cli_args.zig_extracted.txt (actual)@@ -591,604 +591,6 @@     return error.InvalidValue;
 }
 
-test "parse: simple" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: bool = false,
-        @"b-f": bool = true,
-
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=42 --b --b-f=false",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data.b);
-    try testing.expect(!data.@"b-f");
-
-    // Reparsing works
-    var iter2 = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84",
-    );
-    defer iter2.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter2);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("84", data.a);
-    try testing.expect(data.b);
-    try testing.expect(!data.@"b-f");
-}
-
-test "parse: quoted value" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 0,
-        b: []const u8 = "",
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=\"42\" --b=\"hello!\"",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expectEqual(@as(u8, 42), data.a);
-    try testing.expectEqualStrings("hello!", data.b);
-}
-
-test "parse: empty value resets to default" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 42,
-        b: bool = false,
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a= --b=",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expectEqual(@as(u8, 42), data.a);
-    try testing.expect(!data.b);
-}
-
-test "parse: positional arguments are invalid" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 42,
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84 what",
-    );
-    defer iter.deinit();
-    try testing.expectError(
-        error.InvalidField,
-        parse(@TypeOf(data), testing.allocator, &data, &iter),
-    );
-    try testing.expectEqual(@as(u8, 84), data.a);
-}
-
-test "parse: diagnostic tracking" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: enum { one } = .one,
-
-        _arena: ?ArenaAllocator = null,
-        _diagnostics: DiagnosticList = .{},
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what --a=42",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data._diagnostics.items().len == 1);
-    {
-        const diag = data._diagnostics.items()[0];
-        try testing.expectEqual(diags.Location.none, diag.location);
-        try testing.expectEqualStrings("what", diag.key);
-        try testing.expectEqualStrings("unknown field", diag.message);
-    }
-}
-
-test "parse: diagnostic location" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: enum { one, two } = .one,
-
-        _arena: ?ArenaAllocator = null,
-        _diagnostics: DiagnosticList = .{},
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var fbs = std.io.fixedBufferStream(
-        \\a=42
-        \\what
-        \\b=two
-    );
-    const r = fbs.reader();
-
-    const Iter = LineIterator(@TypeOf(r));
-    var iter: Iter = .{ .r = r, .filepath = "test" };
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data.b == .two);
-    try testing.expect(data._diagnostics.items().len == 1);
-    {
-        const diag = data._diagnostics.items()[0];
-        try testing.expectEqualStrings("what", diag.key);
-        try testing.expectEqualStrings("unknown field", diag.message);
-        try testing.expectEqualStrings("test", diag.location.file.path);
-        try testing.expectEqual(2, diag.location.file.line);
-    }
-}
-
-test "parseIntoField: ignore underscore-prefixed fields" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        _a: []const u8 = "12",
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidField,
-        parseIntoField(@TypeOf(data), alloc, &data, "_a", "42"),
-    );
-    try testing.expectEqualStrings("12", data._a);
-}
-
-test "parseIntoField: struct with init func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn init(self: *Self, _alloc: Allocator) !void {
-                _ = _alloc;
-                self.* = .{ .v = "HELLO!" };
-            }
-        },
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
-}
-
-test "parseIntoField: string" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: []const u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqualStrings("42", data.a);
-}
-
-test "parseIntoField: sentinel string" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: [:0]const u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expectEqual(@as(u8, 0), data.a[data.a.len]);
-}
-
-test "parseIntoField: bool" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: bool,
-    } = undefined;
-
-    // True
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "t");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "T");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "true");
-    try testing.expectEqual(true, data.a);
-
-    // False
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "0");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "f");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "F");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "false");
-    try testing.expectEqual(false, data.a);
-}
-
-test "parseIntoField: unsigned numbers" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        u8: u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "u8", "1");
-    try testing.expectEqual(@as(u8, 1), data.u8);
-}
-
-test "parseIntoField: floats" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        f64: f64,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "1");
-    try testing.expectEqual(@as(f64, 1.0), data.f64);
-}
-
-test "parseIntoField: enums" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Enum = enum { one, two, three };
-    var data: struct {
-        v: Enum,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "two");
-    try testing.expectEqual(Enum.two, data.v);
-}
-
-test "parseIntoField: packed struct" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "b");
-    try testing.expect(!data.v.a);
-    try testing.expect(data.v.b);
-}
-
-test "parseIntoField: packed struct negation" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "a,no-b");
-    try testing.expect(data.v.a);
-    try testing.expect(!data.v.b);
-}
-
-test "parseIntoField: packed struct true/false" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "true");
-    try testing.expect(data.v.a);
-    try testing.expect(data.v.b);
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "false");
-    try testing.expect(!data.v.a);
-    try testing.expect(!data.v.b);
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "v", "true,a"),
-    );
-}
-
-test "parseIntoField: packed struct whitespace" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", " a, no-b ");
-    try testing.expect(data.v.a);
-    try testing.expect(!data.v.b);
-}
-
-test "parseIntoField: optional field" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: ?bool = null,
-    } = .{};
-
-    // True
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
-    try testing.expectEqual(true, data.a.?);
-
-    // Unset
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
-    try testing.expect(data.a == null);
-}
-
-test "parseIntoField: struct with parse func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn parseCLI(value: ?[]const u8) !Self {
-                _ = value;
-                return Self{ .v = "HELLO!" };
-            }
-        },
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
-}
-
-test "parseIntoField: optional struct with parse func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: ?struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn parseCLI(self: *Self, _: Allocator, value: ?[]const u8) !void {
-                _ = value;
-                self.* = .{ .v = "HELLO!" };
-            }
-        } = null,
-    } = .{};
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.?.v);
-}
-
-test "parseIntoField: struct with basic fields" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: struct {
-            a: []const u8,
-            b: u32,
-            c: u8 = 12,
-        } = undefined,
-    } = .{};
-
-    // Set required fields
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello,b:42");
-    try testing.expectEqualStrings("hello", data.value.a);
-    try testing.expectEqual(42, data.value.b);
-    try testing.expectEqual(12, data.value.c);
-
-    // Set all fields
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:world,b:84,c:24");
-    try testing.expectEqualStrings("world", data.value.a);
-    try testing.expectEqual(84, data.value.b);
-    try testing.expectEqual(24, data.value.c);
-
-    // Missing require dfield
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
-    );
-}
-
-test "parseIntoField: tagged union" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-            c: void,
-            d: []const u8,
-        } = undefined,
-    } = .{};
-
-    // Set one field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:1");
-    try testing.expectEqual(1, data.value.a);
-
-    // Set another
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "b:2");
-    try testing.expectEqual(2, data.value.b);
-
-    // Set void field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "c");
-    try testing.expectEqual({}, data.value.c);
-
-    // Set string field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "d:hello");
-    try testing.expectEqualStrings("hello", data.value.d);
-}
-
-test "parseIntoField: tagged union unknown filed" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "c:1"),
-    );
-}
-
-test "parseIntoField: tagged union invalid field value" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
-    );
-}
-
-test "parseIntoField: tagged union missing tag" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a"),
-    );
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", ":a"),
-    );
-}
-
-test "parseIntoField: renamed field" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: []const u8,
-
-        const renamed = std.StaticStringMap([]const u8).initComptime(&.{
-            .{ "old", "a" },
-        });
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "old", "42");
-    try testing.expectEqualStrings("42", data.a);
-}
-
 /// An iterator that considers its location to be CLI args. It
 /// iterates through an underlying iterator and increments a counter
 /// to track the current CLI arg index.
@@ -1238,23 +640,6 @@     errdefer iter.deinit();
     _ = iter.next(); // skip argv0
     return .{ .iterator = iter };
-}
-
-test "ArgsIterator" {
-    const testing = std.testing;
-
-    const child = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what +list-things --a=42",
-    );
-    const Iter = ArgsIterator(@TypeOf(child));
-    var iter: Iter = .{ .iterator = child };
-    defer iter.deinit();
-
-    try testing.expectEqualStrings("--what", iter.next().?);
-    try testing.expectEqualStrings("--a=42", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
 }
 
 /// Returns an iterator (implements "next") that reads CLI args by line.
@@ -1387,72 +772,4 @@ /// Construct a SliceIterator from a slice.
 pub fn sliceIterator(slice: []const []const u8) SliceIterator {
     return .{ .slice = slice };
-}
-
-test "LineIterator" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream(
-        \\A
-        \\B=42
-        \\C
-        \\
-        \\# A comment
-        \\D
-        \\
-        \\  # An indented comment
-        \\  E
-        \\
-        \\# A quoted string with whitespace
-        \\F=  "value "
-    );
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=42", iter.next().?);
-    try testing.expectEqualStrings("--C", iter.next().?);
-    try testing.expectEqualStrings("--D", iter.next().?);
-    try testing.expectEqualStrings("--E", iter.next().?);
-    try testing.expectEqualStrings("--F=value ", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator end in newline" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator spaces around '='" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = B\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=B", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator no value" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = \n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator with CRLF line endings" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\r\nB = C\r\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=C", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
 }