--- ghostty_src_cli_args.zig_expectedoutput.txt (expected)+++ ghostty_src_cli_args.zig_extracted.txt (actual)@@ -5,7 +5,7 @@ const ArenaAllocator = std.heap.ArenaAllocator;
 const diags = @import("diagnostics.zig");
 const internal_os = @import("../os/main.zig");
-const Diagnostic = diags.Diagnostic;
+const Diagnostic = diags.Diagnostic; 
 const DiagnosticList = diags.DiagnosticList;
 
 const log = std.log.scoped(.cli);
@@ -41,7 +41,7 @@ /// When diagnostics are present, only allocation errors will be returned.
 ///
 /// If the destination type has a decl "renamed", it must be of type
-/// std.StaticStringMap([]const u8) and contains a mapping from the old
+/// std.StaticStringMap([]const u8) and contains a mapping from the old 
 /// field name to the new field name. This is used to allow renaming fields
 /// while still supporting the old name. If a renamed field is set, parsing
 /// will automatically set the new field name.
@@ -76,7 +76,7 @@     }
 
     // Make an arena for all our allocations if we support it. Otherwise,
-    // use an allocator that always fails. If the arena is already set on
+    // use an allocator that always fails. If the arena is already set on 
     // the config, then we reuse that. See memory note in parse docs.
     const arena_available = @hasField(T, "_arena");
     var arena_owned: bool = false;
@@ -102,17 +102,13 @@     while (iter.next()) |arg| {
         // Do manual parsing if we have a hook for it.
         if (@hasDecl(T, "parseManuallyHook")) {
-            if (!try dst.parseManuallyHook(
-                arena_alloc,
-                arg,
-                iter,
-            )) return;
+            if (!try dst.parseManuallyHook(arena_alloc, arg, iter)) return;
         }
 
         // If the destination supports help then we check for it, call
         // the help function and return.
         if (@hasDecl(T, "help")) {
-            if (mem.eql(u8, arg, "--help") or
+            if (mem.eql(u8, arg, "--help") or 
                 mem.eql(u8, arg, "-h"))
             {
                 try dst.help();
@@ -167,7 +163,7 @@                 ),
             };
 
-            // Add our diagnostic
+            // Add our diagnostic 
             try dst._diagnostics.append(arena_alloc, .{
                 .key = try arena_alloc.dupeZ(u8, key),
                 .message = message,
@@ -195,7 +191,7 @@     comptime T: type,
     arena_alloc: std.mem.Allocator,
     key: []const u8,
-    value: ?[]const u8,
+    value: ?[]const u8,  
 ) std.mem.Allocator.Error![:0]const u8 {
     var buf = std.ArrayList(u8).init(arena_alloc);
     errdefer buf.deinit();
@@ -252,10 +248,10 @@             // the CLI.
             const Field = switch (@typeInfo(field.type)) {
                 .optional => |opt| opt.child,
-                else => field.type,
+                else => field.type,  
             };
             const fieldInfo = @typeInfo(Field);
-            const canHaveDecls = fieldInfo == .@"struct" or
+            const canHaveDecls = fieldInfo == .@"struct" or 
                 fieldInfo == .@"union" or
                 fieldInfo == .@"enum";
 
@@ -286,19 +282,16 @@                         // 2 arg = (self, input) => void
                         2 => switch (@typeInfo(field.type)) {
                             .@"struct",
-                            .@"union",
+                            .@"union", 
                             .@"enum",
                             => try @field(dst, field.name).parseCLI(value),
 
-                            // If the field is optional and set, then we use
+                            // If the field is optional and set, then we use  
                             // the pointer value directly into it. If its not
                             // set we need to create a new instance.
                             .optional => if (@field(dst, field.name)) |*v| {
-                                try v.parseCLI(value);
+                                try v.parseCLI(value); 
                             } else {
-                                // Note: you cannot do @field(dst, name) = undefined
-                                // because this causes the value to be "null"
-                                // in ReleaseFast modes.
                                 var tmp: Field = undefined;
                                 try tmp.parseCLI(value);
                                 @field(dst, field.name) = tmp;
@@ -332,7 +325,7 @@                 }
             }
 
-            // No parseCLI, magic the value based on the type
+            // No parseCLI, magic the value based on the type  
             @field(dst, field.name) = switch (Field) {
                 []const u8 => value: {
                     const slice = value orelse return error.ValueRequired;
@@ -360,7 +353,7 @@                 i8,
                 i16,
                 i32,
-                i64,
+                i64, 
                 isize,
                 => |Int| std.fmt.parseInt(
                     Int,
@@ -372,7 +365,7 @@                 f64,
                 => |Float| std.fmt.parseFloat(
                     Float,
-                    value orelse return error.ValueRequired,
+                    value orelse return error.ValueRequired, 
                 ) catch return error.InvalidValue,
 
                 else => switch (fieldInfo) {
@@ -406,7 +399,7 @@         for (T.renamed.keys(), T.renamed.values()) |old, new| {
             if (mem.eql(u8, old, key)) {
                 try parseIntoField(T, alloc, dst, new, value);
-                return;
+                return; 
             }
         }
     }
@@ -419,7 +412,7 @@     assert(@typeInfo(info.tag_type.?) == .@"enum");
 
     // Get the union tag that is being set. We support values with no colon
-    // if the value is void so its not an error to have no colon.
+    // if the value is void so its not an error to have no colon.  
     const colon_idx = mem.indexOf(u8, v, ":") orelse v.len;
     const tag_str = std.mem.trim(u8, v[0..colon_idx], whitespace);
     const value = if (colon_idx < v.len) v[colon_idx + 1 ..] else "";
@@ -442,7 +435,7 @@                     .type = field.type,
                     .default_value_ptr = null,
                     .is_comptime = false,
-                    .alignment = @alignOf(field.type),
+                    .alignment = @alignOf(field.type),  
                 }},
                 .decls = &.{},
                 .is_tuple = false,
@@ -463,7 +456,7 @@ fn parseStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
     return switch (@typeInfo(T).@"struct".layout) {
         .auto => parseAutoStruct(T, alloc, v),
-        .@"packed" => parsePackedStruct(T, v),
+        .@"packed" => parsePackedStruct(T, v), 
         else => @compileError("unsupported struct layout"),
     };
 }
@@ -478,13 +471,13 @@     // optionals).
     var result: T = undefined;
 
-    // Keep track of which fields were set so we can error if a required
+    // Keep track of which fields were set so we can error if a required 
     // field was not set.
     const FieldSet = std.StaticBitSet(info.fields.len);
     var fields_set: FieldSet = FieldSet.initEmpty();
 
     // We split each value by ","
-    var iter = std.mem.splitSequence(u8, v, ",");
+    var iter = std.mem.splitSequence(u8, v, ",");  
     loop: while (iter.next()) |entry| {
         // Find the key/value, trimming whitespace. The value may be quoted
         // which we strip the quotes from.
@@ -499,7 +492,7 @@                 value[value.len - 1] == '"')
             {
                 // Trim quotes since our CLI args processor expects
-                // quotes to already be gone.
+                // quotes to already be gone.       
                 value = value[1 .. value.len - 1];
             }
 
@@ -510,11 +503,11 @@             if (std.mem.eql(u8, field.name, key)) {
                 try parseIntoField(T, alloc, &result, key, value);
                 fields_set.set(i);
-                continue :loop;
-            }
-        }
-
-        // No field matched
+                continue :loop;  
+            }
+        }
+
+        // No field matched 
         return error.InvalidValue;
     }
 
@@ -536,7 +529,7 @@ 
     var result: T = .{};
 
-    // Allow standalone boolean values like "true" and "false" to
+    // Allow standalone boolean values like "true" and "false" to 
     // turn on or off all of the struct's fields.
     bools: {
         const b = parseBool(v) catch break :bools;
@@ -547,10 +540,10 @@         return result;
     }
 
-    // We split each value by ","
-    var iter = std.mem.splitSequence(u8, v, ",");
+    // We split each value by "," 
+    var iter = std.mem.splitSequence(u8, v, ","); 
     loop: while (iter.next()) |part_raw| {
-        // Determine the field we're looking for and the value. If the
+        // Determine the field we're looking for and the value. If the  
         // field is prefixed with "no-" then we set the value to false.
         const part, const value = part: {
             const negation_prefix = "no-";
@@ -558,7 +551,7 @@             if (std.mem.startsWith(u8, trimmed, negation_prefix)) {
                 break :part .{ trimmed[negation_prefix.len..], false };
             } else {
-                break :part .{ trimmed, true };
+                break :part .{ trimmed, true };  
             }
         };
 
@@ -588,612 +581,14 @@         if (mem.eql(u8, v, str)) return false;
     }
 
-    return error.InvalidValue;
-}
-
-test "parse: simple" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: bool = false,
-        @"b-f": bool = true,
-
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=42 --b --b-f=false",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data.b);
-    try testing.expect(!data.@"b-f");
-
-    // Reparsing works
-    var iter2 = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84",
-    );
-    defer iter2.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter2);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("84", data.a);
-    try testing.expect(data.b);
-    try testing.expect(!data.@"b-f");
-}
-
-test "parse: quoted value" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 0,
-        b: []const u8 = "",
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=\"42\" --b=\"hello!\"",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expectEqual(@as(u8, 42), data.a);
-    try testing.expectEqualStrings("hello!", data.b);
-}
-
-test "parse: empty value resets to default" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 42,
-        b: bool = false,
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a= --b=",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expectEqual(@as(u8, 42), data.a);
-    try testing.expect(!data.b);
-}
-
-test "parse: positional arguments are invalid" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: u8 = 42,
-        _arena: ?ArenaAllocator = null,
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84 what",
-    );
-    defer iter.deinit();
-    try testing.expectError(
-        error.InvalidField,
-        parse(@TypeOf(data), testing.allocator, &data, &iter),
-    );
-    try testing.expectEqual(@as(u8, 84), data.a);
-}
-
-test "parse: diagnostic tracking" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: enum { one } = .one,
-
-        _arena: ?ArenaAllocator = null,
-        _diagnostics: DiagnosticList = .{},
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what --a=42",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data._diagnostics.items().len == 1);
-    {
-        const diag = data._diagnostics.items()[0];
-        try testing.expectEqual(diags.Location.none, diag.location);
-        try testing.expectEqualStrings("what", diag.key);
-        try testing.expectEqualStrings("unknown field", diag.message);
-    }
-}
-
-test "parse: diagnostic location" {
-    const testing = std.testing;
-
-    var data: struct {
-        a: []const u8 = "",
-        b: enum { one, two } = .one,
-
-        _arena: ?ArenaAllocator = null,
-        _diagnostics: DiagnosticList = .{},
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var fbs = std.io.fixedBufferStream(
-        \\a=42
-        \\what
-        \\b=two
-    );
-    const r = fbs.reader();
-
-    const Iter = LineIterator(@TypeOf(r));
-    var iter: Iter = .{ .r = r, .filepath = "test" };
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data.b == .two);
-    try testing.expect(data._diagnostics.items().len == 1);
-    {
-        const diag = data._diagnostics.items()[0];
-        try testing.expectEqualStrings("what", diag.key);
-        try testing.expectEqualStrings("unknown field", diag.message);
-        try testing.expectEqualStrings("test", diag.location.file.path);
-        try testing.expectEqual(2, diag.location.file.line);
-    }
-}
-
-test "parseIntoField: ignore underscore-prefixed fields" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        _a: []const u8 = "12",
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidField,
-        parseIntoField(@TypeOf(data), alloc, &data, "_a", "42"),
-    );
-    try testing.expectEqualStrings("12", data._a);
-}
-
-test "parseIntoField: struct with init func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn init(self: *Self, _alloc: Allocator) !void {
-                _ = _alloc;
-                self.* = .{ .v = "HELLO!" };
-            }
-        },
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
-}
-
-test "parseIntoField: string" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: []const u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqualStrings("42", data.a);
-}
-
-test "parseIntoField: sentinel string" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: [:0]const u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expectEqual(@as(u8, 0), data.a[data.a.len]);
-}
-
-test "parseIntoField: bool" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: bool,
-    } = undefined;
-
-    // True
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "t");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "T");
-    try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "true");
-    try testing.expectEqual(true, data.a);
-
-    // False
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "0");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "f");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "F");
-    try testing.expectEqual(false, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "false");
-    try testing.expectEqual(false, data.a);
-}
-
-test "parseIntoField: unsigned numbers" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        u8: u8,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "u8", "1");
-    try testing.expectEqual(@as(u8, 1), data.u8);
-}
-
-test "parseIntoField: floats" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        f64: f64,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "1");
-    try testing.expectEqual(@as(f64, 1.0), data.f64);
-}
-
-test "parseIntoField: enums" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Enum = enum { one, two, three };
-    var data: struct {
-        v: Enum,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "two");
-    try testing.expectEqual(Enum.two, data.v);
-}
-
-test "parseIntoField: packed struct" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "b");
-    try testing.expect(!data.v.a);
-    try testing.expect(data.v.b);
-}
-
-test "parseIntoField: packed struct negation" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "a,no-b");
-    try testing.expect(data.v.a);
-    try testing.expect(!data.v.b);
-}
-
-test "parseIntoField: packed struct true/false" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "true");
-    try testing.expect(data.v.a);
-    try testing.expect(data.v.b);
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", "false");
-    try testing.expect(!data.v.a);
-    try testing.expect(!data.v.b);
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "v", "true,a"),
-    );
-}
-
-test "parseIntoField: packed struct whitespace" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const Field = packed struct {
-        a: bool = false,
-        b: bool = true,
-    };
-    var data: struct {
-        v: Field,
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "v", " a, no-b ");
-    try testing.expect(data.v.a);
-    try testing.expect(!data.v.b);
-}
-
-test "parseIntoField: optional field" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: ?bool = null,
-    } = .{};
-
-    // True
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
-    try testing.expectEqual(true, data.a.?);
-
-    // Unset
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
-    try testing.expect(data.a == null);
-}
-
-test "parseIntoField: struct with parse func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn parseCLI(value: ?[]const u8) !Self {
-                _ = value;
-                return Self{ .v = "HELLO!" };
-            }
-        },
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
-}
-
-test "parseIntoField: optional struct with parse func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: ?struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn parseCLI(self: *Self, _: Allocator, value: ?[]const u8) !void {
-                _ = value;
-                self.* = .{ .v = "HELLO!" };
-            }
-        } = null,
-    } = .{};
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.?.v);
-}
-
-test "parseIntoField: struct with basic fields" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: struct {
-            a: []const u8,
-            b: u32,
-            c: u8 = 12,
-        } = undefined,
-    } = .{};
-
-    // Set required fields
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello,b:42");
-    try testing.expectEqualStrings("hello", data.value.a);
-    try testing.expectEqual(42, data.value.b);
-    try testing.expectEqual(12, data.value.c);
-
-    // Set all fields
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:world,b:84,c:24");
-    try testing.expectEqualStrings("world", data.value.a);
-    try testing.expectEqual(84, data.value.b);
-    try testing.expectEqual(24, data.value.c);
-
-    // Missing require dfield
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
-    );
-}
-
-test "parseIntoField: tagged union" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-            c: void,
-            d: []const u8,
-        } = undefined,
-    } = .{};
-
-    // Set one field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "a:1");
-    try testing.expectEqual(1, data.value.a);
-
-    // Set another
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "b:2");
-    try testing.expectEqual(2, data.value.b);
-
-    // Set void field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "c");
-    try testing.expectEqual({}, data.value.c);
-
-    // Set string field
-    try parseIntoField(@TypeOf(data), alloc, &data, "value", "d:hello");
-    try testing.expectEqualStrings("hello", data.value.d);
-}
-
-test "parseIntoField: tagged union unknown filed" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "c:1"),
-    );
-}
-
-test "parseIntoField: tagged union invalid field value" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
-    );
-}
-
-test "parseIntoField: tagged union missing tag" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        value: union(enum) {
-            a: u8,
-            b: u8,
-        } = undefined,
-    } = .{};
-
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", "a"),
-    );
-    try testing.expectError(
-        error.InvalidValue,
-        parseIntoField(@TypeOf(data), alloc, &data, "value", ":a"),
-    );
-}
-
-test "parseIntoField: renamed field" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: []const u8,
-
-        const renamed = std.StaticStringMap([]const u8).initComptime(&.{
-            .{ "old", "a" },
-        });
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "old", "42");
-    try testing.expectEqualStrings("42", data.a);
+    return error.InvalidValue;  
 }
 
 /// An iterator that considers its location to be CLI args. It
 /// iterates through an underlying iterator and increments a counter
 /// to track the current CLI arg index.
 ///
-/// This also ignores any argument that starts with `+`. It assumes that
+/// This also ignores any argument that starts with `+`. It assumes that  
 /// actions were parsed out before this iterator was created.
 pub fn ArgsIterator(comptime Iterator: type) type {
     return struct {
@@ -1202,7 +597,7 @@         /// The underlying args iterator.
         iterator: Iterator,
 
-        /// Our current index into the iterator. This is 1-indexed.
+        /// Our current index into the iterator. This is 1-indexed.  
         /// The 0 value is used to indicate that we haven't read any
         /// values yet.
         index: usize = 0,
@@ -1240,23 +635,6 @@     return .{ .iterator = iter };
 }
 
-test "ArgsIterator" {
-    const testing = std.testing;
-
-    const child = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what +list-things --a=42",
-    );
-    const Iter = ArgsIterator(@TypeOf(child));
-    var iter: Iter = .{ .iterator = child };
-    defer iter.deinit();
-
-    try testing.expectEqualStrings("--what", iter.next().?);
-    try testing.expectEqualStrings("--a=42", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
 /// Returns an iterator (implements "next") that reads CLI args by line.
 /// Each CLI arg is expected to be a single line. This is used to implement
 /// configuration files.
@@ -1264,7 +642,7 @@     return struct {
         const Self = @This();
 
-        /// The maximum size a single line can be. We don't expect any
+        /// The maximum size a single line can be. We don't expect any  
         /// CLI arg to exceed this size. Can't wait to git blame this in
         /// like 4 years and be wrong about this.
         pub const MAX_LINE_SIZE = 4096;
@@ -1273,7 +651,7 @@         r: ReaderType,
 
         /// Filepath that is used for diagnostics. This is only used for
-        /// diagnostic messages so it can be formatted however you want.
+        /// diagnostic messages so it can be formatted however you want.  
         /// It is prefixed to the messages followed by the line number.
         filepath: []const u8 = "",
 
@@ -1298,7 +676,7 @@                         },
                     } orelse return null;
 
-                    // Increment our line counter
+                    // Increment our line counter  
                     self.line += 1;
 
                     // Trim any whitespace (including CR) around it
@@ -1308,7 +686,7 @@                         entry = entry[0..trim.len];
                     }
 
-                    // Ignore blank lines and comments
+                    // Ignore blank lines and comments 
                     if (entry.len == 0 or entry[0] == '#') continue;
 
                     // Trim spaces around '='
@@ -1358,101 +736,9 @@             if (self.filepath.len == 0) return null;
 
             return .{ .file = .{
-                .path = try alloc.dupe(u8, self.filepath),
+                .path = try alloc.dupe(u8, self.filepath),  
                 .line = self.line,
             } };
         }
     };
-}
-
-// Constructs a LineIterator (see docs for that).
-fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
-    return .{ .r = reader };
-}
-
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
-test "LineIterator" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream(
-        \\A
-        \\B=42
-        \\C
-        \\
-        \\# A comment
-        \\D
-        \\
-        \\  # An indented comment
-        \\  E
-        \\
-        \\# A quoted string with whitespace
-        \\F=  "value "
-    );
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=42", iter.next().?);
-    try testing.expectEqualStrings("--C", iter.next().?);
-    try testing.expectEqualStrings("--D", iter.next().?);
-    try testing.expectEqualStrings("--E", iter.next().?);
-    try testing.expectEqualStrings("--F=value ", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator end in newline" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator spaces around '='" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = B\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=B", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator no value" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = \n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator with CRLF line endings" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\r\nB = C\r\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=C", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
 }