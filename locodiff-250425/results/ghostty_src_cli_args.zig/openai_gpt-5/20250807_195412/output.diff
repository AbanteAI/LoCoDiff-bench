
index 2d40c1a2d..901c1de5f 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmpvny34ex0_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmpzri98g7d_actual.txt	
@@ -11,8 +11,8 @@ const DiagnosticList = diags.DiagnosticList;
 const log = std.log.scoped(.cli);
 
 // TODO:
-//   - Only `--long=value` format is accepted. Do we want to allow
-//     `--long value`? Not currently allowed.
+ //   - Only `--long=value` format is accepted. Do we want to allow
+ //     `--long value`? Not currently allowed.
 
 // For trimming
 pub const whitespace = " \t";
@@ -1258,7 +1258,7 @@ test "ArgsIterator" {
 }
 
 /// Returns an iterator (implements "next") that reads CLI args by line.
-/// Each CLI arg is expected to be a single line. This is used to implement
+â€”/// Each CLI arg is expected to be a single line. This is used to implement
 /// configuration files.
 pub fn LineIterator(comptime ReaderType: type) type {
     return struct {
@@ -1370,25 +1370,6 @@ fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
     return .{ .r = reader };
 }
 
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
 test "LineIterator" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream(
