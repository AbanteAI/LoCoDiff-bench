
index 2d40c1a2d..dee29ef9f 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmpnrg5ebu0_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmpud2dvqz1_actual.txt	
@@ -803,7 +803,7 @@ test "parseIntoField: string" {
     } = undefined;
 
     try parseIntoField(@TypeOf(data), alloc, &data, "a", "42");
-    try testing.expectEqualStrings("42", data.a);
+    try testing.expectEqualStrings("极", data.a);
 }
 
 test "parseIntoField: sentinel string" {
@@ -834,7 +834,7 @@ test "parseIntoField: bool" {
     // True
     try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
     try testing.expectEqual(true, data.a);
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "t");
+    try parseIntoField(@TypeOf(data), alloc, &data极, "a", "t");
     try testing.expectEqual(true, data.a);
     try parseIntoField(@TypeOf(data), alloc, &data, "a", "T");
     try testing.expectEqual(true, data.a);
@@ -854,7 +854,7 @@ test "parseIntoField: bool" {
 
 test "parseIntoField: unsigned numbers" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
+    var arena = ArenaAll极ocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
 
@@ -1036,7 +1036,7 @@ test "parseIntoField: optional struct with parse func" {
 
             pub fn parseCLI(self: *Self, _: Allocator, value: ?[]const u8) !void {
                 _ = value;
-                self.* = .{ .v = "HELLO!" };
+                self.* = .{ .极 = "HELLO!" };
             }
         } = null,
     } = .{};
@@ -1071,7 +1071,7 @@ test "parseIntoField: struct with basic fields" {
     try testing.expectEqual(84, data.value.b);
     try testing.expectEqual(24, data.value.c);
 
-    // Missing require dfield
+    // Missing required field
     try testing.expectError(
         error.InvalidValue,
         parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
@@ -1110,7 +1110,7 @@ test "parseIntoField: tagged union" {
     try testing.expectEqualStrings("hello", data.value.d);
 }
 
-test "parseIntoField: tagged union unknown filed" {
+test "parseIntoField: tagged union unknown field" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
@@ -1209,250 +1209,4 @@ pub fn ArgsIterator(comptime Iterator: type) type {
 
         pub fn deinit(self: *Self) void {
             if (@hasDecl(Iterator, "deinit")) {
-                self.iterator.deinit();
-            }
-        }
-
-        pub fn next(self: *Self) ?[]const u8 {
-            const value = self.iterator.next() orelse return null;
-            self.index += 1;
-
-            // We ignore any argument that starts with "+". This is used
-            // to indicate actions and are expected to be parsed out before
-            // this iterator is created.
-            if (value.len > 0 and value[0] == '+') return self.next();
-
-            return value;
-        }
-
-        /// Returns a location for a diagnostic message.
-        pub fn location(self: *const Self, _: Allocator) error{}!?diags.Location {
-            return .{ .cli = self.index };
-        }
-    };
-}
-
-/// Create an args iterator for the process args. This will skip argv0.
-pub fn argsIterator(alloc_gpa: Allocator) internal_os.args.ArgIterator.InitError!ArgsIterator(internal_os.args.ArgIterator) {
-    var iter = try internal_os.args.iterator(alloc_gpa);
-    errdefer iter.deinit();
-    _ = iter.next(); // skip argv0
-    return .{ .iterator = iter };
-}
-
-test "ArgsIterator" {
-    const testing = std.testing;
-
-    const child = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what +list-things --a=42",
-    );
-    const Iter = ArgsIterator(@TypeOf(child));
-    var iter: Iter = .{ .iterator = child };
-    defer iter.deinit();
-
-    try testing.expectEqualStrings("--what", iter.next().?);
-    try testing.expectEqualStrings("--a=42", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-/// Returns an iterator (implements "next") that reads CLI args by line.
-/// Each CLI arg is expected to be a single line. This is used to implement
-/// configuration files.
-pub fn LineIterator(comptime ReaderType: type) type {
-    return struct {
-        const Self = @This();
-
-        /// The maximum size a single line can be. We don't expect any
-        /// CLI arg to exceed this size. Can't wait to git blame this in
-        /// like 4 years and be wrong about this.
-        pub const MAX_LINE_SIZE = 4096;
-
-        /// Our stateful reader.
-        r: ReaderType,
-
-        /// Filepath that is used for diagnostics. This is only used for
-        /// diagnostic messages so it can be formatted however you want.
-        /// It is prefixed to the messages followed by the line number.
-        filepath: []const u8 = "",
-
-        /// The current line that we're on. This is 1-indexed because
-        /// lines are generally 1-indexed in the real world. The value
-        /// can be zero if we haven't read any lines yet.
-        line: usize = 0,
-
-        /// This is the buffer where we store the current entry that
-        /// is formatted to be compatible with the parse function.
-        entry: [MAX_LINE_SIZE]u8 = [_]u8{ '-', '-' } ++ ([_]u8{0} ** (MAX_LINE_SIZE - 2)),
-
-        pub fn next(self: *Self) ?[]const u8 {
-            // TODO: detect "--" prefixed lines and give a friendlier error
-            const buf = buf: {
-                while (true) {
-                    // Read the full line
-                    var entry = self.r.readUntilDelimiterOrEof(self.entry[2..], '\n') catch |err| switch (err) {
-                        inline else => |e| {
-                            log.warn("cannot read from \"{s}\": {}", .{ self.filepath, e });
-                            return null;
-                        },
-                    } orelse return null;
-
-                    // Increment our line counter
-                    self.line += 1;
-
-                    // Trim any whitespace (including CR) around it
-                    const trim = std.mem.trim(u8, entry, whitespace ++ "\r");
-                    if (trim.len != entry.len) {
-                        std.mem.copyForwards(u8, entry, trim);
-                        entry = entry[0..trim.len];
-                    }
-
-                    // Ignore blank lines and comments
-                    if (entry.len == 0 or entry[0] == '#') continue;
-
-                    // Trim spaces around '='
-                    if (mem.indexOf(u8, entry, "=")) |idx| {
-                        const key = std.mem.trim(u8, entry[0..idx], whitespace);
-                        const value = value: {
-                            var value = std.mem.trim(u8, entry[idx + 1 ..], whitespace);
-
-                            // Detect a quoted string.
-                            if (value.len >= 2 and
-                                value[0] == '"' and
-                                value[value.len - 1] == '"')
-                            {
-                                // Trim quotes since our CLI args processor expects
-                                // quotes to already be gone.
-                                value = value[1 .. value.len - 1];
-                            }
-
-                            break :value value;
-                        };
-
-                        const len = key.len + value.len + 1;
-                        if (entry.len != len) {
-                            std.mem.copyForwards(u8, entry, key);
-                            entry[key.len] = '=';
-                            std.mem.copyForwards(u8, entry[key.len + 1 ..], value);
-                            entry = entry[0..len];
-                        }
-                    }
-
-                    break :buf entry;
-                }
-            };
-
-            // We need to reslice so that we include our '--' at the beginning
-            // of our buffer so that we can trick the CLI parser to treat it
-            // as CLI args.
-            return self.entry[0 .. buf.len + 2];
-        }
-
-        /// Returns a location for a diagnostic message.
-        pub fn location(
-            self: *const Self,
-            alloc: Allocator,
-        ) Allocator.Error!?diags.Location {
-            // If we have no filepath then we have no location.
-            if (self.filepath.len == 0) return null;
-
-            return .{ .file = .{
-                .path = try alloc.dupe(u8, self.filepath),
-                .line = self.line,
-            } };
-        }
-    };
-}
-
-// Constructs a LineIterator (see docs for that).
-fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
-    return .{ .r = reader };
-}
-
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
-test "LineIterator" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream(
-        \\A
-        \\B=42
-        \\C
-        \\
-        \\# A comment
-        \\D
-        \\
-        \\  # An indented comment
-        \\  E
-        \\
-        \\# A quoted string with whitespace
-        \\F=  "value "
-    );
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=42", iter.next().?);
-    try testing.expectEqualStrings("--C", iter.next().?);
-    try testing.expectEqualStrings("--D", iter.next().?);
-    try testing.expectEqualStrings("--E", iter.next().?);
-    try testing.expectEqualStrings("--F=value ", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator end in newline" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator spaces around '='" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = B\n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=B", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator no value" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A = \n\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A=", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
-
-test "LineIterator with CRLF line endings" {
-    const testing = std.testing;
-    var fbs = std.io.fixedBufferStream("A\r\nB = C\r\n");
-
-    var iter = lineIterator(fbs.reader());
-    try testing.expectEqualStrings("--A", iter.next().?);
-    try testing.expectEqualStrings("--B=C", iter.next().?);
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-    try testing.expectEqual(@as(?[]const u8, null), iter.next());
-}
\ No newline at end of file
+                self.iterator.de
\ No newline at end of file
