--- ghostty_src_cli_args.zig_expectedoutput.txt (expected)+++ ghostty_src_cli_args.zig_extracted.txt (actual)@@ -3,8 +3,8 @@ const assert = std.debug.assert;
 const Allocator = mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
+const internal_os = @import("../os/main.zig");
 const diags = @import("diagnostics.zig");
-const internal_os = @import("../os/main.zig");
 const Diagnostic = diags.Diagnostic;
 const DiagnosticList = diags.DiagnosticList;
 
@@ -332,6 +332,18 @@                 }
             }
 
+            switch (fieldInfo) {
+                .@"enum" => {
+                    @field(dst, field.name) = std.meta.stringToEnum(
+                        Field,
+                        value orelse return error.ValueRequired,
+                    ) orelse return error.InvalidValue;
+                    return;
+                },
+
+                else => {},
+            }
+
             // No parseCLI, magic the value based on the type
             @field(dst, field.name) = switch (Field) {
                 []const u8 => value: {
@@ -1071,7 +1083,7 @@     try testing.expectEqual(84, data.value.b);
     try testing.expectEqual(24, data.value.c);
 
-    // Missing require dfield
+    // Missing required field
     try testing.expectError(
         error.InvalidValue,
         parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
@@ -1110,7 +1122,7 @@     try testing.expectEqualStrings("hello", data.value.d);
 }
 
-test "parseIntoField: tagged union unknown filed" {
+test "parseIntoField: tagged union unknown field" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
@@ -1219,7 +1231,7 @@ 
             // We ignore any argument that starts with "+". This is used
             // to indicate actions and are expected to be parsed out before
-            // this iterator is created.
+            // this iterator was created.
             if (value.len > 0 and value[0] == '+') return self.next();
 
             return value;
