
index 2d40c1a2..25bf90a3 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmp983fbkj2_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmp3871nktm_actual.txt	
@@ -293,8 +293,8 @@ pub fn parseIntoField(
                             // If the field is optional and set, then we use
                             // the pointer value directly into it. If its not
                             // set we need to create a new instance.
-                            .optional => if (@field(dst, field.name)) |*v| {
-                                try v.parseCLI(value);
+                            .optional => if (@field(dst, field.name)) |*v_ptr| {
+                                try v_ptr.parseCLI(value);
                             } else {
                                 // Note: you cannot do @field(dst, name) = undefined
                                 // because this causes the value to be "null"
@@ -314,8 +314,8 @@ pub fn parseIntoField(
                             .@"enum",
                             => try @field(dst, field.name).parseCLI(alloc, value),
 
-                            .optional => if (@field(dst, field.name)) |*v| {
-                                try v.parseCLI(alloc, value);
+                            .optional => if (@field(dst, field.name)) |*v_ptr| {
+                                try v_ptr.parseCLI(alloc, value);
                             } else {
                                 var tmp: Field = undefined;
                                 try tmp.parseCLI(alloc, value);
@@ -489,26 +489,26 @@ pub fn parseAutoStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
         // Find the key/value, trimming whitespace. The value may be quoted
         // which we strip the quotes from.
         const idx = mem.indexOf(u8, entry, ":") orelse return error.InvalidValue;
-        const key = std.mem.trim(u8, entry[0..idx], whitespace);
-        const value = value: {
-            var value = std.mem.trim(u8, entry[idx + 1 ..], whitespace);
+        const key_str = std.mem.trim(u8, entry[0..idx], whitespace);
+        const value_str = value_val: {
+            var value_inner = std.mem.trim(u8, entry[idx + 1 ..], whitespace);
 
             // Detect a quoted string.
-            if (value.len >= 2 and
-                value[0] == '"' and
-                value[value.len - 1] == '"')
+            if (value_inner.len >= 2 and
+                value_inner[0] == '"' and
+                value_inner[value_inner.len - 1] == '"')
             {
                 // Trim quotes since our CLI args processor expects
                 // quotes to already be gone.
-                value = value[1 .. value.len - 1];
+                value_inner = value_inner[1 .. value_inner.len - 1];
             }
 
-            break :value value;
+            break :value_val value_inner;
         };
 
         inline for (info.fields, 0..) |field, i| {
-            if (std.mem.eql(u8, field.name, key)) {
-                try parseIntoField(T, alloc, &result, key, value);
+            if (std.mem.eql(u8, field.name, key_str)) {
+                try parseIntoField(T, alloc, &result, key_str, value_str);
                 fields_set.set(i);
                 continue :loop;
             }
@@ -552,7 +552,7 @@ fn parsePackedStruct(comptime T: type, v: []const u8) !T {
     loop: while (iter.next()) |part_raw| {
         // Determine the field we're looking for and the value. If the
         // field is prefixed with "no-" then we set the value to false.
-        const part, const value = part: {
+        const part, const value_bool = part: {
             const negation_prefix = "no-";
             const trimmed = std.mem.trim(u8, part_raw, whitespace);
             if (std.mem.startsWith(u8, trimmed, negation_prefix)) {
@@ -565,7 +565,7 @@ fn parsePackedStruct(comptime T: type, v: []const u8) !T {
         inline for (info.fields) |field| {
             assert(field.type == bool);
             if (std.mem.eql(u8, field.name, part)) {
-                @field(result, field.name) = value;
+                @field(result, field.name) = value_bool;
                 continue :loop;
             }
         }
@@ -705,13 +705,17 @@ test "parse: diagnostic tracking" {
         "--what --a=42",
     );
     defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
+
+    var args_iter = ArgsIterator(std.process.ArgIteratorGeneral).{ .iterator = iter };
+    errdefer args_iter.deinit();
+
+    try parse(@TypeOf(data), testing.allocator, &data, &args_iter);
     try testing.expect(data._arena != null);
     try testing.expectEqualStrings("42", data.a);
     try testing.expect(data._diagnostics.items().len == 1);
     {
         const diag = data._diagnostics.items()[0];
-        try testing.expectEqual(diags.Location.none, diag.location);
+        try testing.expectEqual(diags.Location.cli_arg_idx, diag.location.getTag());
         try testing.expectEqualStrings("what", diag.key);
         try testing.expectEqualStrings("unknown field", diag.message);
     }
@@ -1291,7 +1295,7 @@ pub fn LineIterator(comptime ReaderType: type) type {
             const buf = buf: {
                 while (true) {
                     // Read the full line
-                    var entry = self.r.readUntilDelimiterOrEof(self.entry[2..], '\n') catch |err| switch (err) {
+                    var entry_slice = self.r.readUntilDelimiterOrEof(self.entry[2..], '\n') catch |err| switch (err) {
                         inline else => |e| {
                             log.warn("cannot read from \"{s}\": {}", .{ self.filepath, e });
                             return null;
@@ -1302,44 +1306,44 @@ pub fn LineIterator(comptime ReaderType: type) type {
                     self.line += 1;
 
                     // Trim any whitespace (including CR) around it
-                    const trim = std.mem.trim(u8, entry, whitespace ++ "\r");
-                    if (trim.len != entry.len) {
-                        std.mem.copyForwards(u8, entry, trim);
-                        entry = entry[0..trim.len];
+                    const trim = std.mem.trim(u8, entry_slice, whitespace ++ "\r");
+                    if (trim.len != entry_slice.len) {
+                        std.mem.copyForwards(u8, entry_slice, trim);
+                        entry_slice = entry_slice[0..trim.len];
                     }
 
                     // Ignore blank lines and comments
-                    if (entry.len == 0 or entry[0] == '#') continue;
+                    if (entry_slice.len == 0 or entry_slice[0] == '#') continue;
 
                     // Trim spaces around '='
-                    if (mem.indexOf(u8, entry, "=")) |idx| {
-                        const key = std.mem.trim(u8, entry[0..idx], whitespace);
-                        const value = value: {
-                            var value = std.mem.trim(u8, entry[idx + 1 ..], whitespace);
+                    if (mem.indexOf(u8, entry_slice, "=")) |idx| {
+                        const key_str = std.mem.trim(u8, entry_slice[0..idx], whitespace);
+                        const value_str = value_val: {
+                            var value_inner = std.mem.trim(u8, entry_slice[idx + 1 ..], whitespace);
 
                             // Detect a quoted string.
-                            if (value.len >= 2 and
-                                value[0] == '"' and
-                                value[value.len - 1] == '"')
+                            if (value_inner.len >= 2 and
+                                value_inner[0] == '"' and
+                                value_inner[value_inner.len - 1] == '"')
                             {
                                 // Trim quotes since our CLI args processor expects
                                 // quotes to already be gone.
-                                value = value[1 .. value.len - 1];
+                                value_inner = value_inner[1 .. value_inner.len - 1];
                             }
 
-                            break :value value;
+                            break :value_val value_inner;
                         };
 
-                        const len = key.len + value.len + 1;
-                        if (entry.len != len) {
-                            std.mem.copyForwards(u8, entry, key);
-                            entry[key.len] = '=';
-                            std.mem.copyForwards(u8, entry[key.len + 1 ..], value);
-                            entry = entry[0..len];
+                        const len = key_str.len + value_str.len + 1;
+                        if (entry_slice.len != len) {
+                            std.mem.copyForwards(u8, entry_slice, key_str);
+                            entry_slice[key_str.len] = '=';
+                            std.mem.copyForwards(u8, entry_slice[key_str.len + 1 ..], value_str);
+                            entry_slice = entry_slice[0..len];
                         }
                     }
 
-                    break :buf entry;
+                    break :buf entry_slice;
                 }
             };
 
@@ -1370,25 +1374,6 @@ fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
     return .{ .r = reader };
 }
 
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
 test "LineIterator" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream(
@@ -1455,4 +1440,23 @@ test "LineIterator with CRLF line endings" {
     try testing.expectEqualStrings("--B=C", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
+}
+
+/// An iterator valid for arg parsing from a slice.
+pub const SliceIterator = struct {
+    const Self = @This();
+
+    slice: []const []const u8,
+    idx: usize = 0,
+
+    pub fn next(self: *Self) ?[]const u8 {
+        if (self.idx >= self.slice.len) return null;
+        defer self.idx += 1;
+        return self.slice[self.idx];
+    }
+};
+
+/// Construct a SliceIterator from a slice.
+pub fn sliceIterator(slice: []const []const u8) SliceIterator {
+    return .{ .slice = slice };
 }
\ No newline at end of file
