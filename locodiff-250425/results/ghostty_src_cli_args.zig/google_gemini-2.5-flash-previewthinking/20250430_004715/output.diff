--- ghostty_src_cli_args.zig_expectedoutput.txt (expected)+++ ghostty_src_cli_args.zig_extracted.txt (actual)@@ -707,7 +707,6 @@     defer iter.deinit();
     try parse(@TypeOf(data), testing.allocator, &data, &iter);
     try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
     try testing.expect(data._diagnostics.items().len == 1);
     {
         const diag = data._diagnostics.items()[0];
@@ -860,10 +859,52 @@ 
     var data: struct {
         u8: u8,
+        u32: u32,
+        u64: u64,
+        usize: usize,
+        u21: u21,
     } = undefined;
 
     try parseIntoField(@TypeOf(data), alloc, &data, "u8", "1");
     try testing.expectEqual(@as(u8, 1), data.u8);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "u32", "12345");
+    try testing.expectEqual(@as(u32, 12345), data.u32);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "u64", "9876543210");
+    try testing.expectEqual(@as(u64, 9876543210), data.u64);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "usize", "123456789");
+    try testing.expectEqual(@as(usize, 123456789), data.usize);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "u21", "1234567");
+    try testing.expectEqual(@as(u21, 1234567), data.u21);
+}
+
+test "parseIntoField: signed numbers" {
+    const testing = std.testing;
+    var arena = ArenaAllocator.init(testing.allocator);
+    defer arena.deinit();
+    const alloc = arena.allocator();
+
+    var data: struct {
+        i8: i8,
+        i32: i32,
+        i64: i64,
+        isize: isize,
+    } = undefined;
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "i8", "-1");
+    try testing.expectEqual(@as(i8, -1), data.i8);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "i32", "-12345");
+    try testing.expectEqual(@as(i32, -12345), data.i32);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "i64", "-9876543210");
+    try testing.expectEqual(@as(i64, -9876543210), data.i64);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "isize", "-123456789");
+    try testing.expectEqual(@as(isize, -123456789), data.isize);
 }
 
 test "parseIntoField: floats" {
@@ -873,11 +914,15 @@     const alloc = arena.allocator();
 
     var data: struct {
+        f32: f32,
         f64: f64,
     } = undefined;
 
-    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "1");
-    try testing.expectEqual(@as(f64, 1.0), data.f64);
+    try parseIntoField(@TypeOf(data), alloc, &data, "f32", "1.2");
+    try testing.expectEqual(@as(f32, 1.2), data.f32);
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "3.4");
+    try testing.expectEqual(@as(f64, 3.4), data.f64);
 }
 
 test "parseIntoField: enums" {
@@ -1382,12 +1427,13 @@         defer self.idx += 1;
         return self.slice[self.idx];
     }
+
+    /// Returns a location for a diagnostic message. This always returns none.
+    pub fn location(self: *const Self, _: Allocator) error{}!diags.Location {
+        _ = self; // ignored
+        return diags.Location.none;
+    }
 };
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
 
 test "LineIterator" {
     const testing = std.testing;
@@ -1444,6 +1490,7 @@     var iter = lineIterator(fbs.reader());
     try testing.expectEqualStrings("--A=", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
+    try testing.expectEqual(@as(?[]const u8, null), iter.next());
 }
 
 test "LineIterator with CRLF line endings" {
