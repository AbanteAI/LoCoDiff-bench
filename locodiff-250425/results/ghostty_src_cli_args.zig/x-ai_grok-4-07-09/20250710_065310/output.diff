
index 2d40c1a2d..88c82d6b2 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmpexi0wgxw_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmplwqmtz5l_actual.txt	
@@ -14,7 +14,6 @@ const log = std.log.scoped(.cli);
 //   - Only `--long=value` format is accepted. Do we want to allow
 //     `--long value`? Not currently allowed.
 
-// For trimming
 pub const whitespace = " \t";
 
 /// The base errors for arg parsing. Additional errors can be returned due
@@ -255,9 +254,7 @@ pub fn parseIntoField(
                 else => field.type,
             };
             const fieldInfo = @typeInfo(Field);
-            const canHaveDecls = fieldInfo == .@"struct" or
-                fieldInfo == .@"union" or
-                fieldInfo == .@"enum";
+            const canHaveDecls = fieldInfo == .@"struct" or fieldInfo == .@"union" or fieldInfo == .@"enum";
 
             // If the value is empty string (set but empty string),
             // then we reset the value to the default.
@@ -290,9 +287,6 @@ pub fn parseIntoField(
                             .@"enum",
                             => try @field(dst, field.name).parseCLI(value),
 
-                            // If the field is optional and set, then we use
-                            // the pointer value directly into it. If its not
-                            // set we need to create a new instance.
                             .optional => if (@field(dst, field.name)) |*v| {
                                 try v.parseCLI(value);
                             } else {
@@ -303,7 +297,6 @@ pub fn parseIntoField(
                                 try tmp.parseCLI(value);
                                 @field(dst, field.name) = tmp;
                             },
-
                             else => @compileError("unexpected field type"),
                         },
 
@@ -321,7 +314,6 @@ pub fn parseIntoField(
                                 try tmp.parseCLI(alloc, value);
                                 @field(dst, field.name) = tmp;
                             },
-
                             else => @compileError("unexpected field type"),
                         },
 
@@ -368,7 +360,7 @@ pub fn parseIntoField(
                     0,
                 ) catch return error.InvalidValue,
 
-                f32,
+                inline f32,
                 f64,
                 => |Float| std.fmt.parseFloat(
                     Float,
@@ -414,7 +406,11 @@ pub fn parseIntoField(
     return error.InvalidField;
 }
 
-fn parseTaggedUnion(comptime T: type, alloc: Allocator, v: []const u8) !T {
+fn parseTaggedUnion(
+    comptime T: type,
+    alloc: Allocator,
+    v: []const u8,
+) !T {
     const info = @typeInfo(T).@"union";
     assert(@typeInfo(info.tag_type.?) == .@"enum");
 
@@ -460,7 +456,11 @@ fn parseTaggedUnion(comptime T: type, alloc: Allocator, v: []const u8) !T {
     return error.InvalidValue;
 }
 
-fn parseStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
+fn parseStruct(
+    comptime T: type,
+    alloc: Allocator,
+    v: []const u8,
+) !T {
     return switch (@typeInfo(T).@"struct".layout) {
         .auto => parseAutoStruct(T, alloc, v),
         .@"packed" => parsePackedStruct(T, v),
@@ -468,7 +468,11 @@ fn parseStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
     };
 }
 
-pub fn parseAutoStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
+pub fn parseAutoStruct(
+    comptime T: type,
+    alloc: Allocator,
+    v: []const u8,
+) !T {
     const info = @typeInfo(T).@"struct";
     comptime assert(info.layout == .auto);
 
@@ -530,7 +534,10 @@ pub fn parseAutoStruct(comptime T: type, alloc: Allocator, v: []const u8) !T {
     return result;
 }
 
-fn parsePackedStruct(comptime T: type, v: []const u8) !T {
+fn parsePackedStruct(
+    comptime T: type,
+    v: []const u8,
+) !T {
     const info = @typeInfo(T).@"struct";
     comptime assert(info.layout == .@"packed");
 
@@ -691,35 +698,6 @@ test "parse: positional arguments are invalid" {
 test "parse: diagnostic tracking" {
     const testing = std.testing;
 
-    var data: struct {
-        a: []const u8 = "",
-        b: enum { one } = .one,
-
-        _arena: ?ArenaAllocator = null,
-        _diagnostics: DiagnosticList = .{},
-    } = .{};
-    defer if (data._arena) |arena| arena.deinit();
-
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what --a=42",
-    );
-    defer iter.deinit();
-    try parse(@TypeOf(data), testing.allocator, &data, &iter);
-    try testing.expect(data._arena != null);
-    try testing.expectEqualStrings("42", data.a);
-    try testing.expect(data._diagnostics.items().len == 1);
-    {
-        const diag = data._diagnostics.items()[0];
-        try testing.expectEqual(diags.Location.none, diag.location);
-        try testing.expectEqualStrings("what", diag.key);
-        try testing.expectEqualStrings("unknown field", diag.message);
-    }
-}
-
-test "parse: diagnostic location" {
-    const testing = std.testing;
-
     var data: struct {
         a: []const u8 = "",
         b: enum { one, two } = .one,
@@ -1071,7 +1049,7 @@ test "parseIntoField: struct with basic fields" {
     try testing.expectEqual(84, data.value.b);
     try testing.expectEqual(24, data.value.c);
 
-    // Missing require dfield
+    // Missing required field
     try testing.expectError(
         error.InvalidValue,
         parseIntoField(@TypeOf(data), alloc, &data, "value", "a:hello"),
@@ -1370,25 +1348,6 @@ fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
     return .{ .r = reader };
 }
 
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
 test "LineIterator" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream(
@@ -1455,4 +1414,23 @@ test "LineIterator with CRLF line endings" {
     try testing.expectEqualStrings("--B=C", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
+}
+
+/// An iterator valid for arg parsing from a slice.
+pub const SliceIterator = struct {
+    const Self = @This();
+
+    slice: []const []const u8,
+    idx: usize = 0,
+
+    pub fn next(self: *Self) ?[]const u8 {
+        if (self.idx >= self.slice.len) return null;
+        defer self.idx += 1;
+        return self.slice[self.idx];
+    }
+};
+
+/// Construct a SliceIterator from a slice.
+pub fn sliceIterator(slice: []const []const u8) SliceIterator {
+    return .{ .slice = slice };
 }
\ No newline at end of file
