
index 2d40c1a2..286718ef 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmpc_pq74c9_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmphp4uvtiv_actual.txt	
@@ -699,6 +699,7 @@ test "parse: diagnostic tracking" {
         _diagnostics: DiagnosticList = .{},
     } = .{};
     defer if (data._arena) |arena| arena.deinit();
+    defer data._diagnostics.deinit();
 
     var iter = try std.process.ArgIteratorGeneral(.{}).init(
         testing.allocator,
@@ -728,6 +729,7 @@ test "parse: diagnostic location" {
         _diagnostics: DiagnosticList = .{},
     } = .{};
     defer if (data._arena) |arena| arena.deinit();
+    defer data._diagnostics.deinit();
 
     var fbs = std.io.fixedBufferStream(
         \\a=42
@@ -747,8 +749,8 @@ test "parse: diagnostic location" {
         const diag = data._diagnostics.items()[0];
         try testing.expectEqualStrings("what", diag.key);
         try testing.expectEqualStrings("unknown field", diag.message);
-        try testing.expectEqualStrings("test", diag.location.file.path);
-        try testing.expectEqual(2, diag.location.file.line);
+        try testing.expectEqualStrings("test", diag.location.file.?.path);
+        try testing.expectEqual(2, diag.location.file.?.line);
     }
 }
 
@@ -860,10 +862,42 @@ test "parseIntoField: unsigned numbers" {
 
     var data: struct {
         u8: u8,
+        u32: u32,
+        u64: u64,
+        usize: usize,
     } = undefined;
 
     try parseIntoField(@TypeOf(data), alloc, &data, "u8", "1");
     try testing.expectEqual(@as(u8, 1), data.u8);
+    try parseIntoField(@TypeOf(data), alloc, &data, "u32", "12");
+    try testing.expectEqual(@as(u32, 12), data.u32);
+    try parseIntoField(@TypeOf(data), alloc, &data, "u64", "123");
+    try testing.expectEqual(@as(u64, 123), data.u64);
+    try parseIntoField(@TypeOf(data), alloc, &data, "usize", "1234");
+    try testing.expectEqual(@as(usize, 1234), data.usize);
+}
+
+test "parseIntoField: signed numbers" {
+    const testing = std.testing;
+    var arena = ArenaAllocator.init(testing.allocator);
+    defer arena.deinit();
+    const alloc = arena.allocator();
+
+    var data: struct {
+        i8: i8,
+        i32: i32,
+        i64: i64,
+        isize: isize,
+    } = undefined;
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "i8", "-1");
+    try testing.expectEqual(@as(i8, -1), data.i8);
+    try parseIntoField(@TypeOf(data), alloc, &data, "i32", "-12");
+    try testing.expectEqual(@as(i32, -12), data.i32);
+    try parseIntoField(@TypeOf(data), alloc, &data, "i64", "-123");
+    try testing.expectEqual(@as(i64, -123), data.i64);
+    try parseIntoField(@TypeOf(data), alloc, &data, "isize", "-1234");
+    try testing.expectEqual(@as(isize, -1234), data.isize);
 }
 
 test "parseIntoField: floats" {
@@ -873,10 +907,13 @@ test "parseIntoField: floats" {
     const alloc = arena.allocator();
 
     var data: struct {
+        f32: f32,
         f64: f64,
     } = undefined;
 
-    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "1");
+    try parseIntoField(@TypeOf(data), alloc, &data, "f32", "1.0");
+    try testing.expectEqual(@as(f32, 1.0), data.f32);
+    try parseIntoField(@TypeOf(data), alloc, &data, "f64", "1.0");
     try testing.expectEqual(@as(f64, 1.0), data.f64);
 }
 
@@ -1287,7 +1324,6 @@ pub fn LineIterator(comptime ReaderType: type) type {
         entry: [MAX_LINE_SIZE]u8 = [_]u8{ '-', '-' } ++ ([_]u8{0} ** (MAX_LINE_SIZE - 2)),
 
         pub fn next(self: *Self) ?[]const u8 {
-            // TODO: detect "--" prefixed lines and give a friendlier error
             const buf = buf: {
                 while (true) {
                     // Read the full line
@@ -1365,30 +1401,6 @@ pub fn LineIterator(comptime ReaderType: type) type {
     };
 }
 
-// Constructs a LineIterator (see docs for that).
-fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
-    return .{ .r = reader };
-}
-
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
 test "LineIterator" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream(
@@ -1406,7 +1418,7 @@ test "LineIterator" {
         \\F=  "value "
     );
 
-    var iter = lineIterator(fbs.reader());
+    var iter = LineIterator(@TypeOf(fbs.reader())) { .r = fbs.reader() };
     try testing.expectEqualStrings("--A", iter.next().?);
     try testing.expectEqualStrings("--B=42", iter.next().?);
     try testing.expectEqualStrings("--C", iter.next().?);
@@ -1421,7 +1433,7 @@ test "LineIterator end in newline" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream("A\n\n");
 
-    var iter = lineIterator(fbs.reader());
+    var iter = LineIterator(@TypeOf(fbs.reader())) { .r = fbs.reader() };
     try testing.expectEqualStrings("--A", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
@@ -1431,7 +1443,7 @@ test "LineIterator spaces around '='" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream("A = B\n\n");
 
-    var iter = lineIterator(fbs.reader());
+    var iter = LineIterator(@TypeOf(fbs.reader())) { .r = fbs.reader() };
     try testing.expectEqualStrings("--A=B", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
@@ -1441,7 +1453,7 @@ test "LineIterator no value" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream("A = \n\n");
 
-    var iter = lineIterator(fbs.reader());
+    var iter = LineIterator(@TypeOf(fbs.reader())) { .r = fbs.reader() };
     try testing.expectEqualStrings("--A=", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
 }
@@ -1450,9 +1462,28 @@ test "LineIterator with CRLF line endings" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream("A\r\nB = C\r\n");
 
-    var iter = lineIterator(fbs.reader());
+    var iter = LineIterator(@TypeOf(fbs.reader())) { .r = fbs.reader() };
     try testing.expectEqualStrings("--A", iter.next().?);
     try testing.expectEqualStrings("--B=C", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
+}
+
+/// An iterator valid for arg parsing from a slice.
+pub const SliceIterator = struct {
+    const Self = @This();
+
+    slice: []const []const u8,
+    idx: usize = 0,
+
+    pub fn next(self: *Self) ?[]const u8 {
+        if (self.idx >= self.slice.len) return null;
+        defer self.idx += 1;
+        return self.slice[self.idx];
+    }
+};
+
+/// Construct a SliceIterator from a slice.
+pub fn sliceIterator(slice: []const []const u8) SliceIterator {
+    return .{ .slice = slice };
 }
\ No newline at end of file
