--- ghostty_src_cli_args.zig_expectedoutput.txt (expected)+++ ghostty_src_cli_args.zig_extracted.txt (actual)@@ -603,11 +603,8 @@     } = .{};
     defer if (data._arena) |arena| arena.deinit();
 
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=42 --b --b-f=false",
-    );
-    defer iter.deinit();
+    var args = [_][]const u8{ "--a=42", "--b", "--b-f=false" };
+    var iter = sliceIterator(&args);
     try parse(@TypeOf(data), testing.allocator, &data, &iter);
     try testing.expect(data._arena != null);
     try testing.expectEqualStrings("42", data.a);
@@ -615,11 +612,8 @@     try testing.expect(!data.@"b-f");
 
     // Reparsing works
-    var iter2 = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84",
-    );
-    defer iter2.deinit();
+    var args2 = [_][]const u8{"--a=84"};
+    var iter2 = sliceIterator(&args2);
     try parse(@TypeOf(data), testing.allocator, &data, &iter2);
     try testing.expect(data._arena != null);
     try testing.expectEqualStrings("84", data.a);
@@ -637,11 +631,8 @@     } = .{};
     defer if (data._arena) |arena| arena.deinit();
 
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=\"42\" --b=\"hello!\"",
-    );
-    defer iter.deinit();
+    var args = [_][]const u8{ "--a=\"42\"", "--b=\"hello!\"" };
+    var iter = sliceIterator(&args);
     try parse(@TypeOf(data), testing.allocator, &data, &iter);
     try testing.expectEqual(@as(u8, 42), data.a);
     try testing.expectEqualStrings("hello!", data.b);
@@ -657,11 +648,8 @@     } = .{};
     defer if (data._arena) |arena| arena.deinit();
 
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a= --b=",
-    );
-    defer iter.deinit();
+    var args = [_][]const u8{"--a=", "--b="};
+    var iter = sliceIterator(&args);
     try parse(@TypeOf(data), testing.allocator, &data, &iter);
     try testing.expectEqual(@as(u8, 42), data.a);
     try testing.expect(!data.b);
@@ -676,11 +664,10 @@     } = .{};
     defer if (data._arena) |arena| arena.deinit();
 
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--a=84 what",
-    );
-    defer iter.deinit();
+    var args = [_][]const u8{"--a=84", "what"};
+    var iter = sliceIterator(&args);
+
+    // Because we have no diagnostics, this should error out.
     try testing.expectError(
         error.InvalidField,
         parse(@TypeOf(data), testing.allocator, &data, &iter),
@@ -700,11 +687,8 @@     } = .{};
     defer if (data._arena) |arena| arena.deinit();
 
-    var iter = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what --a=42",
-    );
-    defer iter.deinit();
+    var args = [_][]const u8{"--what", "--a=42"};
+    var iter = sliceIterator(&args);
     try parse(@TypeOf(data), testing.allocator, &data, &iter);
     try testing.expect(data._arena != null);
     try testing.expectEqualStrings("42", data.a);
@@ -747,8 +731,8 @@         const diag = data._diagnostics.items()[0];
         try testing.expectEqualStrings("what", diag.key);
         try testing.expectEqualStrings("unknown field", diag.message);
-        try testing.expectEqualStrings("test", diag.location.file.path);
-        try testing.expectEqual(2, diag.location.file.line);
+        try testing.expectEqual(2, diag.location.?.file.line);
+        try testing.expectEqualStrings("test", diag.location.?.file.path);
     }
 }
 
@@ -994,7 +978,7 @@     try parseIntoField(@TypeOf(data), alloc, &data, "a", "1");
     try testing.expectEqual(true, data.a.?);
 
-    // Unset
+    // Unset (reset to default which is null for optionals)
     try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
     try testing.expect(data.a == null);
 }
@@ -1243,10 +1227,8 @@ test "ArgsIterator" {
     const testing = std.testing;
 
-    const child = try std.process.ArgIteratorGeneral(.{}).init(
-        testing.allocator,
-        "--what +list-things --a=42",
-    );
+    var args = [_][]const u8{ "--what", "+list-things", "--a=42" };
+    var child = sliceIterator(&args);
     const Iter = ArgsIterator(@TypeOf(child));
     var iter: Iter = .{ .iterator = child };
     defer iter.deinit();
