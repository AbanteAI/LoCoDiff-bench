
index 2d40c1a2d..7370559bb 100644
--- a/ghostty_src_cli_args.zig_expectedoutput.txt (expected):tmp/tmp3be2mc4v_expected.txt	
+++ b/ghostty_src_cli_args.zig_extracted.txt (actual):tmp/tmp31jlqq2v_actual.txt	
@@ -303,7 +303,6 @@ pub fn parseIntoField(
                                 try tmp.parseCLI(value);
                                 @field(dst, field.name) = tmp;
                             },
-
                             else => @compileError("unexpected field type"),
                         },
 
@@ -321,7 +320,6 @@ pub fn parseIntoField(
                                 try tmp.parseCLI(alloc, value);
                                 @field(dst, field.name) = tmp;
                             },
-
                             else => @compileError("unexpected field type"),
                         },
 
@@ -769,29 +767,6 @@ test "parseIntoField: ignore underscore-prefixed fields" {
     try testing.expectEqualStrings("12", data._a);
 }
 
-test "parseIntoField: struct with init func" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var data: struct {
-        a: struct {
-            const Self = @This();
-
-            v: []const u8,
-
-            pub fn init(self: *Self, _alloc: Allocator) !void {
-                _ = _alloc;
-                self.* = .{ .v = "HELLO!" };
-            }
-        },
-    } = undefined;
-
-    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
-    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
-}
-
 test "parseIntoField: string" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
@@ -1078,6 +1053,29 @@ test "parseIntoField: struct with basic fields" {
     );
 }
 
+test "parseIntoField: struct with init func" {
+    const testing = std.testing;
+    var arena = ArenaAllocator.init(testing.allocator);
+    defer arena.deinit();
+    const alloc = arena.allocator();
+
+    var data: struct {
+        a: struct {
+            const Self = @This();
+
+            v: []const u8,
+
+            pub fn init(self: *Self, _alloc: Allocator) !void {
+                _ = _alloc;
+                self.* = .{ .v = "HELLO!" };
+            }
+        },
+    } = undefined;
+
+    try parseIntoField(@TypeOf(data), alloc, &data, "a", "");
+    try testing.expectEqual(@as([]const u8, "HELLO!"), data.a.v);
+}
+
 test "parseIntoField: tagged union" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
@@ -1365,30 +1363,6 @@ pub fn LineIterator(comptime ReaderType: type) type {
     };
 }
 
-// Constructs a LineIterator (see docs for that).
-fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
-    return .{ .r = reader };
-}
-
-/// An iterator valid for arg parsing from a slice.
-pub const SliceIterator = struct {
-    const Self = @This();
-
-    slice: []const []const u8,
-    idx: usize = 0,
-
-    pub fn next(self: *Self) ?[]const u8 {
-        if (self.idx >= self.slice.len) return null;
-        defer self.idx += 1;
-        return self.slice[self.idx];
-    }
-};
-
-/// Construct a SliceIterator from a slice.
-pub fn sliceIterator(slice: []const []const u8) SliceIterator {
-    return .{ .slice = slice };
-}
-
 test "LineIterator" {
     const testing = std.testing;
     var fbs = std.io.fixedBufferStream(
@@ -1455,4 +1429,27 @@ test "LineIterator with CRLF line endings" {
     try testing.expectEqualStrings("--B=C", iter.next().?);
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
     try testing.expectEqual(@as(?[]const u8, null), iter.next());
+}
+
+/// An iterator valid for arg parsing from a slice.
+pub const SliceIterator = struct {
+    const Self = @This();
+
+    slice: []const []const u8,
+    idx: usize = 0,
+
+    pub fn next(self: *Self) ?[]const u8 {
+        if (self.idx >= self.slice.len) return null;
+        defer self.idx += 1;
+        return self.slice[self.idx];
+    }
+};
+
+/// Construct a SliceIterator from a slice.
+pub fn sliceIterator(slice: []const []const u8) SliceIterator {
+    return .{ .slice = slice };
+}
+
+fn lineIterator(reader: anytype) LineIterator(@TypeOf(reader)) {
+    return .{ .r = reader };
 }
\ No newline at end of file
