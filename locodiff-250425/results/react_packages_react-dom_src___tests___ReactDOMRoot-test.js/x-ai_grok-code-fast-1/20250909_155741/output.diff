
index 20684b17d..54806dc2b 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmpq9ebkg3r_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmpt1nvvwzk_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -48,6 +46,28 @@ describe('ReactDOMRoot', () => {
     expect(container.textContent).toEqual('Hi');
   });
 
+  // @gate !www || !__DEV__
+  it('warns if you import createRoot from react-dom', async () => {
+    expect(() => ReactDOM.createRoot(container)).toErrorDev(
+      'You are importing createRoot from "react-dom" which is not supported. ' +
+        'You should instead import it from "react-dom/client".',
+      {
+        withoutStack: true,
+      },
+    );
+  });
+
+  // @gate !www || !__DEV__
+  it('warns if you import hydrateRoot from react-dom', async () => {
+    expect(() => ReactDOM.hydrateRoot(container, null)).toErrorDev(
+      'You are importing hydrateRoot from "react-dom" which is not supported. ' +
+        'You should instead import it from "react-dom/client".',
+      {
+        withoutStack: true,
+      },
+    );
+  });
+
   it('warns if a callback parameter is provided to render', async () => {
     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
@@ -155,6 +175,7 @@ describe('ReactDOMRoot', () => {
     );
     await waitForAll([]);
 
+    // Accepts `hydrate` option
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
     ReactDOMClient.hydrateRoot(
@@ -244,8 +265,7 @@ describe('ReactDOMRoot', () => {
     await waitForAll([]);
     container.innerHTML = '';
 
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
+    // When float is enabled this validation is turned off so we expect no warnings
     root.render(<div>Hi</div>);
   });
 
@@ -389,11 +409,10 @@ describe('ReactDOMRoot', () => {
       root1.render(<App step={2} />);
     });
     assertConsoleErrorDev([
-      'Attempted to synchronously unmount a root while React was already rendering. ' +
-        'React cannot finish unmounting the root until the current render has completed, ' +
-        'which may lead to a race condition.\n' +
-        '    in App (at **)',
-    ]);
+      'Attempted to synchronously unmount a root while React was ' +
+        'already rendering. React cannot finish unmounting the root until the ' +
+        'current render has completed, which may lead to a race condition.\n' +
+        '    in App (at **)']);
   });
 
   // @gate disableCommentsAsDOMContainers
@@ -430,8 +449,8 @@ describe('ReactDOMRoot', () => {
     ReactDOMClient.createRoot(container, <App />);
     assertConsoleErrorDev(
       [
-        'You passed a JSX element to createRoot. You probably meant to call root.render instead. ' +
-          'Example usage:\n' +
+        'You passed a JSX element to createRoot. You probably meant to call ' +
+          'root.render instead. Example usage:\n' +
           '\n' +
           '  let root = createRoot(domContainer);\n' +
           '  root.render(<App />);',
