
index 20684b17d..718fd51f5 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmpxnmtvo49_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmpytiynqxl_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -344,7 +342,7 @@ describe('ReactDOMRoot', () => {
     });
     expect(container.textContent).toEqual('Hi');
 
-    await act(() => {
+    await act(async () => {
       root.unmount();
       // Should have already unmounted
       expect(container.textContent).toEqual('');
@@ -360,9 +358,7 @@ describe('ReactDOMRoot', () => {
 
     root.unmount();
 
-    expect(() => root.render("I'm back")).toThrow(
-      'Cannot update an unmounted root.',
-    );
+    expect(() => root.render("I'm back")).toThrow('Cannot update an unmounted root.');
   });
 
   it('warns if root is unmounted inside an effect', async () => {
@@ -403,12 +399,11 @@ describe('ReactDOMRoot', () => {
     div.innerHTML = '<!-- react-mount-point-unstable -->';
     const commentNode = div.childNodes[0];
 
-    expect(() => ReactDOMClient.createRoot(commentNode)).toThrow(
-      'Target container is not a DOM element.',
-    );
-    expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow(
-      'Target container is not a DOM element.',
-    );
+    expect(() => ReactDOMClient.createRoot(commentNode)).toThrow('Target container is not a DOM element.');
+    expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow('Target container is not a DOM element.' );
+
+    // Still works in the legacy API
+    ReactDOM.render(<div />, commentNode);
   });
 
   it('warn if no children passed to hydrateRoot', async () => {
