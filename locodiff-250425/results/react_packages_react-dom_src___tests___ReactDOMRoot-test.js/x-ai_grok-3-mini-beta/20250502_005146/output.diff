--- react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual)@@ -3,131 +3,78 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
-'use strict';
-
-let React = require('react');
-let ReactDOM = require('react-dom');
-let ReactDOMClient = require('react-dom/client');
-let ReactDOMServer = require('react-dom/server');
-let Scheduler = require('scheduler');
-let act;
-let useEffect;
-let assertLog;
-let waitForAll;
-let assertConsoleErrorDev;
+import {useEffect} from 'react';
+import {createRoot} from 'react-dom/client';
+import ReactDOM from 'react-dom';
+import ReactDOMServer from 'react-dom/server';
+import Scheduler from 'scheduler';
+import act from 'internal-test-utils';
+import assertLog from 'internal-test-utils';
+import waitForAll from 'internal-test-utils';
 
 describe('ReactDOMRoot', () => {
   let container;
 
-  beforeEach(() => {
+  beforeEach() {
     jest.resetModules();
     container = document.createElement('div');
-    React = require('react');
-    ReactDOM = require('react-dom');
-    ReactDOMClient = require('react-dom/client');
-    ReactDOMServer = require('react-dom/server');
-    Scheduler = require('scheduler');
-    act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
-    useEffect = React.useEffect;
-
-    const InternalTestUtils = require('internal-test-utils');
-    assertLog = InternalTestUtils.assertLog;
-    waitForAll = InternalTestUtils.waitForAll;
-  });
-
-  it('renders children', async () => {
-    const root = ReactDOMClient.createRoot(container);
+  }
+
+  it('renders children', () => {
+    const root = createRoot(container);
     root.render(<div>Hi</div>);
-    await waitForAll([]);
-    expect(container.textContent).toEqual('Hi');
-  });
-
-  it('warns if a callback parameter is provided to render', async () => {
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('Hi');
+  });
+
+  it('warns if a callback parameter is provided to render', () => {
     const callback = jest.fn();
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     root.render(<div>Hi</div>, callback);
-    assertConsoleErrorDev(
-      [
-        'does not support the second callback argument. ' +
-          'To execute a side effect after rendering, declare it in a component body with useEffect().',
-      ],
-      {withoutStack: true},
-    );
-    await waitForAll([]);
+    expect(console.error).toHaveBeenCalledWith('Warning: render(...): does not support the second callback argument. ' +
+      'To execute a side effect after rendering, declare it in a component body with useEffect().');
+    Scheduler.flushAll();
     expect(callback).not.toHaveBeenCalled();
   });
 
-  it('warn if a object is passed to root.render(...)', async () => {
+  it('warns if a container is passed to root.render(...)', () => {
     function App() {
       return 'Child';
     }
 
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<App />, {});
-    assertConsoleErrorDev(
-      [
-        'You passed a second argument to root.render(...) but it only accepts ' +
-          'one argument.',
-      ],
-      {
-        withoutStack: true,
-      },
-    );
-  });
-
-  it('warn if a container is passed to root.render(...)', async () => {
-    function App() {
-      return 'Child';
-    }
-
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     root.render(<App />, container);
-    assertConsoleErrorDev(
-      [
-        'You passed a container to the second argument of root.render(...). ' +
-          "You don't need to pass it again since you already passed it to create " +
-          'the root.',
-      ],
-      {
-        withoutStack: true,
-      },
-    );
-  });
-
-  it('warns if a callback parameter is provided to unmount', async () => {
+    expect(console.error).toHaveBeenCalledWith('Warning: You passed a container to the second argument of root.render(...). ' +
+      "You don't need to pass it again since you already passed it to create " +
+      'the root.');
+    Scheduler.flushAll();
+  });
+
+  it('warns if a callback parameter is provided to unmount', () => {
     const callback = jest.fn();
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     root.render(<div>Hi</div>);
     root.unmount(callback);
-    assertConsoleErrorDev(
-      [
-        'does not support a callback argument. ' +
-          'To execute a side effect after rendering, declare it in a component body with useEffect().',
-      ],
-      {withoutStack: true},
-    );
-    await waitForAll([]);
+    expect(console.error).toHaveBeenCalledWith('Warning: unmount(...): does not support a callback argument. ' +
+      'To execute a side effect after rendering, declare it in a component body with useEffect().');
+    Scheduler.flushAll();
     expect(callback).not.toHaveBeenCalled();
   });
 
-  it('unmounts children', async () => {
-    const root = ReactDOMClient.createRoot(container);
+  it('unmounts children', () => {
+    const root = createRoot(container);
     root.render(<div>Hi</div>);
-    await waitForAll([]);
+    Scheduler.flushAll();
     expect(container.textContent).toEqual('Hi');
     root.unmount();
-    await waitForAll([]);
+    Scheduler.flushAll();
     expect(container.textContent).toEqual('');
   });
 
   it('can be immediately unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.unmount();
     });
@@ -147,55 +94,34 @@     // Does not hydrate by default
     const container1 = document.createElement('div');
     container1.innerHTML = markup;
-    const root1 = ReactDOMClient.createRoot(container1);
+    const root1 = createRoot(container1);
     root1.render(
       <div>
         <span />
       </div>,
     );
-    await waitForAll([]);
+    Scheduler.flushAll();
 
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
-    ReactDOMClient.hydrateRoot(
+    hydrateRoot(
       container2,
       <div>
         <span />
       </div>,
     );
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. " +
-        "This won't be patched up. This can happen if a SSR-ed Client Component used:\n" +
-        '\n' +
-        "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-        "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-        "- Date formatting in a user's locale which doesn't match the server.\n" +
-        '- External changing data without sending a snapshot of it along with the HTML.\n' +
-        '- Invalid HTML tag nesting.\n' +
-        '\n' +
-        'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-        '\n' +
-        'https://react.dev/link/hydration-mismatch\n' +
-        '\n' +
-        '  <div>\n' +
-        '    <span\n' +
-        '-     className="extra"\n' +
-        '    >\n' +
-        '\n    in span (at **)',
-    ]);
   });
 
   it('clears existing children', async () => {
     container.innerHTML = '<div>a</div><div>b</div>';
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     root.render(
       <div>
         <span>c</span>
         <span>d</span>
       </div>,
     );
-    await waitForAll([]);
+    Scheduler.flushAll();
     expect(container.textContent).toEqual('cd');
     root.render(
       <div>
@@ -203,55 +129,96 @@         <span>c</span>
       </div>,
     );
-    await waitForAll([]);
+    Scheduler.flushAll();
     expect(container.textContent).toEqual('dc');
   });
 
   it('throws a good message on invalid containers', () => {
     expect(() => {
-      ReactDOMClient.createRoot(<div>Hi</div>);
+      createRoot(<div>Hi</div>);
     }).toThrow('Target container is not a DOM element.');
   });
 
+  it('warns when unmounting with legacy API (no previous content)', async () => {
+    const root = createRoot(container);
+    root.render(<div>Hi</div>);
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('Hi');
+    let unmounted = false;
+    expect(() => {
+      unmounted = ReactDOM.unmountComponentAtNode(container);
+    }).toErrorDev(
+      [
+        'You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' +
+          'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?',
+        "The node you're attempting to unmount was rendered by React and is not a top-level container.",
+      ],
+      {withoutStack: true},
+    );
+    expect(unmounted).toBe(false);
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('Hi');
+    root.unmount();
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('');
+  });
+
+  it('warns when unmounting with legacy API (has previous content)', async () => {
+    // Currently createRoot().render() doesn't clear this.
+    container.appendChild(document.createElement('div'));
+    // The rest is the same as test above.
+    const root = createRoot(container);
+    root.render(<div>Hi</div>);
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('Hi');
+    let unmounted = false;
+    expect(() => {
+      unmounted = ReactDOM.unmountComponentAtNode(container);
+    }).toErrorDev(
+      [
+        'Did you mean to call root.unmount()?',
+        "The node you're attempting to unmount was rendered by React and is not a top-level container.",
+      ],
+      {withoutStack: true},
+    );
+    expect(unmounted).toBe(false);
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('Hi');
+    root.unmount();
+    Scheduler.flushAll();
+    expect(container.textContent).toEqual('');
+  });
+
+  it('warns when passing legacy container to createRoot()', () => {
+    ReactDOM.render(<div>Hi</div>, container);
+    expect(() => {
+      createRoot(container);
+    }).toErrorDev(
+      'You are calling ReactDOM.createRoot() on a container that was previously ' +
+        'passed to ReactDOM.render(). This is not supported.',
+      {withoutStack: true},
+    );
+  });
+
   it('warns when creating two roots managing the same container', () => {
-    ReactDOMClient.createRoot(container);
-    ReactDOMClient.createRoot(container);
-    assertConsoleErrorDev(
-      [
-        'You are calling ReactDOMClient.createRoot() on a container that ' +
-          'has already been passed to createRoot() before. Instead, call ' +
-          'root.render() on the existing root instead if you want to update it.',
-      ],
-      {withoutStack: true},
-    );
+    createRoot(container);
+    createRoot(container);
+    expect(console.error).toHaveBeenCalledWith('Warning: You are calling ReactDOM.createRoot() on a container that ' +
+      'has already been passed to createRoot() before. Instead, call ' +
+      'root.render() on the existing root instead if you want to update it.');
   });
 
   it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
+    const root = createRoot(container);
+    await act(() => {
+      root.unmount();
+    });
+    createRoot(container); // No warning
   });
 
   it('should render different components in same root', async () => {
     document.body.appendChild(container);
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
 
     await act(() => {
       root.render(<div />);
@@ -266,7 +233,7 @@ 
   it('should not warn if mounting into non-empty node', async () => {
     container.innerHTML = '<div></div>';
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<div />);
     });
@@ -275,7 +242,7 @@   });
 
   it('should reuse markup if rendering to the same target twice', async () => {
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<div />);
     });
@@ -300,7 +267,7 @@       return <span>{text}</span>;
     }
 
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
 
     await act(() => {
       root.render(<Component text="orange" key="A" />);
@@ -324,7 +291,7 @@   });
 
   it('throws if unmounting a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
+    const root = createRoot(container);
     await act(() => {
       root.render(<div>Hi</div>);
     });
@@ -337,39 +304,11 @@     }).rejects.toThrow('The node to be removed is not a child of this node.');
   });
 
-  it('unmount is synchronous', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render('Hi');
-    });
-    expect(container.textContent).toEqual('Hi');
-
-    await act(() => {
-      root.unmount();
-      // Should have already unmounted
-      expect(container.textContent).toEqual('');
-    });
-  });
-
-  it('throws if an unmounted root is updated', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render('Hi');
-    });
-    expect(container.textContent).toEqual('Hi');
-
-    root.unmount();
-
-    expect(() => root.render("I'm back")).toThrow(
-      'Cannot update an unmounted root.',
-    );
-  });
-
   it('warns if root is unmounted inside an effect', async () => {
     const container1 = document.createElement('div');
-    const root1 = ReactDOMClient.createRoot(container1);
+    const root1 = createRoot(container1);
     const container2 = document.createElement('div');
-    const root2 = ReactDOMClient.createRoot(container2);
+    const root2 = createRoot(container2);
 
     function App({step}) {
       useEffect(() => {
@@ -403,16 +342,16 @@     div.innerHTML = '<!-- react-mount-point-unstable -->';
     const commentNode = div.childNodes[0];
 
-    expect(() => ReactDOMClient.createRoot(commentNode)).toThrow(
+    expect(() => createRoot(commentNode)).toThrow(
       'Target container is not a DOM element.',
     );
-    expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow(
+    expect(() => hydrateRoot(commentNode)).toThrow(
       'Target container is not a DOM element.',
     );
   });
 
   it('warn if no children passed to hydrateRoot', async () => {
-    ReactDOMClient.hydrateRoot(container);
+    hydrateRoot(container);
     assertConsoleErrorDev(
       [
         'Must provide initial children as second argument to hydrateRoot. ' +
@@ -427,11 +366,11 @@       return 'Child';
     }
 
-    ReactDOMClient.createRoot(container, <App />);
+    createRoot(container, <App />);
     assertConsoleErrorDev(
       [
         'You passed a JSX element to createRoot. You probably meant to call root.render instead. ' +
-          'Example usage:\n' +
+          '\n' +
           '\n' +
           '  let root = createRoot(domContainer);\n' +
           '  root.render(<App />);',
@@ -447,7 +386,7 @@       return <div />;
     }
 
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
+    const root = createRoot(document.createElement('div'));
 
     ReactDOM.flushSync(() => {
       root.render(Component);
@@ -464,7 +403,7 @@   });
 
   it('warns when given a symbol', () => {
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
+    const root = createRoot(document.createElement('div'));
 
     ReactDOM.flushSync(() => {
       root.render(Symbol('foo'));
