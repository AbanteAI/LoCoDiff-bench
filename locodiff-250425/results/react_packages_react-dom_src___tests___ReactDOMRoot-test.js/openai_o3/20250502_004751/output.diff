
index 20684b17..65cd89d9 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmp4sv1dumn_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmpoes5pa7j_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -72,12 +70,9 @@ describe('ReactDOMRoot', () => {
     root.render(<App />, {});
     assertConsoleErrorDev(
       [
-        'You passed a second argument to root.render(...) but it only accepts ' +
-          'one argument.',
+        'You passed a second argument to root.render(...) but it only accepts one argument.',
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
   });
 
@@ -91,12 +86,9 @@ describe('ReactDOMRoot', () => {
     assertConsoleErrorDev(
       [
         'You passed a container to the second argument of root.render(...). ' +
-          "You don't need to pass it again since you already passed it to create " +
-          'the root.',
+          "You don't need to pass it again since you already passed it to create the root.",
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
   });
 
@@ -153,8 +145,8 @@ describe('ReactDOMRoot', () => {
         <span />
       </div>,
     );
-    await waitForAll([]);
 
+    // Accepts `hydrate` option
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
     ReactDOMClient.hydrateRoot(
@@ -218,21 +210,13 @@ describe('ReactDOMRoot', () => {
     ReactDOMClient.createRoot(container);
     assertConsoleErrorDev(
       [
-        'You are calling ReactDOMClient.createRoot() on a container that ' +
-          'has already been passed to createRoot() before. Instead, call ' +
-          'root.render() on the existing root instead if you want to update it.',
+        'You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. ' +
+          'Instead, call root.render() on the existing root instead if you want to update it.',
       ],
       {withoutStack: true},
     );
   });
 
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
   it('warns if creating a root on the document.body', async () => {
     // we no longer expect an error for this if float is enabled
     ReactDOMClient.createRoot(document.body);
@@ -243,7 +227,6 @@ describe('ReactDOMRoot', () => {
     root.render(<div>Hi</div>);
     await waitForAll([]);
     container.innerHTML = '';
-
     // When either of these flags are on this validation is turned off so we
     // expect there to be no warnings
     root.render(<div>Hi</div>);
@@ -326,7 +309,7 @@ describe('ReactDOMRoot', () => {
   it('throws if unmounting a root that has had its contents removed', async () => {
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
-      root.render(<div>Hi</div>);
+      root.render('Hi');
     });
     container.innerHTML = '';
 
@@ -415,8 +398,7 @@ describe('ReactDOMRoot', () => {
     ReactDOMClient.hydrateRoot(container);
     assertConsoleErrorDev(
       [
-        'Must provide initial children as second argument to hydrateRoot. ' +
-          'Example usage: hydrateRoot(domContainer, <App />)',
+        'Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)',
       ],
       {withoutStack: true},
     );
