
index 20684b17d..481047d3e 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmp8ns99bzz_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmph5p6qw7d_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -79,6 +77,7 @@ describe('ReactDOMRoot', () => {
         withoutStack: true,
       },
     );
+    await waitForAll([]);
   });
 
   it('warn if a container is passed to root.render(...)', async () => {
@@ -98,6 +97,7 @@ describe('ReactDOMRoot', () => {
         withoutStack: true,
       },
     );
+    await waitForAll([]);
   });
 
   it('warns if a callback parameter is provided to unmount', async () => {
@@ -226,29 +226,6 @@ describe('ReactDOMRoot', () => {
     );
   });
 
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
-  });
-
   it('should render different components in same root', async () => {
     document.body.appendChild(container);
     const root = ReactDOMClient.createRoot(container);
