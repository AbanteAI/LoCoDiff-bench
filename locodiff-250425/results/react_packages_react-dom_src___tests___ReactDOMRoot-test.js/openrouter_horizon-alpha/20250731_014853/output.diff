
index 20684b17d..9359ce59f 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmp6hifghru_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmph7ijr7kv_actual.txt	
@@ -226,29 +226,6 @@ describe('ReactDOMRoot', () => {
     );
   });
 
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
-  });
-
   it('should render different components in same root', async () => {
     document.body.appendChild(container);
     const root = ReactDOMClient.createRoot(container);
@@ -323,6 +300,37 @@ describe('ReactDOMRoot', () => {
     assertLog([]);
   });
 
+  it('warns if creating a root on the document.body', async () => {
+    // we no longer expect an error for this if float is enabled
+    ReactDOMClient.createRoot(document.body);
+  });
+
+  it('warns if updating a root that has had its contents removed', async () => {
+    const root = ReactDOMClient.createRoot(container);
+    root.render(<div>Hi</div>);
+    await waitForAll([]);
+    container.innerHTML = '';
+
+    // When either of these flags are on this validation is turned off so we
+    // expect there to be no warnings
+    root.render(<div>Hi</div>);
+  });
+
+  it('should render different components in same root', async () => {
+    document.body.appendChild(container);
+    const root = ReactDOMClient.createRoot(container);
+
+    await act(() => {
+      root.render(<div />);
+    });
+    expect(container.firstChild.nodeName).toBe('DIV');
+
+    await act(() => {
+      root.render(<span />);
+    });
+    expect(container.firstChild.nodeName).toBe('SPAN');
+  });
+
   it('throws if unmounting a root that has had its contents removed', async () => {
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
