--- react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual)@@ -12,7 +12,7 @@ let React = require('react');
 let ReactDOM = require('react-dom');
 let ReactDOMClient = require('react-dom/client');
-let ReactDOMServer = require('react-dom/server');
+let ReactDOMServer = require('react-dom/server'); 
 let Scheduler = require('scheduler');
 let act;
 let useEffect;
@@ -32,8 +32,7 @@     ReactDOMServer = require('react-dom/server');
     Scheduler = require('scheduler');
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
+    assertConsoleErrorDev = require('internal-test-utils').assertConsoleErrorDev;
     useEffect = React.useEffect;
 
     const InternalTestUtils = require('internal-test-utils');
@@ -79,7 +78,7 @@         withoutStack: true,
       },
     );
-  });
+  });  
 
   it('warn if a container is passed to root.render(...)', async () => {
     function App() {
@@ -145,7 +144,7 @@     );
 
     // Does not hydrate by default
-    const container1 = document.createElement('div');
+    const container1 = document.createElement('div'); 
     container1.innerHTML = markup;
     const root1 = ReactDOMClient.createRoot(container1);
     root1.render(
@@ -228,13 +227,12 @@ 
   it('does not warn when creating second root after first one is unmounted', async () => {
     const root = ReactDOMClient.createRoot(container);
-    root.unmount();
+    root.unmount(); 
     await waitForAll([]);
     ReactDOMClient.createRoot(container); // No warning
   });
 
   it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
     ReactDOMClient.createRoot(document.body);
   });
 
@@ -244,8 +242,6 @@     await waitForAll([]);
     container.innerHTML = '';
 
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
     root.render(<div>Hi</div>);
   });
 
@@ -266,7 +262,7 @@ 
   it('should not warn if mounting into non-empty node', async () => {
     container.innerHTML = '<div></div>';
-    const root = ReactDOMClient.createRoot(container);
+    const root = ReactDOMClient.createRoot(container); 
     await act(() => {
       root.render(<div />);
     });
@@ -280,7 +276,7 @@       root.render(<div />);
     });
     const firstElm = container.firstChild;
-    await act(() => {
+    await act(() => {  
       root.render(<div />);
     });
 
@@ -310,7 +306,7 @@ 
     // If we change the key, the component is unmounted and remounted
     await act(() => {
-      root.render(<Component text="green" key="B" />);
+      root.render(<Component text="green" key="B" />); 
     });
     expect(container.firstChild.innerHTML).toBe('green');
     assertLog(['Unmount', 'Mount']);
@@ -332,18 +328,18 @@ 
     await expect(async () => {
       await act(() => {
-        root.unmount();
+        root.unmount(); 
       });
     }).rejects.toThrow('The node to be removed is not a child of this node.');
   });
 
   it('unmount is synchronous', async () => {
-    const root = ReactDOMClient.createRoot(container);
+    const root = ReactDOMClient.createRoot(container);  
     await act(() => {
       root.render('Hi');
     });
     expect(container.textContent).toEqual('Hi');
-
+    
     await act(() => {
       root.unmount();
       // Should have already unmounted
@@ -381,7 +377,7 @@     }
 
     await act(() => {
-      root1.render(<App step={1} />);
+      root1.render(<App step={1} />);  
     });
     expect(container1.textContent).toEqual('Hi');
 
@@ -397,8 +393,7 @@   });
 
   // @gate disableCommentsAsDOMContainers
-  it('errors if container is a comment node', () => {
-    // This is an old feature used by www. Disabled in the open source build.
+  it('errors if container is a comment node', () => {   
     const div = document.createElement('div');
     div.innerHTML = '<!-- react-mount-point-unstable -->';
     const commentNode = div.childNodes[0];
@@ -416,7 +411,7 @@     assertConsoleErrorDev(
       [
         'Must provide initial children as second argument to hydrateRoot. ' +
-          'Example usage: hydrateRoot(domContainer, <App />)',
+          'Example usage: hydrateRoot(domContainer, <App />)',  
       ],
       {withoutStack: true},
     );
@@ -446,7 +441,7 @@     function Component() {
       return <div />;
     }
-
+    
     const root = ReactDOMClient.createRoot(document.createElement('div'));
 
     ReactDOM.flushSync(() => {
@@ -467,14 +462,14 @@     const root = ReactDOMClient.createRoot(document.createElement('div'));
 
     ReactDOM.flushSync(() => {
-      root.render(Symbol('foo'));
+      root.render(Symbol('foo')); 
     });
     assertConsoleErrorDev(
       [
         'Symbols are not valid as a React child.\n' +
           '  root.render(Symbol(foo))',
       ],
-      {withoutStack: true},
+      {withoutStack: true}, 
     );
   });
 });