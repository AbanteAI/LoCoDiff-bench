
index 20684b17d..55419abee 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmps5slfau1_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmpj7p8wqih_actual.txt	
@@ -226,29 +226,6 @@ describe('ReactDOMRoot', () => {
     );
   });
 
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
-  });
-
   it('should render different components in same root', async () => {
     document.body.appendChild(container);
     const root = ReactDOMClient.createRoot(container);
@@ -323,18 +300,20 @@ describe('ReactDOMRoot', () => {
     assertLog([]);
   });
 
-  it('throws if unmounting a root that has had its contents removed', async () => {
+  it('warns if creating a root on the document.body', async () => {
+    // we no longer expect an error for this if float is enabled
+    ReactDOMClient.createRoot(document.body);
+  });
+
+  it('warns if updating a root that has had its contents removed', async () => {
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<div>Hi</div>);
-    });
+    root.render(<div>Hi</div>);
+    await waitForAll([]);
     container.innerHTML = '';
 
-    await expect(async () => {
-      await act(() => {
-        root.unmount();
-      });
-    }).rejects.toThrow('The node to be removed is not a child of this node.');
+    // When either of these flags are on this validation is turned off so we
+    // expect there to be no warnings
+    root.render(<div>Hi</div>);
   });
 
   it('unmount is synchronous', async () => {
@@ -470,11 +449,22 @@ describe('ReactDOMRoot', () => {
       root.render(Symbol('foo'));
     });
     assertConsoleErrorDev(
-      [
-        'Symbols are not valid as a React child.\n' +
-          '  root.render(Symbol(foo))',
-      ],
+      ['Symbols are not valid as a React child.\n  root.render(Symbol(foo))'],
       {withoutStack: true},
     );
   });
+
+  it('throws if unmounting a root that has had its contents removed', async () => {
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(<div>Hi</div>);
+    });
+    container.innerHTML = '';
+
+    await expect(async () => {
+      await act(() => {
+        root.unmount();
+      });
+    }).rejects.toThrow('The node to be removed is not a child of this node.');
+  });
 });
\ No newline at end of file
