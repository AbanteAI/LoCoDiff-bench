
index 20684b17..657572ae 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmprqrl2rju_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmpva9xteir_actual.txt	
@@ -3,10 +3,7 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
-
 'use strict';
 
 let React = require('react');
@@ -48,7 +45,7 @@ describe('ReactDOMRoot', () => {
     expect(container.textContent).toEqual('Hi');
   });
 
-  it('warns if a callback parameter is provided to render', async () => {
+  it('warn if a callback parameter is provided to render', async () => {
     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
     root.render(<div>Hi</div>, callback);
@@ -57,7 +54,6 @@ describe('ReactDOMRoot', () => {
         'does not support the second callback argument. ' +
           'To execute a side effect after rendering, declare it in a component body with useEffect().',
       ],
-      {withoutStack: true},
     );
     await waitForAll([]);
     expect(callback).not.toHaveBeenCalled();
@@ -75,10 +71,9 @@ describe('ReactDOMRoot', () => {
         'You passed a second argument to root.render(...) but it only accepts ' +
           'one argument.',
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
+    await waitForAll([]);
   });
 
   it('warn if a container is passed to root.render(...)', async () => {
@@ -94,17 +89,15 @@ describe('ReactDOMRoot', () => {
           "You don't need to pass it again since you already passed it to create " +
           'the root.',
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
+    await waitForAll([]);
   });
 
-  it('warns if a callback parameter is provided to unmount', async () => {
+  it('warn if a callback parameter is provided to unmount', async () => {
     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
     root.render(<div>Hi</div>);
-    root.unmount(callback);
     assertConsoleErrorDev(
       [
         'does not support a callback argument. ' +
@@ -155,6 +148,7 @@ describe('ReactDOMRoot', () => {
     );
     await waitForAll([]);
 
+    // Accepts `hydrate` option
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
     ReactDOMClient.hydrateRoot(
@@ -164,6 +158,7 @@ describe('ReactDOMRoot', () => {
       </div>,
     );
     await waitForAll([]);
+
     assertConsoleErrorDev([
       "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. " +
         "This won't be patched up. This can happen if a SSR-ed Client Component used:\n" +
@@ -213,130 +208,6 @@ describe('ReactDOMRoot', () => {
     }).toThrow('Target container is not a DOM element.');
   });
 
-  it('warns when creating two roots managing the same container', () => {
-    ReactDOMClient.createRoot(container);
-    ReactDOMClient.createRoot(container);
-    assertConsoleErrorDev(
-      [
-        'You are calling ReactDOMClient.createRoot() on a container that ' +
-          'has already been passed to createRoot() before. Instead, call ' +
-          'root.render() on the existing root instead if you want to update it.',
-      ],
-      {withoutStack: true},
-    );
-  });
-
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
-  });
-
-  it('should render different components in same root', async () => {
-    document.body.appendChild(container);
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(<div />);
-    });
-    expect(container.firstChild.nodeName).toBe('DIV');
-
-    await act(() => {
-      root.render(<span />);
-    });
-    expect(container.firstChild.nodeName).toBe('SPAN');
-  });
-
-  it('should not warn if mounting into non-empty node', async () => {
-    container.innerHTML = '<div></div>';
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<div />);
-    });
-
-    expect(true).toBe(true);
-  });
-
-  it('should reuse markup if rendering to the same target twice', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<div />);
-    });
-    const firstElm = container.firstChild;
-    await act(() => {
-      root.render(<div />);
-    });
-
-    expect(firstElm).toBe(container.firstChild);
-  });
-
-  it('should unmount and remount if the key changes', async () => {
-    function Component({text}) {
-      useEffect(() => {
-        Scheduler.log('Mount');
-
-        return () => {
-          Scheduler.log('Unmount');
-        };
-      }, []);
-
-      return <span>{text}</span>;
-    }
-
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(<Component text="orange" key="A" />);
-    });
-    expect(container.firstChild.innerHTML).toBe('orange');
-    assertLog(['Mount']);
-
-    // If we change the key, the component is unmounted and remounted
-    await act(() => {
-      root.render(<Component text="green" key="B" />);
-    });
-    expect(container.firstChild.innerHTML).toBe('green');
-    assertLog(['Unmount', 'Mount']);
-
-    // But if we don't change the key, the component instance is reused
-    await act(() => {
-      root.render(<Component text="blue" key="B" />);
-    });
-    expect(container.firstChild.innerHTML).toBe('blue');
-    assertLog([]);
-  });
-
-  it('throws if unmounting a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<div>Hi</div>);
-    });
-    container.innerHTML = '';
-
-    await expect(async () => {
-      await act(() => {
-        root.unmount();
-      });
-    }).rejects.toThrow('The node to be removed is not a child of this node.');
-  });
-
   it('unmount is synchronous', async () => {
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -398,7 +269,6 @@ describe('ReactDOMRoot', () => {
 
   // @gate disableCommentsAsDOMContainers
   it('errors if container is a comment node', () => {
-    // This is an old feature used by www. Disabled in the open source build.
     const div = document.createElement('div');
     div.innerHTML = '<!-- react-mount-point-unstable -->';
     const commentNode = div.childNodes[0];
@@ -409,6 +279,9 @@ describe('ReactDOMRoot', () => {
     expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow(
       'Target container is not a DOM element.',
     );
+
+    // Still works in the legacy API
+    ReactDOM.render(<div />, commentNode);
   });
 
   it('warn if no children passed to hydrateRoot', async () => {
@@ -418,7 +291,6 @@ describe('ReactDOMRoot', () => {
         'Must provide initial children as second argument to hydrateRoot. ' +
           'Example usage: hydrateRoot(domContainer, <App />)',
       ],
-      {withoutStack: true},
     );
   });
 
@@ -436,19 +308,15 @@ describe('ReactDOMRoot', () => {
           '  let root = createRoot(domContainer);\n' +
           '  root.render(<App />);',
       ],
-      {
-        withoutStack: true,
-      },
     );
   });
 
-  it('warns when given a function', () => {
+  it('warn if a function is given to render', () => {
     function Component() {
       return <div />;
     }
 
     const root = ReactDOMClient.createRoot(document.createElement('div'));
-
     ReactDOM.flushSync(() => {
       root.render(Component);
     });
@@ -459,13 +327,11 @@ describe('ReactDOMRoot', () => {
           'Or maybe you meant to call this function rather than return it.\n' +
           '  root.render(Component)',
       ],
-      {withoutStack: true},
     );
   });
 
   it('warns when given a symbol', () => {
     const root = ReactDOMClient.createRoot(document.createElement('div'));
-
     ReactDOM.flushSync(() => {
       root.render(Symbol('foo'));
     });
@@ -474,7 +340,6 @@ describe('ReactDOMRoot', () => {
         'Symbols are not valid as a React child.\n' +
           '  root.render(Symbol(foo))',
       ],
-      {withoutStack: true},
     );
   });
 });
\ No newline at end of file
