--- react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual)@@ -3,11 +3,7 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
-
-'use strict';
 
 let React = require('react');
 let ReactDOM = require('react-dom');
@@ -48,6 +44,13 @@     expect(container.textContent).toEqual('Hi');
   });
 
+  it('can be immediately unmounted', async () => {
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.unmount();
+    });
+  });
+
   it('warns if a callback parameter is provided to render', async () => {
     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
@@ -126,11 +129,25 @@     expect(container.textContent).toEqual('');
   });
 
-  it('can be immediately unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.unmount();
-    });
+  it('clears existing children with legacy API', async () => {
+    container.innerHTML = '<div>a</div><div>b</div>';
+    ReactDOM.render(
+      <div>
+        <span>c</span>
+        <span>d</span>
+      </div>,
+      container,
+    );
+    expect(container.textContent).toEqual('cd');
+    ReactDOM.render(
+      <div>
+        <span>d</span>
+        <span>c</span>
+      </div>,
+      container,
+    );
+    await waitForAll([]);
+    expect(container.textContent).toEqual('dc');
   });
 
   it('supports hydration', async () => {
@@ -144,7 +161,6 @@       ),
     );
 
-    // Does not hydrate by default
     const container1 = document.createElement('div');
     container1.innerHTML = markup;
     const root1 = ReactDOMClient.createRoot(container1);
