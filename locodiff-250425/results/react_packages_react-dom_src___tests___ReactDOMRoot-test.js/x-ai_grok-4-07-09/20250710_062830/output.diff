
index 20684b17d..dfd3fb7b3 100644
--- a/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected):tmp/tmp511nn9br_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual):tmp/tmp_g753jx9_actual.txt	
@@ -32,33 +32,35 @@ describe('ReactDOMRoot', () => {
     ReactDOMServer = require('react-dom/server');
     Scheduler = require('scheduler');
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
     useEffect = React.useEffect;
 
     const InternalTestUtils = require('internal-test-utils');
     assertLog = InternalTestUtils.assertLog;
     waitForAll = InternalTestUtils.waitForAll;
+    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
   it('renders children', async () => {
     const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
+    await act(() => root.render(<div>Hi</div>));
     expect(container.textContent).toEqual('Hi');
   });
 
+  it('can be immediately unmounted', async () => {
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.unmount();
+    });
+  });
+
   it('warns if a callback parameter is provided to render', async () => {
     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
     root.render(<div>Hi</div>, callback);
-    assertConsoleErrorDev(
-      [
-        'does not support the second callback argument. ' +
-          'To execute a side effect after rendering, declare it in a component body with useEffect().',
-      ],
-      {withoutStack: true},
-    );
+    assertConsoleErrorDev([
+      'does not support the second callback argument. ' +
+        'To execute a side effect after rendering, declare it in a component body with useEffect().',
+    ], {withoutStack: true});
     await waitForAll([]);
     expect(callback).not.toHaveBeenCalled();
   });
@@ -70,15 +72,12 @@ describe('ReactDOMRoot', () => {
 
     const root = ReactDOMClient.createRoot(container);
     root.render(<App />, {});
-    assertConsoleErrorDev(
-      [
-        'You passed a second argument to root.render(...) but it only accepts ' +
-          'one argument.',
-      ],
-      {
-        withoutStack: true,
-      },
-    );
+    assertConsoleErrorDev([
+      'You passed a second argument to root.render(...) but it only accepts ' +
+        'one argument.',
+    ], {
+      withoutStack: true,
+    });
   });
 
   it('warn if a container is passed to root.render(...)', async () => {
@@ -88,16 +87,13 @@ describe('ReactDOMRoot', () => {
 
     const root = ReactDOMClient.createRoot(container);
     root.render(<App />, container);
-    assertConsoleErrorDev(
-      [
-        'You passed a container to the second argument of root.render(...). ' +
-          "You don't need to pass it again since you already passed it to create " +
-          'the root.',
-      ],
-      {
-        withoutStack: true,
-      },
-    );
+    assertConsoleErrorDev([
+      'You passed a container to the second argument of root.render(...). ' +
+        "You don't need to pass it again since you already passed it to create " +
+        'the root.',
+    ], {
+      withoutStack: true,
+    });
   });
 
   it('warns if a callback parameter is provided to unmount', async () => {
@@ -105,34 +101,22 @@ describe('ReactDOMRoot', () => {
     const root = ReactDOMClient.createRoot(container);
     root.render(<div>Hi</div>);
     root.unmount(callback);
-    assertConsoleErrorDev(
-      [
-        'does not support a callback argument. ' +
-          'To execute a side effect after rendering, declare it in a component body with useEffect().',
-      ],
-      {withoutStack: true},
-    );
+    assertConsoleErrorDev([
+      'does not support a callback argument. ' +
+        'To execute a side effect after rendering, declare it in a component body with useEffect().',
+    ], {withoutStack: true});
     await waitForAll([]);
     expect(callback).not.toHaveBeenCalled();
   });
 
   it('unmounts children', async () => {
     const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
+    await act(() => root.render(<div>Hi</div>));
     expect(container.textContent).toEqual('Hi');
-    root.unmount();
-    await waitForAll([]);
+    await act(() => root.unmount());
     expect(container.textContent).toEqual('');
   });
 
-  it('can be immediately unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.unmount();
-    });
-  });
-
   it('supports hydration', async () => {
     const markup = await new Promise(resolve =>
       resolve(
@@ -148,21 +132,11 @@ describe('ReactDOMRoot', () => {
     const container1 = document.createElement('div');
     container1.innerHTML = markup;
     const root1 = ReactDOMClient.createRoot(container1);
-    root1.render(
-      <div>
-        <span />
-      </div>,
-    );
-    await waitForAll([]);
+    await act(() => root1.render(<div><span /></div>));
 
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
-    ReactDOMClient.hydrateRoot(
-      container2,
-      <div>
-        <span />
-      </div>,
-    );
+    ReactDOMClient.hydrateRoot(container2, <div><span /></div>);
     await waitForAll([]);
     assertConsoleErrorDev([
       "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. " +
@@ -189,64 +163,45 @@ describe('ReactDOMRoot', () => {
   it('clears existing children', async () => {
     container.innerHTML = '<div>a</div><div>b</div>';
     const root = ReactDOMClient.createRoot(container);
-    root.render(
-      <div>
-        <span>c</span>
-        <span>d</span>
-      </div>,
-    );
-    await waitForAll([]);
+    await act(() => root.render(<div><span>c</span><span>d</span></div>));
     expect(container.textContent).toEqual('cd');
-    root.render(
-      <div>
-        <span>d</span>
-        <span>c</span>
-      </div>,
-    );
-    await waitForAll([]);
+    await act(() => root.render(<div><span>d</span><span>c</span></div>));
     expect(container.textContent).toEqual('dc');
   });
 
   it('throws a good message on invalid containers', () => {
-    expect(() => {
-      ReactDOMClient.createRoot(<div>Hi</div>);
-    }).toThrow('Target container is not a DOM element.');
+    expect(() => ReactDOMClient.createRoot(<div>Hi</div>)).toThrow('Target container is not a DOM element.');
   });
 
   it('warns when creating two roots managing the same container', () => {
     ReactDOMClient.createRoot(container);
     ReactDOMClient.createRoot(container);
-    assertConsoleErrorDev(
-      [
-        'You are calling ReactDOMClient.createRoot() on a container that ' +
-          'has already been passed to createRoot() before. Instead, call ' +
-          'root.render() on the existing root instead if you want to update it.',
-      ],
-      {withoutStack: true},
-    );
+    assertConsoleErrorDev([
+      'You are calling ReactDOMClient.createRoot() on a container that ' +
+        'has already been passed to createRoot() before. Instead, call ' +
+        'root.render() on the existing root instead if you want to update it.',
+    ], {withoutStack: true});
   });
 
-  it('does not warn when creating second root after first one is unmounted', async () => {
+  it('does not warn when creating second root after first one is unmounted', () => {
     const root = ReactDOMClient.createRoot(container);
     root.unmount();
     await waitForAll([]);
     ReactDOMClient.createRoot(container); // No warning
   });
 
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
   it('warns if updating a root that has had its contents removed', async () => {
     const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
+    await act(() => root.render(<div>Hi</div>));
     container.innerHTML = '';
 
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
+    expect(() => root.render(<div>Hi</div>)).toErrorDev(
+      'It looks like the React-rendered content of the ' +
+        'root container was removed without using React. This is not ' +
+        'supported and will cause errors. Instead, call ' +
+        "root.unmount() to empty a root's container.",
+      {withoutStack: true},
+    );
   });
 
   it('should render different components in same root', async () => {
@@ -337,89 +292,22 @@ describe('ReactDOMRoot', () => {
     }).rejects.toThrow('The node to be removed is not a child of this node.');
   });
 
-  it('unmount is synchronous', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render('Hi');
-    });
-    expect(container.textContent).toEqual('Hi');
-
-    await act(() => {
-      root.unmount();
-      // Should have already unmounted
-      expect(container.textContent).toEqual('');
-    });
-  });
-
-  it('throws if an unmounted root is updated', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render('Hi');
-    });
-    expect(container.textContent).toEqual('Hi');
-
-    root.unmount();
-
-    expect(() => root.render("I'm back")).toThrow(
-      'Cannot update an unmounted root.',
-    );
-  });
-
-  it('warns if root is unmounted inside an effect', async () => {
-    const container1 = document.createElement('div');
-    const root1 = ReactDOMClient.createRoot(container1);
-    const container2 = document.createElement('div');
-    const root2 = ReactDOMClient.createRoot(container2);
-
-    function App({step}) {
-      useEffect(() => {
-        if (step === 2) {
-          root2.unmount();
-        }
-      }, [step]);
-      return 'Hi';
-    }
-
-    await act(() => {
-      root1.render(<App step={1} />);
-    });
-    expect(container1.textContent).toEqual('Hi');
-
-    ReactDOM.flushSync(() => {
-      root1.render(<App step={2} />);
-    });
-    assertConsoleErrorDev([
-      'Attempted to synchronously unmount a root while React was already rendering. ' +
-        'React cannot finish unmounting the root until the current render has completed, ' +
-        'which may lead to a race condition.\n' +
-        '    in App (at **)',
-    ]);
-  });
-
   // @gate disableCommentsAsDOMContainers
   it('errors if container is a comment node', () => {
-    // This is an old feature used by www. Disabled in the open source build.
     const div = document.createElement('div');
     div.innerHTML = '<!-- react-mount-point-unstable -->';
     const commentNode = div.childNodes[0];
 
-    expect(() => ReactDOMClient.createRoot(commentNode)).toThrow(
-      'Target container is not a DOM element.',
-    );
-    expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow(
-      'Target container is not a DOM element.',
-    );
+    expect(() => ReactDOMClient.createRoot(commentNode)).toThrow('Target container is not a DOM element.');
+    expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow('Target container is not a DOM element.');
   });
 
   it('warn if no children passed to hydrateRoot', async () => {
     ReactDOMClient.hydrateRoot(container);
-    assertConsoleErrorDev(
-      [
-        'Must provide initial children as second argument to hydrateRoot. ' +
-          'Example usage: hydrateRoot(domContainer, <App />)',
-      ],
-      {withoutStack: true},
-    );
+    assertConsoleErrorDev([
+      'Must provide initial children as second argument to hydrateRoot. ' +
+        'Example usage: hydrateRoot(domContainer, <App />)',
+    ], {withoutStack: true});
   });
 
   it('warn if JSX passed to createRoot', async () => {
@@ -428,18 +316,15 @@ describe('ReactDOMRoot', () => {
     }
 
     ReactDOMClient.createRoot(container, <App />);
-    assertConsoleErrorDev(
-      [
-        'You passed a JSX element to createRoot. You probably meant to call root.render instead. ' +
-          'Example usage:\n' +
-          '\n' +
-          '  let root = createRoot(domContainer);\n' +
-          '  root.render(<App />);',
-      ],
-      {
-        withoutStack: true,
-      },
-    );
+    assertConsoleErrorDev([
+      'You passed a JSX element to createRoot. You probably meant to call root.render instead. ' +
+        'Example usage:\n' +
+        '\n' +
+        '  let root = createRoot(domContainer);\n' +
+        '  root.render(<App />);',
+    ], {
+      withoutStack: true,
+    });
   });
 
   it('warns when given a function', () => {
@@ -449,32 +334,22 @@ describe('ReactDOMRoot', () => {
 
     const root = ReactDOMClient.createRoot(document.createElement('div'));
 
-    ReactDOM.flushSync(() => {
-      root.render(Component);
-    });
-    assertConsoleErrorDev(
-      [
-        'Functions are not valid as a React child. ' +
-          'This may happen if you return Component instead of <Component /> from render. ' +
-          'Or maybe you meant to call this function rather than return it.\n' +
-          '  root.render(Component)',
-      ],
-      {withoutStack: true},
-    );
+    ReactDOM.flushSync(() => root.render(Component));
+    assertConsoleErrorDev([
+      'Functions are not valid as a React child. ' +
+        'This may happen if you return Component instead of <Component /> from render. ' +
+        'Or maybe you meant to call this function rather than return it.\n' +
+        '  root.render(Component)',
+    ], {withoutStack: true});
   });
 
   it('warns when given a symbol', () => {
     const root = ReactDOMClient.createRoot(document.createElement('div'));
 
-    ReactDOM.flushSync(() => {
-      root.render(Symbol('foo'));
-    });
-    assertConsoleErrorDev(
-      [
-        'Symbols are not valid as a React child.\n' +
-          '  root.render(Symbol(foo))',
-      ],
-      {withoutStack: true},
-    );
+    ReactDOM.flushSync(() => root.render(Symbol('foo')));
+    assertConsoleErrorDev([
+      'Symbols are not valid as a React child.\n' +
+        '  root.render(Symbol(foo))',
+    ], {withoutStack: true});
   });
 });
\ No newline at end of file
