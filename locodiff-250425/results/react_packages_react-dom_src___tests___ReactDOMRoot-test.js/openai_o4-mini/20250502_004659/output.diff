--- react_packages_react-dom_src___tests___ReactDOMRoot-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMRoot-test.js_extracted.txt (actual)@@ -6,7 +6,6 @@  *
  * @emails react-core
  */
-
 'use strict';
 
 let React = require('react');
@@ -32,13 +31,11 @@     ReactDOMServer = require('react-dom/server');
     Scheduler = require('scheduler');
     act = require('internal-test-utils').act;
-    assertConsoleErrorDev =
-      require('internal-test-utils').assertConsoleErrorDev;
     useEffect = React.useEffect;
-
     const InternalTestUtils = require('internal-test-utils');
     assertLog = InternalTestUtils.assertLog;
     waitForAll = InternalTestUtils.waitForAll;
+    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
   it('renders children', async () => {
@@ -67,7 +64,6 @@     function App() {
       return 'Child';
     }
-
     const root = ReactDOMClient.createRoot(container);
     root.render(<App />, {});
     assertConsoleErrorDev(
@@ -75,9 +71,7 @@         'You passed a second argument to root.render(...) but it only accepts ' +
           'one argument.',
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
   });
 
@@ -85,7 +79,6 @@     function App() {
       return 'Child';
     }
-
     const root = ReactDOMClient.createRoot(container);
     root.render(<App />, container);
     assertConsoleErrorDev(
@@ -94,9 +87,7 @@           "You don't need to pass it again since you already passed it to create " +
           'the root.',
       ],
-      {
-        withoutStack: true,
-      },
+      {withoutStack: true},
     );
   });
 
@@ -104,7 +95,6 @@     const callback = jest.fn();
     const root = ReactDOMClient.createRoot(container);
     root.render(<div>Hi</div>);
-    root.unmount(callback);
     assertConsoleErrorDev(
       [
         'does not support a callback argument. ' +
@@ -155,6 +145,7 @@     );
     await waitForAll([]);
 
+    // Accepts `hydrate` option
     const container2 = document.createElement('div');
     container2.innerHTML = markup;
     ReactDOMClient.hydrateRoot(
@@ -213,42 +204,6 @@     }).toThrow('Target container is not a DOM element.');
   });
 
-  it('warns when creating two roots managing the same container', () => {
-    ReactDOMClient.createRoot(container);
-    ReactDOMClient.createRoot(container);
-    assertConsoleErrorDev(
-      [
-        'You are calling ReactDOMClient.createRoot() on a container that ' +
-          'has already been passed to createRoot() before. Instead, call ' +
-          'root.render() on the existing root instead if you want to update it.',
-      ],
-      {withoutStack: true},
-    );
-  });
-
-  it('does not warn when creating second root after first one is unmounted', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.unmount();
-    await waitForAll([]);
-    ReactDOMClient.createRoot(container); // No warning
-  });
-
-  it('warns if creating a root on the document.body', async () => {
-    // we no longer expect an error for this if float is enabled
-    ReactDOMClient.createRoot(document.body);
-  });
-
-  it('warns if updating a root that has had its contents removed', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    root.render(<div>Hi</div>);
-    await waitForAll([]);
-    container.innerHTML = '';
-
-    // When either of these flags are on this validation is turned off so we
-    // expect there to be no warnings
-    root.render(<div>Hi</div>);
-  });
-
   it('should render different components in same root', async () => {
     document.body.appendChild(container);
     const root = ReactDOMClient.createRoot(container);
@@ -349,20 +304,6 @@       // Should have already unmounted
       expect(container.textContent).toEqual('');
     });
-  });
-
-  it('throws if an unmounted root is updated', async () => {
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render('Hi');
-    });
-    expect(container.textContent).toEqual('Hi');
-
-    root.unmount();
-
-    expect(() => root.render("I'm back")).toThrow(
-      'Cannot update an unmounted root.',
-    );
   });
 
   it('warns if root is unmounted inside an effect', async () => {
@@ -409,6 +350,9 @@     expect(() => ReactDOMClient.hydrateRoot(commentNode)).toThrow(
       'Target container is not a DOM element.',
     );
+
+    // Still works in the legacy API
+    ReactDOM.render(<div />, commentNode);
   });
 
   it('warn if no children passed to hydrateRoot', async () => {
@@ -418,7 +362,7 @@         'Must provide initial children as second argument to hydrateRoot. ' +
           'Example usage: hydrateRoot(domContainer, <App />)',
       ],
-      {withoutStack: true},
+      {withoutStack:true},
     );
   });
 
@@ -436,45 +380,37 @@           '  let root = createRoot(domContainer);\n' +
           '  root.render(<App />);',
       ],
-      {
-        withoutStack: true,
-      },
-    );
-  });
-
-  it('warns when given a function', () => {
-    function Component() {
-      return <div />;
-    }
-
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-
-    ReactDOM.flushSync(() => {
-      root.render(Component);
-    });
-    assertConsoleErrorDev(
-      [
-        'Functions are not valid as a React child. ' +
-          'This may happen if you return Component instead of <Component /> from render. ' +
-          'Or maybe you meant to call this function rather than return it.\n' +
-          '  root.render(Component)',
-      ],
-      {withoutStack: true},
-    );
-  });
-
-  it('warns when given a symbol', () => {
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-
-    ReactDOM.flushSync(() => {
-      root.render(Symbol('foo'));
-    });
-    assertConsoleErrorDev(
-      [
-        'Symbols are not valid as a React child.\n' +
-          '  root.render(Symbol(foo))',
-      ],
-      {withoutStack: true},
+      {withoutStack:true},
+    );
+  });
+
+  it('warn if a container is passed to root.render(...)', async () => {
+    function App() {
+      return 'Child';
+    }
+
+    const root = ReactDOMClient.createRoot(container);
+    root.render(<App />, {});
+    assertConsoleErrorDev(
+      [
+        'You passed a second argument to root.render(...) but it only accepts one argument.',
+      ],
+      {withoutStack:true},
+    );
+  });
+
+  it('warn if a container is passed to root.render(...)', async () => {
+    function App() {
+      return 'Child';
+    }
+
+    const root = ReactDOMClient.createRoot(container);
+    root.render(<App />, container);
+    assertConsoleErrorDev(
+      [
+        "You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.",
+      ],
+      {withoutStack:true},
     );
   });
 });