
index df5de503..a63ca783 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpbhj36g2l_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_extracted.txt (actual):tmp/tmp_uqduwqw_actual.txt	
@@ -14,9 +14,8 @@ use memory::mmap_ops::{self, create_and_ensure_length};
 use memory::mmap_type::{MmapBitSlice, MmapSlice};
 use serde::{Deserialize, Serialize};
 
-use super::Encodable;
 use super::mutable_numeric_index::InMemoryNumericIndex;
-use crate::common::Flusher;
+use super::Encodable;
 use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::operation_error::OperationResult;
 use crate::index::field_index::histogram::{Histogram, Numericable, Point};
@@ -29,7 +28,6 @@ const CONFIG_PATH: &str = "mmap_field_index_config.json";
 pub struct MmapNumericIndex<T: Encodable + Numericable + Default + MmapValue + 'static> {
     path: PathBuf,
     deleted: MmapBitSliceBufferedUpdateWrapper,
-    // sorted pairs (id + value), sorted by value (by id if values are equal)
     pairs: MmapSlice<Point<T>>,
     histogram: Histogram<T>,
     deleted_count: usize,
@@ -134,9 +132,7 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
             let deleted_flags_count = in_memory_index.point_to_values.len();
             let deleted_file = create_and_ensure_length(
                 &deleted_path,
-                BITS_IN_BYTE
-                    * BITS_IN_BYTE
-                    * deleted_flags_count.div_ceil(BITS_IN_BYTE * BITS_IN_BYTE),
+                (deleted_flags_count + 7) / 8,
             )?;
             let mut deleted_mmap = unsafe { MmapMut::map_mut(&deleted_file)? };
             deleted_mmap.fill(0);
@@ -158,18 +154,17 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
 
         let histogram = Histogram::<T>::load(path)?;
         let config: MmapNumericIndexConfig = read_json(&config_path)?;
-        let deleted = mmap_ops::open_write_mmap(&deleted_path, AdviceSetting::Global, false)?;
+        let deleted = mmap_ops::open_write_mmap(&deleted_path, AdviceSetting::Global, !is_on_disk)?;
         let deleted = MmapBitSlice::from(deleted, 0);
         let deleted_count = deleted.count_ones();
-        let do_populate = !is_on_disk;
         let map = unsafe {
             MmapSlice::try_from(mmap_ops::open_write_mmap(
                 &pairs_path,
                 AdviceSetting::Global,
-                do_populate,
+                !is_on_disk,
             )?)?
         };
-        let point_to_values = MmapPointToValues::open(path, do_populate)?;
+        let point_to_values = MmapPointToValues::open(path, !is_on_disk)?;
 
         Ok(Self {
             pairs: map,
@@ -247,8 +242,6 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
         }
     }
 
-    /// Returns the number of key-value pairs in the index.
-    /// Note that is doesn't count deleted pairs.
     pub(super) fn total_unique_values_count(&self) -> usize {
         self.pairs.len()
     }
@@ -263,16 +256,16 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
 
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { idx, .. }| idx)
-            .measure_hw_with_condition_cell(hw_counter, size_of::<Point<T>>(), |i| {
+            .measure_hw_with_condition_cell(hw_counter, std::mem::size_of::<Point<T>>(), |i| {
                 i.payload_index_io_read_counter()
             })
     }
 
-    pub(super) fn orderable_values_range(
-        &self,
+    pub(super) fn orderable_values_range<'a>(
+        &'a self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
+    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + 'a {
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { val, idx }| (val, idx))
     }
@@ -306,7 +299,6 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
         iterator.end_index - iterator.start_index
     }
 
-    // get iterator
     fn values_range_iterator(
         &self,
         start_bound: Bound<Point<T>>,
@@ -361,15 +353,12 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
         self.is_on_disk
     }
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
         self.pairs.populate()?;
         self.point_to_values.populate();
         Ok(())
     }
 
-    /// Drop disk cache.
     pub fn clear_cache(&self) -> OperationResult<()> {
         let pairs_path = self.path.join(PAIRS_PATH);
         let deleted_path = self.path.join(DELETED_PATH);
