
index df5de503..8be8c915 100644
--- a/qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_expectedoutput.txt (expected):tmp/tmpeze7qshn_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_extracted.txt (actual):tmp/tmpgoymmy8i_actual.txt	
@@ -186,6 +186,7 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
     pub fn clear(self) -> OperationResult<()> {
         let files = self.files();
         let Self { path, .. } = self;
+        drop(self);
         for file in files {
             std::fs::remove_file(file)?;
         }
@@ -208,6 +209,7 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
         self.deleted.flusher()
     }
 
+    /// Should only be used for check_values_any
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
@@ -263,7 +265,7 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
 
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { idx, .. }| idx)
-            .measure_hw_with_condition_cell(hw_counter, size_of::<Point<T>>(), |i| {
+            .measure_hw_with_condition_cell(hw_counter, std::mem::size_of::<Point<T>>(), |i| {
                 i.payload_index_io_read_counter()
             })
     }
@@ -364,7 +366,9 @@ impl<T: Encodable + Numericable + Default + MmapValue> MmapNumericIndex<T> {
     /// Populate all pages in the mmap.
     /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
+        // Populate pairs. MmapSlice::populate() returns Result
         self.pairs.populate()?;
+        // Populate point_to_values. MmapPointToValues::populate() does not return Result
         self.point_to_values.populate();
         Ok(())
     }
