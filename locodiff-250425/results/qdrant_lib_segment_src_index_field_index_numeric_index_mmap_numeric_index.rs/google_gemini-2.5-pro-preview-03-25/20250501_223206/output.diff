--- qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_extracted.txt (actual)@@ -16,9 +16,9 @@ 
 use super::Encodable;
 use super::mutable_numeric_index::InMemoryNumericIndex;
-use crate::common::Flusher;
 use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::index::field_index::histogram::{Histogram, Numericable, Point};
 use crate::index::field_index::mmap_point_to_values::{MmapPointToValues, MmapValue};
 
@@ -253,17 +253,17 @@         self.pairs.len()
     }
 
-    pub(super) fn values_range<'a>(
-        &'a self,
+    pub(super) fn values_range(
+        &self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> impl Iterator<Item = PointOffsetType> + 'a {
+        hw_counter: &HardwareCounterCell,
+    ) -> impl Iterator<Item = PointOffsetType> + '_ {
         let hw_counter = self.make_conditioned_counter(hw_counter);
 
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { idx, .. }| idx)
-            .measure_hw_with_condition_cell(hw_counter, size_of::<Point<T>>(), |i| {
+            .measure_hw_with_condition_cell(hw_counter, std::mem::size_of::<Point<T>>(), |i| {
                 i.payload_index_io_read_counter()
             })
     }
