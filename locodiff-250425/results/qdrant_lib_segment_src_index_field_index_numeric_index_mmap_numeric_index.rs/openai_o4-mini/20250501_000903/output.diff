--- qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_extracted.txt (actual)@@ -208,6 +208,31 @@         self.deleted.flusher()
     }
 
+    pub fn is_on_disk(&self) -> bool {
+        self.is_on_disk
+    }
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    pub fn populate(&self) -> OperationResult<()> {
+        self.pairs.populate()?;
+        self.point_to_values.populate();
+        Ok(())
+    }
+
+    /// Drop disk cache.
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        let pairs_path = self.path.join(PAIRS_PATH);
+        let deleted_path = self.path.join(DELETED_PATH);
+
+        clear_disk_cache(&pairs_path)?;
+        clear_disk_cache(&deleted_path)?;
+
+        self.point_to_values.clear_cache()?;
+
+        Ok(())
+    }
+
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
@@ -247,8 +272,6 @@         }
     }
 
-    /// Returns the number of key-value pairs in the index.
-    /// Note that is doesn't count deleted pairs.
     pub(super) fn total_unique_values_count(&self) -> usize {
         self.pairs.len()
     }
@@ -268,13 +291,19 @@             })
     }
 
-    pub(super) fn orderable_values_range(
-        &self,
+    pub(super) fn orderable_values_range<'a>(
+        &'a self,
         start_bound: Bound<Point<T>>,
         end_bound: Bound<Point<T>>,
-    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + '_ {
+        hw_counter: &'a HardwareCounterCell,
+    ) -> impl DoubleEndedIterator<Item = (T, PointOffsetType)> + 'a {
+        let hw_counter = self.make_conditioned_counter(hw_counter);
+
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { val, idx }| (val, idx))
+            .measure_hw_with_condition_cell(hw_counter, size_of::<Point<T>>(), |i| {
+                i.payload_index_io_read_counter()
+            })
     }
 
     pub fn remove_point(&mut self, idx: PointOffsetType) {
@@ -356,29 +385,4 @@     ) -> ConditionedCounter<'a> {
         ConditionedCounter::new(self.is_on_disk, hw_counter)
     }
-
-    pub fn is_on_disk(&self) -> bool {
-        self.is_on_disk
-    }
-
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        self.pairs.populate()?;
-        self.point_to_values.populate();
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        let pairs_path = self.path.join(PAIRS_PATH);
-        let deleted_path = self.path.join(DELETED_PATH);
-
-        clear_disk_cache(&pairs_path)?;
-        clear_disk_cache(&deleted_path)?;
-
-        self.point_to_values.clear_cache()?;
-
-        Ok(())
-    }
 }