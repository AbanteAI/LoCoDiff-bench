--- qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_numeric_index_mmap_numeric_index.rs_extracted.txt (actual)@@ -14,11 +14,11 @@ use memory::mmap_type::{MmapBitSlice, MmapSlice};
 use serde::{Deserialize, Serialize};
 
+use super::mutable_numeric_index::InMemoryNumericIndex;
 use super::Encodable;
-use super::mutable_numeric_index::InMemoryNumericIndex;
-use crate::common::Flusher;
 use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::index::field_index::histogram::{Histogram, Numericable, Point};
 use crate::index::field_index::mmap_point_to_values::{MmapPointToValues, MmapValue};
 
@@ -141,7 +141,7 @@             let mut deleted_mmap = unsafe { MmapMut::map_mut(&deleted_file)? };
             deleted_mmap.fill(0);
             let mut deleted_bitflags = MmapBitSlice::from(deleted_mmap, 0);
-            for (idx, values) in in_memory_index.point_to_values.iter().enumerate() {
+            for (idx, values) range in_memory_index.point_to_values.iter().enumerate() {
                 if values.is_empty() {
                     deleted_bitflags.set(idx, true);
                 }
@@ -263,7 +263,7 @@ 
         self.values_range_iterator(start_bound, end_bound)
             .map(|Point { idx, .. }| idx)
-            .measure_hw_with_condition_cell(hw_counter, size_of::<Point<T>>(), |i| {
+            .measure_hw_with_condition_cell(hw_counter, std::mem::size_of::<Point<T>>(), |i| {
                 i.payload_index_io_read_counter()
             })
     }
