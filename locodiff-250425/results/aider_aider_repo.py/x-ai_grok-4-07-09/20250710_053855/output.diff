
index 31db1edfc..26393e856 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmp1yl_sg9y_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmp8embl6kn_actual.txt	
@@ -18,7 +18,6 @@ except ImportError:
 import pathspec
 
 from aider import prompts, utils
-
 from .dump import dump  # noqa: F401
 
 ANY_GIT_ERROR += [
@@ -225,7 +224,6 @@ class GitRepo:
 
     def get_diffs(self, fnames=None):
         # We always want diffs of index and working dir
-
         current_branch_has_commits = False
         try:
             active_branch = self.repo.active_branch
@@ -273,6 +271,8 @@ class GitRepo:
 
         return diffs
 
+    tree_files = {}
+
     def get_tracked_files(self):
         if not self.repo:
             return []
@@ -294,19 +294,13 @@ class GitRepo:
             else:
                 try:
                     iterator = commit.tree.traverse()
-                    blob = None  # Initialize blob
                     while True:
                         try:
                             blob = next(iterator)
                             if blob.type == "blob":  # blob is a file
                                 files.add(blob.path)
                         except IndexError:
-                            # Handle potential index error during tree traversal
-                            # without relying on potentially unassigned 'blob'
-                            self.io.tool_warning(
-                                "GitRepo: Index error encountered while reading git tree object."
-                                " Skipping."
-                            )
+                            self.io.tool_warning("GitRepo: Index error encountered while reading git tree object. Skipping.")
                             continue
                         except StopIteration:
                             break
@@ -330,6 +324,8 @@ class GitRepo:
 
         return res
 
+    normalized_path = {}
+
     def normalize_path(self, path):
         orig_path = path
         res = self.normalized_path.get(orig_path)
@@ -405,6 +401,16 @@ class GitRepo:
         except ValueError:
             return True
 
+        mtime = self.aider_ignore_file.stat().st_mtime
+        if mtime != self.aider_ignore_ts:
+            self.aider_ignore_ts = mtime
+            self.ignore_file_cache = {}
+            lines = self.aider_ignore_file.read_text().splitlines()
+            self.aider_ignore_spec = pathspec.PathSpec.from_lines(
+                pathspec.patterns.GitWildMatchPattern,
+                lines,
+            )
+
         return self.aider_ignore_spec.match_file(fname)
 
     def path_in_repo(self, path):
@@ -420,23 +426,6 @@ class GitRepo:
         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
-    def get_dirty_files(self):
-        """
-        Returns a list of all files which are dirty (not committed), either staged or in the working
-        directory.
-        """
-        dirty_files = set()
-
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
-
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
-
-        return list(dirty_files)
-
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
             return True
