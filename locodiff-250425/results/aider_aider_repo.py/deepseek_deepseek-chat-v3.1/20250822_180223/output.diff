
index 31db1edfc..0dc242c68 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmpsmwcdy7e_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmp9alcuw33_actual.txt	
@@ -278,57 +278,60 @@ class GitRepo:
             return []
 
         try:
-            commit = self.repo.head.commit
-        except ValueError:
-            commit = None
-        except ANY_GIT_ERROR as err:
-            self.git_repo_error = err
-            self.io.tool_error(f"Unable to list files in git repo: {err}")
-            self.io.tool_output("Is your git repo corrupted?")
-            return []
-
-        files = set()
-        if commit:
-            if commit in self.tree_files:
-                files = self.tree_files[commit]
-            else:
-                try:
-                    iterator = commit.tree.traverse()
-                    blob = None  # Initialize blob
-                    while True:
-                        try:
-                            blob = next(iterator)
-                            if blob.type == "blob":  # blob is a file
-                                files.add(blob.path)
-                        except IndexError:
-                            # Handle potential index error during tree traversal
-                            # without relying on potentially unassigned 'blob'
-                            self.io.tool_warning(
-                                "GitRepo: Index error encountered while reading git tree object."
-                                " Skipping."
-                            )
-                            continue
-                        except StopIteration:
-                            break
-                except ANY_GIT_ERROR as err:
-                    self.git_repo_error = err
-                    self.io.tool_error(f"Unable to list files in git repo: {err}")
-                    self.io.tool_output("Is your git repo corrupted?")
-                    return []
-                files = set(self.normalize_path(path) for path in files)
-                self.tree_files[commit] = set(files)
-
-        # Add staged files
-        index = self.repo.index
-        try:
-            staged_files = [path for path, _ in index.entries.keys()]
-            files.update(self.normalize_path(path) for path in staged_files)
-        except ANY_GIT_ERROR as err:
-            self.io.tool_error(f"Unable to read staged files: {err}")
+            try:
+                commit = self.repo.head.commit
+            except ValueError:
+                commit = None
+            except ANY_GIT_ERROR as err:
+                self.git_repo_error = err
+                self.io.tool_error(f"Unable to list files in git repo: {err}")
+                self.io.tool_output("Is your git repo corrupted?")
+                return []
+
+            files = set()
+            if commit:
+                if commit in self.tree_files:
+                    files = self.tree_files[commit]
+                else:
+                    try:
+                        iterator = commit.tree.traverse()
+                        blob = None  # Initialize blob
+                        while True:
+                            try:
+                                blob = next(iterator)
+                                if blob.type == "blob":  # blob is a file
+                                    files.add(blob.path)
+                            except IndexError:
+                                # Handle potential index error during tree traversal
+                                # without relying on potentially unassigned 'blob'
+                                self.io.tool_warning(
+                                    "GitRepo: Index error encountered while reading git tree object."
+                                    " Skipping."
+                                )
+                                continue
+                            except StopIteration:
+                                break
+                    except ANY_GIT_ERROR as err:
+                        self.git_repo_error = err
+                        self.io.tool_error(f"Unable to list files in git repo: {err}")
+                        self.io.tool_output("Is your git repo corrupted?")
+                        return []
+                    files = set(self.normalize_path(path) for path in files)
+                    self.tree_files[commit] = set(files)
+
+            # Add staged files
+            index = self.repo.index
+            try:
+                staged_files = [path for path, _ in index.entries.keys()]
+                files.update(self.normalize_path(path) for path in staged_files)
+            except ANY_GIT_ERROR as err:
+                self.io.tool_error(f"Unable to read staged files: {err}")
 
-        res = [fname for fname in files if not self.ignored_file(fname)]
+            res = [fname for fname in files if not self.ignored_file(fname)]
 
-        return res
+            return res
+        except Exception as e:
+            raise UnableToCountRepoFiles(f"Error getting tracked files: {str(e)}")
 
     def normalize_path(self, path):
         orig_path = path
@@ -420,6 +423,12 @@ class GitRepo:
         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
+    def is_dirty(self, path=None):
+        if path and not self.path_in_repo(path):
+            return True
+
+        return self.repo.is_dirty(path=path)
+
     def get_dirty_files(self):
         """
         Returns a list of all files which are dirty (not committed), either staged or in the working
@@ -437,12 +446,6 @@ class GitRepo:
 
         return list(dirty_files)
 
-    def is_dirty(self, path=None):
-        if path and not self.path_in_repo(path):
-            return True
-
-        return self.repo.is_dirty(path=path)
-
     def get_head_commit(self):
         try:
             return self.repo.head.commit
