
index 31db1edf..6bdb2aa6 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmpcnc93lx0_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmpi5vvm83u_actual.txt	
@@ -43,6 +43,8 @@ class GitRepo:
     subtree_only = False
     ignore_file_cache = {}
     git_repo_error = None
+    normalized_path = {}
+    tree_files = {}
 
     def __init__(
         self,
@@ -62,9 +64,6 @@ class GitRepo:
         self.io = io
         self.models = models
 
-        self.normalized_path = {}
-        self.tree_files = {}
-
         self.attribute_author = attribute_author
         self.attribute_committer = attribute_committer
         self.attribute_commit_message_author = attribute_commit_message_author
@@ -264,9 +263,9 @@ class GitRepo:
     def diff_commits(self, pretty, from_commit, to_commit):
         args = []
         if pretty:
-            args += ["--color"]
+            args = ["--color"]
         else:
-            args += ["--color=never"]
+            args = ["--color=never"]
 
         args += [from_commit, to_commit]
         diffs = self.repo.git.diff(*args)
@@ -278,14 +277,15 @@ class GitRepo:
             return []
 
         try:
-            commit = self.repo.head.commit
-        except ValueError:
-            commit = None
-        except ANY_GIT_ERROR as err:
-            self.git_repo_error = err
-            self.io.tool_error(f"Unable to list files in git repo: {err}")
-            self.io.tool_output("Is your git repo corrupted?")
-            return []
+            try:
+                commit = self.repo.head.commit
+            except ValueError:
+                commit = None
+            except ANY_GIT_ERROR as err:
+                self.git_repo_error = err
+                self.io.tool_error(f"Unable to list files in git repo: {err}")
+                self.io.tool_output("Is your git repo corrupted?")
+                return []
 
         files = set()
         if commit:
@@ -420,23 +420,6 @@ class GitRepo:
         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
-    def get_dirty_files(self):
-        """
-        Returns a list of all files which are dirty (not committed), either staged or in the working
-        directory.
-        """
-        dirty_files = set()
-
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
-
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
-
-        return list(dirty_files)
-
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
             return True
