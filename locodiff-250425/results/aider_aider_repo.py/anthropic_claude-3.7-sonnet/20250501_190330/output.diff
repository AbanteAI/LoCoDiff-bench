--- aider_aider_repo.py_expectedoutput.txt (expected)+++ aider_aider_repo.py_extracted.txt (actual)@@ -133,8 +133,8 @@             commit_message = "(no commit message provided)"
 
         full_commit_message = commit_message
-        # if context:
-        #    full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
+        if context:
+            full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
 
         cmd = ["-m", full_commit_message]
         if not self.git_commit_verify:
@@ -420,6 +420,32 @@         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
+    def is_dirty(self, path=None):
+        if path and not self.path_in_repo(path):
+            return True
+
+        return self.repo.is_dirty(path=path)
+
+    def get_head_commit(self):
+        try:
+            return self.repo.head.commit
+        except (ValueError,) + ANY_GIT_ERROR:
+            return None
+
+    def get_head_commit_sha(self, short=False):
+        commit = self.get_head_commit()
+        if not commit:
+            return
+        if short:
+            return commit.hexsha[:7]
+        return commit.hexsha
+
+    def get_head_commit_message(self, default=None):
+        commit = self.get_head_commit()
+        if not commit:
+            return default
+        return commit.message
+
     def get_dirty_files(self):
         """
         Returns a list of all files which are dirty (not committed), either staged or in the working
@@ -435,30 +461,4 @@         unstaged_files = self.repo.git.diff("--name-only").splitlines()
         dirty_files.update(unstaged_files)
 
-        return list(dirty_files)
-
-    def is_dirty(self, path=None):
-        if path and not self.path_in_repo(path):
-            return True
-
-        return self.repo.is_dirty(path=path)
-
-    def get_head_commit(self):
-        try:
-            return self.repo.head.commit
-        except (ValueError,) + ANY_GIT_ERROR:
-            return None
-
-    def get_head_commit_sha(self, short=False):
-        commit = self.get_head_commit()
-        if not commit:
-            return
-        if short:
-            return commit.hexsha[:7]
-        return commit.hexsha
-
-    def get_head_commit_message(self, default=None):
-        commit = self.get_head_commit()
-        if not commit:
-            return default
-        return commit.message+        return list(dirty_files)