
index 31db1edf..8279995a 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmpnvjbb26h_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmp79q443rg_actual.txt	
@@ -133,8 +133,8 @@ class GitRepo:
             commit_message = "(no commit message provided)"
 
         full_commit_message = commit_message
-        # if context:
-        #    full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
+        if context:
+            full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
 
         cmd = ["-m", full_commit_message]
         if not self.git_commit_verify:
@@ -420,23 +420,6 @@ class GitRepo:
         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
-    def get_dirty_files(self):
-        """
-        Returns a list of all files which are dirty (not committed), either staged or in the working
-        directory.
-        """
-        dirty_files = set()
-
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
-
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
-
-        return list(dirty_files)
-
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
             return True
@@ -461,4 +444,21 @@ class GitRepo:
         commit = self.get_head_commit()
         if not commit:
             return default
-        return commit.message
\ No newline at end of file
+        return commit.message
+
+    def get_dirty_files(self):
+        """
+        Returns a list of all files which are dirty (not committed), either staged or in the working
+        directory.
+        """
+        dirty_files = set()
+
+        # Get staged files
+        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
+        dirty_files.update(staged_files)
+
+        # Get unstaged files
+        unstaged_files = self.repo.git.diff("--name-only").splitlines()
+        dirty_files.update(unstaged_files)
+
+        return list(dirty_files)
\ No newline at end of file
