
index 31db1edf..3bd9b4d9 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmpa2gqxiu6_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmpf3j5viin_actual.txt	
@@ -11,16 +11,16 @@ try:
         git.exc.InvalidGitRepositoryError,
         git.exc.GitCommandNotFound,
     ]
-except ImportError:
+except ImportError:  # pragma: no cover
     git = None
     ANY_GIT_ERROR = []
 
 import pathspec
 
 from aider import prompts, utils
-
 from .dump import dump  # noqa: F401
 
+# Extend the list of errors we always trap while talking to git
 ANY_GIT_ERROR += [
     OSError,
     IndexError,
@@ -36,12 +36,15 @@ ANY_GIT_ERROR = tuple(ANY_GIT_ERROR)
 
 class GitRepo:
     repo = None
+
     aider_ignore_file = None
     aider_ignore_spec = None
     aider_ignore_ts = 0
     aider_ignore_last_check = 0
+
     subtree_only = False
     ignore_file_cache = {}
+
     git_repo_error = None
 
     def __init__(
@@ -62,6 +65,7 @@ class GitRepo:
         self.io = io
         self.models = models
 
+        # runtime caches
         self.normalized_path = {}
         self.tree_files = {}
 
@@ -80,15 +84,9 @@ class GitRepo:
             check_fnames = fnames
         else:
             check_fnames = ["."]
-
         repo_paths = []
         for fname in check_fnames:
-            fname = Path(fname)
-            fname = fname.resolve()
-
-            if not fname.exists() and fname.parent.exists():
-                fname = fname.parent
-
+            fname = Path(fname).resolve()
             try:
                 repo_path = git.Repo(fname, search_parent_directories=True).working_dir
                 repo_path = utils.safe_abs_path(repo_path)
@@ -97,20 +95,20 @@ class GitRepo:
                 pass
 
         num_repos = len(set(repo_paths))
-
         if num_repos == 0:
-            raise FileNotFoundError
+            return
         if num_repos > 1:
             self.io.tool_error("Files are in different git repos.")
-            raise FileNotFoundError
+            return
 
-        # https://github.com/gitpython-developers/GitPython/issues/427
-        self.repo = git.Repo(repo_paths.pop(), odbt=git.GitDB)
+        self.repo = git.Repo(repo_paths.pop(), odbt=git.GitDB)  # type: ignore
         self.root = utils.safe_abs_path(self.repo.working_tree_dir)
 
         if aider_ignore_file:
             self.aider_ignore_file = Path(aider_ignore_file)
 
+    # --------------------------------------------------------------------- commit handling
+
     def commit(self, fnames=None, context=None, message=None, aider_edits=False):
         if not fnames and not self.repo.is_dirty():
             return
@@ -133,12 +131,13 @@ class GitRepo:
             commit_message = "(no commit message provided)"
 
         full_commit_message = commit_message
-        # if context:
-        #    full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
+        if context:
+            full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
 
         cmd = ["-m", full_commit_message]
         if not self.git_commit_verify:
             cmd.append("--no-verify")
+
         if fnames:
             fnames = [str(self.abs_root_path(fn)) for fn in fnames]
             for fname in fnames:
@@ -169,19 +168,19 @@ class GitRepo:
         except ANY_GIT_ERROR as err:
             self.io.tool_error(f"Unable to commit: {err}")
         finally:
-            # Restore the env
-
             if self.attribute_committer:
                 if original_committer_name_env is not None:
                     os.environ["GIT_COMMITTER_NAME"] = original_committer_name_env
                 else:
-                    del os.environ["GIT_COMMITTER_NAME"]
+                    os.environ.pop("GIT_COMMITTER_NAME", None)
 
             if aider_edits and self.attribute_author:
                 if original_author_name_env is not None:
                     os.environ["GIT_AUTHOR_NAME"] = original_author_name_env
                 else:
-                    del os.environ["GIT_AUTHOR_NAME"]
+                    os.environ.pop("GIT_AUTHOR_NAME", None)
+
+    # --------------------------------------------------------------------- helpers
 
     def get_rel_repo_dir(self):
         try:
@@ -220,12 +219,11 @@ class GitRepo:
         commit_message = commit_message.strip()
         if commit_message and commit_message[0] == '"' and commit_message[-1] == '"':
             commit_message = commit_message[1:-1].strip()
-
         return commit_message
 
-    def get_diffs(self, fnames=None):
-        # We always want diffs of index and working dir
+    # --------------------------------------------------------------------- diff helpers
 
+    def get_diffs(self, fnames=None):
         current_branch_has_commits = False
         try:
             active_branch = self.repo.active_branch
@@ -234,7 +232,7 @@ class GitRepo:
                 current_branch_has_commits = any(commits)
             except ANY_GIT_ERROR:
                 pass
-        except (TypeError,) + ANY_GIT_ERROR:
+        except TypeError:
             pass
 
         if not fnames:
@@ -256,10 +254,10 @@ class GitRepo:
 
             diffs += self.repo.git.diff(*index_args)
             diffs += self.repo.git.diff(*wd_args)
-
             return diffs
         except ANY_GIT_ERROR as err:
             self.io.tool_error(f"Unable to diff: {err}")
+            return ""
 
     def diff_commits(self, pretty, from_commit, to_commit):
         args = []
@@ -269,9 +267,9 @@ class GitRepo:
             args += ["--color=never"]
 
         args += [from_commit, to_commit]
-        diffs = self.repo.git.diff(*args)
+        return self.repo.git.diff(*args)
 
-        return diffs
+    # --------------------------------------------------------------------- file listings
 
     def get_tracked_files(self):
         if not self.repo:
@@ -287,25 +285,23 @@ class GitRepo:
             self.io.tool_output("Is your git repo corrupted?")
             return []
 
-        files = set()
+        files: set[str] = set()
         if commit:
             if commit in self.tree_files:
                 files = self.tree_files[commit]
             else:
                 try:
                     iterator = commit.tree.traverse()
-                    blob = None  # Initialize blob
+                    blob = None
                     while True:
                         try:
                             blob = next(iterator)
-                            if blob.type == "blob":  # blob is a file
+                            if blob.type == "blob":
                                 files.add(blob.path)
                         except IndexError:
-                            # Handle potential index error during tree traversal
-                            # without relying on potentially unassigned 'blob'
                             self.io.tool_warning(
-                                "GitRepo: Index error encountered while reading git tree object."
-                                " Skipping."
+                                "GitRepo: Index error encountered while reading git tree "
+                                "object. Skipping."
                             )
                             continue
                         except StopIteration:
@@ -315,10 +311,11 @@ class GitRepo:
                     self.io.tool_error(f"Unable to list files in git repo: {err}")
                     self.io.tool_output("Is your git repo corrupted?")
                     return []
-                files = set(self.normalize_path(path) for path in files)
+
+                files = {self.normalize_path(path) for path in files}
                 self.tree_files[commit] = set(files)
 
-        # Add staged files
+        # staged files
         index = self.repo.index
         try:
             staged_files = [path for path, _ in index.entries.keys()]
@@ -326,29 +323,24 @@ class GitRepo:
         except ANY_GIT_ERROR as err:
             self.io.tool_error(f"Unable to read staged files: {err}")
 
-        res = [fname for fname in files if not self.ignored_file(fname)]
+        return [fname for fname in files if not self.ignored_file(fname)]
 
-        return res
+    # --------------------------------------------------------------------- path normalization & ignore handling
 
     def normalize_path(self, path):
-        orig_path = path
-        res = self.normalized_path.get(orig_path)
+        res = self.normalized_path.get(path)
         if res:
             return res
-
-        path = str(Path(PurePosixPath((Path(self.root) / path).relative_to(self.root))))
-        self.normalized_path[orig_path] = path
-        return path
+        res = str(Path(PurePosixPath((Path(self.root) / path).relative_to(self.root))))
+        self.normalized_path[path] = res
+        return res
 
     def refresh_aider_ignore(self):
         if not self.aider_ignore_file:
             return
-
-        current_time = time.time()
-        if current_time - self.aider_ignore_last_check < 1:
+        if time.time() - self.aider_ignore_last_check < 1:
             return
-
-        self.aider_ignore_last_check = current_time
+        self.aider_ignore_last_check = time.time()
 
         if not self.aider_ignore_file.is_file():
             return
@@ -359,8 +351,7 @@ class GitRepo:
             self.ignore_file_cache = {}
             lines = self.aider_ignore_file.read_text().splitlines()
             self.aider_ignore_spec = pathspec.PathSpec.from_lines(
-                pathspec.patterns.GitWildMatchPattern,
-                lines,
+                pathspec.patterns.GitWildMatchPattern, lines
             )
 
     def git_ignored_file(self, path):
@@ -388,10 +379,7 @@ class GitRepo:
                 fname_path = Path(self.normalize_path(fname))
                 cwd_path = Path.cwd().resolve().relative_to(Path(self.root).resolve())
             except ValueError:
-                # Issue #1524
-                # ValueError: 'C:\\dev\\squid-certbot' is not in the subpath of
-                # 'C:\\dev\\squid-certbot'
-                # Clearly, fname is not under cwd... so ignore it
+                # Issue #1524: path not under cwd -> ignore it
                 return True
 
             if cwd_path not in fname_path.parents and fname_path != cwd_path:
@@ -400,25 +388,18 @@ class GitRepo:
         if not self.aider_ignore_file or not self.aider_ignore_file.is_file():
             return False
 
-        try:
-            fname = self.normalize_path(fname)
-        except ValueError:
+        # Respect gitignore rules
+        if self.git_ignored_file(fname):
             return True
 
-        return self.aider_ignore_spec.match_file(fname)
-
-    def path_in_repo(self, path):
-        if not self.repo:
-            return
-        if not path:
-            return
+        return self.aider_ignore_spec.match_file(fname) if self.aider_ignore_spec else False
 
-        tracked_files = set(self.get_tracked_files())
-        return self.normalize_path(path) in tracked_files
+    # --------------------------------------------------------------------- misc helpers
 
     def abs_root_path(self, path):
-        res = Path(self.root) / path
-        return utils.safe_abs_path(res)
+        return utils.safe_abs_path(Path(self.root) / path)
+
+    # --------------------------------------------------------------------- dirtiness helpers
 
     def get_dirty_files(self):
         """
@@ -426,39 +407,34 @@ class GitRepo:
         directory.
         """
         dirty_files = set()
-
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
-
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
-
+        dirty_files.update(self.repo.git.diff("--name-only", "--cached").splitlines())
+        dirty_files.update(self.repo.git.diff("--name-only").splitlines())
         return list(dirty_files)
 
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
             return True
-
         return self.repo.is_dirty(path=path)
 
+    def path_in_repo(self, path):
+        if not self.repo or not path:
+            return
+        return self.normalize_path(path) in set(self.get_tracked_files())
+
+    # --------------------------------------------------------------------- HEAD helpers
+
     def get_head_commit(self):
         try:
             return self.repo.head.commit
         except (ValueError,) + ANY_GIT_ERROR:
             return None
 
-    def get_head_commit_sha(self, short=False):
+    def get_head_commit_sha(self, *, short=False):
         commit = self.get_head_commit()
         if not commit:
             return
-        if short:
-            return commit.hexsha[:7]
-        return commit.hexsha
+        return commit.hexsha[:7] if short else commit.hexsha
 
     def get_head_commit_message(self, default=None):
         commit = self.get_head_commit()
-        if not commit:
-            return default
-        return commit.message
\ No newline at end of file
+        return commit.message if commit else default
\ No newline at end of file
