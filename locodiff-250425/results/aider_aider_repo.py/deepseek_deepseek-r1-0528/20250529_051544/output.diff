
index 31db1edfc..c8c1ec642 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmp5k3da8bu_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmpkayttgt9_actual.txt	
@@ -21,6 +21,11 @@ from aider import prompts, utils
 
 from .dump import dump  # noqa: F401
 
+
+class UnableToCountRepoFiles(Exception):
+    pass
+
+
 ANY_GIT_ERROR += [
     OSError,
     IndexError,
@@ -43,6 +48,8 @@ class GitRepo:
     subtree_only = False
     ignore_file_cache = {}
     git_repo_error = None
+    normalized_path = {}
+    tree_files = {}
 
     def __init__(
         self,
@@ -62,9 +69,6 @@ class GitRepo:
         self.io = io
         self.models = models
 
-        self.normalized_path = {}
-        self.tree_files = {}
-
         self.attribute_author = attribute_author
         self.attribute_committer = attribute_committer
         self.attribute_commit_message_author = attribute_commit_message_author
@@ -74,6 +78,9 @@ class GitRepo:
         self.git_commit_verify = git_commit_verify
         self.ignore_file_cache = {}
 
+        self.normalized_path = {}
+        self.tree_files = {}
+
         if git_dname:
             check_fnames = [git_dname]
         elif fnames:
@@ -124,17 +131,17 @@ class GitRepo:
         else:
             commit_message = self.get_commit_message(diffs, context)
 
+        if not commit_message:
+            commit_message = "(no commit message provided)"
+
         if aider_edits and self.attribute_commit_message_author:
             commit_message = "aider: " + commit_message
         elif self.attribute_commit_message_committer:
             commit_message = "aider: " + commit_message
 
-        if not commit_message:
-            commit_message = "(no commit message provided)"
-
         full_commit_message = commit_message
-        # if context:
-        #    full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
+        if context:
+            full_commit_message += "\n\n# Aider chat conversation:\n\n" + context
 
         cmd = ["-m", full_commit_message]
         if not self.git_commit_verify:
@@ -190,6 +197,9 @@ class GitRepo:
             return self.repo.git_dir
 
     def get_commit_message(self, diffs, context):
+        if not self.models:
+            return
+
         diffs = "# Diffs:\n" + diffs
 
         content = ""
@@ -242,7 +252,7 @@ class GitRepo:
 
         diffs = ""
         for fname in fnames:
-            if not self.path_in_repo(fname):
+            if not self.path_in_repo(fname) and not self.ignored_file(fname):
                 diffs += f"Added {fname}\n"
 
         try:
@@ -278,9 +288,16 @@ class GitRepo:
             return []
 
         try:
-            commit = self.repo.head.commit
-        except ValueError:
-            commit = None
+            try:
+                commit = self.repo.head.commit
+            except ValueError:
+                commit = None
+            except ANY_GIT_ERROR as err:
+                self.git_repo_error = err
+                self.io.tool_error(f"Unable to list files in git repo: {err}")
+                self.io.tool_output("Is your git repo corrupted?")
+                return []
+
         except ANY_GIT_ERROR as err:
             self.git_repo_error = err
             self.io.tool_error(f"Unable to list files in git repo: {err}")
@@ -336,7 +353,7 @@ class GitRepo:
         if res:
             return res
 
-        path = str(Path(PurePosixPath((Path(self.root) / path).relative_to(self.root))))
+        path = str(Path(PurePosixPath((Path(self.root) / path).relative_to(self.root)))
         self.normalized_path[orig_path] = path
         return path
 
@@ -379,6 +396,7 @@ class GitRepo:
             return self.ignore_file_cache[fname]
 
         result = self.ignored_file_raw(fname)
+        dump(fname, result)
         self.ignore_file_cache[fname] = result
         return result
 
@@ -405,7 +423,10 @@ class GitRepo:
         except ValueError:
             return True
 
-        return self.aider_ignore_spec.match_file(fname)
+        try:
+            return self.aider_ignore_spec.match_file(fname)
+        except Exception:
+            return False
 
     def path_in_repo(self, path):
         if not self.repo:
