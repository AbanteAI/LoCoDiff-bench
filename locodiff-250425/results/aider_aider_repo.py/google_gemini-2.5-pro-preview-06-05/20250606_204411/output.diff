
index 31db1edfc..bab59fa8a 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmphqac8b3a_expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmp3hy53f6a_actual.txt	
@@ -99,14 +99,18 @@ class GitRepo:
         num_repos = len(set(repo_paths))
 
         if num_repos == 0:
-            raise FileNotFoundError
+            return
         if num_repos > 1:
             self.io.tool_error("Files are in different git repos.")
-            raise FileNotFoundError
+            return
 
         # https://github.com/gitpython-developers/GitPython/issues/427
-        self.repo = git.Repo(repo_paths.pop(), odbt=git.GitDB)
-        self.root = utils.safe_abs_path(self.repo.working_tree_dir)
+        try:
+            self.repo = git.Repo(repo_paths.pop(), odbt=git.GitDB)
+            self.root = utils.safe_abs_path(self.repo.working_tree_dir)
+        except ANY_GIT_ERROR as err:
+            self.git_repo_error = err
+            self.io.tool_error(f"Unable to initialize git repo: {err}")
 
         if aider_ignore_file:
             self.aider_ignore_file = Path(aider_ignore_file)
@@ -212,15 +216,6 @@ class GitRepo:
             commit_message = model.simple_send_with_retries(messages)
             if commit_message:
                 break
-
-        if not commit_message:
-            self.io.tool_error("Failed to generate commit message!")
-            return
-
-        commit_message = commit_message.strip()
-        if commit_message and commit_message[0] == '"' and commit_message[-1] == '"':
-            commit_message = commit_message[1:-1].strip()
-
         return commit_message
 
     def get_diffs(self, fnames=None):
@@ -234,7 +229,7 @@ class GitRepo:
                 current_branch_has_commits = any(commits)
             except ANY_GIT_ERROR:
                 pass
-        except (TypeError,) + ANY_GIT_ERROR:
+        except ANY_GIT_ERROR:
             pass
 
         if not fnames:
@@ -278,9 +273,7 @@ class GitRepo:
             return []
 
         try:
-            commit = self.repo.head.commit
-        except ValueError:
-            commit = None
+            commit = self.get_head_commit()
         except ANY_GIT_ERROR as err:
             self.git_repo_error = err
             self.io.tool_error(f"Unable to list files in git repo: {err}")
@@ -399,12 +392,15 @@ class GitRepo:
 
         if not self.aider_ignore_file or not self.aider_ignore_file.is_file():
             return False
-
         try:
             fname = self.normalize_path(fname)
         except ValueError:
             return True
 
+        self.refresh_aider_ignore()
+        if not self.aider_ignore_spec:
+            return False
+
         return self.aider_ignore_spec.match_file(fname)
 
     def path_in_repo(self, path):
@@ -420,23 +416,6 @@ class GitRepo:
         res = Path(self.root) / path
         return utils.safe_abs_path(res)
 
-    def get_dirty_files(self):
-        """
-        Returns a list of all files which are dirty (not committed), either staged or in the working
-        directory.
-        """
-        dirty_files = set()
-
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
-
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
-
-        return list(dirty_files)
-
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
             return True
@@ -446,7 +425,7 @@ class GitRepo:
     def get_head_commit(self):
         try:
             return self.repo.head.commit
-        except (ValueError,) + ANY_GIT_ERROR:
+        except ANY_GIT_ERROR:
             return None
 
     def get_head_commit_sha(self, short=False):
