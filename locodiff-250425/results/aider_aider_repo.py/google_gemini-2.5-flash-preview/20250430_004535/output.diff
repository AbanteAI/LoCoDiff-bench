
index 31db1edf..34202251 100644
--- a/aider_aider_repo.py_expectedoutput.txt (expected):tmp/tmpvxskqou__expected.txt	
+++ b/aider_aider_repo.py_extracted.txt (actual):tmp/tmpv6_ifw_s_actual.txt	
@@ -190,6 +190,10 @@ class GitRepo:
             return self.repo.git_dir
 
     def get_commit_message(self, diffs, context):
+        if len(diffs) >= 4 * 1024 * 4:
+            self.io.tool_error("Diff is too large to generate a commit message.")
+            return
+
         diffs = "# Diffs:\n" + diffs
 
         content = ""
@@ -273,6 +277,8 @@ class GitRepo:
 
         return diffs
 
+    tree_files = {}
+
     def get_tracked_files(self):
         if not self.repo:
             return []
@@ -330,6 +336,8 @@ class GitRepo:
 
         return res
 
+    normalized_path = {}
+
     def normalize_path(self, path):
         orig_path = path
         res = self.normalized_path.get(orig_path)
@@ -340,6 +348,7 @@ class GitRepo:
         self.normalized_path[orig_path] = path
         return path
 
+
     def refresh_aider_ignore(self):
         if not self.aider_ignore_file:
             return
@@ -405,6 +414,16 @@ class GitRepo:
         except ValueError:
             return True
 
+        mtime = self.aider_ignore_file.stat().st_mtime
+        if mtime != self.aider_ignore_ts:
+            self.aider_ignore_ts = mtime
+            self.ignore_file_cache = {}
+            lines = self.aider_ignore_file.read_text().splitlines()
+            self.aider_ignore_spec = pathspec.PathSpec.from_lines(
+                pathspec.patterns.GitWildMatchPattern,
+                lines,
+            )
+
         return self.aider_ignore_spec.match_file(fname)
 
     def path_in_repo(self, path):
@@ -427,15 +446,19 @@ class GitRepo:
         """
         dirty_files = set()
 
-        # Get staged files
-        staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
-        dirty_files.update(staged_files)
+        try:
+            # Get staged files
+            staged_files = self.repo.git.diff("--name-only", "--cached").splitlines()
+            dirty_files.update(staged_files)
 
-        # Get unstaged files
-        unstaged_files = self.repo.git.diff("--name-only").splitlines()
-        dirty_files.update(unstaged_files)
+            # Get unstaged files
+            unstaged_files = self.repo.git.diff("--name-only").splitlines()
+            dirty_files.update(unstaged_files)
 
-        return list(dirty_files)
+            return list(dirty_files)
+        except ANY_GIT_ERROR as err:
+            self.io.tool_error(f"Unable to list dirty files: {err}")
+            return []
 
     def is_dirty(self, path=None):
         if path and not self.path_in_repo(path):
