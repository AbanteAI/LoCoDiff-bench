--- tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_extracted.txt (actual)@@ -1,17 +1,18 @@ import {
-	BaseBoxShapeUtil,
-	HTMLContainer,
-	MediaHelpers,
-	SvgExportContext,
-	TLAsset,
-	TLVideoShape,
-	toDomPrecision,
-	useEditor,
-	useEditorComponents,
-	useIsEditing,
-	videoShapeMigrations,
-	videoShapeProps,
-	WeakCache,
+  BaseBoxShapeUtil,
+  Editor,
+  HTMLContainer,
+  MediaHelpers,
+  SvgExportContext,
+  TLAsset,
+  TLVideoShape,
+  toDomPrecision,
+  useEditor,
+  useEditorComponents,
+  useIsEditing,
+  videoShapeMigrations,
+  videoShapeProps,
+  WeakCache,
 } from '@tldraw/editor'
 import classNames from 'classnames'
 import { memo, ReactEventHandler, useCallback, useEffect, useRef, useState } from 'react'
@@ -24,166 +25,163 @@ 
 /** @public */
 export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
-	static override type = 'video' as const
-	static override props = videoShapeProps
-	static override migrations = videoShapeMigrations
+  static override type = 'video' as const
+  static override props = videoShapeProps
+  static override migrations = videoShapeMigrations
 
-	override canEdit() {
-		return true
-	}
-	override isAspectRatioLocked() {
-		return true
-	}
+  override canEdit() {
+    return true
+  }
+  override isAspectRatioLocked() {
+    return true
+  }
 
-	override getDefaultProps(): TLVideoShape['props'] {
-		return {
-			w: 100,
-			h: 100,
-			assetId: null,
-			time: 0,
-			playing: true,
-			url: '',
-			altText: '',
-		}
-	}
+  override getDefaultProps(): TLVideoShape['props'] {
+    return {
+      w: 100,
+      h: 100,
+      assetId: null,
+      time: 0,
+      playing: true,
+      url: '',
+      altText: '',
+    }
+  }
 
-	override getAriaDescriptor(shape: TLVideoShape) {
-		return shape.props.altText
-	}
+  override getAriaDescriptor(shape: TLVideoShape) {
+    return shape.props.altText
+  }
 
-	component(shape: TLVideoShape) {
-		return <VideoShape shape={shape} />
-	}
+  component(shape: TLVideoShape) {
+    return <VideoShape shape={shape} />
+  }
 
-	indicator(shape: TLVideoShape) {
-		return <rect width={toDomPrecision(shape.props.w)} height={toDomPrecision(shape.props.h)} />
-	}
+  indicator(shape: TLVideoShape) {
+    return <rect width={toDomPrecision(shape.props.w)} height={toDomPrecision(shape.props.h)} />
+  }
 
-	override async toSvg(shape: TLVideoShape, ctx: SvgExportContext) {
-		if (!shape.props.assetId) return null
+  override async toSvg(shape: TLVideoShape, ctx: SvgExportContext) {
+    if (!shape.props.assetId) return null
 
-		const asset = this.editor.getAsset<TLAsset>(shape.props.assetId)
-		if (!asset) return null
+    const asset = this.editor.getAsset<TLAsset>(shape.props.assetId)
+    if (!asset) return null
 
-		const src = await videoSvgExportCache.get(asset, async () => {
-			const assetUrl = await ctx.resolveAssetUrl(asset.id, shape.props.w)
-			if (!assetUrl) return null
-			const video = await MediaHelpers.loadVideo(assetUrl)
-			return await MediaHelpers.getVideoFrameAsDataUrl(video, 0)
-		})
+    const src = await videoSvgExportCache.get(asset, async () => {
+      const assetUrl = await ctx.resolveAssetUrl(asset.id, shape.props.w)
+      if (!assetUrl) return null
+      const video = await MediaHelpers.loadVideo(assetUrl)
+      return await MediaHelpers.getVideoFrameAsDataUrl(video, 0)
+    })
 
-		if (!src) return null
+    if (!src) return null
 
-		return <image href={src} width={shape.props.w} height={shape.props.h} />
-	}
+    return <image href={src} width={shape.props.w} height={shape.props.h} />
+  }
 }
 
 const VideoShape = memo(function VideoShape({ shape }: { shape: TLVideoShape }) {
-	const editor = useEditor()
-	const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110
-	const isEditing = useIsEditing(shape.id)
-	const prefersReducedMotion = usePrefersReducedMotion()
-	const { Spinner } = useEditorComponents()
+  const editor = useEditor()
+  const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110
+  const { asset, url } = useImageOrVideoAsset({
+    shapeId: shape.id,
+    assetId: shape.props.assetId,
+    width: shape.props.w,
+  })
+  const isEditing = useIsEditing(shape.id)
+  const prefersReducedMotion = usePrefersReducedMotion()
+  const { Spinner } = useEditorComponents()
 
-	const { asset, url } = useImageOrVideoAsset({
-		shapeId: shape.id,
-		assetId: shape.props.assetId,
-		width: shape.props.w,
-	})
+  const rVideo = useRef<HTMLVideoElement>(null!)
 
-	const rVideo = useRef<HTMLVideoElement>(null!)
+  const [isLoaded, setIsLoaded] = useState(false)
 
-	const [isLoaded, setIsLoaded] = useState(false)
+  const [isFullscreen, setIsFullscreen] = useState(false)
 
-	const [isFullscreen, setIsFullscreen] = useState(false)
+  useEffect(() => {
+    const fullscreenChange = () => setIsFullscreen(document.fullscreenElement === rVideo.current)
+    document.addEventListener('fullscreenchange', fullscreenChange)
+    return () => document.removeEventListener('fullscreenchange', fullscreenChange)
+  })
 
-	useEffect(() => {
-		const fullscreenChange = () => setIsFullscreen(document.fullscreenElement === rVideo.current)
-		document.addEventListener('fullscreenchange', fullscreenChange)
+  const handleLoadedData = useCallback<ReactEventHandler<HTMLVideoElement>>((e) => {
+    const video = e.currentTarget
+    if (!video) return
+    setIsLoaded(true)
+  }, [])
 
-		return () => document.removeEventListener('fullscreenchange', fullscreenChange)
-	})
+  useEffect(() => {
+    const video = rVideo.current
+    if (!video) return
+    if (isEditing) {
+      if (document.activeElement !== video) {
+        video.focus()
+      }
+    }
+  }, [isEditing, isLoaded])
 
-	const handleLoadedData = useCallback<ReactEventHandler<HTMLVideoElement>>((e) => {
-		const video = e.currentTarget
-		if (!video) return
+  useEffect(() => {
+    if (prefersReducedMotion) {
+      const video = rVideo.current
+      if (!video) return
+      video.pause()
+      video.currentTime = 0
+    }
+  }, [rVideo, prefersReducedMotion])
 
-		setIsLoaded(true)
-	}, [])
+  return (
+    <>
+      <HTMLContainer
+        id={shape.id}
+        style={{
+          color: 'var(--color-text-3)',
+          backgroundColor: asset ? 'transparent' : 'var(--color-low)',
+          border: asset ? 'none' : '1px solid var(--color-low-border)',
+        }}
+      >
+        <div className="tl-counter-scaled">
+          <div className="tl-video-container">
+            {!asset ? (
+              <BrokenAssetIcon />
+            ) : Spinner && !asset.props.src ? (
+              <Spinner />
+            ) : url ? (
+              <>
+                <video
+                  ref={rVideo}
+                  style={
+                    isEditing
+                      ? { pointerEvents: 'all' }
+                      : !isLoaded
+                        ? { display: 'none' }
+                        : undefined
+                  }
+                  className={classNames('tl-video', `tl-video-shape-${shape.id.split(':')[1]}`, {
+                    'tl-video-is-fullscreen': isFullscreen,
+                  })}
+                  width="100%"
+                  height="100%"
+                  draggable={false}
+                  playsInline
+                  autoPlay
+                  muted
+                  loop
+                  disableRemotePlayback
+                  disablePictureInPicture
+                  controls={isEditing && showControls}
+                  onLoadedData={handleLoadedData}
+                  hidden={!isLoaded}
+                >
+                  <source src={url} />
+                </video>
+                {!isLoaded && Spinner && <Spinner />}
+              </>
+            ) : null}
+          </div>
+        </div>
+      </HTMLContainer>
+      {'url' in shape.props && shape.props.url && <HyperlinkButton url={shape.props.url} />}
+    </>
+  )
+})
 
-	// If the current time changes and we're not editing the video, update the video time
-	useEffect(() => {
-		const video = rVideo.current
-		if (!video) return
-
-		if (isEditing) {
-			if (document.activeElement !== video) {
-				video.focus()
-			}
-		}
-	}, [isEditing, isLoaded])
-
-	useEffect(() => {
-		if (prefersReducedMotion) {
-			const video = rVideo.current
-			if (!video) return
-			video.pause()
-			video.currentTime = 0
-		}
-	}, [rVideo, prefersReducedMotion])
-
-	return (
-		<>
-			<HTMLContainer
-				id={shape.id}
-				style={{
-					color: 'var(--color-text-3)',
-					backgroundColor: asset ? 'transparent' : 'var(--color-low)',
-					border: asset ? 'none' : '1px solid var(--color-low-border)',
-				}}
-			>
-				<div className="tl-counter-scaled">
-					<div className="tl-video-container">
-						{!asset ? (
-							<BrokenAssetIcon />
-						) : Spinner && !asset.props.src ? (
-							<Spinner />
-						) : url ? (
-							<>
-								<video
-									ref={rVideo}
-									style={
-										isEditing
-											? { pointerEvents: 'all' }
-											: !isLoaded
-												? { display: 'none' }
-												: undefined
-									}
-									className={classNames('tl-video', `tl-video-shape-${shape.id.split(':')[1]}`, {
-										'tl-video-is-fullscreen': isFullscreen,
-									})}
-									width="100%"
-									height="100%"
-									draggable={false}
-									playsInline
-									autoPlay
-									muted
-									loop
-									disableRemotePlayback
-									disablePictureInPicture
-									controls={isEditing && showControls}
-									onLoadedData={handleLoadedData}
-									hidden={!isLoaded}
-								>
-									<source src={url} />
-								</video>
-								{!isLoaded && Spinner && <Spinner />}
-							</>
-						) : null}
-					</div>
-				</div>
-			</HTMLContainer>
-			{'url' in shape.props && shape.props.url && <HyperlinkButton url={shape.props.url} />}
-		</>
-	)
-})+export { VideoShapeUtil }