
index eee57f79b..aafdf9604 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpoav12zuf_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_extracted.txt (actual):tmp/tmpwxwwz5to_actual.txt	
@@ -1,14 +1,18 @@
+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
+	Editor,
 	HTMLContainer,
 	MediaHelpers,
 	SvgExportContext,
-	TLAsset,
 	TLVideoShape,
+	TLAsset,
 	toDomPrecision,
 	useEditor,
 	useEditorComponents,
 	useIsEditing,
+	useEditor,
+	usePrefersReducedMotion,
 	videoShapeMigrations,
 	videoShapeProps,
 	WeakCache,
@@ -18,9 +22,8 @@ import { memo, ReactEventHandler, useCallback, useEffect, useRef, useState } fro
 import { BrokenAssetIcon } from '../shared/BrokenAssetIcon'
 import { HyperlinkButton } from '../shared/HyperlinkButton'
 import { useImageOrVideoAsset } from '../shared/useImageOrVideoAsset'
-import { usePrefersReducedMotion } from '../shared/usePrefersReducedMotion'
 
-const videoSvgExportCache = new WeakCache<TLAsset, Promise<string | null>>()
+export const videoSvgExportCache = new WeakCache<TLAsset, Promise<string | null>>()
 
 /** @public */
 export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
@@ -34,7 +37,6 @@ export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
 	override isAspectRatioLocked() {
 		return true
 	}
-
 	override getDefaultProps(): TLVideoShape['props'] {
 		return {
 			w: 100,
@@ -46,7 +48,6 @@ export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
 			altText: '',
 		}
 	}
-
 	override getAriaDescriptor(shape: TLVideoShape) {
 		return shape.props.altText
 	}
@@ -71,7 +72,6 @@ export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
 			const video = await MediaHelpers.loadVideo(assetUrl)
 			return await MediaHelpers.getVideoFrameAsDataUrl(video, 0)
 		})
-
 		if (!src) return null
 
 		return <image href={src} width={shape.props.w} height={shape.props.h} />
@@ -82,8 +82,8 @@ const VideoShape = memo(function VideoShape({ shape }: { shape: TLVideoShape })
 	const editor = useEditor()
 	const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110
 	const isEditing = useIsEditing(shape.id)
-	const prefersReducedMotion = usePrefersReducedMotion()
 	const { Spinner } = useEditorComponents()
+	const prefersReducedMotion = usePrefersReducedMotion()
 
 	const { asset, url } = useImageOrVideoAsset({
 		shapeId: shape.id,
@@ -94,24 +94,20 @@ const VideoShape = memo(function VideoShape({ shape }: { shape: TLVideoShape })
 	const rVideo = useRef<HTMLVideoElement>(null!)
 
 	const [isLoaded, setIsLoaded] = useState(false)
-
 	const [isFullscreen, setIsFullscreen] = useState(false)
 
 	useEffect(() => {
-		const fullscreenChange = () => setIsFullscreen(document.fullscreenElement === rVideo.current)
-		document.addEventListener('fullscreenchange', fullscreenChange)
-
-		return () => document.removeEventListener('fullscreenchange', fullscreenChange)
-	})
+		const handler = () => setIsFullscreen(document.fullscreenElement === rVideo.current)
+		document.addEventListener('fullscreenchange', handler)
+		return () => document.removeEventListener('fullscreenchange', handler)
+	}, [])
 
 	const handleLoadedData = useCallback<ReactEventHandler<HTMLVideoElement>>((e) => {
 		const video = e.currentTarget
 		if (!video) return
-
 		setIsLoaded(true)
 	}, [])
 
-	// If the current time changes and we're not editing the video, update the video time
 	useEffect(() => {
 		const video = rVideo.current
 		if (!video) return
@@ -156,8 +152,8 @@ const VideoShape = memo(function VideoShape({ shape }: { shape: TLVideoShape })
 										isEditing
 											? { pointerEvents: 'all' }
 											: !isLoaded
-												? { display: 'none' }
-												: undefined
+											? { display: 'none' }
+											: undefined
 									}
 									className={classNames('tl-video', `tl-video-shape-${shape.id.split(':')[1]}`, {
 										'tl-video-is-fullscreen': isFullscreen,
