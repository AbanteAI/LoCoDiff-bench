
index eee57f79..6b4d7370 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp2qzv3941_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_video_VideoShapeUtil.tsx_extracted.txt (actual):tmp/tmp2aoxk41y_actual.txt	
@@ -31,6 +31,7 @@ export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
 	override canEdit() {
 		return true
 	}
+
 	override isAspectRatioLocked() {
 		return true
 	}
@@ -81,41 +82,35 @@ export class VideoShapeUtil extends BaseBoxShapeUtil<TLVideoShape> {
 const VideoShape = memo(function VideoShape({ shape }: { shape: TLVideoShape }) {
 	const editor = useEditor()
 	const showControls = editor.getShapeGeometry(shape).bounds.w * editor.getZoomLevel() >= 110
-	const isEditing = useIsEditing(shape.id)
-	const prefersReducedMotion = usePrefersReducedMotion()
-	const { Spinner } = useEditorComponents()
-
 	const { asset, url } = useImageOrVideoAsset({
 		shapeId: shape.id,
 		assetId: shape.props.assetId,
 		width: shape.props.w,
 	})
+	const isEditing = useIsEditing(shape.id)
+	const prefersReducedMotion = usePrefersReducedMotion()
+	const { Spinner } = useEditorComponents()
 
 	const rVideo = useRef<HTMLVideoElement>(null!)
 
 	const [isLoaded, setIsLoaded] = useState(false)
-
 	const [isFullscreen, setIsFullscreen] = useState(false)
 
 	useEffect(() => {
 		const fullscreenChange = () => setIsFullscreen(document.fullscreenElement === rVideo.current)
 		document.addEventListener('fullscreenchange', fullscreenChange)
-
 		return () => document.removeEventListener('fullscreenchange', fullscreenChange)
 	})
 
 	const handleLoadedData = useCallback<ReactEventHandler<HTMLVideoElement>>((e) => {
 		const video = e.currentTarget
 		if (!video) return
-
 		setIsLoaded(true)
 	}, [])
 
-	// If the current time changes and we're not editing the video, update the video time
 	useEffect(() => {
 		const video = rVideo.current
 		if (!video) return
-
 		if (isEditing) {
 			if (document.activeElement !== video) {
 				video.focus()
