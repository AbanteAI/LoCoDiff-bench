
index 31d2c13e8..84f7142b6 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmpknre9s_6_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpyobp5o_x_actual.txt	
@@ -132,11 +132,6 @@ export default class Store extends EventEmitter<{
   // At least one of the injected renderers contains (DEV only) owner metadata.
   _hasOwnerMetadata: boolean = false;
 
-  // Map of ID to (mutable) Element.
-  // Elements are mutated to avoid excessive cloning during tree updates.
-  // The InspectedElement Suspense cache also relies on this mutability for its WeakMap usage.
-  _idToElement: Map<number, Element> = new Map();
-
   // Should the React Native style editor panel be shown?
   _isNativeStyleEditorSupported: boolean = false;
 
@@ -819,7 +814,9 @@ export default class Store extends EventEmitter<{
 
           const weightDelta = 1 - element.weight;
 
-          let parentElement = this._idToElement.get(element.parentID);
+          let parentElement: void | Element = this._idToElement.get(
+            element.parentID,
+          );
           while (parentElement !== undefined) {
             // We don't need to break on a collapsed parent in the same way as the expand case below.
             // That's because collapsing a node doesn't "bubble" and affect its parents.
@@ -843,7 +840,9 @@ export default class Store extends EventEmitter<{
               : currentElement.weight;
             const weightDelta = newWeight - oldWeight;
 
-            let parentElement = this._idToElement.get(currentElement.parentID);
+            let parentElement: void | Element = this._idToElement.get(
+              currentElement.parentID,
+            );
             while (parentElement !== undefined) {
               parentElement.weight += weightDelta;
               if (parentElement.isCollapsed) {
@@ -867,8 +866,11 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
-          weightAcrossRoots += weight;
+          const elementByID = this.getElementByID(rootID);
+          if (elementByID) {
+            const {weight} = elementByID;
+            weightAcrossRoots += weight;
+          }
         });
         this._weightAcrossRoots = weightAcrossRoots;
 
