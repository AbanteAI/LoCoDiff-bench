
index 31d2c13e8..144370f96 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmpkzp58sb2_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpo_1l4ub__actual.txt	
@@ -143,11 +143,15 @@ export default class Store extends EventEmitter<{
   _nativeStyleEditorValidAttributes: $ReadOnlyArray<string> | null = null;
 
   // Older backends don't support an explicit bridge protocol,
-  // so we should timeout eventually and show a downgrade message.
+  // so we should fallback eventually and show a downgrade message.
   _onBridgeProtocolTimeoutID: TimeoutID | null = null;
 
-  // Map of element (id) to the set of elements (ids) it owns.
-  // This map enables getOwnersListForElement() to avoid traversing the entire tree.
+  // At least one of the currently mounted roots support the Legacy profiler.
+  _rootSupportsBasicProfiling: boolean = false;
+
+  // At least one of the currently mounted roots support the Timeline profiler.
+  _rootSupportsTimelineProfiling: boolean = false;
+
   _ownersMap: Map<number, Set<number>> = new Map();
 
   _profilerStore: ProfilerStore;
@@ -177,8 +181,9 @@ export default class Store extends EventEmitter<{
   _isReloadAndProfileBackendSupported: boolean = false;
 
   // These options default to false but may be updated as roots are added and removed.
-  _rootSupportsBasicProfiling: boolean = false;
-  _rootSupportsTimelineProfiling: boolean = false;
+  _hasOwnerMetadata: boolean;
+  _rootSupportsBasicProfiling: boolean;
+  _rootSupportsTimelineProfiling: boolean;
 
   _bridgeProtocol: BridgeProtocol | null = null;
   _unsupportedBridgeProtocolDetected: boolean = false;
@@ -475,10 +480,6 @@ export default class Store extends EventEmitter<{
     return this._supportsTimeline;
   }
 
-  get supportsTraceUpdates(): boolean {
-    return this._supportsTraceUpdates;
-  }
-
   get unsupportedBridgeProtocolDetected(): boolean {
     return this._unsupportedBridgeProtocolDetected;
   }
@@ -556,7 +557,6 @@ export default class Store extends EventEmitter<{
 
           return null;
         }
-
         const childWeight = child.isCollapsed ? 1 : child.weight;
 
         if (index <= currentWeight + childWeight) {
@@ -587,7 +587,6 @@ export default class Store extends EventEmitter<{
     return element;
   }
 
-  // Returns a tuple of [id, index]
   getElementsWithErrorsAndWarnings(): ErrorAndWarningTuples {
     if (!this._shouldShowWarningsAndErrors) {
       return [];
@@ -867,7 +866,7 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
+          const {weight} = (this.getElementByID(rootID): any);
           weightAcrossRoots += weight;
         });
         this._weightAcrossRoots = weightAcrossRoots;
@@ -1196,7 +1195,6 @@ export default class Store extends EventEmitter<{
               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
@@ -1283,6 +1281,26 @@ export default class Store extends EventEmitter<{
           }
           break;
         }
+        case TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
+          // Base duration updates are only sent while profiling is in progress.
+          // We can ignore them at this point.
+          // The profiler UI uses them lazily in order to generate the tree.
+          i += 3;
+          break;
+        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
+          const id = operations[i + 1];
+          const errorCount = operations[i + 2];
+          const warningCount = operations[i + 3];
+
+          i += 4;
+
+          if (errorCount > 0 || warningCount > 0) {
+            this._errorsAndWarnings.set(id, {errorCount, warningCount});
+          } else if (this._errorsAndWarnings.has(id)) {
+            this._errorsAndWarnings.delete(id);
+          }
+          haveErrorsOrWarningsChanged = true;
+          break;
         case TREE_OPERATION_SET_SUBTREE_MODE: {
           const id = operations[i + 1];
           const mode = operations[i + 2];
@@ -1305,26 +1323,6 @@ export default class Store extends EventEmitter<{
           }
           break;
         }
-        case TREE_OPERATION_UPDATE_TREE_BASE_DURATION:
-          // Base duration updates are only sent while profiling is in progress.
-          // We can ignore them at this point.
-          // The profiler UI uses them lazily in order to generate the tree.
-          i += 3;
-          break;
-        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
-          const id = operations[i + 1];
-          const errorCount = operations[i + 2];
-          const warningCount = operations[i + 3];
-
-          i += 4;
-
-          if (errorCount > 0 || warningCount > 0) {
-            this._errorsAndWarnings.set(id, {errorCount, warningCount});
-          } else if (this._errorsAndWarnings.has(id)) {
-            this._errorsAndWarnings.delete(id);
-          }
-          haveErrorsOrWarningsChanged = true;
-          break;
         default:
           this._throwAndEmitError(
             new UnsupportedBridgeOperationError(
