
index 31d2c13e8..bf4e45876 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmpz9nqo_yt_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpz5tw563y_actual.txt	
@@ -1,3 +1,5 @@
+// @flow
+
 /**
  * Copyright (c) Meta Platforms, Inc. and affiliates.
  *
@@ -39,6 +41,7 @@ import {
 } from 'react-devtools-shared/src/bridge';
 import {StrictMode} from 'react-devtools-shared/src/frontend/types';
 import {withPermissionsCheck} from 'react-devtools-shared/src/frontend/utils/withPermissionsCheck';
+import type {DevToolsHookSettings} from '../backend/types';
 
 import type {
   Element,
@@ -50,7 +53,6 @@ import type {
   BridgeProtocol,
 } from 'react-devtools-shared/src/bridge';
 import UnsupportedBridgeOperationError from 'react-devtools-shared/src/UnsupportedBridgeOperationError';
-import type {DevToolsHookSettings} from '../backend/types';
 
 const debug = (methodName: string, ...args: Array<string>) => {
   if (__DEBUG__) {
@@ -140,6 +142,10 @@ export default class Store extends EventEmitter<{
   // Should the React Native style editor panel be shown?
   _isNativeStyleEditorSupported: boolean = false;
 
+  // Can DevTools use sync XHR requests?
+  // If not, features like reload-and-profile will not work correctly and must be disabled.
+  // This current limitation applies only to web extension builds
+  // and will need to be reconsidered in the future if we add support for reload to React Native.
   _nativeStyleEditorValidAttributes: $ReadOnlyArray<string> | null = null;
 
   // Older backends don't support an explicit bridge protocol,
@@ -170,17 +176,15 @@ export default class Store extends EventEmitter<{
   // These options may be initially set by a configuration option when constructing the Store.
   _supportsInspectMatchingDOMElement: boolean = false;
   _supportsClickToInspect: boolean = false;
-  _supportsTimeline: boolean = false;
-  _supportsTraceUpdates: boolean = false;
-
   _isReloadAndProfileFrontendSupported: boolean = false;
   _isReloadAndProfileBackendSupported: boolean = false;
+  _supportsTimeline: boolean = false;
+  _supportsTraceUpdates: boolean = false;
 
   // These options default to false but may be updated as roots are added and removed.
   _rootSupportsBasicProfiling: boolean = false;
   _rootSupportsTimelineProfiling: boolean = false;
 
-  _bridgeProtocol: BridgeProtocol | null = null;
   _unsupportedBridgeProtocolDetected: boolean = false;
   _unsupportedRendererVersionDetected: boolean = false;
 
@@ -263,9 +267,6 @@ export default class Store extends EventEmitter<{
       'unsupportedRendererVersion',
       this.onBridgeUnsupportedRendererVersion,
     );
-
-    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
-
     bridge.addListener('backendVersion', this.onBridgeBackendVersion);
     bridge.addListener('saveToClipboard', this.onSaveToClipboard);
     bridge.addListener('hookSettings', this.onHookSettings);
@@ -312,68 +313,6 @@ export default class Store extends EventEmitter<{
     return this._backendVersion;
   }
 
-  get collapseNodesByDefault(): boolean {
-    return this._collapseNodesByDefault;
-  }
-  set collapseNodesByDefault(value: boolean): void {
-    this._collapseNodesByDefault = value;
-
-    localStorageSetItem(
-      LOCAL_STORAGE_COLLAPSE_ROOTS_BY_DEFAULT_KEY,
-      value ? 'true' : 'false',
-    );
-
-    this.emit('collapseNodesByDefault');
-  }
-
-  get componentFilters(): Array<ComponentFilter> {
-    return this._componentFilters;
-  }
-  set componentFilters(value: Array<ComponentFilter>): void {
-    if (this._profilerStore.isProfilingBasedOnUserInput) {
-      // Re-mounting a tree while profiling is in progress might break a lot of assumptions.
-      // If necessary, we could support this- but it doesn't seem like a necessary use case.
-      this._throwAndEmitError(
-        Error('Cannot modify filter preferences while profiling'),
-      );
-    }
-
-    // Filter updates are expensive to apply (since they impact the entire tree).
-    // Let's determine if they've changed and avoid doing this work if they haven't.
-    const prevEnabledComponentFilters = this._componentFilters.filter(
-      filter => filter.isEnabled,
-    );
-    const nextEnabledComponentFilters = value.filter(
-      filter => filter.isEnabled,
-    );
-    let haveEnabledFiltersChanged =
-      prevEnabledComponentFilters.length !== nextEnabledComponentFilters.length;
-    if (!haveEnabledFiltersChanged) {
-      for (let i = 0; i < nextEnabledComponentFilters.length; i++) {
-        const prevFilter = prevEnabledComponentFilters[i];
-        const nextFilter = nextEnabledComponentFilters[i];
-        if (shallowDiffers(prevFilter, nextFilter)) {
-          haveEnabledFiltersChanged = true;
-          break;
-        }
-      }
-    }
-
-    this._componentFilters = value;
-
-    // Update persisted filter preferences stored in localStorage.
-    setSavedComponentFilters(value);
-
-    // Notify the renderer that filter preferences have changed.
-    // This is an expensive operation; it unmounts and remounts the entire tree,
-    // so only do it if the set of enabled component filters has changed.
-    if (haveEnabledFiltersChanged) {
-      this._bridge.send('updateComponentFilters', value);
-    }
-
-    this.emit('componentFilters');
-  }
-
   get bridgeProtocol(): BridgeProtocol | null {
     return this._bridgeProtocol;
   }
@@ -436,10 +375,6 @@ export default class Store extends EventEmitter<{
     return this._rootIDToRendererID;
   }
 
-  get roots(): $ReadOnlyArray<number> {
-    return this._roots;
-  }
-
   // At least one of the currently mounted roots support the Legacy profiler.
   get rootSupportsBasicProfiling(): boolean {
     return this._rootSupportsBasicProfiling;
@@ -469,8 +404,6 @@ export default class Store extends EventEmitter<{
     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -587,7 +520,6 @@ export default class Store extends EventEmitter<{
     return element;
   }
 
-  // Returns a tuple of [id, index]
   getElementsWithErrorsAndWarnings(): ErrorAndWarningTuples {
     if (!this._shouldShowWarningsAndErrors) {
       return [];
@@ -789,7 +721,7 @@ export default class Store extends EventEmitter<{
 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -843,7 +775,9 @@ export default class Store extends EventEmitter<{
               : currentElement.weight;
             const weightDelta = newWeight - oldWeight;
 
-            let parentElement = this._idToElement.get(currentElement.parentID);
+            let parentElement = this._idToElement.get(
+              currentElement.parentID,
+            );
             while (parentElement !== undefined) {
               parentElement.weight += weightDelta;
               if (parentElement.isCollapsed) {
@@ -867,7 +801,9 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
+          const {weight} = this.getElementByID(rootID) ?? {
+            weight: 0,
+          };
           weightAcrossRoots += weight;
         });
         this._weightAcrossRoots = weightAcrossRoots;
@@ -905,20 +841,6 @@ export default class Store extends EventEmitter<{
     }
   };
 
-  _recursivelyUpdateSubtree(
-    id: number,
-    callback: (element: Element) => void,
-  ): void {
-    const element = this._idToElement.get(id);
-    if (element) {
-      callback(element);
-
-      element.children.forEach(child =>
-        this._recursivelyUpdateSubtree(child, callback),
-      );
-    }
-  }
-
   onBridgeNativeStyleEditorSupported: ({
     isSupported: boolean,
     validAttributes: ?$ReadOnlyArray<string>,
@@ -992,9 +914,6 @@ export default class Store extends EventEmitter<{
               debug('Add', `new root node ${id}`);
             }
 
-            const isStrictModeCompliant = operations[i] > 0;
-            i++;
-
             const supportsBasicProfiling =
               (operations[i] & PROFILING_FLAG_BASIC_SUPPORT) !== 0;
             const supportsTimeline =
@@ -1028,8 +947,10 @@ export default class Store extends EventEmitter<{
 
             // Not all roots support StrictMode;
             // don't flag a root as non-compliant unless it also supports StrictMode.
-            const isStrictModeNonCompliant =
-              !isStrictModeCompliant && supportsStrictMode;
+            const isStrictModeNonCompliant = supportsStrictMode
+              ? operations[i] > 0
+              : false;
+            i++;
 
             this._idToElement.set(id, {
               children: [],
@@ -1196,7 +1117,6 @@ export default class Store extends EventEmitter<{
               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
@@ -1441,6 +1361,8 @@ export default class Store extends EventEmitter<{
     bridge.removeListener('backendVersion', this.onBridgeBackendVersion);
     bridge.removeListener('bridgeProtocol', this.onBridgeProtocol);
     bridge.removeListener('saveToClipboard', this.onSaveToClipboard);
+    bridge.removeListener('hookSettings', this.onHookSettings);
+    bridge.removeListener('backendInitialized', this.onBackendInitialized);
     bridge.removeListener('selectElement', this.onHostInstanceSelected);
 
     if (this._onBridgeProtocolTimeoutID !== null) {
