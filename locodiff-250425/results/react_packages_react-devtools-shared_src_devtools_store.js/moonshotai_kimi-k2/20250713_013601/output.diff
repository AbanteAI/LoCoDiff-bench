
index 31d2c13e8..cd44180e6 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmp7hyiessi_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpn7hbhz6k_actual.txt	
@@ -31,7 +31,6 @@ import {
 } from '../utils';
 import {localStorageGetItem, localStorageSetItem} from '../storage';
 import {__DEBUG__} from '../constants';
-import {printStore} from './utils';
 import ProfilerStore from './ProfilerStore';
 import {
   BRIDGE_PROTOCOL,
@@ -39,7 +38,6 @@ import {
 } from 'react-devtools-shared/src/bridge';
 import {StrictMode} from 'react-devtools-shared/src/frontend/types';
 import {withPermissionsCheck} from 'react-devtools-shared/src/frontend/utils/withPermissionsCheck';
-
 import type {
   Element,
   ComponentFilter,
@@ -140,8 +138,6 @@ export default class Store extends EventEmitter<{
   // Should the React Native style editor panel be shown?
   _isNativeStyleEditorSupported: boolean = false;
 
-  _nativeStyleEditorValidAttributes: $ReadOnlyArray<string> | null = null;
-
   // Older backends don't support an explicit bridge protocol,
   // so we should timeout eventually and show a downgrade message.
   _onBridgeProtocolTimeoutID: TimeoutID | null = null;
@@ -163,7 +159,6 @@ export default class Store extends EventEmitter<{
   _roots: $ReadOnlyArray<number> = [];
 
   _rootIDToCapabilities: Map<number, Capabilities> = new Map();
-
   // Renderer ID is needed to support inspection fiber props, state, and hooks.
   _rootIDToRendererID: Map<number, number> = new Map();
 
@@ -217,19 +212,19 @@ export default class Store extends EventEmitter<{
       isProfiling = config.isProfiling === true;
 
       const {
-        supportsInspectMatchingDOMElement,
         supportsClickToInspect,
+        supportsInspectMatchingDOMElement,
         supportsReloadAndProfile,
         supportsTimeline,
         supportsTraceUpdates,
         checkBridgeProtocolCompatibility,
       } = config;
-      if (supportsInspectMatchingDOMElement) {
-        this._supportsInspectMatchingDOMElement = true;
-      }
       if (supportsClickToInspect) {
         this._supportsClickToInspect = true;
       }
+      if (supportsInspectMatchingDOMElement) {
+        this._supportsInspectMatchingDOMElement = true;
+      }
       if (supportsReloadAndProfile) {
         this._isReloadAndProfileFrontendSupported = true;
       }
@@ -263,9 +258,6 @@ export default class Store extends EventEmitter<{
       'unsupportedRendererVersion',
       this.onBridgeUnsupportedRendererVersion,
     );
-
-    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
-
     bridge.addListener('backendVersion', this.onBridgeBackendVersion);
     bridge.addListener('saveToClipboard', this.onSaveToClipboard);
     bridge.addListener('hookSettings', this.onHookSettings);
@@ -312,68 +304,6 @@ export default class Store extends EventEmitter<{
     return this._backendVersion;
   }
 
-  get collapseNodesByDefault(): boolean {
-    return this._collapseNodesByDefault;
-  }
-  set collapseNodesByDefault(value: boolean): void {
-    this._collapseNodesByDefault = value;
-
-    localStorageSetItem(
-      LOCAL_STORAGE_COLLAPSE_ROOTS_BY_DEFAULT_KEY,
-      value ? 'true' : 'false',
-    );
-
-    this.emit('collapseNodesByDefault');
-  }
-
-  get componentFilters(): Array<ComponentFilter> {
-    return this._componentFilters;
-  }
-  set componentFilters(value: Array<ComponentFilter>): void {
-    if (this._profilerStore.isProfilingBasedOnUserInput) {
-      // Re-mounting a tree while profiling is in progress might break a lot of assumptions.
-      // If necessary, we could support this- but it doesn't seem like a necessary use case.
-      this._throwAndEmitError(
-        Error('Cannot modify filter preferences while profiling'),
-      );
-    }
-
-    // Filter updates are expensive to apply (since they impact the entire tree).
-    // Let's determine if they've changed and avoid doing this work if they haven't.
-    const prevEnabledComponentFilters = this._componentFilters.filter(
-      filter => filter.isEnabled,
-    );
-    const nextEnabledComponentFilters = value.filter(
-      filter => filter.isEnabled,
-    );
-    let haveEnabledFiltersChanged =
-      prevEnabledComponentFilters.length !== nextEnabledComponentFilters.length;
-    if (!haveEnabledFiltersChanged) {
-      for (let i = 0; i < nextEnabledComponentFilters.length; i++) {
-        const prevFilter = prevEnabledComponentFilters[i];
-        const nextFilter = nextEnabledComponentFilters[i];
-        if (shallowDiffers(prevFilter, nextFilter)) {
-          haveEnabledFiltersChanged = true;
-          break;
-        }
-      }
-    }
-
-    this._componentFilters = value;
-
-    // Update persisted filter preferences stored in localStorage.
-    setSavedComponentFilters(value);
-
-    // Notify the renderer that filter preferences have changed.
-    // This is an expensive operation; it unmounts and remounts the entire tree,
-    // so only do it if the set of enabled component filters has changed.
-    if (haveEnabledFiltersChanged) {
-      this._bridge.send('updateComponentFilters', value);
-    }
-
-    this.emit('componentFilters');
-  }
-
   get bridgeProtocol(): BridgeProtocol | null {
     return this._bridgeProtocol;
   }
@@ -402,6 +332,10 @@ export default class Store extends EventEmitter<{
     return this._hasOwnerMetadata;
   }
 
+  get lastSelectedHostInstanceElementId(): Element['id'] | null {
+    return this._lastSelectedHostInstanceElementId;
+  }
+
   get nativeStyleEditorValidAttributes(): $ReadOnlyArray<string> | null {
     return this._nativeStyleEditorValidAttributes;
   }
@@ -436,28 +370,26 @@ export default class Store extends EventEmitter<{
     return this._rootIDToRendererID;
   }
 
-  get roots(): $ReadOnlyArray<number> {
-    return this._roots;
-  }
-
-  // At least one of the currently mounted roots support the Legacy profiler.
   get rootSupportsBasicProfiling(): boolean {
     return this._rootSupportsBasicProfiling;
   }
 
-  // At least one of the currently mounted roots support the Timeline profiler.
   get rootSupportsTimelineProfiling(): boolean {
     return this._rootSupportsTimelineProfiling;
   }
 
-  get supportsInspectMatchingDOMElement(): boolean {
-    return this._supportsInspectMatchingDOMElement;
+  get roots(): $ReadOnlyArray<number> {
+    return this._roots;
   }
 
   get supportsClickToInspect(): boolean {
     return this._supportsClickToInspect;
   }
 
+  get supportsInspectMatchingDOMElement(): boolean {
+    return this._supportsInspectMatchingDOMElement;
+  }
+
   get supportsNativeStyleEditor(): boolean {
     return this._isNativeStyleEditorSupported;
   }
@@ -469,8 +401,6 @@ export default class Store extends EventEmitter<{
     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -487,8 +417,40 @@ export default class Store extends EventEmitter<{
     return this._unsupportedRendererVersionDetected;
   }
 
-  get lastSelectedHostInstanceElementId(): Element['id'] | null {
-    return this._lastSelectedHostInstanceElementId;
+  clearErrorsAndWarnings(): void {
+    this._rootIDToRendererID.forEach(rendererID => {
+      this._bridge.send('clearErrorsAndWarnings', {
+        rendererID,
+      });
+    });
+  }
+
+  clearErrorsForElement(id: number): void {
+    const rendererID = this.getRendererIDForElement(id);
+    if (rendererID === null) {
+      console.warn(
+        `Unable to find rendererID for element ${id} when clearing errors.`,
+      );
+    } else {
+      this._bridge.send('clearErrorsForFiberID', {
+        rendererID,
+        id,
+      });
+    }
+  }
+
+  clearWarningsForElement(id: number): void {
+    const rendererID = this.getRendererIDForElement(id);
+    if (rendererID === null) {
+      console.warn(
+        `Unable to find rendererID for element ${id} when clearing warnings.`,
+      );
+    } else {
+      this._bridge.send('clearWarningsForFiberID', {
+        rendererID,
+        id,
+      });
+    }
   }
 
   containsElement(id: number): boolean {
@@ -789,12 +751,12 @@ export default class Store extends EventEmitter<{
 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
         current = this._idToElement.get(current.parentID);
-        if (current != null && current.isCollapsed) {
+        if (current !== undefined && current.isCollapsed) {
           return true;
         }
       }
@@ -843,7 +805,9 @@ export default class Store extends EventEmitter<{
               : currentElement.weight;
             const weightDelta = newWeight - oldWeight;
 
-            let parentElement = this._idToElement.get(currentElement.parentID);
+            let parentElement = this._idToElement.get(
+              currentElement.parentID,
+            );
             while (parentElement !== undefined) {
               parentElement.weight += weightDelta;
               if (parentElement.isCollapsed) {
@@ -867,7 +831,7 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
+          const {weight} = this.getElementByID(rootID);
           weightAcrossRoots += weight;
         });
         this._weightAcrossRoots = weightAcrossRoots;
@@ -886,7 +850,7 @@ export default class Store extends EventEmitter<{
   ) => void = (parentElement, weightDelta) => {
     let isInsideCollapsedSubTree = false;
 
-    while (parentElement != null) {
+    while (parentElement !== undefined && parentElement != null) {
       parentElement.weight += weightDelta;
 
       // Additions and deletions within a collapsed subtree should not bubble beyond the collapsed parent.
@@ -1118,6 +1082,7 @@ export default class Store extends EventEmitter<{
               set.add(id);
             }
           }
+
           break;
         }
         case TREE_OPERATION_REMOVE: {
@@ -1156,8 +1121,8 @@ export default class Store extends EventEmitter<{
               }
 
               this._roots = this._roots.filter(rootID => rootID !== id);
-              this._rootIDToRendererID.delete(id);
               this._rootIDToCapabilities.delete(id);
+              this._rootIDToRendererID.delete(id);
 
               haveRootsChanged = true;
             } else {
@@ -1196,7 +1161,6 @@ export default class Store extends EventEmitter<{
               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
@@ -1279,8 +1243,26 @@ export default class Store extends EventEmitter<{
           i += numChildren;
 
           if (__DEBUG__) {
-            debug('Re-order', `Node ${id} children ${children.join(',')}`);
+            debug(
+              'Re-order',
+              `Node ${id} children ${Array.from(children).join(',')}`,
+            );
+          }
+          break;
+        }
+        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS: {
+          const id = operations[i + 1];
+          const errorCount = operations[i + 2];
+          const warningCount = operations[i + 3];
+
+          i += 4;
+
+          if (errorCount > 0 || warningCount > 0) {
+            this._errorsAndWarnings.set(id, {errorCount, warningCount});
+          } else if (this._errorsAndWarnings.has(id)) {
+            this._errorsAndWarnings.delete(id);
           }
+          haveErrorsOrWarningsChanged = true;
           break;
         }
         case TREE_OPERATION_SET_SUBTREE_MODE: {
@@ -1298,10 +1280,7 @@ export default class Store extends EventEmitter<{
           }
 
           if (__DEBUG__) {
-            debug(
-              'Subtree mode',
-              `Subtree with root ${id} set to mode ${mode}`,
-            );
+            debug('Subtree mode', `Subtree with root ${id} set to mode ${mode}`);
           }
           break;
         }
@@ -1311,20 +1290,6 @@ export default class Store extends EventEmitter<{
           // The profiler UI uses them lazily in order to generate the tree.
           i += 3;
           break;
-        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
-          const id = operations[i + 1];
-          const errorCount = operations[i + 2];
-          const warningCount = operations[i + 3];
-
-          i += 4;
-
-          if (errorCount > 0 || warningCount > 0) {
-            this._errorsAndWarnings.set(id, {errorCount, warningCount});
-          } else if (this._errorsAndWarnings.has(id)) {
-            this._errorsAndWarnings.delete(id);
-          }
-          haveErrorsOrWarningsChanged = true;
-          break;
         default:
           this._throwAndEmitError(
             new UnsupportedBridgeOperationError(
@@ -1463,37 +1428,6 @@ export default class Store extends EventEmitter<{
     this.emit('unsupportedRendererVersionDetected');
   };
 
-  onBridgeBackendVersion: (backendVersion: string) => void = backendVersion => {
-    this._backendVersion = backendVersion;
-    this.emit('backendVersion');
-  };
-
-  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void =
-    bridgeProtocol => {
-      if (this._onBridgeProtocolTimeoutID !== null) {
-        clearTimeout(this._onBridgeProtocolTimeoutID);
-        this._onBridgeProtocolTimeoutID = null;
-      }
-
-      this._bridgeProtocol = bridgeProtocol;
-
-      if (bridgeProtocol.version !== currentBridgeProtocol.version) {
-        // Technically newer versions of the frontend can, at least for now,
-        // gracefully handle older versions of the backend protocol.
-        // So for now we don't need to display the unsupported dialog.
-      }
-    };
-
-  onBridgeProtocolTimeout: () => void = () => {
-    this._onBridgeProtocolTimeoutID = null;
-
-    // If we timed out, that indicates the backend predates the bridge protocol,
-    // so we can set a fake version (0) to trigger the downgrade message.
-    this._bridgeProtocol = BRIDGE_PROTOCOL[0];
-
-    this.emit('unsupportedBridgeProtocolDetected');
-  };
-
   onSaveToClipboard: (text: string) => void = text => {
     withPermissionsCheck({permissions: ['clipboardWrite']}, () => copy(text))();
   };
@@ -1515,7 +1449,6 @@ export default class Store extends EventEmitter<{
 
     this._bridge.send('getBackendVersion');
     this._bridge.send('getIfHasUnsupportedRendererVersion');
-    this._bridge.send('getHookSettings'); // Warm up cached hook settings
   };
 
   onHostInstanceSelected: (elementId: number) => void = elementId => {
@@ -1574,4 +1507,35 @@ export default class Store extends EventEmitter<{
     // and for unit testing the Store itself.
     throw error;
   }
+
+  onBridgeBackendVersion: (backendVersion: string) => void = backendVersion => {
+    this._backendVersion = backendVersion;
+    this.emit('backendVersion');
+  };
+
+  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void =
+    bridgeProtocol => {
+      if (this._onBridgeProtocolTimeoutID !== null) {
+        clearTimeout(this._onBridgeProtocolTimeoutID);
+        this._onBridgeProtocolTimeoutID = null;
+      }
+
+      this._bridgeProtocol = bridgeProtocol;
+
+      if (bridgeProtocol.version !== currentBridgeProtocol.version) {
+        // Technically newer versions of the frontend can, at least for now,
+        // gracefully handle older versions of the backend protocol.
+        // So for now we don't need to display the unsupported dialog.
+      }
+    };
+
+  onBridgeProtocolTimeout: () => void = () => {
+    this._onBridgeProtocolTimeoutID = null;
+
+    // If we timed out, that indicates the backend predates the bridge protocol,
+    // so we can set a fake version (0) to trigger the downgrade message.
+    this._bridgeProtocol = BRIDGE_PROTOCOL[0];
+
+    this.emit('unsupportedBridgeProtocolDetected');
+  };
 }
\ No newline at end of file
