
index 31d2c13e..1ea40d68 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmpznz5_6uw_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpifkuu_vf_actual.txt	
@@ -789,7 +789,7 @@ export default class Store extends EventEmitter<{
 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -920,6 +920,9 @@ export default class Store extends EventEmitter<{
   }
 
   onBridgeNativeStyleEditorSupported: ({
+    isSupported,
+    validAttributes,
+  }: {
     isSupported: boolean,
     validAttributes: ?$ReadOnlyArray<string>,
   }) => void = ({isSupported, validAttributes}) => {
@@ -1001,7 +1004,7 @@ export default class Store extends EventEmitter<{
               (operations[i] & PROFILING_FLAG_TIMELINE_SUPPORT) !== 0;
             i++;
 
-            let supportsStrictMode = false;
+            const supportsStrictMode = false;
             let hasOwnerMetadata = false;
 
             // If we don't know the bridge protocol, guess that we're dealing with the latest.
@@ -1208,7 +1211,7 @@ export default class Store extends EventEmitter<{
             debug(`Remove root ${id}`);
           }
 
-          const recursivelyDeleteElements = (elementID: number) => {
+          const recursivelyDeleteElements = elementID => {
             const element = this._idToElement.get(elementID);
             this._idToElement.delete(elementID);
             if (element) {
@@ -1468,31 +1471,33 @@ export default class Store extends EventEmitter<{
     this.emit('backendVersion');
   };
 
-  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void =
-    bridgeProtocol => {
-      if (this._onBridgeProtocolTimeoutID !== null) {
-        clearTimeout(this._onBridgeProtocolTimeoutID);
-        this._onBridgeProtocolTimeoutID = null;
-      }
+  onHostInstanceSelected: (elementId: number) => void = elementId => {
+    if (this._lastSelectedHostInstanceElementId === elementId) {
+      return;
+    }
 
-      this._bridgeProtocol = bridgeProtocol;
+    this._lastSelectedHostInstanceElementId = elementId;
+    // By the time we emit this, there is no guarantee that TreeContext is rendered.
+    this.emit('hostInstanceSelected', elementId);
+  };
 
-      if (bridgeProtocol.version !== currentBridgeProtocol.version) {
-        // Technically newer versions of the frontend can, at least for now,
-        // gracefully handle older versions of the backend protocol.
-        // So for now we don't need to display the unsupported dialog.
-      }
-    };
+  onHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
+    settings => {
+      this._hookSettings = settings;
 
-  onBridgeProtocolTimeout: () => void = () => {
-    this._onBridgeProtocolTimeoutID = null;
+      this.setShouldShowWarningsAndErrors(settings.showInlineWarningsAndErrors);
+      this.emit('hookSettings', settings);
+    };
 
-    // If we timed out, that indicates the backend predates the bridge protocol,
-    // so we can set a fake version (0) to trigger the downgrade message.
-    this._bridgeProtocol = BRIDGE_PROTOCOL[0];
+  setShouldShowWarningsAndErrors(status: boolean): void {
+    const previousStatus = this._shouldShowWarningsAndErrors;
+    this._shouldShowWarningsAndErrors = status;
 
-    this.emit('unsupportedBridgeProtocolDetected');
-  };
+    if (previousStatus !== status) {
+      // Propagate to subscribers, although tree state has not changed
+      this.emit('mutated', [[], new Map()]);
+    }
+  }
 
   onSaveToClipboard: (text: string) => void = text => {
     withPermissionsCheck({permissions: ['clipboardWrite']}, () => copy(text))();
@@ -1518,16 +1523,6 @@ export default class Store extends EventEmitter<{
     this._bridge.send('getHookSettings'); // Warm up cached hook settings
   };
 
-  onHostInstanceSelected: (elementId: number) => void = elementId => {
-    if (this._lastSelectedHostInstanceElementId === elementId) {
-      return;
-    }
-
-    this._lastSelectedHostInstanceElementId = elementId;
-    // By the time we emit this, there is no guarantee that TreeContext is rendered.
-    this.emit('hostInstanceSelected', elementId);
-  };
-
   getHookSettings: () => void = () => {
     if (this._hookSettings != null) {
       this.emit('hookSettings', this._hookSettings);
@@ -1544,23 +1539,31 @@ export default class Store extends EventEmitter<{
       this.emit('settingsUpdated', settings);
     };
 
-  onHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
-    settings => {
-      this._hookSettings = settings;
+  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void =
+    bridgeProtocol => {
+      if (this._onBridgeProtocolTimeoutID !== null) {
+        clearTimeout(this._onBridgeProtocolTimeoutID);
+        this._onBridgeProtocolTimeoutID = null;
+      }
 
-      this.setShouldShowWarningsAndErrors(settings.showInlineWarningsAndErrors);
-      this.emit('hookSettings', settings);
+      this._bridgeProtocol = bridgeProtocol;
+
+      if (bridgeProtocol.version !== currentBridgeProtocol.version) {
+        // Technically newer versions of the frontend can, at least for now,
+        // gracefully handle older versions of the backend protocol.
+        // So for now we don't need to display the unsupported dialog.
+      }
     };
 
-  setShouldShowWarningsAndErrors(status: boolean): void {
-    const previousStatus = this._shouldShowWarningsAndErrors;
-    this._shouldShowWarningsAndErrors = status;
+  onBridgeProtocolTimeout: () => void = () => {
+    this._onBridgeProtocolTimeoutID = null;
 
-    if (previousStatus !== status) {
-      // Propagate to subscribers, although tree state has not changed
-      this.emit('mutated', [[], new Map()]);
-    }
-  }
+    // If we timed out, that indicates the backend predates the bridge protocol,
+    // so we can set a fake version (0) to trigger the downgrade message.
+    this._bridgeProtocol = BRIDGE_PROTOCOL[0];
+
+    this.emit('unsupportedBridgeProtocolDetected');
+  };
 
   // The Store should never throw an Error without also emitting an event.
   // Otherwise Store errors will be invisible to users,
