--- react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual)@@ -217,11 +217,11 @@       isProfiling = config.isProfiling === true;
 
       const {
-        supportsInspectMatchingDOMElement,
-        supportsClickToInspect,
         supportsReloadAndProfile,
         supportsTimeline,
         supportsTraceUpdates,
+        supportsInspectMatchingDOMElement,
+        supportsClickToInspect,
         checkBridgeProtocolCompatibility,
       } = config;
       if (supportsInspectMatchingDOMElement) {
@@ -263,18 +263,17 @@       'unsupportedRendererVersion',
       this.onBridgeUnsupportedRendererVersion,
     );
-
-    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
-
     bridge.addListener('backendVersion', this.onBridgeBackendVersion);
     bridge.addListener('saveToClipboard', this.onSaveToClipboard);
     bridge.addListener('hookSettings', this.onHookSettings);
     bridge.addListener('backendInitialized', this.onBackendInitialized);
     bridge.addListener('selectElement', this.onHostInstanceSelected);
+
+    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
   }
 
   // This is only used in tests to avoid memory leaks.
-  assertExpectedRootMapSizes() {
+  assertExpectedRootMapSizes(): void {
     if (this.roots.length === 0) {
       // The only safe time to assert these maps are empty is when the store is empty.
       this.assertMapSizeMatchesRootCount(this._idToElement, '_idToElement');
@@ -293,7 +292,7 @@   }
 
   // This is only used in tests to avoid memory leaks.
-  assertMapSizeMatchesRootCount(map: Map<any, any>, mapName: string) {
+  assertMapSizeMatchesRootCount(map: Map<any, any>, mapName: string): void {
     const expectedSize = this.roots.length;
     if (map.size !== expectedSize) {
       this._throwAndEmitError(
@@ -310,6 +309,10 @@ 
   get backendVersion(): string | null {
     return this._backendVersion;
+  }
+
+  get bridgeProtocol(): BridgeProtocol | null {
+    return this._bridgeProtocol;
   }
 
   get collapseNodesByDefault(): boolean {
@@ -374,10 +377,6 @@     this.emit('componentFilters');
   }
 
-  get bridgeProtocol(): BridgeProtocol | null {
-    return this._bridgeProtocol;
-  }
-
   get componentWithErrorCount(): number {
     if (!this._shouldShowWarningsAndErrors) {
       return 0;
@@ -789,7 +788,7 @@ 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -867,8 +866,11 @@       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
-          weightAcrossRoots += weight;
+          const root = this.getElementByID(rootID);
+          if (root !== null) {
+            const {weight} = root;
+            weightAcrossRoots += weight;
+          }
         });
         this._weightAcrossRoots = weightAcrossRoots;
 
@@ -886,7 +888,7 @@   ) => void = (parentElement, weightDelta) => {
     let isInsideCollapsedSubTree = false;
 
-    while (parentElement != null) {
+    while (parentElement !== undefined) {
       parentElement.weight += weightDelta;
 
       // Additions and deletions within a collapsed subtree should not bubble beyond the collapsed parent.
@@ -985,6 +987,8 @@                 `Cannot add node "${id}" because a node with that id is already in the Store.`,
               ),
             );
+
+            break;
           }
 
           if (type === ElementTypeRoot) {
@@ -1118,6 +1122,7 @@               set.add(id);
             }
           }
+
           break;
         }
         case TREE_OPERATION_REMOVE: {
@@ -1145,6 +1150,8 @@               this._throwAndEmitError(
                 Error(`Node "${id}" was removed before its children.`),
               );
+
+              break;
             }
 
             this._idToElement.delete(id);
@@ -1261,6 +1268,8 @@                 `Children cannot be added or removed during a reorder operation.`,
               ),
             );
+
+            break;
           }
 
           for (let j = 0; j < numChildren; j++) {
