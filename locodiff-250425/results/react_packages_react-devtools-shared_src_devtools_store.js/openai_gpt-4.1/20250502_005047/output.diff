
index 31d2c13e..9bd16453 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmpsliuyumi_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpb_nrd4u5_actual.txt	
@@ -151,7 +151,6 @@ export default class Store extends EventEmitter<{
   _ownersMap: Map<number, Set<number>> = new Map();
 
   _profilerStore: ProfilerStore;
-
   _recordChangeDescriptions: boolean = false;
 
   // Incremented each time the store is mutated.
@@ -312,6 +311,10 @@ export default class Store extends EventEmitter<{
     return this._backendVersion;
   }
 
+  get bridgeProtocol(): BridgeProtocol | null {
+    return this._bridgeProtocol;
+  }
+
   get collapseNodesByDefault(): boolean {
     return this._collapseNodesByDefault;
   }
@@ -374,10 +377,6 @@ export default class Store extends EventEmitter<{
     this.emit('componentFilters');
   }
 
-  get bridgeProtocol(): BridgeProtocol | null {
-    return this._bridgeProtocol;
-  }
-
   get componentWithErrorCount(): number {
     if (!this._shouldShowWarningsAndErrors) {
       return 0;
@@ -440,12 +439,10 @@ export default class Store extends EventEmitter<{
     return this._roots;
   }
 
-  // At least one of the currently mounted roots support the Legacy profiler.
   get rootSupportsBasicProfiling(): boolean {
     return this._rootSupportsBasicProfiling;
   }
 
-  // At least one of the currently mounted roots support the Timeline profiler.
   get rootSupportsTimelineProfiling(): boolean {
     return this._rootSupportsTimelineProfiling;
   }
@@ -469,8 +466,6 @@ export default class Store extends EventEmitter<{
     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -540,7 +535,6 @@ export default class Store extends EventEmitter<{
     // Skip over the root itself, because roots aren't visible in the Elements tree.
     let currentElement: Element = root;
     let currentWeight = rootWeight - 1;
-
     while (index !== currentWeight) {
       const numChildren = currentElement.children.length;
       for (let i = 0; i < numChildren; i++) {
@@ -587,52 +581,6 @@ export default class Store extends EventEmitter<{
     return element;
   }
 
-  // Returns a tuple of [id, index]
-  getElementsWithErrorsAndWarnings(): ErrorAndWarningTuples {
-    if (!this._shouldShowWarningsAndErrors) {
-      return [];
-    }
-
-    if (this._cachedErrorAndWarningTuples !== null) {
-      return this._cachedErrorAndWarningTuples;
-    }
-
-    const errorAndWarningTuples: ErrorAndWarningTuples = [];
-
-    this._errorsAndWarnings.forEach((_, id) => {
-      const index = this.getIndexOfElementID(id);
-      if (index !== null) {
-        let low = 0;
-        let high = errorAndWarningTuples.length;
-        while (low < high) {
-          const mid = (low + high) >> 1;
-          if (errorAndWarningTuples[mid].index > index) {
-            high = mid;
-          } else {
-            low = mid + 1;
-          }
-        }
-
-        errorAndWarningTuples.splice(low, 0, {id, index});
-      }
-    });
-
-    // Cache for later (at least until the tree changes again).
-    this._cachedErrorAndWarningTuples = errorAndWarningTuples;
-    return errorAndWarningTuples;
-  }
-
-  getErrorAndWarningCountForElementID(id: number): {
-    errorCount: number,
-    warningCount: number,
-  } {
-    if (!this._shouldShowWarningsAndErrors) {
-      return {errorCount: 0, warningCount: 0};
-    }
-
-    return this._errorsAndWarnings.get(id) || {errorCount: 0, warningCount: 0};
-  }
-
   getIndexOfElementID(id: number): number | null {
     const element = this.getElementByID(id);
 
@@ -789,7 +737,7 @@ export default class Store extends EventEmitter<{
 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -1175,7 +1123,6 @@ export default class Store extends EventEmitter<{
 
                 break;
               }
-
               const index = parentElement.children.indexOf(id);
               parentElement.children.splice(index, 1);
             }
@@ -1196,7 +1143,6 @@ export default class Store extends EventEmitter<{
               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
@@ -1562,6 +1508,52 @@ export default class Store extends EventEmitter<{
     }
   }
 
+  // Returns a tuple of [id, index]
+  getElementsWithErrorsAndWarnings(): ErrorAndWarningTuples {
+    if (!this._shouldShowWarningsAndErrors) {
+      return [];
+    }
+
+    if (this._cachedErrorAndWarningTuples !== null) {
+      return this._cachedErrorAndWarningTuples;
+    }
+
+    const errorAndWarningTuples: ErrorAndWarningTuples = [];
+
+    this._errorsAndWarnings.forEach((_, id) => {
+      const index = this.getIndexOfElementID(id);
+      if (index !== null) {
+        let low = 0;
+        let high = errorAndWarningTuples.length;
+        while (low < high) {
+          const mid = (low + high) >> 1;
+          if (errorAndWarningTuples[mid].index > index) {
+            high = mid;
+          } else {
+            low = mid + 1;
+          }
+        }
+
+        errorAndWarningTuples.splice(low, 0, {id, index});
+      }
+    });
+
+    // Cache for later (at least until the tree changes again).
+    this._cachedErrorAndWarningTuples = errorAndWarningTuples;
+    return errorAndWarningTuples;
+  }
+
+  getErrorAndWarningCountForElementID(id: number): {
+    errorCount: number,
+    warningCount: number,
+  } {
+    if (!this._shouldShowWarningsAndErrors) {
+      return {errorCount: 0, warningCount: 0};
+    }
+
+    return this._errorsAndWarnings.get(id) || {errorCount: 0, warningCount: 0};
+  }
+
   // The Store should never throw an Error without also emitting an event.
   // Otherwise Store errors will be invisible to users,
   // but the downstream errors they cause will be reported as bugs.
