--- react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual)@@ -263,14 +263,13 @@       'unsupportedRendererVersion',
       this.onBridgeUnsupportedRendererVersion,
     );
-
-    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
-
     bridge.addListener('backendVersion', this.onBridgeBackendVersion);
     bridge.addListener('saveToClipboard', this.onSaveToClipboard);
     bridge.addListener('hookSettings', this.onHookSettings);
     bridge.addListener('backendInitialized', this.onBackendInitialized);
     bridge.addListener('selectElement', this.onHostInstanceSelected);
+
+    this._profilerStore = new ProfilerStore(bridge, this, isProfiling);
   }
 
   // This is only used in tests to avoid memory leaks.
@@ -306,10 +305,6 @@         ),
       );
     }
-  }
-
-  get backendVersion(): string | null {
-    return this._backendVersion;
   }
 
   get collapseNodesByDefault(): boolean {
@@ -469,8 +464,6 @@     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -585,52 +578,6 @@     }
 
     return element;
-  }
-
-  // Returns a tuple of [id, index]
-  getElementsWithErrorsAndWarnings(): ErrorAndWarningTuples {
-    if (!this._shouldShowWarningsAndErrors) {
-      return [];
-    }
-
-    if (this._cachedErrorAndWarningTuples !== null) {
-      return this._cachedErrorAndWarningTuples;
-    }
-
-    const errorAndWarningTuples: ErrorAndWarningTuples = [];
-
-    this._errorsAndWarnings.forEach((_, id) => {
-      const index = this.getIndexOfElementID(id);
-      if (index !== null) {
-        let low = 0;
-        let high = errorAndWarningTuples.length;
-        while (low < high) {
-          const mid = (low + high) >> 1;
-          if (errorAndWarningTuples[mid].index > index) {
-            high = mid;
-          } else {
-            low = mid + 1;
-          }
-        }
-
-        errorAndWarningTuples.splice(low, 0, {id, index});
-      }
-    });
-
-    // Cache for later (at least until the tree changes again).
-    this._cachedErrorAndWarningTuples = errorAndWarningTuples;
-    return errorAndWarningTuples;
-  }
-
-  getErrorAndWarningCountForElementID(id: number): {
-    errorCount: number,
-    warningCount: number,
-  } {
-    if (!this._shouldShowWarningsAndErrors) {
-      return {errorCount: 0, warningCount: 0};
-    }
-
-    return this._errorsAndWarnings.get(id) || {errorCount: 0, warningCount: 0};
   }
 
   getIndexOfElementID(id: number): number | null {
@@ -664,7 +611,6 @@         if (child === undefined) {
           return null;
         }
-
         index += child.isCollapsed ? 1 : child.weight;
       }
 
@@ -789,7 +735,7 @@ 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -867,13 +813,13 @@       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
+          const {weight} = this.getElementByID(rootID) || {weight: 0};
           weightAcrossRoots += weight;
         });
         this._weightAcrossRoots = weightAcrossRoots;
 
         // The Tree context's search reducer expects an explicit list of ids for nodes that were added or removed.
-        // In this  case, we can pass it empty arrays since nodes in a collapsed tree are still there (just hidden).
+        // In this case, we can pass it empty arrays since nodes in a collapsed tree are still there (just hidden).
         // Updating the selected search index later may require auto-expanding a collapsed subtree though.
         this.emit('mutated', [[], new Map()]);
       }
@@ -1196,7 +1142,6 @@               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
