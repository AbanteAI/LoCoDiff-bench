--- react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual)@@ -21,7 +21,7 @@   TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS,
   TREE_OPERATION_UPDATE_TREE_BASE_DURATION,
 } from '../constants';
-import {ElementTypeRoot} from '../frontend/types';
+import {ElementTypeRoot, StrictMode} from '../frontend/types';
 import {
   getSavedComponentFilters,
   setSavedComponentFilters,
@@ -37,7 +37,7 @@   BRIDGE_PROTOCOL,
   currentBridgeProtocol,
 } from 'react-devtools-shared/src/bridge';
-import {StrictMode} from 'react-devtools-shared/src/frontend/types';
+import UnsupportedBridgeOperationError from 'react-devtools-shared/src/UnsupportedBridgeOperationError';
 import {withPermissionsCheck} from 'react-devtools-shared/src/frontend/utils/withPermissionsCheck';
 
 import type {
@@ -49,13 +49,12 @@   FrontendBridge,
   BridgeProtocol,
 } from 'react-devtools-shared/src/bridge';
-import UnsupportedBridgeOperationError from 'react-devtools-shared/src/UnsupportedBridgeOperationError';
 import type {DevToolsHookSettings} from '../backend/types';
 
 const debug = (methodName: string, ...args: Array<string>) => {
   if (__DEBUG__) {
     console.log(
-      `%cStore %c${methodName}`,
+      '%cStore %c' + methodName,
       'color: green; font-weight: bold;',
       'font-weight: bold;',
       ...args,
@@ -104,8 +103,12 @@   roots: [],
   rootSupportsBasicProfiling: [],
   rootSupportsTimelineProfiling: [],
+  supportsClickToInspect: [],
+  supportsInspectMatchingDOMElement: [],
   supportsNativeStyleEditor: [],
   supportsReloadAndProfile: [],
+  supportsTimeline: [],
+  supportsTraceUpdates: [],
   unsupportedBridgeProtocolDetected: [],
   unsupportedRendererVersionDetected: [],
 }> {
@@ -126,8 +129,10 @@   _componentFilters: Array<ComponentFilter>;
 
   // Map of ID to number of recorded error and warning message IDs.
-  _errorsAndWarnings: Map<number, {errorCount: number, warningCount: number}> =
-    new Map();
+  _errorsAndWarnings: Map<
+    number,
+    {errorCount: number, warningCount: number},
+  > = new Map();
 
   // At least one of the injected renderers contains (DEV only) owner metadata.
   _hasOwnerMetadata: boolean = false;
@@ -170,11 +175,10 @@   // These options may be initially set by a configuration option when constructing the Store.
   _supportsInspectMatchingDOMElement: boolean = false;
   _supportsClickToInspect: boolean = false;
+  _isReloadAndProfileFrontendSupported: boolean = false;
+  _isReloadAndProfileBackendSupported: boolean = false;
   _supportsTimeline: boolean = false;
   _supportsTraceUpdates: boolean = false;
-
-  _isReloadAndProfileFrontendSupported: boolean = false;
-  _isReloadAndProfileBackendSupported: boolean = false;
 
   // These options default to false but may be updated as roots are added and removed.
   _rootSupportsBasicProfiling: boolean = false;
@@ -274,7 +278,7 @@   }
 
   // This is only used in tests to avoid memory leaks.
-  assertExpectedRootMapSizes() {
+  assertExpectedRootMapSizes(): void {
     if (this.roots.length === 0) {
       // The only safe time to assert these maps are empty is when the store is empty.
       this.assertMapSizeMatchesRootCount(this._idToElement, '_idToElement');
@@ -293,7 +297,7 @@   }
 
   // This is only used in tests to avoid memory leaks.
-  assertMapSizeMatchesRootCount(map: Map<any, any>, mapName: string) {
+  assertMapSizeMatchesRootCount(map: Map<any, any>, mapName: string): void {
     const expectedSize = this.roots.length;
     if (map.size !== expectedSize) {
       this._throwAndEmitError(
@@ -310,6 +314,10 @@ 
   get backendVersion(): string | null {
     return this._backendVersion;
+  }
+
+  get bridgeProtocol(): BridgeProtocol | null {
+    return this._bridgeProtocol;
   }
 
   get collapseNodesByDefault(): boolean {
@@ -374,10 +382,6 @@     this.emit('componentFilters');
   }
 
-  get bridgeProtocol(): BridgeProtocol | null {
-    return this._bridgeProtocol;
-  }
-
   get componentWithErrorCount(): number {
     if (!this._shouldShowWarningsAndErrors) {
       return 0;
@@ -450,12 +454,12 @@     return this._rootSupportsTimelineProfiling;
   }
 
+  get supportsClickToInspect(): boolean {
+    return this._supportsClickToInspect;
+  }
+
   get supportsInspectMatchingDOMElement(): boolean {
     return this._supportsInspectMatchingDOMElement;
-  }
-
-  get supportsClickToInspect(): boolean {
-    return this._supportsClickToInspect;
   }
 
   get supportsNativeStyleEditor(): boolean {
@@ -819,7 +823,9 @@ 
           const weightDelta = 1 - element.weight;
 
-          let parentElement = this._idToElement.get(element.parentID);
+          let parentElement: void | Element = this._idToElement.get(
+            element.parentID,
+          );
           while (parentElement !== undefined) {
             // We don't need to break on a collapsed parent in the same way as the expand case below.
             // That's because collapsing a node doesn't "bubble" and affect its parents.
@@ -843,7 +849,9 @@               : currentElement.weight;
             const weightDelta = newWeight - oldWeight;
 
-            let parentElement = this._idToElement.get(currentElement.parentID);
+            let parentElement: void | Element = this._idToElement.get(
+              currentElement.parentID,
+            );
             while (parentElement !== undefined) {
               parentElement.weight += weightDelta;
               if (parentElement.isCollapsed) {
@@ -867,8 +875,11 @@       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
-          weightAcrossRoots += weight;
+          const root = this.getElementByID(rootID);
+          if (root !== null) {
+            const {weight} = root;
+            weightAcrossRoots += weight;
+          }
         });
         this._weightAcrossRoots = weightAcrossRoots;
 
@@ -886,7 +897,7 @@   ) => void = (parentElement, weightDelta) => {
     let isInsideCollapsedSubTree = false;
 
-    while (parentElement != null) {
+    while (parentElement !== undefined) {
       parentElement.weight += weightDelta;
 
       // Additions and deletions within a collapsed subtree should not bubble beyond the collapsed parent.
@@ -985,6 +996,8 @@                 `Cannot add node "${id}" because a node with that id is already in the Store.`,
               ),
             );
+
+            break;
           }
 
           if (type === ElementTypeRoot) {
@@ -1196,7 +1209,6 @@               haveErrorsOrWarningsChanged = true;
             }
           }
-
           break;
         }
         case TREE_OPERATION_REMOVE_ROOT: {
@@ -1257,10 +1269,10 @@           const children = element.children;
           if (children.length !== numChildren) {
             this._throwAndEmitError(
-              Error(
-                `Children cannot be added or removed during a reorder operation.`,
-              ),
+              Error(`Children cannot be added or removed during a reorder operation.`),
             );
+
+            break;
           }
 
           for (let j = 0; j < numChildren; j++) {
@@ -1298,10 +1310,7 @@           }
 
           if (__DEBUG__) {
-            debug(
-              'Subtree mode',
-              `Subtree with root ${id} set to mode ${mode}`,
-            );
+            debug('Subtree mode', `Subtree with root ${id} set to mode ${mode}`);
           }
           break;
         }
