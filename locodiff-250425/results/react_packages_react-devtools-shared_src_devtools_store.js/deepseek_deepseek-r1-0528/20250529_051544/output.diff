
index 31d2c13e8..61dd55658 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmplxdclafr_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmpbc7nm42g_actual.txt	
@@ -10,29 +10,6 @@
 import {copy} from 'clipboard-js';
 import EventEmitter from '../events';
 import {inspect} from 'util';
-import {
-  PROFILING_FLAG_BASIC_SUPPORT,
-  PROFILING_FLAG_TIMELINE_SUPPORT,
-  TREE_OPERATION_ADD,
-  TREE_OPERATION_REMOVE,
-  TREE_OPERATION_REMOVE_ROOT,
-  TREE_OPERATION_REORDER_CHILDREN,
-  TREE_OPERATION_SET_SUBTREE_MODE,
-  TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS,
-  TREE_OPERATION_UPDATE_TREE_BASE_DURATION,
-} from '../constants';
-import {ElementTypeRoot} from '../frontend/types';
-import {
-  getSavedComponentFilters,
-  setSavedComponentFilters,
-  shallowDiffers,
-  utfDecodeStringWithRanges,
-  parseElementDisplayNameFromBackend,
-} from '../utils';
-import {localStorageGetItem, localStorageSetItem} from '../storage';
-import {__DEBUG__} from '../constants';
-import {printStore} from './utils';
-import ProfilerStore from './ProfilerStore';
 import {
   BRIDGE_PROTOCOL,
   currentBridgeProtocol,
@@ -180,8 +157,7 @@ export default class Store extends EventEmitter<{
   _rootSupportsBasicProfiling: boolean = false;
   _rootSupportsTimelineProfiling: boolean = false;
 
-  _bridgeProtocol: BridgeProtocol | null = null;
-  _unsupportedBridgeProtocolDetected: boolean = false;
+  _unsupportedBridgeProtocol: BridgeProtocol | null = null;
   _unsupportedRendererVersionDetected: boolean = false;
 
   // Total number of visible elements (within all roots).
@@ -469,8 +445,6 @@ export default class Store extends EventEmitter<{
     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -789,7 +763,7 @@ export default class Store extends EventEmitter<{
 
   isInsideCollapsedSubTree(id: number): boolean {
     let current = this._idToElement.get(id);
-    while (current != null) {
+    while (current !== undefined) {
       if (current.parentID === 0) {
         return false;
       } else {
@@ -867,8 +841,10 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
-          weightAcrossRoots += weight;
+          const root = this._idToElement.get(rootID);
+          if (root !== undefined) {
+            weightAcrossRoots += root.weight;
+          }
         });
         this._weightAcrossRoots = weightAcrossRoots;
 
@@ -1175,7 +1151,6 @@ export default class Store extends EventEmitter<{
 
                 break;
               }
-
               const index = parentElement.children.indexOf(id);
               parentElement.children.splice(index, 1);
             }
@@ -1311,7 +1286,7 @@ export default class Store extends EventEmitter<{
           // The profiler UI uses them lazily in order to generate the tree.
           i += 3;
           break;
-        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS:
+        case TREE_OPERATION_UPDATE_ERRORS_OR_WARNINGS: {
           const id = operations[i + 1];
           const errorCount = operations[i + 2];
           const warningCount = operations[i + 3];
@@ -1325,6 +1300,7 @@ export default class Store extends EventEmitter<{
           }
           haveErrorsOrWarningsChanged = true;
           break;
+        }
         default:
           this._throwAndEmitError(
             new UnsupportedBridgeOperationError(
@@ -1487,91 +1463,4 @@ export default class Store extends EventEmitter<{
   onBridgeProtocolTimeout: () => void = () => {
     this._onBridgeProtocolTimeoutID = null;
 
-    // If we timed out, that indicates the backend predates the bridge protocol,
-    // so we can set a fake version (0) to trigger the downgrade message.
-    this._bridgeProtocol = BRIDGE_PROTOCOL[0];
-
-    this.emit('unsupportedBridgeProtocolDetected');
-  };
-
-  onSaveToClipboard: (text: string) => void = text => {
-    withPermissionsCheck({permissions: ['clipboardWrite']}, () => copy(text))();
-  };
-
-  onBackendInitialized: () => void = () => {
-    // Verify that the frontend version is compatible with the connected backend.
-    // See github.com/facebook/react/issues/21326
-    if (this._shouldCheckBridgeProtocolCompatibility) {
-      // Older backends don't support an explicit bridge protocol,
-      // so we should timeout eventually and show a downgrade message.
-      this._onBridgeProtocolTimeoutID = setTimeout(
-        this.onBridgeProtocolTimeout,
-        10000,
-      );
-
-      this._bridge.addListener('bridgeProtocol', this.onBridgeProtocol);
-      this._bridge.send('getBridgeProtocol');
-    }
-
-    this._bridge.send('getBackendVersion');
-    this._bridge.send('getIfHasUnsupportedRendererVersion');
-    this._bridge.send('getHookSettings'); // Warm up cached hook settings
-  };
-
-  onHostInstanceSelected: (elementId: number) => void = elementId => {
-    if (this._lastSelectedHostInstanceElementId === elementId) {
-      return;
-    }
-
-    this._lastSelectedHostInstanceElementId = elementId;
-    // By the time we emit this, there is no guarantee that TreeContext is rendered.
-    this.emit('hostInstanceSelected', elementId);
-  };
-
-  getHookSettings: () => void = () => {
-    if (this._hookSettings != null) {
-      this.emit('hookSettings', this._hookSettings);
-    } else {
-      this._bridge.send('getHookSettings');
-    }
-  };
-
-  updateHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
-    settings => {
-      this._hookSettings = settings;
-
-      this._bridge.send('updateHookSettings', settings);
-      this.emit('settingsUpdated', settings);
-    };
-
-  onHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
-    settings => {
-      this._hookSettings = settings;
-
-      this.setShouldShowWarningsAndErrors(settings.showInlineWarningsAndErrors);
-      this.emit('hookSettings', settings);
-    };
-
-  setShouldShowWarningsAndErrors(status: boolean): void {
-    const previousStatus = this._shouldShowWarningsAndErrors;
-    this._shouldShowWarningsAndErrors = status;
-
-    if (previousStatus !== status) {
-      // Propagate to subscribers, although tree state has not changed
-      this.emit('mutated', [[], new Map()]);
-    }
-  }
-
-  // The Store should never throw an Error without also emitting an event.
-  // Otherwise Store errors will be invisible to users,
-  // but the downstream errors they cause will be reported as bugs.
-  // For example, https://github.com/facebook/react/issues/21402
-  // Emitting an error event allows the ErrorBoundary to show the original error.
-  _throwAndEmitError(error: Error): empty {
-    this.emit('error', error);
-
-    // Throwing is still valuable for local development
-    // and for unit testing the Store itself.
-    throw error;
-  }
-}
\ No newline at end of file
+    // If
\ No newline at end of file
