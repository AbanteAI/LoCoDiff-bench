
index 31d2c13e..7af6cb58 100644
--- a/react_packages_react-devtools-shared_src_devtools_store.js_expectedoutput.txt (expected):tmp/tmp6fuk85c8_expected.txt	
+++ b/react_packages_react-devtools-shared_src_devtools_store.js_extracted.txt (actual):tmp/tmp6s0_5c0i_actual.txt	
@@ -73,6 +73,7 @@ type ErrorAndWarningTuples = Array<{id: number, index: number}>;
 export type Config = {
   checkBridgeProtocolCompatibility?: boolean,
   isProfiling?: boolean,
+  supportsNativeInspection?: boolean,
   supportsInspectMatchingDOMElement?: boolean,
   supportsClickToInspect?: boolean,
   supportsReloadAndProfile?: boolean,
@@ -469,8 +470,6 @@ export default class Store extends EventEmitter<{
     );
   }
 
-  // This build of DevTools supports the Timeline profiler.
-  // This is a static flag, controlled by the Store config.
   get supportsTimeline(): boolean {
     return this._supportsTimeline;
   }
@@ -867,7 +866,7 @@ export default class Store extends EventEmitter<{
       if (didMutate) {
         let weightAcrossRoots = 0;
         this._roots.forEach(rootID => {
-          const {weight} = ((this.getElementByID(rootID): any): Element);
+          const {weight} = this.getElementByID(rootID);
           weightAcrossRoots += weight;
         });
         this._weightAcrossRoots = weightAcrossRoots;
@@ -1468,21 +1467,20 @@ export default class Store extends EventEmitter<{
     this.emit('backendVersion');
   };
 
-  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void =
-    bridgeProtocol => {
-      if (this._onBridgeProtocolTimeoutID !== null) {
-        clearTimeout(this._onBridgeProtocolTimeoutID);
-        this._onBridgeProtocolTimeoutID = null;
-      }
+  onBridgeProtocol: (bridgeProtocol: BridgeProtocol) => void = bridgeProtocol => {
+    if (this._onBridgeProtocolTimeoutID !== null) {
+      clearTimeout(this._onBridgeProtocolTimeoutID);
+      this._onBridgeProtocolTimeoutID = null;
+    }
 
-      this._bridgeProtocol = bridgeProtocol;
+    this._bridgeProtocol = bridgeProtocol;
 
-      if (bridgeProtocol.version !== currentBridgeProtocol.version) {
-        // Technically newer versions of the frontend can, at least for now,
-        // gracefully handle older versions of the backend protocol.
-        // So for now we don't need to display the unsupported dialog.
-      }
-    };
+    if (bridgeProtocol.version !== currentBridgeProtocol.version) {
+      // Technically newer versions of the frontend can, at least for now,
+      // gracefully handle older versions of the backend protocol.
+      // So for now we don't need to display the unsupported dialog.
+    }
+  };
 
   onBridgeProtocolTimeout: () => void = () => {
     this._onBridgeProtocolTimeoutID = null;
@@ -1536,21 +1534,19 @@ export default class Store extends EventEmitter<{
     }
   };
 
-  updateHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
-    settings => {
-      this._hookSettings = settings;
+  updateHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void = settings => {
+    this._hookSettings = settings;
 
-      this._bridge.send('updateHookSettings', settings);
-      this.emit('settingsUpdated', settings);
-    };
+    this._bridge.send('updateHookSettings', settings);
+    this.emit('settingsUpdated', settings);
+  };
 
-  onHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void =
-    settings => {
-      this._hookSettings = settings;
+  onHookSettings: (settings: $ReadOnly<DevToolsHookSettings>) => void = settings => {
+    this._hookSettings = settings;
 
-      this.setShouldShowWarningsAndErrors(settings.showInlineWarningsAndErrors);
-      this.emit('hookSettings', settings);
-    };
+    this.setShouldShowWarningsAndErrors(settings.showInlineWarningsAndErrors);
+    this.emit('hookSettings', settings);
+  };
 
   setShouldShowWarningsAndErrors(status: boolean): void {
     const previousStatus = this._shouldShowWarningsAndErrors;
