Here are the key changes made to the `Collection` struct and its implementation in this file:

1. Added new fields:
   - `optimizer_resource_budget: ResourceBudget`
   - `collection_stats_cache: CollectionSizeStatsCache`
   - `shard_clean_tasks: ShardCleanTasks`

2. Removed field:
   - `reshard_tasks: Mutex<ReshardTasksPool>`

3. Changed constructor parameters:
   - Added `optimizer_resource_budget: ResourceBudget`
   - Added `shard_key_mapping: Option<ShardKeyMapping>`

4. Added new methods:
   - `uuid(&self) -> Option<uuid::Uuid>`
   - `estimated_collection_stats(&self) -> Option<&CollectionSizeAtomicStats>`
   - `trigger_optimizers(&self)`
   - `calculate_local_shards_stats(shards_holder: &Arc<RwLock<ShardHolder>>) -> LocalDataStats`
   - `local_stats_estimations(&self) -> &LocalDataAtomicStats`

5. Modified existing methods:
   - `set_shard_replica_state`: Added logic to abort resharding if a resharding shard is marked as dead
   - `sync_local_state`: Added checks for automatic shard recovery and transfer limits
   - `get_telemetry_data`: Now conditionally includes shard telemetry based on detail level
   - Added `get_aggregated_telemetry_data` method

6. Removed methods:
   - `resharding_state`
   - `start_resharding`
   - `abort_resharding`

These changes reflect updates to resource management, telemetry reporting, shard management, and resharding operations in the collection.