--- qdrant_lib_collection_src_collection_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_mod.rs_extracted.txt (actual)@@ -5,7 +5,6 @@ pub mod payload_index_schema;
 mod point_ops;
 pub mod query;
-mod resharding;
 mod search;
 mod shard_transfer;
 mod sharding_keys;
@@ -382,6 +381,7 @@         replica_set.wait_for_local_state(state, timeout).await
     }
 
+    #[allow(clippy::too_many_arguments)]
     pub async fn set_shard_replica_state(
         &self,
         shard_id: ShardId,
@@ -580,11 +580,10 @@             }
         }
 
-        self.shards_holder
-            .read()
-            .await
-            .remove_shards_at_peer(peer_id)
-            .await
+        let shard_holder_read = self.shards_holder.read().await;
+        self.invalidate_shard_clean_tasks_for_peer(&*shard_holder_read, peer_id)
+            .await;
+        shard_holder_read.remove_shards_at_peer(peer_id).await
     }
 
     pub async fn sync_local_state(
@@ -616,6 +615,8 @@                 .map(|s| s.result)
             {
                 None => {
+                    // Note: if it does not exist it has already been cancelled or finished
+                    // and we just missed the message somehow. Report as failure to be safe...
                     log::debug!(
                         "Transfer {:?} does not exist, but not reported as cancelled. Reporting now.",
                         transfer.key(),
@@ -894,4 +895,13 @@     fn current_raw() -> &'static str {
         env!("CARGO_PKG_VERSION")
     }
+}
+
+impl Collection {
+    fn load_payload_index_schema(
+        collection_path: &Path,
+    ) -> CollectionResult<SaveOnDisk<PayloadIndexSchema>> {
+        let path = payload_index_schema::path(collection_path);
+        SaveOnDisk::load_or_init(path)
+    }
 }