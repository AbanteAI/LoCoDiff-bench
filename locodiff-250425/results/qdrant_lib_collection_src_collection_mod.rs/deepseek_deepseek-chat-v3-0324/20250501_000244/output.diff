--- qdrant_lib_collection_src_collection_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_mod.rs_extracted.txt (actual)@@ -48,11 +48,11 @@ };
 use crate::shards::shard::{PeerId, ShardId};
 use crate::shards::shard_holder::shard_mapping::ShardKeyMapping;
-use crate::shards::shard_holder::{LockedShardHolder, ShardHolder, shard_not_found_error};
+use crate::shards::shard_holder::{shard_not_found_error, LockedShardHolder, ShardHolder};
 use crate::shards::transfer::helpers::check_transfer_conflicts_strict;
 use crate::shards::transfer::transfer_tasks_pool::{TaskResult, TransferTasksPool};
 use crate::shards::transfer::{ShardTransfer, ShardTransferMethod};
-use crate::shards::{CollectionId, replica_set};
+use crate::shards::{replica_set, CollectionId};
 use crate::telemetry::{
     CollectionConfigTelemetry, CollectionTelemetry, CollectionsAggregatedTelemetry,
 };
@@ -164,7 +164,7 @@ 
         let locked_shard_holder = Arc::new(LockedShardHolder::new(shard_holder));
 
-        let collection_stats_cache = CollectionSizeStatsCache::new_with_values(
+        let local_stats_cache = CollectionSizeStatsCache::new_with_values(
             Self::estimate_collection_size_stats(&locked_shard_holder).await,
         );
 
@@ -284,7 +284,7 @@ 
         let locked_shard_holder = Arc::new(LockedShardHolder::new(shard_holder));
 
-        let collection_stats_cache = CollectionSizeStatsCache::new_with_values(
+        let local_stats_cache = CollectionSizeStatsCache::new_with_values(
             Self::estimate_collection_size_stats(&locked_shard_holder).await,
         );
 
@@ -607,39 +607,6 @@             replica_set.sync_local_state(get_shard_transfers)?;
         }
 
-        // Check for un-reported finished transfers
-        let outgoing_transfers = shard_holder.get_outgoing_transfers(self.this_peer_id);
-        let tasks_lock = self.transfer_tasks.lock().await;
-        for transfer in outgoing_transfers {
-            match tasks_lock
-                .get_task_status(&transfer.key())
-                .map(|s| s.result)
-            {
-                None => {
-                    log::debug!(
-                        "Transfer {:?} does not exist, but not reported as cancelled. Reporting now.",
-                        transfer.key(),
-                    );
-                    on_transfer_failure(transfer, self.name(), "transfer task does not exist");
-                }
-                Some(TaskResult::Running) => (),
-                Some(TaskResult::Finished) => {
-                    log::debug!(
-                        "Transfer {:?} is finished successfully, but not reported. Reporting now.",
-                        transfer.key(),
-                    );
-                    on_transfer_success(transfer, self.name());
-                }
-                Some(TaskResult::Failed) => {
-                    log::debug!(
-                        "Transfer {:?} is failed, but not reported as failed. Reporting now.",
-                        transfer.key(),
-                    );
-                    on_transfer_failure(transfer, self.name(), "transfer failed");
-                }
-            }
-        }
-
         // Count how many transfers we are now proposing
         // We must track this here so we can reference it when checking for tranfser limits,
         // because transfers we propose now will not be in the consensus state within the lifetime
@@ -750,8 +717,8 @@                     // TODO: This is rather verbose, not sure if we want to log this at all... :/
                     log::trace!(
                         "Replica {replica_id}/{}:{} is not available \
-                         to request shard transfer from: \
-                         {err}",
+                          to request shard transfer from: \
+                          {err}",
                         self.id,
                         replica_set.shard_id,
                     );
