```rust
mod clean;
mod collection_ops;
pub mod distance_matrix;
mod facet;
pub mod payload_index_schema;
mod point_ops;
pub mod query;
mod resharding;
mod search;
mod shard_transfer;
mod sharding_keys;
mod snapshots;
mod state_management;

use std::collections::HashMap;
use std::ops::Deref;
use std::path::{Path, PathBuf};
use std::sync::Arc;
use std::time::Duration;

use clean::ShardCleanTasks;
use common::budget::ResourceBudget;
use common::types::{DetailsLevel, TelemetryDetail};
use io::storage_version::StorageVersion;
use segment::types::ShardKey;
use semver::Version;
use tokio::runtime::Handle;
use tokio::sync::{Mutex, RwLock, RwLockWriteGuard};

use crate::collection::payload_index_schema::PayloadIndexSchema;
use crate::collection_state::{ShardInfo, State};
use crate::common::is_ready::IsReady;
use crate::config::CollectionConfigInternal;
use crate::operations::config_diff::{DiffConfig, OptimizersConfigDiff};
use crate::operations::shared_storage_config::SharedStorageConfig;
use crate::operations::types::{CollectionError, CollectionResult, NodeType, OptimizersStatus};
use crate::optimizers_builder::OptimizersConfig;
use crate::save_on_disk::SaveOnDisk;
use crate::shards::channel_service::ChannelService;
use crate::shards::collection_shard_distribution::CollectionShardDistribution;
use crate::shards::local_shard::clock_map::RecoveryPoint;
use crate::shards::replica_set::{
    ChangePeerFromState, ChangePeerState, ReplicaState, ShardReplicaSet,
};
use crate::shards::resharding::ReshardKey;
use crate::shards::shard::{PeerId, ShardId};
use crate::shards::shard_holder::{LockedShardHolder, ShardHolder, shard_not_found_error};
use crate::shards::transfer::helpers::check_transfer_conflicts_strict;
use crate::shards::transfer::transfer_tasks_pool::{TaskResult, TransferTasksPool};
use crate::shards::transfer::{ShardTransfer, ShardTransferMethod};
use crate::shards::{CollectionId, replica_set};
use crate::telemetry::{CollectionConfigTelemetry, CollectionTelemetry, CollectionsAggregatedTelemetry};

/// Collection's data is split into several shards.
pub struct Collection {
    pub(crate) id: CollectionId,
    pub(crate) shards_holder: Arc<LockedShardHolder>,
    pub(crate) collection_config: Arc<RwLock<CollectionConfigInternal>>,
    pub(crate) shared_storage_config: Arc<SharedStorageConfig>,
    payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
    optimizers_overwrite: Option<OptimizersConfigDiff>,
    this_peer_id: PeerId,
    path: PathBuf,
    snapshots_path: PathBuf,
    channel_service: ChannelService,
    transfer_tasks: Mutex<TransferTasksPool>,
    request_shard_transfer_cb: RequestShardTransfer,
    notify_peer_failure_cb: ChangePeerFromState,
    abort_shard_transfer_cb: replica_set::AbortShardTransfer,
    init_time: Duration,
    // One-way boolean flag that is set to true when the collection is fully initialized
    // i.e. all shards are activated for the first time.
    is_initialized: Arc<IsReady>,
    // Lock to temporary block collection update operations while the collection is being migrated.
    // Lock is acquired for read on update operation and can be acquired for write externally,
    // which will block all update operations until the lock is released.
    updates_lock: Arc<RwLock<()>>,
    // Update runtime handle.
    update_runtime: Handle,
    // Search runtime handle.
    search_runtime: Handle,
    // Budget for optimizer CPU/IO usage.
    optimizer_resource_budget: ResourceBudget,
    // Cached statistics of collection size, may be outdated.
    collection_stats_cache: CollectionSizeStatsCache,
    // Background tasks to clean shards
    shard_clean_tasks: ShardCleanTasks,
}

pub type RequestShardTransfer = Arc<dyn Fn(ShardTransfer) + Send + Sync>;
pub type OnTransferFailure = Arc<dyn Fn(ShardTransfer, CollectionId, &str) + Send + Sync>;
pub type OnTransferSuccess = Arc<dyn Fn(ShardTransfer, CollectionId) + Send + Sync>;

impl Collection {
    #[allow(clippy::too_many_arguments)]
    pub async fn new(
        name: CollectionId,
        this_peer_id: PeerId,
        path: &Path,
        snapshots_path: &Path,
        collection_config: &CollectionConfigInternal,
        shared_storage_config: Arc<SharedStorageConfig>,
        shard_distribution: CollectionShardDistribution,
        channel_service: ChannelService,
        on_replica_failure: ChangePeerFromState,
        request_shard_transfer: RequestShardTransfer,
        abort_shard_transfer: replica_set::AbortShardTransfer,
        search_runtime: Option<Handle>,
        update_runtime: Option<Handle>,
        optimizer_resource_budget: ResourceBudget,
        optimizers_overwrite: Option<OptimizersConfigDiff>,
    ) -> Result<Self, CollectionError> {
        let start_time = std::time::Instant::now();

        let mut shard_holder = ShardHolder::new(path)?;
        shard_holder.set_shard_key_mappings(
            collection_config
                .params
                .shard_key_mapping
                .clone()
                .unwrap_or_default(),
        )?;

        let payload_index_schema = Arc::new(Self::load_payload_index_schema(path)?);

        let shared_collection_config = Arc::new(RwLock::new(collection_config.clone()));
        let mut effective_optimizers_config = collection_config.optimizer_config.clone();
        if let Some(overwrite) = optimizers_overwrite.clone() {
            effective_optimizers_config = overwrite.update(&effective_optimizers_config)?;
        }

        for (shard_id, mut peers) in shard_distribution.shards {
            let is_local = peers.remove(&this_peer_id);

            let shard_key = collection_config
                .params
                .shard_key_mapping
                .as_ref()
                .and_then(|mapping| mapping.shard_key(shard_id));

            let replica_set = ShardReplicaSet::build(
                shard_id,
                shard_key.clone(),
                name.clone(),
                this_peer_id,
                is_local,
                peers,
                on_replica_failure.clone(),
                abort_shard_transfer.clone(),
                path,
                shared_collection_config.clone(),
                effective_optimizers_config.clone(),
                shared_storage_config.clone(),
                channel_service.clone(),
                update_runtime.clone().unwrap_or_else(Handle::current),
                search_runtime.clone().unwrap_or_else(Handle::current),
                optimizer_resource_budget.clone(),
                None,
            )
            .await?;

            shard_holder.add_shard(shard_id, replica_set, shard_key.clone())?;
        }

        let locked_shard_holder = Arc::new(LockedShardHolder::new(shard_holder));
        let local_stats_cache =
            LocalDataStatsCache::new_with_values(Self::calculate_local_shards_stats(&locked_shard_holder).await);
        let collection_stats_cache =
            CollectionSizeStatsCache::new_with_values(Self::estimate_collection_size_stats(&locked_shard_holder).await);

        // Once the config is persisted - the collection is considered to be successfully created.
        CollectionVersion::save(path)?;
        collection_config.save(path)?;

        Ok(Self {
            id: name.clone(),
            shards_holder: locked_shard_holder,
            collection_config: shared_collection_config,
            shared_storage_config,
            payload_index_schema,
            optimizers_overwrite,
            this_peer_id,
            path: path.to_owned(),
            snapshots_path: snapshots_path.to_owned(),
            channel_service,
            transfer_tasks: Mutex::new(TransferTasksPool::new(name.clone())),
            request_shard_transfer_cb: request_shard_transfer.clone(),
            notify_peer_failure_cb: on_replica_failure.clone(),
            abort_shard_transfer_cb: abort_shard_transfer,
            init_time: start_time.elapsed(),
            is_initialized: Default::default(),
            updates_lock: Default::default(),
            update_runtime: update_runtime.unwrap_or_else(Handle::current),
            search_runtime: search_runtime.unwrap_or_else(Handle::current),
            optimizer_resource_budget,
            collection_stats_cache,
            shard_clean_tasks: Default::default(),
        })
    }

    #[allow(clippy::too_many_arguments)]
    pub async fn load(
        collection_id: CollectionId,
        this_peer_id: PeerId,
        path: &Path,
        snapshots_path: &Path,
        shared_storage_config: Arc<SharedStorageConfig>,
        channel_service: ChannelService,
        on_replica_failure: ChangePeerFromState,
        request_shard_transfer: RequestShardTransfer,
        abort_shard_transfer: replica_set::AbortShardTransfer,
        search_runtime: Option<Handle>,
        update_runtime: Option<Handle>,
        optimizer_resource_budget: ResourceBudget,
        optimizers_overwrite: Option<OptimizersConfigDiff>,
    ) -> Self {
        let start_time = std::time::Instant::now();
        let stored_version = CollectionVersion::load(path)
            .expect("Can't read collection version")
            .expect("Collection version is not found");
        let app_version = CollectionVersion::current();

        if stored_version > app_version {
            panic!("Collection version is greater than application version");
        }
        if stored_version != app_version {
            if Self::can_upgrade_storage(&stored_version, &app_version.parse().unwrap()) {
                log::info!("Migrating collection {stored_version} -> {app_version}");
                CollectionVersion::save(path)
                    .unwrap_or_else(|err| panic!("Can't save collection version {err}"));
            } else {
                log::error!("Cannot upgrade version {stored_version} to {app_version}.");
                panic!(
                    "Cannot upgrade version {stored_version} to {app_version}. Try to use older version of Qdrant first.",
                );
            }
        }

        let collection_config = CollectionConfigInternal::load(path).unwrap_or_else(|err| {
            panic!(
                "Can't read collection config due to {}\nat {}",
                err,
                path.to_str().unwrap(),
            )
        });
        collection_config.validate_and_warn();

        let mut shard_holder = ShardHolder::new(path)?;
        let shard_key_mapping = CollectionConfigInternal::load_shard_mapping(path)
            .expect("Can't load or initialize shard key mapping");

        shard_holder.set_shard_key_mappings(shard_key_mapping.clone())?;

        let payload_index_schema = Arc::new(Self::load_payload_index_schema(path)
            .expect("Can't load or initialize payload index schema"));

        let shared_collection_config = Arc::new(RwLock::new(collection_config.clone()));

        shard_holder
            .load_shards(
                path,
                &collection_id,
                shared_collection_config.clone(),
                effective_optimizers_config,
                shared_storage_config.clone(),
                channel_service.clone(),
                on_replica_failure.clone(),
                abort_shard_transfer.clone(),
                this_peer_id,
                update_runtime.clone().unwrap_or_else(Handle::current),
                search_runtime.clone().unwrap_or_else(Handle::current),
                optimizer_resource_budget.clone(),
                shard_key_mapping.clone(),
            )
            .await;

        let locked_shard_holder = Arc::new(LockedShardHolder::new(shard_holder));
        let collection_stats_cache =
            CollectionSizeStatsCache::new_with_values(Self::estimate_collection_size_stats(&locked_shard_holder).await);

        Self {
            id: collection_id.clone(),
            shards_holder: locked_shard_holder,
            collection_config: shared_collection_config,
            shared_storage_config,
            payload_index_schema,
            optimizers_overwrite,
            this_peer_id,
            path: path.to_owned(),
            snapshots_path: snapshots_path.to_owned(),
            channel_service,
            transfer_tasks: Mutex::new(TransferTasksPool::new(collection_id.clone())),
            request_shard_transfer_cb: request_shard_transfer.clone(),
            notify_peer_failure_cb: on_replica_failure,
            abort_shard_transfer_cb: abort_shard_transfer,
            init_time: start_time.elapsed(),
            is_initialized: Default::default(),
            updates_lock: Default::default(),
            update_runtime: update_runtime.unwrap_or_else(Handle::current),
            search_runtime: search_runtime.unwrap_or_else(Handle::current),
            optimizer_resource_budget,
            collection_stats_cache,
            shard_clean_tasks: Default::default(),
        }
    }

    /// Check if stored version have consequent version.
    /// If major version is different, then it is not compatible.
    /// If the difference in consecutive versions is greater than 1 in patch,
    /// then the collection is not compatible with the current version.
    pub fn can_upgrade_storage(stored: &Version, app: &Version) -> bool {
        if stored.major != app.major {
            return false;
        }
        if stored.minor != app.minor {
            return false;
        }
        if stored.patch + 1 < app.patch {
            return false;
        }
        true
    }

    pub fn name(&self) -> String {
        self.id.clone()
    }

    pub async fn get_shard_keys(&self) -> Vec<ShardKey> {
        self.shards_holder
            .read()
            .await
            .get_shard_key_to_ids_mapping()
            .keys()
            .cloned()
            .collect()
    }

    /// Return a list of local shards, present on this peer
    pub async fn get_local_shards(&self) -> Vec<ShardId> {
        self.shards_holder.read().await.get_local_shards().await
    }

    pub async fn contains_shard(&self, shard_id: ShardId) -> bool {
        self.shards_holder.read().await.contains_shard(shard_id)
    }

    pub async fn wait_local_shard_replica_state(
        &self,
        shard_id: ShardId,
        state: ReplicaState,
        timeout: Duration,
    ) -> CollectionResult<()> {
        let shard_holder_read = self.shards_holder.read().await;

        let shard = shard_holder_read.get_shard(shard_id);
        let Some(replica_set) = shard else {
            return Err(CollectionError::NotFound {
                what: format!("Shard {shard_id}"),
            });
        };

        replica_set.wait_for_local_state(state, timeout).await
    }

    pub async fn set_shard_replica_state(
        &self,
        shard_id: ShardId,
        peer_id: PeerId,
        new_state: ReplicaState,
        from_state: Option<ReplicaState>,
    ) -> CollectionResult<()> {
        let shard_holder = self.shards_holder.read().await;
        let replica_set = shard_holder
            .get_shard(shard_id)
            .ok_or_else(|| shard_not_found_error(shard_id))?;

        log::debug!(
            "Changing shard {}:{shard_id} replica state from {:?} to {new_state:?}",
            self.id,
            replica_set.peer_state(peer_id),
        );

        // 1. Check that peer or existing replica is in cluster
        let peer_exists = self
            .channel_service
            .id_to_address
            .read()
            .contains_key(&peer_id);
        let replica_exists = replica_set.peer_state(peer_id).is_some();
        if !peer_exists && !replica_exists {
            return Err(CollectionError::bad_input(format!(
                "Can't set replica {peer_id}:{shard_id} state to {new_state:?}, \
                 because replica {peer_id}:{shard_id} does not exist \
                 and peer {peer_id} is not part of the cluster"
            )));
        }

        // 2. Check that from_state matches current
        let current_state = replica_set.peer_state(peer_id);
        if from_state.is_some() && current_state != from_state {
            return Err(CollectionError::bad_input(format!(
                "Replica {peer_id} of shard {shard_id} has state {current_state:?}, but expected {from_state:?}"
            )));
        }

        // 3. Do not deactivate the last active replica
        if replica_set.is_last_active_replica(peer_id) && !new_state.is_active() {
            return Err(CollectionError::bad_input(format!(
                "Cannot deactivate the last active replica {peer_id} of shard {shard_id}"
            )));
        }

        // Abort resharding if relevant
        if matches!(current_state, Some(ReplicaState::Resharding | ReplicaState::ReshardingScaleDown))
            && new_state == ReplicaState::Dead
        {
            drop(shard_holder);
            if let Some(state) = self.resharding_state().await.filter(|s| s.peer_id == peer_id) {
                self.abort_resharding(state.key(), false).await?;
            }
            return Ok(());
        }

        replica_set
            .ensure_replica_with_state(peer_id, new_state)
            .await?;

        if new_state == ReplicaState::Dead {
            let related_transfers = shard_holder.get_related_transfers(shard_id, peer_id);
            drop(shard_holder);
            for transfer in related_transfers {
                self.abort_shard_transfer(transfer.key(), None).await?;
            }
        }

        // If not initialized yet, we need to check if it was initialized by this call
        if !self.is_initialized.check_ready() {
            let state = self.state().await;
            let mut is_ready = true;
            for (_id, shard_info) in state.shards {
                let all_active = shard_info
                    .replicas
                    .into_iter()
                    .all(|(_, st)| matches!(st, ReplicaState::Active | ReplicaState::ReshardingScaleDown));
                if !all_active {
                    is_ready = false;
                    break;
                }
            }
            if is_ready {
                self.is_initialized.make_ready();
            }
        }

        Ok(())
    }

    pub async fn shard_recovery_point(&self, shard_id: ShardId) -> CollectionResult<RecoveryPoint> {
        let shard_holder_read = self.shards_holder.read().await;
        let shard = shard_holder_read.get_shard(shard_id);
        let Some(replica_set) = shard else {
            return Err(CollectionError::NotFound {
                what: format!("Shard {shard_id}"),
            });
        };
        replica_set.shard_recovery_point().await
    }

    pub async fn update_shard_cutoff_point(
        &self,
        shard_id: ShardId,
        cutoff: &RecoveryPoint,
    ) -> CollectionResult<()> {
        let shard_holder_read = self.shards_holder.read().await;
        let shard = shard_holder_read.get_shard(shard_id);
        let Some(replica_set) = shard else {
            return Err(CollectionError::NotFound {
                what: format!("Shard {shard_id}"),
            });
        };
        replica_set.update_shard_cutoff_point(cutoff).await
    }

    pub async fn state(&self) -> State {
        let shards_holder = self.shards_holder.read().await;
        let transfers = shards_holder.shard_transfers.read().clone();
        let resharding = shards_holder.resharding_state.read().clone();
        State {
            config: self.collection_config.read().await.clone(),
            shards: shards_holder
                .get_shards()
                .map(|(shard_id, replicas)| {
                    let shard_info = ShardInfo { replicas: replicas.peers() };
                    (shard_id, shard_info)
                })
                .collect(),
            transfers,
            shards_key_mapping: shards_holder.get_shard_key_to_ids_mapping(),
            payload_index_schema: self.payload_index_schema.read().clone(),
            resharding,
        }
    }

    pub async fn apply_state(
        &self,
        state: State,
        this_peer_id: PeerId,
        abort_transfer: impl FnMut(ShardTransfer),
    ) -> CollectionResult<()> {
        state.apply(this_peer_id, self, abort_transfer).await
    }

    pub async fn remove_shards_at_peer(&self, peer_id: PeerId) -> CollectionResult<()> {
        // Abort resharding if shards driving resharding are removed
        if let Some(state) = self.resharding_state().await.filter(|s| s.peer_id == peer_id) {
            if let Err(err) = self.abort_resharding(state.key(), true).await {
                log::error!(
                    "Failed to abort resharding {} while removing peer {peer_id}: {err}",
                    state.key(),
                );
            }
        }
        self.shards_holder.read().await.remove_shards_at_peer(peer_id).await
    }

    pub async fn sync_local_state(
        &self,
        on_transfer_failure: OnTransferFailure,
        on_transfer_success: OnTransferSuccess,
        on_finish_init: ChangePeerState,
        on_convert_to_listener: ChangePeerState,
        on_convert_from_listener: ChangePeerState,
    ) -> CollectionResult<()> {
        let shard_holder = self.shards_holder.read().await;

        // Sync replica sets
        for replica_set in shard_holder.all_shards() {
            replica_set.sync_local_state(|shard_id, from| {
                shard_holder.get_transfers(|t| t.shard_id == shard_id && t.from == from)
            })?;
        }

        // Check for un-reported finished transfers
        let outgoing_transfers = shard_holder.get_outgoing_transfers(self.this_peer_id);
        let tasks_lock = self.transfer_tasks.lock().await;
        for transfer in outgoing_transfers {
            match tasks_lock.get_task_status(&transfer.key()).map(|s| s.result) {
                None => {
                    log::debug!(
                        "Transfer {:?} does not exist, but not reported as cancelled. Reporting now.",
                        transfer.key(),
                    );
                    on_transfer_failure(transfer, self.name(), "transfer task does not exist");
                }
                Some(TaskResult::Running) => (),
                Some(TaskResult::Finished) => {
                    log::debug!(
                        "Transfer {:?} is finished successfully, but not reported. Reporting now.",
                        transfer.key(),
                    );
                    on_transfer_success(transfer, self.name());
                }
                Some(TaskResult::Failed) => {
                    log::debug!(
                        "Transfer {:?} is failed, but not reported as failed. Reporting now.",
                        transfer.key(),
                    );
                    on_transfer_failure(transfer, self.name(), "transfer failed");
                }
            }
        }

        // Check for proper replica states and possibly auto-recover
        let mut proposed = HashMap::<PeerId, usize>::new();
        for replica_set in shard_holder.all_shards() {
            let this_peer_id = replica_set.this_peer_id();
            let shard_id = replica_set.shard_id;
            let peers = replica_set.peers();
            let this_peer_state = peers.get(&this_peer_id).copied();

            // If initializing, finish init
            if this_peer_state == Some(ReplicaState::Initializing) {
                on_finish_init(this_peer_id, shard_id);
                continue;
            }

            // Listener <-> Active conversion
            let is_last_active =
                peers.values().filter(|&&st| st == ReplicaState::Active).count() == 1;
            if self.shared_storage_config.node_type == NodeType::Listener {
                if this_peer_state == Some(ReplicaState::Active) && !is_last_active {
                    on_convert_to_listener(this_peer_id, shard_id);
                    continue;
                }
            } else if this_peer_state == Some(ReplicaState::Listener) {
                on_convert_from_listener(this_peer_id, shard_id);
                continue;
            }

            // Only recover dead replicas
            if self.shared_storage_config.recovery_mode.is_some() {
                continue;
            }
            if this_peer_state != Some(ReplicaState::Dead) {
                continue;
            }

            let transfers = shard_holder.get_transfers(|_| true);

            // Respect shard transfer limits
            let (mut incoming, outgoing) = shard_holder.count_shard_transfer_io(&this_peer_id);
            incoming += proposed.get(&this_peer_id).copied().unwrap_or(0);
            if self.check_auto_shard_transfer_limit(incoming, outgoing) {
                log::trace!(
                    "Postponing automatic shard {shard_id} transfer to stay below limit on this node \
                     (incoming: {incoming}, outgoing: {outgoing})",
                );
                continue;
            }

            // Try remote sources
            for replica_id in replica_set.active_remote_shards() {
                let shard_transfer_method = self
                    .shared_storage_config
                    .default_shard_transfer_method
                    .unwrap_or_else(|| {
                        let all_support = self
                            .channel_service
                            .all_peers_at_version(&Version::new(1, 8, 0));
                        if all_support {
                            ShardTransferMethod::WalDelta
                        } else {
                            ShardTransferMethod::default()
                        }
                    });
                let transfer = ShardTransfer {
                    from: replica_id,
                    to: this_peer_id,
                    shard_id,
                    to_shard_id: None,
                    sync: true,
                    method: Some(shard_transfer_method),
                };
                if check_transfer_conflicts_strict(&transfer, transfers.iter()).is_some() {
                    continue;
                }
                if let Err(err) = replica_set.health_check(replica_id).await {
                    log::trace!(
                        "Replica {replica_id}/{}/{} is not available to request shard \
                         transfer from: {err}",
                        self.id,
                        shard_id,
                    );
                    continue;
                }

                // Apply limits
                let (inc2, mut out2) = shard_holder.count_shard_transfer_io(&replica_id);
                out2 += proposed.get(&replica_id).copied().unwrap_or(0);
                if self.check_auto_shard_transfer_limit(inc2, out2) {
                    log::trace!(
                        "Postponing automatic shard {shard_id} transfer to stay below limit on peer \
                         {replica_id} (incoming: {inc2}, outgoing: {out2})",
                    );
                    continue;
                }

                *proposed.entry(transfer.from).or_default() += 1;
                *proposed.entry(transfer.to).or_default() += 1;
                self.request_shard_transfer(transfer);
                break;
            }
        }

        Ok(())
    }

    pub async fn get_telemetry_data(&self, detail: TelemetryDetail) -> CollectionTelemetry {
        let (shards, transfers, resharding) = if detail.level >= DetailsLevel::Level3 {
            let shards_holder = self.shards_holder.read().await;
            let mut list = Vec::new();
            for shard in shards_holder.all_shards() {
                list.push(shard.get_telemetry_data(detail).await);
            }
            (
                Some(list),
                Some(shards_holder.get_shard_transfer_info(&*self.transfer_tasks.lock().await)),
                Some(shards_holder.get_resharding_operations_info().unwrap_or_default()),
            )
        } else {
            (None, None, None)
        };

        let shard_clean = self.clean_local_shards_statuses();
        CollectionTelemetry {
            id: self.name(),
            init_time_ms: self.init_time.as_millis() as u64,
            config: CollectionConfigTelemetry::from(self.collection_config.read().await.clone()),
            shards,
            transfers,
            resharding,
            shard_clean_tasks: (!shard_clean.is_empty()).then_some(shard_clean),
        }
    }

    pub async fn get_aggregated_telemetry_data(&self) -> CollectionsAggregatedTelemetry {
        let shards_holder = self.shards_holder.read().await;
        let mut statuses = Vec::new();
        let mut total_vectors = 0;
        for shard in shards_holder.all_shards() {
            let status = shard.get_optimization_status().await.unwrap_or(OptimizersStatus::Ok);
            statuses.push(status);
            total_vectors += shard.get_size_stats().await.num_vectors;
        }
        let overall = statuses.into_iter().max().unwrap_or(OptimizersStatus::Ok);
        CollectionsAggregatedTelemetry {
            vectors: total_vectors,
            optimizers_status: overall,
            params: self.collection_config.read().await.params.clone(),
        }
    }

    pub async fn lock_updates(&self) -> RwLockWriteGuard<()> {
        self.updates_lock.write().await
    }

    pub fn wait_collection_initiated(&self, timeout: Duration) -> bool {
        self.is_initialized.await_ready_for_timeout(timeout)
    }

    pub fn request_shard_transfer(&self, shard_transfer: ShardTransfer) {
        self.request_shard_transfer_cb.deref()(shard_transfer)
    }

    pub fn snapshots_path(&self) -> &Path {
        &self.snapshots_path
    }

    pub fn shards_holder(&self) -> Arc<LockedShardHolder> {
        self.shards_holder.clone()
    }

    pub async fn trigger_optimizers(&self) {
        self.shards_holder.read().await.trigger_optimizers().await;
    }

    async fn estimate_collection_size_stats(
        shards_holder: &Arc<RwLock<ShardHolder>>,
    ) -> Option<CollectionSizeStats> {
        let lock = shards_holder.read().await;
        lock.estimate_collection_size_stats().await
    }

    pub(crate) async fn estimated_collection_stats(
        &self,
    ) -> Option<&CollectionSizeAtomicStats> {
        self.collection_stats_cache
            .get_or_update_cache(|| Self::estimate_collection_size_stats(&self.shards_holder))
            .await
    }
}

struct CollectionVersion;

impl StorageVersion for CollectionVersion {
    fn current_raw() -> &'static str {
        env!("CARGO_PKG_VERSION")
    }
}
```