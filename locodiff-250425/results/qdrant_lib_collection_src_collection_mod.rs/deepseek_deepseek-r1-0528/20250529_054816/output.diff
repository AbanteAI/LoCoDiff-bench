
index 71e15f9b2..44d079092 100644
--- a/qdrant_lib_collection_src_collection_mod.rs_expectedoutput.txt (expected):tmp/tmpemp4g6n5_expected.txt	
+++ b/qdrant_lib_collection_src_collection_mod.rs_extracted.txt (actual):tmp/tmpn82uof9o_actual.txt	
@@ -52,7 +52,7 @@ use crate::shards::shard_holder::{LockedShardHolder, ShardHolder, shard_not_foun
 use crate::shards::transfer::helpers::check_transfer_conflicts_strict;
 use crate::shards::transfer::transfer_tasks_pool::{TaskResult, TransferTasksPool};
 use crate::shards::transfer::{ShardTransfer, ShardTransferMethod};
-use crate::shards::{CollectionId, replica_set};
+use crate::shards::{replica_set, CollectionId};
 use crate::telemetry::{
     CollectionConfigTelemetry, CollectionTelemetry, CollectionsAggregatedTelemetry,
 };
@@ -247,8 +247,6 @@ impl Collection {
         });
         collection_config.validate_and_warn();
 
-        let mut shard_holder = ShardHolder::new(path).expect("Can not create shard holder");
-
         let mut effective_optimizers_config = collection_config.optimizer_config.clone();
 
         if let Some(optimizers_overwrite) = optimizers_overwrite.clone() {
@@ -257,6 +255,8 @@ impl Collection {
                 .expect("Can not apply optimizer overwrite");
         }
 
+        let mut shard_holder = ShardHolder::new(path).expect("Can not create shard holder");
+
         let shared_collection_config = Arc::new(RwLock::new(collection_config.clone()));
 
         let payload_index_schema = Arc::new(
