
index 71e15f9b2..a3a5dc602 100644
--- a/qdrant_lib_collection_src_collection_mod.rs_expectedoutput.txt (expected):tmp/tmpo04w9y52_expected.txt	
+++ b/qdrant_lib_collection_src_collection_mod.rs_extracted.txt (actual):tmp/tmp0xdptitt_actual.txt	
@@ -48,11 +48,11 @@ use crate::shards::replica_set::{
 };
 use crate::shards::shard::{PeerId, ShardId};
 use crate::shards::shard_holder::shard_mapping::ShardKeyMapping;
-use crate::shards::shard_holder::{LockedShardHolder, ShardHolder, shard_not_found_error};
+use crate::shards::shard_holder::{shard_not_found_error, LockedShardHolder, ShardHolder};
 use crate::shards::transfer::helpers::check_transfer_conflicts_strict;
 use crate::shards::transfer::transfer_tasks_pool::{TaskResult, TransferTasksPool};
 use crate::shards::transfer::{ShardTransfer, ShardTransferMethod};
-use crate::shards::{CollectionId, replica_set};
+use crate::shards::{replica_set, CollectionId};
 use crate::telemetry::{
     CollectionConfigTelemetry, CollectionTelemetry, CollectionsAggregatedTelemetry,
 };
@@ -563,6 +563,15 @@ impl Collection {
         }
     }
 
+    pub async fn apply_state(
+        &self,
+        state: State,
+        this_peer_id: PeerId,
+        abort_transfer: impl FnMut(ShardTransfer),
+    ) -> CollectionResult<()> {
+        state.apply(this_peer_id, self, abort_transfer).await
+    }
+
     pub async fn remove_shards_at_peer(&self, peer_id: PeerId) -> CollectionResult<()> {
         // Abort resharding, if shards are removed from peer driving resharding
         // (which *usually* means the *peer* is being removed from consensus)
@@ -593,7 +602,7 @@ impl Collection {
         on_transfer_success: OnTransferSuccess,
         on_finish_init: ChangePeerState,
         on_convert_to_listener: ChangePeerState,
-        on_convert_from_listener: ChangePeerState,
+        on_convert_from_listener: ChangePeerFromState,
     ) -> CollectionResult<()> {
         // Check for disabled replicas
         let shard_holder = self.shards_holder.read().await;
@@ -626,14 +635,14 @@ impl Collection {
                 Some(TaskResult::Finished) => {
                     log::debug!(
                         "Transfer {:?} is finished successfully, but not reported. Reporting now.",
-                        transfer.key(),
+                        transfer.key()
                     );
                     on_transfer_success(transfer, self.name());
                 }
                 Some(TaskResult::Failed) => {
                     log::debug!(
                         "Transfer {:?} is failed, but not reported as failed. Reporting now.",
-                        transfer.key(),
+                        transfer.key()
                     );
                     on_transfer_failure(transfer, self.name(), "transfer failed");
                 }
@@ -673,7 +682,7 @@ impl Collection {
                 }
             } else if this_peer_state == Some(Listener) {
                 // Convert listener node to active
-                on_convert_from_listener(this_peer_id, shard_id);
+                on_convert_from_listener((this_peer_id, this_peer_state), shard_id);
                 continue;
             }
 
@@ -730,7 +739,6 @@ impl Collection {
                     // For automatic shard transfers, always select some default method from this point on
                     method: Some(shard_transfer_method),
                 };
-
                 if check_transfer_conflicts_strict(&transfer, transfers.iter()).is_some() {
                     continue; // this transfer won't work
                 }
@@ -872,13 +880,6 @@ impl Collection {
         self.shards_holder.read().await.trigger_optimizers().await;
     }
 
-    async fn estimate_collection_size_stats(
-        shards_holder: &Arc<RwLock<ShardHolder>>,
-    ) -> Option<CollectionSizeStats> {
-        let shard_lock = shards_holder.read().await;
-        shard_lock.estimate_collection_size_stats().await
-    }
-
     /// Returns estimations of collection sizes. This values are cached and might be not 100% up to date.
     /// The cache gets updated every 32 calls.
     pub(crate) async fn estimated_collection_stats(&self) -> Option<&CollectionSizeAtomicStats> {
