
index 09c15495..d5eca279 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmp9jnc178n_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmpof3wq0yy_actual.txt	
@@ -36,16 +36,14 @@ use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVec
 /// Storage operates with internal IDs (`PointOffsetType`), which always starts with zero and have no skips
 pub trait VectorStorage {
     fn distance(&self) -> Distance;
-
     fn datatype(&self) -> VectorStorageDatatype;
-
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
-
     /// Number of vectors
     ///
     /// - includes soft deleted vectors, as they are still stored
     fn total_vector_count(&self) -> usize;
-
     /// Get the number of available vectors, considering deleted points and vectors
     ///
     /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
@@ -57,20 +55,16 @@ pub trait VectorStorage {
         self.total_vector_count()
             .saturating_sub(self.deleted_vector_count())
     }
-
     /// Get the vector by the given key
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
-
     /// Get the vector by the given key if it exists
     fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;
-
     fn insert_vector(
         &mut self,
         key: PointOffsetType,
         vector: VectorRef,
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()>;
-
     /// Add the given vectors to the storage.
     ///
     /// # Returns
@@ -82,23 +76,17 @@ pub trait VectorStorage {
         other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
         stopped: &AtomicBool,
     ) -> OperationResult<Range<PointOffsetType>>;
-
     fn flusher(&self) -> Flusher;
-
     fn files(&self) -> Vec<PathBuf>;
-
     fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
         Vec::new()
     }
-
     /// Flag the vector by the given key as deleted
     ///
     /// Returns true if the vector was not deleted before and is now deleted
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool>;
-
     /// Check whether the vector at the given key is flagged as deleted
     fn is_deleted_vector(&self, key: PointOffsetType) -> bool;
-
     /// Get the number of deleted vectors, considering deleted points and vectors
     ///
     /// Vectors may be deleted at two levels, as point or as vector. Deleted points should
@@ -114,7 +102,6 @@ pub trait VectorStorage {
     /// when loading/recovering the segment, but that isn't guaranteed. You should therefore use
     /// the deleted count with care.
     fn deleted_vector_count(&self) -> usize;
-
     /// Get [`BitSlice`] representation for deleted vectors with deletion flags
     ///
     /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
@@ -125,7 +112,6 @@ pub trait VectorStorage {
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_dense(&self, key: PointOffsetType) -> &[T];
-
     /// Get the dense vectors by the given keys
     ///
     /// Implementation can assume that the keys are consecutive
@@ -136,7 +122,6 @@ pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     ) -> &'a [&'a [T]] {
         maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_dense(*key))).0
     }
-
     fn size_of_available_vectors_in_bytes(&self) -> usize {
         self.available_vector_count() * self.vector_dim() * std::mem::size_of::<T>()
     }
@@ -162,7 +147,6 @@ pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     }
     fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send;
     fn multi_vector_config(&self) -> &MultiVectorConfig;
-
     fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
@@ -546,8 +530,6 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
-    /// If false - data is stored in RAM (and persisted on disk)
-    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.is_on_disk(),
