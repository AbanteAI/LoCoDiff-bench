
index 09c15495b..5d7906600 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpco3hugj8_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmpye4bicyx_actual.txt	
@@ -1,4 +1,3 @@
-use std::mem::MaybeUninit;
 use std::ops::Range;
 use std::path::PathBuf;
 use std::sync::atomic::AtomicBool;
@@ -16,8 +15,8 @@ use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
 use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
-use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
@@ -31,37 +30,18 @@ use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMma
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
 use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
 
-/// Trait for vector storage
-/// El - type of vector element, expected numerical type
-/// Storage operates with internal IDs (`PointOffsetType`), which always starts with zero and have no skips
 pub trait VectorStorage {
     fn distance(&self) -> Distance;
-
     fn datatype(&self) -> VectorStorageDatatype;
-
     fn is_on_disk(&self) -> bool;
 
-    /// Number of vectors
-    ///
-    /// - includes soft deleted vectors, as they are still stored
     fn total_vector_count(&self) -> usize;
+    fn deleted_vector_count(&self) -> usize;
+    fn deleted_vector_bitslice(&self) -> &BitSlice;
 
-    /// Get the number of available vectors, considering deleted points and vectors
-    ///
-    /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
-    ///
-    /// # Warning
-    ///
-    /// This number may not always be accurate. See warning in [`VectorStorage::deleted_vector_count`] documentation.
-    fn available_vector_count(&self) -> usize {
-        self.total_vector_count()
-            .saturating_sub(self.deleted_vector_count())
-    }
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
 
-    /// Get the vector by the given key
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
-
-    /// Get the vector by the given key if it exists
     fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;
 
     fn insert_vector(
@@ -71,12 +51,6 @@ pub trait VectorStorage {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()>;
 
-    /// Add the given vectors to the storage.
-    ///
-    /// # Returns
-    /// The range of point offsets that were added to the storage.
-    ///
-    /// If stopped, the operation returns a cancellation error.
     fn update_from<'a>(
         &mut self,
         other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
@@ -84,51 +58,25 @@ pub trait VectorStorage {
     ) -> OperationResult<Range<PointOffsetType>>;
 
     fn flusher(&self) -> Flusher;
-
     fn files(&self) -> Vec<PathBuf>;
 
     fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
         Vec::new()
     }
 
-    /// Flag the vector by the given key as deleted
-    ///
-    /// Returns true if the vector was not deleted before and is now deleted
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool>;
-
-    /// Check whether the vector at the given key is flagged as deleted
     fn is_deleted_vector(&self, key: PointOffsetType) -> bool;
 
-    /// Get the number of deleted vectors, considering deleted points and vectors
-    ///
-    /// Vectors may be deleted at two levels, as point or as vector. Deleted points should
-    /// propagate to deleting the vectors. That means that the deleted vector count includes the
-    /// number of deleted points as well.
-    ///
-    /// This includes any vectors that were deleted at creation.
-    ///
-    /// # Warning
-    ///
-    /// In some very exceptional cases it is possible for this count not to include some deleted
-    /// points. That may happen when flushing a segment to disk fails. This should be recovered
-    /// when loading/recovering the segment, but that isn't guaranteed. You should therefore use
-    /// the deleted count with care.
-    fn deleted_vector_count(&self) -> usize;
-
-    /// Get [`BitSlice`] representation for deleted vectors with deletion flags
-    ///
-    /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
-    /// vectors in this segment.
-    fn deleted_vector_bitslice(&self) -> &BitSlice;
+    fn available_vector_count(&self) -> usize {
+        self.total_vector_count()
+            .saturating_sub(self.deleted_vector_count())
+    }
 }
 
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_dense(&self, key: PointOffsetType) -> &[T];
 
-    /// Get the dense vectors by the given keys
-    ///
-    /// Implementation can assume that the keys are consecutive
     fn get_dense_batch<'a>(
         &'a self,
         keys: &[PointOffsetType],
@@ -138,7 +86,9 @@ pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     }
 
     fn size_of_available_vectors_in_bytes(&self) -> usize {
-        self.available_vector_count() * self.vector_dim() * std::mem::size_of::<T>()
+        self.available_vector_count()
+            .saturating_mul(self.vector_dim())
+            .saturating_mul(std::mem::size_of::<T>())
     }
 }
 
@@ -151,6 +101,7 @@ pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_multi(&self, key: PointOffsetType) -> TypedMultiDenseVectorRef<T>;
     fn get_multi_opt(&self, key: PointOffsetType) -> Option<TypedMultiDenseVectorRef<T>>;
+
     fn get_batch_multi<'a>(
         &'a self,
         keys: &[PointOffsetType],
@@ -160,10 +111,15 @@ pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
         debug_assert!(keys.len() <= VECTOR_READ_BATCH_SIZE);
         maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_multi(*key))).0
     }
+
     fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send;
     fn multi_vector_config(&self) -> &MultiVectorConfig;
 
-    fn size_of_available_vectors_in_bytes(&self) -> usize;
+    fn size_of_available_vectors_in_bytes(&self) -> usize {
+        self.available_vector_count()
+            .saturating_mul(self.vector_dim())
+            .saturating_mul(std::mem::size_of::<T>())
+    }
 }
 
 #[derive(Debug)]
@@ -304,24 +260,32 @@ impl VectorStorageEnum {
             VectorStorageEnum::MultiDenseSimpleByte(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseSimpleHalf(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseAppendableMemmap(s) => Some(s.multi_vector_config()),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(s) => Some(s.multi_vector_config()),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(s) => Some(s.multi_vector_config()),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(s) => {
+                Some(s.multi_vector_config())
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(s) => {
+                Some(s.multi_vector_config())
+            }
             VectorStorageEnum::MultiDenseAppendableInRam(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseAppendableInRamByte(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseAppendableInRamHalf(s) => Some(s.multi_vector_config()),
         }
     }
 
-    pub(crate) fn default_vector(&self) -> VectorInternal {
+    pub fn default_vector(&self) -> VectorInternal {
         match self {
-            VectorStorageEnum::DenseSimple(v) => VectorInternal::from(vec![1.0; v.vector_dim()]),
+            VectorStorageEnum::DenseSimple(v) => {
+                VectorInternal::from(vec![1.0; v.vector_dim()])
+            }
             VectorStorageEnum::DenseSimpleByte(v) => {
                 VectorInternal::from(vec![1.0; v.vector_dim()])
             }
             VectorStorageEnum::DenseSimpleHalf(v) => {
                 VectorInternal::from(vec![1.0; v.vector_dim()])
             }
-            VectorStorageEnum::DenseMemmap(v) => VectorInternal::from(vec![1.0; v.vector_dim()]),
+            VectorStorageEnum::DenseMemmap(v) => {
+                VectorInternal::from(vec![1.0; v.vector_dim()])
+            }
             VectorStorageEnum::DenseMemmapByte(v) => {
                 VectorInternal::from(vec![1.0; v.vector_dim()])
             }
@@ -346,8 +310,12 @@ impl VectorStorageEnum {
             VectorStorageEnum::DenseAppendableInRamHalf(v) => {
                 VectorInternal::from(vec![1.0; v.vector_dim()])
             }
-            VectorStorageEnum::SparseSimple(_) => VectorInternal::from(SparseVector::default()),
-            VectorStorageEnum::SparseMmap(_) => VectorInternal::from(SparseVector::default()),
+            VectorStorageEnum::SparseSimple(_) => {
+                VectorInternal::from(SparseVector::default())
+            }
+            VectorStorageEnum::SparseMmap(_) => {
+                VectorInternal::from(SparseVector::default())
+            }
             VectorStorageEnum::MultiDenseSimple(v) => {
                 VectorInternal::from(MultiDenseVectorInternal::placeholder(v.vector_dim()))
             }
@@ -461,9 +429,9 @@ impl VectorStorageEnum {
 
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
-            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseSimple(_) => {} // Can't clear as it is not mmap
+            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't clear as it is not mmap
+            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't clear as it is not mmap
             VectorStorageEnum::DenseMemmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseMemmapByte(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseMemmapHalf(vs) => vs.clear_cache()?,
@@ -473,11 +441,11 @@ impl VectorStorageEnum {
             VectorStorageEnum::DenseAppendableInRam(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::SparseSimple(_) => {} // Can't clear as it is not mmap
             VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't clear as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't clear as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't clear as it is not mmap
             VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
@@ -546,8 +514,6 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
-    /// If false - data is stored in RAM (and persisted on disk)
-    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.is_on_disk(),
@@ -604,6 +570,62 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn deleted_vector_count(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_count(),
+            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_count(),
+        }
+    }
+
+    fn deleted_vector_bitslice(&self) -> &BitSlice {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
+        }
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
@@ -733,8 +755,12 @@ impl VectorStorage for VectorStorageEnum {
                 v.update_from(other_vectors, stopped)
             }
             VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_vectors, stopped),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => {
+                v.update_from(other_vectors, stopped)
+            }
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
+                v.update_from(other_vectors, stopped)
+            }
             VectorStorageEnum::SparseSimple(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::SparseMmap(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_vectors, stopped),
@@ -872,60 +898,4 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.is_deleted_vector(key),
         }
     }
-
-    fn deleted_vector_count(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_count(),
-        }
-    }
-
-    fn deleted_vector_bitslice(&self) -> &BitSlice {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
-        }
-    }
 }
\ No newline at end of file
