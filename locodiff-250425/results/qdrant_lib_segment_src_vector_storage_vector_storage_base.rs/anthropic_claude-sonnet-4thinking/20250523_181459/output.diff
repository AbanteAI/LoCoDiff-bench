
index 09c15495b..100fe23a8 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpp64kmr4x_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmprzdo44zb_actual.txt	
@@ -16,8 +16,8 @@ use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
 use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
-use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
@@ -39,6 +39,8 @@ pub trait VectorStorage {
 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -817,6 +819,34 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.versioned_files(),
+            VectorStorageEnum::SparseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::SparseMmap(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.versioned_files(),
+        }
+    }
+
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool> {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.delete_vector(key),
