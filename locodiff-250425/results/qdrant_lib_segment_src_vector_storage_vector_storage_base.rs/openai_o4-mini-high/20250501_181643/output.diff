--- qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual)@@ -9,13 +9,6 @@ use common::types::PointOffsetType;
 use sparse::common::sparse_vector::SparseVector;
 
-use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
-use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
-use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
-    AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
-};
-use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
-use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
 use crate::data_types::named_vectors::CowVector;
@@ -26,10 +19,16 @@ };
 use crate::types::{Distance, MultiVectorConfig, SeqNumberType, VectorStorageDatatype};
 use crate::vector_storage::chunked_mmap_vectors::ChunkedMmapVectors;
-use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
 use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
 use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
+use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
+use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::mmap_sparse_vector_storage::MmapSparseVectorStorage;
+use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
+    AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
+};
+use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
 
 /// Trait for vector storage
 /// El - type of vector element, expected numerical type
@@ -39,8 +38,6 @@ 
     fn datatype(&self) -> VectorStorageDatatype;
 
-    fn is_on_disk(&self) -> bool;
-
     /// Number of vectors
     ///
     /// - includes soft deleted vectors, as they are still stored
@@ -48,11 +45,11 @@ 
     /// Get the number of available vectors, considering deleted points and vectors
     ///
-    /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
+    /// This uses [`total_vector_count`] and [`deleted_vector_count`] internally.
     ///
     /// # Warning
     ///
-    /// This number may not always be accurate. See warning in [`VectorStorage::deleted_vector_count`] documentation.
+    /// This number may not always be accurate. See warning in [`deleted_vector_count`] documentation.
     fn available_vector_count(&self) -> usize {
         self.total_vector_count()
             .saturating_sub(self.deleted_vector_count())
@@ -63,13 +60,6 @@ 
     /// Get the vector by the given key if it exists
     fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;
-
-    fn insert_vector(
-        &mut self,
-        key: PointOffsetType,
-        vector: VectorRef,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
 
     /// Add the given vectors to the storage.
     ///
@@ -83,14 +73,6 @@         stopped: &AtomicBool,
     ) -> OperationResult<Range<PointOffsetType>>;
 
-    fn flusher(&self) -> Flusher;
-
-    fn files(&self) -> Vec<PathBuf>;
-
-    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
-        Vec::new()
-    }
-
     /// Flag the vector by the given key as deleted
     ///
     /// Returns true if the vector was not deleted before and is now deleted
@@ -104,8 +86,6 @@     /// Vectors may be deleted at two levels, as point or as vector. Deleted points should
     /// propagate to deleting the vectors. That means that the deleted vector count includes the
     /// number of deleted points as well.
-    ///
-    /// This includes any vectors that were deleted at creation.
     ///
     /// # Warning
     ///
@@ -120,8 +100,30 @@     /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
     /// vectors in this segment.
     fn deleted_vector_bitslice(&self) -> &BitSlice;
+
+    /// Iterator over `n` random ids which are not deleted
+    fn sample_ids(&self) -> Box<dyn Iterator<Item = PointOffsetType> + '_> {
+        let total = self.total_vector_count() as PointOffsetType;
+        let mut rng = rand::thread_rng();
+        Box::new(
+            (0..total)
+                .map(move |_| rng.gen_range(0..total))
+                .filter(move |x| !self.is_deleted_vector(*x)),
+        )
+    }
+
+    fn files(&self) -> Vec<PathBuf>;
+
+    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
+        Vec::new()
+    }
+
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
+    fn is_on_disk(&self) -> bool;
 }
 
+/// Trait for dense vector storage
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_dense(&self, key: PointOffsetType) -> &[T];
@@ -142,15 +144,22 @@     }
 }
 
+/// Trait for sparse vector storage
 pub trait SparseVectorStorage: VectorStorage {
     fn get_sparse(&self, key: PointOffsetType) -> OperationResult<SparseVector>;
     fn get_sparse_opt(&self, key: PointOffsetType) -> OperationResult<Option<SparseVector>>;
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
+/// Trait for multi-vector storage
 pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_multi(&self, key: PointOffsetType) -> TypedMultiDenseVectorRef<T>;
     fn get_multi_opt(&self, key: PointOffsetType) -> Option<TypedMultiDenseVectorRef<T>>;
+
+    /// Get the multi-dense vectors by the given keys
+    ///
+    /// Implementation can assume that the keys are consecutive
     fn get_batch_multi<'a>(
         &'a self,
         keys: &[PointOffsetType],
@@ -160,9 +169,9 @@         debug_assert!(keys.len() <= VECTOR_READ_BATCH_SIZE);
         maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_multi(*key))).0
     }
+
     fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send;
     fn multi_vector_config(&self) -> &MultiVectorConfig;
-
     fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
@@ -378,58 +387,6 @@         }
     }
 
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
     pub fn populate(&self) -> OperationResult<()> {
         match self {
             VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
@@ -673,7 +630,9 @@             VectorStorageEnum::DenseMemmap(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::DenseMemmapByte(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::DenseMemmapHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.insert_vector(key, vector, hw_counter),
+            VectorStorageEnum::DenseAppendableMemmap(v) => {
+                v.insert_vector(key, vector, hw_counter)
+            }
             VectorStorageEnum::DenseAppendableMemmapByte(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
@@ -690,8 +649,12 @@             VectorStorageEnum::SparseSimple(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::SparseMmap(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::MultiDenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => {
+                v.insert_vector(key, vector, hw_counter)
+            }
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => {
+                v.insert_vector(key, vector, hw_counter)
+            }
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
@@ -710,110 +673,6 @@             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
-        }
-    }
-
-    fn update_from<'a>(
-        &mut self,
-        other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
-        stopped: &AtomicBool,
-    ) -> OperationResult<Range<PointOffsetType>> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseMmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-        }
-    }
-
-    fn flusher(&self) -> Flusher {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.flusher(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.flusher(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmap(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.flusher(),
-            VectorStorageEnum::SparseSimple(v) => v.flusher(),
-            VectorStorageEnum::SparseMmap(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.flusher(),
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.files(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.files(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.files(),
-            VectorStorageEnum::DenseMemmap(v) => v.files(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.files(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.files(),
-            VectorStorageEnum::SparseSimple(v) => v.files(),
-            VectorStorageEnum::SparseMmap(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.files(),
         }
     }
 
