--- qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual)@@ -11,59 +11,56 @@ 
 use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
 use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
 use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
+use crate::common::operation_error::OperationResult;
 use crate::common::Flusher;
-use crate::common::operation_error::OperationResult;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
-    MultiDenseVectorInternal, TypedMultiDenseVectorRef, VectorElementType, VectorElementTypeByte,
-    VectorElementTypeHalf, VectorInternal, VectorRef,
+    MultiDenseVectorInternal, TypedMultiDenseVectorRef, VectorElementType,
+    VectorElementTypeByte, VectorElementTypeHalf, VectorInternal, VectorRef,
 };
 use crate::types::{Distance, MultiVectorConfig, SeqNumberType, VectorStorageDatatype};
 use crate::vector_storage::chunked_mmap_vectors::ChunkedMmapVectors;
-use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
-use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
 use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
 
 /// Trait for vector storage
-/// El - type of vector element, expected numerical type
-/// Storage operates with internal IDs (`PointOffsetType`), which always starts with zero and have no skips
+/// Storage operates with internal IDs (`PointOffsetType`), zero-based, no skips.
 pub trait VectorStorage {
     fn distance(&self) -> Distance;
 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false: data is in RAM (persisted on disk).
+    /// If true: data is on disk, not forced into RAM.
     fn is_on_disk(&self) -> bool;
 
-    /// Number of vectors
+    /// Number of vectors (including soft-deleted).
+    fn total_vector_count(&self) -> usize;
+
+    /// Number of available vectors (total minus deleted).
     ///
-    /// - includes soft deleted vectors, as they are still stored
-    fn total_vector_count(&self) -> usize;
-
-    /// Get the number of available vectors, considering deleted points and vectors
-    ///
-    /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
-    ///
-    /// # Warning
-    ///
-    /// This number may not always be accurate. See warning in [`VectorStorage::deleted_vector_count`] documentation.
+    /// Uses [`total_vector_count`] and [`deleted_vector_count`].
+    /// May be inaccurate if flush fails.
     fn available_vector_count(&self) -> usize {
         self.total_vector_count()
             .saturating_sub(self.deleted_vector_count())
     }
 
-    /// Get the vector by the given key
+    /// Get the vector by key.
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
 
-    /// Get the vector by the given key if it exists
+    /// Optionally get the vector by key.
     fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;
 
+    /// Insert a single vector.
+    /// Returns `()` on success, or cancellation if stopped.
     fn insert_vector(
         &mut self,
         key: PointOffsetType,
@@ -71,64 +68,42 @@         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()>;
 
-    /// Add the given vectors to the storage.
-    ///
-    /// # Returns
-    /// The range of point offsets that were added to the storage.
-    ///
-    /// If stopped, the operation returns a cancellation error.
+    /// Bulk update from iterator of `(vector, delete_flag)`.
+    /// Returns inserted range or cancellation.
     fn update_from<'a>(
         &mut self,
         other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
         stopped: &AtomicBool,
     ) -> OperationResult<Range<PointOffsetType>>;
 
-    fn flusher(&self) -> Flusher;
+    /// Delete a vector by key. Returns true if it was not deleted before.
+    fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool>;
+
+    /// Check if vector is deleted.
+    fn is_deleted_vector(&self, key: PointOffsetType) -> bool;
+
+    /// Count of deleted vectors (includes propagated point-deletes).
+    ///
+    /// May be inaccurate if flush fails.
+    fn deleted_vector_count(&self) -> usize;
+
+    /// BitSlice of deletion flags (size may differ).
+    fn deleted_vector_bitslice(&self) -> &BitSlice;
 
     fn files(&self) -> Vec<PathBuf>;
 
+    /// Versioned files for snapshotting: `(path, sequence_number)`.
     fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
         Vec::new()
     }
-
-    /// Flag the vector by the given key as deleted
-    ///
-    /// Returns true if the vector was not deleted before and is now deleted
-    fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool>;
-
-    /// Check whether the vector at the given key is flagged as deleted
-    fn is_deleted_vector(&self, key: PointOffsetType) -> bool;
-
-    /// Get the number of deleted vectors, considering deleted points and vectors
-    ///
-    /// Vectors may be deleted at two levels, as point or as vector. Deleted points should
-    /// propagate to deleting the vectors. That means that the deleted vector count includes the
-    /// number of deleted points as well.
-    ///
-    /// This includes any vectors that were deleted at creation.
-    ///
-    /// # Warning
-    ///
-    /// In some very exceptional cases it is possible for this count not to include some deleted
-    /// points. That may happen when flushing a segment to disk fails. This should be recovered
-    /// when loading/recovering the segment, but that isn't guaranteed. You should therefore use
-    /// the deleted count with care.
-    fn deleted_vector_count(&self) -> usize;
-
-    /// Get [`BitSlice`] representation for deleted vectors with deletion flags
-    ///
-    /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
-    /// vectors in this segment.
-    fn deleted_vector_bitslice(&self) -> &BitSlice;
-}
-
+}
+
+/// Trait for dense vector storage.
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_dense(&self, key: PointOffsetType) -> &[T];
 
-    /// Get the dense vectors by the given keys
-    ///
-    /// Implementation can assume that the keys are consecutive
+    /// Batch get for consecutive keys.
     fn get_dense_batch<'a>(
         &'a self,
         keys: &[PointOffsetType],
@@ -137,32 +112,39 @@         maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_dense(*key))).0
     }
 
+    /// Size in bytes of available vectors.
     fn size_of_available_vectors_in_bytes(&self) -> usize {
         self.available_vector_count() * self.vector_dim() * std::mem::size_of::<T>()
     }
 }
 
+/// Trait for sparse vector storage.
 pub trait SparseVectorStorage: VectorStorage {
     fn get_sparse(&self, key: PointOffsetType) -> OperationResult<SparseVector>;
     fn get_sparse_opt(&self, key: PointOffsetType) -> OperationResult<Option<SparseVector>>;
 }
 
+/// Trait for multi-dense vector storage.
 pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn vector_dim(&self) -> usize;
     fn get_multi(&self, key: PointOffsetType) -> TypedMultiDenseVectorRef<T>;
     fn get_multi_opt(&self, key: PointOffsetType) -> Option<TypedMultiDenseVectorRef<T>>;
+
+    /// Batch get for multi-vectors.
     fn get_batch_multi<'a>(
         &'a self,
         keys: &[PointOffsetType],
         vectors: &'a mut [MaybeUninit<TypedMultiDenseVectorRef<'a, T>>],
     ) -> &'a [TypedMultiDenseVectorRef<'a, T>] {
         debug_assert_eq!(keys.len(), vectors.len());
-        debug_assert!(keys.len() <= VECTOR_READ_BATCH_SIZE);
+        debug_assert!(keys.len() <= crate::vector_storage::common::VECTOR_READ_BATCH_SIZE);
         maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_multi(*key))).0
     }
+
     fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send;
     fn multi_vector_config(&self) -> &MultiVectorConfig;
 
+    /// Size in bytes of available multi-vectors.
     fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
@@ -284,22 +266,9 @@ }
 
 impl VectorStorageEnum {
+    /// Try to get multi-vector config.
     pub fn try_multi_vector_config(&self) -> Option<&MultiVectorConfig> {
         match self {
-            VectorStorageEnum::DenseSimple(_) => None,
-            VectorStorageEnum::DenseSimpleByte(_) => None,
-            VectorStorageEnum::DenseSimpleHalf(_) => None,
-            VectorStorageEnum::DenseMemmap(_) => None,
-            VectorStorageEnum::DenseMemmapByte(_) => None,
-            VectorStorageEnum::DenseMemmapHalf(_) => None,
-            VectorStorageEnum::DenseAppendableMemmap(_) => None,
-            VectorStorageEnum::DenseAppendableMemmapByte(_) => None,
-            VectorStorageEnum::DenseAppendableMemmapHalf(_) => None,
-            VectorStorageEnum::DenseAppendableInRam(_) => None,
-            VectorStorageEnum::DenseAppendableInRamByte(_) => None,
-            VectorStorageEnum::DenseAppendableInRamHalf(_) => None,
-            VectorStorageEnum::SparseSimple(_) => None,
-            VectorStorageEnum::SparseMmap(_) => None,
             VectorStorageEnum::MultiDenseSimple(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseSimpleByte(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseSimpleHalf(s) => Some(s.multi_vector_config()),
@@ -309,9 +278,11 @@             VectorStorageEnum::MultiDenseAppendableInRam(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseAppendableInRamByte(s) => Some(s.multi_vector_config()),
             VectorStorageEnum::MultiDenseAppendableInRamHalf(s) => Some(s.multi_vector_config()),
-        }
-    }
-
+            _ => None,
+        }
+    }
+
+    /// Default placeholder vector.
     pub(crate) fn default_vector(&self) -> VectorInternal {
         match self {
             VectorStorageEnum::DenseSimple(v) => VectorInternal::from(vec![1.0; v.vector_dim()]),
@@ -378,112 +349,54 @@         }
     }
 
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
+    /// Populate any mmap-backed regions.
     pub fn populate(&self) -> OperationResult<()> {
         match self {
-            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::DenseMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.populate()?,
-            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::SparseMmap(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.populate()?,
+            VectorStorageEnum::DenseMemmap(vs)
+            | VectorStorageEnum::DenseMemmapByte(vs)
+            | VectorStorageEnum::DenseMemmapHalf(vs)
+            | VectorStorageEnum::DenseAppendableMemmap(vs)
+            | VectorStorageEnum::DenseAppendableMemmapByte(vs)
+            | VectorStorageEnum::DenseAppendableMemmapHalf(vs)
+            | VectorStorageEnum::DenseAppendableInRam(vs)
+            | VectorStorageEnum::DenseAppendableInRamByte(vs)
+            | VectorStorageEnum::DenseAppendableInRamHalf(vs)
+            | VectorStorageEnum::SparseMmap(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmap(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmapByte(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRam(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRamByte(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => {
+                vs.populate()?
+            }
+            _ => {}
         }
         Ok(())
     }
 
+    /// Clear any mmap-backed caches.
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
-            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseMemmap(vs)
+            | VectorStorageEnum::DenseMemmapByte(vs)
+            | VectorStorageEnum::DenseMemmapHalf(vs)
+            | VectorStorageEnum::DenseAppendableMemmap(vs)
+            | VectorStorageEnum::DenseAppendableMemmapByte(vs)
+            | VectorStorageEnum::DenseAppendableMemmapHalf(vs)
+            | VectorStorageEnum::DenseAppendableInRam(vs)
+            | VectorStorageEnum::DenseAppendableInRamByte(vs)
+            | VectorStorageEnum::DenseAppendableInRamHalf(vs)
+            | VectorStorageEnum::SparseMmap(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmap(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmapByte(vs)
+            | VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRam(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRamByte(vs)
+            | VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => {
+                vs.clear_cache()?
+            }
+            _ => {}
         }
         Ok(())
     }
@@ -546,8 +459,6 @@         }
     }
 
-    /// If false - data is stored in RAM (and persisted on disk)
-    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.is_on_disk(),
@@ -579,353 +490,4 @@     fn total_vector_count(&self) -> usize {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseMemmap(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::SparseSimple(v) => v.total_vector_count(),
-            VectorStorageEnum::SparseMmap(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.total_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.total_vector_count(),
-        }
-    }
-
-    fn get_vector(&self, key: PointOffsetType) -> CowVector {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
-            VectorStorageEnum::DenseSimpleByte(v) => v.get_vector(key),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.get_vector(key),
-            VectorStorageEnum::DenseMemmap(v) => v.get_vector(key),
-            VectorStorageEnum::DenseMemmapByte(v) => v.get_vector(key),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.get_vector(key),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.get_vector(key),
-            VectorStorageEnum::SparseSimple(v) => v.get_vector(key),
-            VectorStorageEnum::SparseMmap(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseSimple(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.get_vector(key),
-        }
-    }
-
-    fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseSimpleByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseMemmap(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseMemmapByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::SparseSimple(v) => v.get_vector_opt(key),
-            VectorStorageEnum::SparseMmap(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseSimple(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.get_vector_opt(key),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.get_vector_opt(key),
-        }
-    }
-
-    fn insert_vector(
-        &mut self,
-        key: PointOffsetType,
-        vector: VectorRef,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmapByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::SparseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::SparseMmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-        }
-    }
-
-    fn update_from<'a>(
-        &mut self,
-        other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
-        stopped: &AtomicBool,
-    ) -> OperationResult<Range<PointOffsetType>> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseMmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-        }
-    }
-
-    fn flusher(&self) -> Flusher {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.flusher(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.flusher(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmap(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.flusher(),
-            VectorStorageEnum::SparseSimple(v) => v.flusher(),
-            VectorStorageEnum::SparseMmap(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.flusher(),
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.files(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.files(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.files(),
-            VectorStorageEnum::DenseMemmap(v) => v.files(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.files(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.files(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.files(),
-            VectorStorageEnum::SparseSimple(v) => v.files(),
-            VectorStorageEnum::SparseMmap(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.files(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.files(),
-        }
-    }
-
-    fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool> {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseSimpleByte(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseMemmap(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseMemmapByte(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::SparseSimple(v) => v.delete_vector(key),
-            VectorStorageEnum::SparseMmap(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseSimple(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.delete_vector(key),
-        }
-    }
-
-    fn is_deleted_vector(&self, key: PointOffsetType) -> bool {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseSimpleByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseMemmap(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseMemmapByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::SparseSimple(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::SparseMmap(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseSimple(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.is_deleted_vector(key),
-        }
-    }
-
-    fn deleted_vector_count(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_count(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_count(),
-        }
-    }
-
-    fn deleted_vector_bitslice(&self) -> &BitSlice {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::SparseMmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
-        }
-    }
-}+            VectorStorageEnum::DenseSimpleByte(v) => v.total_vector_count(),