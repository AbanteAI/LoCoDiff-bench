
index 09c15495..fbccc139 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpc0fzh1vl_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmpy3nzp53g_actual.txt	
@@ -11,13 +11,14 @@ use sparse::common::sparse_vector::SparseVector;
 
 use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
 use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
-use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
-use crate::common::Flusher;
+use super::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
@@ -29,7 +30,6 @@ use crate::vector_storage::chunked_mmap_vectors::ChunkedMmapVectors;
 use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
 use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
-use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
 
 /// Trait for vector storage
 /// El - type of vector element, expected numerical type
@@ -39,6 +39,8 @@ pub trait VectorStorage {
 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -58,6 +60,8 @@ pub trait VectorStorage {
             .saturating_sub(self.deleted_vector_count())
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
+
     /// Get the vector by the given key
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
 
@@ -118,7 +122,7 @@ pub trait VectorStorage {
     /// Get [`BitSlice`] representation for deleted vectors with deletion flags
     ///
     /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
-    /// vectors in this segment.
+    /// vectors in this segment. It MUST be at least total_vector_count() big.
     fn deleted_vector_bitslice(&self) -> &BitSlice;
 }
 
@@ -378,58 +382,6 @@ impl VectorStorageEnum {
         }
     }
 
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
     pub fn populate(&self) -> OperationResult<()> {
         match self {
             VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
@@ -438,12 +390,12 @@ impl VectorStorageEnum {
             VectorStorageEnum::DenseMemmap(vs) => vs.populate()?,
             VectorStorageEnum::DenseMemmapByte(vs) => vs.populate()?,
             VectorStorageEnum::DenseMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.vectors.populate()?,
+            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.vectors.populate()?,
+            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.vectors.populate()?,
+            VectorStorageEnum::DenseAppendableInRam(vs) => vs.vectors.populate()?,
+            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.vectors.populate()?,
+            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.vectors.populate()?,
             VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
             VectorStorageEnum::SparseMmap(vs) => vs.populate()?,
             VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
@@ -467,12 +419,12 @@ impl VectorStorageEnum {
             VectorStorageEnum::DenseMemmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseMemmapByte(vs) => vs.clear_cache()?,
             VectorStorageEnum::DenseMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.vectors.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.vectors.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.vectors.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRam(vs) => vs.vectors.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.vectors.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.vectors.clear_cache()?,
             VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
             VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
@@ -604,6 +556,58 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::SparseMmap(_v) => {
+                unreachable!(
+                    "Mmap sparse storage does not know its total size, get from index instead"
+                )
+            }
+            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+        }
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
@@ -749,9 +753,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
                 v.update_from(other_vectors, stopped)
             }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.update_from(other_vectors, stopped)
-            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
                 v.update_from(other_vectors, stopped)
             }
@@ -928,4 +930,173 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
         }
     }
+}
+
+impl<T: PrimitiveVectorElement> DenseVectorStorage<T> for VectorStorageEnum {
+    fn vector_dim(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.vector_dim(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.vector_dim(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.vector_dim(),
+            VectorStorageEnum::DenseMemmap(v) => v.vector_dim(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.vector_dim(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.vector_dim(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.vector_dim(),
+            _ => unreachable!("Expected dense vector storage"),
+        }
+    }
+
+    fn get_dense(&self, key: PointOffsetType) -> &[T] {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.get_dense(key),
+            VectorStorageEnum::DenseSimpleByte(v) => v.get_dense(key),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.get_dense(key),
+            VectorStorageEnum::DenseMemmap(v) => v.get_dense(key),
+            VectorStorageEnum::DenseMemmapByte(v) => v.get_dense(key),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.get_dense(key),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.get_dense(key),
+            _ => unreachable!("Expected dense vector storage"),
+        }
+    }
+}
+
+impl SparseVectorStorage for VectorStorageEnum {
+    fn get_sparse(&self, key: PointOffsetType) -> OperationResult<SparseVector> {
+        match self {
+            VectorStorageEnum::SparseSimple(v) => v.get_sparse(key),
+            VectorStorageEnum::SparseMmap(v) => v.get_sparse(key),
+            _ => unreachable!("Expected sparse vector storage"),
+        }
+    }
+
+    fn get_sparse_opt(&self, key: PointOffsetType) -> OperationResult<Option<SparseVector>> {
+        match self {
+            VectorStorageEnum::SparseSimple(v) => v.get_sparse_opt(key),
+            VectorStorageEnum::SparseMmap(v) => v.get_sparse_opt(key),
+            _ => unreachable!("Expected sparse vector storage"),
+        }
+    }
+}
+
+impl<T: PrimitiveVectorElement> MultiVectorStorage<T> for VectorStorageEnum {
+    fn vector_dim(&self) -> usize {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.vector_dim(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.vector_dim(),
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
+
+    fn get_multi(&self, key: PointOffsetType) -> TypedMultiDenseVectorRef<T> {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.get_multi(key),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.get_multi(key),
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
+
+    fn get_multi_opt(&self, key: PointOffsetType) -> Option<TypedMultiDenseVectorRef<T>> {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.get_multi_opt(key),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.get_multi_opt(key),
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
+
+    fn get_batch_multi<'a>(
+        &'a self,
+        keys: &[PointOffsetType],
+        vectors: &'a mut [MaybeUninit<TypedMultiDenseVectorRef<'a, T>>],
+    ) -> &'a [TypedMultiDenseVectorRef<'a, T>] {
+        common::maybe_uninit::maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_multi(*key)))
+            .0
+    }
+
+    fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.iterate_inner_vectors(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.iterate_inner_vectors(),
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
+
+    fn multi_vector_config(&self) -> &MultiVectorConfig {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.multi_vector_config(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.multi_vector_config(),
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
+
+    fn size_of_available_vectors_in_bytes(&self) -> usize {
+        match self {
+            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            _ => unreachable!("Expected multi dense vector storage"),
+        }
+    }
 }
\ No newline at end of file
