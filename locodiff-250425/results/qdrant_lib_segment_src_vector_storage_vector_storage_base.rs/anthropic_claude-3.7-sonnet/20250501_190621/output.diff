--- qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual)@@ -1,6 +1,6 @@ use std::mem::MaybeUninit;
 use std::ops::Range;
-use std::path::PathBuf;
+use std::path::{Path, PathBuf};
 use std::sync::atomic::AtomicBool;
 
 use bitvec::prelude::BitSlice;
@@ -11,6 +11,7 @@ 
 use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
 use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
 };
@@ -39,6 +40,8 @@ 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -749,9 +752,7 @@             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
                 v.update_from(other_vectors, stopped)
             }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.update_from(other_vectors, stopped)
-            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
                 v.update_from(other_vectors, stopped)
             }
