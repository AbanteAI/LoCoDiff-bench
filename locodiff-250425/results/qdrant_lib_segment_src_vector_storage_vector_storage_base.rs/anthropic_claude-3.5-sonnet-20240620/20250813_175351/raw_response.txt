```rust
pub trait VectorStorage {
    fn vector_dim(&self) -> usize;

    fn distance(&self) -> Distance;

    fn datatype(&self) -> VectorStorageDatatype;

    fn is_on_disk(&self) -> bool;

    fn total_vector_count(&self) -> usize;

    fn deleted_vector_count(&self) -> usize;

    fn available_vector_count(&self) -> usize {
        self.total_vector_count()
            .saturating_sub(self.deleted_vector_count())
    }

    fn get_vector(&self, key: PointOffsetType) -> CowVector;

    fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;

    fn insert_vector(
        &mut self,
        key: PointOffsetType,
        vector: VectorRef,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<()>;

    fn update_from<'a>(
        &mut self,
        other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
        stopped: &AtomicBool,
    ) -> OperationResult<Range<PointOffsetType>>;

    fn flusher(&self) -> Flusher;

    fn files(&self) -> Vec<PathBuf>;

    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
        Vec::new()
    }

    fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool>;

    fn is_deleted_vector(&self, key: PointOffsetType) -> bool;

    fn deleted_vector_bitslice(&self) -> &BitSlice;
}
```

This trait defines the interface for a vector storage in the system. It includes methods for:

- Getting metadata like vector dimension, distance metric, data type
- Querying vector counts (total, deleted, available)
- Retrieving and inserting vectors
- Updating from another storage
- Flushing changes
- Listing files
- Deleting vectors
- Checking deletion status

The key operations are:

- `get_vector/get_vector_opt` to retrieve vectors
- `insert_vector` to add new vectors
- `update_from` to bulk update from another storage
- `delete_vector` to mark vectors as deleted

It also provides some default implementations like `available_vector_count` and `versioned_files`.