
index 09c15495..c97b8da7 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpgd0ppov1_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmpbg6b83kv_actual.txt	
@@ -39,6 +39,8 @@ pub trait VectorStorage {
 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -48,11 +50,11 @@ pub trait VectorStorage {
 
     /// Get the number of available vectors, considering deleted points and vectors
     ///
-    /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
+    /// This uses [`total_vector_count`] and [`deleted_vector_count`] internally.
     ///
     /// # Warning
     ///
-    /// This number may not always be accurate. See warning in [`VectorStorage::deleted_vector_count`] documentation.
+    /// This number may not always be accurate. See warning in [`deleted_vector_count`] documentation.
     fn available_vector_count(&self) -> usize {
         self.total_vector_count()
             .saturating_sub(self.deleted_vector_count())
@@ -120,6 +122,10 @@ pub trait VectorStorage {
     /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
     /// vectors in this segment.
     fn deleted_vector_bitslice(&self) -> &BitSlice;
+
+    fn populate(&self) -> OperationResult<()>;
+
+    fn clear_cache(&self) -> OperationResult<()>;
 }
 
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
@@ -378,58 +384,6 @@ impl VectorStorageEnum {
         }
     }
 
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
     pub fn populate(&self) -> OperationResult<()> {
         match self {
             VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
@@ -604,6 +558,34 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn available_vector_count(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseMemmap(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.available_vector_count(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::SparseSimple(v) => v.available_vector_count(),
+            VectorStorageEnum::SparseMmap(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.available_vector_count(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.available_vector_count(),
+        }
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
@@ -817,6 +799,34 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.versioned_files(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.versioned_files(),
+            VectorStorageEnum::SparseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::SparseMmap(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.versioned_files(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.versioned_files(),
+        }
+    }
+
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool> {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.delete_vector(key),
@@ -928,4 +938,62 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
         }
     }
+
+    fn populate(&self) -> OperationResult<()> {
+        match self {
+            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseMemmap(vs) => vs.populate()?,
+            VectorStorageEnum::DenseMemmapByte(vs) => vs.populate()?,
+            VectorStorageEnum::DenseMemmapHalf(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableInRam(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.populate()?,
+            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.populate()?,
+            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::SparseMmap(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.populate()?,
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.populate()?,
+        }
+        Ok(())
+    }
+
+    fn clear_cache(&self) -> OperationResult<()> {
+        match self {
+            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::DenseMemmap(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseMemmapByte(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseMemmapHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRam(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.clear_cache()?,
+            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.clear_cache()?,
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.clear_cache()?,
+        }
+        Ok(())
+    }
 }
\ No newline at end of file
