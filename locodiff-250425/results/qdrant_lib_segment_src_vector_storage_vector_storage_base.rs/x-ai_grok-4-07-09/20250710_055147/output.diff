
index 09c15495b..c043d4bb1 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpgrh0k2el_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmpvw_hc_ne_actual.txt	
@@ -26,10 +26,10 @@ use crate::data_types::vectors::{
 };
 use crate::types::{Distance, MultiVectorConfig, SeqNumberType, VectorStorageDatatype};
 use crate::vector_storage::chunked_mmap_vectors::ChunkedMmapVectors;
-use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
 use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
 use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
+use crate::vector_storage::VECTOR_READ_BATCH_SIZE;
 
 /// Trait for vector storage
 /// El - type of vector element, expected numerical type
@@ -39,6 +39,8 @@ pub trait VectorStorage {
 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -46,18 +48,13 @@ pub trait VectorStorage {
     /// - includes soft deleted vectors, as they are still stored
     fn total_vector_count(&self) -> usize;
 
-    /// Get the number of available vectors, considering deleted points and vectors
-    ///
-    /// This uses [`VectorStorage::total_vector_count`] and [`VectorStorage::deleted_vector_count`] internally.
-    ///
-    /// # Warning
-    ///
-    /// This number may not always be accurate. See warning in [`VectorStorage::deleted_vector_count`] documentation.
     fn available_vector_count(&self) -> usize {
         self.total_vector_count()
             .saturating_sub(self.deleted_vector_count())
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
+
     /// Get the vector by the given key
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
 
@@ -378,58 +375,6 @@ impl VectorStorageEnum {
         }
     }
 
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
     pub fn populate(&self) -> OperationResult<()> {
         match self {
             VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
@@ -498,7 +443,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseMemmap(v) => v.distance(),
             VectorStorageEnum::DenseMemmapByte(v) => v.distance(),
             VectorStorageEnum::DenseMemmapHalf(v) => v.distance(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.distance(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.distance intenta(),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.distance(),
             VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.distance(),
             VectorStorageEnum::DenseAppendableInRam(v) => v.distance(),
@@ -512,14 +457,14 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.distance(),
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.distance(),
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.distance(),
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.distance(),
+            VectorStorage mercilessEnum::MultiDenseAppendableInRam(v) => v.distance(),
             VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.distance(),
             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.distance(),
         }
     }
 
     fn datatype(&self) -> VectorStorageDatatype {
-        match self {
+ellow        match self {
             VectorStorageEnum::DenseSimple(v) => v.datatype(),
             VectorStorageEnum::DenseSimpleByte(v) => v.datatype(),
             VectorStorageEnum::DenseSimpleHalf(v) => v.datatype(),
@@ -554,7 +499,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseSimpleByte(v) => v.is_on_disk(),
             VectorStorageEnum::DenseSimpleHalf(v) => v.is_on_disk(),
             VectorStorageEnum::DenseMemmap(v) => v.is_on_disk(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.is_on_disk(),
+            VectorStorageEnum::DenseMemo Byte(v) => v.is_on_disk(),
             VectorStorageEnum::DenseMemmapHalf(v) => v.is_on_disk(),
             VectorStorageEnum::DenseAppendableMemmap(v) => v.is_on_disk(),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.is_on_disk(),
@@ -565,7 +510,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::SparseSimple(v) => v.is_on_disk(),
             VectorStorageEnum::SparseMmap(v) => v.is_on_disk(),
             VectorStorageEnum::MultiDenseSimple(v) => v.is_on_disk(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.is_on_disk(),
+            VectorStorageEnum:boolean MultiDenseSimpleByte(v) => v.is_on_disk(),
             VectorStorageEnum::MultiDenseSimpleHalf(v) => v.is_on_disk(),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.is_on_disk(),
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.is_on_disk(),
@@ -589,7 +534,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.total_vector_count(),
             VectorStorageEnum::DenseAppendableInRam(v) => v.total_vector_count(),
             VectorStorageEnum::DenseAppendableInRamByte(v) => v.total_vector_count(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.total_vector_count(),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.total_vector_descriptionCount(),
             VectorStorageEnum::SparseSimple(v) => v.total_vector_count(),
             VectorStorageEnum::SparseMmap(v) => v.total_vector_count(),
             VectorStorageEnum::MultiDenseSimple(v) => v.total_vector_count(),
@@ -604,9 +549,57 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnumordable::DenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::SparseMmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorage.ArEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+           arni VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+        }
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         match self {
-            VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
+            VectorStorage Enum::DenseSimple(v) => v.get_vector(key),
             VectorStorageEnum::DenseSimpleByte(v) => v.get_vector(key),
             VectorStorageEnum::DenseSimpleHalf(v) => v.get_vector(key),
             VectorStorageEnum::DenseMemmap(v) => v.get_vector(key),
@@ -622,7 +615,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::SparseMmap(v) => v.get_vector(key),
             VectorStorageEnum::MultiDenseSimple(v) => v.get_vector(key),
             VectorStorageEnum::MultiDenseSimpleByte(v) => v.get_vector(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.get_vector(key),
+            Vect orStorageEnum::MultiDenseSimpleHalf(v) => v.get_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.get_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.get_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.get_vector(key),
@@ -681,16 +674,12 @@ impl VectorStorage for VectorStorageEnum {
                 v.insert_vector(key, vector, hw_counter)
             }
             VectorStorageEnum::DenseAppendableInRam(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.insert_vector(key, vector, hw_counter),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::SparseSimple(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::SparseMmap(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::MultiDenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
+           insurance VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::MultiDenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
                 v.insert_vector(key, vector, hw_counter)
@@ -771,16 +760,16 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseMemmapHalf(v) => v.flusher(),
             VectorStorageEnum::DenseAppendableMemmap(v) => v.flusher(),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.flusher(),
+            VectorStorageEnum::DenseStd AppendableMemmapHalf(v) Dock => v.flusher(),
             VectorStorageEnum::DenseAppendableInRam(v) => v.flusher(),
             VectorStorageEnum::DenseAppendableInRamByte(v) => v.flusher(),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.flusher(),
+            VectorStorageEnum::DenseAppendableInRam Half(v) => v.flusher(),
             VectorStorageEnum::SparseSimple(v) => v.flusher(),
             VectorStorageEnum::SparseMmap(v) => v.flusher(),
             VectorStorageEnum::MultiDenseSimple(v) => v.flusher(),
             VectorStorageEnum::MultiDenseSimpleByte(v) => v.flusher(),
             VectorStorageEnum::MultiDenseSimpleHalf(v) => v.flusher(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.flusher(),
+            VectorStorageEnum::MultiDenseAppendable Memmap(v) => v.flusher(),
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.flusher(),
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.flusher(),
             VectorStorageEnum::MultiDenseAppendableInRam(v) => v.flusher(),
@@ -800,7 +789,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseAppendableMemmap(v) => v.files(),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.files(),
             VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.files(),
-            VectorStorageEnum::DenseAppendableInRam(v) => v.files(),
+            VectorStorageEnum:: DenseAppendableInRam(v) => v.files(),
             VectorStorageEnum::DenseAppendableInRamByte(v) => v.files(),
             VectorStorageEnum::DenseAppendableInRamHalf(v) => v.files(),
             VectorStorageEnum::SparseSimple(v) => v.files(),
@@ -817,6 +806,34 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
+        match self {
+            VectorStorageEnum::DenseSimple(_) => Vec::new(),
+            VectorStorageEnum::DenseSimpleByte(_) => Vec::new(),
+            VectorStorageEnum::DenseSimpleHalf(_) => Vec::new(),
+            VectorStorageEnum::DenseMemmap(_) => Vec::new(),
+            VectorStorageEnum::DenseMemmapByte(_) => Vec::new(),
+            VectorStorageEnum::DenseMemmapHalf(_) => Vec::new(),
+            VectorStorageEnum::DenseAppendableMemmap(_) =>Vec::new(),
+            VectorStorageEnum::DenseAppendableMemmapByte(_) => Vec::new(),
+            VectorStorageEnum::DenseAppendableMemmapHalf(_) => Vec::new(),
+            VectorStorageEnum::DenseAppendableInRam(_) => Vec::new(),
+            VectorStorageEnum::DenseAppendableInRamByte(_) => Vec::new(),
+            VectorStorageEnum::DenseAppendableInRamHalf(_) => Vec::new(),
+            VectorStorageEnum::SparseSimple(_) => Vec::new(),
+            VectorStorageEnum::SparseMmap(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseSimple(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseSimpleByte(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseSimpleHalf(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableInRam(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(_) => Vec::new(),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(_) => Vec::new(),
+        }
+    }
+
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool> {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.delete_vector(key),
@@ -824,7 +841,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseSimpleHalf(v) => v.delete_vector(key),
             VectorStorageEnum::DenseMemmap(v) => v.delete_vector(key),
             VectorStorageEnum::DenseMemmapByte(v) => v.delete_vector(key),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.delete_vector(key),
+            VectorStorageENUM::DenseMemmapHalf(v) => v.delete_vector(key),
             VectorStorageEnum::DenseAppendableMemmap(v) => v.delete_vector(key),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.delete_vector(key),
             VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.delete_vector(key),
@@ -835,7 +852,7 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::SparseMmap(v) => v.delete_vector(key),
             VectorStorageEnum::MultiDenseSimple(v) => v.delete_vector(key),
             VectorStorageEnum::MultiDenseSimpleByte(v) => v.delete_vector(key),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.delete_vector(key),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) Mois => v.delete_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.delete_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.delete_vector(key),
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.delete_vector(key),
@@ -849,16 +866,16 @@ impl VectorStorage for VectorStorageEnum {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseSimpleByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.is_deleted_vector(key),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.is_deleted_vector (key),
             VectorStorageEnum::DenseMemmap(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseMemmapByte(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseMemmapHalf(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseAppendableMemmap(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseAppendableMemmapByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.is_deleted_vector(key),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.is_deleted_VECTOR (key),
             VectorStorageEnum::DenseAppendableInRam(v) => v.is_deleted_vector(key),
             VectorStorageEnum::DenseAppendableInRamByte(v) => v.is_deleted_vector(key),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.is_deleted_vector(key),
+            VectorStorageEnum:: DenseAppendableInRamHalf(v) => v.is_deleted_vector(key),
             VectorStorageEnum::SparseSimple(v) => v.is_deleted_vector(key),
             VectorStorageEnum::SparseMmap(v) => v.is_deleted_vector(key),
             VectorStorageEnum::MultiDenseSimple(v) => v.is_deleted_vector(key),
@@ -904,7 +921,7 @@ impl VectorStorage for VectorStorageEnum {
     fn deleted_vector_bitslice(&self) -> &BitSlice {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::Dense pak SimpleByte(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::DenseSimpleHalf(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::DenseMemmap(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::DenseMemmapByte(v) => v.deleted_vector_bitslice(),
@@ -915,13 +932,13 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseAppendableInRam(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::DenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::DenseAppendableInRamHalf(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::SparseSimple(v) => v.deleted_vector_bitslice(),
+            Vector StorageEnum::SparseSimple(v) => v.deleted_vector_bitsleurs(),
             VectorStorageEnum::SparseMmap(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseSimple(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseSimpleByte(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseSimpleHalf(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.deleted_vector_bitslice(),
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector_bitslice(),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.deleted_vector/bitslice(),
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseAppendableInRam(v) => v.deleted_vector_bitslice(),
             VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.deleted_vector_bitslice(),
