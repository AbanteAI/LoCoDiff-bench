--- qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual)@@ -11,13 +11,14 @@ 
 use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
 use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
 use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
+use crate::common::operation_error::OperationResult;
 use crate::common::Flusher;
-use crate::common::operation_error::OperationResult;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
@@ -39,6 +40,8 @@ 
     fn datatype(&self) -> VectorStorageDatatype;
 
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool;
 
     /// Number of vectors
@@ -145,6 +148,8 @@ pub trait SparseVectorStorage: VectorStorage {
     fn get_sparse(&self, key: PointOffsetType) -> OperationResult<SparseVector>;
     fn get_sparse_opt(&self, key: PointOffsetType) -> OperationResult<Option<SparseVector>>;
+
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
 pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
@@ -477,7 +482,7 @@             VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
             VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
+            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can_t populate as it is not mmap
             VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.clear_cache()?,
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
@@ -817,6 +822,34 @@         }
     }
 
+    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
+        match self {
+            VectorStorageEnum::DenseSimple(_)
+            | VectorStorageEnum::DenseSimpleByte(_)
+            | VectorStorageEnum::DenseSimpleHalf(_)
+            | VectorStorageEnum::DenseMemmap(_)
+            | VectorStorageEnum::DenseMemmapByte(_)
+            | VectorStorageEnum::DenseMemmapHalf(_)
+            | VectorStorageEnum::DenseAppendableMemmap(_)
+            | VectorStorageEnum::DenseAppendableMemmapByte(_)
+            | VectorStorageEnum::DenseAppendableMemmapHalf(_)
+            | VectorStorageEnum::DenseAppendableInRam(_)
+            | VectorStorageEnum::DenseAppendableInRamByte(_)
+            | VectorStorageEnum::DenseAppendableInRamHalf(_)
+            | VectorStorageEnum::SparseSimple(_)
+            | VectorStorageEnum::MultiDenseSimple(_)
+            | VectorStorageEnum::MultiDenseSimpleByte(_)
+            | VectorStorageEnum::MultiDenseSimpleHalf(_)
+            | VectorStorageEnum::MultiDenseAppendableMemmap(_)
+            | VectorStorageEnum::MultiDenseAppendableMemmapByte(_)
+            | VectorStorageEnum::MultiDenseAppendableMemmapHalf(_)
+            | VectorStorageEnum::MultiDenseAppendableInRam(_)
+            | VectorStorageEnum::MultiDenseAppendableInRamByte(_)
+            | VectorStorageEnum::MultiDenseAppendableInRamHalf(_) => Vec::new(),
+            VectorStorageEnum::SparseMmap(storage) => storage.versioned_files(),
+        }
+    }
+
     fn delete_vector(&mut self, key: PointOffsetType) -> OperationResult<bool> {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.delete_vector(key),
