
index 09c15495b..bfecb99e2 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmp12e2cyno_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmp_paoah1w_actual.txt	
@@ -39,8 +39,6 @@ pub trait VectorStorage {
 
     fn datatype(&self) -> VectorStorageDatatype;
 
-    fn is_on_disk(&self) -> bool;
-
     /// Number of vectors
     ///
     /// - includes soft deleted vectors, as they are still stored
@@ -120,6 +118,10 @@ pub trait VectorStorage {
     /// The size of this slice is not guaranteed. It may be smaller/larger than the number of
     /// vectors in this segment.
     fn deleted_vector_bitslice(&self) -> &BitSlice;
+
+    /// If false - data is stored in RAM (and persisted on disk)
+    /// If true - data is stored on disk, and is not forced to be in RAM
+    fn is_on_disk(&self) -> bool;
 }
 
 pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
@@ -314,7 +316,9 @@ impl VectorStorageEnum {
 
     pub(crate) fn default_vector(&self) -> VectorInternal {
         match self {
-            VectorStorageEnum::DenseSimple(v) => VectorInternal::from(vec![1.0; v.vector_dim()]),
+            VectorStorageEnum::DenseSimple(v) => {
+                VectorInternal::from(vec![1.0; v.vector_dim()])
+            }
             VectorStorageEnum::DenseSimpleByte(v) => {
                 VectorInternal::from(vec![1.0; v.vector_dim()])
             }
@@ -673,14 +677,18 @@ impl VectorStorage for VectorStorageEnum {
             VectorStorageEnum::DenseMemmap(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::DenseMemmapByte(v) => v.insert_vector(key, vector, hw_counter),
             VectorStorageEnum::DenseMemmapHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.insert_vector(key, vector, hw_counter),
+            VectorStorageEnum::DenseAppendableMemmap(v) => {
+                v.insert_vector(key, vector, hw_counter)
+            }
             VectorStorageEnum::DenseAppendableMemmapByte(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
             VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.insert_vector(key, vector, hw_counter),
+            VectorStorageEnum::DenseAppendableInRam(v) => {
+                v.insert_vector(key, vector, hw_counter)
+            }
             VectorStorageEnum::DenseAppendableInRamByte(v) => {
                 v.insert_vector(key, vector, hw_counter)
             }
@@ -733,8 +741,12 @@ impl VectorStorage for VectorStorageEnum {
                 v.update_from(other_vectors, stopped)
             }
             VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_vectors, stopped),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => {
+                v.update_from(other_vectors, stopped)
+            }
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
+                v.update_from(other_vectors, stopped)
+            }
             VectorStorageEnum::SparseSimple(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::SparseMmap(v) => v.update_from(other_vectors, stopped),
             VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_vectors, stopped),
