
index 09c15495b..60f0158ce 100644
--- a/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_expectedoutput.txt (expected):tmp/tmpp7r4ol9m_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_vector_storage_base.rs_extracted.txt (actual):tmp/tmp2i2861ct_actual.txt	
@@ -1,35 +1,31 @@
-use std::mem::MaybeUninit;
 use std::ops::Range;
 use std::path::PathBuf;
 use std::sync::atomic::AtomicBool;
 
 use bitvec::prelude::BitSlice;
-use common::counter::hardware_counter::HardwareCounterCell;
-use common::maybe_uninit::maybe_uninit_fill_from;
 use common::types::PointOffsetType;
 use sparse::common::sparse_vector::SparseVector;
 
 use super::dense::memmap_dense_vector_storage::MemmapDenseVectorStorage;
 use super::dense::simple_dense_vector_storage::SimpleDenseVectorStorage;
+use super::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use super::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     AppendableMmapMultiDenseVectorStorage, MultivectorMmapOffset,
 };
 use super::multi_dense::simple_multi_dense_vector_storage::SimpleMultiDenseVectorStorage;
-use super::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
-use crate::common::Flusher;
 use crate::common::operation_error::OperationResult;
+use crate::common::Flusher;
 use crate::data_types::named_vectors::CowVector;
 use crate::data_types::primitive::PrimitiveVectorElement;
 use crate::data_types::vectors::{
     MultiDenseVectorInternal, TypedMultiDenseVectorRef, VectorElementType, VectorElementTypeByte,
     VectorElementTypeHalf, VectorInternal, VectorRef,
 };
-use crate::types::{Distance, MultiVectorConfig, SeqNumberType, VectorStorageDatatype};
+use crate::types::{Distance, MultiVectorConfig, VectorStorageDatatype};
 use crate::vector_storage::chunked_mmap_vectors::ChunkedMmapVectors;
-use crate::vector_storage::common::VECTOR_READ_BATCH_SIZE;
 use crate::vector_storage::dense::appendable_dense_vector_storage::AppendableMmapDenseVectorStorage;
 use crate::vector_storage::in_ram_persisted_vectors::InRamPersistedVectors;
-use crate::vector_storage::sparse::simple_sparse_vector_storage::SimpleSparseVectorStorage;
+use crate::vector_storage::simple_sparse_vector_storage::SimpleSparseVectorStorage;
 
 /// Trait for vector storage
 /// El - type of vector element, expected numerical type
@@ -58,25 +54,16 @@ pub trait VectorStorage {
             .saturating_sub(self.deleted_vector_count())
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize;
+
     /// Get the vector by the given key
     fn get_vector(&self, key: PointOffsetType) -> CowVector;
 
     /// Get the vector by the given key if it exists
     fn get_vector_opt(&self, key: PointOffsetType) -> Option<CowVector>;
 
-    fn insert_vector(
-        &mut self,
-        key: PointOffsetType,
-        vector: VectorRef,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
+    fn insert_vector(&mut self, key: PointOffsetType, vector: VectorRef) -> OperationResult<()>;
 
-    /// Add the given vectors to the storage.
-    ///
-    /// # Returns
-    /// The range of point offsets that were added to the storage.
-    ///
-    /// If stopped, the operation returns a cancellation error.
     fn update_from<'a>(
         &mut self,
         other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
@@ -87,10 +74,6 @@ pub trait VectorStorage {
 
     fn files(&self) -> Vec<PathBuf>;
 
-    fn versioned_files(&self) -> Vec<(PathBuf, SeqNumberType)> {
-        Vec::new()
-    }
-
     /// Flag the vector by the given key as deleted
     ///
     /// Returns true if the vector was not deleted before and is now deleted
@@ -129,16 +112,10 @@ pub trait DenseVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     /// Get the dense vectors by the given keys
     ///
     /// Implementation can assume that the keys are consecutive
-    fn get_dense_batch<'a>(
-        &'a self,
-        keys: &[PointOffsetType],
-        vectors: &'a mut [MaybeUninit<&'a [T]>],
-    ) -> &'a [&'a [T]] {
-        maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_dense(*key))).0
-    }
-
-    fn size_of_available_vectors_in_bytes(&self) -> usize {
-        self.available_vector_count() * self.vector_dim() * std::mem::size_of::<T>()
+    fn get_dense_batch<'a>(&'a self, keys: &[PointOffsetType], vectors: &mut [&'a [T]]) {
+        for (idx, key) in keys.iter().enumerate() {
+            vectors[idx] = self.get_dense(*key);
+        }
     }
 }
 
@@ -154,16 +131,10 @@ pub trait MultiVectorStorage<T: PrimitiveVectorElement>: VectorStorage {
     fn get_batch_multi<'a>(
         &'a self,
         keys: &[PointOffsetType],
-        vectors: &'a mut [MaybeUninit<TypedMultiDenseVectorRef<'a, T>>],
-    ) -> &'a [TypedMultiDenseVectorRef<'a, T>] {
-        debug_assert_eq!(keys.len(), vectors.len());
-        debug_assert!(keys.len() <= VECTOR_READ_BATCH_SIZE);
-        maybe_uninit_fill_from(vectors, keys.iter().map(|key| self.get_multi(*key))).0
-    }
+        vectors: &mut [TypedMultiDenseVectorRef<'a, T>],
+    );
     fn iterate_inner_vectors(&self) -> impl Iterator<Item = &[T]> + Clone + Send;
     fn multi_vector_config(&self) -> &MultiVectorConfig;
-
-    fn size_of_available_vectors_in_bytes(&self) -> usize;
 }
 
 #[derive(Debug)]
@@ -377,116 +348,6 @@ impl VectorStorageEnum {
             }
         }
     }
-
-    pub fn size_of_available_vectors_in_bytes(&self) -> usize {
-        match self {
-            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::SparseMmap(_v) => {
-                unreachable!(
-                    "Mmap sparse storage does not know its total size, get from index instead"
-                )
-            }
-            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.size_of_available_vectors_in_bytes()
-            }
-        }
-    }
-
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::DenseMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.populate()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.populate()?,
-            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::SparseMmap(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.populate()?,
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.populate()?,
-        }
-        Ok(())
-    }
-
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        match self {
-            VectorStorageEnum::DenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::DenseMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRam(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::DenseAppendableInRamHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::SparseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::SparseMmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseSimple(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleByte(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseSimpleHalf(_) => {} // Can't populate as it is not mmap
-            VectorStorageEnum::MultiDenseAppendableMemmap(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRam(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRamByte(vs) => vs.clear_cache()?,
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(vs) => vs.clear_cache()?,
-        }
-        Ok(())
-    }
 }
 
 impl VectorStorage for VectorStorageEnum {
@@ -546,8 +407,6 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
-    /// If false - data is stored in RAM (and persisted on disk)
-    /// If true - data is stored on disk, and is not forced to be in RAM
     fn is_on_disk(&self) -> bool {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.is_on_disk(),
@@ -604,6 +463,54 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
+    fn size_of_available_vectors_in_bytes(&self) -> usize {
+        match self {
+            VectorStorageEnum::DenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableInRam(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::SparseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::SparseMmap(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimple(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.size_of_available_vectors_in_bytes(),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
+                v.size_of_available_vectors_in_bytes()
+            }
+        }
+    }
+
     fn get_vector(&self, key: PointOffsetType) -> CowVector {
         match self {
             VectorStorageEnum::DenseSimple(v) => v.get_vector(key),
@@ -660,103 +567,72 @@ impl VectorStorage for VectorStorageEnum {
         }
     }
 
-    fn insert_vector(
-        &mut self,
-        key: PointOffsetType,
-        vector: VectorRef,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
+    fn insert_vector(&mut self, key: PointOffsetType, vector: VectorRef) -> OperationResult<()> {
         match self {
-            VectorStorageEnum::DenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmapByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::SparseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::SparseMmap(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimple(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.insert_vector(key, vector, hw_counter),
-            VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.insert_vector(key, vector, hw_counter)
-            }
+            VectorStorageEnum::DenseSimple(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseSimpleByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseMemmap(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseMemmapByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::SparseSimple(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::SparseMmap(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseSimple(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableMemmap(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableInRamByte(v) => v.insert_vector(key, vector),
+            VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => v.insert_vector(key, vector),
         }
     }
 
     fn update_from<'a>(
         &mut self,
-        other_vectors: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
+        other_ids: &'a mut impl Iterator<Item = (CowVector<'a>, bool)>,
         stopped: &AtomicBool,
     ) -> OperationResult<Range<PointOffsetType>> {
         match self {
-            VectorStorageEnum::DenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseMemmapHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::SparseMmap(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleByte(v) => v.update_from(other_vectors, stopped),
-            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.update_from(other_vectors, stopped),
+            VectorStorageEnum::DenseSimple(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseSimpleByte(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseSimpleHalf(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseMemmap(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseMemmapByte(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseMemmapHalf(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableMemmap(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableMemmapByte(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableMemmapHalf(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableInRam(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableInRamByte(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::DenseAppendableInRamHalf(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::SparseSimple(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::SparseMmap(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::MultiDenseSimple(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::MultiDenseSimpleByte(v) => v.update_from(other_ids, stopped),
+            VectorStorageEnum::MultiDenseSimpleHalf(v) => v.update_from(other_ids, stopped),
             VectorStorageEnum::MultiDenseAppendableMemmap(v) => {
-                v.update_from(other_vectors, stopped)
+                v.update_from(other_ids, stopped)
             }
             VectorStorageEnum::MultiDenseAppendableMemmapByte(v) => {
-                v.update_from(other_vectors, stopped)
+                v.update_from(other_ids, stopped)
             }
             VectorStorageEnum::MultiDenseAppendableMemmapHalf(v) => {
-                v.update_from(other_vectors, stopped)
-            }
-            VectorStorageEnum::MultiDenseAppendableInRam(v) => {
-                v.update_from(other_vectors, stopped)
+                v.update_from(other_ids, stopped)
             }
+            VectorStorageEnum::MultiDenseAppendableInRam(v) => v.update_from(other_ids, stopped),
             VectorStorageEnum::MultiDenseAppendableInRamByte(v) => {
-                v.update_from(other_vectors, stopped)
+                v.update_from(other_ids, stopped)
             }
             VectorStorageEnum::MultiDenseAppendableInRamHalf(v) => {
-                v.update_from(other_vectors, stopped)
+                v.update_from(other_ids, stopped)
             }
         }
     }
