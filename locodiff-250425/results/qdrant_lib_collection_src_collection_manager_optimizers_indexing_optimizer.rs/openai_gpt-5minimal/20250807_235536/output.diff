
index 237415b4d..b42da76e2 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_expectedoutput.txt (expected):tmp/tmp50rktp8f_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_extracted.txt (actual):tmp/tmp0_bdnub0_actual.txt	
@@ -442,14 +442,14 @@ mod tests {
         let mut opnum = 101..1000000;
 
         let small_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 25, dim);
-        let middle_low_segment =
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 90, dim);
         let middle_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim);
         let large_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 200, dim);
 
         let segment_config = small_segment.segment_config.clone();
 
         let small_segment_id = holder.add_new(small_segment);
+        let middle_low_segment =
+            random_segment(segments_dir.path(), opnum.next().unwrap(), 90, dim);
         let middle_low_segment_id = holder.add_new(middle_low_segment);
         let middle_segment_id = holder.add_new(middle_segment);
         let large_segment_id = holder.add_new(large_segment);
@@ -527,13 +527,13 @@ mod tests {
 
         let permit_cpu_count = num_rayon_threads(0);
         let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
 
         // ------ Plain -> Mmap & Indexed payload
         let suggested_to_optimize =
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
         assert!(suggested_to_optimize.contains(&large_segment_id));
         eprintln!("suggested_to_optimize = {suggested_to_optimize:#?}");
+        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
         index_optimizer
             .optimize(
                 locked_holder.clone(),
@@ -644,8 +644,6 @@ mod tests {
             .unwrap()
             .num_vectors;
 
-        let hw_counter = HardwareCounterCell::new();
-
         process_point_operation(
             locked_holder.deref(),
             opnum.next().unwrap(),
@@ -867,7 +865,7 @@ mod tests {
         let hnsw_config = HnswConfig {
             m: 16,
             ef_construct: 100,
-            full_scan_threshold: 10,
+            full_scan_threshold: 0,
             max_indexing_threads: 0,
             on_disk: None,
             payload_m: None,
@@ -881,7 +879,7 @@ mod tests {
                 dir.path().to_owned(),
                 temp_dir.path().to_owned(),
                 collection_params.clone(),
-                hnsw_config.clone(),
+                hnsw_config,
                 Default::default(),
             );
             let config_mismatch_optimizer = ConfigMismatchOptimizer::new(
@@ -889,7 +887,7 @@ mod tests {
                 dir.path().to_owned(),
                 temp_dir.path().to_owned(),
                 collection_params.clone(),
-                hnsw_config.clone(),
+                hnsw_config,
                 Default::default(),
             );
 
@@ -945,7 +943,7 @@ mod tests {
             dir.path().to_owned(),
             temp_dir.path().to_owned(),
             collection_params.clone(),
-            hnsw_config.clone(),
+            hnsw_config,
             Default::default(),
         );
         let config_mismatch_optimizer = ConfigMismatchOptimizer::new(
