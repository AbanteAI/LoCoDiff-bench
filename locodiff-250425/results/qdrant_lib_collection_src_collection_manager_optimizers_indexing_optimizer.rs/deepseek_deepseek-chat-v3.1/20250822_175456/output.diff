
index 237415b4d..a1e71f365 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_expectedoutput.txt (expected):tmp/tmpe1nssepn_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_extracted.txt (actual):tmp/tmplhzre42j_actual.txt	
@@ -4,7 +4,7 @@ use std::sync::Arc;
 
 use parking_lot::Mutex;
 use segment::common::operation_time_statistics::OperationDurationsAggregator;
-use segment::types::{HnswConfig, QuantizationConfig, SegmentType};
+use segment::types::{HnswConfig, QuantizationConfig, SegmentType, VECTOR_ELEMENT_SIZE};
 
 use crate::collection_manager::holders::segment_holder::{
     LockedSegmentHolder, SegmentHolder, SegmentId,
@@ -50,7 +50,7 @@ impl IndexingOptimizer {
             collection_params,
             hnsw_config,
             quantization_config,
-            telemetry_durations_aggregator: OperationDurationsAggregator::new(),
+            telemetry_durations_aggregator: Arc::new(Mutex::new(OperationDurationsAggregator::new())),
         }
     }
 
@@ -525,6 +525,7 @@ mod tests {
         )
         .unwrap();
 
+        // ------ Plain -> Mmap & Indexed payload
         let permit_cpu_count = num_rayon_threads(0);
         let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
         let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
@@ -944,8 +945,8 @@ mod tests {
             thresholds_config,
             dir.path().to_owned(),
             temp_dir.path().to_owned(),
-            collection_params.clone(),
-            hnsw_config.clone(),
+            collection_params,
+            hnsw_config,
             Default::default(),
         );
         let config_mismatch_optimizer = ConfigMismatchOptimizer::new(
@@ -953,7 +954,7 @@ mod tests {
             dir.path().to_owned(),
             temp_dir.path().to_owned(),
             collection_params,
-            hnsw_config,
+            hnsw_config.clone(),
             Default::default(),
         );
 
