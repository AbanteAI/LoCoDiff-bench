
index 237415b4..86229a9e 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_expectedoutput.txt (expected):tmp/tmppehk83kq_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_extracted.txt (actual):tmp/tmp_rr_av7__actual.txt	
@@ -9,15 +9,12 @@ use segment::types::{HnswConfig, QuantizationConfig, SegmentType};
 use crate::collection_manager::holders::segment_holder::{
     LockedSegmentHolder, SegmentHolder, SegmentId,
 };
-use crate::collection_manager::optimizers::segment_optimizer::{
-    OptimizerThresholds, SegmentOptimizer,
-};
+use crate::collection_manager::optimizers::segment_optimizer::{OptimizerThresholds, SegmentOptimizer};
 use crate::config::CollectionParams;
 
 const BYTES_IN_KB: usize = 1024;
 
 /// Looks for the segments, which require to be indexed.
-///
 /// If segment is too large, but still does not have indexes - it is time to create some indexes.
 /// The process of index creation is slow and CPU-bounded, so it is convenient to perform
 /// index building in a same way as segment re-creation.
@@ -60,7 +57,6 @@ impl IndexingOptimizer {
     ) -> Option<(SegmentId, usize)> {
         segments
             .iter()
-            // Excluded externally, might already be scheduled for optimization
             .filter(|(idx, _)| !excluded_ids.contains(idx))
             .filter_map(|(idx, segment)| {
                 let segment_entry = segment.get();
@@ -75,16 +71,15 @@ impl IndexingOptimizer {
 
                 let segment_config = read_segment.config();
                 let is_any_vector_indexed = segment_config.is_any_vector_indexed();
-                let is_any_on_disk = segment_config.is_any_on_disk();
+                let is_any_mmap = segment_config.is_any_mmap();
 
-                if !(is_any_vector_indexed || is_any_on_disk) {
+                if !(is_any_vector_indexed || is_any_mmap) {
                     return None;
                 }
 
-                Some((idx, vector_size))
+                Some((*idx, vector_size))
             })
             .min_by_key(|(_, vector_size_bytes)| *vector_size_bytes)
-            .map(|(idx, size)| (*idx, size))
     }
 
     fn worst_segment(
@@ -95,21 +90,20 @@ impl IndexingOptimizer {
         let segments_read_guard = segments.read();
         let candidates: Vec<_> = segments_read_guard
             .iter()
-            // Excluded externally, might already be scheduled for optimization
             .filter(|(idx, _)| !excluded_ids.contains(idx))
             .filter_map(|(idx, segment)| {
                 let segment_entry = segment.get();
                 let read_segment = segment_entry.read();
+                let point_count = read_segment.available_point_count();
                 let max_vector_size_bytes = read_segment
                     .max_available_vectors_size_in_bytes()
                     .unwrap_or_default();
 
-                let segment_config = read_segment.config();
-
                 if read_segment.segment_type() == SegmentType::Special {
-                    return None; // Never optimize already optimized segment
+                    return None;
                 }
 
+                let segment_config = read_segment.config();
                 let indexing_threshold_bytes = self
                     .thresholds_config
                     .indexing_threshold_kb
@@ -127,10 +121,8 @@ impl IndexingOptimizer {
                         let storage_size_bytes = read_segment
                             .available_vectors_size_in_bytes(vector_name)
                             .unwrap_or_default();
-
                         let is_big_for_index = storage_size_bytes >= indexing_threshold_bytes;
                         let is_big_for_mmap = storage_size_bytes >= mmap_threshold_bytes;
-
                         let optimize_for_index = is_big_for_index && !is_indexed;
                         let optimize_for_mmap = if let Some(on_disk_config) = vector_config.on_disk
                         {
@@ -138,7 +130,6 @@ impl IndexingOptimizer {
                         } else {
                             is_big_for_mmap && !is_on_disk
                         };
-
                         if optimize_for_index || optimize_for_mmap {
                             require_optimization = true;
                             break;
@@ -147,8 +138,7 @@ impl IndexingOptimizer {
                 }
 
                 if !require_optimization {
-                    if let Some(sparse_vectors_params) =
-                        self.collection_params.sparse_vectors.as_ref()
+                    if let Some(sparse_vectors_params) = self.collection_params.sparse_vectors.as_ref()
                     {
                         for sparse_vector_name in sparse_vectors_params.keys() {
                             if let Some(sparse_vector_data) =
@@ -156,16 +146,12 @@ impl IndexingOptimizer {
                             {
                                 let is_index_immutable =
                                     sparse_vector_data.index.index_type.is_immutable();
-
                                 let storage_size = read_segment
                                     .available_vectors_size_in_bytes(sparse_vector_name)
                                     .unwrap_or_default();
-
                                 let is_big_for_index = storage_size >= indexing_threshold_bytes;
                                 let is_big_for_mmap = storage_size >= mmap_threshold_bytes;
-
                                 let is_big = is_big_for_index || is_big_for_mmap;
-
                                 if is_big && !is_index_immutable {
                                     require_optimization = true;
                                     break;
@@ -187,12 +173,10 @@ impl IndexingOptimizer {
             return vec![];
         }
         let (selected_segment_id, selected_segment_size) = *selected_segment.unwrap();
-
         let number_of_segments = segments_read_guard.len();
 
         // If the number of segments if equal or bigger than the default_segments_number
         // We want to make sure that we at least do not increase number of segments after optimization, thus we take more than one segment to optimize
-
         if number_of_segments < self.default_segments_number {
             return vec![selected_segment_id];
         }
@@ -281,8 +265,8 @@ impl SegmentOptimizer for IndexingOptimizer {
 mod tests {
     use std::collections::BTreeMap;
     use std::ops::Deref;
-    use std::sync::Arc;
     use std::sync::atomic::AtomicBool;
+    use std::sync::Arc;
 
     use common::budget::ResourceBudget;
     use common::counter::hardware_counter::HardwareCounterCell;
@@ -346,7 +330,8 @@ mod tests {
             .map(|(name, params)| {
                 (
                     name.to_owned(),
-                    VectorParamsBuilder::new(params.size as u64, params.distance).build(),
+                    VectorParamsBuilder::new(params.size as u64, params.distance)
+                        .build(),
                 )
             })
             .collect();
@@ -382,16 +367,17 @@ mod tests {
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
         assert!(suggested_to_optimize.contains(&large_segment_id));
 
-        let permit_cpu_count = num_rayon_threads(0);
-        let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
-
         index_optimizer
             .optimize(
                 locked_holder.clone(),
                 suggested_to_optimize,
-                permit,
-                budget.clone(),
+                ResourceBudget::new(
+                    num_rayon_threads(0),
+                    num_rayon_threads(0),
+                )
+                .try_acquire(0, num_rayon_threads(0))
+                .unwrap(),
+                Default::default(),
                 &stopped,
             )
             .unwrap();
@@ -399,12 +385,18 @@ mod tests {
         let infos = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().info())
+            .map(|(_sid, segment)| match segment {
+                LockedSegment::Original(s) => s.read().info(),
+                _ => panic!("Unexpected proxy segment"),
+            })
             .collect_vec();
         let configs = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().config().clone())
+            .map(|(_sid, segment)| match segment {
+                LockedSegment::Original(s) => s.read().config().clone(),
+                _ => panic!("Unexpected proxy segment"),
+            })
             .collect_vec();
 
         assert_eq!(infos.len(), 2);
@@ -430,7 +422,6 @@ mod tests {
         let mut holder = SegmentHolder::default();
 
         let payload_field: JsonPath = "number".parse().unwrap();
-
         let stopped = AtomicBool::new(false);
         let dim = 256;
 
@@ -442,15 +433,12 @@ mod tests {
         let mut opnum = 101..1000000;
 
         let small_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 25, dim);
-        let middle_low_segment =
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 90, dim);
         let middle_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim);
         let large_segment = random_segment(segments_dir.path(), opnum.next().unwrap(), 200, dim);
 
         let segment_config = small_segment.segment_config.clone();
 
         let small_segment_id = holder.add_new(small_segment);
-        let middle_low_segment_id = holder.add_new(middle_low_segment);
         let middle_segment_id = holder.add_new(middle_segment);
         let large_segment_id = holder.add_new(large_segment);
 
@@ -476,7 +464,6 @@ mod tests {
             Default::default(),
             Default::default(),
         );
-
         let locked_holder: Arc<RwLock<_, _>> = Arc::new(RwLock::new(holder));
 
         let excluded_ids = Default::default();
@@ -486,34 +473,15 @@ mod tests {
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
         assert!(suggested_to_optimize.is_empty());
 
-        index_optimizer.thresholds_config.memmap_threshold_kb = 1000;
+        index_optimizer.thresholds_config.memmap_threshold_kb = 150;
         index_optimizer.thresholds_config.indexing_threshold_kb = 50;
 
         let suggested_to_optimize =
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
         assert!(suggested_to_optimize.contains(&large_segment_id));
-        assert!(suggested_to_optimize.contains(&middle_low_segment_id));
-
-        index_optimizer.thresholds_config.memmap_threshold_kb = 1000;
-        index_optimizer.thresholds_config.indexing_threshold_kb = 1000;
-
-        let suggested_to_optimize =
-            index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
-        assert!(suggested_to_optimize.is_empty());
-
-        index_optimizer.thresholds_config.memmap_threshold_kb = 50;
-        index_optimizer.thresholds_config.indexing_threshold_kb = 1000;
-
-        let suggested_to_optimize =
-            index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
-        assert!(suggested_to_optimize.contains(&large_segment_id));
-
-        index_optimizer.thresholds_config.memmap_threshold_kb = 150;
-        index_optimizer.thresholds_config.indexing_threshold_kb = 50;
 
         // ----- CREATE AN INDEXED FIELD ------
         let hw_counter = HardwareCounterCell::new();
-
         process_field_index_operation(
             locked_holder.deref(),
             opnum.next().unwrap(),
@@ -525,10 +493,6 @@ mod tests {
         )
         .unwrap();
 
-        let permit_cpu_count = num_rayon_threads(0);
-        let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
-
         // ------ Plain -> Mmap & Indexed payload
         let suggested_to_optimize =
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
@@ -538,15 +502,19 @@ mod tests {
             .optimize(
                 locked_holder.clone(),
                 suggested_to_optimize,
-                permit,
-                budget.clone(),
+                ResourceBudget::new(
+                    num_rayon_threads(0),
+                    num_rayon_threads(0),
+                )
+                .try_acquire(0, num_rayon_threads(0))
+                .unwrap(),
+                Default::default(),
                 &stopped,
             )
             .unwrap();
         eprintln!("Done");
 
         // ------ Plain -> Indexed payload
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
         let suggested_to_optimize =
             index_optimizer.check_condition(locked_holder.clone(), &excluded_ids);
         assert!(suggested_to_optimize.contains(&middle_segment_id));
@@ -554,8 +522,13 @@ mod tests {
             .optimize(
                 locked_holder.clone(),
                 suggested_to_optimize,
-                permit,
-                budget.clone(),
+                ResourceBudget::new(
+                    num_rayon_threads(0),
+                    num_rayon_threads(0),
+                )
+                .try_acquire(0, num_rayon_threads(0))
+                .unwrap(),
+                Default::default(),
                 &stopped,
             )
             .unwrap();
@@ -574,12 +547,12 @@ mod tests {
         let infos = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().info())
+            .map(|(_, segment)| segment.get().read().info())
             .collect_vec();
         let configs = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().config().clone())
+            .map(|(_, segment)| segment.get().read().config().clone())
             .collect_vec();
 
         let indexed_count = infos
@@ -595,10 +568,7 @@ mod tests {
             .iter()
             .filter(|config| config.is_any_on_disk())
             .count();
-        assert_eq!(
-            on_disk_count, 1,
-            "Testing that only largest segment is not Mmap"
-        );
+        assert_eq!(on_disk_count, 1, "Testing that only largest segment is on disk");
 
         let segment_dirs = segments_dir.path().read_dir().unwrap().collect_vec();
         assert_eq!(
@@ -620,32 +590,26 @@ mod tests {
         }
 
         let point_payload = payload_json! {"number": 10000i64};
-
-        let batch = BatchPersisted {
-            ids: vec![501.into(), 502.into(), 503.into()],
-            vectors: BatchVectorStructPersisted::Single(vec![
-                random_vector(&mut rng, dim),
-                random_vector(&mut rng, dim),
-                random_vector(&mut rng, dim),
-            ]),
-            payloads: Some(vec![
-                Some(point_payload.clone()),
-                Some(point_payload.clone()),
-                Some(point_payload),
-            ]),
-        };
-
         let insert_point_ops =
-            PointOperations::UpsertPoints(PointInsertOperationsInternal::from(batch));
-
+            PointOperations::UpsertPoints(PointInsertOperationsInternal::from(BatchPersisted {
+                ids: vec![501.into(), 502.into(), 503.into()],
+                vectors: BatchVectorStructPersisted::Single(vec![
+                    random_vector(&mut rng, dim),
+                    random_vector(&mut rng, dim),
+                    random_vector(&mut rng, dim),
+                ]),
+                payloads: Some(vec![
+                    Some(point_payload.clone()),
+                    Some(point_payload.clone()),
+                    Some(point_payload),
+                ]),
+            }));
         let smallest_size = infos
             .iter()
             .min_by_key(|info| info.num_vectors)
             .unwrap()
             .num_vectors;
 
-        let hw_counter = HardwareCounterCell::new();
-
         process_point_operation(
             locked_holder.deref(),
             opnum.next().unwrap(),
@@ -657,7 +621,7 @@ mod tests {
         let new_infos = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().info())
+            .map(|(_, segment)| segment.get().read().info())
             .collect_vec();
         let new_smallest_size = new_infos
             .iter()
@@ -673,8 +637,6 @@ mod tests {
 
         // ---- New appendable segment should be created if none left
 
-        // Index even the smallest segment
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
         index_optimizer.thresholds_config.indexing_threshold_kb = 20;
         let suggested_to_optimize =
             index_optimizer.check_condition(locked_holder.clone(), &Default::default());
@@ -683,8 +645,13 @@ mod tests {
             .optimize(
                 locked_holder.clone(),
                 suggested_to_optimize,
-                permit,
-                budget.clone(),
+                ResourceBudget::new(
+                    num_rayon_threads(0),
+                    num_rayon_threads(0),
+                )
+                .try_acquire(0, num_rayon_threads(0))
+                .unwrap(),
+                Default::default(),
                 &stopped,
             )
             .unwrap();
@@ -692,31 +659,25 @@ mod tests {
         let new_infos2 = locked_holder
             .read()
             .iter()
-            .map(|(_sid, segment)| segment.get().read().info())
+            .map(|(_, segment)| segment.get().read().info())
             .collect_vec();
 
-        let mut has_empty = false;
-        for info in new_infos2 {
-            has_empty |= info.num_vectors == 0;
-        }
-
         assert!(
-            has_empty,
-            "Testing that new segment is created if none left"
+            new_infos2.len() > new_infos.len(),
+            "Testing that new appendable segment was created"
         );
 
-        let batch = BatchPersisted {
-            ids: vec![601.into(), 602.into(), 603.into()],
-            vectors: BatchVectorStructPersisted::Single(vec![
-                random_vector(&mut rng, dim),
-                random_vector(&mut rng, dim),
-                random_vector(&mut rng, dim),
-            ]),
-            payloads: None,
-        };
-
-        let insert_point_ops =
-            PointOperations::UpsertPoints(PointInsertOperationsInternal::from(batch));
+        let insert_point_ops = PointOperations::UpsertPoints(
+            PointInsertOperationsInternal::from(BatchPersisted {
+                ids: vec![601.into(), 602.into(), 603.into()],
+                vectors: BatchVectorStructPersisted::Single(vec![
+                    random_vector(&mut rng, dim),
+                    random_vector(&mut rng, dim),
+                    random_vector(&mut rng, dim),
+                ]),
+                payloads: None,
+            }),
+        );
 
         process_point_operation(
             locked_holder.deref(),
@@ -727,115 +688,6 @@ mod tests {
         .unwrap();
     }
 
-    /// Test that indexing optimizer maintain expected number of during the optimization duty
-    #[test]
-    fn test_indexing_optimizer_with_number_of_segments() {
-        init();
-
-        let mut holder = SegmentHolder::default();
-
-        let stopped = AtomicBool::new(false);
-        let dim = 256;
-
-        let segments_dir = Builder::new().prefix("segments_dir").tempdir().unwrap();
-        let segments_temp_dir = Builder::new()
-            .prefix("segments_temp_dir")
-            .tempdir()
-            .unwrap();
-        let mut opnum = 101..1000000;
-
-        let segments = vec![
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
-            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
-        ];
-
-        let number_of_segments = segments.len();
-        let segment_config = segments[0].segment_config.clone();
-
-        let _segment_ids: Vec<SegmentId> = segments
-            .into_iter()
-            .map(|segment| holder.add_new(segment))
-            .collect();
-
-        let locked_holder: Arc<RwLock<_, _>> = Arc::new(RwLock::new(holder));
-
-        let index_optimizer = IndexingOptimizer::new(
-            number_of_segments, // Keep the same number of segments
-            OptimizerThresholds {
-                max_segment_size_kb: 1000,
-                memmap_threshold_kb: 1000,
-                indexing_threshold_kb: 10, // Always optimize
-            },
-            segments_dir.path().to_owned(),
-            segments_temp_dir.path().to_owned(),
-            CollectionParams {
-                vectors: VectorsConfig::Single(
-                    VectorParamsBuilder::new(
-                        segment_config.vector_data[DEFAULT_VECTOR_NAME].size as u64,
-                        segment_config.vector_data[DEFAULT_VECTOR_NAME].distance,
-                    )
-                    .build(),
-                ),
-                ..CollectionParams::empty()
-            },
-            Default::default(),
-            Default::default(),
-        );
-
-        let permit_cpu_count = num_rayon_threads(0);
-        let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
-
-        // Index until all segments are indexed
-        let mut numer_of_optimizations = 0;
-        loop {
-            let suggested_to_optimize =
-                index_optimizer.check_condition(locked_holder.clone(), &Default::default());
-            if suggested_to_optimize.is_empty() {
-                break;
-            }
-            log::debug!("suggested_to_optimize = {suggested_to_optimize:#?}");
-
-            let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
-            index_optimizer
-                .optimize(
-                    locked_holder.clone(),
-                    suggested_to_optimize,
-                    permit,
-                    budget.clone(),
-                    &stopped,
-                )
-                .unwrap();
-            numer_of_optimizations += 1;
-            assert!(numer_of_optimizations <= number_of_segments);
-            let number_of_segments = locked_holder.read().len();
-            log::debug!(
-                "numer_of_optimizations = {numer_of_optimizations}, number_of_segments = {number_of_segments}"
-            );
-        }
-
-        // Ensure that the total number of segments did not change
-        assert_eq!(locked_holder.read().len(), number_of_segments);
-    }
-
-    /// This tests things are as we expect when we define both `on_disk: false` and `memmap_threshold`
-    ///
-    /// Before this PR (<https://github.com/qdrant/qdrant/pull/3167>) such configuration would create an infinite optimization loop.
-    ///
-    /// It tests whether:
-    /// - the on_disk flag is preferred over memmap_threshold
-    /// - the index optimizer and config mismatch optimizer don't conflict with this preference
-    /// - there is no infinite optiization loop with the above configuration
-    ///
-    /// In short, this is what happens in this test:
-    /// - create randomized segment as base with `on_disk: false` and `memmap_threshold`
-    /// - test that indexing optimizer and config mismatch optimizer dont trigger
-    /// - test that current storage is in memory
-    /// - change `on_disk: None`
-    /// - test that indexing optimizer now wants to optimize for `memmap_threshold`
-    /// - optimize with indexing optimizer to put storage on disk
-    /// - test that config mismatch optimizer doesn't try to revert on disk storage
     #[test]
     fn test_on_disk_memmap_threshold_conflict() {
         // Collection configuration
@@ -860,9 +712,8 @@ mod tests {
         let mut holder = SegmentHolder::default();
 
         let segment = random_segment(dir.path(), 100, point_count, dim as usize);
-
         let segment_id = holder.add_new(segment);
-        let locked_holder: Arc<parking_lot::RwLock<_>> = Arc::new(RwLock::new(holder));
+        let locked_holder: Arc<RwLock<_>> = Arc::new(RwLock::new(holder));
 
         let hnsw_config = HnswConfig {
             m: 16,
@@ -874,10 +725,9 @@ mod tests {
         };
 
         {
-            // Optimizers used in test
             let index_optimizer = IndexingOptimizer::new(
                 2,
-                thresholds_config,
+                thresholds_config.clone(),
                 dir.path().to_owned(),
                 temp_dir.path().to_owned(),
                 collection_params.clone(),
@@ -885,7 +735,8 @@ mod tests {
                 Default::default(),
             );
             let config_mismatch_optimizer = ConfigMismatchOptimizer::new(
-                thresholds_config,
+                2,
+                thresholds_config.clone(),
                 dir.path().to_owned(),
                 temp_dir.path().to_owned(),
                 collection_params.clone(),
@@ -893,44 +744,36 @@ mod tests {
                 Default::default(),
             );
 
-            // Index optimizer should not optimize and put storage back in memory, nothing changed
             let suggested_to_optimize =
                 index_optimizer.check_condition(locked_holder.clone(), &Default::default());
-            assert_eq!(
-                suggested_to_optimize.len(),
-                0,
+            assert!(
+                suggested_to_optimize.is_empty(),
                 "index optimizer should not run for index nor mmap"
             );
 
-            // Config mismatch optimizer should not try to change the current state
             let suggested_to_optimize = config_mismatch_optimizer
                 .check_condition(locked_holder.clone(), &Default::default());
-            assert_eq!(
-                suggested_to_optimize.len(),
-                0,
+            assert!(
+                suggested_to_optimize.is_empty(),
                 "config mismatch optimizer should not change anything"
             );
 
-            // Ensure segment is not on disk
             locked_holder
                 .read()
                 .iter()
                 .map(|(_, segment)| match segment {
                     LockedSegment::Original(s) => s.read(),
-                    LockedSegment::Proxy(_) => unreachable!(),
+                    _ => panic!("Unexpected proxy segment"),
                 })
                 .filter(|segment| segment.total_point_count() > 0)
                 .for_each(|segment| {
                     assert!(
-                        !segment.config().vector_data[DEFAULT_VECTOR_NAME]
-                            .storage_type
-                            .is_on_disk(),
+                        !segment.config().vector_data[""].storage_type.is_on_disk(),
                         "segment must not be on disk with mmap",
                     );
                 });
         }
 
-        // Remove explicit on_disk flag and go back to default
         collection_params
             .vectors
             .get_params_mut(DEFAULT_VECTOR_NAME)
@@ -938,10 +781,9 @@ mod tests {
             .on_disk
             .take();
 
-        // Optimizers used in test
         let index_optimizer = IndexingOptimizer::new(
             2,
-            thresholds_config,
+            thresholds_config.clone(),
             dir.path().to_owned(),
             temp_dir.path().to_owned(),
             collection_params.clone(),
@@ -949,59 +791,138 @@ mod tests {
             Default::default(),
         );
         let config_mismatch_optimizer = ConfigMismatchOptimizer::new(
+            2,
             thresholds_config,
             dir.path().to_owned(),
             temp_dir.path().to_owned(),
             collection_params,
-            hnsw_config,
+            hnsw_config.clone(),
             Default::default(),
         );
 
-        let permit_cpu_count = num_rayon_threads(0);
-        let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
-        let permit = budget.try_acquire(0, permit_cpu_count).unwrap();
-
-        // Use indexing optimizer to build mmap
+        let budget = ResourceBudget::new(num_rayon_threads(0), num_rayon_threads(0));
         let changed = index_optimizer
             .optimize(
                 locked_holder.clone(),
                 vec![segment_id],
-                permit,
+                budget.clone().try_acquire(0, num_rayon_threads(0)).unwrap(),
                 budget.clone(),
                 &false.into(),
             )
             .unwrap();
-        assert!(
-            changed > 0,
-            "optimizer should have rebuilt this segment for mmap"
-        );
+        assert!(changed > 0, "optimizer should have rebuilt this segment for mmap");
         assert!(
             locked_holder.read().get(segment_id).is_none(),
             "optimized segment should be gone",
         );
         assert_eq!(locked_holder.read().len(), 2, "mmap must be built");
 
-        // Mismatch optimizer should not optimize yet, HNSW config is not changed yet
         let suggested_to_optimize =
             config_mismatch_optimizer.check_condition(locked_holder.clone(), &Default::default());
-        assert_eq!(suggested_to_optimize.len(), 0);
+        assert!(suggested_to_optimize.is_empty());
 
-        // Ensure new segment is on disk now
         locked_holder
             .read()
             .iter()
             .map(|(_, segment)| match segment {
                 LockedSegment::Original(s) => s.read(),
-                LockedSegment::Proxy(_) => unreachable!(),
+                _ => panic!("Unexpected proxy segment"),
             })
             .filter(|segment| segment.total_point_count() > 0)
             .for_each(|segment| {
                 assert!(
-                    segment.config().vector_data[DEFAULT_VECTOR_NAME]
-                        .storage_type
-                        .is_on_disk(),
+                    segment.config().vector_data[""].storage_type.is_on_disk(),
                     "segment must be on disk with mmap",
                 );
             });
     }
+
+    #[test]
+    fn test_indexing_optimizer_with_number_of_segments() {
+        init();
+
+        let mut holder = SegmentHolder::default();
+        let stopped = AtomicBool::new(false);
+        let dim = 256;
+
+        let segments_dir = Builder::new().prefix("segments_dir").tempdir().unwrap();
+        let segments_temp_dir = Builder::new()
+            .prefix("segments_temp_dir")
+            .tempdir()
+            .unwrap();
+        let mut opnum = 101..1000000;
+
+        let segments = vec![
+            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
+            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
+            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
+            random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
+        ];
+        let number_of_segments = segments.len();
+        let segment_config = segments[0].segment_config.clone();
+
+        let _segment_ids: Vec<SegmentId> = segments
+            .into_iter()
+            .map(|segment| holder.add_new(segment))
+            .collect();
+
+        let locked_holder: Arc<RwLock<_, _>> = Arc::new(RwLock::new(holder));
+
+        let index_optimizer = IndexingOptimizer::new(
+            number_of_segments,
+            OptimizerThresholds {
+                max_segment_size_kb: 1000,
+                memmap_threshold_kb: 1000,
+                indexing_threshold_kb: 10,
+            },
+            segments_dir.path().to_owned(),
+            segments_temp_dir.path().to_owned(),
+            CollectionParams {
+                vectors: VectorsConfig::Single(
+                    VectorParamsBuilder::new(
+                        segment_config.vector_data[DEFAULT_VECTOR_NAME].size as u64,
+                        segment_config.vector_data[DEFAULT_VECTOR_NAME].distance,
+                    )
+                    .build(),
+                ),
+                ..CollectionParams::empty()
+            },
+            Default::default(),
+            Default::default(),
+        );
+
+        let permit_cpu_count = num_rayon_threads(0);
+        let budget = ResourceBudget::new(permit_cpu_count, permit_cpu_count);
+
+        // Index until all segments are indexed
+        let mut numer_of_optimizations = 0;
+        loop {
+            let suggested_to_optimize =
+                index_optimizer.check_condition(locked_holder.clone(), &Default::default());
+            if suggested_to_optimize.is_empty() {
+                break;
+            }
+            log::debug!("suggested_to_optimize = {suggested_to_optimize:#?}");
+
+            index_optimizer
+                .optimize(
+                    locked_holder.clone(),
+                    suggested_to_optimize,
+                    budget.clone().try_acquire(0, permit_cpu_count).unwrap(),
+                    budget.clone(),
+                    &stopped,
+                )
+                .unwrap();
+            numer_of_optimizations += 1;
+            assert!(numer_of_optimizations <= number_of_segments);
+            let number_of_segments = locked_holder.read().len();
+            log::debug!(
+                "numer_of_optimizations = {numer_of_optimizations}, number_of_segments = {number_of_segments}"
+            );
+        }
+
+        assert_eq!(locked_holder.read().len(), number_of_segments);
+    }
+
+    // Additional snapshot and other tests would follow here...
 }
\ No newline at end of file
