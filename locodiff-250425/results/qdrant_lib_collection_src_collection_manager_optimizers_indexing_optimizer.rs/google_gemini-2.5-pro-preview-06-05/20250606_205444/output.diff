
index 237415b4d..c828304b6 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_expectedoutput.txt (expected):tmp/tmpqdistqf1_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_extracted.txt (actual):tmp/tmp69awstzi_actual.txt	
@@ -81,10 +81,10 @@ impl IndexingOptimizer {
                     return None;
                 }
 
-                Some((idx, vector_size))
+                Some((*idx, vector_size))
             })
             .min_by_key(|(_, vector_size_bytes)| *vector_size_bytes)
-            .map(|(idx, size)| (*idx, size))
+            .map(|(idx, size)| (idx, size))
     }
 
     fn worst_segment(
@@ -105,8 +105,7 @@ impl IndexingOptimizer {
                     .unwrap_or_default();
 
                 let segment_config = read_segment.config();
-
-                if read_segment.segment_type() == SegmentType::Special {
+                if segment_config.segment_type == SegmentType::Special {
                     return None; // Never optimize already optimized segment
                 }
 
@@ -281,8 +280,8 @@ impl SegmentOptimizer for IndexingOptimizer {
 mod tests {
     use std::collections::BTreeMap;
     use std::ops::Deref;
-    use std::sync::Arc;
     use std::sync::atomic::AtomicBool;
+    use std::sync::Arc;
 
     use common::budget::ResourceBudget;
     use common::counter::hardware_counter::HardwareCounterCell;
@@ -889,7 +888,7 @@ mod tests {
                 dir.path().to_owned(),
                 temp_dir.path().to_owned(),
                 collection_params.clone(),
-                hnsw_config.clone(),
+                hnsw_config,
                 Default::default(),
             );
 
