
index 237415b4..afc57bff 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_expectedoutput.txt (expected):tmp/tmp1gihe15s_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_indexing_optimizer.rs_extracted.txt (actual):tmp/tmpbi5mbau5_actual.txt	
@@ -81,7 +81,7 @@ impl IndexingOptimizer {
                     return None;
                 }
 
-                Some((idx, vector_size))
+                Some((*idx, vector_size))
             })
             .min_by_key(|(_, vector_size_bytes)| *vector_size_bytes)
             .map(|(idx, size)| (*idx, size))
@@ -281,8 +281,8 @@ impl SegmentOptimizer for IndexingOptimizer {
 mod tests {
     use std::collections::BTreeMap;
     use std::ops::Deref;
-    use std::sync::Arc;
     use std::sync::atomic::AtomicBool;
+    use std::sync::Arc;
 
     use common::budget::ResourceBudget;
     use common::counter::hardware_counter::HardwareCounterCell;
@@ -744,17 +744,17 @@ mod tests {
             .unwrap();
         let mut opnum = 101..1000000;
 
-        let segments = vec![
+        let segments_data = vec![
             random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
             random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
             random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
             random_segment(segments_dir.path(), opnum.next().unwrap(), 100, dim),
         ];
 
-        let number_of_segments = segments.len();
-        let segment_config = segments[0].segment_config.clone();
+        let number_of_segments = segments_data.len();
+        let segment_config = segments_data[0].segment_config.clone();
 
-        let _segment_ids: Vec<SegmentId> = segments
+        let _segment_ids: Vec<SegmentId> = segments_data
             .into_iter()
             .map(|segment| holder.add_new(segment))
             .collect();
@@ -809,9 +809,9 @@ mod tests {
                 .unwrap();
             numer_of_optimizations += 1;
             assert!(numer_of_optimizations <= number_of_segments);
-            let number_of_segments = locked_holder.read().len();
+            let number_of_segments_after_optimization = locked_holder.read().len();
             log::debug!(
-                "numer_of_optimizations = {numer_of_optimizations}, number_of_segments = {number_of_segments}"
+                "numer_of_optimizations = {numer_of_optimizations}, number_of_segments = {number_of_segments_after_optimization}"
             );
         }
 
