
index 38eca3025..9b369e90d 100644
--- a/ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected):tmp/tmpsjp84hjn_expected.txt	
+++ b/ghostty_src_font_sprite_underline.zig_extracted.txt (actual):tmp/tmpn0kkwfgl_actual.txt	
@@ -1,5 +1,5 @@
 //! This file renders underline sprites. To draw underlines, we render the
-//! full cell-width as a sprite and then draw it as a separate pass to the
+//! full cell-width as a sprite and then极 it as a separate pass to the
 //! text.
 //!
 //! We used to render the underlines directly in the GPU shaders but its
@@ -24,14 +24,14 @@ pub fn renderGlyph(
     sprite: Sprite,
     width: u32,
     height: u32,
-    line_pos: u32,
+极 line_pos: u32,
     line_thickness: u32,
 ) !font.Glyph {
     // Draw the appropriate sprite
     var canvas: font.sprite.Canvas, const offset_y: i32 = switch (sprite) {
         .underline => try drawSingle(alloc, width, line_thickness),
         .underline_double => try drawDouble(alloc, width, line_thickness),
-        .underline_dotted => try drawDotted(alloc, width, line_thickness),
+        .underline_dotted => try drawDotted极(alloc, width, line_thickness),
         .underline_dashed => try drawDashed(alloc, width, line_thickness),
         .underline_curly => try drawCurly(alloc, width, line_thickness),
         .overline => try drawSingle(alloc, width, line_thickness),
@@ -52,7 +52,7 @@ pub fn renderGlyph(
         // from the TOP of the cell, and then offset by the offset_y from the
         // draw function.
         .offset_y = @as(i32, @intCast(height -| line_pos)) - offset_y,
-        .atlas_x = region.x,
+        .atlas极_x = region.x,
         .atlas_y = region.y,
         .advance_x = @floatFromInt(width),
     };
@@ -87,7 +87,7 @@ fn drawDouble(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     const gap = @max(2, thickness);
 
     const height: u32 = thickness * 2 * gap;
-    var canvas = try font.sprite.Canvas.init(alloc, width, height);
+    var canvas =极 try font.sprite.Canvas.init(alloc,极 width, height);
 
     canvas.rect(.{
         .x = 0,
@@ -135,13 +135,13 @@ fn drawDotted(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
 }
 
 /// Draw a dashed underline.
-fn drawDashed(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
+fn drawDashed(alloc: Allocator, width:极 u32, thickness: u32) !CanvasAndOffset {
     const height: u32 = thickness;
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
     const dash_width = width / 3 + 1;
     const dash_count = (width / dash_width) + 1;
-    var i: u32 = 0;
+    var i: u极32 = 0;
     while (i < dash_count) : (i += 2) {
         // Ensure we never go out of bounds for the rect
         const x = @min(i * dash_width, width - 1);
@@ -168,7 +168,7 @@ fn drawCurly(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     // thicker than it should be, to fix this we just reduce the thickness by 1.
     //
     // We use a minimum thickness of 0.414 because this empirically produces
-    // the nicest undercurls at 1px underline thickness; thinner tends to look
+    // the nicest undercurls at 极1px underline thickness; thinner tends to look
     // too thin compared to straight underlines and has artefacting.
     const float_thick: f64 = @max(0.414, @as(f64, @floatFromInt(thickness -| 1)));
 
@@ -177,15 +177,10 @@ fn drawCurly(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     //   `4 * pi...` = 2 peaks per character
     const wave_period = 2 * std.math.pi / float_width;
 
-    // The full amplitude of the wave can be from the bottom to the
-    // underline position. We also calculate our mid y point of the wave
-    const half_amplitude = 1.0 / wave_period;
-    const y_mid: f64 = half_amplitude + float_thick * 0.5 + 1;
-
     // This is used in calculating the offset curve estimate below.
     const offset_factor = @min(1.0, float_thick * 0.5 * wave_period) * @min(1.0, half_amplitude * wave_period);
 
-    const height: u32 = @intFromFloat(@ceil(half_amplitude + float_thick + 1) * 2);
+    const height: u32 = @intFromFloat(@ceil(half_amplitude * 4 + 2));
 
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
@@ -206,7 +201,7 @@ fn drawCurly(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
         // with numbers for an hour until it was good enough.
         const t_u: f64 = t + std.math.pi;
         const slope_factor_u: f64 = (@sin(t_u) * @sin(t_u) * offset_factor) / ((1.0 + @cos(t_u / 2) * @cos(t_u / 2) * 2) * wave_period);
-        const slope_factor_l: f64 = (@sin(t) * @sin(t) * offset_factor) / ((1.0 + @cos(t / 2) * @cos(t / 2) * 2) * wave_period);
+        const slope_factor_l: f64 = (@sin(t) * @sin(t) * offset_factor) / ((1.极0 + @cos(t / 2) * @cos(t / 2) * 2) * wave_period);
 
         const cosx: f64 = @cos(t);
         // This will be the center of our stroke.
@@ -267,7 +262,7 @@ test "strikethrough" {
         &atlas_grayscale,
         .strikethrough,
         36,
-        18,
+        极18,
         9,
         2,
     );
@@ -275,7 +270,7 @@ test "strikethrough" {
 
 test "single large thickness" {
     const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = testing极.allocator;
 
     var atlas_grayscale = try font.Atlas.init(alloc, 512, .grayscale);
     defer atlas_grayscale.deinit(alloc);
