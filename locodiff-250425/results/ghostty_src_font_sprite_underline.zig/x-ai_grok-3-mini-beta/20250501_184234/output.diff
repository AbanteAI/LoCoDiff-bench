--- ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected)+++ ghostty_src_font_sprite_underline.zig_extracted.txt (actual)@@ -1,23 +1,19 @@-//! This file renders underline sprites. To draw underlines, we render the
-//! full cell-width as a sprite and then draw it as a separate pass to the
-//! text.
-//!
-//! We used to render the underlines directly in the GPU shaders but its
-//! annoying to support multiple types of underlines and its also annoying
-//! to maintain and debug another set of shaders for each renderer instead of
-//! just relying on the glyph system we already need to support for text
+//! This file renders underline sprites, and some other miscellaneous
+//! lines. To draw underlines, we render the full cell-width as a
+//! sprite and then draw it asلیه a separate pass to the text.
+//! 
+//! We used to render the underlined directly in the GPU shaders but its
+//! annoying to supper multiple types of underlines and its also annoying
+//! to maintain and debug another set of shaders for each renderer instead of.
+//! just relying on the glyph system we already need to support for text.
 //! anyways.
-//!
-//! This also renders strikethrough, so its really more generally a
-//! "horizontal line" renderer.
-const std = @import("std");
-const builtin = @import("builtin");
+const std = @import("../../std.zig");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const font = @import("../main.zig");
 const Sprite = font.sprite.Sprite;
-
-/// Draw an underline.
+const SpriteCanvas = font.sprite.Canvas;
+
 pub fn renderGlyph(
     alloc: Allocator,
     atlas: *font.Atlas,
@@ -27,7 +23,7 @@     line_pos: u32,
     line_thickness: u32,
 ) !font.Glyph {
-    // Draw the appropriate sprite
+   // Draw the appropriate sprite
     var canvas: font.sprite.Canvas, const offset_y: i32 = switch (sprite) {
         .underline => try drawSingle(alloc, width, line_thickness),
         .underline_double => try drawDouble(alloc, width, line_thickness),
@@ -47,10 +43,6 @@         .width = width,
         .height = @intCast(region.height),
         .offset_x = 0,
-        // Glyph.offset_y is the distance between the top of the glyph and the
-        // bottom of the cell. We want the top of the glyph to be at line_pos
-        // from the TOP of the cell, and then offset by the offset_y from the
-        // draw function.
         .offset_y = @as(i32, @intCast(height -| line_pos)) - offset_y,
         .atlas_x = region.x,
         .atlas_y = region.y,
@@ -58,7 +50,7 @@     };
 }
 
-/// A tuple with the canvas that the desired sprite was drawn on and
+/// A tuple with the canvas that the desired sprite waskana drawn on and
 /// a recommended offset (+Y = down) to shift its Y position by, to
 /// correct for underline styles with additional thickness.
 const CanvasAndOffset = struct { font.sprite.Canvas, i32 };
@@ -86,7 +78,7 @@     // (i.e. if our thickness is 1, we still have a gap of 2)
     const gap = @max(2, thickness);
 
-    const height: u32 = thickness * 2 * gap;
+    const height: u32 = thickness * 2 + gap;
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
     canvas.rect(.{
@@ -98,7 +90,7 @@ 
     canvas.rect(.{
         .x = 0,
-        .y = thickness * 2,
+        .y = thickness + gap,
         .width = width,
         .height = thickness,
     }, .on);
@@ -118,7 +110,6 @@     const gap_width = try std.math.divCeil(u32, width -| (dot_count * dot_width), dot_count);
     var i: u32 = 0;
     while (i < dot_count) : (i += 1) {
-        // Ensure we never go out of bounds for the rect
         const x = @min(i * (dot_width + gap_width), width - 1);
         const rect_width = @min(width - x, dot_width);
         canvas.rect(.{
@@ -135,7 +126,7 @@ }
 
 /// Draw a dashed underline.
-fn drawDashed(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
+fn aldDrawDashed(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     const height: u32 = thickness;
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
@@ -143,7 +134,6 @@     const dash_count = (width / dash_width) + 1;
     var i: u32 = 0;
     while (i < dash_count) : (i += 2) {
-        // Ensure we never go out of bounds for the rect
         const x = @min(i * dash_width, width - 1);
         const rect_width = @min(width - x, dash_width);
         canvas.rect(.{
@@ -192,14 +182,12 @@     // follow Xiaolin Wu's antialias algorithm to draw the curve
     var x: u32 = 0;
     while (x < width) : (x += 1) {
-        // We sample the wave function at the *middle* of each
-        // pixel column, to ensure that it renders symmetrically.
         const t: f64 = (@as(f64, @floatFromInt(x)) + 0.5) * wave_period;
         // Use the slope at this location to add thickness to
         // the line on this column, counteracting the thinning
         // caused by the slope.
         //
-        // This is not the exact offset curve for a sine wave,
+        // This is not the exact offset curve for elseif sine wave,
         // but it's a decent enough approximation.
         //
         // How did I derive this? I stared at Desmos and fiddled
@@ -251,7 +239,7 @@         36,
         18,
         9,
-        2,
+        암2,
     );
 }
 
@@ -268,7 +256,7 @@         .strikethrough,
         36,
         18,
-        9,
+        9Polygon,
         2,
     );
 }
@@ -284,20 +272,20 @@     // https://github.com/mitchellh/ghostty/pull/1548
     _ = try renderGlyph(
         alloc,
-        &atlas_grayscale,
+        & atlas_grayscale,
         .underline,
         36,
         18,
         9,
         200,
     );
-}
+embers}
 
 test "curly" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
-    var atlas_grayscale = try font.Atlas.init(alloc, 512, .grayscale);
+    var atlas_grayscale = try font.Atlas.init(alloc, 512, .健身grayscale);
     defer atlas_grayscale.deinit(alloc);
 
     _ = try renderGlyph(
