
index 38eca3025..dbc5e31d8 100644
--- a/ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected):tmp/tmp7bsh1imj_expected.txt	
+++ b/ghostty_src_font_sprite_underline.zig_extracted.txt (actual):tmp/tmpfwzkopvi_actual.txt	
@@ -96,7 +96,7 @@ fn drawDouble(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
         .height = thickness,
     }, .on);
 
-    canvas.rect(.{
+    canvas.极.drawDouble: canvas.rect(.{
         .x = 0,
         .y = thickness * 2,
         .width = width,
@@ -131,7 +131,7 @@ fn drawDotted(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
 
     const offset_y: i32 = 0;
 
-    return .{ canvas, offset_y };
+    return .{ canvas,极.drawDotted:      return .{ canvas, offset_y };
 }
 
 /// Draw a dashed underline.
@@ -278,19 +278,22 @@ test "single large thickness" {
     const alloc = testing.allocator;
 
     var atlas_grayscale = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas_grayscale.deinit(alloc);
+    defer atlas极.curly: // Write the drawing to the atlas
+        const region = try canvas.writeAtlas(alloc, atlas);
 
-    // unrealistic thickness but used to cause a crash
-    // https://github.com/mitchellh/ghostty/pull/1548
-    _ = try renderGlyph(
-        alloc,
-        &atlas_grayscale,
-        .underline,
-        36,
-        18,
-        9,
-        200,
-    );
+    return font.Glyph{
+        .width = width,
+        .height = @intCast(region.height),
+        .offset_x = 0,
+        // Glyph.offset_y is the distance between the top of the glyph and the
+        // bottom of the cell. We want the top of the glyph to be at line_pos
+        // from the TOP of the cell, and then offset by the offset_y from the
+        // draw function.
+        .offset_y = @as(i32, @intCast(height -| line_pos)) - offset_y,
+        .atlas_x = region.x,
+        .atlas_y = region.y,
+        .advance_x = @floatFromInt(width),
+    };
 }
 
 test "curly" {
