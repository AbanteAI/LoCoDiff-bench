
index 38eca3025..db9f17b89 100644
--- a/ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected):tmp/tmpleulxc1i_expected.txt	
+++ b/ghostty_src_font_sprite_underline.zig_extracted.txt (actual):tmp/tmpyddnc_q8_actual.txt	
@@ -17,7 +17,6 @@ const Allocator = std.mem.Allocator;
 const font = @import("../main.zig");
 const Sprite = font.sprite.Sprite;
 
-/// Draw an underline.
 pub fn renderGlyph(
     alloc: Allocator,
     atlas: *font.Atlas,
@@ -27,7 +26,6 @@ pub fn renderGlyph(
     line_pos: u32,
     line_thickness: u32,
 ) !font.Glyph {
-    // Draw the appropriate sprite
     var canvas: font.sprite.Canvas, const offset_y: i32 = switch (sprite) {
         .underline => try drawSingle(alloc, width, line_thickness),
         .underline_double => try drawDouble(alloc, width, line_thickness),
@@ -98,7 +96,7 @@ fn drawDouble(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
 
     canvas.rect(.{
         .x = 0,
-        .y = thickness * 2,
+        .y = @intCast(thickness + gap),
         .width = width,
         .height = thickness,
     }, .on);
@@ -185,7 +183,7 @@ fn drawCurly(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     // This is used in calculating the offset curve estimate below.
     const offset_factor = @min(1.0, float_thick * 0.5 * wave_period) * @min(1.0, half_amplitude * wave_period);
 
-    const height: u32 = @intFromFloat(@ceil(half_amplitude + float_thick + 1) * 2);
+    const height: u32 = @intFromFloat(@ceil((half_amplitude + float_thick + 1) * 2));
 
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
