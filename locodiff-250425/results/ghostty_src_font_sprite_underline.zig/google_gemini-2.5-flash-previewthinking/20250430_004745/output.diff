--- ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected)+++ ghostty_src_font_sprite_underline.zig_extracted.txt (actual)@@ -11,9 +11,10 @@ //! This also renders strikethrough, so its really more generally a
 //! "horizontal line" renderer.
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
+const z2d = @import("z2d");
+
 const font = @import("../main.zig");
 const Sprite = font.sprite.Sprite;
 
@@ -63,6 +64,7 @@ /// correct for underline styles with additional thickness.
 const CanvasAndOffset = struct { font.sprite.Canvas, i32 };
 
+
 /// Draw a single underline.
 fn drawSingle(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     const height: u32 = thickness;
@@ -98,7 +100,7 @@ 
     canvas.rect(.{
         .x = 0,
-        .y = thickness * 2,
+        .y = @intCast(thickness + gap),
         .width = width,
         .height = thickness,
     }, .on);
@@ -222,13 +224,14 @@         const alpha_l: u8 = @intFromFloat(@round(255 * (1.0 - @abs(y_l - @ceil(y_l)))));
 
         // upper and lower bounds
-        canvas.pixel(x, @min(y_upper, height - 1), @enumFromInt(alpha_u));
-        canvas.pixel(x, @min(y_lower, height - 1), @enumFromInt(alpha_l));
+        // We min with height - 1 because pixel writes out of bounds are errors.
+        canvas.pixel(@intCast(x), @min(y_upper, height - 1), @enumFromInt(alpha_u));
+        canvas.pixel(@intCast(x), @min(y_lower, height - 1), @enumFromInt(alpha_l));
 
         // fill between upper and lower bound
         var y_fill: u32 = y_upper + 1;
         while (y_fill < y_lower) : (y_fill += 1) {
-            canvas.pixel(x, @min(y_fill, height - 1), .on);
+            canvas.pixel(@intCast(x), @min(y_fill, height - 1), .on);
         }
     }
 
