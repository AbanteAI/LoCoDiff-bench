--- ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected)+++ ghostty_src_font_sprite_underline.zig_extracted.txt (actual)@@ -17,7 +17,6 @@ const font = @import("../main.zig");
 const Sprite = font.sprite.Sprite;
 
-/// Draw an underline.
 pub fn renderGlyph(
     alloc: Allocator,
     atlas: *font.Atlas,
@@ -61,7 +60,10 @@ /// A tuple with the canvas that the desired sprite was drawn on and
 /// a recommended offset (+Y = down) to shift its Y position by, to
 /// correct for underline styles with additional thickness.
-const CanvasAndOffset = struct { font.sprite.Canvas, i32 };
+const CanvasAndOffset = struct {
+    font.sprite.Canvas,
+    i32,
+};
 
 /// Draw a single underline.
 fn drawSingle(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
@@ -76,7 +78,6 @@     }, .on);
 
     const offset_y: i32 = 0;
-
     return .{ canvas, offset_y };
 }
 
@@ -84,7 +85,7 @@ fn drawDouble(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     // Our gap between lines will be at least 2px.
     // (i.e. if our thickness is 1, we still have a gap of 2)
-    const gap = @max(2, thickness);
+    const gap: u32 = @max(2, thickness);
 
     const height: u32 = thickness * 2 * gap;
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
@@ -98,13 +99,12 @@ 
     canvas.rect(.{
         .x = 0,
-        .y = thickness * 2,
+        .y = @intCast(thickness * 2),
         .width = width,
         .height = thickness,
     }, .on);
 
     const offset_y: i32 = -@as(i32, @intCast(thickness));
-
     return .{ canvas, offset_y };
 }
 
@@ -113,14 +113,37 @@     const height: u32 = thickness;
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
-    const dot_width = @max(thickness, 3);
-    const dot_count = @max((width / dot_width) / 2, 1);
-    const gap_width = try std.math.divCeil(u32, width -| (dot_count * dot_width), dot_count);
+    const dot_width: u32 = @max(thickness, 3);
+    const dot_count: u32 = width / dot_width;
     var i: u32 = 0;
-    while (i < dot_count) : (i += 1) {
+    while (i < dot_count) : (i += 2) {
         // Ensure we never go out of bounds for the rect
-        const x = @min(i * (dot_width + gap_width), width - 1);
-        const rect_width = @min(width - x, dot_width);
+        const x: u32 = @min(i * dot_width, width - 1);
+        const rect_width: u32 = @min(width - x, dot_width);
+        canvas.rect(.{
+            .x = @intCast(i * dot_width),
+            .y = 0,
+            .width = rect_width,
+            .height = thickness,
+        }, .on);
+    }
+
+    const offset_y: i32 = 0;
+    return .{ canvas, offset_y };
+}
+
+/// Draw a dashed underline.
+fn drawDashed(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
+    const height: u32 = thickness;
+    var canvas = try font.sprite.Canvas.init(alloc, width, height);
+
+    const dash_width: u32 = width / 3 + 1;
+    const dash_count: u32 = (width / dash_width) + 1;
+    var i: u32 = 0;
+    while (i < dash_count) : (i += 2) {
+        // Ensure we never go out of bounds for the rect
+        const x: u32 = @min(i * dash_width, width - 1);
+        const rect_width: u32 = @min(width - x, dash_width);
         canvas.rect(.{
             .x = @intCast(x),
             .y = 0,
@@ -130,32 +153,6 @@     }
 
     const offset_y: i32 = 0;
-
-    return .{ canvas, offset_y };
-}
-
-/// Draw a dashed underline.
-fn drawDashed(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
-    const height: u32 = thickness;
-    var canvas = try font.sprite.Canvas.init(alloc, width, height);
-
-    const dash_width = width / 3 + 1;
-    const dash_count = (width / dash_width) + 1;
-    var i: u32 = 0;
-    while (i < dash_count) : (i += 2) {
-        // Ensure we never go out of bounds for the rect
-        const x = @min(i * dash_width, width - 1);
-        const rect_width = @min(width - x, dash_width);
-        canvas.rect(.{
-            .x = @intCast(x),
-            .y = 0,
-            .width = rect_width,
-            .height = thickness,
-        }, .on);
-    }
-
-    const offset_y: i32 = 0;
-
     return .{ canvas, offset_y };
 }
 
@@ -164,8 +161,6 @@ /// geometry.
 fn drawCurly(alloc: Allocator, width: u32, thickness: u32) !CanvasAndOffset {
     const float_width: f64 = @floatFromInt(width);
-    // Because of we way we draw the undercurl, we end up making it around 1px
-    // thicker than it should be, to fix this we just reduce the thickness by 1.
     //
     // We use a minimum thickness of 0.414 because this empirically produces
     // the nicest undercurls at 1px underline thickness; thinner tends to look
@@ -175,18 +170,17 @@     // Calculate the wave period for a single character
     //   `2 * pi...` = 1 peak per character
     //   `4 * pi...` = 2 peaks per character
-    const wave_period = 2 * std.math.pi / float_width;
-
-    // The full amplitude of the wave can be from the bottom to the
-    // underline position. We also calculate our mid y point of the wave
-    const half_amplitude = 1.0 / wave_period;
+    const wave_period: f64 = 2 * std.math.pi / float_width;
+
+    // The amplitude of the wave is the inverse of the period.
+    const half_amplitude: f64 = 1.0 / wave_period;
     const y_mid: f64 = half_amplitude + float_thick * 0.5 + 1;
 
     // This is used in calculating the offset curve estimate below.
-    const offset_factor = @min(1.0, float_thick * 0.5 * wave_period) * @min(1.0, half_amplitude * wave_period);
+    const offset_factor: f64 = @min(1.0, float_thick * 0.5 * wave_period)
+        * @min(1.0, half_amplitude * wave_period);
 
     const height: u32 = @intFromFloat(@ceil(half_amplitude + float_thick + 1) * 2);
-
     var canvas = try font.sprite.Canvas.init(alloc, width, height);
 
     // follow Xiaolin Wu's antialias algorithm to draw the curve
@@ -195,6 +189,7 @@         // We sample the wave function at the *middle* of each
         // pixel column, to ensure that it renders symmetrically.
         const t: f64 = (@as(f64, @floatFromInt(x)) + 0.5) * wave_period;
+
         // Use the slope at this location to add thickness to
         // the line on this column, counteracting the thinning
         // caused by the slope.
@@ -205,17 +200,14 @@         // How did I derive this? I stared at Desmos and fiddled
         // with numbers for an hour until it was good enough.
         const t_u: f64 = t + std.math.pi;
-        const slope_factor_u: f64 = (@sin(t_u) * @sin(t_u) * offset_factor) / ((1.0 + @cos(t_u / 2) * @cos(t_u / 2) * 2) * wave_period);
-        const slope_factor_l: f64 = (@sin(t) * @sin(t) * offset_factor) / ((1.0 + @cos(t / 2) * @cos(t / 2) * 2) * wave_period);
-
-        const cosx: f64 = @cos(t);
-        // This will be the center of our stroke.
-        const y: f64 = y_mid + half_amplitude * cosx;
-
-        // The upper pixel and lower pixel are
-        // calculated relative to the center.
-        const y_u: f64 = y - float_thick * 0.5 - slope_factor_u;
-        const y_l: f64 = y + float_thick * 0.5 + slope_factor_l;
+        const slope_factor_u: f64 = (@sin(t_u) * @sin(t_u) * offset_factor)
+            / ((1.0 + @cos(t_u / 2) * @cos(t_u / 2) * 2) * wave_period);
+        const slope_factor_l: f64 = (@sin(t) * @sin(t) * offset_factor)
+            / ((1.0 + @cos(t / 2) * @cos(t / 2) * 2) * wave_period);
+
+        const y_center: f64 = y_mid + half_amplitude * @cos(t);
+        const y_u: f64 = y_center - float_thick * 0.5 - slope_factor_u;
+        const y_l: f64 = y_center + float_thick * 0.5 + slope_factor_l;
         const y_upper: u32 = @intFromFloat(@floor(y_u));
         const y_lower: u32 = @intFromFloat(@ceil(y_l));
         const alpha_u: u8 = @intFromFloat(@round(255 * (1.0 - @abs(y_u - @floor(y_u)))));
@@ -233,7 +225,6 @@     }
 
     const offset_y: i32 = @intFromFloat(-@round(half_amplitude));
-
     return .{ canvas, offset_y };
 }
 
