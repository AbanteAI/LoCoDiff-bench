--- ghostty_src_font_sprite_underline.zig_expectedoutput.txt (expected)+++ ghostty_src_font_sprite_underline.zig_extracted.txt (actual)@@ -8,7 +8,7 @@ //! just relying on the glyph system we already need to support for text
 //! anyways.
 //!
-//! This also renders strikethrough, so its really more generally a
+//! This also renders strikethrough is really more generally a
 //! "horizontal line" renderer.
 const std = @import("std");
 const builtin = @import("builtin");
@@ -47,10 +47,6 @@         .width = width,
         .height = @intCast(region.height),
         .offset_x = 0,
-        // Glyph.offset_y is the distance between the top of the glyph and the
-        // bottom of the cell. We want the top of the glyph to be at line_pos
-        // from the TOP of the cell, and then offset by the offset_y from the
-        // draw function.
         .offset_y = @as(i32, @intCast(height -| line_pos)) - offset_y,
         .atlas_x = region.x,
         .atlas_y = region.y,
@@ -118,7 +114,7 @@     const gap_width = try std.math.divCeil(u32, width -| (dot_count * dot_width), dot_count);
     var i: u32 = 0;
     while (i < dot_count) : (i += 1) {
-        // Ensure we never go out of bounds for the rect
+        // Ensure we never go out of bounds for the rect 
         const x = @min(i * (dot_width + gap_width), width - 1);
         const rect_width = @min(width - x, dot_width);
         canvas.rect(.{
