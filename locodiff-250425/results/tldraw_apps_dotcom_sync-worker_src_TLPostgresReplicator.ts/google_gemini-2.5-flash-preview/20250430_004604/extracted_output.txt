import { DB, TlaFile, TlaFileState, TlaRow, TlaUser, ZTable } from '@tldraw/dotcom-shared'
import {
	ExecutionQueue,
	assert,
	assertExists,
	exhaustiveSwitchError,
	groupBy,
	promiseWithResolve,
	sleep,
	stringEnum,
	throttle,
	uniqueId,
} from '@tldraw/utils'
import { createSentry } from '@tldraw/worker-shared'
import { DurableObject } from 'cloudflare:workers'
import { Kysely, sql } from 'kysely'

import { LogicalReplicationService, Wal2Json, Wal2JsonPlugin } from 'pg-logical-replication'
import { Logger } from './Logger'
import { UserChangeCollator } from './UserChangeCollator'
import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
import { createPostgresConnectionPool } from './postgres'
import { getR2KeyForRoom } from './r2'
import {
	Analytics,
	Environment,
	TLPostgresReplicatorEvent,
	TLPostgresReplicatorRebootSource,
} from './types'
import { EventData, writeDataPoint } from './utils/analytics'
import {
	getRoomDurableObject,
	getStatsDurableObjct,
	getUserDurableObject,
} from './utils/durableObjects'

const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')

interface ReplicationEvent {
	command: 'insert' | 'update' | 'delete'
	table: keyof typeof relevantTables
}

interface Change {
	event: ReplicationEvent
	userId: string
	fileId: string | null
	row: TlaRow
	previous?: TlaRow
}

interface Migration {
	id: string
	code: string
}

const migrations: Migration[] = [
	{
		id: '000_seed',
		code: `
			CREATE TABLE IF NOT EXISTS active_user (
				id TEXT PRIMARY KEY
			);
			CREATE TABLE IF NOT EXISTS user_file_subscriptions (
				userId TEXT,
				fileId TEXT,
				PRIMARY KEY (userId, fileId),
				FOREIGN KEY (userId) REFERENCES active_user(id) ON DELETE CASCADE
			);
			CREATE TABLE migrations (
				id TEXT PRIMARY KEY,
				code TEXT NOT NULL
			);
		`,
	},
	{
		id: '001_add_sequence_number',
		code: `
			ALTER TABLE active_user ADD COLUMN sequenceNumber INTEGER NOT NULL DEFAULT 0;
			ALTER TABLE active_user ADD COLUMN sequenceIdSuffix TEXT NOT NULL DEFAULT '';
		`,
	},
	{
		id: '002_add_last_updated_at',
		code: `
			ALTER TABLE active_user ADD COLUMN lastUpdatedAt INTEGER NOT NULL DEFAULT 0;
		`,
	},
	{
		id: '003_add_lsn_tracking',
		code: `
			CREATE TABLE IF NOT EXISTS meta (
				lsn TEXT PRIMARY KEY,
				slotName TEXT NOT NULL
			);
			-- The slot name references the replication slot in postgres.
			-- If something ever gets messed up beyond mortal comprehension and we need to force all
			-- clients to reboot, we can just change the slot name by altering the slotNamePrefix in the constructor.
			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
		`,
	},
	{
		id: '004_keep_event_log',
		code: `
		  CREATE TABLE history (
				lsn TEXT NOT NULL,
				userId TEXT NOT NULL,
				fileId TEXT,
				json TEXT NOT NULL
			);
			CREATE INDEX history_lsn_userId ON history (lsn, userId);
			CREATE INDEX history_lsn_fileId ON history (lsn, fileId);
			PRAGMA optimize;
		`,
	},
	{
		id: '005_add_history_timestamp',
		code: `
			ALTER TABLE history ADD COLUMN timestamp INTEGER NOT NULL DEFAULT 0;
		`,
	},
 ]
 
 const ONE_MINUTE = 60 * 1000
 const PRUNE_INTERVAL = 10 * ONE_MINUTE
@@ -182,7 +199,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 const ONE_MINUTE = 60 * 1000
 const PRUNE_INTERVAL = 10 * ONE_MINUTE
-const MAX_HISTORY_ROWS = 100_000
+const MAX_HISTORY_ROWS = 20_000
 
 type PromiseWithResolve = ReturnType<typeof promiseWithResolve>
 
@@ -240,7 +257,8 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private readonly replicationService
 	private readonly slotName
 	private readonly wal2jsonPlugin = new Wal2JsonPlugin({
-		addTables: 'public.user,public.file,public.file_state,public.user_mutation_number',
+		addTables:
+			'public.user,public.file,public.file_state,public.user_mutation_number,public.replicator_boot_id',
 	})
 
 	private readonly db: Kysely<DB>
@@ -327,9 +345,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			id: string
 		}[]
 		for (const { id } of usersWithoutRecentUpdates) {
-			if (await getUserDurableObject(this.env, id).notActive()) {
-				await this.unregisterUser(id)
-			}
+			await this.unregisterUser(id)
 		}
 		this.pruneHistory()
 		this.lastUserPruneTime = Date.now()
@@ -447,6 +463,10 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				this.reportPostgresUpdate()
 				const collator = new UserChangeCollator()
 				for (const _change of log.change) {
+					if (_change.kind === 'message' && (_change as any).prefix === 'requestLsnUpdate') {
+						this.requestLsnUpdate((_change as any).content)
+						continue
+					}
 					const change = this.parseChange(_change)
 					if (!change) {
 						this.log.debug('IGNORING CHANGE', _change)
@@ -532,6 +552,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 		const row = {} as any
 		const previous = {} as any
+		// eslint-disable-next-line @typescript-eslint/no-unsafe-enum-values
 		// take everything from change.columnnames and associated the values from change.columnvalues
 		if (change.kind === 'delete') {
 			const oldkeys = change.oldkeys
@@ -573,6 +594,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 		return {
 			row,
+			previous,
 			event: {
 				command: change.kind,
 				table,
@@ -621,7 +643,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 					this.handleFileStateEvent(collator, change.row, { command, table })
 					break
 				case 'file':
-					this.handleFileEvent(collator, change.row, { command, table }, isReplay)
+					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
 					break
 				case 'user':
 					this.handleUserEvent(collator, change.row, { command, table })
@@ -685,6 +707,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private handleFileEvent(
 		collator: UserChangeCollator,
 		row: Row | null,
+		previous: Row | undefined,
 		event: ReplicationEvent,
 		isReplay: boolean
 	) {
@@ -703,6 +726,16 @@ export class TLPostgresReplicator extends DurableObject<Environment> +16,5 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		} else if (event.command === 'update') {
 			assert('ownerId' in row, 'ownerId is required when updating file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
+			if (previous && !isReplay) {
+				const prevFile = previous as TlaFile
+				if (row.published && !(prevFile as TlaFile).published) {
+					this.publishSnapshot(row)
+				} else if (!row.published && (prevFile as TlaFile).published) {
+					this.unpublishSnapshot(row)
+				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
+					this.publishSnapshot(row)
+				}
+			}
 		} else if (event.command === 'insert') {
 			assert('ownerId' in row, 'ownerId is required when inserting file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
@@ -983,6 +1016,45 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				exhaustiveSwitchError(event)
 		}
 	}
+
+	private async publishSnapshot(file: TlaFile) {
+		try {
+			// make sure the room's snapshot is up to date
+			await getRoomDurableObject(this.env, file.id).awaitPersist()
+			// and that it exists
+			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
+
+			if (!snapshot) {
+				throw new Error('Snapshot not found')
+			}
+			const blob = await snapshot.blob()
+
+			// Create a new slug for the published room
+			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
+
+			// Bang the snapshot into the database
+			await this.env.ROOM_SNAPSHOTS.put(
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
+				blob
+			)
+			const currentTime = new Date().toISOString()
+			await this.env.ROOM_SNAPSHOTS.put(
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
+				blob
+			)
+		} catch (e) {
+			this.log.debug('Error publishing snapshot', e)
+		}
+	}
+
+	private async unpublishSnapshot(file: TlaFile) {
+		try {
+			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug)
+			await this.env.ROOM_SNAPSHOTs.delete(
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true })
+			)
+		} catch (e) {
+			this.log.debug('Error unpublishing snapshot', e)
+		}
+	}
 }