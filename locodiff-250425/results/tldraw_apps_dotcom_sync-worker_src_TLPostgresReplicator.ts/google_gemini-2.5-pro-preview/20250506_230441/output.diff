
index 039baf10..757c411f 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmpggrop46k_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmpvj3e5l19_actual.txt	
@@ -1,4 +1,4 @@
-import { DB, TlaFile, TlaFileState, TlaRow, TlaUser, ZTable } from '@tldraw/dotcom-shared'
+import { DB, TlaFile, TlaFileState, TlaRow, ZTable } from '@tldraw/dotcom-shared'
 import {
 	ExecutionQueue,
 	assert,
@@ -361,23 +361,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
-		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
-	}
-
 	private queue = new ExecutionQueue()
 
 	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
@@ -439,7 +422,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			this.log.debug('heartbeat', lsn)
 			this.lastPostgresMessageTime = Date.now()
 			this.reportPostgresUpdate()
-			// don't call this.updateLsn here because it's not necessary
+			// don't call this.commitLsn here because it's not necessary
 			// to save the lsn after heartbeats since they contain no information
 			this.replicationService.acknowledge(lsn).catch(this.captureException)
 		})
@@ -765,6 +748,23 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		return { sequenceId: this.slotName }
 	}
 
+	async getDiagnostics() {
+		const earliestHistoryRow = this.sqlite
+			.exec('select * from history order by rowid asc limit 1')
+			.toArray()[0]
+		const latestHistoryRow = this.sqlite
+			.exec('select * from history order by rowid desc limit 1')
+			.toArray()[0]
+		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
+		const meta = this.sqlite.exec('select * from meta').one()
+		return {
+			earliestHistoryRow,
+			latestHistoryRow,
+			activeUsers,
+			meta,
+		}
+	}
+
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
 		this.log.debug('messageUser', userId, event)
 		if (!this.userIsActive(userId)) {
@@ -805,15 +805,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
-		}
-	}
-
 	private getResumeType(
 		lsn: string,
 		userId: string,
@@ -846,7 +837,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			  lsn > ?
 				AND (
 				  userId = ? 
-					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 1)).join(', ')})
+					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 2)).join(', ')})
 				)
 			ORDER BY rowid ASC
 		`,
