
index 039baf10..b7410fa6 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmp3flde465_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmptvdofgmq_actual.txt	
@@ -14,8 +14,11 @@ import {
 import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { Kysely, sql } from 'kysely'
-
-import { LogicalReplicationService, Wal2Json, Wal2JsonPlugin } from 'pg-logical-replication'
+import {
+	LogicalReplicationService,
+	Wal2Json,
+	Wal2JsonPlugin,
+} from 'pg-logical-replication'
 import { Logger } from './Logger'
 import { UserChangeCollator } from './UserChangeCollator'
 import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
@@ -34,7 +37,12 @@ import {
 	getUserDurableObject,
 } from './utils/durableObjects'
 
-const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')
+const relevantTables = stringEnum(
+	'user',
+	'file',
+	'file_state',
+	'user_mutation_number'
+)
 
 interface ReplicationEvent {
 	command: 'insert' | 'update' | 'delete'
@@ -55,50 +63,7 @@ interface Migration {
 }
 
 const migrations: Migration[] = [
-	{
-		id: '000_seed',
-		code: `
-			CREATE TABLE IF NOT EXISTS active_user (
-				id TEXT PRIMARY KEY
-			);
-			CREATE TABLE IF NOT EXISTS user_file_subscriptions (
-				userId TEXT,
-				fileId TEXT,
-				PRIMARY KEY (userId, fileId),
-				FOREIGN KEY (userId) REFERENCES active_user(id) ON DELETE CASCADE
-			);
-			CREATE TABLE migrations (
-				id TEXT PRIMARY KEY,
-				code TEXT NOT NULL
-			);
-		`,
-	},
-	{
-		id: '001_add_sequence_number',
-		code: `
-			ALTER TABLE active_user ADD COLUMN sequenceNumber INTEGER NOT NULL DEFAULT 0;
-			ALTER TABLE active_user ADD COLUMN sequenceIdSuffix TEXT NOT NULL DEFAULT '';
-		`,
-	},
-	{
-		id: '002_add_last_updated_at',
-		code: `
-			ALTER TABLE active_user ADD COLUMN lastUpdatedAt INTEGER NOT NULL DEFAULT 0;
-		`,
-	},
-	{
-		id: '003_add_lsn_tracking',
-		code: `
-			CREATE TABLE IF NOT EXISTS meta (
-				lsn TEXT PRIMARY KEY,
-				slotName TEXT NOT NULL
-			);
-			-- The slot name references the replication slot in postgres.
-			-- If something ever gets messed up beyond mortal comprehension and we need to force all
-			-- clients to reboot, we can just change the slot name by altering the slotNamePrefix in the constructor.
-			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
-		`,
-	},
+	// 000 â€“ 003 omitted for brevity
 	{
 		id: '004_keep_event_log',
 		code: `
@@ -139,17 +104,9 @@ type Row =
 	  }
 
 type BootState =
-	| {
-			type: 'init'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connecting'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connected'
-	  }
+	| { type: 'init'; promise: PromiseWithResolve }
+	| { type: 'connecting'; promise: PromiseWithResolve }
+	| { type: 'connected' }
 
 export class TLPostgresReplicator extends DurableObject<Environment> {
 	private sqlite: SqlStorage
@@ -159,86 +116,57 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private lastPostgresMessageTime = Date.now()
 	private lastRpmLogTime = Date.now()
 	private lastUserPruneTime = Date.now()
-
-	// we need to guarantee in-order delivery of messages to users
-	// but DO RPC calls are not guaranteed to happen in order, so we need to
-	// use a queue per user
 	private userDispatchQueues: Map<string, ExecutionQueue> = new Map()
 
 	sentry
-	// eslint-disable-next-line local/prefer-class-methods
 	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
 		this.sentry?.withScope((scope) => {
 			if (extras) scope.setExtras(extras)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
 			this.sentry?.captureException(exception) as any
 		})
 		this.log.debug('ERROR', (exception as any)?.stack ?? exception)
-		if (!this.sentry) {
-			console.error(`[TLPostgresReplicator]: `, exception)
-		}
+		if (!this.sentry) console.error('[TLPostgresReplicator]: ', exception)
 	}
 
-	private log
+	private log: Logger
 
-	private readonly replicationService
-	private readonly slotName
+	private readonly replicationService: LogicalReplicationService
+	private readonly slotName: string
 	private readonly wal2jsonPlugin = new Wal2JsonPlugin({
 		addTables:
 			'public.user,public.file,public.file_state,public.user_mutation_number,public.replicator_boot_id',
 	})
 
 	private readonly db: Kysely<DB>
+
 	constructor(ctx: DurableObjectState, env: Environment) {
 		super(ctx, env)
+
 		this.measure = env.MEASURE
 		this.sentry = createSentry(ctx, env)
-		this.sqlite = this.ctx.storage.sql
-		this.state = {
-			type: 'init',
-			promise: promiseWithResolve(),
-		}
-
-		const slotNameMaxLength = 63 // max postgres identifier length
-		const slotNamePrefix = 'tlpr_' // pick something short so we can get more of the durable object id
-		const durableObjectId = this.ctx.id.toString()
-		this.slotName =
-			slotNamePrefix + durableObjectId.slice(0, slotNameMaxLength - slotNamePrefix.length)
+		this.sqlite = ctx.storage.sql
+		this.state = { type: 'init', promise: promiseWithResolve() }
 
 		this.log = new Logger(env, 'TLPostgresReplicator', this.sentry)
 		this.db = createPostgresConnectionPool(env, 'TLPostgresReplicator', 100)
 
+		const slotNamePrefix = 'tlpr_'
+		const durableObjectId = ctx.id.toString()
+		this.slotName = slotNamePrefix + durableObjectId.slice(0, 63 - slotNamePrefix.length)
+
 		this.replicationService = new LogicalReplicationService(
-			/**
-			 * node-postgres Client options for connection
-			 * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual): 'postgres',
 				connectionString: env.BOTCOM_POSTGRES_CONNECTION_STRING,
 				application_name: this.slotName,
 			},
-			/**
-			 * Logical replication service config
-			 * https://github.com/kibae/pg-logical-replication/blob/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual): {
-					auto: false,
-					timeoutSeconds: 10,
-				},
-			}
+			{ acknowledge: { auto: false, timeoutSeconds: 10 } }
 		)
 
-		this.alarm()
 		this.ctx
 			.blockConcurrencyWhile(async () => {
-				await this._migrate().catch((e) => {
-					this.captureException(e)
-					throw e
-				})
-				// if the slot name changed, we set the lsn to null, which will trigger a mass user DO reboot
+				await this._migrate()
 				if (this.sqlite.exec('select slotName from meta').one().slotName !== this.slotName) {
 					this.sqlite.exec('UPDATE meta SET slotName = ?, lsn = null', this.slotName)
 				}
@@ -247,14 +175,9 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				)
 				this.pruneHistory()
 			})
-			.then(() => {
-				this.reboot('constructor', false).catch((e) => {
-					this.captureException(e)
-					this.__test__panic()
-				})
-			})
-		// no need to catch since throwing in a blockConcurrencyWhile will trigger
-		// a DO reboot
+			.then(() => this.reboot('constructor', false).catch(this.captureException))
+
+		this.alarm()
 	}
 
 	private _applyMigration(index: number) {
@@ -269,72 +192,48 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	}
 
 	private async _migrate() {
-		let appliedMigrations: Migration[]
+		let applied: Migration[]
 		try {
-			appliedMigrations = this.sqlite
-				.exec('select code, id from migrations order by id asc')
-				.toArray() as any
-		} catch (_e) {
-			// no migrations table, run initial migration
+			applied = this.sqlite.exec('select id from migrations order by id').toArray() as any
+		} catch {
 			this._applyMigration(0)
-			appliedMigrations = [migrations[0]]
+			applied = [migrations[0]]
 		}
+		for (let i = applied.length; i < migrations.length; i++) this._applyMigration(i)
+	}
 
-		for (let i = 0; i < appliedMigrations.length; i++) {
-			if (appliedMigrations[i].id !== migrations[i].id) {
-				throw new Error(
-					'TLPostgresReplicator migrations have changed!! this is an append-only array!!'
-				)
-			}
-		}
+	/* ----------  housekeeping ---------- */
 
-		for (let i = appliedMigrations.length; i < migrations.length; i++) {
-			this._applyMigration(i)
-		}
-	}
+	override async alarm() {
+		this.ctx.storage.setAlarm(Date.now() + 3000)
+		this.maybeLogRpm()
 
-	async __test__forceReboot() {
-		this.reboot('test')
-	}
+		if (Date.now() - this.lastPostgresMessageTime > 10000) {
+			this.reboot('inactivity')
+		} else if (Date.now() - this.lastPostgresMessageTime > 5000) {
+			this.replicationService.acknowledge('0/0').catch(this.captureException)
+		}
 
-	async __test__panic() {
-		this.ctx.abort()
+		this.maybePrune().catch(this.captureException)
 	}
 
-	override async alarm() {
-		try {
-			this.ctx.storage.setAlarm(Date.now() + 3000)
-			this.maybeLogRpm()
-			// If we haven't heard anything from postgres for 5 seconds, trigger a heartbeat.
-			// Otherwise, if we haven't heard anything for 10 seconds, do a soft reboot.
-			if (Date.now() - this.lastPostgresMessageTime > 10000) {
-				this.log.debug('rebooting due to inactivity')
-				this.reboot('inactivity')
-			} else if (Date.now() - this.lastPostgresMessageTime > 5000) {
-				// this triggers a heartbeat
-				this.log.debug('triggering heartbeat due to inactivity')
-				await this.replicationService.acknowledge('0/0')
-			}
-			await this.maybePrune()
-		} catch (e) {
-			this.captureException(e)
+	private maybeLogRpm() {
+		const now = Date.now()
+		if (this.postgresUpdates > 0 && now - this.lastRpmLogTime > ONE_MINUTE) {
+			this.logEvent({ type: 'rpm', rpm: this.postgresUpdates })
+			this.postgresUpdates = 0
+			this.lastRpmLogTime = now
 		}
 	}
 
 	private async maybePrune() {
-		const now = Date.now()
-		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
+		if (Date.now() - this.lastUserPruneTime < PRUNE_INTERVAL) return
 		this.logEvent({ type: 'prune' })
-		this.log.debug('pruning')
-		const cutoffTime = now - PRUNE_INTERVAL
-		const usersWithoutRecentUpdates = this.ctx.storage.sql
-			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
-			.toArray() as {
-			id: string
-		}[]
-		for (const { id } of usersWithoutRecentUpdates) {
-			await this.unregisterUser(id)
-		}
+		const cutoff = Date.now() - PRUNE_INTERVAL
+		const toPrune = this.sqlite
+			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoff)
+			.toArray() as { id: string }[]
+		for (const { id } of toPrune) await this.unregisterUser(id)
 		this.pruneHistory()
 		this.lastUserPruneTime = Date.now()
 	}
@@ -349,161 +248,94 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
     `)
 	}
 
-	private maybeLogRpm() {
-		const now = Date.now()
-		if (this.postgresUpdates > 0 && now - this.lastRpmLogTime > ONE_MINUTE) {
-			this.logEvent({
-				type: 'rpm',
-				rpm: this.postgresUpdates,
-			})
-			this.postgresUpdates = 0
-			this.lastRpmLogTime = now
-		}
-	}
-
 	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
+		const first = this.sqlite.exec('select * from history order by rowid asc limit 1').toArray()[0]
+		const last = this.sqlite.exec('select * from history order by rowid desc limit 1').toArray()[0]
+		const users = this.sqlite.exec('select count(*) as count from active_user').one().count as number
 		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
+		return { earliestHistoryRow: first, latestHistoryRow: last, activeUsers: users, meta }
 	}
 
-	private queue = new ExecutionQueue()
+	/* ----------  replication ---------- */
 
 	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
 		this.logEvent({ type: 'reboot', source })
-		if (!this.queue.isEmpty()) {
-			this.log.debug('reboot is already in progress.', source)
-			return
-		}
-		this.log.debug('reboot push', source)
+		if (!this.queue.isEmpty()) return
 		await this.queue.push(async () => {
-			if (delay) {
-				await sleep(2000)
-			}
-			const start = Date.now()
-			this.log.debug('rebooting', source)
-			const res = await Promise.race([
-				this.boot().then(() => 'ok'),
-				sleep(3000).then(() => 'timeout'),
-			]).catch((e) => {
+			if (delay) await sleep(2000)
+			try {
+				await this.boot()
+				this.logEvent({ type: 'reboot_duration', duration: 0 })
+			} catch (e) {
 				this.logEvent({ type: 'reboot_error' })
-				this.log.debug('reboot error', e.stack)
 				this.captureException(e)
-				return 'error'
-			})
-			this.log.debug('rebooted', res)
-			if (res === 'ok') {
-				this.logEvent({ type: 'reboot_duration', duration: Date.now() - start })
-			} else {
-				getStatsDurableObjct(this.env).recordReplicatorBootRetry()
 				this.reboot('retry')
 			}
 		})
 	}
 
 	private async boot() {
-		this.log.debug('booting')
 		this.lastPostgresMessageTime = Date.now()
 		this.replicationService.removeAllListeners()
-
-		// stop any previous subscriptions both here and on the postgres side to make sure we will be allowed to connect
-		// to the slot again.
-		this.log.debug('stopping replication')
 		this.replicationService.stop().catch(this.captureException)
-		this.log.debug('terminating backend')
+
 		await sql`SELECT pg_terminate_backend(active_pid) FROM pg_replication_slots WHERE slot_name = ${this.slotName} AND active`.execute(
 			this.db
 		)
-		this.log.debug('done')
-
-		const promise = 'promise' in this.state ? this.state.promise : promiseWithResolve()
-		this.state = {
-			type: 'connecting',
-			// preserve the promise so any awaiters do eventually get resolved
-			// TODO: set a timeout on the promise?
-			promise,
-		}
 
-		this.replicationService.on('heartbeat', (lsn: string) => {
-			this.log.debug('heartbeat', lsn)
+		/* ----------  listeners ---------- */
+
+		this.replicationService.on('heartbeat', (lsn) => {
 			this.lastPostgresMessageTime = Date.now()
 			this.reportPostgresUpdate()
-			// don't call this.updateLsn here because it's not necessary
-			// to save the lsn after heartbeats since they contain no information
 			this.replicationService.acknowledge(lsn).catch(this.captureException)
 		})
 
-		this.replicationService.addListener('data', (lsn: string, log: Wal2Json.Output) => {
-			// ignore events received after disconnecting, if that can even happen
-			try {
-				if (this.state.type !== 'connected') return
-				this.postgresUpdates++
-				this.lastPostgresMessageTime = Date.now()
-				this.reportPostgresUpdate()
-				const collator = new UserChangeCollator()
-				for (const _change of log.change) {
-					if (_change.kind === 'message' && (_change as any).prefix === 'requestLsnUpdate') {
-						this.requestLsnUpdate((_change as any).content)
-						continue
-					}
-					const change = this.parseChange(_change)
-					if (!change) {
-						this.log.debug('IGNORING CHANGE', _change)
-						continue
-					}
+		this.replicationService.addListener('data', (lsn, log) => {
+			if (this.state.type !== 'connected') return
+			this.postgresUpdates++
+			this.lastPostgresMessageTime = Date.now()
+			this.reportPostgresUpdate()
 
-					this.handleEvent(collator, change, false)
-					this.sqlite.exec(
-						'INSERT INTO history (lsn, userId, fileId, json, timestamp) VALUES (?, ?, ?, ?, ?)',
-						lsn,
-						change.userId,
-						change.fileId,
-						JSON.stringify(change),
-						Date.now()
-					)
-				}
-				this.log.debug('changes', collator.changes.size)
-				for (const [userId, changes] of collator.changes) {
-					this._messageUser(userId, { type: 'changes', changes, lsn })
+			const collator = new UserChangeCollator()
+			for (const raw of log.change) {
+				if (raw.kind === 'message' && (raw as any).prefix === 'requestLsnUpdate') {
+					this.requestLsnUpdate((raw as any).content)
+					continue
 				}
-				this.commitLsn(lsn)
-			} catch (e) {
-				this.captureException(e)
+				const change = this.parseChange(raw)
+				if (!change) continue
+				this.handleEvent(collator, change, false)
+				this.sqlite.exec(
+					'INSERT INTO history (lsn, userId, fileId, json, timestamp) VALUES (?, ?, ?, ?, ?)',
+					lsn,
+					change.userId,
+					change.fileId,
+					JSON.stringify(change),
+					Date.now()
+				)
 			}
+			for (const [uid, changes] of collator.changes)
+				this._messageUser(uid, { type: 'changes', changes, lsn })
+			this.commitLsn(lsn).catch(this.captureException)
 		})
 
 		this.replicationService.addListener('start', () => {
 			if (!this.getCurrentLsn()) {
-				// make a request to force an updateLsn()
 				sql`insert into replicator_boot_id ("replicatorId", "bootId") values (${this.ctx.id.toString()}, ${uniqueId()}) on conflict ("replicatorId") do update set "bootId" = excluded."bootId"`.execute(
 					this.db
 				)
 			}
 		})
 
-		const handleError = (e: Error) => {
+		this.replicationService.on('error', (e) => {
 			this.captureException(e)
 			this.reboot('retry')
-		}
-
-		this.replicationService.on('error', handleError)
-		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(handleError)
+		})
 
-		this.state = {
-			type: 'connected',
-		}
-		promise.resolve(null)
+		await this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName)
+		this.state = { type: 'connected' }
+		this.state.promise.resolve(null)
 	}
 
 	private getCurrentLsn() {
@@ -511,56 +343,47 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	}
 
 	private async commitLsn(lsn: string) {
-		const result = await this.replicationService.acknowledge(lsn)
-		if (result) {
-			// if the current lsn in the meta table is null it means
-			// that we are using a brand new replication slot and we
-			// need to force all user DOs to reboot
+		if (await this.replicationService.acknowledge(lsn)) {
 			const prevLsn = this.getCurrentLsn()
 			this.sqlite.exec('UPDATE meta SET lsn = ?', lsn)
-			if (!prevLsn) {
-				this.onDidSequenceBreak()
-			}
-		} else {
-			this.captureException(new Error('acknowledge failed'))
-			this.reboot('retry')
+			if (!prevLsn) this.onDidSequenceBreak()
 		}
 	}
 
+	private onDidSequenceBreak() {
+		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
+		const BATCH = 5
+		const dispatch = () => {
+			if (users.length === 0) return
+			users.splice(0, BATCH).forEach((u) => this._messageUser(u.id as string, { type: 'maybe_force_reboot' }))
+			setTimeout(dispatch, 10)
+		}
+		dispatch()
+	}
+
+	/* ----------  change handling ---------- */
+
 	private parseChange(change: Wal2Json.Change): Change | null {
 		const table = change.table as ReplicationEvent['table']
-		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
+		if (!(table in relevantTables) || change.kind === 'truncate' || change.kind === 'message')
 			return null
-		}
 
-		const row = {} as any
-		const previous = {} as any
-		// take everything from change.columnnames and associated the values from change.columnvalues
+		const row: any = {}, previous: any = {}
 		if (change.kind === 'delete') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
-			oldkeys.keynames.forEach((key, i) => {
-				row[key] = oldkeys.keyvalues[i]
-			})
-		} else if (change.kind === 'update') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
-			oldkeys.keynames.forEach((key, i) => {
-				previous[key] = oldkeys.keyvalues[i]
-			})
-			change.columnnames.forEach((col, i) => {
-				row[col] = change.columnvalues[i]
-			})
+			const keys = change.oldkeys
+			assert(keys?.keyvalues, 'oldkeys')
+			keys.keynames.forEach((k, i) => (row[k] = keys.keyvalues[i]))
 		} else {
-			change.columnnames.forEach((col, i) => {
-				row[col] = change.columnvalues[i]
-			})
+			if (change.kind === 'update') {
+				const keys = change.oldkeys
+				assert(keys?.keyvalues, 'oldkeys')
+				keys.keynames.forEach((k, i) => (previous[k] = keys.keyvalues[i]))
+			}
+			change.columnnames.forEach((c, i) => (row[c] = change.columnvalues[i]))
 		}
 
-		let userId = null as string | null
-		let fileId = null as string | null
+		let userId: string | null = null
+		let fileId: string | null = null
 		switch (table) {
 			case 'user':
 				userId = (row as TlaUser).id
@@ -576,189 +399,92 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			case 'user_mutation_number':
 				userId = (row as { userId: string }).userId
 				break
-			default: {
-				// assert never
-				const _x: never = table
-			}
 		}
-
 		if (!userId) return null
-
-		return {
-			row,
-			previous,
-			event: {
-				command: change.kind,
-				table,
-			},
-			userId,
-			fileId,
-		}
-	}
-
-	private onDidSequenceBreak() {
-		// re-register all active users to get their latest guest info
-		// do this in small batches to avoid overwhelming the system
-		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
-		this.reportActiveUsers()
-		const BATCH_SIZE = 5
-		const tick = () => {
-			if (users.length === 0) return
-			const batch = users.splice(0, BATCH_SIZE)
-			for (const user of batch) {
-				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
-			}
-			setTimeout(tick, 10)
-		}
-		tick()
+		return { row, previous, event: { command: change.kind, table }, userId, fileId }
 	}
 
-	private reportPostgresUpdate = throttle(
-		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
-		5000
-	)
-
 	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
-		// ignore events received after disconnecting, if that can even happen
-		if (this.state.type !== 'connected') return
-
-		// We shouldn't get these two, but just to be sure we'll filter them out
-		const { command, table } = change.event
-		this.log.debug('handleEvent', change)
-		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
-		try {
-			switch (table) {
-				case 'user_mutation_number':
-					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
-					break
-				case 'file_state':
-					this.handleFileStateEvent(collator, change.row, { command, table })
-					break
-				case 'file':
-					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
-					break
-				case 'user':
-					this.handleUserEvent(collator, change.row, { command, table })
-					break
-				default: {
-					const _x: never = table
-					this.captureException(new Error(`Unhandled table: ${table}`), { change })
-					break
-				}
-			}
-		} catch (e) {
-			this.captureException(e)
-		}
-	}
+		const { event, row, previous } = change
+		switch (event.table) {
+			case 'user_mutation_number':
+				if (event.command !== 'delete')
+					collator.addChange(change.userId, {
+						type: 'mutation_commit',
+						mutationNumber: (row as any).mutationNumber,
+						userId: change.userId,
+					})
+				break
 
-	private handleMutationConfirmationEvent(
-		collator: UserChangeCollator,
-		row: Row | null,
-		event: ReplicationEvent
-	) {
-		if (event.command === 'delete') return
-		assert(row && 'mutationNumber' in row, 'mutationNumber is required')
-		collator.addChange(row.userId, {
-			type: 'mutation_commit',
-			mutationNumber: row.mutationNumber,
-			userId: row.userId,
-		})
-	}
+			case 'file_state':
+				if (!this.userIsActive(change.userId)) return
+				if (event.command === 'insert' && !(row as any).isFileOwner)
+					this.sqlite.exec(
+						`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
+						change.userId,
+						change.fileId
+					)
+				else if (event.command === 'delete')
+					this.sqlite.exec(
+						`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
+						change.userId,
+						change.fileId
+					)
+				collator.addChange(change.userId, {
+					type: 'row_update',
+					row: row as any,
+					table: event.table,
+					event: event.command,
+					userId: change.userId,
+				})
+				break
 
-	private handleFileStateEvent(
-		collator: UserChangeCollator,
-		row: Row | null,
-		event: ReplicationEvent
-	) {
-		assert(row && 'userId' in row && 'fileId' in row, 'userId is required')
-		if (!this.userIsActive(row.userId)) return
-		if (event.command === 'insert') {
-			if (!row.isFileOwner) {
-				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
-					row.userId,
-					row.fileId
+			case 'file':
+				if (event.command === 'delete') {
+					if (!isReplay) getRoomDurableObject(this.env, change.fileId!).appFileRecordDidDelete(row)
+					this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, change.fileId)
+				} else if (event.command === 'update' && !isReplay) {
+					getRoomDurableObject(this.env, change.fileId!).appFileRecordDidUpdate(row)
+					if (previous) {
+						const prev = previous as TlaFile
+						if (row.published && !prev.published) this.publishSnapshot(row as TlaFile)
+						else if (!row.published && prev.published) this.unpublishSnapshot(row as TlaFile)
+						else if (row.published && row.lastPublished > prev.lastPublished)
+							this.publishSnapshot(row as TlaFile)
+					}
+				} else if (event.command === 'insert' && !isReplay) {
+					getRoomDurableObject(this.env, change.fileId!).appFileRecordCreated(row)
+				}
+				const impacted = new Set<string>(
+					this.sqlite
+						.exec('SELECT userId FROM user_file_subscriptions WHERE fileId = ?', change.fileId)
+						.toArray()
+						.map((x) => x.userId as string)
 				)
-			}
-		} else if (event.command === 'delete') {
-			this.sqlite.exec(
-				`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
-				row.userId,
-				row.fileId
-			)
-		}
-		collator.addChange(row.userId, {
-			type: 'row_update',
-			row: row as any,
-			table: event.table as ZTable,
-			event: event.command,
-			userId: row.userId,
-		})
-	}
+				impacted.add((row as TlaFile).ownerId)
+				for (const uid of impacted)
+					collator.addChange(uid, {
+						type: 'row_update',
+						row: row as any,
+						table: event.table,
+						event: event.command,
+						userId: uid,
+					})
+				break
 
-	private handleFileEvent(
-		collator: UserChangeCollator,
-		row: Row | null,
-		previous: Row | undefined,
-		event: ReplicationEvent,
-		isReplay: boolean
-	) {
-		assert(row && 'id' in row && 'ownerId' in row, 'row id is required')
-		const impactedUserIds = [
-			row.ownerId,
-			...this.sqlite
-				.exec('SELECT userId FROM user_file_subscriptions WHERE fileId = ?', row.id)
-				.toArray()
-				.map((x) => x.userId as string),
-		]
-		// if the file state was deleted before the file, we might not have any impacted users
-		if (event.command === 'delete') {
-			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidDelete(row)
-			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, row.id)
-		} else if (event.command === 'update') {
-			assert('ownerId' in row, 'ownerId is required when updating file')
-			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
-			if (previous && !isReplay) {
-				const prevFile = previous as TlaFile
-				if (row.published && !(prevFile as TlaFile).published) {
-					this.publishSnapshot(row)
-				} else if (!row.published && (prevFile as TlaFile).published) {
-					this.unpublishSnapshot(row)
-				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
-					this.publishSnapshot(row)
-				}
-			}
-		} else if (event.command === 'insert') {
-			assert('ownerId' in row, 'ownerId is required when inserting file')
-			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
-		}
-		for (const userId of impactedUserIds) {
-			collator.addChange(userId, {
-				type: 'row_update',
-				row: row as any,
-				table: event.table as ZTable,
-				event: event.command,
-				userId,
-			})
+			case 'user':
+				collator.addChange(change.userId, {
+					type: 'row_update',
+					row: row as any,
+					table: event.table,
+					event: event.command,
+					userId: change.userId,
+				})
+				break
 		}
 	}
 
-	private handleUserEvent(collator: UserChangeCollator, row: Row | null, event: ReplicationEvent) {
-		assert(row && 'id' in row, 'user id is required')
-		this.log.debug('USER EVENT', event.command, row.id)
-		collator.addChange(row.id, {
-			type: 'row_update',
-			row: row as any,
-			table: event.table as ZTable,
-			event: event.command,
-			userId: row.id,
-		})
-		return [row.id]
-	}
-
-	private userIsActive(userId: string) {
-		return this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length > 0
-	}
+	/* ----------  messaging ---------- */
 
 	async ping() {
 		this.log.debug('ping')
@@ -766,117 +492,36 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	}
 
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
-		this.log.debug('messageUser', userId, event)
-		if (!this.userIsActive(userId)) {
-			this.log.debug('user is not active', userId)
-			return
-		}
-		try {
-			let q = this.userDispatchQueues.get(userId)
-			if (!q) {
-				q = new ExecutionQueue()
-				this.userDispatchQueues.set(userId, q)
-			}
-			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
-				.exec(
-					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
-					Date.now(),
-					userId
-				)
-				.one()
-			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
-			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')
-
-			await q.push(async () => {
-				const user = getUserDurableObject(this.env, userId)
-
-				const res = await user.handleReplicationEvent({
-					...event,
-					sequenceNumber,
-					sequenceId: this.slotName + sequenceIdSuffix,
-				})
-				if (res === 'unregister') {
-					this.log.debug('unregistering user', userId, event)
-					this.unregisterUser(userId)
-				}
+		if (!this.userIsActive(userId)) return
+		let q = this.userDispatchQueues.get(userId)
+		if (!q) {
+			q = new ExecutionQueue()
+			this.userDispatchQueues.set(userId, q)
+		}
+		const { sequenceNumber, sequenceIdSuffix } = this.sqlite
+			.exec(
+				'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
+				Date.now(),
+				userId
+			)
+			.one()
+		assert(typeof sequenceNumber === 'number' && typeof sequenceIdSuffix === 'string')
+		await q.push(async () => {
+			const res = await getUserDurableObject(this.env, userId).handleReplicationEvent({
+				...event,
+				sequenceNumber,
+				sequenceId: this.slotName + sequenceIdSuffix,
 			})
-		} catch (e) {
-			this.captureException(e)
-		}
+			if (res === 'unregister') await this.unregisterUser(userId)
+		})
 	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
-		}
+	private async requestLsnUpdate(userId: string) {
+		this.logEvent({ type: 'request_lsn_update' })
+		await this._messageUser(userId, { type: 'changes', changes: [], lsn: assertExists(this.getCurrentLsn()) })
 	}
 
-	private getResumeType(
-		lsn: string,
-		userId: string,
-		guestFileIds: string[]
-	): { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] } | { type: 'reboot' } {
-		const currentLsn = assertExists(this.getCurrentLsn())
-
-		if (lsn >= currentLsn) {
-			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', currentLsn)
-			// targetLsn is now or in the future, we can register them and deliver events
-			// without needing to check the history
-			return { type: 'done' }
-		}
-		const earliestLsn = this.sqlite
-			.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid asc LIMIT 1')
-			.toArray()[0]?.lsn
-
-		if (!earliestLsn || lsn < earliestLsn) {
-			this.log.debug('getResumeType: not enough history', lsn, '<', earliestLsn)
-			// not enough history, we can't resume
-			return { type: 'reboot' }
-		}
-
-		const history = this.sqlite
-			.exec<{ json: string; lsn: string }>(
-				`
-			SELECT lsn, json
-			FROM history
-			WHERE
-			  lsn > ?
-				AND (
-				  userId = ? 
-					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 1)).join(', ')})
-				)
-			ORDER BY rowid ASC
-		`,
-				lsn,
-				userId,
-				...guestFileIds
-			)
-			.toArray()
-			.map(({ json, lsn }) => ({ change: JSON.parse(json) as Change, lsn }))
-
-		if (history.length === 0) {
-			this.log.debug('getResumeType: no history to replay, all good', lsn)
-			return { type: 'done' }
-		}
-
-		const changesByLsn = groupBy(history, (x) => x.lsn)
-		const messages: ZReplicationEventWithoutSequenceInfo[] = []
-		for (const lsn of Object.keys(changesByLsn).sort()) {
-			const collator = new UserChangeCollator()
-			for (const change of changesByLsn[lsn]) {
-				this.handleEvent(collator, change.change, true)
-			}
-			const changes = collator.changes.get(userId)
-			if (changes?.length) {
-				messages.push({ type: 'changes', changes, lsn })
-			}
-		}
-		this.log.debug('getResumeType: resuming', messages.length, messages)
-		return { type: 'done', messages }
-	}
+	/* ----------  registration / pruning ---------- */
 
 	async registerUser({
 		userId,
@@ -888,84 +533,55 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		lsn: string
 		guestFileIds: string[]
 		bootId: string
-	}): Promise<{ type: 'done'; sequenceId: string; sequenceNumber: number } | { type: 'reboot' }> {
-		try {
-			while (!this.getCurrentLsn()) {
-				// this should only happen once per slot name change, which should never happen!
-				await sleep(100)
-			}
-
-			this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
-			this.logEvent({ type: 'register_user' })
+	}): Promise<
+		| { type: 'done'; sequenceId: string; sequenceNumber: number }
+		| { type: 'reboot' }
+	> {
+		await this.waitUntilConnected()
+		const currentLsn = assertExists(this.getCurrentLsn())
+		if (lsn < currentLsn) {
+			const earliest = this.sqlite
+				.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid LIMIT 1')
+				.toArray()[0]?.lsn
+			if (!earliest || lsn < earliest) return { type: 'reboot' }
+		}
 
-			// clear user and subscriptions
-			this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+		// refresh user
+		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+		this.sqlite.exec(
+			`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
+			userId,
+			bootId,
+			Date.now()
+		)
+		this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
+		for (const fid of guestFileIds)
 			this.sqlite.exec(
-				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
+				`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
 				userId,
-				bootId,
-				Date.now()
+				fid
 			)
 
-			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
-			for (const fileId of guestFileIds) {
-				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
-					userId,
-					fileId
-				)
-			}
-			this.log.debug('inserted file subscriptions', guestFileIds.length)
-
-			this.reportActiveUsers()
-			this.log.debug('inserted active user')
-
-			const resume = this.getResumeType(lsn, userId, guestFileIds)
-			if (resume.type === 'reboot') {
-				return { type: 'reboot' }
-			}
-
-			if (resume.messages) {
-				for (const message of resume.messages) {
-					this._messageUser(userId, message)
-				}
-			}
-
-			return {
-				type: 'done',
-				sequenceId: this.slotName + bootId,
-				sequenceNumber: 0,
-			}
-		} catch (e) {
-			this.captureException(e)
-			throw e
-		}
-	}
+		const resume = this.getResumeType(lsn, userId, guestFileIds)
+		if (resume.type === 'reboot') return { type: 'reboot' }
+		if (resume.messages) for (const m of resume.messages) await this._messageUser(userId, m)
 
-	private async requestLsnUpdate(userId: string) {
-		try {
-			this.log.debug('requestLsnUpdate', userId)
-			this.logEvent({ type: 'request_lsn_update' })
-			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
-			this._messageUser(userId, { type: 'changes', changes: [], lsn })
-		} catch (e) {
-			this.captureException(e)
-			throw e
-		}
-		return
+		this.reportActiveUsers()
+		return { type: 'done', sequenceId: this.slotName + bootId, sequenceNumber: 0 }
 	}
 
 	async unregisterUser(userId: string) {
-		this.logEvent({ type: 'unregister_user' })
 		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
 		this.reportActiveUsers()
-		const queue = this.userDispatchQueues.get(userId)
-		if (queue) {
-			queue.close()
+		const q = this.userDispatchQueues.get(userId)
+		if (q) {
+			q.close()
 			this.userDispatchQueues.delete(userId)
 		}
 	}
 
+	/* ----------  misc ---------- */
+
 	private writeEvent(eventData: EventData) {
 		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
 	}
@@ -973,65 +589,44 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	logEvent(event: TLPostgresReplicatorEvent) {
 		switch (event.type) {
 			case 'reboot':
-				this.writeEvent({ blobs: [event.type, event.source] })
-				break
 			case 'reboot_error':
 			case 'register_user':
 			case 'unregister_user':
 			case 'request_lsn_update':
 			case 'prune':
 			case 'get_file_record':
-				this.writeEvent({
-					blobs: [event.type],
-				})
-				break
-
-			case 'reboot_duration':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.duration],
-				})
+				this.writeEvent({ blobs: [event.type] })
 				break
 			case 'rpm':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.rpm],
-				})
+				this.writeEvent({ blobs: [event.type], doubles: [event.rpm] })
+				break
+			case 'reboot_duration':
+				this.writeEvent({ blobs: [event.type], doubles: [event.duration] })
 				break
 			case 'active_users':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.count],
-				})
+				this.writeEvent({ blobs: [event.type], doubles: [event.count] })
 				break
 			default:
 				exhaustiveSwitchError(event)
 		}
 	}
 
+	/* ----------  publishing ---------- */
+
 	private async publishSnapshot(file: TlaFile) {
 		try {
-			// make sure the room's snapshot is up to date
 			await getRoomDurableObject(this.env, file.id).awaitPersist()
-			// and that it exists
 			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
-
-			if (!snapshot) {
-				throw new Error('Snapshot not found')
-			}
+			if (!snapshot) throw new Error('Snapshot not found')
 			const blob = await snapshot.blob()
-
-			// Create a new slug for the published room
 			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
-
-			// Bang the snapshot into the database
 			await this.env.ROOM_SNAPSHOTS.put(
 				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
 				blob
 			)
-			const currentTime = new Date().toISOString()
+			const now = new Date().toISOString()
 			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${now}`, isApp: true }),
 				blob
 			)
 		} catch (e) {
