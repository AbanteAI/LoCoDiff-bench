
index 039baf10..31513def 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmpoob1uf9n_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmp0g2_pkum_actual.txt	
@@ -1,6 +1,6 @@
 import { DB, TlaFile, TlaFileState, TlaRow, TlaUser, ZTable } from '@tldraw/dotcom-shared'
 import {
-	ExecutionQueue,
+	executionQueue as ExecutionQueue,
 	assert,
 	assertExists,
 	exhaustiveSwitchError,
@@ -14,13 +14,11 @@ import {
 import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { Kysely, sql } from 'kysely'
-
 import { LogicalReplicationService, Wal2Json, Wal2JsonPlugin } from 'pg-logical-replication'
 import { Logger } from './Logger'
 import { UserChangeCollator } from './UserChangeCollator'
 import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
 import { createPostgresConnectionPool } from './postgres'
-import { getR2KeyForRoom } from './r2'
 import {
 	Analytics,
 	Environment,
@@ -33,13 +31,7 @@ import {
 	getStatsDurableObjct,
 	getUserDurableObject,
 } from './utils/durableObjects'
-
-const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')
-
-interface ReplicationEvent {
-	command: 'insert' | 'update' | 'delete'
-	table: keyof typeof relevantTables
-}
+import { getR2KeyForRoom } from './r2'
 
 interface Change {
 	event: ReplicationEvent
@@ -59,7 +51,10 @@ const migrations: Migration[] = [
 		id: '000_seed',
 		code: `
 			CREATE TABLE IF NOT EXISTS active_user (
-				id TEXT PRIMARY KEY
+				id TEXT PRIMARY KEY,
+				sequenceNumber INTEGER NOT NULL DEFAULT 0,
+				sequenceIdSuffix TEXT NOT NULL DEFAULT '',
+				lastUpdatedAt INTEGER NOT NULL DEFAULT 0
 			);
 			CREATE TABLE IF NOT EXISTS user_file_subscriptions (
 				userId TEXT,
@@ -67,10 +62,15 @@ const migrations: Migration[] = [
 				PRIMARY KEY (userId, fileId),
 				FOREIGN KEY (userId) REFERENCES active_user(id) ON DELETE CASCADE
 			);
-			CREATE TABLE migrations (
+			CREATE TABLE IF NOT EXISTS migrations (
 				id TEXT PRIMARY KEY,
 				code TEXT NOT NULL
 			);
+			CREATE TABLE IF NOT EXISTS meta (
+				lsn TEXT PRIMARY KEY,
+				slotName TEXT NOT NULL
+			);
+			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
 		`,
 	},
 	{
@@ -93,20 +93,18 @@ const migrations: Migration[] = [
 				lsn TEXT PRIMARY KEY,
 				slotName TEXT NOT NULL
 			);
-			-- The slot name references the replication slot in postgres.
-			-- If something ever gets messed up beyond mortal comprehension and we need to force all
-			-- clients to reboot, we can just change the slot name by altering the slotNamePrefix in the constructor.
 			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
 		`,
 	},
 	{
 		id: '004_keep_event_log',
 		code: `
-		  CREATE TABLE history (
+			CREATE TABLE history (
 				lsn TEXT NOT NULL,
 				userId TEXT NOT NULL,
 				fileId TEXT,
-				json TEXT NOT NULL
+				json TEXT NOT NULL,
+				timestamp INTEGER NOT NULL DEFAULT 0
 			);
 			CREATE INDEX history_lsn_userId ON history (lsn, userId);
 			CREATE INDEX history_lsn_fileId ON history (lsn, fileId);
@@ -127,6 +125,13 @@ const MAX_HISTORY_ROWS = 20_000
 
 type PromiseWithResolve = ReturnType<typeof promiseWithResolve>
 
+type ReplicationEvent = {
+	command: 'insert' | 'update' | 'delete'
+	table: keyof typeof relevantTables
+}
+
+const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')
+
 type Row =
 	| TlaRow
 	| {
@@ -138,58 +143,24 @@ type Row =
 			userId: string
 	  }
 
-type BootState =
-	| {
-			type: 'init'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connecting'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connected'
-	  }
-
 export class TLPostgresReplicator extends DurableObject<Environment> {
 	private sqlite: SqlStorage
+	private db: Kysely<DB>
 	private state: BootState
-	private measure: Analytics | undefined
+	private measure: Analytics
 	private postgresUpdates = 0
 	private lastPostgresMessageTime = Date.now()
 	private lastRpmLogTime = Date.now()
 	private lastUserPruneTime = Date.now()
-
-	// we need to guarantee in-order delivery of messages to users
-	// but DO RPC calls are not guaranteed to happen in order, so we need to
-	// use a queue per user
-	private userDispatchQueues: Map<string, ExecutionQueue> = new Map()
-
-	sentry
-	// eslint-disable-next-line local/prefer-class-methods
-	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
-		this.sentry?.withScope((scope) => {
-			if (extras) scope.setExtras(extras)
-			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			this.sentry?.captureException(exception) as any
-		})
-		this.log.debug('ERROR', (exception as any)?.stack ?? exception)
-		if (!this.sentry) {
-			console.error(`[TLPostgresReplicator]: `, exception)
-		}
-	}
-
-	private log
-
-	private readonly replicationService
-	private readonly slotName
+	private log: Logger
+	private readonly replicationService: LogicalReplicationService
+	private readonly slotName: string
 	private readonly wal2jsonPlugin = new Wal2JsonPlugin({
 		addTables:
 			'public.user,public.file,public.file_state,public.user_mutation_number,public.replicator_boot_id',
 	})
+	private userDispatchQueues: Map<string, ExecutionQueue> = new Map()
 
-	private readonly db: Kysely<DB>
 	constructor(ctx: DurableObjectState, env: Environment) {
 		super(ctx, env)
 		this.measure = env.MEASURE
@@ -200,29 +171,20 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			promise: promiseWithResolve(),
 		}
 
-		const slotNameMaxLength = 63 // max postgres identifier length
-		const slotNamePrefix = 'tlpr_' // pick something short so we can get more of the durable object id
+		const slotNameMaxLength = 63
+		const slotNamePrefix = 'tlpr_'
 		const durableObjectId = this.ctx.id.toString()
-		this.slotName =
-			slotNamePrefix + durableObjectId.slice(0, slotNameMaxLength - slotNamePrefix.length)
+		this.slotName = slotNamePrefix + durableObjectId.slice(0, slotNameMaxLength - slotNamePrefix.length)
 
 		this.log = new Logger(env, 'TLPostgresReplicator', this.sentry)
 		this.db = createPostgresConnectionPool(env, 'TLPostgresReplicator', 100)
 
 		this.replicationService = new LogicalReplicationService(
-			/**
-			 * node-postgres Client options for connection
-			 * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual): 'postgres',
 				connectionString: env.BOTCOM_POSTGRES_CONNECTION_STRING,
 				application_name: this.slotName,
 			},
-			/**
-			 * Logical replication service config
-			 * https://github.com/kibae/pg-logical-replication/blob/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual): {
 					auto: false,
@@ -231,55 +193,45 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			}
 		)
 
-		this.alarm()
-		this.ctx
-			.blockConcurrencyWhile(async () => {
-				await this._migrate().catch((e) => {
-					this.captureException(e)
-					throw e
-				})
-				// if the slot name changed, we set the lsn to null, which will trigger a mass user DO reboot
-				if (this.sqlite.exec('select slotName from meta').one().slotName !== this.slotName) {
-					this.sqlite.exec('UPDATE meta SET slotName = ?, lsn = null', this.slotName)
-				}
-				await sql`SELECT pg_create_logical_replication_slot(${this.slotName}, 'wal2json') WHERE NOT EXISTS (SELECT 1 FROM pg_replication_slots WHERE slot_name = ${this.slotName})`.execute(
-					this.db
-				)
-				this.pruneHistory()
-			})
-			.then(() => {
-				this.reboot('constructor', false).catch((e) => {
-					this.captureException(e)
-					this.__test__panic()
-				})
+		this.ctx.blockConcurrencyWhile(async () => {
+			await this._migrate().catch((e) => {
+				this.captureException(e)
+				throw e
 			})
-		// no need to catch since throwing in a blockConcurrencyWhile will trigger
-		// a DO reboot
-	}
+			if (
+				this.sqlite.exec('select slotName from meta').one().slotName !==
+				this.slotName
+			) {
+				this.sqlite.exec('UPDATE meta SET slotName = ?, lsn = null', this.slotName)
+			}
+			await sql`
+				SELECT pg_create_logical_replication_slot(
+					${this.slotName},
+					'wal2json'
+				) WHERE NOT EXISTS (
+					SELECT 1 FROM pg_replication_slots WHERE slot_name = ${this.slotName}
+				)
+			`.execute(this.db)
+			this.pruneHistory()
+		})
 
-	private _applyMigration(index: number) {
-		this.log.debug('running migration', migrations[index].id)
-		this.sqlite.exec(migrations[index].code)
-		this.sqlite.exec(
-			'insert into migrations (id, code) values (?, ?)',
-			migrations[index].id,
-			migrations[index].code
-		)
-		this.log.debug('ran migration', migrations[index].id)
+		this.alarm()
+		this.reboot('constructor', false).catch((e) => {
+			this.captureException(e)
+			this.__test__panic()
+		})
 	}
 
 	private async _migrate() {
 		let appliedMigrations: Migration[]
 		try {
-			appliedMigrations = this.sqlite
+			appliedMigrations = (this.sqlite
 				.exec('select code, id from migrations order by id asc')
-				.toArray() as any
-		} catch (_e) {
-			// no migrations table, run initial migration
+				.toArray() as any) as Migration[]
+		} catch {
 			this._applyMigration(0)
 			appliedMigrations = [migrations[0]]
 		}
-
 		for (let i = 0; i < appliedMigrations.length; i++) {
 			if (appliedMigrations[i].id !== migrations[i].id) {
 				throw new Error(
@@ -287,31 +239,30 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				)
 			}
 		}
-
 		for (let i = appliedMigrations.length; i < migrations.length; i++) {
 			this._applyMigration(i)
 		}
 	}
 
-	async __test__forceReboot() {
-		this.reboot('test')
-	}
-
-	async __test__panic() {
-		this.ctx.abort()
+	private _applyMigration(index: number) {
+		this.log.debug('running migration', migrations[index].id)
+		this.sqlite.exec(migrations[index].code)
+		this.sqlite.exec(
+			'insert into migrations (id, code) values (?, ?)',
+			migrations[index].id,
+			migrations[index].code
+		)
+		this.log.debug('ran migration', migrations[index].id)
 	}
 
 	override async alarm() {
 		try {
 			this.ctx.storage.setAlarm(Date.now() + 3000)
 			this.maybeLogRpm()
-			// If we haven't heard anything from postgres for 5 seconds, trigger a heartbeat.
-			// Otherwise, if we haven't heard anything for 10 seconds, do a soft reboot.
 			if (Date.now() - this.lastPostgresMessageTime > 10000) {
 				this.log.debug('rebooting due to inactivity')
 				this.reboot('inactivity')
 			} else if (Date.now() - this.lastPostgresMessageTime > 5000) {
-				// this triggers a heartbeat
 				this.log.debug('triggering heartbeat due to inactivity')
 				await this.replicationService.acknowledge('0/0')
 			}
@@ -324,14 +275,10 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private async maybePrune() {
 		const now = Date.now()
 		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
-		this.logEvent({ type: 'prune' })
-		this.log.debug('pruning')
 		const cutoffTime = now - PRUNE_INTERVAL
-		const usersWithoutRecentUpdates = this.ctx.storage.sql
+		const usersWithoutRecentUpdates = this.sqlite
 			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
-			.toArray() as {
-			id: string
-		}[]
+			.toArray() as { id: string }[]
 		for (const { id } of usersWithoutRecentUpdates) {
 			await this.unregisterUser(id)
 		}
@@ -361,32 +308,23 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
-		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
+	async __test__forceReboot() {
+		this.reboot('test')
 	}
 
-	private queue = new ExecutionQueue()
+	async __test__panic() {
+		this.ctx.abort()
+	}
 
-	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
+	private async reboot(
+		source: TLPostgresReplicatorRebootSource,
+		delay = true
+	) {
 		this.logEvent({ type: 'reboot', source })
 		if (!this.queue.isEmpty()) {
 			this.log.debug('reboot is already in progress.', source)
 			return
 		}
-		this.log.debug('reboot push', source)
 		await this.queue.push(async () => {
 			if (delay) {
 				await sleep(2000)
@@ -398,15 +336,16 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				sleep(3000).then(() => 'timeout'),
 			]).catch((e) => {
 				this.logEvent({ type: 'reboot_error' })
-				this.log.debug('reboot error', e.stack)
+				this.log.debug('reboot error', (e as any).stack)
 				this.captureException(e)
 				return 'error'
 			})
-			this.log.debug('rebooted', res)
 			if (res === 'ok') {
-				this.logEvent({ type: 'reboot_duration', duration: Date.now() - start })
+				this.logEvent({
+					type: 'reboot_duration',
+					duration: Date.now() - start,
+				})
 			} else {
-				getStatsDurableObjct(this.env).recordReplicatorBootRetry()
 				this.reboot('retry')
 			}
 		})
@@ -416,53 +355,43 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		this.log.debug('booting')
 		this.lastPostgresMessageTime = Date.now()
 		this.replicationService.removeAllListeners()
-
-		// stop any previous subscriptions both here and on the postgres side to make sure we will be allowed to connect
-		// to the slot again.
 		this.log.debug('stopping replication')
 		this.replicationService.stop().catch(this.captureException)
 		this.log.debug('terminating backend')
-		await sql`SELECT pg_terminate_backend(active_pid) FROM pg_replication_slots WHERE slot_name = ${this.slotName} AND active`.execute(
-			this.db
-		)
+		await sql`
+      SELECT pg_terminate_backend(active_pid)
+      FROM pg_replication_slots
+      WHERE slot_name = ${this.slotName} AND active
+    `.execute(this.db)
 		this.log.debug('done')
 
 		const promise = 'promise' in this.state ? this.state.promise : promiseWithResolve()
 		this.state = {
 			type: 'connecting',
-			// preserve the promise so any awaiters do eventually get resolved
-			// TODO: set a timeout on the promise?
 			promise,
 		}
-
 		this.replicationService.on('heartbeat', (lsn: string) => {
-			this.log.debug('heartbeat', lsn)
 			this.lastPostgresMessageTime = Date.now()
 			this.reportPostgresUpdate()
-			// don't call this.updateLsn here because it's not necessary
-			// to save the lsn after heartbeats since they contain no information
 			this.replicationService.acknowledge(lsn).catch(this.captureException)
 		})
-
-		this.replicationService.addListener('data', (lsn: string, log: Wal2Json.Output) => {
-			// ignore events received after disconnecting, if that can even happen
+		this.replicationService.addListener('data', (lsn, log) => {
 			try {
 				if (this.state.type !== 'connected') return
-				this.postgresUpdates++
-				this.lastPostgresMessageTime = Date.now()
-				this.reportPostgresUpdate()
 				const collator = new UserChangeCollator()
 				for (const _change of log.change) {
-					if (_change.kind === 'message' && (_change as any).prefix === 'requestLsnUpdate') {
-						this.requestLsnUpdate((_change as any).content)
+					if (
+						(_change as any).kind === 'message' &&
+						(_change as any).prefix === 'requestLsnUpdate'
+					) {
+						this.requestLsnUpdate((_change as any).content as string)
 						continue
 					}
-					const change = this.parseChange(_change)
+					const change = this.parseChange(_change as Wal2Json.Change)
 					if (!change) {
 						this.log.debug('IGNORING CHANGE', _change)
 						continue
 					}
-
 					this.handleEvent(collator, change, false)
 					this.sqlite.exec(
 						'INSERT INTO history (lsn, userId, fileId, json, timestamp) VALUES (?, ?, ?, ?, ?)',
@@ -482,13 +411,14 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				this.captureException(e)
 			}
 		})
-
 		this.replicationService.addListener('start', () => {
 			if (!this.getCurrentLsn()) {
-				// make a request to force an updateLsn()
-				sql`insert into replicator_boot_id ("replicatorId", "bootId") values (${this.ctx.id.toString()}, ${uniqueId()}) on conflict ("replicatorId") do update set "bootId" = excluded."bootId"`.execute(
-					this.db
-				)
+				sql`
+          INSERT INTO replicator_boot_id ("replicatorId", "bootId")
+          VALUES (${this.ctx.id.toString()}, ${uniqueId()})
+          ON CONFLICT ("replicatorId") DO UPDATE
+            SET "bootId" = excluded."bootId"
+        `.execute(this.db)
 			}
 		})
 
@@ -496,9 +426,10 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			this.captureException(e)
 			this.reboot('retry')
 		}
-
 		this.replicationService.on('error', handleError)
-		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(handleError)
+		this.replicationService
+			.subscribe(this.wal2jsonPlugin, this.slotName)
+			.catch(handleError)
 
 		this.state = {
 			type: 'connected',
@@ -513,9 +444,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private async commitLsn(lsn: string) {
 		const result = await this.replicationService.acknowledge(lsn)
 		if (result) {
-			// if the current lsn in the meta table is null it means
-			// that we are using a brand new replication slot and we
-			// need to force all user DOs to reboot
 			const prevLsn = this.getCurrentLsn()
 			this.sqlite.exec('UPDATE meta SET lsn = ?', lsn)
 			if (!prevLsn) {
@@ -527,28 +455,36 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
+	private onDidSequenceBreak() {
+		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
+		const BATCH_SIZE = 5
+		const tick = () => {
+			if (users.length === 0) return
+			const batch = users.splice(0, BATCH_SIZE)
+			for (const user of batch) {
+				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
+			}
+			setTimeout(tick, 10)
+		}
+		tick()
+	}
+
 	private parseChange(change: Wal2Json.Change): Change | null {
 		const table = change.table as ReplicationEvent['table']
 		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
 			return null
 		}
-
 		const row = {} as any
 		const previous = {} as any
-		// take everything from change.columnnames and associated the values from change.columnvalues
 		if (change.kind === 'delete') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
+			const oldkeys = change.oldkeys!
 			oldkeys.keynames.forEach((key, i) => {
-				row[key] = oldkeys.keyvalues[i]
+				row[key] = oldkeys.keyvalues![i]
 			})
 		} else if (change.kind === 'update') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
+			const oldkeys = change.oldkeys!
 			oldkeys.keynames.forEach((key, i) => {
-				previous[key] = oldkeys.keyvalues[i]
+				previous[key] = oldkeys.keyvalues![i]
 			})
 			change.columnnames.forEach((col, i) => {
 				row[col] = change.columnvalues[i]
@@ -559,8 +495,8 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			})
 		}
 
-		let userId = null as string | null
-		let fileId = null as string | null
+		let userId: string | null = null
+		let fileId: string | null = null
 		switch (table) {
 			case 'user':
 				userId = (row as TlaUser).id
@@ -574,112 +510,63 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				fileId = (row as TlaFileState).fileId
 				break
 			case 'user_mutation_number':
-				userId = (row as { userId: string }).userId
+				userId = (row as any).userId
 				break
-			default: {
-				// assert never
+			default:
 				const _x: never = table
-			}
 		}
-
 		if (!userId) return null
-
-		return {
-			row,
-			previous,
-			event: {
-				command: change.kind,
-				table,
-			},
-			userId,
-			fileId,
-		}
-	}
-
-	private onDidSequenceBreak() {
-		// re-register all active users to get their latest guest info
-		// do this in small batches to avoid overwhelming the system
-		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
-		this.reportActiveUsers()
-		const BATCH_SIZE = 5
-		const tick = () => {
-			if (users.length === 0) return
-			const batch = users.splice(0, BATCH_SIZE)
-			for (const user of batch) {
-				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
-			}
-			setTimeout(tick, 10)
-		}
-		tick()
+		return { row, previous, event: { command: change.kind, table }, userId, fileId }
 	}
 
-	private reportPostgresUpdate = throttle(
-		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
-		5000
-	)
-
 	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
-		// ignore events received after disconnecting, if that can even happen
-		if (this.state.type !== 'connected') return
-
-		// We shouldn't get these two, but just to be sure we'll filter them out
 		const { command, table } = change.event
 		this.log.debug('handleEvent', change)
-		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
-		try {
-			switch (table) {
-				case 'user_mutation_number':
-					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
-					break
-				case 'file_state':
-					this.handleFileStateEvent(collator, change.row, { command, table })
-					break
-				case 'file':
-					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
-					break
-				case 'user':
-					this.handleUserEvent(collator, change.row, { command, table })
-					break
-				default: {
-					const _x: never = table
-					this.captureException(new Error(`Unhandled table: ${table}`), { change })
-					break
-				}
-			}
-		} catch (e) {
-			this.captureException(e)
+		switch (table) {
+			case 'user_mutation_number':
+				this.handleMutationConfirmationEvent(collator, change.row, change.event)
+				break
+			case 'file_state':
+				this.handleFileStateEvent(collator, change.row, change.event)
+				break
+			case 'file':
+				this.handleFileEvent(collator, change.row, change.previous, change.event, isReplay)
+				break
+			case 'user':
+				this.handleUserEvent(collator, change.row, change.event)
+				break
+			default:
+				const _x: never = table
+				this.captureException(new Error(`Unhandled table: ${table}`), { change })
+				break
 		}
 	}
 
 	private handleMutationConfirmationEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: Row,
 		event: ReplicationEvent
 	) {
 		if (event.command === 'delete') return
-		assert(row && 'mutationNumber' in row, 'mutationNumber is required')
 		collator.addChange(row.userId, {
 			type: 'mutation_commit',
-			mutationNumber: row.mutationNumber,
+			mutationNumber: (row as any).mutationNumber,
 			userId: row.userId,
 		})
 	}
 
 	private handleFileStateEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: Row,
 		event: ReplicationEvent
 	) {
-		assert(row && 'userId' in row && 'fileId' in row, 'userId is required')
 		if (!this.userIsActive(row.userId)) return
 		if (event.command === 'insert') {
-			if (!row.isFileOwner) {
-				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
-					row.userId,
-					row.fileId
-				)
-			}
+			this.sqlite.exec(
+				`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+				row.userId,
+				row.fileId
+			)
 		} else if (event.command === 'delete') {
 			this.sqlite.exec(
 				`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
@@ -698,12 +585,12 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 	private handleFileEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: Row,
 		previous: Row | undefined,
 		event: ReplicationEvent,
 		isReplay: boolean
 	) {
-		assert(row && 'id' in row && 'ownerId' in row, 'row id is required')
+		assert('id' in row && 'ownerId' in row, 'row id is required')
 		const impactedUserIds = [
 			row.ownerId,
 			...this.sqlite
@@ -711,25 +598,25 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				.toArray()
 				.map((x) => x.userId as string),
 		]
-		// if the file state was deleted before the file, we might not have any impacted users
 		if (event.command === 'delete') {
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidDelete(row)
 			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, row.id)
 		} else if (event.command === 'update') {
-			assert('ownerId' in row, 'ownerId is required when updating file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
 			if (previous && !isReplay) {
 				const prevFile = previous as TlaFile
-				if (row.published && !(prevFile as TlaFile).published) {
+				if (row.published && !prevFile.published) {
 					this.publishSnapshot(row)
-				} else if (!row.published && (prevFile as TlaFile).published) {
+				} else if (!row.published && prevFile.published) {
 					this.unpublishSnapshot(row)
-				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
+				} else if (
+					row.published &&
+					row.lastPublished > (previous as TlaFile).lastPublished
+				) {
 					this.publishSnapshot(row)
 				}
 			}
 		} else if (event.command === 'insert') {
-			assert('ownerId' in row, 'ownerId is required when inserting file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
 		}
 		for (const userId of impactedUserIds) {
@@ -743,9 +630,12 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	private handleUserEvent(collator: UserChangeCollator, row: Row | null, event: ReplicationEvent) {
-		assert(row && 'id' in row, 'user id is required')
-		this.log.debug('USER EVENT', event.command, row.id)
+	private handleUserEvent(
+		collator: UserChangeCollator,
+		row: Row,
+		event: ReplicationEvent
+	) {
+		assert('id' in row, 'user id is required')
 		collator.addChange(row.id, {
 			type: 'row_update',
 			row: row as any,
@@ -753,19 +643,32 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			event: event.command,
 			userId: row.id,
 		})
-		return [row.id]
 	}
 
 	private userIsActive(userId: string) {
-		return this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length > 0
+		return (
+			this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length >
+			0
+		)
 	}
 
-	async ping() {
-		this.log.debug('ping')
-		return { sequenceId: this.slotName }
+	async requestLsnUpdate(userId: string) {
+		try {
+			this.log.debug('requestLsnUpdate', userId)
+			this.logEvent({ type: 'request_lsn_update' })
+			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
+			this._messageUser(userId, { type: 'changes', changes: [], lsn })
+		} catch (e) {
+			this.captureException(e)
+			throw e
+		}
+		return
 	}
 
-	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
+	private async _messageUser(
+		userId: string,
+		event: ZReplicationEventWithoutSequenceInfo
+	) {
 		this.log.debug('messageUser', userId, event)
 		if (!this.userIsActive(userId)) {
 			this.log.debug('user is not active', userId)
@@ -777,6 +680,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				q = new ExecutionQueue()
 				this.userDispatchQueues.set(userId, q)
 			}
+
 			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
 				.exec(
 					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
@@ -789,7 +693,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 			await q.push(async () => {
 				const user = getUserDurableObject(this.env, userId)
-
 				const res = await user.handleReplicationEvent({
 					...event,
 					sequenceNumber,
@@ -805,38 +708,87 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
+	async registerUser({
+		userId,
+		lsn,
+		guestFileIds,
+		bootId,
+	}: {
+		userId: string
+		lsn: string
+		guestFileIds: string[]
+		bootId: string
+	}): Promise<
+		| { type: 'done'; sequenceId: string; sequenceNumber: number }
+		| { type: 'reboot' }
+	> {
+		while (!this.getCurrentLsn()) {
+			await sleep(100)
+		}
+		this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
+		this.logEvent({ type: 'register_user' })
+
+		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+		this.sqlite.exec(
+			`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
+			userId,
+			bootId,
+			Date.now()
+		)
+		this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
+		for (const fileId of guestFileIds) {
+			this.sqlite.exec(
+				`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+				userId,
+				fileId
+			)
+		}
+		this.reportActiveUsers()
+		this.log.debug('inserted active user')
+
+		const resume = this.getResumeType(lsn, userId, guestFileIds)
+		if (resume.type === 'reboot') {
+			return { type: 'reboot' }
+		}
+		if (resume.messages) {
+			for (const message of resume.messages) {
+				this._messageUser(userId, message)
+			}
+		}
+
+		return {
+			type: 'done',
+			sequenceId: this.slotName + bootId,
+			sequenceNumber: 0,
 		}
 	}
 
+	async unregisterUser(userId: string) {
+		this.logEvent({ type: 'unregister_user' })
+		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+		this.userDispatchQueues.get(userId)?.close()
+		this.reportActiveUsers()
+	}
+
 	private getResumeType(
 		lsn: string,
 		userId: string,
 		guestFileIds: string[]
-	): { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] } | { type: 'reboot' } {
-		const currentLsn = assertExists(this.getCurrentLsn())
-
+	):
+		| { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] }
+		| { type: 'reboot' } {
+		const currentLsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
 		if (lsn >= currentLsn) {
 			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', currentLsn)
-			// targetLsn is now or in the future, we can register them and deliver events
-			// without needing to check the history
 			return { type: 'done' }
 		}
 		const earliestLsn = this.sqlite
-			.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid asc LIMIT 1')
+			.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid ASC LIMIT 1')
 			.toArray()[0]?.lsn
-
 		if (!earliestLsn || lsn < earliestLsn) {
 			this.log.debug('getResumeType: not enough history', lsn, '<', earliestLsn)
-			// not enough history, we can't resume
 			return { type: 'reboot' }
 		}
-
 		const history = this.sqlite
 			.exec<{ json: string; lsn: string }>(
 				`
@@ -846,7 +798,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			  lsn > ?
 				AND (
 				  userId = ? 
-					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 1)).join(', ')})
+					OR fileId IN (${guestFileIds.map((_, i) => `$${i + 1}`).join(', ')})
 				)
 			ORDER BY rowid ASC
 		`,
@@ -878,71 +830,24 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		return { type: 'done', messages }
 	}
 
-	async registerUser({
-		userId,
-		lsn,
-		guestFileIds,
-		bootId,
-	}: {
-		userId: string
-		lsn: string
-		guestFileIds: string[]
-		bootId: string
-	}): Promise<{ type: 'done'; sequenceId: string; sequenceNumber: number } | { type: 'reboot' }> {
-		try {
-			while (!this.getCurrentLsn()) {
-				// this should only happen once per slot name change, which should never happen!
-				await sleep(100)
-			}
-
-			this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
-			this.logEvent({ type: 'register_user' })
-
-			// clear user and subscriptions
-			this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
-			this.sqlite.exec(
-				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
-				userId,
-				bootId,
-				Date.now()
-			)
-
-			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
-			for (const fileId of guestFileIds) {
-				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
-					userId,
-					fileId
-				)
-			}
-			this.log.debug('inserted file subscriptions', guestFileIds.length)
-
-			this.reportActiveUsers()
-			this.log.debug('inserted active user')
-
-			const resume = this.getResumeType(lsn, userId, guestFileIds)
-			if (resume.type === 'reboot') {
-				return { type: 'reboot' }
-			}
-
-			if (resume.messages) {
-				for (const message of resume.messages) {
-					this._messageUser(userId, message)
-				}
-			}
-
-			return {
-				type: 'done',
-				sequenceId: this.slotName + bootId,
-				sequenceNumber: 0,
-			}
-		} catch (e) {
-			this.captureException(e)
-			throw e
+	async getDiagnostics() {
+		const earliestHistoryRow = this.sqlite
+			.exec('SELECT * FROM history ORDER BY rowid ASC LIMIT 1')
+			.toArray()[0]
+		const latestHistoryRow = this.sqlite
+			.exec('SELECT * FROM history ORDER BY rowid DESC LIMIT 1')
+			.toArray()[0]
+		const activeUsers = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one().count as number
+		const meta = this.sqlite.exec('SELECT * FROM meta').one()
+		return {
+			earliestHistoryRow,
+			latestHistoryRow,
+			activeUsers,
+			meta,
 		}
 	}
 
-	private async requestLsnUpdate(userId: string) {
+	async requestLsnUpdate(userId: string) {
 		try {
 			this.log.debug('requestLsnUpdate', userId)
 			this.logEvent({ type: 'request_lsn_update' })
@@ -955,19 +860,76 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		return
 	}
 
-	async unregisterUser(userId: string) {
-		this.logEvent({ type: 'unregister_user' })
-		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
-		this.reportActiveUsers()
-		const queue = this.userDispatchQueues.get(userId)
-		if (queue) {
-			queue.close()
-			this.userDispatchQueues.delete(userId)
+	async getFileRecord(fileId: string) {
+		this.logEvent({ type: 'get_file_record' })
+		await this.waitUntilConnected()
+		const res = await sql`SELECT * FROM public.file WHERE id = ${fileId}`.execute(this.db)
+		return res.rows[0] as TlaFile | null
+	}
+
+	private publishSnapshot(file: TlaFile) {
+		getRoomDurableObject(this.env, file.id).awaitPersist().then(async () => {
+			const snapshot = await this.env.ROOMS.get(
+				getR2KeyForRoom({ slug: file.id, isApp: true })
+			)
+			if (!snapshot) {
+				throw new Error('Snapshot not found')
+			}
+			const blob = await snapshot.blob()
+			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
+			await this.env.ROOM_SNAPSHOTS.put(
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
+				blob
+			)
+			const currentTime = new Date().toISOString()
+			await this.env.ROOM_SNAPSHOTS.put(
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
+				blob
+			)
+		}).catch((e) => {
+			this.log.debug('Error publishing snapshot', e)
+		})
+	}
+
+	private unpublishSnapshot(file: TlaFile) {
+		getRoomDurableObject(this.env, file.id)
+			.appFileRecordDidUnpublish?.(file.publishedSlug)
+		this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug).catch((e) => {
+			this.log.debug('Error unpublishing snapshot', e)
+		})
+		this.env.ROOM_SNAPSHOTS
+			.delete(getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }))
+			.catch((e) => {
+				this.log.debug('Error deleting published snapshot', e)
+			})
+	}
+
+	ping() {
+		this.log.debug('ping')
+		return { sequenceId: this.slotName }
+	}
+
+	private async waitUntilConnected() {
+		while (this.state.type !== 'connected') {
+			await this.state.promise
+		}
+	}
+
+	private reportActiveUsers() {
+		try {
+			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
+			this.logEvent({ type: 'active_users', count: count as number })
+		} catch (e) {
+			this.captureException(e)
 		}
 	}
 
 	private writeEvent(eventData: EventData) {
-		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
+		try {
+			writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
+		} catch {
+			// swallow
+		}
 	}
 
 	logEvent(event: TLPostgresReplicatorEvent) {
@@ -985,7 +947,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 					blobs: [event.type],
 				})
 				break
-
 			case 'reboot_duration':
 				this.writeEvent({
 					blobs: [event.type],
@@ -1008,45 +969,4 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				exhaustiveSwitchError(event)
 		}
 	}
-
-	private async publishSnapshot(file: TlaFile) {
-		try {
-			// make sure the room's snapshot is up to date
-			await getRoomDurableObject(this.env, file.id).awaitPersist()
-			// and that it exists
-			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
-
-			if (!snapshot) {
-				throw new Error('Snapshot not found')
-			}
-			const blob = await snapshot.blob()
-
-			// Create a new slug for the published room
-			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
-
-			// Bang the snapshot into the database
-			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
-				blob
-			)
-			const currentTime = new Date().toISOString()
-			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
-				blob
-			)
-		} catch (e) {
-			this.log.debug('Error publishing snapshot', e)
-		}
-	}
-
-	private async unpublishSnapshot(file: TlaFile) {
-		try {
-			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug)
-			await this.env.ROOM_SNAPSHOTS.delete(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true })
-			)
-		} catch (e) {
-			this.log.debug('Error unpublishing snapshot', e)
-		}
-	}
 }
\ No newline at end of file
