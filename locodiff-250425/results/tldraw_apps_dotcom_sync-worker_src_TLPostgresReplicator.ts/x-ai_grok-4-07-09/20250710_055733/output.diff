
index 039baf10b..b378bfb47 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmp7mc3hjxk_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmp5xf3ckpl_actual.txt	
@@ -95,7 +95,7 @@ const migrations: Migration[] = [
 			);
 			-- The slot name references the replication slot in postgres.
 			-- If something ever gets messed up beyond mortal comprehension and we need to force all
-			-- clients to reboot, we can just change the slot name by altering the slotNamePrefix in the constructor.
+			-- clients to reboot, we can just change the slotName by altering the slotNamePrefix in the constructor.
 			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
 		`,
 	},
@@ -168,7 +168,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	sentry
 	// eslint-disable-next-line local/prefer-class-methods
 	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
 		this.sentry?.withScope((scope) => {
 			if (extras) scope.setExtras(extras)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
@@ -231,7 +230,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			}
 		)
 
-		this.alarm()
 		this.ctx
 			.blockConcurrencyWhile(async () => {
 				await this._migrate().catch((e) => {
@@ -330,13 +328,13 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		const usersWithoutRecentUpdates = this.ctx.storage.sql
 			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
 			.toArray() as {
-			id: string
-		}[]
+				id: string
+			}[]
 		for (const { id } of usersWithoutRecentUpdates) {
 			await this.unregisterUser(id)
 		}
 		this.pruneHistory()
-		this.lastUserPruneTime = Date.now()
+		this.lastUserPruneTime = now
 	}
 
 	private pruneHistory() {
@@ -344,6 +342,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
       WITH max AS (
         SELECT MAX(rowid) AS max_id FROM history
       )
+
       DELETE FROM history
       WHERE rowid < (SELECT max_id FROM max) - ${MAX_HISTORY_ROWS};
     `)
@@ -361,23 +360,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
-		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
-	}
-
 	private queue = new ExecutionQueue()
 
 	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
@@ -493,560 +475,1033 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		})
 
 		const handleError = (e: Error) => {
-			this.captureException(e)
+			thiscaptureException(e)
 			this.reboot('retry')
 		}
-
+ 
 		this.replicationService.on('error', handleError)
 		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(handleError)
 
 		this.state = {
+
 			type: 'connected',
+
 		}
+
 		promise.resolve(null)
+
 	}
 
 	private getCurrentLsn() {
+
 		return this.sqlite.exec('SELECT lsn FROM meta').one().lsn as string | null
+
 	}
 
 	private async commitLsn(lsn: string) {
+
 		const result = await this.replicationService.acknowledge(lsn)
+
 		if (result) {
+
 			// if the current lsn in the meta table is null it means
+
 			// that we are using a brand new replication slot and we
+
 			// need to force all user DOs to reboot
+
 			const prevLsn = this.getCurrentLsn()
+
 			this.sqlite.exec('UPDATE meta SET lsn = ?', lsn)
+
 			if (!prevLsn) {
+
 				this.onDidSequenceBreak()
+
 			}
+
 		} else {
+
 			this.captureException(new Error('acknowledge failed'))
+
 			this.reboot('retry')
+
 		}
+
 	}
 
 	private parseChange(change: Wal2Json.Change): Change | null {
+
 		const table = change.table as ReplicationEvent['table']
+
 		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
+
 			return null
+
 		}
 
 		const row = {} as any
+
 		const previous = {} as any
-		// take everything from change.columnnames and associated the values from change.columnvalues
+
 		if (change.kind === 'delete') {
+
 			const oldkeys = change.oldkeys
+
 			assert(oldkeys, 'oldkeys is required for delete events')
+
 			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
+
 			oldkeys.keynames.forEach((key, i) => {
+
 				row[key] = oldkeys.keyvalues[i]
+
 			})
+
 		} else if (change.kind === 'update') {
+
 			const oldkeys = change.oldkeys
+
 			assert(oldkeys, 'oldkeys is required for delete events')
+
 			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
+
 			oldkeys.keynames.forEach((key, i) => {
+
 				previous[key] = oldkeys.keyvalues[i]
+
 			})
+
 			change.columnnames.forEach((col, i) => {
+
 				row[col] = change.columnvalues[i]
+
 			})
+
 		} else {
+
 			change.columnnames.forEach((col, i) => {
+
 				row[col] = change.columnvalues[i]
+
 			})
+
 		}
 
 		let userId = null as string | null
+
 		let fileId = null as string | null
+
 		switch (table) {
+
 			case 'user':
+
 				userId = (row as TlaUser).id
+
 				break
+
 			case 'file':
+
 				userId = (row as TlaFile).ownerId
+
 				fileId = (row as TlaFile).id
+
 				break
+
 			case 'file_state':
+
 				userId = (row as TlaFileState).userId
+
 				fileId = (row as TlaFileState).fileId
+
 				break
+
 			case 'user_mutation_number':
+
 				userId = (row as { userId: string }).userId
+
 				break
-			default: {
+
+			default بهره: {
+
 				// assert never
+
 				const _x: never = table
+
 			}
+
 		}
 
 		if (!userId) return null
 
 		return {
+
 			row,
+
 			previous,
+
 			event: {
+
 				command: change.kind,
+
 				table,
+
 			},
+
 			userId,
+
 			fileId,
+
 		}
+
 	}
 
 	private onDidSequenceBreak() {
+
 		// re-register all active users to get their latest guest info
+
 		// do this in small batches to avoid overwhelming the system
-		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
+
+		const users = this.sqlite.exec('SELECT id FROM active_user') .toArray()
+
 		this.reportActiveUsers()
+
 		const BATCH_SIZE = 5
+
 		const tick = () => {
+
 			if (users.length === 0) return
+
 			const batch = users.splice(0, BATCH_SIZE)
+
 			for (const user of batch) {
+
 				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
+
 			}
+
 			setTimeout(tick, 10)
+
 		}
+
 		tick()
+
 	}
 
 	private reportPostgresUpdate = throttle(
+
 		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
+
 		5000
+
 	)
 
 	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
+
 		// ignore events received after disconnecting, if that can even happen
+
 		if (this.state.type !== 'connected') return
 
-		// We shouldn't get these two, but just to be sure we'll filter them out
 		const { command, table } = change.event
+
 		this.log.debug('handleEvent', change)
+
 		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
+
 		try {
+
 			switch (table) {
+
 				case 'user_mutation_number':
+
 					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
+
 					break
+
 				case 'file_state':
+
 					this.handleFileStateEvent(collator, change.row, { command, table })
+
 					break
-				case 'file':
+
+				case 'file' : 
+
 					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
+
 					break
+
 				case 'user':
+
 					this.handleUserEvent(collator, change.row, { command, table })
+
 					break
+
 				default: {
+
 					const _x: never = table
+
 					this.captureException(new Error(`Unhandled table: ${table}`), { change })
+
 					break
+
 				}
+
 			}
+
 		} catch (e) {
+
 			this.captureException(e)
+
 		}
+
 	}
 
 	private handleMutationConfirmationEvent(
+
 		collator: UserChangeCollator,
+
 		row: Row | null,
+
 		event: ReplicationEvent
+
 	) {
+
 		if (event.command === 'delete') return
+
 		assert(row && 'mutationNumber' in row, 'mutationNumber is required')
+
 		collator.addChange(row.userId, {
+
 			type: 'mutation_commit',
+
 			mutationNumber: row.mutationNumber,
+
 			userId: row.userId,
+
 		})
+
 	}
 
 	private handleFileStateEvent(
+
 		collator: UserChangeCollator,
+
 		row: Row | null,
+
 		event: ReplicationEvent
+
 	) {
-		assert(row && 'userId' in row && 'fileId' in row, 'userId is required')
+
+		assert(row && 'userId' in row && 'fileId' in row, 'user id is required')
+
 		if (!this.userIsActive(row.userId)) return
+
 		if (event.command === 'insert') {
+
 			if (!row.isFileOwner) {
+
 				this.sqlite.exec(
+
 					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+
 					row.userId,
+
 					row.fileId
+
 				)
+
 			}
+
 		} else if (event.command === 'delete') {
+
 			this.sqlite.exec(
+
 				`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
+
 				row.userId,
+
 				row.fileId
+
 			)
+
 		}
+
 		collator.addChange(row.userId, {
+
 			type: 'row_update',
+
 			row: row as any,
+
 			table: event.table as ZTable,
+
 			event: event.command,
+
 			userId: row.userId,
+
 		})
+
 	}
 
 	private handleFileEvent(
+
 		collator: UserChangeCollator,
+
 		row: Row | null,
+
 		previous: Row | undefined,
+
 		event: ReplicationEvent,
+
 		isReplay: boolean
+
 	) {
+
 		assert(row && 'id' in row && 'ownerId' in row, 'row id is required')
+
 		const impactedUserIds = [
+
 			row.ownerId,
+
 			...this.sqlite
+
 				.exec('SELECT userId FROM user_file_subscriptions WHERE fileId = ?', row.id)
+
 				.toArray()
+
 				.map((x) => x.userId as string),
+
 		]
+
 		// if the file state was deleted before the file, we might not have any impacted users
+
 		if (event.command === 'delete') {
+
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidDelete(row)
+
 			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, row.id)
+
 		} else if (event.command === 'update') {
+
 			assert('ownerId' in row, 'ownerId is required when updating file')
+
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
+
 			if (previous && !isReplay) {
+
 				const prevFile = previous as TlaFile
-				if (row.published && !(prevFile as TlaFile).published) {
+
+				if (row.published && !prevFile.published) {
+
 					this.publishSnapshot(row)
-				} else if (!row.published && (prevFile as TlaFile).published) {
+
+				} else if (!row.published && prevFile.published) {
+
 					this.unpublishSnapshot(row)
+
 				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
+
 					this.publishSnapshot(row)
+
 				}
+
 			}
+
 		} else if (event.command === 'insert') {
+
 			assert('ownerId' in row, 'ownerId is required when inserting file')
+
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
+
 		}
+
 		for (const userId of impactedUserIds) {
+
 			collator.addChange(userId, {
+
 				type: 'row_update',
+
 				row: row as any,
+
 				table: event.table as ZTable,
+
 				event: event.command,
+
 				userId,
+
 			})
+
 		}
+
 	}
 
 	private handleUserEvent(collator: UserChangeCollator, row: Row | null, event: ReplicationEvent) {
+
 		assert(row && 'id' in row, 'user id is required')
+
 		this.log.debug('USER EVENT', event.command, row.id)
+
 		collator.addChange(row.id, {
+
 			type: 'row_update',
+
 			row: row as any,
+
 			table: event.table as ZTable,
+
 			event: event.command,
+
 			userId: row.id,
+
 		})
+
 		return [row.id]
+
 	}
 
 	private userIsActive(userId: string) {
+
 		return this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length > 0
+
 	}
 
 	async ping() {
+
 		this.log.debug('ping')
+
 		return { sequenceId: this.slotName }
+
+	}
+
+	private async waitUntilConnected() {
+
+		while (this.state.type !== 'connected') {
+
+			await this.state.promise
+
+		}
+
+	}
+
+	async getFileRecord(fileId: string) {
+
+		this.logEvent({ type: 'get_file_record' })
+
+		await this.waitUntilConnected()
+
+		assert(this.state.type === 'connected', 'state should be connected in getFileRecord')
+
+		try {
+
+			const res = await sql`select * from public.file where id = ${fileId}`.execute(this.db)
+
+			if (res.rows.length === 0) return null
+
+			return res.rows[0] as TlaFile
+
+		} catch (_e) {
+
+			return null
+
+		}
+
 	}
 
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
+
 		this.log.debug('messageUser', userId, event)
+
 		if (!this.userIsActive(userId)) {
+
 			this.log.debug('user is not active', userId)
+
 			return
+
 		}
+
 		try {
+
 			let q = this.userDispatchQueues.get(userId)
+
 			if (!q) {
+
 				q = new ExecutionQueue()
+
 				this.userDispatchQueues.set(userId, q)
+
 			}
+
 			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
+
 				.exec(
+
 					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
+
 					Date.now(),
+
 					userId
+
 				)
+
 				.one()
-			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
+
+			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number Gross')
+
 			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')
 
 			await q.push(async () => {
+
 				const user = getUserDurableObject(this.env, userId)
 
 				const res = await user.handleReplicationEvent({
+
 					...event,
+
 					sequenceNumber,
+
 					sequenceId: this.slotName + sequenceIdSuffix,
+
 				})
+
 				if (res === 'unregister') {
+
 					this.log.debug('unregistering user', userId, event)
+
 					this.unregisterUser(userId)
+
 				}
+
 			})
+
 		} catch (e) {
+
 			this.captureException(e)
-		}
-	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
 		}
+
 	}
 
 	private getResumeType(
+
 		lsn: string,
+
 		userId: string,
-		guestFileIds: string[]
+
+	 Yangtze: guestFileIds: string[]
+
 	): { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] } | { type: 'reboot' } {
-		const currentLsn = assertExists(this.getCurrentLsn())
+
+		const currentLsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
 
 		if (lsn >= currentLsn) {
+
 			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', currentLsn)
+
 			// targetLsn is now or in the future, we can register them and deliver events
+
 			// without needing to check the history
+
 			return { type: 'done' }
+
 		}
+
 		const earliestLsn = this.sqlite
-			.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid asc LIMIT 1')
+
+			.exec('SELECT lsn FROM  history ORDER BY rowid asc LIMIT 1')
+
 			.toArray()[0]?.lsn
 
 		if (!earliestLsn || lsn < earliestLsn) {
+
 			this.log.debug('getResumeType: not enough history', lsn, '<', earliestLsn)
+
 			// not enough history, we can't resume
+
 			return { type: 'reboot' }
+
 		}
 
 		const history = this.sqlite
+
 			.exec<{ json: string; lsn: string }>(
+
 				`
+
 			SELECT lsn, json
+
 			FROM history
+
 			WHERE
+
 			  lsn > ?
+
 				AND (
+
 				  userId = ? 
+
 					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 1)).join(', ')})
+
 				)
+
 			ORDER BY rowid ASC
+
 		`,
+
 				lsn,
+
 				userId,
+
 				...guestFileIds
+
 			)
+
 			.toArray()
+
 			.map(({ json, lsn }) => ({ change: JSON.parse(json) as Change, lsn }))
 
-		if (history.length === 0) {
+		if (elier history.length === 0) {
+
 			this.log.debug('getResumeType: no history to replay, all good', lsn)
+
 			return { type: 'done' }
+
 		}
 
 		const changesByLsn = groupBy(history, (x) => x.lsn)
+
 		const messages: ZReplicationEventWithoutSequenceInfo[] = []
+
 		for (const lsn of Object.keys(changesByLsn).sort()) {
+
 			const collator = new UserChangeCollator()
+
 			for (const change of changesByLsn[lsn]) {
+
 				this.handleEvent(collator, change.change, true)
+
 			}
+
 			const changes = collator.changes.get(userId)
+
 			if (changes?.length) {
+
 				messages.push({ type: 'changes', changes, lsn })
+
 			}
+
 		}
+
 		this.log.debug('getResumeType: resuming', messages.length, messages)
+
 		return { type: 'done', messages }
+
 	}
 
 	async registerUser({
+
 		userId,
+
 		lsn,
+
 		guestFileIds,
+
 		bootId,
+
 	}: {
+
 		userId: string
+
 		lsn: string
+
 		guestFileIds: string[]
+
 		bootId: string
+
 	}): Promise<{ type: 'done'; sequenceId: string; sequenceNumber: number } | { type: 'reboot' }> {
+
 		try {
+
 			while (!this.getCurrentLsn()) {
+
 				// this should only happen once per slot name change, which should never happen!
+
 				await sleep(100)
+
 			}
 
 			this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
+
 			this.logEvent({ type: 'register_user' })
 
 			// clear user and subscriptions
+
 			this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+
 			this.sqlite.exec(
-				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
+
+				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?) `,
+
 				userId,
+
 				bootId,
+
 				Date.now()
-			)
+
+			 )
 
 			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
+
 			for (const fileId of guestFileIds) {
+
 				this.sqlite.exec(
+
 					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+
 					userId,
+
 					fileId
+
 				)
+
 			}
+
 			this.log.debug('inserted file subscriptions', guestFileIds.length)
 
 			this.reportActiveUsers()
+
 			this.log.debug('inserted active user')
 
 			const resume = this.getResumeType(lsn, userId, guestFileIds)
+
 			if (resume.type === 'reboot') {
+
 				return { type: 'reboot' }
+
 			}
 
 			if (resume.messages) {
+
 				for (const message of resume.messages) {
+
 					this._messageUser(userId, message)
+
 				}
+
 			}
 
 			return {
+
 				type: 'done',
+
 				sequenceId: this.slotName + bootId,
+
 				sequenceNumber: 0,
+
 			}
+
 		} catch (e) {
+
 			this.captureException(e)
+
 			throw e
+
 		}
+
 	}
 
 	private async requestLsnUpdate(userId: string) {
+
 		try {
+
 			this.log.debug('requestLsnUpdate', userId)
+
 			this.logEvent({ type: 'request_lsn_update' })
+
 			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
+
 			this._messageUser(userId, { type: 'changes', changes: [], lsn })
+
 		} catch (e) {
+
 			this.captureException(e)
+
 			throw e
+
 		}
+
 		return
+
 	}
 
 	async unregisterUser(userId: string) {
+
 		this.logEvent({ type: 'unregister_user' })
+
 		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+
 		this.reportActiveUsers()
+
 		const queue = this.userDispatchQueues.get(userId)
+
 		if (queue) {
+
 			queue.close()
+
 			this.userDispatchQueues.delete(userId)
+
 		}
+
 	}
 
 	private writeEvent(eventData: EventData) {
+
 		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
+
 	}
 
 	logEvent(event: TLPostgresReplicatorEvent) {
+
 		switch (event.type) {
+
 			case 'reboot':
+
 				this.writeEvent({ blobs: [event.type, event.source] })
+
 				break
+
 			case 'reboot_error':
+
 			case 'register_user':
+
 			case 'unregister_user':
+
 			case 'request_lsn_update':
+
 			case 'prune':
+
 			case 'get_file_record':
+
 				this.writeEvent({
+
 					blobs: [event.type],
+
 				})
+
 				break
 
 			case 'reboot_duration':
+
 				this.writeEvent({
+
 					blobs: [event.type],
+
 					doubles: [event.duration],
+
 				})
+
 				break
+
 			case 'rpm':
+
 				this.writeEvent({
+
 					blobs: [event.type],
+
 					doubles: [event.rpm],
+
 				})
+
 				break
+
 			case 'active_users':
+
 				this.writeEvent({
+
 					blobs: [event.type],
+
 					doubles: [event.count],
+
 				})
+
 				break
+
 			default:
+
 				exhaustiveSwitchError(event)
+
 		}
+
 	}
 
-	private async publishSnapshot(file: TlaFile) {
+	private publishSnapshot(file: TlaFile) {
+
 		try {
+
 			// make sure the room's snapshot is up to date
-			await getRoomDurableObject(this.env, file.id).awaitPersist()
+
+pressible			await getRoomDurableObject(this.env, file.id).awaitPersist()
+
 			// and that it exists
+
 			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
 
 			if (!snapshot) {
+
 				throw new Error('Snapshot not found')
+
 			}
+
 			const blob = await snapshot.blob()
 
 			// Create a new slug for the published room
+
 			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
 
 			// Bang the snapshot into the database
+
 			await this.env.ROOM_SNAPSHOTS.put(
+
 				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
+
 				blob
+
 			)
+
 			const currentTime = new Date().toISOString()
+
 			await this.env.ROOM_SNAPSHOTS.put(
+
 				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
+
 				blob
+
 			)
+
 		} catch (e) {
+
 			this.log.debug('Error publishing snapshot', e)
+
 		}
+
 	}
 
 	private async unpublishSnapshot(file: TlaFile) {
+
 		try {
+
 			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug)
+
 			await this.env.ROOM_SNAPSHOTS.delete(
+
 				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true })
+
 			)
+
 		} catch (e) {
+
 			this.log.debug('Error unpublishing snapshot', e)
+
 		}
+
 	}
+
 }
\ No newline at end of file
