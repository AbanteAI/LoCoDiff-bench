
index 039baf10b..4ba5da995 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmp2_s2xg8s_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmp0bf3fkah_actual.txt	
@@ -20,7 +20,6 @@ import { Logger } from './Logger'
 import { UserChangeCollator } from './UserChangeCollator'
 import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
 import { createPostgresConnectionPool } from './postgres'
-import { getR2KeyForRoom } from './r2'
 import {
 	Analytics,
 	Environment,
@@ -46,7 +45,6 @@ interface Change {
 	userId: string
 	fileId: string | null
 	row: TlaRow
-	previous?: TlaRow
 }
 
 interface Migration {
@@ -296,7 +294,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	async __test__forceReboot() {
 		this.reboot('test')
 	}
-
 	async __test__panic() {
 		this.ctx.abort()
 	}
@@ -333,7 +330,9 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			id: string
 		}[]
 		for (const { id } of usersWithoutRecentUpdates) {
-			await this.unregisterUser(id)
+			if (await getUserDurableObject(this.env, id).notActive()) {
+				await this.unregisterUser(id)
+			}
 		}
 		this.pruneHistory()
 		this.lastUserPruneTime = Date.now()
@@ -398,7 +397,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				sleep(3000).then(() => 'timeout'),
 			]).catch((e) => {
 				this.logEvent({ type: 'reboot_error' })
-				this.log.debug('reboot error', e.stack)
+				this.log.debug('reboot error', (e as any).stack)
 				this.captureException(e)
 				return 'error'
 			})
@@ -534,7 +533,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 
 		const row = {} as any
-		const previous = {} as any
 		// take everything from change.columnnames and associated the values from change.columnvalues
 		if (change.kind === 'delete') {
 			const oldkeys = change.oldkeys
@@ -543,16 +541,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 			oldkeys.keynames.forEach((key, i) => {
 				row[key] = oldkeys.keyvalues[i]
 			})
-		} else if (change.kind === 'update') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
-			oldkeys.keynames.forEach((key, i) => {
-				previous[key] = oldkeys.keyvalues[i]
-			})
-			change.columnnames.forEach((col, i) => {
-				row[col] = change.columnvalues[i]
-			})
 		} else {
 			change.columnnames.forEach((col, i) => {
 				row[col] = change.columnvalues[i]
@@ -586,7 +574,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 
 		return {
 			row,
-			previous,
 			event: {
 				command: change.kind,
 				table,
@@ -635,7 +622,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 					this.handleFileStateEvent(collator, change.row, { command, table })
 					break
 				case 'file':
-					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
+					this.handleFileEvent(collator, change.row, { command, table }, isReplay)
 					break
 				case 'user':
 					this.handleUserEvent(collator, change.row, { command, table })
@@ -699,7 +686,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	private handleFileEvent(
 		collator: UserChangeCollator,
 		row: Row | null,
-		previous: Row | undefined,
 		event: ReplicationEvent,
 		isReplay: boolean
 	) {
@@ -718,16 +704,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		} else if (event.command === 'update') {
 			assert('ownerId' in row, 'ownerId is required when updating file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
-			if (previous && !isReplay) {
-				const prevFile = previous as TlaFile
-				if (row.published && !(prevFile as TlaFile).published) {
-					this.publishSnapshot(row)
-				} else if (!row.published && (prevFile as TlaFile).published) {
-					this.unpublishSnapshot(row)
-				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
-					this.publishSnapshot(row)
-				}
-			}
 		} else if (event.command === 'insert') {
 			assert('ownerId' in row, 'ownerId is required when inserting file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
@@ -763,7 +739,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 	async ping() {
 		this.log.debug('ping')
 		return { sequenceId: this.slotName }
-	}
+ 	}
 
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
 		this.log.debug('messageUser', userId, event)
@@ -805,15 +781,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
-		}
-	}
-
 	private getResumeType(
 		lsn: string,
 		userId: string,
@@ -1008,45 +975,4 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 				exhaustiveSwitchError(event)
 		}
 	}
-
-	private async publishSnapshot(file: TlaFile) {
-		try {
-			// make sure the room's snapshot is up to date
-			await getRoomDurableObject(this.env, file.id).awaitPersist()
-			// and that it exists
-			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
-
-			if (!snapshot) {
-				throw new Error('Snapshot not found')
-			}
-			const blob = await snapshot.blob()
-
-			// Create a new slug for the published room
-			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
-
-			// Bang the snapshot into the database
-			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
-				blob
-			)
-			const currentTime = new Date().toISOString()
-			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
-				blob
-			)
-		} catch (e) {
-			this.log.debug('Error publishing snapshot', e)
-		}
-	}
-
-	private async unpublishSnapshot(file: TlaFile) {
-		try {
-			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug)
-			await this.env.ROOM_SNAPSHOTS.delete(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true })
-			)
-		} catch (e) {
-			this.log.debug('Error unpublishing snapshot', e)
-		}
-	}
 }
\ No newline at end of file
