
index 039baf10b..178a31f78 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmpbkhj4u29_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmpeq2hyeyc_actual.txt	
@@ -106,7 +106,8 @@ const migrations: Migration[] = [
 				lsn TEXT NOT NULL,
 				userId TEXT NOT NULL,
 				fileId TEXT,
-				json TEXT NOT NULL
+				json TEXT NOT NULL,
+				timestamp INTEGER NOT NULL DEFAULT 0
 			);
 			CREATE INDEX history_lsn_userId ON history (lsn, userId);
 			CREATE INDEX history_lsn_fileId ON history (lsn, fileId);
@@ -293,7 +294,7 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	async __test__forceReboot() {
+	__test__forceReboot() {
 		this.reboot('test')
 	}
 
@@ -361,23 +362,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
-		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
-	}
-
 	private queue = new ExecutionQueue()
 
 	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
@@ -527,6 +511,61 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
+	private onDidSequenceBreak() {
+		// re-register all active users to get their latest guest info
+		// do this in small batches to avoid overwhelming the system
+		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
+		this.reportActiveUsers()
+		const BATCH_SIZE = 5
+		const tick = () => {
+			if (users.length === 0) return
+			const batch = users.splice(0, BATCH_SIZE)
+			for (const user of batch) {
+				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
+			}
+			setTimeout(tick, 10)
+		}
+		tick()
+	}
+
+	private reportPostgresUpdate = throttle(
+		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
+		5000
+	)
+
+	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
+		// ignore events received after disconnecting, if that can even happen
+		if (this.state.type !== 'connected') return
+
+		// We shouldn't get these two, but just to be sure we'll filter them out
+		const { command, table } = change.event
+		this.log.debug('handleEvent', change)
+		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
+		try {
+			switch (table) {
+				case 'user_mutation_number':
+					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
+					break
+				case 'file_state':
+					this.handleFileStateEvent(collator, change.row, { command, table })
+					break
+				case 'file':
+					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
+					break
+				case 'user':
+					this.handleUserEvent(collator, change.row, { command, table })
+					break
+				default: {
+					const _x: never = table
+					this.captureException(new Error(`Unhandled table: ${table}`), { change })
+					break
+				}
+			}
+		} catch (e) {
+			this.captureException(e)
+		}
+	}
+
 	private parseChange(change: Wal2Json.Change): Change | null {
 		const table = change.table as ReplicationEvent['table']
 		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
@@ -596,61 +635,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	private onDidSequenceBreak() {
-		// re-register all active users to get their latest guest info
-		// do this in small batches to avoid overwhelming the system
-		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
-		this.reportActiveUsers()
-		const BATCH_SIZE = 5
-		const tick = () => {
-			if (users.length === 0) return
-			const batch = users.splice(0, BATCH_SIZE)
-			for (const user of batch) {
-				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
-			}
-			setTimeout(tick, 10)
-		}
-		tick()
-	}
-
-	private reportPostgresUpdate = throttle(
-		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
-		5000
-	)
-
-	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
-		// ignore events received after disconnecting, if that can even happen
-		if (this.state.type !== 'connected') return
-
-		// We shouldn't get these two, but just to be sure we'll filter them out
-		const { command, table } = change.event
-		this.log.debug('handleEvent', change)
-		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
-		try {
-			switch (table) {
-				case 'user_mutation_number':
-					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
-					break
-				case 'file_state':
-					this.handleFileStateEvent(collator, change.row, { command, table })
-					break
-				case 'file':
-					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
-					break
-				case 'user':
-					this.handleUserEvent(collator, change.row, { command, table })
-					break
-				default: {
-					const _x: never = table
-					this.captureException(new Error(`Unhandled table: ${table}`), { change })
-					break
-				}
-			}
-		} catch (e) {
-			this.captureException(e)
-		}
-	}
-
 	private handleMutationConfirmationEvent(
 		collator: UserChangeCollator,
 		row: Row | null,
@@ -760,49 +744,60 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		return this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length > 0
 	}
 
-	async ping() {
-		this.log.debug('ping')
-		return { sequenceId: this.slotName }
+	async getDiagnostics() {
+		const earliestHistoryRow = this.sqlite
+			.exec('select * from history order by rowid asc limit 1')
+			.toArray()[0]
+		const latestHistoryRow = this.sqlite
+			.exec('select * from history order by rowid desc limit 1')
+			.toArray()[0]
+		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
+		const meta = this.sqlite.exec('select * from meta').one()
+		return {
+			earliestHistoryRow,
+			latestHistoryRow,
+			activeUsers,
+			meta,
+		}
 	}
 
-	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
-		this.log.debug('messageUser', userId, event)
-		if (!this.userIsActive(userId)) {
-			this.log.debug('user is not active', userId)
+	private queue = new ExecutionQueue()
+
+	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
+		this.logEvent({ type: 'reboot', source })
+		if (!this.queue.isEmpty()) {
+			this.log.debug('reboot is already in progress.', source)
 			return
 		}
-		try {
-			let q = this.userDispatchQueues.get(userId)
-			if (!q) {
-				q = new ExecutionQueue()
-				this.userDispatchQueues.set(userId, q)
+		this.log.debug('reboot push', source)
+		await this.queue.push(async () => {
+			if (delay) {
+				await sleep(2000)
 			}
-			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
-				.exec(
-					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
-					Date.now(),
-					userId
-				)
-				.one()
-			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
-			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')
-
-			await q.push(async () => {
-				const user = getUserDurableObject(this.env, userId)
-
-				const res = await user.handleReplicationEvent({
-					...event,
-					sequenceNumber,
-					sequenceId: this.slotName + sequenceIdSuffix,
-				})
-				if (res === 'unregister') {
-					this.log.debug('unregistering user', userId, event)
-					this.unregisterUser(userId)
-				}
+			const start = Date.now()
+			this.log.debug('rebooting', source)
+			const res = await Promise.race([
+				this.boot().then(() => 'ok'),
+				sleep(3000).then(() => 'timeout'),
+			]).catch((e) => {
+				this.logEvent({ type: 'reboot_error' })
+				this.log.debug('reboot error', e.stack)
+				this.captureException(e)
+				return 'error'
 			})
-		} catch (e) {
-			this.captureException(e)
-		}
+			this.log.debug('rebooted', res)
+			if (res === 'ok') {
+				this.logEvent({ type: 'reboot_duration', duration: Date.now() - start })
+			} else {
+				getStatsDurableObjct(this.env).recordReplicatorBootRetry()
+				this.reboot('retry')
+			}
+		})
+	}
+
+	async ping() {
+		this.log.debug('ping')
+		return { sequenceId: this.slotName }
 	}
 
 	reportActiveUsers() {
@@ -942,6 +937,46 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
+	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
+		this.log.debug('messageUser', userId, event)
+		if (!this.userIsActive(userId)) {
+			this.log.debug('user is not active', userId)
+			return
+		}
+		try {
+			let q = this.userDispatchQueues.get(userId)
+			if (!q) {
+				q = new ExecutionQueue()
+				this.userDispatchQueues.set(userId, q)
+			}
+			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
+				.exec(
+					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
+					Date.now(),
+					userId
+				)
+				.one()
+			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
+			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')
+
+			await q.push(async () => {
+				const user = getUserDurableObject(this.env, userId)
+
+				const res = await user.handleReplicationEvent({
+					...event,
+					sequenceNumber,
+					sequenceId: this.slotName + sequenceIdSuffix,
+				})
+				if (res === 'unregister') {
+					this.log.debug('unregistering user', userId, event)
+					this.unregisterUser(userId)
+				}
+			})
+		} catch (e) {
+			this.captureException(e)
+		}
+	}
+
 	private async requestLsnUpdate(userId: string) {
 		try {
 			this.log.debug('requestLsnUpdate', userId)
