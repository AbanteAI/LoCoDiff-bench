--- tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual)@@ -20,7 +20,6 @@ import { UserChangeCollator } from './UserChangeCollator'
 import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
 import { createPostgresConnectionPool } from './postgres'
-import { getR2KeyForRoom } from './r2'
 import {
 	Analytics,
 	Environment,
@@ -33,6 +32,7 @@ 	getStatsDurableObjct,
 	getUserDurableObject,
 } from './utils/durableObjects'
+import { getR2KeyForRoom } from './r2'
 
 const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')
 
@@ -127,17 +127,6 @@ 
 type PromiseWithResolve = ReturnType<typeof promiseWithResolve>
 
-type Row =
-	| TlaRow
-	| {
-			bootId: string
-			userId: string
-	  }
-	| {
-			mutationNumber: number
-			userId: string
-	  }
-
 type BootState =
 	| {
 			type: 'init'
@@ -166,7 +155,6 @@ 	private userDispatchQueues: Map<string, ExecutionQueue> = new Map()
 
 	sentry
-	// eslint-disable-next-line local/prefer-class-methods
 	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
 		// eslint-disable-next-line @typescript-eslint/no-deprecated
 		this.sentry?.withScope((scope) => {
@@ -179,8 +167,6 @@ 			console.error(`[TLPostgresReplicator]: `, exception)
 		}
 	}
-
-	private log
 
 	private readonly replicationService
 	private readonly slotName
@@ -287,17 +273,15 @@ 				)
 			}
 		}
-
 		for (let i = appliedMigrations.length; i < migrations.length; i++) {
 			this._applyMigration(i)
 		}
 	}
 
-	async __test__forceReboot() {
+	__test__forceReboot() {
 		this.reboot('test')
 	}
-
-	async __test__panic() {
+	__test__panic() {
 		this.ctx.abort()
 	}
 
@@ -430,8 +414,6 @@ 		const promise = 'promise' in this.state ? this.state.promise : promiseWithResolve()
 		this.state = {
 			type: 'connecting',
-			// preserve the promise so any awaiters do eventually get resolved
-			// TODO: set a timeout on the promise?
 			promise,
 		}
 
@@ -653,7 +635,7 @@ 
 	private handleMutationConfirmationEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: TlaRow | null,
 		event: ReplicationEvent
 	) {
 		if (event.command === 'delete') return
@@ -667,7 +649,7 @@ 
 	private handleFileStateEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: TlaRow | null,
 		event: ReplicationEvent
 	) {
 		assert(row && 'userId' in row && 'fileId' in row, 'userId is required')
@@ -698,8 +680,8 @@ 
 	private handleFileEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
-		previous: Row | undefined,
+		row: TlaRow | null,
+		previous: TlaRow | undefined,
 		event: ReplicationEvent,
 		isReplay: boolean
 	) {
@@ -743,7 +725,7 @@ 		}
 	}
 
-	private handleUserEvent(collator: UserChangeCollator, row: Row | null, event: ReplicationEvent) {
+	private handleUserEvent(collator: UserChangeCollator, row: TlaRow | null, event: ReplicationEvent) {
 		assert(row && 'id' in row, 'user id is required')
 		this.log.debug('USER EVENT', event.command, row.id)
 		collator.addChange(row.id, {
@@ -763,6 +745,12 @@ 	async ping() {
 		this.log.debug('ping')
 		return { sequenceId: this.slotName }
+	}
+
+	private async waitUntilConnected() {
+		while (this.state.type !== 'connected') {
+			await this.state.promise
+		}
 	}
 
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
@@ -802,15 +790,6 @@ 			})
 		} catch (e) {
 			this.captureException(e)
-		}
-	}
-
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
 		}
 	}
 
@@ -942,17 +921,13 @@ 		}
 	}
 
-	private async requestLsnUpdate(userId: string) {
+	reportActiveUsers() {
 		try {
-			this.log.debug('requestLsnUpdate', userId)
-			this.logEvent({ type: 'request_lsn_update' })
-			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
-			this._messageUser(userId, { type: 'changes', changes: [], lsn })
+			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
+			this.logEvent({ type: 'active_users', count: count as number })
 		} catch (e) {
-			this.captureException(e)
-			throw e
-		}
-		return
+			console.error('Error in reportActiveUsers', e)
+		}
 	}
 
 	async unregisterUser(userId: string) {
@@ -1009,6 +984,19 @@ 		}
 	}
 
+	private async requestLsnUpdate(userId: string) {
+		try {
+			this.log.debug('requestLsnUpdate', userId)
+			this.logEvent({ type: 'request_lsn_update' })
+			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
+			this._messageUser(userId, { type: 'changes', changes: [], lsn })
+		} catch (e) {
+			this.captureException(e)
+			throw e
+		}
+		return
+	}
+
 	private async publishSnapshot(file: TlaFile) {
 		try {
 			// make sure the room's snapshot is up to date
