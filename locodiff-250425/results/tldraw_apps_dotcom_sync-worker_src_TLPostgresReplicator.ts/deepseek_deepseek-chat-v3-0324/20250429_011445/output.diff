
index 039baf10..0f52ad74 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected):tmp/tmp5zxpa0n4_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual):tmp/tmp58tgbhdj_actual.txt	
@@ -321,46 +321,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	private async maybePrune() {
-		const now = Date.now()
-		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
-		this.logEvent({ type: 'prune' })
-		this.log.debug('pruning')
-		const cutoffTime = now - PRUNE_INTERVAL
-		const usersWithoutRecentUpdates = this.ctx.storage.sql
-			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
-			.toArray() as {
-			id: string
-		}[]
-		for (const { id } of usersWithoutRecentUpdates) {
-			await this.unregisterUser(id)
-		}
-		this.pruneHistory()
-		this.lastUserPruneTime = Date.now()
-	}
-
-	private pruneHistory() {
-		this.sqlite.exec(`
-      WITH max AS (
-        SELECT MAX(rowid) AS max_id FROM history
-      )
-      DELETE FROM history
-      WHERE rowid < (SELECT max_id FROM max) - ${MAX_HISTORY_ROWS};
-    `)
-	}
-
-	private maybeLogRpm() {
-		const now = Date.now()
-		if (this.postgresUpdates > 0 && now - this.lastRpmLogTime > ONE_MINUTE) {
-			this.logEvent({
-				type: 'rpm',
-				rpm: this.postgresUpdates,
-			})
-			this.postgresUpdates = 0
-			this.lastRpmLogTime = now
-		}
-	}
-
 	async getDiagnostics() {
 		const earliestHistoryRow = this.sqlite
 			.exec('select * from history order by rowid asc limit 1')
@@ -805,15 +765,6 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
-		}
-	}
-
 	private getResumeType(
 		lsn: string,
 		userId: string,
@@ -942,6 +893,34 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
+	private async maybePrune() {
+		const now = Date.now()
+		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
+		this.logEvent({ type: 'prune' })
+		this.log.debug('pruning')
+		const cutoffTime = now - PRUNE_INTERVAL
+		const usersWithoutRecentUpdates = this.ctx.storage.sql
+			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
+			.toArray() as {
+			id: string
+		}[]
+		for (const { id } of usersWithoutRecentUpdates) {
+			await this.unregisterUser(id)
+		}
+		this.pruneHistory()
+		this.lastUserPruneTime = Date.now()
+	}
+
+	private pruneHistory() {
+		this.sqlite.exec(`
+      WITH max AS (
+        SELECT MAX(rowid) AS max_id FROM history
+      )
+      DELETE FROM history
+      WHERE rowid < (SELECT max_id FROM max) - ${MAX_HISTORY_ROWS};
+    `)
+	}
+
 	private async requestLsnUpdate(userId: string) {
 		try {
 			this.log.debug('requestLsnUpdate', userId)
@@ -966,6 +945,15 @@ export class TLPostgresReplicator extends DurableObject<Environment> {
 		}
 	}
 
+	private reportActiveUsers() {
+		try {
+			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
+			this.logEvent({ type: 'active_users', count: count as number })
+		} catch (e) {
+			console.error('Error in reportActiveUsers', e)
+		}
+	}
+
 	private writeEvent(eventData: EventData) {
 		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
 	}
