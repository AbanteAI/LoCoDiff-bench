--- tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLPostgresReplicator.ts_extracted.txt (actual)@@ -14,13 +14,11 @@ import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { Kysely, sql } from 'kysely'
-
 import { LogicalReplicationService, Wal2Json, Wal2JsonPlugin } from 'pg-logical-replication'
 import { Logger } from './Logger'
 import { UserChangeCollator } from './UserChangeCollator'
 import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
 import { createPostgresConnectionPool } from './postgres'
-import { getR2KeyForRoom } from './r2'
 import {
 	Analytics,
 	Environment,
@@ -28,18 +26,24 @@ 	TLPostgresReplicatorRebootSource,
 } from './types'
 import { EventData, writeDataPoint } from './utils/analytics'
+import { getR2KeyForRoom } from './r2'
 import {
 	getRoomDurableObject,
 	getStatsDurableObjct,
 	getUserDurableObject,
 } from './utils/durableObjects'
 
-const relevantTables = stringEnum('user', 'file', 'file_state', 'user_mutation_number')
-
 interface ReplicationEvent {
 	command: 'insert' | 'update' | 'delete'
 	table: keyof typeof relevantTables
 }
+
+const relevantTables = stringEnum(
+	'user',
+	'file',
+	'file_state',
+	'user_mutation_number'
+)
 
 interface Change {
 	event: ReplicationEvent
@@ -93,9 +97,6 @@ 				lsn TEXT PRIMARY KEY,
 				slotName TEXT NOT NULL
 			);
-			-- The slot name references the replication slot in postgres.
-			-- If something ever gets messed up beyond mortal comprehension and we need to force all
-			-- clients to reboot, we can just change the slot name by altering the slotNamePrefix in the constructor.
 			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
 		`,
 	},
@@ -106,7 +107,8 @@ 				lsn TEXT NOT NULL,
 				userId TEXT NOT NULL,
 				fileId TEXT,
-				json TEXT NOT NULL
+				json TEXT NOT NULL,
+				timestamp INTEGER NOT NULL DEFAULT 0
 			);
 			CREATE INDEX history_lsn_userId ON history (lsn, userId);
 			CREATE INDEX history_lsn_fileId ON history (lsn, fileId);
@@ -127,177 +129,135 @@ 
 type PromiseWithResolve = ReturnType<typeof promiseWithResolve>
 
-type Row =
-	| TlaRow
-	| {
-			bootId: string
-			userId: string
-	  }
-	| {
-			mutationNumber: number
-			userId: string
-	  }
-
-type BootState =
-	| {
-			type: 'init'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connecting'
-			promise: PromiseWithResolve
-	  }
-	| {
-			type: 'connected'
-	  }
+const relevantTables = stringEnum(
+	'user',
+	'file',
+	'file_state',
+	'user_mutation_number'
+)
 
 export class TLPostgresReplicator extends DurableObject<Environment> {
 	private sqlite: SqlStorage
-	private state: BootState
-	private measure: Analytics | undefined
+	private state: { type: 'init'; promise: PromiseWithResolve } | {
+		type: 'connecting'
+		promise: PromiseWithResolve
+	} | {
+		type: 'connected'
+		sequenceId: string
+		subscription: any
+	} = {
+		type: 'init',
+		promise: promiseWithResolve(),
+	}
+
+	private measure?: Analytics
 	private postgresUpdates = 0
 	private lastPostgresMessageTime = Date.now()
 	private lastRpmLogTime = Date.now()
 	private lastUserPruneTime = Date.now()
 
-	// we need to guarantee in-order delivery of messages to users
-	// but DO RPC calls are not guaranteed to happen in order, so we need to
-	// use a queue per user
-	private userDispatchQueues: Map<string, ExecutionQueue> = new Map()
-
-	sentry
-	// eslint-disable-next-line local/prefer-class-methods
-	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
-		// eslint-disable-next-line @typescript-eslint/no-deprecated
-		this.sentry?.withScope((scope) => {
-			if (extras) scope.setExtras(extras)
-			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			this.sentry?.captureException(exception) as any
-		})
-		this.log.debug('ERROR', (exception as any)?.stack ?? exception)
-		if (!this.sentry) {
-			console.error(`[TLPostgresReplicator]: `, exception)
-		}
-	}
-
-	private log
-
-	private readonly replicationService
-	private readonly slotName
 	private readonly wal2jsonPlugin = new Wal2JsonPlugin({
 		addTables:
 			'public.user,public.file,public.file_state,public.user_mutation_number,public.replicator_boot_id',
 	})
 
+	private readonly replicationService: LogicalReplicationService
+	private readonly slotName: string
 	private readonly db: Kysely<DB>
+
+	private log: Logger
+	private queue = new ExecutionQueue()
+	private userDispatchQueues = new Map<string, ExecutionQueue>()
+
 	constructor(ctx: DurableObjectState, env: Environment) {
 		super(ctx, env)
 		this.measure = env.MEASURE
 		this.sentry = createSentry(ctx, env)
 		this.sqlite = this.ctx.storage.sql
-		this.state = {
-			type: 'init',
-			promise: promiseWithResolve(),
-		}
-
-		const slotNameMaxLength = 63 // max postgres identifier length
-		const slotNamePrefix = 'tlpr_' // pick something short so we can get more of the durable object id
+
+		this.log = new Logger(env, 'TLPostgresReplicator', this.sentry)
+		this.db = createPostgresConnectionPool(env, 'TLPostgresReplicator', 100)
+
+		const slotNameMaxLength = 63
+		const slotNamePrefix = 'tlpr_'
 		const durableObjectId = this.ctx.id.toString()
 		this.slotName =
 			slotNamePrefix + durableObjectId.slice(0, slotNameMaxLength - slotNamePrefix.length)
 
-		this.log = new Logger(env, 'TLPostgresReplicator', this.sentry)
-		this.db = createPostgresConnectionPool(env, 'TLPostgresReplicator', 100)
-
 		this.replicationService = new LogicalReplicationService(
-			/**
-			 * node-postgres Client options for connection
-			 * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/pg/index.d.ts#L16
-			 */
 			{
 				database: 'postgres',
 				connectionString: env.BOTCOM_POSTGRES_CONNECTION_STRING,
 				application_name: this.slotName,
 			},
-			/**
-			 * Logical replication service config
-			 * https://github.com/kibae/pg-logical-replication/blob/main/src/logical-replication-service.ts#L9
-			 */
 			{
-				acknowledge: {
-					auto: false,
-					timeoutSeconds: 10,
-				},
+				acknowledge: { auto: false, timeoutSeconds: 10 },
 			}
 		)
 
-		this.alarm()
 		this.ctx
 			.blockConcurrencyWhile(async () => {
-				await this._migrate().catch((e) => {
-					this.captureException(e)
-					throw e
-				})
-				// if the slot name changed, we set the lsn to null, which will trigger a mass user DO reboot
-				if (this.sqlite.exec('select slotName from meta').one().slotName !== this.slotName) {
+				await this._migrate()
+				const existing = this.sqlite.exec('SELECT slotName FROM meta').one().slotName
+				if (existing !== this.slotName) {
 					this.sqlite.exec('UPDATE meta SET slotName = ?, lsn = null', this.slotName)
 				}
-				await sql`SELECT pg_create_logical_replication_slot(${this.slotName}, 'wal2json') WHERE NOT EXISTS (SELECT 1 FROM pg_replication_slots WHERE slot_name = ${this.slotName})`.execute(
-					this.db
-				)
+				await sql`SELECT pg_create_logical_replication_slot(${this.slotName}, 'wal2json') WHERE NOT EXISTS (
+					SELECT 1 FROM pg_replication_slots WHERE slot_name = ${this.slotName}
+				)`.execute(this.db)
 				this.pruneHistory()
 			})
-			.then(() => {
-				this.reboot('constructor', false).catch((e) => {
+			.then(() =>
+				this.reboot('constructor', false).catch(e => {
 					this.captureException(e)
 					this.__test__panic()
 				})
-			})
-		// no need to catch since throwing in a blockConcurrencyWhile will trigger
-		// a DO reboot
+			)
+
+		this.alarm()
+	}
+
+	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
+		this.sentry?.withScope(scope => {
+			if (extras) scope.setExtras(extras)
+			this.sentry?.captureException(exception as any)
+		})
+		if (!this.sentry) {
+			console.error(`[TLPostgresReplicator]:`, exception)
+		}
+		this.log.debug('ERROR', (exception as any)?.stack ?? exception)
+	}
+
+	private async _migrate() {
+		let applied: Migration[]
+		try {
+			applied = this.sqlite.exec('SELECT id, code FROM migrations ORDER BY id ASC').toArray() as any
+		} catch {
+			this._applyMigration(0)
+			applied = [migrations[0]]
+		}
+		for (let i = 0; i < applied.length; i++) {
+			if (applied[i].id !== migrations[i].id) {
+				throw new Error('TLPostgresReplicator migrations have changed!!')
+			}
+		}
+		for (let i = applied.length; i < migrations.length; i++) {
+			this._applyMigration(i)
+		}
 	}
 
 	private _applyMigration(index: number) {
 		this.log.debug('running migration', migrations[index].id)
 		this.sqlite.exec(migrations[index].code)
-		this.sqlite.exec(
-			'insert into migrations (id, code) values (?, ?)',
-			migrations[index].id,
-			migrations[index].code
-		)
+		this.sqlite.exec('INSERT INTO migrations (id, code) VALUES (?, ?)', migrations[index].id, migrations[index].code)
 		this.log.debug('ran migration', migrations[index].id)
 	}
 
-	private async _migrate() {
-		let appliedMigrations: Migration[]
-		try {
-			appliedMigrations = this.sqlite
-				.exec('select code, id from migrations order by id asc')
-				.toArray() as any
-		} catch (_e) {
-			// no migrations table, run initial migration
-			this._applyMigration(0)
-			appliedMigrations = [migrations[0]]
-		}
-
-		for (let i = 0; i < appliedMigrations.length; i++) {
-			if (appliedMigrations[i].id !== migrations[i].id) {
-				throw new Error(
-					'TLPostgresReplicator migrations have changed!! this is an append-only array!!'
-				)
-			}
-		}
-
-		for (let i = appliedMigrations.length; i < migrations.length; i++) {
-			this._applyMigration(i)
-		}
-	}
-
-	async __test__forceReboot() {
+	__test__forceReboot() {
 		this.reboot('test')
 	}
 
-	async __test__panic() {
+	__test__panic() {
 		this.ctx.abort()
 	}
 
@@ -305,16 +265,15 @@ 		try {
 			this.ctx.storage.setAlarm(Date.now() + 3000)
 			this.maybeLogRpm()
-			// If we haven't heard anything from postgres for 5 seconds, trigger a heartbeat.
-			// Otherwise, if we haven't heard anything for 10 seconds, do a soft reboot.
+
 			if (Date.now() - this.lastPostgresMessageTime > 10000) {
 				this.log.debug('rebooting due to inactivity')
 				this.reboot('inactivity')
 			} else if (Date.now() - this.lastPostgresMessageTime > 5000) {
-				// this triggers a heartbeat
 				this.log.debug('triggering heartbeat due to inactivity')
 				await this.replicationService.acknowledge('0/0')
 			}
+
 			await this.maybePrune()
 		} catch (e) {
 			this.captureException(e)
@@ -324,15 +283,9 @@ 	private async maybePrune() {
 		const now = Date.now()
 		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
-		this.logEvent({ type: 'prune' })
-		this.log.debug('pruning')
-		const cutoffTime = now - PRUNE_INTERVAL
-		const usersWithoutRecentUpdates = this.ctx.storage.sql
-			.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoffTime)
-			.toArray() as {
-			id: string
-		}[]
-		for (const { id } of usersWithoutRecentUpdates) {
+		const cutoff = now - PRUNE_INTERVAL
+		const stale = this.sqlite.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoff).toArray() as { id: string }[]
+		for (const { id } of stale) {
 			await this.unregisterUser(id)
 		}
 		this.pruneHistory()
@@ -341,9 +294,7 @@ 
 	private pruneHistory() {
 		this.sqlite.exec(`
-      WITH max AS (
-        SELECT MAX(rowid) AS max_id FROM history
-      )
+      WITH max AS (SELECT MAX(rowid) AS max_id FROM history)
       DELETE FROM history
       WHERE rowid < (SELECT max_id FROM max) - ${MAX_HISTORY_ROWS};
     `)
@@ -352,61 +303,34 @@ 	private maybeLogRpm() {
 		const now = Date.now()
 		if (this.postgresUpdates > 0 && now - this.lastRpmLogTime > ONE_MINUTE) {
-			this.logEvent({
-				type: 'rpm',
-				rpm: this.postgresUpdates,
-			})
+			this.logEvent({ type: 'rpm', rpm: this.postgresUpdates })
 			this.postgresUpdates = 0
 			this.lastRpmLogTime = now
 		}
 	}
-
-	async getDiagnostics() {
-		const earliestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid asc limit 1')
-			.toArray()[0]
-		const latestHistoryRow = this.sqlite
-			.exec('select * from history order by rowid desc limit 1')
-			.toArray()[0]
-		const activeUsers = this.sqlite.exec('select count(*) from active_user').one().count as number
-		const meta = this.sqlite.exec('select * from meta').one()
-		return {
-			earliestHistoryRow,
-			latestHistoryRow,
-			activeUsers,
-			meta,
-		}
-	}
-
-	private queue = new ExecutionQueue()
 
 	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
 		this.logEvent({ type: 'reboot', source })
 		if (!this.queue.isEmpty()) {
-			this.log.debug('reboot is already in progress.', source)
+			this.log.debug('reboot already in progress.', source)
 			return
 		}
 		this.log.debug('reboot push', source)
 		await this.queue.push(async () => {
-			if (delay) {
-				await sleep(2000)
-			}
+			if (delay) await sleep(2000)
 			const start = Date.now()
 			this.log.debug('rebooting', source)
-			const res = await Promise.race([
-				this.boot().then(() => 'ok'),
-				sleep(3000).then(() => 'timeout'),
-			]).catch((e) => {
-				this.logEvent({ type: 'reboot_error' })
-				this.log.debug('reboot error', e.stack)
-				this.captureException(e)
-				return 'error'
-			})
+			const res = await Promise.race([this.boot().then(() => 'ok'), sleep(3000).then(() => 'timeout')])
+				.catch(e => {
+					this.logEvent({ type: 'reboot_error' })
+					this.log.debug('reboot error', e.stack)
+					this.captureException(e)
+					return 'error'
+				})
 			this.log.debug('rebooted', res)
 			if (res === 'ok') {
 				this.logEvent({ type: 'reboot_duration', duration: Date.now() - start })
 			} else {
-				getStatsDurableObjct(this.env).recordReplicatorBootRetry()
 				this.reboot('retry')
 			}
 		})
@@ -416,53 +340,42 @@ 		this.log.debug('booting')
 		this.lastPostgresMessageTime = Date.now()
 		this.replicationService.removeAllListeners()
-
-		// stop any previous subscriptions both here and on the postgres side to make sure we will be allowed to connect
-		// to the slot again.
 		this.log.debug('stopping replication')
 		this.replicationService.stop().catch(this.captureException)
 		this.log.debug('terminating backend')
-		await sql`SELECT pg_terminate_backend(active_pid) FROM pg_replication_slots WHERE slot_name = ${this.slotName} AND active`.execute(
-			this.db
-		)
-		this.log.debug('done')
+		await sql`
+      SELECT pg_terminate_backend(pid)
+      FROM pg_replication_slots
+      JOIN pg_stat_replication AS r ON r.slot_name = pg_replication_slots.slot_name
+      WHERE slot_name = ${this.slotName} AND active
+    `.execute(this.db)
 
 		const promise = 'promise' in this.state ? this.state.promise : promiseWithResolve()
-		this.state = {
-			type: 'connecting',
-			// preserve the promise so any awaiters do eventually get resolved
-			// TODO: set a timeout on the promise?
-			promise,
-		}
+		this.state = { type: 'connecting', promise }
 
 		this.replicationService.on('heartbeat', (lsn: string) => {
-			this.log.debug('heartbeat', lsn)
 			this.lastPostgresMessageTime = Date.now()
 			this.reportPostgresUpdate()
-			// don't call this.updateLsn here because it's not necessary
-			// to save the lsn after heartbeats since they contain no information
 			this.replicationService.acknowledge(lsn).catch(this.captureException)
 		})
 
 		this.replicationService.addListener('data', (lsn: string, log: Wal2Json.Output) => {
-			// ignore events received after disconnecting, if that can even happen
 			try {
 				if (this.state.type !== 'connected') return
 				this.postgresUpdates++
 				this.lastPostgresMessageTime = Date.now()
 				this.reportPostgresUpdate()
 				const collator = new UserChangeCollator()
-				for (const _change of log.change) {
-					if (_change.kind === 'message' && (_change as any).prefix === 'requestLsnUpdate') {
-						this.requestLsnUpdate((_change as any).content)
+				for (const raw of log.change) {
+					if (raw.kind === 'message' && (raw as any).prefix === 'requestLsnUpdate') {
+						this.requestLsnUpdate((raw as any).content)
 						continue
 					}
-					const change = this.parseChange(_change)
+					const change = this.parseChange(raw)
 					if (!change) {
-						this.log.debug('IGNORING CHANGE', _change)
+						this.log.debug('IGNORING CHANGE', raw)
 						continue
 					}
-
 					this.handleEvent(collator, change, false)
 					this.sqlite.exec(
 						'INSERT INTO history (lsn, userId, fileId, json, timestamp) VALUES (?, ?, ?, ?, ?)',
@@ -485,23 +398,29 @@ 
 		this.replicationService.addListener('start', () => {
 			if (!this.getCurrentLsn()) {
-				// make a request to force an updateLsn()
-				sql`insert into replicator_boot_id ("replicatorId", "bootId") values (${this.ctx.id.toString()}, ${uniqueId()}) on conflict ("replicatorId") do update set "bootId" = excluded."bootId"`.execute(
-					this.db
-				)
-			}
-		})
-
-		const handleError = (e: Error) => {
+				sql`
+          INSERT INTO replicator_boot_id (replicatorId, bootId)
+          VALUES (${this.ctx.id.toString()}, ${uniqueId()})
+          ON CONFLICT (replicatorId)
+          DO UPDATE SET bootId = excluded.bootId
+        `.execute(this.db)
+			}
+		})
+
+		this.replicationService.on('error', e => {
 			this.captureException(e)
 			this.reboot('retry')
-		}
-
-		this.replicationService.on('error', handleError)
-		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(handleError)
+		})
+
+		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(e => {
+			this.captureException(e)
+			this.reboot('retry')
+		})
 
 		this.state = {
 			type: 'connected',
+			sequenceId: this.slotName,
+			subscription: null,
 		}
 		promise.resolve(null)
 	}
@@ -511,20 +430,30 @@ 	}
 
 	private async commitLsn(lsn: string) {
-		const result = await this.replicationService.acknowledge(lsn)
-		if (result) {
-			// if the current lsn in the meta table is null it means
-			// that we are using a brand new replication slot and we
-			// need to force all user DOs to reboot
-			const prevLsn = this.getCurrentLsn()
+		const ok = await this.replicationService.acknowledge(lsn)
+		if (ok) {
+			const prev = this.getCurrentLsn()
 			this.sqlite.exec('UPDATE meta SET lsn = ?', lsn)
-			if (!prevLsn) {
-				this.onDidSequenceBreak()
-			}
+			if (!prev) this.onDidSequenceBreak()
 		} else {
 			this.captureException(new Error('acknowledge failed'))
 			this.reboot('retry')
 		}
+	}
+
+	private onDidSequenceBreak() {
+		const users = this.sqlite.exec('SELECT id FROM active_user').toArray() as { id: string }[]
+		this.reportActiveUsers()
+		const BATCH = 5
+		const tick = () => {
+			if (users.length === 0) return
+			const batch = users.splice(0, BATCH)
+			for (const u of batch) {
+				this._messageUser(u.id, { type: 'maybe_force_reboot' })
+			}
+			setTimeout(tick, 10)
+		}
+		tick()
 	}
 
 	private parseChange(change: Wal2Json.Change): Change | null {
@@ -532,35 +461,20 @@ 		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
 			return null
 		}
-
 		const row = {} as any
 		const previous = {} as any
-		// take everything from change.columnnames and associated the values from change.columnvalues
 		if (change.kind === 'delete') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
-			oldkeys.keynames.forEach((key, i) => {
-				row[key] = oldkeys.keyvalues[i]
-			})
+			const old = change.oldkeys!
+			old.keynames.forEach((k, i) => (row[k] = old.keyvalues[i]))
 		} else if (change.kind === 'update') {
-			const oldkeys = change.oldkeys
-			assert(oldkeys, 'oldkeys is required for delete events')
-			assert(oldkeys.keyvalues, 'oldkeys is required for delete events')
-			oldkeys.keynames.forEach((key, i) => {
-				previous[key] = oldkeys.keyvalues[i]
-			})
-			change.columnnames.forEach((col, i) => {
-				row[col] = change.columnvalues[i]
-			})
+			const old = change.oldkeys!
+			old.keynames.forEach((k, i) => (previous[k] = old.keyvalues[i]))
+			change.columnnames.forEach((c, i) => (row[c] = change.columnvalues[i]))
 		} else {
-			change.columnnames.forEach((col, i) => {
-				row[col] = change.columnvalues[i]
-			})
-		}
-
-		let userId = null as string | null
-		let fileId = null as string | null
+			change.columnnames.forEach((c, i) => (row[c] = change.columnvalues[i]))
+		}
+		let userId: string | null = null
+		let fileId: string | null = null
 		switch (table) {
 			case 'user':
 				userId = (row as TlaUser).id
@@ -576,69 +490,33 @@ 			case 'user_mutation_number':
 				userId = (row as { userId: string }).userId
 				break
-			default: {
-				// assert never
-				const _x: never = table
-			}
-		}
-
+		}
 		if (!userId) return null
-
-		return {
-			row,
-			previous,
-			event: {
-				command: change.kind,
-				table,
-			},
-			userId,
-			fileId,
-		}
-	}
-
-	private onDidSequenceBreak() {
-		// re-register all active users to get their latest guest info
-		// do this in small batches to avoid overwhelming the system
-		const users = this.sqlite.exec('SELECT id FROM active_user').toArray()
-		this.reportActiveUsers()
-		const BATCH_SIZE = 5
-		const tick = () => {
-			if (users.length === 0) return
-			const batch = users.splice(0, BATCH_SIZE)
-			for (const user of batch) {
-				this._messageUser(user.id as string, { type: 'maybe_force_reboot' })
-			}
-			setTimeout(tick, 10)
-		}
-		tick()
-	}
-
-	private reportPostgresUpdate = throttle(
-		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
-		5000
-	)
-
-	private handleEvent(collator: UserChangeCollator, change: Change, isReplay: boolean) {
-		// ignore events received after disconnecting, if that can even happen
+		return { row, previous, event: { command: change.kind, table }, userId, fileId }
+	}
+
+	private handleEvent(
+		collator: UserChangeCollator,
+		change: Change,
+		isReplay: boolean
+	) {
 		if (this.state.type !== 'connected') return
-
-		// We shouldn't get these two, but just to be sure we'll filter them out
 		const { command, table } = change.event
 		this.log.debug('handleEvent', change)
-		assert(this.state.type === 'connected', 'state should be connected in handleEvent')
+		assert(this.state.type === 'connected')
 		try {
 			switch (table) {
 				case 'user_mutation_number':
-					this.handleMutationConfirmationEvent(collator, change.row, { command, table })
+					this.handleMutationConfirmationEvent(collator, change.row, change.event)
 					break
 				case 'file_state':
-					this.handleFileStateEvent(collator, change.row, { command, table })
+					this.handleFileStateEvent(collator, change.row, change.event)
 					break
 				case 'file':
-					this.handleFileEvent(collator, change.row, change.previous, { command, table }, isReplay)
+					this.handleFileEvent(collator, change.row, change.previous, change.event, isReplay)
 					break
 				case 'user':
-					this.handleUserEvent(collator, change.row, { command, table })
+					this.handleUserEvent(collator, change.row, change.event)
 					break
 				default: {
 					const _x: never = table
@@ -653,11 +531,11 @@ 
 	private handleMutationConfirmationEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: TlaRow,
 		event: ReplicationEvent
 	) {
 		if (event.command === 'delete') return
-		assert(row && 'mutationNumber' in row, 'mutationNumber is required')
+		assertExists(row['mutationNumber'], 'mutationNumber is required')
 		collator.addChange(row.userId, {
 			type: 'mutation_commit',
 			mutationNumber: row.mutationNumber,
@@ -667,15 +545,21 @@ 
 	private handleFileStateEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
+		row: TlaRow,
 		event: ReplicationEvent
 	) {
-		assert(row && 'userId' in row && 'fileId' in row, 'userId is required')
+		assertExists(row['userId'], 'userId is required')
 		if (!this.userIsActive(row.userId)) return
 		if (event.command === 'insert') {
+			this.sqlite.exec(
+				`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
+				row.userId,
+				row.fileId
+			)
+			assertExists(row['isFileOwner'], 'isFileOwner is required')
 			if (!row.isFileOwner) {
 				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+					`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
 					row.userId,
 					row.fileId
 				)
@@ -689,7 +573,7 @@ 		}
 		collator.addChange(row.userId, {
 			type: 'row_update',
-			row: row as any,
+			row,
 			table: event.table as ZTable,
 			event: event.command,
 			userId: row.userId,
@@ -698,71 +582,129 @@ 
 	private handleFileEvent(
 		collator: UserChangeCollator,
-		row: Row | null,
-		previous: Row | undefined,
+		row: TlaRow,
+		previous: TlaRow | undefined,
 		event: ReplicationEvent,
 		isReplay: boolean
 	) {
-		assert(row && 'id' in row && 'ownerId' in row, 'row id is required')
-		const impactedUserIds = [
+		assertExists(row['id'], 'row id is required')
+		const impacted = [
 			row.ownerId,
 			...this.sqlite
 				.exec('SELECT userId FROM user_file_subscriptions WHERE fileId = ?', row.id)
 				.toArray()
-				.map((x) => x.userId as string),
+				.map(x => x.userId),
 		]
-		// if the file state was deleted before the file, we might not have any impacted users
 		if (event.command === 'delete') {
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidDelete(row)
 			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, row.id)
 		} else if (event.command === 'update') {
-			assert('ownerId' in row, 'ownerId is required when updating file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
 			if (previous && !isReplay) {
-				const prevFile = previous as TlaFile
-				if (row.published && !(prevFile as TlaFile).published) {
-					this.publishSnapshot(row)
-				} else if (!row.published && (prevFile as TlaFile).published) {
-					this.unpublishSnapshot(row)
-				} else if (row.published && row.lastPublished > prevFile.lastPublished) {
-					this.publishSnapshot(row)
-				}
+				const prev = previous as TlaFile
+				if (row.published && !prev.published) this.publishSnapshot(row)
+				else if (!row.published && prev.published) this.unpublishSnapshot(row)
+				else if (row.published && row.lastPublished > prev.lastPublished) this.publishSnapshot(row)
 			}
 		} else if (event.command === 'insert') {
-			assert('ownerId' in row, 'ownerId is required when inserting file')
 			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
 		}
-		for (const userId of impactedUserIds) {
-			collator.addChange(userId, {
+		for (const u of impacted) {
+			collator.addChange(u, {
 				type: 'row_update',
-				row: row as any,
+				row,
 				table: event.table as ZTable,
 				event: event.command,
-				userId,
+				userId: u,
 			})
 		}
 	}
 
-	private handleUserEvent(collator: UserChangeCollator, row: Row | null, event: ReplicationEvent) {
-		assert(row && 'id' in row, 'user id is required')
+	private handleUserEvent(
+		collator: UserChangeCollator,
+		row: TlaRow,
+		event: ReplicationEvent
+	) {
+		assertExists(row['id'], 'user id is required')
 		this.log.debug('USER EVENT', event.command, row.id)
 		collator.addChange(row.id, {
 			type: 'row_update',
-			row: row as any,
+			row,
 			table: event.table as ZTable,
 			event: event.command,
 			userId: row.id,
 		})
-		return [row.id]
 	}
 
 	private userIsActive(userId: string) {
-		return this.sqlite.exec(`SELECT * FROM active_user WHERE id = ?`, userId).toArray().length > 0
-	}
-
-	async ping() {
-		this.log.debug('ping')
-		return { sequenceId: this.slotName }
+		return this.sqlite.exec(`SELECT 1 FROM active_user WHERE id = ?`, userId).toArray().length > 0
+	}
+
+	private reportActiveUsers() {
+		try {
+			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
+			this.logEvent({ type: 'active_users', count: count as number })
+		} catch (e) {
+			console.error('Error in reportActiveUsers', e)
+		}
+	}
+
+	private reportPostgresUpdate = throttle(
+		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
+		5000
+	)
+
+	private writeEvent(eventData: EventData) {
+		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
+	}
+
+	logEvent(event: TLPostgresReplicatorEvent) {
+		try {
+			switch (event.type) {
+				case 'reboot':
+				case 'reboot_error':
+				case 'register_user':
+				case 'unregister_user':
+				case 'get_file_record':
+				case 'request_lsn_update':
+				case 'prune':
+					this.writeEvent({ blobs: [event.type] })
+					break
+				case 'reboot_duration':
+					this.writeEvent({ blobs: [event.type], doubles: [event.duration] })
+					break
+				case 'rpm':
+					this.writeEvent({ blobs: [event.type], doubles: [event.rpm] })
+					break
+				case 'active_users':
+					this.writeEvent({ blobs: [event.type], doubles: [event.count] })
+					break
+				default:
+					exhaustiveSwitchError(event)
+			}
+		} catch (e) {
+			this.captureException(e)
+		}
+	}
+
+	async getDiagnostics() {
+		const earliest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]
+		const latest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid DESC LIMIT 1').toArray()[0]
+		const active = this.sqlite.exec('SELECT COUNT(*) FROM active_user').one().count as number
+		const meta = this.sqlite.exec('SELECT * FROM meta').one()
+		return { earliestHistoryRow: earliest, latestHistoryRow: latest, activeUsers: active, meta }
+	}
+
+	async requestLsnUpdate(userId: string) {
+		try {
+			this.log.debug('requestLsnUpdate', userId)
+			this.logEvent({ type: 'request_lsn_update' })
+			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
+			this._messageUser(userId, { type: 'changes', changes: [], lsn })
+		} catch (e) {
+			this.captureException(e)
+			throw e
+		}
 	}
 
 	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
@@ -777,19 +719,19 @@ 				q = new ExecutionQueue()
 				this.userDispatchQueues.set(userId, q)
 			}
-			const { sequenceNumber, sequenceIdSuffix } = this.sqlite
-				.exec(
-					'UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix',
-					Date.now(),
-					userId
-				)
-				.one()
+			const { sequenceNumber, sequenceIdSuffix } =
+				this.sqlite
+					.exec(
+						`UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix`,
+						Date.now(),
+						userId
+					)
+					.one()
 			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
 			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')
 
 			await q.push(async () => {
 				const user = getUserDurableObject(this.env, userId)
-
 				const res = await user.handleReplicationEvent({
 					...event,
 					sequenceNumber,
@@ -797,20 +739,11 @@ 				})
 				if (res === 'unregister') {
 					this.log.debug('unregistering user', userId, event)
-					this.unregisterUser(userId)
+					await this.unregisterUser(userId)
 				}
 			})
 		} catch (e) {
 			this.captureException(e)
-		}
-	}
-
-	reportActiveUsers() {
-		try {
-			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
-			this.logEvent({ type: 'active_users', count: count as number })
-		} catch (e) {
-			console.error('Error in reportActiveUsers', e)
 		}
 	}
 
@@ -819,24 +752,16 @@ 		userId: string,
 		guestFileIds: string[]
 	): { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] } | { type: 'reboot' } {
-		const currentLsn = assertExists(this.getCurrentLsn())
-
-		if (lsn >= currentLsn) {
-			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', currentLsn)
-			// targetLsn is now or in the future, we can register them and deliver events
-			// without needing to check the history
+		const current = assertExists(this.getCurrentLsn())
+		if (lsn >= current) {
+			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', current)
 			return { type: 'done' }
 		}
-		const earliestLsn = this.sqlite
-			.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid asc LIMIT 1')
-			.toArray()[0]?.lsn
-
-		if (!earliestLsn || lsn < earliestLsn) {
-			this.log.debug('getResumeType: not enough history', lsn, '<', earliestLsn)
-			// not enough history, we can't resume
+		const earliest = this.sqlite.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]?.lsn
+		if (!earliest || lsn < earliest) {
+			this.log.debug('getResumeType: not enough history', lsn, '<', earliest)
 			return { type: 'reboot' }
 		}
-
 		const history = this.sqlite
 			.exec<{ json: string; lsn: string }>(
 				`
@@ -846,7 +771,7 @@ 			  lsn > ?
 				AND (
 				  userId = ? 
-					OR fileId IN (${guestFileIds.map((_, i) => '$' + (i + 1)).join(', ')})
+					OR fileId IN (${guestFileIds.map((_, i) => `$${i + 1}`).join(', ')})
 				)
 			ORDER BY rowid ASC
 		`,
@@ -862,16 +787,16 @@ 			return { type: 'done' }
 		}
 
-		const changesByLsn = groupBy(history, (x) => x.lsn)
+		const byLsn = groupBy(history, x => x.lsn)
 		const messages: ZReplicationEventWithoutSequenceInfo[] = []
-		for (const lsn of Object.keys(changesByLsn).sort()) {
+		for (const lsnKey of Object.keys(byLsn).sort()) {
 			const collator = new UserChangeCollator()
-			for (const change of changesByLsn[lsn]) {
-				this.handleEvent(collator, change.change, true)
+			for (const h of byLsn[lsnKey]) {
+				this.handleEvent(collator, h.change, true)
 			}
 			const changes = collator.changes.get(userId)
 			if (changes?.length) {
-				messages.push({ type: 'changes', changes, lsn })
+				messages.push({ type: 'changes', changes, lsn: lsnKey })
 			}
 		}
 		this.log.debug('getResumeType: resuming', messages.length, messages)
@@ -890,16 +815,11 @@ 		bootId: string
 	}): Promise<{ type: 'done'; sequenceId: string; sequenceNumber: number } | { type: 'reboot' }> {
 		try {
-			while (!this.getCurrentLsn()) {
-				// this should only happen once per slot name change, which should never happen!
-				await sleep(100)
-			}
-
+			while (!this.getCurrentLsn()) await sleep(100)
 			this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
 			this.logEvent({ type: 'register_user' })
 
-			// clear user and subscriptions
-			this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+			this.sqlite.exec('DELETE FROM active_user WHERE id = ?', userId)
 			this.sqlite.exec(
 				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
 				userId,
@@ -907,28 +827,21 @@ 				Date.now()
 			)
 
-			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE userId = ?`, userId)
-			for (const fileId of guestFileIds) {
+			this.sqlite.exec('DELETE FROM user_file_subscriptions WHERE userId = ?', userId)
+			for (const fid of guestFileIds) {
 				this.sqlite.exec(
-					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT (userId, fileId) DO NOTHING`,
+					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
 					userId,
-					fileId
+					fid
 				)
 			}
-			this.log.debug('inserted file subscriptions', guestFileIds.length)
-
 			this.reportActiveUsers()
 			this.log.debug('inserted active user')
 
 			const resume = this.getResumeType(lsn, userId, guestFileIds)
-			if (resume.type === 'reboot') {
-				return { type: 'reboot' }
-			}
-
+			if (resume.type === 'reboot') return { type: 'reboot' }
 			if (resume.messages) {
-				for (const message of resume.messages) {
-					this._messageUser(userId, message)
-				}
+				for (const m of resume.messages) this._messageUser(userId, m)
 			}
 
 			return {
@@ -942,111 +855,45 @@ 		}
 	}
 
-	private async requestLsnUpdate(userId: string) {
-		try {
-			this.log.debug('requestLsnUpdate', userId)
-			this.logEvent({ type: 'request_lsn_update' })
-			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
-			this._messageUser(userId, { type: 'changes', changes: [], lsn })
-		} catch (e) {
-			this.captureException(e)
-			throw e
-		}
-		return
-	}
-
 	async unregisterUser(userId: string) {
 		this.logEvent({ type: 'unregister_user' })
-		this.sqlite.exec(`DELETE FROM active_user WHERE id = ?`, userId)
+		this.sqlite.exec('DELETE FROM active_user WHERE id = ?', userId)
+		const q = this.userDispatchQueues.get(userId)
+		if (q) {
+			q.close()
+			this.userDispatchQueues.delete(userId)
+		}
 		this.reportActiveUsers()
-		const queue = this.userDispatchQueues.get(userId)
-		if (queue) {
-			queue.close()
-			this.userDispatchQueues.delete(userId)
-		}
-	}
-
-	private writeEvent(eventData: EventData) {
-		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
-	}
-
-	logEvent(event: TLPostgresReplicatorEvent) {
-		switch (event.type) {
-			case 'reboot':
-				this.writeEvent({ blobs: [event.type, event.source] })
-				break
-			case 'reboot_error':
-			case 'register_user':
-			case 'unregister_user':
-			case 'request_lsn_update':
-			case 'prune':
-			case 'get_file_record':
-				this.writeEvent({
-					blobs: [event.type],
-				})
-				break
-
-			case 'reboot_duration':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.duration],
-				})
-				break
-			case 'rpm':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.rpm],
-				})
-				break
-			case 'active_users':
-				this.writeEvent({
-					blobs: [event.type],
-					doubles: [event.count],
-				})
-				break
-			default:
-				exhaustiveSwitchError(event)
-		}
-	}
-
-	private async publishSnapshot(file: TlaFile) {
-		try {
-			// make sure the room's snapshot is up to date
-			await getRoomDurableObject(this.env, file.id).awaitPersist()
-			// and that it exists
+	}
+
+	async getDiagnostics() {
+		const earliest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]
+		const latest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid DESC LIMIT 1').toArray()[0]
+		const active = this.sqlite.exec('SELECT COUNT(*) FROM active_user').one().count as number
+		const meta = this.sqlite.exec('SELECT * FROM meta').one()
+		return { earliestHistoryRow: earliest, latestHistoryRow: latest, activeUsers: active, meta }
+	}
+
+	private publishSnapshot(file: TlaFile) {
+		getRoomDurableObject(this.env, file.id).awaitPersist().then(async () => {
 			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
-
-			if (!snapshot) {
-				throw new Error('Snapshot not found')
-			}
+			if (!snapshot) throw new Error('Snapshot not found')
 			const blob = await snapshot.blob()
-
-			// Create a new slug for the published room
 			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
-
-			// Bang the snapshot into the database
 			await this.env.ROOM_SNAPSHOTS.put(
 				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
 				blob
 			)
-			const currentTime = new Date().toISOString()
+			const now = new Date().toISOString()
 			await this.env.ROOM_SNAPSHOTS.put(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${currentTime}`, isApp: true }),
+				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${now}`, isApp: true }),
 				blob
 			)
-		} catch (e) {
-			this.log.debug('Error publishing snapshot', e)
-		}
-	}
-
-	private async unpublishSnapshot(file: TlaFile) {
-		try {
-			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug)
-			await this.env.ROOM_SNAPSHOTS.delete(
-				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true })
-			)
-		} catch (e) {
-			this.log.debug('Error unpublishing snapshot', e)
-		}
+		}).catch(e => this.log.debug('Error publishing snapshot', e))
+	}
+
+	private unpublishSnapshot(file: TlaFile) {
+		this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug).catch(e => this.log.debug('Error unpublishing', e))
+		this.env.ROOM_SNAPSHOTS.delete(getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }))
 	}
 }