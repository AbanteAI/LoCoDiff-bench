import { DB, TlaFile, TlaFileState, TlaRow, TlaUser, ZTable } from '@tldraw/dotcom-shared'
import {
	ExecutionQueue,
	assert,
	assertExists,
	exhaustiveSwitchError,
	groupBy,
	promiseWithResolve,
	sleep,
	stringEnum,
	throttle,
	uniqueId,
} from '@tldraw/utils'
import { createSentry } from '@tldraw/worker-shared'
import { DurableObject } from 'cloudflare:workers'
import { Kysely, sql } from 'kysely'
import { LogicalReplicationService, Wal2Json, Wal2JsonPlugin } from 'pg-logical-replication'
import { Logger } from './Logger'
import { UserChangeCollator } from './UserChangeCollator'
import { ZReplicationEventWithoutSequenceInfo } from './UserDataSyncer'
import { createPostgresConnectionPool } from './postgres'
import {
	Analytics,
	Environment,
	TLPostgresReplicatorEvent,
	TLPostgresReplicatorRebootSource,
} from './types'
import { EventData, writeDataPoint } from './utils/analytics'
import { getR2KeyForRoom } from './r2'
import {
	getRoomDurableObject,
	getStatsDurableObjct,
	getUserDurableObject,
} from './utils/durableObjects'

interface ReplicationEvent {
	command: 'insert' | 'update' | 'delete'
	table: keyof typeof relevantTables
}

const relevantTables = stringEnum(
	'user',
	'file',
	'file_state',
	'user_mutation_number'
)

interface Change {
	event: ReplicationEvent
	userId: string
	fileId: string | null
	row: TlaRow
	previous?: TlaRow
}

interface Migration {
	id: string
	code: string
}

const migrations: Migration[] = [
	{
		id: '000_seed',
		code: `
			CREATE TABLE IF NOT EXISTS active_user (
				id TEXT PRIMARY KEY
			);
			CREATE TABLE IF NOT EXISTS user_file_subscriptions (
				userId TEXT,
				fileId TEXT,
				PRIMARY KEY (userId, fileId),
				FOREIGN KEY (userId) REFERENCES active_user(id) ON DELETE CASCADE
			);
			CREATE TABLE migrations (
				id TEXT PRIMARY KEY,
				code TEXT NOT NULL
			);
		`,
	},
	{
		id: '001_add_sequence_number',
		code: `
			ALTER TABLE active_user ADD COLUMN sequenceNumber INTEGER NOT NULL DEFAULT 0;
			ALTER TABLE active_user ADD COLUMN sequenceIdSuffix TEXT NOT NULL DEFAULT '';
		`,
	},
	{
		id: '002_add_last_updated_at',
		code: `
			ALTER TABLE active_user ADD COLUMN lastUpdatedAt INTEGER NOT NULL DEFAULT 0;
		`,
	},
	{
		id: '003_add_lsn_tracking',
		code: `
			CREATE TABLE IF NOT EXISTS meta (
				lsn TEXT PRIMARY KEY,
				slotName TEXT NOT NULL
			);
			INSERT INTO meta (lsn, slotName) VALUES ('0/0', 'init');
		`,
	},
	{
		id: '004_keep_event_log',
		code: `
		  CREATE TABLE history (
				lsn TEXT NOT NULL,
				userId TEXT NOT NULL,
				fileId TEXT,
				json TEXT NOT NULL,
				timestamp INTEGER NOT NULL DEFAULT 0
			);
			CREATE INDEX history_lsn_userId ON history (lsn, userId);
			CREATE INDEX history_lsn_fileId ON history (lsn, fileId);
			PRAGMA optimize;
		`,
	},
	{
		id: '005_add_history_timestamp',
		code: `
			ALTER TABLE history ADD COLUMN timestamp INTEGER NOT NULL DEFAULT 0;
		`,
	},
]

const ONE_MINUTE = 60 * 1000
const PRUNE_INTERVAL = 10 * ONE_MINUTE
const MAX_HISTORY_ROWS = 20_000

type PromiseWithResolve = ReturnType<typeof promiseWithResolve>

const relevantTables = stringEnum(
	'user',
	'file',
	'file_state',
	'user_mutation_number'
)

export class TLPostgresReplicator extends DurableObject<Environment> {
	private sqlite: SqlStorage
	private state: { type: 'init'; promise: PromiseWithResolve } | {
		type: 'connecting'
		promise: PromiseWithResolve
	} | {
		type: 'connected'
		sequenceId: string
		subscription: any
	} = {
		type: 'init',
		promise: promiseWithResolve(),
	}

	private measure?: Analytics
	private postgresUpdates = 0
	private lastPostgresMessageTime = Date.now()
	private lastRpmLogTime = Date.now()
	private lastUserPruneTime = Date.now()

	private readonly wal2jsonPlugin = new Wal2JsonPlugin({
		addTables:
			'public.user,public.file,public.file_state,public.user_mutation_number,public.replicator_boot_id',
	})

	private readonly replicationService: LogicalReplicationService
	private readonly slotName: string
	private readonly db: Kysely<DB>

	private log: Logger
	private queue = new ExecutionQueue()
	private userDispatchQueues = new Map<string, ExecutionQueue>()

	constructor(ctx: DurableObjectState, env: Environment) {
		super(ctx, env)
		this.measure = env.MEASURE
		this.sentry = createSentry(ctx, env)
		this.sqlite = this.ctx.storage.sql

		this.log = new Logger(env, 'TLPostgresReplicator', this.sentry)
		this.db = createPostgresConnectionPool(env, 'TLPostgresReplicator', 100)

		const slotNameMaxLength = 63
		const slotNamePrefix = 'tlpr_'
		const durableObjectId = this.ctx.id.toString()
		this.slotName =
			slotNamePrefix + durableObjectId.slice(0, slotNameMaxLength - slotNamePrefix.length)

		this.replicationService = new LogicalReplicationService(
			{
				database: 'postgres',
				connectionString: env.BOTCOM_POSTGRES_CONNECTION_STRING,
				application_name: this.slotName,
			},
			{
				acknowledge: { auto: false, timeoutSeconds: 10 },
			}
		)

		this.ctx
			.blockConcurrencyWhile(async () => {
				await this._migrate()
				const existing = this.sqlite.exec('SELECT slotName FROM meta').one().slotName
				if (existing !== this.slotName) {
					this.sqlite.exec('UPDATE meta SET slotName = ?, lsn = null', this.slotName)
				}
				await sql`SELECT pg_create_logical_replication_slot(${this.slotName}, 'wal2json') WHERE NOT EXISTS (
					SELECT 1 FROM pg_replication_slots WHERE slot_name = ${this.slotName}
				)`.execute(this.db)
				this.pruneHistory()
			})
			.then(() =>
				this.reboot('constructor', false).catch(e => {
					this.captureException(e)
					this.__test__panic()
				})
			)

		this.alarm()
	}

	private captureException = (exception: unknown, extras?: Record<string, unknown>) => {
		this.sentry?.withScope(scope => {
			if (extras) scope.setExtras(extras)
			this.sentry?.captureException(exception as any)
		})
		if (!this.sentry) {
			console.error(`[TLPostgresReplicator]:`, exception)
		}
		this.log.debug('ERROR', (exception as any)?.stack ?? exception)
	}

	private async _migrate() {
		let applied: Migration[]
		try {
			applied = this.sqlite.exec('SELECT id, code FROM migrations ORDER BY id ASC').toArray() as any
		} catch {
			this._applyMigration(0)
			applied = [migrations[0]]
		}
		for (let i = 0; i < applied.length; i++) {
			if (applied[i].id !== migrations[i].id) {
				throw new Error('TLPostgresReplicator migrations have changed!!')
			}
		}
		for (let i = applied.length; i < migrations.length; i++) {
			this._applyMigration(i)
		}
	}

	private _applyMigration(index: number) {
		this.log.debug('running migration', migrations[index].id)
		this.sqlite.exec(migrations[index].code)
		this.sqlite.exec('INSERT INTO migrations (id, code) VALUES (?, ?)', migrations[index].id, migrations[index].code)
		this.log.debug('ran migration', migrations[index].id)
	}

	__test__forceReboot() {
		this.reboot('test')
	}

	__test__panic() {
		this.ctx.abort()
	}

	override async alarm() {
		try {
			this.ctx.storage.setAlarm(Date.now() + 3000)
			this.maybeLogRpm()

			if (Date.now() - this.lastPostgresMessageTime > 10000) {
				this.log.debug('rebooting due to inactivity')
				this.reboot('inactivity')
			} else if (Date.now() - this.lastPostgresMessageTime > 5000) {
				this.log.debug('triggering heartbeat due to inactivity')
				await this.replicationService.acknowledge('0/0')
			}

			await this.maybePrune()
		} catch (e) {
			this.captureException(e)
		}
	}

	private async maybePrune() {
		const now = Date.now()
		if (now - this.lastUserPruneTime < PRUNE_INTERVAL) return
		const cutoff = now - PRUNE_INTERVAL
		const stale = this.sqlite.exec('SELECT id FROM active_user WHERE lastUpdatedAt < ?', cutoff).toArray() as { id: string }[]
		for (const { id } of stale) {
			await this.unregisterUser(id)
		}
		this.pruneHistory()
		this.lastUserPruneTime = Date.now()
	}

	private pruneHistory() {
		this.sqlite.exec(`
      WITH max AS (SELECT MAX(rowid) AS max_id FROM history)
      DELETE FROM history
      WHERE rowid < (SELECT max_id FROM max) - ${MAX_HISTORY_ROWS};
    `)
	}

	private maybeLogRpm() {
		const now = Date.now()
		if (this.postgresUpdates > 0 && now - this.lastRpmLogTime > ONE_MINUTE) {
			this.logEvent({ type: 'rpm', rpm: this.postgresUpdates })
			this.postgresUpdates = 0
			this.lastRpmLogTime = now
		}
	}

	private async reboot(source: TLPostgresReplicatorRebootSource, delay = true) {
		this.logEvent({ type: 'reboot', source })
		if (!this.queue.isEmpty()) {
			this.log.debug('reboot already in progress.', source)
			return
		}
		this.log.debug('reboot push', source)
		await this.queue.push(async () => {
			if (delay) await sleep(2000)
			const start = Date.now()
			this.log.debug('rebooting', source)
			const res = await Promise.race([this.boot().then(() => 'ok'), sleep(3000).then(() => 'timeout')])
				.catch(e => {
					this.logEvent({ type: 'reboot_error' })
					this.log.debug('reboot error', e.stack)
					this.captureException(e)
					return 'error'
				})
			this.log.debug('rebooted', res)
			if (res === 'ok') {
				this.logEvent({ type: 'reboot_duration', duration: Date.now() - start })
			} else {
				this.reboot('retry')
			}
		})
	}

	private async boot() {
		this.log.debug('booting')
		this.lastPostgresMessageTime = Date.now()
		this.replicationService.removeAllListeners()
		this.log.debug('stopping replication')
		this.replicationService.stop().catch(this.captureException)
		this.log.debug('terminating backend')
		await sql`
      SELECT pg_terminate_backend(pid)
      FROM pg_replication_slots
      JOIN pg_stat_replication AS r ON r.slot_name = pg_replication_slots.slot_name
      WHERE slot_name = ${this.slotName} AND active
    `.execute(this.db)

		const promise = 'promise' in this.state ? this.state.promise : promiseWithResolve()
		this.state = { type: 'connecting', promise }

		this.replicationService.on('heartbeat', (lsn: string) => {
			this.lastPostgresMessageTime = Date.now()
			this.reportPostgresUpdate()
			this.replicationService.acknowledge(lsn).catch(this.captureException)
		})

		this.replicationService.addListener('data', (lsn: string, log: Wal2Json.Output) => {
			try {
				if (this.state.type !== 'connected') return
				this.postgresUpdates++
				this.lastPostgresMessageTime = Date.now()
				this.reportPostgresUpdate()
				const collator = new UserChangeCollator()
				for (const raw of log.change) {
					if (raw.kind === 'message' && (raw as any).prefix === 'requestLsnUpdate') {
						this.requestLsnUpdate((raw as any).content)
						continue
					}
					const change = this.parseChange(raw)
					if (!change) {
						this.log.debug('IGNORING CHANGE', raw)
						continue
					}
					this.handleEvent(collator, change, false)
					this.sqlite.exec(
						'INSERT INTO history (lsn, userId, fileId, json, timestamp) VALUES (?, ?, ?, ?, ?)',
						lsn,
						change.userId,
						change.fileId,
						JSON.stringify(change),
						Date.now()
					)
				}
				this.log.debug('changes', collator.changes.size)
				for (const [userId, changes] of collator.changes) {
					this._messageUser(userId, { type: 'changes', changes, lsn })
				}
				this.commitLsn(lsn)
			} catch (e) {
				this.captureException(e)
			}
		})

		this.replicationService.addListener('start', () => {
			if (!this.getCurrentLsn()) {
				sql`
          INSERT INTO replicator_boot_id (replicatorId, bootId)
          VALUES (${this.ctx.id.toString()}, ${uniqueId()})
          ON CONFLICT (replicatorId)
          DO UPDATE SET bootId = excluded.bootId
        `.execute(this.db)
			}
		})

		this.replicationService.on('error', e => {
			this.captureException(e)
			this.reboot('retry')
		})

		this.replicationService.subscribe(this.wal2jsonPlugin, this.slotName).catch(e => {
			this.captureException(e)
			this.reboot('retry')
		})

		this.state = {
			type: 'connected',
			sequenceId: this.slotName,
			subscription: null,
		}
		promise.resolve(null)
	}

	private getCurrentLsn() {
		return this.sqlite.exec('SELECT lsn FROM meta').one().lsn as string | null
	}

	private async commitLsn(lsn: string) {
		const ok = await this.replicationService.acknowledge(lsn)
		if (ok) {
			const prev = this.getCurrentLsn()
			this.sqlite.exec('UPDATE meta SET lsn = ?', lsn)
			if (!prev) this.onDidSequenceBreak()
		} else {
			this.captureException(new Error('acknowledge failed'))
			this.reboot('retry')
		}
	}

	private onDidSequenceBreak() {
		const users = this.sqlite.exec('SELECT id FROM active_user').toArray() as { id: string }[]
		this.reportActiveUsers()
		const BATCH = 5
		const tick = () => {
			if (users.length === 0) return
			const batch = users.splice(0, BATCH)
			for (const u of batch) {
				this._messageUser(u.id, { type: 'maybe_force_reboot' })
			}
			setTimeout(tick, 10)
		}
		tick()
	}

	private parseChange(change: Wal2Json.Change): Change | null {
		const table = change.table as ReplicationEvent['table']
		if (change.kind === 'truncate' || change.kind === 'message' || !(table in relevantTables)) {
			return null
		}
		const row = {} as any
		const previous = {} as any
		if (change.kind === 'delete') {
			const old = change.oldkeys!
			old.keynames.forEach((k, i) => (row[k] = old.keyvalues[i]))
		} else if (change.kind === 'update') {
			const old = change.oldkeys!
			old.keynames.forEach((k, i) => (previous[k] = old.keyvalues[i]))
			change.columnnames.forEach((c, i) => (row[c] = change.columnvalues[i]))
		} else {
			change.columnnames.forEach((c, i) => (row[c] = change.columnvalues[i]))
		}
		let userId: string | null = null
		let fileId: string | null = null
		switch (table) {
			case 'user':
				userId = (row as TlaUser).id
				break
			case 'file':
				userId = (row as TlaFile).ownerId
				fileId = (row as TlaFile).id
				break
			case 'file_state':
				userId = (row as TlaFileState).userId
				fileId = (row as TlaFileState).fileId
				break
			case 'user_mutation_number':
				userId = (row as { userId: string }).userId
				break
		}
		if (!userId) return null
		return { row, previous, event: { command: change.kind, table }, userId, fileId }
	}

	private handleEvent(
		collator: UserChangeCollator,
		change: Change,
		isReplay: boolean
	) {
		if (this.state.type !== 'connected') return
		const { command, table } = change.event
		this.log.debug('handleEvent', change)
		assert(this.state.type === 'connected')
		try {
			switch (table) {
				case 'user_mutation_number':
					this.handleMutationConfirmationEvent(collator, change.row, change.event)
					break
				case 'file_state':
					this.handleFileStateEvent(collator, change.row, change.event)
					break
				case 'file':
					this.handleFileEvent(collator, change.row, change.previous, change.event, isReplay)
					break
				case 'user':
					this.handleUserEvent(collator, change.row, change.event)
					break
				default: {
					const _x: never = table
					this.captureException(new Error(`Unhandled table: ${table}`), { change })
					break
				}
			}
		} catch (e) {
			this.captureException(e)
		}
	}

	private handleMutationConfirmationEvent(
		collator: UserChangeCollator,
		row: TlaRow,
		event: ReplicationEvent
	) {
		if (event.command === 'delete') return
		assertExists(row['mutationNumber'], 'mutationNumber is required')
		collator.addChange(row.userId, {
			type: 'mutation_commit',
			mutationNumber: row.mutationNumber,
			userId: row.userId,
		})
	}

	private handleFileStateEvent(
		collator: UserChangeCollator,
		row: TlaRow,
		event: ReplicationEvent
	) {
		assertExists(row['userId'], 'userId is required')
		if (!this.userIsActive(row.userId)) return
		if (event.command === 'insert') {
			this.sqlite.exec(
				`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
				row.userId,
				row.fileId
			)
			assertExists(row['isFileOwner'], 'isFileOwner is required')
			if (!row.isFileOwner) {
				this.sqlite.exec(
					`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
					row.userId,
					row.fileId
				)
			}
		} else if (event.command === 'delete') {
			this.sqlite.exec(
				`DELETE FROM user_file_subscriptions WHERE userId = ? AND fileId = ?`,
				row.userId,
				row.fileId
			)
		}
		collator.addChange(row.userId, {
			type: 'row_update',
			row,
			table: event.table as ZTable,
			event: event.command,
			userId: row.userId,
		})
	}

	private handleFileEvent(
		collator: UserChangeCollator,
		row: TlaRow,
		previous: TlaRow | undefined,
		event: ReplicationEvent,
		isReplay: boolean
	) {
		assertExists(row['id'], 'row id is required')
		const impacted = [
			row.ownerId,
			...this.sqlite
				.exec('SELECT userId FROM user_file_subscriptions WHERE fileId = ?', row.id)
				.toArray()
				.map(x => x.userId),
		]
		if (event.command === 'delete') {
			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidDelete(row)
			this.sqlite.exec(`DELETE FROM user_file_subscriptions WHERE fileId = ?`, row.id)
		} else if (event.command === 'update') {
			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordDidUpdate(row)
			if (previous && !isReplay) {
				const prev = previous as TlaFile
				if (row.published && !prev.published) this.publishSnapshot(row)
				else if (!row.published && prev.published) this.unpublishSnapshot(row)
				else if (row.published && row.lastPublished > prev.lastPublished) this.publishSnapshot(row)
			}
		} else if (event.command === 'insert') {
			if (!isReplay) getRoomDurableObject(this.env, row.id).appFileRecordCreated(row)
		}
		for (const u of impacted) {
			collator.addChange(u, {
				type: 'row_update',
				row,
				table: event.table as ZTable,
				event: event.command,
				userId: u,
			})
		}
	}

	private handleUserEvent(
		collator: UserChangeCollator,
		row: TlaRow,
		event: ReplicationEvent
	) {
		assertExists(row['id'], 'user id is required')
		this.log.debug('USER EVENT', event.command, row.id)
		collator.addChange(row.id, {
			type: 'row_update',
			row,
			table: event.table as ZTable,
			event: event.command,
			userId: row.id,
		})
	}

	private userIsActive(userId: string) {
		return this.sqlite.exec(`SELECT 1 FROM active_user WHERE id = ?`, userId).toArray().length > 0
	}

	private reportActiveUsers() {
		try {
			const { count } = this.sqlite.exec('SELECT COUNT(*) as count FROM active_user').one()
			this.logEvent({ type: 'active_users', count: count as number })
		} catch (e) {
			console.error('Error in reportActiveUsers', e)
		}
	}

	private reportPostgresUpdate = throttle(
		() => getStatsDurableObjct(this.env).recordReplicatorPostgresUpdate(),
		5000
	)

	private writeEvent(eventData: EventData) {
		writeDataPoint(this.sentry, this.measure, this.env, 'replicator', eventData)
	}

	logEvent(event: TLPostgresReplicatorEvent) {
		try {
			switch (event.type) {
				case 'reboot':
				case 'reboot_error':
				case 'register_user':
				case 'unregister_user':
				case 'get_file_record':
				case 'request_lsn_update':
				case 'prune':
					this.writeEvent({ blobs: [event.type] })
					break
				case 'reboot_duration':
					this.writeEvent({ blobs: [event.type], doubles: [event.duration] })
					break
				case 'rpm':
					this.writeEvent({ blobs: [event.type], doubles: [event.rpm] })
					break
				case 'active_users':
					this.writeEvent({ blobs: [event.type], doubles: [event.count] })
					break
				default:
					exhaustiveSwitchError(event)
			}
		} catch (e) {
			this.captureException(e)
		}
	}

	async getDiagnostics() {
		const earliest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]
		const latest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid DESC LIMIT 1').toArray()[0]
		const active = this.sqlite.exec('SELECT COUNT(*) FROM active_user').one().count as number
		const meta = this.sqlite.exec('SELECT * FROM meta').one()
		return { earliestHistoryRow: earliest, latestHistoryRow: latest, activeUsers: active, meta }
	}

	async requestLsnUpdate(userId: string) {
		try {
			this.log.debug('requestLsnUpdate', userId)
			this.logEvent({ type: 'request_lsn_update' })
			const lsn = assertExists(this.getCurrentLsn(), 'lsn should exist')
			this._messageUser(userId, { type: 'changes', changes: [], lsn })
		} catch (e) {
			this.captureException(e)
			throw e
		}
	}

	private async _messageUser(userId: string, event: ZReplicationEventWithoutSequenceInfo) {
		this.log.debug('messageUser', userId, event)
		if (!this.userIsActive(userId)) {
			this.log.debug('user is not active', userId)
			return
		}
		try {
			let q = this.userDispatchQueues.get(userId)
			if (!q) {
				q = new ExecutionQueue()
				this.userDispatchQueues.set(userId, q)
			}
			const { sequenceNumber, sequenceIdSuffix } =
				this.sqlite
					.exec(
						`UPDATE active_user SET sequenceNumber = sequenceNumber + 1, lastUpdatedAt = ? WHERE id = ? RETURNING sequenceNumber, sequenceIdSuffix`,
						Date.now(),
						userId
					)
					.one()
			assert(typeof sequenceNumber === 'number', 'sequenceNumber should be a number')
			assert(typeof sequenceIdSuffix === 'string', 'sequenceIdSuffix should be a string')

			await q.push(async () => {
				const user = getUserDurableObject(this.env, userId)
				const res = await user.handleReplicationEvent({
					...event,
					sequenceNumber,
					sequenceId: this.slotName + sequenceIdSuffix,
				})
				if (res === 'unregister') {
					this.log.debug('unregistering user', userId, event)
					await this.unregisterUser(userId)
				}
			})
		} catch (e) {
			this.captureException(e)
		}
	}

	private getResumeType(
		lsn: string,
		userId: string,
		guestFileIds: string[]
	): { type: 'done'; messages?: ZReplicationEventWithoutSequenceInfo[] } | { type: 'reboot' } {
		const current = assertExists(this.getCurrentLsn())
		if (lsn >= current) {
			this.log.debug('getResumeType: resuming from current lsn', lsn, '>=', current)
			return { type: 'done' }
		}
		const earliest = this.sqlite.exec<{ lsn: string }>('SELECT lsn FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]?.lsn
		if (!earliest || lsn < earliest) {
			this.log.debug('getResumeType: not enough history', lsn, '<', earliest)
			return { type: 'reboot' }
		}
		const history = this.sqlite
			.exec<{ json: string; lsn: string }>(
				`
			SELECT lsn, json
			FROM history
			WHERE
			  lsn > ?
				AND (
				  userId = ? 
					OR fileId IN (${guestFileIds.map((_, i) => `$${i + 1}`).join(', ')})
				)
			ORDER BY rowid ASC
		`,
				lsn,
				userId,
				...guestFileIds
			)
			.toArray()
			.map(({ json, lsn }) => ({ change: JSON.parse(json) as Change, lsn }))

		if (history.length === 0) {
			this.log.debug('getResumeType: no history to replay, all good', lsn)
			return { type: 'done' }
		}

		const byLsn = groupBy(history, x => x.lsn)
		const messages: ZReplicationEventWithoutSequenceInfo[] = []
		for (const lsnKey of Object.keys(byLsn).sort()) {
			const collator = new UserChangeCollator()
			for (const h of byLsn[lsnKey]) {
				this.handleEvent(collator, h.change, true)
			}
			const changes = collator.changes.get(userId)
			if (changes?.length) {
				messages.push({ type: 'changes', changes, lsn: lsnKey })
			}
		}
		this.log.debug('getResumeType: resuming', messages.length, messages)
		return { type: 'done', messages }
	}

	async registerUser({
		userId,
		lsn,
		guestFileIds,
		bootId,
	}: {
		userId: string
		lsn: string
		guestFileIds: string[]
		bootId: string
	}): Promise<{ type: 'done'; sequenceId: string; sequenceNumber: number } | { type: 'reboot' }> {
		try {
			while (!this.getCurrentLsn()) await sleep(100)
			this.log.debug('registering user', userId, lsn, bootId, guestFileIds)
			this.logEvent({ type: 'register_user' })

			this.sqlite.exec('DELETE FROM active_user WHERE id = ?', userId)
			this.sqlite.exec(
				`INSERT INTO active_user (id, sequenceNumber, sequenceIdSuffix, lastUpdatedAt) VALUES (?, 0, ?, ?)`,
				userId,
				bootId,
				Date.now()
			)

			this.sqlite.exec('DELETE FROM user_file_subscriptions WHERE userId = ?', userId)
			for (const fid of guestFileIds) {
				this.sqlite.exec(
					`INSERT INTO user_file_subscriptions (userId, fileId) VALUES (?, ?) ON CONFLICT DO NOTHING`,
					userId,
					fid
				)
			}
			this.reportActiveUsers()
			this.log.debug('inserted active user')

			const resume = this.getResumeType(lsn, userId, guestFileIds)
			if (resume.type === 'reboot') return { type: 'reboot' }
			if (resume.messages) {
				for (const m of resume.messages) this._messageUser(userId, m)
			}

			return {
				type: 'done',
				sequenceId: this.slotName + bootId,
				sequenceNumber: 0,
			}
		} catch (e) {
			this.captureException(e)
			throw e
		}
	}

	async unregisterUser(userId: string) {
		this.logEvent({ type: 'unregister_user' })
		this.sqlite.exec('DELETE FROM active_user WHERE id = ?', userId)
		const q = this.userDispatchQueues.get(userId)
		if (q) {
			q.close()
			this.userDispatchQueues.delete(userId)
		}
		this.reportActiveUsers()
	}

	async getDiagnostics() {
		const earliest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid ASC LIMIT 1').toArray()[0]
		const latest = this.sqlite.exec('SELECT * FROM history ORDER BY rowid DESC LIMIT 1').toArray()[0]
		const active = this.sqlite.exec('SELECT COUNT(*) FROM active_user').one().count as number
		const meta = this.sqlite.exec('SELECT * FROM meta').one()
		return { earliestHistoryRow: earliest, latestHistoryRow: latest, activeUsers: active, meta }
	}

	private publishSnapshot(file: TlaFile) {
		getRoomDurableObject(this.env, file.id).awaitPersist().then(async () => {
			const snapshot = await this.env.ROOMS.get(getR2KeyForRoom({ slug: file.id, isApp: true }))
			if (!snapshot) throw new Error('Snapshot not found')
			const blob = await snapshot.blob()
			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.put(file.publishedSlug, file.id)
			await this.env.ROOM_SNAPSHOTS.put(
				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }),
				blob
			)
			const now = new Date().toISOString()
			await this.env.ROOM_SNAPSHOTS.put(
				getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}|${now}`, isApp: true }),
				blob
			)
		}).catch(e => this.log.debug('Error publishing snapshot', e))
	}

	private unpublishSnapshot(file: TlaFile) {
		this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(file.publishedSlug).catch(e => this.log.debug('Error unpublishing', e))
		this.env.ROOM_SNAPSHOTS.delete(getR2KeyForRoom({ slug: `${file.id}/${file.publishedSlug}`, isApp: true }))
	}
}