```javascript
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails react-core
 * @jest-environment node
 */

'use strict';

let React;
let ReactNoopFlightServer;
let ReactNoopFlightClient;
let cache;

describe('ReactCache', () => {
  beforeEach(() => {
    jest.resetModules();
    jest.mock('react', () => require('react/react.react-server'));
    React = require('react');
    ReactNoopFlightServer = require('react-noop-renderer/flight-server');
    ReactNoopFlightClient = require('react-noop-renderer/flight-client');

    cache = React.cache;
  });

  // @gate enableCache
  it('allows per-request caching in server contexts', async () => {
    const Root = cache((a, b) => ({a, b}));
    function Server({a, b}) {
      const x = Root(a, b);
      const y = Root(a, b);
      return 'Same: ' + (x === y);
    }

    const transport = ReactNoopFlightServer.render(<Server a="a" b="b" />);
    const model = await ReactNoopFlightServer.read(transport);
    const Client = ReactNoopFlightClient.read(model);

    const output = await Client();
    expect(output).toBe('Same: true');
  });

  it('does not cache in client contexts', async () => {
    jest.dontMock('react');
    jest.resetModules();

    const ClientReact = require('react');
    const clientCache = ClientReact.cache;
    const Root = clientCache((a, b) => ({a, b}));
    const x = Root('a', 'b');
    const y = Root('a', 'b');

    expect(x === y).toBe(false);
  });

  it('cache works across render boundaries on the server', async () => {
    const Root = cache((a, b) => ({a, b}));
    function Test({a, b}) {
      const x = Root(a, b);
      const y = Root(a, b);
      return 'Same: ' + (x === y);
    }
    function Server({a, b, c, d}) {
      return (
        <>
          <Test a={a} b={b} />
          <Test a={c} b={d} />
        </>
      );
    }

    const transport = ReactNoopFlightServer.render(
      <Server a="a" b="b" c="c" d="d" />,
    );
    const model = await ReactNoopFlightServer.read(transport);
    const Client = ReactNoopFlightClient.read(model);

    const output = await Client();
    expect(output).toBe('Same: trueSame: true');
  });

  it('two caches are independent on the server', async () => {
    const Root = cache((a, b) => ({a, b}));
    const Root2 = cache((a, b) => ({a, b}));
    function Test({a, b}) {
      const x = Root(a, b);
      const y = Root2(a, b);
      return 'Same: ' + (x === y);
    }
    function Server({a, b}) {
      return <Test a={a} b={b} />;
    }

    const transport = ReactNoopFlightServer.render(<Server a="a" b="b" />);
    const model = await ReactNoopFlightServer.read(transport);
    const Client = ReactNoopFlightClient.read(model);

    const output = await Client();
    expect(output).toBe('Same: false');
  });
});
```