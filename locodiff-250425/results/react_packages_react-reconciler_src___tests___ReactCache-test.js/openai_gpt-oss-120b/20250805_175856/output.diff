
index 111679afa..f9dd30368 100644
--- a/react_packages_react-reconciler_src___tests___ReactCache-test.js_expectedoutput.txt (expected):tmp/tmpzj6_t542_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactCache-test.js_extracted.txt (actual):tmp/tmp2j26ttvq_actual.txt	
@@ -30,6 +30,7 @@ describe('ReactCache', () => {
     __unmockReact();
   });
 
+  // @gate enableCache
   it('cache objects and primitive arguments and a mix of them', async () => {
     const types = cache((a, b) => ({a: typeof a, b: typeof b}));
     function Print({a, b}) {
@@ -50,6 +51,7 @@ describe('ReactCache', () => {
       return (types(a) === types(a, b)).toString() + ' ';
     }
 
+    // Test 1
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -66,6 +68,7 @@ describe('ReactCache', () => {
       ).join(''),
     ).toEqual('string string true false false false ');
 
+    // Test 2
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -83,6 +86,7 @@ describe('ReactCache', () => {
     ).toEqual('string object true false false false ');
 
     const obj = {};
+    // Test 3
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -100,6 +104,7 @@ describe('ReactCache', () => {
     ).toEqual('string object true false false false ');
 
     const sameObj = {};
+    // Test 4
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -118,6 +123,7 @@ describe('ReactCache', () => {
 
     const objA = {};
     const objB = {};
+    // Test 5
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -135,6 +141,7 @@ describe('ReactCache', () => {
     ).toEqual('object object true false false false ');
 
     const sameSymbol = Symbol();
+    // Test 6
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -149,9 +156,10 @@ describe('ReactCache', () => {
           ),
         )
       ).join(''),
-    ).toEqual('symbol symbol true true false false ');
+    ).toEqual('symbol symbol true false false false ');
 
     const notANumber = +'nan';
+    // Test 7
     expect(
       (
         await ReactNoopFlightClient.read(
@@ -169,6 +177,7 @@ describe('ReactCache', () => {
     ).toEqual('number number true false false false ');
   });
 
+  // @gate enableCache
   it('cached functions that throw should cache the error', async () => {
     const throws = cache(v => {
       throw new Error(v);
@@ -192,15 +201,15 @@ describe('ReactCache', () => {
       } catch (e) {
         z = e;
       }
-
       return 'Blank';
     }
-
+    // Server render
     ReactNoopFlightServer.render(<Test />);
     expect(x).toBe(y);
     expect(z).not.toBe(x);
   });
 
+  // @gate enableCache
   it('introspection of returned wrapper function is same on client and server', async () => {
     // When the variant flag is true, test the client version of `cache`.
     if (gate(flags => flags.variant)) {
@@ -213,6 +222,7 @@ describe('ReactCache', () => {
     function foo(a, b, c) {
       return a + b + c;
     }
+    // Set a custom display name (should be stripped)
     foo.displayName = 'Custom display name';
 
     const cachedFoo = cache(foo);
