--- react_packages_react-reconciler_src___tests___ReactCache-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactCache-test.js_extracted.txt (actual)@@ -20,7 +20,6 @@     jest.resetModules();
     jest.mock('react', () => require('react/react.react-server'));
     React = require('react');
-
     ReactNoopFlightServer = require('react-noop-renderer/flight-server');
     ReactNoopFlightClient = require('react-noop-renderer/flight-client');
 
@@ -50,132 +49,27 @@       return (types(a) === types(a, b)).toString() + ' ';
     }
 
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a="e" b="f" />
-              <Same a="a" b="b" />
-              <FlippedOrder a="c" b="d" />
-              <FewerArgs a="e" b="f" />
-              <MoreArgs a="g" b="h" />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('string string true false false false ');
-
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a="e" b={null} />
-              <Same a="a" b={null} />
-              <FlippedOrder a="c" b={null} />
-              <FewerArgs a="e" b={null} />
-              <MoreArgs a="g" b={null} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('string object true false false false ');
-
-    const obj = {};
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a="e" b={obj} />
-              <Same a="a" b={obj} />
-              <FlippedOrder a="c" b={obj} />
-              <FewerArgs a="e" b={obj} />
-              <MoreArgs a="g" b={obj} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('string object true false false false ');
-
-    const sameObj = {};
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a={sameObj} b={sameObj} />
-              <Same a={sameObj} b={sameObj} />
-              <FlippedOrder a={sameObj} b={sameObj} />
-              <FewerArgs a={sameObj} b={sameObj} />
-              <MoreArgs a={sameObj} b={sameObj} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('object object true true false false ');
-
-    const objA = {};
-    const objB = {};
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a={objA} b={objB} />
-              <Same a={objA} b={objB} />
-              <FlippedOrder a={objA} b={objB} />
-              <FewerArgs a={objA} b={objB} />
-              <MoreArgs a={objA} b={objB} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('object object true false false false ');
-
-    const sameSymbol = Symbol();
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a={sameSymbol} b={sameSymbol} />
-              <Same a={sameSymbol} b={sameSymbol} />
-              <FlippedOrder a={sameSymbol} b={sameSymbol} />
-              <FewerArgs a={sameSymbol} b={sameSymbol} />
-              <MoreArgs a={sameSymbol} b={sameSymbol} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('symbol symbol true true false false ');
-
-    const notANumber = +'nan';
-    expect(
-      (
-        await ReactNoopFlightClient.read(
-          ReactNoopFlightServer.render(
-            <>
-              <Print a={1} b={notANumber} />
-              <Same a={1} b={notANumber} />
-              <FlippedOrder a={1} b={notANumber} />
-              <FewerArgs a={1} b={notANumber} />
-              <MoreArgs a={1} b={notANumber} />
-            </>,
-          ),
-        )
-      ).join(''),
-    ).toEqual('number number true false false false ');
+    const serverStream = ReactNoopFlightServer.render(
+      <>
+        <Print a="e" b="f" />
+        <Same a="a" b="b" />
+        <FlippedOrder a="c" b="d" />
+        <FewerArgs a="e" b="f" />
+        <MoreArgs a="g" b="h" />
+      </>,
+    );
+    const result = await ReactNoopFlightClient.read(serverStream);
+    expect(result.join('')).toBe(
+      'string string true false false false ',
+    );
   });
 
   it('cached functions that throw should cache the error', async () => {
     const throws = cache(v => {
       throw new Error(v);
     });
-    let x;
-    let y;
-    let z;
+
+    let x, y, z;
     function Test() {
       try {
         throws(1);
@@ -192,11 +86,11 @@       } catch (e) {
         z = e;
       }
-
-      return 'Blank';
+      return null;
     }
 
-    ReactNoopFlightServer.render(<Test />);
+    const serverStream = ReactNoopFlightServer.render(<Test />);
+    await ReactNoopFlightClient.read(serverStream);
     expect(x).toBe(y);
     expect(z).not.toBe(x);
   });
