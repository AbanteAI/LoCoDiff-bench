
index ce6172c9..e7f928d3 100644
--- a/aider_aider_history.py_expectedoutput.txt (expected):tmp/tmpi2clmom4_expected.txt	
+++ b/aider_aider_history.py_extracted.txt (actual):tmp/tmptwlrbsex_actual.txt	
@@ -12,11 +12,6 @@ class ChatSummary:
         self.max_tokens = max_tokens
         self.token_count = self.models[0].token_count
 
-    def too_big(self, messages):
-        sized = self.tokenize(messages)
-        total = sum(tokens for tokens, _msg in sized)
-        return total > self.max_tokens
-
     def tokenize(self, messages):
         sized = []
         for msg in messages:
@@ -60,9 +55,6 @@ class ChatSummary:
         while messages[split_index - 1]["role"] != "assistant" and split_index > 1:
             split_index -= 1
 
-        if split_index <= min_split:
-            return self.summarize_all(messages)
-
         head = messages[:split_index]
         tail = messages[split_index:]
 
@@ -86,7 +78,7 @@ class ChatSummary:
 
         summary = self.summarize_all(keep)
 
-        tail_tokens = sum(tokens for tokens, msg in sized[split_index:])
+        tail_tokens = sum(tokens for tokens, _msg in sized[split_index:])
         summary_tokens = self.token_count(summary)
 
         result = summary + tail
@@ -122,6 +114,34 @@ class ChatSummary:
 
         raise ValueError("summarizer unexpectedly failed for all models")
 
+    def summarize_chat_history_markdown(self, text):
+        messages = []
+        assistant = []
+        lines = text.splitlines(keepends=True)
+        for line in lines:
+            if line.startswith("# "):
+                continue
+            if line.startswith(">"):
+                continue
+            if line.startswith("#### /"):
+                continue
+
+            if line.startswith("#### "):
+                if assistant:
+                    assistant = "".join(assistant)
+                    if assistant.strip():
+                        messages.append(dict(role="assistant", content=assistant))
+                    assistant = []
+
+                content = line[5:]
+                if content.strip() and content.strip() != "<blank>":
+                    messages.append(dict(role="user", content=line[5:]))
+                continue
+
+            assistant.append(line)
+
+        return messages
+
 
 def main():
     parser = argparse.ArgumentParser()
