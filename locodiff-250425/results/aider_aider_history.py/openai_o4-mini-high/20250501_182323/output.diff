--- aider_aider_history.py_expectedoutput.txt (expected)+++ aider_aider_history.py_extracted.txt (actual)@@ -2,7 +2,7 @@ 
 from aider import models, prompts
 from aider.dump import dump  # noqa: F401
-
+from tqdm import tqdm
 
 class ChatSummary:
     def __init__(self, models=None, max_tokens=1024):
@@ -60,25 +60,21 @@         while messages[split_index - 1]["role"] != "assistant" and split_index > 1:
             split_index -= 1
 
-        if split_index <= min_split:
-            return self.summarize_all(messages)
-
         head = messages[:split_index]
         tail = messages[split_index:]
 
-        sized = sized[:split_index]
+        # Summarize head messages that fit into model max_input_tokens minus buffer
+        sized2 = sized[:split_index]
         head.reverse()
-        sized.reverse()
+        sized2.reverse()
         keep = []
-        total = 0
-
+        total2 = 0
         # These sometimes come set with value = None
         model_max_input_tokens = self.models[0].info.get("max_input_tokens") or 4096
         model_max_input_tokens -= 512
-
         for i in range(split_index):
-            total += sized[i][0]
-            if total > model_max_input_tokens:
+            total2 += sized2[i][0]
+            if total2 > model_max_input_tokens:
                 break
             keep.append(head[i])
 
@@ -106,6 +102,8 @@             if not content.endswith("\n"):
                 content += "\n"
 
+        dump(content)
+
         summarize_messages = [
             dict(role="system", content=prompts.summarize),
             dict(role="user", content=content),
@@ -119,8 +117,36 @@                     return [dict(role="user", content=summary)]
             except Exception as e:
                 print(f"Summarization failed for model {model.name}: {str(e)}")
+        raise ValueError("summarizer unexpectedly failed for all models")
 
-        raise ValueError("summarizer unexpectedly failed for all models")
+    def summarize_chat_history_markdown(self, text):
+        messages = []
+        assistant = []
+        lines = text.splitlines(keepends=True)
+        for line in tqdm(lines, desc="Summarizing chat history"):
+            if line.startswith("# "):
+                continue
+            if line.startswith(">"):
+                continue
+            if line.startswith("#### /"):
+                continue
+
+            if line.startswith("#### "):
+                if assistant:
+                    assistant = "".join(assistant)
+                    if assistant.strip():
+                        messages.append(dict(role="assistant", content=assistant))
+                    assistant = []
+
+                content = line[5:]
+                if content.strip() and content.strip() != "<blank>":
+                    messages.append(dict(role="user", content=line[5:]))
+                continue
+
+            assistant.append(line)
+
+        summary = self.summarize(messages[-40:])
+        return summary
 
 
 def main():
@@ -136,8 +162,4 @@         text = f.read()
 
     summary = summarizer.summarize_chat_history_markdown(text)
-    dump(summary)
-
-
-if __name__ == "__main__":
-    main()+    dump(summary)