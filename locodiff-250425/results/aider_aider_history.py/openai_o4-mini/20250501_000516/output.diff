
index ce6172c9..9ef6ee83 100644
--- a/aider_aider_history.py_expectedoutput.txt (expected):tmp/tmpd1kw86yl_expected.txt	
+++ b/aider_aider_history.py_extracted.txt (actual):tmp/tmpgz3pplse_actual.txt	
@@ -3,7 +3,6 @@ import argparse
 from aider import models, prompts
 from aider.dump import dump  # noqa: F401
 
-
 class ChatSummary:
     def __init__(self, models=None, max_tokens=1024):
         if not models:
@@ -60,9 +59,6 @@ class ChatSummary:
         while messages[split_index - 1]["role"] != "assistant" and split_index > 1:
             split_index -= 1
 
-        if split_index <= min_split:
-            return self.summarize_all(messages)
-
         head = messages[:split_index]
         tail = messages[split_index:]
 
@@ -71,7 +67,6 @@ class ChatSummary:
         sized.reverse()
         keep = []
         total = 0
-
         # These sometimes come set with value = None
         model_max_input_tokens = self.models[0].info.get("max_input_tokens") or 4096
         model_max_input_tokens -= 512
@@ -106,22 +101,44 @@ class ChatSummary:
             if not content.endswith("\n"):
                 content += "\n"
 
-        summarize_messages = [
+        dump(content)
+
+        messages = [
             dict(role="system", content=prompts.summarize),
             dict(role="user", content=content),
         ]
 
-        for model in self.models:
-            try:
-                summary = model.simple_send_with_retries(summarize_messages)
-                if summary is not None:
-                    summary = prompts.summary_prefix + summary
-                    return [dict(role="user", content=summary)]
-            except Exception as e:
-                print(f"Summarization failed for model {model.name}: {str(e)}")
+        summary = simple_send_with_retries(self.model.name, messages)
+        if summary is None:
+            raise ValueError(f"summarizer unexpectedly failed for {self.model.name}")
+        summary = prompts.summary_prefix + summary
 
-        raise ValueError("summarizer unexpectedly failed for all models")
+        return [dict(role="user", content=summary)]
 
+    def summarize_chat_history_markdown(self, text):
+        messages = []
+        assistant = []
+        lines = text.splitlines(keepends=True)
+        for line in tqdm(lines, desc="Summarizing chat history"):
+            if line.startswith("# "):
+                continue
+            if line.startswith(">"):
+                continue
+            if line.startswith("#### /"):
+                continue
+            if line.startswith("#### "):
+                if assistant:
+                    assistant = "".join(assistant)
+                    if assistant.strip():
+                        messages.append(dict(role="assistant", content=assistant))
+                    assistant = []
+                content = line[5:]
+                if content.strip() and content.strip() != "<blank>":
+                    messages.append(dict(role="user", content=line[5:]))
+                continue
+            assistant.append(line)
+        summary = self.summarize(messages[-40:])
+        return summary
 
 def main():
     parser = argparse.ArgumentParser()
@@ -136,8 +153,4 @@ def main():
         text = f.read()
 
     summary = summarizer.summarize_chat_history_markdown(text)
-    dump(summary)
-
-
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+    dump(summary)
\ No newline at end of file
