
index 6f97774c7..8f7440c36 100644
--- a/aider_aider_watch.py_expectedoutput.txt (expected):tmp/tmp571_tq36_expected.txt	
+++ b/aider_aider_watch.py_extracted.txt (actual):tmp/tmp6uzc3wig_actual.txt	
@@ -77,12 +77,12 @@ class FileWatcher:
         self.changed_files = set()
         self.gitignores = gitignores
 
+        coder.io.file_watcher = self
+
         self.gitignore_spec = load_gitignores(
             [Path(g) for g in self.gitignores] if self.gitignores else []
         )
 
-        coder.io.file_watcher = self
-
     def filter_func(self, change_type, path):
         """Filter function for the file watcher"""
         path_obj = Path(path)
@@ -105,8 +105,8 @@ class FileWatcher:
 
         # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            _, _, has_match = self.get_ai_comments(str(path_abs))
+            return has_match
         except Exception:
             return
 
@@ -221,7 +221,7 @@ class FileWatcher:
             res += f"\n{rel_fname}:\n"
 
             # Convert comment line numbers to line indices (0-based)
-            lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
+            lois = [ln - 1 for ln in line_nums if ln > 0]
 
             try:
                 context = TreeContext(
@@ -241,6 +241,7 @@ class FileWatcher:
                 context.add_context()
                 res += context.format()
             except ValueError:
+                # Fall back to just showing the comments if TreeContext fails
                 for ln, comment in zip(line_nums, comments):
                     res += f"  Line {ln}: {comment}\n"
 
@@ -286,14 +287,11 @@ def main():
     )
     args = parser.parse_args()
 
-    directory = args.directory
-    print(f"Watching source files in {directory}...")
-
     # Example ignore function that ignores files with "test" in the name
     def ignore_test_files(path):
         return "test" in path.name.lower()
 
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    watcher = FileWatcher(args.directory, gitignores=args.gitignore)
     try:
         watcher.start()
         while True:
