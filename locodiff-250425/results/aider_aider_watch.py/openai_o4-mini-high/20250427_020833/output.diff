--- aider_aider_watch.py_expectedoutput.txt (expected)+++ aider_aider_watch.py_extracted.txt (actual)@@ -1,12 +1,12 @@ import re
 import threading
 from pathlib import Path
-from typing import Optional
-
-from grep_ast import TreeContext
+from typing import Optional, Set
+
 from pathspec import PathSpec
 from pathspec.patterns import GitWildMatchPattern
 from watchfiles import watch
+from grep_ast import TreeContext
 
 from aider.dump import dump  # noqa
 from aider.watch_prompts import watch_ask_prompt, watch_code_prompt
@@ -20,7 +20,6 @@     patterns = [
         ".aider*",
         ".git",
-        # Common editor backup/temp files
         "*~",  # Emacs/vim backup
         "*.bak",  # Generic backup
         "*.swp",  # Vim swap
@@ -51,22 +50,30 @@         ".cache/",  # Cache directories
         ".pytest_cache/",  # Python test cache
         "coverage/",  # Code coverage reports
-    ]  # Always ignore
+    ]
     for path in gitignore_paths:
         if path.exists():
             with open(path) as f:
                 patterns.extend(f.readlines())
-
-    return PathSpec.from_lines(GitWildMatchPattern, patterns) if patterns else None
+    return PathSpec.from_lines(GitWildMatchPattern, patterns)
 
 
 class FileWatcher:
     """Watches source files for changes and AI comments"""
 
     # Compiled regex pattern for AI comments
-    ai_comment_pattern = re.compile(r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
-
-    def __init__(self, coder, gitignores=None, verbose=False, analytics=None, root=None):
+    ai_comment_pattern = re.compile(
+        r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE
+    )
+
+    def __init__(
+        self,
+        coder,
+        gitignores=None,
+        verbose=False,
+        analytics=None,
+        root=None,
+    ):
         self.coder = coder
         self.io = coder.io
         self.root = Path(root) if root else Path(coder.root)
@@ -95,18 +102,20 @@         if self.verbose:
             dump(rel_path)
 
-        if self.gitignore_spec and self.gitignore_spec.match_file(
-            rel_path.as_posix() + ("/" if path_abs.is_dir() else "")
+        if (
+            self.gitignore_spec
+            and self.gitignore_spec.match_file(
+                rel_path.as_posix() + ("/" if path_abs.is_dir() else "")
+            )
         ):
             return False
 
         if self.verbose:
             dump("ok", rel_path)
 
-        # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            _, _, has_match = self.get_ai_comments(str(path_abs))
+            return bool(has_match)
         except Exception:
             return
 
@@ -117,7 +126,8 @@                 str(path)
                 for path in self.root.iterdir()
                 if not self.gitignore_spec.match_file(
-                    path.relative_to(self.root).as_posix() + ("/" if path.is_dir() else "")
+                    path.relative_to(self.root).as_posix()
+                    + ("/" if path.is_dir() else "")
                 )
             ]
             # Fallback to watching root if all top-level items are filtered out
@@ -158,7 +168,9 @@         self.stop_event = threading.Event()
         self.changed_files = set()
 
-        self.watcher_thread = threading.Thread(target=self.watch_files, daemon=True)
+        self.watcher_thread = threading.Thread(
+            target=self.watch_files, daemon=True
+        )
         self.watcher_thread.start()
 
     def stop(self):
@@ -170,91 +182,18 @@             self.watcher_thread = None
             self.stop_event = None
 
-    def process_changes(self):
+    def get_changes(self):
         """Get any detected file changes"""
-
-        has_action = None
-        added = False
-        for fname in self.changed_files:
-            _, _, action = self.get_ai_comments(fname)
-            if action in ("!", "?"):
-                has_action = action
-
-            if fname in self.coder.abs_fnames:
-                continue
-            if self.analytics:
-                self.analytics.event("ai-comments file-add")
-            self.coder.abs_fnames.add(fname)
-            rel_fname = self.coder.get_rel_fname(fname)
-            if not added:
-                self.io.tool_output()
-                added = True
-            self.io.tool_output(f"Added {rel_fname} to the chat")
-
-        if not has_action:
-            if added:
-                self.io.tool_output(
-                    "End your comment with AI! to request changes or AI? to ask questions"
-                )
-            return ""
-
-        if self.analytics:
-            self.analytics.event("ai-comments execute")
-        self.io.tool_output("Processing your request...")
-
-        if has_action == "!":
-            res = watch_code_prompt
-        elif has_action == "?":
-            res = watch_ask_prompt
-
-        # Refresh all AI comments from tracked files
-        for fname in self.coder.abs_fnames:
-            line_nums, comments, _action = self.get_ai_comments(fname)
-            if not line_nums:
-                continue
-
-            code = self.io.read_text(fname)
-            if not code:
-                continue
-
-            rel_fname = self.coder.get_rel_fname(fname)
-            res += f"\n{rel_fname}:\n"
-
-            # Convert comment line numbers to line indices (0-based)
-            lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
-
-            try:
-                context = TreeContext(
-                    rel_fname,
-                    code,
-                    color=False,
-                    line_number=False,
-                    child_context=False,
-                    last_line=False,
-                    margin=0,
-                    mark_lois=True,
-                    loi_pad=3,
-                    show_top_of_file_parent_scope=False,
-                )
-                context.lines_of_interest = set()
-                context.add_lines_of_interest(lois)
-                context.add_context()
-                res += context.format()
-            except ValueError:
-                for ln, comment in zip(line_nums, comments):
-                    res += f"  Line {ln}: {comment}\n"
-
-        return res
+        return self.changed_files
 
     def get_ai_comments(self, filepath):
         """Extract AI comment line numbers, comments and action status from a file"""
         line_nums = []
         comments = []
-        has_action = None  # None, "!" or "?"
+        has_action = None
         content = self.io.read_text(filepath, silent=True)
         if not content:
             return None, None, None
-
         for i, line in enumerate(content.splitlines(), 1):
             if match := self.ai_comment_pattern.search(line):
                 comment = match.group(0).strip()
@@ -277,7 +216,9 @@     """Example usage of the file watcher"""
     import argparse
 
-    parser = argparse.ArgumentParser(description="Watch source files for changes")
+    parser = argparse.ArgumentParser(
+        description="Watch source files for changes"
+    )
     parser.add_argument("directory", help="Directory to watch")
     parser.add_argument(
         "--gitignore",
@@ -287,12 +228,6 @@     args = parser.parse_args()
 
     directory = args.directory
-    print(f"Watching source files in {directory}...")
-
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
     watcher = FileWatcher(directory, gitignores=args.gitignore)
     try:
         watcher.start()
@@ -300,7 +235,6 @@             if changes := watcher.get_changes():
                 for file in sorted(changes.keys()):
                     print(file)
-                watcher.changed_files = None
     except KeyboardInterrupt:
         print("\nStopped watching files")
         watcher.stop()
