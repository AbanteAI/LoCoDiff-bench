
index 6f97774c..194a424d 100644
--- a/aider_aider_watch.py_expectedoutput.txt (expected):tmp/tmp0l48lzz3_expected.txt	
+++ b/aider_aider_watch.py_extracted.txt (actual):tmp/tmp1qeod3zy_actual.txt	
@@ -1,12 +1,12 @@
+from pathlib import Path
+from typing import Optional, Set
 import re
 import threading
-from pathlib import Path
-from typing import Optional
 
-from grep_ast import TreeContext
 from pathspec import PathSpec
 from pathspec.patterns import GitWildMatchPattern
 from watchfiles import watch
+from grep_ast import TreeContext
 
 from aider.dump import dump  # noqa
 from aider.watch_prompts import watch_ask_prompt, watch_code_prompt
@@ -77,9 +77,7 @@ class FileWatcher:
         self.changed_files = set()
         self.gitignores = gitignores
 
-        self.gitignore_spec = load_gitignores(
-            [Path(g) for g in self.gitignores] if self.gitignores else []
-        )
+        self.gitignore_spec = load_gitignores([Path(g) for g in self.gitignores] if self.gitignores else [])
 
         coder.io.file_watcher = self
 
@@ -105,8 +103,8 @@ class FileWatcher:
 
         # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            _, _, has_match = self.get_ai_comments(str(path_abs))
+            return bool(has_match)
         except Exception:
             return
 
@@ -131,7 +129,8 @@ class FileWatcher:
 
         changed_files = {str(Path(change[1])) for change in changes}
         self.changed_files.update(changed_files)
-        self.io.interrupt_input()
+        if self.io.prompt_session and self.io.prompt_session.app:
+            self.io.interrupt_input()
         return True
 
     def watch_files(self):
@@ -172,7 +171,6 @@ class FileWatcher:
 
     def process_changes(self):
         """Get any detected file changes"""
-
         has_action = None
         added = False
         for fname in self.changed_files:
@@ -221,7 +219,7 @@ class FileWatcher:
             res += f"\n{rel_fname}:\n"
 
             # Convert comment line numbers to line indices (0-based)
-            lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
+            lois = [ln - 1 for ln in line_nums if ln > 0]
 
             try:
                 context = TreeContext(
@@ -262,7 +260,7 @@ class FileWatcher:
                     line_nums.append(i)
                     comments.append(comment)
                     comment = comment.lower()
-                    comment = comment.lstrip("/#-;")  # Added semicolon for Lisp comments
+                    comment = comment.lstrip("/#-;")
                     comment = comment.strip()
                     if comment.startswith("ai!") or comment.endswith("ai!"):
                         has_action = "!"
