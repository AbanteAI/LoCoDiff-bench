--- aider_aider_watch.py_expectedoutput.txt (expected)+++ aider_aider_watch.py_extracted.txt (actual)@@ -25,7 +25,7 @@         "*.bak",  # Generic backup
         "*.swp",  # Vim swap
         "*.swo",  # Vim swap
-        "\\#*\\#",  # Emacs auto-save
+        "#*#",  # Emacs auto-save
         ".#*",  # Emacs lock files
         "*.tmp",  # Generic temp files
         "*.temp",  # Generic temp files
@@ -64,7 +64,7 @@     """Watches source files for changes and AI comments"""
 
     # Compiled regex pattern for AI comments
-    ai_comment_pattern = re.compile(r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
+    ai_comment_pattern = re.compile(r"(?:#|//|--) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
 
     def __init__(self, coder, gitignores=None, verbose=False, analytics=None, root=None):
         self.coder = coder
@@ -77,9 +77,7 @@         self.changed_files = set()
         self.gitignores = gitignores
 
-        self.gitignore_spec = load_gitignores(
-            [Path(g) for g in self.gitignores] if self.gitignores else []
-        )
+        self.gitignore_spec = load_gitignores([Path(g) for g in self.gitignores] if self.gitignores else [])
 
         coder.io.file_watcher = self
 
@@ -95,9 +93,7 @@         if self.verbose:
             dump(rel_path)
 
-        if self.gitignore_spec and self.gitignore_spec.match_file(
-            rel_path.as_posix() + ("/" if path_abs.is_dir() else "")
-        ):
+        if self.gitignore_spec and self.gitignore_spec.match_file(rel_path.as_posix() + ("/" if path_abs.is_dir() else "")):
             return False
 
         if self.verbose:
@@ -105,8 +101,9 @@ 
         # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            _, _, has_action = self.get_ai_comments(str(path_abs))
+            return has_action
+            # return True  # For testing, enable to watch all files
         except Exception:
             return
 
@@ -128,7 +125,7 @@         """Process the detected changes and update state"""
         if not changes:
             return False
-
+            
         changed_files = {str(Path(change[1])) for change in changes}
         self.changed_files.update(changed_files)
         self.io.interrupt_input()
@@ -138,16 +135,13 @@         """Watch for file changes and process them"""
         try:
             roots_to_watch = self.get_roots_to_watch()
-
+            
             for changes in watch(
-                *roots_to_watch,
-                watch_filter=self.filter_func,
-                stop_event=self.stop_event,
-                ignore_permission_denied=True,
+                *roots_to_watch, watch_filter=self.filter_func, stop_event=self.stop_event
             ):
                 if self.handle_changes(changes):
                     return
-
+                    
         except Exception as e:
             if self.verbose:
                 dump(f"File watcher error: {e}")
@@ -201,48 +195,15 @@         if self.analytics:
             self.analytics.event("ai-comments execute")
         self.io.tool_output("Processing your request...")
-
-        if has_action == "!":
-            res = watch_code_prompt
-        elif has_action == "?":
-            res = watch_ask_prompt
+        res = watch_ask_prompt if has_action == "?" else watch_code_prompt
 
         # Refresh all AI comments from tracked files
         for fname in self.coder.abs_fnames:
             line_nums, comments, _action = self.get_ai_comments(fname)
-            if not line_nums:
-                continue
-
-            code = self.io.read_text(fname)
-            if not code:
-                continue
-
-            rel_fname = self.coder.get_rel_fname(fname)
-            res += f"\n{rel_fname}:\n"
-
-            # Convert comment line numbers to line indices (0-based)
-            lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
-
-            try:
-                context = TreeContext(
-                    rel_fname,
-                    code,
-                    color=False,
-                    line_number=False,
-                    child_context=False,
-                    last_line=False,
-                    margin=0,
-                    mark_lois=True,
-                    loi_pad=3,
-                    show_top_of_file_parent_scope=False,
-                )
-                context.lines_of_interest = set()
-                context.add_lines_of_interest(lois)
-                context.add_context()
-                res += context.format()
-            except ValueError:
-                for ln, comment in zip(line_nums, comments):
-                    res += f"  Line {ln}: {comment}\n"
+            if line_nums:
+                res += f"{fname}:\n"
+                for idx, comment in zip(line_nums, comments):
+                    res += f"  Line {idx}: {comment}\n"
 
         return res
 
@@ -262,7 +223,7 @@                     line_nums.append(i)
                     comments.append(comment)
                     comment = comment.lower()
-                    comment = comment.lstrip("/#-;")  # Added semicolon for Lisp comments
+                    comment = comment.lstrip("/#-;")
                     comment = comment.strip()
                     if comment.startswith("ai!") or comment.endswith("ai!"):
                         has_action = "!"
@@ -276,35 +237,25 @@ def main():
     """Example usage of the file watcher"""
     import argparse
+    import sys
 
     parser = argparse.ArgumentParser(description="Watch source files for changes")
     parser.add_argument("directory", help="Directory to watch")
-    parser.add_argument(
-        "--gitignore",
-        action="append",
-        help="Path to .gitignore file (can be specified multiple times)",
-    )
+    parser.add_argument("--gitignore", action="append", help="Path to .gitignore file (can be specified multiple times)")
     args = parser.parse_args()
 
     directory = args.directory
     print(f"Watching source files in {directory}...")
-
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
 
     watcher = FileWatcher(directory, gitignores=args.gitignore)
     try:
         watcher.start()
         while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
+            if changes := watcher.process_changes():
+                print(changes)
     except KeyboardInterrupt:
         print("\nStopped watching files")
         watcher.stop()
 
-
 if __name__ == "__main__":
     main()