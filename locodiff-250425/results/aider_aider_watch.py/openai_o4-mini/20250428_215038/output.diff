--- aider_aider_watch.py_expectedoutput.txt (expected)+++ aider_aider_watch.py_extracted.txt (actual)@@ -11,7 +11,6 @@ from aider.dump import dump  # noqa
 from aider.watch_prompts import watch_ask_prompt, watch_code_prompt
 
-
 def load_gitignores(gitignore_paths: list[Path]) -> Optional[PathSpec]:
     """Load and parse multiple .gitignore files into a single PathSpec"""
     if not gitignore_paths:
@@ -21,44 +20,42 @@         ".aider*",
         ".git",
         # Common editor backup/temp files
-        "*~",  # Emacs/vim backup
-        "*.bak",  # Generic backup
-        "*.swp",  # Vim swap
-        "*.swo",  # Vim swap
-        "\\#*\\#",  # Emacs auto-save
-        ".#*",  # Emacs lock files
-        "*.tmp",  # Generic temp files
-        "*.temp",  # Generic temp files
-        "*.orig",  # Merge conflict originals
-        "*.pyc",  # Python bytecode
-        "__pycache__/",  # Python cache dir
-        ".DS_Store",  # macOS metadata
-        "Thumbs.db",  # Windows thumbnail cache
+        "*~",           # Emacs/vim backup
+        "*.bak",        # Generic backup
+        "*.swp",        # Vim swap
+        "*.swo",        # Vim swap
+        "\\#*\\#",      # Emacs auto-save
+        ".#*",          # Emacs lock files
+        "*.tmp",        # Generic temp files
+        "*.temp",       # Generic temp files
+        "*.orig",       # Merge conflict originals
+        "*.pyc",        # Python bytecode
+        "__pycache__/", # Python cache dir
+        ".DS_Store",    # macOS metadata
+        "Thumbs.db",    # Windows thumbnail cache
         # IDE files
-        ".idea/",  # JetBrains IDEs
-        ".vscode/",  # VS Code
+        ".idea/",       # JetBrains IDEs
+        ".vscode/",     # VS Code
         "*.sublime-*",  # Sublime Text
-        ".project",  # Eclipse
-        ".settings/",  # Eclipse
+        ".project",     # Eclipse
+        ".settings/",   # Eclipse
         "*.code-workspace",  # VS Code workspace
         # Environment files
-        ".env",  # Environment variables
-        ".venv/",  # Python virtual environments
-        "node_modules/",  # Node.js dependencies
-        "vendor/",  # Various dependencies
+        ".env",         # Environment variables
+        ".venv/",       # Python virtual environments
+        "node_modules/",# Node.js dependencies
+        "vendor/",      # Various dependencies
         # Logs and caches
-        "*.log",  # Log files
-        ".cache/",  # Cache directories
-        ".pytest_cache/",  # Python test cache
-        "coverage/",  # Code coverage reports
+        "*.log",        # Log files
+        ".cache/",      # Cache directories
+        ".pytest_cache/",# Python test cache
+        "coverage/",    # Code coverage reports
     ]  # Always ignore
     for path in gitignore_paths:
         if path.exists():
             with open(path) as f:
                 patterns.extend(f.readlines())
-
     return PathSpec.from_lines(GitWildMatchPattern, patterns) if patterns else None
-
 
 class FileWatcher:
     """Watches source files for changes and AI comments"""
@@ -76,11 +73,9 @@         self.watcher_thread = None
         self.changed_files = set()
         self.gitignores = gitignores
-
         self.gitignore_spec = load_gitignores(
             [Path(g) for g in self.gitignores] if self.gitignores else []
         )
-
         coder.io.file_watcher = self
 
     def filter_func(self, change_type, path):
@@ -100,13 +95,10 @@         ):
             return False
 
-        if self.verbose:
-            dump("ok", rel_path)
-
         # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            _, _, has_action = self.get_ai_comments(str(path_abs))
+            return bool(has_action)
         except Exception:
             return
 
@@ -120,7 +112,6 @@                     path.relative_to(self.root).as_posix() + ("/" if path.is_dir() else "")
                 )
             ]
-            # Fallback to watching root if all top-level items are filtered out
             return roots if roots else [str(self.root)]
         return [str(self.root)]
 
@@ -128,7 +119,6 @@         """Process the detected changes and update state"""
         if not changes:
             return False
-
         changed_files = {str(Path(change[1])) for change in changes}
         self.changed_files.update(changed_files)
         self.io.interrupt_input()
@@ -138,7 +128,6 @@         """Watch for file changes and process them"""
         try:
             roots_to_watch = self.get_roots_to_watch()
-
             for changes in watch(
                 *roots_to_watch,
                 watch_filter=self.filter_func,
@@ -147,7 +136,6 @@             ):
                 if self.handle_changes(changes):
                     return
-
         except Exception as e:
             if self.verbose:
                 dump(f"File watcher error: {e}")
@@ -157,7 +145,6 @@         """Start watching for file changes"""
         self.stop_event = threading.Event()
         self.changed_files = set()
-
         self.watcher_thread = threading.Thread(target=self.watch_files, daemon=True)
         self.watcher_thread.start()
 
@@ -172,7 +159,6 @@ 
     def process_changes(self):
         """Get any detected file changes"""
-
         has_action = None
         added = False
         for fname in self.changed_files:
@@ -202,27 +188,24 @@             self.analytics.event("ai-comments execute")
         self.io.tool_output("Processing your request...")
 
-        if has_action == "!":
-            res = watch_code_prompt
-        elif has_action == "?":
-            res = watch_ask_prompt
+        res = watch_ask_prompt if has_action == "?" else watch_code_prompt
 
         # Refresh all AI comments from tracked files
+        ai_comments = {}
         for fname in self.coder.abs_fnames:
             line_nums, comments, _action = self.get_ai_comments(fname)
             if not line_nums:
                 continue
-
+            ai_comments[fname] = comments
+
+        # render comments in context with TreeContext
+        for fname, comments in ai_comments.items():
             code = self.io.read_text(fname)
             if not code:
                 continue
-
             rel_fname = self.coder.get_rel_fname(fname)
             res += f"\n{rel_fname}:\n"
-
-            # Convert comment line numbers to line indices (0-based)
-            lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
-
+            lois = [ln - 1 for ln in line_nums]
             try:
                 context = TreeContext(
                     rel_fname,
@@ -254,24 +237,19 @@         content = self.io.read_text(filepath, silent=True)
         if not content:
             return None, None, None
-
         for i, line in enumerate(content.splitlines(), 1):
             if match := self.ai_comment_pattern.search(line):
                 comment = match.group(0).strip()
-                if comment:
-                    line_nums.append(i)
-                    comments.append(comment)
-                    comment = comment.lower()
-                    comment = comment.lstrip("/#-;")  # Added semicolon for Lisp comments
-                    comment = comment.strip()
-                    if comment.startswith("ai!") or comment.endswith("ai!"):
-                        has_action = "!"
-                    elif comment.startswith("ai?") or comment.endswith("ai?"):
-                        has_action = "?"
+                line_nums.append(i)
+                comments.append(comment)
+                comment_l = comment.lower().lstrip("/#-;").strip()
+                if comment_l.startswith("ai!") or comment_l.endswith("ai!"):
+                    has_action = "!"
+                elif comment_l.startswith("ai?") or comment_l.endswith("ai?"):
+                    has_action = "?"
         if not line_nums:
             return None, None, None
         return line_nums, comments, has_action
-
 
 def main():
     """Example usage of the file watcher"""
@@ -284,27 +262,23 @@         action="append",
         help="Path to .gitignore file (can be specified multiple times)",
     )
+    parser.add_argument("--root", help="Root path to watch")
+    parser.add_argument("--verbose", action="store_true", help="Enable verbose debug output")
+    parser.add_argument("--analytics", help="Analytics event tracker")
     args = parser.parse_args()
 
-    directory = args.directory
-    print(f"Watching source files in {directory}...")
-
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    watcher = FileWatcher(
+        args.directory,
+        gitignores=args.gitignore,
+        verbose=args.verbose,
+        analytics=None,
+        root=args.root,
+    )
     try:
         watcher.start()
         while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
+            if output := watcher.process_changes():
+                print(output)
     except KeyboardInterrupt:
         print("\nStopped watching files")
-        watcher.stop()
-
-
-if __name__ == "__main__":
-    main()+        watcher.stop()