--- aider_aider_watch.py_expectedoutput.txt (expected)+++ aider_aider_watch.py_extracted.txt (actual)@@ -64,7 +64,7 @@     """Watches source files for changes and AI comments"""
 
     # Compiled regex pattern for AI comments
-    ai_comment_pattern = re.compile(r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
+    ai_comment_pattern = re.compile(r"(?:#|//|--) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
 
     def __init__(self, coder, gitignores=None, verbose=False, analytics=None, root=None):
         self.coder = coder
@@ -199,7 +199,7 @@             return ""
 
         if self.analytics:
-            self.analytics.event("ai-comments execute")
+            self.analytics.event(f"ai-comments {has_action}")
         self.io.tool_output("Processing your request...")
 
         if has_action == "!":
@@ -213,7 +213,7 @@             if not line_nums:
                 continue
 
-            code = self.io.read_text(fname)
+            code = self.io.read_text(fname, silent=True)
             if not code:
                 continue
 
@@ -241,6 +241,7 @@                 context.add_context()
                 res += context.format()
             except ValueError:
+                # Fall back to just showing the comments if TreeContext fails
                 for ln, comment in zip(line_nums, comments):
                     res += f"  Line {ln}: {comment}\n"
 
@@ -276,6 +277,7 @@ def main():
     """Example usage of the file watcher"""
     import argparse
+    import sys
 
     parser = argparse.ArgumentParser(description="Watch source files for changes")
     parser.add_argument("directory", help="Directory to watch")
@@ -286,25 +288,68 @@     )
     args = parser.parse_args()
 
+    # Create a mock coder object with a basic io and root
+    class MockIO:
+        def read_text(self, *args, **kwargs):
+            # Mock file reading behavior
+            print(f"MockIO.read_text({args[0]})")
+            return ""
+
+        def tool_output(self, msg=""):
+            print(msg)
+
+        def interrupt_input(self):
+            print("Input interrupted!")
+
+        prompt_session = None # Simulate no prompt session initially
+
+    class MockCoder:
+        def __init__(self, root):
+            self.root = str(Path(root).resolve())
+            self.io = MockIO()
+            self.abs_fnames = set()
+
+        def get_rel_fname(self, abs_fname):
+            return str(Path(abs_fname).relative_to(self.root))
+
+
     directory = args.directory
     print(f"Watching source files in {directory}...")
 
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    coder = MockCoder(directory)
+    watcher = FileWatcher(coder, gitignores=args.gitignore)
     try:
         watcher.start()
+        # In a real application, the main thread would be doing other work
+        # For this example, we'll simulate checking for changes periodically or waiting on input
         while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
+            # This loop would typically wait on user input or some other event,
+            # which would then check watcher.changed_files after an interrupt.
+            # For simulation, we'll just sleep.
+            import time
+            time.sleep(1) # Keep the main thread alive and allow watcher thread to run
+
+            if watcher.changed_files:
+                print("\nDetected Changes:")
+                # Simulate processing changes as the main loop would
+                output = watcher.process_changes()
+                if output:
+                   print("Processed Comments:")
+                   print(output)
+
+                watcher.changed_files.clear() # Reset after processing
+
+
     except KeyboardInterrupt:
         print("\nStopped watching files")
         watcher.stop()
+    except Exception as e:
+        print(f"\nError: {e}")
+        watcher.stop()
+        sys.exit(1)
 
 
 if __name__ == "__main__":
+    # This main block is just for demonstrating the watcher standalone.
+    # In the actual aider application, the watcher is managed by the Coder object.
     main()