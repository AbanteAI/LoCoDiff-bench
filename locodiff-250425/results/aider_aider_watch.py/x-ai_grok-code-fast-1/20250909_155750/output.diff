
index 6f97774c7..7e7226979 100644
--- a/aider_aider_watch.py_expectedoutput.txt (expected):tmp/tmprr0z107q_expected.txt	
+++ b/aider_aider_watch.py_extracted.txt (actual):tmp/tmpm46q27z1_actual.txt	
@@ -105,10 +105,10 @@ class FileWatcher:
 
         # Check if file contains AI markers
         try:
-            comments, _, _ = self.get_ai_comments(str(path_abs))
-            return bool(comments)
+            content = self.io.read_text(str(path_abs))
+            return self.ai_comment_pattern.search(content)
         except Exception:
-            return
+            return False
 
     def get_roots_to_watch(self):
         """Determine which root paths to watch based on gitignore rules"""
@@ -202,10 +202,13 @@ class FileWatcher:
             self.analytics.event("ai-comments execute")
         self.io.tool_output("Processing your request...")
 
-        if has_action == "!":
-            res = watch_code_prompt
-        elif has_action == "?":
-            res = watch_ask_prompt
+        res = (
+            f"The {!r} comments below can be found in the code files I've shared with you.\n"
+            "They contain your instructions.\n"
+            f"Make the requested changes.\n"
+            "Be sure to remove all these {!r} comments from the code!\n"
+            "\n"
+        )
 
         # Refresh all AI comments from tracked files
         for fname in self.coder.abs_fnames:
@@ -218,7 +221,7 @@ class FileWatcher:
                 continue
 
             rel_fname = self.coder.get_rel_fname(fname)
-            res += f"\n{rel_fname}:\n"
+            res += f"{rel_fname}:\n"
 
             # Convert comment line numbers to line indices (0-based)
             lois = [ln - 1 for ln, _ in zip(line_nums, comments) if ln > 0]
@@ -258,16 +261,15 @@ class FileWatcher:
         for i, line in enumerate(content.splitlines(), 1):
             if match := self.ai_comment_pattern.search(line):
                 comment = match.group(0).strip()
-                if comment:
-                    line_nums.append(i)
-                    comments.append(comment)
-                    comment = comment.lower()
-                    comment = comment.lstrip("/#-;")  # Added semicolon for Lisp comments
-                    comment = comment.strip()
-                    if comment.startswith("ai!") or comment.endswith("ai!"):
-                        has_action = "!"
-                    elif comment.startswith("ai?") or comment.endswith("ai?"):
-                        has_action = "?"
+                comments.append(comment)
+                line_nums.append(i)
+                comment = comment.lower()
+                comment = comment.lstrip("/#-;")  # Added semicolon for Lisp comments
+                comment = comment.strip()
+                if comment.startswith("ai!") or comment.endswith("ai!"):
+                    has_action = "!"
+                elif comment.startswith("ai?") or comment.endswith("ai?"):
+                    has_action = "?"
         if not line_nums:
             return None, None, None
         return line_nums, comments, has_action
@@ -279,30 +281,20 @@ def main():
 
     parser = argparse.ArgumentParser(description="Watch source files for changes")
     parser.add_argument("directory", help="Directory to watch")
-    parser.add_argument(
-        "--gitignore",
-        action="append",
-        help="Path to .gitignore file (can be specified multiple times)",
-    )
+    parser.add_argument("--gitignore", action="append", help="Path to .gitignore file (can be specified multiple times)")
     args = parser.parse_args()
 
-    directory = args.directory
-    print(f"Watching source files in {directory}...")
-
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    watcher = FileWatcher(coder=None, gitignores=args.gitignore)
     try:
         watcher.start()
         while True:
-            if changes := watcher.get_changes():
+            if changes := watcher.process_changes():
                 for file in sorted(changes.keys()):
                     print(file)
-                watcher.changed_files = None
+            watcher.changed_files = None
     except KeyboardInterrupt:
         print("\nStopped watching files")
+    finally:
         watcher.stop()
 
 
