
index 6f97774c7..2c0d95686 100644
--- a/aider_aider_watch.py_expectedoutput.txt (expected):tmp/tmptlr534l3_expected.txt	
+++ b/aider_aider_watch.py_extracted.txt (actual):tmp/tmpv9qzh_68_actual.txt	
@@ -270,41 +270,4 @@ class FileWatcher:
                         has_action = "?"
         if not line_nums:
             return None, None, None
-        return line_nums, comments, has_action
-
-
-def main():
-    """Example usage of the file watcher"""
-    import argparse
-
-    parser = argparse.ArgumentParser(description="Watch source files for changes")
-    parser.add_argument("directory", help="Directory to watch")
-    parser.add_argument(
-        "--gitignore",
-        action="append",
-        help="Path to .gitignore file (can be specified multiple times)",
-    )
-    args = parser.parse_args()
-
-    directory = args.directory
-    print(f"Watching source files in {directory}...")
-
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
-    try:
-        watcher.start()
-        while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
-    except KeyboardInterrupt:
-        print("\nStopped watching files")
-        watcher.stop()
-
-
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+        return line_nums, comments, has_action
\ No newline at end of file
