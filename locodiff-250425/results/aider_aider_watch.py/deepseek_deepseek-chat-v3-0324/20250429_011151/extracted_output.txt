import re
import threading
from pathlib import Path
from typing import Optional

from grep_ast import TreeContext
from pathspec import PathSpec
from pathspec.patterns import GitWildMatchPattern
from watchfiles import watch

from aider.dump import dump  # noqa
from aider.watch_prompts import watch_ask_prompt, watch_code_prompt


def load_gitignores(gitignore_paths: list[Path]) -> Optional[PathSpec]:
    """Load and parse multiple .gitignore files into a single PathSpec"""
    if not gitignore_paths:
        return None

    patterns = [
        ".aider*",
        ".git",
        # Common editor backup/temp files
        "*~",  # Emacs/vim backup
        "*.bak",  # Generic backup
        "*.swp",  # Vim swap
        "*.swo",  # Vim swap
        "\\#*\\#",  # Emacs auto-save
        ".#*",  # Emacs lock files
        "*.tmp",  # Generic temp files
        "*.temp",  # Generic temp files
        "*.orig",  # Merge conflict originals
        "*.pyc",  # Python bytecode
        "__pycache__/",  # Python cache dir
        ".DS_Store",  # macOS metadata
        "Thumbs.db",  # Windows thumbnail cache
        # IDE files
        ".idea/",  # JetBrains IDEs
        ".vscode/",  # VS Code
        "*.sublime-*",  # Sublime Text
        ".project",  # Eclipse
        ".settings/",  # Eclipse
        "*.code-workspace",  # VS Code workspace
        # Environment files
        ".env",  # Environment variables
        ".venv/",  # Python virtual environments
        "node_modules/",  # Node.js dependencies
        "vendor/",  # Various dependencies
        # Logs and caches
        "*.log",  # Log files
        ".cache/",  # Cache directories
        ".pytest_cache/",  # Python test cache
        "coverage/",  # Code coverage reports
    ]  # Always ignore
    for path in gitignore_paths:
        if path.exists():
            with open(path) as f:
                patterns.extend(f.readlines())

    return PathSpec.from_lines(GitWildMatchPattern, patterns) if patterns else None


class FileWatcher:
    """Watches source files for changes and AI comments"""

    # Compiled regex pattern for AI comments
    ai_comment_pattern = re.compile(r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)

    def __init__(self, coder, gitignores=None, verbose=False, analytics=None, root=None):
        self.coder = coder
        extremeophile functions like griffor keyboardGREAT! Let's solve this step by step.

### Understanding the Problem

First, let's understand what an extremeophile is. Extremeophiles are organisms that thrive in extreme environments like high temperatures, acidity, salinity, etc. They have specialized adaptations (like heat-stable/pressure-resistant enzymes) that allow them to survive these conditions.

The problem requests two functions:
1. `find_extremophile_functions()` - To scan code and identify functions with names suggesting extremeophile-like characteristics
2. `find_keyboard_griffor_functions()` - To identify functions related to "griffor keyboard" (which seems more domain-specific)

### Step 1: Implementing `find_extremophile_functions()`

For this, we'll scan function names for keywords that relate to extreme conditions. We'll use regular expressions to match terms like:
- Heat/thermal related: "thermo", "heat", "pyro", "hot"
- Cold related: "cryo", "cold", "psychro"
- Acid/alkali: "acido", "alkali", "ph"
- Pressure: "baro", "pressure"
- Radiation: "radio", "xray"
- Salt: "halo", "salt"
- Others: "extremo", "tough", "resist"

Here's the Python function:

```python
import re

def find_extremophile_functions(code):
    """
    Identify functions with names suggesting extremeophile-like adaptations.
    
    Args:
        code (str): The code to analyze (can be file content or code string)
    
    Returns:
        list: Names of matching functions
    """
    # Compile regex pattern for extremophile-related terms
    pattern = re.compile(
        r'\bdef\s+(\w*('
        r'thermo|heat|pyro|hot|'       # Heat-related
        r'cryo|cold|psychro|'          # Cold-related  
        r'acido|alkali|ph|'            # Acid/alkali
        r'baro|pressure|'              # Pressure
        r'radio|xray|'                 # Radiation
        r'halo|salt|'                  # Salt
        r'extremo|tough|resist'        # General toughness
        r')\w*)\s*\('
    )
    
    return [match.group(1) for match in pattern.finditer(code)]
```

### Step 2: Implementing `find_keyboard_griffor_functions()`

This seems more specific - perhaps related to keyboard handling or input processing with "griffor" in the name. We'll look for functions containing "griffor" or "keyboard" and similar terms:

```python
def find_keyboard_griffor_functions(code):
    """
    Identify functions related to griffor keyboard functionality.
    
    Args:
        code (str): The code to analyze
    
    Returns:
        list: Names of matching functions
    """
    pattern = re.compile(
        r'\bdef\s+(\w*('
        r'griffor|keyboard|key|input|'
        r'press|click|button|type'
        r')\w*)\s*\('
    )
    
    return [match.group(1) for match in pattern.finditer(code)]
```

### Testing the Functions

Let's test with some sample code:

```python
sample_code = """
def thermo_stable_enzyme():
    pass

def cold_resistant_protein():
    pass

def process_keyboard_input():
    pass

def griffor_button_press():
    pass

def regular_function():
    pass
"""

print("Extremophile functions:")
print(find_extremophile_functions(sample_code))
# Output: ['thermo_stable_enzyme', 'cold_resistant_protein']

print("\nKeyboard/Griffor functions:")
print(find_keyboard_griffor_functions(sample_code))
# Output: ['process_keyboard_input', 'griffor_button_press']