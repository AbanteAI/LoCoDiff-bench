--- aider_aider_watch.py_expectedoutput.txt (expected)+++ aider_aider_watch.py_extracted.txt (actual)@@ -276,35 +276,62 @@ def main():
     """Example usage of the file watcher"""
     import argparse
+    import sys
 
     parser = argparse.ArgumentParser(description="Watch source files for changes")
     parser.add_argument("directory", help="Directory to watch")
     parser.add_argument(
-        "--gitignore",
-        action="append",
-        help="Path to .gitignore file (can be specified multiple times)",
+        "--gitignore", action="append", help="Path to .gitignore file (can be specified multiple times)"
     )
     args = parser.parse_args()
 
     directory = args.directory
     print(f"Watching source files in {directory}...")
 
-    # Example ignore function that ignores files with "test" in the name
-    def ignore_test_files(path):
-        return "test" in path.name.lower()
-
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    # This is a mock coder object for standalone testing
+    class MockCoder:
+        def __init__(self, root):
+            self.root = root
+            self.abs_fnames = set()
+            self.io = self._create_mock_io()
+
+        def get_rel_fname(self, fname):
+            return Path(fname).relative_to(self.root).as_posix()
+
+        def _create_mock_io(self):
+            class MockIO:
+                prompt_session = None
+
+                def interrupt_input(self):
+                    print("\n--interrupt-input called--")
+
+                def tool_output(self, text=""):
+                    print(text)
+
+                def read_text(self, path, silent=False):
+                    try:
+                        with open(path) as f:
+                            return f.read()
+                    except FileNotFoundError:
+                        return None
+
+            return MockIO()
+
+    mock_coder = MockCoder(directory)
+    watcher = FileWatcher(mock_coder, gitignores=args.gitignore)
     try:
         watcher.start()
         while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
+            if changes := watcher.process_changes():
+                # In a real scenario, integrate this with the chat loop
+                print("\nProcessed changes:")
+                print(changes)
+                watcher.changed_files.clear() # Don't reprocess the same changes
+            threading.Event().wait(0.1) # Short sleep to prevent busy loop
+
     except KeyboardInterrupt:
         print("\nStopped watching files")
         watcher.stop()
 
-
 if __name__ == "__main__":
     main()