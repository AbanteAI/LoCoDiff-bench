
index 6f97774c7..8a41e5c6c 100644
--- a/aider_aider_watch.py_expectedoutput.txt (expected):tmp/tmpb5ga3isn_expected.txt	
+++ b/aider_aider_watch.py_extracted.txt (actual):tmp/tmp5_8vd125_actual.txt	
@@ -25,7 +25,7 @@ def load_gitignores(gitignore_paths: list[Path]) -> Optional[PathSpec]:
         "*.bak",  # Generic backup
         "*.swp",  # Vim swap
         "*.swo",  # Vim swap
-        "\\#*\\#",  # Emacs auto-save
+        "#*#",  # Emacs auto-save
         ".#*",  # Emacs lock files
         "*.tmp",  # Generic temp files
         "*.temp",  # Generic temp files
@@ -64,7 +64,9 @@ class FileWatcher:
     """Watches source files for changes and AI comments"""
 
     # Compiled regex pattern for AI comments
-    ai_comment_pattern = re.compile(r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE)
+    ai_comment_pattern = re.compile(
+        r"(?:#|//|--|;+) *(ai\b.*|ai\b.*|.*\bai[?!]?) *$", re.IGNORECASE
+    )
 
     def __init__(self, coder, gitignores=None, verbose=False, analytics=None, root=None):
         self.coder = coder
@@ -117,7 +119,8 @@ class FileWatcher:
                 str(path)
                 for path in self.root.iterdir()
                 if not self.gitignore_spec.match_file(
-                    path.relative_to(self.root).as_posix() + ("/" if path.is_dir() else "")
+                    path.relative_to(self.root).as_posix()
+                    + ("/" if path.is_dir() else "")
                 )
             ]
             # Fallback to watching root if all top-level items are filtered out
@@ -172,7 +175,6 @@ class FileWatcher:
 
     def process_changes(self):
         """Get any detected file changes"""
-
         has_action = None
         added = False
         for fname in self.changed_files:
@@ -289,18 +291,14 @@ def main():
     directory = args.directory
     print(f"Watching source files in {directory}...")
 
-    # Example ignore function that ignores files with "test" in the name
     def ignore_test_files(path):
         return "test" in path.name.lower()
 
-    watcher = FileWatcher(directory, gitignores=args.gitignore)
+    watcher = FileWatcher(directory, gitignores=args.gitignore, verbose=True)
+    watcher.start()
     try:
-        watcher.start()
         while True:
-            if changes := watcher.get_changes():
-                for file in sorted(changes.keys()):
-                    print(file)
-                watcher.changed_files = None
+            print("\nWaiting for changes...\n")
     except KeyboardInterrupt:
         print("\nStopped watching files")
         watcher.stop()
