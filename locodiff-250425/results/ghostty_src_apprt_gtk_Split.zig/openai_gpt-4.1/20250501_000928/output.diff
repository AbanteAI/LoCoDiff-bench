
index 9abf5d13..42c1f928 100644
--- a/ghostty_src_apprt_gtk_Split.zig_expectedoutput.txt (expected):tmp/tmplnqf5f3w_expected.txt	
+++ b/ghostty_src_apprt_gtk_Split.zig_extracted.txt (actual):tmp/tmph7q1ls63_actual.txt	
@@ -1,5 +1,3 @@
-/// Split represents a surface split where two surfaces are shown side-by-side
-/// within the same window either vertically or horizontally.
 const Split = @This();
 
 const std = @import("std");
@@ -168,7 +166,7 @@ pub fn removeTopLeft(self: *Split) void {
     self.removeChild(self.top_left, self.bottom_right);
 }
 
-/// Remove the top left child.
+/// Remove the bottom right child.
 pub fn removeBottomRight(self: *Split) void {
     self.removeChild(self.bottom_right, self.top_left);
 }
@@ -196,6 +194,26 @@ fn removeChild(
     alloc.destroy(self);
 }
 
+// This replaces the element at the given pointer with a new element.
+// The ptr must be either top_left or bottom_right (asserted in debug).
+// The memory of the old element must be freed or otherwise handled by
+// the caller.
+pub fn replace(
+    self: *Split,
+    ptr: *Surface.Container.Elem,
+    new: Surface.Container.Elem,
+) void {
+    // We can write our element directly. There's nothing special.
+    assert(&self.top_left == ptr or &self.bottom_right == ptr);
+    ptr.* = new;
+
+    // Update our paned children. This will reset the divider
+    // position but we want to keep it in place so save and restore it.
+    const pos = self.paned.getPosition();
+    defer self.paned.setPosition(pos);
+    self.updateChildren();
+}
+
 /// Move the divider in the given direction by the given amount.
 pub fn moveDivider(
     self: *Split,
@@ -252,27 +270,6 @@ fn maxPosition(self: *Split) f64 {
     return @floatFromInt(value.getInt());
 }
 
-// This replaces the element at the given pointer with a new element.
-// The ptr must be either top_left or bottom_right (asserted in debug).
-// The memory of the old element must be freed or otherwise handled by
-// the caller.
-pub fn replace(
-    self: *Split,
-    ptr: *Surface.Container.Elem,
-    new: Surface.Container.Elem,
-) void {
-    // We can write our element directly. There's nothing special.
-    assert(&self.top_left == ptr or &self.bottom_right == ptr);
-    ptr.* = new;
-
-    // Update our paned children. This will reset the divider
-    // position but we want to keep it in place so save and restore it.
-    const pos = self.paned.getPosition();
-    defer self.paned.setPosition(pos);
-    self.updateChildren();
-}
-
-// grabFocus grabs the focus of the top-left element.
 pub fn grabFocus(self: *Split) void {
     self.top_left.grabFocus();
 }
@@ -411,7 +408,6 @@ fn directionNext(self: *const Split, from: Side) ?struct {
         // From the bottom right is more compliated. It is the deepest
         // (last) surface in the
         .bottom_right => {
-            // If we have no parent split then there can be no next.
             const parent = self.container.split() orelse return .{
                 .surface = self.top_left.deepestSurface(.top_left) orelse return null,
                 .wrapped = true,
@@ -438,4 +434,18 @@ pub fn detachBottomRight(self: *const Split) void {
 fn removeChildren(self: *const Split) void {
     self.detachTopLeft();
     self.detachBottomRight();
+}
+
+/// Get the most deeply nested surface for a given side.
+fn deepestSurface(self: *const Split, side: Side) ?*Surface {
+    return switch (side) {
+        .bottom_right => switch (self.bottom_right) {
+            .surface => |s| s,
+            .split => |s| s.deepestSurface(.bottom_right),
+        },
+        .top_left => switch (self.top_left) {
+            .surface => |s| s,
+            .split => |s| s.deepestSurface(.top_left),
+        },
+    };
 }
\ No newline at end of file
