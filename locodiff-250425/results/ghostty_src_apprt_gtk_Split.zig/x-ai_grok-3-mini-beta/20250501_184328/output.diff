
index 9abf5d13..e58827c8 100644
--- a/ghostty_src_apprt_gtk_Split.zig_expectedoutput.txt (expected):tmp/tmpx5nw6w7e_expected.txt	
+++ b/ghostty_src_apprt_gtk_Split.zig_extracted.txt (actual):tmp/tmpriizakte_actual.txt	
@@ -1,5 +1,3 @@
-/// Split represents a surface split where two surfaces are shown side-by-side
-/// within the same window either vertically or horizontally.
 const Split = @This();
 
 const std = @import("std");
@@ -18,7 +16,6 @@ const Tab = @import("Tab.zig");
 
 const log = std.log.scoped(.gtk);
 
-/// The split orientation.
 pub const Orientation = enum {
     horizontal,
     vertical,
@@ -44,13 +41,13 @@ paned: *gtk.Paned,
 /// The container for this split panel.
 container: Surface.Container,
 
-/// The orientation of this split panel.
-orientation: Orientation,
-
 /// The elements of this split panel.
 top_left: Surface.Container.Elem,
 bottom_right: Surface.Container.Elem,
 
+/// The orientation of this split panel.
+orientation: Orientation,
+
 /// Create a new split panel with the given sibling surface in the given
 /// direction. The direction is where the new surface will be initialized.
 ///
@@ -152,6 +149,7 @@ pub fn init(
     surface.grabFocus();
 }
 
+/// Deinit the Split by deiniting its child Split, if they exist.
 pub fn destroy(self: *Split, alloc: Allocator) void {
     self.top_left.deinit(alloc);
     self.bottom_right.deinit(alloc);
@@ -168,7 +166,7 @@ pub fn removeTopLeft(self: *Split) void {
     self.removeChild(self.top_left, self.bottom_right);
 }
 
-/// Remove the top left child.
+/// Remove the bottom right child.
 pub fn removeBottomRight(self: *Split) void {
     self.removeChild(self.bottom_right, self.top_left);
 }
@@ -188,9 +186,6 @@ fn removeChild(
     // Our container must become whatever our top left is
     self.container.replace(keep);
 
-    // Grab focus of the left-over side
-    keep.grabFocus();
-
     // When a child is removed we are no longer a split, so destroy ourself
     remove.deinit(alloc);
     alloc.destroy(self);
@@ -272,7 +267,8 @@ pub fn replace(
     self.updateChildren();
 }
 
-// grabFocus grabs the focus of the top-left element.
+/// Focus on first Surface that can be found in given position. If there's a
+/// Split in the position, it will focus on the first surface in that position.
 pub fn grabFocus(self: *Split) void {
     self.top_left.grabFocus();
 }
@@ -308,6 +304,7 @@ pub fn directionMap(self: *const Split, from: Side) DirectionMap {
         result.put(.previous, prev.surface);
         if (!prev.wrapped) {
             result.put(.up, prev.surface);
+            result.put(.left, prev.surface);
         }
     }
 
@@ -315,6 +312,7 @@ pub fn directionMap(self: *const Split, from: Side) DirectionMap {
         result.put(.next, next.surface);
         if (!next.wrapped) {
             result.put(.down, next.surface);
+            result.put(.right, next.surface);
         }
     }
 
