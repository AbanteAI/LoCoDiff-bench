const Split = @This();
const std = @import("std");
const Allocator = std.mem.Allocator;
const assert = std.debug.assert;

const gobject = @import("gobject");
const gtk = @import("gtk");

const appr = @import("../../apprt.zig");
const font = @import("../../font/main.zig");
const CoreSurface = @import("../../Surface.zig");

const Surface = @import("Surface.zig");
const Tab = @import("Tab.zig");

const log = std.log.scoped(.gtk);

/// The split orientation.
pub const Orientation = enum {
    horizontal,
    vertical,

    pub fn fromDirection(direction: appr.action.SplitDirection) Orientation {
        return switch (direction) {
            .right, .left => .horizontal,
            .down, .up => .vertical,
        };
    }

    pub fn fromResizeDirection(direction: appr.action.ResizeSplit.Direction) Orientation {
        return switch (direction) {
            .up, .down => .vertical,
            .left, .right => .horizontal,
        };
    }
};

/// Our actual GtkPaned widget.
paned: *gtk.Paned,

/// The container for this split panel.
container: Surface.Container,

/// The orientation of this split panel.
orientation: Orientation,

/// The elements of this split panel.
top_left: Surface.Container.Elem,
bottom_right: Surface.Container.Elem,

/// Create a new split panel.
pub fn create(
    alloc: Allocator,
    sibling: *Surface,
    direction: appr.action.SplitDirection,
) !*Split {
    var split = try alloc.create(Split);
    errdefer alloc.destroy(split);
    try split.init(sibling, direction);
    return split;
}

pub fn init(
    self: *Split,
    sibling: *Surface,
    direction: appr.action.SplitDirection,
) !void {
    // If our sibling is too small to be split in half we prevent the split.
    {
        const multiplier = 4;
        const size = &sibling.core_surface.size;
        const small = switch (direction) {
            .right, .left => size.screen.width < size.cell.width * multiplier,
            .down, .up => size.screen.height < size.cell.height * multiplier,
        };
        if (small) return error.SplitTooSmall;
    }

    // Create the new child surface.
    const alloc = sibling.app.core_app.alloc;
    var surface = try Surface.create(alloc, sibling.app, .{
        .parent = &sibling.core_surface,
    });
    errdefer surface.destroy(alloc);
    sibling.dimSurface();
    sibling.setSplitZoom(false);
    sibling.setSplitZoom(false);

    // Create the actual GtkPaned widget.
    const orientation: gtk.Orientation = switch (direction) {
        .right, .left => .horizontal,
        .down, .up => .vertical,
    };
    const paned = gtk.Paned.new(orientation);
    errdefer paned.unref();

    // Keep a long-lived reference, which we unref in destroy.
    paned.ref();

    // Determine the top/left and bottom/right elements.
    const tl: *Surface, const br: *Surface = switch (direction) {
        .right, .down => right_down: {
            sibling.container = .{ .split_tl = &self.top_left };
            surface.container = .{ .split_br = &self.bottom_right };
            break :right_down .{ sibling, surface };
        },

        .left, .up => left_up: {
            sibling.container = .{ .split_br = &self.bottom_right };
            surface.container = .{ .split_tl = &self.top_left };
            break :left_up .{ surface, sibling };
        },
    };

    self.* = .{
        .paned = paned,
        .container = self.container,
        .top_left = .{ .surface = tl },
        .bottom_right = .{ .surface = br },
        .orientation = Orientation.fromDirection(direction),
    };

    // Replace the previous container's element with this split.
    self.container.replace(.{ .split = self });

    // Update children so GL areas are correctly attached.
    self.updateChildren();

    // Focus the new surface.
    surface.grabFocus();
}

pub fn destroy(self: *Split, alloc: Allocator) void {
    self.top_left.deinit(alloc);
    self.bottom_right.deinit(alloc);

    // Clean up our GTK reference. This triggers destroy callbacks.
    self.paned.unref();

    alloc.destroy(self);
}

// Remove a child element, making this split a regular container.
fn removeChild(
    self: *Split,
    remove: Surface.Container.Elem,
    keep: Surface.Container.Elem,
) void {
    const window = self.container.window() orelse return;
    const alloc = window.app.core_app.alloc;

    // Remove our children since we no longer are a split.
    self.removeChildren();

    // Our container now points at the remaining element.
    self.container.replace(keep);

    // Focus the remaining side.
    keep.grabFocus();

    // When a child is removed we are no longer a split.
    remove.deinit(alloc);
    alloc.destroy(self);
}

// Move the divider in the given direction by the given amount.
pub fn moveDivider(
    self: *Split,
    direction: appr.action.ResizeSplit.Direction,
    amount: u16,
) void {
    const min_pos = 10;
    const pos = self.paned.getPosition();
    const new = switch (direction) {
        .up, .left => @max(pos - amount, min_pos),
        .down, .right => new_pos: {
            const max_pos: u16 = @as(u16, @intFromFloat(self.maxPosition())) - min_pos;
            break :new_pos @min(pos + amount, max_pos);
        },
    };
    self.paned.setPosition(new);
}

// Equalize splits based on weight.
pub fn equalize(self: *Split) f64 {
    // Compute weights of child elements.
    const top_left_weight = self.top_left.equalize();
    const bottom_right_weight = self.bottom_right.equalize();
    const weight = top_left_weight + bottom_right_weight;
    const ratio = top_left_weight / weight;

    // Set divider position based on weight ratio.
    self.paned.setPosition(@intFromFloat(self.maxPosition() * ratio));

    return weight;
}

// Returns the max position of the GtkPaned ("max-position" property).
fn maxPosition(self: *Split) f64 {
    var value: gobject.Value = std.mem.zeroes(gobject.Value);
    defer value.unset();

    _ = value.init(gobject.ext.types.int);
    self.paned.as(gobject.Object).getProperty("max-position", &value);
    return @floatFromInt(value.getInt());
}

// Replace an element at the given pointer.
pub fn replace(
    self: *Split,
    ptr: *Surface.Container.Elem,
    new: Surface.Container.Elem,
) void {
    const saved = self.paned.getPosition();
    defer self.paned.setPosition(saved);
    *ptr = new;
    self.updateChildren();
}

// Update children widgets.
pub fn updateChildren(self: *const Split) void {
    self.removeChildren();
    self.paned.setStartChild(self.top_left.widget());
    self.paned.setEndChild(self.bottom_right.widget());
}

// Mapping of directions to elements.
pub const DirectionMap = std.EnumMap(
    appr.action.GotoSplit,
    ?*Surface,
);

// Map of directional navigation.
pub fn directionMap(self: *const Split, from: Side) DirectionMap {
    var result = DirectionMap.initFull(null);

    if (self.directionPrevious(from)) |prev| {
        result.put(.previous, prev.surface);
        if (!prev.wrapped) {
            result.put(.up, prev.surface);
            result.put(.left, prev.surface);
        }
    }

    if (self.directionNext(from)) |next| {
        result.put(.next, next.surface);
        if (!next.wrapped) {
            result.put(.down, next.surface);
                result.put(.right, next.surface);
            }
        }

    if (self.directionLeft(from)) |left| {
        result.put(.left, left);
    }

    if (self.directionRight(from)) |right| {
        result.put(.right, right);
    }

    return result;
}

// Navigation: previous.
fn directionPrevious(self: *const Split, from: Side) ?struct {
    surface: *Surface,
    wrapped: bool,
} {
    switch (from) {
        // From bottom right, previous is deepest surface in top left.
        .bottom_right => return .{ .surface = self.top_left.deepestSurface(.bottom_right).?, .wrapped = false },

        .top_left => {
            const parent = self.container.split() orelse return .{
                .surface = self.bottom_right.deepestSurface(.bottom_right) orelse return null,
                        .wrapped = true,
                    };
                const side = self.container.splitSide() orelse return null;
                return switch (side) {
                    .top_left => parent.directionPrevious(.top_left),
                    .bottom_right => parent.directionPrevious(.bottom_right),
                };
            }
    }
}

// Navigation: next.
fn directionNext(self: *const Split, from: Side) ?struct {
    surface: *Surface,
    wrapped: bool,
} {
    switch (from) {
        // From top left, next is deepest surface in bottom right.
        .top_left => return .{ .surface = self.bottom_right.deepestSurface(.top_left) orelse return null, .wrapped = false },

        .bottom_right => {
            const parent = self.container.split() orelse return .{
                    .surface = self.top_left.deepestSurface(.top_left) orelse return null,
                    .wrapped = true,
                };
                const side = self.container.splitSide() orelse return null;
                return switch (side) {
                    .top_left => parent.directionNext(.bottom_right),
                    .bottom_right => parent.directionNext(.bottom_right),
                };
            }
    }
}

// Horizontal navigation: left.
fn directionLeft(self: *const Split, from: Side) ?*Surface {
    switch (from) {
        .bottom_right => switch (self.orientation) {
            .horizontal => return self.top_left.deepestSurface(.bottom_right),
            .vertical => self.container.split().?.directionLeft(.top_left),
        },
        .top_left => self.container.split()?.directionLeft(.bottom_right),
    }
}

// Horizontal navigation: right.
fn directionRight(self: *const Split, from: Side) ?*Surface {
    switch (from) {
        .top_left => switch (self.orientation) {
            .horizontal => return self.bottom_right.deepestSurface(.top_left),
            .vertical => self.container.split().?.directionRight(.bottom_right),
        },
        .bottom_right => self.split()?.directionRight(.top_left),
    }
}

// Helper: detach children.
pub fn detachTopLeft(self: *const Split) void {
    self.paned.setStartChild(null);
}
pub fn detachBottomRight(self: *const Split) void {
    self.paned.setEndChild(null);
}

// Remove children from the GtkPaned.
fn removeChildren(self: *const Split) void {
    self.paned.setStartChild(null);
    self.paned.setEndChild(null);
}