
index 9abf5d13..f4df7057 100644
--- a/ghostty_src_apprt_gtk_Split.zig_expectedoutput.txt (expected):tmp/tmpayuk89_7_expected.txt	
+++ b/ghostty_src_apprt_gtk_Split.zig_extracted.txt (actual):tmp/tmptjt2162i_actual.txt	
@@ -10,7 +10,6 @@ const gobject = @import("gobject");
 const gtk = @import("gtk");
 
 const apprt = @import("../../apprt.zig");
-const font = @import("../../font/main.zig");
 const CoreSurface = @import("../../Surface.zig");
 
 const Surface = @import("Surface.zig");
@@ -26,13 +25,13 @@ pub const Orientation = enum {
     pub fn fromDirection(direction: apprt.action.SplitDirection) Orientation {
         return switch (direction) {
             .right, .left => .horizontal,
-            .down, .up => .vertical,
+            .down,  .up   => .vertical,
         };
     }
 
     pub fn fromResizeDirection(direction: apprt.action.ResizeSplit.Direction) Orientation {
         return switch (direction) {
-            .up, .down => .vertical,
+            .up, .down   => .vertical,
             .left, .right => .horizontal,
         };
     }
@@ -44,19 +43,14 @@ paned: *gtk.Paned,
 /// The container for this split panel.
 container: Surface.Container,
 
-/// The orientation of this split panel.
+/// The orientation of this split.
 orientation: Orientation,
 
 /// The elements of this split panel.
-top_left: Surface.Container.Elem,
+top_left:     Surface.Container.Elem,
 bottom_right: Surface.Container.Elem,
 
-/// Create a new split panel with the given sibling surface in the given
-/// direction. The direction is where the new surface will be initialized.
-///
-/// The sibling surface can be in a split already or it can be within a
-/// tab. This properly handles updating the surface container so that
-/// it represents the new split.
+/// Create a new split.
 pub fn create(
     alloc: Allocator,
     sibling: *Surface,
@@ -68,33 +62,24 @@ pub fn create(
     return split;
 }
 
+/// Initialize an already-allocated Split.
 pub fn init(
     self: *Split,
     sibling: *Surface,
     direction: apprt.action.SplitDirection,
 ) !void {
-    // If our sibling is too small to be split in half then we don't
-    // allow the split to happen. This avoids a situation where the
-    // split becomes too small.
-    //
-    // This is kind of a hack. Ideally we'd use gtk_widget_set_size_request
-    // properly along the path to ensure minimum sizes. I don't know if
-    // GTK even respects that all but any way GTK does this for us seems
-    // better than this.
+    // If the sibling would get too small by being split, abort.
     {
-        // This is the min size of the sibling split. This means the
-        // smallest split is half of this.
-        const multiplier = 4;
-
-        const size = &sibling.core_surface.size;
+        const min_cells = 4; // the new split would be <2×2 otherwise
+        const size  = &sibling.core_surface.size;
         const small = switch (direction) {
-            .right, .left => size.screen.width < size.cell.width * multiplier,
-            .down, .up => size.screen.height < size.cell.height * multiplier,
+            .right, .left => size.screen.width  < size.cell.width  * min_cells,
+            .down,  .up   => size.screen.height < size.cell.height * min_cells,
         };
         if (small) return error.SplitTooSmall;
     }
 
-    // Create the new child surface for the other direction.
+    // Create the new child surface.
     const alloc = sibling.app.core_app.alloc;
     var surface = try Surface.create(alloc, sibling.app, .{
         .parent = &sibling.core_surface,
@@ -103,195 +88,142 @@ pub fn init(
     sibling.dimSurface();
     sibling.setSplitZoom(false);
 
-    // Create the actual GTKPaned, attach the proper children.
+    // Build the GtkPaned.
     const orientation: gtk.Orientation = switch (direction) {
         .right, .left => .horizontal,
-        .down, .up => .vertical,
+        .down,  .up   => .vertical,
     };
     const paned = gtk.Paned.new(orientation);
     errdefer paned.unref();
+    paned.ref(); // long-lived
 
-    // Keep a long-lived reference, which we unref in destroy.
-    paned.ref();
-
-    // Update all of our containers to point to the right place.
-    // The split has to point to where the sibling pointed to because
-    // we're inheriting its parent. The sibling points to its location
-    // in the split, and the surface points to the other location.
+    // Update containers.
     const container = sibling.container;
     const tl: *Surface, const br: *Surface = switch (direction) {
-        .right, .down => right_down: {
-            sibling.container = .{ .split_tl = &self.top_left };
+        .right, .down => blk: {
+            sibling.container = .{ .split_tl = &self.top_left  };
             surface.container = .{ .split_br = &self.bottom_right };
-            break :right_down .{ sibling, surface };
+            break :blk .{ sibling, surface };
         },
-
-        .left, .up => left_up: {
+        .left, .up => blk: {
             sibling.container = .{ .split_br = &self.bottom_right };
             surface.container = .{ .split_tl = &self.top_left };
-            break :left_up .{ surface, sibling };
+            break :blk .{ surface, sibling };
         },
     };
 
     self.* = .{
-        .paned = paned,
-        .container = container,
-        .top_left = .{ .surface = tl },
-        .bottom_right = .{ .surface = br },
+        .paned       = paned,
+        .container   = container,
+        .top_left    = .{ .surface = tl },
+        .bottom_right= .{ .surface = br },
         .orientation = Orientation.fromDirection(direction),
     };
 
-    // Replace the previous containers element with our split. This allows a
-    // non-split to become a split, a split to become a nested split, etc.
+    // Replace previous element with our new split and wire up children.
     container.replace(.{ .split = self });
-
-    // Update our children so that our GL area is properly added to the paned.
     self.updateChildren();
 
-    // The new surface should always grab focus
+    // Focus the new surface.
     surface.grabFocus();
 }
 
+/// Destroy the split and its children.
 pub fn destroy(self: *Split, alloc: Allocator) void {
     self.top_left.deinit(alloc);
     self.bottom_right.deinit(alloc);
-
-    // Clean up our GTK reference. This will trigger all the destroy callbacks
-    // that are necessary for the surfaces to clean up.
     self.paned.unref();
-
     alloc.destroy(self);
 }
 
-/// Remove the top left child.
-pub fn removeTopLeft(self: *Split) void {
-    self.removeChild(self.top_left, self.bottom_right);
-}
-
-/// Remove the top left child.
-pub fn removeBottomRight(self: *Split) void {
-    self.removeChild(self.bottom_right, self.top_left);
-}
-
+/// Remove one child, collapsing the split.
 fn removeChild(
     self: *Split,
     remove: Surface.Container.Elem,
-    keep: Surface.Container.Elem,
+    keep:   Surface.Container.Elem,
 ) void {
     const window = self.container.window() orelse return;
-    const alloc = window.app.core_app.alloc;
+    const alloc  = window.app.core_app.alloc;
 
-    // Remove our children since we are going to no longer be a split anyways.
-    // This prevents widgets with multiple parents.
+    // We’re no longer a split – clean up.
     self.removeChildren();
-
-    // Our container must become whatever our top left is
     self.container.replace(keep);
-
-    // Grab focus of the left-over side
     keep.grabFocus();
 
-    // When a child is removed we are no longer a split, so destroy ourself
     remove.deinit(alloc);
     alloc.destroy(self);
 }
 
-/// Move the divider in the given direction by the given amount.
+/// Convenience helpers.
+pub fn removeTopLeft   (self: *Split) void { self.removeChild(self.top_left,     self.bottom_right); }
+pub fn removeBottomRight(self: *Split) void { self.removeChild(self.bottom_right, self.top_left    ); }
+
+/// Move divider by amount in direction.
 pub fn moveDivider(
     self: *Split,
     direction: apprt.action.ResizeSplit.Direction,
     amount: u16,
 ) void {
     const min_pos = 10;
-
-    const pos = self.paned.getPosition();
-    const new = switch (direction) {
-        .up, .left => @max(pos - amount, min_pos),
-        .down, .right => new_pos: {
+    const pos     = self.paned.getPosition();
+    const new     = switch (direction) {
+        .up, .left   => @max(pos - amount, min_pos),
+        .down, .right => blk: {
             const max_pos: u16 = @as(u16, @intFromFloat(self.maxPosition())) - min_pos;
-            break :new_pos @min(pos + amount, max_pos);
+            break :blk @min(pos + amount, max_pos);
         },
     };
-
     self.paned.setPosition(new);
 }
 
-/// Equalize the splits in this split panel. Each split is equalized based on
-/// its weight, i.e. the number of Surfaces it contains.
-///
-/// It works recursively by equalizing the children of each split.
-///
-/// It returns this split's weight.
+/// Equalize child splits recursively; returns weight.
 pub fn equalize(self: *Split) f64 {
-    // Calculate weights of top_left/bottom_right
-    const top_left_weight = self.top_left.equalize();
-    const bottom_right_weight = self.bottom_right.equalize();
-    const weight = top_left_weight + bottom_right_weight;
-
-    // Ratio of top_left weight to overall weight, which gives the split ratio
-    const ratio = top_left_weight / weight;
-
-    // Convert split ratio into new position for divider
-    self.paned.setPosition(@intFromFloat(self.maxPosition() * ratio));
-
-    return weight;
+    const wl = self.top_left.equalize();
+    const wr = self.bottom_right.equalize();
+    const w  = wl + wr;
+    self.paned.setPosition(@intFromFloat(self.maxPosition() * (wl / w)));
+    return w;
 }
 
-// maxPosition returns the maximum position of the GtkPaned, which is the
-// "max-position" attribute.
+/// Maximum position (property “max-position”) of the paned.
 fn maxPosition(self: *Split) f64 {
     var value: gobject.Value = std.mem.zeroes(gobject.Value);
     defer value.unset();
 
     _ = value.init(gobject.ext.types.int);
-    self.paned.as(gobject.Object).getProperty(
-        "max-position",
-        &value,
-    );
-
+    self.paned.as(gobject.Object).getProperty("max-position", &value);
     return @floatFromInt(value.getInt());
 }
 
-// This replaces the element at the given pointer with a new element.
-// The ptr must be either top_left or bottom_right (asserted in debug).
-// The memory of the old element must be freed or otherwise handled by
-// the caller.
+/// Replace element at pointer with new element.
 pub fn replace(
     self: *Split,
     ptr: *Surface.Container.Elem,
     new: Surface.Container.Elem,
 ) void {
-    // We can write our element directly. There's nothing special.
-    assert(&self.top_left == ptr or &self.bottom_right == ptr);
+    assert(ptr == &self.top_left or ptr == &self.bottom_right);
+
     ptr.* = new;
 
-    // Update our paned children. This will reset the divider
-    // position but we want to keep it in place so save and restore it.
     const pos = self.paned.getPosition();
     defer self.paned.setPosition(pos);
+
     self.updateChildren();
 }
 
-// grabFocus grabs the focus of the top-left element.
+/// Focus on first surface (top-left).
 pub fn grabFocus(self: *Split) void {
     self.top_left.grabFocus();
 }
 
-/// Update the paned children to represent the current state.
-/// This should be called anytime the top/left or bottom/right
-/// element is changed.
+/// Update paned children to match state.
 pub fn updateChildren(self: *const Split) void {
-    // We have to set both to null. If we overwrite the pane with
-    // the same value, then GTK bugs out (the GL area unrealizes
-    // and never rerealizes).
     self.removeChildren();
-
-    // Set our current children
     self.paned.setStartChild(self.top_left.widget());
-    self.paned.setEndChild(self.bottom_right.widget());
+    self.paned.setEndChild  (self.bottom_right.widget());
 }
 
-/// A mapping of direction to the element (if any) in that direction.
+/// Mapping type used for goto-split.
 pub const DirectionMap = std.EnumMap(
     apprt.action.GotoSplit,
     ?*Surface,
@@ -299,143 +231,101 @@ pub const DirectionMap = std.EnumMap(
 
 pub const Side = enum { top_left, bottom_right };
 
-/// Returns the map that can be used to determine elements in various
-/// directions (primarily for gotoSplit).
+/// Compute map of neighbour surfaces relative to “from”.
 pub fn directionMap(self: *const Split, from: Side) DirectionMap {
     var result = DirectionMap.initFull(null);
 
     if (self.directionPrevious(from)) |prev| {
         result.put(.previous, prev.surface);
-        if (!prev.wrapped) {
-            result.put(.up, prev.surface);
-        }
+        if (!prev.wrapped) result.put(.up, prev.surface);
     }
-
     if (self.directionNext(from)) |next| {
         result.put(.next, next.surface);
-        if (!next.wrapped) {
-            result.put(.down, next.surface);
-        }
-    }
-
-    if (self.directionLeft(from)) |left| {
-        result.put(.left, left);
-    }
-
-    if (self.directionRight(from)) |right| {
-        result.put(.right, right);
+        if (!next.wrapped) result.put(.down, next.surface);
     }
+    if (self.directionLeft(from)) |l|  result.put(.left,  l);
+    if (self.directionRight(from))|r|  result.put(.right, r);
 
     return result;
 }
 
+/// Horizontal neighbour to the left.
 fn directionLeft(self: *const Split, from: Side) ?*Surface {
     switch (from) {
-        .bottom_right => {
-            switch (self.orientation) {
-                .horizontal => return self.top_left.deepestSurface(.bottom_right),
-                .vertical => return directionLeft(
-                    self.container.split() orelse return null,
-                    .bottom_right,
-                ),
-            }
+        .bottom_right => switch (self.orientation) {
+            .horizontal => return self.top_left.deepestSurface(.bottom_right),
+            .vertical   => return directionLeft(self.container.split() orelse return null, .bottom_right),
         },
-        .top_left => return directionLeft(
-            self.container.split() orelse return null,
-            .bottom_right,
-        ),
+        .top_left => return directionLeft(self.container.split() orelse return null, .bottom_right),
     }
 }
 
+/// Horizontal neighbour to the right.
 fn directionRight(self: *const Split, from: Side) ?*Surface {
     switch (from) {
-        .top_left => {
-            switch (self.orientation) {
-                .horizontal => return self.bottom_right.deepestSurface(.top_left),
-                .vertical => return directionRight(
-                    self.container.split() orelse return null,
-                    .top_left,
-                ),
-            }
+        .top_left => switch (self.orientation) {
+            .horizontal => return self.bottom_right.deepestSurface(.top_left),
+            .vertical   => return directionRight(self.container.split() orelse return null, .top_left),
         },
-        .bottom_right => return directionRight(
-            self.container.split() orelse return null,
-            .top_left,
-        ),
+        .bottom_right => return directionRight(self.container.split() orelse return null, .top_left),
     }
 }
 
-fn directionPrevious(self: *const Split, from: Side) ?struct {
-    surface: *Surface,
-    wrapped: bool,
-} {
+/// Previous/next helpers (used for goto-split up/down/previous/next).
+fn directionPrevious(self: *const Split, from: Side) ?struct { surface: *Surface, wrapped: bool } {
     switch (from) {
-        // From the bottom right, our previous is the deepest surface
-        // in the top-left of our own split.
-        .bottom_right => return .{
-            .surface = self.top_left.deepestSurface(.bottom_right) orelse return null,
-            .wrapped = false,
-        },
-
-        // From the top left its more complicated. It is the de
+        .bottom_right => return .{ .surface = self.top_left.deepestSurface(.bottom_right) orelse return null, .wrapped = false },
         .top_left => {
-            // If we have no parent split then there can be no unwrapped prev.
-            // We can still have a wrapped previous.
             const parent = self.container.split() orelse return .{
                 .surface = self.bottom_right.deepestSurface(.bottom_right) orelse return null,
                 .wrapped = true,
             };
-
-            // The previous value is the previous of the side that we are.
             const side = self.container.splitSide() orelse return null;
             return switch (side) {
-                .top_left => parent.directionPrevious(.top_left),
-                .bottom_right => parent.directionPrevious(.bottom_right),
+                .top_left      => parent.directionPrevious(.top_left),
+                .bottom_right  => parent.directionPrevious(.bottom_right),
             };
         },
     }
 }
 
-fn directionNext(self: *const Split, from: Side) ?struct {
-    surface: *Surface,
-    wrapped: bool,
-} {
+fn directionNext(self: *const Split, from: Side) ?struct { surface: *Surface, wrapped: bool } {
     switch (from) {
-        // From the top left, our next is the earliest surface in the
-        // top-left direction of the bottom-right side of our split. Fun!
-        .top_left => return .{
-            .surface = self.bottom_right.deepestSurface(.top_left) orelse return null,
-            .wrapped = false,
-        },
-
-        // From the bottom right is more compliated. It is the deepest
-        // (last) surface in the
+        .top_left => return .{ .surface = self.bottom_right.deepestSurface(.top_left) orelse return null, .wrapped = false },
         .bottom_right => {
-            // If we have no parent split then there can be no next.
             const parent = self.container.split() orelse return .{
                 .surface = self.top_left.deepestSurface(.top_left) orelse return null,
                 .wrapped = true,
             };
-
-            // The previous value is the previous of the side that we are.
             const side = self.container.splitSide() orelse return null;
             return switch (side) {
-                .top_left => parent.directionNext(.top_left),
+                .top_left     => parent.directionNext(.top_left),
                 .bottom_right => parent.directionNext(.bottom_right),
             };
         },
     }
 }
 
-pub fn detachTopLeft(self: *const Split) void {
-    self.paned.setStartChild(null);
-}
-
-pub fn detachBottomRight(self: *const Split) void {
-    self.paned.setEndChild(null);
-}
+/// Detach helpers used when collapsing.
+pub fn detachTopLeft   (self: *const Split) void { self.paned.setStartChild(null); }
+pub fn detachBottomRight(self: *const Split) void { self.paned.setEndChild(null); }
 
+/// Remove both children from paned.
 fn removeChildren(self: *const Split) void {
     self.detachTopLeft();
     self.detachBottomRight();
+}
+
+/// Recursively find deepest surface on a side.
+fn deepestSurface(self: *const Split, side: Side) *Surface {
+    return switch (side) {
+        .bottom_right => switch (self.bottom_right) {
+            .surface => |s| s,
+            .split   => |s| s.deepestSurface(.bottom_right),
+        },
+        .top_left => switch (self.top_left) {
+            .surface => |s| s,
+            .split   => |s| s.deepestSurface(.top_left),
+        },
+    };
 }
\ No newline at end of file
