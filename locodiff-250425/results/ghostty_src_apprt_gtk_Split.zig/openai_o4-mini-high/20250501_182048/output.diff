
index 9abf5d13..4bb0acdf 100644
--- a/ghostty_src_apprt_gtk_Split.zig_expectedoutput.txt (expected):tmp/tmpmtfiqpqy_expected.txt	
+++ b/ghostty_src_apprt_gtk_Split.zig_extracted.txt (actual):tmp/tmpgp51uwwk_actual.txt	
@@ -1,7 +1,4 @@
-/// Split represents a surface split where two surfaces are shown side-by-side
-/// within the same window either vertically or horizontally.
 const Split = @This();
-
 const std = @import("std");
 const Allocator = std.mem.Allocator;
 const assert = std.debug.assert;
@@ -53,10 +50,6 @@ bottom_right: Surface.Container.Elem,
 
 /// Create a new split panel with the given sibling surface in the given
 /// direction. The direction is where the new surface will be initialized.
-///
-/// The sibling surface can be in a split already or it can be within a
-/// tab. This properly handles updating the surface container so that
-/// it represents the new split.
 pub fn create(
     alloc: Allocator,
     sibling: *Surface,
@@ -76,16 +69,8 @@ pub fn init(
     // If our sibling is too small to be split in half then we don't
     // allow the split to happen. This avoids a situation where the
     // split becomes too small.
-    //
-    // This is kind of a hack. Ideally we'd use gtk_widget_set_size_request
-    // properly along the path to ensure minimum sizes. I don't know if
-    // GTK even respects that all but any way GTK does this for us seems
-    // better than this.
     {
-        // This is the min size of the sibling split. This means the
-        // smallest split is half of this.
         const multiplier = 4;
-
         const size = &sibling.core_surface.size;
         const small = switch (direction) {
             .right, .left => size.screen.width < size.cell.width * multiplier,
@@ -100,6 +85,7 @@ pub fn init(
         .parent = &sibling.core_surface,
     });
     errdefer surface.destroy(alloc);
+
     sibling.dimSurface();
     sibling.setSplitZoom(false);
 
@@ -114,10 +100,6 @@ pub fn init(
     // Keep a long-lived reference, which we unref in destroy.
     paned.ref();
 
-    // Update all of our containers to point to the right place.
-    // The split has to point to where the sibling pointed to because
-    // we're inheriting its parent. The sibling points to its location
-    // in the split, and the surface points to the other location.
     const container = sibling.container;
     const tl: *Surface, const br: *Surface = switch (direction) {
         .right, .down => right_down: {
@@ -125,7 +107,6 @@ pub fn init(
             surface.container = .{ .split_br = &self.bottom_right };
             break :right_down .{ sibling, surface };
         },
-
         .left, .up => left_up: {
             sibling.container = .{ .split_br = &self.bottom_right };
             surface.container = .{ .split_tl = &self.top_left };
@@ -168,7 +149,7 @@ pub fn removeTopLeft(self: *Split) void {
     self.removeChild(self.top_left, self.bottom_right);
 }
 
-/// Remove the top left child.
+/// Remove the bottom right child.
 pub fn removeBottomRight(self: *Split) void {
     self.removeChild(self.bottom_right, self.top_left);
 }
@@ -185,9 +166,6 @@ fn removeChild(
     // This prevents widgets with multiple parents.
     self.removeChildren();
 
-    // Our container must become whatever our top left is
-    self.container.replace(keep);
-
     // Grab focus of the left-over side
     keep.grabFocus();
 
@@ -212,16 +190,11 @@ pub fn moveDivider(
             break :new_pos @min(pos + amount, max_pos);
         },
     };
-
     self.paned.setPosition(new);
 }
 
 /// Equalize the splits in this split panel. Each split is equalized based on
 /// its weight, i.e. the number of Surfaces it contains.
-///
-/// It works recursively by equalizing the children of each split.
-///
-/// It returns this split's weight.
 pub fn equalize(self: *Split) f64 {
     // Calculate weights of top_left/bottom_right
     const top_left_weight = self.top_left.equalize();
@@ -261,25 +234,11 @@ pub fn replace(
     ptr: *Surface.Container.Elem,
     new: Surface.Container.Elem,
 ) void {
-    // We can write our element directly. There's nothing special.
-    assert(&self.top_left == ptr or &self.bottom_right == ptr);
-    ptr.* = new;
-
-    // Update our paned children. This will reset the divider
-    // position but we want to keep it in place so save and restore it.
     const pos = self.paned.getPosition();
     defer self.paned.setPosition(pos);
     self.updateChildren();
 }
 
-// grabFocus grabs the focus of the top-left element.
-pub fn grabFocus(self: *Split) void {
-    self.top_left.grabFocus();
-}
-
-/// Update the paned children to represent the current state.
-/// This should be called anytime the top/left or bottom/right
-/// element is changed.
 pub fn updateChildren(self: *const Split) void {
     // We have to set both to null. If we overwrite the pane with
     // the same value, then GTK bugs out (the GL area unrealizes
@@ -299,72 +258,6 @@ pub const DirectionMap = std.EnumMap(
 
 pub const Side = enum { top_left, bottom_right };
 
-/// Returns the map that can be used to determine elements in various
-/// directions (primarily for gotoSplit).
-pub fn directionMap(self: *const Split, from: Side) DirectionMap {
-    var result = DirectionMap.initFull(null);
-
-    if (self.directionPrevious(from)) |prev| {
-        result.put(.previous, prev.surface);
-        if (!prev.wrapped) {
-            result.put(.up, prev.surface);
-        }
-    }
-
-    if (self.directionNext(from)) |next| {
-        result.put(.next, next.surface);
-        if (!next.wrapped) {
-            result.put(.down, next.surface);
-        }
-    }
-
-    if (self.directionLeft(from)) |left| {
-        result.put(.left, left);
-    }
-
-    if (self.directionRight(from)) |right| {
-        result.put(.right, right);
-    }
-
-    return result;
-}
-
-fn directionLeft(self: *const Split, from: Side) ?*Surface {
-    switch (from) {
-        .bottom_right => {
-            switch (self.orientation) {
-                .horizontal => return self.top_left.deepestSurface(.bottom_right),
-                .vertical => return directionLeft(
-                    self.container.split() orelse return null,
-                    .bottom_right,
-                ),
-            }
-        },
-        .top_left => return directionLeft(
-            self.container.split() orelse return null,
-            .bottom_right,
-        ),
-    }
-}
-
-fn directionRight(self: *const Split, from: Side) ?*Surface {
-    switch (from) {
-        .top_left => {
-            switch (self.orientation) {
-                .horizontal => return self.bottom_right.deepestSurface(.top_left),
-                .vertical => return directionRight(
-                    self.container.split() orelse return null,
-                    .top_left,
-                ),
-            }
-        },
-        .bottom_right => return directionRight(
-            self.container.split() orelse return null,
-            .top_left,
-        ),
-    }
-}
-
 fn directionPrevious(self: *const Split, from: Side) ?struct {
     surface: *Surface,
     wrapped: bool,
@@ -377,7 +270,8 @@ fn directionPrevious(self: *const Split, from: Side) ?struct {
             .wrapped = false,
         },
 
-        // From the top left its more complicated. It is the de
+        // From the top left its more complicated. It is the unwrapped
+        // previous.
         .top_left => {
             // If we have no parent split then there can be no unwrapped prev.
             // We can still have a wrapped previous.
@@ -402,22 +296,22 @@ fn directionNext(self: *const Split, from: Side) ?struct {
 } {
     switch (from) {
         // From the top left, our next is the earliest surface in the
-        // top-left direction of the bottom-right side of our split. Fun!
+        // bottom-right direction of our split.
         .top_left => return .{
             .surface = self.bottom_right.deepestSurface(.top_left) orelse return null,
             .wrapped = false,
         },
 
-        // From the bottom right is more compliated. It is the deepest
-        // (last) surface in the
+        // From the bottom right it is more complicated.
         .bottom_right => {
-            // If we have no parent split then there can be no next.
+            // If we have no parent split then there can be no unwrapped next.
+            // We can still have a wrapped next.
             const parent = self.container.split() orelse return .{
                 .surface = self.top_left.deepestSurface(.top_left) orelse return null,
                 .wrapped = true,
             };
 
-            // The previous value is the previous of the side that we are.
+            // The next value is the next of the side that we are.
             const side = self.container.splitSide() orelse return null;
             return switch (side) {
                 .top_left => parent.directionNext(.top_left),
