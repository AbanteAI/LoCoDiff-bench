
index 9abf5d13..d04b82f1 100644
--- a/ghostty_src_apprt_gtk_Split.zig_expectedoutput.txt (expected):tmp/tmpyyblnp1s_expected.txt	
+++ b/ghostty_src_apprt_gtk_Split.zig_extracted.txt (actual):tmp/tmp_cszqr_0_actual.txt	
@@ -297,7 +297,6 @@ pub const DirectionMap = std.EnumMap(
     ?*Surface,
 );
 
-pub const Side = enum { top_left, bottom_right };
 
 /// Returns the map that can be used to determine elements in various
 /// directions (primarily for gotoSplit).
@@ -307,135 +306,4 @@ pub fn directionMap(self: *const Split, from: Side) DirectionMap {
     if (self.directionPrevious(from)) |prev| {
         result.put(.previous, prev.surface);
         if (!prev.wrapped) {
-            result.put(.up, prev.surface);
-        }
-    }
-
-    if (self.directionNext(from)) |next| {
-        result.put(.next, next.surface);
-        if (!next.wrapped) {
-            result.put(.down, next.surface);
-        }
-    }
-
-    if (self.directionLeft(from)) |left| {
-        result.put(.left, left);
-    }
-
-    if (self.directionRight(from)) |right| {
-        result.put(.right, right);
-    }
-
-    return result;
-}
-
-fn directionLeft(self: *const Split, from: Side) ?*Surface {
-    switch (from) {
-        .bottom_right => {
-            switch (self.orientation) {
-                .horizontal => return self.top_left.deepestSurface(.bottom_right),
-                .vertical => return directionLeft(
-                    self.container.split() orelse return null,
-                    .bottom_right,
-                ),
-            }
-        },
-        .top_left => return directionLeft(
-            self.container.split() orelse return null,
-            .bottom_right,
-        ),
-    }
-}
-
-fn directionRight(self: *const Split, from: Side) ?*Surface {
-    switch (from) {
-        .top_left => {
-            switch (self.orientation) {
-                .horizontal => return self.bottom_right.deepestSurface(.top_left),
-                .vertical => return directionRight(
-                    self.container.split() orelse return null,
-                    .top_left,
-                ),
-            }
-        },
-        .bottom_right => return directionRight(
-            self.container.split() orelse return null,
-            .top_left,
-        ),
-    }
-}
-
-fn directionPrevious(self: *const Split, from: Side) ?struct {
-    surface: *Surface,
-    wrapped: bool,
-} {
-    switch (from) {
-        // From the bottom right, our previous is the deepest surface
-        // in the top-left of our own split.
-        .bottom_right => return .{
-            .surface = self.top_left.deepestSurface(.bottom_right) orelse return null,
-            .wrapped = false,
-        },
-
-        // From the top left its more complicated. It is the de
-        .top_left => {
-            // If we have no parent split then there can be no unwrapped prev.
-            // We can still have a wrapped previous.
-            const parent = self.container.split() orelse return .{
-                .surface = self.bottom_right.deepestSurface(.bottom_right) orelse return null,
-                .wrapped = true,
-            };
-
-            // The previous value is the previous of the side that we are.
-            const side = self.container.splitSide() orelse return null;
-            return switch (side) {
-                .top_left => parent.directionPrevious(.top_left),
-                .bottom_right => parent.directionPrevious(.bottom_right),
-            };
-        },
-    }
-}
-
-fn directionNext(self: *const Split, from: Side) ?struct {
-    surface: *Surface,
-    wrapped: bool,
-} {
-    switch (from) {
-        // From the top left, our next is the earliest surface in the
-        // top-left direction of the bottom-right side of our split. Fun!
-        .top_left => return .{
-            .surface = self.bottom_right.deepestSurface(.top_left) orelse return null,
-            .wrapped = false,
-        },
-
-        // From the bottom right is more compliated. It is the deepest
-        // (last) surface in the
-        .bottom_right => {
-            // If we have no parent split then there can be no next.
-            const parent = self.container.split() orelse return .{
-                .surface = self.top_left.deepestSurface(.top_left) orelse return null,
-                .wrapped = true,
-            };
-
-            // The previous value is the previous of the side that we are.
-            const side = self.container.splitSide() orelse return null;
-            return switch (side) {
-                .top_left => parent.directionNext(.top_left),
-                .bottom_right => parent.directionNext(.bottom_right),
-            };
-        },
-    }
-}
-
-pub fn detachTopLeft(self: *const Split) void {
-    self.paned.setStartChild(null);
-}
-
-pub fn detachBottomRight(self: *const Split) void {
-    self.paned.setEndChild(null);
-}
-
-fn removeChildren(self: *const Split) void {
-    self.detachTopLeft();
-    self.detachBottomRight();
-}
\ No newline at end of file
+            result.put(.up, prev.surface);
\ No newline at end of file
