
index a92ff0946..196aac48f 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmp0is0xoxs_expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmp8vf09u6f_actual.txt	
@@ -7,7 +7,7 @@
  * @emails react-core
  */
 
-'use strict';
+ 'use strict';
 
 let React;
 let ReactDOM;
@@ -113,12 +113,14 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+      );
+    });
 
     expect(log).toEqual([
       'constructor',
@@ -133,12 +135,14 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -152,12 +156,14 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
 
     expect(log).toEqual([
       'getDerivedStateFromProps',
@@ -206,60 +212,12 @@ describe('ReactStrictMode', () => {
   });
 
   // @gate __DEV__
-  it('double invokes useState and useReducer initializers functions', async () => {
-    const log = [];
-
-    function App() {
-      React.useState(() => {
-        log.push('Compute initial state count: 1');
-        return 1;
-      });
-      React.useReducer(
-        s => s,
-        2,
-        s => {
-          log.push('Compute initial reducer count: 2');
-          return s;
-        },
-      );
-
-      return 3;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('3');
-
-    expect(log).toEqual([
-      'Compute initial state count: 1',
-      'Compute initial state count: 1',
-      'Compute initial reducer count: 2',
-      'Compute initial reducer count: 2',
-    ]);
-  });
-
   // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
     const {StrictMode} = React;
 
     let log = [];
     let shouldComponentUpdate = false;
-
-    function Root() {
-      return (
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>
-      );
-    }
-
     class ClassComponent extends React.Component {
       state = {};
       static getDerivedStateFromProps() {
@@ -290,69 +248,67 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <StrictMode>
+          <ClassComponent />
+        </StrictMode>,
+      );
+    });
+
+    expect(log).toEqual([
+      'constructor',
+      'constructor',
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'render',
+      'render',
+      'componentDidMount',
+    ]);
 
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
+    await act(() => {
+      root.render(
+        <StrictMode>
+          <ClassComponent />
+        </StrictMode>,
+        container,
+      );
+    });
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+      'render',
+      'render',
+      'componentDidUpdate',
+    ]);
 
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
+    await act(() => {
+      root.render(
+        <StrictMode>
+          <ClassComponent />
+        </StrictMode>,
+        container,
+      );
+    });
+
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+    ]);
   });
 
+  // @gate __DEV__
   it('should invoke setState callbacks twice in DEV', async () => {
     const {StrictMode} = React;
 
@@ -394,166 +350,28 @@ describe('ReactStrictMode', () => {
   });
 
   // @gate __DEV__
-  it('double invokes useMemo functions', async () => {
-    let log = [];
-
-    function Uppercased({text}) {
-      return useMemo(() => {
-        const uppercased = text.toUpperCase();
-        log.push('Compute toUpperCase: ' + uppercased);
-        return uppercased;
-      }, [text]);
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    // Mount
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="hello" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('HELLO');
-    expect(log).toEqual([
-      'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
-    ]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-    ]);
-  });
-
-  // @gate __DEV__
-  it('double invokes useMemo functions with first result', async () => {
-    let log = [];
-    function Uppercased({text}) {
-      const memoizedResult = useMemo(() => {
-        const uppercased = text.toUpperCase();
-        log.push('Compute toUpperCase: ' + uppercased);
-        return {uppercased};
-      }, [text]);
-
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
-      log.push(memoizedResult);
-
-      return memoizedResult.uppercased;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    // Mount
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="hello" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('HELLO');
-    expect(log).toEqual([
-      'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
-      {uppercased: 'HELLO'},
-      {uppercased: 'HELLO'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-      {uppercased: 'GOODBYE'},
-      {uppercased: 'GOODBYE'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-  });
-
-  // @gate __DEV__
-  it('double invokes setState updater functions', async () => {
+  it('double invokes useState and useReducer initializers functions', async () => {
     const log = [];
 
-    let setCount;
     function App() {
-      const [count, _setCount] = useState(0);
-      setCount = _setCount;
-      return count;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('0');
-
-    await act(() => {
-      setCount(() => {
-        log.push('Compute count: 1');
+      React.useState(() => {
+        log.push('Compute initial state count: 1');
         return 1;
       });
-    });
-    expect(container.textContent).toBe('1');
-    expect(log).toEqual(['Compute count: 1', 'Compute count: 1']);
-  });
-
-  // @gate __DEV__
-  it('double invokes reducer functions', async () => {
-    const log = [];
-
-    function reducer(prevState, action) {
-      log.push('Compute new state: ' + action);
-      return action;
-    }
+      React.useReducer(
+        s => s,
+        2,
+        s => {
+          log.push('Compute initial reducer count: 2');
+          return s;
+        },
+      );
 
-    let dispatch;
-    function App() {
-      const [count, _dispatch] = useReducer(reducer, 0);
-      dispatch = _dispatch;
-      return count;
+      return 3;
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -561,13 +379,14 @@ describe('ReactStrictMode', () => {
         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('0');
+    expect(container.textContent).toBe('3');
 
-    await act(() => {
-      dispatch(1);
-    });
-    expect(container.textContent).toBe('1');
-    expect(log).toEqual(['Compute new state: 1', 'Compute new state: 1']);
+    expect(log).toEqual([
+      'Compute initial state count: 1',
+      'Compute initial state count: 1',
+      'Compute initial reducer count: 2',
+      'Compute initial reducer count: 2',
+    ]);
   });
 });
 
@@ -835,7 +654,6 @@ Please update the following components: Parent`,
       {withoutStack: true},
     );
 
-    // Dedupe
     await act(() => {
       root.render(<SyncRoot />);
     });
