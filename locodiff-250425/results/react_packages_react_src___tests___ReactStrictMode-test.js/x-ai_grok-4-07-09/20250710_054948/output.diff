
index a92ff0946..56b87487f 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmp3zau8x1x_expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmp81sg0kzr_actual.txt	
@@ -3,8 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -13,6 +11,7 @@ let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
+let Scheduler;
 let PropTypes;
 let act;
 let useMemo;
@@ -28,11 +27,9 @@ describe('ReactStrictMode', () => {
     ReactDOM = require('react-dom');
     ReactDOMClient = require('react-dom/client');
     ReactDOMServer = require('react-dom/server');
-    ({
-      act,
-      assertConsoleErrorDev,
-      assertConsoleWarnDev,
-    } = require('internal-test-utils'));
+    Scheduler = require('scheduler');
+    PropTypes = require('prop-types');
+    ({act, assertConsoleErrorDev, assertConsoleWarnDev} = require('internal-test-utils'));
     useMemo = React.useMemo;
     useState = React.useState;
     useReducer = React.useReducer;
@@ -53,10 +50,9 @@ describe('ReactStrictMode', () => {
       );
     });
     assertConsoleErrorDev([
-      'Invalid ARIA attribute `ariaTypo`. ' +
-        'ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in div (at **)\n' +
-        '    in Foo (at **)',
+      'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
+      '    in div (at **)\n' +
+      '    in Foo (at **)',
     ]);
   });
 
@@ -71,15 +67,13 @@ describe('ReactStrictMode', () => {
       </React.StrictMode>,
     );
     assertConsoleErrorDev([
-      'Invalid ARIA attribute `ariaTypo`. ' +
-        'ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
-        '    in div (at **)\n' +
-        '    in Foo (at **)',
+      'Invalid ARIA attribute `ariaTypo`. ARIA attributes follow the pattern aria-* and must be lowercase.\n' +
+      '    in div (at **)\n' +
+      '    in Foo (at **)',
     ]);
   });
 
   // @gate __DEV__
-  // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in legacy roots', async () => {
     let log = [];
     let shouldComponentUpdate = false;
@@ -292,65 +286,49 @@ describe('ReactStrictMode', () => {
     const container = document.createElement('div');
     ReactDOM.render(<Root />, container);
 
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
+    expect(log).toEqual([
+      'constructor',
+      'constructor',
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'render',
+      'render',
+      'componentDidMount',
+    ]);
 
     log = [];
     shouldComponentUpdate = true;
 
     ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+      'render',
+      'render',
+      'componentDidUpdate',
+    ]);
+
+    log = [];
+  (()) {
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'render',
+      'render',
+      'componentDidUpdate',
+    ]);
 
     log = [];
     shouldComponentUpdate = false;
 
     ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+    ]);
   });
 
   it('should invoke setState callbacks twice in DEV', async () => {
@@ -392,183 +370,6 @@ describe('ReactStrictMode', () => {
     // But each time `state` should be the previous value
     expect(instance.state.count).toBe(2);
   });
-
-  // @gate __DEV__
-  it('double invokes useMemo functions', async () => {
-    let log = [];
-
-    function Uppercased({text}) {
-      return useMemo(() => {
-        const uppercased = text.toUpperCase();
-        log.push('Compute toUpperCase: ' + uppercased);
-        return uppercased;
-      }, [text]);
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    // Mount
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="hello" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('HELLO');
-    expect(log).toEqual([
-      'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
-    ]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-    ]);
-  });
-
-  // @gate __DEV__
-  it('double invokes useMemo functions with first result', async () => {
-    let log = [];
-    function Uppercased({text}) {
-      const memoizedResult = useMemo(() => {
-        const uppercased = text.toUpperCase();
-        log.push('Compute toUpperCase: ' + uppercased);
-        return {uppercased};
-      }, [text]);
-
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
-      log.push(memoizedResult);
-
-      return memoizedResult.uppercased;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    // Mount
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="hello" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('HELLO');
-    expect(log).toEqual([
-      'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
-      {uppercased: 'HELLO'},
-      {uppercased: 'HELLO'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-      {uppercased: 'GOODBYE'},
-      {uppercased: 'GOODBYE'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-  });
-
-  // @gate __DEV__
-  it('double invokes setState updater functions', async () => {
-    const log = [];
-
-    let setCount;
-    function App() {
-      const [count, _setCount] = useState(0);
-      setCount = _setCount;
-      return count;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('0');
-
-    await act(() => {
-      setCount(() => {
-        log.push('Compute count: 1');
-        return 1;
-      });
-    });
-    expect(container.textContent).toBe('1');
-    expect(log).toEqual(['Compute count: 1', 'Compute count: 1']);
-  });
-
-  // @gate __DEV__
-  it('double invokes reducer functions', async () => {
-    const log = [];
-
-    function reducer(prevState, action) {
-      log.push('Compute new state: ' + action);
-      return action;
-    }
-
-    let dispatch;
-    function App() {
-      const [count, _dispatch] = useReducer(reducer, 0);
-      dispatch = _dispatch;
-      return count;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('0');
-
-    await act(() => {
-      dispatch(1);
-    });
-    expect(container.textContent).toBe('1');
-    expect(log).toEqual(['Compute new state: 1', 'Compute new state: 1']);
-  });
 });
 
 describe('Concurrent Mode', () => {
@@ -710,20 +511,20 @@ Please update the following components: App`,
         `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move code with side effects to componentDidMount, and set initial state in the constructor.
-* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
+* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.
 
 Please update the following components: Parent`,
         `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
+* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.
 
 Please update the following components: Parent`,
         `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
-* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
+* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.
 
 Please update the following components: Parent`,
       ],
