
index a92ff094..2a158b9d 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmphvtex7pl_expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmpo71efx1k_actual.txt	
@@ -13,6 +13,7 @@ let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
+let Scheduler;
 let PropTypes;
 let act;
 let useMemo;
@@ -79,8 +80,7 @@ describe('ReactStrictMode', () => {
   });
 
   // @gate __DEV__
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in legacy roots', async () => {
+  it('should invoke precommit lifecycle methods twice', async () => {
     let log = [];
     let shouldComponentUpdate = false;
     class ClassComponent extends React.Component {
@@ -113,12 +113,14 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+      );
+    });
 
     expect(log).toEqual([
       'constructor',
@@ -133,12 +135,13 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -152,12 +155,13 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+      );
+    });
 
     expect(log).toEqual([
       'getDerivedStateFromProps',
@@ -199,9 +203,7 @@ describe('ReactStrictMode', () => {
       });
     });
 
-    // Callback should be invoked twice in DEV
     expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
     expect(instance.state.count).toBe(2);
   });
 
@@ -245,154 +247,6 @@ describe('ReactStrictMode', () => {
     ]);
   });
 
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
-    const {StrictMode} = React;
-
-    let log = [];
-    let shouldComponentUpdate = false;
-
-    function Root() {
-      return (
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>
-      );
-    }
-
-    class ClassComponent extends React.Component {
-      state = {};
-      static getDerivedStateFromProps() {
-        log.push('getDerivedStateFromProps');
-        return null;
-      }
-      constructor(props) {
-        super(props);
-        log.push('constructor');
-      }
-      componentDidMount() {
-        log.push('componentDidMount');
-      }
-      componentDidUpdate() {
-        log.push('componentDidUpdate');
-      }
-      componentWillUnmount() {
-        log.push('componentWillUnmount');
-      }
-      shouldComponentUpdate() {
-        log.push('shouldComponentUpdate');
-        return shouldComponentUpdate;
-      }
-      render() {
-        log.push('render');
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = true;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = false;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
-  });
-
-  it('should invoke setState callbacks twice in DEV', async () => {
-    const {StrictMode} = React;
-
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
-    }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>,
-      );
-    });
-    await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
-    });
-
-    // Callback should be invoked twice (in DEV)
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
-  });
-
   // @gate __DEV__
   it('double invokes useMemo functions', async () => {
     let log = [];
@@ -449,8 +303,6 @@ describe('ReactStrictMode', () => {
         return {uppercased};
       }, [text]);
 
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
       log.push(memoizedResult);
 
       return memoizedResult.uppercased;
@@ -475,8 +327,6 @@ describe('ReactStrictMode', () => {
       {uppercased: 'HELLO'},
     ]);
 
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
     expect(log[2]).toBe(log[3]);
 
     log = [];
@@ -497,8 +347,6 @@ describe('ReactStrictMode', () => {
       {uppercased: 'GOODBYE'},
     ]);
 
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
     expect(log[2]).toBe(log[3]);
   });
 
@@ -816,7 +664,6 @@ Please update the following components: Parent`,
     }
 
     const container = document.createElement('div');
-
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<SyncRoot />);
