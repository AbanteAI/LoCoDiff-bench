--- react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected)+++ react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual)@@ -6,14 +6,12 @@  *
  * @emails react-core
  */
-
 'use strict';
 
 let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
-let PropTypes;
 let act;
 let useMemo;
 let useState;
@@ -49,7 +47,7 @@       root.render(
         <React.StrictMode>
           <Foo />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     assertConsoleErrorDev([
@@ -68,7 +66,7 @@     ReactDOMServer.renderToString(
       <React.StrictMode>
         <Foo />
-      </React.StrictMode>,
+      </React.StrictMode>
     );
     assertConsoleErrorDev([
       'Invalid ARIA attribute `ariaTypo`. ' +
@@ -79,7 +77,6 @@   });
 
   // @gate __DEV__
-  // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in legacy roots', async () => {
     let log = [];
     let shouldComponentUpdate = false;
@@ -113,13 +110,14 @@     }
 
     const container = document.createElement('div');
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
-
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>
+      );
+    });
     expect(log).toEqual([
       'constructor',
       'constructor',
@@ -132,13 +130,13 @@ 
     log = [];
     shouldComponentUpdate = true;
-
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -151,14 +149,13 @@ 
     log = [];
     shouldComponentUpdate = false;
-
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
-
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -170,9 +167,7 @@   it('should invoke setState callbacks twice', async () => {
     let instance;
     class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
+      state = { count: 1 };
       render() {
         instance = this;
         return null;
@@ -180,35 +175,28 @@     }
 
     let setStateCount = 0;
-
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(
         <React.StrictMode>
           <ClassComponent />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     await act(() => {
       instance.setState(state => {
         setStateCount++;
-        return {
-          count: state.count + 1,
-        };
+        return { count: state.count + 1 };
       });
     });
-
-    // Callback should be invoked twice in DEV
     expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
     expect(instance.state.count).toBe(2);
   });
 
   // @gate __DEV__
   it('double invokes useState and useReducer initializers functions', async () => {
     const log = [];
-
     function App() {
       React.useState(() => {
         log.push('Compute initial state count: 1');
@@ -220,9 +208,8 @@         s => {
           log.push('Compute initial reducer count: 2');
           return s;
-        },
-      );
-
+        }
+      );
       return 3;
     }
 
@@ -232,11 +219,10 @@       root.render(
         <React.StrictMode>
           <App />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('3');
-
     expect(log).toEqual([
       'Compute initial state count: 1',
       'Compute initial state count: 1',
@@ -245,159 +231,10 @@     ]);
   });
 
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
-    const {StrictMode} = React;
-
-    let log = [];
-    let shouldComponentUpdate = false;
-
-    function Root() {
-      return (
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>
-      );
-    }
-
-    class ClassComponent extends React.Component {
-      state = {};
-      static getDerivedStateFromProps() {
-        log.push('getDerivedStateFromProps');
-        return null;
-      }
-      constructor(props) {
-        super(props);
-        log.push('constructor');
-      }
-      componentDidMount() {
-        log.push('componentDidMount');
-      }
-      componentDidUpdate() {
-        log.push('componentDidUpdate');
-      }
-      componentWillUnmount() {
-        log.push('componentWillUnmount');
-      }
-      shouldComponentUpdate() {
-        log.push('shouldComponentUpdate');
-        return shouldComponentUpdate;
-      }
-      render() {
-        log.push('render');
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = true;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = false;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
-  });
-
-  it('should invoke setState callbacks twice in DEV', async () => {
-    const {StrictMode} = React;
-
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
-    }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>,
-      );
-    });
-    await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
-    });
-
-    // Callback should be invoked twice (in DEV)
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
-  });
-
   // @gate __DEV__
   it('double invokes useMemo functions', async () => {
     let log = [];
-
-    function Uppercased({text}) {
+    function Uppercased({ text }) {
       return useMemo(() => {
         const uppercased = text.toUpperCase();
         log.push('Compute toUpperCase: ' + uppercased);
@@ -408,12 +245,11 @@     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
           <Uppercased text="hello" />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('HELLO');
@@ -423,13 +259,11 @@     ]);
 
     log = [];
-
-    // Update
     await act(() => {
       root.render(
         <React.StrictMode>
           <Uppercased text="goodbye" />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('GOODBYE');
@@ -442,70 +276,56 @@   // @gate __DEV__
   it('double invokes useMemo functions with first result', async () => {
     let log = [];
-    function Uppercased({text}) {
+    function Uppercased({ text }) {
       const memoizedResult = useMemo(() => {
         const uppercased = text.toUpperCase();
         log.push('Compute toUpperCase: ' + uppercased);
-        return {uppercased};
+        return { uppercased };
       }, [text]);
-
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
       log.push(memoizedResult);
-
       return memoizedResult.uppercased;
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
           <Uppercased text="hello" />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('HELLO');
     expect(log).toEqual([
       'Compute toUpperCase: HELLO',
       'Compute toUpperCase: HELLO',
-      {uppercased: 'HELLO'},
-      {uppercased: 'HELLO'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
+      { uppercased: 'HELLO' },
+      { uppercased: 'HELLO' },
+    ]);
     expect(log[2]).toBe(log[3]);
 
     log = [];
-
-    // Update
     await act(() => {
       root.render(
         <React.StrictMode>
           <Uppercased text="goodbye" />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('GOODBYE');
     expect(log).toEqual([
       'Compute toUpperCase: GOODBYE',
       'Compute toUpperCase: GOODBYE',
-      {uppercased: 'GOODBYE'},
-      {uppercased: 'GOODBYE'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
+      { uppercased: 'GOODBYE' },
+      { uppercased: 'GOODBYE' },
+    ]);
     expect(log[2]).toBe(log[3]);
   });
 
   // @gate __DEV__
   it('double invokes setState updater functions', async () => {
     const log = [];
-
     let setCount;
     function App() {
       const [count, _setCount] = useState(0);
@@ -515,12 +335,11 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
           <App />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('0');
@@ -538,12 +357,10 @@   // @gate __DEV__
   it('double invokes reducer functions', async () => {
     const log = [];
-
     function reducer(prevState, action) {
       log.push('Compute new state: ' + action);
       return action;
     }
-
     let dispatch;
     function App() {
       const [count, _dispatch] = useReducer(reducer, 0);
@@ -553,12 +370,11 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
           <App />
-        </React.StrictMode>,
+        </React.StrictMode>
       );
     });
     expect(container.textContent).toBe('0');
@@ -574,7 +390,6 @@ describe('Concurrent Mode', () => {
   beforeEach(() => {
     jest.resetModules();
-
     React = require('react');
     ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
@@ -605,7 +420,7 @@         );
       }
     }
-    function Wrapper({children}) {
+    function Wrapper({ children }) {
       return <div>{children}</div>;
     }
     class Foo extends React.Component {
@@ -624,28 +439,24 @@     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => root.render(<StrictRoot />));
-    assertConsoleErrorDev(
-      [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move code with side effects to componentDidMount, and set initial state in the constructor.
 
 Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
 
 Please update the following components: Bar, Foo`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 
 Please update the following components: App`,
-      ],
-      {withoutStack: true},
-    );
-
+    ]);
     // Dedupe
     await act(() => root.render(<App />));
   });
@@ -682,59 +493,55 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => root.render(<StrictRoot />));
-    assertConsoleErrorDev(
-      [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move code with side effects to componentDidMount, and set initial state in the constructor.
 
 Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
 
 Please update the following components: Child`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 
 Please update the following components: App`,
-      ],
-      {withoutStack: true},
-    );
-    assertConsoleWarnDev(
-      [
-        `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
+    ], { withoutStack: true });
+
+    assertConsoleWarnDev([
+      `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move code with side effects to componentDidMount, and set initial state in the constructor.
 * Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
 
 Please update the following components: Parent`,
-        `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
 * Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
 
 Please update the following components: Parent`,
-        `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
 
 Please update the following components: Parent`,
-      ],
-      {withoutStack: true},
-    );
+    ], { withoutStack: true });
+
     // Dedupe
     await act(() => root.render(<StrictRoot />));
   });
 
   it('should warn about components not present during the initial render', async () => {
-    function StrictRoot({foo}) {
+    function StrictRoot({ foo }) {
       return <React.StrictMode>{foo ? <Foo /> : <Bar />}</React.StrictMode>;
     }
     class Foo extends React.Component {
@@ -756,22 +563,18 @@     assertConsoleErrorDev(
       [
         'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Foo',
+          'See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
-      {withoutStack: true},
+      { withoutStack: true }
     );
 
     await act(() => root.render(<StrictRoot foo={false} />));
     assertConsoleErrorDev(
       [
         'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Bar',
+          'See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
-      {withoutStack: true},
+      { withoutStack: true }
     );
 
     // Dedupe
@@ -780,7 +583,7 @@   });
 
   it('should also warn inside of "strict" mode trees', async () => {
-    const {StrictMode} = React;
+    const { StrictMode } = React;
 
     class SyncRoot extends React.Component {
       UNSAFE_componentWillMount() {}
@@ -794,7 +597,7 @@         );
       }
     }
-    function Wrapper({children}) {
+    function Wrapper({ children }) {
       return (
         <div>
           <Bar />
@@ -816,25 +619,17 @@     }
 
     const container = document.createElement('div');
-
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<SyncRoot />);
     });
     assertConsoleErrorDev(
       [
-        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
-          'and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move data fetching code or side effects to componentDidUpdate.\n' +
-          "* If you're updating state whenever props change, " +
-          'refactor your code to use memoization techniques or move it to ' +
-          'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\n' +
-          'Please update the following components: Bar, Foo',
+        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. ' +
+          'See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
-      {withoutStack: true},
+      { withoutStack: true }
     );
-
     // Dedupe
     await act(() => {
       root.render(<SyncRoot />);
@@ -851,9 +646,8 @@   });
 
   it('should switch from StrictMode to a Fragment and reset state', async () => {
-    const {Fragment, StrictMode} = React;
-
-    function ParentComponent({useFragment}) {
+    const { Fragment, StrictMode } = React;
+    function ParentComponent({ useFragment }) {
       return useFragment ? (
         <Fragment>
           <ChildComponent />
@@ -864,15 +658,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+      state = { count: 0 };
+      static getDerivedStateFromProps(_nextProps, prevState) {
+        return { count: prevState.count + 1 };
       }
       render() {
         return `count:${this.state.count}`;
@@ -881,20 +670,15 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<ParentComponent useFragment={false} />);
-    });
+    await act(() => root.render(<ParentComponent useFragment={false} />));
     expect(container.textContent).toBe('count:1');
-    await act(() => {
-      root.render(<ParentComponent useFragment={true} />);
-    });
+    await act(() => root.render(<ParentComponent useFragment={true} />));
     expect(container.textContent).toBe('count:1');
   });
 
   it('should switch from a Fragment to StrictMode and reset state', async () => {
-    const {Fragment, StrictMode} = React;
-
-    function ParentComponent({useFragment}) {
+    const { Fragment, StrictMode } = React;
+    function ParentComponent({ useFragment }) {
       return useFragment ? (
         <Fragment>
           <ChildComponent />
@@ -905,15 +689,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+      state = { count: 0 };
+      static getDerivedStateFromProps(_nextProps, prevState) {
+        return { count: prevState.count + 1 };
       }
       render() {
         return `count:${this.state.count}`;
@@ -922,19 +701,14 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<ParentComponent useFragment={true} />);
-    });
+    await act(() => root.render(<ParentComponent useFragment={true} />));
     expect(container.textContent).toBe('count:1');
-    await act(() => {
-      root.render(<ParentComponent useFragment={false} />);
-    });
+    await act(() => root.render(<ParentComponent useFragment={false} />));
     expect(container.textContent).toBe('count:1');
   });
 
   it('should update with StrictMode without losing state', async () => {
-    const {StrictMode} = React;
-
+    const { StrictMode } = React;
     function ParentComponent() {
       return (
         <StrictMode>
@@ -942,15 +716,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+      state = { count: 0 };
+      static getDerivedStateFromProps(_nextProps, prevState) {
+        return { count: prevState.count + 1 };
       }
       render() {
         return `count:${this.state.count}`;
@@ -959,13 +728,9 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<ParentComponent />);
-    });
+    await act(() => root.render(<ParentComponent />));
     expect(container.textContent).toBe('count:1');
-    await act(() => {
-      root.render(<ParentComponent />);
-    });
+    await act(() => root.render(<ParentComponent />));
     expect(container.textContent).toBe('count:2');
   });
 });
@@ -976,20 +741,19 @@     React = require('react');
     ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
-    PropTypes = require('prop-types');
   });
 
   afterEach(() => {
     jest.restoreAllMocks();
   });
 
-  // @gate !disableLegacyContext || !__DEV__
+  // @gate !disableLegacyContext
   it('should warn if the legacy context API have been used in strict mode', async () => {
+    const PropTypes = require('prop-types');
     class LegacyContextProvider extends React.Component {
       getChildContext() {
-        return {color: 'purple'};
-      }
-
+        return { color: 'purple' };
+      }
       render() {
         return (
           <div>
@@ -999,39 +763,18 @@         );
       }
     }
-
     function FunctionalLegacyContextConsumer() {
       return null;
     }
-
     LegacyContextProvider.childContextTypes = {
       color: PropTypes.string,
     };
-
     class LegacyContextConsumer extends React.Component {
       render() {
         return null;
       }
     }
-
-    const {StrictMode} = React;
-
-    class Root extends React.Component {
-      render() {
-        return (
-          <div>
-            <StrictMode>
-              <LegacyContextProvider />
-            </StrictMode>
-          </div>
-        );
-      }
-    }
-
-    LegacyContextConsumer.contextTypes = {
-      color: PropTypes.string,
-    };
-
+    LegacyContextConsumer.contextTypes = { color: PropTypes.string };
     FunctionalLegacyContextConsumer.contextTypes = {
       color: PropTypes.string,
     };
@@ -1041,7 +784,6 @@     await act(() => {
       root.render(<Root />);
     });
-
     assertConsoleErrorDev([
       'LegacyContextProvider uses the legacy childContextTypes API ' +
         'which will soon be removed. Use React.createContext() instead. ' +
@@ -1072,244 +814,4 @@       root.render(<Root />);
     });
   });
-
-  describe('console logs logging', () => {
-    beforeEach(() => {
-      jest.resetModules();
-      React = require('react');
-      ReactDOMClient = require('react-dom/client');
-      act = require('internal-test-utils').act;
-
-      // These tests are specifically testing console.log.
-      spyOnDevAndProd(console, 'log').mockImplementation(() => {});
-    });
-
-    afterEach(() => {
-      console.log.mockRestore();
-    });
-
-    it('does not disable logs for class double render', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        render() {
-          count++;
-          console.log('foo ' + count);
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double ctor', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        constructor(props) {
-          super(props);
-          count++;
-          console.log('foo ' + count);
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double getDerivedStateFromProps', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        static getDerivedStateFromProps() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double shouldComponentUpdate', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        shouldComponentUpdate() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class state updaters', async () => {
-      let inst;
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        render() {
-          inst = this;
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        inst.setState(() => {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        });
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for function double render', async () => {
-      let count = 0;
-      function Foo() {
-        count++;
-        console.log('foo ' + count);
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for effect double invoke', async () => {
-      let create = 0;
-      let cleanup = 0;
-      function Foo() {
-        React.useEffect(() => {
-          create++;
-          console.log('foo create ' + create);
-          return () => {
-            cleanup++;
-            console.log('foo cleanup ' + cleanup);
-          };
-        });
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(create).toBe(__DEV__ ? 2 : 1);
-      expect(cleanup).toBe(__DEV__ ? 1 : 0);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 3 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo create 1');
-      if (__DEV__) {
-        expect(console.log).toBeCalledWith('foo cleanup 1');
-      }
-    });
-  });
 });