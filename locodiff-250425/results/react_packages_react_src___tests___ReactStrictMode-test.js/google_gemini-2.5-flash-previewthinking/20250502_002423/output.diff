
index a92ff094..207d6e36 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmp5h3j7fox_expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmpd9w2tost_actual.txt	
@@ -13,13 +13,17 @@ let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
-let PropTypes;
 let act;
 let useMemo;
 let useState;
 let useReducer;
 let assertConsoleErrorDev;
 let assertConsoleWarnDev;
+let gate;
+
+// The effect list might not be clean in legacy roots, so we need this.
+// TODO: This flag will go away.
+const enableStrictEffects = true; // Assuming the state of this flag for the test gates where it's used implicitly. Let's re-verify this during gate checks.
 
 describe('ReactStrictMode', () => {
   beforeEach(() => {
@@ -32,6 +36,7 @@ describe('ReactStrictMode', () => {
       act,
       assertConsoleErrorDev,
       assertConsoleWarnDev,
+      gate,
     } = require('internal-test-utils'));
     useMemo = React.useMemo;
     useState = React.useState;
@@ -113,6 +118,7 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
+    // This test is for double invocation in legacy roots
     ReactDOM.render(
       <React.StrictMode>
         <ClassComponent />
@@ -120,93 +126,82 @@ describe('ReactStrictMode', () => {
       container,
     );
 
-    expect(log).toEqual([
-      'constructor',
-      'constructor',
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'render',
-      'render',
-      'componentDidMount',
-    ]);
+    if (__DEV__) {
+      expect(log).toEqual([
+        'constructor',
+        'constructor',
+        'getDerivedStateFromProps',
+        'getDerivedStateFromProps',
+        'render',
+        'render',
+        'componentDidMount',
+      ]);
+    } else {
+      expect(log).toEqual([
+        'constructor',
+        'getDerivedStateFromProps',
+        'render',
+        'componentDidMount',
+      ]);
+    }
 
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(
+    // This test is for double invocation in legacy roots
+     ReactDOM.render(
       <React.StrictMode>
         <ClassComponent />
       </React.StrictMode>,
       container,
     );
-    expect(log).toEqual([
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'shouldComponentUpdate',
-      'shouldComponentUpdate',
-      'render',
-      'render',
-      'componentDidUpdate',
-    ]);
+    if (__DEV__) {
+      expect(log).toEqual([
+        'getDerivedStateFromProps',
+        'getDerivedStateFromProps',
+        'shouldComponentUpdate',
+        'shouldComponentUpdate',
+        'render',
+        'render',
+        'componentDidUpdate',
+      ]);
+    } else {
+      expect(log).toEqual([
+        'getDerivedStateFromProps',
+        'shouldComponentUpdate',
+        'render',
+        'componentDidUpdate',
+      ]);
+    }
 
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(
+    // This test is for double invocation in legacy roots
+     ReactDOM.render(
       <React.StrictMode>
         <ClassComponent />
       </React.StrictMode>,
       container,
     );
 
-    expect(log).toEqual([
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'shouldComponentUpdate',
-      'shouldComponentUpdate',
-    ]);
-  });
-
-  it('should invoke setState callbacks twice', async () => {
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
+    if (__DEV__) {
+      expect(log).toEqual([
+        'getDerivedStateFromProps',
+        'getDerivedStateFromProps',
+        'shouldComponentUpdate',
+        'shouldComponentUpdate',
+      ]);
+    } else {
+      expect(log).toEqual([
+        'getDerivedStateFromProps',
+        'shouldComponentUpdate',
+      ]);
     }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <ClassComponent />
-        </React.StrictMode>,
-      );
-    });
-    await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
-    });
-
-    // Callback should be invoked twice in DEV
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
   });
 
   // @gate __DEV__
-  it('double invokes useState and useReducer initializers functions', async () => {
+  it('should invoke useState and useReducer initializers functions', async () => {
     const log = [];
 
     function App() {
@@ -245,7 +240,44 @@ describe('ReactStrictMode', () => {
     ]);
   });
 
-  // @gate !disableLegacyMode
+  it('should invoke setState callbacks twice', async () => {
+    let instance;
+    class ClassComponent extends React.Component {
+      state = {
+        count: 1,
+      };
+      render() {
+        instance = this;
+        return null;
+      }
+    }
+
+    let setStateCount = 0;
+
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+      );
+    });
+    await act(() => {
+      instance.setState(state => {
+        setStateCount++;
+        return {
+          count: state.count + 1,
+        };
+      });
+    });
+
+    // Callback should be invoked twice in DEV
+    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
+    // But each time `state` should be the previous value
+    expect(instance.state.count).toBe(2);
+  });
+
   it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
     const {StrictMode} = React;
 
@@ -290,6 +322,7 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
+    // This test is for double invocation in legacy roots
     ReactDOM.render(<Root />, container);
 
     if (__DEV__) {
@@ -314,7 +347,8 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(<Root />, container);
+    // This test is for double invocation in legacy roots
+     ReactDOM.render(<Root />, container);
     if (__DEV__) {
       expect(log).toEqual([
         'getDerivedStateFromProps',
@@ -337,7 +371,8 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(<Root />, container);
+    // This test is for double invocation in legacy roots
+     ReactDOM.render(<Root />, container);
     if (__DEV__) {
       expect(log).toEqual([
         'getDerivedStateFromProps',
@@ -577,9 +612,10 @@ describe('Concurrent Mode', () => {
 
     React = require('react');
     ReactDOMClient = require('react-dom/client');
-    act = require('internal-test-utils').act;
+    ({act, assertConsoleErrorDev, assertConsoleWarnDev, gate} = require('internal-test-utils'));
   });
 
+  // @gate experimental
   it('should warn about unsafe legacy lifecycle methods anywhere in a StrictMode tree', async () => {
     function StrictRoot() {
       return (
@@ -650,6 +686,7 @@ Please update the following components: App`,
     await act(() => root.render(<App />));
   });
 
+  // @gate experimental
   it('should coalesce warnings by lifecycle name', async () => {
     function StrictRoot() {
       return (
@@ -733,6 +770,7 @@ Please update the following components: Parent`,
     await act(() => root.render(<StrictRoot />));
   });
 
+  // @gate experimental
   it('should warn about components not present during the initial render', async () => {
     function StrictRoot({foo}) {
       return <React.StrictMode>{foo ? <Foo /> : <Bar />}</React.StrictMode>;
@@ -847,7 +885,7 @@ describe('symbol checks', () => {
     jest.resetModules();
     React = require('react');
     ReactDOMClient = require('react-dom/client');
-    act = require('internal-test-utils').act;
+    ({act, assertConsoleErrorDev, assertConsoleWarnDev, gate} = require('internal-test-utils'));
   });
 
   it('should switch from StrictMode to a Fragment and reset state', async () => {
@@ -970,13 +1008,13 @@ describe('symbol checks', () => {
   });
 });
 
+
 describe('context legacy', () => {
   beforeEach(() => {
     jest.resetModules();
     React = require('react');
     ReactDOMClient = require('react-dom/client');
-    act = require('internal-test-utils').act;
-    PropTypes = require('prop-types');
+    ({act, assertConsoleErrorDev, assertConsoleWarnDev, gate} = require('internal-test-utils'));
   });
 
   afterEach(() => {
@@ -1005,7 +1043,7 @@ describe('context legacy', () => {
     }
 
     LegacyContextProvider.childContextTypes = {
-      color: PropTypes.string,
+      color: null, //PropTypes.string, // PropTypes doesn't matter for the warning structure
     };
 
     class LegacyContextConsumer extends React.Component {
@@ -1029,11 +1067,11 @@ describe('context legacy', () => {
     }
 
     LegacyContextConsumer.contextTypes = {
-      color: PropTypes.string,
+      color: null, //PropTypes.string, // PropTypes doesn't matter for the warning structure
     };
 
     FunctionalLegacyContextConsumer.contextTypes = {
-      color: PropTypes.string,
+      color: null, //PropTypes.string, // PropTypes doesn't matter for the warning structure
     };
 
     const container = document.createElement('div');
@@ -1078,7 +1116,7 @@ describe('context legacy', () => {
       jest.resetModules();
       React = require('react');
       ReactDOMClient = require('react-dom/client');
-      act = require('internal-test-utils').act;
+      ({act, assertConsoleErrorDev, assertConsoleWarnDev, gate} = require('internal-test-utils'));
 
       // These tests are specifically testing console.log.
       spyOnDevAndProd(console, 'log').mockImplementation(() => {});
