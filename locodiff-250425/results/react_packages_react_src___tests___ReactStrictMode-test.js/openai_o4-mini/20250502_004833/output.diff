--- react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected)+++ react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual)@@ -6,14 +6,12 @@  *
  * @emails react-core
  */
-
 'use strict';
 
 let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
-let PropTypes;
 let act;
 let useMemo;
 let useState;
@@ -28,11 +26,7 @@     ReactDOM = require('react-dom');
     ReactDOMClient = require('react-dom/client');
     ReactDOMServer = require('react-dom/server');
-    ({
-      act,
-      assertConsoleErrorDev,
-      assertConsoleWarnDev,
-    } = require('internal-test-utils'));
+    ({act, assertConsoleErrorDev, assertConsoleWarnDev} = require('internal-test-utils'));
     useMemo = React.useMemo;
     useState = React.useState;
     useReducer = React.useReducer;
@@ -79,8 +73,7 @@   });
 
   // @gate __DEV__
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in legacy roots', async () => {
+  it('should invoke precommit lifecycle methods twice', async () => {
     let log = [];
     let shouldComponentUpdate = false;
     class ClassComponent extends React.Component {
@@ -119,96 +112,51 @@       </React.StrictMode>,
       container,
     );
-
-    expect(log).toEqual([
-      'constructor',
-      'constructor',
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'render',
-      'render',
-      'componentDidMount',
-    ]);
-
-    log = [];
-    shouldComponentUpdate = true;
-
+    if (__DEV__) {
+      expect(log).toEqual([
+        'constructor',
+        'constructor',
+        'getDerivedStateFromProps',
+        'getDerivedStateFromProps',
+        'render',
+        'render',
+        'componentDidMount',
+      ]);
+    }
+  });
+
+  it('should invoke setState callbacks twice', async () => {
+    let instance;
+    class ClassComponent extends React.Component {
+      state = {count: 1};
+      render() {
+        instance = this;
+        return null;
+      }
+    }
+
+    let setStateCount = 0;
+    const container = document.createElement('div');
     ReactDOM.render(
       <React.StrictMode>
         <ClassComponent />
       </React.StrictMode>,
       container,
     );
-    expect(log).toEqual([
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'shouldComponentUpdate',
-      'shouldComponentUpdate',
-      'render',
-      'render',
-      'componentDidUpdate',
-    ]);
-
-    log = [];
-    shouldComponentUpdate = false;
-
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
-
-    expect(log).toEqual([
-      'getDerivedStateFromProps',
-      'getDerivedStateFromProps',
-      'shouldComponentUpdate',
-      'shouldComponentUpdate',
-    ]);
-  });
-
-  it('should invoke setState callbacks twice', async () => {
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
-    }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <ClassComponent />
-        </React.StrictMode>,
-      );
-    });
     await act(() => {
       instance.setState(state => {
         setStateCount++;
-        return {
-          count: state.count + 1,
-        };
+        return {count: state.count + 1};
       });
     });
 
-    // Callback should be invoked twice in DEV
     expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
     expect(instance.state.count).toBe(2);
   });
 
   // @gate __DEV__
   it('double invokes useState and useReducer initializers functions', async () => {
     const log = [];
-
     function App() {
       React.useState(() => {
         log.push('Compute initial state count: 1');
@@ -222,10 +170,8 @@           return s;
         },
       );
-
-      return 3;
-    }
-
+      return null;
+    }
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -235,8 +181,6 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('3');
-
     expect(log).toEqual([
       'Compute initial state count: 1',
       'Compute initial state count: 1',
@@ -245,158 +189,9 @@     ]);
   });
 
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
-    const {StrictMode} = React;
-
-    let log = [];
-    let shouldComponentUpdate = false;
-
-    function Root() {
-      return (
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>
-      );
-    }
-
-    class ClassComponent extends React.Component {
-      state = {};
-      static getDerivedStateFromProps() {
-        log.push('getDerivedStateFromProps');
-        return null;
-      }
-      constructor(props) {
-        super(props);
-        log.push('constructor');
-      }
-      componentDidMount() {
-        log.push('componentDidMount');
-      }
-      componentDidUpdate() {
-        log.push('componentDidUpdate');
-      }
-      componentWillUnmount() {
-        log.push('componentWillUnmount');
-      }
-      shouldComponentUpdate() {
-        log.push('shouldComponentUpdate');
-        return shouldComponentUpdate;
-      }
-      render() {
-        log.push('render');
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = true;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = false;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
-  });
-
-  it('should invoke setState callbacks twice in DEV', async () => {
-    const {StrictMode} = React;
-
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
-    }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>,
-      );
-    });
-    await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
-    });
-
-    // Callback should be invoked twice (in DEV)
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
-  });
-
   // @gate __DEV__
   it('double invokes useMemo functions', async () => {
     let log = [];
-
     function Uppercased({text}) {
       return useMemo(() => {
         const uppercased = text.toUpperCase();
@@ -408,7 +203,6 @@     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -416,15 +210,12 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('HELLO');
     expect(log).toEqual([
       'Compute toUpperCase: HELLO',
       'Compute toUpperCase: HELLO',
     ]);
 
     log = [];
-
-    // Update
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -432,7 +223,6 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('GOODBYE');
     expect(log).toEqual([
       'Compute toUpperCase: GOODBYE',
       'Compute toUpperCase: GOODBYE',
@@ -448,18 +238,13 @@         log.push('Compute toUpperCase: ' + uppercased);
         return {uppercased};
       }, [text]);
-
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
       log.push(memoizedResult);
-
       return memoizedResult.uppercased;
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
 
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -467,45 +252,12 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('HELLO');
-    expect(log).toEqual([
-      'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
-      {uppercased: 'HELLO'},
-      {uppercased: 'HELLO'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-      {uppercased: 'GOODBYE'},
-      {uppercased: 'GOODBYE'},
-    ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
     expect(log[2]).toBe(log[3]);
   });
 
   // @gate __DEV__
   it('double invokes setState updater functions', async () => {
     const log = [];
-
     let setCount;
     function App() {
       const [count, _setCount] = useState(0);
@@ -515,7 +267,6 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -523,27 +274,22 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('0');
-
     await act(() => {
       setCount(() => {
         log.push('Compute count: 1');
         return 1;
       });
     });
-    expect(container.textContent).toBe('1');
     expect(log).toEqual(['Compute count: 1', 'Compute count: 1']);
   });
 
   // @gate __DEV__
   it('double invokes reducer functions', async () => {
     const log = [];
-
     function reducer(prevState, action) {
       log.push('Compute new state: ' + action);
       return action;
     }
-
     let dispatch;
     function App() {
       const [count, _dispatch] = useReducer(reducer, 0);
@@ -553,7 +299,6 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -561,12 +306,9 @@         </React.StrictMode>,
       );
     });
-    expect(container.textContent).toBe('0');
-
     await act(() => {
       dispatch(1);
     });
-    expect(container.textContent).toBe('1');
     expect(log).toEqual(['Compute new state: 1', 'Compute new state: 1']);
   });
 });
@@ -574,34 +316,28 @@ describe('Concurrent Mode', () => {
   beforeEach(() => {
     jest.resetModules();
-
     React = require('react');
     ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
   });
 
   it('should warn about unsafe legacy lifecycle methods anywhere in a StrictMode tree', async () => {
-    function StrictRoot() {
-      return (
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>
-      );
-    }
-    class App extends React.Component {
+    class Root extends React.Component {
       UNSAFE_componentWillMount() {}
       UNSAFE_componentWillUpdate() {}
       render() {
         return (
-          <div>
-            <Wrapper>
-              <Foo />
-            </Wrapper>
+          <React.StrictMode>
             <div>
-              <Bar />
-              <Foo />
+              <Wrapper>
+                <Foo />
+              </Wrapper>
+              <div>
+                <Bar />
+                <Foo />
+              </div>
             </div>
-          </div>
+          </React.StrictMode>
         );
       }
     }
@@ -623,46 +359,37 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => root.render(<StrictRoot />));
-    assertConsoleErrorDev(
-      [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+    await act(() => root.render(<Root />));
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move code with side effects to componentDidMount, and set initial state in the constructor.
 
-Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+Please update the following components: Root`,
+      `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 * If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
 
 Please update the following components: Bar, Foo`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+      `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
 
 * Move data fetching code or side effects to componentDidUpdate.
 
-Please update the following components: App`,
-      ],
-      {withoutStack: true},
-    );
-
-    // Dedupe
-    await act(() => root.render(<App />));
+Please update the following components: Root`,
+    ]);
   });
 
   it('should coalesce warnings by lifecycle name', async () => {
-    function StrictRoot() {
-      return (
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>
-      );
-    }
-    class App extends React.Component {
+    class Root extends React.Component {
       UNSAFE_componentWillMount() {}
       UNSAFE_componentWillUpdate() {}
       render() {
-        return <Parent />;
+        return (
+          <React.StrictMode>
+            <Parent />
+          </React.StrictMode>
+        );
       }
     }
     class Parent extends React.Component {
@@ -682,110 +409,74 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
-    await act(() => root.render(<StrictRoot />));
+    await act(() => root.render(<Root />));
+    await expect(async () =>
+      assertConsoleErrorDev([
+        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+
+* Move code with side effects to componentDidMount, and set initial state in the constructor.
+
+Please update the following components: Root`,
+        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+
+* Move data fetching code or side effects to componentDidUpdate.
+* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
+
+Please update the following components: Child`,
+        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
+
+* Move data fetching code or side effects to componentDidUpdate.
+
+Please update the following components: Root`,
+      ], {withoutStack: true})
+    ).resolves;
+  });
+
+  it('should warn about components not present during the initial render', async () => {
+    function Root({foo}) {
+      return (
+        <React.StrictMode>{foo ? <Foo /> : <Bar />}</React.StrictMode>
+      );
+    }
+    class Foo extends React.Component {
+      UNSAFE_componentWillMount() {}
+      render() {
+        return null;
+      }
+    }
+    class Bar extends React.Component {
+      UNSAFE_componentWillMount() {}
+      render() {
+        return null;
+      }
+    }
+
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+
+    await act(() => root.render(<Root foo={true} />));
     assertConsoleErrorDev(
       [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move code with side effects to componentDidMount, and set initial state in the constructor.
-
-Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-
-Please update the following components: Child`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-
-Please update the following components: App`,
+        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
       {withoutStack: true},
     );
-    assertConsoleWarnDev(
+
+    await act(() => root.render(<Root foo={false} />));
+    assertConsoleErrorDev(
       [
-        `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move code with side effects to componentDidMount, and set initial state in the constructor.
-* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
-        `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
-        `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
+        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
       {withoutStack: true},
     );
-    // Dedupe
-    await act(() => root.render(<StrictRoot />));
-  });
-
-  it('should warn about components not present during the initial render', async () => {
-    function StrictRoot({foo}) {
-      return <React.StrictMode>{foo ? <Foo /> : <Bar />}</React.StrictMode>;
-    }
-    class Foo extends React.Component {
-      UNSAFE_componentWillMount() {}
-      render() {
-        return null;
-      }
-    }
-    class Bar extends React.Component {
-      UNSAFE_componentWillMount() {}
-      render() {
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => root.render(<StrictRoot foo={true} />));
-    assertConsoleErrorDev(
-      [
-        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Foo',
-      ],
-      {withoutStack: true},
-    );
-
-    await act(() => root.render(<StrictRoot foo={false} />));
-    assertConsoleErrorDev(
-      [
-        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Bar',
-      ],
-      {withoutStack: true},
-    );
-
-    // Dedupe
-    await act(() => root.render(<StrictRoot foo={true} />));
-    await act(() => root.render(<StrictRoot foo={false} />));
   });
 
   it('should also warn inside of "strict" mode trees', async () => {
     const {StrictMode} = React;
-
     class SyncRoot extends React.Component {
       UNSAFE_componentWillMount() {}
+      UNSAFE_componentWillReceiveProps() {}
       UNSAFE_componentWillUpdate() {}
-      UNSAFE_componentWillReceiveProps() {}
       render() {
         return (
           <StrictMode>
@@ -794,7 +485,7 @@         );
       }
     }
-    function Wrapper({children}) {
+    function Wrapper() {
       return (
         <div>
           <Bar />
@@ -816,25 +507,16 @@     }
 
     const container = document.createElement('div');
-
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<SyncRoot />);
     });
     assertConsoleErrorDev(
       [
-        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
-          'and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move data fetching code or side effects to componentDidUpdate.\n' +
-          "* If you're updating state whenever props change, " +
-          'refactor your code to use memoization techniques or move it to ' +
-          'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\n' +
-          'Please update the following components: Bar, Foo',
+        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.',
       ],
       {withoutStack: true},
     );
-
     // Dedupe
     await act(() => {
       root.render(<SyncRoot />);
@@ -852,7 +534,6 @@ 
   it('should switch from StrictMode to a Fragment and reset state', async () => {
     const {Fragment, StrictMode} = React;
-
     function ParentComponent({useFragment}) {
       return useFragment ? (
         <Fragment>
@@ -864,15 +545,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
+      state = {count: 0};
       static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+        return {count: prevState.count + 1};
       }
       render() {
         return `count:${this.state.count}`;
@@ -893,7 +569,6 @@ 
   it('should switch from a Fragment to StrictMode and reset state', async () => {
     const {Fragment, StrictMode} = React;
-
     function ParentComponent({useFragment}) {
       return useFragment ? (
         <Fragment>
@@ -905,15 +580,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
+      state = {count: 0};
       static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+        return {count: prevState.count + 1};
       }
       render() {
         return `count:${this.state.count}`;
@@ -934,7 +604,6 @@ 
   it('should update with StrictMode without losing state', async () => {
     const {StrictMode} = React;
-
     function ParentComponent() {
       return (
         <StrictMode>
@@ -942,15 +611,10 @@         </StrictMode>
       );
     }
-
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
+      state = {count: 0};
       static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+        return {count: prevState.count + 1};
       }
       render() {
         return `count:${this.state.count}`;
@@ -976,11 +640,7 @@     React = require('react');
     ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
-    PropTypes = require('prop-types');
-  });
-
-  afterEach(() => {
-    jest.restoreAllMocks();
+    assertConsoleErrorDev = require('internal-test-utils').assertConsoleErrorDev;
   });
 
   // @gate !disableLegacyContext || !__DEV__
@@ -989,7 +649,6 @@       getChildContext() {
         return {color: 'purple'};
       }
-
       render() {
         return (
           <div>
@@ -999,42 +658,37 @@         );
       }
     }
+    LegacyContextProvider.childContextTypes = {
+      color: require('prop-types').string,
+    };
+
+    class LegacyContextConsumer extends React.Component {
+      render() {
+        return null;
+      }
+    }
+    LegacyContextConsumer.contextTypes = {
+      color: require('prop-types').string,
+    };
 
     function FunctionalLegacyContextConsumer() {
       return null;
     }
-
-    LegacyContextProvider.childContextTypes = {
-      color: PropTypes.string,
+    FunctionalLegacyContextConsumer.contextTypes = {
+      color: require('prop-types').string,
     };
-
-    class LegacyContextConsumer extends React.Component {
-      render() {
-        return null;
-      }
-    }
-
-    const {StrictMode} = React;
 
     class Root extends React.Component {
       render() {
         return (
           <div>
-            <StrictMode>
+            <React.StrictMode>
               <LegacyContextProvider />
-            </StrictMode>
+            </React.StrictMode>
           </div>
         );
       }
     }
-
-    LegacyContextConsumer.contextTypes = {
-      color: PropTypes.string,
-    };
-
-    FunctionalLegacyContextConsumer.contextTypes = {
-      color: PropTypes.string,
-    };
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
@@ -1060,10 +714,8 @@       'Legacy context API has been detected within a strict-mode tree.' +
         '\n\nThe old API will be supported in all 16.x releases, but applications ' +
         'using it should migrate to the new version.' +
-        '\n\nPlease update the following components: ' +
-        'FunctionalLegacyContextConsumer, LegacyContextConsumer, LegacyContextProvider' +
-        '\n\nLearn more about this warning here: ' +
-        'https://react.dev/link/legacy-context' +
+        '\n\nPlease update the following components: FunctionalLegacyContextConsumer, LegacyContextConsumer, LegacyContextProvider' +
+        '\n\nLearn more about this warning here: https://react.dev/link/legacy-context' +
         '\n    in Root (at **)',
     ]);
 
@@ -1072,244 +724,4 @@       root.render(<Root />);
     });
   });
-
-  describe('console logs logging', () => {
-    beforeEach(() => {
-      jest.resetModules();
-      React = require('react');
-      ReactDOMClient = require('react-dom/client');
-      act = require('internal-test-utils').act;
-
-      // These tests are specifically testing console.log.
-      spyOnDevAndProd(console, 'log').mockImplementation(() => {});
-    });
-
-    afterEach(() => {
-      console.log.mockRestore();
-    });
-
-    it('does not disable logs for class double render', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        render() {
-          count++;
-          console.log('foo ' + count);
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double ctor', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        constructor(props) {
-          super(props);
-          count++;
-          console.log('foo ' + count);
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double getDerivedStateFromProps', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        static getDerivedStateFromProps() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double shouldComponentUpdate', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        shouldComponentUpdate() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class state updaters', async () => {
-      let inst;
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        render() {
-          inst = this;
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        inst.setState(() => {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        });
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for function double render', async () => {
-      let count = 0;
-      function Foo() {
-        count++;
-        console.log('foo ' + count);
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for effect double invoke', async () => {
-      let create = 0;
-      let cleanup = 0;
-      function Foo() {
-        React.useEffect(() => {
-          create++;
-          console.log('foo create ' + create);
-          return () => {
-            cleanup++;
-            console.log('foo cleanup ' + cleanup);
-          };
-        });
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(create).toBe(__DEV__ ? 2 : 1);
-      expect(cleanup).toBe(__DEV__ ? 1 : 0);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 3 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo create 1');
-      if (__DEV__) {
-        expect(console.log).toBeCalledWith('foo cleanup 1');
-      }
-    });
-  });
 });