
index a92ff0946..13f0aaad7 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmpvlit3d0__expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmpfvrbyu21_actual.txt	
@@ -13,7 +13,6 @@ let React;
 let ReactDOM;
 let ReactDOMClient;
 let ReactDOMServer;
-let PropTypes;
 let act;
 let useMemo;
 let useState;
@@ -113,12 +112,14 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      ReactDOM.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
 
     expect(log).toEqual([
       'constructor',
@@ -133,12 +134,14 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      ReactDOM.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -152,12 +155,14 @@ describe('ReactStrictMode', () => {
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      ReactDOM.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
 
     expect(log).toEqual([
       'getDerivedStateFromProps',
@@ -245,7 +250,6 @@ describe('ReactStrictMode', () => {
     ]);
   });
 
-  // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
     const {StrictMode} = React;
 
@@ -290,67 +294,42 @@ describe('ReactStrictMode', () => {
     }
 
     const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
+    await act(() => ReactDOM.render(<Root />, container));
+
+    expect(log).toEqual([
+      'constructor',
+      'constructor',
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'render',
+      'render',
+      'componentDidMount',
+    ]);
 
     log = [];
     shouldComponentUpdate = true;
 
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
+    await act(() => ReactDOM.render(<Root />, container));
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+      'render',
+      'render',
+      'componentDidUpdate',
+    ]);
 
     log = [];
     shouldComponentUpdate = false;
 
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
+    await act(() => ReactDOM.render(<Root />, container));
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+    ]);
   });
 
   it('should invoke setState callbacks twice in DEV', async () => {
