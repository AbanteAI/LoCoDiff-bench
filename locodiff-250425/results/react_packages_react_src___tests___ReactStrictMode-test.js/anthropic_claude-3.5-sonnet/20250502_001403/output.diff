--- react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected)+++ react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual)@@ -139,10 +139,11 @@       </React.StrictMode>,
       container,
     );
+
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
-      'shouldComponentUpdate',
+      'shouldComponentUpdate', 
       'shouldComponentUpdate',
       'render',
       'render',
@@ -205,7 +206,7 @@     expect(instance.state.count).toBe(2);
   });
 
-  // @gate __DEV__
+  // @gate __DEV__  
   it('double invokes useState and useReducer initializers functions', async () => {
     const log = [];
 
@@ -226,7 +227,7 @@       return 3;
     }
 
-    const container = document.createElement('div');
+    const container = document.createElement('div'); 
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(
@@ -238,159 +239,11 @@     expect(container.textContent).toBe('3');
 
     expect(log).toEqual([
-      'Compute initial state count: 1',
+      'Compute initial state count: 1', 
       'Compute initial state count: 1',
       'Compute initial reducer count: 2',
       'Compute initial reducer count: 2',
     ]);
-  });
-
-  // @gate !disableLegacyMode
-  it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
-    const {StrictMode} = React;
-
-    let log = [];
-    let shouldComponentUpdate = false;
-
-    function Root() {
-      return (
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>
-      );
-    }
-
-    class ClassComponent extends React.Component {
-      state = {};
-      static getDerivedStateFromProps() {
-        log.push('getDerivedStateFromProps');
-        return null;
-      }
-      constructor(props) {
-        super(props);
-        log.push('constructor');
-      }
-      componentDidMount() {
-        log.push('componentDidMount');
-      }
-      componentDidUpdate() {
-        log.push('componentDidUpdate');
-      }
-      componentWillUnmount() {
-        log.push('componentWillUnmount');
-      }
-      shouldComponentUpdate() {
-        log.push('shouldComponentUpdate');
-        return shouldComponentUpdate;
-      }
-      render() {
-        log.push('render');
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = true;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = false;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
-  });
-
-  it('should invoke setState callbacks twice in DEV', async () => {
-    const {StrictMode} = React;
-
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
-      render() {
-        instance = this;
-        return null;
-      }
-    }
-
-    let setStateCount = 0;
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>,
-      );
-    });
-    await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
-    });
-
-    // Callback should be invoked twice (in DEV)
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
   });
 
   // @gate __DEV__
@@ -413,13 +266,13 @@       root.render(
         <React.StrictMode>
           <Uppercased text="hello" />
-        </React.StrictMode>,
+        </React.StrictMode>, 
       );
     });
     expect(container.textContent).toBe('HELLO');
     expect(log).toEqual([
       'Compute toUpperCase: HELLO',
-      'Compute toUpperCase: HELLO',
+      'Compute toUpperCase: HELLO', 
     ]);
 
     log = [];
@@ -449,7 +302,7 @@         return {uppercased};
       }, [text]);
 
-      // Push this to the log so we can check whether the same memoized result
+      // Push this to the log so we can check whether the same memoized result  
       // it returned during both invocations.
       log.push(memoizedResult);
 
@@ -481,7 +334,7 @@ 
     log = [];
 
-    // Update
+    // Update 
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -499,7 +352,7 @@ 
     // Even though the memoized function is invoked twice, the same object
     // is returned both times.
-    expect(log[2]).toBe(log[3]);
+    expect(log[2]).toBe(log[3]); 
   });
 
   // @gate __DEV__
@@ -535,7 +388,7 @@     expect(log).toEqual(['Compute count: 1', 'Compute count: 1']);
   });
 
-  // @gate __DEV__
+  // @gate __DEV__  
   it('double invokes reducer functions', async () => {
     const log = [];
 
@@ -774,7 +627,7 @@       {withoutStack: true},
     );
 
-    // Dedupe
+    // Dedupe 
     await act(() => root.render(<StrictRoot foo={true} />));
     await act(() => root.render(<StrictRoot foo={false} />));
   });
@@ -784,7 +637,7 @@ 
     class SyncRoot extends React.Component {
       UNSAFE_componentWillMount() {}
-      UNSAFE_componentWillUpdate() {}
+      UNSAFE_componentWillUpdate() {} 
       UNSAFE_componentWillReceiveProps() {}
       render() {
         return (
@@ -835,11 +688,10 @@       {withoutStack: true},
     );
 
-    // Dedupe
     await act(() => {
       root.render(<SyncRoot />);
     });
-  });
+  }); 
 });
 
 describe('symbol checks', () => {
@@ -851,6 +703,47 @@   });
 
   it('should switch from StrictMode to a Fragment and reset state', async () => {
+    const {Fragment, StrictMode} = React;
+
+    function ParentComponent({useFragment}) {
+      return useFragment ? (
+        <Fragment>
+          <ChildComponent />
+        </Fragment>
+      ) : ( 
+        <StrictMode>
+          <ChildComponent />
+        </StrictMode>
+      );
+    }
+
+    class ChildComponent extends React.Component {
+      state = {
+        count: 0,
+      };
+      static getDerivedStateFromProps(nextProps, prevState) {
+        return {
+          count: prevState.count + 1,
+        };
+      }
+      render() {
+        return `count:${this.state.count}`;
+      }
+    }
+
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(<ParentComponent useFragment={false} />);
+    });
+    expect(container.textContent).toBe('count:1');
+    await act(() => {
+      root.render(<ParentComponent useFragment={true} />);
+    });
+    expect(container.textContent).toBe('count:1');
+  });
+
+  it('should switch from a Fragment to StrictMode and reset state', async () => {
     const {Fragment, StrictMode} = React;
 
     function ParentComponent({useFragment}) {
@@ -882,24 +775,20 @@     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
+      root.render(<ParentComponent useFragment={true} />);
+    });
+    expect(container.textContent).toBe('count:1');
+    await act(() => {
       root.render(<ParentComponent useFragment={false} />);
     });
     expect(container.textContent).toBe('count:1');
-    await act(() => {
-      root.render(<ParentComponent useFragment={true} />);
-    });
-    expect(container.textContent).toBe('count:1');
-  });
-
-  it('should switch from a Fragment to StrictMode and reset state', async () => {
-    const {Fragment, StrictMode} = React;
-
-    function ParentComponent({useFragment}) {
-      return useFragment ? (
-        <Fragment>
-          <ChildComponent />
-        </Fragment>
-      ) : (
+  });
+
+  it('should update with StrictMode without losing state', async () => {
+    const {StrictMode} = React;
+
+    function ParentComponent() {
+      return (
         <StrictMode>
           <ChildComponent />
         </StrictMode>
@@ -921,44 +810,7 @@     }
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<ParentComponent useFragment={true} />);
-    });
-    expect(container.textContent).toBe('count:1');
-    await act(() => {
-      root.render(<ParentComponent useFragment={false} />);
-    });
-    expect(container.textContent).toBe('count:1');
-  });
-
-  it('should update with StrictMode without losing state', async () => {
-    const {StrictMode} = React;
-
-    function ParentComponent() {
-      return (
-        <StrictMode>
-          <ChildComponent />
-        </StrictMode>
-      );
-    }
-
-    class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
-      }
-      render() {
-        return `count:${this.state.count}`;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
+    const root = ReactDOMClient.createRoot(container); 
     await act(() => {
       root.render(<ParentComponent />);
     });
@@ -977,10 +829,6 @@     ReactDOMClient = require('react-dom/client');
     act = require('internal-test-utils').act;
     PropTypes = require('prop-types');
-  });
-
-  afterEach(() => {
-    jest.restoreAllMocks();
   });
 
   // @gate !disableLegacyContext || !__DEV__
@@ -1057,7 +905,7 @@         'with React.useContext() instead. (https://react.dev/link/legacy-context)' +
         '\n    in LegacyContextProvider (at **)' +
         '\n    in Root (at **)',
-      'Legacy context API has been detected within a strict-mode tree.' +
+      'Legacy context API has been detected within a strict-mode tree.' +  
         '\n\nThe old API will be supported in all 16.x releases, but applications ' +
         'using it should migrate to the new version.' +
         '\n\nPlease update the following components: ' +
@@ -1085,7 +933,7 @@     });
 
     afterEach(() => {
-      console.log.mockRestore();
+      console.log.mockRestore(); 
     });
 
     it('does not disable logs for class double render', async () => {
@@ -1135,181 +983,6 @@           <React.StrictMode>
             <Foo />
           </React.StrictMode>,
-        );
+        );  
       });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double getDerivedStateFromProps', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        static getDerivedStateFromProps() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class double shouldComponentUpdate', async () => {
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        shouldComponentUpdate() {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        }
-        render() {
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for class state updaters', async () => {
-      let inst;
-      let count = 0;
-      class Foo extends React.Component {
-        state = {};
-        render() {
-          inst = this;
-          return null;
-        }
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      await act(() => {
-        inst.setState(() => {
-          count++;
-          console.log('foo ' + count);
-          return {};
-        });
-      });
-
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for function double render', async () => {
-      let count = 0;
-      function Foo() {
-        count++;
-        console.log('foo ' + count);
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(count).toBe(__DEV__ ? 2 : 1);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo 1');
-    });
-
-    it('does not disable logs for effect double invoke', async () => {
-      let create = 0;
-      let cleanup = 0;
-      function Foo() {
-        React.useEffect(() => {
-          create++;
-          console.log('foo create ' + create);
-          return () => {
-            cleanup++;
-            console.log('foo cleanup ' + cleanup);
-          };
-        });
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(create).toBe(__DEV__ ? 2 : 1);
-      expect(cleanup).toBe(__DEV__ ? 1 : 0);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 3 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo create 1');
-      if (__DEV__) {
-        expect(console.log).toBeCalledWith('foo cleanup 1');
-      }
-    });
-  });
-});+      expect(count