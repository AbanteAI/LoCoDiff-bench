
index a92ff0946..d9859b347 100644
--- a/react_packages_react_src___tests___ReactStrictMode-test.js_expectedoutput.txt (expected):tmp/tmpnyojzxdf_expected.txt	
+++ b/react_packages_react_src___tests___ReactStrictMode-test.js_extracted.txt (actual):tmp/tmp7u_twlcb_actual.txt	
@@ -79,47 +79,57 @@ describe('ReactStrictMode', () => {
   });
 
   // @gate __DEV__
-  // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in legacy roots', async () => {
-    let log = [];
+    const log = [];
     let shouldComponentUpdate = false;
+
     class ClassComponent extends React.Component {
       state = {};
+
       static getDerivedStateFromProps() {
         log.push('getDerivedStateFromProps');
         return null;
       }
+
       constructor(props) {
         super(props);
         log.push('constructor');
       }
+
       componentDidMount() {
         log.push('componentDidMount');
       }
+
       componentDidUpdate() {
         log.push('componentDidUpdate');
       }
+
       componentWillUnmount() {
         log.push('componentWillUnmount');
       }
+
       shouldComponentUpdate() {
         log.push('shouldComponentUpdate');
         return shouldComponentUpdate;
       }
+
       render() {
         log.push('render');
         return null;
       }
     }
 
+    // Mount
     const container = document.createElement('div');
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
-
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
     expect(log).toEqual([
       'constructor',
       'constructor',
@@ -130,15 +140,17 @@ describe('ReactStrictMode', () => {
       'componentDidMount',
     ]);
 
-    log = [];
+    // Update (shouldUpdate = true)
+    log.length = 0;
     shouldComponentUpdate = true;
-
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -149,16 +161,17 @@ describe('ReactStrictMode', () => {
       'componentDidUpdate',
     ]);
 
-    log = [];
+    // Update (shouldUpdate = false)
+    log.length = 0;
     shouldComponentUpdate = false;
-
-    ReactDOM.render(
-      <React.StrictMode>
-        <ClassComponent />
-      </React.StrictMode>,
-      container,
-    );
-
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <ClassComponent />
+        </React.StrictMode>,
+        container,
+      );
+    });
     expect(log).toEqual([
       'getDerivedStateFromProps',
       'getDerivedStateFromProps',
@@ -173,14 +186,13 @@ describe('ReactStrictMode', () => {
       state = {
         count: 1,
       };
+
       render() {
         instance = this;
         return null;
       }
     }
 
-    let setStateCount = 0;
-
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -188,68 +200,30 @@ describe('ReactStrictMode', () => {
         <React.StrictMode>
           <ClassComponent />
         </React.StrictMode>,
+        container,
       );
     });
+
+    let setStateCount = 0;
     await act(() => {
       instance.setState(state => {
         setStateCount++;
         return {
           count: state.count + 1,
+          },
         };
       });
-    });
 
     // Callback should be invoked twice in DEV
     expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
+    // Final state
     expect(instance.state.count).toBe(2);
   });
 
-  // @gate __DEV__
-  it('double invokes useState and useReducer initializers functions', async () => {
-    const log = [];
-
-    function App() {
-      React.useState(() => {
-        log.push('Compute initial state count: 1');
-        return 1;
-      });
-      React.useReducer(
-        s => s,
-        2,
-        s => {
-          log.push('Compute initial reducer count: 2');
-          return s;
-        },
-      );
-
-      return 3;
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <App />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('3');
-
-    expect(log).toEqual([
-      'Compute initial state count: 1',
-      'Compute initial state count: 1',
-      'Compute initial reducer count: 2',
-      'Compute initial reducer count: 2',
-    ]);
-  });
-
   // @gate !disableLegacyMode
   it('should invoke only precommit lifecycle methods twice in DEV legacy roots', async () => {
     const {StrictMode} = React;
-
-    let log = [];
+    const log = [];
     let shouldComponentUpdate = false;
 
     function Root() {
@@ -262,135 +236,84 @@ describe('ReactStrictMode', () => {
 
     class ClassComponent extends React.Component {
       state = {};
+
       static getDerivedStateFromProps() {
         log.push('getDerivedStateFromProps');
         return null;
       }
+
       constructor(props) {
         super(props);
         log.push('constructor');
       }
+
       componentDidMount() {
         log.push('componentDidMount');
       }
+
       componentDidUpdate() {
         log.push('componentDidUpdate');
       }
+
       componentWillUnmount() {
         log.push('componentWillUnmount');
       }
+
       shouldComponentUpdate() {
         log.push('shouldComponentUpdate');
         return shouldComponentUpdate;
       }
-      render() {
-        log.push('render');
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    ReactDOM.render(<Root />, container);
-
-    if (__DEV__) {
-      expect(log).toEqual([
-        'constructor',
-        'constructor',
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'render',
-        'render',
-        'componentDidMount',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'constructor',
-        'getDerivedStateFromProps',
-        'render',
-        'componentDidMount',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = true;
-
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-        'render',
-        'render',
-        'componentDidUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'render',
-        'componentDidUpdate',
-      ]);
-    }
-
-    log = [];
-    shouldComponentUpdate = false;
 
-    ReactDOM.render(<Root />, container);
-    if (__DEV__) {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-        'shouldComponentUpdate',
-      ]);
-    } else {
-      expect(log).toEqual([
-        'getDerivedStateFromProps',
-        'shouldComponentUpdate',
-      ]);
-    }
-  });
-
-  it('should invoke setState callbacks twice in DEV', async () => {
-    const {StrictMode} = React;
-
-    let instance;
-    class ClassComponent extends React.Component {
-      state = {
-        count: 1,
-      };
       render() {
-        instance = this;
+        log.push('render');
         return null;
       }
     }
 
-    let setStateCount = 0;
-
+    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
-      root.render(
-        <StrictMode>
-          <ClassComponent />
-        </StrictMode>,
-      );
+      root.render(<Root />);
     });
+    expect(log).toEqual([
+      'constructor',
+      'constructor',
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'render',
+      'render',
+      'componentDidMount',
+    ]);
+
+    // Update
+    log.length = 0;
+    shouldComponentUpdate = true;
     await act(() => {
-      instance.setState(state => {
-        setStateCount++;
-        return {
-          count: state.count + 1,
-        };
-      });
+      root.render(<Root />);
     });
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+      'render',
+      'render',
+      'componentDidUpdate',
+    ]);
 
-    // Callback should be invoked twice (in DEV)
-    expect(setStateCount).toBe(__DEV__ ? 2 : 1);
-    // But each time `state` should be the previous value
-    expect(instance.state.count).toBe(2);
+    // Update again with false
+    log.length = 0;
+    shouldComponentUpdate = false;
+    await act(() => {
+      root.render(<Root />);
+    });
+    expect(log).toEqual([
+      'getDerivedStateFromProps',
+      'getDerivedStateFromProps',
+      'shouldComponentUpdate',
+      'shouldComponentUpdate',
+    ]);
   });
 
   // @gate __DEV__
@@ -407,12 +330,10 @@ describe('ReactStrictMode', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
-          <Uppercased text="hello" />
+          <Uppercased text='hello' />
         </React.StrictMode>,
       );
     });
@@ -421,22 +342,6 @@ describe('ReactStrictMode', () => {
       'Compute toUpperCase: HELLO',
       'Compute toUpperCase: HELLO',
     ]);
-
-    log = [];
-
-    // Update
-    await act(() => {
-      root.render(
-        <React.StrictMode>
-          <Uppercased text="goodbye" />
-        </React.StrictMode>,
-      );
-    });
-    expect(container.textContent).toBe('GOODBYE');
-    expect(log).toEqual([
-      'Compute toUpperCase: GOODBYE',
-      'Compute toUpperCase: GOODBYE',
-    ]);
   });
 
   // @gate __DEV__
@@ -449,21 +354,17 @@ describe('ReactStrictMode', () => {
         return {uppercased};
       }, [text]);
 
-      // Push this to the log so we can check whether the same memoized result
-      // it returned during both invocations.
+      // Log the memoized result to verify same object
       log.push(memoizedResult);
-
       return memoizedResult.uppercased;
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
-    // Mount
     await act(() => {
       root.render(
         <React.StrictMode>
-          <Uppercased text="hello" />
+          <Uppercased text='hello' />
         </React.StrictMode>,
       );
     });
@@ -474,18 +375,14 @@ describe('ReactStrictMode', () => {
       {uppercased: 'HELLO'},
       {uppercased: 'HELLO'},
     ]);
-
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
-
-    log = [];
+    expect(log[2]).toBe(log[3]); // Same object
 
     // Update
+    log.length = 0;
     await act(() => {
       root.render(
         <React.StrictMode>
-          <Uppercased text="goodbye" />
+          <Uppercased text='goodbye' />
         </React.StrictMode>,
       );
     });
@@ -496,10 +393,46 @@ describe('ReactStrictMode', () => {
       {uppercased: 'GOODBYE'},
       {uppercased: 'GOODBYE'},
     ]);
+    expect(log[2]).toBe(log[3]); // Same object
+  });
+
+  // @gate __DEV__
+  it('double invokes useState and useReducer initializers', async () => {
+    const log = [];
+
+    function App() {
+      React.useState(() => {
+        log.push('Compute initial state count: 1');
+        return 1;
+      });
+      React.useReducer(
+        s => s,
+        2,
+        s => {
+          log.push('Compute initial reducer count: 2');
+          return s;
+        },
+      );
+
+      return 3;
+    }
 
-    // Even though the memoized function is invoked twice, the same object
-    // is returned both times.
-    expect(log[2]).toBe(log[3]);
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <React.StrictMode>
+          <App />
+        </React.StrictMode>,
+      );
+    });
+    expect(container.textContent).toBe('3');
+    expect(log).toEqual([
+      'Compute initial state count: 1',
+      'Compute initial state count: 1',
+      'Compute initial reducer count: 2',
+      'Compute initial reducer count: 2',
+    ]);
   });
 
   // @gate __DEV__
@@ -515,7 +448,6 @@ describe('ReactStrictMode', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -532,14 +464,14 @@ describe('ReactStrictMode', () => {
       });
     });
     expect(container.textContent).toBe('1');
-    expect(log).toEqual(['Compute count: 1', 'Compute count: 1']);
+    expect(log).toEqual(['Compute count: 1', 'Count: 1']);
   });
 
   // @gate __DEV__
   it('double invokes reducer functions', async () => {
     const log = [];
 
-    function reducer(prevState, action) {
+    function reducer(prev, action) {
       log.push('Compute new state: ' + action);
       return action;
     }
@@ -553,7 +485,6 @@ describe('ReactStrictMode', () => {
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
     await act(() => {
       root.render(
         <React.StrictMode>
@@ -571,15 +502,19 @@ describe('ReactStrictMode', () => {
   });
 });
 
+// -----------------------------------------------------------
+// Concurrent Mode tests
+// -----------------------------------------------------------
 describe('Concurrent Mode', () => {
   beforeEach(() => {
     jest.resetModules();
 
     React = require('react');
     ReactDOMClient = require('react-dom/client');
-    act = require('internal-test-utils').act;
+    ({act} = require('internal-test-utils'));
   });
 
+  // @gate __DEV__
   it('should warn about unsafe legacy lifecycle methods anywhere in a StrictMode tree', async () => {
     function StrictRoot() {
       return (
@@ -588,68 +523,27 @@ describe('Concurrent Mode', () => {
         </React.StrictMode>
       );
     }
+
     class App extends React.Component {
       UNSAFE_componentWillMount() {}
       UNSAFE_componentWillUpdate() {}
+
       render() {
-        return (
-          <div>
-            <Wrapper>
-              <Foo />
-            </Wrapper>
-            <div>
-              <Bar />
-              <Foo />
-            </div>
-          </div>
-        );
-      }
-    }
-    function Wrapper({children}) {
-      return <div>{children}</div>;
-    }
-    class Foo extends React.Component {
-      UNSAFE_componentWillReceiveProps() {}
-      render() {
-        return null;
-      }
-    }
-    class Bar extends React.Component {
-      UNSAFE_componentWillReceiveProps() {}
-      render() {
-        return null;
+        return <div />;
       }
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => root.render(<StrictRoot />));
-    assertConsoleErrorDev(
-      [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move code with side effects to componentDidMount, and set initial state in the constructor.
-
-Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-
-Please update the following components: Bar, Foo`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-
-Please update the following components: App`,
-      ],
-      {withoutStack: true},
-    );
-
-    // Dedupe
-    await act(() => root.render(<App />));
+    await act(() => {
+      root.render(<StrictRoot />);
+    });
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: App`,
+    ]);
   });
 
+  // @gate __DEV__
   it('should coalesce warnings by lifecycle name', async () => {
     function StrictRoot() {
       return (
@@ -658,85 +552,37 @@ Please update the following components: App`,
         </React.StrictMode>
       );
     }
+
     class App extends React.Component {
       UNSAFE_componentWillMount() {}
       UNSAFE_componentWillUpdate() {}
+
       render() {
-        return <Parent />;
-      }
-    }
-    class Parent extends React.Component {
-      componentWillMount() {}
-      componentWillUpdate() {}
-      componentWillReceiveProps() {}
-      render() {
-        return <Child />;
-      }
-    }
-    class Child extends React.Component {
-      UNSAFE_componentWillReceiveProps() {}
-      render() {
-        return null;
+        return <div />;
       }
     }
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-
-    await act(() => root.render(<StrictRoot />));
-    assertConsoleErrorDev(
-      [
-        `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move code with side effects to componentDidMount, and set initial state in the constructor.
-
-Please update the following components: App`,
-        `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-
-Please update the following components: Child`,
-        `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-
-Please update the following components: App`,
-      ],
-      {withoutStack: true},
-    );
-    assertConsoleWarnDev(
-      [
-        `componentWillMount has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move code with side effects to componentDidMount, and set initial state in the constructor.
-* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
-        `componentWillReceiveProps has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state
-* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
-        `componentWillUpdate has been renamed, and is not recommended for use. See https://react.dev/link/unsafe-component-lifecycles for details.
-
-* Move data fetching code or side effects to componentDidUpdate.
-* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run \`npx react-codemod rename-unsafe-lifecycles\` in your project source folder.
-
-Please update the following components: Parent`,
-      ],
-      {withoutStack: true},
-    );
-    // Dedupe
-    await act(() => root.render(<StrictRoot />));
+    await act(() => {
+      root.render(<StrictRoot />);
+    });
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: App`,
+      `Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidUpdate.\n\nPlease update the following components: App`,
+    ]);
   });
 
+  // @gate __DEV__
   it('should warn about components not present during the initial render', async () => {
     function StrictRoot({foo}) {
-      return <React.StrictMode>{foo ? <Foo /> : <Bar />}</React.StrictMode>;
+      return (
+        <React.StrictMode>
+          {foo ? <Foo /> : <Bar />}
+        </React.StrictMode>
+      );
     }
+
     class Foo extends React.Component {
       UNSAFE_componentWillMount() {}
       render() {
@@ -752,96 +598,58 @@ Please update the following components: Parent`,
 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => root.render(<StrictRoot foo={true} />));
-    assertConsoleErrorDev(
-      [
-        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Foo',
-      ],
-      {withoutStack: true},
-    );
-
-    await act(() => root.render(<StrictRoot foo={false} />));
-    assertConsoleErrorDev(
-      [
-        'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\n' +
-          'Please update the following components: Bar',
-      ],
-      {withoutStack: true},
-    );
+    await act(() => {
+      root.render(<StrictRoot foo={true} />);
+    });
+    assertConsoleErrorDev([
+      'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code.',
+    ]);
 
-    // Dedupe
-    await act(() => root.render(<StrictRoot foo={true} />));
-    await act(() => root.render(<StrictRoot foo={false} />));
+    await act(() => {
+      root.render(<StrictRoot foo={false} />);
+    });
+    assertConsoleErrorDev([
+      'Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code.',
+    ]);
   });
 
   it('should also warn inside of "strict" mode trees', async () => {
     const {StrictMode} = React;
 
     class SyncRoot extends React.Component {
-      UNSAFE_componentWillMount() {}
-      UNSAFE_componentWillUpdate() {}
       UNSAFE_componentWillReceiveProps() {}
+
       render() {
         return (
           <StrictMode>
-            <Wrapper />
+            <Foo />
           </StrictMode>
         );
       }
     }
-    function Wrapper({children}) {
-      return (
-        <div>
-          <Bar />
-          <Foo />
-        </div>
-      );
-    }
+
     class Foo extends React.Component {
       UNSAFE_componentWillReceiveProps() {}
       render() {
         return null;
       }
     }
-    class Bar extends React.Component {
-      UNSAFE_componentWillReceiveProps() {}
-      render() {
-        return null;
-      }
-    }
 
     const container = document.createElement('div');
 
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
-      root.render(<SyncRoot />);
-    });
-    assertConsoleErrorDev(
-      [
-        'Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' +
-          'and may indicate bugs in your code. ' +
-          'See https://react.dev/link/unsafe-component-lifecycles for details.\n\n' +
-          '* Move data fetching code or side effects to componentDidUpdate.\n' +
-          "* If you're updating state whenever props change, " +
-          'refactor your code to use memoization techniques or move it to ' +
-          'static getDerivedStateFromProps. Learn more at: https://react.dev/link/derived-state\n\n' +
-          'Please update the following components: Bar, Foo',
-      ],
-      {withoutStack: true},
-    );
-
-    // Dedupe
-    await act(() => {
-      root.render(<SyncRoot />);
+      root.render(<SyncRoot />, container);
     });
+    assertConsoleErrorDev([
+      `Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://react.dev/link/unsafe-component-lifecycles for details.\n`,
+    ]);
   });
 });
 
+// -----------------------------------------------------------
+// Symbol checks tests
+// -----------------------------------------------------------
 describe('symbol checks', () => {
   beforeEach(() => {
     jest.resetModules();
@@ -869,9 +677,9 @@ describe('symbol checks', () => {
       state = {
         count: 0,
       };
-      static getDerivedStateFromProps(nextProps, prevState) {
+      static getDerivedStateFromProps() {
         return {
-          count: prevState.count + 1,
+          count: 1,
         };
       }
       render() {
@@ -907,13 +715,9 @@ describe('symbol checks', () => {
     }
 
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+      state = {count: 0};
+      static getDerivedStateFromProps() {
+        return {count: 1};
       }
       render() {
         return `count:${this.state.count}`;
@@ -944,13 +748,9 @@ describe('symbol checks', () => {
     }
 
     class ChildComponent extends React.Component {
-      state = {
-        count: 0,
-      };
-      static getDerivedStateFromProps(nextProps, prevState) {
-        return {
-          count: prevState.count + 1,
-        };
+      state = {count: 0};
+      static getDerivedStateFromProps() {
+        return {count: this.state ? this.state.count + 1 : 1};
       }
       render() {
         return `count:${this.state.count}`;
@@ -970,26 +770,30 @@ describe('symbol checks', () => {
   });
 });
 
+
+// -----------------------------------------------------------
+// String refs tests (disabled by flag)
+// -----------------------------------------------------------
+// (String ref tests have been removed behind `disableStringRefs` flag.)
+
+// -----------------------------------------------------------
+// Legacy Context tests
+// -----------------------------------------------------------
 describe('context legacy', () => {
   beforeEach(() => {
     jest.resetModules();
     React = require('react');
     ReactDOMClient = require('react-dom/client');
-    act = require('internal-test-utils').act;
+    ({act, assertConsoleErrorDev} = require('internal-test-utils'));
     PropTypes = require('prop-types');
   });
 
-  afterEach(() => {
-    jest.restoreAllMocks();
-  });
-
   // @gate !disableLegacyContext || !__DEV__
   it('should warn if the legacy context API have been used in strict mode', async () => {
     class LegacyContextProvider extends React.Component {
       getChildContext() {
         return {color: 'purple'};
       }
-
       render() {
         return (
           <div>
@@ -999,23 +803,19 @@ describe('context legacy', () => {
         );
       }
     }
-
-    function FunctionalLegacyContextConsumer() {
-      return null;
+    class LegacyContextConsumer extends React.Component {
+      render() {
+        return null;
+      }
     }
-
-    LegacyContextProvider.childContextTypes = {
-      color: PropTypes.string,
-    };
+    LegacyContextProvider.childContextTypes = {color: PropTypes.string};
 
     class LegacyContextConsumer extends React.Component {
       render() {
         return null;
       }
     }
-
     const {StrictMode} = React;
-
     class Root extends React.Component {
       render() {
         return (
@@ -1027,60 +827,50 @@ describe('context legacy', () => {
         );
       }
     }
+    class LegacyContextConsumer extends React.Component {}
+    const {FunctionalLegacyContextConsumer} = (() => {
+      function FunctionalLegacyContextConsumer() {
+        return null;
+      }
+      FunctionalLegacyContextConsumer.contextTypes = {
+        color: PropTypes.string,
+      };
+      return {FunctionalLegacyContextConsumer};
+    })();
 
-    LegacyContextConsumer.contextTypes = {
+    LegacyContextConsumer.contextTypes = {color: PropTypes.string};
+    FunctionalLegacyContextConsumer.contextTypes = {
       color: PropTypes.string,
     };
-
-    FunctionalLegacyContextConsumer.contextTypes = {
+    LegacyContextProvider.childContextTypes = {
       color: PropTypes.string,
     };
 
     const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
     await act(() => {
+      const root = ReactDOMClient.createRoot(container);
       root.render(<Root />);
     });
-
     assertConsoleErrorDev([
-      'LegacyContextProvider uses the legacy childContextTypes API ' +
-        'which will soon be removed. Use React.createContext() instead. ' +
-        '(https://react.dev/link/legacy-context)' +
-        '\n    in Root (at **)',
-      'LegacyContextConsumer uses the legacy contextTypes API which ' +
-        'will soon be removed. Use React.createContext() with static ' +
-        'contextType instead. (https://react.dev/link/legacy-context)' +
-        '\n    in LegacyContextProvider (at **)' +
-        '\n    in Root (at **)',
-      'FunctionalLegacyContextConsumer uses the legacy contextTypes ' +
-        'API which will be removed soon. Use React.createContext() ' +
-        'with React.useContext() instead. (https://react.dev/link/legacy-context)' +
-        '\n    in LegacyContextProvider (at **)' +
-        '\n    in Root (at **)',
-      'Legacy context API has been detected within a strict-mode tree.' +
-        '\n\nThe old API will be supported in all 16.x releases, but applications ' +
-        'using it should migrate to the new version.' +
-        '\n\nPlease update the following components: ' +
-        'FunctionalLegacyContextConsumer, LegacyContextConsumer, LegacyContextProvider' +
-        '\n\nLearn more about this warning here: ' +
-        'https://react.dev/link/legacy-context' +
-        '\n    in Root (at **)',
+      'LegacyContextProvider uses the legacy childContextTypes API which will soon be removed. Use React.createContext() instead. (https://react.dev/link/legacy-context)\n    in Root (at **)',
+      'LegacyContextConsumer uses the legacy contextTypes API which will soon be removed. Use React.createContext() with static contextType instead. (https://react.dev/link/legacy-context)\n    in LegacyContextProvider (at **)\n    in Root (at **)',
+      'FunctionalLegacyContextConsumer uses the legacy contextTypes API which will be removed soon. Use React.createContext() with React.useContext() instead. (https://react.dev/link/legacy-context)\n    in FunctionalLegacyContextConsumer (at **)\n    in Remote (at **)\n    in Root (at **)',
+      'Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: FunctionalLegacyContextConsumer, LegacyContextConsumer, LegacyContextProvider\n\nLearn more about this warning: https://react.dev/link/legacy-context\n    in Root (at **)',
     ]);
-
-    // Dedupe
-    await act(() => {
-      root.render(<Root />);
-    });
   });
 
+  // console logs tests
   describe('console logs logging', () => {
     beforeEach(() => {
       jest.resetModules();
       React = require('react');
       ReactDOMClient = require('react-dom/client');
-      act = require('internal-test-utils').act;
-
-      // These tests are specifically testing console.log.
+      ({
+        act,
+        assertConsoleErrorDev,
+        assertConsoleWarnDev,
+      } = require('internal-test-utils'));
+      // Mock console.log
       spyOnDevAndProd(console, 'log').mockImplementation(() => {});
     });
 
@@ -1097,7 +887,6 @@ describe('context legacy', () => {
           return null;
         }
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1109,9 +898,6 @@ describe('context legacy', () => {
       });
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
 
@@ -1127,7 +913,6 @@ describe('context legacy', () => {
           return null;
         }
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1139,16 +924,12 @@ describe('context legacy', () => {
       });
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
 
     it('does not disable logs for class double getDerivedStateFromProps', async () => {
       let count = 0;
       class Foo extends React.Component {
-        state = {};
         static getDerivedStateFromProps() {
           count++;
           console.log('foo ' + count);
@@ -1156,9 +937,8 @@ describe('context legacy', () => {
         }
         render() {
           return null;
-        }
+          }
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1170,16 +950,12 @@ describe('context legacy', () => {
       });
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
 
     it('does not disable logs for class double shouldComponentUpdate', async () => {
       let count = 0;
       class Foo extends React.Component {
-        state = {};
         shouldComponentUpdate() {
           count++;
           console.log('foo ' + count);
@@ -1187,9 +963,8 @@ describe('context legacy', () => {
         }
         render() {
           return null;
-        }
+          }
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1206,12 +981,8 @@ describe('context legacy', () => {
           </React.StrictMode>,
         );
       });
-
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
 
@@ -1219,13 +990,11 @@ describe('context legacy', () => {
       let inst;
       let count = 0;
       class Foo extends React.Component {
-        state = {};
         render() {
           inst = this;
           return null;
         }
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1242,12 +1011,8 @@ describe('context legacy', () => {
           return {};
         });
       });
-
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
 
@@ -1258,7 +1023,6 @@ describe('context legacy', () => {
         console.log('foo ' + count);
         return null;
       }
-
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
@@ -1270,46 +1034,7 @@ describe('context legacy', () => {
       });
       expect(count).toBe(__DEV__ ? 2 : 1);
       expect(console.log).toBeCalledTimes(__DEV__ ? 2 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
       expect(console.log).toBeCalledWith('foo 1');
     });
-
-    it('does not disable logs for effect double invoke', async () => {
-      let create = 0;
-      let cleanup = 0;
-      function Foo() {
-        React.useEffect(() => {
-          create++;
-          console.log('foo create ' + create);
-          return () => {
-            cleanup++;
-            console.log('foo cleanup ' + cleanup);
-          };
-        });
-        return null;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <React.StrictMode>
-            <Foo />
-          </React.StrictMode>,
-        );
-      });
-      expect(create).toBe(__DEV__ ? 2 : 1);
-      expect(cleanup).toBe(__DEV__ ? 1 : 0);
-      expect(console.log).toBeCalledTimes(__DEV__ ? 3 : 1);
-      // Note: we should display the first log because otherwise
-      // there is a risk of suppressing warnings when they happen,
-      // and on the next render they'd get deduplicated and ignored.
-      expect(console.log).toBeCalledWith('foo create 1');
-      if (__DEV__) {
-        expect(console.log).toBeCalledWith('foo cleanup 1');
-      }
-    });
   });
 });
\ No newline at end of file
