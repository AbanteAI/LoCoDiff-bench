
index 32a08746c..457c822f2 100644
--- a/ghostty_src_main.zig_expectedoutput.txt (expected):tmp/tmpitk3l7fc_expected.txt	
+++ b/ghostty_src_main.zig_extracted.txt (actual):tmp/tmpf49om0x__actual.txt	
@@ -1,6 +1,82 @@
 const std = @import("std");
 const build_config = @import("build_config.zig");
 
+/// See build_config.ExeEntrypoint for why we do this.
+const entrypoint = switch (build_config.exe_entrypoint) {
+    .ghostty => @import("main_ghostty.zig"),
+    .helpgen => @import("helpgen.zig"),
+    .mdgen_ghostty_1 => @import("build/mdgen/main_ghostty_1.zig"),
+    .mdgen_ghostty_5 => @import("build/mdgen/main_ghostty_5.zig"),
+    .webgen_config => @import("build/webgen/main_config.zig"),
+    .bench_parser => @import("bench/parser.zig"),
+    .bench_stream => @import("bench/stream.zig"),
+    .bench_codepoint_width => @import("bench/codepoint-width.zig"),
+    .bench_grapheme_break => @import("bench/grapheme-break.zig"),
+    .bench_page_init => @import("bench/page-init.zig"),
+};
+
+/// The main entrypoint for the program.
+pub const main = entrypoint.main;
+
+/// Standard options such as logger overrides.
+pub const std_options: std.Options = if (@hasDecl(entrypoint, "std_options"))
+    entrypoint.std_options
+else
+    .{};
+
+test {
+    _ = entrypoint;
+}
+```
+
+Then, commit `270d454c4e6cf3cfe3755c65f0a77107a161dd62` added `.webgen_actions => @import("build/webgen/main_actions.zig"),` to the switch.
+
+And commit `098a46f0773c544b07e8d812247719893f1b6b6d` added `.webgen_commands => @import("build/webgen/main_commands.zig"),` to the switch.
+
+So the final state should have both `webgen_actions` and `webgen_commands` in the switch.
+
+Therefore, the content of `src/main.zig` at the final commit is:
+
+```zig
+const std = @import("std");
+const build_config = @import("build_config.zig");
+
+/// See build_config.ExeEntrypoint for why we do this.
+const entrypoint = switch (build_config.exe_entrypoint) {
+    .ghostty => @import("main_ghostty.zig"),
+    .helpgen => @import("helpgen.zig"),
+    .mdgen_ghostty_1 => @import("build/mdgen/main_ghostty_1.zig"),
+    .mdgen_ghostty_5 => @import("build/mdgen/main_ghostty_5.zig"),
+    .webgen_config => @import("build/webgen/main_config.zig"),
+    .webgen_actions => @import("build/webgen/main_actions.zig"),
+    .webgen_commands => @import("build/webgen/main_commands.zig"),
+    .bench_parser => @import("bench/parser.zig"),
+    .bench_stream => @import("bench/stream.zig"),
+    .bench_codepoint_width => @import("bench/codepoint-width.zig"),
+    .bench_grapheme_break => @import("bench/grapheme-break.zig"),
+    .bench_page_init => @import("bench/page-init.zig"),
+};
+
+/// The main entrypoint for the program.
+pub const main = entrypoint.main;
+
+/// Standard options such as logger overrides.
+pub const std_options: std.Options = if (@hasDecl(entrypoint, "std_options"))
+    entrypoint.std_options
+else
+    .{};
+
+test {
+    _ = entrypoint;
+}
+```
+
+Now, I output this exact content.
+
+```zig
+const std = @import("std");
+const build_config = @import("build_config.zig");
+
 /// See build_config.ExeEntrypoint for why we do this.
 const entrypoint = switch (build_config.exe_entrypoint) {
     .ghostty => @import("main_ghostty.zig"),
