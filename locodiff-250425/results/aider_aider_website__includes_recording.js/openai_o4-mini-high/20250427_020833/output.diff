
index 95a52a67..7c2a8659 100644
--- a/aider_aider_website__includes_recording.js_expectedoutput.txt (expected):tmp/tmpxlcp7j7f_expected.txt	
+++ b/aider_aider_website__includes_recording.js_extracted.txt (actual):tmp/tmpc10vwo_b_actual.txt	
@@ -1,11 +1,11 @@
 document.addEventListener('DOMContentLoaded', function() {
   let player; // Store player reference to make it accessible to click handlers
   let globalAudio; // Global audio element to be reused
-  
+
   // Detect if device likely has no physical keyboard
   function detectNoKeyboard() {
     // Check if it's a touch device (most mobile devices)
-    const isTouchDevice = ('ontouchstart' in window) || 
+    const isTouchDevice = ('ontouchstart' in window) ||
                          (navigator.maxTouchPoints > 0) ||
                          (navigator.msMaxTouchPoints > 0);
                          
@@ -17,10 +17,10 @@ document.addEventListener('DOMContentLoaded', function() {
       document.body.classList.add('no-physical-keyboard');
     }
   }
-  
+
   // Run detection
   detectNoKeyboard();
-  
+
   // Parse the transcript section to create markers and convert timestamps to links
   function parseTranscript() {
     const markers = [];
@@ -28,7 +28,7 @@ document.addEventListener('DOMContentLoaded', function() {
     const transcriptHeading = Array.from(document.querySelectorAll('h2')).find(el => el.textContent.trim() === 'Commentary');
     
     if (transcriptHeading) {
-      // Get all list items after the transcript heading
+      // Get all list items after the commentary heading
       let currentElement = transcriptHeading.nextElementSibling;
       
       while (currentElement && currentElement.tagName === 'UL') {
@@ -148,22 +148,22 @@ document.addEventListener('DOMContentLoaded', function() {
   
   // Track active toast elements
   let activeToast = null;
-  
+
   // Function to display toast notification
   function showToast(text) {
     // Get the appropriate container based on fullscreen state
     let container = document.getElementById('toast-container');
-    const isFullscreen = document.fullscreenElement || 
-                         document.webkitFullscreenElement || 
-                         document.mozFullScreenElement || 
+    const isFullscreen = document.fullscreenElement ||
+                         document.webkitFullscreenElement ||
+                         document.mozFullScreenElement ||
                          document.msFullscreenElement;
     
     // If in fullscreen, check if we need to create a fullscreen toast container
     if (isFullscreen) {
       // Target the fullscreen element as the container parent
-      const fullscreenElement = document.fullscreenElement || 
-                               document.webkitFullscreenElement || 
-                               document.mozFullScreenElement || 
+      const fullscreenElement = document.fullscreenElement ||
+                               document.webkitFullscreenElement ||
+                               document.mozFullScreenElement ||
                                document.msFullscreenElement;
       
       // Look for an existing fullscreen toast container
@@ -206,7 +206,7 @@ document.addEventListener('DOMContentLoaded', function() {
     
     return activeToast;
   }
-  
+
   // Function to hide a toast
   function hideToast(toastInfo) {
     if (!toastInfo || !toastInfo.element) return;
@@ -223,11 +223,11 @@ document.addEventListener('DOMContentLoaded', function() {
       }
     }, 300); // Wait for fade out animation
   }
-  
+
   // Track if TTS is currently in progress to prevent duplicates
   let ttsInProgress = false;
   let currentToast = null;
-  
+
   // Improved browser TTS function
   function useBrowserTTS(text) {
     // Don't start new speech if already in progress
@@ -244,17 +244,17 @@ document.addEventListener('DOMContentLoaded', function() {
       
       // Cancel any ongoing speech
       window.speechSynthesis.cancel();
-      
+            
       const utterance = new SpeechSynthesisUtterance(text);
       utterance.rate = 1.0;
       utterance.pitch = 1.0;
       utterance.volume = 1.0;
-      
+            
       // For iOS, use a shorter utterance if possible
       if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
         utterance.text = text.length > 100 ? text.substring(0, 100) + '...' : text;
       }
-      
+            
       utterance.onstart = () => console.log('Speech started');
       utterance.onend = () => {
         console.log('Speech ended');
@@ -276,14 +276,14 @@ document.addEventListener('DOMContentLoaded', function() {
           currentToast = null;
         }
       };
-      
+            
       window.speechSynthesis.speak(utterance);
       return true;
     }
     console.warn('SpeechSynthesis not supported');
     return false;
   }
-  
+
   // Function to play pre-generated TTS audio files
   function speakText(text, timeInSeconds) {
     // Show the toast and keep reference
@@ -295,7 +295,7 @@ document.addEventListener('DOMContentLoaded', function() {
     const formattedTime = `${minutes.toString().padStart(2, '0')}-${seconds.toString().padStart(2, '0')}`;
     
     // Get recording_id from the page or use default from the URL
-    const recordingId = typeof recording_id !== 'undefined' ? recording_id : 
+    const recordingId = typeof recording_id !== 'undefined' ? recording_id :
                        window.location.pathname.split('/').pop().replace('.html', '');
                        
     // Construct audio file path
@@ -319,15 +319,6 @@ document.addEventListener('DOMContentLoaded', function() {
       }
       
       // Set up event handlers
-      globalAudio.onended = () => {
-        console.log('Audio playback ended');
-        // Hide toast when audio ends
-        if (currentToast) {
-          hideToast(currentToast);
-          currentToast = null;
-        }
-      };
-      
       globalAudio.onerror = (e) => {
         console.warn(`Audio error: ${e.type}`, e);
         if (!fallenBackToTTS) {
@@ -339,27 +330,26 @@ document.addEventListener('DOMContentLoaded', function() {
           currentToast = null;
         }
       };
-      
+            
       // For iOS, preload might help with subsequent plays
       if (isIOS) {
         globalAudio.preload = "auto";
       }
-      
+            
       // Set the new source
       globalAudio.src = audioPath;
-      
+            
       // Play with proper error handling
       const playPromise = globalAudio.play();
-      
       if (playPromise !== undefined) {
         playPromise.catch(error => {
           console.warn(`Play error: ${error.message}`);
-          
+                  
           // On iOS, a user gesture might be required
           if (isIOS) {
             console.log("iOS playback failed, trying SpeechSynthesis");
           }
-          
+                  
           if (!fallenBackToTTS) {
             fallenBackToTTS = true;
             useBrowserTTS(text);
@@ -370,8 +360,17 @@ document.addEventListener('DOMContentLoaded', function() {
       console.error(`Exception in audio playback: ${e.message}`);
       useBrowserTTS(text);
     }
+    
+    // Hide toast when audio ends
+    globalAudio.onended = () => {
+      console.log('Audio playback ended');
+      if (currentToast) {
+        hideToast(currentToast);
+        currentToast = null;
+      }
+    };
   }
-  
+
   // Function to highlight the active timestamp in the transcript
   function highlightTimestamp(timeInSeconds) {
     // Remove previous highlights
