
index 95a52a673..9710d7653 100644
--- a/aider_aider_website__includes_recording.js_expectedoutput.txt (expected):tmp/tmp0mdekh4n_expected.txt	
+++ b/aider_aider_website__includes_recording.js_extracted.txt (actual):tmp/tmpaeq7120e_actual.txt	
@@ -1,11 +1,11 @@
 document.addEventListener('DOMContentLoaded', function() {
   let player; // Store player reference to make it accessible to click handlers
   let globalAudio; // Global audio element to be reused
-  
+
   // Detect if device likely has no physical keyboard
   function detectNoKeyboard() {
     // Check if it's a touch device (most mobile devices)
-    const isTouchDevice = ('ontouchstart' in window) || 
+    const isTouchDevice = ('ontouchstart' in window) ||
                          (navigator.maxTouchPoints > 0) ||
                          (navigator.msMaxTouchPoints > 0);
                          
@@ -20,7 +20,7 @@ document.addEventListener('DOMContentLoaded', function() {
   
   // Run detection
   detectNoKeyboard();
-  
+
   // Parse the transcript section to create markers and convert timestamps to links
   function parseTranscript() {
     const markers = [];
@@ -153,17 +153,17 @@ document.addEventListener('DOMContentLoaded', function() {
   function showToast(text) {
     // Get the appropriate container based on fullscreen state
     let container = document.getElementById('toast-container');
-    const isFullscreen = document.fullscreenElement || 
-                         document.webkitFullscreenElement || 
-                         document.mozFullScreenElement || 
+    const isFullscreen = document.fullscreenElement ||
+                         document.webkitFullscreenElement ||
+                         document.mozFullScreenElement ||
                          document.msFullscreenElement;
     
     // If in fullscreen, check if we need to create a fullscreen toast container
     if (isFullscreen) {
       // Target the fullscreen element as the container parent
-      const fullscreenElement = document.fullscreenElement || 
-                               document.webkitFullscreenElement || 
-                               document.mozFullScreenElement || 
+      const fullscreenElement = document.fullscreenElement ||
+                               document.webkitFullscreenElement ||
+                               document.mozFullScreenElement ||
                                document.msFullscreenElement;
       
       // Look for an existing fullscreen toast container
@@ -245,12 +245,12 @@ document.addEventListener('DOMContentLoaded', function() {
       // Cancel any ongoing speech
       window.speechSynthesis.cancel();
       
+      // For iOS, use a shorter utterance if possible
       const utterance = new SpeechSynthesisUtterance(text);
       utterance.rate = 1.0;
       utterance.pitch = 1.0;
       utterance.volume = 1.0;
       
-      // For iOS, use a shorter utterance if possible
       if (/iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream) {
         utterance.text = text.length > 100 ? text.substring(0, 100) + '...' : text;
       }
@@ -259,22 +259,10 @@ document.addEventListener('DOMContentLoaded', function() {
       utterance.onend = () => {
         console.log('Speech ended');
         ttsInProgress = false; // Reset flag when speech completes
-        
-        // Hide toast when speech ends
-        if (currentToast) {
-          hideToast(currentToast);
-          currentToast = null;
-        }
       };
       utterance.onerror = (e) => {
         console.warn('Speech error:', e);
         ttsInProgress = false; // Reset flag on error
-        
-        // Also hide toast on error
-        if (currentToast) {
-          hideToast(currentToast);
-          currentToast = null;
-        }
       };
       
       window.speechSynthesis.speak(utterance);
@@ -295,7 +283,7 @@ document.addEventListener('DOMContentLoaded', function() {
     const formattedTime = `${minutes.toString().padStart(2, '0')}-${seconds.toString().padStart(2, '0')}`;
     
     // Get recording_id from the page or use default from the URL
-    const recordingId = typeof recording_id !== 'undefined' ? recording_id : 
+    const recordingId = typeof recording_id !== 'undefined' ? recording_id :
                        window.location.pathname.split('/').pop().replace('.html', '');
                        
     // Construct audio file path
@@ -319,24 +307,11 @@ document.addEventListener('DOMContentLoaded', function() {
       }
       
       // Set up event handlers
-      globalAudio.onended = () => {
-        console.log('Audio playback ended');
-        // Hide toast when audio ends
-        if (currentToast) {
-          hideToast(currentToast);
-          currentToast = null;
-        }
-      };
-      
       globalAudio.onerror = (e) => {
         console.warn(`Audio error: ${e.type}`, e);
         if (!fallenBackToTTS) {
           fallenBackToTTS = true;
           useBrowserTTS(text);
-        } else if (currentToast) {
-          // If we've already tried TTS and that failed too, hide the toast
-          hideToast(currentToast);
-          currentToast = null;
         }
       };
       
@@ -345,6 +320,16 @@ document.addEventListener('DOMContentLoaded', function() {
         globalAudio.preload = "auto";
       }
       
+      // Set up ending handler
+      globalAudio.onended = () => {
+        console.log('Audio playback ended');
+        // Hide toast when audio ends
+        if (currentToast) {
+          hideToast(currentToast);
+          currentToast = null;
+        }
+      };
+      
       // Set the new source
       globalAudio.src = audioPath;
       
@@ -402,12 +387,11 @@ document.addEventListener('DOMContentLoaded', function() {
       const listItem = activeLink.closest('li');
       if (listItem) {
         listItem.classList.add('active-marker');
-        
         // No longer scrolling into view to avoid shifting focus
       }
     }
   }
-
+  
   // Add event listener with safety checks
   if (player && typeof player.addEventListener === 'function') {
     player.addEventListener('marker', function(event) {
