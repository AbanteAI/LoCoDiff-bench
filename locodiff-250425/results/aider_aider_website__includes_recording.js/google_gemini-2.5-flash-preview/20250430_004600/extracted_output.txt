document.addEventListener('DOMContentLoaded', function() {
  let player; // Store player reference to make it accessible to click handlers
  let globalAudio; // Global audio element to be reused
  
  // Detect if device likely has no physical keyboard
  function detectNoKeyboard() {
    // Check if it's a touch device (most mobile devices)
    const isTouchDevice = ('ontouchstart' in window) || 
                         (navigator.maxTouchPoints > 0) ||
                         (navigator.msMaxTouchPoints > 0);
                         
    // Check common mobile user agents as additional signal
    const isMobileUA = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
    
    // If it's a touch device and has a mobile user agent, likely has no physical keyboard
    if (isTouchDevice && isMobileUA) {
      document.body.classList.add('no-physical-keyboard');
    }
  }
  
  // Run detection
  detectNoKeyboard();
  
  // Parse the transcript section to create markers and convert timestamps to links
  function parseTranscript() {
    const markers = [];
    // Find the Commentary heading
    const transcriptHeading = Array.from(document.querySelectorAll('h2')).find(el => el.textContent.trim() === 'Commentary');
    
    if (transcriptHeading) {
      // Get all list items after the transcript heading
      let currentElement = transcriptHeading.nextElementSibling;
      
      while (currentElement && currentElement.tagName === 'UL') {
        const listItems = currentElement.querySelectorAll('li');
        
        listItems.forEach(item => {
          const text = item.textContent.trim();
          const match = text.match(/(\d+):(\d+)\s+(.*)/);
          
          if (match) {
            const minutes = parseInt(match[1], 10);
            const seconds = parseInt(match[2], 10);
            const timeInSeconds = minutes * 60 + seconds;
+            const formattedTime = `${minutes}:${seconds.toString().padStart(2, '0')}`;
            const message = match[3].trim();
            
+            // Create link for the timestamp
+            const timeLink = document.createElement('a');
+            timeLink.href = '#';
+            timeLink.textContent = formattedTime;
+            timeLink.className = 'timestamp-link';
+            timeLink.dataset.time = timeInSeconds;
+            timeLink.dataset.message = message;
+            
+            // Add click event to seek the player
+            timeLink.addEventListener('click', function(e) {
+              e.preventDefault();
+              if (player && typeof player.seek === 'function') {
+                player.seek(timeInSeconds);
+                player.play();
+                
+                // Also trigger toast and speech
+                showToast(message);
+                speakText(message, timeInSeconds);
+                
+                // Highlight this timestamp
+                highlightTimestamp(timeInSeconds);
+              }
+            });
+            
+            // Replace text with the link + message
+            item.textContent = '';
+            item.appendChild(timeLink);
+            item.appendChild(document.createTextNode(' ' + message));
+            
+            // Add class and click handler to the entire list item
+            item.classList.add('transcript-item');
+            item.dataset.time = timeInSeconds;
+            item.dataset.message = message;
+            
+            item.addEventListener('click', function(e) {
+              // Prevent click event if the user clicked directly on the timestamp link
+              // This prevents double-firing of the event
+              if (e.target !== timeLink) {
+                e.preventDefault();
+                if (player && typeof player.seek === 'function') {
+                  player.seek(timeInSeconds);
+                  player.play();
+                  
+                  // Also trigger toast and speech
+                  showToast(message);
+                  speakText(message, timeInSeconds);
+                  
+                  // Highlight this timestamp
+                  highlightTimestamp(timeInSeconds);
+                }
+              }
+            });
+            
             markers.push([timeInSeconds, message]);
           }
         });
@@ -121,7 +145,8 @@
       controls: true
     }
   );
-  
+
   // Focus on the player element so keyboard shortcuts work immediately
   setTimeout(() => {
     // Use setTimeout to ensure the player is fully initialized
@@ -140,6 +165,9 @@
     }
   }, 100);
   
+  // Track active toast elements
+  let activeToast = null;
+  
   // Function to display toast notification
   function showToast(text) {
     // Get the appropriate container based on fullscreen state
@@ -171,24 +199,40 @@
       container = fsContainer;
     }
     
+    // Remove any existing toast
+    if (activeToast) {
+      hideToast(activeToast);
+    }
+    
     // Create toast element
     const toast = document.createElement('div');
     toast.className = 'toast-notification';
     toast.textContent = text;
     
     // Add to container
-    container.appendChild(toast);
+    container.prepend(toast); // Use prepend to make sure new toasts appear on top
     
+    // Store reference to active toast
+    activeToast = {
+      element: toast,
+      container: container
+    };
+    
     // Trigger animation
     setTimeout(() => {
       toast.style.opacity = '1';
     }, 10);
     
-    // Remove after 3 seconds
+    return activeToast;
+  }
+  
+  // Function to hide a toast
+  function hideToast(toastInfo) {
+    if (!toastInfo || !toastInfo.element) return;
+    
+    toastInfo.element.style.opacity = '0';
     setTimeout(() => {
-      toast.style.opacity = '0';
-      setTimeout(() => {
-        if (container && container.contains(toast)) {
+      if (toastInfo.container && toastInfo.container.contains(toastInfo.element)) {
           container.removeChild(toast);
         }
       }, 300); // Wait for fade out animation
@@ -196,11 +240,23 @@ document.addEventListener('DOMContentLoaded', function() {
   }
   
   // Track if TTS is currently in progress to prevent duplicates
-  let ttsInProgress = false;
+  let ttsInProgress = false; // Flag for browser TTS
   let currentToast = null;
   
+  // Track ongoing audio playback for pre-generated files
+  let audioPlaybackInProgress = false;
+
+    // Track if we've already fallen back to TTS for the current message
+  let fallenBackToTTS = false;
+
   // Improved browser TTS function
   function useBrowserTTS(text) {
+    // If audio is playing, stop it first
+    if (globalAudio && !globalAudio.paused) {
+      console.log('Stopping audio playback for browser TTS');
+      globalAudio.pause();
+    }
+
     // Don't start new speech if already in progress
     if (ttsInProgress) {
       console.log('Speech synthesis already in progress, skipping');
@@ -213,7 +269,7 @@ document.addEventListener('DOMContentLoaded', function() {
       // Set flag to prevent duplicate speech
       ttsInProgress = true;
       
-      // Cancel any ongoing speech
+      // Cancel any ongoing browser speech
       window.speechSynthesis.cancel();
       
       const utterance = new SpeechSynthesisUtterance(text);
@@ -225,10 +281,18 @@ document.addEventListener('DOMContentLoaded', function() {
         utterance.text = text.length > 100 ? text.substring(0, 100) + '...' : text;
       }
       
-      utterance.onstart = () => console.log('Speech started');
-      utterance.onend = () => {
+      utterance.onstart = () => {
+        console.log('Speech started');
+        // Ensure toast is visible while speech is active
+        if (currentToast) {
+          currentToast.element.style.opacity = '1';
+        }
+      };
+      utterance.onend = () => {
         console.log('Speech ended');
         ttsInProgress = false; // Reset flag when speech completes
+        fallenBackToTTS = false; // Reset fallback flag
+
         
         // Hide toast when speech ends
         if (currentToast) {
@@ -239,6 +303,8 @@ document.addEventListener('DOMContentLoaded', function() {
       utterance.onerror = (e) => {
         console.warn('Speech error:', e);
         ttsInProgress = false; // Reset flag on error
+        fallenBackToTTS = false; // Reset fallback flag
+
         
         // Also hide toast on error
         if (currentToast) {
@@ -253,6 +319,7 @@
     }
   }
   
+
   // Function to play pre-generated TTS audio files
   function speakText(text, timeInSeconds) {
     // Show the toast and keep reference
@@ -263,9 +330,14 @@
     const seconds = timeInSeconds % 60;
     const formattedTime = `${minutes.toString().padStart(2, '0')}-${seconds.toString().padStart(2, '0')}`;
     
+    // If browser TTS is in progress, cancel it
+    if (ttsInProgress) {
+      window.speechSynthesis.cancel();
+      ttsInProgress = false;
+    }
+
     // Get recording_id from the page or use default from the URL
     const recordingId = typeof recording_id !== 'undefined' ? recording_id :
-                       window.location.pathname.split('/').pop().replace('.html', '');
+                        window.location.pathname.split('/').pop().replace('.html', '');
                        
     // Construct audio file path
     const audioPath = `/assets/audio/${recordingId}/${formattedTime}.mp3`;
@@ -274,9 +346,6 @@ document.addEventListener('DOMContentLoaded', function() {
     console.log(`Attempting to play audio: ${audioPath}`);
     
     // Detect iOS
-    const isIOS = /iPad|iPhone|iPod/.test(navigator.userAgent) && !window.MSStream;
-    console.log(`Device is iOS: ${isIOS}`);
-    
     // Flag to track if we've already fallen back to TTS
     let fallenBackToTTS = false;
     
@@ -287,6 +356,17 @@ document.addEventListener('DOMContentLoaded', function() {
         globalAudio = new Audio();
         console.log("Created new global Audio element");
       }
+      
+      // Check if the requested audio is already set as the source
+      // Skipping setting source can sometimes help on iOS.
+      if (globalAudio.src.endsWith(audioPath)) {
+          console.log(`Audio source is already ${audioPath}`);
+      } else {
+         // Set the new source
+         globalAudio.src = audioPath;
+         globalAudio.load(); // Explicitly load source, especially helpful for iOS
+         console.log(`Set audio source to ${audioPath}`);
+      }
       
       // Set up event handlers
       globalAudio.onended = () => {
@@ -299,30 +379,34 @@ document.addEventListener('DOMContentLoaded', function() {
       };
       
       globalAudio.onerror = (e) => {
-        console.warn(`Audio error: ${e.type}`, e);
-        if (!fallenBackToTTS) {
+         console.warn(`Audio error: ${e.type} src: ${globalAudio.src}`, e);
+          if (!fallenBackToTTS) {
+            fallenBackToTTS = true;
+            useBrowserTTS(text);
+        } else { // If we've already tried TTS and that failed, hide the toast
+            console.log("Already fell back to TTS, hiding toast.");
+             if (currentToast) {
+                hideToast(currentToast);
+                currentToast = null;
+             }
+        }
+      };
+
+      // Play with proper error handling
+      const playPromise = globalAudio.play();
+      
+      if (playPromise !== undefined) {
+        playPromise.catch(error => {
+          console.warn(`Play error: ${error.message}`);
+          // Fall back to browser TTS if play() fails
+          if (!fallenBackToTTS) {
             fallenBackToTTS = true;
             useBrowserTTS(text);
-        } else if (currentToast) {
-          // If we've already tried TTS and that failed too, hide the toast
-          hideToast(currentToast);
-          currentToast = null;
+          } else { // If we've already tried TTS and that failed, hide the toast
+             console.log("Already fell back to TTS, hiding toast.");
+              if (currentToast) {
+                 hideToast(currentToast);
+                 currentToast = null;
+              }
+          }
         }
       };
-      
-      // For iOS, preload might help with subsequent plays
-      if (isIOS) {
-        globalAudio.preload = "auto";
-      }
-      
-      // Set the new source
-      globalAudio.src = audioPath;
-      
-      // Play with proper error handling
-      const playPromise = globalAudio.play();
-      
-      if (playPromise !== undefined) {
-        playPromise.catch(error => {
-          console.warn(`Play error: ${error.message}`);
-          
-          // On iOS, a user gesture might be required
-          if (isIOS) {
-            console.log("iOS playback failed, trying SpeechSynthesis");
-          }
-          
-          if (!fallenBackToTTS) {
-            fallenBackToTTS = true;
-            useBrowserTTS(text);
-          } else { // If we've already tried TTS and that failed, hide the toast
-             console.log("Already fell back to TTS, hiding toast.");
-              if (currentToast) {
-                 hideToast(currentToast);
-                 currentToast = null;
-              }
-          }
-        });
-      }
     } catch (e) {
       console.error(`Exception in audio playback: ${e.message}`);
       useBrowserTTS(text);
@@ -362,9 +446,8 @@
         const { index, time, label } = event;
         console.log(`marker! ${index} - ${time} - ${label}`);
         
-        // Speak the marker label and show toast
+        // Speak the marker label (toast is now shown within speakText)
         speakText(label, time);
-        showToast(label);
         
         // Highlight the corresponding timestamp in the transcript
         highlightTimestamp(time);