--- aider_aider_website__includes_recording.js_expectedoutput.txt (expected)+++ aider_aider_website__includes_recording.js_extracted.txt (actual)@@ -1,7 +1,7 @@ document.addEventListener('DOMContentLoaded', function() {
   let player; // Store player reference to make it accessible to click handlers
   let globalAudio; // Global audio element to be reused
-  
+
   // Detect if device likely has no physical keyboard
   function detectNoKeyboard() {
     // Check if it's a touch device (most mobile devices)
@@ -20,7 +20,7 @@   
   // Run detection
   detectNoKeyboard();
-  
+
   // Parse the transcript section to create markers and convert timestamps to links
   function parseTranscript() {
     const markers = [];
@@ -109,7 +109,6 @@     return markers;
   }
 
-  // Parse transcript and create markers
   const markers = parseTranscript();
   
   // Create player with a single call
@@ -216,7 +215,6 @@       if (toastInfo.container && toastInfo.container.contains(toastInfo.element)) {
         toastInfo.container.removeChild(toastInfo.element);
       }
-      
       // If this was the active toast, clear the reference
       if (activeToast === toastInfo) {
         activeToast = null;
@@ -238,10 +236,8 @@     
     if ('speechSynthesis' in window) {
       console.log('Using browser TTS fallback');
-      
       // Set flag to prevent duplicate speech
       ttsInProgress = true;
-      
       // Cancel any ongoing speech
       window.speechSynthesis.cancel();
       
@@ -258,8 +254,7 @@       utterance.onstart = () => console.log('Speech started');
       utterance.onend = () => {
         console.log('Speech ended');
-        ttsInProgress = false; // Reset flag when speech completes
-        
+        ttsInProgress = false;
         // Hide toast when speech ends
         if (currentToast) {
           hideToast(currentToast);
@@ -268,8 +263,7 @@       };
       utterance.onerror = (e) => {
         console.warn('Speech error:', e);
-        ttsInProgress = false; // Reset flag on error
-        
+        ttsInProgress = false;
         // Also hide toast on error
         if (currentToast) {
           hideToast(currentToast);
@@ -319,15 +313,6 @@       }
       
       // Set up event handlers
-      globalAudio.onended = () => {
-        console.log('Audio playback ended');
-        // Hide toast when audio ends
-        if (currentToast) {
-          hideToast(currentToast);
-          currentToast = null;
-        }
-      };
-      
       globalAudio.onerror = (e) => {
         console.warn(`Audio error: ${e.type}`, e);
         if (!fallenBackToTTS) {
@@ -354,12 +339,10 @@       if (playPromise !== undefined) {
         playPromise.catch(error => {
           console.warn(`Play error: ${error.message}`);
-          
           // On iOS, a user gesture might be required
           if (isIOS) {
             console.log("iOS playback failed, trying SpeechSynthesis");
           }
-          
           if (!fallenBackToTTS) {
             fallenBackToTTS = true;
             useBrowserTTS(text);
@@ -370,6 +353,15 @@       console.error(`Exception in audio playback: ${e.message}`);
       useBrowserTTS(text);
     }
+
+    // Hide toast when audio ends
+    globalAudio.onended = () => {
+      console.log('Audio playback ended');
+      if (currentToast) {
+        hideToast(currentToast);
+        currentToast = null;
+      }
+    };
   }
   
   // Function to highlight the active timestamp in the transcript
@@ -402,12 +394,11 @@       const listItem = activeLink.closest('li');
       if (listItem) {
         listItem.classList.add('active-marker');
-        
         // No longer scrolling into view to avoid shifting focus
       }
     }
   }
-
+  
   // Add event listener with safety checks
   if (player && typeof player.addEventListener === 'function') {
     player.addEventListener('marker', function(event) {
