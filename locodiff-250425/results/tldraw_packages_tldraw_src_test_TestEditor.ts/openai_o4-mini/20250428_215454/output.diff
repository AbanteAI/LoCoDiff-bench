
index c20a7cb5..efe3ee93 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmp17v3_k32_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmpizszot2s_actual.txt	
@@ -10,8 +10,6 @@ import {
 	RequiredKeys,
 	RotateCorner,
 	SelectionHandle,
-	TLArrowBinding,
-	TLArrowShape,
 	TLContent,
 	TLEditorOptions,
 	TLEventInfo,
@@ -46,7 +44,7 @@ jest.useFakeTimers()
 Object.assign(navigator, {
 	clipboard: {
 		write: () => {
-			//noop
+			// noop
 		},
 	},
 })
@@ -65,6 +63,19 @@ declare global {
 }
 
 export class TestEditor extends Editor {
+	elm: HTMLElement
+	readonly bounds: {
+		x: number
+		y: number
+		top: number
+		left: number
+		width: number
+		height: number
+		bottom: number
+		right: number
+	}
+	private _lastCreatedShapes: TLShape[] = []
+
 	constructor(
 		options: Partial<Omit<TLEditorOptions, 'store'>> = {},
 		storeOptions: Partial<TLStoreOptions> = {}
@@ -92,14 +103,14 @@ export class TestEditor extends Editor {
 
 		super({
 			...options,
-			shapeUtils: shapeUtilsWithDefaults,
-			bindingUtils: bindingUtilsWithDefaults,
-			tools: [...defaultTools, ...defaultShapeTools, ...(options.tools ?? [])],
 			store: createTLStore({
 				shapeUtils: shapeUtilsWithDefaults,
 				bindingUtils: bindingUtilsWithDefaults,
 				...storeOptions,
 			}),
+			shapeUtils: shapeUtilsWithDefaults,
+			bindingUtils: bindingUtilsWithDefaults,
+			tools: [...defaultTools, ...defaultShapeTools, ...(options.tools ?? [])],
 			getContainer: () => elm,
 			initialState: 'select',
 			textOptions: {
@@ -109,12 +120,12 @@ export class TestEditor extends Editor {
 				},
 			},
 		})
+
 		this.elm = elm
 		this.bounds = bounds
-
-		// Pretty hacky way to mock the screen bounds
 		document.body.appendChild(this.elm)
 
+		// Text measurement overrides
 		this.textMeasure.measureText = (
 			textToMeasure: string,
 			opts: {
@@ -128,19 +139,16 @@ export class TestEditor extends Editor {
 			}
 		): BoxModel & { scrollWidth: number } => {
 			const breaks = textToMeasure.split('\n')
-			const longest = breaks.reduce((acc, curr) => {
-				return curr.length > acc.length ? curr : acc
-			}, '')
-
+			const longest = breaks.reduce((acc, curr) => (curr.length > acc.length ? curr : acc), '')
 			const w = longest.length * (opts.fontSize / 2)
-
 			return {
 				x: 0,
 				y: 0,
 				w: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 				h:
-					(opts.maxWidth === null ? breaks.length : Math.ceil(w % opts.maxWidth) + breaks.length) *
-					opts.fontSize,
+					(opts.maxWidth === null
+						? breaks.length
+						: Math.ceil(w % opts.maxWidth) + breaks.length) * opts.fontSize,
 				scrollWidth: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 			}
 		}
@@ -167,8 +175,9 @@ export class TestEditor extends Editor {
 		this.textMeasure.measureTextSpans = (textToMeasure, opts) => {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
-				maxWidth: opts.width,
-				padding: `${opts.padding}px`,
+				lineHeight: opts.lineHeight,
+				maxWidth: opts.maxWidth,
+				padding: opts.padding,
 			})
 			return [{ box, text: textToMeasure }]
 		}
@@ -176,129 +185,67 @@ export class TestEditor extends Editor {
 		// Turn off edge scrolling for tests. Tests that require this can turn it back on.
 		this.user.updateUserPreferences({ edgeScrollSpeed: 0 })
 
+		// Side effects & shape tracking
+		registerDefaultSideEffects(this)
 		this.sideEffects.registerAfterCreateHandler('shape', (record) => {
 			this._lastCreatedShapes.push(record)
 		})
-
-		// Wow! we'd forgotten these for a long time
-		registerDefaultSideEffects(this)
 	}
 
-	getHistory() {
-		return this.history
+	static defaultShapesIds = {
+		box1: createShapeId('box1'),
+		box2: createShapeId('box2'),
+		ellipse1: createShapeId('ellipse1'),
 	}
 
-	private _lastCreatedShapes: TLShape[] = []
+	createShapesFromJsx(shapesJsx: React.JSX.Element | React.JSX.Element[]): Record<string, TLShapeId> {
+		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
+		this.createAssets(assets)
+		this.createShapes(shapes)
+		return ids
+	}
 
-	/**
-	 * Get the last created shapes.
-	 *
-	 * @param count - The number of shapes to get.
-	 */
 	getLastCreatedShapes(count = 1) {
 		return this._lastCreatedShapes.slice(-count).map((s) => this.getShape(s)!)
 	}
 
-	/**
-	 * Get the last created shape.
-	 */
 	getLastCreatedShape<T extends TLShape>() {
 		const lastShape = this._lastCreatedShapes[this._lastCreatedShapes.length - 1] as T
 		return this.getShape<T>(lastShape)!
 	}
 
-	elm: HTMLElement
-	readonly bounds: {
-		x: number
-		y: number
-		top: number
-		left: number
-		width: number
-		height: number
-		bottom: number
-		right: number
-	}
-
-	/**
-	 * The center of the viewport in the current page space.
-	 *
-	 * @public
-	 */
-	@computed getViewportPageCenter() {
-		return this.getViewportPageBounds().center
+	getHistory() {
+		return this.history
 	}
 
-	setScreenBounds(bounds: BoxModel, center = false) {
-		this.bounds.x = bounds.x
-		this.bounds.y = bounds.y
-		this.bounds.top = bounds.y
-		this.bounds.left = bounds.x
-		this.bounds.width = bounds.w
-		this.bounds.height = bounds.h
-		this.bounds.right = bounds.x + bounds.w
-		this.bounds.bottom = bounds.y + bounds.h
-
-		this.updateViewportScreenBounds(Box.From(bounds), center)
-		return this
+	getPageCenter(shape: TLShape) {
+		const pageTransform = this.getShapePageTransform(shape.id)
+		if (!pageTransform) return null
+		const center = this.getShapeGeometry(shape).bounds.center
+		return Mat.applyToPoint(pageTransform, center)
 	}
 
-	clipboard = null as TLContent | null
-
-	copy(ids = this.getSelectedShapeIds()) {
-		if (ids.length > 0) {
-			const content = this.getContentFromCurrentPage(ids)
-			if (content) {
-				this.clipboard = content
-			}
+	getPageRotationById(id: TLShapeId): number {
+		const pageTransform = this.getShapePageTransform(id)
+		if (pageTransform) {
+			return Mat.Decompose(pageTransform).rotation
 		}
-		return this
+		return 0
 	}
 
-	cut(ids = this.getSelectedShapeIds()) {
-		if (ids.length > 0) {
-			const content = this.getContentFromCurrentPage(ids)
-			if (content) {
-				this.clipboard = content
-			}
-			this.deleteShapes(ids)
-		}
-		return this
+	getPageRotation(shape: TLShape) {
+		return this.getPageRotationById(shape.id)
 	}
 
-	paste(point?: VecLike) {
-		if (this.clipboard !== null) {
-			const p = this.inputs.shiftKey ? this.inputs.currentPagePoint : point
-
-			this.markHistoryStoppingPoint('pasting')
-			this.putContentOntoCurrentPage(this.clipboard, {
-				point: p,
-				select: true,
-			})
-		}
-		return this
+	getArrowsBoundTo(shapeId: TLShapeId) {
+		const ids = new Set(
+			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
+		)
+		return compact(Array.from(ids, (id) => this.getShape<TLArrowShape>(id)))
 	}
 
-	/**
-	 * If you need to trigger a double click, you can either mock the implementation of one of these
-	 * methods, or call mockRestore() to restore the actual implementation (e.g.
-	 * _transformPointerDownSpy.mockRestore())
-	 */
-	_transformPointerDownSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
-	_transformPointerUpSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
-
-	testShapeID(id: string) {
-		return createShapeId(id)
-	}
-	testPageID(id: string) {
-		return PageRecordType.createId(id)
+	getPath() {
+		return this.root.current.get()!.path.get()
 	}
 
 	expectToBeIn(path: string) {
@@ -308,13 +255,11 @@ export class TestEditor extends Editor {
 
 	expectCameraToBe(x: number, y: number, z: number) {
 		const camera = this.getCamera()
-
 		expect({
 			x: +camera.x.toFixed(2),
 			y: +camera.y.toFixed(2),
 			z: +camera.z.toFixed(2),
 		}).toCloselyMatchObject({ x, y, z })
-
 		return this
 	}
 
@@ -345,129 +290,82 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	/* --------------------- Inputs --------------------- */
+	@computed getViewportPageCenter() {
+		return this.getViewportPageBounds().center
+	}
+
+	setScreenBounds(bounds: BoxModel, center = false) {
+		this.bounds.x = bounds.x
+		this.bounds.y = bounds.y
+		this.bounds.top = bounds.y
+		this.bounds.left = bounds.x
+		this.bounds.width = bounds.w
+		this.bounds.height = bounds.h
+		this.bounds.right = bounds.x + bounds.w
+		this.bounds.bottom = bounds.y + bounds.h
 
-	protected getInfo<T extends TLEventInfo>(info: string | T): T {
-		return typeof info === 'string'
-			? ({
-					target: 'shape',
-					shape: this.getShape(info as any),
-				} as T)
-			: info
+		this.updateViewportScreenBounds(Box.From(bounds), center)
+		return this
 	}
 
-	protected getPointerEventInfo(
-		x = this.inputs.currentScreenPoint.x,
-		y = this.inputs.currentScreenPoint.y,
-		options?: Partial<TLPointerEventInfo> | TLShapeId,
-		modifiers?: EventModifiers
-	) {
-		if (typeof options === 'string') {
-			options = { target: 'shape', shape: this.getShape(options) }
-		} else if (options === undefined) {
-			options = { target: 'canvas' }
-		}
-		return {
-			name: 'pointer_down',
-			type: 'pointer',
-			pointerId: 1,
-			shiftKey: this.inputs.shiftKey,
-			ctrlKey: this.inputs.ctrlKey,
-			altKey: this.inputs.altKey,
-			metaKey: this.inputs.metaKey,
-			accelKey: isAccelKey({ ...this.inputs, ...modifiers }),
-			point: { x, y, z: null },
-			button: 0,
-			isPen: false,
-			...options,
-			...modifiers,
-		} as TLPointerEventInfo
+	pan(offset: VecLike): this {
+		const { isLocked, panSpeed } = this.getCameraOptions()
+		if (isLocked) return this
+		const { x: cx, y: cy, z: cz } = this.getCamera()
+		this.setCamera(new Vec((cx + offset.x * panSpeed) / cz, (cy + offset.y * panSpeed) / cz, cz), {
+			immediate: true,
+		})
+		return this
 	}
 
-	protected getKeyboardEventInfo(
-		key: string,
-		name: TLKeyboardEventInfo['name'],
-		options = {} as Partial<Exclude<TLKeyboardEventInfo, 'point'>>
-	): TLKeyboardEventInfo {
-		return {
-			shiftKey: key === 'Shift',
-			ctrlKey: key === 'Control' || key === 'Meta',
-			altKey: key === 'Alt',
-			metaKey: key === 'Meta',
-			accelKey: tlenv.isDarwin ? key === 'Meta' : key === 'Control' || key === 'Meta',
-			...options,
-			name,
-			code:
-				key === 'Shift'
-					? 'ShiftLeft'
-					: key === 'Alt'
-						? 'AltLeft'
-						: key === 'Control'
-							? 'CtrlLeft'
-							: key === 'Meta'
-								? 'MetaLeft'
-								: key === ' '
-									? 'Space'
-									: key === 'Enter' ||
-										  key === 'ArrowRight' ||
-										  key === 'ArrowLeft' ||
-										  key === 'ArrowUp' ||
-										  key === 'ArrowDown'
-										? key
-										: 'Key' + key[0].toUpperCase() + key.slice(1),
-			type: 'keyboard',
-			key,
+	copy(ids = this.getSelectedShapeIds()) {
+		if (ids.length > 0) {
+			const content = this.getContentFromCurrentPage(ids)
+			if (content) {
+				this.clipboard = content
+			}
 		}
+		return this
 	}
 
-	/* ------------------ Input Events ------------------ */
-
-	/**
-	Some of our updates are not synchronous any longer. For example, drawing happens on tick instead of on pointer move.
-	You can use this helper to force the tick, which will then process all the updates.
-	*/
-	forceTick(count = 1) {
-		for (let i = 0; i < count; i++) {
-			this.emit('tick', 16)
+	cut(ids = this.getSelectedShapeIds()) {
+		if (ids.length > 0) {
+			const content = this.getContentFromCurrentPage(ids)
+			if (content) {
+				this.clipboard = content
+			}
+			this.deleteShapes(ids)
 		}
 		return this
 	}
 
-	pointerMove(
-		x = this.inputs.currentScreenPoint.x,
-		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
-	) {
-		this.dispatch({
-			...this.getPointerEventInfo(x, y, options, modifiers),
-			name: 'pointer_move',
-		}).forceTick()
+	paste(point?: VecLike) {
+		if (this.clipboard !== null) {
+			const p = this.inputs.shiftKey ? this.inputs.currentPagePoint : point
+			this.markHistoryStoppingPoint('pasting')
+			this.putContentOntoCurrentPage(this.clipboard, {
+				point: p,
+				select: true,
+			})
+		}
 		return this
 	}
 
-	pointerDown(
+	rightClick(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo> | TLShapeId,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_down',
+			button: 2,
 		}).forceTick()
-		return this
-	}
-
-	pointerUp(
-		x = this.inputs.currentScreenPoint.x,
-		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
-	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_up',
+			button: 2,
 		}).forceTick()
 		return this
 	}
@@ -475,38 +373,19 @@ export class TestEditor extends Editor {
 	click(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo> | TLShapeId,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.pointerDown(x, y, options, modifiers)
 		this.pointerUp(x, y, options, modifiers)
 		return this
 	}
 
-	rightClick(
-		x = this.inputs.currentScreenPoint.x,
-		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
-	) {
-		this.dispatch({
-			...this.getPointerEventInfo(x, y, options, modifiers),
-			name: 'pointer_down',
-			button: 2,
-		}).forceTick()
-		this.dispatch({
-			...this.getPointerEventInfo(x, y, options, modifiers),
-			name: 'pointer_up',
-			button: 2,
-		}).forceTick()
-		return this
-	}
-
 	doubleClick(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo> | TLShapeId,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.pointerDown(x, y, options, modifiers)
 		this.pointerUp(x, y, options, modifiers)
@@ -515,7 +394,7 @@ export class TestEditor extends Editor {
 			type: 'click',
 			name: 'double_click',
 			phase: 'down',
-		})
+		}).forceTick()
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			type: 'click',
@@ -525,12 +404,12 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	keyDown(key: string, options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>) {
+	keyDown(key: string, options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>) {
 		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_down', options) }).forceTick()
 		return this
 	}
 
-	keyRepeat(key: string, options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>) {
+	keyRepeat(key: string, options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>) {
 		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_repeat', options) }).forceTick()
 		return this
 	}
@@ -539,7 +418,7 @@ export class TestEditor extends Editor {
 		this.dispatch({
 			...this.getKeyboardEventInfo(key, 'key_up', {
 				shiftKey: this.inputs.shiftKey && key !== 'Shift',
-				ctrlKey: this.inputs.ctrlKey && !(key === 'Control' || key === 'Meta'),
+				ctrlKey: this.inputs.ctrlKey && key !== 'Control',
 				altKey: this.inputs.altKey && key !== 'Alt',
 				metaKey: this.inputs.metaKey && key !== 'Meta',
 				...options,
@@ -564,16 +443,6 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	pan(offset: VecLike): this {
-		const { isLocked, panSpeed } = this.getCameraOptions()
-		if (isLocked) return this
-		const { x: cx, y: cy, z: cz } = this.getCamera()
-		this.setCamera(new Vec(cx + (offset.x * panSpeed) / cz, cy + (offset.y * panSpeed) / cz, cz), {
-			immediate: true,
-		})
-		return this
-	}
-
 	pinchStart(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
@@ -591,9 +460,9 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
+			...options,
 		}).forceTick()
 		return this
 	}
@@ -615,10 +484,10 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+			...options,
+		}).forceTick()
 		return this
 	}
 
@@ -639,217 +508,83 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
+			...options,
 		}).forceTick()
 		return this
 	}
-	/* ------ Interaction Helpers ------ */
-
-	rotateSelection(
-		angleRadians: number,
-		{
-			handle = 'top_left_rotate',
-			shiftKey = false,
-		}: { handle?: RotateCorner; shiftKey?: boolean } = {}
-	) {
-		if (this.getSelectedShapeIds().length === 0) {
-			throw new Error('No selection')
-		}
-
-		this.setCurrentTool('select')
 
-		const handlePoint = this.getSelectionRotatedPageBounds()!
-			.getHandlePoint(ROTATE_CORNER_TO_SELECTION_CORNER[handle])
-			.clone()
-			.rotWith(this.getSelectionRotatedPageBounds()!.point, this.getSelectionRotation())
-
-		const targetHandlePoint = Vec.RotWith(handlePoint, this.getSelectionPageCenter()!, angleRadians)
-
-		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle })
-		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey })
-		this.pointerUp()
-		return this
-	}
-
-	/**
-	 * The center of the selection bounding box.
-	 *
-	 * @readonly
-	 * @public
-	 */
-	getSelectionPageCenter() {
-		const selectionRotation = this.getSelectionRotation()
-		const selectionBounds = this.getSelectionRotatedPageBounds()
-		if (!selectionBounds) return null
-		return Vec.RotWith(selectionBounds.center, selectionBounds.point, selectionRotation)
-	}
-
-	translateSelection(dx: number, dy: number, options?: Partial<TLPointerEventInfo>) {
-		if (this.getSelectedShapeIds().length === 0) {
-			throw new Error('No selection')
-		}
-		this.setCurrentTool('select')
-
-		const center = this.getSelectionPageCenter()!
-
-		this.pointerDown(center.x, center.y, this.getSelectedShapeIds()[0])
-		const numSteps = 10
-		for (let i = 1; i < numSteps; i++) {
-			this.pointerMove(center.x + (i * dx) / numSteps, center.y + (i * dy) / numSteps, options)
-		}
-		this.pointerUp(center.x + dx, center.y + dy, options)
-		return this
+	protected getInfo<T extends TLEventInfo>(info: string | T): T {
+		return typeof info === 'string'
+			? ({
+					target: 'shape',
+					shape: this.getShape(info as any),
+			  } as T)
+			: info
 	}
 
-	resizeSelection(
-		{ scaleX = 1, scaleY = 1 },
-		handle: SelectionHandle,
-		options?: Partial<TLPointerEventInfo>
+	protected getPointerEventInfo(
+		x = this.inputs.currentScreenPoint.x,
+		y = this.inputs.currentScreenPoint.y,
+		options?: Partial<TLPointerEventInfo> | TLShapeId,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
-		if (this.getSelectedShapeIds().length === 0) {
-			throw new Error('No selection')
+		if (typeof options === 'string') {
+			options = { target: 'shape', shape: this.getShape(options) }
+		} else if (options === undefined) {
+			options = { target: 'canvas' }
 		}
-		this.setCurrentTool('select')
-		const bounds = this.getSelectionRotatedPageBounds()!
-		const preRotationHandlePoint = bounds.getHandlePoint(handle)
-
-		const preRotationScaleOriginPoint = options?.altKey
-			? bounds.center
-			: bounds.getHandlePoint(rotateSelectionHandle(handle, Math.PI))
-
-		const preRotationTargetHandlePoint = Vec.Add(
-			Vec.Sub(preRotationHandlePoint, preRotationScaleOriginPoint).mulV({ x: scaleX, y: scaleY }),
-			preRotationScaleOriginPoint
-		)
-
-		const handlePoint = Vec.RotWith(
-			preRotationHandlePoint,
-			bounds.point,
-			this.getSelectionRotation()
-		)
-		const targetHandlePoint = Vec.RotWith(
-			preRotationTargetHandlePoint,
-			bounds.point,
-			this.getSelectionRotation()
-		)
-
-		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle }, options)
-		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, options)
-		this.pointerUp(targetHandlePoint.x, targetHandlePoint.y, options)
-		return this
-	}
-
-	createShapesFromJsx(
-		shapesJsx: React.JSX.Element | React.JSX.Element[]
-	): Record<string, TLShapeId> {
-		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
-		this.createAssets(assets)
-		this.createShapes(shapes)
-		return ids
-	}
-
-	/**
-	 * Get the page point (or absolute point) of a shape.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPagePoint(myShape)
-	 * ```
-	 *
-	 * @param shape - The shape to get the page point for.
-	 *
-	 * @public
-	 */
-	getPageCenter(shape: TLShape) {
-		const pageTransform = this.getShapePageTransform(shape.id)
-		if (!pageTransform) return null
-		const center = this.getShapeGeometry(shape).bounds.center
-		return Mat.applyToPoint(pageTransform, center)
+		return {
+			name: 'pointer_down',
+			type: 'pointer',
+			pointerId: 1,
+			shiftKey: this.inputs.shiftKey,
+			ctrlKey: this.inputs.ctrlKey,
+			altKey: this.inputs.altKey,
+			metaKey: this.inputs.metaKey,
+			accelKey: isAccelKey(this.inputs),
+			point: { x, y, z: null },
+			button: 0,
+			isPen: false,
+			...options,
+			...modifiers,
+		} as TLPointerEventInfo
 	}
 
-	/**
-	 * Get the page rotation (or absolute rotation) of a shape by its id.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPageRotationById(myShapeId)
-	 * ```
-	 *
-	 * @param id - The id of the shape to get the page rotation for.
-	 */
-	getPageRotationById(id: TLShapeId): number {
-		const pageTransform = this.getShapePageTransform(id)
-		if (pageTransform) {
-			return Mat.Decompose(pageTransform).rotation
+	protected getKeyboardEventInfo(
+		key: string,
+		name: TLKeyboardEventInfo['name'],
+		options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>
+	): TLKeyboardEventInfo {
+		return {
+			shiftKey: key === 'Shift',
+			ctrlKey: key === 'Control',
+			altKey: key === 'Alt',
+			metaKey: key === 'Meta',
+			accelKey: tlenv.isDarwin ? key === 'Meta' : key === 'Control' || key === 'Meta',
+			...options,
+			name,
+			code:
+				key === 'Shift'
+					? 'ShiftLeft'
+					: key === 'Alt'
+					? 'AltLeft'
+					: key === 'Control'
+					? 'CtrlLeft'
+					: key === 'Meta'
+					? 'MetaLeft'
+					: key === ' '
+					? 'Space'
+					: key === 'Enter' ||
+					  key === 'ArrowRight' ||
+					  key === 'ArrowLeft' ||
+					  key === 'ArrowUp' ||
+					  key === 'ArrowDown'
+					? key
+					: 'Key' + key[0].toUpperCase() + key.slice(1),
+			type: 'keyboard',
+			key,
 		}
-		return 0
-	}
-
-	getPageRotation(shape: TLShape) {
-		return this.getPageRotationById(shape.id)
-	}
-
-	getArrowsBoundTo(shapeId: TLShapeId) {
-		const ids = new Set(
-			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
-		)
-		return compact(Array.from(ids, (id) => this.getShape<TLArrowShape>(id)))
 	}
-}
-
-export const defaultShapesIds = {
-	box1: createShapeId('box1'),
-	box2: createShapeId('box2'),
-	ellipse1: createShapeId('ellipse1'),
-}
-
-export const createDefaultShapes = (): TLShapePartial[] => [
-	{
-		id: defaultShapesIds.box1,
-		type: 'geo',
-		x: 100,
-		y: 100,
-		props: {
-			w: 100,
-			h: 100,
-			geo: 'rectangle',
-		},
-	},
-	{
-		id: defaultShapesIds.box2,
-		type: 'geo',
-		x: 200,
-		y: 200,
-		rotation: HALF_PI / 2,
-		props: {
-			w: 100,
-			h: 100,
-			color: 'black',
-			fill: 'none',
-			dash: 'draw',
-			size: 'm',
-			geo: 'rectangle',
-		},
-	},
-	{
-		id: defaultShapesIds.ellipse1,
-		type: 'geo',
-		parentId: defaultShapesIds.box2,
-		x: 200,
-		y: 200,
-		props: {
-			w: 50,
-			h: 50,
-			color: 'black',
-			fill: 'none',
-			dash: 'draw',
-			size: 'm',
-			geo: 'ellipse',
-		},
-	},
-]
-
-type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+}
\ No newline at end of file
