--- tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual)@@ -1,5 +1,4 @@ import {
-	Box,
 	BoxModel,
 	Editor,
 	HALF_PI,
@@ -30,7 +29,6 @@ 	createShapeId,
 	createTLStore,
 	isAccelKey,
-	rotateSelectionHandle,
 	tlenv,
 } from '@tldraw/editor'
 import { defaultBindingUtils } from '../lib/defaultBindingUtils'
@@ -51,13 +49,10 @@ 	},
 })
 
-// @ts-expect-error
-window.ClipboardItem = class {}
+window.ClipboardItem = class ClipboardItem {}
 
 declare global {
-	// eslint-disable-next-line @typescript-eslint/no-namespace
 	namespace jest {
-		// eslint-disable-next-line @typescript-eslint/no-unused-vars
 		interface Matchers<R> {
 			toCloselyMatchObject(value: any, precision?: number): void
 		}
@@ -66,8 +61,10 @@ 
 export class TestEditor extends Editor {
 	constructor(
-		options: Partial<Omit<TLEditorOptions, 'store'>> = {},
-		storeOptions: Partial<TLStoreOptions> = {}
+		options: Partial<
+			Omit<TLEditorOptions, 'store'>
+		> = {},
+		storeOptions: Partial<TLStoreOptions> = {},
 	) {
 		const elm = document.createElement('div')
 		const bounds = {
@@ -80,7 +77,6 @@ 			bottom: 720,
 			right: 1080,
 		}
-		// make the app full screen for the sake of the insets property
 		jest.spyOn(document.body, 'scrollWidth', 'get').mockImplementation(() => bounds.width)
 		jest.spyOn(document.body, 'scrollHeight', 'get').mockImplementation(() => bounds.height)
 
@@ -112,9 +108,6 @@ 		this.elm = elm
 		this.bounds = bounds
 
-		// Pretty hacky way to mock the screen bounds
-		document.body.appendChild(this.elm)
-
 		this.textMeasure.measureText = (
 			textToMeasure: string,
 			opts: {
@@ -133,7 +126,6 @@ 			}, '')
 
 			const w = longest.length * (opts.fontSize / 2)
-
 			return {
 				x: 0,
 				y: 0,
@@ -167,8 +159,7 @@ 		this.textMeasure.measureTextSpans = (textToMeasure, opts) => {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
-				maxWidth: opts.width,
-				padding: `${opts.padding}px`,
+				padding: `${opts.padding}px`, // this will be removed soon
 			})
 			return [{ box, text: textToMeasure }]
 		}
@@ -179,9 +170,6 @@ 		this.sideEffects.registerAfterCreateHandler('shape', (record) => {
 			this._lastCreatedShapes.push(record)
 		})
-
-		// Wow! we'd forgotten these for a long time
-		registerDefaultSideEffects(this)
 	}
 
 	getHistory() {
@@ -239,42 +227,6 @@ 		this.bounds.bottom = bounds.y + bounds.h
 
 		this.updateViewportScreenBounds(Box.From(bounds), center)
-		return this
-	}
-
-	clipboard = null as TLContent | null
-
-	copy(ids = this.getSelectedShapeIds()) {
-		if (ids.length > 0) {
-			const content = this.getContentFromCurrentPage(ids)
-			if (content) {
-				this.clipboard = content
-			}
-		}
-		return this
-	}
-
-	cut(ids = this.getSelectedShapeIds()) {
-		if (ids.length > 0) {
-			const content = this.getContentFromCurrentPage(ids)
-			if (content) {
-				this.clipboard = content
-			}
-			this.deleteShapes(ids)
-		}
-		return this
-	}
-
-	paste(point?: VecLike) {
-		if (this.clipboard !== null) {
-			const p = this.inputs.shiftKey ? this.inputs.currentPagePoint : point
-
-			this.markHistoryStoppingPoint('pasting')
-			this.putContentOntoCurrentPage(this.clipboard, {
-				point: p,
-				select: true,
-			})
-		}
 		return this
 	}
 
@@ -297,11 +249,17 @@ 	testShapeID(id: string) {
 		return createShapeId(id)
 	}
+
 	testPageID(id: string) {
 		return PageRecordType.createId(id)
 	}
 
 	expectToBeIn(path: string) {
+		expect(this.getPath()).toBe(path)
+		return this
+	}
+
+	expectPathToBe(path: string) {
 		expect(this.getPath()).toBe(path)
 		return this
 	}
@@ -352,7 +310,7 @@ 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -515,7 +473,7 @@ 			type: 'click',
 			name: 'double_click',
 			phase: 'down',
-		})
+		}).forceTick()
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			type: 'click',
@@ -552,7 +510,6 @@ 		this.dispatch({
 			type: 'wheel',
 			name: 'wheel',
-			point: new Vec(this.inputs.currentScreenPoint.x, this.inputs.currentScreenPoint.y),
 			shiftKey: this.inputs.shiftKey,
 			ctrlKey: this.inputs.ctrlKey,
 			altKey: this.inputs.altKey,
@@ -561,16 +518,6 @@ 			...options,
 			delta: { x: dx, y: dy },
 		}).forceTick(2)
-		return this
-	}
-
-	pan(offset: VecLike): this {
-		const { isLocked, panSpeed } = this.getCameraOptions()
-		if (isLocked) return this
-		const { x: cx, y: cy, z: cz } = this.getCamera()
-		this.setCamera(new Vec(cx + (offset.x * panSpeed) / cz, cy + (offset.y * panSpeed) / cz, cz), {
-			immediate: true,
-		})
 		return this
 	}
 
@@ -618,7 +565,7 @@ 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -665,7 +612,11 @@ 			.clone()
 			.rotWith(this.getSelectionRotatedPageBounds()!.point, this.getSelectionRotation())
 
-		const targetHandlePoint = Vec.RotWith(handlePoint, this.getSelectionPageCenter()!, angleRadians)
+		const targetHandlePoint = Vec.RotWith(
+			handlePoint,
+			this.getSelectionPageCenter()!,
+			angleRadians
+		)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle })
 		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey })
@@ -741,6 +692,16 @@ 		return this
 	}
 
+	pan(offset: VecLike): this {
+		const { isLocked, panSpeed } = this.getCameraOptions()
+		if (isLocked) return this
+		const { x: cx, y: cy, z: cz } = this.getCamera()
+		this.setCamera(new Vec(cx + (offset.x * panSpeed) / cz, cy + (offset.y * panSpeed) / cz, cz), {
+			immediate: true,
+		})
+		return this
+	}
+
 	createShapesFromJsx(
 		shapesJsx: React.JSX.Element | React.JSX.Element[]
 	): Record<string, TLShapeId> {
@@ -748,47 +709,6 @@ 		this.createAssets(assets)
 		this.createShapes(shapes)
 		return ids
-	}
-
-	/**
-	 * Get the page point (or absolute point) of a shape.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPagePoint(myShape)
-	 * ```
-	 *
-	 * @param shape - The shape to get the page point for.
-	 *
-	 * @public
-	 */
-	getPageCenter(shape: TLShape) {
-		const pageTransform = this.getShapePageTransform(shape.id)
-		if (!pageTransform) return null
-		const center = this.getShapeGeometry(shape).bounds.center
-		return Mat.applyToPoint(pageTransform, center)
-	}
-
-	/**
-	 * Get the page rotation (or absolute rotation) of a shape by its id.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPageRotationById(myShapeId)
-	 * ```
-	 *
-	 * @param id - The id of the shape to get the page rotation for.
-	 */
-	getPageRotationById(id: TLShapeId): number {
-		const pageTransform = this.getShapePageTransform(id)
-		if (pageTransform) {
-			return Mat.Decompose(pageTransform).rotation
-		}
-		return 0
-	}
-
-	getPageRotation(shape: TLShape) {
-		return this.getPageRotationById(shape.id)
 	}
 
 	getArrowsBoundTo(shapeId: TLShapeId) {
