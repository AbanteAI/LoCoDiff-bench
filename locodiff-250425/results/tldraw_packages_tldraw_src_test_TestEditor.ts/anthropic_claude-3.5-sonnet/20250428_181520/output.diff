--- tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual)@@ -13,7 +13,7 @@ 	TLArrowBinding,
 	TLArrowShape,
 	TLContent,
-	TLEditorOptions,
+	TLEditorOptions, 
 	TLEventInfo,
 	TLKeyboardEventInfo,
 	TLPinchEventInfo,
@@ -34,7 +34,7 @@ 	tlenv,
 } from '@tldraw/editor'
 import { defaultBindingUtils } from '../lib/defaultBindingUtils'
-import { defaultShapeTools } from '../lib/defaultShapeTools'
+import { defaultShapeTools } from '../lib/defaultShapeTools' 
 import { defaultShapeUtils } from '../lib/defaultShapeUtils'
 import { registerDefaultSideEffects } from '../lib/defaultSideEffects'
 import { defaultTools } from '../lib/defaultTools'
@@ -103,7 +103,7 @@ 			getContainer: () => elm,
 			initialState: 'select',
 			textOptions: {
-				addFontsFromNode: defaultAddFontsFromNode,
+				addFontsFromNode: defaultAddFontsFromNode, 
 				tipTapConfig: {
 					extensions: tipTapDefaultExtensions,
 				},
@@ -387,7 +387,7 @@ 	protected getKeyboardEventInfo(
 		key: string,
 		name: TLKeyboardEventInfo['name'],
-		options = {} as Partial<Exclude<TLKeyboardEventInfo, 'point'>>
+		options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>
 	): TLKeyboardEventInfo {
 		return {
 			shiftKey: key === 'Shift',
@@ -448,36 +448,36 @@ 
 	pointerDown(
 		x = this.inputs.currentScreenPoint.x,
+		y = this.inputs.currentScreenPoint.y, 
+		options?: PointerEventInit,
+		modifiers?: EventModifiers
+	) {
+		this.dispatch({
+			...this.getPointerEventInfo(x, y, options, modifiers),
+			name: 'pointer_down',
+		}).forceTick()
+		return this
+	}
+
+	pointerUp(
+		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
 		options?: PointerEventInit,
 		modifiers?: EventModifiers
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
-			name: 'pointer_down',
-		}).forceTick()
-		return this
-	}
-
-	pointerUp(
+			name: 'pointer_up',
+		}).forceTick()
+		return this
+	}
+
+	click(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
 		options?: PointerEventInit,
 		modifiers?: EventModifiers
 	) {
-		this.dispatch({
-			...this.getPointerEventInfo(x, y, options, modifiers),
-			name: 'pointer_up',
-		}).forceTick()
-		return this
-	}
-
-	click(
-		x = this.inputs.currentScreenPoint.x,
-		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
-	) {
 		this.pointerDown(x, y, options, modifiers)
 		this.pointerUp(x, y, options, modifiers)
 		return this
@@ -486,7 +486,7 @@ 	rightClick(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
+		options?: PointerEventInit, 
 		modifiers?: EventModifiers
 	) {
 		this.dispatch({
@@ -515,11 +515,11 @@ 			type: 'click',
 			name: 'double_click',
 			phase: 'down',
-		})
+		}).forceTick()
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			type: 'click',
-			name: 'double_click',
+			name: 'double_click', 
 			phase: 'up',
 		}).forceTick()
 		return this
@@ -532,7 +532,7 @@ 
 	keyRepeat(key: string, options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>) {
 		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_repeat', options) }).forceTick()
-		return this
+		return this  
 	}
 
 	keyUp(key: string, options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>) {
@@ -618,7 +618,7 @@ 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -645,6 +645,7 @@ 		}).forceTick()
 		return this
 	}
+
 	/* ------ Interaction Helpers ------ */
 
 	rotateSelection(
