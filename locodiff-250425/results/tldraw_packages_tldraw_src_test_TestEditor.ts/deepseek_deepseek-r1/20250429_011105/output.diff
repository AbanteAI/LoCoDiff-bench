
index c20a7cb5..e6286ec2 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmpgn0_c1gp_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmp8_ndxh9k_actual.txt	
@@ -618,7 +618,7 @@ export class TestEditor extends Editor {
 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -645,6 +645,7 @@ export class TestEditor extends Editor {
 		}).forceTick()
 		return this
 	}
+
 	/* ------ Interaction Helpers ------ */
 
 	rotateSelection(
@@ -668,8 +669,8 @@ export class TestEditor extends Editor {
 		const targetHandlePoint = Vec.RotWith(handlePoint, this.getSelectionPageCenter()!, angleRadians)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle })
-		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey })
-		this.pointerUp()
+		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey }).forceTick()
+		this.pointerUp().forceTick()
 		return this
 	}
 
@@ -697,9 +698,13 @@ export class TestEditor extends Editor {
 		this.pointerDown(center.x, center.y, this.getSelectedShapeIds()[0])
 		const numSteps = 10
 		for (let i = 1; i < numSteps; i++) {
-			this.pointerMove(center.x + (i * dx) / numSteps, center.y + (i * dy) / numSteps, options)
+			this.pointerMove(
+				center.x + (i * dx) / numSteps,
+				center.y + (i * dy) / numSteps,
+				options
+			).forceTick()
 		}
-		this.pointerUp(center.x + dx, center.y + dy, options)
+		this.pointerUp(center.x + dx, center.y + dy, options).forceTick()
 		return this
 	}
 
@@ -736,8 +741,8 @@ export class TestEditor extends Editor {
 		)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle }, options)
-		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, options)
-		this.pointerUp(targetHandlePoint.x, targetHandlePoint.y, options)
+		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, options).forceTick()
+		this.pointerUp(targetHandlePoint.x, targetHandlePoint.y, options).forceTick()
 		return this
 	}
 
@@ -852,4 +857,4 @@ export const createDefaultShapes = (): TLShapePartial[] => [
 ]
 
 type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey'>>
\ No newline at end of file
