
index c20a7cb5..2c82c7be 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmp5izap_22_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmpg_irtdsa_actual.txt	
@@ -1,5 +1,4 @@
 import {
-	Box,
 	BoxModel,
 	Editor,
 	HALF_PI,
@@ -21,22 +20,20 @@ import {
 	TLShape,
 	TLShapeId,
 	TLShapePartial,
-	TLStoreOptions,
 	TLWheelEventInfo,
 	Vec,
 	VecLike,
-	compact,
 	computed,
 	createShapeId,
 	createTLStore,
 	isAccelKey,
+	registerDefaultSideEffects,
 	rotateSelectionHandle,
 	tlenv,
 } from '@tldraw/editor'
 import { defaultBindingUtils } from '../lib/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual): {
 		write: () => {
-			//noop
+			// noop
 		},
 	},
 })
@@ -67,7 +64,7 @@ declare global {
 export class TestEditor extends Editor {
 	constructor(
 		options: Partial<Omit<TLEditorOptions, 'store'>> = {},
-		storeOptions: Partial<TLStoreOptions> = {}
+		storeOptions: Partial<import('@tldraw/editor').TLStoreOptions> = {}
 	) {
 		const elm = document.createElement('div')
 		const bounds = {
@@ -109,12 +106,18 @@ export class TestEditor extends Editor {
 				},
 			},
 		})
-		this.elm = elm
-		this.bounds = bounds
 
 		// Pretty hacky way to mock the screen bounds
+		this.elm = elm
+		this.bounds = bounds
 		document.body.appendChild(this.elm)
 
+		// Turn off edge scrolling for tests. Tests that require this can turn it back on.
+		this.user.updateUserPreferences({ edgeScrollSpeed: 0 })
+
+		// Register default side effects for things like after-create handlers
+		registerDefaultSideEffects(this)
+
 		this.textMeasure.measureText = (
 			textToMeasure: string,
 			opts: {
@@ -139,8 +142,9 @@ export class TestEditor extends Editor {
 				y: 0,
 				w: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 				h:
-					(opts.maxWidth === null ? breaks.length : Math.ceil(w % opts.maxWidth) + breaks.length) *
-					opts.fontSize,
+					(opts.maxWidth === null
+						? breaks.length
+						: Math.ceil(w % opts.maxWidth) + breaks.length) * opts.fontSize,
 				scrollWidth: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 			}
 		}
@@ -167,44 +171,9 @@ export class TestEditor extends Editor {
 		this.textMeasure.measureTextSpans = (textToMeasure, opts) => {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
-				maxWidth: opts.width,
-				padding: `${opts.padding}px`,
 			})
 			return [{ box, text: textToMeasure }]
 		}
-
-		// Turn off edge scrolling for tests. Tests that require this can turn it back on.
-		this.user.updateUserPreferences({ edgeScrollSpeed: 0 })
-
-		this.sideEffects.registerAfterCreateHandler('shape', (record) => {
-			this._lastCreatedShapes.push(record)
-		})
-
-		// Wow! we'd forgotten these for a long time
-		registerDefaultSideEffects(this)
-	}
-
-	getHistory() {
-		return this.history
-	}
-
-	private _lastCreatedShapes: TLShape[] = []
-
-	/**
-	 * Get the last created shapes.
-	 *
-	 * @param count - The number of shapes to get.
-	 */
-	getLastCreatedShapes(count = 1) {
-		return this._lastCreatedShapes.slice(-count).map((s) => this.getShape(s)!)
-	}
-
-	/**
-	 * Get the last created shape.
-	 */
-	getLastCreatedShape<T extends TLShape>() {
-		const lastShape = this._lastCreatedShapes[this._lastCreatedShapes.length - 1] as T
-		return this.getShape<T>(lastShape)!
 	}
 
 	elm: HTMLElement
@@ -238,11 +207,32 @@ export class TestEditor extends Editor {
 		this.bounds.right = bounds.x + bounds.w
 		this.bounds.bottom = bounds.y + bounds.h
 
-		this.updateViewportScreenBounds(Box.From(bounds), center)
+		this.updateViewportScreenBounds(BoxModel.From(bounds), center)
 		return this
 	}
 
-	clipboard = null as TLContent | null
+	getHistory() {
+		return this.history
+	}
+
+	private _lastCreatedShapes: TLShape[] = []
+
+	/**
+	 * Get the last created shapes.
+	 *
+	 * @param count - The number of shapes to get.
+	 */
+	getLastCreatedShapes(count = 1) {
+		return this._lastCreatedShapes.slice(-count).map((s) => this.getShape(s)!)
+	}
+
+	/**
+	 * Get the last created shape.
+	 */
+	getLastCreatedShape<T extends TLShape>() {
+		const lastShape = this._lastCreatedShapes[this._lastCreatedShapes.length - 1] as T
+		return this.getShape<T>(lastShape)!
+	}
 
 	copy(ids = this.getSelectedShapeIds()) {
 		if (ids.length > 0) {
@@ -253,6 +243,7 @@ export class TestEditor extends Editor {
 		}
 		return this
 	}
+	clipboard = null as TLContent | null
 
 	cut(ids = this.getSelectedShapeIds()) {
 		if (ids.length > 0) {
@@ -278,21 +269,12 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	/**
-	 * If you need to trigger a double click, you can either mock the implementation of one of these
-	 * methods, or call mockRestore() to restore the actual implementation (e.g.
-	 * _transformPointerDownSpy.mockRestore())
-	 */
 	_transformPointerDownSpy = jest
 		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
+		.mockImplementation((info) => info)
 	_transformPointerUpSpy = jest
 		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
+		.mockImplementation((info) => info)
 
 	testShapeID(id: string) {
 		return createShapeId(id)
@@ -308,13 +290,11 @@ export class TestEditor extends Editor {
 
 	expectCameraToBe(x: number, y: number, z: number) {
 		const camera = this.getCamera()
-
 		expect({
 			x: +camera.x.toFixed(2),
 			y: +camera.y.toFixed(2),
 			z: +camera.z.toFixed(2),
 		}).toCloselyMatchObject({ x, y, z })
-
 		return this
 	}
 
@@ -352,7 +332,7 @@ export class TestEditor extends Editor {
 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -360,7 +340,7 @@ export class TestEditor extends Editor {
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
 		options?: Partial<TLPointerEventInfo> | TLShapeId,
-		modifiers?: EventModifiers
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		if (typeof options === 'string') {
 			options = { target: 'shape', shape: this.getShape(options) }
@@ -375,7 +355,7 @@ export class TestEditor extends Editor {
 			ctrlKey: this.inputs.ctrlKey,
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
-			accelKey: isAccelKey({ ...this.inputs, ...modifiers }),
+			accelKey: isAccelKey(this.inputs),
 			point: { x, y, z: null },
 			button: 0,
 			isPen: false,
@@ -391,7 +371,7 @@ export class TestEditor extends Editor {
 	): TLKeyboardEventInfo {
 		return {
 			shiftKey: key === 'Shift',
-			ctrlKey: key === 'Control' || key === 'Meta',
+			ctrlKey: key === 'Control',
 			altKey: key === 'Alt',
 			metaKey: key === 'Meta',
 			accelKey: tlenv.isDarwin ? key === 'Meta' : key === 'Control' || key === 'Meta',
@@ -422,10 +402,6 @@ export class TestEditor extends Editor {
 
 	/* ------------------ Input Events ------------------ */
 
-	/**
-	Some of our updates are not synchronous any longer. For example, drawing happens on tick instead of on pointer move.
-	You can use this helper to force the tick, which will then process all the updates.
-	*/
 	forceTick(count = 1) {
 		for (let i = 0; i < count; i++) {
 			this.emit('tick', 16)
@@ -436,47 +412,47 @@ export class TestEditor extends Editor {
 	pointerMove(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_move',
-		}).forceTick()
+		})
 		return this
 	}
 
 	pointerDown(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_down',
-		}).forceTick()
+		})
 		return this
 	}
 
 	pointerUp(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_up',
-		}).forceTick()
+		})
 		return this
 	}
 
 	click(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.pointerDown(x, y, options, modifiers)
 		this.pointerUp(x, y, options, modifiers)
@@ -486,27 +462,27 @@ export class TestEditor extends Editor {
 	rightClick(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_down',
 			button: 2,
-		}).forceTick()
+		})
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			name: 'pointer_up',
 			button: 2,
-		}).forceTick()
+		})
 		return this
 	}
 
 	doubleClick(
 		x = this.inputs.currentScreenPoint.x,
 		y = this.inputs.currentScreenPoint.y,
-		options?: PointerEventInit,
-		modifiers?: EventModifiers
+		options?: Partial<TLPointerEventInfo>,
+		modifiers?: Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
 	) {
 		this.pointerDown(x, y, options, modifiers)
 		this.pointerUp(x, y, options, modifiers)
@@ -521,17 +497,17 @@ export class TestEditor extends Editor {
 			type: 'click',
 			name: 'double_click',
 			phase: 'up',
-		}).forceTick()
+		})
 		return this
 	}
 
-	keyDown(key: string, options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>) {
-		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_down', options) }).forceTick()
+	keyDown(key: string, options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>) {
+		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_down', options) })
 		return this
 	}
 
-	keyRepeat(key: string, options = {} as Partial<Exclude<TLKeyboardEventInfo, 'key'>>) {
-		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_repeat', options) }).forceTick()
+	keyRepeat(key: string, options = {} as Partial<Omit<TLKeyboardEventInfo, 'key'>>) {
+		this.dispatch({ ...this.getKeyboardEventInfo(key, 'key_repeat', options) })
 		return this
 	}
 
@@ -539,12 +515,11 @@ export class TestEditor extends Editor {
 		this.dispatch({
 			...this.getKeyboardEventInfo(key, 'key_up', {
 				shiftKey: this.inputs.shiftKey && key !== 'Shift',
-				ctrlKey: this.inputs.ctrlKey && !(key === 'Control' || key === 'Meta'),
+				ctrlKey: this.inputs.ctrlKey && key !== 'Control',
 				altKey: this.inputs.altKey && key !== 'Alt',
 				metaKey: this.inputs.metaKey && key !== 'Meta',
-				...options,
 			}),
-		}).forceTick()
+		})
 		return this
 	}
 
@@ -552,24 +527,13 @@ export class TestEditor extends Editor {
 		this.dispatch({
 			type: 'wheel',
 			name: 'wheel',
-			point: new Vec(this.inputs.currentScreenPoint.x, this.inputs.currentScreenPoint.y),
 			shiftKey: this.inputs.shiftKey,
 			ctrlKey: this.inputs.ctrlKey,
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			delta: { x: dx, y: dy },
-		}).forceTick(2)
-		return this
-	}
-
-	pan(offset: VecLike): this {
-		const { isLocked, panSpeed } = this.getCameraOptions()
-		if (isLocked) return this
-		const { x: cx, y: cy, z: cz } = this.getCamera()
-		this.setCamera(new Vec(cx + (offset.x * panSpeed) / cz, cy + (offset.y * panSpeed) / cz, cz), {
-			immediate: true,
+			point: new Vec(this.inputs.currentScreenPoint.x, this.inputs.currentScreenPoint.y),
 		})
 		return this
 	}
@@ -591,10 +555,9 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		}).forceTick()
+		})
 		return this
 	}
 
@@ -615,7 +578,6 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
 		})
@@ -639,25 +601,79 @@ export class TestEditor extends Editor {
 			altKey: this.inputs.altKey,
 			metaKey: this.inputs.metaKey,
 			accelKey: isAccelKey(this.inputs),
-			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		}).forceTick()
+		})
+		return this
+	}
+
+	/**
+	 * If you need to trigger a double click, you can either mock the implementation of one of these
+	 * methods, or call mockRestore() to restore the actual implementation (e.g.
+	 * _transformPointerDownSpy.mockRestore())
+	 */
+	_transformPointerDownSpy = jest.spyOn(this._clickManager, 'handlePointerEvent').mockImplementation((info) => info)
+	_transformPointerUpSpy   = jest.spyOn(this._clickManager, 'handlePointerEvent').mockImplementation((info) => info)
+
+	testShapeID(id: string) {
+		return createShapeId(id)
+	}
+
+	testPageID(id: string) {
+		return PageRecordType.createId(id)
+	}
+
+	expectToBeIn(path: string) {
+		expect(this.getPath()).toBe(path)
 		return this
 	}
+
+	expectCameraToBe(x: number, y: number, z: number) {
+		const camera = this.getCamera()
+		expect({
+			x: +camera.x.toFixed(2),
+			y: +camera.y.toFixed(2),
+			z: +camera.z.toFixed(2),
+		}).toCloselyMatchObject({ x, y, z })
+		return this
+	}
+
+	expectShapeToMatch<T extends TLShape = TLShape>(
+		...model: RequiredKeys<Partial<TLShapePartial<T>>, 'id'>[]
+	) {
+		model.forEach((model) => {
+			const shape = this.getShape(model.id!)!
+			const next = { ...shape, ...model }
+			expect(shape).toCloselyMatchObject(next)
+		})
+		return this
+	}
+
+	expectPageBoundsToBe<T extends TLShape = TLShape>(id: IdOf<T>, bounds: Partial<BoxModel>) {
+		const observedBounds = this.getShapePageBounds(id)!
+		expect(observedBounds).toCloselyMatchObject(bounds)
+		return this
+	}
+
+	expectScreenBoundsToBe<T extends TLShape = TLShape>(id: IdOf<T>, bounds: Partial<BoxModel>) {
+		const pageBounds = this.getShapePageBounds(id)!
+		const screenPoint = this.pageToScreen(pageBounds.point)
+		const observedBounds = pageBounds.clone()
+		observedBounds.x = screenPoint.x
+		observedBounds.y = screenPoint.y
+		expect(observedBounds).toCloselyMatchObject(bounds)
+		return this
+	}
+
 	/* ------ Interaction Helpers ------ */
 
 	rotateSelection(
 		angleRadians: number,
-		{
-			handle = 'top_left_rotate',
-			shiftKey = false,
-		}: { handle?: RotateCorner; shiftKey?: boolean } = {}
+		{ handle = 'top_left_rotate', shiftKey = false }: { handle?: RotateCorner; shiftKey?: boolean } = {}
 	) {
 		if (this.getSelectedShapeIds().length === 0) {
 			throw new Error('No selection')
 		}
-
 		this.setCurrentTool('select')
 
 		const handlePoint = this.getSelectionRotatedPageBounds()!
@@ -673,19 +689,6 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	/**
-	 * The center of the selection bounding box.
-	 *
-	 * @readonly
-	 * @public
-	 */
-	getSelectionPageCenter() {
-		const selectionRotation = this.getSelectionRotation()
-		const selectionBounds = this.getSelectionRotatedPageBounds()
-		if (!selectionBounds) return null
-		return Vec.RotWith(selectionBounds.center, selectionBounds.point, selectionRotation)
-	}
-
 	translateSelection(dx: number, dy: number, options?: Partial<TLPointerEventInfo>) {
 		if (this.getSelectedShapeIds().length === 0) {
 			throw new Error('No selection')
@@ -724,16 +727,8 @@ export class TestEditor extends Editor {
 			preRotationScaleOriginPoint
 		)
 
-		const handlePoint = Vec.RotWith(
-			preRotationHandlePoint,
-			bounds.point,
-			this.getSelectionRotation()
-		)
-		const targetHandlePoint = Vec.RotWith(
-			preRotationTargetHandlePoint,
-			bounds.point,
-			this.getSelectionRotation()
-		)
+		const handlePoint = Vec.RotWith(preRotationHandlePoint, bounds.point, this.getSelectionRotation())
+		const targetHandlePoint = Vec.RotWith(preRotationTargetHandlePoint, bounds.point, this.getSelectionRotation())
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle }, options)
 		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, options)
@@ -750,12 +745,23 @@ export class TestEditor extends Editor {
 		return ids
 	}
 
+	getArrowsBoundTo(shapeId: TLShapeId) {
+		const ids = new Set(
+			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
+		)
+		return Array.from(ids, (id) => this.getShape<TLArrowShape>(id)!).filter(Boolean)
+	}
+
+	static CreateShapeId(id?: string) {
+		return id ? createShapeId(id) : createShapeId()
+	}
+
 	/**
 	 * Get the page point (or absolute point) of a shape.
 	 *
 	 * @example
 	 * ```ts
-	 * editor.getPagePoint(myShape)
+	 * editor.getPageCenter(myShape)
 	 * ```
 	 *
 	 * @param shape - The shape to get the page point for.
@@ -791,11 +797,21 @@ export class TestEditor extends Editor {
 		return this.getPageRotationById(shape.id)
 	}
 
-	getArrowsBoundTo(shapeId: TLShapeId) {
-		const ids = new Set(
-			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
-		)
-		return compact(Array.from(ids, (id) => this.getShape<TLArrowShape>(id)))
+	/**
+	 * Pan the camera by a screen offset.
+	 *
+	 * Respects the current cameraOptions.panSpeed and handles isLocked.
+	 *
+	 * @public
+	 */
+	pan(offset: VecLike): this {
+		const { isLocked, panSpeed } = this.getCameraOptions()
+		if (isLocked) return this
+		const { x: cx, y: cy, z: cz } = this.getCamera()
+		this.setCamera(new Vec((offset.x * panSpeed) / cz + cx, (offset.y * panSpeed) / cz + cy, cz), {
+			immediate: true,
+		})
+		return this
 	}
 }
 
@@ -852,4 +868,4 @@ export const createDefaultShapes = (): TLShapePartial[] => [
 ]
 
 type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey' | 'accelKey'>>
\ No newline at end of file
