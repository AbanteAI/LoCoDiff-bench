--- tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual)@@ -1,3 +1,4 @@+/* eslint-disable @typescript-eslint/no-explicit-any */
 import {
 	Box,
 	BoxModel,
@@ -38,7 +39,10 @@ import { defaultShapeUtils } from '../lib/defaultShapeUtils'
 import { registerDefaultSideEffects } from '../lib/defaultSideEffects'
 import { defaultTools } from '../lib/defaultTools'
-import { defaultAddFontsFromNode, tipTapDefaultExtensions } from '../lib/utils/text/richText'
+import {
+	defaultAddFontsFromNode,
+	tipTapDefaultExtensions,
+} from '../lib/utils/text/richText'
 import { shapesFromJsx } from './test-jsx'
 
 jest.useFakeTimers()
@@ -46,7 +50,7 @@ Object.assign(navigator, {
 	clipboard: {
 		write: () => {
-			//noop
+			/* noop */
 		},
 	},
 })
@@ -70,6 +74,7 @@ 		storeOptions: Partial<TLStoreOptions> = {}
 	) {
 		const elm = document.createElement('div')
+
 		const bounds = {
 			x: 0,
 			y: 0,
@@ -80,12 +85,13 @@ 			bottom: 720,
 			right: 1080,
 		}
+
 		// make the app full screen for the sake of the insets property
 		jest.spyOn(document.body, 'scrollWidth', 'get').mockImplementation(() => bounds.width)
 		jest.spyOn(document.body, 'scrollHeight', 'get').mockImplementation(() => bounds.height)
 
 		elm.tabIndex = 0
-		elm.getBoundingClientRect = () => bounds as DOMRect
+		elm.getBoundingClientRect = () => bounds as unknown as DOMRect
 
 		const shapeUtilsWithDefaults = [...defaultShapeUtils, ...(options.shapeUtils ?? [])]
 		const bindingUtilsWithDefaults = [...defaultBindingUtils, ...(options.bindingUtils ?? [])]
@@ -109,10 +115,9 @@ 				},
 			},
 		})
+
 		this.elm = elm
 		this.bounds = bounds
-
-		// Pretty hacky way to mock the screen bounds
 		document.body.appendChild(this.elm)
 
 		this.textMeasure.measureText = (
@@ -139,8 +144,9 @@ 				y: 0,
 				w: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 				h:
-					(opts.maxWidth === null ? breaks.length : Math.ceil(w % opts.maxWidth) + breaks.length) *
-					opts.fontSize,
+					(opts.maxWidth === null
+						? breaks.length
+						: Math.ceil(w % opts.maxWidth) + breaks.length) * opts.fontSize,
 				scrollWidth: opts.maxWidth === null ? w : Math.max(w, opts.maxWidth),
 			}
 		}
@@ -167,8 +173,8 @@ 		this.textMeasure.measureTextSpans = (textToMeasure, opts) => {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
-				maxWidth: opts.width,
-				padding: `${opts.padding}px`,
+				maxWidth: (opts as any).width,
+				padding: `${(opts as any).padding}px`,
 			})
 			return [{ box, text: textToMeasure }]
 		}
@@ -184,11 +190,12 @@ 		registerDefaultSideEffects(this)
 	}
 
+	private _lastCreatedShapes: TLShape[] = []
+
 	getHistory() {
+		// @ts-expect-error accessing private for tests
 		return this.history
 	}
-
-	private _lastCreatedShapes: TLShape[] = []
 
 	/**
 	 * Get the last created shapes.
@@ -242,7 +249,7 @@ 		return this
 	}
 
-	clipboard = null as TLContent | null
+	clipboard: TLContent | null = null
 
 	copy(ids = this.getSelectedShapeIds()) {
 		if (ids.length > 0) {
@@ -284,12 +291,12 @@ 	 * _transformPointerDownSpy.mockRestore())
 	 */
 	_transformPointerDownSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
+		.spyOn((this as any)._clickManager, 'handlePointerEvent')
 		.mockImplementation((info) => {
 			return info
 		})
 	_transformPointerUpSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
+		.spyOn((this as any)._clickManager, 'handlePointerEvent')
 		.mockImplementation((info) => {
 			return info
 		})
@@ -321,9 +328,9 @@ 	expectShapeToMatch<T extends TLShape = TLShape>(
 		...model: RequiredKeys<Partial<TLShapePartial<T>>, 'id'>[]
 	) {
-		model.forEach((model) => {
-			const shape = this.getShape(model.id!)!
-			const next = { ...shape, ...model }
+		model.forEach((m) => {
+			const shape = this.getShape(m.id!)!
+			const next = { ...shape, ...m }
 			expect(shape).toCloselyMatchObject(next)
 		})
 		return this
@@ -352,7 +359,7 @@ 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -361,7 +368,7 @@ 		y = this.inputs.currentScreenPoint.y,
 		options?: Partial<TLPointerEventInfo> | TLShapeId,
 		modifiers?: EventModifiers
-	) {
+	): TLPointerEventInfo {
 		if (typeof options === 'string') {
 			options = { target: 'shape', shape: this.getShape(options) }
 		} else if (options === undefined) {
@@ -423,9 +430,9 @@ 	/* ------------------ Input Events ------------------ */
 
 	/**
-	Some of our updates are not synchronous any longer. For example, drawing happens on tick instead of on pointer move.
-	You can use this helper to force the tick, which will then process all the updates.
-	*/
+	 * Some of our updates are not synchronous any longer. For example, drawing happens on tick instead of on pointer move.
+	 * You can use this helper to force the tick, which will then process all the updates.
+	 */
 	forceTick(count = 1) {
 		for (let i = 0; i < count; i++) {
 			this.emit('tick', 16)
@@ -552,7 +559,6 @@ 		this.dispatch({
 			type: 'wheel',
 			name: 'wheel',
-			point: new Vec(this.inputs.currentScreenPoint.x, this.inputs.currentScreenPoint.y),
 			shiftKey: this.inputs.shiftKey,
 			ctrlKey: this.inputs.ctrlKey,
 			altKey: this.inputs.altKey,
@@ -561,16 +567,6 @@ 			...options,
 			delta: { x: dx, y: dy },
 		}).forceTick(2)
-		return this
-	}
-
-	pan(offset: VecLike): this {
-		const { isLocked, panSpeed } = this.getCameraOptions()
-		if (isLocked) return this
-		const { x: cx, y: cy, z: cz } = this.getCamera()
-		this.setCamera(new Vec(cx + (offset.x * panSpeed) / cz, cy + (offset.y * panSpeed) / cz, cz), {
-			immediate: true,
-		})
 		return this
 	}
 
@@ -618,7 +614,7 @@ 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -741,9 +737,7 @@ 		return this
 	}
 
-	createShapesFromJsx(
-		shapesJsx: React.JSX.Element | React.JSX.Element[]
-	): Record<string, TLShapeId> {
+	createShapesFromJsx(shapesJsx: React.JSX.Element | React.JSX.Element[]): Record<string, TLShapeId> {
 		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
 		this.createAssets(assets)
 		this.createShapes(shapes)
@@ -852,4 +846,4 @@ ]
 
 type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>+type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey'>>