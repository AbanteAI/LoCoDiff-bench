
index c20a7cb5a..f50936ff5 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmpobk97g35_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmpku8cgp00_actual.txt	
@@ -352,7 +352,7 @@ export class TestEditor extends Editor {
 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -515,7 +515,7 @@ export class TestEditor extends Editor {
 			type: 'click',
 			name: 'double_click',
 			phase: 'down',
-		})
+		}).forceTick()
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			type: 'click',
@@ -618,7 +618,7 @@ export class TestEditor extends Editor {
 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -665,7 +665,11 @@ export class TestEditor extends Editor {
 			.clone()
 			.rotWith(this.getSelectionRotatedPageBounds()!.point, this.getSelectionRotation())
 
-		const targetHandlePoint = Vec.RotWith(handlePoint, this.getSelectionPageCenter()!, angleRadians)
+		const targetHandlePoint = Vec.RotWith(
+			handlePoint,
+			this.getSelectionPageCenter()!,
+			angleRadians
+		)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle })
 		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey })
@@ -697,7 +701,11 @@ export class TestEditor extends Editor {
 		this.pointerDown(center.x, center.y, this.getSelectedShapeIds()[0])
 		const numSteps = 10
 		for (let i = 1; i < numSteps; i++) {
-			this.pointerMove(center.x + (i * dx) / numSteps, center.y + (i * dy) / numSteps, options)
+			this.pointerMove(
+				center.x + (i * dx) / numSteps,
+				center.y + (i * dy) / numSteps,
+				options
+			)
 		}
 		this.pointerUp(center.x + dx, center.y + dy, options)
 		return this
@@ -741,15 +749,6 @@ export class TestEditor extends Editor {
 		return this
 	}
 
-	createShapesFromJsx(
-		shapesJsx: React.JSX.Element | React.JSX.Element[]
-	): Record<string, TLShapeId> {
-		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
-		this.createAssets(assets)
-		this.createShapes(shapes)
-		return ids
-	}
-
 	/**
 	 * Get the page point (or absolute point) of a shape.
 	 *
@@ -791,6 +790,15 @@ export class TestEditor extends Editor {
 		return this.getPageRotationById(shape.id)
 	}
 
+	createShapesFromJsx(
+		shapesJsx: React.JSX.Element | React.JSX.Element[]
+	): Record<string, TLShapeId> {
+		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
+		this.createAssets(assets)
+		this.createShapes(shapes)
+		return ids
+	}
+
 	getArrowsBoundTo(shapeId: TLShapeId) {
 		const ids = new Set(
 			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
