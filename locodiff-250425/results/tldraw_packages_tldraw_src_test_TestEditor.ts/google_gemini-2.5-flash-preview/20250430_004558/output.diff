
index c20a7cb5..6b7d31c2 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmprlfk9o5l_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmpvahrh2r__actual.txt	
@@ -22,7 +22,6 @@ import {
 	TLShapeId,
 	TLShapePartial,
 	TLStoreOptions,
-	TLWheelEventInfo,
 	Vec,
 	VecLike,
 	compact,
@@ -283,16 +282,12 @@ export class TestEditor extends Editor {
 	 * methods, or call mockRestore() to restore the actual implementation (e.g.
 	 * _transformPointerDownSpy.mockRestore())
 	 */
-	_transformPointerDownSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
-	_transformPointerUpSpy = jest
-		.spyOn(this._clickManager, 'handlePointerEvent')
-		.mockImplementation((info) => {
-			return info
-		})
+	_transformPointerDownSpy = jest.spyOn(this._clickManager, 'handlePointerEvent').mockImplementation((info) => {
+		return info
+	})
+	_transformPointerUpSpy = jest.spyOn(this._clickManager, 'handlePointerEvent').mockImplementation((info) => {
+		return info
+	})
 
 	testShapeID(id: string) {
 		return createShapeId(id)
@@ -352,7 +347,7 @@ export class TestEditor extends Editor {
 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -618,7 +613,7 @@ export class TestEditor extends Editor {
 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -852,4 +847,4 @@ export const createDefaultShapes = (): TLShapePartial[] => [
 ]
 
 type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey'>>
\ No newline at end of file
