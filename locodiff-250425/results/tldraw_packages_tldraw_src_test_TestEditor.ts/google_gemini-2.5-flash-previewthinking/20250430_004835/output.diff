
index c20a7cb5..4ddbb96b 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmp3bfrpj09_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmpgl1x1pyg_actual.txt	
@@ -112,9 +112,6 @@ export class TestEditor extends Editor {
 		this.elm = elm
 		this.bounds = bounds
 
-		// Pretty hacky way to mock the screen bounds
-		document.body.appendChild(this.elm)
-
 		this.textMeasure.measureText = (
 			textToMeasure: string,
 			opts: {
@@ -167,7 +164,7 @@ export class TestEditor extends Editor {
 		this.textMeasure.measureTextSpans = (textToMeasure, opts) => {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
-				maxWidth: opts.width,
+				maxWidth: opts.maxWidth,
 				padding: `${opts.padding}px`,
 			})
 			return [{ box, text: textToMeasure }]
@@ -352,7 +349,7 @@ export class TestEditor extends Editor {
 			? ({
 					target: 'shape',
 					shape: this.getShape(info as any),
-				} as T)
+			  } as T)
 			: info
 	}
 
@@ -401,20 +398,20 @@ export class TestEditor extends Editor {
 				key === 'Shift'
 					? 'ShiftLeft'
 					: key === 'Alt'
-						? 'AltLeft'
-						: key === 'Control'
-							? 'CtrlLeft'
-							: key === 'Meta'
-								? 'MetaLeft'
-								: key === ' '
-									? 'Space'
-									: key === 'Enter' ||
+					  ? 'AltLeft'
+					  : key === 'Control'
+						  ? 'CtrlLeft'
+						  : key === 'Meta'
+							  ? 'MetaLeft'
+							  : key === ' '
+								  ? 'Space'
+								  : key === 'Enter' ||
 										  key === 'ArrowRight' ||
 										  key === 'ArrowLeft' ||
 										  key === 'ArrowUp' ||
 										  key === 'ArrowDown'
-										? key
-										: 'Key' + key[0].toUpperCase() + key.slice(1),
+									  ? key
+									  : 'Key' + key[0].toUpperCase() + key.slice(1),
 			type: 'keyboard',
 			key,
 		}
@@ -515,7 +512,7 @@ export class TestEditor extends Editor {
 			type: 'click',
 			name: 'double_click',
 			phase: 'down',
-		})
+		}).forceTick()
 		this.dispatch({
 			...this.getPointerEventInfo(x, y, options, modifiers),
 			type: 'click',
@@ -618,7 +615,7 @@ export class TestEditor extends Editor {
 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -852,4 +849,4 @@ export const createDefaultShapes = (): TLShapePartial[] => [
 ]
 
 type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey' | 'metaKey'>>
\ No newline at end of file
