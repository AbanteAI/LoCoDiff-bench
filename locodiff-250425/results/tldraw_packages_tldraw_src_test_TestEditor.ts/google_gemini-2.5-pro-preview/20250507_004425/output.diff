
index c20a7cb5..d8f68cff 100644
--- a/tldraw_packages_tldraw_src_test_TestEditor.ts_expectedoutput.txt (expected):tmp/tmpotc_h7ju_expected.txt	
+++ b/tldraw_packages_tldraw_src_test_TestEditor.ts_extracted.txt (actual):tmp/tmp2idbf10l_actual.txt	
@@ -168,7 +168,6 @@ export class TestEditor extends Editor {
 			const box = this.textMeasure.measureText(textToMeasure, {
 				...opts,
 				maxWidth: opts.width,
-				padding: `${opts.padding}px`,
 			})
 			return [{ box, text: textToMeasure }]
 		}
@@ -618,7 +617,7 @@ export class TestEditor extends Editor {
 			...options,
 			point: { x, y, z },
 			delta: { x: dx, y: dy, z: dz },
-		})
+		}).forceTick()
 		return this
 	}
 
@@ -665,7 +664,11 @@ export class TestEditor extends Editor {
 			.clone()
 			.rotWith(this.getSelectionRotatedPageBounds()!.point, this.getSelectionRotation())
 
-		const targetHandlePoint = Vec.RotWith(handlePoint, this.getSelectionPageCenter()!, angleRadians)
+		const targetHandlePoint = Vec.RotWith(
+			handlePoint,
+			this.getSelectionPageCenter()!,
+			angleRadians
+		)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle })
 		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, { shiftKey })
@@ -736,120 +739,4 @@ export class TestEditor extends Editor {
 		)
 
 		this.pointerDown(handlePoint.x, handlePoint.y, { target: 'selection', handle }, options)
-		this.pointerMove(targetHandlePoint.x, targetHandlePoint.y, options)
-		this.pointerUp(targetHandlePoint.x, targetHandlePoint.y, options)
-		return this
-	}
-
-	createShapesFromJsx(
-		shapesJsx: React.JSX.Element | React.JSX.Element[]
-	): Record<string, TLShapeId> {
-		const { shapes, assets, ids } = shapesFromJsx(shapesJsx)
-		this.createAssets(assets)
-		this.createShapes(shapes)
-		return ids
-	}
-
-	/**
-	 * Get the page point (or absolute point) of a shape.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPagePoint(myShape)
-	 * ```
-	 *
-	 * @param shape - The shape to get the page point for.
-	 *
-	 * @public
-	 */
-	getPageCenter(shape: TLShape) {
-		const pageTransform = this.getShapePageTransform(shape.id)
-		if (!pageTransform) return null
-		const center = this.getShapeGeometry(shape).bounds.center
-		return Mat.applyToPoint(pageTransform, center)
-	}
-
-	/**
-	 * Get the page rotation (or absolute rotation) of a shape by its id.
-	 *
-	 * @example
-	 * ```ts
-	 * editor.getPageRotationById(myShapeId)
-	 * ```
-	 *
-	 * @param id - The id of the shape to get the page rotation for.
-	 */
-	getPageRotationById(id: TLShapeId): number {
-		const pageTransform = this.getShapePageTransform(id)
-		if (pageTransform) {
-			return Mat.Decompose(pageTransform).rotation
-		}
-		return 0
-	}
-
-	getPageRotation(shape: TLShape) {
-		return this.getPageRotationById(shape.id)
-	}
-
-	getArrowsBoundTo(shapeId: TLShapeId) {
-		const ids = new Set(
-			this.getBindingsToShape<TLArrowBinding>(shapeId, 'arrow').map((b) => b.fromId)
-		)
-		return compact(Array.from(ids, (id) => this.getShape<TLArrowShape>(id)))
-	}
-}
-
-export const defaultShapesIds = {
-	box1: createShapeId('box1'),
-	box2: createShapeId('box2'),
-	ellipse1: createShapeId('ellipse1'),
-}
-
-export const createDefaultShapes = (): TLShapePartial[] => [
-	{
-		id: defaultShapesIds.box1,
-		type: 'geo',
-		x: 100,
-		y: 100,
-		props: {
-			w: 100,
-			h: 100,
-			geo: 'rectangle',
-		},
-	},
-	{
-		id: defaultShapesIds.box2,
-		type: 'geo',
-		x: 200,
-		y: 200,
-		rotation: HALF_PI / 2,
-		props: {
-			w: 100,
-			h: 100,
-			color: 'black',
-			fill: 'none',
-			dash: 'draw',
-			size: 'm',
-			geo: 'rectangle',
-		},
-	},
-	{
-		id: defaultShapesIds.ellipse1,
-		type: 'geo',
-		parentId: defaultShapesIds.box2,
-		x: 200,
-		y: 200,
-		props: {
-			w: 50,
-			h: 50,
-			color: 'black',
-			fill: 'none',
-			dash: 'draw',
-			size: 'm',
-			geo: 'ellipse',
-		},
-	},
-]
-
-type PointerEventInit = Partial<TLPointerEventInfo> | TLShapeId
-type EventModifiers = Partial<Pick<TLPointerEventInfo, 'shiftKey' | 'ctrlKey' | 'altKey'>>
\ No newline at end of file
+		this.pointerMove(targetHandlePoint.
\ No newline at end of file
