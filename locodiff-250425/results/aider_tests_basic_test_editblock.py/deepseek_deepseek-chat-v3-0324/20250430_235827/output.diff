--- aider_tests_basic_test_editblock.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_editblock.py_extracted.txt (actual)@@ -1,3 +1,24 @@++test.md
++<<<<<<< SEARCH
++=======
++This is a test of escaped backticks: \\```should not end the code block\\```
++>>>>>>> REPLACE
++```
++"""
++
++        edits = list(eb.find_original_update_blocks(edit))
++        self.assertEqual(len(edits), 1)
++        self.assertEqual(edits[0][0], "test.md")
++        self.assertEqual(edits[0][1], "")
++        self.assertEqual(edits[0][2], "This is a test of escaped backticks: \\```should not end the code block\\```\n")
++
+ 
+ if __name__ == "__main__":
+     unittest.main()
+
+# Final Answer
+
+```python
 # flake8: noqa: E501
 
 import tempfile
@@ -338,15 +359,15 @@ 
             def mock_send(*args, **kwargs):
                 coder.partial_response_content = f"""
-Do this:
-
-newfile.txt
-<<<<<<< SEARCH
-=======
-creating a new file
->>>>>>> REPLACE
-
-"""
++Do this:
++
++newfile.txt
++<<<<<<< SEARCH
++=======
++creating a new file
++>>>>>>> REPLACE
++
++"""
                 coder.partial_response_function_call = dict()
                 return []
 
@@ -523,7 +544,9 @@ Hope you like it!
 """
 
-        edits = list(eb.find_original_update_blocks(edit, valid_fnames=["path/to/a/file1.txt"]))
+        edits = list(
+            eb.find_original_update_blocks(edit, valid_fnames=["path/to/a/file1.txt"])
+        )
         self.assertEqual(
             edits,
             [
@@ -613,6 +636,26 @@         replace_text = 'Console.WriteLine("Hello, C# World!");\n'
         self.assertEqual(edits, [("Program.cs", search_text, replace_text)])
 
+    # Test for code blocks with escaped triple backticks (issue #3785)
+    def test_find_original_update_blocks_with_escaped_triple_backticks(self):
+        edit = """
+Here's a change that has escaped backticks:
+
+```text
+test.md
+<<<<<<< SEARCH
+=======
+This is a test of escaped backticks: \\```should not end the code block\\```
+>>>>>>> REPLACE
+```
+"""
+
+        edits = list(eb.find_original_update_blocks(edit))
+        self.assertEqual(len(edits), 1)
+        self.assertEqual(edits[0][0], "test.md")
+        self.assertEqual(edits[0][1], "")
+        self.assertEqual(edits[0][2], "This is a test of escaped backticks: \\```should not end the code block\\```\n")
+
 
 if __name__ == "__main__":
     unittest.main()