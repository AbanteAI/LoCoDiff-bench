--- aider_tests_basic_test_editblock.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_editblock.py_extracted.txt (actual)@@ -266,42 +266,42 @@         result = eb.replace_most_similar_chunk(whole, part, replace)
         self.assertEqual(result, expected_output)
 
+    def test_replace_multiple_matches(self):
+        "only replace first occurrence"
+
+        whole = "line1\nline2\nline1\nline3\n"
+        part = "line1\n"
+        replace = "new_line\n"
+        expected_output = "new_line\nline2\nline1\nline3\n"
+
+        result = eb.replace_most_similar_chunk(whole, part, replace)
+        self.assertEqual(result, expected_output)
+
+    def test_replace_multiple_matches_missing_whitespace(self):
+        "only replace first occurrence"
+
+        whole = "    line1\n    line2\n    line1\n    line3\n"
+        part = "line1\n"
+        replace = "new_line\n"
+        expected_output = "    new_line\n    line2\n    line1\n    line3\n"
+
+        result = eb.replace_most_similar_chunk(whole, part, replace)
+        self.assertEqual(result, expected_output)
+
+    def test_replace_part_with_just_some_missing_leading_whitespace(self):
+        whole = "    line1\n    line2\n    line3\n"
+        part = " line1\n line2\n"
+        replace = " new_line1\n     new_line2\n"
+        expected_output = "    new_line1\n        new_line2\n    line3\n"
+
+        result = eb.replace_most_similar_chunk(whole, part, replace)
+        self.assertEqual(result, expected_output)
+
     def test_replace_part_with_missing_leading_whitespace(self):
         whole = "    line1\n    line2\n    line3\n"
         part = "line1\nline2\n"
         replace = "new_line1\nnew_line2\n"
         expected_output = "    new_line1\n    new_line2\n    line3\n"
-
-        result = eb.replace_most_similar_chunk(whole, part, replace)
-        self.assertEqual(result, expected_output)
-
-    def test_replace_multiple_matches(self):
-        "only replace first occurrence"
-
-        whole = "line1\nline2\nline1\nline3\n"
-        part = "line1\n"
-        replace = "new_line\n"
-        expected_output = "new_line\nline2\nline1\nline3\n"
-
-        result = eb.replace_most_similar_chunk(whole, part, replace)
-        self.assertEqual(result, expected_output)
-
-    def test_replace_multiple_matches_missing_whitespace(self):
-        "only replace first occurrence"
-
-        whole = "    line1\n    line2\n    line1\n    line3\n"
-        part = "line1\n"
-        replace = "new_line\n"
-        expected_output = "    new_line\n    line2\n    line1\n    line3\n"
-
-        result = eb.replace_most_similar_chunk(whole, part, replace)
-        self.assertEqual(result, expected_output)
-
-    def test_replace_part_with_just_some_missing_leading_whitespace(self):
-        whole = "    line1\n    line2\n    line3\n"
-        part = " line1\n line2\n"
-        replace = " new_line1\n     new_line2\n"
-        expected_output = "    new_line1\n        new_line2\n    line3\n"
 
         result = eb.replace_most_similar_chunk(whole, part, replace)
         self.assertEqual(result, expected_output)
