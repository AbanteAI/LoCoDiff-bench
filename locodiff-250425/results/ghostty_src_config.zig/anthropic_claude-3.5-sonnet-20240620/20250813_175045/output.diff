
index 5b8aac9ae..39eb49608 100644
--- a/ghostty_src_config.zig_expectedoutput.txt (expected):tmp/tmpq3zlzo61_expected.txt	
+++ b/ghostty_src_config.zig_extracted.txt (actual):tmp/tmp4ex5d6zb_actual.txt	
@@ -1,45 +1,25 @@
-const builtin = @import("builtin");
-
-const formatter = @import("config/formatter.zig");
-pub const Config = @import("config/Config.zig");
-pub const conditional = @import("config/conditional.zig");
-pub const string = @import("config/string.zig");
-pub const edit = @import("config/edit.zig");
-pub const url = @import("config/url.zig");
-
-pub const ConditionalState = conditional.State;
-pub const FileFormatter = formatter.FileFormatter;
-pub const entryFormatter = formatter.entryFormatter;
-pub const formatEntry = formatter.formatEntry;
-
-// Field types
-pub const ClipboardAccess = Config.ClipboardAccess;
-pub const Command = Config.Command;
-pub const ConfirmCloseSurface = Config.ConfirmCloseSurface;
-pub const CopyOnSelect = Config.CopyOnSelect;
-pub const CustomShaderAnimation = Config.CustomShaderAnimation;
-pub const FontSyntheticStyle = Config.FontSyntheticStyle;
-pub const FontStyle = Config.FontStyle;
-pub const FreetypeLoadFlags = Config.FreetypeLoadFlags;
-pub const Keybinds = Config.Keybinds;
-pub const MouseShiftCapture = Config.MouseShiftCapture;
-pub const NonNativeFullscreen = Config.NonNativeFullscreen;
-pub const OptionAsAlt = Config.OptionAsAlt;
-pub const RepeatableCodepointMap = Config.RepeatableCodepointMap;
-pub const RepeatableFontVariation = Config.RepeatableFontVariation;
-pub const RepeatableString = Config.RepeatableString;
-pub const RepeatableStringMap = @import("config/RepeatableStringMap.zig");
-pub const RepeatablePath = Config.RepeatablePath;
-pub const ShellIntegrationFeatures = Config.ShellIntegrationFeatures;
-pub const WindowPaddingColor = Config.WindowPaddingColor;
-
-// Alternate APIs
-pub const CAPI = @import("config/CAPI.zig");
-pub const Wasm = if (!builtin.target.cpu.arch.isWasm()) struct {} else @import("config/Wasm.zig");
-
-test {
-    @import("std").testing.refAllDecls(@This());
-
-    // Vim syntax file, not used at runtime but we want to keep it tested.
-    _ = @import("config/vim.zig");
-}
\ No newline at end of file
+Here's a summary of the key changes to the `src/config.zig` file over time:
+
+1. The file initially exported the `Config` struct and various enums/types used in the configuration.
+
+2. Additional configuration types and options were gradually added, such as:
+   - `CopyOnSelect`, `MouseShiftCapture`, `NonNativeFullscreen`, `OptionAsAlt`
+   - `ShellIntegrationFeatures`, `ClipboardAccess`, `FontSyntheticStyle`
+   - `WindowPaddingColor`, `FreetypeLoadFlags`
+
+3. Support for repeatable configuration options was added:
+   - `RepeatableString`, `RepeatablePath`, `RepeatableCodepointMap`, `RepeatableFontVariation`
+
+4. Conditional configuration system was introduced with `conditional` and `ConditionalState`.
+
+5. File formatting utilities were added (`FileFormatter`, `entryFormatter`, `formatEntry`).
+
+6. C and WebAssembly APIs were added for interoperability (`CAPI` and `Wasm`).
+
+7. Support for environment variables in the configuration was added with `RepeatableStringMap`.
+
+8. The `Command` type was introduced to allow specifying whether commands should be shell-expanded or not.
+
+9. Various smaller improvements were made, such as optimizing allocations and adding unit tests.
+
+The file evolved to support a more complex and flexible configuration system, with features like conditional configs, repeatable options, and fine-grained control over command execution. It also expanded to support multiple platforms and integration methods.
\ No newline at end of file
