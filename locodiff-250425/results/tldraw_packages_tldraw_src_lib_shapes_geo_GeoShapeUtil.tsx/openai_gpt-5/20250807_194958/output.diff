
index 751af1b8f..205b7aa4c 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpve5exfn9_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual):tmp/tmphuh58hdm_actual.txt	
@@ -165,10 +165,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				break
 			}
 			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
 				const sides = 5
 				const step = PI2 / sides / 2
 				const rightMostIndex = Math.floor(sides / 4) * 2
@@ -300,15 +296,13 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			case 'check-box':
 			case 'x-box':
 			case 'rectangle': {
-				body = new Rectangle2d({
-					width: w,
-					height: h,
+				body = new Polygon2d({
+					points: [new Vec(0, 0), new Vec(w, 0), new Vec(w, h), new Vec(0, h)],
 					isFilled,
 				})
 				break
 			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
 				const points = parts.reduce<Vec[]>((acc, part) => {
 					acc.push(...part.vertices)
@@ -327,7 +321,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
@@ -345,13 +338,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
-		// not sure if bug
-
 		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
 
-		// todo: use centroid for label position
-
 		return new Group2d({
 			children: [
 				body,
@@ -380,7 +369,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
 		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
 		switch (shape.props.geo) {
 			case 'arrow-down':
@@ -502,7 +490,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			}
 
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
 				const outline =
 					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
 				let path: string
