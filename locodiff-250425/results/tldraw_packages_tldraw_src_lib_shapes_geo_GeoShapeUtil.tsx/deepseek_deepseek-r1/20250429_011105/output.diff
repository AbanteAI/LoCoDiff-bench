
index 751af1b8..050899bf 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpyeyapi7a_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual):tmp/tmpg0c25x9t_actual.txt	
@@ -1,4 +1,3 @@
-/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Box,
@@ -28,6 +27,7 @@ import {
 	getDefaultColorTheme,
 	getFontsFromRichText,
 	getPolygonVertices,
+	isEmptyRichText,
 	lerp,
 	toRichText,
 	useValue,
@@ -35,7 +35,6 @@ import {
 
 import isEqual from 'lodash.isequal'
 import {
-	isEmptyRichText,
 	renderHtmlFromRichTextForMeasurement,
 	renderPlaintextFromRichText,
 } from '../../utils/text/richText'
@@ -165,16 +164,13 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				break
 			}
 			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
 				const sides = 5
 				const step = PI2 / sides / 2
 				const rightMostIndex = Math.floor(sides / 4) * 2
 				const leftMostIndex = sides * 2 - rightMostIndex
 				const topMostIndex = 0
 				const bottomMostIndex = Math.floor(sides / 2) * 2
+
 				const maxX = (Math.cos(-HALF_PI + rightMostIndex * step) * w) / 2
 				const minX = (Math.cos(-HALF_PI + leftMostIndex * step) * w) / 2
 
@@ -297,18 +293,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				})
 				break
 			}
-			case 'check-box':
-			case 'x-box':
-			case 'rectangle': {
-				body = new Rectangle2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
-				break
-			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
 				const points = parts.reduce<Vec[]>((acc, part) => {
 					acc.push(...part.vertices)
@@ -321,13 +306,22 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				})
 				break
 			}
+			case 'check-box':
+			case 'x-box':
+			case 'rectangle': {
+				body = new Rectangle2d({
+					width: w,
+					height: h,
+					isFilled,
+				})
+				break
+			}
 			default: {
 				exhaustiveSwitchError(shape.props.geo)
 			}
 		}
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
@@ -345,13 +339,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
-		// not sure if bug
-
 		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
 
-		// todo: use centroid for label position
-
 		return new Group2d({
 			children: [
 				body,
@@ -379,8 +369,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
-		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
+		const geometry = this.editor.getShapeGeometry(shape)
 		const outline = geometry.children[0]
 		switch (shape.props.geo) {
 			case 'arrow-down':
@@ -399,23 +388,17 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			case 'trapezoid':
 			case 'triangle':
 			case 'x-box':
-				// poly-line type shapes hand snap points for each vertex & the center
 				return { outline: outline, points: [...outline.vertices, geometry.bounds.center] }
 			case 'cloud':
 			case 'ellipse':
 			case 'heart':
 			case 'oval':
-				// blobby shapes only have a snap point in their center
 				return { outline: outline, points: [geometry.bounds.center] }
 			default:
 				exhaustiveSwitchError(shape.props.geo)
 		}
 	}
 
-	override getText(shape: TLGeoShape) {
-		return renderPlaintextFromRichText(this.editor, shape.props.richText)
-	}
-
 	override getFontFaces(shape: TLGeoShape): TLFontFace[] {
 		return getFontsFromRichText(this.editor, shape.props.richText, {
 			family: `tldraw_${shape.props.font}`,
@@ -479,23 +462,20 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const { w, size } = props
 		const h = props.h + props.growY
 
-		const strokeWidth = STROKE_SIZES[size]
-
-		const geometry = this.editor.getShapeGeometry(shape)
+		const strokeWidth = STROKE_SIZES[size] * props.scale
 
 		switch (props.geo) {
 			case 'ellipse': {
 				if (props.dash === 'draw') {
 					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
 				}
-
-				return <path d={geometry.getSvgPathData(true)} />
+				return <path d={this.editor.getShapeGeometry(shape).getSvgPathData(true)} />
 			}
 			case 'heart': {
 				return <path d={getHeartPath(w, h)} />
 			}
 			case 'oval': {
-				return <path d={geometry.getSvgPathData(true)} />
+				return <path d={this.editor.getShapeGeometry(shape).getSvgPathData(true)} />
 			}
 			case 'cloud': {
 				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
@@ -534,7 +514,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
-		// We need to scale the shape to 1x for export
 		const newShape = {
 			...shape,
 			props: {
@@ -583,8 +562,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
-		// use the w/h from props here instead of the initialBounds here,
-		// since cloud shapes calculated bounds can differ from the props w/h.
 		let unscaledW = unscaledInitialW * scaleX
 		let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY
 		let overShrinkX = 0
@@ -622,22 +599,16 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		const offset = new Vec(0, 0)
 
-		// x offsets
-
 		if (scaleX < 0) {
 			offset.x += scaledW
 		}
-
 		if (handle === 'left' || handle === 'top_left' || handle === 'bottom_left') {
 			offset.x += scaleX < 0 ? overShrinkX : -overShrinkX
 		}
 
-		// y offsets
-
 		if (scaleY < 0) {
 			offset.y += scaledH
 		}
-
 		if (handle === 'top' || handle === 'top_left' || handle === 'top_right') {
 			offset.y += scaleY < 0 ? overShrinkY : -overShrinkY
 		}
@@ -658,7 +629,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	override onBeforeCreate(shape: TLGeoShape) {
 		if (isEmptyRichText(shape.props.richText)) {
 			if (shape.props.growY) {
-				// No text / some growY, set growY to 0
 				return {
 					...shape,
 					props: {
@@ -667,7 +637,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					},
 				}
 			} else {
-				// No text / no growY, nothing to change
 				return
 			}
 		}
@@ -690,7 +659,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				...shape,
 				props: {
 					...shape.props,
-					// scale the growY
 					growY: growY * shape.props.scale,
 				},
 			}
@@ -698,7 +666,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
-		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
 			prev.props.font === next.props.font &&
@@ -707,7 +674,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			return
 		}
 
-		// If we got rid of the text, cancel out any growY from the prev text
 		const wasEmpty = isEmptyRichText(prev.props.richText)
 		const isEmpty = isEmptyRichText(next.props.richText)
 		if (!wasEmpty && isEmpty) {
@@ -720,22 +686,17 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			}
 		}
 
-		// Get the prev width and height in unscaled values
 		const unscaledPrevWidth = prev.props.w / prev.props.scale
 		const unscaledPrevHeight = prev.props.h / prev.props.scale
 		const unscaledPrevGrowY = prev.props.growY / prev.props.scale
 
-		// Get the next width and height in unscaled values
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
-		// When entering the first character in a label (not pasting in multiple characters...)
 		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
 			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
 			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
 
 			const min = MIN_SIZE_WITH_LABEL
-
-			// If both the width and height were less than the minimum size, make the shape square
 			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
 				unscaledW = Math.max(unscaledW, min)
 				unscaledH = Math.max(unscaledH, min)
@@ -743,12 +704,10 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				unscaledH = Math.max(unscaledW, unscaledH)
 			}
 
-			// Don't set a growYâ€”at least, not until we've implemented a growX property
 			return {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledW * next.props.scale,
 					h: unscaledH * next.props.scale,
 					growY: 0,
@@ -757,7 +716,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 
 		let growY: number | null = null
-
 		if (unscaledNextLabelSize.h > unscaledPrevHeight) {
 			growY = unscaledNextLabelSize.h - unscaledPrevHeight
 		} else {
@@ -772,7 +730,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					growY: growY * next.props.scale,
 					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
 				},
@@ -784,18 +741,13 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledNextLabelSize.w * next.props.scale,
 				},
 			}
 		}
-
-		// otherwise, no update needed
 	}
 
 	override onDoubleClick(shape: TLGeoShape) {
-		// Little easter egg: double-clicking a rectangle / checkbox while
-		// holding alt will toggle between check-box and rectangle
 		if (this.editor.inputs.altKey) {
 			switch (shape.props.geo) {
 				case 'rectangle': {
@@ -816,9 +768,8 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				}
 			}
 		}
-
-		return
 	}
+
 	override getInterpolatedProps(
 		startShape: TLGeoShape,
 		endShape: TLGeoShape,
@@ -844,10 +795,9 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 		...TEXT_PROPS,
 		fontFamily: FONT_FAMILIES[font],
 		fontSize: LABEL_FONT_SIZES[size],
-		maxWidth: 100, // ?
+		maxWidth: 100,
 	})
 
-	// TODO: Can I get these from somewhere?
 	const sizes = {
 		s: 2,
 		m: 3.5,
@@ -862,11 +812,8 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 		fontSize: LABEL_FONT_SIZES[size],
 		minWidth: minSize.w,
 		maxWidth: Math.max(
-			// Guard because a DOM nodes can't be less 0
 			0,
-			// A 'w' width that we're setting as the min-width
 			Math.ceil(minSize.w + sizes[size]),
-			// The actual text size
 			Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)
 		),
 	})
