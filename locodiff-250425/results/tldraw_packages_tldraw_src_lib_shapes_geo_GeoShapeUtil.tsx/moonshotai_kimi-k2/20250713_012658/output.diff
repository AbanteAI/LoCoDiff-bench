
index 751af1b8f..0d147416e 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpz9i68vgo_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual):tmp/tmp4heqeipv_actual.txt	
@@ -1,15 +1,14 @@
-/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Box,
 	Editor,
 	Ellipse2d,
+	exhaustiveSwitchError,
 	Geometry2d,
 	Group2d,
+	HandleSnapGeometry,
 	HALF_PI,
 	HTMLContainer,
-	HandleSnapGeometry,
-	PI2,
 	Polygon2d,
 	Polyline2d,
 	Rectangle2d,
@@ -22,7 +21,6 @@ import {
 	TLResizeInfo,
 	TLShapeUtilCanvasSvgDef,
 	Vec,
-	exhaustiveSwitchError,
 	geoShapeMigrations,
 	geoShapeProps,
 	getDefaultColorTheme,
@@ -32,7 +30,6 @@ import {
 	toRichText,
 	useValue,
 } from '@tldraw/editor'
-
 import isEqual from 'lodash.isequal'
 import {
 	isEmptyRichText,
@@ -95,7 +92,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 	}
 
-	override getGeometry(shape: TLGeoShape) {
+	override getGeometry(shape: TLGeoShape): Geometry2d {
 		const w = Math.max(1, shape.props.w)
 		const h = Math.max(1, shape.props.h + shape.props.growY)
 		const cx = w / 2
@@ -165,10 +162,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				break
 			}
 			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
 				const sides = 5
 				const step = PI2 / sides / 2
 				const rightMostIndex = Math.floor(sides / 4) * 2
@@ -186,19 +179,19 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				const offsetY = h / 2 + minY - (h / 2 - maxY)
 
 				const ratio = 1
-				const cx = (w - offsetX) / 2
-				const cy = (h - offsetY) / 2
-				const ox = (w + diffX) / 2
-				const oy = (h + diffY) / 2
-				const ix = (ox * ratio) / 2
-				const iy = (oy * ratio) / 2
+				const innerCx = (w - offsetX) / 2
+				const innerCy = (h - offsetY) / 2
+				const outerX = (w + diffX) / 2
+				const outerY = (h + diffY) / 2
+				const innerX = (outerX * ratio) / 2
+				const innerY = (outerY * ratio) / 2
 
 				body = new Polygon2d({
 					points: Array.from(Array(sides * 2)).map((_, i) => {
 						const theta = -HALF_PI + i * step
 						return new Vec(
-							cx + (i % 2 ? ix : ox) * Math.cos(theta),
-							cy + (i % 2 ? iy : oy) * Math.sin(theta)
+							innerCx + (i % 2 ? innerX : outerX) * Math.cos(theta),
+							innerCy + (i % 2 ? innerY : outerY) * Math.sin(theta)
 						)
 					}),
 					isFilled,
@@ -308,7 +301,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				break
 			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
 				const points = parts.reduce<Vec[]>((acc, part) => {
 					acc.push(...part.vertices)
@@ -327,7 +319,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
@@ -345,13 +336,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
-		// not sure if bug
-
 		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
 
-		// todo: use centroid for label position
-
 		return new Group2d({
 			children: [
 				body,
@@ -360,14 +347,14 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 						shape.props.align === 'start'
 							? 0
 							: shape.props.align === 'end'
-								? (unscaledW - unscaledLabelWidth) * shape.props.scale
-								: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
+							? (unscaledW - unscaledLabelWidth) * shape.props.scale
+							: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
 					y:
 						shape.props.verticalAlign === 'start'
 							? 0
 							: shape.props.verticalAlign === 'end'
-								? (unscaledH - unscaledLabelHeight) * shape.props.scale
-								: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
+							? (unscaledH - unscaledLabelHeight) * shape.props.scale
+							: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
 					width: unscaledLabelWidth * shape.props.scale,
 					height: unscaledLabelHeight * shape.props.scale,
 					isFilled: true,
@@ -380,7 +367,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
 		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
 		switch (shape.props.geo) {
 			case 'arrow-down':
@@ -399,14 +385,12 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			case 'trapezoid':
 			case 'triangle':
 			case 'x-box':
-				// poly-line type shapes hand snap points for each vertex & the center
-				return { outline: outline, points: [...outline.vertices, geometry.bounds.center] }
+				return { outline, points: [...outline.vertices, geometry.bounds.center] }
 			case 'cloud':
 			case 'ellipse':
 			case 'heart':
 			case 'oval':
-				// blobby shapes only have a snap point in their center
-				return { outline: outline, points: [geometry.bounds.center] }
+				return { outline, points: [geometry.bounds.center] }
 			default:
 				exhaustiveSwitchError(shape.props.geo)
 		}
@@ -475,32 +459,30 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	indicator(shape: TLGeoShape) {
-		const { id, props } = shape
+		const { props } = shape
 		const { w, size } = props
 		const h = props.h + props.growY
-
-		const strokeWidth = STROKE_SIZES[size]
-
-		const geometry = this.editor.getShapeGeometry(shape)
+		const strokeWidth = STROKE_SIZES[size] * shape.props.scale
+		const { id } = shape
 
 		switch (props.geo) {
 			case 'ellipse': {
 				if (props.dash === 'draw') {
 					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
 				}
-
+				const geometry = this.editor.getShapeGeometry(shape)
 				return <path d={geometry.getSvgPathData(true)} />
 			}
 			case 'heart': {
 				return <path d={getHeartPath(w, h)} />
 			}
 			case 'oval': {
+				const geometry = this.editor.getShapeGeometry(shape)
 				return <path d={geometry.getSvgPathData(true)} />
 			}
 			case 'cloud': {
 				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
 			}
-
 			default: {
 				const geometry = this.editor.getShapeGeometry(shape)
 				const outline =
@@ -520,8 +502,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					path = 'M' + outline[0] + 'L' + outline.slice(1) + 'Z'
 				}
 
-				const lines = getLines(shape.props, strokeWidth)
-
+				const lines = getLines(props, strokeWidth)
 				if (lines) {
 					for (const [A, B] of lines) {
 						path += `M${A.x},${A.y}L${B.x},${B.y}`
@@ -534,7 +515,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
-		// We need to scale the shape to 1x for export
 		const newShape = {
 			...shape,
 			props: {
@@ -583,8 +563,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
-		// use the w/h from props here instead of the initialBounds here,
-		// since cloud shapes calculated bounds can differ from the props w/h.
 		let unscaledW = unscaledInitialW * scaleX
 		let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY
 		let overShrinkX = 0
@@ -592,7 +570,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		const min = MIN_SIZE_WITH_LABEL
 
-		if (!isEmptyRichText(shape.props.richText)) {
+		if (renderPlaintextFromRichText(this.editor, shape.props.richText)) {
 			let newW = Math.max(Math.abs(unscaledW), min)
 			let newH = Math.max(Math.abs(unscaledH), min)
 
@@ -622,8 +600,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		const offset = new Vec(0, 0)
 
-		// x offsets
-
 		if (scaleX < 0) {
 			offset.x += scaledW
 		}
@@ -632,8 +608,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			offset.x += scaleX < 0 ? overShrinkX : -overShrinkX
 		}
 
-		// y offsets
-
 		if (scaleY < 0) {
 			offset.y += scaledH
 		}
@@ -658,7 +632,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	override onBeforeCreate(shape: TLGeoShape) {
 		if (isEmptyRichText(shape.props.richText)) {
 			if (shape.props.growY) {
-				// No text / some growY, set growY to 0
 				return {
 					...shape,
 					props: {
@@ -667,7 +640,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					},
 				}
 			} else {
-				// No text / no growY, nothing to change
 				return
 			}
 		}
@@ -690,7 +662,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				...shape,
 				props: {
 					...shape.props,
-					// scale the growY
 					growY: growY * shape.props.scale,
 				},
 			}
@@ -698,7 +669,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
-		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
 			prev.props.font === next.props.font &&
@@ -707,10 +677,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			return
 		}
 
-		// If we got rid of the text, cancel out any growY from the prev text
-		const wasEmpty = isEmptyRichText(prev.props.richText)
-		const isEmpty = isEmptyRichText(next.props.richText)
-		if (!wasEmpty && isEmpty) {
+		const prevPlaintext = renderPlaintextFromRichText(this.editor, prev.props.richText)
+		const nextPlaintext = renderPlaintextFromRichText(this.editor, next.props.richText)
+		if (prevPlaintext && !nextPlaintext) {
 			return {
 				...next,
 				props: {
@@ -720,22 +689,18 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			}
 		}
 
-		// Get the prev width and height in unscaled values
 		const unscaledPrevWidth = prev.props.w / prev.props.scale
 		const unscaledPrevHeight = prev.props.h / prev.props.scale
 		const unscaledPrevGrowY = prev.props.growY / prev.props.scale
 
-		// Get the next width and height in unscaled values
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
-		// When entering the first character in a label (not pasting in multiple characters...)
-		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
+		if (!prevPlaintext && nextPlaintext && nextPlaintext.length === 1) {
 			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
 			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
 
 			const min = MIN_SIZE_WITH_LABEL
 
-			// If both the width and height were less than the minimum size, make the shape square
 			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
 				unscaledW = Math.max(unscaledW, min)
 				unscaledH = Math.max(unscaledH, min)
@@ -743,12 +708,10 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				unscaledH = Math.max(unscaledW, unscaledH)
 			}
 
-			// Don't set a growY—at least, not until we've implemented a growX property
 			return {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledW * next.props.scale,
 					h: unscaledH * next.props.scale,
 					growY: 0,
@@ -761,6 +724,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		if (unscaledNextLabelSize.h > unscaledPrevHeight) {
 			growY = unscaledNextLabelSize.h - unscaledPrevHeight
 		} else {
+			const unscaledPrevGrowY = prev.props.growY / prev.props.scale
 			if (unscaledPrevGrowY) {
 				growY = 0
 			}
@@ -772,36 +736,32 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					growY: growY * next.props.scale,
 					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
 				},
 			}
 		}
 
+		const unscaledNextWidth = next.props.w / next.props.scale
 		if (unscaledNextLabelSize.w > unscaledPrevWidth) {
 			return {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledNextLabelSize.w * next.props.scale,
 				},
 			}
 		}
-
-		// otherwise, no update needed
 	}
 
 	override onDoubleClick(shape: TLGeoShape) {
-		// Little easter egg: double-clicking a rectangle / checkbox while
-		// holding alt will toggle between check-box and rectangle
 		if (this.editor.inputs.altKey) {
 			switch (shape.props.geo) {
 				case 'rectangle': {
 					return {
 						...shape,
 						props: {
+							...shape.props,
 							geo: 'check-box' as const,
 						},
 					}
@@ -810,6 +770,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					return {
 						...shape,
 						props: {
+							...shape.props,
 							geo: 'rectangle' as const,
 						},
 					}
@@ -819,6 +780,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		return
 	}
+
 	override getInterpolatedProps(
 		startShape: TLGeoShape,
 		endShape: TLGeoShape,
@@ -844,10 +806,9 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 		...TEXT_PROPS,
 		fontFamily: FONT_FAMILIES[font],
 		fontSize: LABEL_FONT_SIZES[size],
-		maxWidth: 100, // ?
+		maxWidth: 100,
 	})
 
-	// TODO: Can I get these from somewhere?
 	const sizes = {
 		s: 2,
 		m: 3.5,
@@ -862,11 +823,8 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 		fontSize: LABEL_FONT_SIZES[size],
 		minWidth: minSize.w,
 		maxWidth: Math.max(
-			// Guard because a DOM nodes can't be less 0
 			0,
-			// A 'w' width that we're setting as the min-width
 			Math.ceil(minSize.w + sizes[size]),
-			// The actual text size
 			Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)
 		),
 	})
