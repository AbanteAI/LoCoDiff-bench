--- tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual)@@ -1,7 +1,6 @@ /* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
-	Box,
 	Editor,
 	Ellipse2d,
 	Geometry2d,
@@ -16,26 +15,22 @@ 	SVGContainer,
 	Stadium2d,
 	SvgExportContext,
-	TLFontFace,
 	TLGeoShape,
 	TLGeoShapeProps,
 	TLResizeInfo,
 	TLShapeUtilCanvasSvgDef,
 	Vec,
-	exhaustiveSwitchError,
+	isEmptyRichText,
+	renderPlaintextFromRichText,
 	geoShapeMigrations,
 	geoShapeProps,
 	getDefaultColorTheme,
-	getFontsFromRichText,
 	getPolygonVertices,
 	lerp,
-	toRichText,
-	useValue,
 } from '@tldraw/editor'
 
 import isEqual from 'lodash.isequal'
 import {
-	isEmptyRichText,
 	renderHtmlFromRichTextForMeasurement,
 	renderPlaintextFromRichText,
 } from '../../utils/text/richText'
@@ -67,7 +62,7 @@ 
 /** @public */
 export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
-	static override type = 'geo' as const
+	static override type = 'geo'
 	static override props = geoShapeProps
 	static override migrations = geoShapeMigrations
 
@@ -81,7 +76,6 @@ 			h: 100,
 			geo: 'rectangle',
 			color: 'black',
-			labelColor: 'black',
 			fill: 'none',
 			dash: 'draw',
 			size: 'm',
@@ -156,159 +150,7 @@ 				})
 				break
 			}
-			case 'oval': {
-				body = new Stadium2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
-				break
-			}
-			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
-				const sides = 5
-				const step = PI2 / sides / 2
-				const rightMostIndex = Math.floor(sides / 4) * 2
-				const leftMostIndex = sides * 2 - rightMostIndex
-				const topMostIndex = 0
-				const bottomMostIndex = Math.floor(sides / 2) * 2
-				const maxX = (Math.cos(-HALF_PI + rightMostIndex * step) * w) / 2
-				const minX = (Math.cos(-HALF_PI + leftMostIndex * step) * w) / 2
-
-				const minY = (Math.sin(-HALF_PI + topMostIndex * step) * h) / 2
-				const maxY = (Math.sin(-HALF_PI + bottomMostIndex * step) * h) / 2
-				const diffX = w - Math.abs(maxX - minX)
-				const diffY = h - Math.abs(maxY - minY)
-				const offsetX = w / 2 + minX - (w / 2 - maxX)
-				const offsetY = h / 2 + minY - (h / 2 - maxY)
-
-				const ratio = 1
-				const cx = (w - offsetX) / 2
-				const cy = (h - offsetY) / 2
-				const ox = (w + diffX) / 2
-				const oy = (h + diffY) / 2
-				const ix = (ox * ratio) / 2
-				const iy = (oy * ratio) / 2
-
-				body = new Polygon2d({
-					points: Array.from(Array(sides * 2)).map((_, i) => {
-						const theta = -HALF_PI + i * step
-						return new Vec(
-							cx + (i % 2 ? ix : ox) * Math.cos(theta),
-							cy + (i % 2 ? iy : oy) * Math.sin(theta)
-						)
-					}),
-					isFilled,
-				})
-				break
-			}
-			case 'rhombus': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(offset, 0), new Vec(w, 0), new Vec(w - offset, h), new Vec(0, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'rhombus-2': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(0, 0), new Vec(w - offset, 0), new Vec(w, h), new Vec(offset, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'trapezoid': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(offset, 0), new Vec(w - offset, 0), new Vec(w, h), new Vec(0, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'arrow-right': {
-				const ox = Math.min(w, h) * 0.38
-				const oy = h * 0.16
-				body = new Polygon2d({
-					points: [
-						new Vec(0, oy),
-						new Vec(w - ox, oy),
-						new Vec(w - ox, 0),
-						new Vec(w, h / 2),
-						new Vec(w - ox, h),
-						new Vec(w - ox, h - oy),
-						new Vec(0, h - oy),
-					],
-					isFilled,
-				})
-				break
-			}
-			case 'arrow-left': {
-				const ox = Math.min(w, h) * 0.38
-				const oy = h * 0.16
-				body = new Polygon2d({
-					points: [
-						new Vec(ox, 0),
-						new Vec(ox, oy),
-						new Vec(w, oy),
-						new Vec(w, h - oy),
-						new Vec(ox, h - oy),
-						new Vec(ox, h),
-						new Vec(0, h / 2),
-					],
-					isFilled,
-				})
-				break
-			}
-			case 'arrow-up': {
-				const ox = w * 0.16
-				const oy = Math.min(w, h) * 0.38
-				body = new Polygon2d({
-					points: [
-						new Vec(w / 2, 0),
-						new Vec(w, oy),
-						new Vec(w - ox, oy),
-						new Vec(w - ox, h),
-						new Vec(ox, h),
-						new Vec(ox, oy),
-						new Vec(0, oy),
-					],
-					isFilled,
-				})
-				break
-			}
-			case 'arrow-down': {
-				const ox = w * 0.16
-				const oy = Math.min(w, h) * 0.38
-				body = new Polygon2d({
-					points: [
-						new Vec(ox, 0),
-						new Vec(w - ox, 0),
-						new Vec(w - ox, h - oy),
-						new Vec(w, h - oy),
-						new Vec(w / 2, h),
-						new Vec(0, h - oy),
-						new Vec(ox, h - oy),
-					],
-					isFilled,
-				})
-				break
-			}
-			case 'check-box':
-			case 'x-box':
-			case 'rectangle': {
-				body = new Rectangle2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
-				break
-			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
 				const points = parts.reduce<Vec[]>((acc, part) => {
 					acc.push(...part.vertices)
@@ -327,7 +169,6 @@ 		}
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
@@ -345,12 +186,8 @@ 			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
-		// not sure if bug
-
 		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
-
-		// todo: use centroid for label position
 
 		return new Group2d({
 			children: [
@@ -360,14 +197,14 @@ 						shape.props.align === 'start'
 							? 0
 							: shape.props.align === 'end'
-								? (unscaledW - unscaledLabelWidth) * shape.props.scale
-								: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
+							? (unscaledW - unscaledLabelWidth) * shape.props.scale
+							: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
 					y:
 						shape.props.verticalAlign === 'start'
 							? 0
 							: shape.props.verticalAlign === 'end'
-								? (unscaledH - unscaledLabelHeight) * shape.props.scale
-								: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
+							? (unscaledH - unscaledLabelHeight) * shape.props.scale
+							: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
 					width: unscaledLabelWidth * shape.props.scale,
 					height: unscaledLabelHeight * shape.props.scale,
 					isFilled: true,
@@ -380,7 +217,6 @@ 
 	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
 		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
 		switch (shape.props.geo) {
 			case 'arrow-down':
@@ -399,21 +235,38 @@ 			case 'trapezoid':
 			case 'triangle':
 			case 'x-box':
-				// poly-line type shapes hand snap points for each vertex & the center
-				return { outline: outline, points: [...outline.vertices, geometry.bounds.center] }
+				return { outline, points: [...outline.vertices, geometry.bounds.center] }
 			case 'cloud':
 			case 'ellipse':
 			case 'heart':
 			case 'oval':
-				// blobby shapes only have a snap point in their center
-				return { outline: outline, points: [geometry.bounds.center] }
+				return { outline, points: [geometry.bounds.center] }
 			default:
 				exhaustiveSwitchError(shape.props.geo)
 		}
 	}
 
-	override getText(shape: TLGeoShape) {
-		return renderPlaintextFromRichText(this.editor, shape.props.richText)
+	override onEditEnd(shape: TLGeoShape) {
+		const {
+			id,
+			type,
+			props: { richText },
+		} = shape
+
+		const prevText = renderPlaintextFromRichText(this.editor, richText)
+		const text = prevText.trimEnd()
+
+		if (text !== prevText) {
+			this.editor.updateShapes([
+				{
+					id,
+					type,
+					props: {
+						richText: toRichText(text),
+					},
+				},
+			])
+		}
 	}
 
 	override getFontFaces(shape: TLGeoShape): TLFontFace[] {
@@ -434,9 +287,9 @@ 			() => shape.id === editor.getOnlySelectedShapeId(),
 			[editor]
 		)
-		const isReadyForEditing = useIsReadyForEditing(editor, shape.id)
+		const isEditingAnything = editor.getEditingShapeId() !== null
 		const isEmpty = isEmptyRichText(shape.props.richText)
-		const showHtmlContainer = isReadyForEditing || !isEmpty
+		const showHtmlContainer = isEditingAnything || !isEmpty
 		const isForceSolid = useValue('force solid', () => editor.getZoomLevel() < 0.2, [editor])
 
 		return (
@@ -474,12 +327,18 @@ 		)
 	}
 
-	indicator(shape: TLGeoShape) {
+	override indicator(shape: TLGeoShape) {
 		const { id, props } = shape
 		const { w, size } = props
 		const h = props.h + props.growY
-
-		const strokeWidth = STROKE_SIZES[size]
+		const isForceSolid = useValue(
+			'force solid',
+			() => {
+				return this.editor.getZoomLevel() < 0.2
+			},
+			[]
+		)
+		const strokeWidth = STROKE_SIZES[size] * shape.props.scale
 
 		const geometry = this.editor.getShapeGeometry(shape)
 
@@ -502,9 +361,7 @@ 			}
 
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
-				const outline =
-					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
+				const outline = geometry.children[0].vertices
 				let path: string
 
 				if (props.dash === 'draw') {
@@ -608,8 +465,10 @@ 				},
 			})
 
-			const nextW = Math.max(Math.abs(unscaledW), unscaledLabelSize.w) * Math.sign(unscaledW)
-			const nextH = Math.max(Math.abs(unscaledH), unscaledLabelSize.h) * Math.sign(unscaledH)
+			const nextW =
+				Math.max(Math.abs(unscaledW), unscaledLabelSize.w) * Math.sign(unscaledW)
+			const nextH =
+				Math.max(Math.abs(unscaledH), unscaledLabelSize.h) * Math.sign(unscaledH)
 			overShrinkX = Math.abs(nextW) - Math.abs(unscaledW)
 			overShrinkY = Math.abs(nextH) - Math.abs(unscaledH)
 
@@ -629,7 +488,7 @@ 		}
 
 		if (handle === 'left' || handle === 'top_left' || handle === 'bottom_left') {
-			offset.x += scaleX < 0 ? overShrinkX : -overShrinkX
+			offset.x += scaleX < 0 ? overShrinkX * shape.props.scale : -overShrinkX * shape.props.scale
 		}
 
 		// y offsets
@@ -639,7 +498,7 @@ 		}
 
 		if (handle === 'top' || handle === 'top_left' || handle === 'top_right') {
-			offset.y += scaleY < 0 ? overShrinkY : -overShrinkY
+			offset.y += scaleY < 0 ? overShrinkY * shape.props.scale : -overShrinkY * shape.props.scale
 		}
 
 		const { x, y } = offset.rot(shape.rotation).add(newPoint)
@@ -690,7 +549,6 @@ 				...shape,
 				props: {
 					...shape.props,
-					// scale the growY
 					growY: growY * shape.props.scale,
 				},
 			}
@@ -698,6 +556,9 @@ 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
+		const wasEmpty = isEmptyRichText(prev.props.richText)
+		const isEmpty = isEmptyRichText(next.props.richText)
+
 		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
@@ -708,8 +569,6 @@ 		}
 
 		// If we got rid of the text, cancel out any growY from the prev text
-		const wasEmpty = isEmptyRichText(prev.props.richText)
-		const isEmpty = isEmptyRichText(next.props.richText)
 		if (!wasEmpty && isEmpty) {
 			return {
 				...next,
@@ -720,12 +579,10 @@ 			}
 		}
 
-		// Get the prev width and height in unscaled values
 		const unscaledPrevWidth = prev.props.w / prev.props.scale
 		const unscaledPrevHeight = prev.props.h / prev.props.scale
 		const unscaledPrevGrowY = prev.props.growY / prev.props.scale
 
-		// Get the next width and height in unscaled values
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
 		// When entering the first character in a label (not pasting in multiple characters...)
@@ -748,7 +605,6 @@ 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledW * next.props.scale,
 					h: unscaledH * next.props.scale,
 					growY: 0,
@@ -772,7 +628,6 @@ 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					growY: growY * next.props.scale,
 					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
 				},
@@ -784,13 +639,10 @@ 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledNextLabelSize.w * next.props.scale,
 				},
 			}
 		}
-
-		// otherwise, no update needed
 	}
 
 	override onDoubleClick(shape: TLGeoShape) {
@@ -802,7 +654,8 @@ 					return {
 						...shape,
 						props: {
-							geo: 'check-box' as const,
+							...shape.props,
+							geo: 'check-box',
 						},
 					}
 				}
@@ -810,7 +663,8 @@ 					return {
 						...shape,
 						props: {
-							geo: 'rectangle' as const,
+							...shape.props,
+							geo: 'rectangle',
 						},
 					}
 				}
@@ -819,6 +673,7 @@ 
 		return
 	}
+
 	override getInterpolatedProps(
 		startShape: TLGeoShape,
 		endShape: TLGeoShape,
