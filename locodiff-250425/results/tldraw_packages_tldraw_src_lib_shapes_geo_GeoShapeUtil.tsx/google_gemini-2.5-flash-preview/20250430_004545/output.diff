--- tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual)@@ -6,10 +6,8 @@ 	Ellipse2d,
 	Geometry2d,
 	Group2d,
+	HTMLContainer,
 	HALF_PI,
-	HTMLContainer,
-	HandleSnapGeometry,
-	PI2,
 	Polygon2d,
 	Polyline2d,
 	Rectangle2d,
@@ -95,13 +93,14 @@ 		}
 	}
 
-	override getGeometry(shape: TLGeoShape) {
+	override getGeometry(shape: TLGeoShape): Geometry2d {
 		const w = Math.max(1, shape.props.w)
 		const h = Math.max(1, shape.props.h + shape.props.growY)
 		const cx = w / 2
 		const cy = h / 2
 
 		const isFilled = shape.props.fill !== 'none'
+		// || renderPlaintextFromRichText(this.editor, shape.props.richText).length > 0
 
 		let body: Geometry2d
 
@@ -326,10 +325,10 @@ 			}
 		}
 
-		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
+
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
+		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
 		const unscaledMinHeight = Math.min(
 			LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2,
@@ -378,7 +377,7 @@ 		})
 	}
 
-	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
+	override getHandleSnapGeometry(shape: TLGeoShape) {
 		const geometry = this.getGeometry(shape)
 		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
@@ -498,13 +497,16 @@ 				return <path d={geometry.getSvgPathData(true)} />
 			}
 			case 'cloud': {
-				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
+				return <path d={getCloudPath(w, h, id, size, props.scale)} />
 			}
 
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
+				// Get the outline of the geometry's body (the shape itself)
 				const outline =
-					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
+					geometry instanceof Group2d
+						? (geometry.children[0] as Polygon2d).vertices
+						: geometry.vertices
+
 				let path: string
 
 				if (props.dash === 'draw') {
@@ -559,7 +561,7 @@ 					richText={props.richText}
 					labelColor={theme[props.labelColor].solid}
 					bounds={bounds}
-					padding={LABEL_PADDING * shape.props.scale}
+					padding={LABEL_PADDING}
 				/>
 			)
 		}
