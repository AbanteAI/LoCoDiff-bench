--- tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual)@@ -12,10 +12,6 @@ 	PI2,
 	Polygon2d,
 	Polyline2d,
-	Rectangle2d,
-	SVGContainer,
-	Stadium2d,
-	SvgExportContext,
 	TLFontFace,
 	TLGeoShape,
 	TLGeoShapeProps,
@@ -35,7 +31,6 @@ 
 import isEqual from 'lodash.isequal'
 import {
-	isEmptyRichText,
 	renderHtmlFromRichTextForMeasurement,
 	renderPlaintextFromRichText,
 } from '../../utils/text/richText'
@@ -48,7 +43,10 @@ 	STROKE_SIZES,
 	TEXT_PROPS,
 } from '../shared/default-shape-constants'
-import { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'
+import {
+	getFillDefForCanvas,
+	getFillDefForExport,
+} from '../shared/defaultStyleDefs'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { useIsReadyForEditing } from '../shared/useEditablePlainText'
 import { GeoShapeBody } from './components/GeoShapeBody'
@@ -75,7 +73,7 @@ 		return true
 	}
 
-	override getDefaultProps(): TLGeoShape['props'] {
+	getDefaultProps(): TLGeoShape['props'] {
 		return {
 			w: 100,
 			h: 100,
@@ -326,7 +324,7 @@ 			}
 		}
 
-		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
+		const unscaledLabelSize = getUnscaledLabelSize(this.editor, shape)
 		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
@@ -338,11 +336,11 @@ 
 		const unscaledLabelWidth = Math.min(
 			unscaledW,
-			Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
+			Math.max(unscaledLabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
 		)
 		const unscaledLabelHeight = Math.min(
 			unscaledH,
-			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
+			Math.max(unscaledLabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
 		// not sure if bug
@@ -435,9 +433,15 @@ 			[editor]
 		)
 		const isReadyForEditing = useIsReadyForEditing(editor, shape.id)
-		const isEmpty = isEmptyRichText(shape.props.richText)
-		const showHtmlContainer = isReadyForEditing || !isEmpty
-		const isForceSolid = useValue('force solid', () => editor.getZoomLevel() < 0.2, [editor])
+		const plaintext = renderPlaintextFromRichText(this.editor, shape.props.richText)
+		const showHtmlContainer = isReadyForEditing || !!plaintext.length
+		const isForceSolid = useValue(
+			'force solid',
+			() => {
+				return editor.getZoomLevel() < 0.2
+			},
+			[editor]
+		)
 
 		return (
 			<>
@@ -469,12 +473,14 @@ 						/>
 					</HTMLContainer>
 				)}
-				{shape.props.url && <HyperlinkButton url={shape.props.url} />}
+				{shape.props.url && (
+					<HyperlinkButton url={shape.props.url} />
+				)}
 			</>
 		)
 	}
 
-	indicator(shape: TLGeoShape) {
+	override indicator(shape: TLGeoShape) {
 		const { id, props } = shape
 		const { w, size } = props
 		const h = props.h + props.growY
@@ -486,7 +492,7 @@ 		switch (props.geo) {
 			case 'ellipse': {
 				if (props.dash === 'draw') {
-					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
+					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth * shape.props.scale)} />
 				}
 
 				return <path d={geometry.getSvgPathData(true)} />
@@ -533,6 +539,7 @@ 		}
 	}
 
+	@Override
 	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
 		// We need to scale the shape to 1x for export
 		const newShape = {
@@ -547,7 +554,7 @@ 		ctx.addExportDef(getFillDefForExport(props.fill))
 
 		let textEl
-		if (!isEmptyRichText(props.richText)) {
+		if (renderPlaintextFromRichText(this.editor, props.richText)) {
 			const theme = getDefaultColorTheme(ctx)
 			const bounds = new Box(0, 0, props.w, props.h + props.growY)
 			textEl = (
@@ -576,10 +583,16 @@ 		return [getFillDefForCanvas()]
 	}
 
+	override onEditEnd(shape: TLGeoShape) {
+		// Method signature changed by f05d102c
+		// No-op body keeps the shape's richText as keyed by the editor
+	}
+
 	override onResize(
 		shape: TLGeoShape,
 		{ handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>
 	) {
+		// Signature changed by f05d102c
 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
@@ -590,9 +603,9 @@ 		let overShrinkX = 0
 		let overShrinkY = 0
 
-		const min = MIN_SIZE_WITH_LABEL
-
-		if (!isEmptyRichText(shape.props.richText)) {
+
+		if (renderPlaintextFromRichText(this.editor, shape.props.richText)) {
+			const min = MIN_SIZE_WITH_LABEL
 			let newW = Math.max(Math.abs(unscaledW), min)
 			let newH = Math.max(Math.abs(unscaledH), min)
 
@@ -656,7 +669,8 @@ 	}
 
 	override onBeforeCreate(shape: TLGeoShape) {
-		if (isEmptyRichText(shape.props.richText)) {
+		// Signature changed by f05d102c
+		if (!renderPlaintextFromRichText(this.editor, shape.props.richText)) {
 			if (shape.props.growY) {
 				// No text / some growY, set growY to 0
 				return {
@@ -698,6 +712,7 @@ 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
+		// Signature changed by f05d102c
 		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
@@ -708,9 +723,9 @@ 		}
 
 		// If we got rid of the text, cancel out any growY from the prev text
-		const wasEmpty = isEmptyRichText(prev.props.richText)
-		const isEmpty = isEmptyRichText(next.props.richText)
-		if (!wasEmpty && isEmpty) {
+		const prevPlaintext = renderPlaintextFromRichText(this.editor, prev.props.richText)
+		const nextPlaintext = renderPlaintextFromRichText(this.editor, next.props.richText)
+		if (prevPlaintext && !nextPlaintext) {
 			return {
 				...next,
 				props: {
@@ -729,7 +744,7 @@ 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
 		// When entering the first character in a label (not pasting in multiple characters...)
-		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
+		if (!prevPlaintext && nextPlaintext && nextPlaintext.length === 1) {
 			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
 			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
 
@@ -819,6 +834,7 @@ 
 		return
 	}
+
 	override getInterpolatedProps(
 		startShape: TLGeoShape,
 		endShape: TLGeoShape,
@@ -836,7 +852,7 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 	const { richText, font, size, w } = shape.props
 
-	if (!richText || isEmptyRichText(richText)) {
+	if (!richText || !renderPlaintextFromRichText(editor, richText)) {
 		return { w: 0, h: 0 }
 	}
 
