Here's a comprehensive summary of the changes to `packages/tldraw/src/lib/shapes/geo/GeoShapeUtil.tsx` throughout the development history:

## Evolution of GeoShapeUtil

### Initial Creation (July 17, 2023)
The file was created as part of a major package shuffle, consolidating code from various packages into the main tldraw package. The initial implementation included:
- Basic geometry utilities for various geo shapes (rectangle, ellipse, cloud, star, etc.)
- Bounds calculations, hit testing, and outline generation
- Text label support with padding and size calculations
- Component rendering for both shapes and text labels
- SVG export functionality

### Major Changes

#### July-September 2023: Multiple Improvements
1. **Selection and Hit Testing Rewrite**: Replaced geometric helpers with a new `Geometry2d` API, improving selection logic and fixing bugs around shape selection, especially for hollow shapes and text labels.

2. **Dynamic Shape Improvements**: Fixed text label alignment issues, particularly on Android devices, by wrapping components in an `HTMLContainer`.

3. **Performance Optimizations**: Reduced DOM elements for empty geo shapes (from 7 to 4 nodes) by conditionally rendering HTML containers.

#### December 2023 - January 2024: Type System and Naming
1. **Primitive Type Renaming**: Major refactoring renamed `Vec2d` to `Vec`, `Box2d` to `Box`, etc., as part of a broader cleanup effort.

2. **Bounds Calculation Fix**: Fixed polygon bounds calculations that were causing label centering issues.

#### February-March 2024: Rendering and Performance
1. **React-powered SVG Exports**: Replaced manual SVG DOM construction with React components, simplifying the codebase significantly.

2. **Snap Handling**: Improved snapping behavior for geo shapes, making them snap to actual vertices rather than bounding box corners.

#### May 2024: Heart Shape Addition
Added a heart shape to the geo shape set with proper path calculations and rendering support.

#### June 2024: Dynamic Size Mode
Introduced a dynamic size mode where shape properties (text size, stroke width) scale relative to zoom level, including proper handling of min/max sizes.

#### July 2024: API Modernization
Converted from function properties to methods (e.g., `canEdit = () => true` became `canEdit() { return true }`), following modern JavaScript patterns.

#### March 2025: Rich Text Support
Major feature addition replacing plain text with rich text support using TipTap:
- Replaced `text` prop with `richText` prop using TipTap's JSON format
- Added `RichTextLabel` and `RichTextSVG` components
- Implemented proper rich text measurement and rendering
- Added font face support for rich text

### Key Technical Features

1. **Geometry System**: Uses `Geometry2d` classes (Polygon2d, Ellipse2d, Stadium2d, etc.) for unified geometry handling
2. **Performance Optimizations**: Conditional rendering, memoization, and efficient DOM updates
3. **Accessibility**: Proper label handling with alignment options
4. **Export Support**: Full SVG export with proper styling and text rendering
5. **Rich Interaction**: Support for URL links, text editing, and dynamic resizing

The file has evolved from a basic shape utility to a sophisticated component handling complex geometry, performance optimizations, and rich text editing capabilities.