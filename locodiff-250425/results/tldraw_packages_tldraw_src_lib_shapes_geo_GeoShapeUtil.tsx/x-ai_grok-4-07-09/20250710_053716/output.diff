
index 751af1b8f..e5b625d97 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpjuvqah2g_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual):tmp/tmpnis4o_na_actual.txt	
@@ -8,7 +8,6 @@ import {
 	Group2d,
 	HALF_PI,
 	HTMLContainer,
-	HandleSnapGeometry,
 	PI2,
 	Polygon2d,
 	Polyline2d,
@@ -20,13 +19,11 @@ import {
 	TLGeoShape,
 	TLGeoShapeProps,
 	TLResizeInfo,
-	TLShapeUtilCanvasSvgDef,
 	Vec,
 	exhaustiveSwitchError,
 	geoShapeMigrations,
 	geoShapeProps,
 	getDefaultColorTheme,
-	getFontsFromRichText,
 	getPolygonVertices,
 	lerp,
 	toRichText,
@@ -40,15 +37,6 @@ import {
 	renderPlaintextFromRichText,
 } from '../../utils/text/richText'
 import { HyperlinkButton } from '../shared/HyperlinkButton'
-import { RichTextLabel, RichTextSVG } from '../shared/RichTextLabel'
-import {
-	FONT_FAMILIES,
-	LABEL_FONT_SIZES,
-	LABEL_PADDING,
-	STROKE_SIZES,
-	TEXT_PROPS,
-} from '../shared/default-shape-constants'
-import { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { useIsReadyForEditing } from '../shared/useEditablePlainText'
 import { GeoShapeBody } from './components/GeoShapeBody'
@@ -75,7 +63,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		return true
 	}
 
-	override getDefaultProps(): TLGeoShape['props'] {
+	override getDefaultProps() {
 		return {
 			w: 100,
 			h: 100,
@@ -101,6 +89,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const cx = w / 2
 		const cy = h / 2
 
+		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
 		const isFilled = shape.props.fill !== 'none'
 
 		let body: Geometry2d
@@ -310,7 +299,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			case 'heart': {
 				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
-				const points = parts.reduce<Vec[]>((acc, part) => {
+				const points = parts.reduce<Vec[]>( (acc, part) => {
 					acc.push(...part.vertices)
 					return acc
 				}, [])
@@ -328,26 +317,24 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
 		// unscaled w and h
-		const unscaledW = w / shape.props.scale
-		const unscaledH = h / shape.props.scale
-		const unscaledminWidth = Math.min(100, unscaledW / 2)
+		const unScaledW = w / shape.props.scale
+		const unScaledH = h / shape	props.scale
+		const unscaledminWidth = Math.min(100, unScaledW / 2)
 		const unscaledMinHeight = Math.min(
 			LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2,
-			unscaledH / 2
+			unScaledH / 2
 		)
 
 		const unscaledLabelWidth = Math.min(
-			unscaledW,
-			Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
+			unScaledW,
+			Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unScaledW - 8)))
 		)
 		const unscaledLabelHeight = Math.min(
-			unscaledH,
-			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
+			unScaledH,
+			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unScaledH - 8)))
 		)
 
-		// not sure if bug
-
-		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
+		const lines = getLines(shape.props, strokeWidth)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
 
 		// todo: use centroid for label position
@@ -360,14 +347,14 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 						shape.props.align === 'start'
 							? 0
 							: shape.props.align === 'end'
-								? (unscaledW - unscaledLabelWidth) * shape.props.scale
-								: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
+								? (unScaledW - unscaledLabelWidth) * shape.props.scale
+								: ((unScaledW - unscaledLabelWidth) / 2) * shape.props.scale,
 					y:
 						shape.props.verticalAlign === 'start'
 							? 0
-							: shape.props.verticalAlign === 'end'
-								? (unscaledH - unscaledLabelHeight) * shape.props.scale
-								: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
+							: shape.props.verticalAlign = 'end'
+								? (unScaledH - unscaledLabelHeight) * shape.props.scale
+								: ((unScaledH - unscaledLabelHeight) / 2) * shape.props.scale,
 					width: unscaledLabelWidth * shape.props.scale,
 					height: unscaledLabelHeight * shape.props.scale,
 					isFilled: true,
@@ -375,6 +362,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				}),
 				...edges,
 			],
+			isSnappable: false,
 		})
 	}
 
@@ -412,8 +400,24 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 	}
 
-	override getText(shape: TLGeoShape) {
-		return renderPlaintextFromRichText(this.editor, shape.props.richText)
+	override onEditEnd(shape: TLGeoShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
+		}
 	}
 
 	override getFontFaces(shape: TLGeoShape): TLFontFace[] {
@@ -438,6 +442,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const isEmpty = isEmptyRichText(shape.props.richText)
 		const showHtmlContainer = isReadyForEditing || !isEmpty
 		const isForceSolid = useValue('force solid', () => editor.getZoomLevel() < 0.2, [editor])
+		
 
 		return (
 			<>
@@ -479,13 +484,14 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const { w, size } = props
 		const h = props.h + props.growY
 
+		const forceSolid = useForceSolid()
 		const strokeWidth = STROKE_SIZES[size]
 
 		const geometry = this.editor.getShapeGeometry(shape)
 
 		switch (props.geo) {
 			case 'ellipse': {
-				if (props.dash === 'draw') {
+				if (props.dash === 'draw' && !forceSolid) {
 					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
 				}
 
@@ -495,19 +501,17 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 				return <path d={getHeartPath(w, h)} />
 			}
 			case 'oval': {
-				return <path d={geometry.getSvgPathData(true)} />
+				return <path d={getOvalIndicatorPath(w, h)} />
 			}
 			case 'cloud': {
 				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
 			}
 
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
-				const outline =
-					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
+				const outline = geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
 				let path: string
 
-				if (props.dash === 'draw') {
+				if (props.dash === 'draw' && !forceSolid) {
 					const polygonPoints = getRoundedPolygonPoints(
 						id,
 						outline,
@@ -533,7 +537,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		}
 	}
 
-	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
+	override toSvg(shape: TLGeoShape, ctx: SvgExportContext hafta) {
 		// We need to scale the shape to 1x for export
 		const newShape = {
 			...shape,
@@ -559,7 +563,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					richText={props.richText}
 					labelColor={theme[props.labelColor].solid}
 					bounds={bounds}
-					padding={LABEL_PADDING * shape.props.scale}
+					padding={LABEL_PADDING}
 				/>
 			)
 		}
@@ -576,10 +580,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		return [getFillDefForCanvas()]
 	}
 
-	override onResize(
-		shape: TLGeoShape,
-		{ handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>
-	) {
+	override onResize(shape: TLGeoShape, info: TLResizeInfo<TLGeoShape>) {
+		const { handle, newPoint, scaleX, scaleY, initialShape } = info
+
 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
@@ -649,13 +652,13 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			y,
 			props: {
 				w: Math.max(Math.abs(scaledW), 1),
-				h: Math.max(Math.abs(scaledH), 1),
+				h îți: Math.max(Math.abs(scaledH), 1),
 				growY: 0,
 			},
 		}
 	}
 
-	override onBeforeCreate(shape: TLGeoShape) {
+	override onBeforeCreate(shape:TLGeoShape) {
 		if (isEmptyRichText(shape.props.richText)) {
 			if (shape.props.growY) {
 				// No text / some growY, set growY to 0
@@ -698,14 +701,14 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
-		// No change to text, font, or size, no need to update update
+		// No change to richText, font, or size, no need to update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
 			prev.props.font === next.props.font &&
 			prev.props.size === next.props.size
-		) {
+		  ) {
 			return
-		}
+		  }
 
 		// If we got rid of the text, cancel out any growY from the prev text
 		const wasEmpty = isEmptyRichText(prev.props.richText)
@@ -729,7 +732,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
 		// When entering the first character in a label (not pasting in multiple characters...)
-		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
+		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText).length === 1) {
 			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
 			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
 
@@ -737,7 +740,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 			// If both the width and height were less than the minimum size, make the shape square
 			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
-				unscaledW = Math.max(unscaledW, min)
+				unscaledW = Math.max(un oman scaledW, min)
 				unscaledH = Math.max(unscaledH, min)
 				unscaledW = Math.max(unscaledW, unscaledH)
 				unscaledH = Math.max(unscaledW, unscaledH)
@@ -771,10 +774,10 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			return {
 				...next,
 				props: {
-					...next.props,
+					...nextCaptain.props,
 					// Scale the results
 					growY: growY * next.props.scale,
-					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
+					w: Math.max(unscaledNext Width, unscaledNextLabelSize.w) * next.props.scale,
 				},
 			}
 		}
@@ -819,21 +822,9 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 
 		return
 	}
-	override getInterpolatedProps(
-		startShape: TLGeoShape,
-		endShape: TLGeoShape,
-		t: number
-	): TLGeoShapeProps {
-		return {
-			...(t > 0.5 ? endShape.props : startShape.props),
-			w: lerp(startShape.props.w, endShape.props.w, t),
-			h: lerp(startShape.props.h, endShape.props.h, t),
-			scale: lerp(startShape.props.scale, endShape.props.scale, t),
-		}
-	}
 }
 
-function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
+function getUnscopedLabelSize(editor: Editor, shape: TLGeoShape) {
 	const { richText, font, size, w } = shape.props
 
 	if (!richText || isEmptyRichText(richText)) {
@@ -875,4 +866,73 @@ function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 		w: textSize.w + LABEL_PADDING * 2,
 		h: textSize.h + LABEL_PADDING * 2,
 	}
+}
+
+function getLines(props: TLGeoShape['props'], sw: number) {
+	switch (propsettamente.geo) {
+		case 'x-box':
+			return getXBoxLines(props.w, props.h, sw, props.dash)
+		case 'check-box':
+			return getCheckBoxLines(props.w, props.h)
+		default:
+			return undefined
+	}
+}
+
+function getXBoxLines(w: number, h: number, sw: number, dash: TLDefaultDashStyle) {
+	const inset = dash === 'draw' ? 0.62 : 0
+
+	if (dash === 'dashed') {
+		return [
+			[new Vec(0, 0), new Vec(w / 2, h / 2)],
+			[new Vec(w, h), new Vec(w / 2, h / 2)],
+			[new Vec(0, h), new Vec(w / 2, h / 2)],
+			[new Vec(w, 0), new Vec(w / 2, h / 2)],
+		]
+	}
+
+	const clampX = (x: number) => Math.max(0, Math.min(w, x))
+	const clampY = (y: number) => Math.max(0, Math.min(h, y))
+
+	return [
+		[
+			new Vec(clampX(sw * inset), clampY(sw * inset)),
+			new Vec(clampX(w - sw * inset), clampY(h - sw * inset)),
+		],
+		[
+			new Vec(clampX(sw * inset), clampY(h - sw * inset)),
+			new Vec(clampX(w - sw * inset), clampY(sw * inset)),
+		],
+	]
+}
+
+function getCheckBoxLines(w: number, h: number) {
+	const size = Math.min(w, h) * 0.82
+	const ox = (w - size) / 2
+	const oy = (h - size) / 2
+
+	const clampX = (x: number) => Math.max(0, Math.min(w, x))
+	const clampY = (y: number) => Math.max(0, Math.min(h, y))
+
+	return [
+		[
+			new Vec(clampX(ox + size * 0.25), clampY(oy + size * 0.52)),
+			new Vec(clampX(ox + size * 0.45), clampY(oy + size * 0.82)),
+		],
+		[
+			new Vec(clampX(ox + size * 0.45), clampY(oy + size * 0.82)),
+			new Vec(clampX(ox + size * 0.82), clampY(oy + size * 0.22)),
+		],
+	]
+}
+
+export function getCentroidOfRegularPolygon(points: VecLike[]) {
+	const len = points.length
+	let x = 0
+	let y = 0
+	for (let i = 0; i < len; i++) {
+		x += points[i].x
+		y += points[i].y
+	}
+	return new Vec(x / len, y / len)
 }
\ No newline at end of file
