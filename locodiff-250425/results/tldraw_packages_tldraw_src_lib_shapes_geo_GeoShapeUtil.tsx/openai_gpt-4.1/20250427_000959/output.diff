--- tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual)@@ -8,7 +8,6 @@ 	Group2d,
 	HALF_PI,
 	HTMLContainer,
-	HandleSnapGeometry,
 	PI2,
 	Polygon2d,
 	Polyline2d,
@@ -95,7 +94,7 @@ 		}
 	}
 
-	override getGeometry(shape: TLGeoShape) {
+	override getGeometry(shape: TLGeoShape): Geometry2d {
 		const w = Math.max(1, shape.props.w)
 		const h = Math.max(1, shape.props.h + shape.props.growY)
 		const cx = w / 2
@@ -165,10 +164,6 @@ 				break
 			}
 			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
 				const sides = 5
 				const step = PI2 / sides / 2
 				const rightMostIndex = Math.floor(sides / 4) * 2
@@ -308,7 +303,6 @@ 				break
 			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
 				const points = parts.reduce<Vec[]>((acc, part) => {
 					acc.push(...part.vertices)
@@ -327,7 +321,6 @@ 		}
 
 		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
 		const unscaledminWidth = Math.min(100, unscaledW / 2)
@@ -345,12 +338,8 @@ 			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
 		)
 
-		// not sure if bug
-
 		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
-
-		// todo: use centroid for label position
 
 		return new Group2d({
 			children: [
@@ -378,7 +367,7 @@ 		})
 	}
 
-	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
+	override getHandleSnapGeometry(shape: TLGeoShape) {
 		const geometry = this.getGeometry(shape)
 		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
@@ -424,6 +413,26 @@ 		})
 	}
 
+	override onEditEnd(shape: TLGeoShape) {
+		const {
+			id,
+			type,
+			props: { text },
+		} = shape
+
+		if (text.trimEnd() !== shape.props.text) {
+			this.editor.updateShapes([
+				{
+					id,
+					type,
+					props: {
+						text: text.trimEnd(),
+					},
+				},
+			])
+		}
+	}
+
 	component(shape: TLGeoShape) {
 		const { id, type, props } = shape
 		const { fill, font, align, verticalAlign, size, richText } = props
@@ -466,6 +475,7 @@ 							isSelected={isOnlySelected}
 							labelColor={theme[props.labelColor].solid}
 							wrap
+							bounds={props.geo === 'cloud' ? this.getGeometry(shape).bounds : undefined}
 						/>
 					</HTMLContainer>
 				)}
@@ -479,7 +489,7 @@ 		const { w, size } = props
 		const h = props.h + props.growY
 
-		const strokeWidth = STROKE_SIZES[size]
+		const strokeWidth = STROKE_SIZES[size] * shape.props.scale
 
 		const geometry = this.editor.getShapeGeometry(shape)
 
@@ -502,7 +512,6 @@ 			}
 
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
 				const outline =
 					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
 				let path: string
@@ -736,6 +745,7 @@ 			const min = MIN_SIZE_WITH_LABEL
 
 			// If both the width and height were less than the minimum size, make the shape square
+
 			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
 				unscaledW = Math.max(unscaledW, min)
 				unscaledH = Math.max(unscaledH, min)
