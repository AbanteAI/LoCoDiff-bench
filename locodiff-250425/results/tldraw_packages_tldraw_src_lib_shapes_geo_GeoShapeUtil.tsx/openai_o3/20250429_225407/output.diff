--- tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual)@@ -12,7 +12,6 @@ 	PI2,
 	Polygon2d,
 	Polyline2d,
-	Rectangle2d,
 	SVGContainer,
 	Stadium2d,
 	SvgExportContext,
@@ -32,7 +31,6 @@ 	toRichText,
 	useValue,
 } from '@tldraw/editor'
-
 import isEqual from 'lodash.isequal'
 import {
 	isEmptyRichText,
@@ -95,12 +93,15 @@ 		}
 	}
 
+	// ----------------------------- Geometry -----------------------------
+
 	override getGeometry(shape: TLGeoShape) {
 		const w = Math.max(1, shape.props.w)
 		const h = Math.max(1, shape.props.h + shape.props.growY)
 		const cx = w / 2
 		const cy = h / 2
 
+		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
 		const isFilled = shape.props.fill !== 'none'
 
 		let body: Geometry2d
@@ -165,10 +166,6 @@ 				break
 			}
 			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
 				const sides = 5
 				const step = PI2 / sides / 2
 				const rightMostIndex = Math.floor(sides / 4) * 2
@@ -186,19 +183,17 @@ 				const offsetY = h / 2 + minY - (h / 2 - maxY)
 
 				const ratio = 1
-				const cx = (w - offsetX) / 2
-				const cy = (h - offsetY) / 2
 				const ox = (w + diffX) / 2
 				const oy = (h + diffY) / 2
 				const ix = (ox * ratio) / 2
 				const iy = (oy * ratio) / 2
 
 				body = new Polygon2d({
-					points: Array.from(Array(sides * 2)).map((_, i) => {
+					points: Array.from({ length: sides * 2 }, (_, i) => {
 						const theta = -HALF_PI + i * step
 						return new Vec(
-							cx + (i % 2 ? ix : ox) * Math.cos(theta),
-							cy + (i % 2 ? iy : oy) * Math.sin(theta)
+							offsetX + (i % 2 ? ix : ox) * Math.cos(theta),
+							offsetY + (i % 2 ? iy : oy) * Math.sin(theta)
 						)
 					}),
 					isFilled,
@@ -300,25 +295,16 @@ 			case 'check-box':
 			case 'x-box':
 			case 'rectangle': {
-				body = new Rectangle2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
+				body = new Box(0, 0, w, h)
 				break
 			}
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
-				const points = parts.reduce<Vec[]>((acc, part) => {
-					acc.push(...part.vertices)
-					return acc
-				}, [])
-
-				body = new Polygon2d({
-					points,
-					isFilled,
-				})
+				const points: Vec[] = []
+				for (const p of parts) {
+					points.push(...p.vertices)
+				}
+				body = new Polygon2d({ points, isFilled })
 				break
 			}
 			default: {
@@ -326,61 +312,50 @@ 			}
 		}
 
-		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
-		const unscaledW = w / shape.props.scale
-		const unscaledH = h / shape.props.scale
-		const unscaledminWidth = Math.min(100, unscaledW / 2)
-		const unscaledMinHeight = Math.min(
-			LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2,
-			unscaledH / 2
+		const labelSize = getLabelSize(this.editor, shape)
+		const minWidth = Math.min(100, w / 2)
+		const minHeight = Math.min(
+			LABEL_FONT_SIZES[shape.props.size] * shape.props.scale * TEXT_PROPS.lineHeight +
+				LABEL_PADDING * 2,
+			h / 2
 		)
 
-		const unscaledLabelWidth = Math.min(
-			unscaledW,
-			Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
+		const labelWidth = Math.min(w, Math.max(labelSize.w, Math.min(minWidth, Math.max(1, w - 8))))
+		const labelHeight = Math.min(
+			h,
+			Math.max(labelSize.h, Math.min(minHeight, Math.max(1, w - 8)))
 		)
-		const unscaledLabelHeight = Math.min(
-			unscaledH,
-			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
-		)
-
-		// not sure if bug
-
-		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
+
+		const lines = getLines(shape.props, strokeWidth)
 		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
-
-		// todo: use centroid for label position
 
 		return new Group2d({
 			children: [
 				body,
-				new Rectangle2d({
-					x:
-						shape.props.align === 'start'
-							? 0
-							: shape.props.align === 'end'
-								? (unscaledW - unscaledLabelWidth) * shape.props.scale
-								: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
-					y:
-						shape.props.verticalAlign === 'start'
-							? 0
-							: shape.props.verticalAlign === 'end'
-								? (unscaledH - unscaledLabelHeight) * shape.props.scale
-								: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
-					width: unscaledLabelWidth * shape.props.scale,
-					height: unscaledLabelHeight * shape.props.scale,
-					isFilled: true,
-					isLabel: true,
-				}),
+				new Box(
+					shape.props.align === 'start'
+						? 0
+						: shape.props.align === 'end'
+						? w - labelWidth
+						: (w - labelWidth) / 2,
+					shape.props.verticalAlign === 'start'
+						? 0
+						: shape.props.verticalAlign === 'end'
+						? h - labelHeight
+						: (h - labelHeight) / 2,
+					labelWidth,
+					labelHeight,
+					{ isFilled: true, isLabel: true }
+				),
 				...edges,
 			],
 		})
 	}
 
+	// --------------------------- Snap geometry --------------------------
+
 	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
 		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
 		const outline = geometry.children[0]
 		switch (shape.props.geo) {
 			case 'arrow-down':
@@ -399,18 +374,18 @@ 			case 'trapezoid':
 			case 'triangle':
 			case 'x-box':
-				// poly-line type shapes hand snap points for each vertex & the center
-				return { outline: outline, points: [...outline.vertices, geometry.bounds.center] }
+				return { outline, points: [...outline.vertices, geometry.bounds.center] }
 			case 'cloud':
 			case 'ellipse':
 			case 'heart':
 			case 'oval':
-				// blobby shapes only have a snap point in their center
-				return { outline: outline, points: [geometry.bounds.center] }
+				return { outline, points: [geometry.bounds.center] }
 			default:
 				exhaustiveSwitchError(shape.props.geo)
 		}
 	}
+
+	// ------------------------------- Text -------------------------------
 
 	override getText(shape: TLGeoShape) {
 		return renderPlaintextFromRichText(this.editor, shape.props.richText)
@@ -423,6 +398,14 @@ 			style: 'normal',
 		})
 	}
+
+	// ----------------------------- Lifecycle ----------------------------
+
+	override onEditEnd(shape: TLGeoShape) {
+		// intentionally empty for geo
+	}
+
+	// ------------------------------ Render ------------------------------
 
 	component(shape: TLGeoShape) {
 		const { id, type, props } = shape
@@ -479,16 +462,14 @@ 		const { w, size } = props
 		const h = props.h + props.growY
 
-		const strokeWidth = STROKE_SIZES[size]
-
 		const geometry = this.editor.getShapeGeometry(shape)
+		const strokeWidth = STROKE_SIZES[size] * props.scale
 
 		switch (props.geo) {
 			case 'ellipse': {
 				if (props.dash === 'draw') {
 					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
 				}
-
 				return <path d={geometry.getSvgPathData(true)} />
 			}
 			case 'heart': {
@@ -498,11 +479,9 @@ 				return <path d={geometry.getSvgPathData(true)} />
 			}
 			case 'cloud': {
-				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
-			}
-
+				return <path d={getCloudPath(w, h, id, size, props.scale)} />
+			}
 			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
 				const outline =
 					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
 				let path: string
@@ -512,7 +491,7 @@ 						id,
 						outline,
 						0,
-						strokeWidth * 2 * shape.props.scale,
+						strokeWidth * 2,
 						1
 					)
 					path = getRoundedInkyPolygonPath(polygonPoints)
@@ -533,8 +512,9 @@ 		}
 	}
 
+	// ------------------------------ Export ------------------------------
+
 	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
-		// We need to scale the shape to 1x for export
 		const newShape = {
 			...shape,
 			props: {
@@ -559,7 +539,7 @@ 					richText={props.richText}
 					labelColor={theme[props.labelColor].solid}
 					bounds={bounds}
-					padding={LABEL_PADDING * shape.props.scale}
+					padding={LABEL_PADDING}
 				/>
 			)
 		}
@@ -572,9 +552,13 @@ 		)
 	}
 
+	// ------------------------------ Canvas ------------------------------
+
 	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
 		return [getFillDefForCanvas()]
 	}
+
+	// ------------------------------- Size -------------------------------
 
 	override onResize(
 		shape: TLGeoShape,
@@ -583,8 +567,7 @@ 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
-		// use the w/h from props here instead of the initialBounds here,
-		// since cloud shapes calculated bounds can differ from the props w/h.
+
 		let unscaledW = unscaledInitialW * scaleX
 		let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY
 		let overShrinkX = 0
@@ -601,11 +584,7 @@ 
 			const unscaledLabelSize = getUnscaledLabelSize(this.editor, {
 				...shape,
-				props: {
-					...shape.props,
-					w: newW * shape.props.scale,
-					h: newH * shape.props.scale,
-				},
+				props: { ...shape.props, w: newW * shape.props.scale, h: newH * shape.props.scale },
 			})
 
 			const nextW = Math.max(Math.abs(unscaledW), unscaledLabelSize.w) * Math.sign(unscaledW)
@@ -622,25 +601,13 @@ 
 		const offset = new Vec(0, 0)
 
-		// x offsets
-
-		if (scaleX < 0) {
-			offset.x += scaledW
-		}
-
-		if (handle === 'left' || handle === 'top_left' || handle === 'bottom_left') {
+		if (scaleX < 0) offset.x += scaledW
+		if (handle === 'left' || handle === 'top_left' || handle === 'bottom_left')
 			offset.x += scaleX < 0 ? overShrinkX : -overShrinkX
-		}
-
-		// y offsets
-
-		if (scaleY < 0) {
-			offset.y += scaledH
-		}
-
-		if (handle === 'top' || handle === 'top_left' || handle === 'top_right') {
+
+		if (scaleY < 0) offset.y += scaledH
+		if (handle === 'top' || handle === 'top_left' || handle === 'top_right')
 			offset.y += scaleY < 0 ? overShrinkY : -overShrinkY
-		}
 
 		const { x, y } = offset.rot(shape.rotation).add(newPoint)
 
@@ -655,87 +622,61 @@ 		}
 	}
 
+	// ----------------------------- Creation -----------------------------
+
 	override onBeforeCreate(shape: TLGeoShape) {
 		if (isEmptyRichText(shape.props.richText)) {
 			if (shape.props.growY) {
-				// No text / some growY, set growY to 0
-				return {
-					...shape,
-					props: {
-						...shape.props,
-						growY: 0,
-					},
-				}
-			} else {
-				// No text / no growY, nothing to change
-				return
-			}
+				return { ...shape, props: { ...shape.props, growY: 0 } }
+			}
+			return
 		}
 
 		const unscaledPrevHeight = shape.props.h / shape.props.scale
 		const unscaledNextHeight = getUnscaledLabelSize(this.editor, shape).h
-
 		let growY: number | null = null
 
 		if (unscaledNextHeight > unscaledPrevHeight) {
 			growY = unscaledNextHeight - unscaledPrevHeight
-		} else {
-			if (shape.props.growY) {
-				growY = 0
-			}
+		} else if (shape.props.growY) {
+			growY = 0
 		}
 
 		if (growY !== null) {
 			return {
 				...shape,
-				props: {
-					...shape.props,
-					// scale the growY
-					growY: growY * shape.props.scale,
-				},
-			}
-		}
-	}
+				props: { ...shape.props, growY: growY * shape.props.scale },
+			}
+		}
+	}
+
+	// ------------------------------ Update ------------------------------
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
-		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
 			prev.props.font === next.props.font &&
 			prev.props.size === next.props.size
-		) {
+		)
 			return
-		}
-
-		// If we got rid of the text, cancel out any growY from the prev text
+
 		const wasEmpty = isEmptyRichText(prev.props.richText)
 		const isEmpty = isEmptyRichText(next.props.richText)
+
 		if (!wasEmpty && isEmpty) {
-			return {
-				...next,
-				props: {
-					...next.props,
-					growY: 0,
-				},
-			}
-		}
-
-		// Get the prev width and height in unscaled values
+			return { ...next, props: { ...next.props, growY: 0 } }
+		}
+
 		const unscaledPrevWidth = prev.props.w / prev.props.scale
 		const unscaledPrevHeight = prev.props.h / prev.props.scale
 		const unscaledPrevGrowY = prev.props.growY / prev.props.scale
-
-		// Get the next width and height in unscaled values
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
-		// When entering the first character in a label (not pasting in multiple characters...)
 		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
 			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
 			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
-
 			const min = MIN_SIZE_WITH_LABEL
 
-			// If both the width and height were less than the minimum size, make the shape square
 			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
 				unscaledW = Math.max(unscaledW, min)
 				unscaledH = Math.max(unscaledH, min)
@@ -743,12 +684,10 @@ 				unscaledH = Math.max(unscaledW, unscaledH)
 			}
 
-			// Don't set a growY—at least, not until we've implemented a growX property
 			return {
 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					w: unscaledW * next.props.scale,
 					h: unscaledH * next.props.scale,
 					growY: 0,
@@ -760,10 +699,8 @@ 
 		if (unscaledNextLabelSize.h > unscaledPrevHeight) {
 			growY = unscaledNextLabelSize.h - unscaledPrevHeight
-		} else {
-			if (unscaledPrevGrowY) {
-				growY = 0
-			}
+		} else if (unscaledPrevGrowY) {
+			growY = 0
 		}
 
 		if (growY !== null) {
@@ -772,7 +709,6 @@ 				...next,
 				props: {
 					...next.props,
-					// Scale the results
 					growY: growY * next.props.scale,
 					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
 				},
@@ -782,43 +718,25 @@ 		if (unscaledNextLabelSize.w > unscaledPrevWidth) {
 			return {
 				...next,
-				props: {
-					...next.props,
-					// Scale the results
-					w: unscaledNextLabelSize.w * next.props.scale,
-				},
-			}
-		}
-
-		// otherwise, no update needed
-	}
+				props: { ...next.props, w: unscaledNextLabelSize.w * next.props.scale },
+			}
+		}
+	}
+
+	// ------------------------------ Misc ------------------------------
 
 	override onDoubleClick(shape: TLGeoShape) {
-		// Little easter egg: double-clicking a rectangle / checkbox while
-		// holding alt will toggle between check-box and rectangle
 		if (this.editor.inputs.altKey) {
-			switch (shape.props.geo) {
-				case 'rectangle': {
-					return {
-						...shape,
-						props: {
-							geo: 'check-box' as const,
-						},
-					}
-				}
-				case 'check-box': {
-					return {
-						...shape,
-						props: {
-							geo: 'rectangle' as const,
-						},
-					}
-				}
-			}
-		}
-
+			if (shape.props.geo === 'rectangle') {
+				return { ...shape, props: { ...shape.props, geo: 'check-box' } }
+			}
+			if (shape.props.geo === 'check-box') {
+				return { ...shape, props: { ...shape.props, geo: 'rectangle' } }
+			}
+		}
 		return
 	}
+
 	override getInterpolatedProps(
 		startShape: TLGeoShape,
 		endShape: TLGeoShape,
@@ -833,27 +751,20 @@ 	}
 }
 
+// ----------------------- Label measurement helpers -----------------------
+
 function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 	const { richText, font, size, w } = shape.props
-
-	if (!richText || isEmptyRichText(richText)) {
-		return { w: 0, h: 0 }
-	}
+	if (!richText || isEmptyRichText(richText)) return { w: 0, h: 0 }
 
 	const minSize = editor.textMeasure.measureText('w', {
 		...TEXT_PROPS,
 		fontFamily: FONT_FAMILIES[font],
 		fontSize: LABEL_FONT_SIZES[size],
-		maxWidth: 100, // ?
+		maxWidth: 100,
 	})
 
-	// TODO: Can I get these from somewhere?
-	const sizes = {
-		s: 2,
-		m: 3.5,
-		l: 5,
-		xl: 10,
-	}
+	const sizes = { s: 2, m: 3.5, l: 5, xl: 10 }
 
 	const html = renderHtmlFromRichTextForMeasurement(editor, richText)
 	const textSize = editor.textMeasure.measureHtml(html, {
@@ -861,18 +772,12 @@ 		fontFamily: FONT_FAMILIES[font],
 		fontSize: LABEL_FONT_SIZES[size],
 		minWidth: minSize.w,
-		maxWidth: Math.max(
-			// Guard because a DOM nodes can't be less 0
-			0,
-			// A 'w' width that we're setting as the min-width
-			Math.ceil(minSize.w + sizes[size]),
-			// The actual text size
-			Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)
-		),
+		maxWidth: Math.max(0, Math.ceil(minSize.w + sizes[size]), Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)),
 	})
 
-	return {
-		w: textSize.w + LABEL_PADDING * 2,
-		h: textSize.h + LABEL_PADDING * 2,
-	}
+	return { w: textSize.w + LABEL_PADDING * 2, h: textSize.h + LABEL_PADDING * 2 }
+}
+
+function getLabelSize(editor: Editor, shape: TLGeoShape) {
+	return getUnscaledLabelSize(editor, shape) // alias for scaled previous code
 }