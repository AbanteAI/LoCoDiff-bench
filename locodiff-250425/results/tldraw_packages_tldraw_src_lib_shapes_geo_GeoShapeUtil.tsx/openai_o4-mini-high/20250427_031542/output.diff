
index 751af1b8..b80294e7 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp178jgft__expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_geo_GeoShapeUtil.tsx_extracted.txt (actual):tmp/tmplnmjmo7t_actual.txt	
@@ -8,15 +8,9 @@ import {
 	Group2d,
 	HALF_PI,
 	HTMLContainer,
-	HandleSnapGeometry,
-	PI2,
-	Polygon2d,
-	Polyline2d,
-	Rectangle2d,
 	SVGContainer,
 	Stadium2d,
 	SvgExportContext,
-	TLFontFace,
 	TLGeoShape,
 	TLGeoShapeProps,
 	TLResizeInfo,
@@ -26,29 +20,13 @@ import {
 	geoShapeMigrations,
 	geoShapeProps,
 	getDefaultColorTheme,
-	getFontsFromRichText,
 	getPolygonVertices,
 	lerp,
-	toRichText,
 	useValue,
 } from '@tldraw/editor'
 
-import isEqual from 'lodash.isequal'
-import {
-	isEmptyRichText,
-	renderHtmlFromRichTextForMeasurement,
-	renderPlaintextFromRichText,
-} from '../../utils/text/richText'
 import { HyperlinkButton } from '../shared/HyperlinkButton'
 import { RichTextLabel, RichTextSVG } from '../shared/RichTextLabel'
-import {
-	FONT_FAMILIES,
-	LABEL_FONT_SIZES,
-	LABEL_PADDING,
-	STROKE_SIZES,
-	TEXT_PROPS,
-} from '../shared/default-shape-constants'
-import { getFillDefForCanvas, getFillDefForExport } from '../shared/defaultStyleDefs'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { useIsReadyForEditing } from '../shared/useEditablePlainText'
 import { GeoShapeBody } from './components/GeoShapeBody'
@@ -62,8 +40,15 @@ import {
 	getRoundedPolygonPoints,
 } from './geo-shape-helpers'
 import { getLines } from './getLines'
-
-const MIN_SIZE_WITH_LABEL = 17 * 3
+import {
+	FONT_FAMILIES,
+	LABEL_FONT_SIZES,
+	LABEL_PADDING,
+	STROKE_SIZES,
+	TEXT_PROPS,
+} from '../shared/default-shape-constants'
+import isEqual from 'lodash.isequal'
+import { isEmptyRichText, renderHtmlFromRichTextForMeasurement, renderPlaintextFromRichText } from '../../utils/text/richText'
 
 /** @public */
 export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
@@ -91,7 +76,7 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			growY: 0,
 			url: '',
 			scale: 1,
-			richText: toRichText(''),
+			richText: '',
 		}
 	}
 
@@ -101,287 +86,84 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const cx = w / 2
 		const cy = h / 2
 
+		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
 		const isFilled = shape.props.fill !== 'none'
 
-		let body: Geometry2d
+		let body!: Geometry2d
 
 		switch (shape.props.geo) {
-			case 'cloud': {
-				body = new Polygon2d({
-					points: cloudOutline(w, h, shape.id, shape.props.size, shape.props.scale),
-					isFilled,
-				})
-				break
-			}
-			case 'triangle': {
-				body = new Polygon2d({
-					points: [new Vec(cx, 0), new Vec(w, h), new Vec(0, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'diamond': {
-				body = new Polygon2d({
-					points: [new Vec(cx, 0), new Vec(w, cy), new Vec(cx, h), new Vec(0, cy)],
-					isFilled,
-				})
-				break
-			}
-			case 'pentagon': {
-				body = new Polygon2d({
-					points: getPolygonVertices(w, h, 5),
-					isFilled,
-				})
-				break
-			}
-			case 'hexagon': {
-				body = new Polygon2d({
-					points: getPolygonVertices(w, h, 6),
-					isFilled,
-				})
-				break
-			}
-			case 'octagon': {
-				body = new Polygon2d({
-					points: getPolygonVertices(w, h, 8),
-					isFilled,
-				})
-				break
-			}
-			case 'ellipse': {
-				body = new Ellipse2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
-				break
-			}
-			case 'oval': {
-				body = new Stadium2d({
-					width: w,
-					height: h,
-					isFilled,
-				})
-				break
-			}
-			case 'star': {
-				// Most of this code is to offset the center, a 5 point star
-				// will need to be moved downward because from its center [0,0]
-				// it will have a bigger minY than maxY. This is because it'll
-				// have 2 points at the bottom.
-				const sides = 5
-				const step = PI2 / sides / 2
-				const rightMostIndex = Math.floor(sides / 4) * 2
-				const leftMostIndex = sides * 2 - rightMostIndex
-				const topMostIndex = 0
-				const bottomMostIndex = Math.floor(sides / 2) * 2
-				const maxX = (Math.cos(-HALF_PI + rightMostIndex * step) * w) / 2
-				const minX = (Math.cos(-HALF_PI + leftMostIndex * step) * w) / 2
-
-				const minY = (Math.sin(-HALF_PI + topMostIndex * step) * h) / 2
-				const maxY = (Math.sin(-HALF_PI + bottomMostIndex * step) * h) / 2
-				const diffX = w - Math.abs(maxX - minX)
-				const diffY = h - Math.abs(maxY - minY)
-				const offsetX = w / 2 + minX - (w / 2 - maxX)
-				const offsetY = h / 2 + minY - (h / 2 - maxY)
-
-				const ratio = 1
-				const cx = (w - offsetX) / 2
-				const cy = (h - offsetY) / 2
-				const ox = (w + diffX) / 2
-				const oy = (h + diffY) / 2
-				const ix = (ox * ratio) / 2
-				const iy = (oy * ratio) / 2
-
-				body = new Polygon2d({
-					points: Array.from(Array(sides * 2)).map((_, i) => {
-						const theta = -HALF_PI + i * step
-						return new Vec(
-							cx + (i % 2 ? ix : ox) * Math.cos(theta),
-							cy + (i % 2 ? iy : oy) * Math.sin(theta)
-						)
-					}),
-					isFilled,
-				})
-				break
-			}
-			case 'rhombus': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(offset, 0), new Vec(w, 0), new Vec(w - offset, h), new Vec(0, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'rhombus-2': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(0, 0), new Vec(w - offset, 0), new Vec(w, h), new Vec(offset, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'trapezoid': {
-				const offset = Math.min(w * 0.38, h * 0.38)
-				body = new Polygon2d({
-					points: [new Vec(offset, 0), new Vec(w - offset, 0), new Vec(w, h), new Vec(0, h)],
-					isFilled,
-				})
-				break
-			}
-			case 'arrow-right': {
-				const ox = Math.min(w, h) * 0.38
-				const oy = h * 0.16
-				body = new Polygon2d({
-					points: [
-						new Vec(0, oy),
-						new Vec(w - ox, oy),
-						new Vec(w - ox, 0),
-						new Vec(w, h / 2),
-						new Vec(w - ox, h),
-						new Vec(w - ox, h - oy),
-						new Vec(0, h - oy),
+			case 'rectangle':
+			case 'check-box':
+			case 'x-box':
+				body = new Group2d({
+					children: [
+						new Rectangle2d({ width: w, height: h, isFilled }),
+						...(shape.props.geo === 'x-box' ? getLines(shape.props, strokeWidth).map(line => new Polyline2d({ points: line })) : []),
+						...(shape.props.geo === 'check-box' ? getLines(shape.props, strokeWidth).map(line => new Polyline2d({ points: line })) : []),
 					],
-					isFilled,
+					operation: 'union',
+					isSnappable: true,
 				})
 				break
-			}
-			case 'arrow-left': {
-				const ox = Math.min(w, h) * 0.38
-				const oy = h * 0.16
-				body = new Polygon2d({
-					points: [
-						new Vec(ox, 0),
-						new Vec(ox, oy),
-						new Vec(w, oy),
-						new Vec(w, h - oy),
-						new Vec(ox, h - oy),
-						new Vec(ox, h),
-						new Vec(0, h / 2),
-					],
-					isFilled,
-				})
+
+			case 'ellipse':
+				body = new Ellipse2d({ width: w, height: h, isFilled })
 				break
-			}
-			case 'arrow-up': {
-				const ox = w * 0.16
-				const oy = Math.min(w, h) * 0.38
-				body = new Polygon2d({
-					points: [
-						new Vec(w / 2, 0),
-						new Vec(w, oy),
-						new Vec(w - ox, oy),
-						new Vec(w - ox, h),
-						new Vec(ox, h),
-						new Vec(ox, oy),
-						new Vec(0, oy),
-					],
-					isFilled,
-				})
+
+			case 'oval':
+				body = new Stadium2d({ width: w, height: h, isFilled })
 				break
-			}
-			case 'arrow-down': {
-				const ox = w * 0.16
-				const oy = Math.min(w, h) * 0.38
+
+			case 'cloud':
 				body = new Polygon2d({
-					points: [
-						new Vec(ox, 0),
-						new Vec(w - ox, 0),
-						new Vec(w - ox, h - oy),
-						new Vec(w, h - oy),
-						new Vec(w / 2, h),
-						new Vec(0, h - oy),
-						new Vec(ox, h - oy),
-					],
-					isFilled,
-				})
-				break
-			}
-			case 'check-box':
-			case 'x-box':
-			case 'rectangle': {
-				body = new Rectangle2d({
-					width: w,
-					height: h,
+					points: cloudOutline(w, h, shape.id, shape.props.size, shape.props.scale),
 					isFilled,
 				})
 				break
-			}
+
 			case 'heart': {
-				// kind of expensive (creating the primitives to create a different primitive) but hearts are rare and beautiful things
 				const parts = getHeartParts(w, h)
-				const points = parts.reduce<Vec[]>((acc, part) => {
-					acc.push(...part.vertices)
-					return acc
-				}, [])
-
-				body = new Polygon2d({
-					points,
-					isFilled,
-				})
+				const points = parts.flatMap(part => part.vertices)
+				body = new Polygon2d({ points, isFilled })
 				break
 			}
-			default: {
+
+			default:
 				exhaustiveSwitchError(shape.props.geo)
-			}
 		}
 
-		const unscaledlabelSize = getUnscaledLabelSize(this.editor, shape)
-		// unscaled w and h
+		const labelSize = getUnscaledLabelSize(this.editor, shape)
 		const unscaledW = w / shape.props.scale
 		const unscaledH = h / shape.props.scale
-		const unscaledminWidth = Math.min(100, unscaledW / 2)
-		const unscaledMinHeight = Math.min(
-			LABEL_FONT_SIZES[shape.props.size] * TEXT_PROPS.lineHeight + LABEL_PADDING * 2,
-			unscaledH / 2
-		)
-
-		const unscaledLabelWidth = Math.min(
-			unscaledW,
-			Math.max(unscaledlabelSize.w, Math.min(unscaledminWidth, Math.max(1, unscaledW - 8)))
-		)
-		const unscaledLabelHeight = Math.min(
-			unscaledH,
-			Math.max(unscaledlabelSize.h, Math.min(unscaledMinHeight, Math.max(1, unscaledH - 8)))
-		)
+		const unscaledMin = Math.min(100, unscaledW / 2)
+		const unscaledMinH = Math.min(LABEL_FONT_SIZES[shape.props.size] * shape.props.scale * TEXT_PROPS.lineHeight + LABEL_PADDING * 2, unscaledH / 2)
 
-		// not sure if bug
+		const unscaledLabelW = Math.min(unscaledW, Math.max(labelSize.w, Math.min(unscaledMin, Math.max(1, unscaledW - 8))))
+		const unscaledLabelH = Math.min(unscaledH, Math.max(labelSize.h, Math.min(unscaledMinH, Math.max(1, unscaledW - 8))))
 
-		const lines = getLines(shape.props, STROKE_SIZES[shape.props.size] * shape.props.scale)
-		const edges = lines ? lines.map((line) => new Polyline2d({ points: line })) : []
-
-		// todo: use centroid for label position
+		const lines = getLines(shape.props, strokeWidth)
+		const edges = lines ? lines.map(line => new Polyline2d({ points: line })) : []
 
 		return new Group2d({
 			children: [
 				body,
 				new Rectangle2d({
-					x:
-						shape.props.align === 'start'
-							? 0
-							: shape.props.align === 'end'
-								? (unscaledW - unscaledLabelWidth) * shape.props.scale
-								: ((unscaledW - unscaledLabelWidth) / 2) * shape.props.scale,
-					y:
-						shape.props.verticalAlign === 'start'
-							? 0
-							: shape.props.verticalAlign === 'end'
-								? (unscaledH - unscaledLabelHeight) * shape.props.scale
-								: ((unscaledH - unscaledLabelHeight) / 2) * shape.props.scale,
-					width: unscaledLabelWidth * shape.props.scale,
-					height: unscaledLabelHeight * shape.props.scale,
+					x: shape.props.align === 'start' ? 0 : shape.props.align === 'end' ? (unscaledW - unscaledLabelW) * shape.props.scale : ((unscaledW - unscaledLabelW) / 2) * shape.props.scale,
+					y: shape.props.verticalAlign === 'start' ? 0 : shape.props.verticalAlign === 'end' ? (unscaledH - unscaledLabelH) * shape.props.scale : ((unscaledH - unscaledLabelH) / 2) * shape.props.scale,
+					width: unscaledLabelW * shape.props.scale,
+					height: unscaledLabelH * shape.props.scale,
 					isFilled: true,
 					isLabel: true,
 				}),
 				...edges,
 			],
+			isSnappable: false,
 		})
 	}
 
-	override getHandleSnapGeometry(shape: TLGeoShape): HandleSnapGeometry {
+	override getHandleSnapGeometry(shape: TLGeoShape) {
 		const geometry = this.getGeometry(shape)
-		// we only want to snap handles to the outline of the shape - not to its label etc.
-		const outline = geometry.children[0]
+		const outline = (geometry as Group2d).children[0] as Polygon2d
 		switch (shape.props.geo) {
 			case 'arrow-down':
 			case 'arrow-left':
@@ -400,43 +182,27 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			case 'triangle':
 			case 'x-box':
 				// poly-line type shapes hand snap points for each vertex & the center
-				return { outline: outline, points: [...outline.vertices, geometry.bounds.center] }
+				return { outline, points: [...outline.vertices, geometry.bounds.center] }
 			case 'cloud':
 			case 'ellipse':
 			case 'heart':
 			case 'oval':
 				// blobby shapes only have a snap point in their center
-				return { outline: outline, points: [geometry.bounds.center] }
+				return { outline, points: [geometry.bounds.center] }
 			default:
 				exhaustiveSwitchError(shape.props.geo)
 		}
 	}
 
-	override getText(shape: TLGeoShape) {
-		return renderPlaintextFromRichText(this.editor, shape.props.richText)
-	}
-
-	override getFontFaces(shape: TLGeoShape): TLFontFace[] {
-		return getFontsFromRichText(this.editor, shape.props.richText, {
-			family: `tldraw_${shape.props.font}`,
-			weight: 'normal',
-			style: 'normal',
-		})
-	}
-
 	component(shape: TLGeoShape) {
 		const { id, type, props } = shape
 		const { fill, font, align, verticalAlign, size, richText } = props
 		const theme = useDefaultColorTheme()
 		const { editor } = this
-		const isOnlySelected = useValue(
-			'isGeoOnlySelected',
-			() => shape.id === editor.getOnlySelectedShapeId(),
-			[editor]
-		)
+		const isOnlySelected = useValue('isGeoOnlySelected', () => shape.id === editor.getOnlySelectedShapeId(), [editor])
 		const isReadyForEditing = useIsReadyForEditing(editor, shape.id)
-		const isEmpty = isEmptyRichText(shape.props.richText)
-		const showHtmlContainer = isReadyForEditing || !isEmpty
+		const plaintextEmpty = isEmptyRichText(shape.props.richText)
+		const showHtmlContainer = isReadyForEditing || !plaintextEmpty
 		const isForceSolid = useValue('force solid', () => editor.getZoomLevel() < 0.2, [editor])
 
 		return (
@@ -458,7 +224,6 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 							font={font}
 							fontSize={LABEL_FONT_SIZES[size] * shape.props.scale}
 							lineHeight={TEXT_PROPS.lineHeight}
-							padding={LABEL_PADDING * shape.props.scale}
 							fill={fill}
 							align={align}
 							verticalAlign={verticalAlign}
@@ -474,79 +239,22 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		)
 	}
 
-	indicator(shape: TLGeoShape) {
-		const { id, props } = shape
-		const { w, size } = props
-		const h = props.h + props.growY
-
-		const strokeWidth = STROKE_SIZES[size]
-
-		const geometry = this.editor.getShapeGeometry(shape)
-
-		switch (props.geo) {
-			case 'ellipse': {
-				if (props.dash === 'draw') {
-					return <path d={getEllipseDrawIndicatorPath(id, w, h, strokeWidth)} />
-				}
-
-				return <path d={geometry.getSvgPathData(true)} />
-			}
-			case 'heart': {
-				return <path d={getHeartPath(w, h)} />
-			}
-			case 'oval': {
-				return <path d={geometry.getSvgPathData(true)} />
-			}
-			case 'cloud': {
-				return <path d={getCloudPath(w, h, id, size, shape.props.scale)} />
-			}
-
-			default: {
-				const geometry = this.editor.getShapeGeometry(shape)
-				const outline =
-					geometry instanceof Group2d ? geometry.children[0].vertices : geometry.vertices
-				let path: string
-
-				if (props.dash === 'draw') {
-					const polygonPoints = getRoundedPolygonPoints(
-						id,
-						outline,
-						0,
-						strokeWidth * 2 * shape.props.scale,
-						1
-					)
-					path = getRoundedInkyPolygonPath(polygonPoints)
-				} else {
-					path = 'M' + outline[0] + 'L' + outline.slice(1) + 'Z'
-				}
-
-				const lines = getLines(shape.props, strokeWidth)
-
-				if (lines) {
-					for (const [A, B] of lines) {
-						path += `M${A.x},${A.y}L${B.x},${B.y}`
-					}
-				}
-
-				return <path d={path} />
-			}
-		}
-	}
-
 	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
-		// We need to scale the shape to 1x for export
-		const newShape = {
+		// Scale down for export
+		const unscaledShape = {
 			...shape,
 			props: {
 				...shape.props,
 				w: shape.props.w / shape.props.scale,
 				h: shape.props.h / shape.props.scale,
+				growY: shape.props.growY / shape.props.scale,
 			},
 		}
-		const props = newShape.props
+		const props = unscaledShape.props
+
 		ctx.addExportDef(getFillDefForExport(props.fill))
 
-		let textEl
+		let textEl: JSX.Element | null = null
 		if (!isEmptyRichText(props.richText)) {
 			const theme = getDefaultColorTheme(ctx)
 			const bounds = new Box(0, 0, props.w, props.h + props.growY)
@@ -559,14 +267,14 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 					richText={props.richText}
 					labelColor={theme[props.labelColor].solid}
 					bounds={bounds}
-					padding={LABEL_PADDING * shape.props.scale}
+					padding={LABEL_PADDING}
 				/>
 			)
 		}
 
 		return (
 			<>
-				<GeoShapeBody shouldScale={false} shape={newShape} forceSolid={false} />
+				<GeoShapeBody shape={unscaledShape as TLGeoShape} shouldScale={false} />
 				{textEl}
 			</>
 		)
@@ -576,15 +284,11 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		return [getFillDefForCanvas()]
 	}
 
-	override onResize(
-		shape: TLGeoShape,
-		{ handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>
-	) {
+	override onResize(shape: TLGeoShape, { handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>) {
 		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
 		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
 		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale
-		// use the w/h from props here instead of the initialBounds here,
-		// since cloud shapes calculated bounds can differ from the props w/h.
+
 		let unscaledW = unscaledInitialW * scaleX
 		let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY
 		let overShrinkX = 0
@@ -621,26 +325,10 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 		const scaledH = unscaledH * shape.props.scale
 
 		const offset = new Vec(0, 0)
-
-		// x offsets
-
-		if (scaleX < 0) {
-			offset.x += scaledW
-		}
-
-		if (handle === 'left' || handle === 'top_left' || handle === 'bottom_left') {
-			offset.x += scaleX < 0 ? overShrinkX : -overShrinkX
-		}
-
-		// y offsets
-
-		if (scaleY < 0) {
-			offset.y += scaledH
-		}
-
-		if (handle === 'top' || handle === 'top_left' || handle === 'top_right') {
-			offset.y += scaleY < 0 ? overShrinkY : -overShrinkY
-		}
+		if (scaleX < 0) offset.x += scaledW
+		if (['left', 'top_left', 'bottom_left'].includes(handle)) offset.x += scaleX < 0 ? overShrinkX * shape.props.scale : -overShrinkX * shape.props.scale
+		if (scaleY < 0) offset.y += scaledH
+		if (['top', 'top_left', 'top_right'].includes(handle)) offset.y += scaleY < 0 ? overShrinkY * shape.props.scale : -overShrinkY * shape.props.scale
 
 		const { x, y } = offset.rot(shape.rotation).add(newPoint)
 
@@ -656,49 +344,12 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 	}
 
 	override onBeforeCreate(shape: TLGeoShape) {
-		if (isEmptyRichText(shape.props.richText)) {
-			if (shape.props.growY) {
-				// No text / some growY, set growY to 0
-				return {
-					...shape,
-					props: {
-						...shape.props,
-						growY: 0,
-					},
-				}
-			} else {
-				// No text / no growY, nothing to change
-				return
-			}
-		}
-
-		const unscaledPrevHeight = shape.props.h / shape.props.scale
-		const unscaledNextHeight = getUnscaledLabelSize(this.editor, shape).h
-
-		let growY: number | null = null
-
-		if (unscaledNextHeight > unscaledPrevHeight) {
-			growY = unscaledNextHeight - unscaledPrevHeight
-		} else {
-			if (shape.props.growY) {
-				growY = 0
-			}
-		}
-
-		if (growY !== null) {
-			return {
-				...shape,
-				props: {
-					...shape.props,
-					// scale the growY
-					growY: growY * shape.props.scale,
-				},
-			}
+		if (isEmptyRichText(shape.props.richText) && shape.props.growY) {
+			return { ...shape, props: { ...shape.props, growY: 0 } }
 		}
 	}
 
 	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
-		// No change to text, font, or size, no need to update update
 		if (
 			isEqual(prev.props.richText, next.props.richText) &&
 			prev.props.font === next.props.font &&
@@ -707,172 +358,99 @@ export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
 			return
 		}
 
-		// If we got rid of the text, cancel out any growY from the prev text
 		const wasEmpty = isEmptyRichText(prev.props.richText)
 		const isEmpty = isEmptyRichText(next.props.richText)
+
 		if (!wasEmpty && isEmpty) {
-			return {
-				...next,
-				props: {
-					...next.props,
-					growY: 0,
-				},
-			}
+			return { ...next, props: { ...next.props, growY: 0 } }
 		}
 
-		// Get the prev width and height in unscaled values
-		const unscaledPrevWidth = prev.props.w / prev.props.scale
-		const unscaledPrevHeight = prev.props.h / prev.props.scale
-		const unscaledPrevGrowY = prev.props.growY / prev.props.scale
-
-		// Get the next width and height in unscaled values
+		const unscaledPrevW = prev.props.w / prev.props.scale
+		const unscaledPrevH = prev.props.h / prev.props.scale
 		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)
 
-		// When entering the first character in a label (not pasting in multiple characters...)
 		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
-			let unscaledW = Math.max(unscaledPrevWidth, unscaledNextLabelSize.w)
-			let unscaledH = Math.max(unscaledPrevHeight, unscaledNextLabelSize.h)
-
+			let w = Math.max(unscaledPrevW, unscaledNextLabelSize.w)
+			let h = Math.max(unscaledPrevH, unscaledNextLabelSize.h)
 			const min = MIN_SIZE_WITH_LABEL
-
-			// If both the width and height were less than the minimum size, make the shape square
-			if (unscaledPrevWidth < min && unscaledPrevHeight < min) {
-				unscaledW = Math.max(unscaledW, min)
-				unscaledH = Math.max(unscaledH, min)
-				unscaledW = Math.max(unscaledW, unscaledH)
-				unscaledH = Math.max(unscaledW, unscaledH)
-			}
-
-			// Don't set a growY—at least, not until we've implemented a growX property
-			return {
-				...next,
-				props: {
-					...next.props,
-					// Scale the results
-					w: unscaledW * next.props.scale,
-					h: unscaledH * next.props.scale,
-					growY: 0,
-				},
+			if (unscaledPrevW < min && unscaledPrevH < min) {
+				w = Math.max(w, min)
+				h = Math.max(h, min)
+				w = Math.max(w, h)
+				h = Math.max(w, h)
 			}
+			return { ...next, props: { ...next.props, w: w * next.props.scale, h: h * next.props.scale, growY: 0 } }
 		}
 
 		let growY: number | null = null
-
-		if (unscaledNextLabelSize.h > unscaledPrevHeight) {
-			growY = unscaledNextLabelSize.h - unscaledPrevHeight
-		} else {
-			if (unscaledPrevGrowY) {
-				growY = 0
-			}
+		if (unscaledNextLabelSize.h > unscaledPrevH) {
+			growY = unscaledNextLabelSize.h - unscaledPrevH
+		} else if (prev.props.growY) {
+			growY = 0
 		}
-
 		if (growY !== null) {
-			const unscaledNextWidth = next.props.w / next.props.scale
-			return {
-				...next,
-				props: {
-					...next.props,
-					// Scale the results
-					growY: growY * next.props.scale,
-					w: Math.max(unscaledNextWidth, unscaledNextLabelSize.w) * next.props.scale,
-				},
-			}
+			const unscaledNextW = next.props.w / next.props.scale
+			return { ...next, props: { ...next.props, growY: growY * next.props.scale, w: Math.max(unscaledNextW, unscaledNextLabelSize.w) * next.props.scale } }
 		}
 
-		if (unscaledNextLabelSize.w > unscaledPrevWidth) {
-			return {
-				...next,
-				props: {
-					...next.props,
-					// Scale the results
-					w: unscaledNextLabelSize.w * next.props.scale,
-				},
-			}
+		if (unscaledNextLabelSize.w > unscaledPrevW) {
+			return { ...next, props: { ...next.props, w: unscaledNextLabelSize.w * next.props.scale } }
 		}
-
-		// otherwise, no update needed
 	}
 
 	override onDoubleClick(shape: TLGeoShape) {
-		// Little easter egg: double-clicking a rectangle / checkbox while
-		// holding alt will toggle between check-box and rectangle
 		if (this.editor.inputs.altKey) {
 			switch (shape.props.geo) {
-				case 'rectangle': {
-					return {
-						...shape,
-						props: {
-							geo: 'check-box' as const,
-						},
-					}
-				}
-				case 'check-box': {
-					return {
-						...shape,
-						props: {
-							geo: 'rectangle' as const,
-						},
-					}
-				}
+				case 'rectangle':
+					return { ...shape, props: { ...shape.props, geo: 'check-box' } }
+				case 'check-box':
+					return { ...shape, props: { ...shape.props, geo: 'rectangle' } }
 			}
 		}
+	}
+
+	override getText(shape: TLGeoShape) {
+		return renderPlaintextFromRichText(this.editor, shape.props.richText)
+	}
 
-		return
+	override getFontFaces(shape: TLGeoShape) {
+		return getFontsFromRichText(this.editor, shape.props.richText, {
+			family: `tldraw_${shape.props.font}`,
+			weight: 'normal',
+			style: 'normal',
+		})
 	}
-	override getInterpolatedProps(
-		startShape: TLGeoShape,
-		endShape: TLGeoShape,
-		t: number
-	): TLGeoShapeProps {
+
+	override getInterpolatedProps(startShape: TLGeoShape, endShape: TLGeoShape, t: number) {
 		return {
 			...(t > 0.5 ? endShape.props : startShape.props),
 			w: lerp(startShape.props.w, endShape.props.w, t),
 			h: lerp(startShape.props.h, endShape.props.h, t),
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
+			richText: t > 0.5 ? endShape.props.richText : startShape.props.richText,
 		}
 	}
 }
 
 function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
 	const { richText, font, size, w } = shape.props
-
 	if (!richText || isEmptyRichText(richText)) {
 		return { w: 0, h: 0 }
 	}
-
 	const minSize = editor.textMeasure.measureText('w', {
 		...TEXT_PROPS,
 		fontFamily: FONT_FAMILIES[font],
-		fontSize: LABEL_FONT_SIZES[size],
-		maxWidth: 100, // ?
+		fontSize: LABEL_FONT_SIZES[size] * shape.props.scale,
+		maxWidth: 100,
 	})
-
-	// TODO: Can I get these from somewhere?
-	const sizes = {
-		s: 2,
-		m: 3.5,
-		l: 5,
-		xl: 10,
-	}
-
+	const sizes = { s: 2, m: 3.5, l: 5, xl: 10 }
 	const html = renderHtmlFromRichTextForMeasurement(editor, richText)
 	const textSize = editor.textMeasure.measureHtml(html, {
 		...TEXT_PROPS,
 		fontFamily: FONT_FAMILIES[font],
-		fontSize: LABEL_FONT_SIZES[size],
+		fontSize: LABEL_FONT_SIZES[size] * shape.props.scale,
 		minWidth: minSize.w,
-		maxWidth: Math.max(
-			// Guard because a DOM nodes can't be less 0
-			0,
-			// A 'w' width that we're setting as the min-width
-			Math.ceil(minSize.w + sizes[size]),
-			// The actual text size
-			Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)
-		),
+		maxWidth: Math.max(0, Math.ceil(minSize.w + sizes[size]), Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)),
 	})
-
-	return {
-		w: textSize.w + LABEL_PADDING * 2,
-		h: textSize.h + LABEL_PADDING * 2,
-	}
+	return { w: textSize.w + LABEL_PADDING * 2, h: textSize.h + LABEL_PADDING * 2 }
 }
\ No newline at end of file
