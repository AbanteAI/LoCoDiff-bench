/* eslint-disable react-hooks/rules-of-hooks */
import {
	BaseBoxShapeUtil,
	Box,
	Editor,
	Ellipse2d,
	Geometry2d,
	Group2d,
	HALF_PI,
	HTMLContainer,
	SVGContainer,
	Stadium2d,
	SvgExportContext,
	TLGeoShape,
	TLGeoShapeProps,
	TLResizeInfo,
	TLShapeUtilCanvasSvgDef,
	Vec,
	exhaustiveSwitchError,
	geoShapeMigrations,
	geoShapeProps,
	getDefaultColorTheme,
	getPolygonVertices,
	lerp,
	useValue,
} from '@tldraw/editor'

import { HyperlinkButton } from '../shared/HyperlinkButton'
import { RichTextLabel, RichTextSVG } from '../shared/RichTextLabel'
import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
import { useIsReadyForEditing } from '../shared/useEditablePlainText'
import { GeoShapeBody } from './components/GeoShapeBody'
import {
	cloudOutline,
	getCloudPath,
	getEllipseDrawIndicatorPath,
	getHeartParts,
	getHeartPath,
	getRoundedInkyPolygonPath,
	getRoundedPolygonPoints,
} from './geo-shape-helpers'
import { getLines } from './getLines'
import {
	FONT_FAMILIES,
	LABEL_FONT_SIZES,
	LABEL_PADDING,
	STROKE_SIZES,
	TEXT_PROPS,
} from '../shared/default-shape-constants'
import isEqual from 'lodash.isequal'
import { isEmptyRichText, renderHtmlFromRichTextForMeasurement, renderPlaintextFromRichText } from '../../utils/text/richText'

/** @public */
export class GeoShapeUtil extends BaseBoxShapeUtil<TLGeoShape> {
	static override type = 'geo' as const
	static override props = geoShapeProps
	static override migrations = geoShapeMigrations

	override canEdit() {
		return true
	}

	override getDefaultProps(): TLGeoShape['props'] {
		return {
			w: 100,
			h: 100,
			geo: 'rectangle',
			color: 'black',
			labelColor: 'black',
			fill: 'none',
			dash: 'draw',
			size: 'm',
			font: 'draw',
			align: 'middle',
			verticalAlign: 'middle',
			growY: 0,
			url: '',
			scale: 1,
			richText: '',
		}
	}

	override getGeometry(shape: TLGeoShape) {
		const w = Math.max(1, shape.props.w)
		const h = Math.max(1, shape.props.h + shape.props.growY)
		const cx = w / 2
		const cy = h / 2

		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
		const isFilled = shape.props.fill !== 'none'

		let body!: Geometry2d

		switch (shape.props.geo) {
			case 'rectangle':
			case 'check-box':
			case 'x-box':
				body = new Group2d({
					children: [
						new Rectangle2d({ width: w, height: h, isFilled }),
						...(shape.props.geo === 'x-box' ? getLines(shape.props, strokeWidth).map(line => new Polyline2d({ points: line })) : []),
						...(shape.props.geo === 'check-box' ? getLines(shape.props, strokeWidth).map(line => new Polyline2d({ points: line })) : []),
					],
					operation: 'union',
					isSnappable: true,
				})
				break

			case 'ellipse':
				body = new Ellipse2d({ width: w, height: h, isFilled })
				break

			case 'oval':
				body = new Stadium2d({ width: w, height: h, isFilled })
				break

			case 'cloud':
				body = new Polygon2d({
					points: cloudOutline(w, h, shape.id, shape.props.size, shape.props.scale),
					isFilled,
				})
				break

			case 'heart': {
				const parts = getHeartParts(w, h)
				const points = parts.flatMap(part => part.vertices)
				body = new Polygon2d({ points, isFilled })
				break
			}

			default:
				exhaustiveSwitchError(shape.props.geo)
		}

		const labelSize = getUnscaledLabelSize(this.editor, shape)
		const unscaledW = w / shape.props.scale
		const unscaledH = h / shape.props.scale
		const unscaledMin = Math.min(100, unscaledW / 2)
		const unscaledMinH = Math.min(LABEL_FONT_SIZES[shape.props.size] * shape.props.scale * TEXT_PROPS.lineHeight + LABEL_PADDING * 2, unscaledH / 2)

		const unscaledLabelW = Math.min(unscaledW, Math.max(labelSize.w, Math.min(unscaledMin, Math.max(1, unscaledW - 8))))
		const unscaledLabelH = Math.min(unscaledH, Math.max(labelSize.h, Math.min(unscaledMinH, Math.max(1, unscaledW - 8))))

		const lines = getLines(shape.props, strokeWidth)
		const edges = lines ? lines.map(line => new Polyline2d({ points: line })) : []

		return new Group2d({
			children: [
				body,
				new Rectangle2d({
					x: shape.props.align === 'start' ? 0 : shape.props.align === 'end' ? (unscaledW - unscaledLabelW) * shape.props.scale : ((unscaledW - unscaledLabelW) / 2) * shape.props.scale,
					y: shape.props.verticalAlign === 'start' ? 0 : shape.props.verticalAlign === 'end' ? (unscaledH - unscaledLabelH) * shape.props.scale : ((unscaledH - unscaledLabelH) / 2) * shape.props.scale,
					width: unscaledLabelW * shape.props.scale,
					height: unscaledLabelH * shape.props.scale,
					isFilled: true,
					isLabel: true,
				}),
				...edges,
			],
			isSnappable: false,
		})
	}

	override getHandleSnapGeometry(shape: TLGeoShape) {
		const geometry = this.getGeometry(shape)
		const outline = (geometry as Group2d).children[0] as Polygon2d
		switch (shape.props.geo) {
			case 'arrow-down':
			case 'arrow-left':
			case 'arrow-right':
			case 'arrow-up':
			case 'check-box':
			case 'diamond':
			case 'hexagon':
			case 'octagon':
			case 'pentagon':
			case 'rectangle':
			case 'rhombus':
			case 'rhombus-2':
			case 'star':
			case 'trapezoid':
			case 'triangle':
			case 'x-box':
				// poly-line type shapes hand snap points for each vertex & the center
				return { outline, points: [...outline.vertices, geometry.bounds.center] }
			case 'cloud':
			case 'ellipse':
			case 'heart':
			case 'oval':
				// blobby shapes only have a snap point in their center
				return { outline, points: [geometry.bounds.center] }
			default:
				exhaustiveSwitchError(shape.props.geo)
		}
	}

	component(shape: TLGeoShape) {
		const { id, type, props } = shape
		const { fill, font, align, verticalAlign, size, richText } = props
		const theme = useDefaultColorTheme()
		const { editor } = this
		const isOnlySelected = useValue('isGeoOnlySelected', () => shape.id === editor.getOnlySelectedShapeId(), [editor])
		const isReadyForEditing = useIsReadyForEditing(editor, shape.id)
		const plaintextEmpty = isEmptyRichText(shape.props.richText)
		const showHtmlContainer = isReadyForEditing || !plaintextEmpty
		const isForceSolid = useValue('force solid', () => editor.getZoomLevel() < 0.2, [editor])

		return (
			<>
				<SVGContainer>
					<GeoShapeBody shape={shape} shouldScale={true} forceSolid={isForceSolid} />
				</SVGContainer>
				{showHtmlContainer && (
					<HTMLContainer
						style={{
							overflow: 'hidden',
							width: shape.props.w,
							height: shape.props.h + props.growY,
						}}
					>
						<RichTextLabel
							shapeId={id}
							type={type}
							font={font}
							fontSize={LABEL_FONT_SIZES[size] * shape.props.scale}
							lineHeight={TEXT_PROPS.lineHeight}
							fill={fill}
							align={align}
							verticalAlign={verticalAlign}
							richText={richText}
							isSelected={isOnlySelected}
							labelColor={theme[props.labelColor].solid}
							wrap
						/>
					</HTMLContainer>
				)}
				{shape.props.url && <HyperlinkButton url={shape.props.url} />}
			</>
		)
	}

	override toSvg(shape: TLGeoShape, ctx: SvgExportContext) {
		// Scale down for export
		const unscaledShape = {
			...shape,
			props: {
				...shape.props,
				w: shape.props.w / shape.props.scale,
				h: shape.props.h / shape.props.scale,
				growY: shape.props.growY / shape.props.scale,
			},
		}
		const props = unscaledShape.props

		ctx.addExportDef(getFillDefForExport(props.fill))

		let textEl: JSX.Element | null = null
		if (!isEmptyRichText(props.richText)) {
			const theme = getDefaultColorTheme(ctx)
			const bounds = new Box(0, 0, props.w, props.h + props.growY)
			textEl = (
				<RichTextSVG
					fontSize={LABEL_FONT_SIZES[props.size]}
					font={props.font}
					align={props.align}
					verticalAlign={props.verticalAlign}
					richText={props.richText}
					labelColor={theme[props.labelColor].solid}
					bounds={bounds}
					padding={LABEL_PADDING}
				/>
			)
		}

		return (
			<>
				<GeoShapeBody shape={unscaledShape as TLGeoShape} shouldScale={false} />
				{textEl}
			</>
		)
	}

	override getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
		return [getFillDefForCanvas()]
	}

	override onResize(shape: TLGeoShape, { handle, newPoint, scaleX, scaleY, initialShape }: TLResizeInfo<TLGeoShape>) {
		const unscaledInitialW = initialShape.props.w / initialShape.props.scale
		const unscaledInitialH = initialShape.props.h / initialShape.props.scale
		const unscaledGrowY = initialShape.props.growY / initialShape.props.scale

		let unscaledW = unscaledInitialW * scaleX
		let unscaledH = (unscaledInitialH + unscaledGrowY) * scaleY
		let overShrinkX = 0
		let overShrinkY = 0

		const min = MIN_SIZE_WITH_LABEL

		if (!isEmptyRichText(shape.props.richText)) {
			let newW = Math.max(Math.abs(unscaledW), min)
			let newH = Math.max(Math.abs(unscaledH), min)

			if (newW < min && newH === min) newW = min
			if (newW === min && newH < min) newH = min

			const unscaledLabelSize = getUnscaledLabelSize(this.editor, {
				...shape,
				props: {
					...shape.props,
					w: newW * shape.props.scale,
					h: newH * shape.props.scale,
				},
			})

			const nextW = Math.max(Math.abs(unscaledW), unscaledLabelSize.w) * Math.sign(unscaledW)
			const nextH = Math.max(Math.abs(unscaledH), unscaledLabelSize.h) * Math.sign(unscaledH)
			overShrinkX = Math.abs(nextW) - Math.abs(unscaledW)
			overShrinkY = Math.abs(nextH) - Math.abs(unscaledH)

			unscaledW = nextW
			unscaledH = nextH
		}

		const scaledW = unscaledW * shape.props.scale
		const scaledH = unscaledH * shape.props.scale

		const offset = new Vec(0, 0)
		if (scaleX < 0) offset.x += scaledW
		if (['left', 'top_left', 'bottom_left'].includes(handle)) offset.x += scaleX < 0 ? overShrinkX * shape.props.scale : -overShrinkX * shape.props.scale
		if (scaleY < 0) offset.y += scaledH
		if (['top', 'top_left', 'top_right'].includes(handle)) offset.y += scaleY < 0 ? overShrinkY * shape.props.scale : -overShrinkY * shape.props.scale

		const { x, y } = offset.rot(shape.rotation).add(newPoint)

		return {
			x,
			y,
			props: {
				w: Math.max(Math.abs(scaledW), 1),
				h: Math.max(Math.abs(scaledH), 1),
				growY: 0,
			},
		}
	}

	override onBeforeCreate(shape: TLGeoShape) {
		if (isEmptyRichText(shape.props.richText) && shape.props.growY) {
			return { ...shape, props: { ...shape.props, growY: 0 } }
		}
	}

	override onBeforeUpdate(prev: TLGeoShape, next: TLGeoShape) {
		if (
			isEqual(prev.props.richText, next.props.richText) &&
			prev.props.font === next.props.font &&
			prev.props.size === next.props.size
		) {
			return
		}

		const wasEmpty = isEmptyRichText(prev.props.richText)
		const isEmpty = isEmptyRichText(next.props.richText)

		if (!wasEmpty && isEmpty) {
			return { ...next, props: { ...next.props, growY: 0 } }
		}

		const unscaledPrevW = prev.props.w / prev.props.scale
		const unscaledPrevH = prev.props.h / prev.props.scale
		const unscaledNextLabelSize = getUnscaledLabelSize(this.editor, next)

		if (wasEmpty && !isEmpty && renderPlaintextFromRichText(this.editor, next.props.richText)) {
			let w = Math.max(unscaledPrevW, unscaledNextLabelSize.w)
			let h = Math.max(unscaledPrevH, unscaledNextLabelSize.h)
			const min = MIN_SIZE_WITH_LABEL
			if (unscaledPrevW < min && unscaledPrevH < min) {
				w = Math.max(w, min)
				h = Math.max(h, min)
				w = Math.max(w, h)
				h = Math.max(w, h)
			}
			return { ...next, props: { ...next.props, w: w * next.props.scale, h: h * next.props.scale, growY: 0 } }
		}

		let growY: number | null = null
		if (unscaledNextLabelSize.h > unscaledPrevH) {
			growY = unscaledNextLabelSize.h - unscaledPrevH
		} else if (prev.props.growY) {
			growY = 0
		}
		if (growY !== null) {
			const unscaledNextW = next.props.w / next.props.scale
			return { ...next, props: { ...next.props, growY: growY * next.props.scale, w: Math.max(unscaledNextW, unscaledNextLabelSize.w) * next.props.scale } }
		}

		if (unscaledNextLabelSize.w > unscaledPrevW) {
			return { ...next, props: { ...next.props, w: unscaledNextLabelSize.w * next.props.scale } }
		}
	}

	override onDoubleClick(shape: TLGeoShape) {
		if (this.editor.inputs.altKey) {
			switch (shape.props.geo) {
				case 'rectangle':
					return { ...shape, props: { ...shape.props, geo: 'check-box' } }
				case 'check-box':
					return { ...shape, props: { ...shape.props, geo: 'rectangle' } }
			}
		}
	}

	override getText(shape: TLGeoShape) {
		return renderPlaintextFromRichText(this.editor, shape.props.richText)
	}

	override getFontFaces(shape: TLGeoShape) {
		return getFontsFromRichText(this.editor, shape.props.richText, {
			family: `tldraw_${shape.props.font}`,
			weight: 'normal',
			style: 'normal',
		})
	}

	override getInterpolatedProps(startShape: TLGeoShape, endShape: TLGeoShape, t: number) {
		return {
			...(t > 0.5 ? endShape.props : startShape.props),
			w: lerp(startShape.props.w, endShape.props.w, t),
			h: lerp(startShape.props.h, endShape.props.h, t),
			scale: lerp(startShape.props.scale, endShape.props.scale, t),
			richText: t > 0.5 ? endShape.props.richText : startShape.props.richText,
		}
	}
}

function getUnscaledLabelSize(editor: Editor, shape: TLGeoShape) {
	const { richText, font, size, w } = shape.props
	if (!richText || isEmptyRichText(richText)) {
		return { w: 0, h: 0 }
	}
	const minSize = editor.textMeasure.measureText('w', {
		...TEXT_PROPS,
		fontFamily: FONT_FAMILIES[font],
		fontSize: LABEL_FONT_SIZES[size] * shape.props.scale,
		maxWidth: 100,
	})
	const sizes = { s: 2, m: 3.5, l: 5, xl: 10 }
	const html = renderHtmlFromRichTextForMeasurement(editor, richText)
	const textSize = editor.textMeasure.measureHtml(html, {
		...TEXT_PROPS,
		fontFamily: FONT_FAMILIES[font],
		fontSize: LABEL_FONT_SIZES[size] * shape.props.scale,
		minWidth: minSize.w,
		maxWidth: Math.max(0, Math.ceil(minSize.w + sizes[size]), Math.ceil(w / shape.props.scale - LABEL_PADDING * 2)),
	})
	return { w: textSize.w + LABEL_PADDING * 2, h: textSize.h + LABEL_PADDING * 2 }
}