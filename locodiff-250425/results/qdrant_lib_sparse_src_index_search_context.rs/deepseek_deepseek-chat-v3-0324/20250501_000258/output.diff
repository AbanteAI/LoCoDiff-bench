--- qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected)+++ qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual)@@ -1,4 +1,5 @@-use std::cmp::{Ordering, max, min};
+use std::cmp::Ordering;
+use std::mem::size_of;
 use std::sync::atomic::AtomicBool;
 use std::sync::atomic::Ordering::Relaxed;
 
@@ -14,8 +15,8 @@ use crate::index::posting_list::PostingListIterator;
 
 /// Iterator over posting lists with a reference to the corresponding query index and weight
-pub struct IndexedPostingListIterator<T: PostingListIter> {
-    posting_list_iterator: T,
+pub struct IndexedPostingListIterator<'a> {
+    posting_list_iterator: PostingListIterator<'a>,
     query_index: DimId,
     query_weight: DimWeight,
 }
@@ -116,7 +117,7 @@             // collect indices and values for the current record id from the query's posting lists *only*
             for posting_iterator in self.postings_iterators.iter_mut() {
                 // rely on underlying binary search as the posting lists are sorted by record id
-                match posting_iterator.posting_list_iterator.skip_to(id) {
+                match posting_iterator.posting_list_iterator.skip_to(*id) {
                     None => {} // no match for posting list
                     Some(element) => {
                         // match for posting list
@@ -142,7 +143,7 @@ 
             self.top_results.push(ScoredPointOffset {
                 score: sparse_score,
-                idx: id,
+                idx: *id,
             });
         }
         let top = std::mem::take(&mut self.top_results);
@@ -177,7 +178,6 @@         }
 
         for (local_index, &score) in self.pooled.scores.iter().enumerate() {
-            // publish only the non-zero scores above the current min to beat
             if score != 0.0 && score > self.top_results.threshold() {
                 let real_id = batch_start_id + local_index as PointOffsetType;
                 // do not score if filter condition is not satisfied
