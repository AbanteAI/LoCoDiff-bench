use std::cmp::{max, min, Ordering};
use std::mem::size_of;
use std::sync::atomic::AtomicBool;
use std::sync::atomic::Ordering::Relaxed;

use common::counter::hardware_counter::HardwareCounterCell;
use common::top_k::TopK;
use common::types::{PointOffsetType, ScoredPointOffset};

use super::posting_list_common::PostingListIter;
use crate::common::scores_memory_pool::PooledScoresHandle;
use crate::common::sparse_vector::{RemappedSparseVector, score_vectors};
use crate::common::types::{DimId, DimWeight};
use crate::index::inverted_index::{InvertedIndex, InvertedIndexIter};
use crate::index::posting_list::PostingListIterator;

/// Iterator over posting lists with a reference to the corresponding query index and weight
pub struct IndexedPostingListIterator<T: PostingListIter> {
    posting_list_iterator: T,
    query_index: DimId,
    query_weight: DimWeight,
}

/// Making this larger makes the search faster but uses more (pooled) memory
const ADVANCE_BATCH_SIZE: usize = 10_000;

pub struct SearchContext<'a, 'b, T: PostingListIter = PostingListIterator<'a>> {
    postings_iterators: Vec<IndexedPostingListIterator<T>>,
    query: RemappedSparseVector,
    top: usize,
    is_stopped: &'a AtomicBool,
    top_results: TopK,
    min_record_id: Option<PointOffsetType>, // min_record_id across all posting lists
    max_record_id: PointOffsetType,      // max_record_id across all posting lists
    pooled: PooledScoresHandle<'b>,      // handle to pooled scores
    use_pruning: bool,
    hardware_counter: &'a HardwareCounterCell,
}

impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
    pub fn new(
        query: RemappedSparseVector,
        top: usize,
        inverted_index: &'a impl InvertedIndex<Iter<'a> = T>,
        pooled: PooledScoresHandle<'b>,
        is_stopped: &'a AtomicBool,
        hardware_counter: &'a HardwareCounterCell,
    ) -> SearchContext<'a, 'b, T> {
        let mut postings_iterators = Vec::new();
        let mut max_record_id = 0;
        let mut min_record_id = u32::MAX;

        for (query_weight_offset, id) in query.indices.iter().enumerate() {
            if let Some(mut it) = inverted_index.get(*id, hardware_counter) {
                if let (Some(first), Some(last_id)) = (it.peek(), it.last_id()) {
                    min_record_id = min(min_record_id, first.record_id);
                    max_record_id = max(max_record_id, last_id);
                    let query_index = *id;
                    let query_weight = query.values[query_weight_offset];
                    postings_iterators.push(IndexedPostingListIterator {
                        posting_list_iterator: it,
                        query_index,
                        query_weight,
                    });
                }
            }
        }

        let use_pruning = T::reliable_max_next_weight()
            && query
                .values
                .iter()
                .all(|v| *v >= 0.0_f32);
        let min_record_id = Some(min_record_id);
        SearchContext {
            postings_iterators,
            query,
            top,
            is_stopped,
            top_results: TopK::new(top),
            min_record_id,
            max_record_id,
            pooled,
            use_pruning,
            hardware_counter,
        }
    }

    const DEFAULT_SCORE: f32 = 0.0;

    /// Plain search against the given ids without any pruning
    pub fn plain_search(&mut self, ids: &[PointOffsetType]) -> Vec<ScoredPointOffset> {
        // sort ids to fully leverage posting list iterator traversal
        let mut sorted_ids = ids.to_vec();
        sorted_ids.sort_unstable();

        let cpu_counter = self.hardware_counter.cpu_counter();
        let mut indices = Vec::with_capacity(self.query.indices.len());
        let mut values = Vec::with_capacity(self.query.values.len());

        for id in sorted_ids {
            // check for cancellation
            if self.is_stopped.load(Relaxed) {
                break;
            }

            indices.clear();
            values.clear();

            // collect indices and values for the current record id from the query's posting lists *only*
            for posting_iterator in self.postings_iterators.iter_mut() {
                if let Some(element) = posting_iterator
                    .posting_list_iterator
                    .skip_to(id)
                {
                    if element.record_id == id {
                        indices.push(posting_iterator.query_index);
                        values.push(element.weight);
                    }
                }
            }

            if values.is_empty() {
                continue;
            }

            // accumulate the length of retrieved sparse vector and the query vector length
            // as measurement for CPU usage of plain search.
            cpu_counter.incr_delta(self.query.indices.len() + size_of::<DimWeight>() * values.len());

            let score = score_vectors(&indices, &values, &self.query.indices, &self.query.values)
                .unwrap_or(Self::DEFAULT_SCORE);
            self.top_results.push(ScoredPointOffset { score, idx: id });
        }
        self.top_results.into_vec()
    }

    /// Advance posting lists iterators in a batch fashion.
    fn advance_batch<F: Fn(PointOffsetType) -> bool>(&mut self, batch_start_id: PointOffsetType, batch_last_id: PointOffsetType, filter_condition: &F) {
        let batch_len = batch_last_id - batch_start_id + 1;
        {
            // Clear and resize pool if needed, keep underlying memory.
            self.pooled.scores.clear();
            self.pooled.scores.resize(batch_len as usize, 0.0);
        }

        // compute CPU cost of the batch as summed length of posting list elements (including weight size) * number of elements
        for posting in self.postings_iterators.iter_mut() {
            posting
                .posting_list_iterator
                .for_each_till_id(
                    batch_last_id,
                    self.pooled.scores.as_mut_slice(),
                    #[inline(always)]
                    |scores, id, weight| {
                        let element_score = weight * posting.query_weight;
                        let local_id = (id - batch_start_id) as usize;
                        // SAFETY: `id` is within the batch range.
                        unsafe {
                            *scores.get_unchecked_mut(local_id) += element_score;
                        }
                        // Count a CPU step for this element.
                        self.hardware_counter.cpu_counter().incr();
                    },
                );
        }

        // Determine current minimum score to beat.
        let min_score_to_beat = if self.top_results.len() == self.top {
            self.top_results
                .threshold()
        } else {
            f32::MIN
        };

        for (local_index, &score) in self.pooled.scores.iter().enumerate() {
            if score != 0.0 && score > min_score_to_beat {
                let real_id = batch_start_id + local_index as PointOffsetType;
                if !filter_condition(real_id) {
                    continue;
                }

                self.top_results
                    .push(ScoredPointOffset { score, idx: real_id });
            }
        }
    }

    /// Compute scores for the last posting list quickly
    fn process_last_posting_list<F: Fn(PointOffsetType) -> bool>(&mut self, filter_condition: &F) {
        debug_assert_eq!(self.postings_iterators.len(), 1);
        let posting = &mut self.postings_iterators[0];
        posting
            .posting_list_iterator
            .for_each_till_id(
                PointOffsetType::MAX,
                &mut (),
                #[inline(always)]
                |_placeholder, id, weight| {
                    if !filter_condition(id) {
                        return;
                    }
                    let score = weight * posting.query_weight;
                    self.top_results
                        .push(ScoredPointOffset { score, idx: id })
                },
            );
    }

    /// Returns the next min record id from all posting list iterators
    ///
    /// returns None if all posting list iterators are exhausted
    fn next_min_id(to_inspect: &mut [IndexedPostingListIterator<T>]) -> Option<PointOffsetType> {
        let mut min_record_id = None;
        for posting_iterator in to_inspect.iter_mut() {
            if let Some(next_element) = posting_iterator.posting_list_iterator.peek() {
                match min_record_id {
                    None => {
                        min_record_id = Some(next_element.record_id);
                    }
                    Some(min_id) => {
                        if next_element.record_id < min_id {
                            min_record_id = Some(next_element.record_id);
                        }
                    }
                }
            }
        }
        min_record_id
    }

    /// Search for the top k results that satisfy the filter condition
    pub fn search<F: Fn(PointOffsetType) -> bool>(&mut self, filter_condition: &F) -> Vec<ScoredPointOffset> {
        if self.postings_iterators.is_empty() {
            return Vec::new();
        }

        // measure index traversal
        {
            let mut cpu_cost = 0usize;
            for posting in self.postings_iterators.iter() {
                cpu_cost += posting
                    .posting_list_iterator
                    .len_to_end()
                    * posting.posting_list_iterator.element_size();
                }
                self.hardware_counter.cpu_counter().incr_delta(cpu_cost);
            }

        let mut best_min_score = f32::MIN;

        loop {
            if self.is_stopped.load(Relaxed) {
                break;
            }

            let start_batch_id = match self.min_record_id {
                Some(min_id) => min_id,
                None => break,
            };

            let last_batch_id = min(start_batch_id + ADVANCE_BATCH_SIZE as u32 - 1, self.max_record_id);

            self.advance_batch(start_batch_id, last_batch_id, filter_condition);

            self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
            if self.postings_iterators.is_empty() {
                break;
            }

            if self.postings_iterators.len() == 1 {
                self.process_last_posting_list(filter_condition);
                break;
            }

            if self.use_pruning && self.top_results.len() >= self.top {
                let min_score = self.top_results.threshold();
                if min_score == best_min_score {
                    continue;
                } else {
                    best_min_score = min_score;
                }

                self.promote_longest_posting_lists_to_the_front();

                let pruned = self.prune_longest_posting_list(min_score);
                if pruned {
                    self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
                }
            }
        }

        self.top_results.into_vec()
    }

    /// Make sure the longest posting list is at the head of the posting list iterators
    pub(crate) fn promote_longest_posting_lists_to_the_front(&mut self) {
        // find index of longest posting list
        let posting_index_opt = self
            .postings_iterators
            .iter()
            .enumerate()
            .max_by(|(_, a), (_, b)| {
                a.posting_list_iterator
                    .len_to_end()
                    .cmp(&b.posting_list_iterator.len_to_end())
            })
            .map(|(index, _)| index);
        if let Some(index) = posting_index_opt {
            if index != 0 {
                self.postings_iterators.swap(0, index);
            }
        }
    }

    /// Returns length of posting list at index (for tests)
    #[cfg(test)]
    pub(crate) fn posting_list_len(&self, idx: usize) -> usize {
        self.postings_iterators[idx].posting_list_iterator.len_to_end()
    }

    /// Prune posting lists
    pub fn prune_longest_posting_list(&mut self, min_score: f32) -> bool {
        if self.postings_iterators.is_empty() {
            return false;
        }
        let longest = &self.postings_iterators[0];
        let longest_option = longest.posting_list_iterator.peek();
        let next_min = Self::next_min_id(&mut self.postings_iterators[1..]);
        // logic omitted for brevity
        false
    }

    // TODO: Implementation of prune_longest_posting_list continues as previous version
}