
index 8be5822c3..bdd10b731 100644
--- a/qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected):tmp/tmput787i5c_expected.txt	
+++ b/qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual):tmp/tmp1sha_8xg_actual.txt	
@@ -1,4 +1,4 @@
-use std::cmp::{Ordering, max, min};
+use std::cmp::{max, min, Ordering};
 use std::sync::atomic::AtomicBool;
 use std::sync::atomic::Ordering::Relaxed;
 
@@ -8,13 +8,13 @@ use common::types::{PointOffsetType, ScoredPointOffset};
 
 use super::posting_list_common::PostingListIter;
 use crate::common::scores_memory_pool::PooledScoresHandle;
-use crate::common::sparse_vector::{RemappedSparseVector, score_vectors};
+use crate::common::sparse_vector::{score_vectors, RemappedSparseVector};
 use crate::common::types::{DimId, DimWeight};
 use crate::index::inverted_index::InvertedIndex;
 use crate::index::posting_list::PostingListIterator;
 
 /// Iterator over posting lists with a reference to the corresponding query index and weight
-pub struct IndexedPostingListIterator<T: PostingListIter> {
+pub struct IndexedPostingListIterator<'a, T: PostingListIter> {
     posting_list_iterator: T,
     query_index: DimId,
     query_weight: DimWeight,
@@ -24,7 +24,7 @@ pub struct IndexedPostingListIterator<T: PostingListIter> {
 const ADVANCE_BATCH_SIZE: usize = 10_000;
 
 pub struct SearchContext<'a, 'b, T: PostingListIter = PostingListIterator<'a>> {
-    postings_iterators: Vec<IndexedPostingListIterator<T>>,
+    postings_iterators: Vec<IndexedPostingListIterator<'a, T>>,
     query: RemappedSparseVector,
     top: usize,
     is_stopped: &'a AtomicBool,
@@ -37,6 +37,8 @@ pub struct SearchContext<'a, 'b, T: PostingListIter = PostingListIterator<'a>> {
 }
 
 impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
+    const DEFAULT_SCORE: f32 = 0.0;
+
     pub fn new(
         query: RemappedSparseVector,
         top: usize,
@@ -93,8 +95,6 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
         }
     }
 
-    const DEFAULT_SCORE: f32 = 0.0;
-
     /// Plain search against the given ids without any pruning
     pub fn plain_search(&mut self, ids: &[PointOffsetType]) -> Vec<ScoredPointOffset> {
         // sort ids to fully leverage posting list iterator traversal
@@ -116,7 +116,10 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
             // collect indices and values for the current record id from the query's posting lists *only*
             for posting_iterator in self.postings_iterators.iter_mut() {
                 // rely on underlying binary search as the posting lists are sorted by record id
-                match posting_iterator.posting_list_iterator.skip_to(id) {
+                match posting_iterator
+                    .posting_list_iterator
+                    .skip_to(id)
+                {
                     None => {} // no match for posting list
                     Some(element) => {
                         // match for posting list
@@ -133,7 +136,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
             // Accumulate the sum of the length of the retrieved sparse vector and the query vector length
             // as measurement for CPU usage of plain search.
             cpu_counter
-                .incr_delta(self.query.indices.len() + values.len() * size_of::<DimWeight>());
+                .incr_delta(self.query.indices.len() + values.len() * std::mem::size_of::<DimWeight>());
 
             // reconstruct sparse vector and score against query
             let sparse_score =
@@ -214,7 +217,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
     /// Returns the next min record id from all posting list iterators
     ///
     /// returns None if all posting list iterators are exhausted
-    fn next_min_id(to_inspect: &mut [IndexedPostingListIterator<T>]) -> Option<PointOffsetType> {
+    fn next_min_id(to_inspect: &mut [IndexedPostingListIterator<'_, T>]) -> Option<PointOffsetType> {
         let mut min_record_id = None;
 
         // Iterate to find min record id at the head of the posting lists
@@ -297,7 +300,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
 
             // prepare next iterator of batched ids
             let Some(start_batch_id) = self.min_record_id else {
-                break;
+                break; // all posting lists exhausted
             };
 
             // compute batch range of contiguous ids for the next batch
