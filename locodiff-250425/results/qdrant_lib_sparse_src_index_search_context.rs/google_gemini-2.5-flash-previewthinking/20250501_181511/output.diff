--- qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected)+++ qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual)@@ -1,4 +1,5 @@ use std::cmp::{Ordering, max, min};
+use std::mem::size_of;
 use std::sync::atomic::AtomicBool;
 use std::sync::atomic::Ordering::Relaxed;
 
@@ -116,13 +117,10 @@             // collect indices and values for the current record id from the query's posting lists *only*
             for posting_iterator in self.postings_iterators.iter_mut() {
                 // rely on underlying binary search as the posting lists are sorted by record id
-                match posting_iterator.posting_list_iterator.skip_to(id) {
-                    None => {} // no match for posting list
-                    Some(element) => {
-                        // match for posting list
-                        indices.push(posting_iterator.query_index);
-                        values.push(element.weight);
-                    }
+                if let Some(element) = posting_iterator.posting_list_iterator.skip_to(id) {
+                    // match for posting list
+                    indices.push(posting_iterator.query_index);
+                    values.push(element.weight);
                 }
             }
 
@@ -214,11 +212,11 @@     /// Returns the next min record id from all posting list iterators
     ///
     /// returns None if all posting list iterators are exhausted
-    fn next_min_id(to_inspect: &mut [IndexedPostingListIterator<T>]) -> Option<PointOffsetType> {
+    fn next_min_id(&mut self) -> Option<PointOffsetType> {
         let mut min_record_id = None;
 
         // Iterate to find min record id at the head of the posting lists
-        for posting_iterator in to_inspect.iter_mut() {
+        for posting_iterator in self.postings_iterators.iter_mut() {
             if let Some(next_element) = posting_iterator.posting_list_iterator.peek() {
                 match min_record_id {
                     None => min_record_id = Some(next_element.record_id), // first record with matching id
@@ -311,11 +309,11 @@ 
             // remove empty posting lists if necessary
             self.postings_iterators.retain(|posting_iterator| {
-                posting_iterator.posting_list_iterator.len_to_end() != 0
+                !posting_iterator.posting_list_iterator.is_empty()
             });
 
             // update min_record_id
-            self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
+            self.min_record_id = self.next_min_id();
 
             // check if all posting lists are exhausted
             if self.postings_iterators.is_empty() {
@@ -345,7 +343,7 @@                 let pruned = self.prune_longest_posting_list(new_min_score);
                 if pruned {
                     // update min_record_id
-                    self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
+                    self.min_record_id = self.next_min_id();
                 }
             }
         }
@@ -419,4 +417,672 @@         // no pruning took place
         false
     }
+}
+
+#[cfg(test)]
+#[generic_tests::define]
+mod tests {
+    use std::any::TypeId;
+    use std::borrow::Cow;
+    use std::mem::size_of;
+    use std::sync::OnceLock;
+
+    use common::counter::hardware_accumulator::HwMeasurementAcc;
+    use rand::Rng;
+    use tempfile::TempDir;
+
+    use super::*;
+    use crate::common::scores_memory_pool::ScoresMemoryPool;
+    use crate::common::sparse_vector::SparseVector;
+    use crate::common::sparse_vector_fixture::random_sparse_vector;
+    use crate::common::types::QuantizedU8;
+    use crate::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
+    use crate::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
+    use crate::index::inverted_index::inverted_index_immutable_ram::InvertedIndexImmutableRam;
+    use crate::index::inverted_index::inverted_index_mmap::InvertedIndexMmap;
+    use crate::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+    use crate::index::inverted_index::inverted_index_ram_builder::InvertedIndexBuilder;
+    use crate::index::posting_list::PostingList;
+    use crate::index::posting_list_common::PostingListIter;
+
+    // ---- Test instantiations ----
+
+    #[instantiate_tests(<InvertedIndexRam>)]
+    mod ram {}
+
+    #[instantiate_tests(<InvertedIndexMmap>)]
+    mod mmap {}
+
+    #[instantiate_tests(<InvertedIndexImmutableRam>)]
+    mod iram {}
+
+    #[instantiate_tests(<InvertedIndexCompressedImmutableRam<f32>>)]
+    mod iram_f32 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedImmutableRam<half::f16>>)]
+    mod iram_f16 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedImmutableRam<u8>>)]
+    mod iram_u8 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedImmutableRam<QuantizedU8>>)]
+    mod iram_q8 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<f32>>)]
+    mod mmap_f32 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<half::f16>>)]
+    mod mmap_f16 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<u8>>)]
+    mod mmap_u8 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<QuantizedU8>>)]
+    mod mmap_q8 {}
+
+    // --- End of test instantiations ---
+
+    static TEST_SCORES_POOL: OnceLock<ScoresMemoryPool> = OnceLock::new();
+
+    fn get_pooled_scores() -> PooledScoresHandle<'static> {
+        TEST_SCORES_POOL
+            .get_or_init(ScoresMemoryPool::default)
+            .get()
+    }
+
+    /// Match all filter condition for testing
+    fn match_all(_p: PointOffsetType) -> bool {
+        true
+    }
+
+    /// Helper struct to store both an index and a temporary directory
+    struct TestIndex<I: InvertedIndex> {
+        index: I,
+        _temp_dir: TempDir,
+    }
+
+    impl<I: InvertedIndex> TestIndex<I> {
+        fn from_ram(ram_index: InvertedIndexRam) -> Self {
+            let temp_dir = tempfile::Builder::new()
+                .prefix("test_index_dir")
+                .tempdir()
+                .unwrap();
+            TestIndex {
+                index: I::from_ram_index(Cow::Owned(ram_index), &temp_dir).unwrap(),
+                _temp_dir: temp_dir,
+            }
+        }
+    }
+
+    /// Round scores to allow some quantization errors
+    fn round_scores<I: 'static>(mut scores: Vec<ScoredPointOffset>) -> Vec<ScoredPointOffset> {
+        let errors_allowed_for = [
+            TypeId::of::<InvertedIndexCompressedImmutableRam<QuantizedU8>>(),
+            TypeId::of::<InvertedIndexCompressedMmap<QuantizedU8>>(),
+        ];
+        if errors_allowed_for.contains(&TypeId::of::<I>()) {
+            let precision = 0.25;
+            scores.iter_mut().for_each(|score| {
+                score.score = (score.score / precision).round() * precision;
+            });
+            scores
+        } else {
+            scores
+        }
+    }
+
+    #[test]
+    fn test_empty_query<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram(InvertedIndexRam::empty());
+
+        let is_stopped = AtomicBool::new(false);
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector::default(), // empty query vector
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            HardwareCounterCell::new(),
+        );
+        assert_eq!(search_context.search(&match_all), Vec::new());
+    }
+
+    #[test]
+    fn search_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        let posting_list_element_size = size_of::<u32>() + size_of::<DimWeight>();
+        let expected_cpu_score = posting_list_element_size * 9;
+        assert_eq!(accumulator.get_cpu(), expected_cpu_score as u64);
+    }
+
+    #[test]
+    fn search_with_update_test<I: InvertedIndex + 'static>() {
+        if TypeId::of::<I>() != TypeId::of::<InvertedIndexRam>() {
+            // Only InvertedIndexRam supports upserts
+            return;
+        }
+
+        let mut index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+        drop(search_context);
+
+        // update index with new point
+        index.index.upsert(
+            4,
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![40.0, 40.0, 40.0],
+            },
+            None,
+        );
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            search_context.search(&match_all),
+            vec![
+                ScoredPointOffset {
+                    score: 120.0,
+                    idx: 4
+                },
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+    }
+
+    #[test]
+    fn search_with_hot_key_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.add(4, [(1, 1.0)].into());
+            builder.add(5, [(1, 2.0)].into());
+            builder.add(6, [(1, 3.0)].into());
+            builder.add(7, [(1, 4.0)].into());
+            builder.add(8, [(1, 5.0)].into());
+            builder.add(9, [(1, 6.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+
+        drop(search_context);
+        let posting_list_element_size = size_of::<u32>() + size_of::<DimWeight>();
+        // [ID=1] (Retrieve all 9 Vectors) => 9
+        // [ID=2] (Retrieve 1-3)           => 3
+        // [ID=3] (Retrieve 1-3)           => 3
+        //                       3 + 3 + 9 => 15
+        let expected_cpu_score = posting_list_element_size * 15;
+        assert_eq!(accumulator.get_cpu(), expected_cpu_score as u64);
+
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            4,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+                ScoredPointOffset { score: 6.0, idx: 9 },
+            ]
+        );
+
+        drop(search_context);
+
+        // No difference to previous calculation because it's the same amount of score
+        // calculations when increasing the "top" parameter.
+        let expected_cpu_score = posting_list_element_size * (3 + 3 + 9); // The same as above as index is not pruned
+        assert_eq!(accumulator.get_cpu(), expected_cpu_score as u64);
+    }
+
+    #[test]
+    fn pruning_single_to_end_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 20.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // assuming we have gathered enough results and want to prune the longest posting list
+        assert!(search_context.prune_longest_posting_list(30.0));
+        // the longest posting list was pruned to the end
+        assert_eq!(search_context.posting_list_len(0), 0);
+    }
+
+    #[test]
+    fn pruning_multi_to_end_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0)].into());
+            builder.add(2, [(1, 20.0)].into());
+            builder.add(3, [(1, 30.0)].into());
+            builder.add(5, [(3, 10.0)].into());
+            builder.add(6, [(2, 20.0), (3, 20.0)].into());
+            builder.add(7, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // assuming we have gathered enough results and want to prune the longest posting list
+        assert!(search_context.prune_longest_posting_list(30.0));
+        // the longest posting list was pruned to the end
+        assert_eq!(search_context.posting_list_len(0), 0);
+    }
+
+    #[test]
+    fn pruning_multi_under_prune_test<I: InvertedIndex>() {
+        if !I::Iter::reliable_max_next_weight() {
+            return;
+        }
+
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0)].into());
+            builder.add(2, [(1, 20.0)].into());
+            builder.add(3, [(1, 20.0)].into());
+            builder.add(4, [(1, 10.0)].into());
+            builder.add(5, [(3, 10.0)].into());
+            builder.add(6, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(7, [(1, 40.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // one would expect this to prune up to `6` but it does not happen it practice because we are under pruning by design
+        // we should actually check the best score up to `6` - 1 only instead of the max possible score (40.0)
+        assert!(!search_context.prune_longest_posting_list(30.0));
+
+        assert!(search_context.prune_longest_posting_list(40.0));
+        // the longest posting list was pruned to the end
+        assert_eq!(search_context.posting_list_len(0), 2); // 6, 7
+    }
+
+    /// Generates a random inverted index with `num_vectors` vectors
+    #[allow(dead_code)]
+    fn random_inverted_index<R: Rng + ?Sized>(
+        rnd_gen: &mut R,
+        num_vectors: u32,
+        max_sparse_dimension: usize,
+    ) -> InvertedIndexRam {
+        let mut inverted_index_ram = InvertedIndexRam::empty();
+
+        for i in 1..=num_vectors {
+            let SparseVector { indices, values } =
+                random_sparse_vector(rnd_gen, max_sparse_dimension);
+            let vector = RemappedSparseVector::new(indices, values).unwrap();
+            inverted_index_ram.upsert(i, vector, None);
+        }
+        inverted_index_ram
+    }
+
+    #[test]
+    fn promote_longest_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(search_context.posting_list_len(0), 2); // posting 2
+        assert_eq!(search_context.posting_list_len(1), 3); // posting 3
+        assert_eq!(search_context.posting_list_len(2), 2); // posting 1
+
+        search_context.promote_longest_posting_lists_to_the_front();
+
+        assert_eq!(search_context.posting_list_len(0), 3); // posting 3
+    }
+
+    #[test]
+    fn plain_search_all_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        let scores = search_context.plain_search(&[1, 3, 2]);
+        assert_eq!(
+            round_scores::<I>(scores),
+            vec![
+                ScoredPointOffset {
+                    idx: 3,
+                    score: 60.0
+                },
+                ScoredPointOffset {
+                    idx: 2,
+                    score: 40.0
+                },
+                ScoredPointOffset {
+                    idx: 1,
+                    score: 30.0
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        // [ID=1] (Retrieve three sparse vectors (1,2,3)) + QueryLength=3 => 6
+        // [ID=2] (Retrieve two sparse vectors (1,3))     + QueryLength=3 => 5
+        // [ID=3] (Retrieve two sparse vectors (1,3))     + QueryLength=3 => 5
+        //                                                      6 + 5 + 5 => 16
+
+        // CPU cost in plain search comes from:
+        // (sparse vector length of point 1) * (size of DimWeight) + (Query vector length) +
+        // (sparse vector length of point 2) * (size of DimWeight) + (Query vector length) +
+        // (sparse vector length of point 3) * (size of DimWeight) + (Query vector length)
+        //
+        // Query vector length = 3 * size_of::<DimId>() + 3 * size_of::<DimWeight>()
+        // Point 1 has indices [1, 2, 3]
+        // Point 2 has indices [1, 3]
+        // Point 3 has indices [1, 3]
+        //
+        // Point 1 with query [1, 2, 3] results in elements for indices [1, 2, 3] - 3 elements * size_of::<DimWeight>() retrieved.
+        // Point 2 with query [1, 2, 3] results in elements for indices [1, 3] - 2 elements * size_of::<DimWeight>() retrieved.
+        // Point 3 with query [1, 2, 3] results in elements for indices [1, 3] - 2 elements * size_of::<DimWeight>() retrieved.
+        //
+        // Sum of retrieved elements: 3 + 2 + 2 = 7
+        // CPU cost: 7 * size_of::<DimWeight>() + 3 * QueryLength
+        // QueryLength = 3 * (size_of::<DimId>() + size_of::<DimWeight>()) = 3 * (4 + 8) = 36 bytes
+        // CPU cost: 7 * 8 + 3 * 36 = 56 + 108 = 164 bytes
+        // This accounting seems too simple - plain search cpu usage must be higher.
+        // Let's check original commits' test expectation.
+        // commit 0cfb3b0e1d579e5ce633432f640a7f25b6437740 expected 16. This seems to count elements regardless of size.
+        // CPU cost: 7 (retrieved elements) + 3 * 3 (query length) = 7 + 9 = 16
+        let query_len = search_context.query.indices.len();
+        let expected_cpu_score = 7 + 3 * query_len; // Seems to count elements + query length mentions
+        assert_eq!(accumulator.get_cpu(), expected_cpu_score as u64);
+    }
+
+    #[test]
+    fn plain_search_gap_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        // query vector has a gap for dimension 2
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 3],
+                values: vec![1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        let scores = search_context.plain_search(&[1, 2, 3]);
+        assert_eq!(
+            round_scores::<I>(scores),
+            vec![
+                ScoredPointOffset {
+                    idx: 2,
+                    score: 40.0
+                },
+                ScoredPointOffset {
+                    idx: 3,
+                    score: 30.0 // the dimension 2 did not contribute to the score
+                },
+                ScoredPointOffset {
+                    idx: 1,
+                    score: 20.0 // the dimension 2 did not contribute to the score
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        // [ID=1] (Retrieve two sparse vectors (1,2)) + QueryLength=2 => 4
+        // [ID=2] (Retrieve two sparse vectors (1,3)) + QueryLength=2 => 4
+        // [ID=3] (Retrieve one sparse vector (3))    + QueryLength=2 => 3
+        //                                                  4 + 4 + 3 => 11
+
+        // Point 1 with query [1, 3] results in elements for indices [1, 3] - 2 elements retrieved. Query length 2. Cost = 2 + 2 = 4
+        // Point 2 with query [1, 3] results in elements for indices [1, 3] - 2 elements retrieved. Query length 2. Cost = 2 + 2 = 4
+        // Point 3 with query [1, 3] results in elements for indices [3] - 1 element retrieved. Query length 2. Cost = 1 + 2 = 3
+        // Total cost: 4 + 4 + 3 = 11
+        let query_len = search_context.query.indices.len();
+        let expected_cpu_score = (2 + query_len) + (2 + query_len) + (1 + query_len);
+        assert_eq!(accumulator.get_cpu(), expected_cpu_score as u64);
+    }
 }