
index 8be5822c..3c7f1b59 100644
--- a/qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected):tmp/tmp2swge9tr_expected.txt	
+++ b/qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual):tmp/tmp0s38l5f4_actual.txt	
@@ -133,7 +133,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
             // Accumulate the sum of the length of the retrieved sparse vector and the query vector length
             // as measurement for CPU usage of plain search.
             cpu_counter
-                .incr_delta(self.query.indices.len() + values.len() * size_of::<DimWeight>());
+                .incr_delta(self.query.indices.len() + values.len() * std::mem::size_of::<DimWeight>());
 
             // reconstruct sparse vector and score against query
             let sparse_score =
@@ -305,6 +305,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
                 start_batch_id + ADVANCE_BATCH_SIZE as u32,
                 self.max_record_id,
             );
+            let batch_len = last_batch_id - start_batch_id + 1;
 
             // advance and score posting lists iterators
             self.advance_batch(start_batch_id, last_batch_id, filter_condition);
