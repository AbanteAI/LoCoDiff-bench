--- qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected)+++ qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual)@@ -56,15 +56,12 @@                     // check if new min
                     let min_record_id_posting = first.record_id;
                     min_record_id = min(min_record_id, min_record_id_posting);
-
                     // check if new max
                     let max_record_id_posting = last_id;
                     max_record_id = max(max_record_id, max_record_id_posting);
-
                     // capture query info
                     let query_index = *id;
                     let query_weight = query.values[query_weight_offset];
-
                     postings_iterators.push(IndexedPostingListIterator {
                         posting_list_iterator: it,
                         query_index,
@@ -75,9 +72,8 @@         }
         let top_results = TopK::new(top);
         // Query vectors with negative values can NOT use the pruning mechanism which relies on the pre-computed `max_next_weight`.
-        // The max contribution per posting list that we calculate is not made to compute the max value of two negative numbers.
         // This is a limitation of the current pruning implementation.
-        let use_pruning = T::reliable_max_next_weight() && query.values.iter().all(|v| *v >= 0.0);
+        let use_pruning = query.values.iter().all(|v| *v >= 0.0);
         let min_record_id = Some(min_record_id);
         SearchContext {
             postings_iterators,
@@ -115,11 +111,9 @@             values.clear();
             // collect indices and values for the current record id from the query's posting lists *only*
             for posting_iterator in self.postings_iterators.iter_mut() {
-                // rely on underlying binary search as the posting lists are sorted by record id
                 match posting_iterator.posting_list_iterator.skip_to(id) {
-                    None => {} // no match for posting list
+                    None => {}
                     Some(element) => {
-                        // match for posting list
                         indices.push(posting_iterator.query_index);
                         values.push(element.weight);
                     }
@@ -132,8 +126,10 @@ 
             // Accumulate the sum of the length of the retrieved sparse vector and the query vector length
             // as measurement for CPU usage of plain search.
-            cpu_counter
-                .incr_delta(self.query.indices.len() + values.len() * size_of::<DimWeight>());
+            cpu_counter.incr_delta(
+                self.query.indices.len()
+                    + values.len() * std::mem::size_of::<DimWeight>(),
+            );
 
             // reconstruct sparse vector and score against query
             let sparse_score =
@@ -165,30 +161,21 @@             posting.posting_list_iterator.for_each_till_id(
                 batch_last_id,
                 self.pooled.scores.as_mut_slice(),
-                #[inline(always)]
                 |scores, id, weight| {
                     let element_score = weight * posting.query_weight;
                     let local_id = (id - batch_start_id) as usize;
-                    // SAFETY: `id` is within `batch_start_id..=batch_last_id`
-                    // Thus, `local_id` is within `0..batch_len`.
-                    *unsafe { scores.get_unchecked_mut(local_id) } += element_score;
+                    unsafe { *scores.get_unchecked_mut(local_id) += element_score };
                 },
             );
         }
-
+        // publish only the non-zero scores above the current threshold
         for (local_index, &score) in self.pooled.scores.iter().enumerate() {
-            // publish only the non-zero scores above the current min to beat
             if score != 0.0 && score > self.top_results.threshold() {
                 let real_id = batch_start_id + local_index as PointOffsetType;
-                // do not score if filter condition is not satisfied
                 if !filter_condition(real_id) {
                     continue;
                 }
-                let score_point_offset = ScoredPointOffset {
-                    score,
-                    idx: real_id,
-                };
-                self.top_results.push(score_point_offset);
+                self.top_results.push(ScoredPointOffset { score, idx: real_id });
             }
         }
     }
@@ -201,7 +188,6 @@             PointOffsetType::MAX,
             &mut (),
             |_, id, weight| {
-                // do not score if filter condition is not satisfied
                 if !filter_condition(id) {
                     return;
                 }
@@ -216,14 +202,11 @@     /// returns None if all posting list iterators are exhausted
     fn next_min_id(to_inspect: &mut [IndexedPostingListIterator<T>]) -> Option<PointOffsetType> {
         let mut min_record_id = None;
-
-        // Iterate to find min record id at the head of the posting lists
         for posting_iterator in to_inspect.iter_mut() {
             if let Some(next_element) = posting_iterator.posting_list_iterator.peek() {
                 match min_record_id {
-                    None => min_record_id = Some(next_element.record_id), // first record with matching id
+                    None => min_record_id = Some(next_element.record_id),
                     Some(min_id_seen) => {
-                        // update min record id if smaller
                         if next_element.record_id < min_id_seen {
                             min_record_id = Some(next_element.record_id);
                         }
@@ -231,13 +214,11 @@                 }
             }
         }
-
         min_record_id
     }
 
     /// Make sure the longest posting list is at the head of the posting list iterators
     pub(crate) fn promote_longest_posting_lists_to_the_front(&mut self) {
-        // find index of longest posting list
         let posting_index = self
             .postings_iterators
             .iter()
@@ -250,20 +231,10 @@             .map(|(index, _)| index);
 
         if let Some(posting_index) = posting_index {
-            // make sure it is not already at the head
             if posting_index != 0 {
-                // swap longest posting list to the head
                 self.postings_iterators.swap(0, posting_index);
             }
         }
-    }
-
-    /// How many elements are left in the posting list iterator
-    #[cfg(test)]
-    pub(crate) fn posting_list_len(&self, idx: usize) -> usize {
-        self.postings_iterators[idx]
-            .posting_list_iterator
-            .len_to_end()
     }
 
     /// Search for the top k results that satisfy the filter condition
@@ -274,18 +245,17 @@         if self.postings_iterators.is_empty() {
             return Vec::new();
         }
-
         {
             // Measure CPU usage of indexed sparse search.
             // Assume the complexity of the search as total volume of the posting lists
             // that are traversed in the batched search.
+            let cpu_counter = self.hardware_counter.cpu_counter();
             let mut cpu_cost = 0;
-
             for posting in self.postings_iterators.iter() {
                 cpu_cost += posting.posting_list_iterator.len_to_end()
                     * posting.posting_list_iterator.element_size();
             }
-            self.hardware_counter.cpu_counter().incr_delta(cpu_cost);
+            cpu_counter.incr_delta(cpu_cost);
         }
 
         let mut best_min_score = f32::MIN;
@@ -295,18 +265,21 @@                 break;
             }
 
-            // prepare next iterator of batched ids
+            // get and validate the next starting batch ID
             let Some(start_batch_id) = self.min_record_id else {
                 break;
             };
 
             // compute batch range of contiguous ids for the next batch
             let last_batch_id = min(
-                start_batch_id + ADVANCE_BATCH_SIZE as u32,
+                start_batch_id + ADVANCE_BATCH_SIZE as PointOffsetType,
                 self.max_record_id,
             );
 
-            // advance and score posting lists iterators
+            // current threshold for pruning
+            let new_min_score = self.top_results.threshold();
+
+            // advance and score posting lists iterators in batched manner
             self.advance_batch(start_batch_id, last_batch_id, filter_condition);
 
             // remove empty posting lists if necessary
@@ -314,109 +287,87 @@                 posting_iterator.posting_list_iterator.len_to_end() != 0
             });
 
-            // update min_record_id
+            // update min_record_id for next iteration
             self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
 
             // check if all posting lists are exhausted
             if self.postings_iterators.is_empty() {
                 break;
             }
-
             // if only one posting list left, we can score it quickly
             if self.postings_iterators.len() == 1 {
                 self.process_last_posting_list(filter_condition);
                 break;
             }
-
             // we potentially have enough results to prune low performing posting lists
             if self.use_pruning && self.top_results.len() >= self.top {
-                // current min score
-                let new_min_score = self.top_results.threshold();
-                if new_min_score == best_min_score {
-                    // no improvement in lowest best score since last pruning - skip pruning
+                let new_threshold = self.top_results.threshold();
+                if new_threshold == best_min_score {
                     continue;
                 } else {
-                    best_min_score = new_min_score;
-                }
-                // make sure the first posting list is the longest for pruning
+                    best_min_score = new_threshold;
+                }
                 self.promote_longest_posting_lists_to_the_front();
-
-                // prune posting list that cannot possibly contribute to the top results
-                let pruned = self.prune_longest_posting_list(new_min_score);
+                let pruned = self.prune_longest_posting_list(new_threshold);
                 if pruned {
-                    // update min_record_id
                     self.min_record_id = Self::next_min_id(&mut self.postings_iterators);
                 }
             }
         }
-        // posting iterators exhausted, return result queue
-        let queue = std::mem::take(&mut self.top_results);
-        queue.into_vec()
-    }
-
-    /// Prune posting lists that cannot possibly contribute to the top results
+        let top = std::mem::take(&mut self.top_results);
+        top.into_vec()
+    }
+
     /// Assumes longest posting list is at the head of the posting list iterators
     /// Returns true if the longest posting list was pruned
     pub fn prune_longest_posting_list(&mut self, min_score: f32) -> bool {
         if self.postings_iterators.is_empty() {
             return false;
         }
-        // peek first element of longest posting list
-        let (longest_posting_iterator, rest_iterators) = self.postings_iterators.split_at_mut(1);
-        let longest_posting_iterator = &mut longest_posting_iterator[0];
+        let (longest, others) = self.postings_iterators.split_at_mut(1);
+        let longest_posting_iterator = &mut longest[0];
         if let Some(element) = longest_posting_iterator.posting_list_iterator.peek() {
-            let next_min_id_in_others = Self::next_min_id(rest_iterators);
+            let next_min_id_in_others = Self::next_min_id(others);
             match next_min_id_in_others {
-                Some(next_min_id) => {
-                    match next_min_id.cmp(&element.record_id) {
-                        Ordering::Equal => {
-                            // if the next min id in the other posting lists is the same as the current one,
-                            // we can't prune the current element as it needs to be scored properly across posting lists
-                            return false;
-                        }
-                        Ordering::Less => {
-                            // we can't prune as there the other posting lists contains smaller smaller ids that need to scored first
-                            return false;
-                        }
-                        Ordering::Greater => {
-                            // next_min_id is > element.record_id there is a chance to prune up to `next_min_id`
-                            // check against the max possible score using the `max_next_weight`
-                            // we can under prune as we should actually check the best score up to `next_min_id` - 1 only
-                            // instead of the max possible score but it is not possible to know the best score up to `next_min_id` - 1
-                            let max_weight_from_list = element.weight.max(element.max_next_weight);
-                            let max_score_contribution =
-                                max_weight_from_list * longest_posting_iterator.query_weight;
-                            if max_score_contribution <= min_score {
-                                // prune to next_min_id
-                                let longest_posting_iterator =
-                                    &mut self.postings_iterators[0].posting_list_iterator;
-                                let position_before_pruning =
-                                    longest_posting_iterator.current_index();
-                                longest_posting_iterator.skip_to(next_min_id);
-                                let position_after_pruning =
-                                    longest_posting_iterator.current_index();
-                                // check if pruning took place
-                                return position_before_pruning != position_after_pruning;
-                            }
+                Some(next_min_id) => match next_min_id.cmp(&element.record_id) {
+                    Ordering::Equal => false,
+                    Ordering::Less => false,
+                    Ordering::Greater => {
+                        let max_weight_from_list = element.weight.max(element.max_next_weight);
+                        let max_score_contribution =
+                            max_weight_from_list * longest_posting_iterator.query_weight;
+                        if max_score_contribution <= min_score {
+                            let before = longest_posting_iterator
+                                .posting_list_iterator
+                                .current_index();
+                            longest_posting_iterator
+                                .posting_list_iterator
+                                .skip_to(next_min_id);
+                            let after = longest_posting_iterator
+                                .posting_list_iterator
+                                .current_index();
+                            before != after
+                        } else {
+                            false
                         }
                     }
-                }
+                },
                 None => {
-                    // the current posting list is the only one left, we can potentially skip it to the end
-                    // check against the max possible score using the `max_next_weight`
                     let max_weight_from_list = element.weight.max(element.max_next_weight);
                     let max_score_contribution =
                         max_weight_from_list * longest_posting_iterator.query_weight;
                     if max_score_contribution <= min_score {
-                        // prune to the end!
-                        let longest_posting_iterator = &mut self.postings_iterators[0];
-                        longest_posting_iterator.posting_list_iterator.skip_to_end();
-                        return true;
+                        longest_posting_iterator
+                            .posting_list_iterator
+                            .skip_to_end();
+                        true
+                    } else {
+                        false
                     }
                 }
             }
-        }
-        // no pruning took place
-        false
+        } else {
+            false
+        }
     }
 }