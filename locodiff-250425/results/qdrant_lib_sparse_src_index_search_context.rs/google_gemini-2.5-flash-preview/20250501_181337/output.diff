--- qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected)+++ qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual)@@ -1,4 +1,5 @@-use std::cmp::{Ordering, max, min};
+use std::cmp::{max, min, Ordering};
+use std::mem::size_of;
 use std::sync::atomic::AtomicBool;
 use std::sync::atomic::Ordering::Relaxed;
 
@@ -8,7 +9,7 @@ 
 use super::posting_list_common::PostingListIter;
 use crate::common::scores_memory_pool::PooledScoresHandle;
-use crate::common::sparse_vector::{RemappedSparseVector, score_vectors};
+use crate::common::sparse_vector::{score_vectors, RemappedSparseVector};
 use crate::common::types::{DimId, DimWeight};
 use crate::index::inverted_index::InvertedIndex;
 use crate::index::posting_list::PostingListIterator;
@@ -93,10 +94,7 @@         }
     }
 
-    const DEFAULT_SCORE: f32 = 0.0;
-
-    /// Plain search against the given ids without any pruning
-    pub fn plain_search(&mut self, ids: &[PointOffsetType]) -> Vec<ScoredPointOffset> {
+    fn plain_search(&mut self, ids: &[PointOffsetType]) -> Vec<ScoredPointOffset> {
         // sort ids to fully leverage posting list iterator traversal
         let mut sorted_ids = ids.to_vec();
         sorted_ids.sort_unstable();
@@ -149,7 +147,13 @@         top.into_vec()
     }
 
+    const DEFAULT_SCORE: f32 = 0.0;
+
     /// Advance posting lists iterators in a batch fashion.
+    ///
+    /// For a given batch range [batch_start_id, batch_last_id], this method iterates over
+    /// all posting lists and accumulates the scores for each record id in the batch.
+    /// It then publishes the non-zero scores above the current min score to the result queue.
     fn advance_batch<F: Fn(PointOffsetType) -> bool>(
         &mut self,
         batch_start_id: PointOffsetType,
@@ -159,7 +163,7 @@         // init batch scores
         let batch_len = batch_last_id - batch_start_id + 1;
         self.pooled.scores.clear(); // keep underlying allocated memory
-        self.pooled.scores.resize(batch_len as usize, 0.0);
+        self.pooled.scores.resize(batch_len as usize, Self::DEFAULT_SCORE);
 
         for posting in self.postings_iterators.iter_mut() {
             posting.posting_list_iterator.for_each_till_id(
@@ -178,7 +182,7 @@ 
         for (local_index, &score) in self.pooled.scores.iter().enumerate() {
             // publish only the non-zero scores above the current min to beat
-            if score != 0.0 && score > self.top_results.threshold() {
+            if score != Self::DEFAULT_SCORE && score > self.top_results.threshold() {
                 let real_id = batch_start_id + local_index as PointOffsetType;
                 // do not score if filter condition is not satisfied
                 if !filter_condition(real_id) {
@@ -279,13 +283,14 @@             // Measure CPU usage of indexed sparse search.
             // Assume the complexity of the search as total volume of the posting lists
             // that are traversed in the batched search.
+            let cpu_counter = self.hardware_counter.cpu_counter();
             let mut cpu_cost = 0;
 
             for posting in self.postings_iterators.iter() {
                 cpu_cost += posting.posting_list_iterator.len_to_end()
                     * posting.posting_list_iterator.element_size();
             }
-            self.hardware_counter.cpu_counter().incr_delta(cpu_cost);
+            cpu_counter.incr_delta(cpu_cost);
         }
 
         let mut best_min_score = f32::MIN;
@@ -311,7 +316,7 @@ 
             // remove empty posting lists if necessary
             self.postings_iterators.retain(|posting_iterator| {
-                posting_iterator.posting_list_iterator.len_to_end() != 0
+                !posting_iterator.posting_list_iterator.is_empty()
             });
 
             // update min_record_id
@@ -350,8 +355,8 @@             }
         }
         // posting iterators exhausted, return result queue
-        let queue = std::mem::take(&mut self.top_results);
-        queue.into_vec()
+        let top = std::mem::take(&mut self.top_results);
+        top.into_vec()
     }
 
     /// Prune posting lists that cannot possibly contribute to the top results
@@ -419,4 +424,733 @@         // no pruning took place
         false
     }
+}
+
+#[cfg(test)]
+#[generic_tests::define]
+mod tests {
+    use std::any::TypeId;
+    use std::borrow::Cow;
+    use std::mem::size_of;
+    use std::sync::OnceLock;
+
+    use common::counter::hardware_accumulator::HwMeasurementAcc;
+    use rand::Rng;
+    use tempfile::TempDir;
+
+    use super::*;
+    use crate::common::scores_memory_pool::ScoresMemoryPool;
+    use crate::common::sparse_vector::SparseVector;
+    use crate::common::sparse_vector_fixture::random_sparse_vector;
+    use crate::common::types::QuantizedU8;
+    use crate::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
+    use crate::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
+    use crate::index::inverted_index::inverted_index_immutable_ram::InvertedIndexImmutableRam;
+    use crate::index::inverted_index::inverted_index_mmap::InvertedIndexMmap;
+    use crate::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+    use crate::index::inverted_index::inverted_index_ram_builder::InvertedIndexBuilder;
+
+    // ---- Test instantiations ----
+
+    #[instantiate_tests(<InvertedIndexRam>)]
+    mod ram {}
+
+    #[instantiate_tests(<InvertedIndexMmap>)]
+    mod mmap {}
+
+    #[instantiate_tests(<InvertedIndexImmutableRam>)]
+    mod iram {}
+
+    #[instantiate_tests(<InvertedIndexCompressedImmutableRam<f32>>)]
+    mod iram_f32 {}
+
+    #[instantiate_tests(
+        <InvertedIndexCompressedImmutableRam<half::f16>> // requires `max_next_weight`
+    )]
+    mod iram_f16 {}
+
+    #[instantiate_tests(
+        <InvertedIndexCompressedImmutableRam<u8>> // requires `max_next_weight`
+    )]
+    mod iram_u8 {}
+
+    #[instantiate_tests(
+        <InvertedIndexCompressedImmutableRam<QuantizedU8>> // requires `max_next_weight`
+    )]
+    mod iram_q8 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<f32>>)]
+    mod mmap_f32 {}
+
+    #[instantiate_tests(
+        <InvertedIndexCompressedMmap<half::f16>> // requires `max_next_weight`
+    )]
+    mod mmap_f16 {}
+
+    #[instantiate_tests(<InvertedIndexCompressedMmap<u8>>)] // requires `max_next_weight`
+    mod mmap_u8 {}
+
+    #[instantiate_tests(
+        <InvertedIndexCompressedMmap<QuantizedU8>> // requires `max_next_weight`
+    )]
+    mod mmap_q8 {}
+
+    // --- End of test instantiations ---
+
+    static TEST_SCORES_POOL: OnceLock<ScoresMemoryPool> =
+        OnceLock::new();
+
+    fn get_pooled_scores() -> PooledScoresHandle<'static> {
+        TEST_SCORES_POOL
+            .get_or_init(ScoresMemoryPool::default)
+            .get()
+    }
+
+    /// Match all filter condition for testing
+    fn match_all(_p: PointOffsetType) -> bool {
+        true
+    }
+
+    /// Helper struct to store both an index and a temporary directory
+    struct TestIndex<I: InvertedIndex> {
+        index: I,
+        _temp_dir: TempDir,
+    }
+
+    impl<I: InvertedIndex> TestIndex<I> {
+        fn from_ram(ram_index: InvertedIndexRam) -> Self {
+            let temp_dir = tempfile::Builder::new()
+                .prefix("test_index_dir")
+                .tempdir()
+                .unwrap();
+            TestIndex {
+                index: I::from_ram_index(Cow::Owned(ram_index), &temp_dir).unwrap(),
+                _temp_dir: temp_dir,
+            }
+        }
+    }
+
+    /// Round scores to allow some quantization errors
+    fn round_scores<I: 'static>(mut scores: Vec<ScoredPointOffset>) -> Vec<ScoredPointOffset> {
+        let errors_allowed_for = [
+            TypeId::of::<InvertedIndexCompressedImmutableRam<QuantizedU8>>(),
+            TypeId::of::<InvertedIndexCompressedMmap<QuantizedU8>>(),
+        ];
+        if errors_allowed_for.contains(&TypeId::of::<I>()) {
+            let precision = 0.25;
+            scores.iter_mut().for_each(|score| {
+                score.score = (score.score / precision).round() * precision;
+            });
+            scores
+        } else {
+            scores
+        }
+    }
+
+    #[test]
+    fn test_empty_query<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram(InvertedIndexRam::empty());
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector::default(), // empty query vector
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+        assert_eq!(search_context.search(&match_all), Vec::new());
+    }
+
+    #[test]
+    fn search_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        // len(QueryVector)=3 * len(vector)=3 => 3*3 => 9
+        assert_eq!(accumulator.get_cpu(), 9 * size_of::<f32>());
+    }
+
+    #[test]
+    fn search_with_update_test<I: InvertedIndex + 'static>() {
+        if TypeId::of::<I>() != TypeId::of::<InvertedIndexRam>() {
+            // Only InvertedIndexRam supports upserts
+            return;
+        }
+
+        let mut index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+        drop(search_context);
+
+        // update index with new point
+        index.index.upsert(
+            4,
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![40.0, 40.0, 40.0],
+            },
+            None,
+        );
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            10,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            search_context.search(&match_all),
+            vec![
+                ScoredPointOffset {
+                    score: 120.0,
+                    idx: 4
+                },
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+    }
+
+    #[test]
+    fn search_with_hot_key_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (2, 30.0), (3, 30.0)].into());
+            builder.add(4, [(1, 1.0)].into());
+            builder.add(5, [(1, 2.0)].into());
+            builder.add(6, [(1, 3.0)].into());
+            builder.add(7, [(1, 4.0)].into());
+            builder.add(8, [(1, 5.0)].into());
+            builder.add(9, [(1, 6.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+            ]
+        );
+
+        drop(search_context);
+        // [ID=1] (Retrieve all 9 Vectors) => 9
+        // [ID=2] (Retrieve 1-3)           => 3
+        // [ID=3] (Retrieve 1-3)           => 3
+        //                       3 + 3 + 9 => 15
+        assert_eq!(accumulator.get_cpu(), 15 * size_of::<f32>());
+
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            4,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(
+            round_scores::<I>(search_context.search(&match_all)),
+            vec![
+                ScoredPointOffset {
+                    score: 90.0,
+                    idx: 3
+                },
+                ScoredPointOffset {
+                    score: 60.0,
+                    idx: 2
+                },
+                ScoredPointOffset {
+                    score: 30.0,
+                    idx: 1
+                },
+                ScoredPointOffset { score: 6.0, idx: 9 },
+            ]
+        );
+
+        drop(search_context);
+
+        // No difference to previous calculation because it's the same amount of score
+        // calculations when increasing the "top" parameter.
+        assert_eq!(accumulator.get_cpu(), 15 * size_of::<f32>());
+    }
+
+    #[test]
+    fn pruning_single_to_end_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0)].into());
+            builder.add(2, [(1, 20.0)].into());
+            builder.add(3, [(1, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // assuming we have gathered enough results and want to prune the longest posting list
+        assert!(search_context.prune_longest_posting_list(30.0));
+        // the longest posting list was pruned to the end
+        assert_eq!(search_context.posting_list_len(0), 0);
+    }
+
+    #[test]
+    fn pruning_multi_to_end_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0)].into());
+            builder.add(2, [(1, 20.0)].into());
+            builder.add(3, [(1, 30.0)].into());
+            builder.add(5, [(3, 10.0)].into());
+            builder.add(6, [(2, 20.0), (3, 20.0)].into());
+            builder.add(7, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // assuming we have gathered enough results and want to prune the longest posting list
+        assert!(search_context.prune_longest_posting_list(30.0));
+        // the longest posting list was pruned to the end
+        assert_eq!(search_context.posting_list_len(0), 0);
+    }
+
+    #[test]
+    fn pruning_multi_under_prune_test<I: InvertedIndex>() {
+        if !I::Iter::reliable_max_next_weight() {
+            return;
+        }
+
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0)].into());
+            builder.add(2, [(1, 20.0)].into());
+            builder.add(3, [(1, 20.0)].into());
+            builder.add(4, [(1, 10.0)].into());
+            builder.add(5, [(3, 10.0)].into());
+            builder.add(6, [(1, 20.0), (2, 20.0), (3, 20.0)].into());
+            builder.add(7, [(1, 40.0), (2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            1,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        // one would expect this to prune up to `6` but it does not happen it practice because we are under pruning by design
+        // we should actually check the best score up to `6` - 1 only instead of the max possible score (40.0)
+        assert!(!search_context.prune_longest_posting_list(30.0));
+
+        assert!(search_context.prune_longest_posting_list(40.0));
+        // the longest posting list pruned up to id=6
+        assert_eq!(search_context.posting_list_len(0), 2);
+    }
+
+    /// Generates a random inverted index with `num_vectors` vectors
+    #[allow(dead_code)]
+    fn random_inverted_index<R: Rng>(
+        rnd_gen: &mut R,
+        num_vectors: u32,
+        max_sparse_dimension: usize,
+    ) -> InvertedIndexRam {
+        let mut inverted_index_ram = InvertedIndexRam::empty();
+
+        for i in 1..=num_vectors {
+            let SparseVector { indices, values } =
+                random_sparse_vector(rnd_gen, max_sparse_dimension);
+            let vector = RemappedSparseVector::new(indices, values).unwrap();
+            inverted_index_ram.upsert(i, vector, None);
+        }
+        inverted_index_ram
+    }
+
+    #[test]
+    fn promote_longest_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        assert_eq!(search_context.posting_list_len(0), 2);
+
+        search_context.promote_longest_posting_lists_to_the_front();
+
+        assert_eq!(search_context.posting_list_len(0), 3);
+    }
+
+    #[test]
+    fn plain_search_all_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(1, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 2, 3],
+                values: vec![1.0, 1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        let scores = search_context.plain_search(&[1, 3, 2]);
+        assert_eq!(
+            round_scores::<I>(scores),
+            vec![
+                ScoredPointOffset {
+                    idx: 3,
+                    score: 60.0
+                },
+                ScoredPointOffset {
+                    idx: 2,
+                    score: 40.0
+                },
+                ScoredPointOffset {
+                    idx: 1,
+                    score: 30.0
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        // The cost of plain search is `number of IDs to score` * (`query vector dimensions` + `sum of values lengths for these dimensions`).
+        // This is
+        // For ID 1: Query {1, 2, 3} + vector {1, 2, 3} * element_size => 3 + 3 * 4 = 15
+        // For ID 3: Query {1, 2, 3} + vector {1, 3} * element_size => 3 + 2 * 4 = 11
+        // For ID 2: Query {1, 2, 3} + vector {1, 3} * element_size => 3 + 2 * 4 = 11
+        // Total CPU = 15 + 11 + 11 = 37
+        assert_eq!(accumulator.get_cpu(), 37);
+    }
+
+    #[test]
+    fn plain_search_gap_test<I: InvertedIndex>() {
+        let index = TestIndex::<I>::from_ram({
+            let mut builder = InvertedIndexBuilder::new();
+            builder.add(1, [(1, 10.0), (2, 10.0), (3, 10.0)].into());
+            builder.add(2, [(1, 20.0), (3, 20.0)].into());
+            builder.add(3, [(2, 30.0), (3, 30.0)].into());
+            builder.build()
+        });
+
+        // query vector has a gap for dimension 2
+        let is_stopped = AtomicBool::new(false);
+        let accumulator = HwMeasurementAcc::new();
+        let hardware_counter = accumulator.get_counter_cell();
+        let mut search_context = SearchContext::new(
+            RemappedSparseVector {
+                indices: vec![1, 3],
+                values: vec![1.0, 1.0],
+            },
+            3,
+            &index.index,
+            get_pooled_scores(),
+            &is_stopped,
+            hardware_counter,
+        );
+
+        let scores = search_context.plain_search(&[1, 2, 3]);
+        assert_eq!(
+            round_scores::<I>(scores),
+            vec![
+                ScoredPointOffset {
+                    idx: 2,
+                    score: 40.0
+                },
+                ScoredPointOffset {
+                    idx: 3,
+                    score: 30.0 // the dimension 2 did not contribute to the score
+                },
+                ScoredPointOffset {
+                    idx: 1,
+                    score: 20.0 // the dimension 2 did not contribute to the score
+                },
+            ]
+        );
+
+        drop(search_context);
+
+        // The cost of plain search is `number of IDs to score` * (`query vector dimensions` + `sum of values lengths for these dimensions`).
+        // This is
+        // For ID 1: Query {1, 3} + vector {1, 2, 3} * element_size
+        // For ID 2: Query {1, 3} + vector {1, 3} * element_size
+        // For ID 3: Query {1, 3} + vector {2, 3} * element_size
+        match TypeId::of::<I>() {
+            id if id == TypeId::of::<InvertedIndexRam>() => {
+                // ID 1 = 2 + 3 * 8 = 26
+                // ID 2 = 2 + 2 * 8 = 18
+                // ID 3 = 2 + 2 * 8 = 18
+                // Total CPU = 26 + 18 + 18 = 62
+                assert_eq!(accumulator.get_cpu(), 62);
+            }
+            id if id == TypeId::of::<InvertedIndexMmap>() => {
+                // ID 1 = 2 + 3 * 8 = 26
+                // ID 2 = 2 + 2 * 8 = 18
+                // ID 3 = 2 + 2 * 8 = 18
+                // Total CPU = 26 + 18 + 18 = 62
+                assert_eq!(accumulator.get_cpu(), 62);
+            }
+            id if id == TypeId::of::<InvertedIndexImmutableRam>() => {
+                // ID 1 = 2 + 3 * 4 = 14
+                // ID 2 = 2 + 2 * 4 = 10
+                // ID 3 = 2 + 2 * 4 = 10
+                // Total CPU = 14 + 10 + 10 = 34
+                assert_eq!(accumulator.get_cpu(), 34);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedImmutableRam<f32>>() => {
+                // ID 1 = 2 + 3 * ((0+2)+4) = 20
+                // ID 2 = 2 + 2 * ((0+2)+4) = 14
+                // ID 3 = 2 + 2 * ((0+2)+4) = 14
+                // Total CPU = 20 + 14 + 14 = 48
+                assert_eq!(accumulator.get_cpu(), 48);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedImmutableRam<half::f16>>() => {
+                // ID 1 = 2 + 3 * ((0+2)+2) = 14
+                // ID 2 = 2 + 2 * ((0+2)+2) = 10
+                // ID 3 = 2 + 2 * ((0+2)+2) = 10
+                // Total CPU = 14 + 10 + 10 = 34
+                assert_eq!(accumulator.get_cpu(), 34);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedImmutableRam<u8>>() => {
+                // ID 1 = 2 + 3 * ((0+2)+1) = 11
+                // ID 2 = 2 + 2 * ((0+2)+1) = 8
+                // ID 3 = 2 + 2 * ((0+2)+1) = 8
+                // Total CPU = 11 + 8 + 8 = 27
+                assert_eq!(accumulator.get_cpu(), 27);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedImmutableRam<QuantizedU8>>() => {
+                // ID 1 = 2 + 3 * ((0+2)+1) = 11
+                // ID 2 = 2 + 2 * ((0+2)+1) = 8
+                // ID 3 = 2 + 2 * ((0+2)+1) = 8
+                // Total CPU = 11 + 8 + 8 = 27
+                assert_eq!(accumulator.get_cpu(), 27);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedMmap<f32>>() => {
+                // ID 1 = 2 + 3*8 + 3*4 = 38
+                // ID 2 = 2 + 2*8 + 2*4 = 26
+                // ID 3 = 2 + 2*8 + 2*4 = 26
+                // Total CPU = 38 + 26 + 26 = 90
+                assert_eq!(accumulator.get_cpu(), 90);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedMmap<half::f16>>() => {
+                // ID 1 = 2 + 3*8 + 3*2 = 32
+                // ID 2 = 2 + 2*8 + 2*2 = 22
+                // ID 3 = 2 + 2*8 + 2*2 = 22
+                // Total CPU = 32 + 22 + 22 = 76
+                assert_eq!(accumulator.get_cpu(), 76);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedMmap<u8>>() => {
+                // ID 1 = 2 + 3*8 + 3*1 = 29
+                // ID 2 = 2 + 2*8 + 2*1 = 20
+                // ID 3 = 2 + 2*8 + 2*1 = 20
+                // Total CPU = 29 + 20 + 20 = 69
+                assert_eq!(accumulator.get_cpu(), 69);
+            }
+            id if id == TypeId::of::<InvertedIndexCompressedMmap<QuantizedU8>>() => {
+                // ID 1 = 2 + 3*8 + 3*1 = 29
+                // ID 2 = 2 + 2*8 + 2*1 = 20
+                // ID 3 = 2 + 2*8 + 2*1 = 20
+                // Total CPU = 29 + 20 + 20 = 69
+                assert_eq!(accumulator.get_cpu(), 69);
+            }
+            _ => unexpected_type(),
+        }
+    }
+
+    fn unexpected_type() -> ! {
+        panic!("Unexpected type")
+    }
 }