
index 8be5822c3..5def10939 100644
--- a/qdrant_lib_sparse_src_index_search_context.rs_expectedoutput.txt (expected):tmp/tmpj_79d215_expected.txt	
+++ b/qdrant_lib_sparse_src_index_search_context.rs_extracted.txt (actual):tmp/tmpzgq6_ubm_actual.txt	
@@ -1,4 +1,4 @@
-use std::cmp::{Ordering, max, min};
+use std::cmp::{max, min, Ordering};
 use std::sync::atomic::AtomicBool;
 use std::sync::atomic::Ordering::Relaxed;
 
@@ -116,7 +116,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
             // collect indices and values for the current record id from the query's posting lists *only*
             for posting_iterator in self.postings_iterators.iter_mut() {
                 // rely on underlying binary search as the posting lists are sorted by record id
-                match posting_iterator.posting_list_iterator.skip_to(id) {
+                match posting_iterator.posting_list_iterator.skip_to(*id) {
                     None => {} // no match for posting list
                     Some(element) => {
                         // match for posting list
@@ -132,8 +132,9 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
 
             // Accumulate the sum of the length of the retrieved sparse vector and the query vector length
             // as measurement for CPU usage of plain search.
-            cpu_counter
-                .incr_delta(self.query.indices.len() + values.len() * size_of::<DimWeight>());
+            cpu_counter.incr_delta(
+                self.query.indices.len() + values.len() * std::mem::size_of::<DimWeight>(),
+            );
 
             // reconstruct sparse vector and score against query
             let sparse_score =
@@ -142,7 +143,7 @@ impl<'a, 'b, T: PostingListIter> SearchContext<'a, 'b, T> {
 
             self.top_results.push(ScoredPointOffset {
                 score: sparse_score,
-                idx: id,
+                idx: *id,
             });
         }
         let top = std::mem::take(&mut self.top_results);
