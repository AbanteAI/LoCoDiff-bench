
index 1f7e604f9..ae2312582 100644
--- a/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_expectedoutput.txt (expected):tmp/tmpzmyf260w_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_extracted.txt (actual):tmp/tmp3jgve4n6_actual.txt	
@@ -59,6 +59,9 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 
 	if (onlyShape && editor.isShapeHidden(onlyShape)) return null
 
+	if (!bounds) return null
+	bounds = bounds.clone().expandBy(expandOutlineBy).zeroFix()
+
 	const zoom = editor.getZoomLevel()
 	const isChangingStyle = editor.getInstanceState().isChangingStyle
 
@@ -226,7 +229,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					cursor={isDefaultCursor ? getCursor('swne-rotate', rotation) : undefined}
 					isHidden={hideRotateCornerHandles}
 				/>
-				<RotateCornerHandle
+			<RotateCornerHandle
 					data-testid="selection.rotate.bottom-right"
 					cx={width + targetSize * 3}
 					cy={height + targetSize * 3}
@@ -425,113 +428,4 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							role="button"
 							aria-label="bottom_left handle"
 							x={toDomPrecision(0 - size / 4)}
-							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
-							rx={size / 4}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
-						/>
-						<rect
-							data-testid="selection.text-resize.right.handle"
-							className="tl-text-handle"
-							role="button"
-							aria-label="bottom_left handle"
-							rx={size / 4}
-							x={toDomPrecision(width - size / 4)}
-							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
-						/>
-					</>
-				)}
-				{/* Crop Handles */}
-				{showCropHandles && (
-					<TldrawCropHandles
-						{...{
-							size,
-							width,
-							height,
-							hideAlternateHandles: hideAlternateCropHandles,
-						}}
-					/>
-				)}
-			</g>
-		</svg>
-	)
-})
-
-export const RotateCornerHandle = function RotateCornerHandle({
-	cx,
-	cy,
-	targetSize,
-	corner,
-	cursor,
-	isHidden,
-	'data-testid': testId,
-}: {
-	cx: number
-	cy: number
-	targetSize: number
-	corner: RotateCorner
-	cursor?: string
-	isHidden: boolean
-	'data-testid'?: string
-}) {
-	const events = useSelectionEvents(corner)
-	return (
-		<rect
-			className={classNames('tl-transparent', 'tl-rotate-corner', { 'tl-hidden': isHidden })}
-			data-testid={testId}
-			role="button"
-			aria-label={`${corner} target`}
-			pointerEvents="all"
-			x={toDomPrecision(cx - targetSize * 3)}
-			y={toDomPrecision(cy - targetSize * 3)}
-			width={toDomPrecision(Math.max(1, targetSize * 3))}
-			height={toDomPrecision(Math.max(1, targetSize * 3))}
-			cursor={cursor}
-			{...events}
-		/>
-	)
-}
-
-const SQUARE_ROOT_PI = Math.sqrt(Math.PI)
-
-export const MobileRotateHandle = function RotateHandle({
-	cx,
-	cy,
-	size,
-	isHidden,
-	'data-testid': testId,
-}: {
-	cx: number
-	cy: number
-	size: number
-	isHidden: boolean
-	'data-testid'?: string
-}) {
-	const events = useSelectionEvents('mobile_rotate')
-
-	const editor = useEditor()
-	const zoom = useValue('zoom level', () => editor.getZoomLevel(), [editor])
-	const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom))
-
-	return (
-		<g>
-			<circle
-				data-testid={testId}
-				pointerEvents="all"
-				className={classNames('tl-transparent', 'tl-mobile-rotate__bg', { 'tl-hidden': isHidden })}
-				cx={cx}
-				cy={cy}
-				r={bgRadius}
-				{...events}
-			/>
-			<circle
-				className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
-				cx={cx}
-				cy={cy}
-				r={size / SQUARE_ROOT_PI}
-			/>
-		</g>
-	)
-}
\ No newline at end of file
+							y
\ No newline at end of file
