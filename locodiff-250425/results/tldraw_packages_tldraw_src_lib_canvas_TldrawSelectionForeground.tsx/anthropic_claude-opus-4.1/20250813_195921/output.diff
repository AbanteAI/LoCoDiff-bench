
index 1f7e604f9..8206a2e5d 100644
--- a/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_expectedoutput.txt (expected):tmp/tmp3nct5lv2_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_extracted.txt (actual):tmp/tmp6vzll793_actual.txt	
@@ -306,232 +306,4 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 				{/* Corner Targets */}
 				<rect
 					className={classNames('tl-transparent', {
-						'tl-hidden': hideTopLeftCorner,
-					})}
-					data-testid="selection.target.top-left"
-					role="button"
-					aria-label="top-left target"
-					pointerEvents="all"
-					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5))}
-					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nwse-resize', rotation) } : undefined}
-					{...topLeftEvents}
-				/>
-				<rect
-					className={classNames('tl-transparent', {
-						'tl-hidden': hideTopRightCorner,
-					})}
-					data-testid="selection.target.top-right"
-					role="button"
-					aria-label="top-right target"
-					pointerEvents="all"
-					x={toDomPrecision(width - (isSmallX ? 0 : targetSizeX * 1.5))}
-					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nesw-resize', rotation) } : undefined}
-					{...topRightEvents}
-				/>
-				<rect
-					className={classNames('tl-transparent', {
-						'tl-hidden': hideBottomRightCorner,
-					})}
-					data-testid="selection.target.bottom-right"
-					role="button"
-					aria-label="bottom-right target"
-					pointerEvents="all"
-					x={toDomPrecision(width - (isSmallX ? targetSizeX : targetSizeX * 1.5))}
-					y={toDomPrecision(height - (isSmallY ? targetSizeY : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nwse-resize', rotation) } : undefined}
-					{...bottomRightEvents}
-				/>
-				<rect
-					className={classNames('tl-transparent', {
-						'tl-hidden': hideBottomLeftCorner,
-					})}
-					data-testid="selection.target.bottom-left"
-					role="button"
-					aria-label="bottom-left target"
-					pointerEvents="all"
-					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5))}
-					y={toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nesw-resize', rotation) } : undefined}
-					{...bottomLeftEvents}
-				/>
-				{/* Resize Handles */}
-				{showResizeHandles && (
-					<>
-						<rect
-							data-testid="selection.resize.top-left"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideTopLeftCorner,
-							})}
-							role="button"
-							aria-label="top_left handle"
-							x={toDomPrecision(0 - size / 2)}
-							y={toDomPrecision(0 - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
-						/>
-						<rect
-							data-testid="selection.resize.top-right"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideTopRightCorner,
-							})}
-							role="button"
-							aria-label="top_right handle"
-							x={toDomPrecision(width - size / 2)}
-							y={toDomPrecision(0 - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
-						/>
-						<rect
-							data-testid="selection.resize.bottom-right"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideBottomRightCorner,
-							})}
-							role="button"
-							aria-label="bottom_right handle"
-							x={toDomPrecision(width - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
-						/>
-						<rect
-							data-testid="selection.resize.bottom-left"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideBottomLeftCorner,
-							})}
-							role="button"
-							aria-label="bottom_left handle"
-							x={toDomPrecision(0 - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
-						/>
-					</>
-				)}
-				{showTextResizeHandles && (
-					<>
-						<rect
-							data-testid="selection.text-resize.left.handle"
-							className="tl-text-handle"
-							role="button"
-							aria-label="bottom_left handle"
-							x={toDomPrecision(0 - size / 4)}
-							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
-							rx={size / 4}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
-						/>
-						<rect
-							data-testid="selection.text-resize.right.handle"
-							className="tl-text-handle"
-							role="button"
-							aria-label="bottom_left handle"
-							rx={size / 4}
-							x={toDomPrecision(width - size / 4)}
-							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
-						/>
-					</>
-				)}
-				{/* Crop Handles */}
-				{showCropHandles && (
-					<TldrawCropHandles
-						{...{
-							size,
-							width,
-							height,
-							hideAlternateHandles: hideAlternateCropHandles,
-						}}
-					/>
-				)}
-			</g>
-		</svg>
-	)
-})
-
-export const RotateCornerHandle = function RotateCornerHandle({
-	cx,
-	cy,
-	targetSize,
-	corner,
-	cursor,
-	isHidden,
-	'data-testid': testId,
-}: {
-	cx: number
-	cy: number
-	targetSize: number
-	corner: RotateCorner
-	cursor?: string
-	isHidden: boolean
-	'data-testid'?: string
-}) {
-	const events = useSelectionEvents(corner)
-	return (
-		<rect
-			className={classNames('tl-transparent', 'tl-rotate-corner', { 'tl-hidden': isHidden })}
-			data-testid={testId}
-			role="button"
-			aria-label={`${corner} target`}
-			pointerEvents="all"
-			x={toDomPrecision(cx - targetSize * 3)}
-			y={toDomPrecision(cy - targetSize * 3)}
-			width={toDomPrecision(Math.max(1, targetSize * 3))}
-			height={toDomPrecision(Math.max(1, targetSize * 3))}
-			cursor={cursor}
-			{...events}
-		/>
-	)
-}
-
-const SQUARE_ROOT_PI = Math.sqrt(Math.PI)
-
-export const MobileRotateHandle = function RotateHandle({
-	cx,
-	cy,
-	size,
-	isHidden,
-	'data-testid': testId,
-}: {
-	cx: number
-	cy: number
-	size: number
-	isHidden: boolean
-	'data-testid'?: string
-}) {
-	const events = useSelectionEvents('mobile_rotate')
-
-	const editor = useEditor()
-	const zoom = useValue('zoom level', () => editor.getZoomLevel(), [editor])
-	const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom))
-
-	return (
-		<g>
-			<circle
-				data-testid={testId}
-				pointerEvents="all"
-				className={classNames('tl-transparent', 'tl-mobile-rotate__bg', { 'tl-hidden': isHidden })}
-				cx={cx}
-				cy={cy}
-				r={bgRadius}
-				{...events}
-			/>
-			<circle
-				className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
-				cx={cx}
-				cy={cy}
-				r={size / SQUARE_ROOT_PI}
-			/>
-		</g>
-	)
-}
\ No newline at end of file
+						'tl-hidden':
\ No newline at end of file
