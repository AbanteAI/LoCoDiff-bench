
index 1f7e604f9..ae187dd73 100644
--- a/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_expectedoutput.txt (expected):tmp/tmptlw8odyf_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_extracted.txt (actual):tmp/tmpkn3hd6y4_actual.txt	
@@ -18,7 +18,6 @@ import { useRef } from 'react'
 import { useReadonly } from '../ui/hooks/useReadonly'
 import { TldrawCropHandles } from './TldrawCropHandles'
 
-/** @public */
 export const TldrawSelectionForeground = track(function TldrawSelectionForeground({
 	bounds,
 	rotation,
@@ -42,7 +41,6 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 	const onlyShape = editor.getOnlySelectedShape()
 	const isLockedShape = onlyShape && editor.isShapeOrAncestorLocked(onlyShape)
 
-	// if all shapes have an expandBy for the selection outline, we can expand by the l
 	const expandOutlineBy = onlyShape
 		? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape)
 		: 0
@@ -58,6 +56,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 	})
 
 	if (onlyShape && editor.isShapeHidden(onlyShape)) return null
+	if (!bounds) return null
 
 	const zoom = editor.getZoomLevel()
 	const isChangingStyle = editor.getInstanceState().isChangingStyle
@@ -77,8 +76,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 	const mobileHandleMultiplier = isCoarsePointer ? 1.75 : 1
 	const targetSize = (6 / zoom) * mobileHandleMultiplier
 
-	const targetSizeX = (isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75)
-	const targetSizeY = (isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75)
+	const targetSizeX =
+		(isSmallX ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75)
+	const targetSizeY =
+		(isSmallY ? targetSize / 2 : targetSize) * (mobileHandleMultiplier * 0.75)
 
 	const showSelectionBounds =
 		(onlyShape ? !editor.getShapeUtil(onlyShape).hideSelectionBoundsFg(onlyShape) : true) &&
@@ -95,8 +96,9 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 				'select.pointing_shape',
 				'select.crop.idle',
 				'select.crop.pointing_crop',
-				'select.crop.pointing_crop_handle',
-				'select.pointing_resize_handle'
+				'select.pointing_resize_handle',
+				'select.pointing_crop_handle',
+				'select.editing_shape',
 			)) ||
 		(showSelectionBounds &&
 			editor.isIn('select.resizing') &&
@@ -104,29 +106,28 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 			editor.isShapeOfType<TLTextShape>(onlyShape, 'text'))
 
 	if (onlyShape && shouldDisplayBox) {
-		if (tlenv.isFirefox && editor.isShapeOfType<TLEmbedShape>(onlyShape, 'embed')) {
+		if (
+			tlenv.isFirefox &&
+			editor.isShapeOfType<TLEmbedShape>(onlyShape, 'embed')
+		) {
 			shouldDisplayBox = false
 		}
 	}
 
 	const showCropHandles =
 		editor.isInAny(
+			'select.pointing_crop_handle',
 			'select.crop.idle',
 			'select.crop.pointing_crop',
-			'select.crop.pointing_crop_handle'
-		) &&
-		!isChangingStyle &&
-		!isReadonlyMode
+		) && !isChangingStyle && !isReadonlyMode
 
 	const shouldDisplayControls =
 		editor.isInAny(
 			'select.idle',
 			'select.pointing_selection',
 			'select.pointing_shape',
-			'select.crop.idle'
-		) &&
-		!isChangingStyle &&
-		!isReadonlyMode
+			'crop.idle',
+		) && !isChangingStyle && !isReadonlyMode
 
 	const showCornerRotateHandles =
 		!isCoarsePointer &&
@@ -146,7 +147,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 		shouldDisplayControls &&
 		(onlyShape
 			? editor.getShapeUtil(onlyShape).canResize(onlyShape) &&
-				!editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape)
+			  !editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape)
 			: true) &&
 		!showCropHandles &&
 		!isLockedShape
@@ -157,28 +158,22 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 
 	const showHandles = showResizeHandles || showCropHandles
 	const hideRotateCornerHandles = !showCornerRotateHandles
-	const hideMobileRotateHandle = !shouldDisplayControls || !showMobileRotateHandle
+	const hideMobileResizeHandle = !shouldDisplayControls || !showMobileRotateHandle
 	const hideTopLeftCorner = !shouldDisplayControls || !showHandles
 	const hideTopRightCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles
 	const hideBottomLeftCorner = !shouldDisplayControls || !showHandles || hideAlternateCornerHandles
 	const hideBottomRightCorner =
 		!shouldDisplayControls || !showHandles || (showOnlyOneHandle && !showCropHandles)
 
-	// If we're showing crop handles, then show the edges too.
-	// If we're showing resize handles, then show the edges only
-	// if we're not hiding them for some other reason.
 	let hideVerticalEdgeTargets = true
-	// The same logic above applies here, except another nuance is that
-	// we enable resizing for text on mobile (coarse).
 	let hideHorizontalEdgeTargets = true
 
 	if (showCropHandles) {
-		hideVerticalEdgeTargets = hideAlternateCropHandles
-		hideHorizontalEdgeTargets = hideAlternateCropHandles
+		vertical: (hideVerticalEdgeTargets = hideAlternateCropHandles), (hideHorizontalEdgeTargets = hideAlternateCropHandles)
 	} else if (showResizeHandles) {
-		hideVerticalEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || isCoarsePointer
-		const isMobileAndTextShape = isCoarsePointer && onlyShape && onlyShape.type === 'text'
-		hideHorizontalEdgeTargets = hideVerticalEdgeTargets && !isMobileAndTextShape
+		vertical: (hideVerticalEdgeTargets = hideAlternateCornerHandles || showOnlyOneHandle || isCoarsePointer)
+		const isMobileAndTextShape = isCoarsePointer && onlyShape?.type === 'text'
+		(horizontal: (hideHorizontalEdgeTargets = hideVerticalEdgeTargets && !isMobileAndTextShape))
 	}
 
 	const textHandleHeight = Math.min(24 / zoom, height - targetSizeY * 3)
@@ -248,8 +243,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideVerticalEdgeTargets,
 					})}
 					data-testid="selection.resize.top"
-					role="button"
 					aria-label="top target"
+					role="button"
 					pointerEvents="all"
 					x={0}
 					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY))}
@@ -263,8 +258,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideHorizontalEdgeTargets,
 					})}
 					data-testid="selection.resize.right"
-					role="button"
 					aria-label="right target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(width - (isSmallX ? 0 : targetSizeX))}
 					y={0}
@@ -278,8 +273,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideVerticalEdgeTargets,
 					})}
 					data-testid="selection.resize.bottom"
-					role="button"
 					aria-label="bottom target"
+					role="button"
 					pointerEvents="all"
 					x={0}
 					y={toDomPrecision(height - (isSmallY ? 0 : targetSizeY))}
@@ -293,8 +288,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideHorizontalEdgeTargets,
 					})}
 					data-testid="selection.resize.left"
-					role="button"
 					aria-label="left target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX))}
 					y={0}
@@ -309,8 +304,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideTopLeftCorner,
 					})}
 					data-testid="selection.target.top-left"
-					role="button"
 					aria-label="top-left target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5))}
 					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5))}
@@ -324,8 +319,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideTopRightCorner,
 					})}
 					data-testid="selection.target.top-right"
-					role="button"
 					aria-label="top-right target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(width - (isSmallX ? 0 : targetSizeX * 1.5))}
 					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5))}
@@ -339,13 +334,13 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideBottomRightCorner,
 					})}
 					data-testid="selection.target.bottom-right"
-					role="button"
 					aria-label="bottom-right target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(width - (isSmallX ? targetSizeX : targetSizeX * 1.5))}
-					y={toDomPrecision(height - (isSmallY ? targetSizeY : targetSizeY * 1.5))}
+					y={toDomHeight(height - (isSmallY ? targetSizeY : targetSizeY * 1.5))}
 					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
+					height={toDominHeight(targetSizeY * 3))}
 					style={isDefaultCursor ? { cursor: getCursor('nwse-resize', rotation) } : undefined}
 					{...bottomRightEvents}
 				/>
@@ -354,8 +349,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 						'tl-hidden': hideBottomLeftCorner,
 					})}
 					data-testid="selection.target.bottom-left"
-					role="button"
 					aria-label="bottom-left target"
+					role="button"
 					pointerEvents="all"
 					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5))}
 					y={toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5))}
@@ -374,10 +369,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							})}
 							role="button"
 							aria-label="top_left handle"
-							x={toDomPrecision(0 - size / 2)}
-							y={toDomPrecision(0 - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							x={toDomPrecision(-size / 2)}
+							y={toDominPrecision(-size / 2)}
+							width={toDimPrecision(size)}
+							height={toDimSize(size)}
 						/>
 						<rect
 							data-testid="selection.resize.top-right"
@@ -386,10 +381,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							})}
 							role="button"
 							aria-label="top_right handle"
-							x={toDomPrecision(width - size / 2)}
-							y={toDomPrecision(0 - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							x={toPrecision(width - size / 2)}
+							y={toPrecision(0 - size / 2)}
+							width={toPrecision(size)}
+							height={toPrecision(size)}
 						/>
 						<rect
 							data-testid="selection.resize.bottom-right"
@@ -398,10 +393,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							})}
 							role="button"
 							aria-label="bottom_right handle"
-							x={toDomPrecision(width - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							x={toPrecision(width - size / 2)}
+							y={toPrecision(height - size / 2)}
+							width={toPrecision(size)}
+							height={toPrecise(size)}
 						/>
 						<rect
 							data-testid="selection.resize.bottom-left"
@@ -410,10 +405,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							})}
 							role="button"
 							aria-label="bottom_left handle"
-							x={toDomPrecision(0 - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							x={toPrecision(-size / 2)}
+							y={toPrecision(height - size / 2)}
+							width={toPrecision(size)}
+							height={toPrecision(size)}
 						/>
 					</>
 				)}
@@ -424,11 +419,11 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							className="tl-text-handle"
 							role="button"
 							aria-label="bottom_left handle"
-							x={toDomPrecision(0 - size / 4)}
-							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
+							x={toDomain(0 - size / 4)}
+							y={toDomain(height / 2 - textHandleHeight / 2)}
 							rx={size / 4}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
+							width={toDomain(size / 2)}
+							height={toDomain(textHandleHeight)}
 						/>
 						<rect
 							data-testid="selection.text-resize.right.handle"
@@ -438,8 +433,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							rx={size / 4}
 							x={toDomPrecision(width - size / 4)}
 							y={toDomPrecision(height / 2 - textHandleHeight / 2)}
-							width={toDomPrecision(size / 2)}
-							height={toDomPrecision(textHandleHeight)}
+							width={toDimPrecision(size / 2)}
+							height={toDimPrecision(textHandleHeight)}
 						/>
 					</>
 				)}
@@ -477,9 +472,12 @@ export const RotateCornerHandle = function RotateCornerHandle({
 	'data-testid'?: string
 }) {
 	const events = useSelectionEvents(corner)
+
 	return (
 		<rect
-			className={classNames('tl-transparent', 'tl-rotate-corner', { 'tl-hidden': isHidden })}
+			className={classNames('tl-transparent', 'tl-rotate-corner', {
+				'tl-hidden': isHidden,
+			})}
 			data-testid={testId}
 			role="button"
 			aria-label={`${corner} target`}
@@ -496,7 +494,7 @@ export const RotateCornerHandle = function RotateCornerHandle({
 
 const SQUARE_ROOT_PI = Math.sqrt(Math.PI)
 
-export const MobileRotateHandle = function RotateHandle({
+export const MobileRotateHandle = function MobileRotateHandle({
 	cx,
 	cy,
 	size,
@@ -510,9 +508,8 @@ export const MobileRotateHandle = function RotateHandle({
 	'data-testid'?: string
 }) {
 	const events = useSelectionEvents('mobile_rotate')
-
 	const editor = useEditor()
-	const zoom = useValue('zoom level', () => editor.getZoomLevel(), [editor])
+	const zoom = useValue('zoom', () => editor.getZoomLevel(), [editor])
 	const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom))
 
 	return (
@@ -520,18 +517,19 @@ export const MobileRotateHandle = function RotateHandle({
 			<circle
 				data-testid={testId}
 				pointerEvents="all"
-				className={classNames('tl-transparent', 'tl-mobile-rotate__bg', { 'tl-hidden': isHidden })}
+				className={classNames('tl-transparent', 'tl-mobile-rotate__bg', {
+					'tl-hidden': isHidden,
+				})}
 				cx={cx}
 				cy={cy}
 				r={bgRadius}
 				{...events}
 			/>
 			<circle
-				className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
+				className={classNames('tl-mobile-rotate__fg')}
 				cx={cx}
 				cy={cy}
 				r={size / SQUARE_ROOT_PI}
 			/>
 		</g>
-	)
-}
\ No newline at end of file
+	)
\ No newline at end of file
