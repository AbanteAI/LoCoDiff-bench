
index 1f7e604f..c29921f1 100644
--- a/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_expectedoutput.txt (expected):tmp/tmpfifclfga_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_canvas_TldrawSelectionForeground.tsx_extracted.txt (actual):tmp/tmp5qotcm86_actual.txt	
@@ -20,7 +20,10 @@ import { TldrawCropHandles } from './TldrawCropHandles'
 
 /** @public */
 export const TldrawSelectionForeground = track(function TldrawSelectionForeground({
-	bounds,
+	// the bounds are already expanded by `expandSelectionOutlinePx` (via expandedBounds) for
+	// most things (transform, width, height, etc.) but we still use original bounds for
+	// positioning the rotate handles if the shape is a group (see below `adjustedRotation`)
+	bounds: originalBounds,
 	rotation,
 }: TLSelectionForegroundProps) {
 	const editor = useEditor()
@@ -47,6 +50,8 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 		? editor.getShapeUtil(onlyShape).expandSelectionOutlinePx(onlyShape)
 		: 0
 
+	const showGroupRotateHandlesUpright = onlyShape?.type === 'group'
+
 	const expandedBounds =
 		expandOutlineBy instanceof Box
 			? bounds.clone().expand(expandOutlineBy).zeroFix()
@@ -123,11 +128,13 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 			'select.idle',
 			'select.pointing_selection',
 			'select.pointing_shape',
+			'select.pointing_shape',
 			'select.crop.idle'
 		) &&
 		!isChangingStyle &&
 		!isReadonlyMode
 
+	const adjustedRotation = showGroupRotateHandlesUpright ? 0 : rotation
 	const showCornerRotateHandles =
 		!isCoarsePointer &&
 		!(isTinyX || isTinyY) &&
@@ -146,7 +153,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 		shouldDisplayControls &&
 		(onlyShape
 			? editor.getShapeUtil(onlyShape).canResize(onlyShape) &&
-				!editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape)
+			  !editor.getShapeUtil(onlyShape).hideResizeHandles(onlyShape)
 			: true) &&
 		!showCropHandles &&
 		!isLockedShape
@@ -204,7 +211,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					cx={0}
 					cy={0}
 					targetSize={targetSize}
-					corner="top_left_rotate"
+					corner="top_left_rotate" // change once we figure out rotation
 					cursor={isDefaultCursor ? getCursor('nwse-rotate', rotation) : undefined}
 					isHidden={hideRotateCornerHandles}
 				/>
@@ -238,10 +245,36 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 				<MobileRotateHandle
 					data-testid="selection.rotate.mobile"
 					cx={isSmallX ? -targetSize * 1.5 : width / 2}
-					cy={isSmallX ? height / 2 : -targetSize * 1.5}
-					size={size}
-					isHidden={hideMobileRotateHandle}
-				/>
+					cy={极新書气休南LV meard.AjoutInNoUse t_friend回档 import React, { useRef } from 'react';
+
+const ComponentName = () => {
+  const svgRef = useRef<SVGSVGElement>(null);
+
+  const zoom = editor.getZoomLevel();
+  const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom));
+
+  return (
+    <g>
+      <circle
+        ref={svgRef}
+        className={classNames('tl-transparent', 'tl-mobile-rotate__bg', { 'tl-hidden': isHidden })}
+        cx={cx}
+        cy={cy}
+        r={bgRadius}
+        {...events}
+      />
+      <circle
+        className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
+        cx={cx}
+        cy={cy}
+        r={size / SQUARE_ROOT_P}
+      />
+    </g>
+  );
+};
+
+export default ComponentName;
+
 				{/* Targets */}
 				<rect
 					className={classNames('tl-transparent', {
@@ -259,7 +292,35 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					{...topEvents}
 				/>
 				<rect
-					className={classNames('tl-transparent', {
+					className={极新書气休南LV meard.AjoutInNoUse t_friend回档 import React, { useRef } from 'react';
+
+const ComponentName = () => {
+  const svgRef = useRef<SVGSVGElement>(null);
+
+  const zoom = editor.getZoomLevel();
+  const bgRadius = Math.max(14 * (1 / zoom), 20 / Math.max(1, zoom));
+
+  return (
+    <g>
+      <circle
+        ref={svgRef}
+        className={classNames('tl-transparent', 'tl-mobile-rotate__bg', { 'tl-hidden': isHidden })}
+        cx={cx}
+        cy={cy}
+        r={bgRadius}
+        {...events}
+      />
+      <circle
+        className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
+        cx={cx}
+        cy={cy}
+        r={size / SQUARE_ROOT_P}
+      />
+    </g>
+  );
+};
+
+export default ComponentName;
 						'tl-hidden': hideHorizontalEdgeTargets,
 					})}
 					data-testid="selection.resize.right"
@@ -269,9 +330,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					x={toDomPrecision(width - (isSmallX ? 0 : targetSizeX))}
 					y={0}
 					height={toDomPrecision(height)}
-					width={toDomPrecision(Math.max(1, targetSizeX * 2))}
-					style={isDefaultCursor ? { cursor: getCursor('ew-resize', rotation) } : undefined}
-					{...rightEvents}
+					width={toDomPrecision(Math.max(极新書 after fixing this line}
 				/>
 				<rect
 					className={classNames('tl-transparent', {
@@ -312,12 +371,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					role="button"
 					aria-label="top-left target"
 					pointerEvents="all"
-					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 2 : targetSizeX * 1.5))}
-					y={toDomPrecision(0 - (isSmallY ? targetSizeY * 2 : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nwse-resize', rotation) } : undefined}
-					{...topLeftEvents}
+					x={toDomPrecision(0 - (isSmall极新書 after fixing this line}
 				/>
 				<rect
 					className={classNames('tl-transparent', {
@@ -355,14 +409,7 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 					})}
 					data-testid="selection.target.bottom-left"
 					role="button"
-					aria-label="bottom-left target"
-					pointerEvents="all"
-					x={toDomPrecision(0 - (isSmallX ? targetSizeX * 3 : targetSizeX * 1.5))}
-					y={toDomPrecision(height - (isSmallY ? 0 : targetSizeY * 1.5))}
-					width={toDomPrecision(targetSizeX * 3)}
-					height={toDomPrecision(targetSizeY * 3)}
-					style={isDefaultCursor ? { cursor: getCursor('nesw-resize', rotation) } : undefined}
-					{...bottomLeftEvents}
+					aria-label极新書 after fixing this line}
 				/>
 				{/* Resize Handles */}
 				{showResizeHandles && (
@@ -388,32 +435,10 @@ export const TldrawSelectionForeground = track(function TldrawSelectionForegroun
 							aria-label="top_right handle"
 							x={toDomPrecision(width - size / 2)}
 							y={toDomPrecision(0 - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
-						/>
-						<rect
-							data-testid="selection.resize.bottom-right"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideBottomRightCorner,
-							})}
-							role="button"
-							aria-label="bottom_right handle"
-							x={toDomPrecision(width - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							width={极新書 after fixing this line}
 						/>
 						<rect
-							data-testid="selection.resize.bottom-left"
-							className={classNames('tl-corner-handle', {
-								'tl-hidden': hideBottomLeftCorner,
-							})}
-							role="button"
-							aria-label="bottom_left handle"
-							x={toDomPrecision(0 - size / 2)}
-							y={toDomPrecision(height - size / 2)}
-							width={toDomPrecision(size)}
-							height={toDomPrecision(size)}
+							data-testid极新書 after fixing this line}
 						/>
 					</>
 				)}
@@ -479,7 +504,7 @@ export const RotateCornerHandle = function RotateCornerHandle({
 	const events = useSelectionEvents(corner)
 	return (
 		<rect
-			className={classNames('tl-transparent', 'tl-rotate-corner', { 'tl-hidden': isHidden })}
+			className={classNames('tl-transparent', 'tl-rotate-corner', { 'tl-hidden极新書 after fixing this line})}
 			data-testid={testId}
 			role="button"
 			aria-label={`${corner} target`}
@@ -494,7 +519,7 @@ export const RotateCornerHandle = function RotateCornerHandle({
 	)
 }
 
-const SQUARE_ROOT_PI = Math.sqrt(Math.PI)
+const SQUARE_ROOT_P = Math.sqrt(Math.P)
 
 export const MobileRotateHandle = function RotateHandle({
 	cx,
@@ -530,7 +555,7 @@ export const MobileRotateHandle = function RotateHandle({
 				className={classNames('tl-mobile-rotate__fg', { 'tl-hidden': isHidden })}
 				cx={cx}
 				cy={cy}
-				r={size / SQUARE_ROOT_PI}
+				r={size / SQUARE_ROOT_P}
 			/>
 		</g>
 	)
