
index 2510736cb..6fcff243a 100644
--- a/aider_tests_basic_test_main.py_expectedoutput.txt (expected):tmp/tmp5sc3tpes_expected.txt	
+++ b/aider_tests_basic_test_main.py_extracted.txt (actual):tmp/tmph2u1c1_h_actual.txt	
@@ -247,10 +247,9 @@ class TestMain(TestCase):
 
     def test_main_exit_calls_version_check(self):
         with GitTemporaryDirectory():
-            with (
-                patch("aider.main.check_version") as mock_check_version,
-                patch("aider.main.InputOutput") as mock_input_output,
-            ):
+            with patch("aider.main.check_version") as mock_check_version, patch(
+                "aider.main.InputOutput"
+            ) as mock_input_output:
                 main(["--exit", "--check-update"], input=DummyInput(), output=DummyOutput())
                 mock_check_version.assert_called_once()
                 mock_input_output.assert_called_once()
@@ -353,39 +352,6 @@ class TestMain(TestCase):
             _, kwargs = MockCoder.call_args
             self.assertEqual(kwargs["show_diffs"], True)
 
-    def test_lint_option(self):
-        with GitTemporaryDirectory() as git_dir:
-            # Create a dirty file in the root
-            dirty_file = Path("dirty_file.py")
-            dirty_file.write_text("def foo():\n    return 'bar'")
-
-            repo = git.Repo(".")
-            repo.git.add(str(dirty_file))
-            repo.git.commit("-m", "new")
-
-            dirty_file.write_text("def foo():\n    return '!!!!!'")
-
-            # Create a subdirectory
-            subdir = Path(git_dir) / "subdir"
-            subdir.mkdir()
-
-            # Change to the subdirectory
-            os.chdir(subdir)
-
-            # Mock the Linter class
-            with patch("aider.linter.Linter.lint") as MockLinter:
-                MockLinter.return_value = ""
-
-                # Run main with --lint option
-                main(["--lint", "--yes"])
-
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
-                MockLinter.assert_called_once()
-                called_arg = MockLinter.call_args[0][0]
-                self.assertTrue(called_arg.endswith("dirty_file.py"))
-                self.assertFalse(called_arg.endswith(f"subdir{os.path.sep}dirty_file.py"))
-
     def test_verbose_mode_lists_env_vars(self):
         self.create_env_file(".env", "AIDER_DARK_MODE=on")
         with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
@@ -447,7 +413,6 @@ class TestMain(TestCase):
                 # Test loading from current working directory
                 main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
                 _, kwargs = MockCoder.call_args
-                print("kwargs:", kwargs)  # Add this line for debugging
                 self.assertIn("main_model", kwargs, "main_model key not found in kwargs")
                 self.assertEqual(kwargs["main_model"].name, "gpt-4-32k")
                 self.assertEqual(kwargs["map_tokens"], 4096)
@@ -908,9 +873,6 @@ class TestMain(TestCase):
             # Read the modified config file
             modified_config_content = git_config.read_text()
 
-            # Verify the include directive was added correctly
-            self.assertIn("[include]", modified_config_content)
-
             # Verify the config is set up correctly using git command
             repo = git.Repo(git_dir)
             self.assertEqual(repo.git.config("user.name"), "Directive User")
@@ -928,25 +890,6 @@ class TestMain(TestCase):
             self.assertEqual(repo.git.config("user.name"), "Directive User")
             self.assertEqual(repo.git.config("user.email"), "directive@example.com")
 
-    def test_resolve_aiderignore_path(self):
-        # Import the function directly to test it
-        from aider.args import resolve_aiderignore_path
-
-        # Test with absolute path
-        abs_path = os.path.abspath("/tmp/test/.aiderignore")
-        self.assertEqual(resolve_aiderignore_path(abs_path), abs_path)
-
-        # Test with relative path and git root
-        git_root = "/path/to/git/root"
-        rel_path = ".aiderignore"
-        self.assertEqual(
-            resolve_aiderignore_path(rel_path, git_root), str(Path(git_root) / rel_path)
-        )
-
-        # Test with relative path and no git root
-        rel_path = ".aiderignore"
-        self.assertEqual(resolve_aiderignore_path(rel_path), rel_path)
-
     def test_invalid_edit_format(self):
         with GitTemporaryDirectory():
             with patch("aider.io.InputOutput.offer_url") as mock_offer_url:
@@ -1034,7 +977,9 @@ class TestMain(TestCase):
 
     @patch("git.Repo.init")
     def test_main_exit_with_git_command_not_found(self, mock_git_init):
-        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
+        mock_git_init.side_effect = git.exc.GitCommandNotFound(
+            "git", "Command 'git' not found"
+        )
 
         try:
             result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
@@ -1054,6 +999,25 @@ class TestMain(TestCase):
             coder.main_model.extra_params.get("extra_body", {}).get("reasoning_effort"), "3"
         )
 
+    def test_resolve_aiderignore_path(self):
+        # Import the function directly to test it
+        from aider.args import resolve_aiderignore_path
+
+        # Test with absolute path
+        abs_path = os.path.abspath("/tmp/test/.aiderignore")
+        self.assertEqual(resolve_aiderignore_path(abs_path), abs_path)
+
+        # Test with relative path and git root
+        git_root = "/path/to/git/root"
+        rel_path = ".aiderignore"
+        self.assertEqual(
+            resolve_aiderignore_path(rel_path, git_root), str(Path(git_root) / rel_path)
+        )
+
+        # Test with relative path and no git root
+        rel_path = ".aiderignore"
+        self.assertEqual(resolve_aiderignore_path(rel_path), rel_path)
+
     def test_thinking_tokens_option(self):
         coder = main(
             ["--model", "sonnet", "--thinking-tokens", "1000", "--yes", "--exit"],
@@ -1139,27 +1103,6 @@ class TestMain(TestCase):
                 # Check that both models appear in the output
                 self.assertIn("test-provider/metadata-only-model", output)
 
-    def test_check_model_accepts_settings_flag(self):
-        # Test that --check-model-accepts-settings affects whether settings are applied
-        with GitTemporaryDirectory():
-            # When flag is on, setting shouldn't be applied to non-supporting model
-            with patch("aider.models.Model.set_thinking_tokens") as mock_set_thinking:
-                main(
-                    [
-                        "--model",
-                        "gpt-4o",
-                        "--thinking-tokens",
-                        "1000",
-                        "--check-model-accepts-settings",
-                        "--yes",
-                        "--exit",
-                    ],
-                    input=DummyInput(),
-                    output=DummyOutput(),
-                )
-                # Method should not be called because model doesn't support it and flag is on
-                mock_set_thinking.assert_not_called()
-
     def test_list_models_with_direct_resource_patch(self):
         # Test that models from resources/model-metadata.json are included in list-models output
         with GitTemporaryDirectory():
@@ -1195,6 +1138,27 @@ class TestMain(TestCase):
                     # Check that the resource model appears in the output
                     self.assertIn("resource-provider/special-model", output)
 
+    def test_check_model_accepts_settings_flag(self):
+        # Test that --check-model-accepts-settings affects whether settings are applied
+        with GitTemporaryDirectory():
+            # When flag is on, setting shouldn't be applied to non-supporting model
+            with patch("aider.models.Model.set_thinking_tokens") as mock_set_thinking:
+                main(
+                    [
+                        "--model",
+                        "gpt-4o",
+                        "--thinking-tokens",
+                        "1000",
+                        "--check-model-accepts-settings",
+                        "--yes",
+                        "--exit",
+                    ],
+                    input=DummyInput(),
+                    output=DummyOutput(),
+                )
+                # Method should not be called because model doesn't support it and flag is on
+                mock_set_thinking.assert_not_called()
+
             # When flag is off, setting should be applied regardless of support
             with patch("aider.models.Model.set_reasoning_effort") as mock_set_reasoning:
                 main(
