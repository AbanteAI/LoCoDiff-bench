--- aider_tests_basic_test_main.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_main.py_extracted.txt (actual)@@ -1,4 +1,5 @@ import json
+import os
 import os
 import subprocess
 import tempfile
@@ -353,39 +354,6 @@             _, kwargs = MockCoder.call_args
             self.assertEqual(kwargs["show_diffs"], True)
 
-    def test_lint_option(self):
-        with GitTemporaryDirectory() as git_dir:
-            # Create a dirty file in the root
-            dirty_file = Path("dirty_file.py")
-            dirty_file.write_text("def foo():\n    return 'bar'")
-
-            repo = git.Repo(".")
-            repo.git.add(str(dirty_file))
-            repo.git.commit("-m", "new")
-
-            dirty_file.write_text("def foo():\n    return '!!!!!'")
-
-            # Create a subdirectory
-            subdir = Path(git_dir) / "subdir"
-            subdir.mkdir()
-
-            # Change to the subdirectory
-            os.chdir(subdir)
-
-            # Mock the Linter class
-            with patch("aider.linter.Linter.lint") as MockLinter:
-                MockLinter.return_value = ""
-
-                # Run main with --lint option
-                main(["--lint", "--yes"])
-
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
-                MockLinter.assert_called_once()
-                called_arg = MockLinter.call_args[0][0]
-                self.assertTrue(called_arg.endswith("dirty_file.py"))
-                self.assertFalse(called_arg.endswith(f"subdir{os.path.sep}dirty_file.py"))
-
     def test_verbose_mode_lists_env_vars(self):
         self.create_env_file(".env", "AIDER_DARK_MODE=on")
         with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
@@ -487,6 +455,10 @@                     output=DummyOutput(),
                 )
                 MockRepoMap.assert_called_once()
+                call_args, call_kwargs = MockRepoMap.call_args
+                self.assertEqual(
+                    call_kwargs.get("refresh"), "files"
+                )  # Check the 'refresh' keyword argument
 
     def test_read_option(self):
         with GitTemporaryDirectory():
@@ -663,6 +635,157 @@                 return_coder=True,
             )
             self.assertTrue(coder.detect_urls)
+
+    @patch("aider.models.ModelInfoManager.set_verify_ssl")
+    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
+        with GitTemporaryDirectory():
+            # Mock Model class to avoid actual model initialization
+            with patch("aider.models.Model") as mock_model:
+                # Configure the mock to avoid the TypeError
+                mock_model.return_value.info = {}
+                mock_model.return_value.name = "gpt-4"  # Add a string name
+                mock_model.return_value.validate_environment.return_value = {
+                    "missing_keys": [],
+                    "keys_in_environment": [],
+                }
+
+                # Mock fuzzy_match_models to avoid string operations on MagicMock
+                with patch("aider.models.fuzzy_match_models", return_value=[]):
+                    main(
+                        ["--no-verify-ssl", "--exit", "--yes"],
+                        input=DummyInput(),
+                        output=DummyOutput(),
+                    )
+                mock_set_verify_ssl.assert_called_once_with(False)
+
+    def test_pytest_env_vars(self):
+        # Verify that environment variables from pytest.ini are properly set
+        self.assertEqual(os.environ.get("AIDER_ANALYTICS"), "false")
+
+    def test_set_env_single(self):
+        # Test setting a single environment variable
+        with GitTemporaryDirectory():
+            main(["--set-env", "TEST_VAR=test_value", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("TEST_VAR"), "test_value")
+
+    def test_set_env_multiple(self):
+        # Test setting multiple environment variables
+        with GitTemporaryDirectory():
+            main(
+                [
+                    "--set-env",
+                    "TEST_VAR1=value1",
+                    "--set-env",
+                    "TEST_VAR2=value2",
+                    "--exit",
+                    "--yes",
+                ]
+            )
+            self.assertEqual(os.environ.get("TEST_VAR1"), "value1")
+            self.assertEqual(os.environ.get("TEST_VAR2"), "value2")
+
+    def test_set_env_with_spaces(self):
+        # Test setting env var with spaces in value
+        with GitTemporaryDirectory():
+            main(["--set-env", "TEST_VAR=test value with spaces", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("TEST_VAR"), "test value with spaces")
+
+    def test_set_env_invalid_format(self):
+        # Test invalid format handling
+        with GitTemporaryDirectory():
+            result = main(["--set-env", "INVALID_FORMAT", "--exit", "--yes"])
+            self.assertEqual(result, 1)
+
+    def test_api_key_single(self):
+        # Test setting a single API key
+        with GitTemporaryDirectory():
+            main(["--api-key", "anthropic=test-key", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "test-key")
+
+    def test_api_key_multiple(self):
+        # Test setting multiple API keys
+        with GitTemporaryDirectory():
+            main(["--api-key", "anthropic=key1", "--api-key", "openai=key2", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "key1")
+            self.assertEqual(os.environ.get("OPENAI_API_KEY"), "key2")
+
+    def test_api_key_invalid_format(self):
+        # Test invalid format handling
+        with GitTemporaryDirectory():
+            result = main(["--api-key", "INVALID_FORMAT", "--exit", "--yes"])
+            self.assertEqual(result, 1)
+
+    def test_git_config_include(self):
+        # Test that aider respects git config includes for user.name and user.email
+        with GitTemporaryDirectory() as git_dir:
+            git_dir = Path(git_dir)
+
+            # Create an includable config file with user settings
+            include_config = git_dir / "included.gitconfig"
+            include_config.write_text(
+                "[user]\n    name = Included User\n    email = included@example.com\n"
+            )
+
+            # Set up main git config to include the other file
+            repo = git.Repo(git_dir)
+            include_path = str(include_config).replace("\\", "/")
+            repo.git.config("--local", "include.path", str(include_path))
+
+            # Verify the config is set up correctly using git command
+            self.assertEqual(repo.git.config("user.name"), "Included User")
+            self.assertEqual(repo.git.config("user.email"), "included@example.com")
+
+
+            # Run aider and verify it doesn't change the git config
+            main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
+
+            # Check that the user settings are still the same using git command
+            repo = git.Repo(git_dir)  # Re-open repo to ensure we get fresh config
+            self.assertEqual(repo.git.config("user.name"), "Included User")
+            self.assertEqual(repo.git.config("user.email"), "included@example.com")
+
+
+    def test_git_config_include_directive(self):
+        # Test that aider respects the include directive in git config
+        with GitTemporaryDirectory() as git_dir:
+            git_dir = Path(git_dir)
+
+            # Create an includable config file with user settings
+            include_config = git_dir / "included.gitconfig"
+            include_config.write_text(
+                "[user]\n    name = Directive User\n    email = directive@example.com\n"
+            )
+
+            # Set up main git config with include directive
+            git_config = git_dir / ".git" / "config"
+            # Use normalized path with forward slashes for git config
+            include_path = str(include_config).replace("\\", "/")
+            with open(git_config, "a") as f:
+                f.write(f"\n[include]\n    path = {include_path}\n")
+
+            # Read the modified config file
+            modified_config_content = git_config.read_text()
+
+            # Verify the include directive was added correctly
+            self.assertIn("[include]", modified_config_content)
+            self.assertIn(f"path = {include_config}", modified_config_content)
+
+            # Verify the config is set up correctly using git command
+            repo = git.Repo(git_dir)
+            self.assertEqual(repo.git.config("user.name"), "Directive User")
+            self.assertEqual(repo.git.config("user.email"), "directive@example.com")
+
+            # Run aider and verify it doesn't change the git config
+            main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
+
+            # Check that the git config file wasn't modified
+            config_after_aider = git_config.read_text()
+            self.assertEqual(modified_config_content, config_after_aider)
+
+            # Check that the user settings are still the same using git command
+            repo = git.Repo(git_dir)  # Re-open repo to ensure we get fresh config
+            self.assertEqual(repo.git.config("user.name"), "Directive User")
+            self.assertEqual(repo.git.config("user.email"), "directive@example.com")
 
     def test_detect_urls_disabled(self):
         with GitTemporaryDirectory():
@@ -759,7 +882,15 @@                 patch("aider.models.Model.set_reasoning_effort") as mock_set_reasoning,
             ):
                 main(
-                    ["--model", "gpt-3.5-turbo", "--reasoning-effort", "3", "--yes", "--exit"],
+                    [
+                        "--model",
+                        "gpt-3.5-turbo",
+                        "--reasoning-effort",
+                        "3",
+                        "--no-check-model-accepts-settings",
+                        "--yes",
+                        "--exit",
+                    ],
                     input=DummyInput(),
                     output=DummyOutput(),
                 )
@@ -772,298 +903,31 @@                 # Method should still be called by default
                 mock_set_reasoning.assert_not_called()
 
-    @patch("aider.models.ModelInfoManager.set_verify_ssl")
-    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
-        with GitTemporaryDirectory():
-            # Mock Model class to avoid actual model initialization
-            with patch("aider.models.Model") as mock_model:
-                # Configure the mock to avoid the TypeError
-                mock_model.return_value.info = {}
-                mock_model.return_value.name = "gpt-4"  # Add a string name
-                mock_model.return_value.validate_environment.return_value = {
-                    "missing_keys": [],
-                    "keys_in_environment": [],
-                }
-
-                # Mock fuzzy_match_models to avoid string operations on MagicMock
-                with patch("aider.models.fuzzy_match_models", return_value=[]):
-                    main(
-                        ["--no-verify-ssl", "--exit", "--yes"],
-                        input=DummyInput(),
-                        output=DummyOutput(),
-                    )
-                mock_set_verify_ssl.assert_called_once_with(False)
-
-    def test_pytest_env_vars(self):
-        # Verify that environment variables from pytest.ini are properly set
-        self.assertEqual(os.environ.get("AIDER_ANALYTICS"), "false")
-
-    def test_set_env_single(self):
-        # Test setting a single environment variable
-        with GitTemporaryDirectory():
-            main(["--set-env", "TEST_VAR=test_value", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("TEST_VAR"), "test_value")
-
-    def test_set_env_multiple(self):
-        # Test setting multiple environment variables
-        with GitTemporaryDirectory():
-            main(
-                [
-                    "--set-env",
-                    "TEST_VAR1=value1",
-                    "--set-env",
-                    "TEST_VAR2=value2",
-                    "--exit",
-                    "--yes",
-                ]
-            )
-            self.assertEqual(os.environ.get("TEST_VAR1"), "value1")
-            self.assertEqual(os.environ.get("TEST_VAR2"), "value2")
-
-    def test_set_env_with_spaces(self):
-        # Test setting env var with spaces in value
-        with GitTemporaryDirectory():
-            main(["--set-env", "TEST_VAR=test value with spaces", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("TEST_VAR"), "test value with spaces")
-
-    def test_set_env_invalid_format(self):
-        # Test invalid format handling
-        with GitTemporaryDirectory():
-            result = main(["--set-env", "INVALID_FORMAT", "--exit", "--yes"])
-            self.assertEqual(result, 1)
-
-    def test_api_key_single(self):
-        # Test setting a single API key
-        with GitTemporaryDirectory():
-            main(["--api-key", "anthropic=test-key", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "test-key")
-
-    def test_api_key_multiple(self):
-        # Test setting multiple API keys
-        with GitTemporaryDirectory():
-            main(["--api-key", "anthropic=key1", "--api-key", "openai=key2", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "key1")
-            self.assertEqual(os.environ.get("OPENAI_API_KEY"), "key2")
-
-    def test_api_key_invalid_format(self):
-        # Test invalid format handling
-        with GitTemporaryDirectory():
-            result = main(["--api-key", "INVALID_FORMAT", "--exit", "--yes"])
-            self.assertEqual(result, 1)
-
-    def test_git_config_include(self):
-        # Test that aider respects git config includes for user.name and user.email
-        with GitTemporaryDirectory() as git_dir:
-            git_dir = Path(git_dir)
-
-            # Create an includable config file with user settings
-            include_config = git_dir / "included.gitconfig"
-            include_config.write_text(
-                "[user]\n    name = Included User\n    email = included@example.com\n"
-            )
-
-            # Set up main git config to include the other file
-            repo = git.Repo(git_dir)
-            include_path = str(include_config).replace("\\", "/")
-            repo.git.config("--local", "include.path", str(include_path))
-
-            # Verify the config is set up correctly using git command
-            self.assertEqual(repo.git.config("user.name"), "Included User")
-            self.assertEqual(repo.git.config("user.email"), "included@example.com")
-
-            # Manually check the git config file to confirm include directive
-            git_config_path = git_dir / ".git" / "config"
-            git_config_content = git_config_path.read_text()
-
-            # Run aider and verify it doesn't change the git config
-            main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
-
-            # Check that the user settings are still the same using git command
-            repo = git.Repo(git_dir)  # Re-open repo to ensure we get fresh config
-            self.assertEqual(repo.git.config("user.name"), "Included User")
-            self.assertEqual(repo.git.config("user.email"), "included@example.com")
-
-            # Manually check the git config file again to ensure it wasn't modified
-            git_config_content_after = git_config_path.read_text()
-            self.assertEqual(git_config_content, git_config_content_after)
-
-    def test_git_config_include_directive(self):
-        # Test that aider respects the include directive in git config
-        with GitTemporaryDirectory() as git_dir:
-            git_dir = Path(git_dir)
-
-            # Create an includable config file with user settings
-            include_config = git_dir / "included.gitconfig"
-            include_config.write_text(
-                "[user]\n    name = Directive User\n    email = directive@example.com\n"
-            )
-
-            # Set up main git config with include directive
-            git_config = git_dir / ".git" / "config"
-            # Use normalized path with forward slashes for git config
-            include_path = str(include_config).replace("\\", "/")
-            with open(git_config, "a") as f:
-                f.write(f"\n[include]\n    path = {include_path}\n")
-
-            # Read the modified config file
-            modified_config_content = git_config.read_text()
-
-            # Verify the include directive was added correctly
-            self.assertIn("[include]", modified_config_content)
-
-            # Verify the config is set up correctly using git command
-            repo = git.Repo(git_dir)
-            self.assertEqual(repo.git.config("user.name"), "Directive User")
-            self.assertEqual(repo.git.config("user.email"), "directive@example.com")
-
-            # Run aider and verify it doesn't change the git config
-            main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
-
-            # Check that the git config file wasn't modified
-            config_after_aider = git_config.read_text()
-            self.assertEqual(modified_config_content, config_after_aider)
-
-            # Check that the user settings are still the same using git command
-            repo = git.Repo(git_dir)  # Re-open repo to ensure we get fresh config
-            self.assertEqual(repo.git.config("user.name"), "Directive User")
-            self.assertEqual(repo.git.config("user.email"), "directive@example.com")
-
-    def test_resolve_aiderignore_path(self):
-        # Import the function directly to test it
-        from aider.args import resolve_aiderignore_path
-
-        # Test with absolute path
-        abs_path = os.path.abspath("/tmp/test/.aiderignore")
-        self.assertEqual(resolve_aiderignore_path(abs_path), abs_path)
-
-        # Test with relative path and git root
-        git_root = "/path/to/git/root"
-        rel_path = ".aiderignore"
-        self.assertEqual(
-            resolve_aiderignore_path(rel_path, git_root), str(Path(git_root) / rel_path)
-        )
-
-        # Test with relative path and no git root
-        rel_path = ".aiderignore"
-        self.assertEqual(resolve_aiderignore_path(rel_path), rel_path)
-
-    def test_invalid_edit_format(self):
-        with GitTemporaryDirectory():
-            with patch("aider.io.InputOutput.offer_url") as mock_offer_url:
-                result = main(
-                    ["--edit-format", "not-a-real-format", "--exit", "--yes"],
-                    input=DummyInput(),
-                    output=DummyOutput(),
-                )
-                self.assertEqual(result, 1)  # main() should return 1 on error
-                mock_offer_url.assert_called_once()
-                args, _ = mock_offer_url.call_args
-                self.assertEqual(args[0], "https://aider.chat/docs/more/edit-formats.html")
-
-    def test_default_model_selection(self):
-        with GitTemporaryDirectory():
-            # Test Anthropic API key
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
+    def test_detect_urls_disabled(self):
+        with GitTemporaryDirectory():
             coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-
-            # Test DeepSeek API key
-            os.environ["DEEPSEEK_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("deepseek", coder.main_model.name.lower())
-            del os.environ["DEEPSEEK_API_KEY"]
-
-            # Test OpenRouter API key
-            os.environ["OPENROUTER_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("openrouter/", coder.main_model.name.lower())
-            del os.environ["OPENROUTER_API_KEY"]
-
-            # Test OpenAI API key
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gpt-4", coder.main_model.name.lower())
-            del os.environ["OPENAI_API_KEY"]
-
-            # Test Gemini API key
-            os.environ["GEMINI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gemini", coder.main_model.name.lower())
-            del os.environ["GEMINI_API_KEY"]
-
-            # Test no API keys - should offer OpenRouter OAuth
-            with patch("aider.onboarding.offer_openrouter_oauth") as mock_offer_oauth:
-                mock_offer_oauth.return_value = None  # Simulate user declining or failure
-                result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-                self.assertEqual(result, 1)  # Expect failure since no model could be selected
-                mock_offer_oauth.assert_called_once()
-
-    def test_model_precedence(self):
-        with GitTemporaryDirectory():
-            # Test that earlier API keys take precedence
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-            del os.environ["OPENAI_API_KEY"]
-
-    def test_chat_language_spanish(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--chat-language", "Spanish", "--exit", "--yes"],
+                ["--no-detect-urls", "--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
-            system_info = coder.get_platform_info()
-            self.assertIn("Spanish", system_info)
-
-    @patch("git.Repo.init")
-    def test_main_exit_with_git_command_not_found(self, mock_git_init):
-        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
-
-        try:
-            result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-        except Exception as e:
-            self.fail(f"main() raised an unexpected exception: {e}")
-
-        self.assertIsNone(result, "main() should return None when called with --exit")
-
-    def test_reasoning_effort_option(self):
-        coder = main(
-            ["--reasoning-effort", "3", "--no-check-model-accepts-settings", "--yes", "--exit"],
-            input=DummyInput(),
-            output=DummyOutput(),
-            return_coder=True,
-        )
-        self.assertEqual(
-            coder.main_model.extra_params.get("extra_body", {}).get("reasoning_effort"), "3"
-        )
-
-    def test_thinking_tokens_option(self):
-        coder = main(
-            ["--model", "sonnet", "--thinking-tokens", "1000", "--yes", "--exit"],
-            input=DummyInput(),
-            output=DummyOutput(),
-            return_coder=True,
-        )
-        self.assertEqual(
-            coder.main_model.extra_params.get("thinking", {}).get("budget_tokens"), 1000
-        )
+            self.assertFalse(coder.detect_urls)
+
+    def test_show_diffs_option(self):
+        with patch("aider.coders.Coder.create") as MockCoder:
+            main(["--show-diffs"], input=DummyInput(), output=DummyOutput())
+            _, kwargs = MockCoder.call_args
+            assert kwargs["show_diffs"] is True
+
+        with patch("aider.coders.Coder.create") as MockCoder:
+            main(["--no-show-diffs"], input=DummyInput(), output=DummyOutput())
+            _, kwargs = MockCoder.call_args
+            assert kwargs["show_diffs"] is False
+
+        with patch("aider.coders.Coder.create") as MockCoder:
+            main([], input=DummyInput())  # Default is True
+            _, kwargs = MockCoder.call_args
+            assert kwargs["show_diffs"] is True
 
     def test_list_models_includes_metadata_models(self):
         # Test that models from model-metadata.json appear in list-models output
@@ -1139,6 +1003,41 @@                 # Check that both models appear in the output
                 self.assertIn("test-provider/metadata-only-model", output)
 
+    def test_list_models_with_direct_resource_patch(self):
+        # Test that models from resources/model-metadata.json are included in list-models output
+        with GitTemporaryDirectory():
+            # Create a temporary file with test model metadata
+            test_file = Path(self.tempdir) / "test-model-metadata.json"
+            test_resource_models = {
+                "special-model": {
+                    "max_input_tokens": 8192,
+                    "litellm_provider": "resource-provider",
+                    "mode": "chat",
+                }
+            }
+            test_file.write_text(json.dumps(test_resource_models))
+
+            # Create a mock for the resource file path
+            mock_resource_path = MagicMock()
+            mock_resource_path.__str__.return_value = str(test_file)
+
+            # Create a mock for the files function that returns an object with joinpath
+            mock_files = MagicMock()
+            mock_files.joinpath.return_value = mock_resource_path
+
+            with patch("aider.main.importlib_resources.files", return_value=mock_files):
+                # Capture stdout to check the output
+                with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
+                    main(
+                        ["--list-models", "special", "--yes", "--no-gitignore"],
+                        input=DummyInput(),
+                        output=DummyOutput(),
+                    )
+                    output = mock_stdout.getvalue()
+
+                    # Check that the resource model appears in the output
+                    self.assertIn("resource-provider/special-model", output)
+
     def test_check_model_accepts_settings_flag(self):
         # Test that --check-model-accepts-settings affects whether settings are applied
         with GitTemporaryDirectory():
@@ -1159,41 +1058,6 @@                 )
                 # Method should not be called because model doesn't support it and flag is on
                 mock_set_thinking.assert_not_called()
-
-    def test_list_models_with_direct_resource_patch(self):
-        # Test that models from resources/model-metadata.json are included in list-models output
-        with GitTemporaryDirectory():
-            # Create a temporary file with test model metadata
-            test_file = Path(self.tempdir) / "test-model-metadata.json"
-            test_resource_models = {
-                "special-model": {
-                    "max_input_tokens": 8192,
-                    "litellm_provider": "resource-provider",
-                    "mode": "chat",
-                }
-            }
-            test_file.write_text(json.dumps(test_resource_models))
-
-            # Create a mock for the resource file path
-            mock_resource_path = MagicMock()
-            mock_resource_path.__str__.return_value = str(test_file)
-
-            # Create a mock for the files function that returns an object with joinpath
-            mock_files = MagicMock()
-            mock_files.joinpath.return_value = mock_resource_path
-
-            with patch("aider.main.importlib_resources.files", return_value=mock_files):
-                # Capture stdout to check the output
-                with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
-                    main(
-                        ["--list-models", "special", "--yes", "--no-gitignore"],
-                        input=DummyInput(),
-                        output=DummyOutput(),
-                    )
-                    output = mock_stdout.getvalue()
-
-                    # Check that the resource model appears in the output
-                    self.assertIn("resource-provider/special-model", output)
 
             # When flag is off, setting should be applied regardless of support
             with patch("aider.models.Model.set_reasoning_effort") as mock_set_reasoning:
@@ -1275,6 +1139,18 @@         for call in mock_io_instance.tool_warning.call_args_list:
             self.assertNotIn("Cost estimates may be inaccurate", call[0][0])
 
+    @patch("aider.main.InputOutput")
+    def test_cache_without_stream_no_warning(self, MockInputOutput):
+        mock_io_instance = MockInputOutput.return_value
+        with GitTemporaryDirectory():
+            main(
+                ["--cache-prompts", "--exit", "--yes", "--no-stream"],
+                input=DummyInput(),
+                output=DummyOutput(),
+            )
+        for call in mock_io_instance.tool_warning.call_args_list:
+            self.assertNotIn("Cost estimates may be inaccurate", call[0][0])
+
     def test_load_dotenv_files_override(self):
         with GitTemporaryDirectory() as git_dir:
             git_dir = Path(git_dir)
