
index 2510736cb..51fc69860 100644
--- a/aider_tests_basic_test_main.py_expectedoutput.txt (expected):tmp/tmp0c1t7qqi_expected.txt	
+++ b/aider_tests_basic_test_main.py_extracted.txt (actual):tmp/tmplgn2twxe_actual.txt	
@@ -184,7 +184,6 @@ class TestMain(TestCase):
     def test_env_file_override(self):
         with GitTemporaryDirectory() as git_dir:
             git_dir = Path(git_dir)
-            git_env = git_dir / ".env"
 
             fake_home = git_dir / "fake_home"
             fake_home.mkdir()
@@ -200,6 +199,7 @@ class TestMain(TestCase):
 
             os.environ["E"] = "existing"
             home_env.write_text("A=home\nB=home\nC=home\nD=home")
+            git_env = git_dir / ".env"
             git_env.write_text("A=git\nB=git\nC=git")
             cwd_env.write_text("A=cwd\nB=cwd")
             named_env.write_text("A=named")
@@ -353,39 +353,6 @@ class TestMain(TestCase):
             _, kwargs = MockCoder.call_args
             self.assertEqual(kwargs["show_diffs"], True)
 
-    def test_lint_option(self):
-        with GitTemporaryDirectory() as git_dir:
-            # Create a dirty file in the root
-            dirty_file = Path("dirty_file.py")
-            dirty_file.write_text("def foo():\n    return 'bar'")
-
-            repo = git.Repo(".")
-            repo.git.add(str(dirty_file))
-            repo.git.commit("-m", "new")
-
-            dirty_file.write_text("def foo():\n    return '!!!!!'")
-
-            # Create a subdirectory
-            subdir = Path(git_dir) / "subdir"
-            subdir.mkdir()
-
-            # Change to the subdirectory
-            os.chdir(subdir)
-
-            # Mock the Linter class
-            with patch("aider.linter.Linter.lint") as MockLinter:
-                MockLinter.return_value = ""
-
-                # Run main with --lint option
-                main(["--lint", "--yes"])
-
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
-                MockLinter.assert_called_once()
-                called_arg = MockLinter.call_args[0][0]
-                self.assertTrue(called_arg.endswith("dirty_file.py"))
-                self.assertFalse(called_arg.endswith(f"subdir{os.path.sep}dirty_file.py"))
-
     def test_verbose_mode_lists_env_vars(self):
         self.create_env_file(".env", "AIDER_DARK_MODE=on")
         with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
