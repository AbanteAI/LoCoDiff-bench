--- aider_tests_basic_test_main.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_main.py_extracted.txt (actual)@@ -874,6 +874,7 @@             # Manually check the git config file to confirm include directive
             git_config_path = git_dir / ".git" / "config"
             git_config_content = git_config_path.read_text()
+            self.assertIn("[include]", git_config_content)
 
             # Run aider and verify it doesn't change the git config
             main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
@@ -1160,41 +1161,6 @@                 # Method should not be called because model doesn't support it and flag is on
                 mock_set_thinking.assert_not_called()
 
-    def test_list_models_with_direct_resource_patch(self):
-        # Test that models from resources/model-metadata.json are included in list-models output
-        with GitTemporaryDirectory():
-            # Create a temporary file with test model metadata
-            test_file = Path(self.tempdir) / "test-model-metadata.json"
-            test_resource_models = {
-                "special-model": {
-                    "max_input_tokens": 8192,
-                    "litellm_provider": "resource-provider",
-                    "mode": "chat",
-                }
-            }
-            test_file.write_text(json.dumps(test_resource_models))
-
-            # Create a mock for the resource file path
-            mock_resource_path = MagicMock()
-            mock_resource_path.__str__.return_value = str(test_file)
-
-            # Create a mock for the files function that returns an object with joinpath
-            mock_files = MagicMock()
-            mock_files.joinpath.return_value = mock_resource_path
-
-            with patch("aider.main.importlib_resources.files", return_value=mock_files):
-                # Capture stdout to check the output
-                with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
-                    main(
-                        ["--list-models", "special", "--yes", "--no-gitignore"],
-                        input=DummyInput(),
-                        output=DummyOutput(),
-                    )
-                    output = mock_stdout.getvalue()
-
-                    # Check that the resource model appears in the output
-                    self.assertIn("resource-provider/special-model", output)
-
             # When flag is off, setting should be applied regardless of support
             with patch("aider.models.Model.set_reasoning_effort") as mock_set_reasoning:
                 main(
@@ -1212,6 +1178,41 @@                 )
                 # Method should be called because flag is off
                 mock_set_reasoning.assert_called_once_with("3")
+
+    def test_list_models_with_direct_resource_patch(self):
+        # Test that models from resources/model-metadata.json are included in list-models output
+        with GitTemporaryDirectory():
+            # Create a temporary file with test model metadata
+            test_file = Path(self.tempdir) / "test-model-metadata.json"
+            test_resource_models = {
+                "special-model": {
+                    "max_input_tokens": 8192,
+                    "litellm_provider": "resource-provider",
+                    "mode": "chat",
+                }
+            }
+            test_file.write_text(json.dumps(test_resource_models))
+
+            # Create a mock for the resource file path
+            mock_resource_path = MagicMock()
+            mock_resource_path.__str__.return_value = str(test_file)
+
+            # Create a mock for the files function that returns an object with joinpath
+            mock_files = MagicMock()
+            mock_files.joinpath.return_value = mock_resource_path
+
+            with patch("aider.main.importlib_resources.files", return_value=mock_files):
+                # Capture stdout to check the output
+                with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
+                    main(
+                        ["--list-models", "special", "--yes", "--no-gitignore"],
+                        input=DummyInput(),
+                        output=DummyOutput(),
+                    )
+                    output = mock_stdout.getvalue()
+
+                    # Check that the resource model appears in the output
+                    self.assertIn("resource-provider/special-model", output)
 
     def test_model_accepts_settings_attribute(self):
         with GitTemporaryDirectory():
