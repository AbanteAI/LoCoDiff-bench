
index 2510736c..2378fb97 100644
--- a/aider_tests_basic_test_main.py_expectedoutput.txt (expected):tmp/tmp861xjfzl_expected.txt	
+++ b/aider_tests_basic_test_main.py_extracted.txt (actual):tmp/tmpm0t57sn7_actual.txt	
@@ -353,58 +353,6 @@ class TestMain(TestCase):
             _, kwargs = MockCoder.call_args
             self.assertEqual(kwargs["show_diffs"], True)
 
-    def test_lint_option(self):
-        with GitTemporaryDirectory() as git_dir:
-            # Create a dirty file in the root
-            dirty_file = Path("dirty_file.py")
-            dirty_file.write_text("def foo():\n    return 'bar'")
-
-            repo = git.Repo(".")
-            repo.git.add(str(dirty_file))
-            repo.git.commit("-m", "new")
-
-            dirty_file.write_text("def foo():\n    return '!!!!!'")
-
-            # Create a subdirectory
-            subdir = Path(git_dir) / "subdir"
-            subdir.mkdir()
-
-            # Change to the subdirectory
-            os.chdir(subdir)
-
-            # Mock the Linter class
-            with patch("aider.linter.Linter.lint") as MockLinter:
-                MockLinter.return_value = ""
-
-                # Run main with --lint option
-                main(["--lint", "--yes"])
-
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
-                MockLinter.assert_called_once()
-                called_arg = MockLinter.call_args[0][0]
-                self.assertTrue(called_arg.endswith("dirty_file.py"))
-                self.assertFalse(called_arg.endswith(f"subdir{os.path.sep}dirty_file.py"))
-
-    def test_verbose_mode_lists_env_vars(self):
-        self.create_env_file(".env", "AIDER_DARK_MODE=on")
-        with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
-            main(
-                ["--no-git", "--verbose", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-            )
-            output = mock_stdout.getvalue()
-            relevant_output = "\n".join(
-                line
-                for line in output.splitlines()
-                if "AIDER_DARK_MODE" in line or "dark_mode" in line
-            )  # this bit just helps failing assertions to be easier to read
-            self.assertIn("AIDER_DARK_MODE", relevant_output)
-            self.assertIn("dark_mode", relevant_output)
-            self.assertRegex(relevant_output, r"AIDER_DARK_MODE:\s+on")
-            self.assertRegex(relevant_output, r"dark_mode:\s+True")
-
     def test_yaml_config_file_loading(self):
         with GitTemporaryDirectory() as git_dir:
             git_dir = Path(git_dir)
@@ -466,6 +414,25 @@ class TestMain(TestCase):
                 self.assertEqual(kwargs["main_model"].name, "gpt-3.5-turbo")
                 self.assertEqual(kwargs["map_tokens"], 1024)
 
+    def test_verbose_mode_lists_env_vars(self):
+        self.create_env_file(".env", "AIDER_DARK_MODE=on")
+        with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
+            main(
+                ["--no-git", "--verbose", "--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+            )
+            output = mock_stdout.getvalue()
+            relevant_output = "\n".join(
+                line
+                for line in output.splitlines()
+                if "AIDER_DARK_MODE" in line or "dark_mode" in line
+            )  # this bit just helps failing assertions to be easier to read
+            self.assertIn("AIDER_DARK_MODE", relevant_output)
+            self.assertIn("dark_mode", relevant_output)
+            self.assertRegex(relevant_output, r"AIDER_DARK_MODE:\s+on")
+            self.assertRegex(relevant_output, r"dark_mode:\s+True")
+
     def test_map_tokens_option(self):
         with GitTemporaryDirectory():
             with patch("aider.coders.base_coder.RepoMap") as MockRepoMap:
@@ -684,6 +651,28 @@ class TestMain(TestCase):
             )
             self.assertTrue(coder.detect_urls)
 
+    @patch("aider.models.ModelInfoManager.set_verify_ssl")
+    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
+        with GitTemporaryDirectory():
+            # Mock Model class to avoid actual model initialization
+            with patch("aider.models.Model") as mock_model:
+                # Configure the mock to avoid the TypeError
+                mock_model.return_value.info = {}
+                mock_model.return_value.name = "gpt-4"  # Add a string name
+                mock_model.return_value.validate_environment.return_value = {
+                    "missing_keys": [],
+                    "keys_in_environment": [],
+                }
+
+                # Mock fuzzy_match_models to avoid string operations on MagicMock
+                with patch("aider.models.fuzzy_match_models", return_value=[]):
+                    main(
+                        ["--no-verify-ssl", "--exit", "--yes"],
+                        input=DummyInput(),
+                        output=DummyOutput(),
+                    )
+                mock_set_verify_ssl.assert_called_once_with(False)
+
     def test_accepts_settings_warnings(self):
         # Test that appropriate warnings are shown based on accepts_settings configuration
         with GitTemporaryDirectory():
@@ -759,7 +748,7 @@ class TestMain(TestCase):
                 patch("aider.models.Model.set_reasoning_effort") as mock_set_reasoning,
             ):
                 main(
-                    ["--model", "gpt-3.5-turbo", "--reasoning-effort", "3", "--yes", "--exit"],
+                    ["--model", "gpt-3.5-turbo", "--reasoning-effort", "3", "--check-model-accepts-settings", "--yes", "--exit"],
                     input=DummyInput(),
                     output=DummyOutput(),
                 )
@@ -772,28 +761,6 @@ class TestMain(TestCase):
                 # Method should still be called by default
                 mock_set_reasoning.assert_not_called()
 
-    @patch("aider.models.ModelInfoManager.set_verify_ssl")
-    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
-        with GitTemporaryDirectory():
-            # Mock Model class to avoid actual model initialization
-            with patch("aider.models.Model") as mock_model:
-                # Configure the mock to avoid the TypeError
-                mock_model.return_value.info = {}
-                mock_model.return_value.name = "gpt-4"  # Add a string name
-                mock_model.return_value.validate_environment.return_value = {
-                    "missing_keys": [],
-                    "keys_in_environment": [],
-                }
-
-                # Mock fuzzy_match_models to avoid string operations on MagicMock
-                with patch("aider.models.fuzzy_match_models", return_value=[]):
-                    main(
-                        ["--no-verify-ssl", "--exit", "--yes"],
-                        input=DummyInput(),
-                        output=DummyOutput(),
-                    )
-                mock_set_verify_ssl.assert_called_once_with(False)
-
     def test_pytest_env_vars(self):
         # Verify that environment variables from pytest.ini are properly set
         self.assertEqual(os.environ.get("AIDER_ANALYTICS"), "false")
@@ -874,6 +841,8 @@ class TestMain(TestCase):
             # Manually check the git config file to confirm include directive
             git_config_path = git_dir / ".git" / "config"
             git_config_content = git_config_path.read_text()
+            self.assertIn("[include]", git_config_content)
+            self.assertIn(f"path = {include_path}", git_config_content)
 
             # Run aider and verify it doesn't change the git config
             main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
@@ -910,6 +879,7 @@ class TestMain(TestCase):
 
             # Verify the include directive was added correctly
             self.assertIn("[include]", modified_config_content)
+            self.assertIn(f"path = {include_path}", modified_config_content)
 
             # Verify the config is set up correctly using git command
             repo = git.Repo(git_dir)
