--- aider_tests_basic_test_main.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_main.py_extracted.txt (actual)@@ -181,38 +181,6 @@             _, kwargs = MockCoder.call_args
             assert kwargs["dirty_commits"] is True
 
-    def test_env_file_override(self):
-        with GitTemporaryDirectory() as git_dir:
-            git_dir = Path(git_dir)
-            git_env = git_dir / ".env"
-
-            fake_home = git_dir / "fake_home"
-            fake_home.mkdir()
-            os.environ["HOME"] = str(fake_home)
-            home_env = fake_home / ".env"
-
-            cwd = git_dir / "subdir"
-            cwd.mkdir()
-            os.chdir(cwd)
-            cwd_env = cwd / ".env"
-
-            named_env = git_dir / "named.env"
-
-            os.environ["E"] = "existing"
-            home_env.write_text("A=home\nB=home\nC=home\nD=home")
-            git_env.write_text("A=git\nB=git\nC=git")
-            cwd_env.write_text("A=cwd\nB=cwd")
-            named_env.write_text("A=named")
-
-            with patch("pathlib.Path.home", return_value=fake_home):
-                main(["--yes", "--exit", "--env-file", str(named_env)])
-
-            self.assertEqual(os.environ["A"], "named")
-            self.assertEqual(os.environ["B"], "cwd")
-            self.assertEqual(os.environ["C"], "git")
-            self.assertEqual(os.environ["D"], "home")
-            self.assertEqual(os.environ["E"], "existing")
-
     def test_message_file_flag(self):
         message_file_content = "This is a test message from a file."
         message_file_path = tempfile.mktemp()
@@ -244,16 +212,6 @@                     MockSend.side_effect = side_effect
 
                     main(["--yes", fname, "--encoding", "iso-8859-15"])
-
-    def test_main_exit_calls_version_check(self):
-        with GitTemporaryDirectory():
-            with (
-                patch("aider.main.check_version") as mock_check_version,
-                patch("aider.main.InputOutput") as mock_input_output,
-            ):
-                main(["--exit", "--check-update"], input=DummyInput(), output=DummyOutput())
-                mock_check_version.assert_called_once()
-                mock_input_output.assert_called_once()
 
     @patch("aider.main.InputOutput")
     @patch("aider.coders.base_coder.Coder.run")
@@ -353,39 +311,6 @@             _, kwargs = MockCoder.call_args
             self.assertEqual(kwargs["show_diffs"], True)
 
-    def test_lint_option(self):
-        with GitTemporaryDirectory() as git_dir:
-            # Create a dirty file in the root
-            dirty_file = Path("dirty_file.py")
-            dirty_file.write_text("def foo():\n    return 'bar'")
-
-            repo = git.Repo(".")
-            repo.git.add(str(dirty_file))
-            repo.git.commit("-m", "new")
-
-            dirty_file.write_text("def foo():\n    return '!!!!!'")
-
-            # Create a subdirectory
-            subdir = Path(git_dir) / "subdir"
-            subdir.mkdir()
-
-            # Change to the subdirectory
-            os.chdir(subdir)
-
-            # Mock the Linter class
-            with patch("aider.linter.Linter.lint") as MockLinter:
-                MockLinter.return_value = ""
-
-                # Run main with --lint option
-                main(["--lint", "--yes"])
-
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
-                MockLinter.assert_called_once()
-                called_arg = MockLinter.call_args[0][0]
-                self.assertTrue(called_arg.endswith("dirty_file.py"))
-                self.assertFalse(called_arg.endswith(f"subdir{os.path.sep}dirty_file.py"))
-
     def test_verbose_mode_lists_env_vars(self):
         self.create_env_file(".env", "AIDER_DARK_MODE=on")
         with patch("sys.stdout", new_callable=StringIO) as mock_stdout:
@@ -425,9 +350,9 @@             cwd_config = cwd / ".aider.conf.yml"
             named_config = git_dir / "named.aider.conf.yml"
 
+            home_config.write_text("model: gpt-3.5-turbo\nmap-tokens: 1024\n")
+            git_config.write_text("model: gpt-4\nmap-tokens: 2048\n")
             cwd_config.write_text("model: gpt-4-32k\nmap-tokens: 4096\n")
-            git_config.write_text("model: gpt-4\nmap-tokens: 2048\n")
-            home_config.write_text("model: gpt-3.5-turbo\nmap-tokens: 1024\n")
             named_config.write_text("model: gpt-4-1106-preview\nmap-tokens: 8192\n")
 
             with (
@@ -447,7 +372,6 @@                 # Test loading from current working directory
                 main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
                 _, kwargs = MockCoder.call_args
-                print("kwargs:", kwargs)  # Add this line for debugging
                 self.assertIn("main_model", kwargs, "main_model key not found in kwargs")
                 self.assertEqual(kwargs["main_model"].name, "gpt-4-32k")
                 self.assertEqual(kwargs["map_tokens"], 4096)
@@ -521,20 +445,74 @@         finally:
             os.unlink(external_file_path)
 
+    def test_suggest_shell_commands_default(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            self.assertTrue(coder.suggest_shell_commands)
+
+    def test_suggest_shell_commands_disabled(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--no-suggest-shell-commands", "--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            self.assertFalse(coder.suggest_shell_commands)
+
+    def test_suggest_shell_commands_enabled(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--suggest-shell-commands", "--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            self.assertTrue(coder.suggest_shell_commands)
+
+    def test_return_coder(self):
+        with GitTemporaryDirectory():
+            result = main(
+                ["--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            self.assertIsInstance(result, Coder)
+
+            result = main(
+                ["--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=False,
+            )
+            self.assertIsNone(result)
+
+    def test_map_mul_option(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--map-mul", "5", "--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            self.assertIsInstance(coder, Coder)
+            self.assertEqual(coder.repo_map.map_mul_no_files, 5)
+
     def test_model_metadata_file(self):
-        # Re-init so we don't have old data lying around from earlier test cases
         from aider import models
+        from aider.llm import litellm
 
         models.model_info_manager = models.ModelInfoManager()
-
-        from aider.llm import litellm
-
         litellm._lazy_module = None
 
         with GitTemporaryDirectory():
             metadata_file = Path(".aider.model.metadata.json")
-
-            # must be a fully qualified model name: provider/...
             metadata_content = {"deepseek/deepseek-chat": {"max_input_tokens": 1234}}
             metadata_file.write_text(json.dumps(metadata_content))
 
@@ -573,116 +551,221 @@                     call_kwargs.get("refresh"), "files"
                 )  # Check the 'refresh' keyword argument
 
-    def test_sonnet_and_cache_prompts_options(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--sonnet", "--cache-prompts", "--exit", "--yes"],
+    def test_4o_and_cache_options(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--4o", "--cache-prompts", "--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
 
-            self.assertTrue(coder.add_cache_headers)
-
-    def test_4o_and_cache_options(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--4o", "--cache-prompts", "--exit", "--yes"],
+            self.assertFalse(coder.add_cache_headers)
+
+    def test_detect_urls_default(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
-
-            self.assertFalse(coder.add_cache_headers)
-
-    def test_return_coder(self):
-        with GitTemporaryDirectory():
-            result = main(
-                ["--exit", "--yes"],
+            self.assertTrue(coder.detect_urls)
+
+    def test_detect_urls_disabled(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--no-detect-urls", "--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
-            self.assertIsInstance(result, Coder)
-
-            result = main(
-                ["--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=False,
-            )
-            self.assertIsNone(result)
-
-    def test_map_mul_option(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--map-mul", "5", "--exit", "--yes"],
+            self.assertFalse(coder.detect_urls)
+
+    def test_detect_urls_enabled(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--detect-urls", "--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
-            self.assertIsInstance(coder, Coder)
-            self.assertEqual(coder.repo_map.map_mul_no_files, 5)
-
-    def test_suggest_shell_commands_default(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--exit", "--yes"],
+            self.assertTrue(coder.detect_urls)
+
+    @patch("aider.models.ModelInfoManager.set_verify_ssl")
+    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
+        with GitTemporaryDirectory():
+            # Mock Model class to avoid actual model initialization
+            with patch("aider.models.Model") as mock_model:
+                # Configure the mock to avoid the TypeError
+                mock_model.return_value.info = {}
+                mock_model.return_value.name = "gpt-4"  # Add a string name
+                mock_model.return_value.validate_environment.return_value = {
+                    "missing_keys": [],
+                    "keys_in_environment": [],
+                }
+
+                # Mock fuzzy_match_models to avoid string operations on MagicMock
+                with patch("aider.models.fuzzy_match_models", return_value=[]):
+                    main(
+                        ["--no-verify-ssl", "--exit", "--yes"],
+                        input=DummyInput(),
+                        output=DummyOutput(),
+                    )
+                    mock_set_verify_ssl.assert_called_once_with(False)
+
+    def test_pytest_env_vars(self):
+        # Verify that environment variables from pytest.ini are properly set
+        self.assertEqual(os.environ.get("AIDER_ANALYTICS"), "false")
+
+    def test_set_env_single(self):
+        # Test setting a single environment variable
+        with GitTemporaryDirectory():
+            main(["--set-env", "TEST_VAR=test_value", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("TEST_VAR"), "test_value")
+
+    def test_set_env_multiple(self):
+        # Test setting multiple environment variables
+        with GitTemporaryDirectory():
+            main(
+                [
+                    "--set-env",
+                    "TEST_VAR1=value1",
+                    "--set-env",
+                    "TEST_VAR2=value2",
+                    "--exit",
+                    "--yes",
+                ]
+            )
+            self.assertEqual(os.environ.get("TEST_VAR1"), "value1")
+            self.assertEqual(os.environ.get("TEST_VAR2"), "value2")
+
+    def test_set_env_with_spaces(self):
+        # Test setting env var with spaces in value
+        with GitTemporaryDirectory():
+            main(["--set-env", "TEST_VAR=test value with spaces", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("TEST_VAR"), "test value with spaces")
+
+    def test_set_env_invalid_format(self):
+        # Test invalid format handling
+        with GitTemporaryDirectory():
+            result = main(["--set-env", "INVALID_FORMAT", "--exit", "--yes"])
+            self.assertEqual(result, 1)
+
+    def test_api_key_single(self):
+        # Test setting a single API key
+        with GitTemporaryDirectory():
+            main(["--api-key", "anthropic=test-key", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "test-key")
+
+    def test_api_key_multiple(self):
+        # Test setting multiple API keys
+        with GitTemporaryDirectory():
+            main(["--api-key", "anthropic=key1", "--api-key", "openai=key2", "--exit", "--yes"])
+            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "key1")
+            self.assertEqual(os.environ.get("OPENAI_API_KEY"), "key2")
+
+    def test_api_key_invalid_format(self):
+        # Test invalid format handling
+        with GitTemporaryDirectory():
+            result = main(["--api-key", "INVALID_FORMAT", "--exit", "--yes"])
+            self.assertEqual(result, 1)
+
+    def test_invalid_edit_format(self):
+        with GitTemporaryDirectory():
+            with patch("aider.io.InputOutput.offer_url") as mock_offer_url:
+                result = main(
+                    ["--edit-format", "not-a-real-format", "--exit", "--yes"],
+                    input=DummyInput(),
+                    output=DummyOutput(),
+                )
+                self.assertEqual(result, 1)  # main() should return 1 on error
+                mock_offer_url.assert_called_once()
+                args, _ = mock_offer_url.call_args
+                self.assertEqual(args[0], "https://aider.chat/docs/more/edit-formats.html")
+
+    def test_default_model_selection(self):
+        with GitTemporaryDirectory():
+            # Test Anthropic API key
+            os.environ["ANTHROPIC_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("sonnet", coder.main_model.name.lower())
+            del os.environ["ANTHROPIC_API_KEY"]
+
+            # Test DeepSeek API key
+            os.environ["DEEPSEEK_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("deepseek", coder.main_model.name.lower())
+            del os.environ["DEEPSEEK_API_KEY"]
+
+            # Test OpenRouter API key
+            os.environ["OPENROUTER_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("openrouter/", coder.main_model.name.lower())
+            del os.environ["OPENROUTER_API_KEY"]
+
+            # Test OpenAI API key
+            os.environ["OPENAI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("gpt-4", coder.main_model.name.lower())
+            del os.environ["OPENAI_API_KEY"]
+
+            # Test Gemini API key
+            os.environ["GEMINI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("gemini", coder.main_model.name.lower())
+            del os.environ["GEMINI_API_KEY"]
+
+            # Test no API keys - should offer OpenRouter OAuth
+            with patch("aider.onboarding.offer_openrouter_oauth") as mock_offer_oauth:
+                mock_offer_oauth.return_value = None  # Simulate user declining or failure
+                result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
+                self.assertEqual(result, 1)  # Expect failure since no model could be selected
+                mock_offer_oauth.assert_called_once()
+
+    def test_model_precedence(self):
+        with GitTemporaryDirectory():
+            # Test that earlier API keys take precedence
+            os.environ["ANTHROPIC_API_KEY"] = "test-key"
+            os.environ["OPENAI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("sonnet", coder.main_model.name.lower())
+            del os.environ["ANTHROPIC_API_KEY"]
+            del os.environ["OPENAI_API_KEY"]
+
+    def test_chat_language_spanish(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--chat-language", "Spanish", "--exit", "--yes"],
                 input=DummyInput(),
                 output=DummyOutput(),
                 return_coder=True,
             )
-            self.assertTrue(coder.suggest_shell_commands)
-
-    def test_suggest_shell_commands_disabled(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--no-suggest-shell-commands", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            self.assertFalse(coder.suggest_shell_commands)
-
-    def test_suggest_shell_commands_enabled(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--suggest-shell-commands", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            self.assertTrue(coder.suggest_shell_commands)
-
-    def test_detect_urls_default(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            self.assertTrue(coder.detect_urls)
-
-    def test_detect_urls_disabled(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--no-detect-urls", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            self.assertFalse(coder.detect_urls)
-
-    def test_detect_urls_enabled(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--detect-urls", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            self.assertTrue(coder.detect_urls)
+            system_info = coder.get_platform_info()
+            self.assertIn("Spanish", system_info)
+
+    @patch("git.Repo.init")
+    def test_main_exit_with_git_command_not_found(self, mock_git_init):
+        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
+
+        try:
+            result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
+        except Exception as e:
+            self.fail(f"main() raised an unexpected exception: {e}")
+
+        self.assertIsNone(result, "main() should return None when called with --exit")
 
     def test_accepts_settings_warnings(self):
         # Test that appropriate warnings are shown based on accepts_settings configuration
@@ -772,85 +855,6 @@                 # Method should still be called by default
                 mock_set_reasoning.assert_not_called()
 
-    @patch("aider.models.ModelInfoManager.set_verify_ssl")
-    def test_no_verify_ssl_sets_model_info_manager(self, mock_set_verify_ssl):
-        with GitTemporaryDirectory():
-            # Mock Model class to avoid actual model initialization
-            with patch("aider.models.Model") as mock_model:
-                # Configure the mock to avoid the TypeError
-                mock_model.return_value.info = {}
-                mock_model.return_value.name = "gpt-4"  # Add a string name
-                mock_model.return_value.validate_environment.return_value = {
-                    "missing_keys": [],
-                    "keys_in_environment": [],
-                }
-
-                # Mock fuzzy_match_models to avoid string operations on MagicMock
-                with patch("aider.models.fuzzy_match_models", return_value=[]):
-                    main(
-                        ["--no-verify-ssl", "--exit", "--yes"],
-                        input=DummyInput(),
-                        output=DummyOutput(),
-                    )
-                mock_set_verify_ssl.assert_called_once_with(False)
-
-    def test_pytest_env_vars(self):
-        # Verify that environment variables from pytest.ini are properly set
-        self.assertEqual(os.environ.get("AIDER_ANALYTICS"), "false")
-
-    def test_set_env_single(self):
-        # Test setting a single environment variable
-        with GitTemporaryDirectory():
-            main(["--set-env", "TEST_VAR=test_value", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("TEST_VAR"), "test_value")
-
-    def test_set_env_multiple(self):
-        # Test setting multiple environment variables
-        with GitTemporaryDirectory():
-            main(
-                [
-                    "--set-env",
-                    "TEST_VAR1=value1",
-                    "--set-env",
-                    "TEST_VAR2=value2",
-                    "--exit",
-                    "--yes",
-                ]
-            )
-            self.assertEqual(os.environ.get("TEST_VAR1"), "value1")
-            self.assertEqual(os.environ.get("TEST_VAR2"), "value2")
-
-    def test_set_env_with_spaces(self):
-        # Test setting env var with spaces in value
-        with GitTemporaryDirectory():
-            main(["--set-env", "TEST_VAR=test value with spaces", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("TEST_VAR"), "test value with spaces")
-
-    def test_set_env_invalid_format(self):
-        # Test invalid format handling
-        with GitTemporaryDirectory():
-            result = main(["--set-env", "INVALID_FORMAT", "--exit", "--yes"])
-            self.assertEqual(result, 1)
-
-    def test_api_key_single(self):
-        # Test setting a single API key
-        with GitTemporaryDirectory():
-            main(["--api-key", "anthropic=test-key", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "test-key")
-
-    def test_api_key_multiple(self):
-        # Test setting multiple API keys
-        with GitTemporaryDirectory():
-            main(["--api-key", "anthropic=key1", "--api-key", "openai=key2", "--exit", "--yes"])
-            self.assertEqual(os.environ.get("ANTHROPIC_API_KEY"), "key1")
-            self.assertEqual(os.environ.get("OPENAI_API_KEY"), "key2")
-
-    def test_api_key_invalid_format(self):
-        # Test invalid format handling
-        with GitTemporaryDirectory():
-            result = main(["--api-key", "INVALID_FORMAT", "--exit", "--yes"])
-            self.assertEqual(result, 1)
-
     def test_git_config_include(self):
         # Test that aider respects git config includes for user.name and user.email
         with GitTemporaryDirectory() as git_dir:
@@ -874,6 +878,12 @@             # Manually check the git config file to confirm include directive
             git_config_path = git_dir / ".git" / "config"
             git_config_content = git_config_path.read_text()
+            self.assertIn("[include]", git_config_content)
+            # Use normalized path for comparison (git may use escaped backslashes on Windows)
+            if os.name == 'nt':
+                self.assertIn("path = ", git_config_content)
+            else:
+                self.assertIn(f"path = {include_config}", git_config_content)
 
             # Run aider and verify it doesn't change the git config
             main(["--yes", "--exit"], input=DummyInput(), output=DummyOutput())
@@ -910,6 +920,11 @@ 
             # Verify the include directive was added correctly
             self.assertIn("[include]", modified_config_content)
+            # Use normalized path for comparison (git may use escaped backslashes on Windows)
+            if os.name == 'nt':
+                self.assertIn("path = ", modified_config_content)
+            else:
+                self.assertIn(f"path = {include_config}", modified_config_content)
 
             # Verify the config is set up correctly using git command
             repo = git.Repo(git_dir)
@@ -946,102 +961,6 @@         # Test with relative path and no git root
         rel_path = ".aiderignore"
         self.assertEqual(resolve_aiderignore_path(rel_path), rel_path)
-
-    def test_invalid_edit_format(self):
-        with GitTemporaryDirectory():
-            with patch("aider.io.InputOutput.offer_url") as mock_offer_url:
-                result = main(
-                    ["--edit-format", "not-a-real-format", "--exit", "--yes"],
-                    input=DummyInput(),
-                    output=DummyOutput(),
-                )
-                self.assertEqual(result, 1)  # main() should return 1 on error
-                mock_offer_url.assert_called_once()
-                args, _ = mock_offer_url.call_args
-                self.assertEqual(args[0], "https://aider.chat/docs/more/edit-formats.html")
-
-    def test_default_model_selection(self):
-        with GitTemporaryDirectory():
-            # Test Anthropic API key
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-
-            # Test DeepSeek API key
-            os.environ["DEEPSEEK_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("deepseek", coder.main_model.name.lower())
-            del os.environ["DEEPSEEK_API_KEY"]
-
-            # Test OpenRouter API key
-            os.environ["OPENROUTER_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("openrouter/", coder.main_model.name.lower())
-            del os.environ["OPENROUTER_API_KEY"]
-
-            # Test OpenAI API key
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gpt-4", coder.main_model.name.lower())
-            del os.environ["OPENAI_API_KEY"]
-
-            # Test Gemini API key
-            os.environ["GEMINI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gemini", coder.main_model.name.lower())
-            del os.environ["GEMINI_API_KEY"]
-
-            # Test no API keys - should offer OpenRouter OAuth
-            with patch("aider.onboarding.offer_openrouter_oauth") as mock_offer_oauth:
-                mock_offer_oauth.return_value = None  # Simulate user declining or failure
-                result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-                self.assertEqual(result, 1)  # Expect failure since no model could be selected
-                mock_offer_oauth.assert_called_once()
-
-    def test_model_precedence(self):
-        with GitTemporaryDirectory():
-            # Test that earlier API keys take precedence
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-            del os.environ["OPENAI_API_KEY"]
-
-    def test_chat_language_spanish(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--chat-language", "Spanish", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            system_info = coder.get_platform_info()
-            self.assertIn("Spanish", system_info)
-
-    @patch("git.Repo.init")
-    def test_main_exit_with_git_command_not_found(self, mock_git_init):
-        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
-
-        try:
-            result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-        except Exception as e:
-            self.fail(f"main() raised an unexpected exception: {e}")
-
-        self.assertIsNone(result, "main() should return None when called with --exit")
 
     def test_reasoning_effort_option(self):
         coder = main(
@@ -1275,6 +1194,18 @@         for call in mock_io_instance.tool_warning.call_args_list:
             self.assertNotIn("Cost estimates may be inaccurate", call[0][0])
 
+    @patch("aider.main.InputOutput")
+    def test_cache_without_stream_no_warning(self, MockInputOutput):
+        mock_io_instance = MockInputOutput.return_value
+        with GitTemporaryDirectory():
+            main(
+                ["--cache-prompts", "--exit", "--yes", "--no-stream"],
+                input=DummyInput(),
+                output=DummyOutput(),
+            )
+        for call in mock_io_instance.tool_warning.call_args_list:
+            self.assertNotIn("Cost estimates may be inaccurate", call[0][0])
+
     def test_load_dotenv_files_override(self):
         with GitTemporaryDirectory() as git_dir:
             git_dir = Path(git_dir)
@@ -1332,16 +1263,4 @@                 self.assertEqual(os.environ.get("SHARED_VAR"), "cwd_shared")
 
             # Restore CWD
-            os.chdir(original_cwd)
-
-    @patch("aider.main.InputOutput")
-    def test_cache_without_stream_no_warning(self, MockInputOutput):
-        mock_io_instance = MockInputOutput.return_value
-        with GitTemporaryDirectory():
-            main(
-                ["--cache-prompts", "--exit", "--yes", "--no-stream"],
-                input=DummyInput(),
-                output=DummyOutput(),
-            )
-        for call in mock_io_instance.tool_warning.call_args_list:
-            self.assertNotIn("Cost estimates may be inaccurate", call[0][0])+            os.chdir(original_cwd)