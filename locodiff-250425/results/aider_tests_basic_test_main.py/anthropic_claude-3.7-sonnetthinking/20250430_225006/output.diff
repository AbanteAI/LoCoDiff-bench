
index 2510736c..e3cb87ec 100644
--- a/aider_tests_basic_test_main.py_expectedoutput.txt (expected):tmp/tmpwyjt42og_expected.txt	
+++ b/aider_tests_basic_test_main.py_extracted.txt (actual):tmp/tmpsulolyhk_actual.txt	
@@ -23,7 +23,6 @@ class TestMain(TestCase):
         self.original_env = os.environ.copy()
         os.environ["OPENAI_API_KEY"] = "deadbeef"
         os.environ["AIDER_CHECK_UPDATE"] = "false"
-        os.environ["AIDER_ANALYTICS"] = "false"
         self.original_cwd = os.getcwd()
         self.tempdir_obj = IgnorantTemporaryDirectory()
         self.tempdir = self.tempdir_obj.name
@@ -184,34 +183,61 @@ class TestMain(TestCase):
     def test_env_file_override(self):
         with GitTemporaryDirectory() as git_dir:
             git_dir = Path(git_dir)
-            git_env = git_dir / ".env"
 
+            # Create fake home and .aider directory
             fake_home = git_dir / "fake_home"
             fake_home.mkdir()
-            os.environ["HOME"] = str(fake_home)
-            home_env = fake_home / ".env"
+            aider_dir = fake_home / ".aider"
+            aider_dir.mkdir()
 
-            cwd = git_dir / "subdir"
-            cwd.mkdir()
-            os.chdir(cwd)
-            cwd_env = cwd / ".env"
+            # Create oauth keys file
+            oauth_keys_file = aider_dir / "oauth-keys.env"
+            oauth_keys_file.write_text("OAUTH_VAR=oauth_val\nSHARED_VAR=oauth_shared\n")
 
-            named_env = git_dir / "named.env"
+            # Create git root .env file
+            git_root_env = git_dir / ".env"
+            git_root_env.write_text("GIT_VAR=git_val\nSHARED_VAR=git_shared\n")
 
-            os.environ["E"] = "existing"
-            home_env.write_text("A=home\nB=home\nC=home\nD=home")
-            git_env.write_text("A=git\nB=git\nC=git")
-            cwd_env.write_text("A=cwd\nB=cwd")
-            named_env.write_text("A=named")
+            # Create CWD .env file in a subdir
+            cwd_subdir = git_dir / "subdir"
+            cwd_subdir.mkdir()
+            cwd_env = cwd_subdir / ".env"
+            cwd_env.write_text("CWD_VAR=cwd_val\nSHARED_VAR=cwd_shared\n")
+
+            # Change to subdir
+            original_cwd = os.getcwd()
+            os.chdir(cwd_subdir)
+
+            # Clear relevant env vars before test
+            for var in ["OAUTH_VAR", "SHARED_VAR", "GIT_VAR", "CWD_VAR"]:
+                if var in os.environ:
+                    del os.environ[var]
 
             with patch("pathlib.Path.home", return_value=fake_home):
-                main(["--yes", "--exit", "--env-file", str(named_env)])
+                loaded_files = load_dotenv_files(str(git_dir), None)
 
-            self.assertEqual(os.environ["A"], "named")
-            self.assertEqual(os.environ["B"], "cwd")
-            self.assertEqual(os.environ["C"], "git")
-            self.assertEqual(os.environ["D"], "home")
-            self.assertEqual(os.environ["E"], "existing")
+                # Assert files were loaded in expected order (oauth first)
+                self.assertIn(str(oauth_keys_file.resolve()), loaded_files)
+                self.assertIn(str(git_root_env.resolve()), loaded_files)
+                self.assertIn(str(cwd_env.resolve()), loaded_files)
+                self.assertLess(
+                    loaded_files.index(str(oauth_keys_file.resolve())),
+                    loaded_files.index(str(git_root_env.resolve())),
+                )
+                self.assertLess(
+                    loaded_files.index(str(git_root_env.resolve())),
+                    loaded_files.index(str(cwd_env.resolve())),
+                )
+
+                # Assert environment variables reflect the override order
+                self.assertEqual(os.environ.get("OAUTH_VAR"), "oauth_val")
+                self.assertEqual(os.environ.get("GIT_VAR"), "git_val")
+                self.assertEqual(os.environ.get("CWD_VAR"), "cwd_val")
+                # SHARED_VAR should be overridden by the last loaded file (cwd .env)
+                self.assertEqual(os.environ.get("SHARED_VAR"), "cwd_shared")
+
+            # Restore CWD
+            os.chdir(original_cwd)
 
     def test_message_file_flag(self):
         message_file_content = "This is a test message from a file."
@@ -379,8 +405,7 @@ class TestMain(TestCase):
                 # Run main with --lint option
                 main(["--lint", "--yes"])
 
-                # Check if the Linter was called with a filename ending in "dirty_file.py"
-                # but not ending in "subdir/dirty_file.py"
+                # Check if the Linter was called with the correct file
                 MockLinter.assert_called_once()
                 called_arg = MockLinter.call_args[0][0]
                 self.assertTrue(called_arg.endswith("dirty_file.py"))
@@ -567,7 +592,6 @@ class TestMain(TestCase):
                     output=DummyOutput(),
                 )
 
-                MockRepoMap.assert_called_once()
                 call_args, call_kwargs = MockRepoMap.call_args
                 self.assertEqual(
                     call_kwargs.get("refresh"), "files"
@@ -858,9 +882,7 @@ class TestMain(TestCase):
 
             # Create an includable config file with user settings
             include_config = git_dir / "included.gitconfig"
-            include_config.write_text(
-                "[user]\n    name = Included User\n    email = included@example.com\n"
-            )
+            include_config.write_text("[user]\n    name = Included User\n    email = included@example.com\n")
 
             # Set up main git config to include the other file
             repo = git.Repo(git_dir)
@@ -960,111 +982,6 @@ class TestMain(TestCase):
                 args, _ = mock_offer_url.call_args
                 self.assertEqual(args[0], "https://aider.chat/docs/more/edit-formats.html")
 
-    def test_default_model_selection(self):
-        with GitTemporaryDirectory():
-            # Test Anthropic API key
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-
-            # Test DeepSeek API key
-            os.environ["DEEPSEEK_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("deepseek", coder.main_model.name.lower())
-            del os.environ["DEEPSEEK_API_KEY"]
-
-            # Test OpenRouter API key
-            os.environ["OPENROUTER_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("openrouter/", coder.main_model.name.lower())
-            del os.environ["OPENROUTER_API_KEY"]
-
-            # Test OpenAI API key
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gpt-4", coder.main_model.name.lower())
-            del os.environ["OPENAI_API_KEY"]
-
-            # Test Gemini API key
-            os.environ["GEMINI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("gemini", coder.main_model.name.lower())
-            del os.environ["GEMINI_API_KEY"]
-
-            # Test no API keys - should offer OpenRouter OAuth
-            with patch("aider.onboarding.offer_openrouter_oauth") as mock_offer_oauth:
-                mock_offer_oauth.return_value = None  # Simulate user declining or failure
-                result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-                self.assertEqual(result, 1)  # Expect failure since no model could be selected
-                mock_offer_oauth.assert_called_once()
-
-    def test_model_precedence(self):
-        with GitTemporaryDirectory():
-            # Test that earlier API keys take precedence
-            os.environ["ANTHROPIC_API_KEY"] = "test-key"
-            os.environ["OPENAI_API_KEY"] = "test-key"
-            coder = main(
-                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
-            )
-            self.assertIn("sonnet", coder.main_model.name.lower())
-            del os.environ["ANTHROPIC_API_KEY"]
-            del os.environ["OPENAI_API_KEY"]
-
-    def test_chat_language_spanish(self):
-        with GitTemporaryDirectory():
-            coder = main(
-                ["--chat-language", "Spanish", "--exit", "--yes"],
-                input=DummyInput(),
-                output=DummyOutput(),
-                return_coder=True,
-            )
-            system_info = coder.get_platform_info()
-            self.assertIn("Spanish", system_info)
-
-    @patch("git.Repo.init")
-    def test_main_exit_with_git_command_not_found(self, mock_git_init):
-        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
-
-        try:
-            result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
-        except Exception as e:
-            self.fail(f"main() raised an unexpected exception: {e}")
-
-        self.assertIsNone(result, "main() should return None when called with --exit")
-
-    def test_reasoning_effort_option(self):
-        coder = main(
-            ["--reasoning-effort", "3", "--no-check-model-accepts-settings", "--yes", "--exit"],
-            input=DummyInput(),
-            output=DummyOutput(),
-            return_coder=True,
-        )
-        self.assertEqual(
-            coder.main_model.extra_params.get("extra_body", {}).get("reasoning_effort"), "3"
-        )
-
-    def test_thinking_tokens_option(self):
-        coder = main(
-            ["--model", "sonnet", "--thinking-tokens", "1000", "--yes", "--exit"],
-            input=DummyInput(),
-            output=DummyOutput(),
-            return_coder=True,
-        )
-        self.assertEqual(
-            coder.main_model.extra_params.get("thinking", {}).get("budget_tokens"), 1000
-        )
-
     def test_list_models_includes_metadata_models(self):
         # Test that models from model-metadata.json appear in list-models output
         with GitTemporaryDirectory():
@@ -1250,6 +1167,111 @@ class TestMain(TestCase):
                 mock_instance.set_reasoning_effort.assert_called_once_with("3")
                 mock_instance.set_thinking_tokens.assert_not_called()
 
+    def test_default_model_selection(self):
+        with GitTemporaryDirectory():
+            # Test Anthropic API key
+            os.environ["ANTHROPIC_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("sonnet", coder.main_model.name.lower())
+            del os.environ["ANTHROPIC_API_KEY"]
+
+            # Test DeepSeek API key
+            os.environ["DEEPSEEK_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("deepseek", coder.main_model.name.lower())
+            del os.environ["DEEPSEEK_API_KEY"]
+
+            # Test OpenRouter API key
+            os.environ["OPENROUTER_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("openrouter/", coder.main_model.name.lower())
+            del os.environ["OPENROUTER_API_KEY"]
+
+            # Test OpenAI API key
+            os.environ["OPENAI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("gpt-4", coder.main_model.name.lower())
+            del os.environ["OPENAI_API_KEY"]
+
+            # Test Gemini API key
+            os.environ["GEMINI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("gemini", coder.main_model.name.lower())
+            del os.environ["GEMINI_API_KEY"]
+
+            # Test no API keys - should offer OpenRouter OAuth
+            with patch("aider.onboarding.offer_openrouter_oauth") as mock_offer_oauth:
+                mock_offer_oauth.return_value = None  # Simulate user declining or failure
+                result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
+                self.assertEqual(result, 1)  # Expect failure since no model could be selected
+                mock_offer_oauth.assert_called_once()
+
+    def test_model_precedence(self):
+        with GitTemporaryDirectory():
+            # Test that earlier API keys take precedence
+            os.environ["ANTHROPIC_API_KEY"] = "test-key"
+            os.environ["OPENAI_API_KEY"] = "test-key"
+            coder = main(
+                ["--exit", "--yes"], input=DummyInput(), output=DummyOutput(), return_coder=True
+            )
+            self.assertIn("sonnet", coder.main_model.name.lower())
+            del os.environ["ANTHROPIC_API_KEY"]
+            del os.environ["OPENAI_API_KEY"]
+
+    def test_chat_language_spanish(self):
+        with GitTemporaryDirectory():
+            coder = main(
+                ["--chat-language", "Spanish", "--exit", "--yes"],
+                input=DummyInput(),
+                output=DummyOutput(),
+                return_coder=True,
+            )
+            system_info = coder.get_platform_info()
+            self.assertIn("Spanish", system_info)
+
+    @patch("git.Repo.init")
+    def test_main_exit_with_git_command_not_found(self, mock_git_init):
+        mock_git_init.side_effect = git.exc.GitCommandNotFound("git", "Command 'git' not found")
+
+        try:
+            result = main(["--exit", "--yes"], input=DummyInput(), output=DummyOutput())
+        except Exception as e:
+            self.fail(f"main() raised an unexpected exception: {e}")
+
+        self.assertIsNone(result, "main() should return None when called with --exit")
+
+    def test_reasoning_effort_option(self):
+        coder = main(
+            ["--reasoning-effort", "3", "--no-check-model-accepts-settings", "--yes", "--exit"],
+            input=DummyInput(),
+            output=DummyOutput(),
+            return_coder=True,
+        )
+        self.assertEqual(
+            coder.main_model.extra_params.get("extra_body", {}).get("reasoning_effort"), "3"
+        )
+
+    def test_thinking_tokens_option(self):
+        coder = main(
+            ["--model", "sonnet", "--thinking-tokens", "1000", "--yes", "--exit"],
+            input=DummyInput(),
+            output=DummyOutput(),
+            return_coder=True,
+        )
+        self.assertEqual(
+            coder.main_model.extra_params.get("thinking", {}).get("budget_tokens"), 1000
+        )
+
     @patch("aider.main.InputOutput")
     def test_stream_and_cache_warning(self, MockInputOutput):
         mock_io_instance = MockInputOutput.return_value
@@ -1275,65 +1297,6 @@ class TestMain(TestCase):
         for call in mock_io_instance.tool_warning.call_args_list:
             self.assertNotIn("Cost estimates may be inaccurate", call[0][0])
 
-    def test_load_dotenv_files_override(self):
-        with GitTemporaryDirectory() as git_dir:
-            git_dir = Path(git_dir)
-
-            # Create fake home and .aider directory
-            fake_home = git_dir / "fake_home"
-            fake_home.mkdir()
-            aider_dir = fake_home / ".aider"
-            aider_dir.mkdir()
-
-            # Create oauth keys file
-            oauth_keys_file = aider_dir / "oauth-keys.env"
-            oauth_keys_file.write_text("OAUTH_VAR=oauth_val\nSHARED_VAR=oauth_shared\n")
-
-            # Create git root .env file
-            git_root_env = git_dir / ".env"
-            git_root_env.write_text("GIT_VAR=git_val\nSHARED_VAR=git_shared\n")
-
-            # Create CWD .env file in a subdir
-            cwd_subdir = git_dir / "subdir"
-            cwd_subdir.mkdir()
-            cwd_env = cwd_subdir / ".env"
-            cwd_env.write_text("CWD_VAR=cwd_val\nSHARED_VAR=cwd_shared\n")
-
-            # Change to subdir
-            original_cwd = os.getcwd()
-            os.chdir(cwd_subdir)
-
-            # Clear relevant env vars before test
-            for var in ["OAUTH_VAR", "SHARED_VAR", "GIT_VAR", "CWD_VAR"]:
-                if var in os.environ:
-                    del os.environ[var]
-
-            with patch("pathlib.Path.home", return_value=fake_home):
-                loaded_files = load_dotenv_files(str(git_dir), None)
-
-                # Assert files were loaded in expected order (oauth first)
-                self.assertIn(str(oauth_keys_file.resolve()), loaded_files)
-                self.assertIn(str(git_root_env.resolve()), loaded_files)
-                self.assertIn(str(cwd_env.resolve()), loaded_files)
-                self.assertLess(
-                    loaded_files.index(str(oauth_keys_file.resolve())),
-                    loaded_files.index(str(git_root_env.resolve())),
-                )
-                self.assertLess(
-                    loaded_files.index(str(git_root_env.resolve())),
-                    loaded_files.index(str(cwd_env.resolve())),
-                )
-
-                # Assert environment variables reflect the override order
-                self.assertEqual(os.environ.get("OAUTH_VAR"), "oauth_val")
-                self.assertEqual(os.environ.get("GIT_VAR"), "git_val")
-                self.assertEqual(os.environ.get("CWD_VAR"), "cwd_val")
-                # SHARED_VAR should be overridden by the last loaded file (cwd .env)
-                self.assertEqual(os.environ.get("SHARED_VAR"), "cwd_shared")
-
-            # Restore CWD
-            os.chdir(original_cwd)
-
     @patch("aider.main.InputOutput")
     def test_cache_without_stream_no_warning(self, MockInputOutput):
         mock_io_instance = MockInputOutput.return_value
