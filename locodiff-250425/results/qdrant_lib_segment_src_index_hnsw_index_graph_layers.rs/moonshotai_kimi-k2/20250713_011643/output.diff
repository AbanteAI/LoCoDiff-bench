
index d859f00fb..32da49d7b 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmpr9fotbv6_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmp6_6nf4w6_actual.txt	
@@ -125,7 +125,6 @@ pub trait GraphLayersBase {
         is_stopped: &AtomicBool,
     ) -> CancellableResult<ScoredPointOffset> {
         let mut links: Vec<PointOffsetType> = Vec::with_capacity(2 * self.get_m(0));
-
         let mut current_point = ScoredPointOffset {
             idx: entry_point,
             score: points_scorer.score_point(entry_point),
@@ -371,6 +370,21 @@ impl GraphLayers {
         self.links.populate()?;
         Ok(())
     }
+
+    pub fn save(&self, path: &Path) -> OperationResult<()> {
+        Ok(io::file_operations::atomic_save_bin(
+            &GraphLayers::get_path(path),
+            &self.data(),
+        )?)
+    }
+
+    fn data(&self) -> GraphLayerData {
+        GraphLayerData {
+            m: self.m,
+            m0: self.m0,
+            entry_points: Cow::Borrowed(&self.entry_points),
+        }
+    }
 }
 
 #[cfg(test)]
@@ -391,8 +405,8 @@ mod tests {
     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
     use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
+    use crate::vector_storage::DEFAULT_STOPPED;
 
     fn search_in_graph(
         query: &[VectorElementType],
@@ -477,7 +491,9 @@ mod tests {
     #[case::converted((GraphLinksFormat::Plain, true))]
     #[case::compressed((GraphLinksFormat::Compressed, false))]
     #[case::recompressed((GraphLinksFormat::Compressed, true))]
-    fn test_save_and_load(#[case] (initial_format, compress): (GraphLinksFormat, bool)) {
+    fn test_save_and_load(
+        #[case] (initial_format, compress): (GraphLinksFormat, bool),
+    ) {
         let num_vectors = 100;
         let dim = 8;
         let top = 5;
