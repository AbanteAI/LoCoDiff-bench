
index d859f00f..6635af47 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmp_hxn8fz5_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmp9lwg72ka_actual.txt	
@@ -28,19 +28,19 @@ pub const HNSW_GRAPH_FILE: &str = "graph.bin";
 pub const HNSW_LINKS_FILE: &str = "links.bin";
 pub const COMPRESSED_HNSW_LINKS_FILE: &str = "links_compressed.bin";
 
-/// Contents of the `graph.bin` file.
 #[derive(Deserialize, Serialize, Debug)]
-pub(super) struct GraphLayerData<'a> {
-    pub(super) m: usize,
-    pub(super) m0: usize,
-    pub(super) ef_construct: usize,
-    pub(super) entry_points: Cow<'a, EntryPoints>,
+struct GraphLayerData<'a> {
+    m: usize,
+    m0: usize,
+    ef_construct: usize,
+    entry_points: Cow<'a, EntryPoints>,
 }
 
 #[derive(Debug)]
 pub struct GraphLayers {
     pub(super) m: usize,
     pub(super) m0: usize,
+    pub(super) ef_construct: usize,
     pub(super) links: GraphLinks,
     pub(super) entry_points: EntryPoints,
     pub(super) visited_pool: VisitedPool,
@@ -53,10 +53,65 @@ pub trait GraphLayersBase {
     where
         F: FnMut(PointOffsetType);
 
-    /// Get M based on current level
     fn get_m(&self, level: usize) -> usize;
 
-    /// Greedy search for closest points within a single graph layer
+    fn _search_on_level(
+        &self,
+        searcher: &mut SearchContext,
+        level: usize,
+        visited_list: &mut VisitedListHandle,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<()>;
+
+    fn search_on_level(
+        &self,
+        level_entry: ScoredPointOffset,
+        level: usize,
+        ef: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<FixedLengthPriorityQueue<ScoredPointOffset>>;
+
+    fn search_entry(
+        &self,
+        entry_point: PointOffsetType,
+        top_level: usize,
+        target_level: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<ScoredPointOffset>;
+
+    fn search(
+        &self,
+        top: usize,
+        ef: usize,
+        points_scorer: &mut FilteredScorer,
+        custom_entry_points: Option<&[PointOffsetType]>,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<Vec<ScoredPointOffset>>;
+}
+
+impl GraphLayersBase for GraphLayers {
+    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
+        self.visited_pool.get(self.links.num_points())
+    }
+
+    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, mut f: F)
+    where
+        F: FnMut(PointOffsetType),
+    {
+        self.links.links(point_id, level).for_each(f);
+    }
+
+    fn get_m(&self, level: usize) -> usize {
+        if level == 0 {
+            self.m0
+        } else {
+            self.m
+        }
+    }
+
     fn _search_on_level(
         &self,
         searcher: &mut SearchContext,
@@ -111,11 +166,10 @@ pub trait GraphLayersBase {
             points_scorer,
             is_stopped,
         )?;
+
         Ok(search_context.nearest)
     }
 
-    /// Greedy searches for entry point of level `target_level`.
-    /// Beam size is 1.
     fn search_entry(
         &self,
         entry_point: PointOffsetType,
@@ -125,47 +179,6 @@ pub trait GraphLayersBase {
         is_stopped: &AtomicBool,
     ) -> CancellableResult<ScoredPointOffset> {
         let mut links: Vec<PointOffsetType> = Vec::with_capacity(2 * self.get_m(0));
-
-        let mut current_point = ScoredPointOffset {
-            idx: entry_point,
-            score: points_scorer.score_point(entry_point),
-        };
-        for level in rev_range(top_level, target_level) {
-            check_process_stopped(is_stopped)?;
-
-            let limit = self.get_m(level);
-
-            let mut changed = true;
-            while changed {
-                changed = false;
-
-                links.clear();
-                self.links_map(current_point.idx, level, |link| {
-                    links.push(link);
-                });
-
-                let scores = points_scorer.score_points(&mut links, limit);
-                scores.iter().copied().for_each(|score_point| {
-                    if score_point.score > current_point.score {
-                        changed = true;
-                        current_point = score_point;
-                    }
-                });
-            }
-        }
-        Ok(current_point)
-    }
-
-    #[cfg(test)]
-    #[cfg(feature = "gpu")]
-    fn search_entry_on_level(
-        &self,
-        entry_point: PointOffsetType,
-        level: usize,
-        points_scorer: &mut FilteredScorer,
-    ) -> ScoredPointOffset {
-        let limit = self.get_m(level);
-        let mut links: Vec<PointOffsetType> = Vec::with_capacity(2 * self.get_m(0));
         let mut current_point = ScoredPointOffset {
             idx: entry_point,
             score: points_scorer.score_point(entry_point),
@@ -173,14 +186,14 @@ pub trait GraphLayersBase {
 
         let mut changed = true;
         while changed {
-            changed = false;
+            check_process_stopped(is_stopped)?;
 
             links.clear();
-            self.links_map(current_point.idx, level, |link| {
+            for link in self.links.links(current_point.idx, target_level) {
                 links.push(link);
-            });
+            }
 
-            let scores = points_scorer.score_points(&mut links, limit);
+            let scores = points_scorer.score_points(&mut links, self.get_m(target_level));
             scores.iter().copied().for_each(|score_point| {
                 if score_point.score > current_point.score {
                     changed = true;
@@ -188,32 +201,42 @@ pub trait GraphLayersBase {
                 }
             });
         }
-        current_point
-    }
-}
 
-impl GraphLayersBase for GraphLayers {
-    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
-        self.visited_pool.get(self.links.num_points())
+        Ok(current_point)
     }
 
-    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
-    where
-        F: FnMut(PointOffsetType),
-    {
-        self.links.links(point_id, level).for_each(f);
-    }
+    fn search(
+        &self,
+        top: usize,
+        ef: usize,
+        points_scorer: &mut FilteredScorer,
+        custom_entry_points: Option<&[PointOffsetType]>,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<Vec<ScoredPointOffset>> {
+        let Some(entry_point) = self.get_entry_point(&points_scorer, custom_entry_points) else {
+            return Ok(Vec::default());
+        };
 
-    fn get_m(&self, level: usize) -> usize {
-        if level == 0 { self.m0 } else { self.m }
+        let zero_level_entry = self.search_entry(
+            entry_point.point_id,
+            entry_point.level,
+            0,
+            points_scorer,
+            is_stopped,
+        )?;
+
+        let nearest = self.search_on_level(
+            zero_level_entry,
+            0,
+            max(top, ef),
+            points_scorer,
+            is_stopped,
+        )?;
+        Ok(nearest.into_iter_sorted().take(top).collect_vec())
     }
 }
 
-/// Object contains links between nodes for HNSW search
-///
-/// Assume all scores are similarities. Larger score = closer points
 impl GraphLayers {
-    /// Returns the highest level this point is included in
     pub fn point_level(&self, point_id: PointOffsetType) -> usize {
         self.links.point_level(point_id)
     }
@@ -223,20 +246,18 @@ impl GraphLayers {
         points_scorer: &FilteredScorer,
         custom_entry_points: Option<&[PointOffsetType]>,
     ) -> Option<EntryPoint> {
-        // Try to get it from custom entry points
         custom_entry_points
-            .and_then(|custom_entry_points| {
-                custom_entry_points
+            .and_then(|custom| {
+                custom
                     .iter()
                     .filter(|&&point_id| points_scorer.check_vector(point_id))
-                    .map(|&point_id| {
-                        let level = self.point_level(point_id);
-                        EntryPoint { point_id, level }
+                    .map(|&point_id| EntryPoint {
+                        point_id,
+                        level: self.point_level(point_id),
                     })
                     .max_by_key(|ep| ep.level)
             })
             .or_else(|| {
-                // Otherwise use normal entry points
                 self.entry_points
                     .get_entry_point(|point_id| points_scorer.check_vector(point_id))
             })
@@ -250,8 +271,9 @@ impl GraphLayers {
         custom_entry_points: Option<&[PointOffsetType]>,
         is_stopped: &AtomicBool,
     ) -> CancellableResult<Vec<ScoredPointOffset>> {
-        let Some(entry_point) = self.get_entry_point(&points_scorer, custom_entry_points) else {
-            return Ok(Vec::default());
+        let entry_point = match self.get_entry_point(&points_scorer, custom_entry_points) {
+            None => return Ok(Vec::default()),
+            Some(ep) => ep,
         };
 
         let zero_level_entry = self.search_entry(
@@ -261,6 +283,7 @@ impl GraphLayers {
             &mut points_scorer,
             is_stopped,
         )?;
+
         let nearest = self.search_on_level(
             zero_level_entry,
             0,
@@ -292,9 +315,7 @@ impl GraphLayers {
     pub fn num_points(&self) -> usize {
         self.links.num_points()
     }
-}
 
-impl GraphLayers {
     pub fn load(dir: &Path, on_disk: bool, compress: bool) -> OperationResult<Self> {
         let graph_data: GraphLayerData = read_bin(&GraphLayers::get_path(dir))?;
 
@@ -305,6 +326,7 @@ impl GraphLayers {
         Ok(Self {
             m: graph_data.m,
             m0: graph_data.m0,
+            ef_construct: graph_data.ef_construct,
             links: Self::load_links(dir, on_disk)?,
             entry_points: graph_data.entry_points.into_owned(),
             visited_pool: VisitedPool::new(),
@@ -337,7 +359,6 @@ impl GraphLayers {
             .save_as(&compressed_path)?;
         let new_size = compressed_path.metadata()?.len();
 
-        // Remove the original file
         std::fs::remove_file(plain_path)?;
 
         log::debug!(
@@ -375,15 +396,15 @@ impl GraphLayers {
 
 #[cfg(test)]
 mod tests {
-    use rand::SeedableRng;
     use rand::rngs::StdRng;
+    use rand::SeedableRng;
     use rstest::rstest;
     use tempfile::Builder;
 
     use super::*;
     use crate::data_types::vectors::VectorElementType;
     use crate::fixtures::index_fixtures::{
-        FakeFilterContext, TestRawScorerProducer, random_vector,
+        random_vector, FakeFilterContext, TestRawScorerProducer,
     };
     use crate::index::hnsw_index::graph_links::GraphLinksSerializer;
     use crate::index::hnsw_index::tests::{
@@ -391,7 +412,6 @@ mod tests {
     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
     use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
 
     fn search_in_graph(
@@ -402,11 +422,9 @@ mod tests {
     ) -> Vec<ScoredPointOffset> {
         let fake_filter_context = FakeFilterContext {};
         let raw_scorer = vector_storage.get_raw_scorer(query.to_owned()).unwrap();
-
         let scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
-        let ef = 16;
         graph
-            .search(top, ef, scorer, None, &DEFAULT_STOPPED)
+            .search(top, 16, scorer, None, &DEFAULT_STOPPED)
             .unwrap()
     }
 
@@ -423,15 +441,12 @@ mod tests {
 
         let mut rng = StdRng::seed_from_u64(42);
 
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
-
         let mut graph_links = vec![vec![Vec::new()]; num_vectors];
         graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
-
         let graph_layers = GraphLayers {
             m,
             m0: 2 * m,
+            ef_construct: 32,
             links: GraphLinksSerializer::new(graph_links.clone(), format, m, 2 * m)
                 .to_graph_links_ram(),
             entry_points: EntryPoints::new(entry_points_num),
@@ -439,12 +454,8 @@ mod tests {
         };
 
         let linking_idx: PointOffsetType = 7;
-
         let fake_filter_context = FakeFilterContext {};
-        let added_vector = vector_holder
-            .vectors
-            .get(linking_idx as VectorOffsetType)
-            .to_vec();
+        let added_vector = vector_holder.vectors.get(linking_idx as VectorOffsetType).to_vec();
         let raw_scorer = vector_holder.get_raw_scorer(added_vector).unwrap();
         let mut scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
 
@@ -464,11 +475,10 @@ mod tests {
         assert_eq!(nearest_on_level.len(), graph_links[0][0].len() + 1);
 
         for nearest in nearest_on_level.iter_unsorted() {
-            // eprintln!("nearest = {:#?}", nearest);
             assert_eq!(
                 nearest.score,
                 scorer.score_internal(linking_idx, nearest.idx)
-            )
+            );
         }
     }
 
@@ -486,8 +496,6 @@ mod tests {
 
         let dir = Builder::new().prefix("graph_dir").tempdir().unwrap();
 
-        let query = random_vector(&mut rng, dim);
-
         let (vector_holder, graph_layers_builder) =
             create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
         let graph1 = graph_layers_builder
@@ -516,17 +524,19 @@ mod tests {
         let dim = 8;
 
         let mut rng = StdRng::seed_from_u64(42);
-
-        type M = CosineMetric;
-
-        let (vector_holder, graph_layers) =
-            create_graph_layer_fixture::<M, _>(num_vectors, M, dim, format, false, &mut rng);
+        let (vector_holder, graph_layers) = create_graph_layer_fixture::<CosineMetric, _>(
+            num_vectors,
+            M,
+            dim,
+            format,
+            false,
+            &mut rng,
+        );
 
         let main_entry = graph_layers
             .entry_points
-            .get_entry_point(|_x| true)
+            .get_entry_point(|_| true)
             .expect("Expect entry point to exists");
-
         assert!(main_entry.level > 0);
 
         let num_levels = (0..num_vectors)
@@ -535,29 +545,15 @@ mod tests {
             .unwrap();
         assert_eq!(main_entry.level, num_levels);
 
-        let total_links_0 = (0..num_vectors)
-            .map(|i| graph_layers.links.links(i as PointOffsetType, 0).len())
-            .sum::<usize>();
-
-        eprintln!("total_links_0 = {total_links_0:#?}");
-        eprintln!("num_vectors = {num_vectors:#?}");
+        let total_links_0: usize = (0..num_vectors)
+            .map(|i| graph_layers.links.links_vec(i as PointOffsetType, 0).len())
+            .sum();
         assert!(total_links_0 > 0);
-        assert!(total_links_0 as f64 / num_vectors as f64 > M as f64);
+        assert!((total_links_0 as f64 / num_vectors as f64) > M as f64);
 
         let top = 5;
-        let query = random_vector(&mut rng, dim);
-        let processed_query = <M as Metric<VectorElementType>>::preprocess(query.clone());
-        let mut reference_top = FixedLengthPriorityQueue::new(top);
-        for idx in 0..vector_holder.vectors.len() as PointOffsetType {
-            let vec = &vector_holder.vectors.get(idx as VectorOffsetType);
-            reference_top.push(ScoredPointOffset {
-                idx,
-                score: M::similarity(vec, &processed_query),
-            });
-        }
-
         let graph_search = search_in_graph(&query, top, &vector_holder, &graph_layers);
 
-        assert_eq!(reference_top.into_sorted_vec(), graph_search);
+        assert_eq!(reference_top.into_vec(), graph_search);
     }
 }
\ No newline at end of file
