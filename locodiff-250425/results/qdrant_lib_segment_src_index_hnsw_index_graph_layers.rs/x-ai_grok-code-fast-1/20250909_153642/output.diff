
index d859f00fb..a083a5599 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmpxkw9462d_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmpous963md_actual.txt	
@@ -22,6 +22,7 @@ use crate::index::hnsw_index::search_context::SearchContext;
 use crate::index::visited_pool::{VisitedListHandle, VisitedPool};
 
 pub type LinkContainer = Vec<PointOffsetType>;
+pub type LinkContainerRef<'a> = &'a [PointOffsetType];
 pub type LayersContainer = Vec<LinkContainer>;
 
 pub const HNSW_GRAPH_FILE: &str = "graph.bin";
@@ -318,7 +319,7 @@ impl GraphLayers {
                 return GraphLinks::load_from_file(&path, on_disk, format);
             }
         }
-        Err(OperationError::service_error("No links file found"))
+        Err(OperationError::generic("No links file found"))
     }
 
     fn convert_to_compressed(dir: &Path, m: usize, m0: usize) -> OperationResult<()> {
@@ -421,10 +422,7 @@ mod tests {
         let entry_points_num = 10;
         let num_vectors = 10;
 
-        let mut rng = StdRng::seed_from_u64(42);
-
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
+        let vector_holder = TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut StdRng::seed_from_u64(42));
 
         let mut graph_links = vec![vec![Vec::new()]; num_vectors];
         graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
@@ -441,10 +439,7 @@ mod tests {
         let linking_idx: PointOffsetType = 7;
 
         let fake_filter_context = FakeFilterContext {};
-        let added_vector = vector_holder
-            .vectors
-            .get(linking_idx as VectorOffsetType)
-            .to_vec();
+        let added_vector = vector_holder.vectors.get(linking_idx as VectorOffsetType).to_vec();
         let raw_scorer = vector_holder.get_raw_scorer(added_vector).unwrap();
         let mut scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
 
@@ -485,16 +480,13 @@ mod tests {
         let mut rng = StdRng::seed_from_u64(42);
 
         let dir = Builder::new().prefix("graph_dir").tempdir().unwrap();
-
-        let query = random_vector(&mut rng, dim);
-
         let (vector_holder, graph_layers_builder) =
             create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
         let graph1 = graph_layers_builder
             .into_graph_layers(dir.path(), initial_format, true)
             .unwrap();
         assert_eq!(graph1.links.format(), initial_format);
-        let res1 = search_in_graph(&query, top, &vector_holder, &graph1);
+        let res1 = search_in_graph(&random_vector(&mut rng, dim), top, &vector_holder, &graph1);
         drop(graph1);
 
         let graph2 = GraphLayers::load(dir.path(), false, compress).unwrap();
@@ -503,7 +495,7 @@ mod tests {
         } else {
             assert_eq!(graph2.links.format(), initial_format);
         }
-        let res2 = search_in_graph(&query, top, &vector_holder, &graph2);
+        let res2 = search_in_graph(&vec![0.0; dim], top, &vector_holder, &graph2);
 
         assert_eq!(res1, res2)
     }
