
index d859f00f..84839b51 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmpdh0219e9_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmpywehuk8s_actual.txt	
@@ -1,16 +1,17 @@
 use std::borrow::Cow;
 use std::cmp::max;
 use std::path::{Path, PathBuf};
-use std::sync::atomic::AtomicBool;
+use std::sync::atomic::{AtomicBool, Ordering};
 
 use common::fixed_length_priority_queue::FixedLengthPriorityQueue;
 use common::types::{PointOffsetType, ScoredPointOffset};
 use io::file_operations::read_bin;
 use itertools::Itertools;
+use memory::mmap_ops;
 use serde::{Deserialize, Serialize};
 
 use super::entry_points::EntryPoint;
-use super::graph_links::{GraphLinks, GraphLinksFormat};
+use super::graph_links::{convert_to_compressed, GraphLinks, GraphLinksFormat};
 use crate::common::operation_error::{
     CancellableResult, OperationError, OperationResult, check_process_stopped,
 };
@@ -57,6 +58,7 @@ pub trait GraphLayersBase {
     fn get_m(&self, level: usize) -> usize;
 
     /// Greedy search for closest points within a single graph layer
+    #[allow(clippy::too_many_arguments)]
     fn _search_on_level(
         &self,
         searcher: &mut SearchContext,
@@ -72,6 +74,8 @@ pub trait GraphLayersBase {
             check_process_stopped(is_stopped)?;
 
             if candidate.score < searcher.lower_bound() {
+                // All other candidates in the queue will also have a score less than lower_bound
+                // because the queue is sorted.
                 break;
             }
 
@@ -116,6 +120,7 @@ pub trait GraphLayersBase {
 
     /// Greedy searches for entry point of level `target_level`.
     /// Beam size is 1.
+    #[allow(clippy::too_many_arguments)]
     fn search_entry(
         &self,
         entry_point: PointOffsetType,
@@ -375,8 +380,8 @@ impl GraphLayers {
 
 #[cfg(test)]
 mod tests {
-    use rand::SeedableRng;
     use rand::rngs::StdRng;
+    use rand::SeedableRng;
     use rstest::rstest;
     use tempfile::Builder;
 
@@ -391,13 +396,13 @@ mod tests {
     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
     use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
+    use crate::vector_storage::VectorStorage;
 
     fn search_in_graph(
         query: &[VectorElementType],
         top: usize,
-        vector_storage: &TestRawScorerProducer<CosineMetric>,
+        vector_storage: &dyn VectorStorage,
         graph: &GraphLayers,
     ) -> Vec<ScoredPointOffset> {
         let fake_filter_context = FakeFilterContext {};
@@ -485,9 +490,6 @@ mod tests {
         let mut rng = StdRng::seed_from_u64(42);
 
         let dir = Builder::new().prefix("graph_dir").tempdir().unwrap();
-
-        let query = random_vector(&mut rng, dim);
-
         let (vector_holder, graph_layers_builder) =
             create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
         let graph1 = graph_layers_builder
@@ -524,13 +526,13 @@ mod tests {
 
         let main_entry = graph_layers
             .entry_points
-            .get_entry_point(|_x| true)
+            .get_entry_point(|point_id| vector_holder.vectors.is_indexed(point_id))
             .expect("Expect entry point to exists");
 
         assert!(main_entry.level > 0);
 
         let num_levels = (0..num_vectors)
-            .map(|i| graph_layers.links.point_level(i as PointOffsetType))
+            .map(|i| graph_layers.point_level(i as PointOffsetType))
             .max()
             .unwrap();
         assert_eq!(main_entry.level, num_levels);
@@ -556,7 +558,7 @@ mod tests {
             });
         }
 
-        let graph_search = search_in_graph(&query, top, &vector_holder, &graph_layers);
+        let graph_search = search_in_graph(&query, top, &vector_holder.vectors, &graph_layers);
 
         assert_eq!(reference_top.into_sorted_vec(), graph_search);
     }
