--- qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual)@@ -154,41 +154,6 @@             }
         }
         Ok(current_point)
-    }
-
-    #[cfg(test)]
-    #[cfg(feature = "gpu")]
-    fn search_entry_on_level(
-        &self,
-        entry_point: PointOffsetType,
-        level: usize,
-        points_scorer: &mut FilteredScorer,
-    ) -> ScoredPointOffset {
-        let limit = self.get_m(level);
-        let mut links: Vec<PointOffsetType> = Vec::with_capacity(2 * self.get_m(0));
-        let mut current_point = ScoredPointOffset {
-            idx: entry_point,
-            score: points_scorer.score_point(entry_point),
-        };
-
-        let mut changed = true;
-        while changed {
-            changed = false;
-
-            links.clear();
-            self.links_map(current_point.idx, level, |link| {
-                links.push(link);
-            });
-
-            let scores = points_scorer.score_points(&mut links, limit);
-            scores.iter().copied().for_each(|score_point| {
-                if score_point.score > current_point.score {
-                    changed = true;
-                    current_point = score_point;
-                }
-            });
-        }
-        current_point
     }
 }
 
@@ -371,193 +336,4 @@         self.links.populate()?;
         Ok(())
     }
-}
-
-#[cfg(test)]
-mod tests {
-    use rand::SeedableRng;
-    use rand::rngs::StdRng;
-    use rstest::rstest;
-    use tempfile::Builder;
-
-    use super::*;
-    use crate::data_types::vectors::VectorElementType;
-    use crate::fixtures::index_fixtures::{
-        FakeFilterContext, TestRawScorerProducer, random_vector,
-    };
-    use crate::index::hnsw_index::graph_links::GraphLinksSerializer;
-    use crate::index::hnsw_index::tests::{
-        create_graph_layer_builder_fixture, create_graph_layer_fixture,
-    };
-    use crate::spaces::metric::Metric;
-    use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
-    use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
-
-    fn search_in_graph(
-        query: &[VectorElementType],
-        top: usize,
-        vector_storage: &TestRawScorerProducer<CosineMetric>,
-        graph: &GraphLayers,
-    ) -> Vec<ScoredPointOffset> {
-        let fake_filter_context = FakeFilterContext {};
-        let raw_scorer = vector_storage.get_raw_scorer(query.to_owned()).unwrap();
-
-        let scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
-        let ef = 16;
-        graph
-            .search(top, ef, scorer, None, &DEFAULT_STOPPED)
-            .unwrap()
-    }
-
-    const M: usize = 8;
-
-    #[rstest]
-    #[case::uncompressed(GraphLinksFormat::Plain)]
-    #[case::compressed(GraphLinksFormat::Compressed)]
-    fn test_search_on_level(#[case] format: GraphLinksFormat) {
-        let dim = 8;
-        let m = 8;
-        let entry_points_num = 10;
-        let num_vectors = 10;
-
-        let mut rng = StdRng::seed_from_u64(42);
-
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
-
-        let mut graph_links = vec![vec![Vec::new()]; num_vectors];
-        graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
-
-        let graph_layers = GraphLayers {
-            m,
-            m0: 2 * m,
-            links: GraphLinksSerializer::new(graph_links.clone(), format, m, 2 * m)
-                .to_graph_links_ram(),
-            entry_points: EntryPoints::new(entry_points_num),
-            visited_pool: VisitedPool::new(),
-        };
-
-        let linking_idx: PointOffsetType = 7;
-
-        let fake_filter_context = FakeFilterContext {};
-        let added_vector = vector_holder
-            .vectors
-            .get(linking_idx as VectorOffsetType)
-            .to_vec();
-        let raw_scorer = vector_holder.get_raw_scorer(added_vector).unwrap();
-        let mut scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
-
-        let nearest_on_level = graph_layers
-            .search_on_level(
-                ScoredPointOffset {
-                    idx: 0,
-                    score: scorer.score_point(0),
-                },
-                0,
-                32,
-                &mut scorer,
-                &DEFAULT_STOPPED,
-            )
-            .unwrap();
-
-        assert_eq!(nearest_on_level.len(), graph_links[0][0].len() + 1);
-
-        for nearest in nearest_on_level.iter_unsorted() {
-            // eprintln!("nearest = {:#?}", nearest);
-            assert_eq!(
-                nearest.score,
-                scorer.score_internal(linking_idx, nearest.idx)
-            )
-        }
-    }
-
-    #[rstest]
-    #[case::uncompressed((GraphLinksFormat::Plain, false))]
-    #[case::converted((GraphLinksFormat::Plain, true))]
-    #[case::compressed((GraphLinksFormat::Compressed, false))]
-    #[case::recompressed((GraphLinksFormat::Compressed, true))]
-    fn test_save_and_load(#[case] (initial_format, compress): (GraphLinksFormat, bool)) {
-        let num_vectors = 100;
-        let dim = 8;
-        let top = 5;
-
-        let mut rng = StdRng::seed_from_u64(42);
-
-        let dir = Builder::new().prefix("graph_dir").tempdir().unwrap();
-
-        let query = random_vector(&mut rng, dim);
-
-        let (vector_holder, graph_layers_builder) =
-            create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
-        let graph1 = graph_layers_builder
-            .into_graph_layers(dir.path(), initial_format, true)
-            .unwrap();
-        assert_eq!(graph1.links.format(), initial_format);
-        let res1 = search_in_graph(&query, top, &vector_holder, &graph1);
-        drop(graph1);
-
-        let graph2 = GraphLayers::load(dir.path(), false, compress).unwrap();
-        if compress {
-            assert_eq!(graph2.links.format(), GraphLinksFormat::Compressed);
-        } else {
-            assert_eq!(graph2.links.format(), initial_format);
-        }
-        let res2 = search_in_graph(&query, top, &vector_holder, &graph2);
-
-        assert_eq!(res1, res2)
-    }
-
-    #[rstest]
-    #[case::uncompressed(GraphLinksFormat::Plain)]
-    #[case::compressed(GraphLinksFormat::Compressed)]
-    fn test_add_points(#[case] format: GraphLinksFormat) {
-        let num_vectors = 1000;
-        let dim = 8;
-
-        let mut rng = StdRng::seed_from_u64(42);
-
-        type M = CosineMetric;
-
-        let (vector_holder, graph_layers) =
-            create_graph_layer_fixture::<M, _>(num_vectors, M, dim, format, false, &mut rng);
-
-        let main_entry = graph_layers
-            .entry_points
-            .get_entry_point(|_x| true)
-            .expect("Expect entry point to exists");
-
-        assert!(main_entry.level > 0);
-
-        let num_levels = (0..num_vectors)
-            .map(|i| graph_layers.links.point_level(i as PointOffsetType))
-            .max()
-            .unwrap();
-        assert_eq!(main_entry.level, num_levels);
-
-        let total_links_0 = (0..num_vectors)
-            .map(|i| graph_layers.links.links(i as PointOffsetType, 0).len())
-            .sum::<usize>();
-
-        eprintln!("total_links_0 = {total_links_0:#?}");
-        eprintln!("num_vectors = {num_vectors:#?}");
-        assert!(total_links_0 > 0);
-        assert!(total_links_0 as f64 / num_vectors as f64 > M as f64);
-
-        let top = 5;
-        let query = random_vector(&mut rng, dim);
-        let processed_query = <M as Metric<VectorElementType>>::preprocess(query.clone());
-        let mut reference_top = FixedLengthPriorityQueue::new(top);
-        for idx in 0..vector_holder.vectors.len() as PointOffsetType {
-            let vec = &vector_holder.vectors.get(idx as VectorOffsetType);
-            reference_top.push(ScoredPointOffset {
-                idx,
-                score: M::similarity(vec, &processed_query),
-            });
-        }
-
-        let graph_search = search_in_graph(&query, top, &vector_holder, &graph_layers);
-
-        assert_eq!(reference_top.into_sorted_vec(), graph_search);
-    }
 }