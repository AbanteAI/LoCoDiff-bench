pub struct GraphLayers {
    pub(super) m: usize,        // Max connections for non-zero layers
    pub(super) m0: usize,       // Max connections for layer 0
    pub(super) links: GraphLinks,  // The actual graph connections
    pub(super) entry_points: EntryPoints,  // Entry points for search
    pub(super) visited_pool: VisitedPool,  // Object pool for visited tracking
}
```

### 2. **Core Functionality**

#### Graph Construction
- **Random layer assignment**: Points are assigned to layers based on exponential decay probability
- **Link management**: Manages bidirectional links between points in the graph
- **Heuristic selection**: Originally supported both with/without heuristic for neighbor selection

#### Search Algorithm
- **Multi-level search**: Starts from higher layers and descends to layer 0
- **Greedy search**: Uses greedy best-first search at each layer
- **Visited tracking**: Efficiently tracks visited nodes using a pool-based system

## Evolution Through Commits

### Early Development (2021)
- **Initial implementation**: Basic HNSW structure with filterable search capabilities
- **Performance optimizations**: 
  - Lock-free visited pool
  - SeaHash for faster hashing
  - Build time optimizations

### Architecture Changes (2022-2023)
- **Removed dynamic metrics**: Shifted from runtime polymorphism to compile-time generics
- **Memory management improvements**:
  - Added mmap support for disk-based storage
  - Implemented chunked vector storage
  - Added deletion flags support

### Compression & Optimization (2024-2025)
- **Graph compression**: Added bitpacking for link compression
- **GPU support**: Added GPU-accelerated HNSW construction
- **Separated storage formats**: Plain vs compressed links stored in different files
- **Cancellation support**: Added `is_stopped` checks for graceful cancellation

## Current Architecture

### Storage Format
```
graph.bin                 # Graph metadata (m, m0, entry points)
links.bin                 # Plain link storage
links_compressed.bin      # Compressed link storage