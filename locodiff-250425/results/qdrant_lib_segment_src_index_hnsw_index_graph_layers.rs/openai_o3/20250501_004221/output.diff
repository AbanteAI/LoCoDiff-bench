--- qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual)@@ -12,7 +12,7 @@ use super::entry_points::EntryPoint;
 use super::graph_links::{GraphLinks, GraphLinksFormat};
 use crate::common::operation_error::{
-    CancellableResult, OperationError, OperationResult, check_process_stopped,
+    check_process_stopped, CancellableResult, OperationError, OperationResult,
 };
 use crate::common::utils::rev_range;
 use crate::index::hnsw_index::entry_points::EntryPoints;
@@ -43,6 +43,7 @@     pub(super) m0: usize,
     pub(super) links: GraphLinks,
     pub(super) entry_points: EntryPoints,
+
     pub(super) visited_pool: VisitedPool,
 }
 
@@ -53,7 +54,6 @@     where
         F: FnMut(PointOffsetType);
 
-    /// Get M based on current level
     fn get_m(&self, level: usize) -> usize;
 
     /// Greedy search for closest points within a single graph layer
@@ -155,41 +155,6 @@         }
         Ok(current_point)
     }
-
-    #[cfg(test)]
-    #[cfg(feature = "gpu")]
-    fn search_entry_on_level(
-        &self,
-        entry_point: PointOffsetType,
-        level: usize,
-        points_scorer: &mut FilteredScorer,
-    ) -> ScoredPointOffset {
-        let limit = self.get_m(level);
-        let mut links: Vec<PointOffsetType> = Vec::with_capacity(2 * self.get_m(0));
-        let mut current_point = ScoredPointOffset {
-            idx: entry_point,
-            score: points_scorer.score_point(entry_point),
-        };
-
-        let mut changed = true;
-        while changed {
-            changed = false;
-
-            links.clear();
-            self.links_map(current_point.idx, level, |link| {
-                links.push(link);
-            });
-
-            let scores = points_scorer.score_points(&mut links, limit);
-            scores.iter().copied().for_each(|score_point| {
-                if score_point.score > current_point.score {
-                    changed = true;
-                    current_point = score_point;
-                }
-            });
-        }
-        current_point
-    }
 }
 
 impl GraphLayersBase for GraphLayers {
@@ -205,13 +170,14 @@     }
 
     fn get_m(&self, level: usize) -> usize {
-        if level == 0 { self.m0 } else { self.m }
+        if level == 0 {
+            self.m0
+        } else {
+            self.m
+        }
     }
 }
 
-/// Object contains links between nodes for HNSW search
-///
-/// Assume all scores are similarities. Larger score = closer points
 impl GraphLayers {
     /// Returns the highest level this point is included in
     pub fn point_level(&self, point_id: PointOffsetType) -> usize {
@@ -295,7 +261,11 @@ }
 
 impl GraphLayers {
-    pub fn load(dir: &Path, on_disk: bool, compress: bool) -> OperationResult<Self> {
+    pub fn load(
+        dir: &Path,
+        on_disk: bool,
+        compress: bool,
+    ) -> OperationResult<Self> {
         let graph_data: GraphLayerData = read_bin(&GraphLayers::get_path(dir))?;
 
         if compress {
@@ -355,8 +325,8 @@     pub fn compress_ram(&mut self) {
         use crate::index::hnsw_index::graph_links::GraphLinksSerializer;
         assert_eq!(self.links.format(), GraphLinksFormat::Plain);
-        let dummy = GraphLinksSerializer::new(Vec::new(), GraphLinksFormat::Plain, 0, 0)
-            .to_graph_links_ram();
+        let dummy =
+            GraphLinksSerializer::new(Vec::new(), GraphLinksFormat::Plain, 0, 0).to_graph_links_ram();
         let links = std::mem::replace(&mut self.links, dummy);
         self.links = GraphLinksSerializer::new(
             links.into_edges(),
@@ -375,15 +345,15 @@ 
 #[cfg(test)]
 mod tests {
+    use rand::rngs::StdRng;
     use rand::SeedableRng;
-    use rand::rngs::StdRng;
     use rstest::rstest;
     use tempfile::Builder;
 
     use super::*;
     use crate::data_types::vectors::VectorElementType;
     use crate::fixtures::index_fixtures::{
-        FakeFilterContext, TestRawScorerProducer, random_vector,
+        random_vector, FakeFilterContext, TestRawScorerProducer,
     };
     use crate::index::hnsw_index::graph_links::GraphLinksSerializer;
     use crate::index::hnsw_index::tests::{
@@ -391,8 +361,8 @@     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
+    use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
     use crate::vector_storage::DEFAULT_STOPPED;
-    use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
 
     fn search_in_graph(
         query: &[VectorElementType],
@@ -402,7 +372,6 @@     ) -> Vec<ScoredPointOffset> {
         let fake_filter_context = FakeFilterContext {};
         let raw_scorer = vector_storage.get_raw_scorer(query.to_owned()).unwrap();
-
         let scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
         let ef = 16;
         graph
@@ -421,10 +390,7 @@         let entry_points_num = 10;
         let num_vectors = 10;
 
-        let mut rng = StdRng::seed_from_u64(42);
-
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
+        let vector_holder = TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut StdRng::seed_from_u64(42));
 
         let mut graph_links = vec![vec![Vec::new()]; num_vectors];
         graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
@@ -464,7 +430,6 @@         assert_eq!(nearest_on_level.len(), graph_links[0][0].len() + 1);
 
         for nearest in nearest_on_level.iter_unsorted() {
-            // eprintln!("nearest = {:#?}", nearest);
             assert_eq!(
                 nearest.score,
                 scorer.score_internal(linking_idx, nearest.idx)
@@ -485,15 +450,14 @@         let mut rng = StdRng::seed_from_u64(42);
 
         let dir = Builder::new().prefix("graph_dir").tempdir().unwrap();
-
-        let query = random_vector(&mut rng, dim);
-
+        let links_path = GraphLayers::get_links_path(dir.path(), initial_format);
         let (vector_holder, graph_layers_builder) =
             create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
         let graph1 = graph_layers_builder
-            .into_graph_layers(dir.path(), initial_format, true)
+            .into_graph_layers(dir.path(), initial_format == GraphLinksFormat::Compressed, true)
             .unwrap();
         assert_eq!(graph1.links.format(), initial_format);
+        let query = random_vector(&mut rng, dim);
         let res1 = search_in_graph(&query, top, &vector_holder, &graph1);
         drop(graph1);
 
@@ -539,8 +503,6 @@             .map(|i| graph_layers.links.links(i as PointOffsetType, 0).len())
             .sum::<usize>();
 
-        eprintln!("total_links_0 = {total_links_0:#?}");
-        eprintln!("num_vectors = {num_vectors:#?}");
         assert!(total_links_0 > 0);
         assert!(total_links_0 as f64 / num_vectors as f64 > M as f64);
 
