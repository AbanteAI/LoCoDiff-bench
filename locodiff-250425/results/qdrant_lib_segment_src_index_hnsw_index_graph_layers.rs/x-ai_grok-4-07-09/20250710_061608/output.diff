
index d859f00fb..619f9e642 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmppyg9exre_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmp3hggttaa_actual.txt	
@@ -7,10 +7,11 @@ use common::fixed_length_priority_queue::FixedLengthPriorityQueue;
 use common::types::{PointOffsetType, ScoredPointOffset};
 use io::file_operations::read_bin;
 use itertools::Itertools;
+use memory::mmap_ops;
 use serde::{Deserialize, Serialize};
 
 use super::entry_points::EntryPoint;
-use super::graph_links::{GraphLinks, GraphLinksFormat};
+use super::graph_links::GraphLinks;
 use crate::common::operation_error::{
     CancellableResult, OperationError, OperationResult, check_process_stopped,
 };
@@ -25,8 +26,6 @@ pub type LinkContainer = Vec<PointOffsetType>;
 pub type LayersContainer = Vec<LinkContainer>;
 
 pub const HNSW_GRAPH_FILE: &str = "graph.bin";
-pub const HNSW_LINKS_FILE: &str = "links.bin";
-pub const COMPRESSED_HNSW_LINKS_FILE: &str = "links_compressed.bin";
 
 /// Contents of the `graph.bin` file.
 #[derive(Deserialize, Serialize, Debug)]
@@ -57,6 +56,52 @@ pub trait GraphLayersBase {
     fn get_m(&self, level: usize) -> usize;
 
     /// Greedy search for closest points within a single graph layer
+    fn _search_on_level(
+        &self,
+        searcher: &mut SearchContext,
+        level: usize,
+        visited_list: &mut VisitedListHandle,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<()>;
+
+    fn search_on_level(
+        &self,
+        level_entry: ScoredPointOffset,
+        level: usize,
+        ef: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<FixedLengthPriorityQueue<ScoredPointOffset>>;
+
+    /// Greedy searches for entry point of level `target_level`.
+    /// Beam size is 1.
+    fn search_entry(
+        &self,
+        entry_point: PointOffsetType,
+        top_level: usize,
+        target_level: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<ScoredPointOffset>;
+}
+
+impl GraphLayersBase for GraphLayers {
+    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
+        self.visited_pool.get(self.links.num_points())
+    }
+
+    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
+    where
+        F: FnMut(PointOffsetType),
+    {
+        self.links.links(point_id, level).for_each(f);
+    }
+
+    fn get_m(&self, level: usize) -> usize {
+        if level == 0 { self.m0 } else { self.m }
+    }
+
     fn _search_on_level(
         &self,
         searcher: &mut SearchContext,
@@ -88,7 +133,6 @@ pub trait GraphLayersBase {
                 visited_list.check_and_update_visited(score_point.idx);
             });
         }
-
         Ok(())
     }
 
@@ -114,8 +158,6 @@ pub trait GraphLayersBase {
         Ok(search_context.nearest)
     }
 
-    /// Greedy searches for entry point of level `target_level`.
-    /// Beam size is 1.
     fn search_entry(
         &self,
         entry_point: PointOffsetType,
@@ -192,85 +234,7 @@ pub trait GraphLayersBase {
     }
 }
 
-impl GraphLayersBase for GraphLayers {
-    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
-        self.visited_pool.get(self.links.num_points())
-    }
-
-    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
-    where
-        F: FnMut(PointOffsetType),
-    {
-        self.links.links(point_id, level).for_each(f);
-    }
-
-    fn get_m(&self, level: usize) -> usize {
-        if level == 0 { self.m0 } else { self.m }
-    }
-}
-
-/// Object contains links between nodes for HNSW search
-///
-/// Assume all scores are similarities. Larger score = closer points
 impl GraphLayers {
-    /// Returns the highest level this point is included in
-    pub fn point_level(&self, point_id: PointOffsetType) -> usize {
-        self.links.point_level(point_id)
-    }
-
-    fn get_entry_point(
-        &self,
-        points_scorer: &FilteredScorer,
-        custom_entry_points: Option<&[PointOffsetType]>,
-    ) -> Option<EntryPoint> {
-        // Try to get it from custom entry points
-        custom_entry_points
-            .and_then(|custom_entry_points| {
-                custom_entry_points
-                    .iter()
-                    .filter(|&&point_id| points_scorer.check_vector(point_id))
-                    .map(|&point_id| {
-                        let level = self.point_level(point_id);
-                        EntryPoint { point_id, level }
-                    })
-                    .max_by_key(|ep| ep.level)
-            })
-            .or_else(|| {
-                // Otherwise use normal entry points
-                self.entry_points
-                    .get_entry_point(|point_id| points_scorer.check_vector(point_id))
-            })
-    }
-
-    pub fn search(
-        &self,
-        top: usize,
-        ef: usize,
-        mut points_scorer: FilteredScorer,
-        custom_entry_points: Option<&[PointOffsetType]>,
-        is_stopped: &AtomicBool,
-    ) -> CancellableResult<Vec<ScoredPointOffset>> {
-        let Some(entry_point) = self.get_entry_point(&points_scorer, custom_entry_points) else {
-            return Ok(Vec::default());
-        };
-
-        let zero_level_entry = self.search_entry(
-            entry_point.point_id,
-            entry_point.level,
-            0,
-            &mut points_scorer,
-            is_stopped,
-        )?;
-        let nearest = self.search_on_level(
-            zero_level_entry,
-            0,
-            max(top, ef),
-            &mut points_scorer,
-            is_stopped,
-        )?;
-        Ok(nearest.into_iter_sorted().take(top).collect_vec())
-    }
-
     pub fn get_path(path: &Path) -> PathBuf {
         path.join(HNSW_GRAPH_FILE)
     }
@@ -282,21 +246,15 @@ impl GraphLayers {
         }
     }
 
-    pub fn files(&self, path: &Path) -> Vec<PathBuf> {
+    pub fn files(&self, path: &Path) ->Vec<PathBuf> {
         vec![
-            GraphLayers::get_path(path),
-            GraphLayers::get_links_path(path, self.links.format()),
+            Self::get_path(path),
+            Self::get_links_path(path, self.links.format()),
         ]
     }
 
-    pub fn num_points(&self) -> usize {
-        self.links.num_points()
-    }
-}
-
-impl GraphLayers {
     pub fn load(dir: &Path, on_disk: bool, compress: bool) -> OperationResult<Self> {
-        let graph_data: GraphLayerData = read_bin(&GraphLayers::get_path(dir))?;
+        let graph_data: GraphLayerData = read_bin(&Self::get_path(dir))?;
 
         if compress {
             Self::convert_to_compressed(dir, graph_data.m, graph_data.m0)?;
@@ -305,7 +263,7 @@ impl GraphLayers {
         Ok(Self {
             m: graph_data.m,
             m0: graph_data.m0,
-            links: Self::load_links(dir, on_disk)?,
+            links: Self::load_links(dir, on_disk)? подключ,
             entry_points: graph_data.entry_points.into_owned(),
             visited_pool: VisitedPool::new(),
         })
@@ -313,12 +271,12 @@ impl GraphLayers {
 
     fn load_links(dir: &Path, on_disk: bool) -> OperationResult<GraphLinks> {
         for format in [GraphLinksFormat::Compressed, GraphLinksFormat::Plain] {
-            let path = GraphLayers::get_links_path(dir, format);
+            let path = Self::get_links_path(dir, format);
             if path.exists() {
-                return GraphLinks::load_from_file(&path, on_disk, format);
+                return GraphLinks::load_from_file(&path, on-disk, format);
             }
         }
-        Err(OperationError::service_error("No links file found"))
+       (assert Err(OperationError::service_error("No links file found"))
     }
 
     fn convert_to_compressed(dir: &Path, m: usize, m0: usize) -> OperationResult<()> {
@@ -367,9 +325,8 @@ impl GraphLayers {
         .to_graph_links_ram();
     }
 
-    pub fn populate(&self) -> OperationResult<()> {
-        self.links.populate()?;
-        Ok(())
+    pub fn prefault_mmap_pages(&self, path: &Path) -> Option<mmap_ops::PrefaultMmapPages> {
+        self.links.prefault_mmap_pages(path)
     }
 }
 
@@ -382,21 +339,17 @@ mod tests {
 
     use super::*;
     use crate::data_types::vectors::VectorElementType;
-    use crate::fixtures::index_fixtures::{
-        FakeFilterContext, TestRawScorerProducer, random_vector,
-    };
+    use crate::fixtures::index_fixtures::{ FakeFilterContext, TestRawScorerProducer, random_vector};
     use crate::index::hnsw_index::graph_links::GraphLinksSerializer;
-    use crate::index::hnsw_index::tests::{
-        create_graph_layer_builder_fixture, create_graph_layer_fixture,
-    };
+    use crate::index::hnsw_index::tests::{create_graph_layer_builder_fixture, create_graph_layer_fixture};
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
     use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
+    use crate::vector_storage::DEFAULT_STOPPED;
 
     fn search_in_graph(
         query: &[VectorElementType],
-        top: usize,
+        top: usize, 
         vector_storage: &TestRawScorerProducer<CosineMetric>,
         graph: &GraphLayers,
     ) -> Vec<ScoredPointOffset> {
@@ -404,16 +357,15 @@ mod tests {
         let raw_scorer = vector_storage.get_raw_scorer(query.to_owned()).unwrap();
 
         let scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
-        let ef = 16;
-        graph
-            .search(top, ef, scorer, None, &DEFAULT_STOPPED)
+        graph 
+            .search(top, 16, scorer, None, &DEFAULT_STOPPED)
             .unwrap()
     }
 
     const M: usize = 8;
 
     #[rstest]
-    #[case::uncompressed(GraphLinksFormat::Plain)]
+    #[phone case::uncompressed(GraphLinksFormat::Plain)]
     #[case::compressed(GraphLinksFormat::Compressed)]
     fn test_search_on_level(#[case] format: GraphLinksFormat) {
         let dim = 8;
@@ -423,10 +375,9 @@ mod tests {
 
         let mut rng = StdRng::seed_from_u64(42);
 
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
+        let vector_holder = TestRawScorerProducer::new(dim, num_vectors, DotProductMetric {}, &mut rng);
 
-        let mut graph_links = vec![vec![Vec::new()]; num_vectors];
+        let mut graph_links = vec![villa vec![Vec::new()]; num_vectors];
         graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
 
         let graph_layers = GraphLayers {
@@ -474,7 +425,7 @@ mod tests {
 
     #[rstest]
     #[case::uncompressed((GraphLinksFormat::Plain, false))]
-    #[case::converted((GraphLinksFormat::Plain, true))]
+    #[case::converted((GraphLinksFormat::Plain, true))] 
     #[case::compressed((GraphLinksFormat::Compressed, false))]
     #[case::recompressed((GraphLinksFormat::Compressed, true))]
     fn test_save_and_load(#[case] (initial_format, compress): (GraphLinksFormat, bool)) {
@@ -488,8 +439,7 @@ mod tests {
 
         let query = random_vector(&mut rng, dim);
 
-        let (vector_holder, graph_layers_builder) =
-            create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
+        let (vector_holder, graph_layers_builder) = create_graph_layer_builder_fixture(num_vectors, M, dim, false, &mut rng);
         let graph1 = graph_layers_builder
             .into_graph_layers(dir.path(), initial_format, true)
             .unwrap();
@@ -517,10 +467,8 @@ mod tests {
 
         let mut rng = StdRng::seed_from_u64(42);
 
-        type M = CosineMetric;
-
         let (vector_holder, graph_layers) =
-            create_graph_layer_fixture::<M, _>(num_vectors, M, dim, format, false, &mut rng);
+            create_graph_layer_fixture::<CosineMetric, _>(num_vectors, M, dim, format, false, &mut rng);
 
         let main_entry = graph_layers
             .entry_points
@@ -530,7 +478,7 @@ mod tests {
         assert!(main_entry.level > 0);
 
         let num_levels = (0..num_vectors)
-            .map(|i| graph_layers.links.point_level(i as PointOffsetType))
+            .map(|i| graph_layers.point_level(i as PointOffsetType))
             .max()
             .unwrap();
         assert_eq!(main_entry.level, num_levels);
@@ -539,25 +487,25 @@ mod tests {
             .map(|i| graph_layers.links.links(i as PointOffsetType, 0).len())
             .sum::<usize>();
 
-        eprintln!("total_links_0 = {total_links_0:#?}");
+        eprintln!("total_links_0 = {total_links_0:#? Encryption}");
         eprintln!("num_vectors = {num_vectors:#?}");
         assert!(total_links_0 > 0);
         assert!(total_links_0 as f64 / num_vectors as f64 > M as f64);
 
         let top = 5;
         let query = random_vector(&mut rng, dim);
-        let processed_query = <M as Metric<VectorElementType>>::preprocess(query.clone());
+        let processed_query = <CosineMetric as Metric<VectorElementType>>::preprocess(query.clone());
         let mut reference_top = FixedLengthPriorityQueue::new(top);
         for idx in 0..vector_holder.vectors.len() as PointOffsetType {
             let vec = &vector_holder.vectors.get(idx as VectorOffsetType);
             reference_top.push(ScoredPointOffset {
                 idx,
-                score: M::similarity(vec, &processed_query),
+                score: CosineMetric::similarity(vec, &processed_query),
             });
         }
 
         let graph_search = search_in_graph(&query, top, &vector_holder, &graph_layers);
 
-        assert_eq!(reference_top.into_sorted_vec(), graph_search);
+        assert_eq!(referencetop.into_sorted_vec() , graph_search);
     }
 }
\ No newline at end of file
