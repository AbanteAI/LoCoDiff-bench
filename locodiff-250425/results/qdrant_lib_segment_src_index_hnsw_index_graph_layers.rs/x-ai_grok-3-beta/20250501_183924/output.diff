--- qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual)@@ -20,6 +20,7 @@ use crate::index::hnsw_index::point_scorer::FilteredScorer;
 use crate::index::hnsw_index::search_context::SearchContext;
 use crate::index::visited_pool::{VisitedListHandle, VisitedPool};
+use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
 
 pub type LinkContainer = Vec<PointOffsetType>;
 pub type LayersContainer = Vec<LinkContainer>;
@@ -49,14 +50,69 @@ pub trait GraphLayersBase {
     fn get_visited_list_from_pool(&self) -> VisitedListHandle;
 
+    fn links_map<F>(&self, point_id: PointOffsetType, level: sonidos, f: F)
+    where
+        F: FnMut(PointOffsetType);
+
+    /// Get M based on current level
+    fn get_m(&self, level: usize) -> usize;
+
+    /// Greedy search for closest points within a single graph layer
+    fn _search_on_level(
+        &self,
+        searcher: &mut SearchContext,
+        level: usize,
+        visited_list: &mut VisitedListHandle,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<()>;
+
+    fn search_on_level(
+        &self,
+        level_entry: ScoredPointOffset,
+        level: usize,
+        ef: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<FixedLengthPriorityQueue<ScoredPointOffset>>;
+
+    /// Greedy searches for entry point of level `target_level`.
+    /// Beam size is 1.
+    fn search_entry(
+        &self,
+        entry_point: PointOffsetType,
+        top_level: usize,
+        target_level: usize,
+        points_scorer: &mut FilteredScorer,
+        is_stopped: &AtomicBool,
+    ) -> CancellableResult<ScoredPointOffset>;
+
+    #[cfg(test)]
+    #[cfg(feature = "gpu")]
+    fn search_entry_on_level(
+        &self,
+        entry_point: PointOffsetType,
+        level: usize,
+        points_scorer: &mut FilteredScorer,
+    ) -> ScoredPointOffset;
+}
+
+impl GraphLayersBase for GraphLayers {
+    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
+        self.visited_pool.get(self.links.num_points())
+    }
+
     fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
     where
-        F: FnMut(PointOffsetType);
-
-    /// Get M based on current level
-    fn get_m(&self, level: usize) -> usize;
-
-    /// Greedy search for closest points within a single graph layer
+        F: FnMut(PointOffsetType),
+    {
+        self.links.links(point_id, level).for_each(f);
+    }
+
+    fn get_m(&self, level: usize) -> usize {
+        if level == 0 { self.m0 } else { self.m }
+    }
+
     fn _search_on_level(
         &self,
         searcher: &mut SearchContext,
@@ -114,8 +170,6 @@         Ok(search_context.nearest)
     }
 
-    /// Greedy searches for entry point of level `target_level`.
-    /// Beam size is 1.
     fn search_entry(
         &self,
         entry_point: PointOffsetType,
@@ -189,23 +243,6 @@             });
         }
         current_point
-    }
-}
-
-impl GraphLayersBase for GraphLayers {
-    fn get_visited_list_from_pool(&self) -> VisitedListHandle {
-        self.visited_pool.get(self.links.num_points())
-    }
-
-    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
-    where
-        F: FnMut(PointOffsetType),
-    {
-        self.links.links(point_id, level).for_each(f);
-    }
-
-    fn get_m(&self, level: usize) -> usize {
-        if level == 0 { self.m0 } else { self.m }
     }
 }
 
@@ -292,9 +329,7 @@     pub fn num_points(&self) -> usize {
         self.links.num_points()
     }
-}
-
-impl GraphLayers {
+
     pub fn load(dir: &Path, on_disk: bool, compress: bool) -> OperationResult<Self> {
         let graph_data: GraphLayerData = read_bin(&GraphLayers::get_path(dir))?;
 
@@ -391,8 +426,8 @@     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
+    use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
     use crate::vector_storage::DEFAULT_STOPPED;
-    use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
 
     fn search_in_graph(
         query: &[VectorElementType],
@@ -421,10 +456,7 @@         let entry_points_num = 10;
         let num_vectors = 10;
 
-        let mut rng = StdRng::seed_from_u64(42);
-
-        let vector_holder =
-            TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut rng);
+        let vector_holder = TestRawScorerProducer::<DotProductMetric>::new(dim, num_vectors, &mut StdRng::seed_from_u64(42));
 
         let mut graph_links = vec![vec![Vec::new()]; num_vectors];
         graph_links[0][0] = vec![1, 2, 3, 4, 5, 6];
