
index d859f00fb..cf4699c4c 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_expectedoutput.txt (expected):tmp/tmp5z85qntj_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_layers.rs_extracted.txt (actual):tmp/tmpbo5o5plk_actual.txt	
@@ -83,10 +83,13 @@ pub trait GraphLayersBase {
             });
 
             let scores = points_scorer.score_points(&mut points_ids, limit);
-            scores.iter().copied().for_each(|score_point| {
-                searcher.process_candidate(score_point);
-                visited_list.check_and_update_visited(score_point.idx);
-            });
+            scores
+                .iter()
+                .copied()
+                .for_each(|score_point| {
+                    searcher.process_candidate(score_point);
+                    visited_list.check_and_update_visited(score_point.idx);
+                });
         }
 
         Ok(())
@@ -197,11 +200,11 @@ impl GraphLayersBase for GraphLayers {
         self.visited_pool.get(self.links.num_points())
     }
 
-    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, f: F)
+    fn links_map<F>(&self, point_id: PointOffsetType, level: usize, mut f: F)
     where
         F: FnMut(PointOffsetType),
     {
-        self.links.links(point_id, level).for_each(f);
+        self.links.links(point_id, level).for_each(&mut f);
     }
 
     fn get_m(&self, level: usize) -> usize {
@@ -375,8 +378,8 @@ impl GraphLayers {
 
 #[cfg(test)]
 mod tests {
-    use rand::SeedableRng;
     use rand::rngs::StdRng;
+    use rand::SeedableRng;
     use rstest::rstest;
     use tempfile::Builder;
 
@@ -391,8 +394,8 @@ mod tests {
     };
     use crate::spaces::metric::Metric;
     use crate::spaces::simple::{CosineMetric, DotProductMetric};
-    use crate::vector_storage::DEFAULT_STOPPED;
     use crate::vector_storage::chunked_vector_storage::VectorOffsetType;
+    use crate::vector_storage::DEFAULT_STOPPED;
 
     fn search_in_graph(
         query: &[VectorElementType],
@@ -441,10 +444,7 @@ mod tests {
         let linking_idx: PointOffsetType = 7;
 
         let fake_filter_context = FakeFilterContext {};
-        let added_vector = vector_holder
-            .vectors
-            .get(linking_idx as VectorOffsetType)
-            .to_vec();
+        let added_vector = vector_holder.vectors.get(linking_idx).to_vec();
         let raw_scorer = vector_holder.get_raw_scorer(added_vector).unwrap();
         let mut scorer = FilteredScorer::new(raw_scorer.as_ref(), Some(&fake_filter_context));
 
