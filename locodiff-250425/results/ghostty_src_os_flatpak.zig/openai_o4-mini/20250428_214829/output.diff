--- ghostty_src_os_flatpak.zig_expectedoutput.txt (expected)+++ ghostty_src_os_flatpak.zig_extracted.txt (actual)@@ -7,26 +7,12 @@ 
 const log = std.log.scoped(.flatpak);
 
-/// Returns true if we're running in a Flatpak environment.
 pub fn isFlatpak() bool {
     // If we're not on Linux then we'll make this comptime false.
     if (comptime builtin.os.tag != .linux) return false;
     return if (std.fs.accessAbsolute("/.flatpak-info", .{})) true else |_| false;
 }
 
-/// A struct to help execute commands on the host via the
-/// org.freedesktop.Flatpak.Development DBus module. This uses GIO/GLib
-/// under the hood.
-///
-/// This always spawns its own thread and maintains its own GLib event loop.
-/// This makes it easy for the command to behave synchronously similar to
-/// std.process.Child.
-///
-/// There are lots of chances for low-hanging improvements here (automatic
-/// pipes, /dev/null, etc.) but this was purpose built for my needs so
-/// it doesn't have all of those.
-///
-/// Requires GIO, GLib to be available and linked.
 pub const FlatpakHostCommand = struct {
     const fd_t = posix.fd_t;
     const EnvMap = std.process.EnvMap;
@@ -59,15 +45,13 @@     state_mutex: std.Thread.Mutex = .{},
     state_cv: std.Thread.Condition = .{},
 
-    /// State the process is in. This can't be inspected directly, you
+    /// State the process is in. This can't be inspected directly; you
     /// must use getters on the struct to get access.
     const State = union(enum) {
         /// Initial state
         init: void,
 
         /// Error starting. The error message is only available via logs.
-        /// (This isn't a fundamental limitation, just didn't need the
-        /// error message yet)
         err: void,
 
         /// Process started with the given pid on the host.
@@ -124,28 +108,6 @@             .started => |v| v.pid,
             .exited => |v| v.pid,
         };
-    }
-
-    /// Wait for the process to end and return the exit status. This
-    /// can only be called ONCE. Once this returns, the state is reset.
-    pub fn wait(self: *FlatpakHostCommand) !u8 {
-        self.state_mutex.lock();
-        defer self.state_mutex.unlock();
-
-        while (true) {
-            switch (self.state) {
-                .init => return Error.FlatpakMustBeStarted,
-                .err => return Error.FlatpakSpawnFail,
-                .started => {},
-                .exited => |v| {
-                    self.state = .{ .init = {} };
-                    self.state_cv.broadcast();
-                    return v.status;
-                },
-            }
-
-            self.state_cv.wait(&self.state_mutex);
-        }
     }
 
     /// Wait for the process to end asynchronously via libxev. This
@@ -179,7 +141,7 @@                 }
             }).callback,
             .userdata = userdata,
-            .timer = xev.Timer.init() catch unreachable, // not great, but xev timer can't fail atm
+            .timer = xev.Timer.init() catch unreachable,
         };
 
         switch (self.state) {
@@ -297,11 +259,6 @@         c.g_main_loop_run(loop);
     }
 
-    /// Start the command. This will start the host command and set the
-    /// pid field on success. This will not wait for completion.
-    ///
-    /// Once this is called, the self pointer MUST remain stable. This
-    /// requirement is due to using GLib under the covers with callbacks.
     fn start(
         self: *FlatpakHostCommand,
         alloc: Allocator,
@@ -356,9 +313,7 @@         }
         args[args.len - 1] = null;
 
-        // Get the cwd in case we don't have ours set. A small optimization
-        // would be to do this only if we need it but this isn't a
-        // common code path.
+        // Get the cwd in case we don't have ours set.
         const g_cwd = c.g_get_current_dir();
         defer c.g_free(g_cwd);
 
@@ -371,7 +326,7 @@             c.g_variant_builder_end(env_builder),
             @as(c_int, 0),
         );
-        _ = c.g_variant_ref_sink(params); // take ownership
+        _ = c.g_variant_ref_sink(params);
         defer c.g_variant_unref(params);
 
         // Subscribe to exit notifications
@@ -416,19 +371,17 @@             pid,
             subscription_id,
         });
-
         self.updateState(.{
             .started = .{
                 .pid = pid,
+                .loop_xev = null,
+                .completion = null,
                 .subscription = subscription_id,
                 .loop = loop,
-                .completion = null,
-                .loop_xev = null,
             },
         });
     }
 
-    /// Helper to update the state and notify waiters via the cv.
     fn updateState(self: *FlatpakHostCommand, state: State) void {
         self.state_mutex.lock();
         defer self.state_mutex.unlock();
@@ -436,7 +389,7 @@         self.state = state;
     }
 
-    fn onExit(
+    extern "C" fn onExit(
         bus: ?*c.GDBusConnection,
         _: [*c]const u8,
         _: [*c]const u8,
