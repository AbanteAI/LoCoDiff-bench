
index f77a8d50..1d6cc083 100644
--- a/ghostty_src_os_flatpak.zig_expectedoutput.txt (expected):tmp/tmptj0o8y0q_expected.txt	
+++ b/ghostty_src_os_flatpak.zig_extracted.txt (actual):tmp/tmp3cdio2rq_actual.txt	
@@ -104,6 +104,17 @@ pub const FlatpakHostCommand = struct {
 
     pub const WaitError = xev.Timer.RunError || Error;
 
+    /// Execute the command and wait for it to finish. This will automatically
+    /// read all the data from the provided stdout/stderr fds and return them
+    /// in the result.
+    ///
+    /// This runs the exec in a dedicated thread with a dedicated GLib
+    /// event loop so that it can run synchronously.
+    pub fn exec(self: *FlatpakHostCommand, alloc: Allocator) !void {
+        const thread = try std.Thread.spawn(.{}, threadMain, .{ self, alloc });
+        thread.join();
+    }
+
     /// Spawn the command. This will start the host command. On return,
     /// the pid will be available. This must only be called with the
     /// state in "init".
@@ -203,7 +214,7 @@ pub const FlatpakHostCommand = struct {
             completion.userdata,
             (struct {
                 fn callback(
-                    ud: ?*anyopaque,
+                    ud_: ?*anyopaque,
                     l_inner: *xev.Loop,
                     c_inner: *xev.Completion,
                     r: xev.Timer.RunError!void,
@@ -212,7 +223,7 @@ pub const FlatpakHostCommand = struct {
                     defer if (c_outer.timer) |*t| t.deinit();
 
                     const result = if (r) |_| c_outer.result.? else |err| err;
-                    c_outer.callback(ud, l_inner, c_outer, result);
+                    c_outer.callback(ud_, l_inner, c_outer, result);
                     return .disarm;
                 }
             }).callback,
@@ -249,7 +260,7 @@ pub const FlatpakHostCommand = struct {
                 "(uub)",
                 pid,
                 sig,
-                @as(c_int, @intCast(@intFromBool(pg))),
+                @as(c_int, @intFromBool(pg)),
             ),
             c.G_VARIANT_TYPE("()"),
             c.G_DBUS_CALL_FLAGS_NONE,
@@ -416,7 +427,6 @@ pub const FlatpakHostCommand = struct {
             pid,
             subscription_id,
         });
-
         self.updateState(.{
             .started = .{
                 .pid = pid,
@@ -428,7 +438,6 @@ pub const FlatpakHostCommand = struct {
         });
     }
 
-    /// Helper to update the state and notify waiters via the cv.
     fn updateState(self: *FlatpakHostCommand, state: State) void {
         self.state_mutex.lock();
         defer self.state_mutex.unlock();
@@ -477,7 +486,7 @@ pub const FlatpakHostCommand = struct {
                     fn callback(
                         ud_inner: ?*anyopaque,
                         l_inner: *xev.Loop,
-                        c_inner: *xev.Completion,
+                        c_inner: *Completion,
                         r: xev.Timer.RunError!void,
                     ) xev.CallbackAction {
                         const c_outer: *Completion = @fieldParentPtr("c_xev", c_inner);
