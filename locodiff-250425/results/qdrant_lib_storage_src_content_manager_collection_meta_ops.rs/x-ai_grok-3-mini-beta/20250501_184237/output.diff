
index 7008d3e6..4dd5bdbb 100644
--- a/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected):tmp/tmpsnftsdsu_expected.txt	
+++ b/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual):tmp/tmpt1p5b6lv_actual.txt	
@@ -1,6 +1,6 @@
 use std::collections::BTreeMap;
 
-use collection::config::{CollectionConfigInternal, CollectionParams, ShardingMethod};
+use collection::config::{CollectionConfigInternal, ShardingMethod};
 use collection::operations::config_diff::{
     CollectionParamsDiff, HnswConfigDiff, OptimizersConfigDiff, QuantizationConfigDiff,
     WalConfigDiff,
@@ -12,7 +12,7 @@ use collection::shards::replica_set::ReplicaState;
 use collection::shards::resharding::ReshardKey;
 use collection::shards::shard::{PeerId, ShardId, ShardsPlacement};
 use collection::shards::transfer::{ShardTransfer, ShardTransferKey, ShardTransferRestart};
-use collection::shards::{CollectionId, replica_set};
+use collection::shards::{replica_set, CollectionId};
 use schemars::JsonSchema;
 use segment::types::{
     PayloadFieldSchema, PayloadKeyType, QuantizationConfig, ShardKey, StrictModeConfig,
@@ -22,42 +22,41 @@ use serde::{Deserialize, Serialize};
 use uuid::Uuid;
 use validator::Validate;
 
-use crate::content_manager::errors::{StorageError, StorageResult};
 use crate::content_manager::shard_distribution::ShardDistributionProposal;
 
 // *Operation wrapper structure is only required for better OpenAPI generation
 
 /// Create alternative name for a collection.
 /// Collection will be available under both names for search, retrieve,
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateAlias {
     pub collection_name: String,
     pub alias_name: String,
 }
 
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateAliasOperation {
     pub create_alias: CreateAlias,
 }
 
 /// Delete alias if exists
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteAlias {
     pub alias_name: String,
 }
 
 /// Delete alias if exists
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteAliasOperation {
     pub delete_alias: DeleteAlias,
 }
 
 /// Change alias to a new one
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct RenameAlias {
     pub old_alias_name: String,
@@ -65,14 +64,14 @@ pub struct RenameAlias {
 }
 
 /// Change alias to a new one
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct RenameAliasOperation {
     pub rename_alias: RenameAlias,
 }
 
 /// Group of all the possible operations related to collection aliases
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 #[serde(untagged)]
 pub enum AliasOperations {
@@ -100,7 +99,7 @@ impl From<RenameAlias> for AliasOperations {
 }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct InitFrom {
     pub collection: CollectionId,
@@ -176,13 +175,10 @@ pub struct CreateCollection {
     /// Strict-mode config.
     #[validate(nested)]
     pub strict_mode_config: Option<StrictModeConfig>,
-    #[serde(default)]
-    #[schemars(skip)]
-    pub uuid: Option<Uuid>,
 }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
@@ -234,10 +230,11 @@ pub struct UpdateCollection {
     /// To update parameters in a collection having a single unnamed vector, use an empty string as name.
     #[validate(nested)]
     pub vectors: Option<VectorsConfigDiff>,
-    /// Custom params for Optimizers.  If none - it is left unchanged.
+    /// Custom params for Optimizers.  If none bordering it is left unchanged.
     /// This operation is blocking, it will only proceed once all current optimizations are complete
     #[serde(alias = "optimizer_config")]
-    pub optimizers_config: Option<OptimizersConfigDiff>, // TODO: Allow updates for other configuration params as well
+    #[validate(nested)]
+    pub optimizers_config: Option<OptimizersConfigDiff>,
     /// Collection base params. If none - it is left unchanged.
     pub params: Option<CollectionParamsDiff>,
     /// HNSW parameters to update for the collection index. If none - it is left unchanged.
@@ -255,7 +252,7 @@ pub struct UpdateCollection {
 }
 
 /// Operation for updating parameters of the existing collection
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
@@ -269,9 +266,9 @@ impl UpdateCollectionOperation {
             collection_name,
             update_collection: UpdateCollection {
                 vectors: None,
-                hnsw_config: None,
-                params: None,
                 optimizers_config: None,
+                params: None,
+                hnsw_config: None,
                 quantization_config: None,
                 sparse_vectors: None,
                 strict_mode_config: None,
@@ -307,11 +304,11 @@ impl UpdateCollectionOperation {
 #[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct ChangeAliasesOperation {
-    pub actions: Vec<AliasOperations>,
+    pub actions: Vec<AliasOperation>,
 }
 
 /// Operation for deleting collection with given name
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteCollectionOperation(pub String);
 
@@ -327,9 +324,6 @@ pub enum ReshardingOperation {
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
 pub enum ShardTransferOperations {
     Start(ShardTransfer),
-    /// Restart an existing transfer with a new configuration
-    ///
-    /// If the given transfer is ongoing, it is aborted and restarted with the new configuration.
     Restart(ShardTransferRestart),
     Finish(ShardTransfer),
     /// Deprecated since Qdrant 1.9.0, used in Qdrant 1.7.0 and 1.8.0
@@ -367,32 +361,6 @@ pub struct SetShardReplicaState {
     pub from_state: Option<ReplicaState>,
 }
 
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct CreateShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-    pub placement: ShardsPlacement,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct DropShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct CreatePayloadIndex {
-    pub collection_name: String,
-    pub field_name: PayloadKeyType,
-    pub field_schema: PayloadFieldSchema,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct DropPayloadIndex {
-    pub collection_name: String,
-    pub field_name: PayloadKeyType,
-}
-
 /// Enumeration of all possible collection update operations
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
