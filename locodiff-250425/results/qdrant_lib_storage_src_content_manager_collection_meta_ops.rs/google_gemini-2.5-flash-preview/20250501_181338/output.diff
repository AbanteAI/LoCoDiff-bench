--- qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected)+++ qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual)@@ -106,7 +106,7 @@     pub collection: CollectionId,
 }
 
-/// Operation for creating new collection and (optionally) specify index params
+/// Operation for creating new collection and (optionably) specify index params
 #[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollection {
@@ -181,11 +181,12 @@     pub uuid: Option<Uuid>,
 }
 
-/// Operation for creating new collection and (optionally) specify index params
+/// Operation for creating new collection and (optionably) specify index params
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
+    #[serde(flatten)]
     pub create_collection: CreateCollection,
     distribution: Option<ShardDistributionProposal>,
 }
@@ -259,6 +260,7 @@ #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
+    #[serde(flatten)]
     pub update_collection: UpdateCollection,
     shard_replica_changes: Option<Vec<replica_set::Change>>,
 }
@@ -300,7 +302,6 @@         }
     }
 }
-
 /// Operation for performing changes of collection aliases.
 /// Alias changes are atomic, meaning that no collection modifications can happen between
 /// alias operations.
@@ -311,7 +312,7 @@ }
 
 /// Operation for deleting collection with given name
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteCollectionOperation(pub String);
 
@@ -338,6 +339,10 @@     ///
     /// Called when the snapshot has successfully been recovered on the remote, brings the transfer
     /// to the next stage.
+    #[deprecated(
+        since = "1.9.0",
+        note = "use `ShardTransferOperations::RecoveryToPartial` instead"
+    )]
     SnapshotRecovered(ShardTransferKey),
     /// Used in `ShardTransferMethod::Snapshot` and `ShardTransferMethod::WalDelta`
     ///
@@ -351,7 +356,7 @@ }
 
 /// Sets the state of shard replica
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub struct SetShardReplicaState {
     pub collection_name: String,
     pub shard_id: ShardId,
