
index 7008d3e6..aa7b7f9f 100644
--- a/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected):tmp/tmpqlovmiud_expected.txt	
+++ b/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual):tmp/tmpuz6uk9fb_actual.txt	
@@ -12,7 +12,7 @@ use collection::shards::replica_set::ReplicaState;
 use collection::shards::resharding::ReshardKey;
 use collection::shards::shard::{PeerId, ShardId, ShardsPlacement};
 use collection::shards::transfer::{ShardTransfer, ShardTransferKey, ShardTransferRestart};
-use collection::shards::{CollectionId, replica_set};
+use collection::shards::{replica_set, CollectionId};
 use schemars::JsonSchema;
 use segment::types::{
     PayloadFieldSchema, PayloadKeyType, QuantizationConfig, ShardKey, StrictModeConfig,
@@ -100,7 +100,7 @@ impl From<RenameAlias> for AliasOperations {
 }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, Validate, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct InitFrom {
     pub collection: CollectionId,
@@ -182,7 +182,7 @@ pub struct CreateCollection {
 }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
@@ -255,7 +255,7 @@ pub struct UpdateCollection {
 }
 
 /// Operation for updating parameters of the existing collection
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
@@ -269,9 +269,9 @@ impl UpdateCollectionOperation {
             collection_name,
             update_collection: UpdateCollection {
                 vectors: None,
-                hnsw_config: None,
-                params: None,
                 optimizers_config: None,
+                params: None,
+                hnsw_config: None,
                 quantization_config: None,
                 sparse_vectors: None,
                 strict_mode_config: None,
@@ -288,10 +288,6 @@ impl UpdateCollectionOperation {
         }
     }
 
-    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
-        self.shard_replica_changes.take()
-    }
-
     pub fn set_shard_replica_changes(&mut self, changes: Vec<replica_set::Change>) {
         if changes.is_empty() {
             self.shard_replica_changes = None;
@@ -299,6 +295,10 @@ impl UpdateCollectionOperation {
             self.shard_replica_changes = Some(changes);
         }
     }
+
+    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
+        self.shard_replica_changes.take()
+    }
 }
 
 /// Operation for performing changes of collection aliases.
@@ -311,7 +311,7 @@ pub struct ChangeAliasesOperation {
 }
 
 /// Operation for deleting collection with given name
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteCollectionOperation(pub String);
 
@@ -351,7 +351,7 @@ pub enum ShardTransferOperations {
 }
 
 /// Sets the state of shard replica
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub struct SetShardReplicaState {
     pub collection_name: String,
     pub shard_id: ShardId,
