--- qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected)+++ qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual)@@ -116,10 +116,8 @@     #[validate(nested)]
     pub vectors: VectorsConfig,
     /// For auto sharding:
-    /// Number of shards in collection.
     ///  - Default is 1 for standalone, otherwise equal to the number of nodes
     ///  - Minimum is 1
-    ///
     /// For custom sharding:
     /// Number of shards in collection per shard group.
     ///  - Default is 1, meaning that each shard key will be mapped to a single shard
@@ -148,7 +146,6 @@     /// If true - point's payload will not be stored in memory.
     /// It will be read from the disk every time it is requested.
     /// This setting saves RAM by (slightly) increasing the response time.
-    /// Note: those payload values that are involved in filtering and are indexed - remain in RAM.
     ///
     /// Default: true
     #[serde(default)]
@@ -181,8 +178,7 @@     pub uuid: Option<Uuid>,
 }
 
-/// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
@@ -254,8 +250,7 @@     pub strict_mode_config: Option<StrictModeConfig>,
 }
 
-/// Operation for updating parameters of the existing collection
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
@@ -269,9 +264,9 @@             collection_name,
             update_collection: UpdateCollection {
                 vectors: None,
+                optimizers_config: None,
+                params: None,
                 hnsw_config: None,
-                params: None,
-                optimizers_config: None,
                 quantization_config: None,
                 sparse_vectors: None,
                 strict_mode_config: None,
@@ -288,10 +283,6 @@         }
     }
 
-    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
-        self.shard_replica_changes.take()
-    }
-
     pub fn set_shard_replica_changes(&mut self, changes: Vec<replica_set::Change>) {
         if changes.is_empty() {
             self.shard_replica_changes = None;
@@ -299,6 +290,10 @@             self.shard_replica_changes = Some(changes);
         }
     }
+
+    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
+        self.shard_replica_changes.take()
+    }
 }
 
 /// Operation for performing changes of collection aliases.
@@ -311,7 +306,7 @@ }
 
 /// Operation for deleting collection with given name
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteCollectionOperation(pub String);
 
@@ -325,6 +320,32 @@ }
 
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+pub struct CreateShardKey {
+    pub collection_name: String,
+    pub shard_key: ShardKey,
+    pub placement: ShardsPlacement,
+}
+
+#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+pub struct DropShardKey {
+    pub collection_name: String,
+    pub shard_key: ShardKey,
+}
+
+#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+pub struct CreatePayloadIndex {
+    pub collection_name: String,
+    pub field_name: PayloadKeyType,
+    pub field_schema: PayloadFieldSchema,
+}
+
+#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+pub struct DropPayloadIndex {
+    pub collection_name: String,
+    pub field_name: PayloadKeyType,
+}
+
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub enum ShardTransferOperations {
     Start(ShardTransfer),
     /// Restart an existing transfer with a new configuration
@@ -351,7 +372,7 @@ }
 
 /// Sets the state of shard replica
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub struct SetShardReplicaState {
     pub collection_name: String,
     pub shard_id: ShardId,
@@ -365,50 +386,6 @@     /// If `from_state` does not match the current state of the replica, then the operation will be dismissed.
     #[serde(default)]
     pub from_state: Option<ReplicaState>,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct CreateShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-    pub placement: ShardsPlacement,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct DropShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct CreatePayloadIndex {
-    pub collection_name: String,
-    pub field_name: PayloadKeyType,
-    pub field_schema: PayloadFieldSchema,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct DropPayloadIndex {
-    pub collection_name: String,
-    pub field_name: PayloadKeyType,
-}
-
-/// Enumeration of all possible collection update operations
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-#[serde(rename_all = "snake_case")]
-pub enum CollectionMetaOperations {
-    CreateCollection(CreateCollectionOperation),
-    UpdateCollection(UpdateCollectionOperation),
-    DeleteCollection(DeleteCollectionOperation),
-    ChangeAliases(ChangeAliasesOperation),
-    Resharding(CollectionId, ReshardingOperation),
-    TransferShard(CollectionId, ShardTransferOperations),
-    SetShardReplicaState(SetShardReplicaState),
-    CreateShardKey(CreateShardKey),
-    DropShardKey(DropShardKey),
-    CreatePayloadIndex(CreatePayloadIndex),
-    DropPayloadIndex(DropPayloadIndex),
-    Nop { token: usize }, // Empty operation
 }
 
 /// Use config of the existing collection to generate a create collection operation
@@ -453,4 +430,22 @@             uuid,
         }
     }
+}
+
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[serde(rename_all = "snake_case")]
+pub enum CollectionMetaOperations {
+    CreateCollection(CreateCollectionOperation),
+    UpdateCollection(UpdateCollectionOperation),
+    DeleteCollection(DeleteCollectionOperation),
+    ChangeAliases(ChangeAliasesOperation),
+    Resharding(CollectionId, ReshardingOperation),
+    TransferShard(CollectionId, ShardTransferOperations),
+    SetShardReplicaState(SetShardReplicaState),
+    CreateAlias(AliasOperations),
+    CreateShardKey(CreateShardKey),
+    DropShardKey(DropShardKey),
+    CreatePayloadIndex(CreatePayloadIndex),
+    DropPayloadIndex(DropPayloadIndex),
+    Nop { token: usize }, // Empty operation
 }