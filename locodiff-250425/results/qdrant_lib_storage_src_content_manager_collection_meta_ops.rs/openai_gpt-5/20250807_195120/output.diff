
index 7008d3e69..11b7a6179 100644
--- a/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected):tmp/tmppwym7l2a_expected.txt	
+++ b/qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual):tmp/tmp3enphtfh_actual.txt	
@@ -182,7 +182,7 @@ pub struct CreateCollection {
 }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
@@ -255,7 +255,7 @@ pub struct UpdateCollection {
 }
 
 /// Operation for updating parameters of the existing collection
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
@@ -283,15 +283,19 @@ impl UpdateCollectionOperation {
     pub fn new(collection_name: String, update_collection: UpdateCollection) -> Self {
         Self {
             collection_name,
-            update_collection,
+            update_collection: UpdateCollection {
+                vectors: update_collection.vectors,
+                hnsw_config: update_collection.hnsw_config,
+                params: update_collection.params,
+                optimizers_config: update_collection.optimizers_config,
+                quantization_config: update_collection.quantization_config,
+                sparse_vectors: update_collection.sparse_vectors,
+                strict_mode_config: update_collection.strict_mode_config,
+            },
             shard_replica_changes: None,
         }
     }
 
-    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
-        self.shard_replica_changes.take()
-    }
-
     pub fn set_shard_replica_changes(&mut self, changes: Vec<replica_set::Change>) {
         if changes.is_empty() {
             self.shard_replica_changes = None;
@@ -299,6 +303,10 @@ impl UpdateCollectionOperation {
             self.shard_replica_changes = Some(changes);
         }
     }
+
+    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
+        self.shard_replica_changes.take()
+    }
 }
 
 /// Operation for performing changes of collection aliases.
@@ -311,7 +319,7 @@ pub struct ChangeAliasesOperation {
 }
 
 /// Operation for deleting collection with given name
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct DeleteCollectionOperation(pub String);
 
@@ -351,7 +359,7 @@ pub enum ShardTransferOperations {
 }
 
 /// Sets the state of shard replica
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub struct SetShardReplicaState {
     pub collection_name: String,
     pub shard_id: ShardId,
