--- qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_expectedoutput.txt (expected)+++ qdrant_lib_storage_src_content_manager_collection_meta_ops.rs_extracted.txt (actual)@@ -9,7 +9,6 @@     SparseVectorParams, SparseVectorsConfig, VectorsConfig, VectorsConfigDiff,
 };
 use collection::shards::replica_set::ReplicaState;
-use collection::shards::resharding::ReshardKey;
 use collection::shards::shard::{PeerId, ShardId, ShardsPlacement};
 use collection::shards::transfer::{ShardTransfer, ShardTransferKey, ShardTransferRestart};
 use collection::shards::{CollectionId, replica_set};
@@ -116,14 +115,11 @@     #[validate(nested)]
     pub vectors: VectorsConfig,
     /// For auto sharding:
-    /// Number of shards in collection.
     ///  - Default is 1 for standalone, otherwise equal to the number of nodes
     ///  - Minimum is 1
-    ///
     /// For custom sharding:
     /// Number of shards in collection per shard group.
     ///  - Default is 1, meaning that each shard key will be mapped to a single shard
-    ///  - Minimum is 1
     #[serde(default)]
     #[validate(range(min = 1))]
     pub shard_number: Option<u32>,
@@ -182,7 +178,7 @@ }
 
 /// Operation for creating new collection and (optionally) specify index params
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct CreateCollectionOperation {
     pub collection_name: String,
@@ -255,7 +251,7 @@ }
 
 /// Operation for updating parameters of the existing collection
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub struct UpdateCollectionOperation {
     pub collection_name: String,
@@ -269,9 +265,9 @@             collection_name,
             update_collection: UpdateCollection {
                 vectors: None,
+                optimizers_config: None,
+                params: None,
                 hnsw_config: None,
-                params: None,
-                optimizers_config: None,
                 quantization_config: None,
                 sparse_vectors: None,
                 strict_mode_config: None,
@@ -288,10 +284,6 @@         }
     }
 
-    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
-        self.shard_replica_changes.take()
-    }
-
     pub fn set_shard_replica_changes(&mut self, changes: Vec<replica_set::Change>) {
         if changes.is_empty() {
             self.shard_replica_changes = None;
@@ -299,6 +291,10 @@             self.shard_replica_changes = Some(changes);
         }
     }
+
+    pub fn take_shard_replica_changes(&mut self) -> Option<Vec<replica_set::Change>> {
+        self.shard_replica_changes.take()
+    }
 }
 
 /// Operation for performing changes of collection aliases.
@@ -311,9 +307,22 @@ }
 
 /// Operation for deleting collection with given name
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
+#[serde(rename_all = "snake_case")]
+pub struct DeleteCollectionOperation(pub String);
+
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-#[serde(rename_all = "snake_case")]
-pub struct DeleteCollectionOperation(pub String);
+pub struct CreateShardKey {
+    pub collection_name: String,
+    pub shard_key: ShardKey,
+    pub placement: ShardsPlacement,
+}
+
+#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+pub struct DropShardKey {
+    pub collection_name: String,
+    pub shard_key: ShardKey,
+}
 
 #[derive(Clone, Debug, Eq, PartialEq, Hash, Deserialize, Serialize)]
 pub enum ReshardingOperation {
@@ -324,7 +333,7 @@     Abort(ReshardKey),
 }
 
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub enum ShardTransferOperations {
     Start(ShardTransfer),
     /// Restart an existing transfer with a new configuration
@@ -351,7 +360,7 @@ }
 
 /// Sets the state of shard replica
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 pub struct SetShardReplicaState {
     pub collection_name: String,
     pub shard_id: ShardId,
@@ -368,19 +377,6 @@ }
 
 #[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct CreateShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-    pub placement: ShardsPlacement,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
-pub struct DropShardKey {
-    pub collection_name: String,
-    pub shard_key: ShardKey,
-}
-
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
 pub struct CreatePayloadIndex {
     pub collection_name: String,
     pub field_name: PayloadKeyType,
@@ -393,8 +389,7 @@     pub field_name: PayloadKeyType,
 }
 
-/// Enumeration of all possible collection update operations
-#[derive(Debug, Deserialize, Serialize, PartialEq, Eq, Hash, Clone)]
+#[derive(Debug, Deserialize, Serialize, JsonSchema, PartialEq, Eq, Hash, Clone)]
 #[serde(rename_all = "snake_case")]
 pub enum CollectionMetaOperations {
     CreateCollection(CreateCollectionOperation),
