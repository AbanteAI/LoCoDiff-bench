--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual)@@ -454,6 +454,32 @@     });
   });
 
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
+          dispatch();
+        }
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
+      );
+    });
+  });
+
   describe('useRef', () => {
     itRenders('basic render', async render => {
       function Counter(props) {
@@ -543,6 +569,38 @@         ['Count: 0', 'invoked on client'], // hydrated render
         // nothing yielded for bad markup
       ]);
+    });
+  });
+
+  describe('useInsertionEffect', () => {
+    it('should warn when invoked during render', async () => {
+      function Counter() {
+        useInsertionEffect(() => {
+          throw new Error('should not be invoked');
+        });
+
+        return <Text text="Count: 0" />;
+      }
+      const domNode = await serverRender(<Counter />, 1);
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
+    });
+  });
+
+  describe('useLayoutEffect', () => {
+    it('should warn when invoked during render', async () => {
+      function Counter() {
+        useLayoutEffect(() => {
+          throw new Error('should not be invoked');
+        });
+
+        return <Text text="Count: 0" />;
+      }
+      const domNode = await serverRender(<Counter />, 1);
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
     });
   });
 
@@ -621,37 +679,6 @@       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
-  describe('useInsertionEffect', () => {
-    it('should warn when invoked during render', async () => {
-      function Counter() {
-        useInsertionEffect(() => {
-          throw new Error('should not be invoked');
-        });
-
-        return <Text text="Count: 0" />;
-      }
-      const domNode = await serverRender(<Counter />, 1);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
-
-  describe('useLayoutEffect', () => {
-    it('should warn when invoked during render', async () => {
-      function Counter() {
-        useLayoutEffect(() => {
-          throw new Error('should not be invoked');
-        });
-
-        return <Text text="Count: 0" />;
-      }
-      const domNode = await serverRender(<Counter />, 1);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
 
   describe('useContext', () => {
     itThrowsWhenRendering(
@@ -674,32 +701,6 @@         '3. You might have more than one copy of React in the same app\n' +
         'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
     );
-  });
-
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
   });
 
   itRenders(
@@ -809,13 +810,13 @@         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
