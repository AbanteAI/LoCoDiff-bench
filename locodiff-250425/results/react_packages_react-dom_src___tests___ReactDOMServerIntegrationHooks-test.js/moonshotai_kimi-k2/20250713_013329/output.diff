
index 4481b2693..495cf4cc3 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmp7tgchb_b_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmpr9_qcerb_actual.txt	
@@ -424,6 +424,7 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -546,81 +547,6 @@ describe('ReactDOMServerHooks', () => {
     });
   });
 
-  describe('useCallback', () => {
-    itRenders('should not invoke the passed callbacks', async render => {
-      function Counter(props) {
-        useCallback(() => {
-          yieldValue('should not be invoked');
-        });
-        return <Text text={'Count: ' + props.count} />;
-      }
-      const domNode = await render(<Counter count={0} />);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-
-    itRenders('should support render time callbacks', async render => {
-      function Counter(props) {
-        const renderCount = useCallback(increment => {
-          return 'Count: ' + (props.count + increment);
-        });
-        return <Text text={renderCount(3)} />;
-      }
-      const domNode = await render(<Counter count={2} />);
-      expect(clearLog()).toEqual(['Count: 5']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 5');
-    });
-
-    itRenders(
-      'should only change the returned reference when the inputs change',
-      async render => {
-        function CapitalizedText(props) {
-          const [text, setText] = useState(props.text);
-          const [count, setCount] = useState(0);
-          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
-          yieldValue(capitalizeText);
-          if (count < 3) {
-            setCount(count + 1);
-          }
-          if (text === 'hello' && count === 2) {
-            setText('hello, world.');
-          }
-          return <Text text={capitalizeText()} />;
-        }
-
-        const domNode = await render(<CapitalizedText text="hello" />);
-        const [first, second, third, fourth, result] = clearLog();
-        expect(first).toBe(second);
-        expect(second).toBe(third);
-        expect(third).not.toBe(fourth);
-        expect(result).toEqual('HELLO, WORLD.');
-        expect(domNode.tagName).toEqual('SPAN');
-        expect(domNode.textContent).toEqual('HELLO, WORLD.');
-      },
-    );
-  });
-
-  describe('useImperativeHandle', () => {
-    it('should not be invoked on the server', async () => {
-      function Counter(props, ref) {
-        useImperativeHandle(ref, () => {
-          throw new Error('should not be invoked');
-        });
-        return <Text text={props.label + ': ' + ref.current} />;
-      }
-      Counter = forwardRef(Counter);
-      const counter = React.createRef();
-      counter.current = 0;
-      const domNode = await serverRender(
-        <Counter label="Count" ref={counter} />,
-      );
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -676,32 +602,6 @@ describe('ReactDOMServerHooks', () => {
     );
   });
 
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
-  });
-
   itRenders(
     'can use the same context multiple times in the same function',
     async render => {
@@ -885,6 +785,82 @@ describe('ReactDOMServerHooks', () => {
     });
   });
 
+  describe('useCallback', () => {
+    itRenders('should not invoke the passed callbacks', async render => {
+      function Counter(props) {
+        useCallback(() => {
+          yieldValue('should not be invoked');
+        });
+        return <Text text={'Count: ' + props.count} />;
+      }
+      const domNode = await render(<Counter count={0} />);
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
+    });
+
+    itRenders('should support render time callbacks', async render => {
+      function Counter(props) {
+        const renderCount = useCallback(increment => {
+          return 'Count: ' + (props.count + increment);
+        });
+        return <Text text={renderCount(3)} />;
+      }
+      const domNode = await render(<Counter count={2} />);
+      expect(clearLog()).toEqual(['Count: 5']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 5');
+    });
+
+    itRenders(
+      'should only change the returned reference when the inputs change',
+      async render => {
+        function CapitalizedText(props) {
+          const [text, setText] = useState(props.text);
+          const [count, setCount] = useState(0);
+          const capitalizeText = useCallback(() => text.toUpperCase(), [text]);
+          yieldValue(capitalizeText);
+          if (count < 3) {
+            setCount(count + 1);
+          }
+          if (text === 'hello' && count === 2) {
+            setText('hello, world.');
+          }
+          return <Text text={capitalizeText()} />;
+        }
+
+        const domNode = await render(<CapitalizedText text="hello" />);
+        const [first, second, third, fourth, result] = clearLog();
+        expect(first).toBe(second);
+        expect(second).toBe(third);
+        expect(third).not.toBe(fourth);
+        expect(result).toEqual('HELLO, WORLD.');
+        expect(domNode.tagName).toEqual('SPAN');
+        expect(domNode.textContent).toEqual('HELLO, WORLD.');
+      },
+    );
+  });
+
+  describe('useImperativeHandle', () => {
+    it('should not be invoked on the server', async () => {
+      function Counter(props, ref) {
+        useImperativeHandle(ref, () => {
+          throw new Error('should not be invoked');
+        });
+        return <Text text={props.label + ': ' + ref.current} />;
+      }
+      Counter = forwardRef(Counter);
+      const counter = React.createRef();
+      counter.current = 0;
+      const domNode = await serverRender(
+        <Counter label="Count" ref={counter} />,
+      );
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
+    });
+  });
+
   it('renders successfully after a component using hooks throws an error', () => {
     function ThrowingComponent() {
       const [value, dispatch] = useReducer((state, action) => {
@@ -922,4 +898,30 @@ describe('ReactDOMServerHooks', () => {
     );
     expect(container.children[0].textContent).toEqual('0');
   });
+
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
+          dispatch();
+        }
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
+      );
+    });
+  });
 });
\ No newline at end of file
