
index 4481b269..c6af5fc8 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmp3rubem1m_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmpdnxxkm9g_actual.txt	
@@ -424,6 +424,7 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -621,6 +622,7 @@ describe('ReactDOMServerHooks', () => {
       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -676,102 +678,6 @@ describe('ReactDOMServerHooks', () => {
     );
   });
 
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
-  });
-
-  itRenders(
-    'can use the same context multiple times in the same function',
-    async render => {
-      const Context = React.createContext({foo: 0, bar: 0, baz: 0});
-
-      function Provider(props) {
-        return (
-          <Context.Provider
-            value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
-            {props.children}
-          </Context.Provider>
-        );
-      }
-
-      function FooAndBar() {
-        const {foo} = useContext(Context);
-        const {bar} = useContext(Context);
-        return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
-      }
-
-      function Baz() {
-        const {baz} = useContext(Context);
-        return <Text text={'Baz: ' + baz} />;
-      }
-
-      class Indirection extends React.Component {
-        render() {
-          return this.props.children;
-        }
-      }
-
-      function App(props) {
-        return (
-          <div>
-            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
-              <Indirection>
-                <Indirection>
-                  <FooAndBar />
-                </Indirection>
-                <Indirection>
-                  <Baz />
-                </Indirection>
-              </Indirection>
-            </Provider>
-          </div>
-        );
-      }
-
-      const domNode = await render(<App foo={1} bar={3} baz={5} />);
-      expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
-      expect(domNode.childNodes.length).toBe(2);
-      expect(domNode.firstChild.tagName).toEqual('SPAN');
-      expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
-      expect(domNode.lastChild.tagName).toEqual('SPAN');
-      expect(domNode.lastChild.textContent).toEqual('Baz: 5');
-    },
-  );
-
-  describe('useDebugValue', () => {
-    itRenders('is a noop', async render => {
-      function Counter(props) {
-        const debugValue = useDebugValue(123);
-        return <Text text={typeof debugValue} />;
-      }
-
-      const domNode = await render(<Counter />);
-      expect(domNode.textContent).toEqual('undefined');
-    });
-  });
-
   describe('readContext', () => {
     function readContext(Context) {
       const dispatcher =
@@ -782,22 +688,7 @@ describe('ReactDOMServerHooks', () => {
     itRenders(
       'can read the same context multiple times in the same function',
       async render => {
-        const Context = React.createContext(
-          {foo: 0, bar: 0, baz: 0},
-          (a, b) => {
-            let result = 0;
-            if (a.foo !== b.foo) {
-              result |= 0b001;
-            }
-            if (a.bar !== b.bar) {
-              result |= 0b010;
-            }
-            if (a.baz !== b.baz) {
-              result |= 0b100;
-            }
-            return result;
-          },
-        );
+        const Context = React.createContext({foo: 0, bar: 0, baz: 0});
 
         function Provider(props) {
           return (
@@ -809,13 +700,13 @@ describe('ReactDOMServerHooks', () => {
         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
@@ -871,13 +762,7 @@ describe('ReactDOMServerHooks', () => {
         return <Text text={count} />;
       }
 
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+      const domNode1 = await render(<ReadInMemo />, 1);
       expect(domNode1.textContent).toEqual('42');
 
       const domNode2 = await render(<ReadInReducer />, 1);
@@ -885,6 +770,102 @@ describe('ReactDOMServerHooks', () => {
     });
   });
 
+  describe('useDebugValue', () => {
+    itRenders('is a noop', async render => {
+      function Counter(props) {
+        const debugValue = useDebugValue(123);
+        return <Text text={typeof debugValue} />;
+      }
+
+      const domNode = await render(<Counter />);
+      expect(domNode.textContent).toEqual('undefined');
+    });
+  });
+
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
+          dispatch();
+        }
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
+      );
+    });
+  });
+
+  itRenders(
+    'can use the same context multiple times in the same function',
+    async render => {
+      const Context = React.createContext({foo: 0, bar: 0, baz: 0});
+
+      function Provider(props) {
+        return (
+          <Context.Provider
+            value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
+            {props.children}
+          </Context.Provider>
+        );
+      }
+
+      function FooAndBar() {
+        const {foo} = useContext(Context);
+        const {bar} = useContext(Context);
+        return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
+      }
+
+      function Baz() {
+        const {baz} = useContext(Context);
+        return <Text text={'Baz: ' + baz} />;
+      }
+
+      class Indirection extends React.Component {
+        render() {
+          return this.props.children;
+        }
+      }
+
+      function App(props) {
+        return (
+          <div>
+            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
+              <Indirection>
+                <Indirection>
+                  <FooAndBar />
+                </Indirection>
+                <Indirection>
+                  <Baz />
+                </Indirection>
+              </Indirection>
+            </Provider>
+          </div>
+        );
+      }
+
+      const domNode = await render(<App foo={1} bar={3} baz={5} />);
+      expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
+      expect(domNode.childNodes.length).toBe(2);
+      expect(domNode.firstChild.tagName).toEqual('SPAN');
+      expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
+      expect(domNode.lastChild.tagName).toEqual('SPAN');
+      expect(domNode.lastChild.textContent).toEqual('Baz: 5');
+    },
+  );
+
   it('renders successfully after a component using hooks throws an error', () => {
     function ThrowingComponent() {
       const [value, dispatch] = useReducer((state, action) => {
