--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual)@@ -5,10 +5,8 @@  * LICENSE file in the root directory of this source tree.
  *
  * @emails react-core
- * @jest-environment ./scripts/jest/ReactDOMServerIntegrationEnvironment
+ * @jest-environment ./scripts/jest/ReactTestsDOMEnvironment
  */
-
-/* eslint-disable no-func-assign */
 
 'use strict';
 
@@ -34,9 +32,6 @@ let clearLog;
 
 function initModules() {
-  // Reset warning cache.
-  jest.resetModules();
-
   React = require('react');
   ReactDOMClient = require('react-dom/client');
   ReactDOMServer = require('react-dom/server');
@@ -47,10 +42,10 @@   useCallback = React.useCallback;
   useMemo = React.useMemo;
   useRef = React.useRef;
-  useDebugValue = React.useDebugValue;
   useImperativeHandle = React.useImperativeHandle;
   useInsertionEffect = React.useInsertionEffect;
   useLayoutEffect = React.useLayoutEffect;
+  useDebugValue = React.useDebugValue;
   forwardRef = React.forwardRef;
 
   yieldedValues = [];
@@ -61,12 +56,6 @@     const ret = yieldedValues;
     yieldedValues = [];
     return ret;
-  };
-
-  // Make them available to the helpers.
-  return {
-    ReactDOMClient,
-    ReactDOMServer,
   };
 }
 
@@ -415,43 +404,6 @@         expect(domNode.textContent).toEqual('HELLO, WORLD.');
       },
     );
-
-    itRenders('with a warning for useState inside useMemo', async render => {
-      function App() {
-        useMemo(() => {
-          useState();
-          return 0;
-        });
-        return 'hi';
-      }
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
-      expect(domNode.textContent).toEqual('hi');
-    });
-
-    itRenders('with a warning for useRef inside useState', async render => {
-      function App() {
-        const [value] = useState(() => {
-          useRef(0);
-          return 0;
-        });
-        return value;
-      }
-
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
-      expect(domNode.textContent).toEqual('0');
-    });
   });
 
   describe('useRef', () => {
@@ -560,19 +512,6 @@       expect(domNode.textContent).toEqual('Count: 0');
     });
 
-    itRenders('should support render time callbacks', async render => {
-      function Counter(props) {
-        const renderCount = useCallback(increment => {
-          return 'Count: ' + (props.count + increment);
-        });
-        return <Text text={renderCount(3)} />;
-      }
-      const domNode = await render(<Counter count={2} />);
-      expect(clearLog()).toEqual(['Count: 5']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 5');
-    });
-
     itRenders(
       'should only change the returned reference when the inputs change',
       async render => {
@@ -621,6 +560,7 @@       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -674,32 +614,6 @@         '3. You might have more than one copy of React in the same app\n' +
         'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
     );
-  });
-
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
   });
 
   itRenders(
@@ -772,154 +686,29 @@     });
   });
 
-  describe('readContext', () => {
-    function readContext(Context) {
-      const dispatcher =
-        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.H;
-      return dispatcher.readContext(Context);
-    }
-
-    itRenders(
-      'can read the same context multiple times in the same function',
-      async render => {
-        const Context = React.createContext(
-          {foo: 0, bar: 0, baz: 0},
-          (a, b) => {
-            let result = 0;
-            if (a.foo !== b.foo) {
-              result |= 0b001;
-            }
-            if (a.bar !== b.bar) {
-              result |= 0b010;
-            }
-            if (a.baz !== b.baz) {
-              result |= 0b100;
-            }
-            return result;
-          },
-        );
-
-        function Provider(props) {
-          return (
-            <Context.Provider
-              value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
-              {props.children}
-            </Context.Provider>
-          );
-        }
-
-        function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
-          return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
-        }
-
-        function Baz() {
-          const {baz} = readContext(Context, 0b100);
-          return <Text text={'Baz: ' + baz} />;
-        }
-
-        class Indirection extends React.Component {
-          shouldComponentUpdate() {
-            return false;
-          }
-          render() {
-            return this.props.children;
-          }
-        }
-
-        function App(props) {
-          return (
-            <div>
-              <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
-                <Indirection>
-                  <Indirection>
-                    <FooAndBar />
-                  </Indirection>
-                  <Indirection>
-                    <Baz />
-                  </Indirection>
-                </Indirection>
-              </Provider>
-            </div>
-          );
-        }
-
-        const domNode = await render(<App foo={1} bar={3} baz={5} />);
-        expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
-        expect(domNode.childNodes.length).toBe(2);
-        expect(domNode.firstChild.tagName).toEqual('SPAN');
-        expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
-        expect(domNode.lastChild.tagName).toEqual('SPAN');
-        expect(domNode.lastChild.textContent).toEqual('Baz: 5');
-      },
-    );
-
-    itRenders('with a warning inside useMemo and useReducer', async render => {
-      const Context = React.createContext(42);
-
-      function ReadInMemo(props) {
-        const count = React.useMemo(() => readContext(Context), []);
-        return <Text text={count} />;
-      }
-
-      function ReadInReducer(props) {
-        const [count, dispatch] = React.useReducer(() => readContext(Context));
-        if (count !== 42) {
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
           dispatch();
         }
-        return <Text text={count} />;
-      }
-
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
       );
-      expect(domNode1.textContent).toEqual('42');
-
-      const domNode2 = await render(<ReadInReducer />, 1);
-      expect(domNode2.textContent).toEqual('42');
-    });
-  });
-
-  it('renders successfully after a component using hooks throws an error', () => {
-    function ThrowingComponent() {
-      const [value, dispatch] = useReducer((state, action) => {
-        return state + 1;
-      }, 0);
-
-      // throw an error if the count gets too high during the re-render phase
-      if (value >= 3) {
-        throw new Error('Error from ThrowingComponent');
-      } else {
-        // dispatch to trigger a re-render of the component
-        dispatch();
-      }
-
-      return <div>{value}</div>;
-    }
-
-    function NonThrowingComponent() {
-      const [count] = useState(0);
-      return <div>{count}</div>;
-    }
-
-    // First, render a component that will throw an error during a re-render triggered
-    // by a dispatch call.
-    expect(() => ReactDOMServer.renderToString(<ThrowingComponent />)).toThrow(
-      'Error from ThrowingComponent',
-    );
-
-    // Next, assert that we can render a function component using hooks immediately
-    // after an error occurred, which indictates the internal hooks state has been
-    // reset.
-    const container = document.createElement('div');
-    container.innerHTML = ReactDOMServer.renderToString(
-      <NonThrowingComponent />,
-    );
-    expect(container.children[0].textContent).toEqual('0');
-  });
-});+    });
+  });
+}