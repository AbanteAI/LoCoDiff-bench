
index 4481b269..95c7c5b5 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmpegsfqaxw_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmp056q12rq_actual.txt	
@@ -424,16 +424,37 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
+        render === clientRenderOnBadMarkup ? 2 : 1,
       );
       expect(domNode.textContent).toEqual('hi');
     });
 
+    itThrowsWhenRendering(
+      'with a warning for useRef inside useReducer',
+      async render => {
+        function App() {
+          const [value, dispatch] = useReducer((state, action) => {
+            useRef(0);
+            return state + 1;
+          }, 0);
+          if (value === 0) {
+            dispatch();
+          }
+          return value;
+        }
+
+        const domNode = await render(
+          <App />,
+          render === clientRenderOnBadMarkup ? 2 : 1,
+        );
+        expect(domNode.textContent).toEqual('1');
+      },
+      'Rendered more hooks than during the previous render',
+    );
+
     itRenders('with a warning for useRef inside useState', async render => {
       function App() {
         const [value] = useState(() => {
@@ -445,10 +466,7 @@ describe('ReactDOMServerHooks', () => {
 
       const domNode = await render(
         <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
+        render === clientRenderOnBadMarkup ? 2 : 1,
       );
       expect(domNode.textContent).toEqual('0');
     });
@@ -474,6 +492,7 @@ describe('ReactDOMServerHooks', () => {
 
           if (count < 3) {
             const newCount = count + 1;
+
             setCount(newCount);
           }
 
@@ -547,7 +566,7 @@ describe('ReactDOMServerHooks', () => {
   });
 
   describe('useCallback', () => {
-    itRenders('should not invoke the passed callbacks', async render => {
+    itRenders('should ignore callbacks on the server', async render => {
       function Counter(props) {
         useCallback(() => {
           yieldValue('should not be invoked');
@@ -621,6 +640,7 @@ describe('ReactDOMServerHooks', () => {
       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -676,87 +696,66 @@ describe('ReactDOMServerHooks', () => {
     );
   });
 
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
-  });
-
-  itRenders(
+  describe(
     'can use the same context multiple times in the same function',
-    async render => {
-      const Context = React.createContext({foo: 0, bar: 0, baz: 0});
-
-      function Provider(props) {
-        return (
-          <Context.Provider
-            value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
-            {props.children}
-          </Context.Provider>
-        );
-      }
+    () => {
+      itRenders(
+        'can use the same context multiple times in the same function',
+        async render => {
+          const Context = React.createContext({foo: 0, bar: 0, baz: 0});
+
+          function Provider(props) {
+            return (
+              <Context.Provider
+                value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
+                {props.children}
+              </Context.Provider>
+            );
+          }
 
-      function FooAndBar() {
-        const {foo} = useContext(Context);
-        const {bar} = useContext(Context);
-        return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
-      }
+          function FooAndBar() {
+            const {foo} = useContext(Context);
+            const {bar} = useContext(Context);
+            return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
+          }
 
-      function Baz() {
-        const {baz} = useContext(Context);
-        return <Text text={'Baz: ' + baz} />;
-      }
+          function Baz() {
+            const {baz} = useContext(Context);
+            return <Text text={'Baz: ' + baz} />;
+          }
 
-      class Indirection extends React.Component {
-        render() {
-          return this.props.children;
-        }
-      }
+          class Indirection extends React.Component {
+            render() {
+              return this.props.children;
+            }
+          }
 
-      function App(props) {
-        return (
-          <div>
-            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
-              <Indirection>
-                <Indirection>
-                  <FooAndBar />
-                </Indirection>
-                <Indirection>
-                  <Baz />
-                </Indirection>
-              </Indirection>
-            </Provider>
-          </div>
-        );
-      }
+          function App(props) {
+            return (
+              <div>
+                <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
+                  <Indirection>
+                    <Indirection>
+                      <FooAndBar />
+                    </Indirection>
+                    <Indirection>
+                      <Baz />
+                    </Indirection>
+                  </Indirection>
+                </Provider>
+              </div>
+            );
+          }
 
-      const domNode = await render(<App foo={1} bar={3} baz={5} />);
-      expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
-      expect(domNode.childNodes.length).toBe(2);
-      expect(domNode.firstChild.tagName).toEqual('SPAN');
-      expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
-      expect(domNode.lastChild.tagName).toEqual('SPAN');
-      expect(domNode.lastChild.textContent).toEqual('Baz: 5');
+          const domNode = await render(<App foo={1} bar={3} baz={5} />);
+          expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
+          expect(domNode.childNodes.length).toBe(2);
+          expect(domNode.firstChild.tagName).toEqual('SPAN');
+          expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
+          expect(domNode.lastChild.tagName).toEqual('SPAN');
+          expect(domNode.lastChild.textContent).toEqual('Baz: 5');
+        },
+      );
     },
   );
 
@@ -809,13 +808,13 @@ describe('ReactDOMServerHooks', () => {
         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
@@ -873,53 +872,41 @@ describe('ReactDOMServerHooks', () => {
 
       const domNode1 = await render(
         <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
+        render === clientRenderOnBadMarkup ? 2 : 1,
       );
       expect(domNode1.textContent).toEqual('42');
 
-      const domNode2 = await render(<ReadInReducer />, 1);
+      const domNode2 = await render(
+        <ReadInReducer />,
+        render === clientRenderOnBadMarkup ? 2 : 1,
+      );
       expect(domNode2.textContent).toEqual('42');
     });
   });
 
-  it('renders successfully after a component using hooks throws an error', () => {
-    function ThrowingComponent() {
-      const [value, dispatch] = useReducer((state, action) => {
-        return state + 1;
-      }, 0);
-
-      // throw an error if the count gets too high during the re-render phase
-      if (value >= 3) {
-        throw new Error('Error from ThrowingComponent');
-      } else {
-        // dispatch to trigger a re-render of the component
-        dispatch();
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
+          dispatch();
+        }
+        return value;
       }
 
-      return <div>{value}</div>;
-    }
-
-    function NonThrowingComponent() {
-      const [count] = useState(0);
-      return <div>{count}</div>;
-    }
-
-    // First, render a component that will throw an error during a re-render triggered
-    // by a dispatch call.
-    expect(() => ReactDOMServer.renderToString(<ThrowingComponent />)).toThrow(
-      'Error from ThrowingComponent',
-    );
-
-    // Next, assert that we can render a function component using hooks immediately
-    // after an error occurred, which indictates the internal hooks state has been
-    // reset.
-    const container = document.createElement('div');
-    container.innerHTML = ReactDOMServer.renderToString(
-      <NonThrowingComponent />,
-    );
-    expect(container.children[0].textContent).toEqual('0');
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
+      );
+    });
   });
 });
\ No newline at end of file
