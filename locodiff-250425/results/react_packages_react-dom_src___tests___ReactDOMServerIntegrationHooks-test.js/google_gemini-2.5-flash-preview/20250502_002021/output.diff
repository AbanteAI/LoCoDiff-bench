--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual)@@ -424,6 +424,7 @@         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -651,29 +652,6 @@       expect(domNode.tagName).toEqual('SPAN');
       expect(domNode.textContent).toEqual('Count: 0');
     });
-  });
-
-  describe('useContext', () => {
-    itThrowsWhenRendering(
-      'if used inside a class component',
-      async render => {
-        const Context = React.createContext({}, () => {});
-        class Counter extends React.Component {
-          render() {
-            const [count] = useContext(Context);
-            return <Text text={count} />;
-          }
-        }
-
-        return render(<Counter />);
-      },
-      'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +
-        ' one of the following reasons:\n' +
-        '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' +
-        '2. You might be breaking the Rules of Hooks\n' +
-        '3. You might have more than one copy of React in the same app\n' +
-        'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
-    );
   });
 
   describe('invalid hooks', () => {
@@ -809,13 +787,13 @@         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
@@ -871,55 +849,11 @@         return <Text text={count} />;
       }
 
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+      const domNode1 = await render(<ReadInMemo />, 1);
       expect(domNode1.textContent).toEqual('42');
 
       const domNode2 = await render(<ReadInReducer />, 1);
       expect(domNode2.textContent).toEqual('42');
     });
   });
-
-  it('renders successfully after a component using hooks throws an error', () => {
-    function ThrowingComponent() {
-      const [value, dispatch] = useReducer((state, action) => {
-        return state + 1;
-      }, 0);
-
-      // throw an error if the count gets too high during the re-render phase
-      if (value >= 3) {
-        throw new Error('Error from ThrowingComponent');
-      } else {
-        // dispatch to trigger a re-render of the component
-        dispatch();
-      }
-
-      return <div>{value}</div>;
-    }
-
-    function NonThrowingComponent() {
-      const [count] = useState(0);
-      return <div>{count}</div>;
-    }
-
-    // First, render a component that will throw an error during a re-render triggered
-    // by a dispatch call.
-    expect(() => ReactDOMServer.renderToString(<ThrowingComponent />)).toThrow(
-      'Error from ThrowingComponent',
-    );
-
-    // Next, assert that we can render a function component using hooks immediately
-    // after an error occurred, which indictates the internal hooks state has been
-    // reset.
-    const container = document.createElement('div');
-    container.innerHTML = ReactDOMServer.renderToString(
-      <NonThrowingComponent />,
-    );
-    expect(container.children[0].textContent).toEqual('0');
-  });
 });