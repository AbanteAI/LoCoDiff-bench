--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual)@@ -34,12 +34,10 @@ let clearLog;
 
 function initModules() {
-  // Reset warning cache.
-  jest.resetModules();
-
   React = require('react');
   ReactDOMClient = require('react-dom/client');
   ReactDOMServer = require('react-dom/server');
+
   useState = React.useState;
   useReducer = React.useReducer;
   useEffect = React.useEffect;
@@ -63,7 +61,6 @@     return ret;
   };
 
-  // Make them available to the helpers.
   return {
     ReactDOMClient,
     ReactDOMServer,
@@ -263,9 +260,6 @@     itRenders(
       'using reducer passed at time of render, not time of dispatch',
       async render => {
-        // This test is a bit contrived but it demonstrates a subtle edge case.
-
-        // Reducer A increments by 1. Reducer B increments by 10.
         function reducerA(state, action) {
           switch (action) {
             case 'increment':
@@ -288,7 +282,6 @@           const [count, dispatch] = useReducer(reducer, 0);
           if (count < 20) {
             dispatch('increment');
-            // Swap reducers each time we increment
             if (reducer === reducerA) {
               setReducer(() => reducerB);
             } else {
@@ -302,8 +295,6 @@         const domNode = await render(<Counter />);
 
         expect(clearLog()).toEqual([
-          // The count should increase by alternating amounts of 10 and 1
-          // until we reach 21.
           'Render: 0',
           'Render: 10',
           'Render: 11',
@@ -406,7 +397,6 @@           0,
           1,
           2,
-          // `capitalizedText` only recomputes when the text has changed
           "Capitalize 'hello, world.'",
           3,
           'HELLO, WORLD.',
@@ -424,34 +414,27 @@         });
         return 'hi';
       }
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+
+      const domNode = await render(<App />, 1);
       expect(domNode.textContent).toEqual('hi');
     });
 
-    itRenders('with a warning for useRef inside useState', async render => {
-      function App() {
-        const [value] = useState(() => {
-          useRef(0);
-          return 0;
-        });
-        return value;
-      }
-
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
-      expect(domNode.textContent).toEqual('0');
-    });
+    itThrowsWhenRendering(
+      'with a warning for useRef inside useState',
+      async render => {
+        function App() {
+          const [value] = useState(() => {
+            useRef(0);
+            return 0;
+          });
+          return value;
+        }
+
+        const domNode = await render(<App />, 1);
+        expect(domNode.textContent).toEqual('0');
+      },
+      'Rendered more hooks than during the previous render',
+    );
   });
 
   describe('useRef', () => {
@@ -537,11 +520,10 @@ 
     it('verifies yields in order', () => {
       expect(yields).toEqual([
-        ['Count: 0'], // server render
-        ['Count: 0'], // server stream
-        ['Count: 0', 'invoked on client'], // clean render
-        ['Count: 0', 'invoked on client'], // hydrated render
-        // nothing yielded for bad markup
+        ['Count: 0'],
+        ['Count: 0'],
+        ['Count: 0', 'invoked on client'],
+        ['Count: 0', 'invoked on client'],
       ]);
     });
   });
@@ -621,21 +603,6 @@       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
-  describe('useInsertionEffect', () => {
-    it('should warn when invoked during render', async () => {
-      function Counter() {
-        useInsertionEffect(() => {
-          throw new Error('should not be invoked');
-        });
-
-        return <Text text="Count: 0" />;
-      }
-      const domNode = await serverRender(<Counter />, 1);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
 
   describe('useLayoutEffect', () => {
     it('should warn when invoked during render', async () => {
@@ -675,90 +642,6 @@         'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
     );
   });
-
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
-  });
-
-  itRenders(
-    'can use the same context multiple times in the same function',
-    async render => {
-      const Context = React.createContext({foo: 0, bar: 0, baz: 0});
-
-      function Provider(props) {
-        return (
-          <Context.Provider
-            value={{foo: props.foo, bar: props.bar, baz: props.baz}}>
-            {props.children}
-          </Context.Provider>
-        );
-      }
-
-      function FooAndBar() {
-        const {foo} = useContext(Context);
-        const {bar} = useContext(Context);
-        return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
-      }
-
-      function Baz() {
-        const {baz} = useContext(Context);
-        return <Text text={'Baz: ' + baz} />;
-      }
-
-      class Indirection extends React.Component {
-        render() {
-          return this.props.children;
-        }
-      }
-
-      function App(props) {
-        return (
-          <div>
-            <Provider foo={props.foo} bar={props.bar} baz={props.baz}>
-              <Indirection>
-                <Indirection>
-                  <FooAndBar />
-                </Indirection>
-                <Indirection>
-                  <Baz />
-                </Indirection>
-              </Indirection>
-            </Provider>
-          </div>
-        );
-      }
-
-      const domNode = await render(<App foo={1} bar={3} baz={5} />);
-      expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
-      expect(domNode.childNodes.length).toBe(2);
-      expect(domNode.firstChild.tagName).toEqual('SPAN');
-      expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
-      expect(domNode.lastChild.tagName).toEqual('SPAN');
-      expect(domNode.lastChild.textContent).toEqual('Baz: 5');
-    },
-  );
 
   describe('useDebugValue', () => {
     itRenders('is a noop', async render => {
@@ -809,13 +692,13 @@         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
@@ -854,72 +737,31 @@         expect(domNode.lastChild.textContent).toEqual('Baz: 5');
       },
     );
-
-    itRenders('with a warning inside useMemo and useReducer', async render => {
-      const Context = React.createContext(42);
-
-      function ReadInMemo(props) {
-        const count = React.useMemo(() => readContext(Context), []);
-        return <Text text={count} />;
-      }
-
-      function ReadInReducer(props) {
-        const [count, dispatch] = React.useReducer(() => readContext(Context));
-        if (count !== 42) {
+  });
+
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
           dispatch();
         }
-        return <Text text={count} />;
-      }
-
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
       );
-      expect(domNode1.textContent).toEqual('42');
-
-      const domNode2 = await render(<ReadInReducer />, 1);
-      expect(domNode2.textContent).toEqual('42');
-    });
-  });
-
-  it('renders successfully after a component using hooks throws an error', () => {
-    function ThrowingComponent() {
-      const [value, dispatch] = useReducer((state, action) => {
-        return state + 1;
-      }, 0);
-
-      // throw an error if the count gets too high during the re-render phase
-      if (value >= 3) {
-        throw new Error('Error from ThrowingComponent');
-      } else {
-        // dispatch to trigger a re-render of the component
-        dispatch();
-      }
-
-      return <div>{value}</div>;
-    }
-
-    function NonThrowingComponent() {
-      const [count] = useState(0);
-      return <div>{count}</div>;
-    }
-
-    // First, render a component that will throw an error during a re-render triggered
-    // by a dispatch call.
-    expect(() => ReactDOMServer.renderToString(<ThrowingComponent />)).toThrow(
-      'Error from ThrowingComponent',
-    );
-
-    // Next, assert that we can render a function component using hooks immediately
-    // after an error occurred, which indictates the internal hooks state has been
-    // reset.
-    const container = document.createElement('div');
-    container.innerHTML = ReactDOMServer.renderToString(
-      <NonThrowingComponent />,
-    );
-    expect(container.children[0].textContent).toEqual('0');
+    });
   });
 });