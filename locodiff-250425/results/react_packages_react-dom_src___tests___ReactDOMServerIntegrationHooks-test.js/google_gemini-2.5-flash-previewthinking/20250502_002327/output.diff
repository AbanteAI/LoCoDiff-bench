--- react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual)@@ -90,17 +90,20 @@ 
   describe('useState', () => {
     itRenders('basic render', async render => {
-      function Counter(props) {
+      function Counter() {
         const [count] = useState(0);
         return <span>Count: {count}</span>;
       }
 
+      // Deliberately not yielding in this component to ensure we test the yieldValue
+      // from the outer Text component.
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual([]);
       expect(domNode.textContent).toEqual('Count: 0');
     });
 
     itRenders('lazy state initialization', async render => {
-      function Counter(props) {
+      function Counter() {
         const [count] = useState(() => {
           return 0;
         });
@@ -108,6 +111,7 @@       }
 
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual([]);
       expect(domNode.textContent).toEqual('Count: 0');
     });
 
@@ -165,6 +169,7 @@       }
 
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual(['Count: 12']);
       expect(domNode.textContent).toEqual('Count: 12');
     });
 
@@ -177,7 +182,10 @@         return <span>Count: {count}</span>;
       }
 
+ Brush after brush after brush;
+
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual([]);
       expect(domNode.textContent).toEqual('Count: 3');
     });
 
@@ -424,6 +432,7 @@         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -456,24 +465,26 @@ 
   describe('useRef', () => {
     itRenders('basic render', async render => {
-      function Counter(props) {
+      function Counter() {
         const ref = useRef();
         return <span ref={ref}>Hi</span>;
       }
 
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual([]);
       expect(domNode.textContent).toEqual('Hi');
     });
 
     itRenders(
       'multiple times when updates happen during the render phase',
       async render => {
-        function Counter(props) {
+        function Counter() {
           const [count, setCount] = useState(0);
           const ref = useRef();
 
           if (count < 3) {
             const newCount = count + 1;
+
             setCount(newCount);
           }
 
@@ -492,7 +503,7 @@       'always return the same reference through multiple renders',
       async render => {
         let firstRef = null;
-        function Counter(props) {
+        function Counter() {
           const [count, setCount] = useState(0);
           const ref = useRef();
           if (firstRef === null) {
@@ -543,6 +554,38 @@         ['Count: 0', 'invoked on client'], // hydrated render
         // nothing yielded for bad markup
       ]);
+    });
+  });
+
+  describe('useInsertionEffect', () => {
+    it('should warn when invoked during render', async () => {
+      function Counter() {
+        useInsertionEffect(() => {
+          throw new Error('should not be invoked');
+        });
+
+        return <Text text="Count: 0" />;
+      }
+      const domNode = await serverRender(<Counter />, 1);
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
+    });
+  });
+
+  describe('useLayoutEffect', () => {
+    it('should warn when invoked during render', async () => {
+      function Counter() {
+        useLayoutEffect(() => {
+          throw new Error('should not be invoked');
+        });
+
+        return <Text text="Count: 0" />;
+      }
+      const domNode = await serverRender(<Counter />, 1);
+      expect(clearLog()).toEqual(['Count: 0']);
+      expect(domNode.tagName).toEqual('SPAN');
+      expect(domNode.textContent).toEqual('Count: 0');
     });
   });
 
@@ -621,43 +664,12 @@       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
-  describe('useInsertionEffect', () => {
-    it('should warn when invoked during render', async () => {
-      function Counter() {
-        useInsertionEffect(() => {
-          throw new Error('should not be invoked');
-        });
-
-        return <Text text="Count: 0" />;
-      }
-      const domNode = await serverRender(<Counter />, 1);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
-
-  describe('useLayoutEffect', () => {
-    it('should warn when invoked during render', async () => {
-      function Counter() {
-        useLayoutEffect(() => {
-          throw new Error('should not be invoked');
-        });
-
-        return <Text text="Count: 0" />;
-      }
-      const domNode = await serverRender(<Counter />, 1);
-      expect(clearLog()).toEqual(['Count: 0']);
-      expect(domNode.tagName).toEqual('SPAN');
-      expect(domNode.textContent).toEqual('Count: 0');
-    });
-  });
 
   describe('useContext', () => {
     itThrowsWhenRendering(
       'if used inside a class component',
       async render => {
-        const Context = React.createContext({}, () => {});
+        const Context = React.createContext({});
         class Counter extends React.Component {
           render() {
             const [count] = useContext(Context);
@@ -762,12 +774,13 @@ 
   describe('useDebugValue', () => {
     itRenders('is a noop', async render => {
-      function Counter(props) {
+      function Counter() {
         const debugValue = useDebugValue(123);
         return <Text text={typeof debugValue} />;
       }
 
       const domNode = await render(<Counter />);
+      expect(clearLog()).toEqual(['undefined']);
       expect(domNode.textContent).toEqual('undefined');
     });
   });
@@ -782,22 +795,7 @@     itRenders(
       'can read the same context multiple times in the same function',
       async render => {
-        const Context = React.createContext(
-          {foo: 0, bar: 0, baz: 0},
-          (a, b) => {
-            let result = 0;
-            if (a.foo !== b.foo) {
-              result |= 0b001;
-            }
-            if (a.bar !== b.bar) {
-              result |= 0b010;
-            }
-            if (a.baz !== b.baz) {
-              result |= 0b100;
-            }
-            return result;
-          },
-        );
+        const Context = React.createContext({foo: 0, bar: 0, baz: 0});
 
         function Provider(props) {
           return (
@@ -809,13 +807,13 @@         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
@@ -858,12 +856,12 @@     itRenders('with a warning inside useMemo and useReducer', async render => {
       const Context = React.createContext(42);
 
-      function ReadInMemo(props) {
+      function ReadInMemo() {
         const count = React.useMemo(() => readContext(Context), []);
         return <Text text={count} />;
       }
 
-      function ReadInReducer(props) {
+      function ReadInReducer() {
         const [count, dispatch] = React.useReducer(() => readContext(Context));
         if (count !== 42) {
           dispatch();
