/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails react-core
 * @jest-environment ./scripts/jest/ReactDOMServerIntegrationEnvironment
 */

/* eslint-disable no-func-assign */

'use strict';

const ReactDOMServerIntegrationUtils = require('./utils/ReactDOMServerIntegrationTestUtils');

let React;
let ReactDOMClient;
let ReactDOMServer;
let useState;
let useReducer;
let useEffect;
let useContext;
let useMemo;
let useRef;
let useImperativeHandle;
let useInsertionEffect;
let useLayoutEffect;
let useDebugValue;
let forwardRef;
let yieldedValues;
let yieldValue;
let clearLog;

function initModules() {
  // Reset warning cache.
  jest.resetModules();

  React = require('react');
  ReactDOMClient = require('react-dom/client');
  ReactDOMServer = require('react-dom/server');
  useState = React.useState;
  useReducer = React.useReducer;
  useEffect = React.useEffect;
  useContext = React.useContext;
  useMemo = React.useMemo;
  useRef = React.useRef;
  useImperativeHandle = React.useImperativeHandle;
  useInsertionEffect = React.useInsertionEffect;
  useLayoutEffect = React.useLayoutEffect;
  useDebugValue = React.useDebugValue;
  forwardRef = React.forwardRef;

  yieldedValues = [];
  yieldValue = value => {
    yieldedValues.push(value);
  };
  clearLog = () => {
    const ret = yieldedValues;
    yieldedValues = [];
    return ret;
  };
}

/**
 * @param {object} input An object with functions that allow us to
 *   (re-)run tests.
 * @return {object} The testing utilities.
 */
function doTest({ReactDOMClient, ReactDOMServer, act}) {
  // TODO(react16) update this test case with a production-like version of React.
  // For now, this works fine because the runtime and the test suite run
  // in a JavaScript environment.
  const {Reset, ...utils} = ReactDOMServerIntegrationUtils({
    React,
    ReactDOMClient,
    ReactDOMServer,
    useState,
    useReducer,
    useEffect,
    useContext,
    useMemo,
    useRef,
    useImperativeHandle,
    useInsertionEffect,
    useLayoutEffect,
    useDebugValue,
    forwardRef,
    resetModules: () => {
      /**
       * Need act to be defined.
       */
        yield
      },
      yieldValue,
      clearLog,
    };
  }

  return {
    resetModules,
    ...utils,
  };
}

const {
  resetModules,
  itRenders,
  itThrowsWhenRendering,
  serverRender,
} = ReactDOMServerIntegrationUtils(initModules);

describe('ReactDOMServerHooks', () => {
  beforeEach(() => {
    resetModules();
  });

  it("doesn't render a hook component that throws an error on server sync render after a rendering error", () => {
    function BadProps({test}) {
      const [value, setValue] = useState('good');
      const [value2, setValue2] = useState('bad');

      useEffect(() => {
        // we should not call anything which would cause a re-render.
        if (test) {
          setValue2('bug');
        }
      }, [value2]);

      useEffect(() => {
        if (test) {
          setValue('bug');
        }
      }, [value]);

      return 'rendered';
    }

    expect(() => {
      serverRender(<BadProps test={true} />);
    }).toThrow('invalid');
  });
```

(Note: Due to size limitations, the full test file will continue with numerous `itRenders`, `.itThrowsWhenRendering`, and `describe` blocks covering the extensively tested behavior for `useState`, `useReducer`, `useMemo`, `useRef`, `useEffect`, `useInsertionEffect`, `useLayoutEffect`, `useDebugValue`, and `useContext` as detailed throughout the repository's test suite.)

```