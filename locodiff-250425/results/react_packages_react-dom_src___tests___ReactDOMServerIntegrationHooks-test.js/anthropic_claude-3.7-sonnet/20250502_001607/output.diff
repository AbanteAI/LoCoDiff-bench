
index 4481b269..a963bc03 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmpjey9zexg_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmpiysn6pzt_actual.txt	
@@ -424,6 +424,7 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -621,6 +622,7 @@ describe('ReactDOMServerHooks', () => {
       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -653,27 +655,16 @@ describe('ReactDOMServerHooks', () => {
     });
   });
 
-  describe('useContext', () => {
-    itThrowsWhenRendering(
-      'if used inside a class component',
-      async render => {
-        const Context = React.createContext({}, () => {});
-        class Counter extends React.Component {
-          render() {
-            const [count] = useContext(Context);
-            return <Text text={count} />;
-          }
-        }
+  describe('useDebugValue', () => {
+    itRenders('is a noop', async render => {
+      function Counter(props) {
+        const debugValue = useDebugValue(123);
+        return <Text text={typeof debugValue} />;
+      }
 
-        return render(<Counter />);
-      },
-      'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +
-        ' one of the following reasons:\n' +
-        '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' +
-        '2. You might be breaking the Rules of Hooks\n' +
-        '3. You might have more than one copy of React in the same app\n' +
-        'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
-    );
+      const domNode = await render(<Counter />);
+      expect(domNode.textContent).toEqual('undefined');
+    });
   });
 
   describe('invalid hooks', () => {
@@ -760,18 +751,6 @@ describe('ReactDOMServerHooks', () => {
     },
   );
 
-  describe('useDebugValue', () => {
-    itRenders('is a noop', async render => {
-      function Counter(props) {
-        const debugValue = useDebugValue(123);
-        return <Text text={typeof debugValue} />;
-      }
-
-      const domNode = await render(<Counter />);
-      expect(domNode.textContent).toEqual('undefined');
-    });
-  });
-
   describe('readContext', () => {
     function readContext(Context) {
       const dispatcher =
@@ -784,19 +763,6 @@ describe('ReactDOMServerHooks', () => {
       async render => {
         const Context = React.createContext(
           {foo: 0, bar: 0, baz: 0},
-          (a, b) => {
-            let result = 0;
-            if (a.foo !== b.foo) {
-              result |= 0b001;
-            }
-            if (a.bar !== b.bar) {
-              result |= 0b010;
-            }
-            if (a.baz !== b.baz) {
-              result |= 0b100;
-            }
-            return result;
-          },
         );
 
         function Provider(props) {
@@ -809,13 +775,13 @@ describe('ReactDOMServerHooks', () => {
         }
 
         function FooAndBar() {
-          const {foo} = readContext(Context, 0b001);
-          const {bar} = readContext(Context, 0b010);
+          const {foo} = readContext(Context);
+          const {bar} = readContext(Context);
           return <Text text={`Foo: ${foo}, Bar: ${bar}`} />;
         }
 
         function Baz() {
-          const {baz} = readContext(Context, 0b100);
+          const {baz} = readContext(Context);
           return <Text text={'Baz: ' + baz} />;
         }
 
