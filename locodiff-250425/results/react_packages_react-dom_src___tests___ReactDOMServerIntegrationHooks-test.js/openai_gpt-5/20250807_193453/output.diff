
index 4481b2693..34029f20e 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmpgj3wx55q_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmpi2w0lld1_actual.txt	
@@ -15,8 +15,9 @@
 const ReactDOMServerIntegrationUtils = require('./utils/ReactDOMServerIntegrationTestUtils');
 
 let React;
-let ReactDOMClient;
+let ReactDOM;
 let ReactDOMServer;
+let ReactTestUtils;
 let useState;
 let useReducer;
 let useEffect;
@@ -38,8 +39,9 @@ function initModules() {
   jest.resetModules();
 
   React = require('react');
-  ReactDOMClient = require('react-dom/client');
+  ReactDOM = require('react-dom');
   ReactDOMServer = require('react-dom/server');
+  ReactTestUtils = require('react-dom/test-utils');
   useState = React.useState;
   useReducer = React.useReducer;
   useEffect = React.useEffect;
@@ -65,18 +67,14 @@ function initModules() {
 
   // Make them available to the helpers.
   return {
-    ReactDOMClient,
+    ReactDOM,
     ReactDOMServer,
+    ReactTestUtils,
   };
 }
 
-const {
-  resetModules,
-  itRenders,
-  itThrowsWhenRendering,
-  clientRenderOnBadMarkup,
-  serverRender,
-} = ReactDOMServerIntegrationUtils(initModules);
+const {resetModules, itRenders, itThrowsWhenRendering, serverRender} =
+  ReactDOMServerIntegrationUtils(initModules);
 
 describe('ReactDOMServerHooks', () => {
   beforeEach(() => {
@@ -150,7 +148,7 @@ describe('ReactDOMServerHooks', () => {
         '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' +
         '2. You might be breaking the Rules of Hooks\n' +
         '3. You might have more than one copy of React in the same app\n' +
-        'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
+        'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',
     );
 
     itRenders('multiple times when an updater is called', async render => {
@@ -424,13 +422,8 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+
+      const domNode = await render(<App />, 1);
       expect(domNode.textContent).toEqual('hi');
     });
 
@@ -443,13 +436,7 @@ describe('ReactDOMServerHooks', () => {
         return value;
       }
 
-      const domNode = await render(
-        <App />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+      const domNode = await render(<App />, 1);
       expect(domNode.textContent).toEqual('0');
     });
   });
@@ -613,14 +600,13 @@ describe('ReactDOMServerHooks', () => {
       Counter = forwardRef(Counter);
       const counter = React.createRef();
       counter.current = 0;
-      const domNode = await serverRender(
-        <Counter label="Count" ref={counter} />,
-      );
+      const domNode = await serverRender(<Counter label="Count" ref={counter} />);
       expect(clearLog()).toEqual(['Count: 0']);
       expect(domNode.tagName).toEqual('SPAN');
       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -672,36 +658,10 @@ describe('ReactDOMServerHooks', () => {
         '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' +
         '2. You might be breaking the Rules of Hooks\n' +
         '3. You might have more than one copy of React in the same app\n' +
-        'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
+        'See https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.',
     );
   });
 
-  describe('invalid hooks', () => {
-    it('warns when calling useRef inside useReducer', async () => {
-      function App() {
-        const [value, dispatch] = useReducer((state, action) => {
-          useRef(0);
-          return state + 1;
-        }, 0);
-        if (value === 0) {
-          dispatch();
-        }
-        return value;
-      }
-
-      let error;
-      try {
-        await serverRender(<App />);
-      } catch (x) {
-        error = x;
-      }
-      expect(error).not.toBe(undefined);
-      expect(error.message).toContain(
-        'Rendered more hooks than during the previous render',
-      );
-    });
-  });
-
   itRenders(
     'can use the same context multiple times in the same function',
     async render => {
@@ -775,7 +735,8 @@ describe('ReactDOMServerHooks', () => {
   describe('readContext', () => {
     function readContext(Context) {
       const dispatcher =
-        React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE.H;
+        React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED
+          .ReactCurrentDispatcher.current;
       return dispatcher.readContext(Context);
     }
 
@@ -871,13 +832,7 @@ describe('ReactDOMServerHooks', () => {
         return <Text text={count} />;
       }
 
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+      const domNode1 = await render(<ReadInMemo />, 1);
       expect(domNode1.textContent).toEqual('42');
 
       const domNode2 = await render(<ReadInReducer />, 1);
@@ -922,4 +877,30 @@ describe('ReactDOMServerHooks', () => {
     );
     expect(container.children[0].textContent).toEqual('0');
   });
+
+  describe('invalid hooks', () => {
+    it('warns when calling useRef inside useReducer', async () => {
+      function App() {
+        const [value, dispatch] = useReducer((state, action) => {
+          useRef(0);
+          return state + 1;
+        }, 0);
+        if (value === 0) {
+          dispatch();
+        }
+        return value;
+      }
+
+      let error;
+      try {
+        await serverRender(<App />);
+      } catch (x) {
+        error = x;
+      }
+      expect(error).not.toBe(undefined);
+      expect(error.message).toContain(
+        'Rendered more hooks than during the previous render',
+      );
+    });
+  });
 });
\ No newline at end of file
