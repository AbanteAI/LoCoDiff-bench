
index 4481b2693..e8b5d591e 100644
--- a/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_expectedoutput.txt (expected):tmp/tmphsujngmw_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactDOMServerIntegrationHooks-test.js_extracted.txt (actual):tmp/tmpet9swt9o_actual.txt	
@@ -424,6 +424,7 @@ describe('ReactDOMServerHooks', () => {
         });
         return 'hi';
       }
+
       const domNode = await render(
         <App />,
         render === clientRenderOnBadMarkup
@@ -621,6 +622,7 @@ describe('ReactDOMServerHooks', () => {
       expect(domNode.textContent).toEqual('Count: 0');
     });
   });
+
   describe('useInsertionEffect', () => {
     it('should warn when invoked during render', async () => {
       function Counter() {
@@ -653,29 +655,6 @@ describe('ReactDOMServerHooks', () => {
     });
   });
 
-  describe('useContext', () => {
-    itThrowsWhenRendering(
-      'if used inside a class component',
-      async render => {
-        const Context = React.createContext({}, () => {});
-        class Counter extends React.Component {
-          render() {
-            const [count] = useContext(Context);
-            return <Text text={count} />;
-          }
-        }
-
-        return render(<Counter />);
-      },
-      'Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for' +
-        ' one of the following reasons:\n' +
-        '1. You might have mismatching versions of React and the renderer (such as React DOM)\n' +
-        '2. You might be breaking the Rules of Hooks\n' +
-        '3. You might have more than one copy of React in the same app\n' +
-        'See https://react.dev/link/invalid-hook-call for tips about how to debug and fix this problem.',
-    );
-  });
-
   describe('invalid hooks', () => {
     it('warns when calling useRef inside useReducer', async () => {
       function App() {
@@ -846,7 +825,7 @@ describe('ReactDOMServerHooks', () => {
         }
 
         const domNode = await render(<App foo={1} bar={3} baz={5} />);
-        expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5']);
+        expect(clearLog()).toEqual(['Foo: 1, Bar: 3', 'Baz: 5');
         expect(domNode.childNodes.length).toBe(2);
         expect(domNode.firstChild.tagName).toEqual('SPAN');
         expect(domNode.firstChild.textContent).toEqual('Foo: 1, Bar: 3');
@@ -871,13 +850,7 @@ describe('ReactDOMServerHooks', () => {
         return <Text text={count} />;
       }
 
-      const domNode1 = await render(
-        <ReadInMemo />,
-        render === clientRenderOnBadMarkup
-          ? // On hydration mismatch we retry and therefore log the warning again.
-            2
-          : 1,
-      );
+      const domNode1 = await render(<ReadInMemo />, 1);
       expect(domNode1.textContent).toEqual('42');
 
       const domNode2 = await render(<ReadInReducer />, 1);
