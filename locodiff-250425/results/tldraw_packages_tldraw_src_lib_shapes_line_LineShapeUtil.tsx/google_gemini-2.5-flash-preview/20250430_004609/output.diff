
index 1529ad14..ef448105 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmprl6jacw2_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmp9wayqwjb_actual.txt	
@@ -16,7 +16,6 @@ import {
 	getIndexAbove,
 	getIndexBetween,
 	getIndices,
-	getPerfectDashProps,
 	lerp,
 	lineShapeMigrations,
 	lineShapeProps,
@@ -25,6 +24,7 @@ import {
 	sortByIndex,
 } from '@tldraw/editor'
 
+import { getPerfectDashProps } from '../../..'
 import { STROKE_SIZES } from '../arrow/shared'
 import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
 import { getLineDrawPath, getLineIndicatorPath } from './components/getLinePath'
@@ -117,6 +117,7 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 					x: x * scaleX,
 					y: y * scaleY,
 				})),
+				scale: shape.props.scale * Math.max(Math.abs(scaleX), Math.abs(scaleY)),
 			},
 		}
 	}
@@ -163,71 +164,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			},
 		}
 	}
-
-	component(shape: TLLineShape) {
-		return (
-			<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
-				<LineShapeSvg shape={shape} />
-			</SVGContainer>
-		)
-	}
-
-	indicator(shape: TLLineShape) {
-		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-		const spline = getGeometryForLineShape(shape)
-		const { dash } = shape.props
-
-		let path: string
-
-		if (shape.props.spline === 'line') {
-			const outline = spline.points
-			if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
-				path = 'M' + outline[0] + 'L' + outline.slice(1)
-			} else {
-				const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)
-				path = innerPathData
-			}
-		} else {
-			path = getLineIndicatorPath(shape, spline, strokeWidth)
-		}
-
-		return <path d={path} />
-	}
-
-	override toSvg(shape: TLLineShape) {
-		return <LineShapeSvg shouldScale shape={shape} />
-	}
-
-	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
-		const points = linePointsToArray(shape)
-		return {
-			points,
-			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// We want to skip the current and adjacent handles
-				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
-			},
-			getSelfSnapOutline: (handle) => {
-				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// Get all the outline segments from the shape that don't include the handle
-				const segments = getGeometryForLineShape(shape).segments.filter(
-					(_, i) => i !== index - 1 && i !== index
-				)
-
-				if (!segments.length) return null
-				return new Group2d({ children: segments })
-			},
-		}
-	}
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -270,7 +206,7 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			// noop, easy
 			for (let i = 0; i < endPoints.length; i++) {
 				pointsToUseStart[i] = startPoints[i]
-				pointsToUseEnd[i] = endPoints[i]
+				pointsTouseEnd[i] = endPoints[i]
 			}
 		}
 
