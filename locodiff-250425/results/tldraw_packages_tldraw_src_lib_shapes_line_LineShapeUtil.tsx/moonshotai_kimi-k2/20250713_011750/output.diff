
index 1529ad147..55cb6c5f5 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmppyc70e99_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmpaquwnl45_actual.txt	
@@ -104,23 +104,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		})
 	}
 
-	//   Events
-
-	override onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>) {
-		const { scaleX, scaleY } = info
-
-		return {
-			props: {
-				points: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({
-					id,
-					index,
-					x: x * scaleX,
-					y: y * scaleY,
-				})),
-			},
-		}
-	}
-
 	override onBeforeCreate(next: TLLineShape): void | TLLineShape {
 		const {
 			props: { points },
@@ -148,9 +131,25 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return
 	}
 
+	override onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>) {
+		const { scaleX, scaleY } = info
+
+		return {
+			props: {
+				points: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({
+					id,
+					index,
+					x: x * scaleX,
+					y: y * scaleY,
+				})),
+			},
+		}
+	}
+
 	override onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>) {
 		// we should only ever be dragging vertex handles
 		if (handle.type !== 'vertex') return
+
 		const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
 		return {
 			...shape,
@@ -198,36 +197,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return <LineShapeSvg shouldScale shape={shape} />
 	}
 
-	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
-		const points = linePointsToArray(shape)
-		return {
-			points,
-			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// We want to skip the current and adjacent handles
-				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
-			},
-			getSelfSnapOutline: (handle) => {
-				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// Get all the outline segments from the shape that don't include the handle
-				const segments = getGeometryForLineShape(shape).segments.filter(
-					(_, i) => i !== index - 1 && i !== index
-				)
-
-				if (!segments.length) return null
-				return new Group2d({ children: segments })
-			},
-		}
-	}
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -292,6 +261,37 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
+
+	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
+		const points = linePointsToArray(shape)
+		return {
+			points,
+			getSelfSnapPoints: (handle) => {
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				// We want to skip the current and adjacent handles
+				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
+			},
+			getSelfSnapOutline: (handle) => {
+				// We want to skip the segments that include the handle, so
+				// find the index of the handle that shares the same index property
+				// as the initial dragging handle; this catches a quirk of create handles
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				// Get all the outline segments from the shape that don't include the handle
+				const segments = getGeometryForLineShape(shape).segments.filter(
+					(_, i) => i !== index - 1 && i !== index
+				)
+
+				if (!segments.length) return null
+				return new Group2d({ children: segments })
+			},
+		}
+	}
 }
 
 function linePointsToArray(shape: TLLineShape) {
@@ -300,14 +300,15 @@ function linePointsToArray(shape: TLLineShape) {
 
 /** @public */
 export function getGeometryForLineShape(shape: TLLineShape): CubicSpline2d | Polyline2d {
-	const points = linePointsToArray(shape).map(Vec.From)
+	const { spline, points } = shape.props
+	const handlePoints = linePointsToArray(shape).map(Vec.From)
 
-	switch (shape.props.spline) {
+	switch (spline) {
 		case 'cubic': {
-			return new CubicSpline2d({ points })
+			return new CubicSpline2d({ points: handlePoints })
 		}
 		case 'line': {
-			return new Polyline2d({ points })
+			return new Polyline2d({ points: handlePoints })
 		}
 	}
 }
@@ -409,16 +410,14 @@ function LineShapeSvg({
 			return (
 				<g stroke={theme[color].solid} strokeWidth={strokeWidth} transform={`scale(${scale})`}>
 					{spline.segments.map((segment, i) => {
-						const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
-							segment.length,
-							strokeWidth,
-							{
-								style: dash,
-								start: i > 0 ? 'outset' : 'none',
-								end: i < spline.segments.length - 1 ? 'outset' : 'none',
-								forceSolid,
-							}
-						)
+						const { strokeDasharray, strokeDashoffset } = forceSolid
+							? { strokeDasharray: 'none', strokeDashoffset: 'none' }
+							: getPerfectDashProps(segment.length, strokeWidth, {
+									style: dash,
+									start: i > 0 ? 'outset' : 'none',
+									end: i < spline.segments.length - 1 ? 'outset' : 'none',
+									forceSolid,
+								})
 
 						return (
 							<path
@@ -446,4 +445,6 @@ function LineShapeSvg({
 			)
 		}
 	}
+	// This should never happen but TypeScript needs it
+	return null
 }
\ No newline at end of file
