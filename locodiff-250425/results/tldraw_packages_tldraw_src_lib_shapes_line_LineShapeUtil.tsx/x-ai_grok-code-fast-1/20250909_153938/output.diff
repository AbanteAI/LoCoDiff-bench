
index 1529ad147..14649e3af 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpp0m8og0e_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmpfohv4_2a_actual.txt	
@@ -1,3 +1,4 @@
+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	CubicSpline2d,
 	Group2d,
@@ -13,6 +14,7 @@ import {
 	Vec,
 	WeakCache,
 	ZERO_INDEX_KEY,
+	getDefaultColorTheme,
 	getIndexAbove,
 	getIndexBetween,
 	getIndices,
@@ -70,7 +72,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 	}
 
 	getGeometry(shape: TLLineShape) {
-		// todo: should we have min size?
 		return getGeometryForLineShape(shape)
 	}
 
@@ -97,6 +98,7 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 					x: point.x,
 					y: point.y,
 					canSnap: true,
+					canBind: false,
 				})
 			}
 
@@ -117,6 +119,7 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 					x: x * scaleX,
 					y: y * scaleY,
 				})),
+				scale: shape.props.scale,
 			},
 		}
 	}
@@ -164,70 +167,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		}
 	}
 
-	component(shape: TLLineShape) {
-		return (
-			<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
-				<LineShapeSvg shape={shape} />
-			</SVGContainer>
-		)
-	}
-
-	indicator(shape: TLLineShape) {
-		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-		const spline = getGeometryForLineShape(shape)
-		const { dash } = shape.props
-
-		let path: string
-
-		if (shape.props.spline === 'line') {
-			const outline = spline.points
-			if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
-				path = 'M' + outline[0] + 'L' + outline.slice(1)
-			} else {
-				const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)
-				path = innerPathData
-			}
-		} else {
-			path = getLineIndicatorPath(shape, spline, strokeWidth)
-		}
-
-		return <path d={path} />
-	}
-
-	override toSvg(shape: TLLineShape) {
-		return <LineShapeSvg shouldScale shape={shape} />
-	}
-
-	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
-		const points = linePointsToArray(shape)
-		return {
-			points,
-			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// We want to skip the current and adjacent handles
-				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
-			},
-			getSelfSnapOutline: (handle) => {
-				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// Get all the outline segments from the shape that don't include the handle
-				const segments = getGeometryForLineShape(shape).segments.filter(
-					(_, i) => i !== index - 1 && i !== index
-				)
-
-				if (!segments.length) return null
-				return new Group2d({ children: segments })
-			},
-		}
-	}
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -292,6 +231,71 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
+
+	component(shape: TLLineShape) {
+		return (
+			<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
+				<LineShapeSvg shape={shape} />
+			</SVGContainer>
+		)
+	}
+
+	indicator(shape: TLLineShape) {
+		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
+		const spline = getGeometryForLineShape(shape)
+		const { dash } = shape.props
+
+		let path: string
+
+		if (shape.props.spline === 'line') {
+			const outline = spline.points
+			if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
+				path = 'M' + outline[0] + 'L' + outline.slice(1)
+			} else {
+				const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)
+				path = innerPathData
+			}
+		} else {
+			path = getLineIndicatorPath(shape, spline, strokeWidth)
+		}
+
+		return <path d={path} />
+	}
+
+	override toSvg(shape: TLLineShape) {
+		return <LineShapeSvg shape={shape} shouldScale />
+	}
+
+	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
+		const points = linePointsToArray(shape)
+		return {
+			points,
+			getSelfSnapPoints: (handle) => {
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)
+
+				// We want to skip the current and adjacent handles
+				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
+			},
+			getSelfSnapOutline: (handle) => {
+				// We want to skip the segments that include the handle, so
+				// find the index of the handle that shares the same index property
+				// as the initial dragging handle; this catches a quirk of create handles
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)
+
+				// Get all the outline segments from the shape that don't include the handle
+				const segments = getGeometryForLineShape(shape).segments.filter(
+					(_, i) => i !== index - 1 && i !== index
+				)
+
+				if (!segments.length) return null
+				return new Group2d({ children: segments })
+			},
+		}
+	}
 }
 
 function linePointsToArray(shape: TLLineShape) {
@@ -350,6 +354,9 @@ function LineShapeSvg({
 		}
 
 		if (dash === 'dashed' || dash === 'dotted') {
+			const outline = spline.points
+			const pathData = 'M' + outline[0] + 'L' + outline.slice(1)
+
 			return (
 				<g stroke={theme[color].solid} strokeWidth={strokeWidth} transform={`scale(${scale})`}>
 					{spline.segments.map((segment, i) => {
@@ -409,16 +416,13 @@ function LineShapeSvg({
 			return (
 				<g stroke={theme[color].solid} strokeWidth={strokeWidth} transform={`scale(${scale})`}>
 					{spline.segments.map((segment, i) => {
-						const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
-							segment.length,
-							strokeWidth,
-							{
-								style: dash,
-								start: i > 0 ? 'outset' : 'none',
-								end: i < spline.segments.length - 1 ? 'outset' : 'none',
-								forceSolid,
-							}
-						)
+						const { strokeDasharray, strokeDashoffset } = forceSolid
+							? { strokeDasharray: 'none', strokeDashoffset: 'none' }
+							: getPerfectDashProps(segment.length, strokeWidth, {
+									style: dash,
+									start: i > 0 ? 'outset' : 'none',
+									end: i < spline.segments.length - 1 ? 'outset' : 'none',
+								})
 
 						return (
 							<path
