import {
  CubicSpline2d,
  Group2d,
  HandleSnapGeometry,
  Polyline2d,
  SVGContainer,
  ShapeUtil,
  TLHandle,
  TLLineShape,
  TLLineShapePoint,
  TLHandleDragInfo,
  TLResizeInfo,
  Vec,
  WeakCache,
  ZERO_INDEX_KEY,
  getIndexAbove,
  getIndexBetween,
  getIndices,
  getPerfectDashProps,
  lerp,
  lineShapeMigrations,
  lineShapeProps,
  mapObjectMapValues,
  maybeSnapToGrid,
  sortByIndex,
} from '@tldraw/editor'
import { STROKE_SIZES } from '../arrow/shared'
import { useDefaultColorTheme } from '../shared/useDefaultColorTheme'
import { getLineDrawPath, getLineIndicatorPath } from './components/getLinePath'
import { getDrawLinePathData } from './line-helpers'

const handlesCache = new WeakCache<TLLineShape['props'], TLHandle[]>()

/** @public */
export class LineShapeUtil extends ShapeUtil<TLLineShape> {
  static override type = 'line' as const
  static override props = lineShapeProps
  static override migrations = lineShapeMigrations

  override canTabTo() {
    return false
  }

  override hideResizeHandles() {
    return true
  }
  override hideRotateHandle() {
    return true
  }
  override hideSelectionBoundsFg() {
    return true
  }
  override hideSelectionBoundsBg() {
    return true
  }

  override getDefaultProps(): TLLineShape['props'] {
    const [start, end] = getIndices(2)
    return {
      dash: 'draw',
      size: 'm',
      color: 'black',
      spline: 'line',
      points: {
        [start]: { id: start, index: start, x: 0, y: 0 },
        [end]:   { id: end,   index: end,   x: 0.1, y: 0.1 },
      },
      scale: 1,
    }
  }

  override getHandles(shape: TLLineShape) {
    return handlesCache.get(shape.props, () => {
      const spline = getGeometryForLineShape(shape)
      const results: TLHandle[] = []
      const pts            = linePointsToArray(shape)
      let index            = ZERO_INDEX_KEY

      for (let i = 0; i < pts.length; i++) {
        const point = pts[i]
        results.push({
          id:      point.id,
          index:   point.index,
          x:       point.x,
          y:       point.y,
          type:    'vertex',
          canBind: false,
          canSnap: true,
        })
        index = getIndexAbove(index)

        if (i < pts.length - 1) {
          const segment = spline.segments[i]
          const mid     = segment.midPoint()
          results.push({
            id:      index,
            type:    'create',
            index:   index,
            x:       mid.x,
            y:       mid.y,
            canSnap: true,
            canBind: false,
          })
          index = getIndexAbove(index)
        }
      }

      return results.sort(sortByIndex)
    })
  }

  override getGeometry(shape: TLLineShape) {
    return getGeometryForLineShape(shape)
  }

  override getOutlineSegments(shape: TLLineShape) {
    const spline = this.editor.getShapeGeometry(shape) as Polyline2d | CubicSpline2d
    return spline.segments.map((s) => s.vertices)
  }

  override onBeforeCreate(next: TLLineShape): void | TLLineShape {
    const {
      props: { points },
    } = next
    const keys = Object.keys(points)

    if (keys.length < 2) {
      return
    }

    const first  = points[keys[0]]
    const allSame = keys.every((key) => {
      const p = points[key]
      return p.x === first.x && p.y === first.y
    })

    if (allSame) {
      const lastKey = keys[keys.length - 1]
      points[lastKey] = {
        ...points[lastKey],
        x: points[lastKey].x + 0.1,
        y: points[lastKey].y + 0.1,
      }
      return next
    }
  }

  override onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>) {
    if (handle.type !== 'vertex') return shape
    const snapped   = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
    return {
      ...shape,
      props: {
        ...shape.props,
        points: mapObjectMapValues(shape.props.points, (_, pt) =>
          pt.id === handle.id
            ? { id: pt.id, index: pt.index, x: snapped.x, y: snapped.y }
            : pt
        ),
      },
    }
  }

  component(shape: TLLineShape) {
    return (
      <SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
        <LineShapeSvg shape={shape} />
      </SVGContainer>
    )
  }

  indicator(shape: TLLineShape) {
    const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
    const spline      = getGeometryForLineShape(shape)
    const { dash }    = shape.props

    let path: string

    if (shape.props.spline === 'line') {
      const pts = spline.points
      if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
        path = 'M' + pts[0] + 'L' + pts.slice(1)
      } else {
        const [inner] = getDrawLinePathData(shape.id, pts, strokeWidth)
        path = inner
      }
    } else {
      path = getLineIndicatorPath(shape, spline, strokeWidth)
    }

    return <path d={path} />
  }

  override toSvg(shape: TLLineShape) {
    return <LineShapeSvg shouldScale shape={shape} />
  }

  override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
    const pts = linePointsToArray(shape)
    return {
      points: pts,
      getSelfSnapPoints: (handle) => {
        const handles = this.getHandles(shape).filter((h) => h.type === 'vertex')
        const idx     = handles.findIndex((h) => h.id === handle.id)!
        return pts.filter((_, i) => Math.abs(i - idx) > 1).map(Vec.From)
      },
      getSelfSnapOutline: (handle) => {
        const handles = this.getHandles(shape).filter((h) => h.type === 'vertex')
        const idx     = handles.findIndex((h) => h.id === handle.id)!
        const segs    = getGeometryForLineShape(shape).segments.filter(
          (_, i) => i !== idx - 1 && i !== idx
        )
        if (!segs.length) return null
        return new Group2d({ children: segs })
      },
    }
  }

  override getInterpolatedProps(
    startShape: TLLineShape,
    endShape:   TLLineShape,
    t:          number
  ): TLLineShape['props'] {
    const startPts = linePointsToArray(startShape)
    const endPts   = linePointsToArray(endShape)
    const ptsStart: TLLineShapePoint[] = []
    const ptsEnd:   TLLineShapePoint[] = []
    let index = ZERO_INDEX_KEY

    if (startPts.length > endPts.length) {
      for (let i = 0; i < startPts.length; i++) {
        ptsStart[i] = { ...startPts[i] }
        if (endPts[i] === undefined) {
          ptsEnd[i] = { ...endPts[endPts.length - 1], id: index, index }
        } else {
          ptsEnd[i] = { ...endPts[i],          id: index, index }
        }
        index = getIndexAbove(index)
      }
    } else if (endPts.length > startPts.length) {
      for (let i = 0; i < endPts.length; i++) {
        ptsEnd[i] = { ...endPts[i] }
        if (startPts[i] === undefined) {
          ptsStart[i] = { ...startPts[startPts.length - 1], id: index, index }
        } else {
          ptsStart[i] = { ...startPts[i],        id: index, index }
        }
        index = getIndexAbove(index)
      }
    } else {
      for (let i = 0; i < endPts.length; i++) {
        ptsStart[i] = startPts[i]
        ptsEnd[i]   = endPts[i]
      }
    }

    return {
      ...(t > 0.5 ? endShape.props : startShape.props),
      points: Object.fromEntries(
        ptsStart.map((pt, i) => {
          const e = ptsEnd[i]
          return [
            pt.id,
            {
              ...pt,
              x: lerp(pt.x, e.x, t),
              y: lerp(pt.y, e.y, t),
            },
          ]
        })
      ),
      scale: lerp(startShape.props.scale, endShape.props.scale, t),
    }
  }
}

/** @public */
export function getGeometryForLineShape(shape: TLLineShape): CubicSpline2d | Polyline2d {
  const { spline, points } = shape.props
  const handlePoints = linePointsToArray(shape).map(Vec.From)
  return spline === 'cubic'
    ? new CubicSpline2d({ points: handlePoints })
    : new Polyline2d({ points: handlePoints })
}

function linePointsToArray(shape: TLLineShape): TLLineShapePoint[] {
  return Object.values(shape.props.points).sort(sortByIndex)
}