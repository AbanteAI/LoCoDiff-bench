
index 1529ad14..d7cd03bb 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmppn_gejui_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmpaq0jtw0f_actual.txt	
@@ -1,3 +1,4 @@
+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	CubicSpline2d,
 	Group2d,
@@ -20,8 +21,8 @@ import {
 	lerp,
 	lineShapeMigrations,
 	lineShapeProps,
-	mapObjectMapValues,
 	maybeSnapToGrid,
+	mapObjectMapValues,
 	sortByIndex,
 } from '@tldraw/editor'
 
@@ -53,6 +54,17 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 	override hideSelectionBoundsBg() {
 		return true
 	}
+	override isAspectRatioLocked() {
+		return true
+	}
+
+	override canEdit() {
+		return false
+	}
+
+	override canBind() {
+		return false
+	}
 
 	override getDefaultProps(): TLLineShape['props'] {
 		const [start, end] = getIndices(2)
@@ -69,58 +81,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		}
 	}
 
-	getGeometry(shape: TLLineShape) {
-		// todo: should we have min size?
-		return getGeometryForLineShape(shape)
-	}
-
-	override getHandles(shape: TLLineShape) {
-		return handlesCache.get(shape.props, () => {
-			const spline = getGeometryForLineShape(shape)
-
-			const points = linePointsToArray(shape)
-			const results: TLHandle[] = points.map((point) => ({
-				...point,
-				id: point.index,
-				type: 'vertex',
-				canSnap: true,
-			}))
-
-			for (let i = 0; i < points.length - 1; i++) {
-				const index = getIndexBetween(points[i].index, points[i + 1].index)
-				const segment = spline.segments[i]
-				const point = segment.midPoint()
-				results.push({
-					id: index,
-					type: 'create',
-					index,
-					x: point.x,
-					y: point.y,
-					canSnap: true,
-				})
-			}
-
-			return results.sort(sortByIndex)
-		})
-	}
-
-	//   Events
-
-	override onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>) {
-		const { scaleX, scaleY } = info
-
-		return {
-			props: {
-				points: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({
-					id,
-					index,
-					x: x * scaleX,
-					y: y * scaleY,
-				})),
-			},
-		}
-	}
-
 	override onBeforeCreate(next: TLLineShape): void | TLLineShape {
 		const {
 			props: { points },
@@ -148,86 +108,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return
 	}
 
-	override onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>) {
-		// we should only ever be dragging vertex handles
-		if (handle.type !== 'vertex') return
-		const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
-		return {
-			...shape,
-			props: {
-				...shape.props,
-				points: {
-					...shape.props.points,
-					[handle.id]: { id: handle.id, index: handle.index, x: newPoint.x, y: newPoint.y },
-				},
-			},
-		}
-	}
-
-	component(shape: TLLineShape) {
-		return (
-			<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
-				<LineShapeSvg shape={shape} />
-			</SVGContainer>
-		)
-	}
-
-	indicator(shape: TLLineShape) {
-		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
-		const spline = getGeometryForLineShape(shape)
-		const { dash } = shape.props
-
-		let path: string
-
-		if (shape.props.spline === 'line') {
-			const outline = spline.points
-			if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
-				path = 'M' + outline[0] + 'L' + outline.slice(1)
-			} else {
-				const [innerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)
-				path = innerPathData
-			}
-		} else {
-			path = getLineIndicatorPath(shape, spline, strokeWidth)
-		}
-
-		return <path d={path} />
-	}
-
-	override toSvg(shape: TLLineShape) {
-		return <LineShapeSvg shouldScale shape={shape} />
-	}
-
-	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
-		const points = linePointsToArray(shape)
-		return {
-			points,
-			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// We want to skip the current and adjacent handles
-				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
-			},
-			getSelfSnapOutline: (handle) => {
-				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// Get all the outline segments from the shape that don't include the handle
-				const segments = getGeometryForLineShape(shape).segments.filter(
-					(_, i) => i !== index - 1 && i !== index
-				)
-
-				if (!segments.length) return null
-				return new Group2d({ children: segments })
-			},
-		}
-	}
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -292,34 +172,131 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
-}
 
-function linePointsToArray(shape: TLLineShape) {
-	return Object.values(shape.props.points).sort(sortByIndex)
-}
+	override onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>) {
+		// we should only ever be dragging vertex handles
+		if (handle.type !== 'vertex') return
+		const newPoint = maybeSnapToGrid(new Vec(handle.x, handle.y), this.editor)
+		return {
+			...shape,
+			props: {
+				...shape.props,
+				points: {
+					...shape.props.points,
+					[handle.id]: { id: handle.id, index: handle.index, x: newPoint.x, y: newPoint.y },
+				},
+			},
+		}
+	}
 
-/** @public */
-export function getGeometryForLineShape(shape: TLLineShape): CubicSpline2d | Polyline2d {
-	const points = linePointsToArray(shape).map(Vec.From)
+	getGeometry(shape: TLLineShape) {
+		return getGeometryForLineShape(shape)
+	}
 
-	switch (shape.props.spline) {
-		case 'cubic': {
-			return new CubicSpline2d({ points })
+	override getHandles(shape: TLLineShape) {
+		return handlesCache.get(shape.props, () => {
+			const spline = getGeometryForLineShape(shape)
+
+			const points = linePointsToArray(shape)
+			const results: TLHandle[] = points.map((point) => ({
+				...point,
+				id: point.index,
+				type: 'vertex',
+				canSnap: true,
+				canBind: false,
+			}))
+
+			for (let i = 0; i < points.length - 1; i++) {
+				const index = getIndexBetween(points[i].index, points[i + 1].index)
+				const segment = spline.segments[i]
+				const point = segment.midPoint()
+				results.push({
+					id: index,
+					type: 'create',
+					index,
+					x: point.x,
+					y: point.y,
+					canSnap: true,
+					canBind: false,
+				})
+			}
+
+			return results.sort(sortByIndex)
+		})
+	}
+
+	override getOutlineSegments(shape: TLLineShape) {
+		const spline = this.editor.getShapeGeometry(shape) as Polyline2d | CubicSpline2d
+		return spline.segments.map((s) => s.vertices)
+	}
+
+	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
+		const points = linePointsToArray(shape)
+		return {
+			points,
+			getSelfSnapPoints: (handle) => {
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
+			},
+			getSelfSnapOutline: (handle) => {
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				const segments = getGeometryForLineShape(shape).segments.filter(
+					(_, i) => i !== index - 1 && i !== index
+				)
+
+				if (!segments.length) return null
+				return new Group2d({ children: segments })
+			},
 		}
-		case 'line': {
-			return new Polyline2d({ points })
+	}
+
+	component(shape: TLLineShape) {
+		return (
+			<SVGContainer style={{ minWidth: 50, minHeight: 50 }}>
+				<LineShapeSvg shape={shape} />
+			</SVGContainer>
+		)
+	}
+
+	indicator(shape: TLLineShape) {
+		const strokeWidth = STROKE_SIZES[shape.props.size] * shape.props.scale
+		const spline = getGeometryForLineShape(shape)
+		const { dash } = shape.props
+
+		let path: string
+
+		if (shape.props.spline === 'line') {
+			const outline = spline.points
+			if (dash === 'solid' || dash === 'dotted' || dash === 'dashed') {
+				path = 'M' + outline[0] + 'L' + outline.slice(1)
+			} else {
+				const [innerPathData] = getDrawLinePathData(shape.id + '_indicator', outline, strokeWidth)
+				path = innerPathData
+			}
+		} else {
+			path = getLineIndicatorPath(shape, spline, strokeWidth)
 		}
+
+		return <path d={path} />
+	}
+
+	override toSvg(shape: TLLineShape) {
+		return <LineShapeSvg shouldScale shape={shape} />
 	}
 }
 
 function LineShapeSvg({
 	shape,
 	shouldScale = false,
-	forceSolid = false,
 }: {
 	shape: TLLineShape
 	shouldScale?: boolean
-	forceSolid?: boolean
 }) {
 	const theme = useDefaultColorTheme()
 
@@ -353,13 +330,15 @@ function LineShapeSvg({
 			return (
 				<g stroke={theme[color].solid} strokeWidth={strokeWidth} transform={`scale(${scale})`}>
 					{spline.segments.map((segment, i) => {
-						const { strokeDasharray, strokeDashoffset } = forceSolid
-							? { strokeDasharray: 'none', strokeDashoffset: 'none' }
-							: getPerfectDashProps(segment.length, strokeWidth, {
-									style: dash,
-									start: i > 0 ? 'outset' : 'none',
-									end: i < spline.segments.length - 1 ? 'outset' : 'none',
-								})
+						const { strokeDasharray, strokeDashoffset } = getPerfectDashProps(
+							segment.length,
+							strokeWidth,
+							{
+								style: dash,
+								start: i > 0 ? 'outset' : 'none',
+								end: i < spline.segments.length - 1 ? 'outset' : 'none',
+							}
+						)
 
 						return (
 							<path
@@ -377,7 +356,7 @@ function LineShapeSvg({
 
 		if (dash === 'draw') {
 			const outline = spline.points
-			const [_, outerPathData] = getDrawLinePathData(shape.id, outline, strokeWidth)
+			const [_, outerPathData] = getDrawLinePathData(shape.id + '_indicator', outline, strokeWidth)
 
 			return (
 				<path
@@ -416,7 +395,6 @@ function LineShapeSvg({
 								style: dash,
 								start: i > 0 ? 'outset' : 'none',
 								end: i < spline.segments.length - 1 ? 'outset' : 'none',
-								forceSolid,
 							}
 						)
 
@@ -446,4 +424,22 @@ function LineShapeSvg({
 			)
 		}
 	}
+}
+
+function linePointsToArray(shape: TLLineShape) {
+	return Object.values(shape.props.points).sort(sortByIndex)
+}
+
+/** @public */
+export function getGeometryForLineShape(shape: TLLineShape): CubicSpline2d | Polyline2d {
+	const points = linePointsToArray(shape).map(Vec.From)
+
+	switch (shape.props.spline) {
+		case 'cubic': {
+			return new CubicSpline2d({ points })
+		}
+		case 'line': {
+			return new Polyline2d({ points })
+		}
+	}
 }
\ No newline at end of file
