
index 1529ad14..bd6bcd69 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpl5il_w9t_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmpa4aqw97o_actual.txt	
@@ -13,16 +13,16 @@ import {
 	Vec,
 	WeakCache,
 	ZERO_INDEX_KEY,
-	getIndexAbove,
+	getIndexAbove, 
 	getIndexBetween,
 	getIndices,
-	getPerfectDashProps,
 	lerp,
 	lineShapeMigrations,
 	lineShapeProps,
 	mapObjectMapValues,
 	maybeSnapToGrid,
 	sortByIndex,
+	getPerfectDashProps,
 } from '@tldraw/editor'
 
 import { STROKE_SIZES } from '../arrow/shared'
@@ -69,8 +69,8 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		}
 	}
 
-	getGeometry(shape: TLLineShape) {
-		// todo: should we have min size?
+	override getGeometry(shape: TLLineShape) {
+		// todo: should we have min size?  
 		return getGeometryForLineShape(shape)
 	}
 
@@ -104,23 +104,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		})
 	}
 
-	//   Events
-
-	override onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>) {
-		const { scaleX, scaleY } = info
-
-		return {
-			props: {
-				points: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({
-					id,
-					index,
-					x: x * scaleX,
-					y: y * scaleY,
-				})),
-			},
-		}
-	}
-
 	override onBeforeCreate(next: TLLineShape): void | TLLineShape {
 		const {
 			props: { points },
@@ -148,6 +131,21 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return
 	}
 
+	override onResize(shape: TLLineShape, info: TLResizeInfo<TLLineShape>) {
+		const { scaleX, scaleY } = info
+
+		return {
+			props: {
+				points: mapObjectMapValues(shape.props.points, (_, { id, index, x, y }) => ({
+					id,
+					index,
+					x: x * scaleX,
+					y: y * scaleY,
+				})),
+			},
+		}
+	}
+
 	override onHandleDrag(shape: TLLineShape, { handle }: TLHandleDragInfo<TLLineShape>) {
 		// we should only ever be dragging vertex handles
 		if (handle.type !== 'vertex') return
@@ -188,14 +186,14 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 				path = innerPathData
 			}
 		} else {
-			path = getLineIndicatorPath(shape, spline, strokeWidth)
+			path = getLineIndicatorPath(shape, spline, strokeWidth)  
 		}
 
 		return <path d={path} />
 	}
 
 	override toSvg(shape: TLLineShape) {
-		return <LineShapeSvg shouldScale shape={shape} />
+		return <LineShapeSvg shape={shape} />
 	}
 
 	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
@@ -203,20 +201,15 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return {
 			points,
 			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
+				const index = points.findIndex((h) => h.id === handle.id)!
 
 				// We want to skip the current and adjacent handles
 				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
 			},
 			getSelfSnapOutline: (handle) => {
 				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
+				// find the index of the handle 
+				const index = points.findIndex((h) => h.id === handle.id)!
 
 				// Get all the outline segments from the shape that don't include the handle
 				const segments = getGeometryForLineShape(shape).segments.filter(
@@ -228,6 +221,7 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			},
 		}
 	}
+
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -318,7 +312,7 @@ function LineShapeSvg({
 	forceSolid = false,
 }: {
 	shape: TLLineShape
-	shouldScale?: boolean
+	shouldScale?: boolean  
 	forceSolid?: boolean
 }) {
 	const theme = useDefaultColorTheme()
@@ -341,7 +335,7 @@ function LineShapeSvg({
 			return (
 				<path
 					d={pathData}
-					stroke={theme[color].solid}
+					stroke={theme[color].solid} 
 					strokeWidth={strokeWidth}
 					fill="none"
 					transform={`scale(${scale})`}
@@ -353,13 +347,14 @@ function LineShapeSvg({
 			return (
 				<g stroke={theme[color].solid} strokeWidth={strokeWidth} transform={`scale(${scale})`}>
 					{spline.segments.map((segment, i) => {
-						const { strokeDasharray, strokeDashoffset } = forceSolid
+						const { strokeDasharray, strokeDashoffset } = forceSolid 
 							? { strokeDasharray: 'none', strokeDashoffset: 'none' }
 							: getPerfectDashProps(segment.length, strokeWidth, {
 									style: dash,
 									start: i > 0 ? 'outset' : 'none',
 									end: i < spline.segments.length - 1 ? 'outset' : 'none',
-								})
+									forceSolid,
+									})
 
 						return (
 							<path
@@ -390,15 +385,16 @@ function LineShapeSvg({
 			)
 		}
 	}
+	
 	// Cubic style spline
 	if (shape.props.spline === 'cubic') {
 		const splinePath = spline.getSvgPathData()
 		if (dash === 'solid') {
 			return (
 				<path
-					strokeWidth={strokeWidth}
+					strokeWidth={strokeWidth}  
 					stroke={theme[color].solid}
-					fill="none"
+					fill="none" 
 					d={splinePath}
 					transform={`scale(${scale})`}
 				/>
@@ -438,7 +434,7 @@ function LineShapeSvg({
 			return (
 				<path
 					d={getLineDrawPath(shape, spline, strokeWidth)}
-					strokeWidth={1}
+					strokeWidth={1} 
 					stroke={theme[color].solid}
 					fill={theme[color].solid}
 					transform={`scale(${scale})`}
