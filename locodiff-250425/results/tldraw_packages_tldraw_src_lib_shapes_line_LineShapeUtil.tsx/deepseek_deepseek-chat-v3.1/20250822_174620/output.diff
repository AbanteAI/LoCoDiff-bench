
index 1529ad147..f4652a4b5 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp9me63bxa_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_line_LineShapeUtil.tsx_extracted.txt (actual):tmp/tmpz_xt5gpz_actual.txt	
@@ -198,36 +198,6 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 		return <LineShapeSvg shouldScale shape={shape} />
 	}
 
-	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
-		const points = linePointsToArray(shape)
-		return {
-			points,
-			getSelfSnapPoints: (handle) => {
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// We want to skip the current and adjacent handles
-				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
-			},
-			getSelfSnapOutline: (handle) => {
-				// We want to skip the segments that include the handle, so
-				// find the index of the handle that shares the same index property
-				// as the initial dragging handle; this catches a quirk of create handles
-				const index = this.getHandles(shape)
-					.filter((h) => h.type === 'vertex')
-					.findIndex((h) => h.id === handle.id)!
-
-				// Get all the outline segments from the shape that don't include the handle
-				const segments = getGeometryForLineShape(shape).segments.filter(
-					(_, i) => i !== index - 1 && i !== index
-				)
-
-				if (!segments.length) return null
-				return new Group2d({ children: segments })
-			},
-		}
-	}
 	override getInterpolatedProps(
 		startShape: TLLineShape,
 		endShape: TLLineShape,
@@ -292,6 +262,37 @@ export class LineShapeUtil extends ShapeUtil<TLLineShape> {
 			scale: lerp(startShape.props.scale, endShape.props.scale, t),
 		}
 	}
+
+	override getHandleSnapGeometry(shape: TLLineShape): HandleSnapGeometry {
+		const points = linePointsToArray(shape)
+		return {
+			points,
+			getSelfSnapPoints: (handle) => {
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				// We want to skip the current and adjacent handles
+				return points.filter((_, i) => Math.abs(i - index) > 1).map(Vec.From)
+			},
+			getSelfSnapOutline: (handle) => {
+				// We want to skip the segments that include the handle, so
+				// find the index of the handle that shares the same index property
+				// as the initial dragging handle; this catches a quirk of create handles
+				const index = this.getHandles(shape)
+					.filter((h) => h.type === 'vertex')
+					.findIndex((h) => h.id === handle.id)!
+
+				// Get all the outline segments from the shape that don't include the handle
+				const segments = getGeometryForLineShape(shape).segments.filter(
+					(_, i) => i !== index - 1 && i !== index
+				)
+
+				if (!segments.length) return null
+				return new Group2d({ children: segments })
+			},
+		}
+	}
 }
 
 function linePointsToArray(shape: TLLineShape) {
