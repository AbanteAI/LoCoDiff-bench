
index 1724dd1c8..568c0bdd0 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmphdwf8531_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpg53z2duq_actual.txt	
@@ -39,6 +39,7 @@ import {
 	dataUrlToFile,
 	defaultUserPreferences,
 	getUserPreferences,
+	isDocument,
 	objectMapFromEntries,
 	objectMapKeys,
 	parseTldrawJsonFile,
@@ -117,6 +118,7 @@ export class TldrawApp {
 	}
 
 	toasts: TLUiToastsContextType | null = null
+	intl: IntlShape | null = null
 
 	private constructor(
 		public readonly userId: string,
@@ -468,10 +470,10 @@ export class TldrawApp {
 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
+	claimTemporaryFile(fileId: string) {
+		// TODO(david): check that you can't claim someone else's file (the db insert should fail)
+		// TODO(zero stuff): add table constraint
+		this.createFile(fileId)
 	}
 
 	getFilePk(fileId: string) {
@@ -491,6 +493,67 @@ export class TldrawApp {
 		})
 	}
 
+	/**
+	 * Create files from tldr files.
+	 *
+	 * @param snapshots - The snapshots to create files from.
+	 * @param token - The user's token.
+	 *
+	 * @returns The slugs of the created files.
+	 */
+	async createFilesFromTldrFiles(snapshots: TLStoreSnapshot[], token: string) {
+		const res = await fetch(TLDR_FILE_ENDPOINT, {
+			method: 'POST',
+			headers: {
+				'Content-Type': 'application/json',
+				Authorization: `Bearer ${token}`,
+			},
+			body: JSON.stringify({
+				// convert to the annoyingly similar format that the server expects
+				snapshots: snapshots.map((s) => ({
+					snapshot: s.store,
+					schema: s.schema,
+				})),
+			}),
+		})
+
+		const response = (await res.json()) as CreateFilesResponseBody
+
+		if (!res.ok || response.error) {
+			throw Error('could not create files')
+		}
+
+		// Also create a file state record for the new file
+		this.z.mutate((tx) => {
+			for (let i = 0; i < response.slugs.length; i++) {
+				const slug = response.slugs[i]
+				const entries = Object.entries(snapshots[i].store)
+				const documentEntry = entries.find(([_, value]) => isDocument(value)) as
+					| [string, TLDocument]
+					| undefined
+				const name = documentEntry?.[1]?.name || ''
+
+				const result = this.createFile({ id: slug, name })
+				if (!result.ok) {
+					console.error('Could not create file', result.error)
+					continue
+				}
+				tx.file_state.create({
+					userId: this.userId,
+					fileId: slug,
+					firstVisitAt: Date.now(),
+					lastEditAt: null,
+					lastSessionState: null,
+					lastVisitAt: null,
+					isFileOwner: true,
+					isPinned: false,
+				})
+			}
+		})
+
+		return { slugs: response.slugs }
+	}
+
 	/**
 	 * Publish a file or re-publish changes.
 	 *
@@ -889,4 +952,13 @@ export class TldrawApp {
 
 		return this.createFile({ id, name })
 	}
+
+	_slurpFileId: string | null = null
+	slurpFile() {
+		const res = this.createFile()
+		if (res.ok) {
+			this._slurpFileId = res.value.file.id
+		}
+		return res
+	}
 }
\ No newline at end of file
