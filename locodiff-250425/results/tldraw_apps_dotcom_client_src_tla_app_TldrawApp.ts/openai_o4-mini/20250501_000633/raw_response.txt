```typescript
// import { Query, QueryType, Smash, TableSchema, Zero } from '@rocicorp/zero'
import { Zero } from '@rocicorp/zero'
import { captureException } from '@sentry/react'
import {
  CreateFilesResponseBody,
  createMutators,
  CreateSnapshotRequestBody,
  LOCAL_FILE_PREFIX,
  MAX_NUMBER_OF_FILES,
  TlaFile,
  TlaFileState,
  TlaSchema,
  TlaUser,
  UserPreferencesKeys,
  Z_PROTOCOL_VERSION,
  ZErrorCode,
} from '@tldraw/dotcom-shared'
import {
  assert,
  fetch,
  getFromLocalStorage,
  promiseWithResolve,
  Result,
  setInLocalStorage,
  structuredClone,
  throttle,
  uniqueId,
} from '@tldraw/utils'
import pick from 'lodash.pick'
import {
  Atom,
  atom,
  computed,
  createTLSchema,
  react,
  Signal,
  TLDocument,
  TLSessionStateSnapshot,
  TLUiToastsContextType,
  TLUserPreferences,
  transact,
} from 'tldraw'
import { MULTIPLAYER_SERVER, ZERO_SERVER } from '../../utils/config'
import { multiplayerAssetStore } from '../../utils/multiplayerAssetStore'
import { getScratchPersistenceKey } from '../../utils/scratch-persistence-key'
import { TLAppUiContextType } from '../utils/app-ui-events'
import { getDateFormat } from '../utils/dates'
import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
import { updateLocalSessionState, getLocalSessionStateUnsafe } from '../utils/local-session-state'

export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
export const PUBLISH_ENDPOINT = `/api/app/publish`

let appId = 0

const useProperZero = getFromLocalStorage('useProperZero') === 'true'
// eslint-disable-next-line no-console
console.log('useProperZero', useProperZero)
// @ts-expect-error
window.zero = () => {
  setInLocalStorage('useProperZero', String(!useProperZero))
  location.reload()
}

export class TldrawApp {
  config = {
    maxNumberOfFiles: MAX_NUMBER_OF_FILES,
  }

  readonly id = appId++
  readonly z: Zero<TlaSchema, any> | Zero<any, any>

  private readonly user$: Signal<TlaUser | undefined>
  private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>

  private readonly abortController = new AbortController()
  readonly disposables: (() => void)[] = [
    () => this.abortController.abort(),
    () => this.z.close(),
  ]

  private changes = new Map<Atom<any, unknown>, any>()
  private changesFlushed = null as null | ReturnType<typeof promiseWithResolve>

  private signalizeQuery<TReturn>(name: string, query: any): Signal<TReturn> {
    const view = query.materialize()
    const val$ = atom(name, view.data)
    view.addListener((res: any) => {
      this.changes.set(val$, structuredClone(res))
      if (!this.changesFlushed) this.changesFlushed = promiseWithResolve()
      queueMicrotask(() => {
        transact(() => {
          this.changes.forEach((value, key) => key.set(value))
          this.changes.clear()
        })
        this.changesFlushed?.resolve(undefined)
        this.changesFlushed = null
      })
    })
    this.disposables.push(() => view.destroy())
    return val$
  }

  private userQuery() {
    return this.z.query.user.where('id', '=', this.userId).one()
  }
  private fileStateQuery() {
    return this.z.query
      .file_state.where('userId', '=', this.userId)
      .related('file', (q: any) => q.one())
  }

  private constructor(
    public readonly userId: string,
    getToken: () => Promise<string | undefined>,
    onClientTooOld: () => void,
    trackEvent: TLAppUiContextType
  ) {
    const sessionId = uniqueId()
    this.z = useProperZero
      ? new Zero({
          auth: getToken,
          userID: userId,
          schema: (window as any).ZeroSchema || createTLSchema(),
          server: ZERO_SERVER,
          onUpdateNeeded: (reason: any) => {
            console.error('update needed', reason)
            onClientTooOld()
          },
          kvStore: window.navigator.webdriver ? 'mem' : 'idb',
          mutators: createMutators?.(userId),
        })
      : new (Zero as any)({
          userId,
          getUri: async () => {
            const params = new URLSearchParams({
              sessionId,
              protocolVersion: String(Z_PROTOCOL_VERSION),
            })
            const token = await getToken()
            params.set('accessToken', token || 'no-token-found')
            return `${MULTIPLAYER_SERVER}/app/${userId}/connect?${params}`
          },
          onMutationRejected: this.showMutationRejectionToast,
          onClientTooOld: () => onClientTooOld(),
          trackEvent,
        })

    this.user$ = this.signalizeQuery('user signal', this.userQuery())
    this.fileStates$ = this.signalizeQuery('file states signal', this.fileStateQuery())
  }

  messages = defineMessages({
    mutation_error_toast_title: { defaultMessage: 'Error' },
    publish_failed: { defaultMessage: 'Unable to publish the file.' },
    unpublish_failed: { defaultMessage: 'Unable to unpublish the file.' },
    republish_failed: { defaultMessage: 'Unable to publish the changes.' },
    unknown_error: { defaultMessage: 'An unexpected error occurred.' },
    forbidden: {
      defaultMessage: 'You do not have the necessary permissions to perform this action.',
    },
    bad_request: { defaultMessage: 'Invalid request.' },
    rate_limit_exceeded: { defaultMessage: 'Rate limit exceeded, try again later.' },
    client_too_old: {
      defaultMessage: 'Please refresh the page to get the latest version of tldraw.',
    },
    max_files_title: { defaultMessage: 'File limit reached' },
    max_files_reached: {
      defaultMessage:
        'You have reached the maximum number of files. You need to delete old files before creating new ones.',
    },
    uploadingTldrFiles: {
      defaultMessage:
        '{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
    },
    addingTldrFiles: { defaultMessage: 'Added {total} .tldr files.' },
  })

  private getMessage(id: keyof typeof this.messages) {
    const msg = this.messages[id] || this.messages.unknown_error
    if (!this.messages[id]) console.error('Missing translation for', id)
    return msg
  }

  private getIntl() {
    let intl = createIntl()
    if (!intl) {
      setupCreateIntl({ defaultLocale: 'en', locale: this.user$.get()?.locale ?? 'en', messages: {} })
      intl = createIntl()!
    }
    return intl
  }

  private showMutationRejectionToast = throttle((errorCode: ZErrorCode) => {
    const desc = this.getMessage(errorCode)
    this.toasts?.addToast({
      title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
      description: this.getIntl().formatMessage(desc),
    })
  }, 3000)

  toasts: TLUiToastsContextType | null = null

  async preload(initialUserData: TlaUser) {
    let didCreate = false
    await this.userQuery().preload().complete
    if (!this.user$.get()) {
      didCreate = true
      this.z.mutate.user.insert(initialUserData)
      updateLocalSessionState((s) => ({ ...s, shouldShowWelcomeDialog: true }))
    }
    await this.fileStateQuery().preload().complete
    return didCreate
  }

  private canCreateNewFile() {
    return this.getUserOwnFiles().length < this.config.maxNumberOfFiles
  }

  private showMaxFilesToast() {
    this.toasts?.addToast({
      title: this.getIntl().formatMessage(this.messages.max_files_title),
      description: this.getIntl().formatMessage(this.messages.max_files_reached),
      keepOpen: true,
    })
  }

  async createFile(fileOrId?: string | Partial<TlaFile>) {
    if (!this.canCreateNewFile()) {
      this.showMaxFilesToast()
      return Result.err('max number of files reached')
    }
    const file: TlaFile = {
      id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
      ownerId: this.userId,
      createSource: null,
      isEmpty: true,
      createdAt: Date.now(),
      lastPublished: 0,
      name: this.getFallbackFileName(Date.now()),
      published: false,
      publishedSlug: uniqueId(),
      shared: true,
      sharedLinkType: 'edit',
      thumbnail: '',
      updatedAt: Date.now(),
      isDeleted: false,
    }
    if (typeof fileOrId === 'object') {
      Object.assign(file, fileOrId)
      if (!file.name) file.name = this.getFallbackFileName(file.createdAt)
    }
    const fs: TlaFileState = {
      fileId: file.id,
      userId: this.userId,
      firstVisitAt: null,
      lastEditAt: null,
      lastSessionState: null,
      lastVisitAt: null,
      isFileOwner: true,
      isPinned: false,
    }
    await this.z.mutate.file.insertWithFileState({ file, fileState: fs })
    return Result.ok({ file })
  }

  private getFallbackFileName(time: number) {
    const d = new Date(time)
    return this.getIntl().formatDate(d, getDateFormat(d))
  }

  getFileName(file: TlaFile | string | null, useDateFallback = true): string | undefined {
    if (typeof file === 'string') file = this.getFile(file)
    if (!file) return
    if (typeof file.name === 'undefined') {
      captureException(new Error('file.name undefined: ' + JSON.stringify(file)))
    }
    const name = file.name?.trim()
    if (name) return name
    if (useDateFallback) return this.getFallbackFileName(file.createdAt)
  }

  async slurpFile() {
    return this.createFile({
      createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
    })
  }

  toggleFileShared(fileId: string) {
    const f = this.getFile(fileId)
    if (!f || f.ownerId !== this.userId) throw Error('user cannot edit that file')
    this.z.mutate.file.update({ id: fileId, shared: !f.shared })
  }

  getFile(fileId?: string) {
    return fileId ? this.getUserOwnFiles().find((f) => f.id === fileId) ?? null : null
  }

  isFileOwner(fileId: string) {
    const f = this.getFile(fileId)
    return !!f && f.ownerId === this.userId
  }

  async publishFile(fileId: string) {
    const f = this.getFile(fileId)
    if (!f || !this.isFileOwner(fileId)) throw Error('user cannot edit that file')
    const name = this.getFileName(f) || ''
    this.z.mutate.file.update({ id: fileId, name, published: true, lastPublished: Date.now() })
  }

  async unpublishFile(fileId: string) {
    const f = this.getFile(fileId)
    if (!f || !this.isFileOwner(fileId)) throw Error('user cannot edit that file')
    if (!f.published) return
    this.z.mutate.file.update({ id: fileId, published: false })
  }

  async deleteOrForgetFile(fileId: string) {
    const f = this.getFile(fileId)
    if (!f) return
    await this.z.mutate.file.deleteOrForget(f)
  }

  async pinOrUnpinFile(fileId: string) {
    const fs = this.getFileState(fileId)
    if (!fs) return
    await this.z.mutate.file_state.update({
      fileId,
      userId: this.userId,
      isPinned: !fs.isPinned,
    })
  }

  getUserOwnFiles() {
    return this.getUserFileStates().map((s) => s.file!).filter(Boolean)
  }

  getUserFileStates() {
    return this.fileStates$.get()
  }

  private getOrCreateFileState(fileId: string) {
    const existing = this.getFileState(fileId)
    if (!existing) {
      this.z.mutate.file_state.insert({
        fileId,
        userId: this.userId,
        firstVisitAt: Date.now(),
        lastEditAt: null,
        lastSessionState: null,
        lastVisitAt: null,
        isFileOwner: this.isFileOwner(fileId),
        isPinned: false,
      })
    }
  }

  getFileState(fileId: string) {
    return this.getUserFileStates().find((s) => s.fileId === fileId)
  }

  onFileEnter(fileId: string) {
    this.getOrCreateFileState(fileId)
    this.updateFileState(fileId, { lastVisitAt: Date.now() })
  }

  onFileEdit(fileId: string) {
    this.updateFileState(fileId, { lastEditAt: Date.now() })
  }

  onFileSessionStateUpdate(fileId: string, sessionState: TLSessionStateSnapshot) {
    this.updateFileState(fileId, {
      lastSessionState: JSON.stringify(sessionState),
      lastVisitAt: Date.now(),
    })
  }

  onFileExit(fileId: string) {
    this.updateFileState(fileId, { lastVisitAt: Date.now() })
  }

  private updateFileState(fileId: string, partial: Partial<TlaFileState>) {
    const fs = this.getFileState(fileId)
    if (fs) {
      this.z.mutate.file_state.update({ fileId, userId: fs.userId, ...partial })
    }
  }

  getCurrentUserId() {
    return assert(getLocalSessionStateUnsafe().auth?.userId, 'no user')
  }
  getCurrentUser() {
    const u = this.getUser(this.getCurrentUserId())
    if (!u) throw Error('no user')
    return u
  }

  getUser(userId: string) {
    // @ts-ignore
    return this.user$.get()
  }

  static async create(opts: {
    userId: string
    fullName: string
    email: string
    avatar: string
    getToken(): Promise<string | undefined>
    onClientTooOld(): void
    trackEvent: TLAppUiContextType
  }) {
    const initial = {
      id: opts.userId,
      name: opts.fullName,
      email: opts.email,
      avatar: opts.avatar,
    }
    const app = new TldrawApp(
      opts.userId,
      opts.getToken,
      opts.onClientTooOld,
      opts.trackEvent
    )
    window.app = app
    const didCreate = await app.preload(initial)
    if (didCreate) opts.trackEvent('create-user', { source: 'app' })
    return { app, userId: opts.userId }
  }
}
```