import { Zero } from '@rocicorp/zero'
import { captureException } from '@sentry/react'
import {
	CreateFilesResponseBody,
	createMutators,
	CreateSnapshotRequestBody,
	LOCAL_FILE_PREFIX,
	MAX_NUMBER_OF_FILES,
	TlaFile,
	TlaFileState,
	TlaMutators,
	TlaSchema,
	TlaUser,
	UserPreferencesKeys,
	Z_PROTOCOL_VERSION,
	schema as zeroSchema,
	ZErrorCode,
} from '@tldraw/dotcom-shared'
import {
	assert,
	fetch,
	getFromLocalStorage,
	promiseWithResolve,
	Result,
	setInLocalStorage,
	structuredClone,
	throttle,
	uniqueId,
} from '@tldraw/utils'
import pick from 'lodash.pick'
import {
	assertExists,
	Atom,
	atom,
	computed,
	createTLSchema,
	createTLUser,
	dataUrlToFile,
	defaultUserPreferences,
	getUserPreferences,
	objectMapFromEntries,
	objectMapKeys,
	parseTldrawJsonFile,
	react,
	Signal,
	TLDocument,
	TLSessionStateSnapshot,
	TLUiToastsContextType,
	TLUserPreferences,
	transact,
} from 'tldraw'
import { MULTIPLAYER_SERVER, ZERO_SERVER } from '../../utils/config'
import { multiplayerAssetStore } from '../../utils/multiplayerAssetStore'
import { getScratchPersistenceKey } from '../../utils/scratch-persistence-key'
import { TLAppUiContextType } from '../utils/app-ui-events'
import { getDateFormat } from '../utils/dates'
import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
import { updateLocalSessionState } from '../utils/local-session-state'
import { Zero as ZeroPolyfill } from './zero-polyfill'

export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
export const PUBLISH_ENDPOINT = `/api/app/publish`

let appId = 0
const useProperZero = getFromLocalStorage('useProperZero') === 'true'
console.log('useProperZero', useProperZero)
window.zero = () => {
	setInLocalStorage('useProperZero', String(!useProperZero))
	location.reload()
}

export class TldrawApp {
	config = {
		maxNumberOfFiles: MAX_NUMBER_OF_FILES,
	}

	readonly id = appId++

	readonly z: ZeroPolyfill | Zero<TlaSchema, TlaMutators>

	private readonly user$: Signal<TlaUser | undefined>
	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>

	private readonly abortController = new AbortController()
	readonly disposables: (() => void)[] = [() => this.abortController.abort(), () => this.z.close()]

	changes: Map<Atom<any, unknown>, any> = new Map()
	changesFlushed = null as null | ReturnType<typeof promiseWithResolve>

	private signalizeQuery<TReturn>(name: string, query: any): Signal<TReturn> {
		const view = query.materialize()
		const val$ = atom(name, view.data)
		view.addListener((res: any) => {
			this.changes.set(val$, structuredClone(res))
			if (!this.changesFlushed) {
				this.changesFlushed = promiseWithResolve()
			}
			queueMicrotask(() => {
				transact(() => {
					this.changes.forEach((value, key) => {
						key.set(value)
					})
					this.changes.clear()
				})
				this.changesFlushed?.resolve(undefined)
				this.changesFlushed = null
			})
		})
		this.disposables.push(() => {
			view.destroy()
		})
		return val$
	}

	toasts: TLUiToastsContextType | null = null

	private constructor(
		public readonly userId: string,
		getToken: () => Promise<string | undefined>,
		onClientTooOld: () => void,
		trackEvent: TLAppUiContextType
	) {
		const sessionId = uniqueId()
		this.z = useProperZero
			? new Zero<TlaSchema, TlaMutators>({
					auth: getToken,
					userID: userId,
					schema: zeroSchema,
					server: ZERO_SERVER,
					mutators: createMutators(userId),
					onUpdateNeeded(reason) {
						console.error('update needed', reason)
						onClientTooOld()
					},
					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
				})
			: new ZeroPolyfill({
					userId,
					getUri: async () => {
						const params = new URLSearchParams({
							sessionId,
							protocolVersion: String(Z_PROTOCOL_VERSION),
						})
						const token = await getToken()
						params.set('accessToken', token || 'no-token-found')
						return `${MULTIPLAYER_SERVER}/app/${userId}/connect?${params}`
					},
					onMutationRejected: this.showMutationRejectionToast,
					onClientTooOld: () => onClientTooOld(),
					trackEvent,
				})

		this.user$ = this.signalizeQuery('user signal', this.userQuery())
		this.fileStates$ = this.signalizeQuery('file states signal', this.fileStateQuery())
	}

	private userQuery() {
		return this.z.query.user.where('id', '=', this.userId).one()
	}

	private fileStateQuery() {
		return this.z.query.file_state
			.where('userId', '=', this.userId)
			.related('file', (q: any) => q.one())
	}

	async preload(initialUserData: TlaUser) {
		let didCreate = false
		await this.userQuery().preload().complete
		await this.changesFlushed
		if (!this.user$.get()) {
			didCreate = true
			this.z.mutate.user.insert(initialUserData)
			updateLocalSessionState((state) => ({ ...state, shouldShowWelcomeDialog: true }))
		}
		await new Promise((resolve) => {
			let unsub = () => {}
			unsub = react('wait for user', () => this.user$.get() && resolve(unsub()))
		})
		if (!this.user$.get()) {
			throw Error('could not create user')
		}
		await this.fileStateQuery().preload().complete
		return didCreate
	}

	messages = defineMessages({
		publish_failed: { defaultMessage: 'Unable to publish the file.' },
		unpublish_failed: { defaultMessage: 'Unable to unpublish the file.' },
		republish_failed: { defaultMessage: 'Unable to publish the changes.' },
		unknown_error: { defaultMessage: 'An unexpected error occurred.' },
		forbidden: {
			defaultMessage: 'You do not have the necessary permissions to perform this action.',
		},
		bad_request: { defaultMessage: 'Invalid request.' },
		rate_limit_exceeded: {
			defaultMessage: 'Rate limit exceeded, try again later.',
		},
		client_too_old: {
			defaultMessage: 'Please refresh the page to get the latest version of tldraw.',
		},
		max_files_title: {
			defaultMessage: 'File limit reached',
		},
		max_files_reached: {
			defaultMessage:
				'You have reached the maximum number of files. You need to delete old files before creating new ones.',
		},
		uploadingTldrFiles: {
			defaultMessage:
				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
		},
		addingTldrFiles: {
			defaultMessage: 'Added {total} .tldr files.',
		},
	})

	getMessage(id: keyof typeof this.messages) {
		let msg = this.messages[id]
		if (!msg) {
			console.error('Could not find a translation for this error code', id)
			msg = this.messages.unknown_error
		}
		return msg
	}

	showMutationRejectionToast = throttle((errorCode: ZErrorCode) => {
		const descriptor = this.getMessage(errorCode)
		this.toasts?.addToast({
			title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
			description: this.getIntl().formatMessage(descriptor),
		})
	}, 3000)

	dispose() {
		this.disposables.forEach((d) => d())
	}

	getUser() {
		return assertExists(this.user$.get(), 'no user')
	}

	tlUser = createTLUser({
		userPreferences: computed('user prefs', () => {
			const user = this.getUser()
			return {
				...(pick(user, UserPreferencesKeys) as TLUserPreferences),
				id: this.userId,
			}
		}),
		setUserPreferences: ({ id: _, ...others }: Partial<TLUserPreferences>) => {
			const user = this.getUser()

			const nonNull = Object.fromEntries(
				Object.entries(others).filter(([_, value]) => value !== null)
			) as Partial<TLUserPreferences>

			this.z.mutate.user.update({
				id: user.id,
				...(nonNull as any),
			})
		},
	})

	getUserOwnFiles() {
		const fileStates = this.getUserFileStates()
		const files: TlaFile[] = []
		fileStates.forEach((f) => {
			if (f.file) files.push(f.file)
		})
		return files
	}

	getUserFileStates() {
		return this.fileStates$.get()
	}

	lastRecentFileOrdering = null as null | Array<{
		fileId: TlaFile['id']
		isPinned: boolean
		date: number
	}>

	@computed
	getUserRecentFiles() {
		const myFiles = objectMapFromEntries(this.getUserOwnFiles().map((f) => [f.id, f]))
		const myStates = objectMapFromEntries(this.getUserFileStates().map((f) => [f.fileId, f]))

		const myFileIds = new Set<string>([...objectMapKeys(myFiles), ...objectMapKeys(myStates)])

		const nextRecentFileOrdering: {
			fileId: TlaFile['id']
			isPinned: boolean
			date: number
		}[] = []

		for (const fileId of myFileIds) {
			const file = myFiles[fileId]
			let state: (typeof myStates)[string] | undefined = myStates[fileId]
			if (!file) continue
			if (!state && !file.isDeleted && file.ownerId === this.userId) {
				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
			}
			if (!state) {
				continue
			}
			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
			if (existing && existing.isPinned === state.isPinned) {
				nextRecentFileOrdering.push(existing)
				continue
			}

			nextRecentFileOrdering.push({
				fileId,
				isPinned: state.isPinned ?? false,
				date: state.lastEditAt ?? state.firstVisitAt ?? file.createdAt ?? 0,
			})
		}

		nextRecentFileOrdering.sort((a, b) => b.date - a.date)

		this.lastRecentFileOrdering = nextRecentFileOrdering

		return nextRecentFileOrdering
	}

	getUserSharedFiles() {
		return Array.from(
			new Set(
				this.getUserFileStates()
					.map((s) => {
						if (s.file!.ownerId === this.userId) return
						return s.file
					})
					.filter(Boolean) as TlaFile[]
			)
		)
	}

	private canCreateNewFile() {
		const numberOfFiles = this.getUserOwnFiles().length
		return numberOfFiles < this.config.maxNumberOfFiles
	}

	private showMaxFilesToast() {
		this.toasts?.addToast({
			title: this.getIntl().formatMessage(this.messages.max_files_title),
			description: this.getIntl().formatMessage(this.messages.max_files_reached),
			keepOpen: true,
		})
	}

	async createFile(
		fileOrId?: string | Partial<TlaFile>
	): Promise<Result<{ file: TlaFile }, 'max number of files reached'>> {
		if (!this.canCreateNewFile()) {
			this.showMaxFilesToast()
			return Result.err('max number of files reached')
		}

		const file: TlaFile = {
			id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
			ownerId: this.userId,
			isEmpty: true,
			createdAt: Date.now(),
			lastPublished: 0,
			name: this.getFallbackFileName(Date.now()),
			published: false,
			publishedSlug: uniqueId(),
			shared: true,
			sharedLinkType: 'edit',
			thumbnail: '',
			updatedAt: Date.now(),
			isDeleted: false,
			createSource: null,
		}
		if (typeof fileOrId === 'object') {
			Object.assign(file, fileOrId)
			if (!file.name) {
				Object.assign(file, { name: this.getFallbackFileName(file.createdAt) })
			}
		}
		const fileState = {
			isFileOwner: true,
			fileId: file.id,
			userId: this.userId,
			firstVisitAt: null,
			isPinned: false,
			lastEditAt: null,
			lastSessionState: null,
			lastVisitAt: null,
		}
		await this.z.mutate.file.insertWithFileState({ file, fileState })

		return Result.ok({ file })
	}

	getFallbackFileName(time: number) {
		const createdAt = new Date(time)
		const format = getDateFormat(createdAt)
		return this.getIntl().formatDate(createdAt, format)
	}

	getFileName(file: TlaFile | string | null, useDateFallback: false): string | undefined
	getFileName(file: TlaFile | string | null, useDateFallback?: true): string
	getFileName(file: TlaFile | string | null, useDateFallback = true) {
		if (typeof file === 'string') {
			file = this.getFile(file)
		}
		if (!file) return ''
		assert(typeof file !== 'string', 'ok')

		if (typeof file.name === 'undefined') {
			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
		}
		const name = file.name?.trim()
		if (name) {
			return name
		}

		if (useDateFallback) {
			return this.getFallbackFileName(file.createdAt)
		}

		return
	}

	claimTemporaryFile(fileId: string) {
		this.createFile(fileId)
	}

	getFilePk(fileId: string) {
		const file = this.getFile(fileId)
		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
	}

	toggleFileShared(fileId: string) {
		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
		if (!file) throw Error('no file with id ' + fileId)

		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')

		this.z.mutate.file.update({
			id: fileId,
			shared: !file.shared,
		})
	}

	/**
	 * Publish a file or re-publish changes.
	 *
	 * @param fileId - The file id to unpublish.
	 * @returns A result indicating success or failure.
	 */
	publishFile(fileId: string) {
		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
		if (!file) throw Error(`No file with that id`)
		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')

		const name = this.getFileName(file)

		this.z.mutate.file.update({
			id: fileId,
			name,
			published: true,
			lastPublished: Date.now(),
		})
	}

	getFile(fileId?: string): TlaFile | null {
		if (!fileId) return null
		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
	}

	isFileOwner(fileId: string) {
		const file = this.getFile(fileId)
		return file && file.ownerId === this.userId
	}

	requireFile(fileId: string): TlaFile {
		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
	}

	/**
	 * Unpublish a file.
	 *
	 * @param fileId - The file id to unpublish.
	 * @returns A result indicating success or failure.
	 */
	unpublishFile(fileId: string) {
		const file = this.requireFile(fileId)
		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')

		if (!file.published) return Result.ok('success')

		this.z.mutate.file.update({
			id: fileId,
			published: false,
		})

		return Result.ok('success')
	}

	/**
	 * Remove a user's file states for a file and delete the file if the user is the owner of the file.
	 *
	 * @param fileId - The file id.
	 */
	async deleteOrForgetFile(fileId: string) {
		const file = this.getFile(fileId)
		if (!file) return

		await this.z.mutate.file.deleteOrForget(file)
	}

	/**
	 * Pin a file (or unpin it if it's already pinned).
	 *
	 * @param fileId - The file id.
	 */
	async pinOrUnpinFile(fileId: string) {
		const fileState = this.getFileState(fileId)

		if (!fileState) return

		this.z.mutate.file_state.update({
			fileId,
			userId: this.userId,
			isPinned: !fileState.isPinned,
		})
	}

	setFileSharedLinkType(fileId: string, sharedLinkType: TlaFile['sharedLinkType'] | 'no-access') {
		const file = this.requireFile(fileId)

		if (this.userId !== file.ownerId) {
			throw Error('user cannot edit that file')
		}

		if (sharedLinkType === 'no-access') {
			this.z.mutate.file.update({ id: fileId, shared: false })
			return
		}
		this.z.mutate.file.update({ id: fileId, shared: true, sharedLinkType })
	}

	updateUser(partial: Partial<TlaUser>) {
		const user = this.getUser()
		return this.z.mutate.user.update({
			id: user.id,
			...partial,
		})
	}

	updateUserExportPreferences(
		exportPreferences: Partial<
			Pick<TlaUser, 'exportFormat' | 'exportPadding' | 'exportBackground' | 'exportTheme'>
		>
	) {
		this.updateUser(exportPreferences)
	}

	async createFileStateIfNotExists(fileId: string) {
		await this.changesFlushed
		const fileState = this.getFileState(fileId)