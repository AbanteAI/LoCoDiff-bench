--- tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual)@@ -1,4 +1,3 @@-// import { Query, QueryType, Smash, TableSchema, Zero } from '@rocicorp/zero'
 import { Zero } from '@rocicorp/zero'
 import { captureException } from '@sentry/react'
 import {
@@ -64,9 +63,7 @@ 
 let appId = 0
 const useProperZero = getFromLocalStorage('useProperZero') === 'true'
-// eslint-disable-next-line no-console
 console.log('useProperZero', useProperZero)
-// @ts-expect-error
 window.zero = () => {
 	setInLocalStorage('useProperZero', String(!useProperZero))
 	location.reload()
@@ -91,7 +88,6 @@ 	changesFlushed = null as null | ReturnType<typeof promiseWithResolve>
 
 	private signalizeQuery<TReturn>(name: string, query: any): Signal<TReturn> {
-		// fail if closed?
 		const view = query.materialize()
 		const val$ = atom(name, view.data)
 		view.addListener((res: any) => {
@@ -140,7 +136,6 @@ 				})
 			: new ZeroPolyfill({
 					userId,
-					// auth: encodedJWT,
 					getUri: async () => {
 						const params = new URLSearchParams({
 							sessionId,
@@ -150,9 +145,6 @@ 						params.set('accessToken', token || 'no-token-found')
 						return `${MULTIPLAYER_SERVER}/app/${userId}/connect?${params}`
 					},
-					// schema,
-					// This is often easier to develop with if you're frequently changing
-					// the schema. Switch to 'idb' for local-persistence.
 					onMutationRejected: this.showMutationRejectionToast,
 					onClientTooOld: () => onClientTooOld(),
 					trackEvent,
@@ -193,27 +185,14 @@ 	}
 
 	messages = defineMessages({
-		// toast title
-		mutation_error_toast_title: { defaultMessage: 'Error' },
-		// toast descriptions
-		publish_failed: {
-			defaultMessage: 'Unable to publish the file.',
-		},
-		unpublish_failed: {
-			defaultMessage: 'Unable to unpublish the file.',
-		},
-		republish_failed: {
-			defaultMessage: 'Unable to publish the changes.',
-		},
-		unknown_error: {
-			defaultMessage: 'An unexpected error occurred.',
-		},
+		publish_failed: { defaultMessage: 'Unable to publish the file.' },
+		unpublish_failed: { defaultMessage: 'Unable to unpublish the file.' },
+		republish_failed: { defaultMessage: 'Unable to publish the changes.' },
+		unknown_error: { defaultMessage: 'An unexpected error occurred.' },
 		forbidden: {
 			defaultMessage: 'You do not have the necessary permissions to perform this action.',
 		},
-		bad_request: {
-			defaultMessage: 'Invalid request.',
-		},
+		bad_request: { defaultMessage: 'Invalid request.' },
 		rate_limit_exceeded: {
 			defaultMessage: 'Rate limit exceeded, try again later.',
 		},
@@ -232,8 +211,6 @@ 				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
 		},
 		addingTldrFiles: {
-			// no need for pluralization, if there was only one file we navigated to it
-			// so there's no need to show a toast.
 			defaultMessage: 'Added {total} .tldr files.',
 		},
 	})
@@ -257,7 +234,6 @@ 
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
 	}
 
 	getUser() {
@@ -323,12 +299,9 @@ 			let state: (typeof myStates)[string] | undefined = myStates[fileId]
 			if (!file) continue
 			if (!state && !file.isDeleted && file.ownerId === this.userId) {
-				// create a file state for this file
-				// this allows us to 'undelete' soft-deleted files by manually toggling 'isDeleted' in the backend
 				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
 			}
 			if (!state) {
-				// if the file is deleted, we don't want to show it in the recent files
 				continue
 			}
 			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
@@ -344,10 +317,8 @@ 			})
 		}
 
-		// sort by date with most recent first
 		nextRecentFileOrdering.sort((a, b) => b.date - a.date)
 
-		// stash the ordering for next time
 		this.lastRecentFileOrdering = nextRecentFileOrdering
 
 		return nextRecentFileOrdering
@@ -358,7 +329,6 @@ 			new Set(
 				this.getUserFileStates()
 					.map((s) => {
-						// skip files where the owner is the current user
 						if (s.file!.ownerId === this.userId) return
 						return s.file
 					})
@@ -391,9 +361,6 @@ 		const file: TlaFile = {
 			id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
 			ownerId: this.userId,
-			// these two owner properties are overridden by postgres triggers
-			ownerAvatar: this.getUser().avatar,
-			ownerName: this.getUser().name,
 			isEmpty: true,
 			createdAt: Date.now(),
 			lastPublished: 0,
@@ -424,12 +391,6 @@ 			lastVisitAt: null,
 		}
 		await this.z.mutate.file.insertWithFileState({ file, fileState })
-		// todo: add server error handling for real Zero
-		// .server.catch((res: { error: string; details: string }) => {
-		// 	if (res.details === ZErrorCode.max_files_reached) {
-		// 		this.showMaxFilesToast()
-		// 	}
-		// })
 
 		return Result.ok({ file })
 	}
@@ -446,16 +407,12 @@ 		if (typeof file === 'string') {
 			file = this.getFile(file)
 		}
-		if (!file) {
-			// possibly a published file
-			return ''
-		}
+		if (!file) return ''
 		assert(typeof file !== 'string', 'ok')
 
 		if (typeof file.name === 'undefined') {
 			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
 		}
-		// need a ? here because we were seeing issues on sentry where file.name was undefined
 		const name = file.name?.trim()
 		if (name) {
 			return name
@@ -468,10 +425,8 @@ 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
+	claimTemporaryFile(fileId: string) {
+		this.createFile(fileId)
 	}
 
 	getFilePk(fileId: string) {
@@ -502,10 +457,8 @@ 		if (!file) throw Error(`No file with that id`)
 		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
 
-		// We're going to bake the name of the file, if it's undefined
 		const name = this.getFileName(file)
 
-		// Optimistic update
 		this.z.mutate.file.update({
 			id: fileId,
 			name,
@@ -540,7 +493,6 @@ 
 		if (!file.published) return Result.ok('success')
 
-		// Optimistic update
 		this.z.mutate.file.update({
 			id: fileId,
 			published: false,
@@ -558,7 +510,6 @@ 		const file = this.getFile(fileId)
 		if (!file) return
 
-		// Optimistic update, remove file and file states
 		await this.z.mutate.file.deleteOrForget(file)
 	}
 
@@ -572,7 +523,7 @@ 
 		if (!fileState) return
 
-		return this.z.mutate.file_state.update({
+		this.z.mutate.file_state.update({
 			fileId,
 			userId: this.userId,
 			isPinned: !fileState.isPinned,
@@ -611,282 +562,4 @@ 
 	async createFileStateIfNotExists(fileId: string) {
 		await this.changesFlushed
-		const fileState = this.getFileState(fileId)
-		if (!fileState) {
-			const fs: TlaFileState = {
-				fileId,
-				userId: this.userId,
-				firstVisitAt: Date.now(),
-				lastEditAt: null,
-				lastSessionState: null,
-				lastVisitAt: null,
-				isPinned: false,
-				// doesn't really matter what this is because it is
-				// overwritten by postgres
-				isFileOwner: this.isFileOwner(fileId),
-			}
-			this.z.mutate.file_state.insert(fs)
-		}
-	}
-
-	getFileState(fileId: string) {
-		return this.getUserFileStates().find((f) => f.fileId === fileId)
-	}
-
-	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
-		const fileState = this.getFileState(fileId)
-		if (!fileState) return
-		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
-	}
-
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
-	async onFileEnter(fileId: string) {
-		await this.createFileStateIfNotExists(fileId)
-		this.updateFileState(fileId, {
-			lastVisitAt: Date.now(),
-		})
-	}
-
-	onFileEdit(fileId: string) {
-		this.updateFileState(fileId, { lastEditAt: Date.now() })
-	}
-
-	onFileSessionStateUpdate(fileId: string, sessionState: TLSessionStateSnapshot) {
-		this.updateFileState(fileId, {
-			lastSessionState: JSON.stringify(sessionState),
-			lastVisitAt: Date.now(),
-		})
-	}
-
-	onFileExit(fileId: string) {
-		this.updateFileState(fileId, { lastVisitAt: Date.now() })
-	}
-
-	static async create(opts: {
-		userId: string
-		fullName: string
-		email: string
-		avatar: string
-		getToken(): Promise<string | undefined>
-		onClientTooOld(): void
-		trackEvent: TLAppUiContextType
-	}) {
-		// This is an issue: we may have a user record but not in the store.
-		// Could be just old accounts since before the server had a version
-		// of the store... but we should probably identify that better.
-
-		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
-		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
-		// @ts-expect-error
-		window.app = app
-		const didCreate = await app.preload({
-			id: opts.userId,
-			name: opts.fullName,
-			email: opts.email,
-			color: color ?? defaultUserPreferences.color,
-			avatar: opts.avatar,
-			exportFormat: 'png',
-			exportTheme: 'light',
-			exportBackground: false,
-			exportPadding: false,
-			createdAt: Date.now(),
-			updatedAt: Date.now(),
-			flags: '',
-			allowAnalyticsCookie: null,
-			...restOfPreferences,
-			locale: restOfPreferences.locale ?? null,
-			animationSpeed: restOfPreferences.animationSpeed ?? null,
-			edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
-			colorScheme: restOfPreferences.colorScheme ?? null,
-			isSnapMode: restOfPreferences.isSnapMode ?? null,
-			isWrapMode: restOfPreferences.isWrapMode ?? null,
-			isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
-			isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
-		})
-		if (didCreate) {
-			opts.trackEvent('create-user', { source: 'app' })
-		}
-		return { app, userId: opts.userId }
-	}
-
-	getIntl() {
-		const intl = createIntl()
-		if (intl) return intl
-		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
-		setupCreateIntl({
-			defaultLocale: 'en',
-			locale: this.user$.get()?.locale ?? 'en',
-			messages: {},
-		})
-		return createIntl()!
-	}
-
-	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
-		const totalFiles = files.length
-		let uploadedFiles = 0
-		if (totalFiles === 0) return
-
-		// this is only approx since we upload the files in pieces and they are base64 encoded
-		// in the json blob, so this will usually be a big overestimate. But that's fine because
-		// if the upload finishes before the number hits 100% people are pleasantly surprised.
-		const approxTotalBytes = files.reduce((acc, f) => acc + f.size, 0)
-		let bytesUploaded = 0
-		const getApproxPercentage = () =>
-			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
-		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
-
-		// only bother showing the percentage if it's going to take a while
-
-		let uploadingToastId = undefined as undefined | string
-		let didFinishUploading = false
-
-		// give it a second before we show the toast, in case the upload is fast
-		setTimeout(() => {
-			if (didFinishUploading || this.abortController.signal.aborted) return
-			// if it's close to the end, don't show the progress toast
-			if (getApproxPercentage() > 50) return
-			uploadingToastId = this.toasts?.addToast({
-				severity: 'info',
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: uploadedFiles,
-				}),
-
-				description: `${getApproxPercentage()}%`,
-				keepOpen: true,
-			})
-		}, 800)
-
-		const updateToast = (args: { title?: string; description?: string }) => {
-			if (!uploadingToastId) return
-			this.toasts?.toasts.update((toasts) =>
-				toasts.map((t) =>
-					t.id === uploadingToastId
-						? {
-								...t,
-								...args,
-							}
-						: t
-				)
-			)
-		}
-
-		for (const f of files) {
-			const res = await this.uploadTldrFile(f, (bytes) => {
-				bytesUploaded += bytes
-				updateProgress()
-			}).catch((e) => Result.err(e))
-			if (!res.ok) {
-				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-				this.toasts?.addToast({
-					severity: 'error',
-					title: this.getIntl().formatMessage(this.messages.unknown_error),
-					keepOpen: true,
-				})
-				console.error(res.error)
-				return
-			}
-
-			updateToast({
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: ++uploadedFiles + 1,
-				}),
-			})
-
-			if (onFirstFileUploaded) {
-				onFirstFileUploaded(res.value.file)
-				onFirstFileUploaded = undefined
-			}
-		}
-		didFinishUploading = true
-
-		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-
-		if (totalFiles > 1) {
-			this.toasts?.addToast({
-				severity: 'success',
-				title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
-					total: files.length,
-				}),
-				keepOpen: true,
-			})
-		}
-	}
-
-	private async uploadTldrFile(
-		file: File,
-		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
-	) {
-		const json = await file.text()
-		const parseFileResult = parseTldrawJsonFile({
-			schema: createTLSchema(),
-			json,
-		})
-
-		if (!parseFileResult.ok) {
-			return Result.err('could not parse file')
-		}
-
-		const snapshot = parseFileResult.value.getStoreSnapshot()
-
-		for (const record of Object.values(snapshot.store)) {
-			if (
-				record.typeName !== 'asset' ||
-				record.type === 'bookmark' ||
-				!record.props.src?.startsWith('data:')
-			) {
-				snapshot.store[record.id] = record
-				continue
-			}
-			const src = record.props.src
-			const file = await dataUrlToFile(
-				src,
-				record.props.name,
-				record.props.mimeType ?? 'application/octet-stream'
-			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
-			const assetsStore = multiplayerAssetStore()
-			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
-			onProgress?.(file.size)
-			snapshot.store[record.id] = {
-				...record,
-				props: {
-					...record.props,
-					src: newSrc,
-				},
-			}
-		}
-		const body = JSON.stringify({
-			snapshots: [
-				{
-					schema: snapshot.schema,
-					snapshot: snapshot.store,
-				} satisfies CreateSnapshotRequestBody,
-			],
-		})
-
-		const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
-		onProgress?.(body.length)
-		if (!res.ok) {
-			throw Error('could not upload file ' + (await res.text()))
-		}
-		const response = (await res.json()) as CreateFilesResponseBody
-		if (response.error) {
-			throw Error(response.message)
-		}
-		const id = response.slugs[0]
-		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
-			''
-
-		return this.createFile({ id, name })
-	}
-}+		const fileState = this.getFileState(fileId)