
index 1724dd1c..f438fdd3 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmp1e07wmd8_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpc5o2xin0_actual.txt	
@@ -126,7 +126,7 @@ export class TldrawApp {
 	) {
 		const sessionId = uniqueId()
 		this.z = useProperZero
-			? new Zero<TlaSchema, TlaMutators>({
+			? new Zero({
 					auth: getToken,
 					userID: userId,
 					schema: zeroSchema,
@@ -474,11 +474,6 @@ export class TldrawApp {
 		})
 	}
 
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
-	}
-
 	toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error('no file with id ' + fileId)
@@ -651,7 +646,9 @@ export class TldrawApp {
 	}
 
 	onFileEdit(fileId: string) {
-		this.updateFileState(fileId, { lastEditAt: Date.now() })
+		this.updateFileState(fileId, {
+			lastEditAt: Date.now(),
+		})
 	}
 
 	onFileSessionStateUpdate(fileId: string, sessionState: TLSessionStateSnapshot) {
@@ -662,7 +659,9 @@ export class TldrawApp {
 	}
 
 	onFileExit(fileId: string) {
-		this.updateFileState(fileId, { lastVisitAt: Date.now() })
+		this.updateFileState(fileId, {
+			lastVisitAt: Date.now(),
+		})
 	}
 
 	static async create(opts: {
