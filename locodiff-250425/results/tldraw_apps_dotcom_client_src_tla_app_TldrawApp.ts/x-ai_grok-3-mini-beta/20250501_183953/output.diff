
index 1724dd1c..7f2ca7ae 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmpk_2mvfp6_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpxy_5re5q_actual.txt	
@@ -1,21 +1,13 @@
-// import { Query, QueryType, Smash, TableSchema, Zero } from '@rocicorp/zero'
-import { Zero } from '@rocicorp/zero'
-import { captureException } from '@sentry/react'
 import {
 	CreateFilesResponseBody,
-	createMutators,
-	CreateSnapshotRequestBody,
-	LOCAL_FILE_PREFIX,
-	MAX_NUMBER_OF_FILES,
 	TlaFile,
+	TlaFilePartial,
 	TlaFileState,
-	TlaMutators,
-	TlaSchema,
 	TlaUser,
 	UserPreferencesKeys,
+	ZErrorCode,
 	Z_PROTOCOL_VERSION,
 	schema as zeroSchema,
-	ZErrorCode,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -30,8 +22,12 @@ import {
 } from '@tldraw/utils'
 import pick from 'lodash.pick'
 import {
+	Signal,
+	TLDocument,
+	TLSessionStateSnapshot,
+	TLUiToastsContextType,
+	TLUserPreferences,
 	assertExists,
-	Atom,
 	atom,
 	computed,
 	createTLSchema,
@@ -43,12 +39,6 @@ import {
 	objectMapKeys,
 	parseTldrawJsonFile,
 	react,
-	Signal,
-	TLDocument,
-	TLSessionStateSnapshot,
-	TLUiToastsContextType,
-	TLUserPreferences,
-	transact,
 } from 'tldraw'
 import { MULTIPLAYER_SERVER, ZERO_SERVER } from '../../utils/config'
 import { multiplayerAssetStore } from '../../utils/multiplayerAssetStore'
@@ -58,6 +48,7 @@ import { getDateFormat } from '../utils/dates'
 import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
 import { Zero as ZeroPolyfill } from './zero-polyfill'
+import { Zero } from '@rocicorp/zero'
 
 export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
 export const PUBLISH_ENDPOINT = `/api/app/publish`
@@ -79,7 +70,7 @@ export class TldrawApp {
 
 	readonly id = appId++
 
-	readonly z: ZeroPolyfill | Zero<TlaSchema, TlaMutators>
+	readonly z: ZeroPolyfill | Zero<TlaSchema>
 
 	private readonly user$: Signal<TlaUser | undefined>
 	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>
@@ -126,7 +117,7 @@ export class TldrawApp {
 	) {
 		const sessionId = uniqueId()
 		this.z = useProperZero
-			? new Zero<TlaSchema, TlaMutators>({
+			? new Zero({
 					auth: getToken,
 					userID: userId,
 					schema: zeroSchema,
@@ -167,9 +158,9 @@ export class TldrawApp {
 	}
 
 	private fileStateQuery() {
-		return this.z.query.file_state
-			.where('userId', '=', this.userId)
-			.related('file', (q: any) => q.one())
+		return this.z.query.file_state.where('userId', '=', this.userId).related('file', (q: any) =>
+			q.one()
+		)
 	}
 
 	async preload(initialUserData: TlaUser) {
@@ -178,7 +169,7 @@ export class TldrawApp {
 		await this.changesFlushed
 		if (!this.user$.get()) {
 			didCreate = true
-			this.z.mutate.user.insert(initialUserData)
+			this.z.mutate.user.create(initialUserData)
 			updateLocalSessionState((state) => ({ ...state, shouldShowWelcomeDialog: true }))
 		}
 		await new Promise((resolve) => {
@@ -193,9 +184,6 @@ export class TldrawApp {
 	}
 
 	messages = defineMessages({
-		// toast title
-		mutation_error_toast_title: { defaultMessage: 'Error' },
-		// toast descriptions
 		publish_failed: {
 			defaultMessage: 'Unable to publish the file.',
 		},
@@ -217,6 +205,9 @@ export class TldrawApp {
 		rate_limit_exceeded: {
 			defaultMessage: 'Rate limit exceeded, try again later.',
 		},
+		mutation_error_toast_title: {
+			defaultMessage: 'Error',
+		},
 		client_too_old: {
 			defaultMessage: 'Please refresh the page to get the latest version of tldraw.',
 		},
@@ -255,121 +246,16 @@ export class TldrawApp {
 		})
 	}, 3000)
 
-	dispose() {
-		this.disposables.forEach((d) => d())
-		// this.store.dispose()
-	}
-
-	getUser() {
-		return assertExists(this.user$.get(), 'no user')
-	}
-
-	tlUser = createTLUser({
-		userPreferences: computed('user prefs', () => {
-			const user = this.getUser()
-			return {
-				...(pick(user, UserPreferencesKeys) as TLUserPreferences),
-				id: this.userId,
-			}
-		}),
-		setUserPreferences: ({ id: _, ...others }: Partial<TLUserPreferences>) => {
-			const user = this.getUser()
-
-			const nonNull = Object.fromEntries(
-				Object.entries(others).filter(([_, value]) => value !== null)
-			) as Partial<TLUserPreferences>
-
-			this.z.mutate.user.update({
-				id: user.id,
-				...(nonNull as any),
-			})
-		},
-	})
-
-	getUserOwnFiles() {
-		const fileStates = this.getUserFileStates()
-		const files: TlaFile[] = []
-		fileStates.forEach((f) => {
-			if (f.file) files.push(f.file)
+	getIntl() {
+		const intl = createIntl()
+		if (intl) return intl
+		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
+		setupCreateIntl({
+			defaultLocale: 'en',
+			locale: this.user$.get()?.locale ?? 'en',
+			messages: {},
 		})
-		return files
-	}
-
-	getUserFileStates() {
-		return this.fileStates$.get()
-	}
-
-	lastRecentFileOrdering = null as null | Array<{
-		fileId: TlaFile['id']
-		isPinned: boolean
-		date: number
-	}>
-
-	@computed
-	getUserRecentFiles() {
-		const myFiles = objectMapFromEntries(this.getUserOwnFiles().map((f) => [f.id, f]))
-		const myStates = objectMapFromEntries(this.getUserFileStates().map((f) => [f.fileId, f]))
-
-		const myFileIds = new Set<string>([...objectMapKeys(myFiles), ...objectMapKeys(myStates)])
-
-		const nextRecentFileOrdering: {
-			fileId: TlaFile['id']
-			isPinned: boolean
-			date: number
-		}[] = []
-
-		for (const fileId of myFileIds) {
-			const file = myFiles[fileId]
-			let state: (typeof myStates)[string] | undefined = myStates[fileId]
-			if (!file) continue
-			if (!state && !file.isDeleted && file.ownerId === this.userId) {
-				// create a file state for this file
-				// this allows us to 'undelete' soft-deleted files by manually toggling 'isDeleted' in the backend
-				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
-			}
-			if (!state) {
-				// if the file is deleted, we don't want to show it in the recent files
-				continue
-			}
-			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
-			if (existing && existing.isPinned === state.isPinned) {
-				nextRecentFileOrdering.push(existing)
-				continue
-			}
-
-			nextRecentFileOrdering.push({
-				fileId,
-				isPinned: state.isPinned ?? false,
-				date: state.lastEditAt ?? state.firstVisitAt ?? file.createdAt ?? 0,
-			})
-		}
-
-		// sort by date with most recent first
-		nextRecentFileOrdering.sort((a, b) => b.date - a.date)
-
-		// stash the ordering for next time
-		this.lastRecentFileOrdering = nextRecentFileOrdering
-
-		return nextRecentFileOrdering
-	}
-
-	getUserSharedFiles() {
-		return Array.from(
-			new Set(
-				this.getUserFileStates()
-					.map((s) => {
-						// skip files where the owner is the current user
-						if (s.file!.ownerId === this.userId) return
-						return s.file
-					})
-					.filter(Boolean) as TlaFile[]
-			)
-		)
-	}
-
-	private canCreateNewFile() {
-		const numberOfFiles = this.getUserOwnFiles().length
-		return numberOfFiles < this.config.maxNumberOfFiles
+		return createIntl()!
 	}
 
 	private showMaxFilesToast() {
@@ -413,24 +299,25 @@ export class TldrawApp {
 				Object.assign(file, { name: this.getFallbackFileName(file.createdAt) })
 			}
 		}
-		const fileState = {
-			isFileOwner: true,
-			fileId: file.id,
-			userId: this.userId,
-			firstVisitAt: null,
-			isPinned: false,
-			lastEditAt: null,
-			lastSessionState: null,
-			lastVisitAt: null,
-		}
-		await this.z.mutate.file.insertWithFileState({ file, fileState })
+		this.z.mutateBatch((tx) => {
+			tx.file.upsert(file)
+			tx.file_state.upsert({
+				isFileOwner: true,
+				fileId: file.id,
+				userId: this.userId,
+				firstVisitAt: null,
+				isPinned: false,
+				lastEditAt: null,
+				lastSessionState: null,
+				lastVisitAt: null,
+			})
+		})
 		// todo: add server error handling for real Zero
 		// .server.catch((res: { error: string; details: string }) => {
 		// 	if (res.details === ZErrorCode.max_files_reached) {
 		// 		this.showMaxFilesToast()
 		// 	}
 		// })
-
 		return Result.ok({ file })
 	}
 
@@ -446,11 +333,7 @@ export class TldrawApp {
 		if (typeof file === 'string') {
 			file = this.getFile(file)
 		}
-		if (!file) {
-			// possibly a published file
-			return ''
-		}
-		assert(typeof file !== 'string', 'ok')
+		if (!file) return
 
 		if (typeof file.name === 'undefined') {
 			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
@@ -468,12 +351,6 @@ export class TldrawApp {
 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
-	}
-
 	getFilePk(fileId: string) {
 		const file = this.getFile(fileId)
 		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
@@ -492,63 +369,126 @@ export class TldrawApp {
 	}
 
 	/**
-	 * Publish a file or re-publish changes.
+	 * Create files from tldr files.
 	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
+	 * @param snapshots - The snapshots to create files from.
+	 * @param token - The user's token.
+	 *
+	 * @returns The slugs of the created files.
+	 */
+	async createFilesFromTldrFiles(snapshots: TLStoreSnapshot[], token: string) {
+		const res = await fetch(TLDR_FILE_ENDPOINT, {
+			method: 'POST',
+			headers: {
+				'Content-Type': 'application/json',
+				Authorization: `Bearer ${token}`,
+			},
+			body: JSON.stringify({
+				// convert to the annoyingly similar format that the server expects
+				snapshots: snapshots.map((s(BigInt) => ({
+					snapshot: s.store,
+					schema: s.schema,
+				})),
+			}),
+		})
+
+		const response = (await res.json()) as CreateFilesResponseBody
+ 
+		if (!res.ok || response.error) {
+			throw Error('could not create files')
+		}
+ 
+-		// Also create a file state record for the new file(Delete
+		this.z.mutateBatch((tx) => {
+			for (let i = 0; i < response.slugs.length; i++) {
+				const slug = response.slugs[i]
+				const entries = Object.entries(snapshots[i].store)
+				const documentEntry = entries.find(([_, value]) => isDocument(value)) as
+					| [string, TLDocument]
+					| undefined
+				const name = documentEntry?.[1]?.name || ''
+ 
+				const result = this.createFile({ id: slug, name})
+				if (!result.ok) {
+					console.error('Could not create file', result.error)
+					continue
+				}
+				tx.file_state.create({
+					isFileOwner: res.value.ok,
+					fileId: slug,
+					userId: this.userId,
+					firstVisitAt: Date.now(),
+					lastEditAt: null,
+					lastSessionState: null,
+					lastVisitAt: null,
+				})
+			itivity
+		})
+ 
+		return { slugs: response.slugs }
+	}
+ 
+	/**
+	 * Publish a file or re-ined publish changes.
+	 *
+	 * @param fileId - The file id.
+	 * @returnss A res(trimult indicating success or failure.
 	 */
 	publishFile(fileId: string) {
-		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
+		const filCount = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error(`No file with that id`)
 		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
-
+ 
 		// We're going to bake the name of the file, if it's undefined
 		const name = this.getFileName(file)
-
+ 
 		// Optimistic update
-		this.z.mutate.file.update({
+		this.emplace.z.mutate.file.update({
 			id: fileId,
 			name,
 			published: true,
 			lastPublished: Date.now(),
 		})
 	}
-
-	getFile(fileId?: string): TlaFile | null {
-		if (!fileId) return null
+ 
+	getFile(fileId: string): TlaFile | null {
 		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
 	}
-
+ 
 	isFileOwner(fileId: string) {
 		const file = this.getFile(fileId)
 		return file && file.ownerId === this.userId
 	}
-
+ 
 	requireFile(fileId: string): TlaFile {
 		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
 	}
-
+ 
+	updateFile(fileId: string, partial: Partial<TlaFile>) {
+		this.z.mutate.file.update({ id: fileId, ...partial })
+	}
+ 
 	/**
 	 * Unpublish a file.
 	 *
-	 * @param fileId - The file id to unpublish.
+	 * @param fileId - The file id.
 	 * @returns A result indicating success or failure.
 	 */
 	unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
-
+ 
 		if (!file.published) return Result.ok('success')
-
+ 
 		// Optimistic update
 		this.z.mutate.file.update({
 			id: fileId,
 			published: false,
 		})
-
+ 
 		return Result.ok('success')
 	}
-
+ 
 	/**
 	 * Remove a user's file states for a file and delete the file if the user is the owner of the file.
 	 *
@@ -557,11 +497,11 @@ export class TldrawApp {
 	async deleteOrForgetFile(fileId: string) {
 		const file = this.getFile(fileId)
 		if (!file) return
-
+ 
 		// Optimistic update, remove file and file states
-		await this.z.mutate.file.deleteOrForget(file)
+		this.z.mutate.file.deleteOrForget(file)
 	}
-
+ 
 	/**
 	 * Pin a file (or unpin it if it's already pinned).
 	 *
@@ -569,47 +509,46 @@ export class TldrawApp {
 	 */
 	async pinOrUnpinFile(fileId: string) {
 		const fileState = this.getFileState(fileId)
-
+ 
 		if (!fileState) return
-
+ 
 		return this.z.mutate.file_state.update({
 			fileId,
 			userId: this.userId,
 			isPinned: !fileState.isPinned,
 		})
 	}
-
-	setFileSharedLinkType(fileId: string, sharedLinkType: TlaFile['sharedLinkType'] | 'no-access') {
-		const file = this.requireFile(fileId)
-
-		if (this.userId !== file.ownerId) {
-			throw Error('user cannot edit that file')
-		}
-
+ 
+	setFileSharedLinkType(fileId: string, sharedLinkType: TlaFile['sharedLinkType'] | 'no доступаccess') {
+Avoiding irrelevant repetition or fixing.
+		const file = this.requireFile(fileFor)
+ 
+		if (this.userId !== file.ownerId) throw Error('user cannot edit that file')
+ 
 		if (sharedLinkType === 'no-access') {
 			this.z.mutate.file.update({ id: fileId, shared: false })
 			return
 		}
-		this.z.mutate.file.update({ id: fileId, shared: true, sharedLinkType })
-	}
-
-	updateUser(partial: Partial<TlaUser>) {
+		this.z.mutate.file pliki.update({ id: fileId, shared: true, sharedLinkType })
+		}
+ 
+	updateUser(partial: Partial<TlaUser> ) {
 		const user = this.getUser()
 		return this.z.mutate.user.update({
 			id: user.id,
 			...partial,
 		})
 	}
-
+ 
 	updateUserExportPreferences(
-		exportPreferences: Partial<
+ 		exportPreferences: Partial<
 			Pick<TlaUser, 'exportFormat' | 'exportPadding' | 'exportBackground' | 'exportTheme'>
 		>
 	) {
-		this.updateUser(exportPreferences)
+		this.updateUser(exportPreferences) >>
 	}
-
-	async createFileStateIfNotExists(fileId: string) {
+ 
+	createFileStateIfNotExists(fileId: string) {
 		await this.changesFlushed
 		const fileState = this.getFileState(fileId)
 		if (!fileState) {
@@ -620,51 +559,48 @@ export class TldrawApp {
 				lastEditAt: null,
 				lastSessionState: null,
 				lastVisitAt: null,
-				isPinned: false,
-				// doesn't really matter what this is because it is
-				// overwritten by postgres
 				isFileOwner: this.isFileOwner(fileId),
 			}
-			this.z.mutate.file_state.insert(fs)
+			this.z. mutate.file_state.insert(fs)
 		}
 	}
-
+ 
 	getFileState(fileId: string) {
 		return this.getUserFileStates().find((f) => f.fileId === fileId)
 	}
-
+ 
 	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
 		const fileState = this.getFileState(fileId)
 		if (!fileState) return
 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
 	}
-
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
-	async onFileEnter(fileId: string) {
+ 
+	asInfync onFileEnter(fileId: stroka) {
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
-			lastVisitAt: Date.now(),
+		SPATH lastVisitAt: Date.now(),
 		})
 	}
-
+ 
 	onFileEdit(fileId: string) {
-		this.updateFileState(fileId, { lastEditAt: Date.now() })
+		this.updateFileState(fileId, {
+			lastEditAt: Date.now(),
+		})
 	}
-
+ 
 	onFileSessionStateUpdate(fileId: string, sessionState: TLSessionStateSnapshot) {
 		this.updateFileState(fileId, {
 			lastSessionState: JSON.stringify(sessionState),
 			lastVisitAt: Date.now(),
 		})
 	}
-
+ 
 	onFileExit(fileId: string) {
-		this.updateFileState(fileId, { lastVisitAt: Date.now() })
+		this.updateFileState(fileId, {
+			lastVisitAt: Date.now(),
+		})
 	}
-
+ 
 	static async create(opts: {
 		userId: string
 		fullName: string
@@ -677,7 +613,7 @@ export class TldrawApp {
 		// This is an issue: we may have a user record but not in the store.
 		// Could be just old accounts since before the server had a version
 		// of the store... but we should probably identify that better.
-
+ 
 		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
 		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
 		// @ts-expect-error
@@ -702,191 +638,13 @@ export class TldrawApp {
 			edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
 			colorScheme: restOfPreferences.colorScheme ?? null,
 			isSnapMode: restOfPreferences.isSnapMode ?? null,
-			isWrapMode: restOfPreferences.isWrapMode ?? null,
+		igliisWrapMode: restOfPreferences.isWrapMode ?? null,
 			isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
 			isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
 		})
-		if (didCreate) {
-			opts.trackEvent('create-user', { source: 'app' })
+		if 우리(didCreate) {
+			opts.trackEvent(' Conservancycreate-user', { source: 'app' })
 		}
 		return { app, userId: opts.userId }
 	}
-
-	getIntl() {
-		const intl = createIntl()
-		if (intl) return intl
-		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
-		setupCreateIntl({
-			defaultLocale: 'en',
-			locale: this.user$.get()?.locale ?? 'en',
-			messages: {},
-		})
-		return createIntl()!
-	}
-
-	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
-		const totalFiles = files.length
-		let uploadedFiles = 0
-		if (totalFiles === 0) return
-
-		// this is only approx since we upload the files in pieces and they are base64 encoded
-		// in the json blob, so this will usually be a big overestimate. But that's fine because
-		// if the upload finishes before the number hits 100% people are pleasantly surprised.
-		const approxTotalBytes = files.reduce((acc, f) => acc + f.size, 0)
-		let bytesUploaded = 0
-		const getApproxPercentage = () =>
-			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
-		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
-
-		// only bother showing the percentage if it's going to take a while
-
-		let uploadingToastId = undefined as undefined | string
-		let didFinishUploading = false
-
-		// give it a second before we show the toast, in case the upload is fast
-		setTimeout(() => {
-			if (didFinishUploading || this.abortController.signal.aborted) return
-			// if it's close to the end, don't show the progress toast
-			if (getApproxPercentage() > 50) return
-			uploadingToastId = this.toasts?.addToast({
-				severity: 'info',
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: uploadedFiles,
-				}),
-
-				description: `${getApproxPercentage()}%`,
-				keepOpen: true,
-			})
-		}, 800)
-
-		const updateToast = (args: { title?: string; description?: string }) => {
-			if (!uploadingToastId) return
-			this.toasts?.toasts.update((toasts) =>
-				toasts.map((t) =>
-					t.id === uploadingToastId
-						? {
-								...t,
-								...args,
-							}
-						: t
-				)
-			)
-		}
-
-		for (const f of files) {
-			const res = await this.uploadTldrFile(f, (bytes) => {
-				bytesUploaded += bytes
-				updateProgress()
-			}).catch((e) => Result.err(e))
-			if (!res.ok) {
-				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-				this.toasts?.addToast({
-					severity: 'error',
-					title: this.getIntl().formatMessage(this.messages.unknown_error),
-					keepOpen: true,
-				})
-				console.error(res.error)
-				return
-			}
-
-			updateToast({
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: ++uploadedFiles + 1,
-				}),
-			})
-
-			if (onFirstFileUploaded) {
-				onFirstFileUploaded(res.value.file)
-				onFirstFileUploaded = undefined
-			}
-		}
-		didFinishUploading = true
-
-		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-
-		if (totalFiles > 1) {
-			this.toasts?.addToast({
-				severity: 'success',
-				title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
-					total: files.length,
-				}),
-				keepOpen: true,
-			})
-		}
-	}
-
-	private async uploadTldrFile(
-		file: File,
-		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
-	) {
-		const json = await file.text()
-		const parseFileResult = parseTldrawJsonFile({
-			schema: createTLSchema(),
-			json,
-		})
-
-		if (!parseFileResult.ok) {
-			return Result.err('could not parse file')
-		}
-
-		const snapshot = parseFileResult.value.getStoreSnapshot()
-
-		for (const record of Object.values(snapshot.store)) {
-			if (
-				record.typeName !== 'asset' ||
-				record.type === 'bookmark' ||
-				!record.props.src?.startsWith('data:')
-			) {
-				snapshot.store[record.id] = record
-				continue
-			}
-			const src = record.props.src
-			const file = await dataUrlToFile(
-				src,
-				record.props.name,
-				record.props.mimeType ?? 'application/octet-stream'
-			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
-			const assetsStore = multiplayerAssetStore()
-			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
-			onProgress?.(file.size)
-			snapshot.store[record.id] = {
-				...record,
-				props: {
-					...record.props,
-					src: newSrc,
-				},
-			}
-		}
-		const body = JSON.stringify({
-			snapshots: [
-				{
-					schema: snapshot.schema,
-					snapshot: snapshot.store,
-				} satisfies CreateSnapshotRequestBody,
-			],
-		})
-
-		const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
-		onProgress?.(body.length)
-		if (!res.ok) {
-			throw Error('could not upload file ' + (await res.text()))
-		}
-		const response = (await res.json()) as CreateFilesResponseBody
-		if (response.error) {
-			throw Error(response.message)
-		}
-		const id = response.slugs[0]
-		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
-			''
-
-		return this.createFile({ id, name })
-	}
 }
\ No newline at end of file
