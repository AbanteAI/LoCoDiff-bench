--- tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual)@@ -8,14 +8,15 @@ 	LOCAL_FILE_PREFIX,
 	MAX_NUMBER_OF_FILES,
 	TlaFile,
+	// TlaFilePartial, // not used in this commit range
 	TlaFileState,
 	TlaMutators,
 	TlaSchema,
 	TlaUser,
 	UserPreferencesKeys,
-	Z_PROTOCOL_VERSION,
 	schema as zeroSchema,
 	ZErrorCode,
+	Z_PROTOCOL_VERSION,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -30,6 +31,11 @@ } from '@tldraw/utils'
 import pick from 'lodash.pick'
 import {
+	Signal,
+	TLDocument,
+	TLSessionStateSnapshot,
+	TLUiToastsContextType,
+	TLUserPreferences,
 	assertExists,
 	Atom,
 	atom,
@@ -39,15 +45,11 @@ 	dataUrlToFile,
 	defaultUserPreferences,
 	getUserPreferences,
+	isDocument,
 	objectMapFromEntries,
 	objectMapKeys,
 	parseTldrawJsonFile,
 	react,
-	Signal,
-	TLDocument,
-	TLSessionStateSnapshot,
-	TLUiToastsContextType,
-	TLUserPreferences,
 	transact,
 } from 'tldraw'
 import { MULTIPLAYER_SERVER, ZERO_SERVER } from '../../utils/config'
@@ -55,7 +57,7 @@ import { getScratchPersistenceKey } from '../../utils/scratch-persistence-key'
 import { TLAppUiContextType } from '../utils/app-ui-events'
 import { getDateFormat } from '../utils/dates'
-import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
+import { createIntl, defineMessages, setupCreateIntl, IntlShape } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
 import { Zero as ZeroPolyfill } from './zero-polyfill'
 
@@ -65,7 +67,7 @@ let appId = 0
 const useProperZero = getFromLocalStorage('useProperZero') === 'true'
 // eslint-disable-next-line no-console
-console.log('useProperZero', useProperZero)
+console.log('useProperZero', useProperZero) // TLDRAW_LOG_ZERO
 // @ts-expect-error
 window.zero = () => {
 	setInLocalStorage('useProperZero', String(!useProperZero))
@@ -82,19 +84,32 @@ 	readonly z: ZeroPolyfill | Zero<TlaSchema, TlaMutators>
 
 	private readonly user$: Signal<TlaUser | undefined>
+	private readonly files$: Signal<TlaFile[]>
 	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>
 
 	private readonly abortController = new AbortController()
-	readonly disposables: (() => void)[] = [() => this.abortController.abort(), () => this.z.close()]
+	readonly disposables: (() => void)[] = [() => this.abortController.abort(), () => this.z.close()] // TLDRAW_ZERO_CLOSE
 
 	changes: Map<Atom<any, unknown>, any> = new Map()
 	changesFlushed = null as null | ReturnType<typeof promiseWithResolve>
 
 	private signalizeQuery<TReturn>(name: string, query: any): Signal<TReturn> {
-		// fail if closed?
 		const view = query.materialize()
 		const val$ = atom(name, view.data)
 		view.addListener((res: any) => {
+			// ignore if closed?
+			if ((this.z as any)._closed) {
+				return
+			}
+			if (this.z instanceof Zero) {
+				// using proper zero, just set directly as it updates atomically
+				val$.set(structuredClone(res) as TReturn) // TLDRAW_ZERO_UPDATE
+				return
+			}
+			// using polyfill zero, queue microtask to update atomically
+			// (used for react batches, probably not necessary now with react 19)
+			// but let's keep it for now just in case
+
 			this.changes.set(val$, structuredClone(res))
 			if (!this.changesFlushed) {
 				this.changesFlushed = promiseWithResolve()
@@ -120,11 +135,12 @@ 
 	private constructor(
 		public readonly userId: string,
-		getToken: () => Promise<string | undefined>,
+		getToken: () => Promise<string | undefined>, // TLDRAW_ZERO_TOKEN_PROMISE
 		onClientTooOld: () => void,
 		trackEvent: TLAppUiContextType
 	) {
 		const sessionId = uniqueId()
+		// TLDRAW_ZERO_CONNECT
 		this.z = useProperZero
 			? new Zero<TlaSchema, TlaMutators>({
 					auth: getToken,
@@ -135,7 +151,7 @@ 					onUpdateNeeded(reason) {
 						console.error('update needed', reason)
 						onClientTooOld()
-					},
+					}, // TLDRAW_ZERO_ON_UPDATE_NEEDED
 					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
 				})
 			: new ZeroPolyfill({
@@ -158,8 +174,20 @@ 					trackEvent,
 				})
 
-		this.user$ = this.signalizeQuery('user signal', this.userQuery())
-		this.fileStates$ = this.signalizeQuery('file states signal', this.fileStateQuery())
+		// TLDRAW_ZERO_QUERIES
+		this.user$ = this.signalizeQuery(
+			'user signal',
+			this.userQuery()
+		) // TLDRAW_ZERO_USER_QUERY
+		this.files$ = this.signalizeQuery(
+			'files signal',
+			this.z.query.file.where('isDeleted', '=', false)
+		) // TLDRAW_ZERO_FILES_QUERY
+		this.fileStates$ = this.signalizeQuery(
+			'file states signal',
+			this.fileStateQuery()
+		) // TLDRAW_ZERO_FILE_STATES_QUERY
+		this.z.query.file_state.where('userId', '=', this.userId).orderBy('firstVisitAt', 'desc') // TLDRAW_ZERO_RECENT
 	}
 
 	private userQuery() {
@@ -172,9 +200,10 @@ 			.related('file', (q: any) => q.one())
 	}
 
+
 	async preload(initialUserData: TlaUser) {
 		let didCreate = false
-		await this.userQuery().preload().complete
+		await this.userQuery().preload().complete // TLDRAW_ZERO_PRELOAD_USER
 		await this.changesFlushed
 		if (!this.user$.get()) {
 			didCreate = true
@@ -188,11 +217,12 @@ 		if (!this.user$.get()) {
 			throw Error('could not create user')
 		}
-		await this.fileStateQuery().preload().complete
+		await this.fileStateQuery().preload().complete // TLDRAW_ZERO_PRELOAD_FSTATES
+		// await this.z.query.file.where('ownerId', '=', this.userId).preload().complete // not needed
 		return didCreate
 	}
 
-	messages = defineMessages({
+	messages = defineMessages({ // TLDRAW_ZERO_INTL_GETMSG
 		// toast title
 		mutation_error_toast_title: { defaultMessage: 'Error' },
 		// toast descriptions
@@ -244,24 +274,29 @@ 			console.error('Could not find a translation for this error code', id)
 			msg = this.messages.unknown_error
 		}
+		// looks like we don't get type safety here. I tried but couldn't get it to work.
+		// But in practice this shouldn't be a problem because Zero only passes codes
+		// that we define in our schema's ZErrorCode union.
+		if (!ZErrorCode.values.includes(errorCode as any)) {
+			console.error('Unknown mutation rejection error code:', errorCode)
+			descriptor.defaultMessage = 'An unknown error occurred.'
+		}
+
 		return msg
 	}
 
 	showMutationRejectionToast = throttle((errorCode: ZErrorCode) => {
 		const descriptor = this.getMessage(errorCode)
 		this.toasts?.addToast({
+			// looks redundant but this isn't translated until later,
 			title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
 			description: this.getIntl().formatMessage(descriptor),
 		})
 	}, 3000)
 
+
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
-	}
-
-	getUser() {
-		return assertExists(this.user$.get(), 'no user')
 	}
 
 	tlUser = createTLUser({
@@ -279,18 +314,25 @@ 				Object.entries(others).filter(([_, value]) => value !== null)
 			) as Partial<TLUserPreferences>
 
-			this.z.mutate.user.update({
+			this.z.mutate.user.update({ // TLDRAW_ZERO_MUTATE_USER_UPDATE
 				id: user.id,
 				...(nonNull as any),
 			})
 		},
 	})
 
+	// getAll<T extends keyof Schema['tables']>(
+	// 	typeName: T
+	// ): SchemaToRow<Schema['tables'][T]>[] {
+	// 	return this.z.query[typeName].run()
+	// }
+
 	getUserOwnFiles() {
 		const fileStates = this.getUserFileStates()
+		// TLDRAW_ZERO_GET_OWN_FILES
 		const files: TlaFile[] = []
 		fileStates.forEach((f) => {
-			if (f.file) files.push(f.file)
+			if (f.file && f.isFileOwner) files.push(f.file) // Only include files where the user is the owner according to fileState
 		})
 		return files
 	}
@@ -308,7 +350,7 @@ 	@computed
 	getUserRecentFiles() {
 		const myFiles = objectMapFromEntries(this.getUserOwnFiles().map((f) => [f.id, f]))
-		const myStates = objectMapFromEntries(this.getUserFileStates().map((f) => [f.fileId, f]))
+		const myStates = objectMapFromEntries(this.getUserFileStates().map((f) => [f.fileId, f])) // TLDRAW_ZERO_RECENT_GETSTATES
 
 		const myFileIds = new Set<string>([...objectMapKeys(myFiles), ...objectMapKeys(myStates)])
 
@@ -319,18 +361,28 @@ 		}[] = []
 
 		for (const fileId of myFileIds) {
-			const file = myFiles[fileId]
-			let state: (typeof myStates)[string] | undefined = myStates[fileId]
-			if (!file) continue
-			if (!state && !file.isDeleted && file.ownerId === this.userId) {
-				// create a file state for this file
-				// this allows us to 'undelete' soft-deleted files by manually toggling 'isDeleted' in the backend
-				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
+			const file = myFiles[fileId] // This gets files where user is owner
+			let state: (typeof myStates)[string] | undefined = myStates[fileId] // This gets fileState for files user has visited
+
+
+			if (!file && !state) continue // Don't show if no file (not owner) and no state (not visited)
+
+			// If owner, but no state (newly created?), create a state temporarily for ordering
+			if (file && !state) {
+				state = {
+					fileId: file.id,
+					userId: this.userId,
+					firstVisitAt: file.createdAt,
+					isPinned: false,
+					lastEditAt: file.createdAt,
+					lastSessionState: null,
+					lastVisitAt: file.createdAt,
+					isFileOwner: true,
+				} as TlaFileState & { file: TlaFile }; // Cast as it doesn't have 'file' relationship
 			}
-			if (!state) {
-				// if the file is deleted, we don't want to show it in the recent files
-				continue
-			}
+
+			if (!state) continue // If we still don't have a state, skip
+
 			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
 			if (existing && existing.isPinned === state.isPinned) {
 				nextRecentFileOrdering.push(existing)
@@ -340,11 +392,11 @@ 			nextRecentFileOrdering.push({
 				fileId,
 				isPinned: state.isPinned ?? false,
-				date: state.lastEditAt ?? state.firstVisitAt ?? file.createdAt ?? 0,
+				date: state.lastEditAt ?? state.firstVisitAt ?? file?.createdAt ?? 0, // Use file.createdAt as fallback if needed
 			})
 		}
 
-		// sort by date with most recent first
+		// sort by date with most recent first // TLDRAW_ZERO_RECENT_SORT
 		nextRecentFileOrdering.sort((a, b) => b.date - a.date)
 
 		// stash the ordering for next time
@@ -359,7 +411,7 @@ 				this.getUserFileStates()
 					.map((s) => {
 						// skip files where the owner is the current user
-						if (s.file!.ownerId === this.userId) return
+						if (!s.file || s.file?.ownerId === this.userId || s.isFileOwner) return // Check isFileOwner to avoid duplicates
 						return s.file
 					})
 					.filter(Boolean) as TlaFile[]
@@ -367,6 +419,12 @@ 		)
 	}
 
+
+	getUser() {
+		// TLDRAW_ZERO_GET_USER
+		return assertExists(this.user$.get(), 'no user')
+	}
+
 	private canCreateNewFile() {
 		const numberOfFiles = this.getUserOwnFiles().length
 		return numberOfFiles < this.config.maxNumberOfFiles
@@ -381,7 +439,7 @@ 	}
 
 	async createFile(
-		fileOrId?: string | Partial<TlaFile>
+		fileOrId?: string | Partial<TlaFile> | { createSource: string }
 	): Promise<Result<{ file: TlaFile }, 'max number of files reached'>> {
 		if (!this.canCreateNewFile()) {
 			this.showMaxFilesToast()
@@ -390,22 +448,23 @@ 
 		const file: TlaFile = {
 			id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
-			ownerId: this.userId,
 			// these two owner properties are overridden by postgres triggers
 			ownerAvatar: this.getUser().avatar,
 			ownerName: this.getUser().name,
+			ownerId: this.userId, // TLDRAW_ZERO_FILE_OWNERID
 			isEmpty: true,
+			// todo: maybe iterate the file name
+			name: this.getFallbackFileName(Date.now()), // TLDRAW_ZERO_FILE_NAME
 			createdAt: Date.now(),
 			lastPublished: 0,
-			name: this.getFallbackFileName(Date.now()),
 			published: false,
 			publishedSlug: uniqueId(),
 			shared: true,
-			sharedLinkType: 'edit',
+			sharedLinkType: 'edit', // TLDRAW_ZERO_FILE_SHAREDLINKTYPE
 			thumbnail: '',
 			updatedAt: Date.now(),
-			isDeleted: false,
-			createSource: null,
+			isDeleted: false, // TLDRAW_ZERO_FILE_ISDELETED
+			createSource: null, // TLDRAW_ZERO_FILE_CREATESOURCE
 		}
 		if (typeof fileOrId === 'object') {
 			Object.assign(file, fileOrId)
@@ -413,17 +472,17 @@ 				Object.assign(file, { name: this.getFallbackFileName(file.createdAt) })
 			}
 		}
-		const fileState = {
-			isFileOwner: true,
+		const fileState: TlaFileState = { // TLDRAW_ZERO_FILESTATE_INSERT
+			isFileOwner: true, // TLDRAW_ZERO_FILESTATE_ISFILEOWNER
 			fileId: file.id,
-			userId: this.userId,
-			firstVisitAt: null,
-			isPinned: false,
-			lastEditAt: null,
-			lastSessionState: null,
-			lastVisitAt: null,
-		}
-		await this.z.mutate.file.insertWithFileState({ file, fileState })
+			userId: this.userId, // TLDRAW_ZERO_FILESTATE_USERID
+			firstVisitAt: Date.now(), // TLDRAW_ZERO_FILESTATE_FIRSTVISIT
+			isPinned: false, // TLDRAW_ZERO_FILESTATE_ISPINNED
+			lastEditAt: Date.now(), // TLDRAW_ZERO_FILESTATE_LASTEDIT
+			lastSessionState: null, // TLDRAW_ZERO_FILESTATE_LASTSESSION
+			lastVisitAt: Date.now(), // TLDRAW_ZERO_FILESTATE_LASTVISIT
+		} // TLDRAW_ZERO_FILE_INSERT_WITH_STATE
+			await this.z.mutate.file.insertWithFileState({ file, fileState })
 		// todo: add server error handling for real Zero
 		// .server.catch((res: { error: string; details: string }) => {
 		// 	if (res.details === ZErrorCode.max_files_reached) {
@@ -442,7 +501,8 @@ 
 	getFileName(file: TlaFile | string | null, useDateFallback: false): string | undefined
 	getFileName(file: TlaFile | string | null, useDateFallback?: true): string
-	getFileName(file: TlaFile | string | null, useDateFallback = true) {
+	// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
+	getFileName(file: TlaFile | string | null, useDateFallback = true) { // TLDRAW_ZERO_GET_FILE_NAME
 		if (typeof file === 'string') {
 			file = this.getFile(file)
 		}
@@ -468,19 +528,29 @@ 		return
 	}
 
-	async slurpFile() {
+	getFile(fileId?: string): TlaFile | null {
+		if (!fileId) return null
+		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
+	}
+
+	isFileOwner(fileId: string) {
+		const file = this.getFile(fileId)
+		return file && file.ownerId === this.userId
+	}
+
+	requireFile(fileId: string): TlaFile {
+		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
+	}
+
+	async slurpFile() { // TLDRAW_ZERO_SLURP
 		return await this.createFile({
 			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
 		})
 	}
 
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
-	}
-
 	toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
+		// TLDRAW_ZERO_TOGGLE_SHARED
 		if (!file) throw Error('no file with id ' + fileId)
 
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
@@ -506,26 +576,12 @@ 		const name = this.getFileName(file)
 
 		// Optimistic update
-		this.z.mutate.file.update({
+		this.z.mutate.file.update({ // TLDRAW_ZERO_PUBLISH
 			id: fileId,
 			name,
 			published: true,
 			lastPublished: Date.now(),
 		})
-	}
-
-	getFile(fileId?: string): TlaFile | null {
-		if (!fileId) return null
-		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
-	}
-
-	isFileOwner(fileId: string) {
-		const file = this.getFile(fileId)
-		return file && file.ownerId === this.userId
-	}
-
-	requireFile(fileId: string): TlaFile {
-		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
 	}
 
 	/**
@@ -541,7 +597,7 @@ 		if (!file.published) return Result.ok('success')
 
 		// Optimistic update
-		this.z.mutate.file.update({
+		this.z.mutate.file.update({ // TLDRAW_ZERO_UNPUBLISH
 			id: fileId,
 			published: false,
 		})
@@ -556,10 +612,11 @@ 	 */
 	async deleteOrForgetFile(fileId: string) {
 		const file = this.getFile(fileId)
+		// TLDRAW_ZERO_DELETE_OR_FORGET
 		if (!file) return
 
 		// Optimistic update, remove file and file states
-		await this.z.mutate.file.deleteOrForget(file)
+		await this.z.mutate.file.deleteOrForget(file) // TLDRAW_ZERO_MUTATE_DELETE_OR_FORGET
 	}
 
 	/**
@@ -587,10 +644,10 @@ 		}
 
 		if (sharedLinkType === 'no-access') {
-			this.z.mutate.file.update({ id: fileId, shared: false })
+			this.z.mutate.file.update({ id: fileId, shared: false }) // TLDRAW_ZERO_SET_SHARED_LINK_TYPE
 			return
 		}
-		this.z.mutate.file.update({ id: fileId, shared: true, sharedLinkType })
+		this.z.mutate.file.update({ id: fileId, shared: true, sharedLinkType }) // TLDRAW_ZERO_SET_SHARED_LINK_TYPE
 	}
 
 	updateUser(partial: Partial<TlaUser>) {
@@ -598,7 +655,7 @@ 		return this.z.mutate.user.update({
 			id: user.id,
 			...partial,
-		})
+		}) // TLDRAW_ZERO_UPDATE_USER
 	}
 
 	updateUserExportPreferences(
@@ -609,7 +666,7 @@ 		this.updateUser(exportPreferences)
 	}
 
-	async createFileStateIfNotExists(fileId: string) {
+	async createFileStateIfNotExists(fileId: string) { // TLDRAW_ZERO_CREATE_FILE_STATE
 		await this.changesFlushed
 		const fileState = this.getFileState(fileId)
 		if (!fileState) {
@@ -623,11 +680,12 @@ 				isPinned: false,
 				// doesn't really matter what this is because it is
 				// overwritten by postgres
-				isFileOwner: this.isFileOwner(fileId),
-			}
+				isFileOwner: this.isFileOwner(fileId), // This is incorrect, should be inferred from the file row?
+			} // TLDRAW_ZERO_FILESTATE_UPSERT
 			this.z.mutate.file_state.insert(fs)
 		}
 	}
+
 
 	getFileState(fileId: string) {
 		return this.getUserFileStates().find((f) => f.fileId === fileId)
@@ -639,11 +697,12 @@ 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
 	}
 
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
+	updateFile(fileId: string, partial: Partial<TlaFile>) { // TLDRAW_ZERO_UPDATE_FILE
 		this.z.mutate.file.update({ id: fileId, ...partial })
 	}
 
 	async onFileEnter(fileId: string) {
+		// TLDRAW_ZERO_ON_FILE_ENTER
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
 			lastVisitAt: Date.now(),
@@ -651,7 +710,9 @@ 	}
 
 	onFileEdit(fileId: string) {
-		this.updateFileState(fileId, { lastEditAt: Date.now() })
+		this.updateFileState(fileId, {
+			lastEditAt: Date.now(),
+		})
 	}
 
 	onFileSessionStateUpdate(fileId: string, sessionState: TLSessionStateSnapshot) {
@@ -662,23 +723,28 @@ 	}
 
 	onFileExit(fileId: string) {
-		this.updateFileState(fileId, { lastVisitAt: Date.now() })
-	}
+		this.updateFileState(fileId, {
+			lastVisitAt: Date.now(),
+		})
+	}
+
 
 	static async create(opts: {
 		userId: string
 		fullName: string
 		email: string
 		avatar: string
-		getToken(): Promise<string | undefined>
+		getToken(): Promise<string | undefined> // TLDRAW_ZERO_GET_TOKEN
 		onClientTooOld(): void
 		trackEvent: TLAppUiContextType
+		intl: IntlShape // Not used in constructor after refactor
 	}) {
 		// This is an issue: we may have a user record but not in the store.
 		// Could be just old accounts since before the server had a version
 		// of the store... but we should probably identify that better.
 
 		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
+		// Pass intl via context if needed by zero - which it is now!
 		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
 		// @ts-expect-error
 		window.app = app
@@ -712,7 +778,8 @@ 		return { app, userId: opts.userId }
 	}
 
-	getIntl() {
+	getIntl() { // TLDRAW_ZERO_GET_INTL
+		// Use the intl instance set up by IntlWrapper context
 		const intl = createIntl()
 		if (intl) return intl
 		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
@@ -724,7 +791,7 @@ 		return createIntl()!
 	}
 
-	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
+	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) { // TLDRAW_ZERO_UPLOAD_TLDR
 		const totalFiles = files.length
 		let uploadedFiles = 0
 		if (totalFiles === 0) return
@@ -780,7 +847,7 @@ 				updateProgress()
 			}).catch((e) => Result.err(e))
 			if (!res.ok) {
-				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
+				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId) // TLDRAW_ZERO_UPLOAD_TLDR_ERROR_TOAST
 				this.toasts?.addToast({
 					severity: 'error',
 					title: this.getIntl().formatMessage(this.messages.unknown_error),
@@ -790,12 +857,14 @@ 				return
 			}
 
+			uploadedFiles++ // Increment here to match the comment `{uploaded} of {total}`
 			updateToast({
 				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
 					total: totalFiles,
-					uploaded: ++uploadedFiles + 1,
+					uploaded: uploadedFiles, // Update the count after a successful upload
 				}),
 			})
+
 
 			if (onFirstFileUploaded) {
 				onFirstFileUploaded(res.value.file)
@@ -804,7 +873,7 @@ 		}
 		didFinishUploading = true
 
-		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
+		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId) // TLDRAW_ZERO_UPLOAD_TLDR_SUCCESS_TOAST
 
 		if (totalFiles > 1) {
 			this.toasts?.addToast({
@@ -817,30 +886,51 @@ 		}
 	}
 
-	private async uploadTldrFile(
+	private async uploadTldrFile( // TLDRAW_ZERO_UPLOAD_TLDR_PROCESS
 		file: File,
 		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
-	) {
+	): Promise<Result<{ file: TlaFile }, string>> {
 		const json = await file.text()
-		const parseFileResult = parseTldrawJsonFile({
+
+		const res = await fetch(TLDR_FILE_ENDPOINT, { body: json, method: 'POST' })
+		onProgress?.(json.length)
+		if (!res.ok) {
+			throw Error('could not upload file ' + (await res.text()))
+		}
+		const response = (await res.json()) as CreateFilesResponseBody // TLDRAW_ZERO_UPLOAD_TLDR_RESPONSE
+		if (response.error) {
+			throw Error(response.message)
+		}
+		const id = response.slugs[0]
+		const name = file.name?.replace(/\.tldr$/, '') ?? ''
+
+		const result = await this.createFile({ id, name }).catch((e) => Result.err(e)) // TLDRAW_ZERO_UPLOAD_TLDR_CREATE_FILE
+		if (!result.ok) {
+			console.error('Could not create app file for tldr:', result.error) // TLDRAW_ZERO_UPLOAD_TLDR_ERROR
+			return Result.err('could not create app file')
+		}
+
+		// TLDRAW_ZERO_UPLOAD_TLDR_FINISH
+
+		// we now need to upload the assets
+		const parseFileResult = parseTldrawJsonFile({ // TLDRAW_ZERO_UPLOAD_TLDR_PARSE
 			schema: createTLSchema(),
 			json,
 		})
 
 		if (!parseFileResult.ok) {
-			return Result.err('could not parse file')
+			return Result.err('could not parse file to upload assets') // TLDRAW_ZERO_UPLOAD_TLDR_PARSE_ERROR
 		}
 
 		const snapshot = parseFileResult.value.getStoreSnapshot()
 
-		for (const record of Object.values(snapshot.store)) {
+		for (const record of Object.values(snapshot.store)) { // TLDRAW_ZERO_UPLOAD_TLDR_ASSETS
 			if (
 				record.typeName !== 'asset' ||
 				record.type === 'bookmark' ||
 				!record.props.src?.startsWith('data:')
 			) {
-				snapshot.store[record.id] = record
-				continue
+				continue // TLDRAW_ZERO_UPLOAD_TLDR_ASSETS_SKIP
 			}
 			const src = record.props.src
 			const file = await dataUrlToFile(
@@ -848,45 +938,14 @@ 				record.props.name,
 				record.props.mimeType ?? 'application/octet-stream'
 			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
+			// Upload the asset... this will be associated with a random file id in postgres... but that's fine.
+			// It gets associated with the correct file id later when the user opens
+			// the file and tlsync runs maybeAssociateFileAssets
 			const assetsStore = multiplayerAssetStore()
-			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
-			onProgress?.(file.size)
-			snapshot.store[record.id] = {
-				...record,
-				props: {
-					...record.props,
-					src: newSrc,
-				},
-			}
-		}
-		const body = JSON.stringify({
-			snapshots: [
-				{
-					schema: snapshot.schema,
-					snapshot: snapshot.store,
-				} satisfies CreateSnapshotRequestBody,
-			],
-		})
-
-		const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
-		onProgress?.(body.length)
-		if (!res.ok) {
-			throw Error('could not upload file ' + (await res.text()))
-		}
-		const response = (await res.json()) as CreateFilesResponseBody
-		if (response.error) {
-			throw Error(response.message)
-		}
-		const id = response.slugs[0]
-		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
-			''
-
-		return this.createFile({ id, name })
-	}
-}+			await assetsStore.upload(record, file, this.abortController.signal)
+			onProgress?.(file.size) // TLDRAW_ZERO_UPLOAD_TLDR_ASSETS_PROGRESS
+		}
+
+		return result // TLDRAW_ZERO_UPLOAD_TLDR_RETURN
+	}
+} // TLDRAW_ZERO_END_CLASS