
index 1724dd1c..f1d84b4c 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmp0nndz45l_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpfx3ntywg_actual.txt	
@@ -8,14 +8,15 @@ import {
 	LOCAL_FILE_PREFIX,
 	MAX_NUMBER_OF_FILES,
 	TlaFile,
+	TlaFilePartial,
 	TlaFileState,
 	TlaMutators,
 	TlaSchema,
 	TlaUser,
 	UserPreferencesKeys,
-	Z_PROTOCOL_VERSION,
 	schema as zeroSchema,
 	ZErrorCode,
+	Z_PROTOCOL_VERSION,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -85,13 +86,15 @@ export class TldrawApp {
 	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>
 
 	private readonly abortController = new AbortController()
-	readonly disposables: (() => void)[] = [() => this.abortController.abort(), () => this.z.close()]
+	readonly disposables: (() => void)[] = [
+		() => this.abortController.abort(),
+		() => this.z.close(),
+	]
 
 	changes: Map<Atom<any, unknown>, any> = new Map()
 	changesFlushed = null as null | ReturnType<typeof promiseWithResolve>
 
 	private signalizeQuery<TReturn>(name: string, query: any): Signal<TReturn> {
-		// fail if closed?
 		const view = query.materialize()
 		const val$ = atom(name, view.data)
 		view.addListener((res: any) => {
@@ -116,8 +119,6 @@ export class TldrawApp {
 		return val$
 	}
 
-	toasts: TLUiToastsContextType | null = null
-
 	private constructor(
 		public readonly userId: string,
 		getToken: () => Promise<string | undefined>,
@@ -137,10 +138,9 @@ export class TldrawApp {
 						onClientTooOld()
 					},
 					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
-				})
+			  })
 			: new ZeroPolyfill({
 					userId,
-					// auth: encodedJWT,
 					getUri: async () => {
 						const params = new URLSearchParams({
 							sessionId,
@@ -150,18 +150,17 @@ export class TldrawApp {
 						params.set('accessToken', token || 'no-token-found')
 						return `${MULTIPLAYER_SERVER}/app/${userId}/connect?${params}`
 					},
-					// schema,
-					// This is often easier to develop with if you're frequently changing
-					// the schema. Switch to 'idb' for local-persistence.
 					onMutationRejected: this.showMutationRejectionToast,
 					onClientTooOld: () => onClientTooOld(),
 					trackEvent,
-				})
+			  })
 
 		this.user$ = this.signalizeQuery('user signal', this.userQuery())
 		this.fileStates$ = this.signalizeQuery('file states signal', this.fileStateQuery())
 	}
 
+	// Queries ---------------------------------------------------------
+
 	private userQuery() {
 		return this.z.query.user.where('id', '=', this.userId).one()
 	}
@@ -172,6 +171,8 @@ export class TldrawApp {
 			.related('file', (q: any) => q.one())
 	}
 
+	// -----------------------------------------------------------------
+
 	async preload(initialUserData: TlaUser) {
 		let didCreate = false
 		await this.userQuery().preload().complete
@@ -232,8 +233,6 @@ export class TldrawApp {
 				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
 		},
 		addingTldrFiles: {
-			// no need for pluralization, if there was only one file we navigated to it
-			// so there's no need to show a toast.
 			defaultMessage: 'Added {total} .tldr files.',
 		},
 	})
@@ -257,11 +256,6 @@ export class TldrawApp {
 
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
-	}
-
-	getUser() {
-		return assertExists(this.user$.get(), 'no user')
 	}
 
 	tlUser = createTLUser({
@@ -424,12 +418,6 @@ export class TldrawApp {
 			lastVisitAt: null,
 		}
 		await this.z.mutate.file.insertWithFileState({ file, fileState })
-		// todo: add server error handling for real Zero
-		// .server.catch((res: { error: string; details: string }) => {
-		// 	if (res.details === ZErrorCode.max_files_reached) {
-		// 		this.showMaxFilesToast()
-		// 	}
-		// })
 
 		return Result.ok({ file })
 	}
@@ -455,7 +443,6 @@ export class TldrawApp {
 		if (typeof file.name === 'undefined') {
 			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
 		}
-		// need a ? here because we were seeing issues on sentry where file.name was undefined
 		const name = file.name?.trim()
 		if (name) {
 			return name
@@ -468,17 +455,13 @@ export class TldrawApp {
 		return
 	}
 
+	_slurpFileId: string | null = null
 	async slurpFile() {
 		return await this.createFile({
 			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
 		})
 	}
 
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
-	}
-
 	toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error('no file with id ' + fileId)
@@ -491,18 +474,12 @@ export class TldrawApp {
 		})
 	}
 
-	/**
-	 * Publish a file or re-publish changes.
-	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
-	 */
-	publishFile(fileId: string) {
-		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
+	setFilePublished(fileId: string, value: boolean) {
+		const file = this.get(fileId)
 		if (!file) throw Error(`No file with that id`)
-		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
+		if (!this.isFileOwner(fileId)) throw Error('user cannot edit that file')
+		if (value === file.published) return
 
-		// We're going to bake the name of the file, if it's undefined
 		const name = this.getFileName(file)
 
 		// Optimistic update
@@ -519,13 +496,9 @@ export class TldrawApp {
 		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
 	}
 
-	isFileOwner(fileId: string) {
+	getFilePk(fileId: string) {
 		const file = this.getFile(fileId)
-		return file && file.ownerId === this.userId
-	}
-
-	requireFile(fileId: string): TlaFile {
-		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
+		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
 	}
 
 	/**
@@ -534,7 +507,7 @@ export class TldrawApp {
 	 * @param fileId - The file id to unpublish.
 	 * @returns A result indicating success or failure.
 	 */
-	unpublishFile(fileId: string) {
+	async unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
 
@@ -595,7 +568,7 @@ export class TldrawApp {
 
 	updateUser(partial: Partial<TlaUser>) {
 		const user = this.getUser()
-		return this.z.mutate.user.update({
+		this.z.mutate.user.update({
 			id: user.id,
 			...partial,
 		})
@@ -639,10 +612,6 @@ export class TldrawApp {
 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
 	}
 
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
 	async onFileEnter(fileId: string) {
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
@@ -674,10 +643,6 @@ export class TldrawApp {
 		onClientTooOld(): void
 		trackEvent: TLAppUiContextType
 	}) {
-		// This is an issue: we may have a user record but not in the store.
-		// Could be just old accounts since before the server had a version
-		// of the store... but we should probably identify that better.
-
 		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
 		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
 		// @ts-expect-error
@@ -715,7 +680,6 @@ export class TldrawApp {
 	getIntl() {
 		const intl = createIntl()
 		if (intl) return intl
-		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
 		setupCreateIntl({
 			defaultLocale: 'en',
 			locale: this.user$.get()?.locale ?? 'en',
@@ -738,8 +702,6 @@ export class TldrawApp {
 			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
 		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
 
-		// only bother showing the percentage if it's going to take a while
-
 		let uploadingToastId = undefined as undefined | string
 		let didFinishUploading = false
 
@@ -848,10 +810,6 @@ export class TldrawApp {
 				record.props.name,
 				record.props.mimeType ?? 'application/octet-stream'
 			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
 			const assetsStore = multiplayerAssetStore()
 			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
 			onProgress?.(file.size)
@@ -884,7 +842,8 @@ export class TldrawApp {
 		const id = response.slugs[0]
 		const name =
 			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
+			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')
+				?.name ??
 			''
 
 		return this.createFile({ id, name })
