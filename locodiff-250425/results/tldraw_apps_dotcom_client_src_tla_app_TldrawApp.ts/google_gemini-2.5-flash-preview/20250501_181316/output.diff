
index 1724dd1c..03b43116 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmpwx4zw9ec_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmp3sdb57hg_actual.txt	
@@ -13,9 +13,9 @@ import {
 	TlaSchema,
 	TlaUser,
 	UserPreferencesKeys,
+	ZErrorCode,
 	Z_PROTOCOL_VERSION,
 	schema as zeroSchema,
-	ZErrorCode,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -39,6 +39,7 @@ import {
 	dataUrlToFile,
 	defaultUserPreferences,
 	getUserPreferences,
+	isDocument,
 	objectMapFromEntries,
 	objectMapKeys,
 	parseTldrawJsonFile,
@@ -55,7 +56,7 @@ import { multiplayerAssetStore } from '../../utils/multiplayerAssetStore'
 import { getScratchPersistenceKey } from '../../utils/scratch-persistence-key'
 import { TLAppUiContextType } from '../utils/app-ui-events'
 import { getDateFormat } from '../utils/dates'
-import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
+import { createIntl, defineMessages, setupCreateIntl, IntlShape } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
 import { Zero as ZeroPolyfill } from './zero-polyfill'
 
@@ -286,11 +287,17 @@ export class TldrawApp {
 		},
 	})
 
+	// getAll<T extends keyof Schema['tables']>(
+	// 	typeName: T
+	// ): SchemaToRow<Schema['tables'][T]>[] {
+	// 	return this.z.query[typeName].run()
+	// }
+
 	getUserOwnFiles() {
 		const fileStates = this.getUserFileStates()
 		const files: TlaFile[] = []
 		fileStates.forEach((f) => {
-			if (f.file) files.push(f.file)
+			if (f.file && f.file.ownerId === this.userId) files.push(f.file)
 		})
 		return files
 	}
@@ -328,7 +335,7 @@ export class TldrawApp {
 				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
 			}
 			if (!state) {
-				// if the file is deleted, we don't want to show it in the recent files
+				// if the file is deleted or no file state, we don't want to show it in the recent files
 				continue
 			}
 			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
@@ -359,7 +366,7 @@ export class TldrawApp {
 				this.getUserFileStates()
 					.map((s) => {
 						// skip files where the owner is the current user
-						if (s.file!.ownerId === this.userId) return
+						if (!s.file || s.file.ownerId === this.userId || !s.file.shared) return
 						return s.file
 					})
 					.filter(Boolean) as TlaFile[]
@@ -468,12 +475,32 @@ export class TldrawApp {
 		return
 	}
 
+	claimTemporaryFile(fileId: string) {
+		// TODO(david): check that you can't claim someone else's file (the db insert should fail)
+		// TODO(zero stuff): add table constraint
+		this.createFile(fileId)
+	}
+
 	async slurpFile() {
 		return await this.createFile({
 			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
 		})
 	}
 
+	getFile(fileId?: string): TlaFile | null {
+		if (!fileId) return null
+		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
+	}
+
+	isFileOwner(fileId: string) {
+		const file = this.getFile(fileId)
+		return file && file.ownerId === this.userId
+	}
+
+	requireFile(fileId: string): TlaFile {
+		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
+	}
+
 	getFilePk(fileId: string) {
 		const file = this.getFile(fileId)
 		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
@@ -498,8 +525,7 @@ export class TldrawApp {
 	 * @returns A result indicating success or failure.
 	 */
 	publishFile(fileId: string) {
-		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
-		if (!file) throw Error(`No file with that id`)
+		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
 
 		// We're going to bake the name of the file, if it's undefined
@@ -514,27 +540,13 @@ export class TldrawApp {
 		})
 	}
 
-	getFile(fileId?: string): TlaFile | null {
-		if (!fileId) return null
-		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
-	}
-
-	isFileOwner(fileId: string) {
-		const file = this.getFile(fileId)
-		return file && file.ownerId === this.userId
-	}
-
-	requireFile(fileId: string): TlaFile {
-		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
-	}
-
 	/**
 	 * Unpublish a file.
 	 *
 	 * @param fileId - The file id to unpublish.
 	 * @returns A result indicating success or failure.
 	 */
-	unpublishFile(fileId: string) {
+	async unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
 
@@ -572,7 +584,7 @@ export class TldrawApp {
 
 		if (!fileState) return
 
-		return this.z.mutate.file_state.update({
+		await this.z.mutate.file_state.update({
 			fileId,
 			userId: this.userId,
 			isPinned: !fileState.isPinned,
@@ -636,13 +648,11 @@ export class TldrawApp {
 	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
 		const fileState = this.getFileState(fileId)
 		if (!fileState) return
+		// remove relationship because zero complains
+		// const { file: _, ...rest } = fileState
 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
 	}
 
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
 	async onFileEnter(fileId: string) {
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
