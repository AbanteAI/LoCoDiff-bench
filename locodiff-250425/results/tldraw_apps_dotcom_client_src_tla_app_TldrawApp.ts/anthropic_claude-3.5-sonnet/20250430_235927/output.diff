--- tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual)@@ -57,7 +57,7 @@ import { getDateFormat } from '../utils/dates'
 import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
-import { Zero as ZeroPolyfill } from './zero-polyfill'
+import { ZeroPolyfill } from './zero-polyfill'
 
 export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
 export const PUBLISH_ENDPOINT = `/api/app/publish`
@@ -178,7 +178,7 @@ 		await this.changesFlushed
 		if (!this.user$.get()) {
 			didCreate = true
-			this.z.mutate.user.insert(initialUserData)
+			this.z.mutate.user.create(initialUserData)
 			updateLocalSessionState((state) => ({ ...state, shouldShowWelcomeDialog: true }))
 		}
 		await new Promise((resolve) => {
@@ -249,15 +249,15 @@ 
 	showMutationRejectionToast = throttle((errorCode: ZErrorCode) => {
 		const descriptor = this.getMessage(errorCode)
+		const intl = this.getIntl()
 		this.toasts?.addToast({
-			title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
-			description: this.getIntl().formatMessage(descriptor),
+			title: intl.formatMessage(this.messages.mutation_error_toast_title),
+			description: intl.formatMessage(descriptor),
 		})
 	}, 3000)
 
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
 	}
 
 	getUser() {
@@ -300,7 +300,7 @@ 	}
 
 	lastRecentFileOrdering = null as null | Array<{
-		fileId: TlaFile['id']
+		fileId: string
 		isPinned: boolean
 		date: number
 	}>
@@ -312,11 +312,7 @@ 
 		const myFileIds = new Set<string>([...objectMapKeys(myFiles), ...objectMapKeys(myStates)])
 
-		const nextRecentFileOrdering: {
-			fileId: TlaFile['id']
-			isPinned: boolean
-			date: number
-		}[] = []
+		const nextRecentFileOrdering = []
 
 		for (const fileId of myFileIds) {
 			const file = myFiles[fileId]
@@ -474,11 +470,6 @@ 		})
 	}
 
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
-	}
-
 	toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error('no file with id ' + fileId)
@@ -497,7 +488,7 @@ 	 * @param fileId - The file id to unpublish.
 	 * @returns A result indicating success or failure.
 	 */
-	publishFile(fileId: string) {
+	async publishFile(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error(`No file with that id`)
 		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
@@ -534,7 +525,7 @@ 	 * @param fileId - The file id to unpublish.
 	 * @returns A result indicating success or failure.
 	 */
-	unpublishFile(fileId: string) {
+	async unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
 
@@ -617,10 +608,10 @@ 				fileId,
 				userId: this.userId,
 				firstVisitAt: Date.now(),
+				isPinned: false,
 				lastEditAt: null,
 				lastSessionState: null,
 				lastVisitAt: null,
-				isPinned: false,
 				// doesn't really matter what this is because it is
 				// overwritten by postgres
 				isFileOwner: this.isFileOwner(fileId),
@@ -633,7 +624,7 @@ 		return this.getUserFileStates().find((f) => f.fileId === fileId)
 	}
 
-	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
+	updateFileState(fileId: string, partial: Record<string, any>) {
 		const fileState = this.getFileState(fileId)
 		if (!fileState) return
 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
@@ -723,170 +714,4 @@ 		})
 		return createIntl()!
 	}
-
-	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
-		const totalFiles = files.length
-		let uploadedFiles = 0
-		if (totalFiles === 0) return
-
-		// this is only approx since we upload the files in pieces and they are base64 encoded
-		// in the json blob, so this will usually be a big overestimate. But that's fine because
-		// if the upload finishes before the number hits 100% people are pleasantly surprised.
-		const approxTotalBytes = files.reduce((acc, f) => acc + f.size, 0)
-		let bytesUploaded = 0
-		const getApproxPercentage = () =>
-			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
-		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
-
-		// only bother showing the percentage if it's going to take a while
-
-		let uploadingToastId = undefined as undefined | string
-		let didFinishUploading = false
-
-		// give it a second before we show the toast, in case the upload is fast
-		setTimeout(() => {
-			if (didFinishUploading || this.abortController.signal.aborted) return
-			// if it's close to the end, don't show the progress toast
-			if (getApproxPercentage() > 50) return
-			uploadingToastId = this.toasts?.addToast({
-				severity: 'info',
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: uploadedFiles,
-				}),
-
-				description: `${getApproxPercentage()}%`,
-				keepOpen: true,
-			})
-		}, 800)
-
-		const updateToast = (args: { title?: string; description?: string }) => {
-			if (!uploadingToastId) return
-			this.toasts?.toasts.update((toasts) =>
-				toasts.map((t) =>
-					t.id === uploadingToastId
-						? {
-								...t,
-								...args,
-							}
-						: t
-				)
-			)
-		}
-
-		for (const f of files) {
-			const res = await this.uploadTldrFile(f, (bytes) => {
-				bytesUploaded += bytes
-				updateProgress()
-			}).catch((e) => Result.err(e))
-			if (!res.ok) {
-				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-				this.toasts?.addToast({
-					severity: 'error',
-					title: this.getIntl().formatMessage(this.messages.unknown_error),
-					keepOpen: true,
-				})
-				console.error(res.error)
-				return
-			}
-
-			updateToast({
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: ++uploadedFiles + 1,
-				}),
-			})
-
-			if (onFirstFileUploaded) {
-				onFirstFileUploaded(res.value.file)
-				onFirstFileUploaded = undefined
-			}
-		}
-		didFinishUploading = true
-
-		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-
-		if (totalFiles > 1) {
-			this.toasts?.addToast({
-				severity: 'success',
-				title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
-					total: files.length,
-				}),
-				keepOpen: true,
-			})
-		}
-	}
-
-	private async uploadTldrFile(
-		file: File,
-		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
-	) {
-		const json = await file.text()
-		const parseFileResult = parseTldrawJsonFile({
-			schema: createTLSchema(),
-			json,
-		})
-
-		if (!parseFileResult.ok) {
-			return Result.err('could not parse file')
-		}
-
-		const snapshot = parseFileResult.value.getStoreSnapshot()
-
-		for (const record of Object.values(snapshot.store)) {
-			if (
-				record.typeName !== 'asset' ||
-				record.type === 'bookmark' ||
-				!record.props.src?.startsWith('data:')
-			) {
-				snapshot.store[record.id] = record
-				continue
-			}
-			const src = record.props.src
-			const file = await dataUrlToFile(
-				src,
-				record.props.name,
-				record.props.mimeType ?? 'application/octet-stream'
-			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
-			const assetsStore = multiplayerAssetStore()
-			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
-			onProgress?.(file.size)
-			snapshot.store[record.id] = {
-				...record,
-				props: {
-					...record.props,
-					src: newSrc,
-				},
-			}
-		}
-		const body = JSON.stringify({
-			snapshots: [
-				{
-					schema: snapshot.schema,
-					snapshot: snapshot.store,
-				} satisfies CreateSnapshotRequestBody,
-			],
-		})
-
-		const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
-		onProgress?.(body.length)
-		if (!res.ok) {
-			throw Error('could not upload file ' + (await res.text()))
-		}
-		const response = (await res.json()) as CreateFilesResponseBody
-		if (response.error) {
-			throw Error(response.message)
-		}
-		const id = response.slugs[0]
-		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
-			''
-
-		return this.createFile({ id, name })
-	}
 }