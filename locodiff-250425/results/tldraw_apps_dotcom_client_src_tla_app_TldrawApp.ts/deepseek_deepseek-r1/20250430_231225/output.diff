--- tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual)@@ -1,4 +1,3 @@-// import { Query, QueryType, Smash, TableSchema, Zero } from '@rocicorp/zero'
 import { Zero } from '@rocicorp/zero'
 import { captureException } from '@sentry/react'
 import {
@@ -39,6 +38,7 @@ 	dataUrlToFile,
 	defaultUserPreferences,
 	getUserPreferences,
+	isDocument,
 	objectMapFromEntries,
 	objectMapKeys,
 	parseTldrawJsonFile,
@@ -57,7 +57,6 @@ import { getDateFormat } from '../utils/dates'
 import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
-import { Zero as ZeroPolyfill } from './zero-polyfill'
 
 export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
 export const PUBLISH_ENDPOINT = `/api/app/publish`
@@ -79,7 +78,7 @@ 
 	readonly id = appId++
 
-	readonly z: ZeroPolyfill | Zero<TlaSchema, TlaMutators>
+	readonly z: Zero<TlaSchema, TlaMutators>
 
 	private readonly user$: Signal<TlaUser | undefined>
 	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>
@@ -117,6 +116,7 @@ 	}
 
 	toasts: TLUiToastsContextType | null = null
+	intl: IntlShape | null = null
 
 	private constructor(
 		public readonly userId: string,
@@ -138,9 +138,8 @@ 					},
 					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
 				})
-			: new ZeroPolyfill({
+			: new Zero({
 					userId,
-					// auth: encodedJWT,
 					getUri: async () => {
 						const params = new URLSearchParams({
 							sessionId,
@@ -150,9 +149,6 @@ 						params.set('accessToken', token || 'no-token-found')
 						return `${MULTIPLAYER_SERVER}/app/${userId}/connect?${params}`
 					},
-					// schema,
-					// This is often easier to develop with if you're frequently changing
-					// the schema. Switch to 'idb' for local-persistence.
 					onMutationRejected: this.showMutationRejectionToast,
 					onClientTooOld: () => onClientTooOld(),
 					trackEvent,
@@ -193,27 +189,14 @@ 	}
 
 	messages = defineMessages({
-		// toast title
-		mutation_error_toast_title: { defaultMessage: 'Error' },
-		// toast descriptions
-		publish_failed: {
-			defaultMessage: 'Unable to publish the file.',
-		},
-		unpublish_failed: {
-			defaultMessage: 'Unable to unpublish the file.',
-		},
-		republish_failed: {
-			defaultMessage: 'Unable to publish the changes.',
-		},
-		unknown_error: {
-			defaultMessage: 'An unexpected error occurred.',
-		},
+		publish_failed: { defaultMessage: 'Unable to publish the file.' },
+		unpublish_failed: { defaultMessage: 'Unable to unpublish the file.' },
+		republish_failed: { defaultMessage: 'Unable to publish the changes.' },
+		unknown_error: { defaultMessage: 'An unexpected error occurred.' },
 		forbidden: {
 			defaultMessage: 'You do not have the necessary permissions to perform this action.',
 		},
-		bad_request: {
-			defaultMessage: 'Invalid request.',
-		},
+		bad_request: { defaultMessage: 'Invalid request.' },
 		rate_limit_exceeded: {
 			defaultMessage: 'Rate limit exceeded, try again later.',
 		},
@@ -232,8 +215,6 @@ 				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
 		},
 		addingTldrFiles: {
-			// no need for pluralization, if there was only one file we navigated to it
-			// so there's no need to show a toast.
 			defaultMessage: 'Added {total} .tldr files.',
 		},
 	})
@@ -257,7 +238,6 @@ 
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
 	}
 
 	getUser() {
@@ -322,13 +302,7 @@ 			const file = myFiles[fileId]
 			let state: (typeof myStates)[string] | undefined = myStates[fileId]
 			if (!file) continue
-			if (!state && !file.isDeleted && file.ownerId === this.userId) {
-				// create a file state for this file
-				// this allows us to 'undelete' soft-deleted files by manually toggling 'isDeleted' in the backend
-				state = this.fileStates$.get().find((fs) => fs.fileId === fileId)
-			}
 			if (!state) {
-				// if the file is deleted, we don't want to show it in the recent files
 				continue
 			}
 			const existing = this.lastRecentFileOrdering?.find((f) => f.fileId === fileId)
@@ -344,10 +318,8 @@ 			})
 		}
 
-		// sort by date with most recent first
 		nextRecentFileOrdering.sort((a, b) => b.date - a.date)
 
-		// stash the ordering for next time
 		this.lastRecentFileOrdering = nextRecentFileOrdering
 
 		return nextRecentFileOrdering
@@ -358,7 +330,6 @@ 			new Set(
 				this.getUserFileStates()
 					.map((s) => {
-						// skip files where the owner is the current user
 						if (s.file!.ownerId === this.userId) return
 						return s.file
 					})
@@ -391,7 +362,6 @@ 		const file: TlaFile = {
 			id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
 			ownerId: this.userId,
-			// these two owner properties are overridden by postgres triggers
 			ownerAvatar: this.getUser().avatar,
 			ownerName: this.getUser().name,
 			isEmpty: true,
@@ -409,6 +379,9 @@ 		}
 		if (typeof fileOrId === 'object') {
 			Object.assign(file, fileOrId)
+			if (typeof file.name === 'undefined') {
+				captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
+			}
 			if (!file.name) {
 				Object.assign(file, { name: this.getFallbackFileName(file.createdAt) })
 			}
@@ -424,12 +397,6 @@ 			lastVisitAt: null,
 		}
 		await this.z.mutate.file.insertWithFileState({ file, fileState })
-		// todo: add server error handling for real Zero
-		// .server.catch((res: { error: string; details: string }) => {
-		// 	if (res.details === ZErrorCode.max_files_reached) {
-		// 		this.showMaxFilesToast()
-		// 	}
-		// })
 
 		return Result.ok({ file })
 	}
@@ -446,16 +413,12 @@ 		if (typeof file === 'string') {
 			file = this.getFile(file)
 		}
-		if (!file) {
-			// possibly a published file
-			return ''
-		}
+		if (!file) return ''
 		assert(typeof file !== 'string', 'ok')
 
 		if (typeof file.name === 'undefined') {
 			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
 		}
-		// need a ? here because we were seeing issues on sentry where file.name was undefined
 		const name = file.name?.trim()
 		if (name) {
 			return name
@@ -468,17 +431,16 @@ 		return
 	}
 
+	claimTemporaryFile(fileId: string) {
+		this.createFile(fileId)
+	}
+
 	async slurpFile() {
 		return await this.createFile({
 			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
 		})
 	}
 
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
-	}
-
 	toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error('no file with id ' + fileId)
@@ -491,21 +453,13 @@ 		})
 	}
 
-	/**
-	 * Publish a file or re-publish changes.
-	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
-	 */
 	publishFile(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error(`No file with that id`)
 		if (file.ownerId !== this.userId) throw Error('user cannot publish that file')
 
-		// We're going to bake the name of the file, if it's undefined
 		const name = this.getFileName(file)
 
-		// Optimistic update
 		this.z.mutate.file.update({
 			id: fileId,
 			name,
@@ -528,19 +482,12 @@ 		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
 	}
 
-	/**
-	 * Unpublish a file.
-	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
-	 */
-	unpublishFile(fileId: string) {
+	async unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
 
 		if (!file.published) return Result.ok('success')
 
-		// Optimistic update
 		this.z.mutate.file.update({
 			id: fileId,
 			published: false,
@@ -549,30 +496,19 @@ 		return Result.ok('success')
 	}
 
-	/**
-	 * Remove a user's file states for a file and delete the file if the user is the owner of the file.
-	 *
-	 * @param fileId - The file id.
-	 */
 	async deleteOrForgetFile(fileId: string) {
 		const file = this.getFile(fileId)
 		if (!file) return
 
-		// Optimistic update, remove file and file states
-		await this.z.mutate.file.deleteOrForget(file)
-	}
-
-	/**
-	 * Pin a file (or unpin it if it's already pinned).
-	 *
-	 * @param fileId - The file id.
-	 */
+		this.z.mutate.file.deleteOrForget(file)
+	}
+
 	async pinOrUnpinFile(fileId: string) {
 		const fileState = this.getFileState(fileId)
 
 		if (!fileState) return
 
-		return this.z.mutate.file_state.update({
+		this.z.mutate.file_state.update({
 			fileId,
 			userId: this.userId,
 			isPinned: !fileState.isPinned,
@@ -616,13 +552,10 @@ 			const fs: TlaFileState = {
 				fileId,
 				userId: this.userId,
-				firstVisitAt: Date.now(),
+				firstVisitAt: null,
 				lastEditAt: null,
 				lastSessionState: null,
 				lastVisitAt: null,
-				isPinned: false,
-				// doesn't really matter what this is because it is
-				// overwritten by postgres
 				isFileOwner: this.isFileOwner(fileId),
 			}
 			this.z.mutate.file_state.insert(fs)
@@ -674,14 +607,8 @@ 		onClientTooOld(): void
 		trackEvent: TLAppUiContextType
 	}) {
-		// This is an issue: we may have a user record but not in the store.
-		// Could be just old accounts since before the server had a version
-		// of the store... but we should probably identify that better.
-
 		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
 		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
-		// @ts-expect-error
-		window.app = app
 		const didCreate = await app.preload({
 			id: opts.userId,
 			name: opts.fullName,
@@ -715,7 +642,6 @@ 	getIntl() {
 		const intl = createIntl()
 		if (intl) return intl
-		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
 		setupCreateIntl({
 			defaultLocale: 'en',
 			locale: this.user$.get()?.locale ?? 'en',
@@ -729,24 +655,17 @@ 		let uploadedFiles = 0
 		if (totalFiles === 0) return
 
-		// this is only approx since we upload the files in pieces and they are base64 encoded
-		// in the json blob, so this will usually be a big overestimate. But that's fine because
-		// if the upload finishes before the number hits 100% people are pleasantly surprised.
 		const approxTotalBytes = files.reduce((acc, f) => acc + f.size, 0)
 		let bytesUploaded = 0
 		const getApproxPercentage = () =>
 			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
 		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
 
-		// only bother showing the percentage if it's going to take a while
-
 		let uploadingToastId = undefined as undefined | string
 		let didFinishUploading = false
 
-		// give it a second before we show the toast, in case the upload is fast
 		setTimeout(() => {
 			if (didFinishUploading || this.abortController.signal.aborted) return
-			// if it's close to the end, don't show the progress toast
 			if (getApproxPercentage() > 50) return
 			uploadingToastId = this.toasts?.addToast({
 				severity: 'info',
@@ -754,7 +673,6 @@ 					total: totalFiles,
 					uploaded: uploadedFiles,
 				}),
-
 				description: `${getApproxPercentage()}%`,
 				keepOpen: true,
 			})
@@ -848,10 +766,6 @@ 				record.props.name,
 				record.props.mimeType ?? 'application/octet-stream'
 			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
 			const assetsStore = multiplayerAssetStore()
 			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
 			onProgress?.(file.size)
