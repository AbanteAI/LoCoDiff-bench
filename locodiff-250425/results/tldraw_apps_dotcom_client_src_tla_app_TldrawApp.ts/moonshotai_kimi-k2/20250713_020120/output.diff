
index 1724dd1c8..b372e369c 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmpwnwsy_65_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpu67oohsb_actual.txt	
@@ -14,8 +14,6 @@ import {
 	TlaUser,
 	UserPreferencesKeys,
 	Z_PROTOCOL_VERSION,
-	schema as zeroSchema,
-	ZErrorCode,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -30,8 +28,8 @@ import {
 } from '@tldraw/utils'
 import pick from 'lodash.pick'
 import {
-	assertExists,
 	Atom,
+	assertExists,
 	atom,
 	computed,
 	createTLSchema,
@@ -57,7 +55,6 @@ import { TLAppUiContextType } from '../utils/app-ui-events'
 import { getDateFormat } from '../utils/dates'
 import { createIntl, defineMessages, setupCreateIntl } from '../utils/i18n'
 import { updateLocalSessionState } from '../utils/local-session-state'
-import { Zero as ZeroPolyfill } from './zero-polyfill'
 
 export const TLDR_FILE_ENDPOINT = `/api/app/tldr`
 export const PUBLISH_ENDPOINT = `/api/app/publish`
@@ -79,7 +76,7 @@ export class TldrawApp {
 
 	readonly id = appId++
 
-	readonly z: ZeroPolyfill | Zero<TlaSchema, TlaMutators>
+	readonly z: Zero<TlaSchema, TlaMutators>
 
 	private readonly user$: Signal<TlaUser | undefined>
 	private readonly fileStates$: Signal<(TlaFileState & { file: TlaFile })[]>
@@ -117,6 +114,68 @@ export class TldrawApp {
 	}
 
 	toasts: TLUiToastsContextType | null = null
+	messages = defineMessages({
+		// toast title
+		mutation_error_toast_title: { defaultMessage: 'Error' },
+		// toast descriptions
+		publish_failed: {
+			defaultMessage: 'Unable to publish the file.',
+		},
+		unpublish_failed: {
+			defaultMessage: 'Unable to unpublish the file.',
+		},
+		republish_failed: {
+			defaultMessage: 'Unable to publish the changes.',
+		},
+		unknown_error: {
+			defaultMessage: 'An unexpected error occurred.',
+		},
+		forbidden: {
+			defaultMessage: 'You do not have the necessary permissions to perform this action.',
+		},
+		bad_request: {
+			defaultMessage: 'Invalid request.',
+		},
+		rate_limit_exceeded: {
+			defaultMessage: 'Rate limit exceeded, try again later.',
+		},
+		client_too_old: {
+			defaultMessage: 'Please refresh the page to get the latest version of tldraw.',
+		},
+		max_files_title: {
+			defaultMessage: 'File limit reached',
+		},
+		max_files_reached: {
+			defaultMessage:
+				'You have reached the maximum number of files. You need to delete old files before creating new ones.',
+		},
+		uploadingTldrFiles: {
+			defaultMessage:
+				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
+		},
+		addingTldrFiles: {
+			// no need for pluralization, if there was only one file we navigated to it
+			// so there's no need to show a toast.
+			defaultMessage: 'Added {total} .tldr files.',
+		},
+	})
+
+	getMessage(id: keyof typeof this.messages) {
+		let msg = this.messages[id]
+		if (!msg) {
+			console.error('Could not find a translation for this error code', id)
+			msg = this.messages.unknown_error
+		}
+		return msg
+	}
+
+	showMutationRejectionToast = throttle((errorCode: string) => {
+		const descriptor = this.getMessage(errorCode as any)
+		this.toasts?.addToast({
+			title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
+			description: this.getIntl().formatMessage(descriptor),
+		})
+	}, 3000)
 
 	private constructor(
 		public readonly userId: string,
@@ -138,7 +197,7 @@ export class TldrawApp {
 					},
 					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
 				})
-			: new ZeroPolyfill({
+			: new Zero({
 					userId,
 					// auth: encodedJWT,
 					getUri: async () => {
@@ -192,72 +251,8 @@ export class TldrawApp {
 		return didCreate
 	}
 
-	messages = defineMessages({
-		// toast title
-		mutation_error_toast_title: { defaultMessage: 'Error' },
-		// toast descriptions
-		publish_failed: {
-			defaultMessage: 'Unable to publish the file.',
-		},
-		unpublish_failed: {
-			defaultMessage: 'Unable to unpublish the file.',
-		},
-		republish_failed: {
-			defaultMessage: 'Unable to publish the changes.',
-		},
-		unknown_error: {
-			defaultMessage: 'An unexpected error occurred.',
-		},
-		forbidden: {
-			defaultMessage: 'You do not have the necessary permissions to perform this action.',
-		},
-		bad_request: {
-			defaultMessage: 'Invalid request.',
-		},
-		rate_limit_exceeded: {
-			defaultMessage: 'Rate limit exceeded, try again later.',
-		},
-		client_too_old: {
-			defaultMessage: 'Please refresh the page to get the latest version of tldraw.',
-		},
-		max_files_title: {
-			defaultMessage: 'File limit reached',
-		},
-		max_files_reached: {
-			defaultMessage:
-				'You have reached the maximum number of files. You need to delete old files before creating new ones.',
-		},
-		uploadingTldrFiles: {
-			defaultMessage:
-				'{total, plural, one {Uploading .tldr file…} other {Uploading {uploaded} of {total} .tldr files…}}',
-		},
-		addingTldrFiles: {
-			// no need for pluralization, if there was only one file we navigated to it
-			// so there's no need to show a toast.
-			defaultMessage: 'Added {total} .tldr files.',
-		},
-	})
-
-	getMessage(id: keyof typeof this.messages) {
-		let msg = this.messages[id]
-		if (!msg) {
-			console.error('Could not find a translation for this error code', id)
-			msg = this.messages.unknown_error
-		}
-		return msg
-	}
-
-	showMutationRejectionToast = throttle((errorCode: ZErrorCode) => {
-		const descriptor = this.getMessage(errorCode)
-		this.toasts?.addToast({
-			title: this.getIntl().formatMessage(this.messages.mutation_error_toast_title),
-			description: this.getIntl().formatMessage(descriptor),
-		})
-	}, 3000)
-
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
 	}
 
 	getUser() {
@@ -273,8 +268,6 @@ export class TldrawApp {
 			}
 		}),
 		setUserPreferences: ({ id: _, ...others }: Partial<TLUserPreferences>) => {
-			const user = this.getUser()
-
 			const nonNull = Object.fromEntries(
 				Object.entries(others).filter(([_, value]) => value !== null)
 			) as Partial<TLUserPreferences>
@@ -389,7 +382,7 @@ export class TldrawApp {
 		}
 
 		const file: TlaFile = {
-			id: typeof fileOrId === 'string' ? fileOrId : uniqueId(),
+			id: uniqueId(),
 			ownerId: this.userId,
 			// these two owner properties are overridden by postgres triggers
 			ownerAvatar: this.getUser().avatar,
@@ -434,12 +427,6 @@ export class TldrawApp {
 		return Result.ok({ file })
 	}
 
-	getFallbackFileName(time: number) {
-		const createdAt = new Date(time)
-		const format = getDateFormat(createdAt)
-		return this.getIntl().formatDate(createdAt, format)
-	}
-
 	getFileName(file: TlaFile | string | null, useDateFallback: false): string | undefined
 	getFileName(file: TlaFile | string | null, useDateFallback?: true): string
 	getFileName(file: TlaFile | string | null, useDateFallback = true) {
@@ -450,33 +437,44 @@ export class TldrawApp {
 			// possibly a published file
 			return ''
 		}
-		assert(typeof file !== 'string', 'ok')
-
-		if (typeof file.name === 'undefined') {
-			captureException(new Error('file name is undefined somehow: ' + JSON.stringify(file)))
-		}
-		// need a ? here because we were seeing issues on sentry where file.name was undefined
-		const name = file.name?.trim()
-		if (name) {
-			return name
-		}
+		if (typeof file !== 'string') {
+			const name = file.name?.trim()
+			if (name) {
+				return name
+			}
 
-		if (useDateFallback) {
-			return this.getFallbackFileName(file.createdAt)
+			if (useDateFallback) {
+				return this.getFallbackFileName(file.createdAt)
+			}
 		}
 
 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
+	getFile(fileId?: string): TlaFile | null {
+		if (!fileId) return null
+		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
 	}
 
-	getFilePk(fileId: string) {
+	isFileOwner(fileId: string) {
 		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
+		return file && file.ownerId === this.userId
+	}
+
+	requireFile(fileId: string): TlaFile {
+		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
+	}
+
+	getFallbackFileName(time: number) {
+		const createdAt = new Date(time)
+		const format = getDateFormat(createdAt)
+		return this.getIntl().formatDate(createdAt, format)
+	}
+
+	slurpFile() {
+		return this.createFile({
+			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
+		})
 	}
 
 	toggleFileShared(fileId: string) {
@@ -491,12 +489,6 @@ export class TldrawApp {
 		})
 	}
 
-	/**
-	 * Publish a file or re-publish changes.
-	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
-	 */
 	publishFile(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error(`No file with that id`)
@@ -514,26 +506,6 @@ export class TldrawApp {
 		})
 	}
 
-	getFile(fileId?: string): TlaFile | null {
-		if (!fileId) return null
-		return this.getUserOwnFiles().find((f) => f.id === fileId) ?? null
-	}
-
-	isFileOwner(fileId: string) {
-		const file = this.getFile(fileId)
-		return file && file.ownerId === this.userId
-	}
-
-	requireFile(fileId: string): TlaFile {
-		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
-	}
-
-	/**
-	 * Unpublish a file.
-	 *
-	 * @param fileId - The file id to unpublish.
-	 * @returns A result indicating success or failure.
-	 */
 	unpublishFile(fileId: string) {
 		const file = this.requireFile(fileId)
 		if (file.ownerId !== this.userId) throw Error('user cannot edit that file')
@@ -609,6 +581,16 @@ export class TldrawApp {
 		this.updateUser(exportPreferences)
 	}
 
+	getFileState(fileId: string) {
+		return this.getUserFileStates().find((f) => f.fileId === fileId)
+	}
+
+	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
+		const fileState = this.getFileState(fileId)
+		if (!fileState) return
+		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
+	}
+
 	async createFileStateIfNotExists(fileId: string) {
 		await this.changesFlushed
 		const fileState = this.getFileState(fileId)
@@ -617,32 +599,16 @@ export class TldrawApp {
 				fileId,
 				userId: this.userId,
 				firstVisitAt: Date.now(),
+				isPinned: false,
 				lastEditAt: null,
 				lastSessionState: null,
 				lastVisitAt: null,
-				isPinned: false,
-				// doesn't really matter what this is because it is
-				// overwritten by postgres
 				isFileOwner: this.isFileOwner(fileId),
 			}
-			this.z.mutate.file_state.insert(fs)
+			this.z.mutate.file_state.upsert(fs)
 		}
 	}
 
-	getFileState(fileId: string) {
-		return this.getUserFileStates().find((f) => f.fileId === fileId)
-	}
-
-	updateFileState(fileId: string, partial: Partial<TlaFileState>) {
-		const fileState = this.getFileState(fileId)
-		if (!fileState) return
-		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
-	}
-
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
 	async onFileEnter(fileId: string) {
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
@@ -665,65 +631,6 @@ export class TldrawApp {
 		this.updateFileState(fileId, { lastVisitAt: Date.now() })
 	}
 
-	static async create(opts: {
-		userId: string
-		fullName: string
-		email: string
-		avatar: string
-		getToken(): Promise<string | undefined>
-		onClientTooOld(): void
-		trackEvent: TLAppUiContextType
-	}) {
-		// This is an issue: we may have a user record but not in the store.
-		// Could be just old accounts since before the server had a version
-		// of the store... but we should probably identify that better.
-
-		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
-		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
-		// @ts-expect-error
-		window.app = app
-		const didCreate = await app.preload({
-			id: opts.userId,
-			name: opts.fullName,
-			email: opts.email,
-			color: color ?? defaultUserPreferences.color,
-			avatar: opts.avatar,
-			exportFormat: 'png',
-			exportTheme: 'light',
-			exportBackground: false,
-			exportPadding: false,
-			createdAt: Date.now(),
-			updatedAt: Date.now(),
-			flags: '',
-			allowAnalyticsCookie: null,
-			...restOfPreferences,
-			locale: restOfPreferences.locale ?? null,
-			animationSpeed: restOfPreferences.animationSpeed ?? null,
-			edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
-			colorScheme: restOfPreferences.colorScheme ?? null,
-			isSnapMode: restOfPreferences.isSnapMode ?? null,
-			isWrapMode: restOfPreferences.isWrapMode ?? null,
-			isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
-			isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
-		})
-		if (didCreate) {
-			opts.trackEvent('create-user', { source: 'app' })
-		}
-		return { app, userId: opts.userId }
-	}
-
-	getIntl() {
-		const intl = createIntl()
-		if (intl) return intl
-		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
-		setupCreateIntl({
-			defaultLocale: 'en',
-			locale: this.user$.get()?.locale ?? 'en',
-			messages: {},
-		})
-		return createIntl()!
-	}
-
 	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
 		const totalFiles = files.length
 		let uploadedFiles = 0
@@ -889,4 +796,63 @@ export class TldrawApp {
 
 		return this.createFile({ id, name })
 	}
+
+	getIntl() {
+		const intl = createIntl()
+		if (intl) return intl
+		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
+		setupCreateIntl({
+			defaultLocale: 'en',
+			locale: this.user$.get()?.locale ?? 'en',
+			messages: {},
+		})
+		return createIntl()!
+	}
+
+	static async create(opts: {
+		userId: string
+		fullName: string
+		email: string
+		avatar: string
+		getToken(): Promise<string | undefined>
+		onClientTooOld(): void
+		trackEvent: TLAppUiContextType
+	}) {
+		// This is an issue: we may have a user record but not in the store.
+		// Could be just old accounts since before the server had a version
+		// of the store... but we should probably identify that better.
+
+		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
+		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
+		// @ts-expect-error
+		window.app = app
+		const didCreate = await app.preload({
+			id: opts.userId,
+			name: opts.fullName,
+			email: opts.email,
+			color: color ?? defaultUserPreferences.color,
+			avatar: opts.avatar,
+			exportFormat: 'png',
+			exportTheme: 'light',
+			exportBackground: false,
+			exportPadding: false,
+			createdAt: Date.now(),
+			updatedAt: Date.now(),
+			flags: '',
+			allowAnalyticsCookie: null,
+			...restOfPreferences,
+			locale: restOfPreferences.locale ?? null,
+			animationSpeed: restOfPreferences.animationSpeed ?? null,
+			edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
+			colorScheme: restOfPreferences.colorScheme ?? null,
+			isSnapMode: restOfPreferences.isSnapMode ?? null,
+			isWrapMode: restOfPreferences.isWrapMode ?? null,
+			isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
+			isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
+		})
+		if (didCreate) {
+			opts.trackEvent('create-user', { source: 'app' })
+		}
+		return { app, userId: opts.userId }
+	}
 }
\ No newline at end of file
