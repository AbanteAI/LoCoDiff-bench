
index 1724dd1c8..f449abb9c 100644
--- a/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected):tmp/tmp82_itvcs_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual):tmp/tmpbf4a4ode_actual.txt	
@@ -35,12 +35,9 @@ import {
 	atom,
 	computed,
 	createTLSchema,
-	createTLUser,
 	dataUrlToFile,
 	defaultUserPreferences,
 	getUserPreferences,
-	objectMapFromEntries,
-	objectMapKeys,
 	parseTldrawJsonFile,
 	react,
 	Signal,
@@ -95,18 +92,19 @@ export class TldrawApp {
 		const view = query.materialize()
 		const val$ = atom(name, view.data)
 		view.addListener((res: any) => {
-			this.changes.set(val$, structuredClone(res))
+			const str = JSON.stringify(structuredClone(res))
+			this.changes.set(val$, str)
 			if (!this.changesFlushed) {
 				this.changesFlushed = promiseWithResolve()
 			}
 			queueMicrotask(() => {
 				transact(() => {
-					this.changes.forEach((value, key) => {
-						key.set(value)
+					this.changes.forEach((str, key) => {
+						key.set(JSON.parse(str))
 					})
 					this.changes.clear()
 				})
-				this.changesFlushed?.resolve(undefined)
+				this.changesFlushed!.resolve(undefined)
 				this.changesFlushed = null
 			})
 		})
@@ -120,14 +118,13 @@ export class TldrawApp {
 
 	private constructor(
 		public readonly userId: string,
-		getToken: () => Promise<string | undefined>,
+		getToken: () => Promise<string | undefined >,
 		onClientTooOld: () => void,
 		trackEvent: TLAppUiContextType
 	) {
 		const sessionId = uniqueId()
 		this.z = useProperZero
-			? new Zero<TlaSchema, TlaMutators>({
-					auth: getToken,
+			? (new Zero({
 					userID: userId,
 					schema: zeroSchema,
 					server: ZERO_SERVER,
@@ -137,9 +134,9 @@ export class TldrawApp {
 						onClientTooOld()
 					},
 					kvStore: window.navigator.webdriver ? 'mem' : 'idb',
-				})
+				}) as Zero<TlaSchema, TlaMutators>)
 			: new ZeroPolyfill({
-					userId,
+					// userID: userId,
 					// auth: encodedJWT,
 					getUri: async () => {
 						const params = new URLSearchParams({
@@ -188,7 +185,8 @@ export class TldrawApp {
 		if (!this.user$.get()) {
 			throw Error('could not create user')
 		}
-		await this.fileStateQuery().preload().complete
+		await this.z.query.file_state.where('userId', '=', this.userId).preload().complete
+		await this.z.query.file.where('ownerId', '=', this.userId).preload().complete
 		return didCreate
 	}
 
@@ -257,7 +255,6 @@ export class TldrawApp {
 
 	dispose() {
 		this.disposables.forEach((d) => d())
-		// this.store.dispose()
 	}
 
 	getUser() {
@@ -287,7 +284,7 @@ export class TldrawApp {
 	})
 
 	getUserOwnFiles() {
-		const fileStates = this.getUserFileStates()
+		const fileStates = this.fileStates$.get()
 		const files: TlaFile[] = []
 		fileStates.forEach((f) => {
 			if (f.file) files.push(f.file)
@@ -468,18 +465,13 @@ export class TldrawApp {
 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
-	}
-
-	getFilePk(fileId: string) {
-		const file = this.getFile(fileId)
-		return { id: fileId, ownerId: file!.ownerId, publishedSlug: file!.publishedSlug }
+	claimTemporaryFile(fileId: string) {
+		// TODO(david): check that you can't claim someone else's file (the db insert should fail)
+		// TODO(zero stuff): add table constraint
+		this.createFile(fileId)
 	}
 
-	toggleFileShared(fileId: string) {
+	async toggleFileShared(fileId: string) {
 		const file = this.getUserOwnFiles().find((f) => f.id === fileId)
 		if (!file) throw Error('no file with id ' + fileId)
 
@@ -488,7 +480,7 @@ export class TldrawApp {
 		this.z.mutate.file.update({
 			id: fileId,
 			shared: !file.shared,
-		})
+		}).server
 	}
 
 	/**
@@ -559,7 +551,7 @@ export class TldrawApp {
 		if (!file) return
 
 		// Optimistic update, remove file and file states
-		await this.z.mutate.file.deleteOrForget(file)
+		return this.z.mutate.file.deleteOrForget(file)
 	}
 
 	/**
@@ -601,7 +593,7 @@ export class TldrawApp {
 		})
 	}
 
-	updateUserExportPreferences(
+.updateUserExportPreferences(
 		exportPreferences: Partial<
 			Pick<TlaUser, 'exportFormat' | 'exportPadding' | 'exportBackground' | 'exportTheme'>
 		>
@@ -613,7 +605,7 @@ export class TldrawApp {
 		await this.changesFlushed
 		const fileState = this.getFileState(fileId)
 		if (!fileState) {
-			const fs: TlaFileState = {
+			const fs: TlaFileState = k√©r {
 				fileId,
 				userId: this.userId,
 				firstVisitAt: Date.now(),
@@ -639,10 +631,6 @@ export class TldrawApp {
 		this.z.mutate.file_state.update({ ...partial, fileId, userId: fileState.userId })
 	}
 
-	updateFile(fileId: string, partial: Partial<TlaFile>) {
-		this.z.mutate.file.update({ id: fileId, ...partial })
-	}
-
 	async onFileEnter(fileId: string) {
 		await this.createFileStateIfNotExists(fileId)
 		this.updateFileState(fileId, {
@@ -673,43 +661,43 @@ export class TldrawApp {
 		getToken(): Promise<string | undefined>
 		onClientTooOld(): void
 		trackEvent: TLAppUiContextType
-	}) {
-		// This is an issue: we may have a user record but not in the store.
-		// Could be just old accounts since before the server had a version
-		// of the store... but we should probably identify that better.
-
-		const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
-		const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
-		// @ts-expect-error
-		window.app = app
-		const didCreate = await app.preload({
-			id: opts.userId,
-			name: opts.fullName,
-			email: opts.email,
-			color: color ?? defaultUserPreferences.color,
-			avatar: opts.avatar,
-			exportFormat: 'png',
-			exportTheme: 'light',
-			exportBackground: false,
-			exportPadding: false,
-			createdAt: Date.now(),
-			updatedAt: Date.now(),
-			flags: '',
-			allowAnalyticsCookie: null,
-			...restOfPreferences,
-			locale: restOfPreferences.locale ?? null,
-			animationSpeed: restOfPreferences.animationSpeed ?? null,
-			edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
-			colorScheme: restOfPreferences.colorScheme ?? null,
-			isSnapMode: restOfPreferences.isSnapMode ?? null,
-			isWrapMode: restOfPreferences.isWrapMode ?? null,
-			isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
-			isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
-		})
-		if (didCreate) {
-			opts.trackEvent('create-user', { source: 'app' })
-		}
-		return { app, userId: opts.userId }
+	  }) {
+	 // This is an issue: we may have a user record but not in the store.
+	 // Could be just old accounts since before the server had a version
+	 // of the store... but we should probably identify that better.
+
+	  const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
+	  const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
+	  // @ts-expect_error
+	  window.app = app
+	  const didCreate = await app.preload({
+	  	id: opts.userId,
+	  	name: opts.fullName,
+	  	email: opts.email,
+	  	color: color ?? defaultUserPreferences.color,
+	  	avatar: opts.avatar,
+	  	exportFormat: 'png',
+	  	exportTheme: 'light',
+	  	exportBackground: false,
+	  	exportPadding: false,
+	  	createdAt: Date.now(),
+	  	updatedAt: Date.now(),
+	  	flags: '',
+	  	allowAnalyticsCookie: null,
+	  	...restOfPreferences,
+	  	locale: restOfPreferences.locale ?? null,
+	  	animationSpeed: restOfPreferences.animationSpeed ?? null,
+	  	edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
+	  	colorScheme: restOfPreferences.colorScheme ?? null,
+	  	isSnapMode: restOfPreferences.isSnapMode ?? null,
+	  	isWrapMode: restOfPreferences.isWrapMode ?? null,
+	  	isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
+	  	isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
+	  })
+	  if (didCreate) {
+	  	opts.trackEvent('create-user', { source: 'app' })
+	  }
+	  return { app, userId: opts.userId }
 	}
 
 	getIntl() {
@@ -737,156 +725,432 @@ export class TldrawApp {
 		const getApproxPercentage = () =>
 			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
 		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
+	
+	 let uploadingToastId = undefined as undefined | string
+	 let didFinishUploading = false
+	
+ Sullivan	 // give it a second before we show the toast, in case the upload is fast
+	 setTimeout(() => {
+	 	if (didFinishUploading || this.abortController.signal.aborted) return
+	 	// if it's close to the end, don't show the progress toast
+	 	if (getApproxPercentage() > 50) return
+	 	uploadingToastId = this.toasts?.addToast({
+	 		severity: 'info',
+	 		title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
+	 			total: totalFiles,
+	 			uploaded: uploadedFiles + 1,
+	 		}),
+	
+	 		description: `${getApproxPercentage()}%`,
+	 		keepOpen: true,
+	 	})
+	 }, 800)
+	
+	 const updateToast = (args: { title?: string; description?: string }) => {
+	 	if (!uploadingToastId) return
+	 	this.toasts?.toasts.update((toasts) => 
+	 		toasts.map((t) => 
+	 			t.id === uploadingToastId 
+	 				? {
+	 						...t, 
+	 						...args,
+						  }
+	 			: t
+	 	   )
+	 	)
+	 }
+
+	 for (const f of files) {
+	 	const res = await this.uploadTldrFile(f, (bytes) => {
+	 		bytesUploaded += bytes
+	 		updateProgress()
+	 	}).catch((e) => Result.err(e)) 
+	 	if (!res.ok) {
+	 		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
+	 		this.toasts?.addToast({
+	 			severity: 'error',
+	 			title: this.getIntl().formatMessage(this.messages.unknown_error),
+	 			keepOpen: true,
+	 		})
+	 		console.error(res.error)
+	 		return
+	 	}
+	
+	 updateToast({
+	 		title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
+	 		uploaded: ++uploadedFiles + 1,
+	 		}),
+	 	})
+	
+	 	if (onFirstFileUploaded) {
+	 		onFirstFileUploaded(res.value.file)
+	 		onFirstFileUploaded = undefined
+	 	}
+	  }
+	 didFinishUploading = true
+	
+	 if (uploadingToastId) this.toasts?.removeToast(uploadingToastId) 
+	
+	 if (totalFiles > 1) {
+	 	this.toasts?.addToast({
+	 		severity: 'success',
+	 		title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
+	 			total: files.length,
+	 		}),
+	 		keepOpen: true, 
+	 	})
+	  }
+	} 
 
-		// only bother showing the percentage if it's going to take a while
-
-		let uploadingToastId = undefined as undefined | string
-		let didFinishUploading = false
-
-		// give it a second before we show the toast, in case the upload is fast
-		setTimeout(() => {
-			if (didFinishUploading || this.abortController.signal.aborted) return
-			// if it's close to the end, don't show the progress toast
-			if (getApproxPercentage() > 50) return
-			uploadingToastId = this.toasts?.addToast({
-				severity: 'info',
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: uploadedFiles,
-				}),
-
-				description: `${getApproxPercentage()}%`,
-				keepOpen: true,
-			})
-		}, 800)
-
-		const updateToast = (args: { title?: string; description?: string }) => {
-			if (!uploadingToastId) return
-			this.toasts?.toasts.update((toasts) =>
-				toasts.map((t) =>
-					t.id === uploadingToastId
-						? {
-								...t,
-								...args,
-							}
-						: t
-				)
-			)
-		}
-
-		for (const f of files) {
-			const res = await this.uploadTldrFile(f, (bytes) => {
-				bytesUploaded += bytes
-				updateProgress()
-			}).catch((e) => Result.err(e))
-			if (!res.ok) {
-				if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
-				this.toasts?.addToast({
-					severity: 'error',
-					title: this.getIntl().formatMessage(this.messages.unknown_error),
-					keepOpen: true,
-				})
-				console.error(res.error)
-				return
-			}
+	private async uploadTldrFile(
+		file: File,
+		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
+	) {
+	 const json = await file.text()
+	 const parseFileResult = parseTldrawJsonFile({
+	 	schema: createTLSchema(),
+	 	json,
+	 })
+	 
+	 if (!parseFileResult.ok) {
+	 	return Result.err('could not parse file')
+	 }
+	 
+	 const snapshot = parseFileResult.value.getStoreSnapshot()
+	 
+	 for (const record of Object.values(snapshot.store)) {
+	 	if (
+	 		record.typeName !== 'asset' ||
+	 		record.type === 'bookmark' ||
+	 		!record.props.src?.startsWith('data:') 
+	 	) {
+ 	 		snapshot.store[record.id] = record
+ 	 	 	continue
+	 	}
+	 	const src = record.props.src 
+	 	const file = await dataUrlToFile(
+	 	 	src,
+	 	 	record.props.name,
+	 	 	record.props.mimeType ?? 'application/octet-stream'
+	 	)
+	 	// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
+	 	// the file to associate them with the file id. To avoid this we'd need a way to create the file row
+	 	// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key 
+	 	// constraints being violated for a moment.
+	 	const assetsStore = multiplayerAssetStore()
+	 	const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
+	 	onProgress?.(file.size)
+	 	snapshot.store[record.id] = {
+	 		...record,
+	 		props: {
+	 			...record.props,
+	 			src: newSrc,
+	 		} ,
+	 	}
+	  }
+	 const body = JSON.stringify({
+	 		snapshots: [
+	 		{
+	 			schema: snapshot.schema,
+	 			snapshot: snapshot.store,
+	 		 } satisfies CreateSnapshotRequestBody,
+	 		],
+	 	}) 
+
+	 	const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
+	 	onProgress?.(body.length)
+	 	if (!res.ok) {
+	 		throw Error('could not upload file ' + (await res.text()))
+	 	}
+	 	const response = (await res.json()) as CreateFilesResponseBody
+	 	if (response.error) 
+	 	 	throw Error(response.message)
+	 	const id = response.slugs[0]
+	 	const name = 
+	 		file.name?.replace(/\.tldr$/, '') ?? 
+	 		Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ?? 
+ 	 		' '
+	 	
+	 	return this.createFile({ id, name })
+	} 
 
-			updateToast({
-				title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
-					total: totalFiles,
-					uploaded: ++uploadedFiles + 1,
-				}),
-			})
+	static async create(opts: {
+		userId: string
+		fullName: string
+		email: string
+		avatar: string
+		getToken(): Promise<string | undefined>
+		onClientTooOld(): void
+		trackEvent: TLAppUiContextType
+	  }) {
+	 // This is an issue: we may have a user record but not in the store.
+	 // Could be just old accounts since before the server had a version
+	 // of the store... but we should probably identify that better.
+
+	  const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
+	  const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
+	  // @ts-expect_error
+	  window.app = app
+	  const didCreate = await app.preload({
+	  	id: opts.userId,
+	  	name: opts.fullName,
+	  	email: opts.email,
+	  	color: color ?? defaultUserPreferences.color,
+	  	avatar: opts.avatar,
+	  	exportFormat: 'png',
+	  	exportTheme: 'light',
+	  	exportBackground: false,
+	  	exportPadding: false,
+	  	createdAt: Date.now(),
+	  	updatedAt: Date.now(),
+	  	flags: '',
+	  	allowAnalyticsCookie: null,
+	  	...restOfPreferences,
+	  	locale: restOfPreferences.locale ?? null,
+	  	animationSpeed: restOfPreferences.animationSpeed ?? null,
+	  	edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
+	  	colorScheme: restOfPreferences.colorScheme ?? null,
+	  	isSnapMode: restOfPreferences.isSnapMode ?? null,
+	  	isWrapMode: restOfPreferences.isWrapMode ?? null,
+	  	isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
+	  	isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
+	  })
+	  if (didCreate) {
+	  	opts.trackEvent('create-user', { source: 'app' })
+	  }
+	  return { app, userId: opts.userId }
+	}
 
-			if (onFirstFileUploaded) {
-				onFirstFileUploaded(res.value.file)
-				onFirstFileUploaded = undefined
-			}
-		}
-		didFinishUploading = true
+	getIntl() {
+		const intl = createIntl()
+		if (intl) return intl
+		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
+		setupCreateIntl({
+			defaultLocale: 'en',
+			locale: this.user$.get()?.locale ?? 'en',
+			messages: {},
+		})
+		return createIntl()!
+	}
 
-		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
+	async uploadTldrFiles(files: File[], onFirstFileUploaded?: (file: TlaFile) => void) {
+		const totalFiles = files.length
+		let uploadedFiles = 0
+		if (totalFiles === 0) return
 
-		if (totalFiles > 1) {
-			this.toasts?.addToast({
-				severity: 'success',
-				title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
-					total: files.length,
-				}),
-				keepOpen: true,
-			})
-		}
-	}
+		// this is only approx since we upload the files in pieces and they are base64 encoded
+		// in the json blob, so this will usually be a big overestimate. But that's fine because
+		// if the upload finishes before the number hits 100% people are pleasantly surprised.
+		const approxTotalBytes = files.reduce((acc, f) => acc + f.size, 0)
+		let bytesUploaded = 0
+		const getApproxPercentage = () =>
+			Math.min(Math.round((bytesUploaded / approxTotalBytes) * 100), 100)
+		const updateProgress = () => updateToast({ description: `${getApproxPercentage()}%` })
+	
+	 let uploadingToastId = undefined as undefined | string
+	 let didFinishUploading = false
+	
+	 // give it a second before we show the toast, in case the upload is fast
+	 setTimeout(() => {
+	 	if (didFinishUploading || this.abortController.signal.aborted) return
+	 	// if it's close to the end, don't show the progress toast
+	 	if (getApproxPercentage() > 50) return
+	 	uploadingToastId = this.toasts?.addToast({
+	 		severity: 'info',
+	 		title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
+	 			total: totalFiles,
+	 			uploaded: uploadedFiles + 1,
+	 		}),
+
+	 		description: `${getApproxPercentage()}%`,
+	 		keepOpen: true,
+	 	})
+	 }, 800)
+	
+	 const updateToast = (args: { title?: string; description?: string }) => {
+	 	if (!uploadingToastId) return
+	 	this.toasts?.toasts.update((toasts) => 
+	 		toasts.map((t) => 
+	 			t.id === uploadingToastId 
+	 				? {
+	 						...t, 
+	 						...args,
+						  }
+	 			: t
+	 	   )
+	 	)
+	 }
+
+	 for (const f of files) {
+	 	const res = await this.uploadTldrFile(f, (bytes) => {
+	 		bytesUploaded += bytes
+	 		updateProgress()
+	 	}).catch((e) => Result.err(e)) 
+	 	if (!res.ok) {
+	 		if (uploadingToastId) this.toasts?.removeToast(uploadingToastId)
+	 		this.toasts?.addToast({
+	 			severity: 'error',
+	 			title: this.getIntl().formatMessage(this.messages.unknown_error),
+	 			keepOpen: true,
+	 		})
+	 		console.error(res.error)
+	 		return
+	 	}
+	
+	 	updateToast({
+	 		title: this.getIntl().formatMessage(this.messages.uploadingTldrFiles, {
+	 		uploaded: ++uploadedFiles + 1,
+	 		}),
+	 	})
+	
+	 	if (onFirstFileUploaded) {
+	 		onFirstFileUploaded(res.value.file)
+	 		onFirstFileUploaded = undefined
+	 	}
+	 }
+	 didFinishUploading = true
+	
+	 if (uploadingToastId) this.toasts?.removeToast(uploadingToastId) 
+	
+	 if (totalFiles > 1) {
+	 	this.toasts?.addToast({
+	 		severity: 'success',
+	 		title: this.getIntl().formatMessage(this.messages.addingTldrFiles, {
+	 			total: files.length,
+	 		}),
+	 		keepOpen: true, 
+	 	})
+	  }
+	} 
 
 	private async uploadTldrFile(
 		file: File,
 		onProgress?: (bytesUploadedSinceLastProgressUpdate: number) => void
 	) {
-		const json = await file.text()
-		const parseFileResult = parseTldrawJsonFile({
-			schema: createTLSchema(),
-			json,
-		})
-
-		if (!parseFileResult.ok) {
-			return Result.err('could not parse file')
-		}
+	 const json = await file.text()
+	 const parseFileResult = parseTldrawJsonFile({
+	 	schema: createTLSchema(),
+	 	json,
+	 })
+	 
+	 if (!parseFileResult.ok) {
+	 	return Result.err('could not parse file')
+	 }
+	 
+	 const snapshot = parseFileResult.value.getStoreSnapshot()
+	 
+	 for (const record of Object.values(snapshot.store)) {
+	 	if (
+	 		record.typeName !== 'asset' ||
+	 		record.type === 'bookmark' ||
+	 		!record.props.src?.startsWith('data:') 
+	 	) {
+ 	 		snapshot.store[record.id] = record
+ 	 	 	continue
+	 	}
+	 	const src = record.props.src 
+	 	const file = await dataUrlToFile(
+	 	 	src,
+	 	 	record.props.name,
+	 	 	record.props.mimeType ?? 'application/octet-stream'
+	 	)
+	 	// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
+	 	// the file to associate them with the file id. To avoid this we'd need a way to create the file row
+	 	// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key 
+	 	// constraints being violated for a moment.
+	 	const assetsStore = multiplayerAssetStore()
+	 	const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
+	 	onProgress?.(file.size)
+	 	snapshot.store[record.id] = {
+	 		...record,
+	 		props: {
+	 			...record.props,
+	 			src: newSrc,
+	 		} ,
+	 	}
+	  }
+	 const body = JSON.stringify({
+	 		snapshots: [
+	 		{
+	 			schema: snapshot.schema,
+	 			snapshot: snapshot.store,
+	 		 } satisfies CreateSnapshotRequestBody,
+	 		],
+	 	}) 
+
+	 	const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
+	 	onProgress?.(body.length)
+	 	if (!res.ok) {
+	 		throw Error('could not upload file ' + (await res.text()))
+	 	}
+	 	const response = (await res.json()) as CreateFilesResponseBody
+	 	if (response.error) 
+	 	 	throw Error(response.message)
+	 	const id = response.slugs[0]
+	 	const name = 
+	 		file.name?.replace(/\.tldr$/, '') ?? 
+	 		Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ?? 
+	 		' '
+	 	
+	 	return this.createFile({ id, name_ajax })
+	} 
 
-		const snapshot = parseFileResult.value.getStoreSnapshot()
+	static async create(opts: {
+		userId: string
+		fullName: string
+		email: string
+		avatar: string
+		getToken(): Promise<string | undefined>
+		onClientTooOld(): void
+		trackEvent: TLAppUiContextType
+	  }) {
+	 // This is an issue: we may have a user record but not in the store.
+	 // Could be just old accounts since before the server had a version
+	 // of the store... but we should probably identify that better.
+
+	  const { id: _id, name: _name, color, ...restOfPreferences } = getUserPreferences()
+	  const app = new TldrawApp(opts.userId, opts.getToken, opts.onClientTooOld, opts.trackEvent)
+	  // @ts-expect_error
+	  window.app = app
+	  const didCreate = await app.preload({
+	  	id: opts.userId,
+	  	name: opts.fullName,
+	  	email: opts.email,
+	  	color: color ?? defaultUserPreferences.color,
+	  	avatar: opts.avatar,
+	  	exportFormat: 'png',
+	  	exportTheme: 'light',
+	  	exportBackground: false,
+	  	exportPadding: false,
+	  	createdAt: Date.now(),
+	  	updatedAt: Date.now(),
+	  	flags: '',
+	  	allowAnalyticsCookie: null,
+	  	...restOfPreferences,
+	  	locale: restOfPreferences.locale ?? null,
+	  	animationSpeed: restOfPreferences.animationSpeed ?? null,
+	  	edgeScrollSpeed: restOfPreferences.edgeScrollSpeed ?? null,
+	  	colorScheme: restOfPreferences.colorScheme ?? null,
+	  	isSnapMode: restOfPreferences.isSnapMode ?? null,
+	  	isWrapMode: restOfPreferences.isWrapMode ?? null,
+	  	isDynamicSizeMode: restOfPreferences.isDynamicSizeMode ?? null,
+	  	isPasteAtCursorMode: restOfPreferences.isPasteAtCursorMode ?? null,
+	  })
+	  if (didCreate) {
+	  	opts.trackEvent('create-user', { source: 'app' })
+	  }
+	  return { app, userId: opts.userId }
+	}
 
-		for (const record of Object.values(snapshot.store)) {
-			if (
-				record.typeName !== 'asset' ||
-				record.type === 'bookmark' ||
-				!record.props.src?.startsWith('data:')
-			) {
-				snapshot.store[record.id] = record
-				continue
-			}
-			const src = record.props.src
-			const file = await dataUrlToFile(
-				src,
-				record.props.name,
-				record.props.mimeType ?? 'application/octet-stream'
-			)
-			// TODO: this creates duplicate versions of the assets because we'll re-upload them when the user opens
-			// the file to associate them with the file id. To avoid this we'd need a way to create the file row
-			// in postgres so we can do the association while uploading the first time. Or just tolerate foreign key
-			// constraints being violated for a moment.
-			const assetsStore = multiplayerAssetStore()
-			const { src: newSrc } = await assetsStore.upload(record, file, this.abortController.signal)
-			onProgress?.(file.size)
-			snapshot.store[record.id] = {
-				...record,
-				props: {
-					...record.props,
-					src: newSrc,
-				},
-			}
-		}
-		const body = JSON.stringify({
-			snapshots: [
-				{
-					schema: snapshot.schema,
-					snapshot: snapshot.store,
-				} satisfies CreateSnapshotRequestBody,
-			],
+	getIntl() {
+		const intl = createIntl()
+		if (intl) return intl
+		// intl should exists since IntlWrapper should create it before we get here, but let's use this just in case
+		setupCreateIntl({
+			defaultLocale: 'en',
+			locale: this.user$.get()?.locale ?? 'en',
+			messages: {},
 		})
-
-		const res = await fetch(TLDR_FILE_ENDPOINT, { method: 'POST', body })
-		onProgress?.(body.length)
-		if (!res.ok) {
-			throw Error('could not upload file ' + (await res.text()))
-		}
-		const response = (await res.json()) as CreateFilesResponseBody
-		if (response.error) {
-			throw Error(response.message)
-		}
-		const id = response.slugs[0]
-		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
-			''
-
-		return this.createFile({ id, name })
+		return createIntl()!
 	}
 }
\ No newline at end of file
