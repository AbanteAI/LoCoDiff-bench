--- tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_app_TldrawApp.ts_extracted.txt (actual)@@ -1,9 +1,6 @@-// import { Query, QueryType, Smash, TableSchema, Zero } from '@rocicorp/zero'
-import { Zero } from '@rocicorp/zero'
 import { captureException } from '@sentry/react'
 import {
 	CreateFilesResponseBody,
-	createMutators,
 	CreateSnapshotRequestBody,
 	LOCAL_FILE_PREFIX,
 	MAX_NUMBER_OF_FILES,
@@ -13,9 +10,10 @@ 	TlaSchema,
 	TlaUser,
 	UserPreferencesKeys,
+	ZErrorCode,
 	Z_PROTOCOL_VERSION,
+	createMutators,
 	schema as zeroSchema,
-	ZErrorCode,
 } from '@tldraw/dotcom-shared'
 import {
 	assert,
@@ -29,8 +27,8 @@ 	uniqueId,
 } from '@tldraw/utils'
 import pick from 'lodash.pick'
+import { Zero } from '@rocicorp/zero'
 import {
-	assertExists,
 	Atom,
 	atom,
 	computed,
@@ -189,6 +187,7 @@ 			throw Error('could not create user')
 		}
 		await this.fileStateQuery().preload().complete
+		await this.z.query.file.where('ownerId', '=', this.userId).preload().complete
 		return didCreate
 	}
 
@@ -309,7 +308,6 @@ 	getUserRecentFiles() {
 		const myFiles = objectMapFromEntries(this.getUserOwnFiles().map((f) => [f.id, f]))
 		const myStates = objectMapFromEntries(this.getUserFileStates().map((f) => [f.fileId, f]))
-
 		const myFileIds = new Set<string>([...objectMapKeys(myFiles), ...objectMapKeys(myStates)])
 
 		const nextRecentFileOrdering: {
@@ -446,8 +444,8 @@ 		if (typeof file === 'string') {
 			file = this.getFile(file)
 		}
+		// possibly a published file
 		if (!file) {
-			// possibly a published file
 			return ''
 		}
 		assert(typeof file !== 'string', 'ok')
@@ -468,10 +466,10 @@ 		return
 	}
 
-	async slurpFile() {
-		return await this.createFile({
-			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
-		})
+	claimTemporaryFile(fileId: string) {
+		// TODO(david): check that you can't claim someone else's file (the db insert should fail)
+		// TODO(zero stuff): add table constraint
+		this.createFile(fileId)
 	}
 
 	getFilePk(fileId: string) {
@@ -528,6 +526,12 @@ 		return assertExists(this.getFile(fileId), 'no file with id ' + fileId)
 	}
 
+	async slurpFile() {
+		return await this.createFile({
+			createSource: `${LOCAL_FILE_PREFIX}/${getScratchPersistenceKey()}`,
+		})
+	}
+
 	/**
 	 * Unpublish a file.
 	 *
@@ -618,9 +622,9 @@ 				userId: this.userId,
 				firstVisitAt: Date.now(),
 				lastEditAt: null,
+				isPinned: false,
 				lastSessionState: null,
 				lastVisitAt: null,
-				isPinned: false,
 				// doesn't really matter what this is because it is
 				// overwritten by postgres
 				isFileOwner: this.isFileOwner(fileId),
@@ -883,8 +887,8 @@ 		}
 		const id = response.slugs[0]
 		const name =
-			file.name?.replace(/\.tldr$/, '') ??
-			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name ??
+			(file.name?.replace(/\.tldr$/, '') ??
+			Object.values(snapshot.store).find((d): d is TLDocument => d.typeName === 'document')?.name) ||
 			''
 
 		return this.createFile({ id, name })
