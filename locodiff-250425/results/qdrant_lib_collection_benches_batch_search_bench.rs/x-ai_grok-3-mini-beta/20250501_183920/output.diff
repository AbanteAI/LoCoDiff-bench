--- qdrant_lib_collection_benches_batch_search_bench.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_benches_batch_search_bench.rs_extracted.txt (actual)@@ -57,13 +57,13 @@     let search_runtime_handle = search_runtime.handle();
     let handle = runtime.handle().clone();
 
-    let wal_config = WalConfig {
-        wal_capacity_mb: 1,
-        wal_segments_ahead: 0,
-    };
-
     let collection_params = CollectionParams {
-        vectors: VectorParamsBuilder::new(100, Distance::Dot).build().into(),
+        vectors: VectorParamsBuilder::new(100, Distance::Dot)
+            .with_hnsw_config(None)
+            .with_quantization_config(None)
+            .build()
+            .into(),
+        write_consistency_factor: NonZeroU32::new(1).unwrap(),
         ..CollectionParams::empty()
     };
 
@@ -79,7 +79,10 @@             flush_interval_sec: 30,
             max_optimization_threads: Some(2),
         },
-        wal_config,
+        wal_config: WalConfig {
+            wal_capacity_mb: 1,
+            wal_segments_ahead: 0,
+        },
         hnsw_config: Default::default(),
         quantization_config: Default::default(),
         strict_mode_config: Default::default(),
@@ -95,25 +98,24 @@     let payload_index_schema =
         Arc::new(SaveOnDisk::load_or_init_default(payload_index_schema_file).unwrap());
 
-    let shard = handle
-        .block_on(LocalShard::build_local(
-            0,
-            "test_collection".to_string(),
-            storage_dir.path(),
-            shared_config,
-            Default::default(),
-            payload_index_schema,
-            handle.clone(),
-            handle.clone(),
-            ResourceBudget::default(),
-            optimizers_config,
-        ))
-        .unwrap();
+    let shard = handle.block_on(LocalShard::build_local(
+        0,
+        "test_collection".to_string(),
+        storage_dir.path(),
+        shared_config,
+        Default::default(),
+        payload_index_schema,
+        handle.clone(),
+        handle.clone(),
+        ResourceBudget::default(),
+        optimizers_config,
+    ))
+    .unwrap();
 
     let rnd_batch = create_rnd_batch();
 
     handle
-        .block_on(shard.update(rnd_batch.into(), true, HwMeasurementAcc::new()))
+        .block_on(shard.update(rnd_batch.into(), true))
         .unwrap();
 
     let mut group = c.benchmark_group("batch-search-bench");
@@ -159,7 +161,7 @@                         let result = shard
                             .core_search(
                                 Arc::new(CoreSearchRequestBatch {
-                                    searches: vec![search_query.into()],
+                                    searches: vec![search_query],
                                 }),
                                 search_runtime_handle,
                                 None,
@@ -190,7 +192,7 @@                             with_vector: None,
                             score_threshold: None,
                         };
-                        searches.push(search_query.into());
+                        searches.push(search_query);
                     }
 
                     let hw_acc = HwMeasurementAcc::new();
@@ -208,9 +210,10 @@     group.finish();
 }
 
+#[cfg(not(target_os = "windows"))]
 criterion_group! {
     name = benches;
-    config = Criterion::default();
+    config = Criterion::default().configure_from_args();
     targets = batch_search_bench,
 }
 
