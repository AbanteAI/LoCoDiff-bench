
index 91a2f434c..82420a18f 100644
--- a/qdrant_lib_collection_benches_batch_search_bench.rs_expectedoutput.txt (expected):tmp/tmpvg56fylk_expected.txt	
+++ b/qdrant_lib_collection_benches_batch_search_bench.rs_extracted.txt (actual):tmp/tmp4s9ux6ox_actual.txt	
@@ -69,149 +69,4 @@ fn batch_search_bench(c: &mut Criterion) {
 
     let collection_config = CollectionConfigInternal {
         params: collection_params,
-        optimizer_config: OptimizersConfig {
-            deleted_threshold: 0.9,
-            vacuum_min_vector_number: 1000,
-            default_segment_number: 2,
-            max_segment_size: Some(100_000),
-            memmap_threshold: Some(100_000),
-            indexing_threshold: Some(50_000),
-            flush_interval_sec: 30,
-            max_optimization_threads: Some(2),
-        },
-        wal_config,
-        hnsw_config: Default::default(),
-        quantization_config: Default::default(),
-        strict_mode_config: Default::default(),
-        uuid: None,
-    };
-
-    let optimizers_config = collection_config.optimizer_config.clone();
-
-    let shared_config = Arc::new(RwLock::new(collection_config));
-
-    let payload_index_schema_dir = Builder::new().prefix("qdrant-test").tempdir().unwrap();
-    let payload_index_schema_file = payload_index_schema_dir.path().join("payload-schema.json");
-    let payload_index_schema =
-        Arc::new(SaveOnDisk::load_or_init_default(payload_index_schema_file).unwrap());
-
-    let shard = handle
-        .block_on(LocalShard::build_local(
-            0,
-            "test_collection".to_string(),
-            storage_dir.path(),
-            shared_config,
-            Default::default(),
-            payload_index_schema,
-            handle.clone(),
-            handle.clone(),
-            ResourceBudget::default(),
-            optimizers_config,
-        ))
-        .unwrap();
-
-    let rnd_batch = create_rnd_batch();
-
-    handle
-        .block_on(shard.update(rnd_batch.into(), true, HwMeasurementAcc::new()))
-        .unwrap();
-
-    let mut group = c.benchmark_group("batch-search-bench");
-
-    let filters = vec![
-        None,
-        Some(Filter::new_must(Condition::Field(
-            FieldCondition::new_match("a".parse().unwrap(), 3.into()),
-        ))),
-        Some(Filter::new_must(Condition::Field(
-            FieldCondition::new_range(
-                "a".parse().unwrap(),
-                Range {
-                    lt: None,
-                    gt: Some(-1.),
-                    gte: None,
-                    lte: Some(100.0),
-                },
-            ),
-        ))),
-    ];
-
-    let batch_size = 100;
-
-    for (fid, filter) in filters.into_iter().enumerate() {
-        group.bench_function(format!("search-{fid}"), |b| {
-            b.iter(|| {
-                runtime.block_on(async {
-                    let mut rng = rng();
-                    for _i in 0..batch_size {
-                        let query = random_vector(&mut rng, 100);
-                        let search_query = SearchRequestInternal {
-                            vector: query.into(),
-                            filter: filter.clone(),
-                            params: None,
-                            limit: 10,
-                            offset: None,
-                            with_payload: None,
-                            with_vector: None,
-                            score_threshold: None,
-                        };
-                        let hw_acc = HwMeasurementAcc::new();
-                        let result = shard
-                            .core_search(
-                                Arc::new(CoreSearchRequestBatch {
-                                    searches: vec![search_query.into()],
-                                }),
-                                search_runtime_handle,
-                                None,
-                                hw_acc,
-                            )
-                            .await
-                            .unwrap();
-                        assert!(!result.is_empty());
-                    }
-                });
-            })
-        });
-
-        group.bench_function(format!("search-batch-{fid}"), |b| {
-            b.iter(|| {
-                runtime.block_on(async {
-                    let mut rng = rng();
-                    let mut searches = Vec::with_capacity(batch_size);
-                    for _i in 0..batch_size {
-                        let query = random_vector(&mut rng, 100);
-                        let search_query = SearchRequestInternal {
-                            vector: query.into(),
-                            filter: filter.clone(),
-                            params: None,
-                            limit: 10,
-                            offset: None,
-                            with_payload: None,
-                            with_vector: None,
-                            score_threshold: None,
-                        };
-                        searches.push(search_query.into());
-                    }
-
-                    let hw_acc = HwMeasurementAcc::new();
-                    let search_query = CoreSearchRequestBatch { searches };
-                    let result = shard
-                        .core_search(Arc::new(search_query), search_runtime_handle, None, hw_acc)
-                        .await
-                        .unwrap();
-                    assert!(!result.is_empty());
-                });
-            })
-        });
-    }
-
-    group.finish();
-}
-
-criterion_group! {
-    name = benches;
-    config = Criterion::default();
-    targets = batch_search_bench,
-}
-
-criterion_main!(benches);
\ No newline at end of file
+        optimizer_config: Opt
\ No newline at end of file
