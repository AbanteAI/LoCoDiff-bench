
index 91a2f434c..d13f81753 100644
--- a/qdrant_lib_collection_benches_batch_search_bench.rs_expectedoutput.txt (expected):tmp/tmpv5snj4ej_expected.txt	
+++ b/qdrant_lib_collection_benches_batch_search_bench.rs_extracted.txt (actual):tmp/tmpinhslxkz_actual.txt	
@@ -1,3 +1,9 @@
+#![allow(deprecated)]
+
+#[cfg(not(target_os = "windows"))]
+mod prof;
+
+use std::num::NonZeroU64;
 use std::sync::Arc;
 
 use api::rest::SearchRequestInternal;
@@ -16,16 +22,14 @@ use common::budget::ResourceBudget;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use criterion::{Criterion, criterion_group, criterion_main};
 use rand::rng;
-use segment::data_types::vectors::{VectorStructInternal, only_default_vector};
-use segment::fixtures::payload_fixtures::random_vector;
-use segment::types::{Condition, Distance, FieldCondition, Filter, Payload, Range};
 use serde_json::Map;
 use tempfile::Builder;
 use tokio::runtime::Runtime;
 use tokio::sync::RwLock;
 
-#[cfg(not(target_os = "windows"))]
-mod prof;
+use segment::data_types::vectors::{only_default_vector, VectorStructInternal};
+use segment::fixtures::payload_fixtures::random_vector;
+use segment::types::{Condition, Distance, FieldCondition, Filter, Payload, Range};
 
 fn create_rnd_batch() -> CollectionUpdateOperations {
     let mut rng = rng();
@@ -50,23 +54,30 @@ fn create_rnd_batch() -> CollectionUpdateOperations {
 }
 
 fn batch_search_bench(c: &mut Criterion) {
+    // Setup temporary storage
     let storage_dir = Builder::new().prefix("storage").tempdir().unwrap();
 
+    // Runtime setup
     let runtime = Runtime::new().unwrap();
     let search_runtime = Runtime::new().unwrap();
     let search_runtime_handle = search_runtime.handle();
     let handle = runtime.handle().clone();
 
+    // WAL config
     let wal_config = WalConfig {
         wal_capacity_mb: 1,
         wal_segments_ahead: 0,
     };
 
+    // Collection params
     let collection_params = CollectionParams {
-        vectors: VectorParamsBuilder::new(100, Distance::Dot).build().into(),
+        vectors: VectorParamsBuilder::new(100, Distance::Dot)
+            .build()
+            .into(),
         ..CollectionParams::empty()
     };
 
+    // Collection config
     let collection_config = CollectionConfigInternal {
         params: collection_params,
         optimizer_config: OptimizersConfig {
@@ -90,11 +101,18 @@ fn batch_search_bench(c: &mut Criterion) {
 
     let shared_config = Arc::new(RwLock::new(collection_config));
 
-    let payload_index_schema_dir = Builder::new().prefix("qdrant-test").tempdir().unwrap();
-    let payload_index_schema_file = payload_index_schema_dir.path().join("payload-schema.json");
-    let payload_index_schema =
-        Arc::new(SaveOnDisk::load_or_init_default(payload_index_schema_file).unwrap());
+    // Payload schema storage
+    let payload_index_schema_dir = Builder::new()
+        .prefix("qdrant-test")
+        .tempdir()
+        .unwrap();
+    let payload_index_schema_file =
+        payload_index_schema_dir.path().join("payload-schema.json");
+    let payload_index_schema = Arc::new(
+        SaveOnDisk::load_or_init_default(payload_index_schema_file).unwrap(),
+    );
 
+    // Build shard
     let shard = handle
         .block_on(LocalShard::build_local(
             0,
@@ -104,31 +122,37 @@ fn batch_search_bench(c: &mut Criterion) {
             Default::default(),
             payload_index_schema,
             handle.clone(),
-            handle.clone(),
             ResourceBudget::default(),
             optimizers_config,
         ))
         .unwrap();
 
+    // Populate collection
     let rnd_batch = create_rnd_batch();
-
     handle
-        .block_on(shard.update(rnd_batch.into(), true, HwMeasurementAcc::new()))
+        .block_on(
+            shard.update(rnd_batch.into(), true, HwMeasurementAcc::new()),
+        )
         .unwrap();
 
+    // Benchmark group
     let mut group = c.benchmark_group("batch-search-bench");
 
+    // Different filters to test
     let filters = vec![
         None,
         Some(Filter::new_must(Condition::Field(
-            FieldCondition::new_match("a".parse().unwrap(), 3.into()),
+            FieldCondition::new_match(
+                "a".parse().unwrap(),
+                3.into(),
+            ),
         ))),
         Some(Filter::new_must(Condition::Field(
             FieldCondition::new_range(
                 "a".parse().unwrap(),
                 Range {
                     lt: None,
-                    gt: Some(-1.),
+                    gt: Some(-1.0),
                     gte: None,
                     lte: Some(100.0),
                 },
@@ -139,14 +163,15 @@ fn batch_search_bench(c: &mut Criterion) {
     let batch_size = 100;
 
     for (fid, filter) in filters.into_iter().enumerate() {
-        group.bench_function(format!("search-{fid}"), |b| {
+        // Single searches within the benchmark
+        group.bench_function(format!("search-{}", fid), |b| {
             b.iter(|| {
                 runtime.block_on(async {
                     let mut rng = rng();
-                    for _i in 0..batch_size {
+                    for _ in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
                         let search_query = SearchRequestInternal {
-                            vector: query.into(),
+                            vector: only_default_vector(&query).into(),
                             filter: filter.clone(),
                             params: None,
                             limit: 10,
@@ -156,7 +181,7 @@ fn batch_search_bench(c: &mut Criterion) {
                             score_threshold: None,
                         };
                         let hw_acc = HwMeasurementAcc::new();
-                        let result = shard
+                        let _ = shard
                             .core_search(
                                 Arc::new(CoreSearchRequestBatch {
                                     searches: vec![search_query.into()],
@@ -167,21 +192,21 @@ fn batch_search_bench(c: &mut Criterion) {
                             )
                             .await
                             .unwrap();
-                        assert!(!result.is_empty());
                     }
                 });
             })
         });
 
-        group.bench_function(format!("search-batch-{fid}"), |b| {
+        // Batch search benchmark
+        group.benchmark_function(format!("search-batch-{}", fid), |b| {
             b.iter(|| {
                 runtime.block_on(async {
                     let mut rng = rng();
                     let mut searches = Vec::with_capacity(batch_size);
-                    for _i in 0..batch_size {
+                    for _ in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
                         let search_query = SearchRequestInternal {
-                            vector: query.into(),
+                            vector: only_default_vector(&query).into(),
                             filter: filter.clone(),
                             params: None,
                             limit: 10,
@@ -192,14 +217,16 @@ fn batch_search_bench(c: &mut Criterion) {
                         };
                         searches.push(search_query.into());
                     }
-
                     let hw_acc = HwMeasurementAcc::new();
-                    let search_query = CoreSearchRequestBatch { searches };
-                    let result = shard
-                        .core_search(Arc::new(search_query), search_runtime_handle, None, hw_acc)
+                    let _ = shard
+                        .core_search(
+                            Arc::new(CoreSearchRequestBatch { searches }),
+                            search_runtime_handle,
+                            None,
+                            hw_acc,
+                        )
                         .await
                         .unwrap();
-                    assert!(!result.is_empty());
                 });
             })
         });
@@ -210,8 +237,7 @@ fn batch_search_bench(c: &mut Criterion) {
 
 criterion_group! {
     name = benches;
-    config = Criterion::default();
+    config = Criterion::default().sample_size(50);
     targets = batch_search_bench,
 }
-
 criterion_main!(benches);
\ No newline at end of file
