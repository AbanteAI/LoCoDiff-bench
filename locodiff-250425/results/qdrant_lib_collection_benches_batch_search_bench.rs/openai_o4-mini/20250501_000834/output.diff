--- qdrant_lib_collection_benches_batch_search_bench.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_benches_batch_search_bench.rs_extracted.txt (actual)@@ -104,7 +104,6 @@             Default::default(),
             payload_index_schema,
             handle.clone(),
-            handle.clone(),
             ResourceBudget::default(),
             optimizers_config,
         ))
@@ -143,7 +142,7 @@             b.iter(|| {
                 runtime.block_on(async {
                     let mut rng = rng();
-                    for _i in 0..batch_size {
+                    for _ in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
                         let search_query = SearchRequestInternal {
                             vector: query.into(),
@@ -155,7 +154,6 @@                             with_vector: None,
                             score_threshold: None,
                         };
-                        let hw_acc = HwMeasurementAcc::new();
                         let result = shard
                             .core_search(
                                 Arc::new(CoreSearchRequestBatch {
@@ -163,7 +161,7 @@                                 }),
                                 search_runtime_handle,
                                 None,
-                                hw_acc,
+                                HwMeasurementAcc::new(),
                             )
                             .await
                             .unwrap();
@@ -178,7 +176,7 @@                 runtime.block_on(async {
                     let mut rng = rng();
                     let mut searches = Vec::with_capacity(batch_size);
-                    for _i in 0..batch_size {
+                    for _ in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
                         let search_query = SearchRequestInternal {
                             vector: query.into(),
@@ -192,11 +190,13 @@                         };
                         searches.push(search_query.into());
                     }
-
-                    let hw_acc = HwMeasurementAcc::new();
-                    let search_query = CoreSearchRequestBatch { searches };
                     let result = shard
-                        .core_search(Arc::new(search_query), search_runtime_handle, None, hw_acc)
+                        .core_search(
+                            Arc::new(CoreSearchRequestBatch { searches }),
+                            search_runtime_handle,
+                            None,
+                            HwMeasurementAcc::new(),
+                        )
                         .await
                         .unwrap();
                     assert!(!result.is_empty());
