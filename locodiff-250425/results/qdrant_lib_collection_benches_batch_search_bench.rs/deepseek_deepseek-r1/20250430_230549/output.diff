--- qdrant_lib_collection_benches_batch_search_bench.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_benches_batch_search_bench.rs_extracted.txt (actual)@@ -1,22 +1,17 @@+mod prof;
+
+use std::num::NonZeroU32;
 use std::sync::Arc;
 
-use api::rest::SearchRequestInternal;
-use collection::config::{CollectionConfigInternal, CollectionParams, WalConfig};
+use collection::config::{CollectionConfig, CollectionParams, WalConfig};
+use collection::operations::point_ops::{PointInsertOperations, PointOperations, PointStruct};
+use collection::operations::types::{SearchRequest, SearchRequestBatch};
 use collection::operations::CollectionUpdateOperations;
-use collection::operations::point_ops::{
-    PointInsertOperationsInternal, PointOperations, PointStructPersisted,
-};
-use collection::operations::types::CoreSearchRequestBatch;
-use collection::operations::vector_params_builder::VectorParamsBuilder;
 use collection::optimizers_builder::OptimizersConfig;
-use collection::save_on_disk::SaveOnDisk;
-use collection::shards::local_shard::LocalShard;
-use collection::shards::shard_trait::ShardOperation;
-use common::budget::ResourceBudget;
-use common::counter::hardware_accumulator::HwMeasurementAcc;
-use criterion::{Criterion, criterion_group, criterion_main};
-use rand::rng;
-use segment::data_types::vectors::{VectorStructInternal, only_default_vector};
+use collection::shard::local_shard::LocalShard;
+use collection::shard::ShardOperation;
+use criterion::{criterion_group, criterion_main, Criterion};
+use rand::thread_rng;
 use segment::fixtures::payload_fixtures::random_vector;
 use segment::types::{Condition, Distance, FieldCondition, Filter, Payload, Range};
 use serde_json::Map;
@@ -24,28 +19,24 @@ use tokio::runtime::Runtime;
 use tokio::sync::RwLock;
 
-#[cfg(not(target_os = "windows"))]
-mod prof;
-
 fn create_rnd_batch() -> CollectionUpdateOperations {
-    let mut rng = rng();
+    let mut rng = thread_rng();
     let num_points = 2000;
     let dim = 100;
-    let mut points = Vec::with_capacity(num_points);
+    let mut points = Vec::new();
     for i in 0..num_points {
         let mut payload_map = Map::new();
         payload_map.insert("a".to_string(), (i % 5).into());
         let vector = random_vector(&mut rng, dim);
-        let vectors = only_default_vector(&vector);
-        let point = PointStructPersisted {
-            id: (i as u64).into(),
-            vector: VectorStructInternal::from(vectors).into(),
+        let point = PointStruct {
+            id: i.into(),
+            vector,
             payload: Some(Payload(payload_map)),
         };
         points.push(point);
     }
     CollectionUpdateOperations::PointOperation(PointOperations::UpsertPoints(
-        PointInsertOperationsInternal::PointsList(points),
+        PointInsertOperations::PointsList(points),
     ))
 }
 
@@ -63,11 +54,14 @@     };
 
     let collection_params = CollectionParams {
-        vectors: VectorParamsBuilder::new(100, Distance::Dot).build().into(),
-        ..CollectionParams::empty()
+        vector_size: NonZeroU32::new(100).unwrap(),
+        distance: Distance::Dot,
+        shard_number: NonZeroU32::new(1).expect("Shard number can not be zero"),
+        replication_factor: NonZeroU32::new(1).unwrap(),
+        on_disk_payload: false,
     };
 
-    let collection_config = CollectionConfigInternal {
+    let collection_config = CollectionConfig {
         params: collection_params,
         optimizer_config: OptimizersConfig {
             deleted_threshold: 0.9,
@@ -75,57 +69,39 @@             default_segment_number: 2,
             max_segment_size: Some(100_000),
             memmap_threshold: Some(100_000),
-            indexing_threshold: Some(50_000),
+            indexing_threshold: 50_000,
             flush_interval_sec: 30,
-            max_optimization_threads: Some(2),
+            max_optimization_threads: 2,
         },
         wal_config,
         hnsw_config: Default::default(),
-        quantization_config: Default::default(),
-        strict_mode_config: Default::default(),
-        uuid: None,
     };
-
-    let optimizers_config = collection_config.optimizer_config.clone();
 
     let shared_config = Arc::new(RwLock::new(collection_config));
 
-    let payload_index_schema_dir = Builder::new().prefix("qdrant-test").tempdir().unwrap();
-    let payload_index_schema_file = payload_index_schema_dir.path().join("payload-schema.json");
-    let payload_index_schema =
-        Arc::new(SaveOnDisk::load_or_init_default(payload_index_schema_file).unwrap());
-
     let shard = handle
-        .block_on(LocalShard::build_local(
+        .block_on(LocalShard::build(
             0,
             "test_collection".to_string(),
             storage_dir.path(),
             shared_config,
-            Default::default(),
-            payload_index_schema,
-            handle.clone(),
-            handle.clone(),
-            ResourceBudget::default(),
-            optimizers_config,
         ))
         .unwrap();
 
     let rnd_batch = create_rnd_batch();
 
-    handle
-        .block_on(shard.update(rnd_batch.into(), true, HwMeasurementAcc::new()))
-        .unwrap();
+    handle.block_on((&shard).update(rnd_batch, true)).unwrap();
 
     let mut group = c.benchmark_group("batch-search-bench");
 
     let filters = vec![
         None,
         Some(Filter::new_must(Condition::Field(
-            FieldCondition::new_match("a".parse().unwrap(), 3.into()),
+            FieldCondition::new_match("a".to_string(), 3.into()),
         ))),
         Some(Filter::new_must(Condition::Field(
             FieldCondition::new_range(
-                "a".parse().unwrap(),
+                "a".to_string(),
                 Range {
                     lt: None,
                     gt: Some(-1.),
@@ -142,28 +118,25 @@         group.bench_function(format!("search-{fid}"), |b| {
             b.iter(|| {
                 runtime.block_on(async {
-                    let mut rng = rng();
+                    let mut rng = thread_rng();
                     for _i in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
-                        let search_query = SearchRequestInternal {
-                            vector: query.into(),
+                        let search_query = SearchRequest {
+                            vector: query,
                             filter: filter.clone(),
                             params: None,
                             limit: 10,
-                            offset: None,
+                            offset: 0,
                             with_payload: None,
-                            with_vector: None,
+                            with_vector: false,
                             score_threshold: None,
                         };
-                        let hw_acc = HwMeasurementAcc::new();
-                        let result = shard
-                            .core_search(
-                                Arc::new(CoreSearchRequestBatch {
-                                    searches: vec![search_query.into()],
+                        let result = (&shard)
+                            .search(
+                                Arc::new(SearchRequestBatch {
+                                    searches: vec![search_query],
                                 }),
                                 search_runtime_handle,
-                                None,
-                                hw_acc,
                             )
                             .await
                             .unwrap();
@@ -176,27 +149,26 @@         group.bench_function(format!("search-batch-{fid}"), |b| {
             b.iter(|| {
                 runtime.block_on(async {
-                    let mut rng = rng();
-                    let mut searches = Vec::with_capacity(batch_size);
+                    let mut rng = thread_rng();
+                    let mut searches = Vec::new();
                     for _i in 0..batch_size {
                         let query = random_vector(&mut rng, 100);
-                        let search_query = SearchRequestInternal {
-                            vector: query.into(),
+                        let search_query = SearchRequest {
+                            vector: query,
                             filter: filter.clone(),
                             params: None,
                             limit: 10,
-                            offset: None,
+                            offset: 0,
                             with_payload: None,
-                            with_vector: None,
+                            with_vector: false,
                             score_threshold: None,
                         };
-                        searches.push(search_query.into());
+                        searches.push(search_query);
                     }
 
-                    let hw_acc = HwMeasurementAcc::new();
-                    let search_query = CoreSearchRequestBatch { searches };
-                    let result = shard
-                        .core_search(Arc::new(search_query), search_runtime_handle, None, hw_acc)
+                    let search_query = SearchRequestBatch { searches };
+                    let result = (&shard)
+                        .search(Arc::new(search_query), search_runtime_handle)
                         .await
                         .unwrap();
                     assert!(!result.is_empty());
