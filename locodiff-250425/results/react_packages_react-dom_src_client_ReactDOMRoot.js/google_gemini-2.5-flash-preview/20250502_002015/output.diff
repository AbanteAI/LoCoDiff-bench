--- react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual)@@ -7,7 +7,11 @@  * @flow
  */
 
-import type {ReactNodeList, ReactFormState} from 'shared/ReactTypes';
+import type {Container} from 'react-dom-bindings/src/client/ReactDOMHostConfig';
+import type {
+  ReactNodeList,
+  ReactFormState,
+} from 'shared/ReactTypes';
 import type {
   FiberRoot,
   TransitionTracingCallbacks,
@@ -18,61 +22,13 @@ import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
 import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
 
-export type RootType = {
-  render(children: ReactNodeList): void,
-  unmount(): void,
-  _internalRoot: FiberRoot | null,
-};
-
-export type CreateRootOptions = {
-  unstable_strictMode?: boolean,
-  unstable_transitionCallbacks?: TransitionTracingCallbacks,
-  identifierPrefix?: string,
-  onUncaughtError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  onCaughtError?: (
-    error: mixed,
-    errorInfo: {
-      +componentStack?: ?string,
-      +errorBoundary?: ?React$Component<any, any>,
-    },
-  ) => void,
-  onRecoverableError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-};
-
-export type HydrateRootOptions = {
-  // Hydration options
-  onHydrated?: (hydrationBoundary: Comment) => void,
-  onDeleted?: (hydrationBoundary: Comment) => void,
-  // Options for all roots
-  unstable_strictMode?: boolean,
-  unstable_transitionCallbacks?: TransitionTracingCallbacks,
-  identifierPrefix?: string,
-  onUncaughtError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  onCaughtError?: (
-    error: mixed,
-    errorInfo: {
-      +componentStack?: ?string,
-      +errorBoundary?: ?React$Component<any, any>,
-    },
-  ) => void,
-  onRecoverableError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  formState?: ReactFormState<any, any> | null,
-};
-
+
+import ReactDOMSharedInternals from '../ReactDOMSharedInternals';
+const {Dispatcher} = ReactDOMSharedInternals;
+
+import {ReactDOMClientDispatcher} from 'react-dom-bindings/src/client/ReactFiberConfigDOM';
 import {
-  isContainerMarkedAsRoot,
+  clearContainer,
   markContainerAsRoot,
   unmarkContainerAsRoot,
 } from 'react-dom-bindings/src/client/ReactDOMComponentTree';
@@ -91,6 +47,60 @@   defaultOnRecoverableError,
 } from 'react-reconciler/src/ReactFiberReconciler';
 import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
+
+
+export type RootType = {
+  render(children: ReactNodeList): void,
+  unmount(): void,
+  _internalRoot: FiberRoot | null,
+};
+
+export type CreateRootOptions = {
+  unstable_strictMode?: boolean,
+  unstable_transitionCallbacks?: TransitionTracingCallbacks,
+  identifierPrefix?: string,
+  onUncaughtError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  onCaughtError?: (
+    error: mixed,
+    errorInfo: {
+      +componentStack?: ?string,
+      +errorBoundary?: ?React$Component<any, any>,
+    },
+  ) => void,
+  onRecoverableError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+};
+
+export type HydrateRootOptions = {
+  // Hydration options
+  onHydrated?: (hydrationBoundary: Comment) => void,
+  onDeleted?: (hydrationBoundary: Comment) => void,
+  // Options for all roots
+  unstable_strictMode?: boolean,
+  unstable_transitionCallbacks?: TransitionTracingCallbacks,
+  identifierPrefix?: string,
+  onUncaughtError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  onCaughtError?: (
+    error: mixed,
+    errorInfo: {
+      +componentStack?: ?string,
+      +errorBoundary?: ?React$Component<any, any>,
+    },
+  ) => void,
+  onRecoverableError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  formState?: ReactFormState<any, any> | null,
+};
 
 // $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
@@ -225,6 +235,7 @@   const root = createContainer(
     container,
     ConcurrentRoot,
+    false,
     null,
     isStrictMode,
     concurrentUpdatesByDefaultOverride,
@@ -316,7 +327,6 @@ 
   const root = createHydrationContainer(
     initialChildren,
-    null,
     container,
     ConcurrentRoot,
     hydrationCallbacks,
@@ -330,6 +340,7 @@     formState,
   );
   markContainerAsRoot(root.current, container);
+  Dispatcher.current = ReactDOMClientDispatcher;
   // This can't be a comment node since hydration doesn't work on comment nodes anyway.
   listenToAllSupportedEvents(container);
 
