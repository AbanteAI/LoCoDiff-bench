
index 9352fb4a..90e36a4d 100644
--- a/react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected):tmp/tmpaxm95u0t_expected.txt	
+++ b/react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual):tmp/tmpv_5bw681_actual.txt	
@@ -7,16 +7,16 @@
  * @flow
  */
 
-import type {ReactNodeList, ReactFormState} from 'shared/ReactTypes';
+import type {ReactNodeList} from 'shared/ReactTypes';
 import type {
   FiberRoot,
   TransitionTracingCallbacks,
 } from 'react-reconciler/src/ReactInternalTypes';
+import type {ReactFormState} from 'shared/ReactTypes';
 
 import {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';
 import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
 import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
-import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
 
 export type RootType = {
   render(children: ReactNodeList): void,
@@ -72,20 +72,6 @@ export type HydrateRootOptions = {
 };
 
 import {
-  isContainerMarkedAsRoot,
-  markContainerAsRoot,
-  unmarkContainerAsRoot,
-} from 'react-dom-bindings/src/client/ReactDOMComponentTree';
-import {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';
-import {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';
-
-import {
-  createContainer,
-  createHydrationContainer,
-  updateContainer,
-  updateContainerSync,
-  flushSyncWork,
-  isAlreadyRendering,
   defaultOnUncaughtError,
   defaultOnCaughtError,
   defaultOnRecoverableError,
@@ -97,9 +83,8 @@ function ReactDOMRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
 
-// $FlowFixMe[prop-missing] found when upgrading Flow
+// $FlowFixMe[missing-this-annot]
 ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
-  // $FlowFixMe[missing-this-annot]
   function (children: ReactNodeList): void {
     const root = this._internalRoot;
     if (root === null) {
@@ -107,7 +92,6 @@ ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
     }
 
     if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
       const args = arguments;
       if (typeof args[1] === 'function') {
         console.error(
@@ -129,12 +113,10 @@ ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
     updateContainer(children, root, null, null);
   };
 
-// $FlowFixMe[prop-missing] found when upgrading Flow
+// $FlowFixMe[missing-this-annot]
 ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
-  // $FlowFixMe[missing-this-annot]
   function (): void {
     if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
       const args = arguments;
       if (typeof args[0] === 'function') {
         console.error(
@@ -181,27 +163,6 @@ export function createRoot(
   let transitionCallbacks = null;
 
   if (options !== null && options !== undefined) {
-    if (__DEV__) {
-      if ((options: any).hydrate) {
-        console.warn(
-          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',
-        );
-      } else {
-        if (
-          typeof options === 'object' &&
-          options !== null &&
-          (options: any).$$typeof === REACT_ELEMENT_TYPE
-        ) {
-          console.error(
-            'You passed a JSX element to createRoot. You probably meant to ' +
-              'call root.render instead. ' +
-              'Example usage:\n\n' +
-              '  let root = createRoot(domContainer);\n' +
-              '  root.render(<App />);',
-          );
-        }
-      }
-    }
     if (options.unstable_strictMode === true) {
       isStrictMode = true;
     }
@@ -226,6 +187,7 @@ export function createRoot(
     container,
     ConcurrentRoot,
     null,
+    null,
     isStrictMode,
     concurrentUpdatesByDefaultOverride,
     identifierPrefix,
@@ -235,27 +197,23 @@ export function createRoot(
     transitionCallbacks,
   );
   markContainerAsRoot(root.current, container);
-
   const rootContainerElement: Document | Element | DocumentFragment =
-    !disableCommentsAsDOMContainers && container.nodeType === COMMENT_NODE
-      ? (container.parentNode: any)
-      : container;
+    container.nodeType === COMMENT_NODE ? (container.parentNode: any) : container;
   listenToAllSupportedEvents(rootContainerElement);
 
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
   return new ReactDOMRoot(root);
 }
 
-// $FlowFixMe[missing-this-annot]
 function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
+
 function scheduleHydration(target: Node) {
   if (target) {
     queueExplicitHydrationTarget(target);
   }
 }
-// $FlowFixMe[prop-missing] found when upgrading Flow
+
 ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
 
 export function hydrateRoot(
@@ -269,17 +227,6 @@ export function hydrateRoot(
 
   warnIfReactDOMContainerInDEV(container);
 
-  if (__DEV__) {
-    if (initialChildren === undefined) {
-      console.error(
-        'Must provide initial children as second argument to hydrateRoot. ' +
-          'Example usage: hydrateRoot(domContainer, <App />)',
-      );
-    }
-  }
-
-  // For now we reuse the whole bag of options since they contain
-  // the hydration callbacks.
   const hydrationCallbacks = options != null ? options : null;
 
   const concurrentUpdatesByDefaultOverride = false;
@@ -290,68 +237,6 @@ export function hydrateRoot(
   let onRecoverableError = defaultOnRecoverableError;
   let transitionCallbacks = null;
   let formState = null;
-  if (options !== null && options !== undefined) {
-    if (options.unstable_strictMode === true) {
-      isStrictMode = true;
-    }
-    if (options.identifierPrefix !== undefined) {
-      identifierPrefix = options.identifierPrefix;
-    }
-    if (options.onUncaughtError !== undefined) {
-      onUncaughtError = options.onUncaughtError;
-    }
-    if (options.onCaughtError !== undefined) {
-      onCaughtError = options.onCaughtError;
-    }
-    if (options.onRecoverableError !== undefined) {
-      onRecoverableError = options.onRecoverableError;
-    }
-    if (options.unstable_transitionCallbacks !== undefined) {
-      transitionCallbacks = options.unstable_transitionCallbacks;
-    }
-    if (options.formState !== undefined) {
-      formState = options.formState;
-    }
-  }
 
-  const root = createHydrationContainer(
-    initialChildren,
-    null,
-    container,
-    ConcurrentRoot,
-    hydrationCallbacks,
-    isStrictMode,
-    concurrentUpdatesByDefaultOverride,
-    identifierPrefix,
-    onUncaughtError,
-    onCaughtError,
-    onRecoverableError,
-    transitionCallbacks,
-    formState,
-  );
-  markContainerAsRoot(root.current, container);
-  // This can't be a comment node since hydration doesn't work on comment nodes anyway.
-  listenToAllSupportedEvents(container);
-
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
-  return new ReactDOMHydrationRoot(root);
-}
-
-function warnIfReactDOMContainerInDEV(container: any) {
-  if (__DEV__) {
-    if (isContainerMarkedAsRoot(container)) {
-      if (container._reactRootContainer) {
-        console.error(
-          'You are calling ReactDOMClient.createRoot() on a container that was previously ' +
-            'passed to ReactDOM.render(). This is not supported.',
-        );
-      } else {
-        console.error(
-          'You are calling ReactDOMClient.createRoot() on a container that ' +
-            'has already been passed to createRoot() before. Instead, call ' +
-            'root.render() on the existing root instead if you want to update it.',
-        );
-      }
-    }
-  }
-}
\ No newline at end of file
+  if (options !== null && options !== undefined) {
+    if
\ No newline at end of file
