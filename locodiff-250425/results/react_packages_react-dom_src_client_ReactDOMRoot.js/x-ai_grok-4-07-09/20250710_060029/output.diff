
index 9352fb4a8..d0acf4ef9 100644
--- a/react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected):tmp/tmpbw27w8qq_expected.txt	
+++ b/react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual):tmp/tmpdfe07me4_actual.txt	
@@ -16,7 +16,31 @@ import type {
 import {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';
 import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
 import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
-import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
+
+import {
+  disableCommentsAsDOMContainers,
+} from 'shared/ReactFeatureFlags';
+
+import {
+  isContainerMarkedAsRoot,
+  markContainerAsRoot,
+  unmarkContainerAsRoot,
+} from 'react-dom-bindings/src/client/ReactDOMComponentTree';
+import {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';
+import {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';
+
+import {
+  createContainer,
+  createHydrationContainer,
+  updateContainer,
+  updateContainerSync,
+  flushSyncWork,
+  isAlreadyRendering,
+  defaultOnUncaughtError,
+  defaultOnCaughtError,
+  defaultOnRecoverableError,
+} from 'react-reconciler/src/ReactFiberReconciler';
+import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
 
 export type RootType = {
   render(children: ReactNodeList): void,
@@ -71,96 +95,73 @@ export type HydrateRootOptions = {
   formState?: ReactFormState<any, any> | null,
 };
 
-import {
-  isContainerMarkedAsRoot,
-  markContainerAsRoot,
-  unmarkContainerAsRoot,
-} from 'react-dom-bindings/src/client/ReactDOMComponentTree';
-import {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';
-import {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';
-
-import {
-  createContainer,
-  createHydrationContainer,
-  updateContainer,
-  updateContainerSync,
-  flushSyncWork,
-  isAlreadyRendering,
-  defaultOnUncaughtError,
-  defaultOnCaughtError,
-  defaultOnRecoverableError,
-} from 'react-reconciler/src/ReactFiberReconciler';
-import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
-
 // $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
 
 // $FlowFixMe[prop-missing] found when upgrading Flow
-ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
-  // $FlowFixMe[missing-this-annot]
-  function (children: ReactNodeList): void {
-    const root = this._internalRoot;
-    if (root === null) {
-      throw new Error('Cannot update an unmounted root.');
-    }
+// $FlowFixMe[missing-this-annot]
+ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function (children: ReactNodeList): void {
+  const root = this._internalRoot;
+  if (root === null) {
+    throw new Error('Cannot update an unmounted root.');
+  }
 
-    if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
-      const args = arguments;
-      if (typeof args[1] === 'function') {
-        console.error(
-          'does not support the second callback argument. ' +
-            'To execute a side effect after rendering, declare it in a component body with useEffect().',
-        );
-      } else if (isValidContainer(args[1])) {
-        console.error(
-          'You passed a container to the second argument of root.render(...). ' +
-            "You don't need to pass it again since you already passed it to create the root.",
-        );
-      } else if (typeof args[1] !== 'undefined') {
-        console.error(
-          'You passed a second argument to root.render(...) but it only accepts ' +
-            'one argument.',
-        );
-      }
+  if (__DEV__) {
+    // using a reference to `arguments` bails out of GCC optimizations which affect function arity
+    const args = arguments;
+    if (typeof args[1] === 'function') {
+      console.error(
+        'does not support the second callback argument. ' +
+          'To execute a side effect after rendering, declare it in a component body with useEffect().',
+      );
+    } else if (isValidContainer(args[1])) {
+      console.error(
+        'You passed a container to the second argument of root.render(...). ' +
+          "You don't need to pass it again since you already passed it to create the root.",
+      );
+    } else if (typeof args[1] !== 'undefined') {
+      console.error(
+        'You passed a second argument to root.render(...) but it only accepts ' +
+          'one argument.',
+      );
     }
-    updateContainer(children, root, null, null);
-  };
+  }
+  updateContainer(children, root, null, null);
+};
 
 // $FlowFixMe[prop-missing] found when upgrading Flow
-ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
-  // $FlowFixMe[missing-this-annot]
-  function (): void {
+// $FlowFixMe[missing-this-annot]
+ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function (): void {
+  if (__DEV__) {
+    // using a reference to `arguments` bails out of GCC optimizations which affect function arity
+    const args = arguments;
+    if (typeof args[0] === 'function') {
+      console.error(
+        'does not support a callback argument. ' +
+          'To execute a side effect after rendering, declare it in a component body with useEffect().',
+      );
+    }
+  }
+  const root = this._internalRoot;
+  if (root !== null) {
+    this._internalRoot = null;
+    const container = root.containerInfo;
     if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
-      const args = arguments;
-      if (typeof args[0] === 'function') {
+      if (isAlreadyRendering()) {
         console.error(
-          'does not support a callback argument. ' +
-            'To execute a side effect after rendering, declare it in a component body with useEffect().',
+          'Attempted to synchronously unmount a root while React was already ' +
+            'rendering. React cannot finish unmounting the root until the ' +
+            'current render has completed, which may lead to a race condition.',
         );
       }
     }
-    const root = this._internalRoot;
-    if (root !== null) {
-      this._internalRoot = null;
-      const container = root.containerInfo;
-      if (__DEV__) {
-        if (isAlreadyRendering()) {
-          console.error(
-            'Attempted to synchronously unmount a root while React was already ' +
-              'rendering. React cannot finish unmounting the root until the ' +
-              'current render has completed, which may lead to a race condition.',
-          );
-        }
-      }
-      updateContainerSync(null, root, null, null);
-      flushSyncWork();
-      unmarkContainerAsRoot(container);
-    }
-  };
+    updateContainerSync(null, root, null, null);
+    flushSyncWork();
+    unmarkContainerAsRoot(container);
+  }
+};
 
 export function createRoot(
   container: Element | Document | DocumentFragment,
@@ -184,7 +185,7 @@ export function createRoot(
     if (__DEV__) {
       if ((options: any).hydrate) {
         console.warn(
-          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',
+          'hydrate through createRoot is deprecated. Use ReactDOM.hydrateRoot(container, <App />) instead.',
         );
       } else {
         if (
@@ -242,7 +243,6 @@ export function createRoot(
       : container;
   listenToAllSupportedEvents(rootContainerElement);
 
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
   return new ReactDOMRoot(root);
 }
 
@@ -250,11 +250,14 @@ export function createRoot(
 function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
+
+// $FlowFixMe[prop-missing] found when upgrading Flow
 function scheduleHydration(target: Node) {
   if (target) {
     queueExplicitHydrationTarget(target);
   }
 }
+
 // $FlowFixMe[prop-missing] found when upgrading Flow
 ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
 
@@ -316,7 +319,6 @@ export function hydrateRoot(
 
   const root = createHydrationContainer(
     initialChildren,
-    null,
     container,
     ConcurrentRoot,
     hydrationCallbacks,
@@ -333,12 +335,22 @@ export function hydrateRoot(
   // This can't be a comment node since hydration doesn't work on comment nodes anyway.
   listenToAllSupportedEvents(container);
 
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
   return new ReactDOMHydrationRoot(root);
 }
 
 function warnIfReactDOMContainerInDEV(container: any) {
   if (__DEV__) {
+    if (container.nodeType === ELEMENT_NODE &&
+      ((container: any): Element).tagName &&
+      ((container: any): Element).tagName.toUpperCase() === 'BODY') {
+      console.error(
+        'Creating roots directly with document.body is ' +
+          'discouraged, since its children are often manipulated by third-party ' +
+          'scripts and browser extensions. This may lead to subtle ' +
+          'reconciliation issues. Try using a container element created ' +
+          'for your app.',
+      );
+    }
     if (isContainerMarkedAsRoot(container)) {
       if (container._reactRootContainer) {
         console.error(
