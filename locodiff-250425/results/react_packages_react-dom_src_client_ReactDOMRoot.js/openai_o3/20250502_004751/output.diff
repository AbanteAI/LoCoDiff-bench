--- react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual)@@ -92,14 +92,18 @@ } from 'react-reconciler/src/ReactFiberReconciler';
 import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
 
+import ReactDOMSharedInternals from '../ReactDOMSharedInternals';
+const {Dispatcher} = ReactDOMSharedInternals;
+import {ReactDOMClientDispatcher} from 'react-dom-bindings/src/client/ReactFiberConfigDOM';
+
 // $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
 
 // $FlowFixMe[prop-missing] found when upgrading Flow
+// $FlowFixMe[missing-this-annot]
 ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
-  // $FlowFixMe[missing-this-annot]
   function (children: ReactNodeList): void {
     const root = this._internalRoot;
     if (root === null) {
@@ -130,8 +134,8 @@   };
 
 // $FlowFixMe[prop-missing] found when upgrading Flow
+// $FlowFixMe[missing-this-annot]
 ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
-  // $FlowFixMe[missing-this-annot]
   function (): void {
     if (__DEV__) {
       // using a reference to `arguments` bails out of GCC optimizations which affect function arity
@@ -172,7 +176,9 @@ 
   warnIfReactDOMContainerInDEV(container);
 
+  // No longer configurable: always false
   const concurrentUpdatesByDefaultOverride = false;
+
   let isStrictMode = false;
   let identifierPrefix = '';
   let onUncaughtError = defaultOnUncaughtError;
@@ -181,27 +187,6 @@   let transitionCallbacks = null;
 
   if (options !== null && options !== undefined) {
-    if (__DEV__) {
-      if ((options: any).hydrate) {
-        console.warn(
-          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',
-        );
-      } else {
-        if (
-          typeof options === 'object' &&
-          options !== null &&
-          (options: any).$$typeof === REACT_ELEMENT_TYPE
-        ) {
-          console.error(
-            'You passed a JSX element to createRoot. You probably meant to ' +
-              'call root.render instead. ' +
-              'Example usage:\n\n' +
-              '  let root = createRoot(domContainer);\n' +
-              '  root.render(<App />);',
-          );
-        }
-      }
-    }
     if (options.unstable_strictMode === true) {
       isStrictMode = true;
     }
@@ -225,7 +210,6 @@   const root = createContainer(
     container,
     ConcurrentRoot,
-    null,
     isStrictMode,
     concurrentUpdatesByDefaultOverride,
     identifierPrefix,
@@ -236,6 +220,8 @@   );
   markContainerAsRoot(root.current, container);
 
+  Dispatcher.current = ReactDOMClientDispatcher;
+
   const rootContainerElement: Document | Element | DocumentFragment =
     !disableCommentsAsDOMContainers && container.nodeType === COMMENT_NODE
       ? (container.parentNode: any)
@@ -246,10 +232,11 @@   return new ReactDOMRoot(root);
 }
 
-// $FlowFixMe[missing-this-annot]
 function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
+  // $FlowFixMe[missing-this-annot]
   this._internalRoot = internalRoot;
 }
+
 function scheduleHydration(target: Node) {
   if (target) {
     queueExplicitHydrationTarget(target);
@@ -282,7 +269,9 @@   // the hydration callbacks.
   const hydrationCallbacks = options != null ? options : null;
 
+  // No longer configurable: always false
   const concurrentUpdatesByDefaultOverride = false;
+
   let isStrictMode = false;
   let identifierPrefix = '';
   let onUncaughtError = defaultOnUncaughtError;
@@ -316,7 +305,6 @@ 
   const root = createHydrationContainer(
     initialChildren,
-    null,
     container,
     ConcurrentRoot,
     hydrationCallbacks,
@@ -330,6 +318,7 @@     formState,
   );
   markContainerAsRoot(root.current, container);
+  Dispatcher.current = ReactDOMClientDispatcher;
   // This can't be a comment node since hydration doesn't work on comment nodes anyway.
   listenToAllSupportedEvents(container);
 
