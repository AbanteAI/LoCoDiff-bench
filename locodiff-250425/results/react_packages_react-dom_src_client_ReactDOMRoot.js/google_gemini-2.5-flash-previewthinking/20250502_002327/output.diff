
index 9352fb4a..aa3faa1c 100644
--- a/react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected):tmp/tmpgugrc6kf_expected.txt	
+++ b/react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual):tmp/tmpwe9kntew_actual.txt	
@@ -14,10 +14,33 @@ import type {
 } from 'react-reconciler/src/ReactInternalTypes';
 
 import {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';
-import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
+// This import is unused since we added the default dispatcher
+// import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
+
 import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
 import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
 
+import {
+  isContainerMarkedAsRoot,
+  markContainerAsRoot,
+  unmarkContainerAsRoot,
+} from 'react-dom-bindings/src/client/ReactDOMComponentTree';
+import {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';
+import {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';
+
+import {
+  createContainer,
+  createHydrationContainer,
+  updateContainer,
+  updateContainerSync,
+  flushSyncWork,
+  isAlreadyRendering,
+  defaultOnUncaughtError,
+  defaultOnCaughtError,
+  defaultOnRecoverableError,
+} from 'react-reconciler/src/ReactFiberReconciler';
+import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
+
 export type RootType = {
   render(children: ReactNodeList): void,
   unmount(): void,
@@ -71,27 +94,6 @@ export type HydrateRootOptions = {
   formState?: ReactFormState<any, any> | null,
 };
 
-import {
-  isContainerMarkedAsRoot,
-  markContainerAsRoot,
-  unmarkContainerAsRoot,
-} from 'react-dom-bindings/src/client/ReactDOMComponentTree';
-import {listenToAllSupportedEvents} from 'react-dom-bindings/src/events/DOMPluginEventSystem';
-import {COMMENT_NODE} from 'react-dom-bindings/src/client/HTMLNodeType';
-
-import {
-  createContainer,
-  createHydrationContainer,
-  updateContainer,
-  updateContainerSync,
-  flushSyncWork,
-  isAlreadyRendering,
-  defaultOnUncaughtError,
-  defaultOnCaughtError,
-  defaultOnRecoverableError,
-} from 'react-reconciler/src/ReactFiberReconciler';
-import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
-
 // $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
@@ -170,7 +172,23 @@ export function createRoot(
     throw new Error('Target container is not a DOM element.');
   }
 
-  warnIfReactDOMContainerInDEV(container);
+  // TODO: Remove legacy containers
+
+  if (__DEV__) {
+    if (
+      typeof options === 'object' &&
+      options !== null &&
+      (options: any).$$typeof === REACT_ELEMENT_TYPE
+    ) {
+      console.error(
+        'You passed a JSX element to createRoot. You probably meant to ' +
+          'call root.render instead. ' +
+          'Example usage:\n\n' +
+          '  let root = createRoot(domContainer);\n' +
+          '  root.render(<App />);',
+      );
+    }
+  }
 
   const concurrentUpdatesByDefaultOverride = false;
   let isStrictMode = false;
@@ -181,27 +199,6 @@ export function createRoot(
   let transitionCallbacks = null;
 
   if (options !== null && options !== undefined) {
-    if (__DEV__) {
-      if ((options: any).hydrate) {
-        console.warn(
-          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',
-        );
-      } else {
-        if (
-          typeof options === 'object' &&
-          options !== null &&
-          (options: any).$$typeof === REACT_ELEMENT_TYPE
-        ) {
-          console.error(
-            'You passed a JSX element to createRoot. You probably meant to ' +
-              'call root.render instead. ' +
-              'Example usage:\n\n' +
-              '  let root = createRoot(domContainer);\n' +
-              '  root.render(<App />);',
-          );
-        }
-      }
-    }
     if (options.unstable_strictMode === true) {
       isStrictMode = true;
     }
@@ -225,6 +222,7 @@ export function createRoot(
   const root = createContainer(
     container,
     ConcurrentRoot,
+    false,
     null,
     isStrictMode,
     concurrentUpdatesByDefaultOverride,
@@ -250,10 +248,14 @@ export function createRoot(
 function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
+
 function scheduleHydration(target: Node) {
-  if (target) {
-    queueExplicitHydrationTarget(target);
-  }
+  // This is not useful when called from the public API, but is used
+  // internally by the reconciler. For example, for the legacy
+  // render/hydrate API, we need to schedule hydration targets as
+  // they are encountered.
+  // (TODO: Delete this function when we delete the legacy API.)
+  // queueExplicitHydrationTarget(target);
 }
 // $FlowFixMe[prop-missing] found when upgrading Flow
 ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
@@ -267,8 +269,6 @@ export function hydrateRoot(
     throw new Error('Target container is not a DOM element.');
   }
 
-  warnIfReactDOMContainerInDEV(container);
-
   if (__DEV__) {
     if (initialChildren === undefined) {
       console.error(
@@ -276,6 +276,17 @@ export function hydrateRoot(
           'Example usage: hydrateRoot(domContainer, <App />)',
       );
     }
+    if (
+      typeof options === 'object' &&
+      options !== null &&
+      (options: any).$$typeof === REACT_ELEMENT_TYPE
+    ) {
+      console.error(
+        'You passed a JSX element to hydrateRoot. You probably meant to ' +
+          'pass it as the second argument. ' +
+          'Example usage: hydrateRoot(domContainer, <App />)',
+      );
+    }
   }
 
   // For now we reuse the whole bag of options since they contain
