--- react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual)@@ -14,62 +14,11 @@ } from 'react-reconciler/src/ReactInternalTypes';
 
 import {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';
-import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
+// This import is unused since we added the default dispatcher
+// import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
+
 import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
 import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
-
-export type RootType = {
-  render(children: ReactNodeList): void,
-  unmount(): void,
-  _internalRoot: FiberRoot | null,
-};
-
-export type CreateRootOptions = {
-  unstable_strictMode?: boolean,
-  unstable_transitionCallbacks?: TransitionTracingCallbacks,
-  identifierPrefix?: string,
-  onUncaughtError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  onCaughtError?: (
-    error: mixed,
-    errorInfo: {
-      +componentStack?: ?string,
-      +errorBoundary?: ?React$Component<any, any>,
-    },
-  ) => void,
-  onRecoverableError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-};
-
-export type HydrateRootOptions = {
-  // Hydration options
-  onHydrated?: (hydrationBoundary: Comment) => void,
-  onDeleted?: (hydrationBoundary: Comment) => void,
-  // Options for all roots
-  unstable_strictMode?: boolean,
-  unstable_transitionCallbacks?: TransitionTracingCallbacks,
-  identifierPrefix?: string,
-  onUncaughtError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  onCaughtError?: (
-    error: mixed,
-    errorInfo: {
-      +componentStack?: ?string,
-      +errorBoundary?: ?React$Component<any, any>,
-    },
-  ) => void,
-  onRecoverableError?: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  formState?: ReactFormState<any, any> | null,
-};
 
 import {
   isContainerMarkedAsRoot,
@@ -91,6 +40,59 @@   defaultOnRecoverableError,
 } from 'react-reconciler/src/ReactFiberReconciler';
 import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
+
+export type RootType = {
+  render(children: ReactNodeList): void,
+  unmount(): void,
+  _internalRoot: FiberRoot | null,
+};
+
+export type CreateRootOptions = {
+  unstable_strictMode?: boolean,
+  unstable_transitionCallbacks?: TransitionTracingCallbacks,
+  identifierPrefix?: string,
+  onUncaughtError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  onCaughtError?: (
+    error: mixed,
+    errorInfo: {
+      +componentStack?: ?string,
+      +errorBoundary?: ?React$Component<any, any>,
+    },
+  ) => void,
+  onRecoverableError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+};
+
+export type HydrateRootOptions = {
+  // Hydration options
+  onHydrated?: (hydrationBoundary: Comment) => void,
+  onDeleted?: (hydrationBoundary: Comment) => void,
+  // Options for all roots
+  unstable_strictMode?: boolean,
+  unstable_transitionCallbacks?: TransitionTracingCallbacks,
+  identifierPrefix?: string,
+  onUncaughtError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  onCaughtError?: (
+    error: mixed,
+    errorInfo: {
+      +componentStack?: ?string,
+      +errorBoundary?: ?React$Component<any, any>,
+    },
+  ) => void,
+  onRecoverableError?: (
+    error: mixed,
+    errorInfo: {+componentStack?: ?string},
+  ) => void,
+  formState?: ReactFormState<any, any> | null,
+};
 
 // $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
@@ -170,7 +172,23 @@     throw new Error('Target container is not a DOM element.');
   }
 
-  warnIfReactDOMContainerInDEV(container);
+  // TODO: Remove legacy containers
+
+  if (__DEV__) {
+    if (
+      typeof options === 'object' &&
+      options !== null &&
+      (options: any).$$typeof === REACT_ELEMENT_TYPE
+    ) {
+      console.error(
+        'You passed a JSX element to createRoot. You probably meant to ' +
+          'call root.render instead. ' +
+          'Example usage:\n\n' +
+          '  let root = createRoot(domContainer);\n' +
+          '  root.render(<App />);',
+      );
+    }
+  }
 
   const concurrentUpdatesByDefaultOverride = false;
   let isStrictMode = false;
@@ -181,27 +199,6 @@   let transitionCallbacks = null;
 
   if (options !== null && options !== undefined) {
-    if (__DEV__) {
-      if ((options: any).hydrate) {
-        console.warn(
-          'hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.',
-        );
-      } else {
-        if (
-          typeof options === 'object' &&
-          options !== null &&
-          (options: any).$$typeof === REACT_ELEMENT_TYPE
-        ) {
-          console.error(
-            'You passed a JSX element to createRoot. You probably meant to ' +
-              'call root.render instead. ' +
-              'Example usage:\n\n' +
-              '  let root = createRoot(domContainer);\n' +
-              '  root.render(<App />);',
-          );
-        }
-      }
-    }
     if (options.unstable_strictMode === true) {
       isStrictMode = true;
     }
@@ -225,6 +222,7 @@   const root = createContainer(
     container,
     ConcurrentRoot,
+    false,
     null,
     isStrictMode,
     concurrentUpdatesByDefaultOverride,
@@ -250,10 +248,14 @@ function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
+
 function scheduleHydration(target: Node) {
-  if (target) {
-    queueExplicitHydrationTarget(target);
-  }
+  // This is not useful when called from the public API, but is used
+  // internally by the reconciler. For example, for the legacy
+  // render/hydrate API, we need to schedule hydration targets as
+  // they are encountered.
+  // (TODO: Delete this function when we delete the legacy API.)
+  // queueExplicitHydrationTarget(target);
 }
 // $FlowFixMe[prop-missing] found when upgrading Flow
 ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
@@ -267,12 +269,21 @@     throw new Error('Target container is not a DOM element.');
   }
 
-  warnIfReactDOMContainerInDEV(container);
-
   if (__DEV__) {
     if (initialChildren === undefined) {
       console.error(
         'Must provide initial children as second argument to hydrateRoot. ' +
+          'Example usage: hydrateRoot(domContainer, <App />)',
+      );
+    }
+    if (
+      typeof options === 'object' &&
+      options !== null &&
+      (options: any).$$typeof === REACT_ELEMENT_TYPE
+    ) {
+      console.error(
+        'You passed a JSX element to hydrateRoot. You probably meant to ' +
+          'pass it as the second argument. ' +
           'Example usage: hydrateRoot(domContainer, <App />)',
       );
     }
