--- react_packages_react-dom_src_client_ReactDOMRoot.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src_client_ReactDOMRoot.js_extracted.txt (actual)@@ -7,6 +7,7 @@  * @flow
  */
 
+import type {Container} from './ReactDOMHostConfig';
 import type {ReactNodeList, ReactFormState} from 'shared/ReactTypes';
 import type {
   FiberRoot,
@@ -14,6 +15,9 @@ } from 'react-reconciler/src/ReactInternalTypes';
 
 import {isValidContainer} from 'react-dom-bindings/src/client/ReactDOMContainer';
+import ReactDOMSharedInternals from '../ReactDOMSharedInternals';
+const {Dispatcher} = ReactDOMSharedInternals;
+import {ReactDOMClientDispatcher} from 'react-dom-bindings/src/client/ReactFiberConfigDOM';
 import {queueExplicitHydrationTarget} from 'react-dom-bindings/src/events/ReactDOMEventReplaying';
 import {REACT_ELEMENT_TYPE} from 'shared/ReactSymbols';
 import {disableCommentsAsDOMContainers} from 'shared/ReactFeatureFlags';
@@ -24,13 +28,13 @@   _internalRoot: FiberRoot | null,
 };
 
-export type CreateRootOptions = {
+export type CreateRootOptions = {|
   unstable_strictMode?: boolean,
   unstable_transitionCallbacks?: TransitionTracingCallbacks,
   identifierPrefix?: string,
   onUncaughtError?: (
     error: mixed,
-    errorInfo: {+componentStack?: ?string},
+    errorInfo: { +componentStack?: ?string },
   ) => void,
   onCaughtError?: (
     error: mixed,
@@ -41,11 +45,11 @@   ) => void,
   onRecoverableError?: (
     error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-};
-
-export type HydrateRootOptions = {
+    errorInfo: { +componentStack?: ?string },
+  ) => void,
+|};
+
+export type HydrateRootOptions = {|
   // Hydration options
   onHydrated?: (hydrationBoundary: Comment) => void,
   onDeleted?: (hydrationBoundary: Comment) => void,
@@ -55,7 +59,7 @@   identifierPrefix?: string,
   onUncaughtError?: (
     error: mixed,
-    errorInfo: {+componentStack?: ?string},
+    errorInfo: { +componentStack?: ?string },
   ) => void,
   onCaughtError?: (
     error: mixed,
@@ -66,10 +70,10 @@   ) => void,
   onRecoverableError?: (
     error: mixed,
-    errorInfo: {+componentStack?: ?string},
+    errorInfo: { +componentStack?: ?string },
   ) => void,
   formState?: ReactFormState<any, any> | null,
-};
+|};
 
 import {
   isContainerMarkedAsRoot,
@@ -92,12 +96,14 @@ } from 'react-reconciler/src/ReactFiberReconciler';
 import {ConcurrentRoot} from 'react-reconciler/src/ReactRootTags';
 
-// $FlowFixMe[missing-this-annot]
 function ReactDOMRoot(internalRoot: FiberRoot) {
   this._internalRoot = internalRoot;
 }
 
-// $FlowFixMe[prop-missing] found when upgrading Flow
+function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
+  this._internalRoot = internalRoot;
+}
+
 ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render =
   // $FlowFixMe[missing-this-annot]
   function (children: ReactNodeList): void {
@@ -105,9 +111,7 @@     if (root === null) {
       throw new Error('Cannot update an unmounted root.');
     }
-
     if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
       const args = arguments;
       if (typeof args[1] === 'function') {
         console.error(
@@ -121,33 +125,43 @@         );
       } else if (typeof args[1] !== 'undefined') {
         console.error(
-          'You passed a second argument to root.render(...) but it only accepts ' +
-            'one argument.',
+          'You passed a second argument to root.render(...) but it only accepts one argument.',
+        );
+      }
+    }
+    const container = root.containerInfo;
+    if (
+      !disableCommentsAsDOMContainers &&
+      container.nodeType === COMMENT_NODE
+    ) {
+      const hostInstance = findHostInstanceWithNoPortals(root.current);
+      if (hostInstance && hostInstance.parentNode !== container) {
+        console.error(
+          'render(...): It looks like the React-rendered content of the ' +
+            'root container was removed without using React. This is not ' +
+            'supported and will cause errors. Instead, call ' +
+            "root.unmount() to empty a root's container.",
         );
       }
     }
     updateContainer(children, root, null, null);
   };
 
-// $FlowFixMe[prop-missing] found when upgrading Flow
 ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount =
   // $FlowFixMe[missing-this-annot]
   function (): void {
-    if (__DEV__) {
-      // using a reference to `arguments` bails out of GCC optimizations which affect function arity
-      const args = arguments;
-      if (typeof args[0] === 'function') {
-        console.error(
-          'does not support a callback argument. ' +
-            'To execute a side effect after rendering, declare it in a component body with useEffect().',
-        );
-      }
-    }
     const root = this._internalRoot;
     if (root !== null) {
       this._internalRoot = null;
       const container = root.containerInfo;
       if (__DEV__) {
+        const args = arguments;
+        if (typeof args[0] === 'function') {
+          console.error(
+            'does not support a callback argument. ' +
+              'To execute a side effect after rendering, declare it in a component body with useEffect().',
+          );
+        }
         if (isAlreadyRendering()) {
           console.error(
             'Attempted to synchronously unmount a root while React was already ' +
@@ -162,6 +176,13 @@     }
   };
 
+function scheduleHydration(target: Node) {
+  if (target) {
+    queueExplicitHydrationTarget(target);
+  }
+}
+ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
+
 export function createRoot(
   container: Element | Document | DocumentFragment,
   options?: CreateRootOptions,
@@ -169,10 +190,8 @@   if (!isValidContainer(container)) {
     throw new Error('Target container is not a DOM element.');
   }
-
   warnIfReactDOMContainerInDEV(container);
 
-  const concurrentUpdatesByDefaultOverride = false;
   let isStrictMode = false;
   let identifierPrefix = '';
   let onUncaughtError = defaultOnUncaughtError;
@@ -180,7 +199,7 @@   let onRecoverableError = defaultOnRecoverableError;
   let transitionCallbacks = null;
 
-  if (options !== null && options !== undefined) {
+  if (options != null) {
     if (__DEV__) {
       if ((options: any).hydrate) {
         console.warn(
@@ -194,8 +213,8 @@         ) {
           console.error(
             'You passed a JSX element to createRoot. You probably meant to ' +
-              'call root.render instead. ' +
-              'Example usage:\n\n' +
+              'call root.render instead.\n\n' +
+              'Example:\n' +
               '  let root = createRoot(domContainer);\n' +
               '  root.render(<App />);',
           );
@@ -225,38 +244,25 @@   const root = createContainer(
     container,
     ConcurrentRoot,
+    false,
     null,
     isStrictMode,
-    concurrentUpdatesByDefaultOverride,
-    identifierPrefix,
     onUncaughtError,
     onCaughtError,
     onRecoverableError,
     transitionCallbacks,
+    identifierPrefix,
   );
   markContainerAsRoot(root.current, container);
 
-  const rootContainerElement: Document | Element | DocumentFragment =
+  const rootContainerElement: any =
     !disableCommentsAsDOMContainers && container.nodeType === COMMENT_NODE
       ? (container.parentNode: any)
       : container;
   listenToAllSupportedEvents(rootContainerElement);
 
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
   return new ReactDOMRoot(root);
 }
-
-// $FlowFixMe[missing-this-annot]
-function ReactDOMHydrationRoot(internalRoot: FiberRoot) {
-  this._internalRoot = internalRoot;
-}
-function scheduleHydration(target: Node) {
-  if (target) {
-    queueExplicitHydrationTarget(target);
-  }
-}
-// $FlowFixMe[prop-missing] found when upgrading Flow
-ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
 
 export function hydrateRoot(
   container: Document | Element,
@@ -266,23 +272,15 @@   if (!isValidContainer(container)) {
     throw new Error('Target container is not a DOM element.');
   }
-
   warnIfReactDOMContainerInDEV(container);
 
-  if (__DEV__) {
-    if (initialChildren === undefined) {
-      console.error(
-        'Must provide initial children as second argument to hydrateRoot. ' +
-          'Example usage: hydrateRoot(domContainer, <App />)',
-      );
-    }
-  }
-
-  // For now we reuse the whole bag of options since they contain
-  // the hydration callbacks.
-  const hydrationCallbacks = options != null ? options : null;
-
-  const concurrentUpdatesByDefaultOverride = false;
+  if (__DEV__ && initialChildren === undefined) {
+    console.error(
+      'Must provide initial children as second argument to hydrateRoot. ' +
+        'Example usage: hydrateRoot(domContainer, <App />)',
+    );
+  }
+
   let isStrictMode = false;
   let identifierPrefix = '';
   let onUncaughtError = defaultOnUncaughtError;
@@ -290,7 +288,8 @@   let onRecoverableError = defaultOnRecoverableError;
   let transitionCallbacks = null;
   let formState = null;
-  if (options !== null && options !== undefined) {
+
+  if (options != null) {
     if (options.unstable_strictMode === true) {
       isStrictMode = true;
     }
@@ -315,25 +314,20 @@   }
 
   const root = createHydrationContainer(
-    initialChildren,
-    null,
     container,
     ConcurrentRoot,
-    hydrationCallbacks,
+    true,
+    formState,
     isStrictMode,
-    concurrentUpdatesByDefaultOverride,
-    identifierPrefix,
     onUncaughtError,
     onCaughtError,
     onRecoverableError,
     transitionCallbacks,
-    formState,
+    identifierPrefix,
   );
   markContainerAsRoot(root.current, container);
-  // This can't be a comment node since hydration doesn't work on comment nodes anyway.
   listenToAllSupportedEvents(container);
 
-  // $FlowFixMe[invalid-constructor] Flow no longer supports calling new on functions
   return new ReactDOMHydrationRoot(root);
 }
 
