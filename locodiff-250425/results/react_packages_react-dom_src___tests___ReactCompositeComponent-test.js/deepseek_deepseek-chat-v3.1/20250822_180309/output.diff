
index 52bccce28..0a470a0b0 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_expectedoutput.txt (expected):tmp/tmpoo3hnruy_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_extracted.txt (actual):tmp/tmpywnaxj6y_actual.txt	
@@ -384,7 +384,6 @@ describe('ReactCompositeComponent', () => {
     await act(() => {
       root.render(component);
     });
-
     instance.forceUpdate();
 
     root.unmount(container);
@@ -555,7 +554,7 @@ describe('ReactCompositeComponent', () => {
 
     const root = ReactDOMClient.createRoot(document.createElement('div'));
     await expect(async () => {
-      await act(() => {
+      ReactDOM.flushSync(() => {
         root.render(instance);
       });
     }).rejects.toThrow();
@@ -1014,11 +1013,24 @@ describe('ReactCompositeComponent', () => {
     });
     assertLog([]);
 
-    // Re-render based on state again
-    await act(() => {
-      instance.appleRef.current.eatSlice();
-    });
-    assertLog(['red true 9']);
+    /* eslint-disable jest/no-conditional-expect */
+    if (gate(flags => flags.preventDefaultErrorSubclass)) {
+      // Re-render based on state again
+      await expect(async () => {
+        await act(() => {
+          instance.appleRef.current.eatSlice();
+        });
+      }).rejects.toThrowErrorMatchingInlineSnapshot(
+        `"Cannot read properties of undefined (reading 'slices')"`,
+      );
+    } else {
+      // Re-render based on state again
+      await act(() => {
+        instance.appleRef.current.eatSlice();
+      });
+      assertLog(['red true 9']);
+    }
+    /* eslint-enable jest/no-conditional-expect */
   });
 
   it('does not do a deep comparison for a shallow shouldComponentUpdate implementation', async () => {
@@ -1132,12 +1144,9 @@ describe('ReactCompositeComponent', () => {
     const div = document.createElement('div');
 
     class Component extends React.Component {
-      constructor(props, context) {
-        super(props, context);
-        this.state = {
-          hasUpdatedState: false,
-        };
-      }
+      state = {
+        hasUpdatedState: false,
+      };
 
       UNSAFE_componentWillMount() {
         instance = this;
