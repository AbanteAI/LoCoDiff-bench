
index 52bccce28..09d836cdb 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_expectedoutput.txt (expected):tmp/tmpyv_wiizf_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_extracted.txt (actual):tmp/tmpr3_mb4vr_actual.txt	
@@ -3,7 +3,9 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
+ */
+
+/**
  * @emails react-core
  */
 
@@ -232,44 +234,31 @@ describe('ReactCompositeComponent', () => {
 
     expect(el.textContent).toBe('');
   });
-
   it('should use default values for undefined props', async () => {
     class Component extends React.Component {
       static defaultProps = {prop: 'testKey'};
 
       render() {
-        return <span />;
+        return <div />;
       }
     }
 
-    function refFn1(ref) {
-      instance1 = ref;
-    }
-
-    function refFn2(ref) {
-      instance2 = ref;
-    }
-
-    function refFn3(ref) {
-      instance3 = ref;
-    }
-
     let instance1;
     let instance2;
     let instance3;
     const root = ReactDOMClient.createRoot(document.createElement('div'));
     await act(() => {
-      root.render(<Component ref={refFn1} />);
+      root.render(<Component ref={ref => (instance1 = ref)} />);
     });
     expect(instance1.props).toEqual({prop: 'testKey'});
 
     await act(() => {
-      root.render(<Component ref={refFn2} prop={undefined} />);
+      root.render(<Component ref={ref => (instance2 = ref)} prop={undefined} />);
     });
     expect(instance2.props).toEqual({prop: 'testKey'});
 
     await act(() => {
-      root.render(<Component ref={refFn3} prop={null} />);
+      root.render(<Component ref={ref => (instance3 = ref)} prop={null} />);
     });
     expect(instance3.props).toEqual({prop: null});
   });
@@ -279,7 +268,7 @@ describe('ReactCompositeComponent', () => {
       static defaultProps = {prop: 'testKey'};
 
       render() {
-        return <span />;
+        return <div />;
       }
     }
 
@@ -442,20 +431,19 @@ describe('ReactCompositeComponent', () => {
     document.body.appendChild(container);
 
     class Component extends React.Component {
-      state = {value: 0};
+      render() {
+        return <div />;
+      }
 
-      componentWillUnmount() {
-        expect(() => {
-          this.setState({value: 2}, function () {
+      componentDidMount() {
+        ReactDOM.flushSync(() => {
+          this.setState({}, function () {
             cbCalled = true;
           });
-        }).not.toThrow();
-      }
-
-      render() {
-        return <div />;
+        });
       }
     }
+
     let instance;
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -529,12 +517,6 @@ describe('ReactCompositeComponent', () => {
     // implementation details.
     assertLog(['render 0', 'render 1']);
     expect(instance.state.value).toBe(1);
-
-    // Forcing a rerender anywhere will cause the update to happen.
-    await act(() => {
-      root.render(<Component prop={123} />);
-    });
-    assertLog(['render 1']);
   });
 
   it('should cleanup even if render() fatals', async () => {
@@ -756,8 +738,6 @@ describe('ReactCompositeComponent', () => {
     let renders = 0;
 
     class Component extends React.Component {
-      state = {updated: false};
-
       UNSAFE_componentWillReceiveProps(props) {
         expect(props.update).toBe(1);
         expect(renders).toBe(1);
@@ -792,8 +772,6 @@ describe('ReactCompositeComponent', () => {
     let renders = 0;
 
     class Component extends React.Component {
-      state = {updated: false};
-
       UNSAFE_componentWillReceiveProps(props) {
         expect(props.update).toBe(1);
         expect(renders).toBe(1);
@@ -832,7 +810,7 @@ describe('ReactCompositeComponent', () => {
       }
 
       render() {
-        return <span />;
+        return <div />;
       }
     }
 
@@ -863,7 +841,6 @@ describe('ReactCompositeComponent', () => {
 
     class UnunmountableComponent extends React.Component {
       componentWillUnmount() {
-        app.setState({});
         count++;
         throw Error('always fails');
       }
@@ -874,6 +851,7 @@ describe('ReactCompositeComponent', () => {
     }
 
     const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
 
     const setRef = ref => {
       if (ref) {
@@ -881,12 +859,11 @@ describe('ReactCompositeComponent', () => {
       }
     };
 
-    const root = ReactDOMClient.createRoot(container);
     await expect(async () => {
-      await act(() => {
+      ReactDOM.flushSync(() => {
         root.render(<App ref={setRef} stage={1} />);
       });
-      await act(() => {
+      ReactDOM.flushSync(() => {
         root.render(<App ref={setRef} stage={2} />);
       });
     }).rejects.toThrow();
@@ -912,7 +889,7 @@ describe('ReactCompositeComponent', () => {
 
     class Wrapper extends React.Component {
       render() {
-        return <Spy key={this.props.name} name={this.props.name} />;
+        return <Spy name={this.props.name} />;
       }
     }
 
@@ -935,148 +912,6 @@ describe('ReactCompositeComponent', () => {
     ]);
   });
 
-  it('respects a shallow shouldComponentUpdate implementation', async () => {
-    class PlasticWrap extends React.Component {
-      constructor(props, context) {
-        super(props, context);
-        this.state = {
-          color: 'green',
-        };
-        this.appleRef = React.createRef();
-      }
-
-      render() {
-        return <Apple color={this.state.color} ref={this.appleRef} />;
-      }
-    }
-
-    class Apple extends React.Component {
-      state = {
-        cut: false,
-        slices: 1,
-      };
-
-      shouldComponentUpdate(nextProps, nextState) {
-        return shallowCompare(this, nextProps, nextState);
-      }
-
-      cut() {
-        this.setState({
-          cut: true,
-          slices: 10,
-        });
-      }
-
-      eatSlice() {
-        this.setState({
-          slices: this.state.slices - 1,
-        });
-      }
-
-      render() {
-        const {color} = this.props;
-        const {cut, slices} = this.state;
-
-        Scheduler.log(`${color} ${cut} ${slices}`);
-        return <div />;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    let instance;
-    await act(() => {
-      root.render(<PlasticWrap ref={ref => (instance = ref)} />);
-    });
-    assertLog(['green false 1']);
-
-    // Do not re-render based on props
-    await act(() => {
-      instance.setState({color: 'green'});
-    });
-    assertLog([]);
-
-    // Re-render based on props
-    await act(() => {
-      instance.setState({color: 'red'});
-    });
-    assertLog(['red false 1']);
-
-    // Re-render base on state
-    await act(() => {
-      instance.appleRef.current.cut();
-    });
-    assertLog(['red true 10']);
-
-    // No re-render based on state
-    await act(() => {
-      instance.appleRef.current.cut();
-    });
-    assertLog([]);
-
-    // Re-render based on state again
-    await act(() => {
-      instance.appleRef.current.eatSlice();
-    });
-    assertLog(['red true 9']);
-  });
-
-  it('does not do a deep comparison for a shallow shouldComponentUpdate implementation', async () => {
-    function getInitialState() {
-      return {
-        foo: [1, 2, 3],
-        bar: {a: 4, b: 5, c: 6},
-      };
-    }
-
-    const initialSettings = getInitialState();
-
-    class Component extends React.Component {
-      state = initialSettings;
-
-      shouldComponentUpdate(nextProps, nextState) {
-        return shallowCompare(this, nextProps, nextState);
-      }
-
-      render() {
-        const {foo, bar} = this.state;
-        Scheduler.log(`{foo:[${foo}],bar:{a:${bar.a},b:${bar.b},c:${bar.c}}`);
-        return <div />;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    let instance;
-    await act(() => {
-      root.render(<Component ref={ref => (instance = ref)} />);
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-
-    // Do not re-render if state is equal
-    const settings = {
-      foo: initialSettings.foo,
-      bar: initialSettings.bar,
-    };
-    await act(() => {
-      instance.setState(settings);
-    });
-    assertLog([]);
-
-    // Re-render because one field changed
-    initialSettings.foo = [1, 2, 3];
-    await act(() => {
-      instance.setState(initialSettings);
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-
-    // Re-render because the object changed
-    await act(() => {
-      instance.setState(getInitialState());
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-  });
-
   it('should call setState callback with no arguments', async () => {
     let mockArgs;
     class Component extends React.Component {
@@ -1100,8 +935,8 @@ describe('ReactCompositeComponent', () => {
     let stateSuccessfullyUpdated = false;
 
     class Component extends React.Component {
-      constructor(props, context) {
-        super(props, context);
+      constructor(props) {
+        super(props);
         this.state = {
           hasUpdatedState: false,
         };
@@ -1128,19 +963,20 @@ describe('ReactCompositeComponent', () => {
   });
 
   it('should call the setState callback even if shouldComponentUpdate = false', async () => {
+    let ref;
     const mockFn = jest.fn().mockReturnValue(false);
     const div = document.createElement('div');
 
     class Component extends React.Component {
-      constructor(props, context) {
-        super(props, context);
+      constructor(props) {
+        super(props);
         this.state = {
           hasUpdatedState: false,
         };
       }
 
-      UNSAFE_componentWillMount() {
-        instance = this;
+      componentDidMount() {
+        ref = this;
       }
 
       shouldComponentUpdate() {
@@ -1153,18 +989,17 @@ describe('ReactCompositeComponent', () => {
     }
 
     const root = ReactDOMClient.createRoot(div);
-    let instance;
     await act(() => {
-      root.render(<Component ref={ref => (instance = ref)} />);
+      root.render(<Component />);
     });
 
-    expect(instance).toBeDefined();
+    expect(ref).toBeDefined();
     expect(mockFn).not.toBeCalled();
 
     await act(() => {
-      instance.setState({hasUpdatedState: true}, () => {
+      ref.setState({hasUpdatedState: true}, () => {
         expect(mockFn).toBeCalled();
-        expect(instance.state.hasUpdatedState).toBe(true);
+        expect(ref.state.hasUpdatedState).toBe(true);
         Scheduler.log('setState callback called');
       });
     });
@@ -1200,7 +1035,7 @@ describe('ReactCompositeComponent', () => {
     ]);
   });
 
-  it('should warn about reassigning this.props while rendering', () => {
+  it('should warn about reassigning this.props while rendering', async () => {
     class Bad extends React.Component {
       componentDidMount() {}
       componentDidUpdate() {}
