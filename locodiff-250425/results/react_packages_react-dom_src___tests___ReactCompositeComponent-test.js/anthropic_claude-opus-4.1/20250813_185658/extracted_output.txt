expectDev(console.warn.calls.count()).toBe(1);
expectDev(console.warn.calls.argsFor(0)[0]).toContain('warning message');
```

#### Intermediate Pattern (with `toWarnDev`/`toErrorDev`):
```javascript
expect(() => ReactDOM.render(<Component />)).toWarnDev(
  'Warning: message',
  {withoutStack: true},
);
```

#### Final Pattern (with `assertConsoleErrorDev`):
```javascript
ReactDOM.flushSync(() => {
  root.render(<Component />);
});
assertConsoleErrorDev([
  'Error message\n' +
  '    in Component (at **)',
]);
```

### 2. **Key Transformations**

1. **From `expectDev` to `toWarnDev`/`toErrorDev`** (Commits from Nov 2017 - Jan 2018):
   - Replaced manual spy counting with custom matchers
   - Added support for warning deduplication testing
   - Introduced the `withoutStack` option for warnings without component stacks

2. **From `toWarnDev` to `assertConsoleErrorDev`** (Latest commits, 2024-2025):
   - Removed the wrapper `expect(() => {...})` pattern
   - Warnings are now checked after the code executes, not during
   - Stack traces are included by default in the expected messages
   - Cleaner, more declarative API

### 3. **Component Stack Handling**

The evolution shows improved component stack handling:
- Early: No stack traces or manual checking
- Middle: Optional stack traces with `{withoutStack: true}`
- Current: Stack traces included by default with `\n    in Component (at **)`

### 4. **Error vs Warning Distinction**

The file shows a clear distinction evolving:
- `toWarnDev` → for development warnings
- `toErrorDev` → for development errors  
- `assertConsoleErrorDev` → unified approach for console.error in dev

### 5. **Async Handling**

The modern pattern better handles async scenarios:
```javascript
await act(() => {
  root.render(<Component />);
});
assertConsoleErrorDev(['Error message']);