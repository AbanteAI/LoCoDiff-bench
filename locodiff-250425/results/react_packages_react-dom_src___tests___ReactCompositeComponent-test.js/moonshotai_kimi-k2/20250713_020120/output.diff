
index 52bccce28..58d2d28b2 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_expectedoutput.txt (expected):tmp/tmp3o_t18_o_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_extracted.txt (actual):tmp/tmp1e4bq_ce_actual.txt	
@@ -242,34 +242,24 @@ describe('ReactCompositeComponent', () => {
       }
     }
 
-    function refFn1(ref) {
-      instance1 = ref;
-    }
-
-    function refFn2(ref) {
-      instance2 = ref;
-    }
-
-    function refFn3(ref) {
-      instance3 = ref;
-    }
-
     let instance1;
     let instance2;
     let instance3;
     const root = ReactDOMClient.createRoot(document.createElement('div'));
     await act(() => {
-      root.render(<Component ref={refFn1} />);
+      root.render(<Component ref={ref => (instance1 = ref)} />);
     });
     expect(instance1.props).toEqual({prop: 'testKey'});
 
     await act(() => {
-      root.render(<Component ref={refFn2} prop={undefined} />);
+      root.render(
+        <Component ref={ref => (instance2 = ref)} prop={undefined} />,
+      );
     });
     expect(instance2.props).toEqual({prop: 'testKey'});
 
     await act(() => {
-      root.render(<Component ref={refFn3} prop={null} />);
+      root.render(<Component ref={ref => (instance3 = ref)} prop={null} />);
     });
     expect(instance3.props).toEqual({prop: null});
   });
@@ -384,7 +374,6 @@ describe('ReactCompositeComponent', () => {
     await act(() => {
       root.render(component);
     });
-
     instance.forceUpdate();
 
     root.unmount(container);
@@ -822,6 +811,198 @@ describe('ReactCompositeComponent', () => {
     expect(instance.state.updated).toBe(true);
   });
 
+  it('should update refs if shouldComponentUpdate gives false', async () => {
+    class Static extends React.Component {
+      shouldComponentUpdate() {
+        return false;
+      }
+
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    class Component extends React.Component {
+      static0Ref = React.createRef();
+      static1Ref = React.createRef();
+
+      render() {
+        if (this.props.flipped) {
+          return (
+            <div>
+              <Static ref={this.static0Ref} key="B">
+                B (ignored)
+              </Static>
+              <Static ref={this.static1Ref} key="A">
+                A (ignored)
+              </Static>
+            </div>
+          );
+        } else {
+          return (
+            <div>
+              <Static ref={this.static0Ref} key="A">
+                A
+              </Static>
+              <Static ref={this.static1Ref} key="B">
+                B
+              </Static>
+            </div>
+          );
+        }
+      }
+    }
+
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    let comp;
+    await act(() => {
+      root.render(<Component flipped={false} ref={ref => (comp = ref)} />);
+    });
+    expect(comp.static0Ref.current.textContent).toBe('A');
+    expect(comp.static1Ref.current.textContent).toBe('B');
+
+    // When flipping the order, the refs should update even though the actual
+    // contents do not
+    await act(() => {
+      root.render(<Component flipped={true} />);
+    });
+    expect(comp.static0Ref.current.textContent).toBe('B');
+    expect(comp.static1Ref.current.textContent).toBe('A');
+  });
+
+  it('should allow access to findDOMNode in componentWillUnmount', async () => {
+    let a = null;
+    let b = null;
+
+    class Component extends React.Component {
+      componentDidMount() {
+        a = this; // Store the DOM element or component instance
+        expect(a).not.toBe(null);
+      }
+
+      componentWillUnmount() {
+        b = this;
+        expect(b).not.toBe(null);
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(<Component />);
+    });
+    expect(a).toBe(container.firstChild);
+    root.unmount();
+    expect(a).toBe(b);
+  });
+
+  it('should replace state', () => {
+    class Moo extends React.Component {
+      state = {x: 1};
+      render() {
+        return <div />;
+      }
+    }
+
+    const moo = new Moo();
+    // No longer a public API, but we can test that it works internally by
+    // reaching into the updater.
+    moo.updater.enqueueReplaceState(moo, {y: 2});
+    expect('x' in moo.state).toBe(false);
+    expect(moo.state.y).toBe(2);
+  });
+
+  it('should support objects with prototypes as state', () => {
+    const NotActuallyImmutable = function (str) {
+      this.str = str;
+    };
+    NotActuallyImmutable.prototype.amIImmutable = function () {
+      return true;
+    };
+    class Moo extends React.Component {
+      state = new NotActuallyImmutable('first');
+      // No longer a public API, but we can test that it works internally by
+      // reaching into the updater.
+      _replaceState = update => this.updater.enqueueReplaceState(this, update);
+      render() {
+        return <div />;
+      }
+    }
+
+    const moo = new Moo();
+    expect(moo.state.str).toBe('first');
+    expect(moo.state.amIImmutable()).toBe(true);
+
+    const secondState = new NotActuallyImmutable('second');
+    moo._replaceState(secondState);
+    expect(moo.state.str).toBe('second');
+    expect(moo.state.amIImmutable()).toBe(true);
+    expect(moo.state).toBe(secondState);
+
+    moo.setState({str: 'third'});
+    expect(moo.state.str).toBe('third');
+    // Here we lose the prototype.
+    expect(moo.state.amIImmutable).toBe(undefined);
+
+    // When more than one state update is enqueued, we have the same behavior
+    const fifthState = new NotActuallyImmutable('fifth');
+    ReactDOM.unstable_batchedUpdates(function () {
+      moo.setState({str: 'fourth'});
+      moo._replaceState(fifthState);
+    });
+    expect(moo.state).toBe(fifthState);
+
+    // When more than one state update is enqueued, we have the same behavior
+    const sixthState = new NotActuallyImmutable('sixth');
+    ReactDOM.unstable_batchedUpdates(function () {
+      moo._replaceState(sixthState);
+      moo.setState({str: 'seventh'});
+    });
+    expect(moo.state.str).toBe('seventh');
+    expect(moo.state.amIImmutable).toBe(undefined);
+  });
+
+  it('should not warn about unmounting during unmounting', async () => {
+    const container = document.createElement('div');
+    const layer = document.createElement('div');
+
+    class Component extends React.Component {
+      componentDidMount() {
+        const root = ReactDOMClient.createRoot(layer);
+        root.render(<div />);
+      }
+
+      componentWillUnmount() {
+        root.unmount();
+      }
+
+      render() {
+        return <div />;
+      }
+    }
+
+    class Outer extends React.Component {
+      render() {
+        return <div>{this.props.children}</div>;
+      }
+    }
+
+    const root = ReactDOMClient.createRoot(container);
+    await act(() => {
+      root.render(
+        <Outer>
+          <Component />
+        </Outer>,
+      );
+    });
+    root.render(<Outer />);
+  });
+
   it('should warn when mutated props are passed', async () => {
     const container = document.createElement('div');
 
@@ -1049,365 +1230,4 @@ describe('ReactCompositeComponent', () => {
     const root = ReactDOMClient.createRoot(container);
     let instance;
     await act(() => {
-      root.render(<Component ref={ref => (instance = ref)} />);
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-
-    // Do not re-render if state is equal
-    const settings = {
-      foo: initialSettings.foo,
-      bar: initialSettings.bar,
-    };
-    await act(() => {
-      instance.setState(settings);
-    });
-    assertLog([]);
-
-    // Re-render because one field changed
-    initialSettings.foo = [1, 2, 3];
-    await act(() => {
-      instance.setState(initialSettings);
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-
-    // Re-render because the object changed
-    await act(() => {
-      instance.setState(getInitialState());
-    });
-    assertLog(['{foo:[1,2,3],bar:{a:4,b:5,c:6}']);
-  });
-
-  it('should call setState callback with no arguments', async () => {
-    let mockArgs;
-    class Component extends React.Component {
-      componentDidMount() {
-        this.setState({}, (...args) => (mockArgs = args));
-      }
-      render() {
-        return false;
-      }
-    }
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-    await act(() => {
-      root.render(<Component />);
-    });
-
-    expect(mockArgs.length).toEqual(0);
-  });
-
-  it('this.state should be updated on setState callback inside componentWillMount', async () => {
-    const div = document.createElement('div');
-    let stateSuccessfullyUpdated = false;
-
-    class Component extends React.Component {
-      constructor(props, context) {
-        super(props, context);
-        this.state = {
-          hasUpdatedState: false,
-        };
-      }
-
-      UNSAFE_componentWillMount() {
-        this.setState(
-          {hasUpdatedState: true},
-          () => (stateSuccessfullyUpdated = this.state.hasUpdatedState),
-        );
-      }
-
-      render() {
-        return <div>{this.props.children}</div>;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(div);
-    await act(() => {
-      root.render(<Component />);
-    });
-
-    expect(stateSuccessfullyUpdated).toBe(true);
-  });
-
-  it('should call the setState callback even if shouldComponentUpdate = false', async () => {
-    const mockFn = jest.fn().mockReturnValue(false);
-    const div = document.createElement('div');
-
-    class Component extends React.Component {
-      constructor(props, context) {
-        super(props, context);
-        this.state = {
-          hasUpdatedState: false,
-        };
-      }
-
-      UNSAFE_componentWillMount() {
-        instance = this;
-      }
-
-      shouldComponentUpdate() {
-        return mockFn();
-      }
-
-      render() {
-        return <div>{this.state.hasUpdatedState}</div>;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(div);
-    let instance;
-    await act(() => {
-      root.render(<Component ref={ref => (instance = ref)} />);
-    });
-
-    expect(instance).toBeDefined();
-    expect(mockFn).not.toBeCalled();
-
-    await act(() => {
-      instance.setState({hasUpdatedState: true}, () => {
-        expect(mockFn).toBeCalled();
-        expect(instance.state.hasUpdatedState).toBe(true);
-        Scheduler.log('setState callback called');
-      });
-    });
-
-    assertLog(['setState callback called']);
-  });
-
-  it('should return a meaningful warning when constructor is returned', async () => {
-    class RenderTextInvalidConstructor extends React.Component {
-      constructor(props) {
-        super(props);
-        return {something: false};
-      }
-
-      render() {
-        return <div />;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-    await expect(async () => {
-      await act(() => {
-        root.render(<RenderTextInvalidConstructor />);
-      });
-    }).rejects.toThrow();
-    assertConsoleErrorDev([
-      'No `render` method found on the RenderTextInvalidConstructor instance: ' +
-        'did you accidentally return an object from the constructor?\n' +
-        '    in RenderTextInvalidConstructor (at **)',
-      'No `render` method found on the RenderTextInvalidConstructor instance: ' +
-        'did you accidentally return an object from the constructor?\n' +
-        '    in RenderTextInvalidConstructor (at **)',
-    ]);
-  });
-
-  it('should warn about reassigning this.props while rendering', () => {
-    class Bad extends React.Component {
-      componentDidMount() {}
-      componentDidUpdate() {}
-      render() {
-        this.props = {...this.props};
-        return null;
-      }
-    }
-
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    ReactDOM.flushSync(() => {
-      root.render(<Bad />);
-    });
-    assertConsoleErrorDev([
-      'It looks like Bad is reassigning its own `this.props` while rendering. ' +
-        'This is not supported and can lead to confusing bugs.\n' +
-        '    in Bad (at **)',
-    ]);
-  });
-
-  it('should return error if render is not defined', async () => {
-    class RenderTestUndefinedRender extends React.Component {}
-
-    const root = ReactDOMClient.createRoot(document.createElement('div'));
-    await expect(async () => {
-      await act(() => {
-        root.render(<RenderTestUndefinedRender />);
-      });
-    }).rejects.toThrow();
-    assertConsoleErrorDev([
-      'No `render` method found on the RenderTestUndefinedRender instance: ' +
-        'you may have forgotten to define `render`.\n' +
-        '    in RenderTestUndefinedRender (at **)',
-      'No `render` method found on the RenderTestUndefinedRender instance: ' +
-        'you may have forgotten to define `render`.\n' +
-        '    in RenderTestUndefinedRender (at **)',
-    ]);
-  });
-
-  // Regression test for accidental breaking change
-  // https://github.com/facebook/react/issues/13580
-  it('should support classes shadowing isReactComponent', async () => {
-    class Shadow extends React.Component {
-      isReactComponent() {}
-      render() {
-        return <div />;
-      }
-    }
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Shadow />);
-    });
-    expect(container.firstChild.tagName).toBe('DIV');
-  });
-
-  it('should not warn on updating function component from componentWillMount', async () => {
-    let setState;
-    let ref;
-    function A() {
-      const [state, _setState] = React.useState(null);
-      setState = _setState;
-      return <div ref={r => (ref = r)}>{state}</div>;
-    }
-    class B extends React.Component {
-      UNSAFE_componentWillMount() {
-        setState(1);
-      }
-      render() {
-        return null;
-      }
-    }
-    function Parent() {
-      return (
-        <div>
-          <A />
-          <B />
-        </div>
-      );
-    }
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Parent />);
-    });
-
-    expect(ref.textContent).toBe('1');
-  });
-
-  it('should not warn on updating function component from componentWillUpdate', async () => {
-    let setState;
-    let ref;
-    function A() {
-      const [state, _setState] = React.useState();
-      setState = _setState;
-      return <div ref={r => (ref = r)}>{state}</div>;
-    }
-    class B extends React.Component {
-      UNSAFE_componentWillUpdate() {
-        setState(1);
-      }
-      render() {
-        return null;
-      }
-    }
-    function Parent() {
-      return (
-        <div>
-          <A />
-          <B />
-        </div>
-      );
-    }
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Parent />);
-    });
-    await act(() => {
-      root.render(<Parent />);
-    });
-
-    expect(ref.textContent).toBe('1');
-  });
-
-  it('should not warn on updating function component from componentWillReceiveProps', async () => {
-    let setState;
-    let ref;
-    function A() {
-      const [state, _setState] = React.useState();
-      setState = _setState;
-      return <div ref={r => (ref = r)}>{state}</div>;
-    }
-
-    class B extends React.Component {
-      UNSAFE_componentWillReceiveProps() {
-        setState(1);
-      }
-      render() {
-        return null;
-      }
-    }
-    function Parent() {
-      return (
-        <div>
-          <A />
-          <B />
-        </div>
-      );
-    }
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Parent />);
-    });
-    await act(() => {
-      root.render(<Parent />);
-    });
-
-    expect(ref.textContent).toBe('1');
-  });
-
-  it('should warn on updating function component from render', () => {
-    let setState;
-    let ref;
-    function A() {
-      const [state, _setState] = React.useState(0);
-      setState = _setState;
-      return <div ref={r => (ref = r)}>{state}</div>;
-    }
-
-    class B extends React.Component {
-      render() {
-        setState(c => c + 1);
-        return null;
-      }
-    }
-    function Parent() {
-      return (
-        <div>
-          <A />
-          <B />
-        </div>
-      );
-    }
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    ReactDOM.flushSync(() => {
-      root.render(<Parent />);
-    });
-    assertConsoleErrorDev([
-      'Cannot update a component (`A`) while rendering a different component (`B`). ' +
-        'To locate the bad setState() call inside `B`, ' +
-        'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
-        '    in Parent (at **)',
-    ]);
-
-    // We error, but still update the state.
-    expect(ref.textContent).toBe('1');
-
-    // Dedupe.
-    ReactDOM.flushSync(() => {
-      root.render(<Parent />);
-    });
-
-    // We error, but still update the state.
-    expect(ref.textContent).toBe('2');
-  });
-});
\ No newline at end of file
+      root.render(<Component ref={ref => (instance = ref)} />
\ No newline at end of file
