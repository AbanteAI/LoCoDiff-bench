--- react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_extracted.txt (actual)@@ -127,6 +127,7 @@         }
       };
     });
+
     it('should support rendering to different child types over time', async () => {
       const root = ReactDOMClient.createRoot(document.createElement('div'));
       await act(() => {
@@ -456,6 +457,7 @@         return <div />;
       }
     }
+
     let instance;
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
@@ -613,6 +615,7 @@         return <div />;
       }
     }
+
     let instance;
     const root = ReactDOMClient.createRoot(document.createElement('div'));
     await act(() => {
@@ -822,7 +825,7 @@     expect(instance.state.updated).toBe(true);
   });
 
-  it('should warn when mutated props are passed', async () => {
+  it('should warn when mutated props are passed', () => {
     const container = document.createElement('div');
 
     class Foo extends React.Component {
@@ -865,7 +868,7 @@       componentWillUnmount() {
         app.setState({});
         count++;
-        throw Error('always fails');
+        throw new Error('always fails');
       }
 
       render() {
@@ -894,6 +897,8 @@   });
 
   it('prepares new child before unmounting old', async () => {
+    const log = [];
+
     class Spy extends React.Component {
       UNSAFE_componentWillMount() {
         Scheduler.log(this.props.name + ' componentWillMount');
@@ -936,6 +941,7 @@   });
 
   it('respects a shallow shouldComponentUpdate implementation', async () => {
+    let renderCalls = 0;
     class PlasticWrap extends React.Component {
       constructor(props, context) {
         super(props, context);
@@ -1029,10 +1035,8 @@       };
     }
 
-    const initialSettings = getInitialState();
-
-    class Component extends React.Component {
-      state = initialSettings;
+    class Component extends React.Component {
+      state = getInitialState();
 
       shouldComponentUpdate(nextProps, nextState) {
         return shallowCompare(this, nextProps, nextState);
@@ -1107,7 +1111,7 @@         };
       }
 
-      UNSAFE_componentWillMount() {
+      componentWillMount() {
         this.setState(
           {hasUpdatedState: true},
           () => (stateSuccessfullyUpdated = this.state.hasUpdatedState),
@@ -1148,7 +1152,7 @@       }
 
       render() {
-        return <div>{this.state.hasUpdatedState}</div>;
+        return <div />;
       }
     }
 
