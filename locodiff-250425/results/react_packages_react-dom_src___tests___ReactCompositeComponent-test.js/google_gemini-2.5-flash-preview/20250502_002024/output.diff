
index 52bccce2..49405d5c 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_expectedoutput.txt (expected):tmp/tmp6a2ttgdc_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponent-test.js_extracted.txt (actual):tmp/tmptntm8q1p_actual.txt	
@@ -232,7 +232,6 @@ describe('ReactCompositeComponent', () => {
 
     expect(el.textContent).toBe('');
   });
-
   it('should use default values for undefined props', async () => {
     class Component extends React.Component {
       static defaultProps = {prop: 'testKey'};
@@ -765,6 +764,9 @@ describe('ReactCompositeComponent', () => {
         expect(renders).toBe(1);
       }
 
+      UNSAFE_componentWillMount() {
+        renders++;
+      }
       render() {
         renders++;
         return <div />;
@@ -800,6 +802,9 @@ describe('ReactCompositeComponent', () => {
         this.setState({updated: true});
         expect(renders).toBe(1);
       }
+      UNSAFE_componentWillMount() {
+        renders++;
+      }
 
       render() {
         renders++;
@@ -822,77 +827,6 @@ describe('ReactCompositeComponent', () => {
     expect(instance.state.updated).toBe(true);
   });
 
-  it('should warn when mutated props are passed', async () => {
-    const container = document.createElement('div');
-
-    class Foo extends React.Component {
-      constructor(props) {
-        const _props = {idx: props.idx + '!'};
-        super(_props);
-      }
-
-      render() {
-        return <span />;
-      }
-    }
-
-    const root = ReactDOMClient.createRoot(container);
-    ReactDOM.flushSync(() => {
-      root.render(<Foo idx="qwe" />);
-    });
-    assertConsoleErrorDev([
-      'When calling super() in `Foo`, make sure to pass ' +
-        "up the same props that your component's constructor was passed.\n" +
-        '    in Foo (at **)',
-    ]);
-  });
-
-  it('should only call componentWillUnmount once', async () => {
-    let app;
-    let count = 0;
-
-    class App extends React.Component {
-      render() {
-        if (this.props.stage === 1) {
-          return <UnunmountableComponent />;
-        } else {
-          return null;
-        }
-      }
-    }
-
-    class UnunmountableComponent extends React.Component {
-      componentWillUnmount() {
-        app.setState({});
-        count++;
-        throw Error('always fails');
-      }
-
-      render() {
-        return <div>Hello {this.props.name}</div>;
-      }
-    }
-
-    const container = document.createElement('div');
-
-    const setRef = ref => {
-      if (ref) {
-        app = ref;
-      }
-    };
-
-    const root = ReactDOMClient.createRoot(container);
-    await expect(async () => {
-      await act(() => {
-        root.render(<App ref={setRef} stage={1} />);
-      });
-      await act(() => {
-        root.render(<App ref={setRef} stage={2} />);
-      });
-    }).rejects.toThrow();
-    expect(count).toBe(1);
-  });
-
   it('prepares new child before unmounting old', async () => {
     class Spy extends React.Component {
       UNSAFE_componentWillMount() {
@@ -1087,6 +1021,7 @@ describe('ReactCompositeComponent', () => {
         return false;
       }
     }
+
     const root = ReactDOMClient.createRoot(document.createElement('div'));
     await act(() => {
       root.render(<Component />);
@@ -1131,6 +1066,8 @@ describe('ReactCompositeComponent', () => {
     const mockFn = jest.fn().mockReturnValue(false);
     const div = document.createElement('div');
 
+    let instance;
+
     class Component extends React.Component {
       constructor(props, context) {
         super(props, context);
@@ -1153,7 +1090,6 @@ describe('ReactCompositeComponent', () => {
     }
 
     const root = ReactDOMClient.createRoot(div);
-    let instance;
     await act(() => {
       root.render(<Component ref={ref => (instance = ref)} />);
     });
@@ -1200,7 +1136,7 @@ describe('ReactCompositeComponent', () => {
     ]);
   });
 
-  it('should warn about reassigning this.props while rendering', () => {
+  it('should warn about reassigning this.props while rendering', async () => {
     class Bad extends React.Component {
       componentDidMount() {}
       componentDidUpdate() {}
@@ -1299,6 +1235,7 @@ describe('ReactCompositeComponent', () => {
       setState = _setState;
       return <div ref={r => (ref = r)}>{state}</div>;
     }
+
     class B extends React.Component {
       UNSAFE_componentWillUpdate() {
         setState(1);
@@ -1364,7 +1301,7 @@ describe('ReactCompositeComponent', () => {
     expect(ref.textContent).toBe('1');
   });
 
-  it('should warn on updating function component from render', () => {
+  it('should warn on updating function component from render', async () => {
     let setState;
     let ref;
     function A() {
@@ -1396,6 +1333,8 @@ describe('ReactCompositeComponent', () => {
       'Cannot update a component (`A`) while rendering a different component (`B`). ' +
         'To locate the bad setState() call inside `B`, ' +
         'follow the stack trace as described in https://react.dev/link/setstate-in-render\n' +
+        '    in B (at **)\n' +
+        '    in div (at **)\n' +
         '    in Parent (at **)',
     ]);
 
