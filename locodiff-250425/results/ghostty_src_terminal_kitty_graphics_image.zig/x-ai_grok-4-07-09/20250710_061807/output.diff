
index 6abe1ca7f..d06eb6049 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmp9jv6ndbm_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmp76v4d081_actual.txt	
@@ -100,6 +100,77 @@ pub const LoadingImage = struct {
         return result;
     }
 
+    pub fn deinit(self: *LoadingImage, alloc: Allocator) void {
+        self.image.deinit(alloc);
+        self.data.deinit(alloc);
+    }
+
+    pub fn destroy(self: *LoadingImage, alloc: Allocator) void {
+        self.deinit(alloc);
+        alloc.destroy(self);
+    }
+
+    /// Adds a chunk of data to the image. Use this if the image
+    /// is coming in chunks (the "m" parameter in the protocol).
+    pub fn addData(self: *LoadingImage, alloc: Allocator, data: []const u8) !void {
+        // If no data, skip
+        if (data.len == 0) return;
+
+        // If our data would get too big, return an error
+        if (self.data.items.len + data.len > max_size) {
+            log.warn("image data too large max_size={}", .{max_size});
+            return error.InvalidData;
+        }
+
+        // Ensure we have enough room to add the data
+        // to the end of the ArrayList before doing so.
+        try self.data.ensureUnusedCapacity(alloc, data.len);
+
+        const start_i = self.data.items.len;
+        self.data.items.len = start_i + data.len;
+        fastmem.copy(u8, self.data.items[start_i..], data);
+    }
+
+    /// Complete the chunked image, returning a completed image.
+    pub fn complete(self: *LoadingImage, alloc: Allocator) !Image {
+        const img = &self.image;
+
+        // Decompress the data if it is compressed.
+        try self.decompress(alloc);
+
+        // Decode the png if we have to
+        if (img.format == .png) try self.decodePng(alloc);
+
+        // Validate our dimensions.
+        if (img.width == 0 or img.height == 0) return error.DimensionsRequired;
+        if (img.width > max_dimension or img.height > max_dimension) return error.DimensionsTooLarge;
+
+        // Data length must be what we expect
+        const bpp = img.format.bpp();
+        const expected_len = img.width * img.height * bpp;
+        const actual_len = self.data.items.len;
+        if (actual_len != expected_len) {
+            std.log.warn(
+                "unexpected length image id={} width={} height={} bpp={} expected_len={} actual_len={}",
+                .{ img.id, img.width, img.height, bpp, expected_len, actual_len },
+            );
+            return error.InvalidData;
+        }
+
+        // Set our time
+        self.image.transmit_time = std.time.Instant.now() catch |err| {
+            log.warn("failed to get time: {}", .{err});
+            return error.InternalError;
+        };
+
+        // Everything looks good, copy the image data over.
+        var result = self.image;
+        result.data = try self.data.toOwnedSlice(alloc);
+        errdefer result.deinit(alloc);
+        self.image = .{};
+        return result;
+    }
+
     /// Reads the data from a shared memory segment.
     fn readSharedMemory(
         self: *LoadingImage,
@@ -212,7 +283,7 @@ pub const LoadingImage = struct {
         if (std.mem.startsWith(u8, path, "/proc/") or
             std.mem.startsWith(u8, path, "/sys/") or
             (std.mem.startsWith(u8, path, "/dev/") and
-                !std.mem.startsWith(u8, path, "/dev/shm/")))
+            !std.mem.startsWith(u8, path, "/dev/shm/")))
         {
             return error.InvalidData;
         }
@@ -291,102 +362,6 @@ pub const LoadingImage = struct {
         return false;
     }
 
-    pub fn deinit(self: *LoadingImage, alloc: Allocator) void {
-        self.image.deinit(alloc);
-        self.data.deinit(alloc);
-    }
-
-    pub fn destroy(self: *LoadingImage, alloc: Allocator) void {
-        self.deinit(alloc);
-        alloc.destroy(self);
-    }
-
-    /// Adds a chunk of data to the image. Use this if the image
-    /// is coming in chunks (the "m" parameter in the protocol).
-    pub fn addData(self: *LoadingImage, alloc: Allocator, data: []const u8) !void {
-        // If no data, skip
-        if (data.len == 0) return;
-
-        // If our data would get too big, return an error
-        if (self.data.items.len + data.len > max_size) {
-            log.warn("image data too large max_size={}", .{max_size});
-            return error.InvalidData;
-        }
-
-        // Ensure we have enough room to add the data
-        // to the end of the ArrayList before doing so.
-        try self.data.ensureUnusedCapacity(alloc, data.len);
-
-        const start_i = self.data.items.len;
-        self.data.items.len = start_i + data.len;
-        fastmem.copy(u8, self.data.items[start_i..], data);
-    }
-
-    /// Complete the chunked image, returning a completed image.
-    pub fn complete(self: *LoadingImage, alloc: Allocator) !Image {
-        const img = &self.image;
-
-        // Decompress the data if it is compressed.
-        try self.decompress(alloc);
-
-        // Decode the png if we have to
-        if (img.format == .png) try self.decodePng(alloc);
-
-        // Validate our dimensions.
-        if (img.width == 0 or img.height == 0) return error.DimensionsRequired;
-        if (img.width > max_dimension or img.height > max_dimension) return error.DimensionsTooLarge;
-
-        // Data length must be what we expect
-        const bpp = img.format.bpp();
-        const expected_len = img.width * img.height * bpp;
-        const actual_len = self.data.items.len;
-        if (actual_len != expected_len) {
-            std.log.warn(
-                "unexpected length image id={} width={} height={} bpp={} expected_len={} actual_len={}",
-                .{ img.id, img.width, img.height, bpp, expected_len, actual_len },
-            );
-            return error.InvalidData;
-        }
-
-        // Set our time
-        self.image.transmit_time = std.time.Instant.now() catch |err| {
-            log.warn("failed to get time: {}", .{err});
-            return error.InternalError;
-        };
-
-        // Everything looks good, copy the image data over.
-        var result = self.image;
-        result.data = try self.data.toOwnedSlice(alloc);
-        errdefer result.deinit(alloc);
-        self.image = .{};
-        return result;
-    }
-
-    /// Debug function to write the data to a file. This is useful for
-    /// capturing some test data for unit tests.
-    pub fn debugDump(self: LoadingImage) !void {
-        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
-
-        var buf: [1024]u8 = undefined;
-        const filename = try std.fmt.bufPrint(
-            &buf,
-            "image-{s}-{s}-{d}x{d}-{}.data",
-            .{
-                @tagName(self.image.format),
-                @tagName(self.image.compression),
-                self.image.width,
-                self.image.height,
-                self.image.id,
-            },
-        );
-        const cwd = std.fs.cwd();
-        const f = try cwd.createFile(filename, .{});
-        defer f.close();
-
-        const writer = f.writer();
-        try writer.writeAll(self.data.items);
-    }
-
     /// Decompress the data in-place.
     fn decompress(self: *LoadingImage, alloc: Allocator) !void {
         return switch (self.image.compression) {
@@ -459,7 +434,7 @@ pub const Image = struct {
     transmit_time: std.time.Instant = undefined,
 
     /// Set this to true if this image was loaded by a command that
-    /// doesn't specify an ID or number, since such commands should
+    /// doesn't specify an ID or a number, since such commands should
     /// not be responded to, even though we do currently give them
     /// IDs in the public range (which is bad!).
     implicit_id: bool = false,
