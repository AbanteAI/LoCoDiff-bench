
index 6abe1ca7..1659792b 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmp2qz1hylu_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmpuin99uer_actual.txt	
@@ -51,6 +51,7 @@ pub const LoadingImage = struct {
         var result: LoadingImage = .{
             .image = .{
                 .id = t.image_id,
+                .implicit_id = t.image_id == 0 and t.image_number == 0,
                 .number = t.image_number,
                 .width = t.width,
                 .height = t.height,
@@ -341,7 +342,7 @@ pub const LoadingImage = struct {
         const expected_len = img.width * img.height * bpp;
         const actual_len = self.data.items.len;
         if (actual_len != expected_len) {
-            std.log.warn(
+            log.warn(
                 "unexpected length image id={} width={} height={} bpp={} expected_len={} actual_len={}",
                 .{ img.id, img.width, img.height, bpp, expected_len, actual_len },
             );
@@ -403,8 +404,8 @@ pub const LoadingImage = struct {
         // Write it to an array list
         var list = std.ArrayList(u8).init(alloc);
         errdefer list.deinit();
-        stream.reader().readAllArrayList(&list, max_size) catch |err| {
-            log.warn("failed to read decompressed data: {}", .{err});
+        stream.readAllArrayList(&list, max_size) catch |err| {
+            log.warn("zlib decompression failed: {}", .{err});
             return error.DecompressionFailed;
         };
 
@@ -449,20 +450,20 @@ pub const LoadingImage = struct {
 
 /// Image represents a single fully loaded image.
 pub const Image = struct {
-    id: u32 = 0,
-    number: u32 = 0,
-    width: u32 = 0,
-    height: u32 = 0,
-    format: command.Transmission.Format = .rgb,
-    compression: command.Transmission.Compression = .none,
-    data: []const u8 = "",
-    transmit_time: std.time.Instant = undefined,
+    id: u32,
+    number: u32,
+    width: u32,
+    height: u32,
+    format: command.Transmission.Format,
+    compression: command.Transmission.Compression,
+    data: []const u8,
+    transmit_time: std.time.Instant,
 
     /// Set this to true if this image was loaded by a command that
     /// doesn't specify an ID or number, since such commands should
     /// not be responded to, even though we do currently give them
     /// IDs in the public range (which is bad!).
-    implicit_id: bool = false,
+    implicit_id: bool,
 
     pub const Error = error{
         InternalError,
@@ -488,6 +489,31 @@ pub const Image = struct {
         copy.data = "";
         return copy;
     }
+
+    /// Debug function to write the data to a file. This is useful for
+    /// capturing some test data for unit tests.
+    pub fn debugDump(self: Image) !void {
+        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
+
+        var buf: [1024]u8 = undefined;
+        const filename = try std.fmt.bufPrint(
+            &buf,
+            "image-{s}-{s}-{d}x{d}-{}.data",
+            .{
+                @tagName(self.format),
+                @tagName(self.compression),
+                self.width,
+                self.height,
+                self.id,
+            },
+        );
+        const cwd = std.fs.cwd();
+        const f = try cwd.createFile(filename, .{});
+        defer f.close();
+
+        const writer = f.writer();
+        try writer.writeAll(self.data);
+    }
 };
 
 /// The rect taken up by some image placement, in grid cells. This will
@@ -508,15 +534,21 @@ test "image load with invalid RGB data" {
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
-            .width = 1,
+            .medium = .direct,
             .height = 1,
+            .width = 1,
             .image_id = 31,
+            .compression = .none,
         } },
         .data = try alloc.dupe(u8, "AAAA"),
     };
     defer cmd.deinit(alloc);
     var loading = try LoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
+
+    // This should succeed despite invalid data. Kitty's doc implies
+    // this is the case, this may fail in the future if we validate
+    // base64 immediately.
 }
 
 test "image load with image too wide" {
@@ -526,6 +558,8 @@ test "image load with image too wide" {
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
+            .medium = .direct,
+            .compression = .none,
             .width = max_dimension + 1,
             .height = 1,
             .image_id = 31,
@@ -545,6 +579,8 @@ test "image load with image too tall" {
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
+            .medium = .direct,
+            .compression = .none,
             .height = max_dimension + 1,
             .width = 1,
             .image_id = 31,
@@ -719,6 +755,7 @@ test "image load: temporary file without correct path" {
     try tmp_dir.dir.access(path, .{});
 }
 
+
 test "image load: rgb, not compressed, temporary file" {
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -753,7 +790,7 @@ test "image load: rgb, not compressed, temporary file" {
     try testing.expect(img.compression == .none);
 
     // Temporary file should be gone
-    try testing.expectError(error.FileNotFound, tmp_dir.dir.access(path, .{}));
+    try testing.expectError(error.FileNotFound, tmp_dir.dir.access(path, .{});
 }
 
 test "image load: rgb, not compressed, regular file" {
@@ -764,12 +801,12 @@ test "image load: rgb, not compressed, regular file" {
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("image.data", &buf);
+    const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
 
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
