
index 6abe1ca7..675a63bb 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmp37kxkgsk_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmpsb_uf9xm_actual.txt	
@@ -56,6 +56,7 @@ pub const LoadingImage = struct {
                 .height = t.height,
                 .compression = t.compression,
                 .format = t.format,
+                .implicit_id = cmd.implicit_id,
             },
 
             .display = cmd.display(),
@@ -403,7 +404,7 @@ pub const LoadingImage = struct {
         // Write it to an array list
         var list = std.ArrayList(u8).init(alloc);
         errdefer list.deinit();
-        stream.reader().readAllArrayList(&list, max_size) catch |err| {
+        stream.readAllArrayList(&list, max_size) catch |err| {
             log.warn("failed to read decompressed data: {}", .{err});
             return error.DecompressionFailed;
         };
@@ -476,6 +477,7 @@ pub const Image = struct {
         UnsupportedFormat,
         UnsupportedMedium,
         UnsupportedDepth,
+        OutOfMemory,
     };
 
     pub fn deinit(self: *Image, alloc: Allocator) void {
@@ -488,6 +490,31 @@ pub const Image = struct {
         copy.data = "";
         return copy;
     }
+
+    /// Debug function to write the data to a file. This is useful for
+    /// capturing some test data for unit tests.
+    pub fn debugDump(self: Image) !void {
+        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
+
+        var buf: [1024]u8 = undefined;
+        const filename = try std.fmt.bufPrint(
+            &buf,
+            "image-{s}-{s}-{d}x{d}-{}.data",
+            .{
+                @tagName(self.format),
+                @tagName(self.compression),
+                self.width,
+                self.height,
+                self.id,
+            },
+        );
+        const cwd = std.fs.cwd();
+        const f = try cwd.createFile(filename, .{});
+        defer f.close();
+
+        const writer = f.writer();
+        try writer.writeAll(self.data);
+    }
 };
 
 /// The rect taken up by some image placement, in grid cells. This will
