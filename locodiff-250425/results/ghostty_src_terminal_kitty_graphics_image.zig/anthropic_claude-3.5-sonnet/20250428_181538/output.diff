--- ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual)@@ -80,13 +80,9 @@         }
 
         var abs_buf: [std.fs.max_path_bytes]u8 = undefined;
-        const path = switch (t.medium) {
-            .direct => unreachable, // handled above
-            .file, .temporary_file => posix.realpath(cmd.data, &abs_buf) catch |err| {
-                log.warn("failed to get absolute path: {}", .{err});
-                return error.InvalidData;
-            },
-            .shared_memory => cmd.data,
+        const path = posix.realpath(cmd.data, &abs_buf) catch |err| {
+            log.warn("failed to get absolute path: {}", .{err});
+            return error.InvalidData;
         };
 
         // Depending on the medium, load the data from the path.
@@ -341,7 +337,7 @@         const expected_len = img.width * img.height * bpp;
         const actual_len = self.data.items.len;
         if (actual_len != expected_len) {
-            std.log.warn(
+            log.warn(
                 "unexpected length image id={} width={} height={} bpp={} expected_len={} actual_len={}",
                 .{ img.id, img.width, img.height, bpp, expected_len, actual_len },
             );
@@ -360,31 +356,6 @@         errdefer result.deinit(alloc);
         self.image = .{};
         return result;
-    }
-
-    /// Debug function to write the data to a file. This is useful for
-    /// capturing some test data for unit tests.
-    pub fn debugDump(self: LoadingImage) !void {
-        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
-
-        var buf: [1024]u8 = undefined;
-        const filename = try std.fmt.bufPrint(
-            &buf,
-            "image-{s}-{s}-{d}x{d}-{}.data",
-            .{
-                @tagName(self.image.format),
-                @tagName(self.image.compression),
-                self.image.width,
-                self.image.height,
-                self.image.id,
-            },
-        );
-        const cwd = std.fs.cwd();
-        const f = try cwd.createFile(filename, .{});
-        defer f.close();
-
-        const writer = f.writer();
-        try writer.writeAll(self.data.items);
     }
 
     /// Decompress the data in-place.
@@ -508,6 +479,8 @@     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
+            .medium = .direct,
+            .compression = .none,
             .width = 1,
             .height = 1,
             .image_id = 31,
@@ -526,6 +499,8 @@     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
+            .medium = .direct,
+            .compression = .none,
             .width = max_dimension + 1,
             .height = 1,
             .image_id = 31,
@@ -795,34 +770,4 @@     const testing = std.testing;
     const alloc = testing.allocator;
 
-    var tmp_dir = try internal_os.TempDir.init();
-    defer tmp_dir.deinit();
-    const data = @embedFile("testdata/image-png-none-50x76-2147483647-raw.data");
-    try tmp_dir.dir.writeFile(.{
-        .sub_path = "tty-graphics-protocol-image.data",
-        .data = data,
-    });
-
-    var buf: [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .png,
-            .medium = .file,
-            .compression = .none,
-            .width = 0,
-            .height = 0,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-    try testing.expect(img.format == .rgba);
-    try tmp_dir.dir.access(path, .{});
-}+    var tmp_dir = try internal_