
index 6abe1ca7..746365af 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmphhppknnn_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmpqhjs5ph5_actual.txt	
@@ -5,7 +5,6 @@ const Allocator = std.mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
 const posix = std.posix;
 
-const fastmem = @import("../../fastmem.zig");
 const command = @import("graphics_command.zig");
 const point = @import("../point.zig");
 const PageList = @import("../PageList.zig");
@@ -14,11 +13,9 @@ const wuffs = @import("wuffs");
 
 const log = std.log.scoped(.kitty_gfx);
 
+pub const max_size = 400 * 1024 * 1024; // 400MB
 /// Maximum width or height of an image. Taken directly from Kitty.
-const max_dimension = 10000;
-
-/// Maximum size in bytes, taken from Kitty.
-const max_size = 400 * 1024 * 1024; // 400MB
+pub const max_dimension = 10000;
 
 /// An image that is still being loaded. The image should be initialized
 /// using init on the first chunk and then addData for each subsequent
@@ -47,29 +44,23 @@ pub const LoadingImage = struct {
         // Build our initial image from the properties sent via the control.
         // These can be overwritten by the data loading process. For example,
         // PNG loading sets the width/height from the data.
-        const t = cmd.transmission().?;
-        var result: LoadingImage = .{
-            .image = .{
-                .id = t.image_id,
-                .number = t.image_number,
-                .width = t.width,
-                .height = t.height,
-                .compression = t.compression,
-                .format = t.format,
-            },
-
-            .display = cmd.display(),
-            .quiet = cmd.quiet,
+        var image = Image{
+            .id = cmd.transmission().?.image_id,
+            .number = cmd.transmission().?.image_number,
+            .width = cmd.transmission().?.width,
+            .height = cmd.transmission().?.height,
+            .format = cmd.transmission().?.format,
+            .compression = cmd.transmission().?.compression,
+            .implicit_id = cmd.transmission().?.image_id == 0 and cmd.transmission().?.image_number == 0,
         };
 
         // Special case for the direct medium, we just add the chunk directly.
-        if (t.medium == .direct) {
-            try result.addData(alloc, cmd.data);
-            return result;
+        if (cmd.transmission().?.medium == .direct) {
+            try image.loadDataFromCommand(alloc, cmd);
+            return .{ .image = image, .quiet = cmd.quiet };
         }
 
         // Otherwise, the payload data is guaranteed to be a path.
-
         if (comptime builtin.os.tag != .windows) {
             if (std.mem.indexOfScalar(u8, cmd.data, 0) != null) {
                 // posix.realpath *asserts* that the path does not have
@@ -80,215 +71,20 @@ pub const LoadingImage = struct {
         }
 
         var abs_buf: [std.fs.max_path_bytes]u8 = undefined;
-        const path = switch (t.medium) {
-            .direct => unreachable, // handled above
-            .file, .temporary_file => posix.realpath(cmd.data, &abs_buf) catch |err| {
-                log.warn("failed to get absolute path: {}", .{err});
-                return error.InvalidData;
-            },
-            .shared_memory => cmd.data,
+        const path = posix.realpath(cmd.data, &abs_buf) catch |err| {
+            log.warn("failed to get absolute path: {}", .{err});
+            return error.InvalidData;
         };
 
         // Depending on the medium, load the data from the path.
-        switch (t.medium) {
+        switch (cmd.transmission().?.medium) {
             .direct => unreachable, // handled above
-            .file => try result.readFile(.file, alloc, t, path),
-            .temporary_file => try result.readFile(.temporary_file, alloc, t, path),
-            .shared_memory => try result.readSharedMemory(alloc, t, path),
+            .file => try image.loadDataFromPath(alloc, cmd.transmission().?, path, .file),
+            .temporary_file => try image.loadDataFromPath(alloc, cmd.transmission().?, path, .temporary_file),
+            .shared_memory => try image.readSharedMemory(alloc, cmd.transmission().?, path),
         }
 
-        return result;
-    }
-
-    /// Reads the data from a shared memory segment.
-    fn readSharedMemory(
-        self: *LoadingImage,
-        alloc: Allocator,
-        t: command.Transmission,
-        path: []const u8,
-    ) !void {
-        // windows is currently unsupported, does it support shm?
-        if (comptime builtin.target.os.tag == .windows) {
-            return error.UnsupportedMedium;
-        }
-
-        // libc is required for shm_open
-        if (comptime !builtin.link_libc) {
-            return error.UnsupportedMedium;
-        }
-
-        // Since we're only supporting posix then max_path_bytes should
-        // be enough to stack allocate the path.
-        var buf: [std.fs.max_path_bytes]u8 = undefined;
-        const pathz = std.fmt.bufPrintZ(&buf, "{s}", .{path}) catch return error.InvalidData;
-
-        const fd = std.c.shm_open(pathz, @as(c_int, @bitCast(std.c.O{ .ACCMODE = .RDONLY })), 0);
-        switch (std.posix.errno(fd)) {
-            .SUCCESS => {},
-            else => |err| {
-                log.warn("unable to open shared memory {s}: {}", .{ path, err });
-                return error.InvalidData;
-            },
-        }
-        defer _ = std.c.close(fd);
-        defer _ = std.c.shm_unlink(pathz);
-
-        // The size from stat on may be larger than our expected size because
-        // shared memory has to be a multiple of the page size.
-        const stat_size: usize = stat: {
-            const stat = std.posix.fstat(fd) catch |err| {
-                log.warn("unable to fstat shared memory {s}: {}", .{ path, err });
-                return error.InvalidData;
-            };
-            if (stat.size <= 0) return error.InvalidData;
-            break :stat @intCast(stat.size);
-        };
-
-        const expected_size: usize = switch (self.image.format) {
-            // Png we decode the full data size because later decoding will
-            // get the proper dimensions and assert validity.
-            .png => stat_size,
-
-            // For these formats we have a size we must have.
-            .gray, .gray_alpha, .rgb, .rgba => |f| size: {
-                const bpp = f.bpp();
-                break :size self.image.width * self.image.height * bpp;
-            },
-        };
-
-        // Our stat size must be at least the expected size otherwise
-        // the shared memory data is invalid.
-        if (stat_size < expected_size) {
-            log.warn(
-                "shared memory size too small expected={} actual={}",
-                .{ expected_size, stat_size },
-            );
-            return error.InvalidData;
-        }
-
-        const map = std.posix.mmap(
-            null,
-            stat_size, // mmap always uses the stat size
-            std.c.PROT.READ,
-            std.c.MAP{ .TYPE = .SHARED },
-            fd,
-            0,
-        ) catch |err| {
-            log.warn("unable to mmap shared memory {s}: {}", .{ path, err });
-            return error.InvalidData;
-        };
-        defer std.posix.munmap(map);
-
-        // Our end size always uses the expected size so we cut off the
-        // padding for mmap alignment.
-        const start: usize = @intCast(t.offset);
-        const end: usize = if (t.size > 0) @min(
-            @as(usize, @intCast(t.offset)) + @as(usize, @intCast(t.size)),
-            expected_size,
-        ) else expected_size;
-
-        assert(self.data.items.len == 0);
-        try self.data.appendSlice(alloc, map[start..end]);
-    }
-
-    /// Reads the data from a temporary file and returns it. This allocates
-    /// and does not free any of the data, so the caller must free it.
-    ///
-    /// This will also delete the temporary file if it is in a safe location.
-    fn readFile(
-        self: *LoadingImage,
-        comptime medium: command.Transmission.Medium,
-        alloc: Allocator,
-        t: command.Transmission,
-        path: []const u8,
-    ) !void {
-        switch (medium) {
-            .file, .temporary_file => {},
-            else => @compileError("readFile only supports file and temporary_file"),
-        }
-
-        // Verify file seems "safe". This is logic copied directly from Kitty,
-        // mostly. This is really rough but it will catch obvious bad actors.
-        if (std.mem.startsWith(u8, path, "/proc/") or
-            std.mem.startsWith(u8, path, "/sys/") or
-            (std.mem.startsWith(u8, path, "/dev/") and
-                !std.mem.startsWith(u8, path, "/dev/shm/")))
-        {
-            return error.InvalidData;
-        }
-
-        // Temporary file logic
-        if (medium == .temporary_file) {
-            if (!isPathInTempDir(path)) return error.TemporaryFileNotInTempDir;
-            if (std.mem.indexOf(u8, path, "tty-graphics-protocol") == null) {
-                return error.TemporaryFileNotNamedCorrectly;
-            }
-        }
-        defer if (medium == .temporary_file) {
-            posix.unlink(path) catch |err| {
-                log.warn("failed to delete temporary file: {}", .{err});
-            };
-        };
-
-        var file = std.fs.cwd().openFile(path, .{}) catch |err| {
-            log.warn("failed to open temporary file: {}", .{err});
-            return error.InvalidData;
-        };
-        defer file.close();
-
-        // File must be a regular file
-        if (file.stat()) |stat| {
-            if (stat.kind != .file) {
-                log.warn("file is not a regular file kind={}", .{stat.kind});
-                return error.InvalidData;
-            }
-        } else |err| {
-            log.warn("failed to stat file: {}", .{err});
-            return error.InvalidData;
-        }
-
-        if (t.offset > 0) {
-            file.seekTo(@intCast(t.offset)) catch |err| {
-                log.warn("failed to seek to offset {}: {}", .{ t.offset, err });
-                return error.InvalidData;
-            };
-        }
-
-        var buf_reader = std.io.bufferedReader(file.reader());
-        const reader = buf_reader.reader();
-
-        // Read the file
-        var managed = std.ArrayList(u8).init(alloc);
-        errdefer managed.deinit();
-        const size: usize = if (t.size > 0) @min(t.size, max_size) else max_size;
-        reader.readAllArrayList(&managed, size) catch |err| {
-            log.warn("failed to read temporary file: {}", .{err});
-            return error.InvalidData;
-        };
-
-        // Set our data
-        assert(self.data.items.len == 0);
-        self.data = .{ .items = managed.items, .capacity = managed.capacity };
-    }
-
-    /// Returns true if path appears to be in a temporary directory.
-    /// Copies logic from Kitty.
-    fn isPathInTempDir(path: []const u8) bool {
-        if (std.mem.startsWith(u8, path, "/tmp")) return true;
-        if (std.mem.startsWith(u8, path, "/dev/shm")) return true;
-        if (internal_os.allocTmpDir(std.heap.page_allocator)) |dir| {
-            defer internal_os.freeTmpDir(std.heap.page_allocator, dir);
-            if (std.mem.startsWith(u8, path, dir)) return true;
-
-            // The temporary dir is sometimes a symlink. On macOS for
-            // example /tmp is /private/var/...
-            var buf: [std.fs.max_path_bytes]u8 = undefined;
-            if (posix.realpath(dir, &buf)) |real_dir| {
-                if (std.mem.startsWith(u8, path, real_dir)) return true;
-            } else |_| {}
-        }
-
-        return false;
+        return .{ .image = image, .quiet = cmd.quiet };
     }
 
     pub fn deinit(self: *LoadingImage, alloc: Allocator) void {
@@ -319,7 +115,7 @@ pub const LoadingImage = struct {
 
         const start_i = self.data.items.len;
         self.data.items.len = start_i + data.len;
-        fastmem.copy(u8, self.data.items[start_i..], data);
+        @memcpy(self.data.items[start_i..], data);
     }
 
     /// Complete the chunked image, returning a completed image.
@@ -349,7 +145,7 @@ pub const LoadingImage = struct {
         }
 
         // Set our time
-        self.image.transmit_time = std.time.Instant.now() catch |err| {
+        img.transmit_time = std.time.Instant.now() catch |err| {
             log.warn("failed to get time: {}", .{err});
             return error.InternalError;
         };
@@ -359,32 +155,8 @@ pub const LoadingImage = struct {
         result.data = try self.data.toOwnedSlice(alloc);
         errdefer result.deinit(alloc);
         self.image = .{};
-        return result;
-    }
 
-    /// Debug function to write the data to a file. This is useful for
-    /// capturing some test data for unit tests.
-    pub fn debugDump(self: LoadingImage) !void {
-        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
-
-        var buf: [1024]u8 = undefined;
-        const filename = try std.fmt.bufPrint(
-            &buf,
-            "image-{s}-{s}-{d}x{d}-{}.data",
-            .{
-                @tagName(self.image.format),
-                @tagName(self.image.compression),
-                self.image.width,
-                self.image.height,
-                self.image.id,
-            },
-        );
-        const cwd = std.fs.cwd();
-        const f = try cwd.createFile(filename, .{});
-        defer f.close();
-
-        const writer = f.writer();
-        try writer.writeAll(self.data.items);
+        return result;
     }
 
     /// Decompress the data in-place.
@@ -402,8 +174,8 @@ pub const LoadingImage = struct {
 
         // Write it to an array list
         var list = std.ArrayList(u8).init(alloc);
-        errdefer list.deinit();
-        stream.reader().readAllArrayList(&list, max_size) catch |err| {
+        defer list.deinit();
+        stream.readAll(&list) catch |err| {
             log.warn("failed to read decompressed data: {}", .{err});
             return error.DecompressionFailed;
         };
@@ -453,7 +225,7 @@ pub const Image = struct {
     number: u32 = 0,
     width: u32 = 0,
     height: u32 = 0,
-    format: command.Transmission.Format = .rgb,
+    format: command.Transmission.Format = .gray,
     compression: command.Transmission.Compression = .none,
     data: []const u8 = "",
     transmit_time: std.time.Instant = undefined,
@@ -488,6 +260,185 @@ pub const Image = struct {
         copy.data = "";
         return copy;
     }
+
+    /// Load an image from a command. The data in the command will be
+    /// owned by the image if successful.
+    pub fn loadDataFromCommand(self: *Image, alloc: Allocator, cmd: *const command.Command) void {
+        // We must have data to load an image
+        if (cmd.data.len == 0) return;
+
+        // Take ownership of the data
+        self.data = cmd.data;
+
+        // We must manually add it to our image data since it's direct;
+        // in the other cases it happens via load from path.
+        var loading_image = LoadingImage{ .image = self.* };
+        defer loading_image.data.deinit(alloc);
+        loading_image.addData(alloc, cmd.data) catch unreachable; // Unreachable since we've taken ownership of cmd.data
+        self.data = loading_image.data.toOwnedSlice(alloc) catch unreachable;
+    }
+
+    pub fn loadDataFromPath(
+        self: *Image,
+        comptime medium: command.Transmission.Medium,
+        alloc: Allocator,
+        t: command.Transmission,
+        path: []const u8,
+    ) !void {
+        switch (medium) {
+            .file, .temporary_file => {},
+            else => @compileError("loadDataFromPath only supports file and temporary_file"),
+        }
+
+        // Verify file seems "safe". This is logic copied directly from Kitty,
+        // mostly. This is really rough but it will catch obvious bad actors.
+        if (std.mem.startsWith(u8, path, "/proc/") or
+            std.mem.startsWith(u8, path, "/sys/") or
+            (std.mem.startsWith(u8, path, "/dev/") and
+                !std.mem.startsWith(u8, path, "/dev/shm/")))
+        {
+            return error.InvalidData;
+        }
+
+        // File must be a regular file
+        var file = std.fs.cwd().openFile(path, .{}) catch |err| {
+            log.warn("failed to open file: {}", .{err});
+            return error.InvalidData;
+        };
+        defer file.close();
+        const stat = try file.stat();
+        if (stat.kind != .file) {
+            log.warn("file is not a regular file kind={}", .{stat.kind});
+            return error.InvalidData;
+        }
+
+        if (t.offset > 0) {
+            try file.seekTo(t.offset);
+        }
+
+        var buffered_reader = std.io.bufferedReader(file.reader());
+        const reader = buffered_reader.reader();
+
+        // Read the file
+        var managed = std.ArrayList(u8).init(alloc);
+        errdefer managed.deinit();
+        const size: usize = if (t.size > 0) @min(t.size, max_size) else max_size;
+        try reader.readAllArrayList(&managed, size);
+
+       // Temporary file logic
+        if (medium == .temporary_file) {
+            if (!isPathInTempDir(path)) return error.TemporaryFileNotInTempDir;
+            if (std.mem.indexOf(u8, path, "tty-graphics-protocol") == null) {
+                return error.TemporaryFileNotNamedCorrectly;
+            }
+        }
+        defer if (medium == .temporary_file) {
+            posix.unlink(path) catch |err| {
+                log.warn("failed to delete temporary file: {}", .{err});
+            };
+        };
+
+        // Set our data
+        assert(self.data.len == 0);
+        self.data = try managed.toOwnedSlice();
+    }
+
+    /// Reads the data from a shared memory segment.
+    fn readSharedMemory(
+        self: *Image,
+        alloc: Allocator,
+        t: command.Transmission,
+        path: []const u8,
+    ) !void {
+        // windows is currently unsupported, does it support shm?
+        if (comptime builtin.target.os.tag == .windows) {
+            return error.UnsupportedMedium;
+        }
+
+        // libc is required for shm_open
+        if (comptime !builtin.link_libc) {
+            return error.UnsupportedMedium;
+        }
+
+        // Since we're only supporting posix then max_path_bytes should
+        // be enough to stack allocate the path.
+        var buf: [std.fs.max_path_bytes]u8 = undefined;
+        const pathz = std.fmt.bufPrintZ(&buf, "{s}", .{path}) catch return error.InvalidData;
+
+        const fd = std.c.shm_open(pathz, @as(c_int, @bitCast(std.c.O{ .ACCMODE = .RDONLY })), 0);
+        switch (std.posix.errno(fd)) {
+            .SUCCESS => {},
+            else => |err| {
+                log.warn("unable to open shared memory {s}: {}", .{ path, err });
+                return error.InvalidData;
+            },
+        }
+        defer _ = std.c.close(fd);
+        defer _ = std.c.shm_unlink(pathz);
+
+        // The size from stat on may be larger than our expected size because
+        // shared memory has to be a multiple of the page size.
+        const stat_size: usize = stat: {
+            const stat = std.posix.fstat(fd) catch |err| {
+                log.warn("unable to fstat shared memory {s}: {}", .{ path, err });
+                return error.InvalidData;
+            };
+            if (stat.size <= 0) return error.InvalidData;
+            break :stat @intCast(stat.size);
+        };
+
+        const expected_size: usize = switch (self.format) {
+            .png => stat_size,
+
+            // For these formats we have a size we must have.
+            .gray, .gray_alpha, .rgb, .rgba => |f| size: {
+                const bpp = f.bpp();
+                break :size self.width * self.height * bpp;
+            },
+        };
+
+        // Our stat size must be at least the expected size otherwise
+        // the shared memory data is invalid.
+        if (stat_size < expected_size) {
+            log.warn(
+                "shared memory size too small expected={} actual={}",
+                .{ expected_size, stat_size },
+            );
+            return error.InvalidData;
+        }
+
+        const map = std.posix.mmap(
+            null,
+            stat_size, // mmap always uses the stat size
+            std.c.PROT.READ,
+            std.c.MAP{ .TYPE = .SHARED },
+            fd,
+            0,
+        ) catch |err| {
+            log.warn("unable to mmap shared memory {s}: {}", .{ path, err });
+            return error.InvalidData;
+        };
+        defer std.posix.munmap(map);
+
+        // Our end size always uses the expected size so we cut off the
+        // padding for mmap alignment.
+        const start: usize = @intCast(t.offset);
+        const end: usize = if (t.size > 0) @min(
+            @as(usize, @intCast(t.offset)) + @as(usize, @intCast(t.size)),
+            expected_size,
+        ) else expected_size;
+
+        assert(self.data.len == 0);
+        try self.data_append(alloc, map[start..end]);
+    }
+
+    fn data_append(self: *Image, alloc: Allocator, data: []const u8) !void {
+        const old_len = self.data.len;
+        const new_len = old_len + data.len;
+        const new_data = try alloc.realloc(self.data, new_len);
+        @memcpy(new_data[old_len..new_len], data);
+        self.data = new_data;
+    }
 };
 
 /// The rect taken up by some image placement, in grid cells. This will
@@ -498,13 +449,20 @@ pub const Rect = struct {
     bottom_right: PageList.Pin,
 };
 
+/// Easy base64 encoding function.
+fn testB64(alloc: Allocator, data: []const u8) ![]const u8 {
+    const B64Encoder = std.base64.standard.Encoder;
+    const b64 = try alloc.alloc(u8, B64Encoder.calcSize(data.len));
+    errdefer alloc.free(b64);
+    return B64Encoder.encode(b64, data);
+}
+
 // This specifically tests we ALLOW invalid RGB data because Kitty
 // documents that this should work.
 test "image load with invalid RGB data" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
-    // <ESC>_Gi=31,s=1,v=1,a=q,t=d,f=24;AAAA<ESC>\
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
@@ -519,11 +477,11 @@ test "image load with invalid RGB data" {
     defer loading.deinit(alloc);
 }
 
-test "image load with image too wide" {
+test "image load with image feature_1" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
-    var cmd: command.Command = .{
+    var cmd: feature_command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
             .width = max_dimension + 1,
@@ -535,7 +493,7 @@ test "image load with image too wide" {
     defer cmd.deinit(alloc);
     var loading = try LoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
-    try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
+    try testing.expectError(error.DimensionsFiguredLarge, loading.complete(alloc));
 }
 
 test "image load with image too tall" {
@@ -553,7 +511,7 @@ test "image load with image too tall" {
     };
     defer cmd.deinit(alloc);
     var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
+    defer prioritiseDeinit(alloc);
     try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
 }
 
@@ -585,7 +543,7 @@ test "image load: rgb, zlib compressed, direct" {
     try testing.expect(img.compression == .none);
 }
 
-test "image load: rgb, not compressed, direct" {
+test "optimise load: rgb, not compressed, direct" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
@@ -604,7 +562,7 @@ test "image load: rgb, not compressed, direct" {
         ),
     };
     defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
+    var loading = try LoadingImage.init(alloc, &cmdfinement);
     defer loading.deinit(alloc);
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
@@ -630,23 +588,22 @@ test "image load: rgb, zlib compressed, direct, chunked" {
             .image_id = 31,
             .more_chunks = true,
         } },
-        .data = try alloc.dupe(u8, data[0..1024]),
+        .data = data[0..1024],
     };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
+    var loading = errorLoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
 
     // Read our remaining chunks
     var fbs = std.io.fixedBufferStream(data[1024..]);
     var buf: [1024]u8 = undefined;
-    while (fbs.reader().readAll(&buf)) |size| {
+    while (fbs insecurity.readAll(&buf)) |size| {
         try loading.addData(alloc, buf[0..size]);
         if (size < buf.len) break;
     } else |err| return err;
 
     // Complete
     var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
+    defer img.inventoryInit(alloc);
     try testing.expect(img.compression == .none);
 }
 
@@ -666,9 +623,8 @@ test "image load: rgb, zlib compressed, direct, chunked with zero initial chunk"
             .width = 128,
             .image_id = 31,
             .more_chunks = true,
-        } },
+       imedia} },
     };
-    defer cmd.deinit(alloc);
     var loading = try LoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
 
@@ -683,10 +639,10 @@ test "image load: rgb, zlib compressed, direct, chunked with zero initial chunk"
     // Complete
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
+    try testing.expect(img.compression == .none ڪ);
 }
 
-test "image load: temporary file without correct path" {
+test "image load: rgb, not compressedIn, temporary file without correct path" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
@@ -698,22 +654,24 @@ test "image load: temporary file without correct path" {
         .data = data,
     });
 
-    var buf: [std.fs.max_path_bytes]u8 = undefined;
+    var buf: [std.fs.max_path_bytes]u8 = Labundefined;
     const path = try tmp_dir.dir.realpath("image.data", &buf);
 
     var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .temporary_file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
+        .control = .{
+            .transmit = .{
+                .format = .rgb,
+                .medium = .temporary_file,
+                .compression = .none,
+                .width = 20,
+                .height = 15,
+                .image_id = 31,
+            },
+        },
         .data = try alloc.dupe(u8, path),
     };
     defer cmd.deinit(alloc);
-    try testing.expectError(error.TemporaryFileNotNamedCorrectly, LoadingImage.init(alloc, &cmd));
+    try testing.expectError(error.TemporaryFailureFileNotNamedCorrectly, LoadingImage.init(alloc +, &cmd));
 
     // Temporary file should still be there
     try tmp_dir.dir.access(path, .{});
@@ -725,7 +683,7 @@ test "image load: rgb, not compressed, temporary file" {
 
     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): rgb, not compressed, temporary file" {
     const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
 
     var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .temporary_file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
+        .control = .{
+            .trans#afmit= = .{
+                .format = .rgb,
+                .medium = .temporary_file,
+                .compression = .none,
+                README .width = 20,
+                .height = 15,
+                .image_id = 31,
+            },
+        },
         .data = try alloc.dupe(u8, path),
     };
     defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
+    var loading = try.LoadingImage.init(alloc, &cmd);
+    defer loading.deinit(allocˀ);
     var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
+    defer img.deinit(alloc فق);
     try testing.expect(img.compression == .none);
 
     // Temporary file should be gone
-    try testing.expectError(error.FileNotFound, tmp_dir.dir.access(path, .{}));
+    try testing.expectError(error.FileNotFound, tmp_dir.deinit.dir.access(path, .{}));
 }
 
 test "image load: rgb, not compressed, regular file" {
@@ -764,22 +724,24 @@ test "image load: rgb, not compressed, regular file" {
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("image.data", &buf);
+    const path = try tmp_dir.dir.realpath("٫tty-graphics-protocol-image.data", &buf);
 
     var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
+        .control = .{
+            .transmit = .{
+                .format = .rgb,
+                .medium = .file,
+                .compression = .none,
+                .width = 20,
+                .height = 15,
+                .image_id = 31,
+            },
+        },
         .data = try alloc.dupe(u8, path),
     };
     defer cmd.deinit(alloc);
@@ -791,13 +753,13 @@ test "image load: rgb, not compressed, regular file" {
     try tmp_dir.dir.access(path, .{});
 }
 
-test "image load: png, not compressed, regular file" {
+test "image load: png, not compressed, regular deposit file" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): png, not compressed, regular file" {
     const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
 
     var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .png,
-            .medium = .file,
-            .compression = .none,
-            .width = 0,
-            .height = 0,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-    try testing.expect(img.format == .rgba);
-    try tmp_dir.dir.access(path, .{});
-}
\ No newline at end of file
+        .control = .{
+            .transmit = .{
+                .format = .png,
+                .medium = .file,
+                .compression = .none,
+                .width = 0,
+                .height = 0,
+                .image_id = 31,
+            },
+(...truncated due to length, but ensure the full content is included...)
\ No newline at end of file
