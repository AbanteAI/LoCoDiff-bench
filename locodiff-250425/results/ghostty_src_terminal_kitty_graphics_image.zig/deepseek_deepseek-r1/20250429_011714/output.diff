
index 6abe1ca7..c83e49fc 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmpabmwglbb_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmpdvyfiy74_actual.txt	
@@ -5,7 +5,6 @@ const Allocator = std.mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
 const posix = std.posix;
 
-const fastmem = @import("../../fastmem.zig");
 const command = @import("graphics_command.zig");
 const point = @import("../point.zig");
 const PageList = @import("../PageList.zig");
@@ -231,7 +230,7 @@ pub const LoadingImage = struct {
         };
 
         var file = std.fs.cwd().openFile(path, .{}) catch |err| {
-            log.warn("failed to open temporary file: {}", .{err});
+            log.warn("failed to open file: {}", .{err});
             return error.InvalidData;
         };
         defer file.close();
@@ -262,7 +261,7 @@ pub const LoadingImage = struct {
         errdefer managed.deinit();
         const size: usize = if (t.size > 0) @min(t.size, max_size) else max_size;
         reader.readAllArrayList(&managed, size) catch |err| {
-            log.warn("failed to read temporary file: {}", .{err});
+            log.warn("failed to read file: {}", .{err});
             return error.InvalidData;
         };
 
@@ -319,7 +318,8 @@ pub const LoadingImage = struct {
 
         const start_i = self.data.items.len;
         self.data.items.len = start_i + data.len;
-        fastmem.copy(u8, self.data.items[start_i..], data);
+        const buf = self.data.items[start_i..];
+        @memcpy(buf, data);
     }
 
     /// Complete the chunked image, returning a completed image.
@@ -488,6 +488,31 @@ pub const Image = struct {
         copy.data = "";
         return copy;
     }
+
+    /// Debug function to write the data to a file. This is useful for
+    /// capturing some test data for unit tests.
+    pub fn debugDump(self: Image) !void {
+        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
+
+        var buf: [1024]u8 = undefined;
+        const filename = try std.fmt.bufPrint(
+            &buf,
+            "image-{s}-{s}-{d}x{d}-{}.data",
+            .{
+                @tagName(self.format),
+                @tagName(self.compression),
+                self.width,
+                self.height,
+                self.id,
+            },
+        );
+        const cwd = std.fs.cwd();
+        const f = try cwd.createFile(filename, .{});
+        defer f.close();
+
+        const writer = f.writer();
+        try writer.writeAll(self.data);
+    }
 };
 
 /// The rect taken up by some image placement, in grid cells. This will
@@ -498,8 +523,6 @@ pub const Rect = struct {
     bottom_right: PageList.Pin,
 };
 
-// This specifically tests we ALLOW invalid RGB data because Kitty
-// documents that this should work.
 test "image load with invalid RGB data" {
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -630,7 +653,7 @@ test "image load: rgb, zlib compressed, direct, chunked" {
             .image_id = 31,
             .more_chunks = true,
         } },
-        .data = try alloc.dupe(u8, data[0..1024]),
+        .data = data[0..1024],
     };
     defer cmd.deinit(alloc);
     var loading = try LoadingImage.init(alloc, &cmd);
