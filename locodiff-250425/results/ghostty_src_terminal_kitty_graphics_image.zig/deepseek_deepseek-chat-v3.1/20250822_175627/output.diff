
index 6abe1ca7f..04914f7e4 100644
--- a/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected):tmp/tmphd8ptw37_expected.txt	
+++ b/ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual):tmp/tmpyf9czxrf_actual.txt	
@@ -134,7 +134,7 @@ pub const LoadingImage = struct {
         defer _ = std.c.shm_unlink(pathz);
 
         // The size from stat on may be larger than our expected size because
-        // shared memory has to be a multiple of the page size.
+        // shared memory has to be multiple of the page size.
         const stat_size: usize = stat: {
             const stat = std.posix.fstat(fd) catch |err| {
                 log.warn("unable to fstat shared memory {s}: {}", .{ path, err });
@@ -187,7 +187,7 @@ pub const LoadingImage = struct {
             expected_size,
         ) else expected_size;
 
-        assert(self.data.items.len == 0);
+        assert self.data.items.len == 0;
         try self.data.appendSlice(alloc, map[start..end]);
     }
 
@@ -231,7 +231,7 @@ pub const LoadingImage = struct {
         };
 
         var file = std.fs.cwd().openFile(path, .{}) catch |err| {
-            log.warn("failed to open temporary file: {}", .{err});
+            log.warn("failed to open file: {}", .{err});
             return error.InvalidData;
         };
         defer file.close();
@@ -262,12 +262,12 @@ pub const LoadingImage = struct {
         errdefer managed.deinit();
         const size: usize = if (t.size > 0) @min(t.size, max_size) else max_size;
         reader.readAllArrayList(&managed, size) catch |err| {
-            log.warn("failed to read temporary file: {}", .{err});
+            log.warn("failed to read file: {}", .{err});
             return error.InvalidData;
         };
 
         // Set our data
-        assert(self.data.items.len == 0);
+        assert self.data.items.len == 0;
         self.data = .{ .items = managed.items, .capacity = managed.capacity };
     }
 
@@ -496,333 +496,4 @@ pub const Image = struct {
 pub const Rect = struct {
     top_left: PageList.Pin,
     bottom_right: PageList.Pin,
-};
-
-// This specifically tests we ALLOW invalid RGB data because Kitty
-// documents that this should work.
-test "image load with invalid RGB data" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    // <ESC>_Gi=31,s=1,v=1,a=q,t=d,f=24;AAAA<ESC>\
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .width = 1,
-            .height = 1,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-}
-
-test "image load with image too wide" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .width = max_dimension + 1,
-            .height = 1,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
-}
-
-test "image load with image too tall" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .height = max_dimension + 1,
-            .width = 1,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
-}
-
-test "image load: rgb, zlib compressed, direct" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .direct,
-            .compression = .zlib_deflate,
-            .height = 96,
-            .width = 128,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(
-            u8,
-            @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): rgb, not compressed, direct" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .direct,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(
-            u8,
-            @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): rgb, zlib compressed, direct, chunked" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .direct,
-            .compression = .zlib_deflate,
-            .height = 96,
-            .width = 128,
-            .image_id = 31,
-            .more_chunks = true,
-        } },
-        .data = try alloc.dupe(u8, data[0..1024]),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-
-    // Read our remaining chunks
-    var fbs = std.io.fixedBufferStream(data[1024..]);
-    var buf: [1024]u8 = undefined;
-    while (fbs.reader().readAll(&buf)) |size| {
-        try loading.addData(alloc, buf[0..size]);
-        if (size < buf.len) break;
-    } else |err| return err;
-
-    // Complete
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-}
-
-test "image load: rgb, zlib compressed, direct, chunked with zero initial chunk" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .direct,
-            .compression = .zlib_deflate,
-            .height = 96,
-            .width = 128,
-            .image_id = 31,
-            .more_chunks = true,
-        } },
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-
-    // Read our remaining chunks
-    var fbs = std.io.fixedBufferStream(data);
-    var buf: [1024]u8 = undefined;
-    while (fbs.reader().readAll(&buf)) |size| {
-        try loading.addData(alloc, buf[0..size]);
-        if (size < buf.len) break;
-    } else |err| return err;
-
-    // Complete
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-}
-
-test "image load: temporary file without correct path" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var tmp_dir = try internal_os.TempDir.init();
-    defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("image.data", &buf);
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .temporary_file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    try testing.expectError(error.TemporaryFileNotNamedCorrectly, LoadingImage.init(alloc, &cmd));
-
-    // Temporary file should still be there
-    try tmp_dir.dir.access(path, .{});
-}
-
-test "image load: rgb, not compressed, temporary file" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var tmp_dir = try internal_os.TempDir.init();
-    defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .temporary_file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-
-    // Temporary file should be gone
-    try testing.expectError(error.FileNotFound, tmp_dir.dir.access(path, .{}));
-}
-
-test "image load: rgb, not compressed, regular file" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var tmp_dir = try internal_os.TempDir.init();
-    defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("image.data", &buf);
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .medium = .file,
-            .compression = .none,
-            .width = 20,
-            .height = 15,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-    try tmp_dir.dir.access(path, .{});
-}
-
-test "image load: png, not compressed, regular file" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var tmp_dir = try internal_os.TempDir.init();
-    defer tmp_dir.deinit();
-    const data = @embedFile("testdata/ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected): [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .png,
-            .medium = .file,
-            .compression = .none,
-            .width = 0,
-            .height = 0,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, path),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    var img = try loading.complete(alloc);
-    defer img.deinit(alloc);
-    try testing.expect(img.compression == .none);
-    try testing.expect(img.format == .rgba);
-    try tmp_dir.dir.access(path, .{});
-}
\ No newline at end of file
+};
\ No newline at end of file
