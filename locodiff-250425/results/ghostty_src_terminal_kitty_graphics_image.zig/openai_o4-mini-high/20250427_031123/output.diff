--- ghostty_src_terminal_kitty_graphics_image.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_kitty_graphics_image.zig_extracted.txt (actual)@@ -1,11 +1,11 @@ const std = @import("std");
+const fastmem = @import("../../fastmem.zig");
+const posix = std.posix;
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
-const posix = std.posix;
-
-const fastmem = @import("../../fastmem.zig");
+
 const command = @import("graphics_command.zig");
 const point = @import("../point.zig");
 const PageList = @import("../PageList.zig");
@@ -20,44 +20,29 @@ /// Maximum size in bytes, taken from Kitty.
 const max_size = 400 * 1024 * 1024; // 400MB
 
-/// An image that is still being loaded. The image should be initialized
-/// using init on the first chunk and then addData for each subsequent
-/// chunk. Once all chunks have been added, complete should be called
-/// to finalize the image.
 pub const LoadingImage = struct {
-    /// The in-progress image. The first chunk must have all the metadata
-    /// so this comes from that initially.
     image: Image,
-
-    /// The data that is being built up.
     data: std.ArrayListUnmanaged(u8) = .{},
-
-    /// This is non-null when a transmit and display command is given
-    /// so that we display the image after it is fully loaded.
     display: ?command.Display = null,
-
-    /// Quiet is the quiet settings for the initial load command. This is
-    /// used if q isn't set on subsequent chunks.
     quiet: command.Command.Quiet,
 
-    /// Initialize a chunked immage from the first image transmission.
+    /// Initialize a chunked image from the first image transmission.
     /// If this is a multi-chunk image, this should only be the FIRST
     /// chunk.
     pub fn init(alloc: Allocator, cmd: *const command.Command) !LoadingImage {
-        // Build our initial image from the properties sent via the control.
-        // These can be overwritten by the data loading process. For example,
-        // PNG loading sets the width/height from the data.
         const t = cmd.transmission().?;
-        var result: LoadingImage = .{
-            .image = .{
+        var result = LoadingImage{
+            .image = Image{
                 .id = t.image_id,
                 .number = t.image_number,
                 .width = t.width,
                 .height = t.height,
+                .format = t.format,
                 .compression = t.compression,
-                .format = t.format,
+                .transmit_time = undefined,
+                .implicit_id = false,
             },
-
+            .data = std.ArrayListUnmanaged(u8).initCapacity(alloc, 0) catch |e| return e,
             .display = cmd.display(),
             .quiet = cmd.quiet,
         };
@@ -68,36 +53,100 @@             return result;
         }
 
-        // Otherwise, the payload data is guaranteed to be a path.
-
-        if (comptime builtin.os.tag != .windows) {
-            if (std.mem.indexOfScalar(u8, cmd.data, 0) != null) {
-                // posix.realpath *asserts* that the path does not have
-                // internal nulls instead of erroring.
-                log.warn("failed to get absolute path: BadPathName", .{});
-                return error.InvalidData;
-            }
-        }
-
         var abs_buf: [std.fs.max_path_bytes]u8 = undefined;
         const path = switch (t.medium) {
-            .direct => unreachable, // handled above
             .file, .temporary_file => posix.realpath(cmd.data, &abs_buf) catch |err| {
                 log.warn("failed to get absolute path: {}", .{err});
                 return error.InvalidData;
             },
             .shared_memory => cmd.data,
-        };
-
-        // Depending on the medium, load the data from the path.
+            else => unreachable,
+        };
+
         switch (t.medium) {
-            .direct => unreachable, // handled above
             .file => try result.readFile(.file, alloc, t, path),
             .temporary_file => try result.readFile(.temporary_file, alloc, t, path),
             .shared_memory => try result.readSharedMemory(alloc, t, path),
-        }
-
+            else => {},
+        }
         return result;
+    }
+
+    /// Adds a chunk of data to the image. Use this if the
+    /// image is coming in chunks (the "m" parameter in the protocol).
+    pub fn addData(self: *LoadingImage, alloc: Allocator, data: []const u8) !void {
+        // If no data, skip
+        if (data.len == 0) return;
+
+        // If our data would get too big, return an error
+        if (self.data.items.len + data.len > max_size) {
+            log.warn("image data too large max_size={}", .{max_size});
+            return error.InvalidData;
+        }
+
+        // Ensure we have enough room to add the data
+        try self.data.ensureUnusedCapacity(alloc, data.len);
+
+        const start_i = self.data.items.len;
+        self.data.items.len = start_i + data.len;
+        fastmem.copy(u8, self.data.items[start_i..], data);
+    }
+
+    /// Complete the chunked image, returning a completed image.
+    pub fn complete(self: *LoadingImage, alloc: Allocator) !Image {
+        const img = &self.image;
+
+        // Decompress the data if it is compressed.
+        try self.decompress(alloc);
+
+        // Decode the png if we have to
+        if (img.format == .png) try self.decodePng(alloc);
+
+        // Validate our dimensions.
+        if (img.width == 0 or img.height == 0) return error.DimensionsRequired;
+        if (img.width > max_dimension or img.height > max_dimension) return error.DimensionsTooLarge;
+
+        // Data length must be what we expect
+        const bpp = img.format.bpp();
+        const expected_len = img.width * img.height * bpp;
+        const actual_len = self.data.items.len;
+        if (actual_len != expected_len) return error.InvalidData;
+
+        // Set our time
+        self.image.transmit_time = std.time.Instant.now() catch |err| {
+            log.warn("failed to get time: {}", .{err});
+            return error.InternalError;
+        };
+
+        var result = self.image;
+        result.data = try self.data.toOwnedSlice(alloc);
+        result.implicit_id = false;
+        self.image = undefined;
+        self.data.deinit(alloc);
+        return result;
+    }
+
+    fn decompress(self: *LoadingImage, alloc: Allocator) !void {
+        return switch (self.image.compression) {
+            .none => {},
+            .zlib_deflate => self.decompressZlib(alloc),
+        };
+    }
+
+    fn decompressZlib(self: *LoadingImage, alloc: Allocator) !void {
+        var fbs = std.io.fixedBufferStream(self.data.items);
+        var stream = std.compress.zlib.decompressor(fbs.reader());
+
+        var list = std.ArrayList(u8).init(alloc);
+        defer list.deinit();
+        stream.reader().readAllArrayList(&list, max_size) catch |err| {
+            log.warn("failed to read decompressed data: {}", .{err});
+            return error.DecompressionFailed;
+        };
+
+        self.data.deinit(alloc);
+        self.data = .{ .items = list.items, .capacity = list.capacity };
+        self.image.compression = .none;
     }
 
     /// Reads the data from a shared memory segment.
@@ -191,10 +240,6 @@         try self.data.appendSlice(alloc, map[start..end]);
     }
 
-    /// Reads the data from a temporary file and returns it. This allocates
-    /// and does not free any of the data, so the caller must free it.
-    ///
-    /// This will also delete the temporary file if it is in a safe location.
     fn readFile(
         self: *LoadingImage,
         comptime medium: command.Transmission.Medium,
@@ -211,7 +256,7 @@         // mostly. This is really rough but it will catch obvious bad actors.
         if (std.mem.startsWith(u8, path, "/proc/") or
             std.mem.startsWith(u8, path, "/sys/") or
-            (std.mem.startsWith(u8, path, "/dev/") and
+                (std.mem.startsWith(u8, path, "/dev/") and
                 !std.mem.startsWith(u8, path, "/dev/shm/")))
         {
             return error.InvalidData;
@@ -259,7 +304,7 @@ 
         // Read the file
         var managed = std.ArrayList(u8).init(alloc);
-        errdefer managed.deinit();
+        defer managed.deinit();
         const size: usize = if (t.size > 0) @min(t.size, max_size) else max_size;
         reader.readAllArrayList(&managed, size) catch |err| {
             log.warn("failed to read temporary file: {}", .{err});
@@ -271,8 +316,6 @@         self.data = .{ .items = managed.items, .capacity = managed.capacity };
     }
 
-    /// Returns true if path appears to be in a temporary directory.
-    /// Copies logic from Kitty.
     fn isPathInTempDir(path: []const u8) bool {
         if (std.mem.startsWith(u8, path, "/tmp")) return true;
         if (std.mem.startsWith(u8, path, "/dev/shm")) return true;
@@ -280,140 +323,12 @@             defer internal_os.freeTmpDir(std.heap.page_allocator, dir);
             if (std.mem.startsWith(u8, path, dir)) return true;
 
-            // The temporary dir is sometimes a symlink. On macOS for
-            // example /tmp is /private/var/...
             var buf: [std.fs.max_path_bytes]u8 = undefined;
             if (posix.realpath(dir, &buf)) |real_dir| {
                 if (std.mem.startsWith(u8, path, real_dir)) return true;
             } else |_| {}
         }
-
         return false;
-    }
-
-    pub fn deinit(self: *LoadingImage, alloc: Allocator) void {
-        self.image.deinit(alloc);
-        self.data.deinit(alloc);
-    }
-
-    pub fn destroy(self: *LoadingImage, alloc: Allocator) void {
-        self.deinit(alloc);
-        alloc.destroy(self);
-    }
-
-    /// Adds a chunk of data to the image. Use this if the image
-    /// is coming in chunks (the "m" parameter in the protocol).
-    pub fn addData(self: *LoadingImage, alloc: Allocator, data: []const u8) !void {
-        // If no data, skip
-        if (data.len == 0) return;
-
-        // If our data would get too big, return an error
-        if (self.data.items.len + data.len > max_size) {
-            log.warn("image data too large max_size={}", .{max_size});
-            return error.InvalidData;
-        }
-
-        // Ensure we have enough room to add the data
-        // to the end of the ArrayList before doing so.
-        try self.data.ensureUnusedCapacity(alloc, data.len);
-
-        const start_i = self.data.items.len;
-        self.data.items.len = start_i + data.len;
-        fastmem.copy(u8, self.data.items[start_i..], data);
-    }
-
-    /// Complete the chunked image, returning a completed image.
-    pub fn complete(self: *LoadingImage, alloc: Allocator) !Image {
-        const img = &self.image;
-
-        // Decompress the data if it is compressed.
-        try self.decompress(alloc);
-
-        // Decode the png if we have to
-        if (img.format == .png) try self.decodePng(alloc);
-
-        // Validate our dimensions.
-        if (img.width == 0 or img.height == 0) return error.DimensionsRequired;
-        if (img.width > max_dimension or img.height > max_dimension) return error.DimensionsTooLarge;
-
-        // Data length must be what we expect
-        const bpp = img.format.bpp();
-        const expected_len = img.width * img.height * bpp;
-        const actual_len = self.data.items.len;
-        if (actual_len != expected_len) {
-            std.log.warn(
-                "unexpected length image id={} width={} height={} bpp={} expected_len={} actual_len={}",
-                .{ img.id, img.width, img.height, bpp, expected_len, actual_len },
-            );
-            return error.InvalidData;
-        }
-
-        // Set our time
-        self.image.transmit_time = std.time.Instant.now() catch |err| {
-            log.warn("failed to get time: {}", .{err});
-            return error.InternalError;
-        };
-
-        // Everything looks good, copy the image data over.
-        var result = self.image;
-        result.data = try self.data.toOwnedSlice(alloc);
-        errdefer result.deinit(alloc);
-        self.image = .{};
-        return result;
-    }
-
-    /// Debug function to write the data to a file. This is useful for
-    /// capturing some test data for unit tests.
-    pub fn debugDump(self: LoadingImage) !void {
-        if (comptime builtin.mode != .Debug) @compileError("debugDump in non-debug");
-
-        var buf: [1024]u8 = undefined;
-        const filename = try std.fmt.bufPrint(
-            &buf,
-            "image-{s}-{s}-{d}x{d}-{}.data",
-            .{
-                @tagName(self.image.format),
-                @tagName(self.image.compression),
-                self.image.width,
-                self.image.height,
-                self.image.id,
-            },
-        );
-        const cwd = std.fs.cwd();
-        const f = try cwd.createFile(filename, .{});
-        defer f.close();
-
-        const writer = f.writer();
-        try writer.writeAll(self.data.items);
-    }
-
-    /// Decompress the data in-place.
-    fn decompress(self: *LoadingImage, alloc: Allocator) !void {
-        return switch (self.image.compression) {
-            .none => {},
-            .zlib_deflate => self.decompressZlib(alloc),
-        };
-    }
-
-    fn decompressZlib(self: *LoadingImage, alloc: Allocator) !void {
-        // Open our zlib stream
-        var fbs = std.io.fixedBufferStream(self.data.items);
-        var stream = std.compress.zlib.decompressor(fbs.reader());
-
-        // Write it to an array list
-        var list = std.ArrayList(u8).init(alloc);
-        errdefer list.deinit();
-        stream.reader().readAllArrayList(&list, max_size) catch |err| {
-            log.warn("failed to read decompressed data: {}", .{err});
-            return error.DecompressionFailed;
-        };
-
-        // Empty our current data list, take ownership over managed array list
-        self.data.deinit(alloc);
-        self.data = .{ .items = list.items, .capacity = list.capacity };
-
-        // Make sure we note that our image is no longer compressed
-        self.image.compression = .none;
     }
 
     /// Decode the data as PNG. This will also updated the image dimensions.
@@ -434,35 +349,32 @@             return error.InvalidData;
         }
 
-        // Replace our data
         self.data.deinit(alloc);
-        self.data = .{};
         try self.data.ensureUnusedCapacity(alloc, result.data.len);
         try self.data.appendSlice(alloc, result.data[0..result.data.len]);
 
-        // Store updated image dimensions
         self.image.width = result.width;
         self.image.height = result.height;
+        // Wuffs always outputs RGBA for simplicity
         self.image.format = .rgba;
     }
+
+    pub fn deinit(self: *LoadingImage, alloc: Allocator) void {
+        self.image.deinit(alloc);
+        self.data.deinit(alloc);
+    }
 };
 
-/// Image represents a single fully loaded image.
 pub const Image = struct {
-    id: u32 = 0,
-    number: u32 = 0,
-    width: u32 = 0,
-    height: u32 = 0,
-    format: command.Transmission.Format = .rgb,
-    compression: command.Transmission.Compression = .none,
-    data: []const u8 = "",
-    transmit_time: std.time.Instant = undefined,
-
-    /// Set this to true if this image was loaded by a command that
-    /// doesn't specify an ID or number, since such commands should
-    /// not be responded to, even though we do currently give them
-    /// IDs in the public range (which is bad!).
-    implicit_id: bool = false,
+    id: u32,
+    number: u32,
+    width: u32,
+    height: u32,
+    format: command.Transmission.Format,
+    compression: command.Transmission.Compression,
+    data: []const u8,
+    transmit_time: std.time.Instant,
+    implicit_id: bool,
 
     pub const Error = error{
         InternalError,
@@ -490,21 +402,19 @@     }
 };
 
-/// The rect taken up by some image placement, in grid cells. This will
-/// be rounded up to the nearest grid cell since we can't place images
-/// in partial grid cells.
+/// The rect taken up by some image placement, in grid cells.
 pub const Rect = struct {
     top_left: PageList.Pin,
     bottom_right: PageList.Pin,
 };
 
-// This specifically tests we ALLOW invalid RGB data because Kitty
-// documents that this should work.
 test "image load with invalid RGB data" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
-    // <ESC>_Gi=31,s=1,v=1,a=q,t=d,f=24;AAAA<ESC>\
+    var data = try alloc.dupe(u8, "AAAA");
+    defer alloc.free(data);
+
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
@@ -512,49 +422,13 @@             .height = 1,
             .image_id = 31,
         } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-}
-
-test "image load with image too wide" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .width = max_dimension + 1,
-            .height = 1,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
-}
-
-test "image load with image too tall" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var cmd: command.Command = .{
-        .control = .{ .transmit = .{
-            .format = .rgb,
-            .height = max_dimension + 1,
-            .width = 1,
-            .image_id = 31,
-        } },
-        .data = try alloc.dupe(u8, "AAAA"),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-    try testing.expectError(error.DimensionsTooLarge, loading.complete(alloc));
+        .data = data,
+    };
+    defer cmd.deinit(alloc);
+
+    var loading = try LoadingImage.init(alloc, &cmd);
+    defer loading.deinit(alloc);
+    defer loading.complete(alloc) catch |e| if (e != Image.Error.InvalidData) {};
 }
 
 test "image load: rgb, zlib compressed, direct" {
@@ -576,12 +450,12 @@         ),
     };
     defer cmd.deinit(alloc);
+
     var loading = try LoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
 
-    // should be decompressed
     try testing.expect(img.compression == .none);
 }
 
@@ -604,12 +478,12 @@         ),
     };
     defer cmd.deinit(alloc);
+
     var loading = try LoadingImage.init(alloc, &cmd);
     defer loading.deinit(alloc);
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
 
-    // should be decompressed
     try testing.expect(img.compression == .none);
 }
 
@@ -619,7 +493,6 @@ 
     const data = @embedFile("testdata/image-rgb-zlib_deflate-128x96-2147483647-raw.data");
 
-    // Setup our initial chunk
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
@@ -630,21 +503,19 @@             .image_id = 31,
             .more_chunks = true,
         } },
-        .data = try alloc.dupe(u8, data[0..1024]),
-    };
-    defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-
-    // Read our remaining chunks
-    var fbs = std.io.fixedBufferStream(data[1024..]);
+    };
+    defer cmd.deinit(alloc);
+
+    var loading = try LoadingImage.init(alloc, &cmd);
+    defer loading.deinit(alloc);
+
+    var fbs = std.io.fixedBufferStream(data[0..1024]);
     var buf: [1024]u8 = undefined;
     while (fbs.reader().readAll(&buf)) |size| {
         try loading.addData(alloc, buf[0..size]);
         if (size < buf.len) break;
     } else |err| return err;
 
-    // Complete
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
     try testing.expect(img.compression == .none);
@@ -656,7 +527,6 @@ 
     const data = @embedFile("testdata/image-rgb-zlib_deflate-128x96-2147483647-raw.data");
 
-    // Setup our initial chunk
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
             .format = .rgb,
@@ -669,10 +539,10 @@         } },
     };
     defer cmd.deinit(alloc);
-    var loading = try LoadingImage.init(alloc, &cmd);
-    defer loading.deinit(alloc);
-
-    // Read our remaining chunks
+
+    var loading = try LoadingImage.init(alloc, &cmd);
+    defer loading.deinit(alloc);
+
     var fbs = std.io.fixedBufferStream(data);
     var buf: [1024]u8 = undefined;
     while (fbs.reader().readAll(&buf)) |size| {
@@ -680,7 +550,6 @@         if (size < buf.len) break;
     } else |err| return err;
 
-    // Complete
     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
     try testing.expect(img.compression == .none);
@@ -693,10 +562,7 @@     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/image-rgb-none-20x15-2147483647-raw.data");
-    try tmp_dir.dir.writeFile(.{
-        .sub_path = "image.data",
-        .data = data,
-    });
+    try tmp_dir.dir.writeFile(.{ .sub_path = "image.data", .data = data });
 
     var buf: [std.fs.max_path_bytes]u8 = undefined;
     const path = try tmp_dir.dir.realpath("image.data", &buf);
@@ -726,10 +592,7 @@     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/image-rgb-none-20x15-2147483647-raw.data");
-    try tmp_dir.dir.writeFile(.{
-        .sub_path = "tty-graphics-protocol-image.data",
-        .data = data,
-    });
+    try tmp_dir.dir.writeFile(.{ .sub_path = "tty-graphics-protocol-image.data", .data = data });
 
     var buf: [std.fs.max_path_bytes]u8 = undefined;
     const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
@@ -751,8 +614,6 @@     var img = try loading.complete(alloc);
     defer img.deinit(alloc);
     try testing.expect(img.compression == .none);
-
-    // Temporary file should be gone
     try testing.expectError(error.FileNotFound, tmp_dir.dir.access(path, .{}));
 }
 
@@ -763,13 +624,10 @@     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/image-rgb-none-20x15-2147483647-raw.data");
-    try tmp_dir.dir.writeFile(.{
-        .sub_path = "image.data",
-        .data = data,
-    });
+    try tmp_dir.dir.writeFile(.{ .sub_path = "tty-graphics-protocol-image.data", .data = data });
 
     var buf: [std.fs.max_path_bytes]u8 = undefined;
-    const path = try tmp_dir.dir.realpath("image.data", &buf);
+    const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
 
     var cmd: command.Command = .{
         .control = .{ .transmit = .{
@@ -798,10 +656,7 @@     var tmp_dir = try internal_os.TempDir.init();
     defer tmp_dir.deinit();
     const data = @embedFile("testdata/image-png-none-50x76-2147483647-raw.data");
-    try tmp_dir.dir.writeFile(.{
-        .sub_path = "tty-graphics-protocol-image.data",
-        .data = data,
-    });
+    try tmp_dir.dir.writeFile(.{ .sub_path = "tty-graphics-protocol-image.data", .data = data });
 
     var buf: [std.fs.max_path_bytes]u8 = undefined;
     const path = try tmp_dir.dir.realpath("tty-graphics-protocol-image.data", &buf);
