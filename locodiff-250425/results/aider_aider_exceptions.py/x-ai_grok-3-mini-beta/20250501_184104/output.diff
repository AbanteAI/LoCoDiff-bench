
index e820f980..0878bfbd 100644
--- a/aider_aider_exceptions.py_expectedoutput.txt (expected):tmp/tmpgw5oerf1_expected.txt	
+++ b/aider_aider_exceptions.py_extracted.txt (actual):tmp/tmp0e65yw37_actual.txt	
@@ -1,15 +1,11 @@
 from dataclasses import dataclass
 
-from aider.dump import dump  # noqa: F401
-
-
 @dataclass
 class ExInfo:
     name: str
     retry: bool
     description: str
 
-
 EXCEPTIONS = [
     ExInfo("APIConnectionError", True, None),
     ExInfo("APIError", True, None),
@@ -49,7 +45,6 @@ EXCEPTIONS = [
     ),
 ]
 
-
 class LiteLLMExceptions:
     exceptions = dict()
     exception_info = {exi.name: exi for exi in EXCEPTIONS}
@@ -64,16 +59,14 @@ class LiteLLMExceptions:
             if var.endswith("Error"):
                 if var not in self.exception_info:
                     raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
-
-        for var in self.exception_info:
-            ex = getattr(litellm, var)
-            self.exceptions[ex] = self.exception_info[var]
+                
+                ex = getattr(litellm, var)
+                self.exceptions[ex] = self.exception_info[var]
 
     def exceptions_tuple(self):
         return tuple(self.exceptions)
-
+    
     def get_ex_info(self, ex):
-        """Return the ExInfo for a given exception instance"""
         import litellm
 
         if ex.__class__ is litellm.APIConnectionError:
@@ -92,7 +85,7 @@ class LiteLLMExceptions:
                         " limiting your requests."
                     ),
                 )
-
+        
         # Check for specific non-retryable APIError cases like insufficient credits
         if ex.__class__ is litellm.APIError:
             err_str = str(ex).lower()
