
index e820f980a..2eab22939 100644
--- a/aider_aider_exceptions.py_expectedoutput.txt (expected):tmp/tmpi4bijbrg_expected.txt	
+++ b/aider_aider_exceptions.py_extracted.txt (actual):tmp/tmpzq4rpwg__actual.txt	
@@ -60,11 +60,6 @@ class LiteLLMExceptions:
     def _load(self, strict=False):
         import litellm
 
-        for var in dir(litellm):
-            if var.endswith("Error"):
-                if var not in self.exception_info:
-                    raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
-
         for var in self.exception_info:
             ex = getattr(litellm, var)
             self.exceptions[ex] = self.exception_info[var]
@@ -83,15 +78,15 @@ class LiteLLMExceptions:
                 )
             if "boto3" in str(ex):
                 return ExInfo("APIConnectionError", False, "You need to: pip install boto3")
-            if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
-                return ExInfo(
-                    "APIConnectionError",
-                    True,
-                    (
-                        "OpenRouter or the upstream API provider is down, overloaded or rate"
-                        " limiting your requests."
-                    ),
-                )
+        if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
+            return ExInfo(
+                "APIConnectionError",
+                True,
+                (
+                    "OpenRouter or the upstream API provider is down, overloaded or rate"
+                    " limiting your requests."
+                ),
+            )
 
         # Check for specific non-retryable APIError cases like insufficient credits
         if ex.__class__ is litellm.APIError:
