
index e820f980..979a43af 100644
--- a/aider_aider_exceptions.py_expectedoutput.txt (expected):tmp/tmpo7foe_0m_expected.txt	
+++ b/aider_aider_exceptions.py_extracted.txt (actual):tmp/tmp66wva5t3_actual.txt	
@@ -2,42 +2,28 @@ from dataclasses import dataclass
 
 from aider.dump import dump  # noqa: F401
 
-
 @dataclass
 class ExInfo:
     name: str
     retry: bool
     description: str
 
-
 EXCEPTIONS = [
     ExInfo("APIConnectionError", True, None),
     ExInfo("APIError", True, None),
     ExInfo("APIResponseValidationError", True, None),
-    ExInfo(
-        "AuthenticationError",
-        False,
-        "The API provider is not able to authenticate you. Check your API key.",
-    ),
+    ExInfo("AuthenticationError", False, "The API provider is not able to authenticate you. Check your API key."),
     ExInfo("AzureOpenAIError", True, None),
     ExInfo("BadRequestError", False, None),
     ExInfo("BudgetExceededError", True, None),
-    ExInfo(
-        "ContentPolicyViolationError",
-        True,
-        "The API provider has refused the request due to a safety policy about the content.",
-    ),
-    ExInfo("ContextWindowExceededError", False, None),  # special case handled in base_coder
+    ExInfo("ContentPolicyViolationError", True, "The API provider has refused the request due to a safety policy about the content."),
+    ExInfo("ContextWindowExceededError", False, None), # special case handled in base_coder
     ExInfo("InternalServerError", True, "The API provider's servers are down or overloaded."),
     ExInfo("InvalidRequestError", True, None),
     ExInfo("JSONSchemaValidationError", True, None),
     ExInfo("NotFoundError", False, None),
     ExInfo("OpenAIError", True, None),
-    ExInfo(
-        "RateLimitError",
-        True,
-        "The API provider has rate limited you. Try again later or check your quotas.",
-    ),
+    ExInfo("RateLimitError", True, "The API provider has rate limited you. Try again later or check your quotas."),
     ExInfo("RouterRateLimitError", True, None),
     ExInfo("ServiceUnavailableError", True, "The API provider's servers are down or overloaded."),
     ExInfo("UnprocessableEntityError", True, None),
@@ -49,7 +35,6 @@ EXCEPTIONS = [
     ),
 ]
 
-
 class LiteLLMExceptions:
     exceptions = dict()
     exception_info = {exi.name: exi for exi in EXCEPTIONS}
@@ -60,11 +45,6 @@ class LiteLLMExceptions:
     def _load(self, strict=False):
         import litellm
 
-        for var in dir(litellm):
-            if var.endswith("Error"):
-                if var not in self.exception_info:
-                    raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
-
         for var in self.exception_info:
             ex = getattr(litellm, var)
             self.exceptions[ex] = self.exception_info[var]
@@ -83,15 +63,15 @@ class LiteLLMExceptions:
                 )
             if "boto3" in str(ex):
                 return ExInfo("APIConnectionError", False, "You need to: pip install boto3")
-            if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
-                return ExInfo(
-                    "APIConnectionError",
-                    True,
-                    (
-                        "OpenRouter or the upstream API provider is down, overloaded or rate"
-                        " limiting your requests."
-                    ),
-                )
+        if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
+            return ExInfo(
+                "APIConnectionError",
+                True,
+                (
+                    "OpenRouter or the upstream API provider is down, overloaded or rate"
+                    " limiting your requests."
+                ),
+            )
 
         # Check for specific non-retryable APIError cases like insufficient credits
         if ex.__class__ is litellm.APIError:
@@ -104,4 +84,6 @@ class LiteLLMExceptions:
                 )
             # Fall through to default APIError handling if not the specific credits error
 
-        return self.exceptions.get(ex.__class__, ExInfo(None, None, None))
\ No newline at end of file
+        return self.exceptions.get(ex.__class__, ExInfo(None, None, None))
+
+litellm_ex = LiteLLMExceptions()
\ No newline at end of file
