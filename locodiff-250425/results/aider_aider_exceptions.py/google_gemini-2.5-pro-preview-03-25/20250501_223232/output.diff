--- aider_aider_exceptions.py_expectedoutput.txt (expected)+++ aider_aider_exceptions.py_extracted.txt (actual)@@ -60,11 +60,6 @@     def _load(self, strict=False):
         import litellm
 
-        for var in dir(litellm):
-            if var.endswith("Error"):
-                if var not in self.exception_info:
-                    raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
-
         for var in self.exception_info:
             ex = getattr(litellm, var)
             self.exceptions[ex] = self.exception_info[var]
@@ -75,6 +70,17 @@     def get_ex_info(self, ex):
         """Return the ExInfo for a given exception instance"""
         import litellm
+
+        # Check for specific non-retryable APIError cases like insufficient credits
+        if ex.__class__ is litellm.APIError:
+            err_str = str(ex).lower()
+            if "insufficient credits" in err_str and '"code":402' in err_str:
+                return ExInfo(
+                    "APIError",
+                    False,
+                    "Insufficient credits with the API provider. Please add credits.",
+                )
+            # Fall through to default APIError handling if not the specific credits error
 
         if ex.__class__ is litellm.APIConnectionError:
             if "google.auth" in str(ex):
@@ -93,15 +99,4 @@                     ),
                 )
 
-        # Check for specific non-retryable APIError cases like insufficient credits
-        if ex.__class__ is litellm.APIError:
-            err_str = str(ex).lower()
-            if "insufficient credits" in err_str and '"code":402' in err_str:
-                return ExInfo(
-                    "APIError",
-                    False,
-                    "Insufficient credits with the API provider. Please add credits.",
-                )
-            # Fall through to default APIError handling if not the specific credits error
-
         return self.exceptions.get(ex.__class__, ExInfo(None, None, None))