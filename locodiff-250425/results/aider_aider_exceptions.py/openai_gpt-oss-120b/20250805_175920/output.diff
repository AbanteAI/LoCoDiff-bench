
index e820f980a..aa6c6564e 100644
--- a/aider_aider_exceptions.py_expectedoutput.txt (expected):tmp/tmpk6rfgl0b_expected.txt	
+++ b/aider_aider_exceptions.py_extracted.txt (actual):tmp/tmpsgso8di9_actual.txt	
@@ -1,6 +1,5 @@
-from dataclasses import dataclass
-
 from aider.dump import dump  # noqa: F401
+from dataclasses import dataclass
 
 
 @dataclass
@@ -27,7 +26,8 @@ EXCEPTIONS = [
         True,
         "The API provider has refused the request due to a safety policy about the content.",
     ),
-    ExInfo("ContextWindowExceededError", False, None),  # special case handled in base_coder
+    ExInfo("ContextWindowExceededError", False, None)  # special case handled in base_coder
+    ,
     ExInfo("InternalServerError", True, "The API provider's servers are down or overloaded."),
     ExInfo("InvalidRequestError", True, None),
     ExInfo("JSONSchemaValidationError", True, None),
@@ -60,11 +60,6 @@ class LiteLLMExceptions:
     def _load(self, strict=False):
         import litellm
 
-        for var in dir(litellm):
-            if var.endswith("Error"):
-                if var not in self.exception_info:
-                    raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
-
         for var in self.exception_info:
             ex = getattr(litellm, var)
             self.exceptions[ex] = self.exception_info[var]
@@ -79,10 +74,14 @@ class LiteLLMExceptions:
         if ex.__class__ is litellm.APIConnectionError:
             if "google.auth" in str(ex):
                 return ExInfo(
-                    "APIConnectionError", False, "You need to: pip install google-generativeai"
+                    "APIConnectionError",
+                    False,
+                    "You need to: pip install google-generativeai",
                 )
             if "boto3" in str(ex):
-                return ExInfo("APIConnectionError", False, "You need to: pip install boto3")
+                return ExInfo(
+                    "APIConnectionError", False, "You need to: pip install boto3"
+                )
             if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
                 return ExInfo(
                     "APIConnectionError",
@@ -92,8 +91,6 @@ class LiteLLMExceptions:
                         " limiting your requests."
                     ),
                 )
-
-        # Check for specific non-retryable APIError cases like insufficient credits
         if ex.__class__ is litellm.APIError:
             err_str = str(ex).lower()
             if "insufficient credits" in err_str and '"code":402' in err_str:
@@ -102,6 +99,6 @@ class LiteLLMExceptions:
                     False,
                     "Insufficient credits with the API provider. Please add credits.",
                 )
-            # Fall through to default APIError handling if not the specific credits error
+            # Fall through to default handling
 
         return self.exceptions.get(ex.__class__, ExInfo(None, None, None))
\ No newline at end of file
