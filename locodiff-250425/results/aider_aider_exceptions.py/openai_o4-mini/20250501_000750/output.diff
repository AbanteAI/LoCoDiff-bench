--- aider_aider_exceptions.py_expectedoutput.txt (expected)+++ aider_aider_exceptions.py_extracted.txt (actual)@@ -57,13 +57,8 @@     def __init__(self):
         self._load()
 
-    def _load(self, strict=False):
+    def _load(self):
         import litellm
-
-        for var in dir(litellm):
-            if var.endswith("Error"):
-                if var not in self.exception_info:
-                    raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
 
         for var in self.exception_info:
             ex = getattr(litellm, var)
@@ -78,21 +73,18 @@ 
         if ex.__class__ is litellm.APIConnectionError:
             if "google.auth" in str(ex):
-                return ExInfo(
-                    "APIConnectionError", False, "You need to: pip install google-generativeai"
-                )
+                return ExInfo("APIConnectionError", False, "You need to: pip install google-generativeai")
             if "boto3" in str(ex):
                 return ExInfo("APIConnectionError", False, "You need to: pip install boto3")
-            if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
-                return ExInfo(
-                    "APIConnectionError",
-                    True,
-                    (
-                        "OpenRouter or the upstream API provider is down, overloaded or rate"
-                        " limiting your requests."
-                    ),
-                )
-
+        if "OpenrouterException" in str(ex) and "'choices'" in str(ex):
+            return ExInfo(
+                "APIConnectionError",
+                True,
+                (
+                    "OpenRouter or the upstream API provider is down, overloaded or rate"
+                    " limiting your requests."
+                ),
+            )
         # Check for specific non-retryable APIError cases like insufficient credits
         if ex.__class__ is litellm.APIError:
             err_str = str(ex).lower()
@@ -103,5 +95,4 @@                     "Insufficient credits with the API provider. Please add credits.",
                 )
             # Fall through to default APIError handling if not the specific credits error
-
         return self.exceptions.get(ex.__class__, ExInfo(None, None, None))