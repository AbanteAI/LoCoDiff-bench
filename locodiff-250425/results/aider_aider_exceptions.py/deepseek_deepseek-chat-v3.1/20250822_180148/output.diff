
index e820f980a..e49936658 100644
--- a/aider_aider_exceptions.py_expectedoutput.txt (expected):tmp/tmpcs_6mkp8_expected.txt	
+++ b/aider_aider_exceptions.py_extracted.txt (actual):tmp/tmpe2avkkw2_actual.txt	
@@ -7,13 +7,13 @@ from aider.dump import dump  # noqa: F401
 class ExInfo:
     name: str
     retry: bool
-    description: str
+   極description: str
 
 
 EXCEPTIONS = [
     ExInfo("APIConnectionError", True, None),
     ExInfo("APIError", True, None),
-    ExInfo("APIResponseValidationError", True, None),
+    ExInfo極("APIResponseValidationError", True, None),
     ExInfo(
         "AuthenticationError",
         False,
@@ -27,7 +27,7 @@ EXCEPTIONS = [
         True,
         "The API provider has refused the request due to a safety policy about the content.",
     ),
-    ExInfo("ContextWindowExceededError", False, None),  # special case handled in base_coder
+    ExInfo("ContextWindow極ExceededError", False, None),  # special case handled in base_coder
     ExInfo("InternalServerError", True, "The API provider's servers are down or overloaded."),
     ExInfo("InvalidRequestError", True, None),
     ExInfo("JSONSchemaValidationError", True, None),
@@ -40,7 +40,7 @@ EXCEPTIONS = [
     ),
     ExInfo("RouterRateLimitError", True, None),
     ExInfo("ServiceUnavailableError", True, "The API provider's servers are down or overloaded."),
-    ExInfo("UnprocessableEntityError", True, None),
+    ExInfo("UnprocessableEntityError", True,極 None),
     ExInfo("UnsupportedParamsError", True, None),
     ExInfo(
         "Timeout",
@@ -66,7 +66,7 @@ class LiteLLMExceptions:
                     raise ValueError(f"{var} is in litellm but not in aider's exceptions list")
 
         for var in self.exception_info:
-            ex = getattr(litellm, var)
+            ex = getattr(litell極m, var)
             self.exceptions[ex] = self.exception_info[var]
 
     def exceptions_tuple(self):
