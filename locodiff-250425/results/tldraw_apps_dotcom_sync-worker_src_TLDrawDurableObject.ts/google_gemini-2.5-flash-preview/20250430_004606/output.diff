
index ce88caa2..f595a7b9 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmp9m25lc2__expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpmzuj5ukq_actual.txt	
@@ -18,8 +18,8 @@ import {
 } from '@tldraw/dotcom-shared'
 import {
 	RoomSnapshot,
+	TLCloseEventCode,
 	TLSocketRoom,
-	TLSyncErrorCloseEventCode,
 	TLSyncErrorCloseEventReason,
 	TLSyncRoom,
 	type PersistedRoomSnapshotForSupabase,
@@ -45,7 +45,7 @@ import { getPublishedRoomSnapshot } from './routes/tla/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected): DurableObjectId
 
+	// For TLSyncRoom
 	_room: Promise<TLSocketRoom<TLRecord, SessionMeta>> | null = null
 
 	sentry: ReturnType<typeof createSentry> | null = null
@@ -133,7 +134,7 @@ export class TLDrawDurableObject extends DurableObject {
 
 						this.logEvent({ type: 'room', roomId: slug, name: 'room_start' })
 						// Also associate file assets after we load the room
-						setTimeout(this.maybeAssociateFileAssets.bind(this), PERSIST_INTERVAL_MS)
+						setTimeout(this.maybeAssociateFileAssets.bind(this), PERSIST_INTERVAL_MS * 0.5)
 						return room
 					}
 					case 'room_not_found': {
@@ -167,6 +168,7 @@ export class TLDrawDurableObject extends DurableObject {
 	readonly r2: {
 		readonly rooms: R2Bucket
 		readonly versionCache: R2Bucket
+		readonly roomSnapshots: R2Bucket
 	}
 
 	_documentInfo: DocumentInfo | null = null
@@ -182,6 +184,7 @@ export class TLDrawDurableObject extends DurableObject {
 		this.storage = state.storage
 		this.sentryDSN = env.SENTRY_DSN
 		this.measure = env.MEASURE
+
 		this.sentry = createSentry(this.state, this.env)
 		this.supabaseClient = createSupabaseClient(env)
 
@@ -189,6 +192,7 @@ export class TLDrawDurableObject extends DurableObject {
 		this.r2 = {
 			rooms: env.ROOMS,
 			versionCache: env.ROOMS_HISTORY_EPHEMERAL,
+			roomSnapshots: env.ROOM_SNAPSHOTS,
 		}
 
 		state.blockConcurrencyWhile(async () => {
@@ -268,14 +272,10 @@ export class TLDrawDurableObject extends DurableObject {
 
 	// Handle a request to the Durable Object.
 	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.state, this.env, req)
-
 		try {
 			return await this.router.fetch(req)
 		} catch (err) {
-			console.error(err)
-			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			sentry?.captureException(err)
+			this.reportError(err)
 			return new Response('Something went wrong', {
 				status: 500,
 				statusText: 'Internal Server Error',
@@ -357,7 +357,7 @@ export class TLDrawDurableObject extends DurableObject {
 		serverWebSocket.accept()
 
 		const closeSocket = (reason: TLSyncErrorCloseEventReason) => {
-			serverWebSocket.close(TLSyncErrorCloseEventCode, reason)
+			serverWebSocket.close(TLCloseEventCode.APPLICATION_ERROR, reason)
 			return new Response(null, { status: 101, webSocket: clientWebSocket })
 		}
 
@@ -497,7 +497,7 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	async handleFileCreateFromSource() {
+	async handleFileCreateFromSource(): Promise<DBLoadResult> {
 		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
 		const split = this._fileRecordCache.createSource?.split('/')
 		if (!split || split?.length !== 2) {
@@ -526,9 +526,6 @@ export class TLDrawDurableObject extends DurableObject {
 			case SNAPSHOT_PREFIX:
 				data = await getLegacyRoomData(this.env, id, 'snapshot')
 				break
-			case PUBLISH_PREFIX:
-				data = await getPublishedRoomSnapshot(this.env, id)
-				break
 			case LOCAL_FILE_PREFIX:
 				// create empty room, the client will populate it
 				data = new TLSyncRoom({ schema: createTLSchema() }).getSnapshot()
@@ -602,10 +599,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	_lastPersistedClock: number | null = null
-
-	executionQueue = new ExecutionQueue()
-
 	// We use this to make sure that all of the assets in a tldraw app file are associated with that file.
 	// This is needed for a few cases like duplicating a file, copy pasting images between files, slurping legacy files.
 	async maybeAssociateFileAssets() {
