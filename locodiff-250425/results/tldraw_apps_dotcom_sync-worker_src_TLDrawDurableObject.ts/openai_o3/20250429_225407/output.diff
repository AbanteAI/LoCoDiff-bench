
index ce88caa2..ad2ffeca 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmpq2n8mp6v_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpqmde3usd_actual.txt	
@@ -36,7 +36,6 @@ import {
 import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { IRequest, Router } from 'itty-router'
-import { Kysely } from 'kysely'
 import { AlarmScheduler } from './AlarmScheduler'
 import { PERSIST_INTERVAL_MS } from './config'
 import { createPostgresConnectionPool } from './postgres'
@@ -54,7 +53,7 @@ import { getLegacyRoomData } from './utils/tla/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected): number
@@ -71,7 +70,6 @@ interface SessionMeta {
 }
 
 export class TLDrawDurableObject extends DurableObject {
-	// A unique identifier for this instance of the Durable Object
 	id: DurableObjectId
 
 	_room: Promise<TLSocketRoom<TLRecord, SessionMeta>> | null = null
@@ -151,16 +149,12 @@ export class TLDrawDurableObject extends DurableObject {
 		return this._room
 	}
 
-	// For storage
 	storage: DurableObjectStorage
 
-	// For persistence
 	supabaseClient: SupabaseClient | void
 
-	// For analytics
 	measure: Analytics | undefined
 
-	// For error tracking
 	sentryDSN: string | undefined
 
 	readonly supabaseTable: string
@@ -171,7 +165,7 @@ export class TLDrawDurableObject extends DurableObject {
 
 	_documentInfo: DocumentInfo | null = null
 
-	db: Kysely<DB>
+	db: ReturnType<typeof createPostgresConnectionPool>
 
 	constructor(
 		private state: DurableObjectState,
@@ -218,11 +212,6 @@ export class TLDrawDurableObject extends DurableObject {
 			(req) => this.extractDocumentInfoFromRequest(req, ROOM_OPEN_MODE.READ_ONLY),
 			(req) => this.onRequest(req, ROOM_OPEN_MODE.READ_ONLY)
 		)
-		.get(
-			`/app/file/:roomId`,
-			(req) => this.extractDocumentInfoFromRequest(req, ROOM_OPEN_MODE.READ_WRITE),
-			(req) => this.onRequest(req, ROOM_OPEN_MODE.READ_WRITE)
-		)
 		.post(
 			`/${ROOM_PREFIX}/:roomId/restore`,
 			(req) => this.extractDocumentInfoFromRequest(req, ROOM_OPEN_MODE.READ_WRITE),
@@ -268,14 +257,12 @@ export class TLDrawDurableObject extends DurableObject {
 
 	// Handle a request to the Durable Object.
 	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.state, this.env, req)
-
 		try {
 			return await this.router.fetch(req)
 		} catch (err) {
 			console.error(err)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			sentry?.captureException(err)
+			this.sentry?.captureException(err)
 			return new Response('Something went wrong', {
 				status: 500,
 				statusText: 'Internal Server Error',
@@ -311,36 +298,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
-	_fileRecordCache: TlaFile | null = null
-	async getAppFileRecord(): Promise<TlaFile | null> {
-		try {
-			return await retry(
-				async () => {
-					if (this._fileRecordCache) {
-						return this._fileRecordCache
-					}
-					const result = await this.db
-						.selectFrom('file')
-						.where('id', '=', this.documentInfo.slug)
-						.selectAll()
-						.executeTakeFirst()
-					if (!result) {
-						throw new Error('File not found')
-					}
-					this._fileRecordCache = result
-					return this._fileRecordCache
-				},
-				{
-					attempts: 10,
-					waitDuration: 100,
-				}
-			)
-		} catch (_e) {
-			return null
-		}
-	}
-
 	async onRequest(req: IRequest, openMode: RoomOpenMode) {
 		// extract query params from request, should include instanceId
 		const url = new URL(req.url)
@@ -465,7 +422,6 @@ export class TLDrawDurableObject extends DurableObject {
 	logEvent(event: TLServerEvent) {
 		switch (event.type) {
 			case 'room': {
-				// we would add user/connection ids here if we could
 				this.writeEvent(event.name, { blobs: [event.roomId] })
 				break
 			}
@@ -476,7 +432,6 @@ export class TLDrawDurableObject extends DurableObject {
 						indexes: [event.localClientId],
 					})
 				} else {
-					// we would add user/connection ids here if we could
 					this.writeEvent(event.name, {
 						blobs: [event.roomId, 'unused', event.instanceId],
 						indexes: [event.localClientId],
@@ -497,6 +452,40 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
+	// For tldraw app
+	_fileRecordCache: TlaFile | null = null
+	async getAppFileRecord(): Promise<TlaFile | null> {
+		try {
+			return await retry(
+				async () => {
+					if (this._fileRecordCache) {
+						return this._fileRecordCache
+					}
+					const result = await this.db
+						.selectFrom('file')
+						.where('id', '=', this.documentInfo.slug)
+						.selectAll()
+						.executeTakeFirst()
+					if (!result) {
+						throw new Error('File not found')
+					}
+					this._fileRecordCache = result
+					return this._fileRecordCache
+				},
+				{
+					attempts: 10,
+					waitDuration: 100,
+				}
+			)
+		} catch (_e) {
+			return null
+		}
+	}
+
+	// -----------------------------------------------------------
+	// Loading / Persistence
+	// -----------------------------------------------------------
+
 	async handleFileCreateFromSource() {
 		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
 		const split = this._fileRecordCache.createSource?.split('/')
@@ -544,11 +533,10 @@ export class TLDrawDurableObject extends DurableObject {
 		return { type: 'room_found' as const, snapshot }
 	}
 
-	// Load the room's drawing data. First we check the R2 bucket, then we fallback to supabase (legacy).
+	// Load the room's drawing data.
 	async loadFromDatabase(slug: string): Promise<DBLoadResult> {
 		try {
 			const key = getR2KeyForRoom({ slug, isApp: this.documentInfo.isApp })
-			// when loading, prefer to fetch documents from the bucket
 			const roomFromBucket = await this.r2.rooms.get(key)
 			if (roomFromBucket) {
 				return { type: 'room_found', snapshot: await roomFromBucket.json() }
@@ -556,14 +544,12 @@ export class TLDrawDurableObject extends DurableObject {
 			if (this._fileRecordCache?.createSource) {
 				const res = await this.handleFileCreateFromSource()
 				if (res.type === 'room_found') {
-					// save it to the bucket so we don't try to create from source again
 					await this.r2.rooms.put(key, JSON.stringify(res.snapshot))
 				}
 				return res
 			}
 
 			if (this.documentInfo.isApp) {
-				// finally check whether the file exists in the DB but not in R2 yet
 				const file = await this.getAppFileRecord()
 				if (!file) {
 					return { type: 'room_not_found' }
@@ -574,7 +560,6 @@ export class TLDrawDurableObject extends DurableObject {
 				}
 			}
 
-			// if we don't have a room in the bucket, try to load from supabase
 			if (!this.supabaseClient) return { type: 'room_not_found' }
 			const { data, error } = await this.supabaseClient
 				.from(this.supabaseTable)
@@ -583,11 +568,9 @@ export class TLDrawDurableObject extends DurableObject {
 
 			if (error) {
 				this.logEvent({ type: 'room', roomId: slug, name: 'failed_load_from_db' })
-
 				console.error('failed to retrieve document', slug, error)
 				return { type: 'error', error: new Error(error.message) }
 			}
-			// if it didn't find a document, data will be an empty array
 			if (data.length === 0) {
 				return { type: 'room_not_found' }
 			}
@@ -596,18 +579,14 @@ export class TLDrawDurableObject extends DurableObject {
 			return { type: 'room_found', snapshot: roomFromSupabase.drawing }
 		} catch (error) {
 			this.logEvent({ type: 'room', roomId: slug, name: 'failed_load_from_db' })
-
 			console.error('failed to fetch doc', slug, error)
 			return { type: 'error', error: error as Error }
 		}
 	}
 
 	_lastPersistedClock: number | null = null
-
 	executionQueue = new ExecutionQueue()
 
-	// We use this to make sure that all of the assets in a tldraw app file are associated with that file.
-	// This is needed for a few cases like duplicating a file, copy pasting images between files, slurping legacy files.
 	async maybeAssociateFileAssets() {
 		if (!this.documentInfo.isApp) return
 
@@ -638,7 +617,10 @@ export class TLDrawDurableObject extends DurableObject {
 				})
 				asset.props.src = asset.props.src.replace(objectName, newObjectName)
 				assert(this.env.MULTIPLAYER_SERVER, 'MULTIPLAYER_SERVER must be present')
-				asset.props.src = `${this.env.MULTIPLAYER_SERVER.replace(/^ws/, 'http')}${APP_ASSET_UPLOAD_ENDPOINT}${newObjectName}`
+				asset.props.src = `${this.env.MULTIPLAYER_SERVER.replace(
+					/^ws/,
+					'http'
+				)}${APP_ASSET_UPLOAD_ENDPOINT}${newObjectName}`
 
 				asset.meta.fileId = slug
 				store.put(asset)
@@ -657,11 +639,9 @@ export class TLDrawDurableObject extends DurableObject {
 			.execute()
 	}
 
-	// Save the room to r2
 	async persistToDatabase() {
 		try {
 			await this.executionQueue.push(async () => {
-				// check whether the worker was woken up to persist after having gone to sleep
 				if (!this._room) return
 				const slug = this.documentInfo.slug
 				const room = await this.getRoom()
@@ -679,12 +659,7 @@ export class TLDrawDurableObject extends DurableObject {
 				])
 				this._lastPersistedClock = clock
 
-				// Update the updatedAt timestamp in the database
 				if (this.documentInfo.isApp) {
-					// don't await on this because otherwise
-					// if this logic is invoked during another db transaction
-					// (e.g. when publishing a file)
-					// that transaction will deadlock
 					this.db
 						.updateTable('file')
 						.set({ updatedAt: new Date().getTime() })
@@ -709,7 +684,6 @@ export class TLDrawDurableObject extends DurableObject {
 		})
 	}
 
-	// Will be called automatically when the alarm ticks.
 	override async alarm() {
 		await this.scheduler.onAlarm()
 	}
@@ -743,7 +717,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 		const room = await this.getRoom()
 
-		// if the app file record updated, it might mean that the file name changed
 		const documentRecord = room.getRecord(TLDOCUMENT_ID) as TLDocument
 		if (documentRecord.name !== file.name) {
 			room.updateStore((store) => {
@@ -751,8 +724,6 @@ export class TLDrawDurableObject extends DurableObject {
 			})
 		}
 
-		// if the app file record updated, it might mean that the sharing state was updated
-		// in which case we should kick people out or change their permissions
 		const roomIsReadOnlyForGuests = file.shared && file.sharedLinkType === 'view'
 
 		for (const session of room.getSessions()) {
@@ -760,31 +731,24 @@ export class TLDrawDurableObject extends DurableObject {
 				room.closeSession(session.sessionId, TLSyncErrorCloseEventReason.NOT_FOUND)
 				continue
 			}
-			// allow the owner to stay connected
 			if (session.meta.userId === file.ownerId) continue
 
 			if (!file.shared) {
 				room.closeSession(session.sessionId, TLSyncErrorCloseEventReason.FORBIDDEN)
 			} else if (
-				// if the file is still shared but the readonly state changed, make them reconnect
 				(session.isReadonly && !roomIsReadOnlyForGuests) ||
 				(!session.isReadonly && roomIsReadOnlyForGuests)
 			) {
-				// not passing a reason means they will try to reconnect
 				room.closeSession(session.sessionId)
 			}
 		}
 	}
 
-	async appFileRecordDidDelete({
-		id,
-		publishedSlug,
-	}: Pick<TlaFile, 'id' | 'ownerId' | 'publishedSlug'>) {
+	async appFileRecordDidDelete({ id, publishedSlug }: Pick<TlaFile, 'id' | 'publishedSlug'>) {
 		if (this._documentInfo?.deleted) return
 
 		this._fileRecordCache = null
 
-		// prevent new connections while we clean everything up
 		this.setDocumentInfo({
 			version: CURRENT_DOCUMENT_INFO_VERSION,
 			slug: this.documentInfo.slug,
@@ -800,35 +764,27 @@ export class TLDrawDurableObject extends DurableObject {
 				}
 				room.close()
 			}
-			// setting _room to null will prevent any further persists from going through
 			this._room = null
-			// delete should be handled by the delete endpoint now
 
-			// Delete published slug mapping
 			await this.env.SNAPSHOT_SLUG_TO_PARENT_SLUG.delete(publishedSlug)
 
-			// remove published files
 			const publishedPrefixKey = getR2KeyForRoom({
 				slug: `${id}/${publishedSlug}`,
 				isApp: true,
 			})
-
 			const publishedHistory = await listAllObjectKeys(this.env.ROOM_SNAPSHOTS, publishedPrefixKey)
 			if (publishedHistory.length > 0) {
 				await this.env.ROOM_SNAPSHOTS.delete(publishedHistory)
 			}
 
-			// remove edit history
 			const r2Key = getR2KeyForRoom({ slug: id, isApp: true })
 			const editHistory = await listAllObjectKeys(this.env.ROOMS_HISTORY_EPHEMERAL, r2Key)
 			if (editHistory.length > 0) {
 				await this.env.ROOMS_HISTORY_EPHEMERAL.delete(editHistory)
 			}
 
-			// remove main file
 			await this.env.ROOMS.delete(r2Key)
 
-			// finally clear storage so we don't keep the data around
 			this.ctx.storage.deleteAll()
 		})
 	}
@@ -841,6 +797,8 @@ export class TLDrawDurableObject extends DurableObject {
 		await this.persistToDatabase()
 	}
 
+	// ----------------- Admin helpers -----------------
+
 	async __admin__hardDeleteIfLegacy() {
 		if (!this._documentInfo || this.documentInfo.deleted || this.documentInfo.isApp) return false
 		this.setDocumentInfo({
@@ -856,13 +814,11 @@ export class TLDrawDurableObject extends DurableObject {
 		const slug = this.documentInfo.slug
 		const roomKey = getR2KeyForRoom({ slug, isApp: false })
 
-		// remove edit history
 		const editHistory = await listAllObjectKeys(this.env.ROOMS_HISTORY_EPHEMERAL, roomKey)
 		if (editHistory.length > 0) {
 			await this.env.ROOMS_HISTORY_EPHEMERAL.delete(editHistory)
 		}
 
-		// remove main file
 		await this.env.ROOMS.delete(roomKey)
 
 		return true
