
index ce88caa28..0b4f6ce06 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmpugeyru9r_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpgr9om3wg_actual.txt	
@@ -820,79 +820,4 @@ export class TLDrawDurableObject extends DurableObject {
 
 			// remove edit history
 			const r2Key = getR2KeyForRoom({ slug: id, isApp: true })
-			const editHistory = await listAllObjectKeys(this.env.ROOMS_HISTORY_EPHEMERAL, r2Key)
-			if (editHistory.length > 0) {
-				await this.env.ROOMS_HISTORY_EPHEMERAL.delete(editHistory)
-			}
-
-			// remove main file
-			await this.env.ROOMS.delete(r2Key)
-
-			// finally clear storage so we don't keep the data around
-			this.ctx.storage.deleteAll()
-		})
-	}
-
-	/**
-	 * @internal
-	 */
-	async awaitPersist() {
-		if (!this._documentInfo) return
-		await this.persistToDatabase()
-	}
-
-	async __admin__hardDeleteIfLegacy() {
-		if (!this._documentInfo || this.documentInfo.deleted || this.documentInfo.isApp) return false
-		this.setDocumentInfo({
-			version: CURRENT_DOCUMENT_INFO_VERSION,
-			slug: this.documentInfo.slug,
-			isApp: false,
-			deleted: true,
-		})
-		if (this._room) {
-			const room = await this.getRoom()
-			room.close()
-		}
-		const slug = this.documentInfo.slug
-		const roomKey = getR2KeyForRoom({ slug, isApp: false })
-
-		// remove edit history
-		const editHistory = await listAllObjectKeys(this.env.ROOMS_HISTORY_EPHEMERAL, roomKey)
-		if (editHistory.length > 0) {
-			await this.env.ROOMS_HISTORY_EPHEMERAL.delete(editHistory)
-		}
-
-		// remove main file
-		await this.env.ROOMS.delete(roomKey)
-
-		return true
-	}
-
-	async __admin__createLegacyRoom(id: string) {
-		this.setDocumentInfo({
-			version: CURRENT_DOCUMENT_INFO_VERSION,
-			slug: id,
-			isApp: false,
-			deleted: false,
-		})
-		const key = getR2KeyForRoom({ slug: id, isApp: false })
-		await this.r2.rooms.put(
-			key,
-			JSON.stringify(new TLSyncRoom({ schema: createTLSchema() }).getSnapshot())
-		)
-		await this.getRoom()
-	}
-}
-
-async function listAllObjectKeys(bucket: R2Bucket, prefix: string): Promise<string[]> {
-	const keys: string[] = []
-	let cursor: string | undefined
-
-	do {
-		const result = await bucket.list({ prefix, cursor })
-		keys.push(...result.objects.map((o) => o.key))
-		cursor = result.truncated ? result.cursor : undefined
-	} while (cursor)
-
-	return keys
-}
\ No newline at end of file
+			const editHistory = await
\ No newline at end of file
