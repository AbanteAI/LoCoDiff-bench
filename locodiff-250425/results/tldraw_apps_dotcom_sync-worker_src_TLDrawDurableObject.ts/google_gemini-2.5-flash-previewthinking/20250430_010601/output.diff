--- tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual)@@ -74,6 +74,8 @@ 	// A unique identifier for this instance of the Durable Object
 	id: DurableObjectId
 
+	// For TLSyncRoom
+
 	_room: Promise<TLSocketRoom<TLRecord, SessionMeta>> | null = null
 
 	sentry: ReturnType<typeof createSentry> | null = null
@@ -96,6 +98,7 @@ 									name: 'leave',
 									instanceId: args.sessionId,
 									localClientId: args.meta.storeId,
+									userId: args.meta.userId,
 								})
 
 								if (args.numSessionsRemaining > 0) return
@@ -106,6 +109,7 @@ 									name: 'last_out',
 									instanceId: args.sessionId,
 									localClientId: args.meta.storeId,
+									userId: args.meta.userId,
 								})
 								try {
 									await this.persistToDatabase()
@@ -268,14 +272,12 @@ 
 	// Handle a request to the Durable Object.
 	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.state, this.env, req)
-
 		try {
 			return await this.router.fetch(req)
 		} catch (err) {
 			console.error(err)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			sentry?.captureException(err)
+			this.sentry?.captureException(err)
 			return new Response('Something went wrong', {
 				status: 500,
 				statusText: 'Internal Server Error',
@@ -320,15 +322,14 @@ 					if (this._fileRecordCache) {
 						return this._fileRecordCache
 					}
-					const result = await this.db
-						.selectFrom('file')
-						.where('id', '=', this.documentInfo.slug)
-						.selectAll()
-						.executeTakeFirst()
-					if (!result) {
+					const postgres = createPostgresConnectionPool(this.env, 'TLDrawDurableObject')
+					const fileRecord =
+						await postgres`SELECT * FROM public.file WHERE ID = ${this.documentInfo.slug}`
+					this._fileRecordCache = fileRecord[0] as TlaFile
+					await postgres.end()
+					if (!this._fileRecordCache) {
 						throw new Error('File not found')
 					}
-					this._fileRecordCache = result
 					return this._fileRecordCache
 				},
 				{
@@ -436,6 +437,7 @@ 					name: 'room_reopen',
 					instanceId: sessionId,
 					localClientId: storeId,
+					userId: auth?.userId,
 				})
 			}
 			this.logEvent({
@@ -444,6 +446,7 @@ 				name: 'enter',
 				instanceId: sessionId,
 				localClientId: storeId,
+				userId: auth?.userId,
 			})
 			return new Response(null, { status: 101, webSocket: clientWebSocket })
 		} catch (e) {
@@ -497,7 +500,7 @@ 		}
 	}
 
-	async handleFileCreateFromSource() {
+	async handleFileCreateFromSource(): Promise<DBLoadResult> {
 		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
 		const split = this._fileRecordCache.createSource?.split('/')
 		if (!split || split?.length !== 2) {
@@ -619,7 +622,7 @@ 			for (const record of records) {
 				if (record.typeName !== 'asset') continue
 				const asset = record as any
-				const meta = asset.meta
+				const meta = asset.meta ?? (asset.meta = {})
 
 				if (meta?.fileId === slug) continue
 				const src = asset.props.src
