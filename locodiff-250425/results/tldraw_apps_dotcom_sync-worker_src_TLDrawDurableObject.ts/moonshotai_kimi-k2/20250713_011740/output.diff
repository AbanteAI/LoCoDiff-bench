
index ce88caa28..29b02aa34 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmp2xemqapp_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpwa0h6knk_actual.txt	
@@ -3,10 +3,8 @@
 
 import { SupabaseClient } from '@supabase/supabase-js'
 import {
-	APP_ASSET_UPLOAD_ENDPOINT,
 	DB,
 	FILE_PREFIX,
-	LOCAL_FILE_PREFIX,
 	PUBLISH_PREFIX,
 	READ_ONLY_LEGACY_PREFIX,
 	READ_ONLY_PREFIX,
@@ -25,14 +23,7 @@ import {
 	type PersistedRoomSnapshotForSupabase,
 } from '@tldraw/sync-core'
 import { TLDOCUMENT_ID, TLDocument, TLRecord, createTLSchema } from '@tldraw/tlschema'
-import {
-	ExecutionQueue,
-	assert,
-	assertExists,
-	exhaustiveSwitchError,
-	retry,
-	uniqueId,
-} from '@tldraw/utils'
+import { ExecutionQueue, assert, assertExists, exhaustiveSwitchError, retry, uniqueId } from '@tldraw/utils'
 import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { IRequest, Router } from 'itty-router'
@@ -168,11 +159,10 @@ export class TLDrawDurableObject extends DurableObject {
 		readonly rooms: R2Bucket
 		readonly versionCache: R2Bucket
 	}
+	readonly db: Kysely<DB>
 
 	_documentInfo: DocumentInfo | null = null
 
-	db: Kysely<DB>
-
 	constructor(
 		private state: DurableObjectState,
 		override env: Environment
@@ -190,6 +180,7 @@ export class TLDrawDurableObject extends DurableObject {
 			rooms: env.ROOMS,
 			versionCache: env.ROOMS_HISTORY_EPHEMERAL,
 		}
+		this.db = createPostgresConnectionPool(env, 'TLDrawDurableObject')
 
 		state.blockConcurrencyWhile(async () => {
 			const existingDocumentInfo = (await this.storage.get('documentInfo')) as DocumentInfo | null
@@ -199,7 +190,6 @@ export class TLDrawDurableObject extends DurableObject {
 				this._documentInfo = existingDocumentInfo
 			}
 		})
-		this.db = createPostgresConnectionPool(env, 'TLDrawDurableObject')
 	}
 
 	readonly router = Router()
@@ -268,14 +258,12 @@ export class TLDrawDurableObject extends DurableObject {
 
 	// Handle a request to the Durable Object.
 	override async fetch(req: IRequest) {
-		const sentry = createSentry(this.state, this.env, req)
-
 		try {
 			return await this.router.fetch(req)
 		} catch (err) {
 			console.error(err)
 			// eslint-disable-next-line @typescript-eslint/no-deprecated
-			sentry?.captureException(err)
+			this.sentry?.captureException(err)
 			return new Response('Something went wrong', {
 				status: 500,
 				statusText: 'Internal Server Error',
@@ -298,7 +286,6 @@ export class TLDrawDurableObject extends DurableObject {
 				return new Response('Version not found', { status: 400 })
 			}
 			const dataText = await data.text()
-			await this.r2.rooms.put(roomKey, dataText)
 			const room = await this.getRoom()
 
 			const snapshot: RoomSnapshot = JSON.parse(dataText)
@@ -497,53 +484,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	async handleFileCreateFromSource() {
-		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
-		const split = this._fileRecordCache.createSource?.split('/')
-		if (!split || split?.length !== 2) {
-			return { type: 'room_not_found' as const }
-		}
-
-		let data: RoomSnapshot | string | null | undefined = undefined
-		const [prefix, id] = split
-		switch (prefix) {
-			case FILE_PREFIX: {
-				await getRoomDurableObject(this.env, id).awaitPersist()
-				data = await this.r2.rooms
-					.get(getR2KeyForRoom({ slug: id, isApp: true }))
-					.then((r) => r?.text())
-				break
-			}
-			case ROOM_PREFIX:
-				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_WRITE)
-				break
-			case READ_ONLY_PREFIX:
-				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_ONLY)
-				break
-			case READ_ONLY_LEGACY_PREFIX:
-				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_ONLY_LEGACY)
-				break
-			case SNAPSHOT_PREFIX:
-				data = await getLegacyRoomData(this.env, id, 'snapshot')
-				break
-			case PUBLISH_PREFIX:
-				data = await getPublishedRoomSnapshot(this.env, id)
-				break
-			case LOCAL_FILE_PREFIX:
-				// create empty room, the client will populate it
-				data = new TLSyncRoom({ schema: createTLSchema() }).getSnapshot()
-				break
-		}
-
-		if (!data) {
-			return { type: 'room_not_found' as const }
-		}
-		const serialized = typeof data === 'string' ? data : JSON.stringify(data)
-		const snapshot = typeof data === 'string' ? JSON.parse(data) : data
-		await this.r2.rooms.put(this._fileRecordCache.id, serialized)
-		return { type: 'room_found' as const, snapshot }
-	}
-
 	// Load the room's drawing data. First we check the R2 bucket, then we fallback to supabase (legacy).
 	async loadFromDatabase(slug: string): Promise<DBLoadResult> {
 		try {
@@ -636,10 +576,7 @@ export class TLDrawDurableObject extends DurableObject {
 				await this.env.UPLOADS.put(newObjectName, currentAsset.body, {
 					httpMetadata: currentAsset.httpMetadata,
 				})
-				asset.props.src = asset.props.src.replace(objectName, newObjectName)
-				assert(this.env.MULTIPLAYER_SERVER, 'MULTIPLAYER_SERVER must be present')
 				asset.props.src = `${this.env.MULTIPLAYER_SERVER.replace(/^ws/, 'http')}${APP_ASSET_UPLOAD_ENDPOINT}${newObjectName}`
-
 				asset.meta.fileId = slug
 				store.put(asset)
 				assetsToUpdate.push({ objectName: newObjectName, fileId: slug })
@@ -727,6 +664,53 @@ export class TLDrawDurableObject extends DurableObject {
 		await this.getRoom()
 	}
 
+	async handleFileCreateFromSource() {
+		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
+		const split = this._fileRecordCache.createSource?.split('/')
+		if (!split || split?.length !== 2) {
+			return { type: 'room_not_found' as const }
+		}
+
+		let data: RoomSnapshot | string | null | undefined = undefined
+		const [prefix, id] = split
+		switch (prefix) {
+			case FILE_PREFIX: {
+				await getRoomDurableObject(this.env, id).awaitPersist()
+				data = await this.r2.rooms
+					.get(getR2KeyForRoom({ slug: id, isApp: true }))
+					.then((r) => r?.text())
+				break
+			}
+			case ROOM_PREFIX:
+				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_WRITE)
+				break
+			case READ_ONLY_PREFIX:
+				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_ONLY)
+				break
+			case READ_ONLY_LEGACY_PREFIX:
+				data = await getLegacyRoomData(this.env, id, ROOM_OPEN_MODE.READ_ONLY_LEGACY)
+				break
+			case SNAPSHOT_PREFIX:
+				data = await getLegacyRoomData(this.env, id, 'snapshot')
+				break
+			case PUBLISH_PREFIX:
+				data = await getPublishedRoomSnapshot(this.env, id)
+				break
+			case LOCAL_FILE_PREFIX:
+				// create empty room, the client will populate it
+				data = new TLSyncRoom({ schema: createTLSchema() }).getSnapshot()
+				break
+		}
+
+		if (!data) {
+			return { type: 'room_not_found' as const }
+		}
+		const serialized = typeof data === 'string' ? data : JSON.stringify(data)
+		const snapshot = typeof data === 'string' ? JSON.parse(data) : data
+		await this.r2.rooms.put(this._fileRecordCache.id, serialized)
+		return { type: 'room_found' as const, snapshot }
+	}
+
 	async appFileRecordDidUpdate(file: TlaFile) {
 		if (!file) {
 			console.error('file record updated but no file found')
