
index ce88caa28..6608bbc79 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmpeh8lhqjw_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpi5_y16q1_actual.txt	
@@ -3,10 +3,8 @@
 
 import { SupabaseClient } from '@supabase/supabase-js'
 import {
-	APP_ASSET_UPLOAD_ENDPOINT,
 	DB,
 	FILE_PREFIX,
-	LOCAL_FILE_PREFIX,
 	PUBLISH_PREFIX,
 	READ_ONLY_LEGACY_PREFIX,
 	READ_ONLY_PREFIX,
@@ -311,8 +309,9 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
 	_fileRecordCache: TlaFile | null = null
+
+	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
 	async getAppFileRecord(): Promise<TlaFile | null> {
 		try {
 			return await retry(
@@ -529,7 +528,7 @@ export class TLDrawDurableObject extends DurableObject {
 			case PUBLISH_PREFIX:
 				data = await getPublishedRoomSnapshot(this.env, id)
 				break
-			case LOCAL_FILE_PREFIX:
+			case 'local':
 				// create empty room, the client will populate it
 				data = new TLSyncRoom({ schema: createTLSchema() }).getSnapshot()
 				break
@@ -638,7 +637,7 @@ export class TLDrawDurableObject extends DurableObject {
 				})
 				asset.props.src = asset.props.src.replace(objectName, newObjectName)
 				assert(this.env.MULTIPLAYER_SERVER, 'MULTIPLAYER_SERVER must be present')
-				asset.props.src = `${this.env.MULTIPLAYER_SERVER.replace(/^ws/, 'http')}${APP_ASSET_UPLOAD_ENDPOINT}${newObjectName}`
+				asset.props.src = `${this.env.MULTIPLAYER_SERVER.replace(/^ws/, 'http')}/api/app/uploads/${newObjectName}`
 
 				asset.meta.fileId = slug
 				store.put(asset)
