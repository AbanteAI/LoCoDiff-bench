
index ce88caa28..46df07d33 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmp6r_0zuba_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmpx6t3u3qv_actual.txt	
@@ -30,7 +30,6 @@ import {
 	assert,
 	assertExists,
 	exhaustiveSwitchError,
-	retry,
 	uniqueId,
 } from '@tldraw/utils'
 import { createSentry } from '@tldraw/worker-shared'
@@ -594,7 +593,7 @@ export class TLDrawDurableObject extends DurableObject {
 
 			const roomFromSupabase = data[0] as PersistedRoomSnapshotForSupabase
 			return { type: 'room_found', snapshot: roomFromSupabase.drawing }
-		} catch (error) {
+		} catch (error: any) {
 			this.logEvent({ type: 'room', roomId: slug, name: 'failed_load_from_db' })
 
 			console.error('failed to fetch doc', slug, error)
@@ -895,4 +894,17 @@ async function listAllObjectKeys(bucket: R2Bucket, prefix: string): Promise<stri
 	} while (cursor)
 
 	return keys
+}
+
+async function retry<T>(fn: () => Promise<T>, options: { attempts: number; waitDuration: number }) {
+	let lastError: unknown
+	for (let i = 0; i < options.attempts; i++) {
+		try {
+			return await fn()
+		} catch (e) {
+			lastError = e
+			await new Promise((resolve) => setTimeout(resolve, options.waitDuration))
+		}
+	}
+	throw lastError
 }
\ No newline at end of file
