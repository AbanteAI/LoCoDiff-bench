
index ce88caa2..7f659066 100644
--- a/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected):tmp/tmpao85z98t_expected.txt	
+++ b/tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual):tmp/tmp7ggjautn_actual.txt	
@@ -203,6 +203,10 @@ export class TLDrawDurableObject extends DurableObject {
 	}
 
 	readonly router = Router()
+		.all('*', (req) => {
+			const pathname = new URL(req.url).pathname
+			const isApp = pathname.startsWith('/app/')
+		})
 		.get(
 			`/${ROOM_PREFIX}/:roomId`,
 			(req) => this.extractDocumentInfoFromRequest(req, ROOM_OPEN_MODE.READ_WRITE),
@@ -311,36 +315,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
-	_fileRecordCache: TlaFile | null = null
-	async getAppFileRecord(): Promise<TlaFile | null> {
-		try {
-			return await retry(
-				async () => {
-					if (this._fileRecordCache) {
-						return this._fileRecordCache
-					}
-					const result = await this.db
-						.selectFrom('file')
-						.where('id', '=', this.documentInfo.slug)
-						.selectAll()
-						.executeTakeFirst()
-					if (!result) {
-						throw new Error('File not found')
-					}
-					this._fileRecordCache = result
-					return this._fileRecordCache
-				},
-				{
-					attempts: 10,
-					waitDuration: 100,
-				}
-			)
-		} catch (_e) {
-			return null
-		}
-	}
-
 	async onRequest(req: IRequest, openMode: RoomOpenMode) {
 		// extract query params from request, should include instanceId
 		const url = new URL(req.url)
@@ -422,10 +396,7 @@ export class TLDrawDurableObject extends DurableObject {
 			room.handleSocketConnect({
 				sessionId: sessionId,
 				socket: serverWebSocket,
-				meta: {
-					storeId,
-					userId: auth?.userId ? auth.userId : null,
-				},
+				meta: { storeId, userId: auth?.userId ? auth.userId : null },
 				isReadonly:
 					openMode === ROOM_OPEN_MODE.READ_ONLY || openMode === ROOM_OPEN_MODE.READ_ONLY_LEGACY,
 			})
@@ -497,6 +468,36 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
+	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
+	_fileRecordCache: TlaFile | null = null
+	async getAppFileRecord(): Promise<TlaFile | null> {
+		try {
+			return await retry(
+				async () => {
+					if (this._fileRecordCache) {
+						return this._fileRecordCache
+					}
+					const result = await this.db
+						.selectFrom('file')
+						.where('id', '=', this.documentInfo.slug)
+						.selectAll()
+						.executeTakeFirst()
+					if (!result) {
+						throw new Error('File not found')
+					}
+					this._fileRecordCache = result
+					return this._fileRecordCache
+				},
+				{
+					attempts: 10,
+					waitDuration: 100,
+				}
+			)
+		} catch (_e) {
+			return null
+		}
+	}
+
 	async handleFileCreateFromSource() {
 		assert(this._fileRecordCache, 'we need to have a file record to create a file from source')
 		const split = this._fileRecordCache.createSource?.split('/')
@@ -602,10 +603,6 @@ export class TLDrawDurableObject extends DurableObject {
 		}
 	}
 
-	_lastPersistedClock: number | null = null
-
-	executionQueue = new ExecutionQueue()
-
 	// We use this to make sure that all of the assets in a tldraw app file are associated with that file.
 	// This is needed for a few cases like duplicating a file, copy pasting images between files, slurping legacy files.
 	async maybeAssociateFileAssets() {
@@ -657,6 +654,9 @@ export class TLDrawDurableObject extends DurableObject {
 			.execute()
 	}
 
+	_lastPersistedClock: number | null = null
+	executionQueue = new ExecutionQueue()
+
 	// Save the room to r2
 	async persistToDatabase() {
 		try {
