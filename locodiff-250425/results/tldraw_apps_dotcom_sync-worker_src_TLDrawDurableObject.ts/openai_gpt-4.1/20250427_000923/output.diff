--- tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_sync-worker_src_TLDrawDurableObject.ts_extracted.txt (actual)@@ -18,6 +18,7 @@ } from '@tldraw/dotcom-shared'
 import {
 	RoomSnapshot,
+	TLCloseEventCode,
 	TLSocketRoom,
 	TLSyncErrorCloseEventCode,
 	TLSyncErrorCloseEventReason,
@@ -36,12 +37,10 @@ import { createSentry } from '@tldraw/worker-shared'
 import { DurableObject } from 'cloudflare:workers'
 import { IRequest, Router } from 'itty-router'
-import { Kysely } from 'kysely'
 import { AlarmScheduler } from './AlarmScheduler'
 import { PERSIST_INTERVAL_MS } from './config'
 import { createPostgresConnectionPool } from './postgres'
 import { getR2KeyForRoom } from './r2'
-import { getPublishedRoomSnapshot } from './routes/tla/getPublishedFile'
 import { Analytics, DBLoadResult, Environment, TLServerEvent } from './types'
 import { EventData, writeDataPoint } from './utils/analytics'
 import { createSupabaseClient } from './utils/createSupabaseClient'
@@ -171,7 +170,7 @@ 
 	_documentInfo: DocumentInfo | null = null
 
-	db: Kysely<DB>
+	db: import('kysely').Kysely<DB>
 
 	constructor(
 		private state: DurableObjectState,
@@ -311,8 +310,10 @@ 		}
 	}
 
+	_ownerId: string | null = null
+
+	_fileRecordCache: TlaFile | null = null
 	// this might return null if the file doesn't exist yet in the backend, or if it was deleted
-	_fileRecordCache: TlaFile | null = null
 	async getAppFileRecord(): Promise<TlaFile | null> {
 		try {
 			return await retry(
@@ -527,7 +528,7 @@ 				data = await getLegacyRoomData(this.env, id, 'snapshot')
 				break
 			case PUBLISH_PREFIX:
-				data = await getPublishedRoomSnapshot(this.env, id)
+				data = await import('./routes/tla/getPublishedFile').then((mod) => mod.getPublishedRoomSnapshot(this.env, id))
 				break
 			case LOCAL_FILE_PREFIX:
 				// create empty room, the client will populate it
