
index 6902880dc..f62dc6741 100644
--- a/qdrant_lib_segment_benches_vector_search.rs_expectedoutput.txt (expected):tmp/tmpx7kqeyv__expected.txt	
+++ b/qdrant_lib_segment_benches_vector_search.rs_extracted.txt (actual):tmp/tmp10tsx2p6_actual.txt	
@@ -6,17 +6,15 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use criterion::{Criterion, criterion_group, criterion_main};
-use rand::Rng;
 use rand::distr::StandardUniform;
+use rand::Rng;
 use segment::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
 use segment::data_types::vectors::{DenseVector, VectorInternal, VectorRef};
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::id_tracker::IdTrackerSS;
 use segment::types::Distance;
 use segment::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
-use segment::vector_storage::{
-    DEFAULT_STOPPED, VectorStorage, VectorStorageEnum, new_raw_scorer_for_test,
-};
+use segment::vector_storage::{DEFAULT_STOPPED, VectorStorage, VectorStorageEnum, new_raw_scorer_for_test};
 use tempfile::Builder;
 
 const NUM_VECTORS: usize = 100000;
@@ -40,13 +38,11 @@ fn init_vector_storage(
         open_simple_dense_vector_storage(db, DB_VECTOR_CF, dim, dist, &AtomicBool::new(false))
             .unwrap();
 
-    let hw_counter = HardwareCounterCell::new();
-
     {
         for i in 0..num {
             let vector: VectorInternal = random_vector(dim).into();
             storage
-                .insert_vector(i as PointOffsetType, VectorRef::from(&vector), &hw_counter)
+                .insert_vector(i as PointOffsetType, VectorRef::from(&vector))
                 .unwrap();
         }
     }
