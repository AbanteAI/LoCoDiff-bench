--- qdrant_lib_segment_benches_vector_search.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_benches_vector_search.rs_extracted.txt (actual)@@ -1,26 +1,26 @@ use std::path::Path;
+use std::sync::atomic::AtomicBool;
 use std::sync::Arc;
-use std::sync::atomic::AtomicBool;
 
 use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
-use criterion::{Criterion, criterion_group, criterion_main};
+use criterion::{criterion_group, criterion_main, Criterion};
+use rand::distr::StandardUniform;
 use rand::Rng;
-use rand::distr::StandardUniform;
-use segment::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+use segment::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
 use segment::data_types::vectors::{DenseVector, VectorInternal, VectorRef};
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::id_tracker::IdTrackerSS;
 use segment::types::Distance;
 use segment::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use segment::vector_storage::{
-    DEFAULT_STOPPED, VectorStorage, VectorStorageEnum, new_raw_scorer_for_test,
+    new_raw_scorer_for_test, VectorStorage, VectorStorageEnum, DEFAULT_STOPPED,
 };
 use tempfile::Builder;
 
-const NUM_VECTORS: usize = 100000;
-const DIM: usize = 1024; // Larger dimensionality - greater the SIMD advantage
+const NUM_VECTORS: usize = 100_000;
+const DIM: usize = 1_024; // Larger dimensionality â€“ greater the SIMD advantage
 
 fn random_vector(size: usize) -> DenseVector {
     let rng = rand::rng();
@@ -42,13 +42,11 @@ 
     let hw_counter = HardwareCounterCell::new();
 
-    {
-        for i in 0..num {
-            let vector: VectorInternal = random_vector(dim).into();
-            storage
-                .insert_vector(i as PointOffsetType, VectorRef::from(&vector), &hw_counter)
-                .unwrap();
-        }
+    for i in 0..num {
+        let vector: VectorInternal = random_vector(dim).into();
+        storage
+            .insert_vector(i as PointOffsetType, VectorRef::from(&vector), &hw_counter)
+            .unwrap();
     }
 
     (storage, id_tracker)
@@ -98,7 +96,7 @@     )
     .unwrap();
 
-    let mut total_score = 0.;
+    let mut total_score = 0.0;
     group.bench_function("storage vector search", |b| {
         b.iter(|| {
             let random_id = rand::rng().random_range(0..NUM_VECTORS) as PointOffsetType;
