--- qdrant_lib_segment_benches_vector_search.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_benches_vector_search.rs_extracted.txt (actual)@@ -14,9 +14,7 @@ use segment::id_tracker::IdTrackerSS;
 use segment::types::Distance;
 use segment::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
-use segment::vector_storage::{
-    DEFAULT_STOPPED, VectorStorage, VectorStorageEnum, new_raw_scorer_for_test,
-};
+use segment::vector_storage::{DEFAULT_STOPPED, VectorStorage, VectorStorageEnum, new_raw_scorer_for_test};
 use tempfile::Builder;
 
 const NUM_VECTORS: usize = 100000;
@@ -24,7 +22,6 @@ 
 fn random_vector(size: usize) -> DenseVector {
     let rng = rand::rng();
-
     rng.sample_iter(StandardUniform).take(size).collect()
 }
 
@@ -39,9 +36,7 @@     let mut storage =
         open_simple_dense_vector_storage(db, DB_VECTOR_CF, dim, dist, &AtomicBool::new(false))
             .unwrap();
-
     let hw_counter = HardwareCounterCell::new();
-
     {
         for i in 0..num {
             let vector: VectorInternal = random_vector(dim).into();
@@ -50,7 +45,6 @@                 .unwrap();
         }
     }
-
     (storage, id_tracker)
 }
 
@@ -90,7 +84,6 @@ 
     let vector = random_vector(DIM);
     let vector = vector.as_slice().into();
-
     let scorer = new_raw_scorer_for_test(
         vector,
         &storage,
