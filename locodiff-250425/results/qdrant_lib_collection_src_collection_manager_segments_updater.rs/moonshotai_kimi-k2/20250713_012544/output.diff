
index 3c0816e92..b977220f7 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmpwej8kkod_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmp14mwggof_actual.txt	
@@ -102,8 +102,6 @@ pub(crate) fn update_vectors(
     Ok(total_updated_points)
 }
 
-const VECTOR_OP_BATCH_SIZE: usize = 512;
-
 /// Delete the given named vectors for the given points, keeping other vectors intact.
 pub(crate) fn delete_vectors(
     segments: &SegmentHolder,
@@ -146,6 +144,7 @@ pub(crate) fn delete_vectors_by_filter(
 
 /// Batch size when modifying payload.
 const PAYLOAD_OP_BATCH_SIZE: usize = 512;
+const VECTOR_OP_BATCH_SIZE: usize = 512;
 
 pub(crate) fn overwrite_payload(
     segments: &SegmentHolder,
@@ -345,8 +344,12 @@ pub(crate) fn create_field_index(
 ) -> CollectionResult<usize> {
     segments
         .apply_segments(|write_segment| {
-            let Some((schema, index)) =
-                write_segment.build_field_index(op_num, field_name, field_schema, hw_counter)?
+            let Some((schema, index)) = write_segment.build_field_index(
+                op_num,
+                field_name,
+                field_schema,
+                hw_counter,
+            )?
             else {
                 return Ok(false);
             };
@@ -701,59 +704,4 @@ pub(crate) fn process_field_index_operation(
             delete_field_index(&segments.read(), op_num, field_name)
         }
     }
-}
-
-/// Max amount of points to delete in a batched deletion iteration.
-const DELETION_BATCH_SIZE: usize = 512;
-
-/// Deletes points from all segments matching the given filter
-pub(crate) fn delete_points_by_filter(
-    segments: &SegmentHolder,
-    op_num: SeqNumberType,
-    filter: &Filter,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    let mut total_deleted = 0;
-    // we donâ€™t want to cancel this filtered read
-    let is_stopped = AtomicBool::new(false);
-    let mut points_to_delete: AHashMap<_, _> = segments
-        .iter()
-        .map(|(segment_id, segment)| {
-            (
-                *segment_id,
-                segment.get().read().read_filtered(
-                    None,
-                    None,
-                    Some(filter),
-                    &is_stopped,
-                    hw_counter,
-                ),
-            )
-        })
-        .collect();
-
-    segments.apply_segments_batched(|s, segment_id| {
-        let Some(curr_points) = points_to_delete.get_mut(&segment_id) else {
-            return Ok(false);
-        };
-        if curr_points.is_empty() {
-            return Ok(false);
-        }
-
-        let mut deleted_in_batch = 0;
-        while let Some(point_id) = curr_points.pop() {
-            if s.delete_point(op_num, point_id, hw_counter)? {
-                total_deleted += 1;
-                deleted_in_batch += 1;
-            }
-
-            if deleted_in_batch >= DELETION_BATCH_SIZE {
-                break;
-            }
-        }
-
-        Ok(true)
-    })?;
-
-    Ok(total_deleted)
 }
\ No newline at end of file
