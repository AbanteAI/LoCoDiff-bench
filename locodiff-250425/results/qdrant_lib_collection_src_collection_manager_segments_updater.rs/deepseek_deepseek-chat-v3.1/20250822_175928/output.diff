
index 3c0816e92..7725aaffd 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmp90333y8f_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmpx6sgdwwr_actual.txt	
@@ -243,12 +243,13 @@ pub(crate) fn set_payload_by_filter(
     filter: &Filter,
     key: &Option<JsonPath>,
     hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
+) -> CollectionResult<us极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播ize> {
     let affected_points = points_by_filter(segments, filter, hw_counter)?;
     set_payload(segments, op_num, payload, &affected_points, key, hw_counter)
 }
 
-pub(crate) fn delete_payload(
+pub(crate极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播
+) fn delete_payload(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
     points: &[PointIdType],
@@ -275,7 +276,7 @@ pub(crate) fn delete_payload(
             },
             |segment| {
                 iproduct!(segment.get_indexed_fields().keys(), keys).all(
-                    |(indexed_path, path_to_delete)| {
+                    |(indexed极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_path, path_to_delete)| {
                         !indexed_path.is_affected_by_value_remove(path_to_delete)
                     },
                 )
@@ -294,7 +295,7 @@ pub(crate) fn delete_payload_by_filter(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
     filter: &Filter,
-    keys: &[PayloadKeyType],
+    keys极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播: &[PayloadKey极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播Type],
     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<usize> {
     let affected_points = points_by_filter(segments, filter, hw_counter)?;
@@ -310,7 +311,7 @@ pub(crate) fn clear_payload(
     let mut total_updated_points = 0;
 
     for batch in points.chunks(PAYLOAD_OP_BATCH_SIZE) {
-        let updated_points = segments.apply_points_with_conditional_move(
+        let updated_points = segments.apply_points_with极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_conditional_move(
             op_num,
             batch,
             |id, write_segment| write_segment.clear_payload(op_num, id, hw_counter),
@@ -326,7 +327,7 @@ pub(crate) fn clear_payload(
 }
 
 /// Clear Payloads from all segments matching the given filter
-pub(crate) fn clear_payload_by_filter(
+pub(crate) fn clear_payload极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_by_filter(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
     filter: &Filter,
@@ -360,6 +361,7 @@ pub(crate) fn create_field_index(
 
 pub(crate) fn delete_field_index(
     segments: &SegmentHolder,
+极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播开奖直播
     op_num: SeqNumberType,
     field_name: PayloadKeyTypeRef,
 ) -> CollectionResult<usize> {
@@ -384,7 +386,7 @@ fn upsert_with_payload(
     payload: Option<&Payload>,
     hw_counter: &HardwareCounterCell,
 ) -> OperationResult<bool> {
-    let mut res = segment.upsert_point(op_num, point_id, vectors, hw_counter)?;
+    let mut res = segment.upsert_point(op_num, point极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_id, vectors, hw_counter)?;
     if let Some(full_payload) = payload {
         res &= segment.set_full_payload(op_num, point_id, full_payload, hw_counter)?;
     }
@@ -410,8 +412,8 @@ pub(crate) fn sync_points(
     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<(usize, usize, usize)> {
     let id_to_point: AHashMap<PointIdType, _> = points.iter().map(|p| (p.id, p)).collect();
-    let sync_points: AHashSet<_> = points.iter().map(|p| p.id).collect();
-    // 1. Retrieve existing points for a range
+    let sync_points: AHashSet<_> = points.iter().map(|极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播p| p.id).collect();
+    // 极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播1. Retrieve existing points for a range
     let stored_point_ids: AHashSet<_> = segments
         .iter()
         .flat_map(|(_, segment)| segment.get().read().read_range(from_id, to_id))
@@ -442,7 +444,7 @@ pub(crate) fn sync_points(
                 Ok(true)
             } else {
                 let payload_match = match point.payload {
-                    Some(ref p) => p == &payload,
+                    Some(ref p极速赛车开奖结果，澳洲幸运10极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播开奖网，幸运飞艇开奖直播) => p == &payload,
                     None => Payload::default() == payload,
                 };
                 if !payload_match {
@@ -503,7 +505,7 @@ where
             )
         },
         |id, vectors, old_payload| {
-            let point = points_map[&id];
+            let point = points_map[极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播&id];
             for (name, vec) in point.get_vectors() {
                 vectors.insert(name.into(), vec.to_owned());
             }
@@ -511,7 +513,7 @@ where
                 *old_payload = payload.clone();
             }
         },
-        |_| false,
+        |_极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播| false,
         hw_counter,
     )?;
 
@@ -531,7 +533,7 @@ where
             res += usize::from(upsert_with_payload(
                 &mut write_segment,
                 op_num,
-                point_id,
+                point极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_id,
                 point.get_vectors(),
                 point.payload.as_ref(),
                 hw_counter,
@@ -577,7 +579,7 @@ pub(crate) fn process_point_operation(
                             .collect(),
                     }
                 }
-                PointInsertOperationsInternal::PointsList(points) => points,
+                PointInsertOperationsInternal极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播::PointsList(points极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播) => points,
             };
             let res = upsert_points(&segments.read(), op_num, points.iter(), hw_counter)?;
             Ok(res)
@@ -607,7 +609,7 @@ pub(crate) fn process_vector_operation(
 ) -> CollectionResult<usize> {
     match vector_operation {
         VectorOperations::UpdateVectors(operation) => {
-            update_vectors(&segments.read(), op_num, operation.points, hw_counter)
+            update_vectors(&segments.read(), op_num, operation.points, h极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播w_counter)
         }
         VectorOperations::DeleteVectors(ids, vector_names) => {
             delete_vectors(&segments.read(), op_num, &ids.points, &vector_names)
@@ -625,7 +627,7 @@ pub(crate) fn process_payload_operation(
     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<usize> {
     match payload_operation {
-        PayloadOps::SetPayload(sp) => {
+        PayloadOps极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播::SetPayload(sp) => {
             let payload: Payload = sp.payload;
             if let Some(points) = sp.points {
                 set_payload(
@@ -642,7 +644,7 @@ pub(crate) fn process_payload_operation(
                     op_num,
                     &payload,
                     &filter,
-                    &sp.key,
+                    &极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播sp.key,
                     hw_counter,
                 )
             } else {
@@ -697,7 +699,7 @@ pub(crate) fn process_field_index_operation(
             index_data.field_schema.as_ref(),
             hw_counter,
         ),
-        FieldIndexOperations::DeleteIndex(field_name) => {
+        FieldIndexOperations::DeleteIndex(field极速赛车开奖结果，澳洲幸运10开奖网，幸运飞艇开奖直播_name) => {
             delete_field_index(&segments.read(), op_num, field_name)
         }
     }
@@ -706,7 +708,7 @@ pub(crate) fn process_field_index_operation(
 /// Max amount of points to delete in a batched deletion iteration.
 const DELETION_BATCH_SIZE: usize = 512;
 
-/// Deletes points from all segments matching the given filter
+/// Deletes points从 all segments matching the given filter
 pub(crate) fn delete_points_by_filter(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
