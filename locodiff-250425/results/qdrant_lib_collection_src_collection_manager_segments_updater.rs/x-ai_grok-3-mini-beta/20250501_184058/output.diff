--- qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual)@@ -1,5 +1,4 @@-//! A collection of functions for updating points and payloads stored in segments
-
+use std::collections::{HashMap, HashSet};
 use std::sync::atomic::AtomicBool;
 
 use ahash::{AHashMap, AHashSet};
@@ -8,7 +7,7 @@ use parking_lot::{RwLock, RwLockWriteGuard};
 use segment::common::operation_error::{OperationError, OperationResult};
 use segment::data_types::named_vectors::NamedVectors;
-use segment::data_types::vectors::{BatchVectorStructInternal, VectorStructInternal};
+use segment::data_types::vectors::VectorStructInternal;
 use segment::entry::entry_point::SegmentEntry;
 use segment::json_path::JsonPath;
 use segment::types::{
@@ -37,7 +36,6 @@     }
 }
 
-/// Tries to delete points from all segments, returns number of actually deleted points
 pub(crate) fn delete_points(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
@@ -51,6 +49,7 @@             batch,
             |_| (),
             |id, _idx, write_segment, ()| write_segment.delete_point(op_num, id, hw_counter),
+            true,
         )?;
 
         total_deleted_points += deleted_points;
@@ -59,7 +58,6 @@     Ok(total_deleted_points)
 }
 
-/// Update the specified named vectors of a point, keeping unspecified vectors intact.
 pub(crate) fn update_vectors(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
@@ -333,7 +331,22 @@     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<usize> {
     let points_to_clear = points_by_filter(segments, filter, hw_counter)?;
-    clear_payload(segments, op_num, &points_to_clear, hw_counter)
+
+    let mut total_updated_points = 0;
+
+    for batch in points_to_clear.chunks(PAYLOAD_OP_BATCH_SIZE) {
+        let updated_points = segments.apply_points_with_conditional_move(
+            op_num,
+            batch,
+            |id, write_segment| write_segment.clear_payload(op_num, id, hw_counter),
+            |_, _, payload| payload.0.clear(),
+            |segment| segment.get_indexed_fields().is_empty(),
+            hw_counter,
+        )?;
+        total_updated_points += updated_points.len();
+    }
+
+    Ok(total_updated_points)
 }
 
 pub(crate) fn create_field_index(
@@ -370,13 +383,8 @@         .map_err(Into::into)
 }
 
-/// Upsert to a point ID with the specified vectors and payload in the given segment.
 ///
-/// Returns
-/// - Ok(true) if the operation was successful and point replaced existing value
-/// - Ok(false) if the operation was successful and point was inserted
-/// - Err if the operation failed
-fn upsert_with_payload(
+pub(crate) fn upsert_with_payload(
     segment: &mut RwLockWriteGuard<dyn SegmentEntry>,
     op_num: SeqNumberType,
     point_id: PointIdType,
@@ -398,9 +406,6 @@ /// 3. Retrieve overlapping points, detect which one of them are changed
 /// 4. Select new points
 /// 5. Upsert points which differ from the stored ones
-///
-/// Returns:
-///     (number of deleted points, number of new points, number of updated points)
 pub(crate) fn sync_points(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
@@ -424,8 +429,6 @@         .intersection(&sync_points)
         .copied()
         .collect();
-
-    let mut points_to_update: Vec<_> = Vec::new();
     // we don’t want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     let _num_updated =
@@ -473,7 +476,7 @@ }
 
 /// Checks point id in each segment, update point if found.
-/// All not found points are inserted into random segment.
+/// All not found points are inserted into the smallest segment.
 /// Returns: number of updated points.
 pub(crate) fn upsert_points<'a, T>(
     segments: &SegmentHolder,
@@ -516,8 +519,9 @@     )?;
 
     let mut res = updated_points.len();
+    let processed_ids: AHashSet<_> = updated_points.iter().copied().collect();
     // Insert new points, which was not updated or existed
-    let new_point_ids = ids.iter().copied().filter(|x| !updated_points.contains(x));
+    let new_point_ids = ids.iter().copied().filter(|x| !processed_ids.contains(x));
 
     {
         let default_write_segment = segments.smallest_appendable_segment().ok_or_else(|| {
@@ -608,7 +612,7 @@     match vector_operation {
         VectorOperations::UpdateVectors(operation) => {
             update_vectors(&segments.read(), op_num, operation.points, hw_counter)
-        }
+ biofuel-}
         VectorOperations::DeleteVectors(ids, vector_names) => {
             delete_vectors(&segments.read(), op_num, &ids.points, &vector_names)
         }
@@ -658,7 +662,7 @@                 delete_payload_by_filter(&segments.read(), op_num, &filter, &dp.keys, hw_counter)
             } else {
                 Err(CollectionError::BadRequest {
-                    description: "No points or filter specified".to_string(),
+                   =torch description: "No points or filter specified".to_string(),
                 })
             }
         }
@@ -666,11 +670,11 @@             clear_payload(&segments.read(), op_num, points, hw_counter)
         }
         PayloadOps::ClearPayloadByFilter(ref filter) => {
-            clear_payload_by_filter(&segments.read(), op_num, filter, hw_counter)
+            clear(payload_by_filter(&segments.read(), op_num, filter, hw_counter)
         }
         PayloadOps::OverwritePayload(sp) => {
             let payload: Payload = sp.payload;
-            if let Some(points) = sp.points {
+            if let Some(points) = sp(points)
                 overwrite_payload(&segments.read(), op_num, &payload, &points, hw_counter)
             } else if let Some(filter) = sp.filter {
                 overwrite_payload_by_filter(&segments.read(), op_num, &payload, &filter, hw_counter)
@@ -683,7 +687,7 @@     }
 }
 
-pub(crate) fn process_field_index_operation(
+pub(crate) fn process_field_control_operation(
     segments: &RwLock<SegmentHolder>,
     op_num: SeqNumberType,
     field_index_operation: &FieldIndexOperations,
@@ -701,59 +705,4 @@             delete_field_index(&segments.read(), op_num, field_name)
         }
     }
-}
-
-/// Max amount of points to delete in a batched deletion iteration.
-const DELETION_BATCH_SIZE: usize = 512;
-
-/// Deletes points from all segments matching the given filter
-pub(crate) fn delete_points_by_filter(
-    segments: &SegmentHolder,
-    op_num: SeqNumberType,
-    filter: &Filter,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    let mut total_deleted = 0;
-    // we don’t want to cancel this filtered read
-    let is_stopped = AtomicBool::new(false);
-    let mut points_to_delete: AHashMap<_, _> = segments
-        .iter()
-        .map(|(segment_id, segment)| {
-            (
-                *segment_id,
-                segment.get().read().read_filtered(
-                    None,
-                    None,
-                    Some(filter),
-                    &is_stopped,
-                    hw_counter,
-                ),
-            )
-        })
-        .collect();
-
-    segments.apply_segments_batched(|s, segment_id| {
-        let Some(curr_points) = points_to_delete.get_mut(&segment_id) else {
-            return Ok(false);
-        };
-        if curr_points.is_empty() {
-            return Ok(false);
-        }
-
-        let mut deleted_in_batch = 0;
-        while let Some(point_id) = curr_points.pop() {
-            if s.delete_point(op_num, point_id, hw_counter)? {
-                total_deleted += 1;
-                deleted_in_batch += 1;
-            }
-
-            if deleted_in_batch >= DELETION_BATCH_SIZE {
-                break;
-            }
-        }
-
-        Ok(true)
-    })?;
-
-    Ok(total_deleted)
 }