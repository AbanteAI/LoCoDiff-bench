
index 3c0816e9..ded88193 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmpc3kfhz89_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmpwvujkj4u_actual.txt	
@@ -1,5 +1,6 @@
 //! A collection of functions for updating points and payloads stored in segments
 
+use std::collections::{HashMap, HashSet};
 use std::sync::atomic::AtomicBool;
 
 use ahash::{AHashMap, AHashSet};
@@ -31,13 +32,14 @@ pub(crate) fn check_unprocessed_points(
 ) -> CollectionResult<usize> {
     let first_missed_point = points.iter().copied().find(|p| !processed.contains(p));
 
+    // ToDo: check pre-existing points
+
     match first_missed_point {
         None => Ok(processed.len()),
         Some(missed_point_id) => Err(CollectionError::PointNotFound { missed_point_id }),
     }
 }
 
-/// Tries to delete points from all segments, returns number of actually deleted points
 pub(crate) fn delete_points(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
@@ -51,6 +53,8 @@ pub(crate) fn delete_points(
             batch,
             |_| (),
             |id, _idx, write_segment, ()| write_segment.delete_point(op_num, id, hw_counter),
+            // Apply point delete to all point versions
+            true,
         )?;
 
         total_deleted_points += deleted_points;
@@ -609,9 +613,12 @@ pub(crate) fn process_vector_operation(
         VectorOperations::UpdateVectors(operation) => {
             update_vectors(&segments.read(), op_num, operation.points, hw_counter)
         }
-        VectorOperations::DeleteVectors(ids, vector_names) => {
-            delete_vectors(&segments.read(), op_num, &ids.points, &vector_names)
-        }
+        VectorOperations::DeleteVectors(ids, vector_names) => delete_vectors(
+            &segments.read(),
+            op_num,
+            &ids.points,
+            &vector_names,
+        ),
         VectorOperations::DeleteVectorsByFilter(filter, vector_names) => {
             delete_vectors_by_filter(&segments.read(), op_num, &filter, &vector_names, hw_counter)
         }
