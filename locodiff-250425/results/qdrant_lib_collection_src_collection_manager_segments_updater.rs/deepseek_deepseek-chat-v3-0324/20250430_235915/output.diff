
index 3c0816e9..3b9786fa 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmpxo22xn7k_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmph2j64mq5_actual.txt	
@@ -226,7 +226,7 @@ fn points_by_filter(
     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<Vec<PointIdType>> {
     let mut affected_points: Vec<PointIdType> = Vec::new();
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     segments.for_each_segment(|s| {
         let points = s.read_filtered(None, None, Some(filter), &is_stopped, hw_counter);
@@ -243,7 +243,7 @@ pub(crate) fn set_payload_by_filter(
     filter: &Filter,
     key: &Option<JsonPath>,
     hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
+) => CollectionResult<usize> {
     let affected_points = points_by_filter(segments, filter, hw_counter)?;
     set_payload(segments, op_num, payload, &affected_points, key, hw_counter)
 }
@@ -254,7 +254,7 @@ pub(crate) fn delete_payload(
     points: &[PointIdType],
     keys: &[PayloadKeyType],
     hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
+) => CollectionResult<usize> {
     let mut total_deleted_points = 0;
 
     for batch in points.chunks(PAYLOAD_OP_BATCH_SIZE) {
@@ -296,7 +296,7 @@ pub(crate) fn delete_payload_by_filter(
     filter: &Filter,
     keys: &[PayloadKeyType],
     hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
+) => CollectionResult<usize> {
     let affected_points = points_by_filter(segments, filter, hw_counter)?;
     delete_payload(segments, op_num, &affected_points, keys, hw_counter)
 }
@@ -408,352 +408,4 @@ pub(crate) fn sync_points(
     to_id: Option<PointIdType>,
     points: &[PointStructPersisted],
     hw_counter: &HardwareCounterCell,
-) -> CollectionResult<(usize, usize, usize)> {
-    let id_to_point: AHashMap<PointIdType, _> = points.iter().map(|p| (p.id, p)).collect();
-    let sync_points: AHashSet<_> = points.iter().map(|p| p.id).collect();
-    // 1. Retrieve existing points for a range
-    let stored_point_ids: AHashSet<_> = segments
-        .iter()
-        .flat_map(|(_, segment)| segment.get().read().read_range(from_id, to_id))
-        .collect();
-    // 2. Remove points, which are not present in the sync operation
-    let points_to_remove: Vec<_> = stored_point_ids.difference(&sync_points).copied().collect();
-    let deleted = delete_points(segments, op_num, points_to_remove.as_slice(), hw_counter)?;
-    // 3. Retrieve overlapping points, detect which one of them are changed
-    let existing_point_ids: Vec<_> = stored_point_ids
-        .intersection(&sync_points)
-        .copied()
-        .collect();
-
-    let mut points_to_update: Vec<_> = Vec::new();
-    // we don’t want to cancel this filtered read
-    let is_stopped = AtomicBool::new(false);
-    let _num_updated =
-        segments.read_points(existing_point_ids.as_slice(), &is_stopped, |id, segment| {
-            let all_vectors = match segment.all_vectors(id) {
-                Ok(v) => v,
-                Err(OperationError::InconsistentStorage { .. }) => NamedVectors::default(),
-                Err(e) => return Err(e),
-            };
-            let payload = segment.payload(id, hw_counter)?;
-            let point = id_to_point.get(&id).unwrap();
-            if point.get_vectors() != all_vectors {
-                points_to_update.push(*point);
-                Ok(true)
-            } else {
-                let payload_match = match point.payload {
-                    Some(ref p) => p == &payload,
-                    None => Payload::default() == payload,
-                };
-                if !payload_match {
-                    points_to_update.push(*point);
-                    Ok(true)
-                } else {
-                    Ok(false)
-                }
-            }
-        })?;
-
-    // 4. Select new points
-    let num_updated = points_to_update.len();
-    let mut num_new = 0;
-    sync_points.difference(&stored_point_ids).for_each(|id| {
-        num_new += 1;
-        points_to_update.push(*id_to_point.get(id).unwrap());
-    });
-
-    // 5. Upsert points which differ from the stored ones
-    let num_replaced = upsert_points(segments, op_num, points_to_update, hw_counter)?;
-    debug_assert!(
-        num_replaced <= num_updated,
-        "number of replaced points cannot be greater than points to update ({num_replaced} <= {num_updated})",
-    );
-
-    Ok((deleted, num_new, num_updated))
-}
-
-/// Checks point id in each segment, update point if found.
-/// All not found points are inserted into random segment.
-/// Returns: number of updated points.
-pub(crate) fn upsert_points<'a, T>(
-    segments: &SegmentHolder,
-    op_num: SeqNumberType,
-    points: T,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize>
-where
-    T: IntoIterator<Item = &'a PointStructPersisted>,
-{
-    let points_map: AHashMap<PointIdType, _> = points.into_iter().map(|p| (p.id, p)).collect();
-    let ids: Vec<PointIdType> = points_map.keys().copied().collect();
-
-    // Update points in writable segments
-    let updated_points = segments.apply_points_with_conditional_move(
-        op_num,
-        &ids,
-        |id, write_segment| {
-            let point = points_map[&id];
-            upsert_with_payload(
-                write_segment,
-                op_num,
-                id,
-                point.get_vectors(),
-                point.payload.as_ref(),
-                hw_counter,
-            )
-        },
-        |id, vectors, old_payload| {
-            let point = points_map[&id];
-            for (name, vec) in point.get_vectors() {
-                vectors.insert(name.into(), vec.to_owned());
-            }
-            if let Some(payload) = &point.payload {
-                *old_payload = payload.clone();
-            }
-        },
-        |_| false,
-        hw_counter,
-    )?;
-
-    let mut res = updated_points.len();
-    // Insert new points, which was not updated or existed
-    let new_point_ids = ids.iter().copied().filter(|x| !updated_points.contains(x));
-
-    {
-        let default_write_segment = segments.smallest_appendable_segment().ok_or_else(|| {
-            CollectionError::service_error("No appendable segments exists, expected at least one")
-        })?;
-
-        let segment_arc = default_write_segment.get();
-        let mut write_segment = segment_arc.write();
-        for point_id in new_point_ids {
-            let point = points_map[&point_id];
-            res += usize::from(upsert_with_payload(
-                &mut write_segment,
-                op_num,
-                point_id,
-                point.get_vectors(),
-                point.payload.as_ref(),
-                hw_counter,
-            )?);
-        }
-        RwLockWriteGuard::unlock_fair(write_segment);
-    };
-
-    Ok(res)
-}
-
-pub(crate) fn process_point_operation(
-    segments: &RwLock<SegmentHolder>,
-    op_num: SeqNumberType,
-    point_operation: PointOperations,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    match point_operation {
-        PointOperations::DeletePoints { ids, .. } => {
-            delete_points(&segments.read(), op_num, &ids, hw_counter)
-        }
-        PointOperations::UpsertPoints(operation) => {
-            let points: Vec<_> = match operation {
-                PointInsertOperationsInternal::PointsBatch(batch) => {
-                    let batch_vectors = BatchVectorStructInternal::from(batch.vectors);
-                    let all_vectors = batch_vectors.into_all_vectors(batch.ids.len());
-                    let vectors_iter = batch.ids.into_iter().zip(all_vectors);
-                    match batch.payloads {
-                        None => vectors_iter
-                            .map(|(id, vectors)| PointStructPersisted {
-                                id,
-                                vector: VectorStructInternal::from(vectors).into(),
-                                payload: None,
-                            })
-                            .collect(),
-                        Some(payloads) => vectors_iter
-                            .zip(payloads)
-                            .map(|((id, vectors), payload)| PointStructPersisted {
-                                id,
-                                vector: VectorStructInternal::from(vectors).into(),
-                                payload,
-                            })
-                            .collect(),
-                    }
-                }
-                PointInsertOperationsInternal::PointsList(points) => points,
-            };
-            let res = upsert_points(&segments.read(), op_num, points.iter(), hw_counter)?;
-            Ok(res)
-        }
-        PointOperations::DeletePointsByFilter(filter) => {
-            delete_points_by_filter(&segments.read(), op_num, &filter, hw_counter)
-        }
-        PointOperations::SyncPoints(operation) => {
-            let (deleted, new, updated) = sync_points(
-                &segments.read(),
-                op_num,
-                operation.from_id,
-                operation.to_id,
-                &operation.points,
-                hw_counter,
-            )?;
-            Ok(deleted + new + updated)
-        }
-    }
-}
-
-pub(crate) fn process_vector_operation(
-    segments: &RwLock<SegmentHolder>,
-    op_num: SeqNumberType,
-    vector_operation: VectorOperations,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    match vector_operation {
-        VectorOperations::UpdateVectors(operation) => {
-            update_vectors(&segments.read(), op_num, operation.points, hw_counter)
-        }
-        VectorOperations::DeleteVectors(ids, vector_names) => {
-            delete_vectors(&segments.read(), op_num, &ids.points, &vector_names)
-        }
-        VectorOperations::DeleteVectorsByFilter(filter, vector_names) => {
-            delete_vectors_by_filter(&segments.read(), op_num, &filter, &vector_names, hw_counter)
-        }
-    }
-}
-
-pub(crate) fn process_payload_operation(
-    segments: &RwLock<SegmentHolder>,
-    op_num: SeqNumberType,
-    payload_operation: PayloadOps,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    match payload_operation {
-        PayloadOps::SetPayload(sp) => {
-            let payload: Payload = sp.payload;
-            if let Some(points) = sp.points {
-                set_payload(
-                    &segments.read(),
-                    op_num,
-                    &payload,
-                    &points,
-                    &sp.key,
-                    hw_counter,
-                )
-            } else if let Some(filter) = sp.filter {
-                set_payload_by_filter(
-                    &segments.read(),
-                    op_num,
-                    &payload,
-                    &filter,
-                    &sp.key,
-                    hw_counter,
-                )
-            } else {
-                Err(CollectionError::BadRequest {
-                    description: "No points or filter specified".to_string(),
-                })
-            }
-        }
-        PayloadOps::DeletePayload(dp) => {
-            if let Some(points) = dp.points {
-                delete_payload(&segments.read(), op_num, &points, &dp.keys, hw_counter)
-            } else if let Some(filter) = dp.filter {
-                delete_payload_by_filter(&segments.read(), op_num, &filter, &dp.keys, hw_counter)
-            } else {
-                Err(CollectionError::BadRequest {
-                    description: "No points or filter specified".to_string(),
-                })
-            }
-        }
-        PayloadOps::ClearPayload { ref points, .. } => {
-            clear_payload(&segments.read(), op_num, points, hw_counter)
-        }
-        PayloadOps::ClearPayloadByFilter(ref filter) => {
-            clear_payload_by_filter(&segments.read(), op_num, filter, hw_counter)
-        }
-        PayloadOps::OverwritePayload(sp) => {
-            let payload: Payload = sp.payload;
-            if let Some(points) = sp.points {
-                overwrite_payload(&segments.read(), op_num, &payload, &points, hw_counter)
-            } else if let Some(filter) = sp.filter {
-                overwrite_payload_by_filter(&segments.read(), op_num, &payload, &filter, hw_counter)
-            } else {
-                Err(CollectionError::BadRequest {
-                    description: "No points or filter specified".to_string(),
-                })
-            }
-        }
-    }
-}
-
-pub(crate) fn process_field_index_operation(
-    segments: &RwLock<SegmentHolder>,
-    op_num: SeqNumberType,
-    field_index_operation: &FieldIndexOperations,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    match field_index_operation {
-        FieldIndexOperations::CreateIndex(index_data) => create_field_index(
-            &segments.read(),
-            op_num,
-            &index_data.field_name,
-            index_data.field_schema.as_ref(),
-            hw_counter,
-        ),
-        FieldIndexOperations::DeleteIndex(field_name) => {
-            delete_field_index(&segments.read(), op_num, field_name)
-        }
-    }
-}
-
-/// Max amount of points to delete in a batched deletion iteration.
-const DELETION_BATCH_SIZE: usize = 512;
-
-/// Deletes points from all segments matching the given filter
-pub(crate) fn delete_points_by_filter(
-    segments: &SegmentHolder,
-    op_num: SeqNumberType,
-    filter: &Filter,
-    hw_counter: &HardwareCounterCell,
-) -> CollectionResult<usize> {
-    let mut total_deleted = 0;
-    // we don’t want to cancel this filtered read
-    let is_stopped = AtomicBool::new(false);
-    let mut points_to_delete: AHashMap<_, _> = segments
-        .iter()
-        .map(|(segment_id, segment)| {
-            (
-                *segment_id,
-                segment.get().read().read_filtered(
-                    None,
-                    None,
-                    Some(filter),
-                    &is_stopped,
-                    hw_counter,
-                ),
-            )
-        })
-        .collect();
-
-    segments.apply_segments_batched(|s, segment_id| {
-        let Some(curr_points) = points_to_delete.get_mut(&segment_id) else {
-            return Ok(false);
-        };
-        if curr_points.is_empty() {
-            return Ok(false);
-        }
-
-        let mut deleted_in_batch = 0;
-        while let Some(point_id) = curr_points.pop() {
-            if s.delete_point(op_num, point_id, hw_counter)? {
-                total_deleted += 1;
-                deleted_in_batch += 1;
-            }
-
-            if deleted_in_batch >= DELETION_BATCH_SIZE {
-                break;
-            }
-        }
-
-        Ok(true)
-    })?;
-
-    Ok(total_deleted)
-}
\ No newline at end of file
+) -> CollectionResult<(
\ No newline at end of file
