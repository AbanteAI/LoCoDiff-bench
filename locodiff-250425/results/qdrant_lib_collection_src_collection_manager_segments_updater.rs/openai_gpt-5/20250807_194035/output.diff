
index 3c0816e92..922bdd6a3 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmp8tza6s7c_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmpik3rxw_l_actual.txt	
@@ -8,7 +8,6 @@ use itertools::iproduct;
 use parking_lot::{RwLock, RwLockWriteGuard};
 use segment::common::operation_error::{OperationError, OperationResult};
 use segment::data_types::named_vectors::NamedVectors;
-use segment::data_types::vectors::{BatchVectorStructInternal, VectorStructInternal};
 use segment::entry::entry_point::SegmentEntry;
 use segment::json_path::JsonPath;
 use segment::types::{
@@ -37,7 +36,6 @@ pub(crate) fn check_unprocessed_points(
     }
 }
 
-/// Tries to delete points from all segments, returns number of actually deleted points
 pub(crate) fn delete_points(
     segments: &SegmentHolder,
     op_num: SeqNumberType,
@@ -556,14 +554,14 @@ pub(crate) fn process_point_operation(
         PointOperations::UpsertPoints(operation) => {
             let points: Vec<_> = match operation {
                 PointInsertOperationsInternal::PointsBatch(batch) => {
-                    let batch_vectors = BatchVectorStructInternal::from(batch.vectors);
+                    let batch_vectors = segment::data_types::vectors::BatchVectorStructInternal::from(batch.vectors);
                     let all_vectors = batch_vectors.into_all_vectors(batch.ids.len());
                     let vectors_iter = batch.ids.into_iter().zip(all_vectors);
                     match batch.payloads {
                         None => vectors_iter
                             .map(|(id, vectors)| PointStructPersisted {
                                 id,
-                                vector: VectorStructInternal::from(vectors).into(),
+                                vector: segment::data_types::vectors::VectorStructInternal::from(vectors).into(),
                                 payload: None,
                             })
                             .collect(),
@@ -571,7 +569,7 @@ pub(crate) fn process_point_operation(
                             .zip(payloads)
                             .map(|((id, vectors), payload)| PointStructPersisted {
                                 id,
-                                vector: VectorStructInternal::from(vectors).into(),
+                                vector: segment::data_types::vectors::VectorStructInternal::from(vectors).into(),
                                 payload,
                             })
                             .collect(),
