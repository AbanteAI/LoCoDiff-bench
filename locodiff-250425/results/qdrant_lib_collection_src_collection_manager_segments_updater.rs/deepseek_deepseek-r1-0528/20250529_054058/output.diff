
index 3c0816e92..153acd88b 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected):tmp/tmpg873hwva_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual):tmp/tmpxzecs_94_actual.txt	
@@ -8,7 +8,6 @@ use itertools::iproduct;
 use parking_lot::{RwLock, RwLockWriteGuard};
 use segment::common::operation_error::{OperationError, OperationResult};
 use segment::data_types::named_vectors::NamedVectors;
-use segment::data_types::vectors::{BatchVectorStructInternal, VectorStructInternal};
 use segment::entry::entry_point::SegmentEntry;
 use segment::json_path::JsonPath;
 use segment::types::{
@@ -46,7 +45,7 @@ pub(crate) fn delete_points(
 ) -> CollectionResult<usize> {
     let mut total_deleted_points = 0;
 
-    for batch in ids.chunks(VECTOR_OP_BATCH_SIZE) {
+    for batch in ids.chunks(512) {
         let deleted_points = segments.apply_points(
             batch,
             |_| (),
@@ -79,7 +78,7 @@ pub(crate) fn update_vectors(
     let ids: Vec<PointIdType> = points_map.keys().copied().collect();
 
     let mut total_updated_points = 0;
-    for batch in ids.chunks(VECTOR_OP_BATCH_SIZE) {
+    for batch in ids.chunks(512) {
         let updated_points = segments.apply_points_with_conditional_move(
             op_num,
             batch,
@@ -102,8 +101,6 @@ pub(crate) fn update_vectors(
     Ok(total_updated_points)
 }
 
-const VECTOR_OP_BATCH_SIZE: usize = 512;
-
 /// Delete the given named vectors for the given points, keeping other vectors intact.
 pub(crate) fn delete_vectors(
     segments: &SegmentHolder,
@@ -113,7 +110,7 @@ pub(crate) fn delete_vectors(
 ) -> CollectionResult<usize> {
     let mut total_deleted_points = 0;
 
-    for batch in points.chunks(VECTOR_OP_BATCH_SIZE) {
+    for batch in points.chunks(512) {
         let deleted_points = segments.apply_points(
             batch,
             |_| (),
