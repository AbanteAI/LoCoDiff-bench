--- qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual)@@ -226,7 +226,7 @@     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<Vec<PointIdType>> {
     let mut affected_points: Vec<PointIdType> = Vec::new();
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     segments.for_each_segment(|s| {
         let points = s.read_filtered(None, None, Some(filter), &is_stopped, hw_counter);
@@ -426,7 +426,7 @@         .collect();
 
     let mut points_to_update: Vec<_> = Vec::new();
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     let _num_updated =
         segments.read_points(existing_point_ids.as_slice(), &is_stopped, |id, segment| {
@@ -714,7 +714,7 @@     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<usize> {
     let mut total_deleted = 0;
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     let mut points_to_delete: AHashMap<_, _> = segments
         .iter()
