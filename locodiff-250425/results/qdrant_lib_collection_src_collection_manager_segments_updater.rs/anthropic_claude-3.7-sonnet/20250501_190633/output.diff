--- qdrant_lib_collection_src_collection_manager_segments_updater.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_manager_segments_updater.rs_extracted.txt (actual)@@ -1,5 +1,3 @@-//! A collection of functions for updating points and payloads stored in segments
-
 use std::sync::atomic::AtomicBool;
 
 use ahash::{AHashMap, AHashSet};
@@ -226,7 +224,7 @@     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<Vec<PointIdType>> {
     let mut affected_points: Vec<PointIdType> = Vec::new();
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     segments.for_each_segment(|s| {
         let points = s.read_filtered(None, None, Some(filter), &is_stopped, hw_counter);
@@ -426,7 +424,7 @@         .collect();
 
     let mut points_to_update: Vec<_> = Vec::new();
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     let _num_updated =
         segments.read_points(existing_point_ids.as_slice(), &is_stopped, |id, segment| {
@@ -714,20 +712,17 @@     hw_counter: &HardwareCounterCell,
 ) -> CollectionResult<usize> {
     let mut total_deleted = 0;
-    // we don’t want to cancel this filtered read
+    // we don't want to cancel this filtered read
     let is_stopped = AtomicBool::new(false);
     let mut points_to_delete: AHashMap<_, _> = segments
         .iter()
         .map(|(segment_id, segment)| {
             (
                 *segment_id,
-                segment.get().read().read_filtered(
-                    None,
-                    None,
-                    Some(filter),
-                    &is_stopped,
-                    hw_counter,
-                ),
+                segment
+                    .get()
+                    .read()
+                    .read_filtered(None, None, Some(filter), &is_stopped, hw_counter),
             )
         })
         .collect();
