
index 2a7243e5..c2a16bc5 100644
--- a/aider_tests_basic_test_repomap.py_expectedoutput.txt (expected):tmp/tmpjx1bgo5j_expected.txt	
+++ b/aider_tests_basic_test_repomap.py_extracted.txt (actual):tmp/tmpnckcqej5_actual.txt	
@@ -1,10 +1,9 @@
-import difflib
 import os
-import re
 import time
 import unittest
 from pathlib import Path
-
+import re
+import difflib
 import git
 
 from aider.dump import dump  # noqa: F401
@@ -46,6 +45,119 @@ class TestRepoMap(unittest.TestCase):
             # close the open cache files, so Windows won't error
             del repo_map
 
+    def test_get_repo_map_with_identifiers(self):
+        # Create a temporary directory with a sample Python file containing identifiers
+        test_file1 = "test_file_with_identifiers.py"
+        file_content1 = """\
+class MyClass:
+    def my_method(self, arg1, arg2):
+        return arg1 + arg2
+
+def my_function(arg1, arg2):
+    return arg1 * arg2
+"""
+
+        test_file2 = "test_file_import.py"
+        file_content2 = """\
+from test_file_with_identifiers import MyClass
+
+obj = MyClass()
+print(obj.my_method(1, 2))
+print(my_function(3, 4))
+"""
+
+        test_file3 = "test_file_pass.py"
+        file_content3 = "pass"
+
+        with IgnorantTemporaryDirectory() as temp_dir:
+            with open(os.path.join(temp_dir, test_file1), "w") as f:
+                f.write(file_content1)
+
+            with open(os.path.join(temp_dir, test_file2), "w") as f:
+                f.write(file_content2)
+
+            with open(os.path.join(temp_dir, test_file3), "w") as f:
+                f.write(file_content3)
+
+            io = InputOutput()
+            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=io)
+            other_files = [
+                os.path.join(temp_dir, test_file1),
+                os.path.join(temp_dir, test_file2),
+                os.path.join(temp_dir, test_file3),
+            ]
+            result = repo_map.get_repo_map([], other_files)
+
+            # Check if the result contains the expected tags map with identifiers
+            self.assertIn("test_file_with_identifiers.py", result)
+            self.assertIn("MyClass", result)
+            self.assertIn("my_method", result)
+            self.assertIn("my_function", result)
+            self.assertIn("test_file_pass.py", result)
+
+            # close the open cache files, so Windows won't error
+            del repo_map
+
+    def test_get_repo_map_all_files(self):
+        test_files = [
+            "test_file0.py",
+            "test_file1.txt",
+            "test_file2.md",
+            "test_file3.json",
+            "test_file4.html",
+            "test_file5.css",
+            "test_file6.js",
+        ]
+
+        with IgnorantTemporaryDirectory() as temp_dir:
+            for file in test_files:
+                with open(os.path.join(temp_dir, file), "w") as f:
+                    f.write("")
+
+            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=InputOutput())
+
+            other_files = [os.path.join(temp_dir, file) for file in test_files]
+            result = repo_map.get_repo_map([], other_files)
+            dump(other_files)
+            dump(repr(result))
+
+            # Check if the result contains each specific file in the expected tags map without ctags
+            for file in test_files:
+                self.assertIn(file, result)
+
+            # close the open cache files, so Windows won't error
+            del repo_map
+
+    def test_get_repo_map_excludes_added_files(self):
+        # Create a temporary directory with sample files for testing
+        test_files = [
+            "test_file1.py",
+            "test_file2.py",
+            "test_file3.md",
+            "test_file4.json",
+        ]
+
+        with IgnorantTemporaryDirectory() as temp_dir:
+            for file in test_files:
+                with open(os.path.join(temp_dir, file), "w") as f:
+                    f.write("def foo(): pass\n")
+
+            io = InputOutput()
+            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=io)
+            test_files = [os.path.join(temp_dir, file) for file in test_files]
+            result = repo_map.get_repo_map(test_files[:2], test_files[2:])
+
+            dump(result)
+
+            # Check if the result contains the expected tags map
+            self.assertNotIn("test_file1.py", result)
+            self.assertNotIn("test_file2.py", result)
+            self.assertIn("test_file3.md", result)
+            self.assertIn("test_file4.json", result)
+
+            # close the open cache files, so Windows won't error
+            del repo_map
+
     def test_repo_map_refresh_files(self):
         with GitTemporaryDirectory() as temp_dir:
             repo = git.Repo(temp_dir)
@@ -88,9 +200,7 @@ class TestRepoMap(unittest.TestCase):
 
             # Get another repo map
             second_map = repo_map.get_repo_map([], other_files)
-            self.assertEqual(
-                initial_map, second_map, "RepoMap should not change with refresh='files'"
-            )
+            self.assertEqual(initial_map, second_map, "RepoMap should not change with refresh='files'")
 
             other_files = [
                 os.path.join(temp_dir, "file1.py"),
@@ -101,7 +211,6 @@ class TestRepoMap(unittest.TestCase):
 
             # close the open cache files, so Windows won't error
             del repo_map
-            del repo
 
     def test_repo_map_refresh_auto(self):
         with GitTemporaryDirectory() as temp_dir:
@@ -213,66 +322,6 @@ print(my_function(3, 4))
             # close the open cache files, so Windows won't error
             del repo_map
 
-    def test_get_repo_map_all_files(self):
-        test_files = [
-            "test_file0.py",
-            "test_file1.txt",
-            "test_file2.md",
-            "test_file3.json",
-            "test_file4.html",
-            "test_file5.css",
-            "test_file6.js",
-        ]
-
-        with IgnorantTemporaryDirectory() as temp_dir:
-            for file in test_files:
-                with open(os.path.join(temp_dir, file), "w") as f:
-                    f.write("")
-
-            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=InputOutput())
-
-            other_files = [os.path.join(temp_dir, file) for file in test_files]
-            result = repo_map.get_repo_map([], other_files)
-            dump(other_files)
-            dump(repr(result))
-
-            # Check if the result contains each specific file in the expected tags map without ctags
-            for file in test_files:
-                self.assertIn(file, result)
-
-            # close the open cache files, so Windows won't error
-            del repo_map
-
-    def test_get_repo_map_excludes_added_files(self):
-        # Create a temporary directory with sample files for testing
-        test_files = [
-            "test_file1.py",
-            "test_file2.py",
-            "test_file3.md",
-            "test_file4.json",
-        ]
-
-        with IgnorantTemporaryDirectory() as temp_dir:
-            for file in test_files:
-                with open(os.path.join(temp_dir, file), "w") as f:
-                    f.write("def foo(): pass\n")
-
-            io = InputOutput()
-            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=io)
-            test_files = [os.path.join(temp_dir, file) for file in test_files]
-            result = repo_map.get_repo_map(test_files[:2], test_files[2:])
-
-            dump(result)
-
-            # Check if the result contains the expected tags map
-            self.assertNotIn("test_file1.py", result)
-            self.assertNotIn("test_file2.py", result)
-            self.assertIn("test_file3.md", result)
-            self.assertIn("test_file4.json", result)
-
-            # close the open cache files, so Windows won't error
-            del repo_map
-
 
 class TestRepoMapTypescript(unittest.TestCase):
     def setUp(self):
@@ -408,83 +457,16 @@ class TestRepoMapAllLanguages(unittest.TestCase):
             dump(result)
 
             self.assertGreater(len(result.strip().splitlines()), 1)
-
-            # Check if the result contains all the expected files and symbols
             self.assertIn(
                 filename, result, f"File for language {lang} not found in repo map: {result}"
             )
             self.assertIn(
-                symbol,
-                result,
-                f"Key symbol '{symbol}' for language {lang} not found in repo map: {result}",
+                symbol, result, f"Key symbol '{symbol}' for language {lang} not found in repo map: {result}"
             )
 
             # close the open cache files, so Windows won't error
             del repo_map
 
-    def test_repo_map_sample_code_base(self):
-        # Path to the sample code base
-        sample_code_base = Path(__file__).parent.parent / "fixtures" / "sample-code-base"
-
-        # Path to the expected repo map file
-        expected_map_file = (
-            Path(__file__).parent.parent / "fixtures" / "sample-code-base-repo-map.txt"
-        )
-
-        # Ensure the paths exist
-        self.assertTrue(sample_code_base.exists(), "Sample code base directory not found")
-        self.assertTrue(expected_map_file.exists(), "Expected repo map file not found")
-
-        # Initialize RepoMap with the sample code base as root
-        io = InputOutput()
-        repomap_root = Path(__file__).parent.parent.parent
-        repo_map = RepoMap(
-            main_model=self.GPT35,
-            root=str(repomap_root),
-            io=io,
-        )
-
-        # Get all files in the sample code base
-        other_files = [str(f) for f in sample_code_base.rglob("*") if f.is_file()]
-
-        # Generate the repo map
-        generated_map_str = repo_map.get_repo_map([], other_files).strip()
-
-        # Read the expected map from the file using UTF-8 encoding
-        with open(expected_map_file, "r", encoding="utf-8") as f:
-            expected_map = f.read().strip()
-
-        # Normalize path separators for Windows
-        if os.name == "nt":  # Check if running on Windows
-            expected_map = re.sub(
-                r"tests/fixtures/sample-code-base/([^:]+)",
-                r"tests\\fixtures\\sample-code-base\\\1",
-                expected_map,
-            )
-            generated_map_str = re.sub(
-                r"tests/fixtures/sample-code-base/([^:]+)",
-                r"tests\\fixtures\\sample-code-base\\\1",
-                generated_map_str,
-            )
-
-        # Compare the generated map with the expected map
-        if generated_map_str != expected_map:
-            # If they differ, show the differences and fail the test
-            diff = list(
-                difflib.unified_diff(
-                    expected_map.splitlines(),
-                    generated_map_str.splitlines(),
-                    fromfile="expected",
-                    tofile="generated",
-                    lineterm="",
-                )
-            )
-            diff_str = "\n".join(diff)
-            self.fail(f"Generated map differs from expected map:\n{diff_str}")
-
-        # If we reach here, the maps are identical
-        self.assertEqual(generated_map_str, expected_map, "Generated map matches expected map")
-
 
 if __name__ == "__main__":
     unittest.main()
\ No newline at end of file
