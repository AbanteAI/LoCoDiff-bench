
index 2a7243e58..02e6ff2dc 100644
--- a/aider_tests_basic_test_repomap.py_expectedoutput.txt (expected):tmp/tmpigdnwm42_expected.txt	
+++ b/aider_tests_basic_test_repomap.py_extracted.txt (actual):tmp/tmpssemiz5l_actual.txt	
@@ -88,15 +88,7 @@ class TestRepoMap(unittest.TestCase):
 
             # Get another repo map
             second_map = repo_map.get_repo_map([], other_files)
-            self.assertEqual(
-                initial_map, second_map, "RepoMap should not change with refresh='files'"
-            )
-
-            other_files = [
-                os.path.join(temp_dir, "file1.py"),
-                os.path.join(temp_dir, "file2.py"),
-            ]
-            second_map = repo_map.get_repo_map([], other_files)
+            self.assertNotEqual(initial_map, second_map, "RepoMap should change with refresh='files'")
             self.assertIn("functionNEW", second_map)
 
             # close the open cache files, so Windows won't error
@@ -147,9 +139,7 @@ class TestRepoMap(unittest.TestCase):
 
             # Get another repo map without force_refresh
             second_map = repo_map.get_repo_map(chat_files, other_files)
-            self.assertEqual(
-                initial_map, second_map, "RepoMap should not change without force_refresh"
-            )
+            self.assertEqual(initial_map, second_map, "RepoMap should not change without force_refresh")
 
             # Get a new repo map with force_refresh
             final_map = repo_map.get_repo_map(chat_files, other_files, force_refresh=True)
@@ -274,11 +264,6 @@ print(my_function(3, 4))
             del repo_map
 
 
-class TestRepoMapTypescript(unittest.TestCase):
-    def setUp(self):
-        self.GPT35 = Model("gpt-3.5-turbo")
-
-
 class TestRepoMapAllLanguages(unittest.TestCase):
     def setUp(self):
         self.GPT35 = Model("gpt-3.5-turbo")
@@ -314,16 +299,12 @@ class TestRepoMapAllLanguages(unittest.TestCase):
     def test_language_lua(self):
         self._test_language_repo_map("lua", "lua", "greet")
 
-    # "ocaml": ("ml", "Greeter"), # not supported in tsl-pack (yet?)
-
     def test_language_php(self):
         self._test_language_repo_map("php", "php", "greet")
 
     def test_language_python(self):
         self._test_language_repo_map("python", "py", "Person")
 
-    # "ql": ("ql", "greet"), # not supported in tsl-pack (yet?)
-
     def test_language_ruby(self):
         self._test_language_repo_map("ruby", "rb", "greet")
 
@@ -385,16 +366,14 @@ class TestRepoMapAllLanguages(unittest.TestCase):
         self._test_language_repo_map("scala", "scala", "Greeter")
 
     def _test_language_repo_map(self, lang, key, symbol):
-        """Helper method to test repo map generation for a specific language."""
-        # Get the fixture file path and name based on language
         fixture_dir = self.fixtures_dir / lang
         filename = f"test.{key}"
         fixture_path = fixture_dir / filename
         self.assertTrue(fixture_path.exists(), f"Fixture file missing for {lang}: {fixture_path}")
 
-        # Read the fixture content
         with open(fixture_path, "r", encoding="utf-8") as f:
             content = f.read()
+
         with GitTemporaryDirectory() as temp_dir:
             test_file = os.path.join(temp_dir, filename)
             with open(test_file, "w", encoding="utf-8") as f:
@@ -409,7 +388,6 @@ class TestRepoMapAllLanguages(unittest.TestCase):
 
             self.assertGreater(len(result.strip().splitlines()), 1)
 
-            # Check if the result contains all the expected files and symbols
             self.assertIn(
                 filename, result, f"File for language {lang} not found in repo map: {result}"
             )
@@ -419,23 +397,18 @@ class TestRepoMapAllLanguages(unittest.TestCase):
                 f"Key symbol '{symbol}' for language {lang} not found in repo map: {result}",
             )
 
-            # close the open cache files, so Windows won't error
             del repo_map
 
     def test_repo_map_sample_code_base(self):
-        # Path to the sample code base
         sample_code_base = Path(__file__).parent.parent / "fixtures" / "sample-code-base"
 
-        # Path to the expected repo map file
         expected_map_file = (
             Path(__file__).parent.parent / "fixtures" / "sample-code-base-repo-map.txt"
         )
 
-        # Ensure the paths exist
         self.assertTrue(sample_code_base.exists(), "Sample code base directory not found")
         self.assertTrue(expected_map_file.exists(), "Expected repo map file not found")
 
-        # Initialize RepoMap with the sample code base as root
         io = InputOutput()
         repomap_root = Path(__file__).parent.parent.parent
         repo_map = RepoMap(
@@ -444,17 +417,13 @@ class TestRepoMapAllLanguages(unittest.TestCase):
             io=io,
         )
 
-        # Get all files in the sample code base
         other_files = [str(f) for f in sample_code_base.rglob("*") if f.is_file()]
 
-        # Generate the repo map
         generated_map_str = repo_map.get_repo_map([], other_files).strip()
 
-        # Read the expected map from the file using UTF-8 encoding
         with open(expected_map_file, "r", encoding="utf-8") as f:
             expected_map = f.read().strip()
 
-        # Normalize path separators for Windows
         if os.name == "nt":  # Check if running on Windows
             expected_map = re.sub(
                 r"tests/fixtures/sample-code-base/([^:]+)",
@@ -467,9 +436,7 @@ class TestRepoMapAllLanguages(unittest.TestCase):
                 generated_map_str,
             )
 
-        # Compare the generated map with the expected map
         if generated_map_str != expected_map:
-            # If they differ, show the differences and fail the test
             diff = list(
                 difflib.unified_diff(
                     expected_map.splitlines(),
@@ -482,7 +449,6 @@ class TestRepoMapAllLanguages(unittest.TestCase):
             diff_str = "\n".join(diff)
             self.fail(f"Generated map differs from expected map:\n{diff_str}")
 
-        # If we reach here, the maps are identical
         self.assertEqual(generated_map_str, expected_map, "Generated map matches expected map")
 
 
