--- aider_tests_basic_test_repomap.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_repomap.py_extracted.txt (actual)@@ -123,7 +123,6 @@             # Initialize RepoMap with refresh="auto"
             io = InputOutput()
             repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=io, refresh="auto")
-            chat_files = []
             other_files = [os.path.join(temp_dir, "file1.py"), os.path.join(temp_dir, "file2.py")]
 
             # Force the RepoMap computation to take more than 1 second
@@ -136,7 +135,7 @@             repo_map.get_ranked_tags = slow_get_ranked_tags
 
             # Get initial repo map
-            initial_map = repo_map.get_repo_map(chat_files, other_files)
+            initial_map = repo_map.get_repo_map(chat_files=[], other_files=other_files)
             self.assertIn("function1", initial_map)
             self.assertIn("function2", initial_map)
             self.assertNotIn("functionNEW", initial_map)
@@ -146,13 +145,13 @@                 f.write("\ndef functionNEW():\n    return 'Hello NEW'\n")
 
             # Get another repo map without force_refresh
-            second_map = repo_map.get_repo_map(chat_files, other_files)
+            second_map = repo_map.get_repo_map([], other_files)
             self.assertEqual(
                 initial_map, second_map, "RepoMap should not change without force_refresh"
             )
 
             # Get a new repo map with force_refresh
-            final_map = repo_map.get_repo_map(chat_files, other_files, force_refresh=True)
+            final_map = repo_map.get_repo_map([], other_files, force_refresh=True)
             self.assertIn("functionNEW", final_map)
             self.assertNotEqual(initial_map, final_map, "RepoMap should change with force_refresh")
 
@@ -274,11 +273,6 @@             del repo_map
 
 
-class TestRepoMapTypescript(unittest.TestCase):
-    def setUp(self):
-        self.GPT35 = Model("gpt-3.5-turbo")
-
-
 class TestRepoMapAllLanguages(unittest.TestCase):
     def setUp(self):
         self.GPT35 = Model("gpt-3.5-turbo")
@@ -407,8 +401,6 @@             dump(lang)
             dump(result)
 
-            self.assertGreater(len(result.strip().splitlines()), 1)
-
             # Check if the result contains all the expected files and symbols
             self.assertIn(
                 filename, result, f"File for language {lang} not found in repo map: {result}"
@@ -435,7 +427,7 @@         self.assertTrue(sample_code_base.exists(), "Sample code base directory not found")
         self.assertTrue(expected_map_file.exists(), "Expected repo map file not found")
 
-        # Initialize RepoMap with the sample code base as root
+        # Initialize RepoMap with refresh="auto"
         io = InputOutput()
         repomap_root = Path(__file__).parent.parent.parent
         repo_map = RepoMap(
