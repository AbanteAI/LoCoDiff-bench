
index 2a7243e5..8beb4f6b 100644
--- a/aider_tests_basic_test_repomap.py_expectedoutput.txt (expected):tmp/tmpv93l7j4c_expected.txt	
+++ b/aider_tests_basic_test_repomap.py_extracted.txt (actual):tmp/tmpc8hfo1b2_actual.txt	
@@ -1,6 +1,6 @@
-import difflib
 import os
 import re
+import difflib
 import time
 import unittest
 from pathlib import Path
@@ -88,9 +88,7 @@ class TestRepoMap(unittest.TestCase):
 
             # Get another repo map
             second_map = repo_map.get_repo_map([], other_files)
-            self.assertEqual(
-                initial_map, second_map, "RepoMap should not change with refresh='files'"
-            )
+            self.assertEqual(initial_map, second_map, "RepoMap should not change with refresh='files'")
 
             other_files = [
                 os.path.join(temp_dir, "file1.py"),
@@ -213,66 +211,6 @@ print(my_function(3, 4))
             # close the open cache files, so Windows won't error
             del repo_map
 
-    def test_get_repo_map_all_files(self):
-        test_files = [
-            "test_file0.py",
-            "test_file1.txt",
-            "test_file2.md",
-            "test_file3.json",
-            "test_file4.html",
-            "test_file5.css",
-            "test_file6.js",
-        ]
-
-        with IgnorantTemporaryDirectory() as temp_dir:
-            for file in test_files:
-                with open(os.path.join(temp_dir, file), "w") as f:
-                    f.write("")
-
-            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=InputOutput())
-
-            other_files = [os.path.join(temp_dir, file) for file in test_files]
-            result = repo_map.get_repo_map([], other_files)
-            dump(other_files)
-            dump(repr(result))
-
-            # Check if the result contains each specific file in the expected tags map without ctags
-            for file in test_files:
-                self.assertIn(file, result)
-
-            # close the open cache files, so Windows won't error
-            del repo_map
-
-    def test_get_repo_map_excludes_added_files(self):
-        # Create a temporary directory with sample files for testing
-        test_files = [
-            "test_file1.py",
-            "test_file2.py",
-            "test_file3.md",
-            "test_file4.json",
-        ]
-
-        with IgnorantTemporaryDirectory() as temp_dir:
-            for file in test_files:
-                with open(os.path.join(temp_dir, file), "w") as f:
-                    f.write("def foo(): pass\n")
-
-            io = InputOutput()
-            repo_map = RepoMap(main_model=self.GPT35, root=temp_dir, io=io)
-            test_files = [os.path.join(temp_dir, file) for file in test_files]
-            result = repo_map.get_repo_map(test_files[:2], test_files[2:])
-
-            dump(result)
-
-            # Check if the result contains the expected tags map
-            self.assertNotIn("test_file1.py", result)
-            self.assertNotIn("test_file2.py", result)
-            self.assertIn("test_file3.md", result)
-            self.assertIn("test_file4.json", result)
-
-            # close the open cache files, so Windows won't error
-            del repo_map
-
 
 class TestRepoMapTypescript(unittest.TestCase):
     def setUp(self):
@@ -314,16 +252,12 @@ class TestRepoMapAllLanguages(unittest.TestCase):
     def test_language_lua(self):
         self._test_language_repo_map("lua", "lua", "greet")
 
-    # "ocaml": ("ml", "Greeter"), # not supported in tsl-pack (yet?)
-
     def test_language_php(self):
         self._test_language_repo_map("php", "php", "greet")
 
     def test_language_python(self):
         self._test_language_repo_map("python", "py", "Person")
 
-    # "ql": ("ql", "greet"), # not supported in tsl-pack (yet?)
-
     def test_language_ruby(self):
         self._test_language_repo_map("ruby", "rb", "greet")
 
@@ -386,7 +320,6 @@ class TestRepoMapAllLanguages(unittest.TestCase):
 
     def _test_language_repo_map(self, lang, key, symbol):
         """Helper method to test repo map generation for a specific language."""
-        # Get the fixture file path and name based on language
         fixture_dir = self.fixtures_dir / lang
         filename = f"test.{key}"
         fixture_path = fixture_dir / filename
@@ -409,7 +342,6 @@ class TestRepoMapAllLanguages(unittest.TestCase):
 
             self.assertGreater(len(result.strip().splitlines()), 1)
 
-            # Check if the result contains all the expected files and symbols
             self.assertIn(
                 filename, result, f"File for language {lang} not found in repo map: {result}"
             )
@@ -437,10 +369,9 @@ class TestRepoMapAllLanguages(unittest.TestCase):
 
         # Initialize RepoMap with the sample code base as root
         io = InputOutput()
-        repomap_root = Path(__file__).parent.parent.parent
         repo_map = RepoMap(
             main_model=self.GPT35,
-            root=str(repomap_root),
+            root=str(Path(__file__).parent.parent.parent),
             io=io,
         )
 
@@ -455,7 +386,7 @@ class TestRepoMapAllLanguages(unittest.TestCase):
             expected_map = f.read().strip()
 
         # Normalize path separators for Windows
-        if os.name == "nt":  # Check if running on Windows
+        if os.name == "nt":
             expected_map = re.sub(
                 r"tests/fixtures/sample-code-base/([^:]+)",
                 r"tests\\fixtures\\sample-code-base\\\1",
@@ -467,9 +398,7 @@ class TestRepoMapAllLanguages(unittest.TestCase):
                 generated_map_str,
             )
 
-        # Compare the generated map with the expected map
         if generated_map_str != expected_map:
-            # If they differ, show the differences and fail the test
             diff = list(
                 difflib.unified_diff(
                     expected_map.splitlines(),
@@ -482,7 +411,6 @@ class TestRepoMapAllLanguages(unittest.TestCase):
             diff_str = "\n".join(diff)
             self.fail(f"Generated map differs from expected map:\n{diff_str}")
 
-        # If we reach here, the maps are identical
         self.assertEqual(generated_map_str, expected_map, "Generated map matches expected map")
 
 
