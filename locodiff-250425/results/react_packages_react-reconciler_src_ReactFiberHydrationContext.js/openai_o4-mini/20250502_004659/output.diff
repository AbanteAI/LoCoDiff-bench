
index f9932b8c..94ad3663 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpftn1ckuz_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpzo55pseu_actual.txt	
@@ -16,8 +16,8 @@ import type {
   SuspenseInstance,
   Container,
   HostContext,
+  ActivityState,
 } from './ReactFiberConfig';
-import type {ActivityState} from './ReactFiberActivityComponent';
 import type {SuspenseState} from './ReactFiberSuspenseComponent';
 import type {TreeContext} from './ReactFiberTreeContext';
 import type {CapturedValue} from './ReactCapturedValue';
@@ -27,12 +27,12 @@ import {
   HostComponent,
   HostSingleton,
   HostRoot,
-  SuspenseComponent,
   ActivityComponent,
+  SuspenseComponent,
 } from './ReactWorkTags';
 import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
-
 import {createCapturedValueAtFiber} from './ReactCapturedValue';
+import {runWithFiberInDEV} from './ReactCurrentFiber';
 
 import {createFiberFromDehydratedFragment} from './ReactFiber';
 import {
@@ -43,9 +43,9 @@ import {
   getNextHydratableSiblingAfterSingleton,
   getFirstHydratableChild,
   getFirstHydratableChildWithinContainer,
+  getFirstHydratableChildWithinSingleton,
   getFirstHydratableChildWithinActivityInstance,
   getFirstHydratableChildWithinSuspenseInstance,
-  getFirstHydratableChildWithinSingleton,
   hydrateInstance,
   diffHydratedPropsForDevWarnings,
   describeHydratableInstanceForDevWarnings,
@@ -63,8 +63,6 @@ import {
   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
-  validateHydratableInstance,
-  validateHydratableTextInstance,
 } from './ReactFiberConfig';
 import {OffscreenLane} from './ReactFiberLane';
 import {
@@ -74,7 +72,6 @@ import {
 import {queueRecoverableErrors} from './ReactFiberWorkLoop';
 import {getRootHostContainer, getHostContext} from './ReactFiberHostContext';
 import {describeDiff} from './ReactFiberHydrationDiffs';
-import {runWithFiberInDEV} from './ReactCurrentFiber';
 
 // The deepest Fiber on the stack involved in a hydration context.
 // This may have been an insertion or a hydration.
@@ -82,19 +79,85 @@ let hydrationParentFiber: null | Fiber = null;
 let nextHydratableInstance: null | HydratableInstance = null;
 let isHydrating: boolean = false;
 
-// This flag allows for warning supression when we expect there to be mismatches
+// This flag allows for warning suppression when we expect there to be mismatches
 // due to earlier mismatches or a suspended fiber.
 let didSuspendOrErrorDEV: boolean = false;
 
-// Hydration differences found that haven't yet been logged.
-let hydrationDiffRootDEV: null | HydrationDiffNode = null;
-
 // Hydration errors that were thrown inside this boundary
 let hydrationErrors: Array<CapturedValue<mixed>> | null = null;
 
 let rootOrSingletonContext = false;
 
-// Builds a common ancestor tree from the root down for collecting diffs.
+// Hydration differences found that haven't yet been logged.
+let hydrationDiffRootDEV: null | HydrationDiffNode = null;
+
+export function markDidThrowWhileHydratingDEV(): void {
+  didSuspendOrErrorDEV = true;
+}
+
+function warnIfHydrating(): void {
+  if (__DEV__) {
+    if (isHydrating) {
+      console.error(
+        'We should not be hydrating here. This is a bug in React. Please file a bug.'
+      );
+    }
+  }
+}
+
+export function getIsHydrating(): boolean {
+  return isHydrating;
+}
+
+export const HydrationMismatchException: mixed = new Error(
+  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +
+    "userspace. If you're seeing this, it's likely a bug in React."
+);
+
+function throwOnHydrationMismatch(
+  fiber: Fiber,
+  fromText: boolean = false,
+): mixed {
+  let diff = '';
+  if (__DEV__) {
+    const diffRoot = hydrationDiffRootDEV;
+    if (diffRoot !== null) {
+      hydrationDiffRootDEV = null;
+      diff = describeDiff(diffRoot);
+    }
+  }
+  const error = new Error(
+    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+  
+- A server/client branch \`if (typeof window !== 'undefined')\`.
+- Variable input such as \`Date.now()\` or \`Math.random()\` which changes each time it's called.
+- Date formatting in a user's locale which doesn't match the server.
+- External changing data without sending a snapshot of it along with the HTML.
+- Invalid HTML tag nesting.
+
+It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.
+
+https://react.dev/link/hydration-mismatch` + diff
+  );
+  if (hydrationErrors === null) {
+    hydrationErrors = [createCapturedValueAtFiber(error, fiber)];
+  } else {
+    hydrationErrors.push(createCapturedValueAtFiber(error, fiber));
+  }
+  throw HydrationMismatchException;
+}
+
+export function upgradeHydrationErrorsToRecoverable(): Array<
+  CapturedValue<mixed>,
+> | null {
+  const queued = hydrationErrors;
+  if (queued !== null) {
+    queueRecoverableErrors(queued);
+    hydrationErrors = null;
+  }
+  return queued;
+}
+
 function buildHydrationDiffNode(
   fiber: Fiber,
   distanceFromLeaf: number,
@@ -103,18 +166,21 @@ function buildHydrationDiffNode(
     // We're at the root.
     if (hydrationDiffRootDEV === null) {
       hydrationDiffRootDEV = {
-        fiber: fiber,
+        fiber,
         children: [],
         serverProps: undefined,
         serverTail: [],
-        distanceFromLeaf: distanceFromLeaf,
+        distanceFromLeaf,
       };
-    } else if (hydrationDiffRootDEV.fiber !== fiber) {
-      throw new Error(
-        'Saw multiple hydration diff roots in a pass. This is a bug in React.',
-      );
-    } else if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {
-      hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;
+    } else {
+      if (hydrationDiffRootDEV.fiber !== fiber) {
+        throw new Error(
+          'Saw multiple hydration diff roots in a pass. This is a bug in React.'
+        );
+      }
+      if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {
+        hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;
+      }
     }
     return hydrationDiffRootDEV;
   }
@@ -122,41 +188,56 @@ function buildHydrationDiffNode(
     fiber.return,
     distanceFromLeaf + 1,
   ).children;
-  // The same node may already exist in the parent. Since we currently always render depth first
-  // and rerender if we suspend or terminate early, if a shared ancestor was added we should still
-  // be inside of that shared ancestor which means it was the last one to be added. If this changes
-  // we may have to scan the whole set.
-  if (siblings.length > 0 && siblings[siblings.length - 1].fiber === fiber) {
-    const existing = siblings[siblings.length - 1];
-    if (existing.distanceFromLeaf > distanceFromLeaf) {
-      existing.distanceFromLeaf = distanceFromLeaf;
+  const last = siblings[siblings.length - 1];
+  if (last !== undefined && last.fiber === fiber) {
+    if (last.distanceFromLeaf > distanceFromLeaf) {
+      last.distanceFromLeaf = distanceFromLeaf;
     }
-    return existing;
+    return last;
   }
-  const newNode: HydrationDiffNode = {
-    fiber: fiber,
+  const node = {
+    fiber,
     children: [],
     serverProps: undefined,
     serverTail: [],
-    distanceFromLeaf: distanceFromLeaf,
+    distanceFromLeaf,
   };
-  siblings.push(newNode);
-  return newNode;
+  siblings.push(node);
+  return node;
 }
 
-function warnIfHydrating() {
+export function emitPendingHydrationWarnings(): void {
   if (__DEV__) {
-    if (isHydrating) {
-      console.error(
-        'We should not be hydrating here. This is a bug in React. Please file a bug.',
-      );
-    }
-  }
-}
+    const diffRoot = hydrationDiffRootDEV;
+    if (diffRoot !== null) {
+      hydrationDiffRootDEV = null;
+      const diff = describeDiff(diffRoot);
 
-export function markDidThrowWhileHydratingDEV() {
-  if (__DEV__) {
-    didSuspendOrErrorDEV = true;
+      // Pick the first leaf in DFS as owner.
+      let owner = diffRoot;
+      while (owner.children.length > 0) {
+        owner = owner.children[0];
+      }
+
+      runWithFiberInDEV(owner.fiber, () => {
+        console.error(
+          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
+            'This can happen if a SSR-ed Client Component used:\n' +
+            '\n' +
+            "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
+            "- Variable input such as `Date.now()` or `Math.random()`.\n" +
+            "- Date formatting in a user's locale.\n" +
+            '- External changing data without snapshot.\n' +
+            '- Invalid HTML tag nesting.\n' +
+            '\n' +
+            'It can also happen if a browser extension modified the HTML before React loaded.\n' +
+            '\n' +
+            '%s%s',
+          'https://react.dev/link/hydration-mismatch',
+          diff,
+        );
+      });
+    }
   }
 }
 
@@ -164,7 +245,6 @@ function enterHydrationState(fiber: Fiber): boolean {
   if (!supportsHydration) {
     return false;
   }
-
   const parentInstance: Container = fiber.stateNode.containerInfo;
   nextHydratableInstance =
     getFirstHydratableChildWithinContainer(parentInstance);
@@ -221,26 +301,32 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   return true;
 }
 
+function resetHydrationState(): void {
+  if (!supportsHydration) {
+    return;
+  }
+  hydrationParentFiber = null;
+  nextHydratableInstance = null;
+  isHydrating = false;
+  didSuspendOrErrorDEV = false;
+  hydrationDiffRootDEV = null;
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
-  rejectedCandidate: null | HydratableInstance,
-) {
+  candidate: null | HydratableInstance,
+): void {
   if (__DEV__) {
     if (didSuspendOrErrorDEV) {
-      // Inside a boundary that already suspended. We're currently rendering the
-      // siblings of a suspended node. The mismatch may be due to the missing
-      // data, so it's probably a false positive.
       return;
     }
-
     // Add this fiber to the diff tree.
-    const diffNode = buildHydrationDiffNode(fiber, 0);
-    // We use null as a signal that there was no node to match.
-    diffNode.serverProps = null;
-    if (rejectedCandidate !== null) {
-      const description =
-        describeHydratableInstanceForDevWarnings(rejectedCandidate);
-      diffNode.serverTail.push(description);
+    const node = buildHydrationDiffNode(fiber, 0);
+    // Null serverProps signals a missing match.
+    node.serverProps = null;
+    if (candidate !== null) {
+      const desc = describeHydratableInstanceForDevWarnings(candidate);
+      node.serverTail.push(desc);
     }
   }
 }
@@ -249,8 +335,7 @@ function tryHydrateInstance(
   fiber: Fiber,
   nextInstance: any,
   hostContext: HostContext,
-) {
-  // fiber is a HostComponent Fiber
+): boolean {
   const instance = canHydrateInstance(
     nextInstance,
     fiber.type,
@@ -259,22 +344,18 @@ function tryHydrateInstance(
   );
   if (instance !== null) {
     fiber.stateNode = (instance: Instance);
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          hostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
+    if (__DEV__ && !didSuspendOrErrorDEV) {
+      const diffs = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.pendingProps,
+        hostContext,
+      );
+      if (diffs !== null) {
+        const node = buildHydrationDiffNode(fiber, 0);
+        node.serverProps = diffs;
       }
     }
-
     hydrationParentFiber = fiber;
     nextHydratableInstance = getFirstHydratableChild(instance);
     rootOrSingletonContext = false;
@@ -283,8 +364,10 @@ function tryHydrateInstance(
   return false;
 }
 
-function tryHydrateText(fiber: Fiber, nextInstance: any) {
-  // fiber is a HostText Fiber
+function tryHydrateText(
+  fiber: Fiber,
+  nextInstance: any,
+): boolean {
   const text = fiber.pendingProps;
   const textInstance = canHydrateTextInstance(
     nextInstance,
@@ -293,8 +376,19 @@ function tryHydrateText(fiber: Fiber, nextInstance: any) {
   );
   if (textInstance !== null) {
     fiber.stateNode = (textInstance: TextInstance);
+    if (__DEV__ && !didSuspendOrErrorDEV) {
+      const parentProps = hydrationParentFiber?.memoizedProps ?? null;
+      const diff = diffHydratedTextForDevWarnings(
+        textInstance,
+        text,
+        parentProps,
+      );
+      if (diff !== null) {
+        const node = buildHydrationDiffNode(fiber, 0);
+        node.serverProps = diff;
+      }
+    }
     hydrationParentFiber = fiber;
-    // Text Instances don't have children so there's nothing to hydrate.
     nextHydratableInstance = null;
     return true;
   }
@@ -305,7 +399,6 @@ function tryHydrateActivity(
   fiber: Fiber,
   nextInstance: any,
 ): null | ActivityInstance {
-  // fiber is a ActivityComponent Fiber
   const activityInstance = canHydrateActivityInstance(
     nextInstance,
     rootOrSingletonContext,
@@ -318,17 +411,10 @@ function tryHydrateActivity(
       hydrationErrors: null,
     };
     fiber.memoizedState = activityState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
-    const dehydratedFragment =
-      createFiberFromDehydratedFragment(activityInstance);
-    dehydratedFragment.return = fiber;
-    fiber.child = dehydratedFragment;
+    const frag = createFiberFromDehydratedFragment(activityInstance);
+    frag.return = fiber;
+    fiber.child = frag;
     hydrationParentFiber = fiber;
-    // While an Activity Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
   }
   return activityInstance;
@@ -338,7 +424,6 @@ function tryHydrateSuspense(
   fiber: Fiber,
   nextInstance: any,
 ): null | SuspenseInstance {
-  // fiber is a SuspenseComponent Fiber
   const suspenseInstance = canHydrateSuspenseInstance(
     nextInstance,
     rootOrSingletonContext,
@@ -348,121 +433,61 @@ function tryHydrateSuspense(
       dehydrated: suspenseInstance,
       treeContext: getSuspendedTreeContext(),
       retryLane: OffscreenLane,
-      hydrationErrors: null,
     };
     fiber.memoizedState = suspenseState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
-    const dehydratedFragment =
-      createFiberFromDehydratedFragment(suspenseInstance);
-    dehydratedFragment.return = fiber;
-    fiber.child = dehydratedFragment;
+    const frag = createFiberFromDehydratedFragment(suspenseInstance);
+    frag.return = fiber;
+    fiber.child = frag;
     hydrationParentFiber = fiber;
-    // While a Suspense Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
+    return suspenseInstance;
   }
-  return suspenseInstance;
-}
-
-export const HydrationMismatchException: mixed = new Error(
-  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +
-    "userspace. If you're seeing this, it's likely a bug in React.",
-);
-
-function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
-  let diff = '';
-  if (__DEV__) {
-    // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
-      hydrationDiffRootDEV = null;
-      diff = describeDiff(diffRoot);
-    }
-  }
-  const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
-` +
-      '\n' +
-      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-      "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-      "- Date formatting in a user's locale which doesn't match the server.\n" +
-      '- External changing data without sending a snapshot of it along with the HTML.\n' +
-      '- Invalid HTML tag nesting.\n' +
-      '\n' +
-      'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-      '\n' +
-      'https://react.dev/link/hydration-mismatch' +
-      diff,
-  );
-  queueHydrationError(createCapturedValueAtFiber(error, fiber));
-  throw HydrationMismatchException;
+  return null;
 }
 
 function claimHydratableSingleton(fiber: Fiber): void {
-  if (supportsSingletons) {
-    if (!isHydrating) {
-      return;
-    }
-    const currentRootContainer = getRootHostContainer();
-    const currentHostContext = getHostContext();
-    const instance = (fiber.stateNode = resolveSingletonInstance(
+  if (!supportsSingletons) {
+    return;
+  }
+  if (!isHydrating) {
+    return;
+  }
+  const instance = (fiber.stateNode = resolveSingletonInstance(
+    fiber.type,
+    fiber.pendingProps,
+    getRootHostContainer(),
+    getHostContext(),
+    false,
+  ));
+  if (__DEV__ && !didSuspendOrErrorDEV) {
+    const diffs = diffHydratedPropsForDevWarnings(
+      instance,
       fiber.type,
       fiber.pendingProps,
-      currentRootContainer,
-      currentHostContext,
-      false,
-    ));
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          currentHostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
-    hydrationParentFiber = fiber;
-    rootOrSingletonContext = true;
-    nextHydratableInstance = getFirstHydratableChildWithinSingleton(
-      fiber.type,
-      instance,
-      nextHydratableInstance,
+      getHostContext(),
     );
+    if (diffs !== null) {
+      const node = buildHydrationDiffNode(fiber, 0);
+      node.serverProps = diffs;
+    }
   }
+  hydrationParentFiber = fiber;
+  rootOrSingletonContext = true;
+  nextHydratableInstance = getFirstHydratableChildWithinSingleton(
+    fiber.type,
+    instance,
+    nextHydratableInstance,
+  );
 }
 
 function tryToClaimNextHydratableInstance(fiber: Fiber): void {
   if (!isHydrating) {
     return;
   }
-
-  // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
-  const shouldKeepWarning = validateHydratableInstance(
-    fiber.type,
-    fiber.pendingProps,
-    currentHostContext,
-  );
-
-  const nextInstance = nextHydratableInstance;
-  if (
-    !nextInstance ||
-    !tryHydrateInstance(fiber, nextInstance, currentHostContext)
-  ) {
-    if (shouldKeepWarning) {
-      warnNonHydratedInstance(fiber, nextInstance);
-    }
+  const next = nextHydratableInstance;
+  if (!next || !tryHydrateInstance(fiber, next, currentHostContext)) {
+    warnNonHydratedInstance(fiber, next);
     throwOnHydrationMismatch(fiber);
   }
 }
@@ -472,71 +497,31 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     return;
   }
   const text = fiber.pendingProps;
-
-  let shouldKeepWarning = true;
-  // Validate that this is ok to render here before any mismatches.
-  const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
-
-  const nextInstance = nextHydratableInstance;
-  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
-    if (shouldKeepWarning) {
-      warnNonHydratedInstance(fiber, nextInstance);
-    }
-    throwOnHydrationMismatch(fiber);
+  const next = nextHydratableInstance;
+  if (!next || !tryHydrateText(fiber, next)) {
+    warnNonHydratedInstance(fiber, next);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
 function claimNextHydratableActivityInstance(fiber: Fiber): ActivityInstance {
-  const nextInstance = nextHydratableInstance;
-  const activityInstance = nextInstance
-    ? tryHydrateActivity(fiber, nextInstance)
-    : null;
-  if (activityInstance === null) {
-    warnNonHydratedInstance(fiber, nextInstance);
-    throw throwOnHydrationMismatch(fiber);
+  const next = nextHydratableInstance;
+  const inst = next ? tryHydrateActivity(fiber, next) : null;
+  if (inst === null) {
+    warnNonHydratedInstance(fiber, next);
+    throwOnHydrationMismatch(fiber);
   }
-  return activityInstance;
+  return inst;
 }
 
 function claimNextHydratableSuspenseInstance(fiber: Fiber): SuspenseInstance {
-  const nextInstance = nextHydratableInstance;
-  const suspenseInstance = nextInstance
-    ? tryHydrateSuspense(fiber, nextInstance)
-    : null;
-  if (suspenseInstance === null) {
-    warnNonHydratedInstance(fiber, nextInstance);
-    throw throwOnHydrationMismatch(fiber);
-  }
-  return suspenseInstance;
-}
-
-export function tryToClaimNextHydratableFormMarkerInstance(
-  fiber: Fiber,
-): boolean {
-  if (!isHydrating) {
-    return false;
-  }
-  if (nextHydratableInstance) {
-    const markerInstance = canHydrateFormStateMarker(
-      nextHydratableInstance,
-      rootOrSingletonContext,
-    );
-    if (markerInstance) {
-      // Found the marker instance.
-      nextHydratableInstance = getNextHydratableSibling(markerInstance);
-      // Return true if this marker instance should use the state passed
-      // to hydrateRoot.
-      // TODO: As an optimization, Fizz should only emit these markers if form
-      // state is passed at the root.
-      return isFormStateMarkerMatching(markerInstance);
-    }
+  const next = nextHydratableInstance;
+  const inst = next ? tryHydrateSuspense(fiber, next) : null;
+  if (inst === null) {
+    warnNonHydratedInstance(fiber, next);
+    throwOnHydrationMismatch(fiber);
   }
-  // Should have found a marker instance. Throw an error to trigger client
-  // rendering. We don't bother to check if we're in a concurrent root because
-  // useActionState is a new API, so backwards compat is not an issue.
-  throwOnHydrationMismatch(fiber);
-  return false;
+  return inst;
 }
 
 function prepareToHydrateHostInstance(
@@ -545,12 +530,22 @@ function prepareToHydrateHostInstance(
 ): void {
   if (!supportsHydration) {
     throw new Error(
-      'Expected prepareToHydrateHostInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected prepareToHydrateHostInstance() to never be called.'
     );
   }
-
   const instance: Instance = fiber.stateNode;
+  if (__DEV__ && !didSuspendOrErrorDEV) {
+    const diffs = diffHydratedPropsForDevWarnings(
+      instance,
+      fiber.type,
+      fiber.memoizedProps,
+      hostContext,
+    );
+    if (diffs !== null) {
+      const node = buildHydrationDiffNode(fiber, 0);
+      node.serverProps = diffs;
+    }
+  }
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
@@ -559,65 +554,30 @@ function prepareToHydrateHostInstance(
     fiber,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
-    throwOnHydrationMismatch(fiber, true);
+    throwOnHydrationMismatch(fiber);
   }
 }
 
 function prepareToHydrateHostTextInstance(fiber: Fiber): void {
   if (!supportsHydration) {
     throw new Error(
-      'Expected prepareToHydrateHostTextInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected prepareToHydrateHostTextInstance() to never be called.'
     );
   }
-
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
-  let parentProps = null;
-  // We assume that prepareToHydrateHostTextInstance is called in a context where the
-  // hydration parent is the parent host component of this host text.
-  const returnFiber = hydrationParentFiber;
-  if (returnFiber !== null) {
-    switch (returnFiber.tag) {
-      case HostRoot: {
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
-      case HostSingleton:
-      case HostComponent: {
-        parentProps = returnFiber.memoizedProps;
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
+  const parentProps = hydrationParentFiber?.memoizedProps ?? null;
+  if (__DEV__ && !didSuspendOrErrorDEV) {
+    const diff = diffHydratedTextForDevWarnings(
+      textInstance,
+      textContent,
+      parentProps,
+    );
+    if (diff !== null) {
+      const node = buildHydrationDiffNode(fiber, 0);
+      node.serverProps = diff;
     }
-    // TODO: What if it's a SuspenseInstance?
   }
-
   const didHydrate = hydrateTextInstance(
     textInstance,
     textContent,
@@ -632,84 +592,59 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
 function prepareToHydrateHostActivityInstance(fiber: Fiber): void {
   if (!supportsHydration) {
     throw new Error(
-      'Expected prepareToHydrateHostActivityInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected prepareToHydrateHostActivityInstance() to never be called.'
     );
   }
-  const activityState: null | ActivityState = fiber.memoizedState;
-  const activityInstance: null | ActivityInstance =
-    activityState !== null ? activityState.dehydrated : null;
-
-  if (!activityInstance) {
+  const state: null | ActivityState = fiber.memoizedState;
+  const inst: null | ActivityInstance = state !== null ? state.dehydrated : null;
+  if (!inst) {
     throw new Error(
-      'Expected to have a hydrated activity instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected to have a hydrated activity instance.'
     );
   }
-
-  hydrateActivityInstance(activityInstance, fiber);
+  hydrateActivityInstance(inst, fiber);
 }
 
 function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
   if (!supportsHydration) {
     throw new Error(
-      'Expected prepareToHydrateHostSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected prepareToHydrateHostSuspenseInstance() to never be called.'
     );
   }
-
-  const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
-    suspenseState !== null ? suspenseState.dehydrated : null;
-
-  if (!suspenseInstance) {
+  const state: null | SuspenseState = fiber.memoizedState;
+  const inst: null | SuspenseInstance = state !== null ? state.dehydrated : null;
+  if (!inst) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected to have a hydrated suspense instance.'
     );
   }
-
-  hydrateSuspenseInstance(suspenseInstance, fiber);
+  hydrateSuspenseInstance(inst, fiber);
 }
 
 function skipPastDehydratedActivityInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  const activityState: null | ActivityState = fiber.memoizedState;
-  const activityInstance: null | ActivityInstance =
-    activityState !== null ? activityState.dehydrated : null;
-
-  if (!activityInstance) {
+  const state: null | ActivityState = fiber.memoizedState;
+  const inst: null | ActivityInstance = state !== null ? state.dehydrated : null;
+  if (!inst) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected to have a hydrated activity instance.'
     );
   }
-
-  return getNextHydratableInstanceAfterActivityInstance(activityInstance);
+  return getNextHydratableInstanceAfterActivityInstance(inst);
 }
 
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
-  const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
-    suspenseState !== null ? suspenseState.dehydrated : null;
-
-  if (!suspenseInstance) {
+  const state: null | SuspenseState = fiber.memoizedState;
+  const inst: null | SuspenseInstance = state !== null ? state.dehydrated : null;
+  if (!inst) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+      'Expected to have a hydrated suspense instance.'
     );
   }
-
-  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
+  return getNextHydratableInstanceAfterSuspenseInstance(inst);
 }
 
 function popToNextHostParent(fiber: Fiber): void {
@@ -721,8 +656,8 @@ function popToNextHostParent(fiber: Fiber): void {
       case SuspenseComponent:
         rootOrSingletonContext = false;
         return;
-      case HostSingleton:
       case HostRoot:
+      case HostSingleton:
         rootOrSingletonContext = true;
         return;
       default:
@@ -736,14 +671,9 @@ function popHydrationState(fiber: Fiber): boolean {
     return false;
   }
   if (fiber !== hydrationParentFiber) {
-    // We're deeper than the current hydration context, inside an inserted
-    // tree.
     return false;
   }
   if (!isHydrating) {
-    // If we're not currently hydrating but we're in a hydration context, then
-    // we were an insertion and now need to pop up reenter hydration of our
-    // siblings.
     popToNextHostParent(fiber);
     isHydrating = true;
     return false;
@@ -752,8 +682,6 @@ function popHydrationState(fiber: Fiber): boolean {
   const tag = fiber.tag;
 
   if (supportsSingletons) {
-    // With float we never clear the Root, or Singleton instances. We also do not clear Instances
-    // that have singleton text content
     if (
       tag !== HostRoot &&
       tag !== HostSingleton &&
@@ -763,31 +691,29 @@ function popHydrationState(fiber: Fiber): boolean {
           shouldSetTextContent(fiber.type, fiber.memoizedProps))
       )
     ) {
-      const nextInstance = nextHydratableInstance;
-      if (nextInstance) {
-        warnIfUnhydratedTailNodes(fiber);
+      const next = nextHydratableInstance;
+      if (next) {
+        warnNonHydratedInstance(fiber, next);
         throwOnHydrationMismatch(fiber);
       }
     }
   } else {
-    // If we have any remaining hydratable nodes, we need to delete them now.
-    // We only do this deeper than head and body since they tend to have random
-    // other nodes in them. We also ignore components with pure text content in
-    // side of them. We also don't delete anything inside the root container.
     if (
       tag !== HostRoot &&
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
           !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
     ) {
-      const nextInstance = nextHydratableInstance;
-      if (nextInstance) {
-        warnIfUnhydratedTailNodes(fiber);
+      const next = nextHydratableInstance;
+      if (next) {
+        warnNonHydratedInstance(fiber, next);
         throwOnHydrationMismatch(fiber);
       }
     }
   }
+
   popToNextHostParent(fiber);
+
   if (tag === SuspenseComponent) {
     nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
   } else if (tag === ActivityComponent) {
@@ -798,105 +724,13 @@ function popHydrationState(fiber: Fiber): boolean {
       nextHydratableInstance,
     );
   } else {
-    nextHydratableInstance = hydrationParentFiber
-      ? getNextHydratableSibling(fiber.stateNode)
-      : null;
-  }
-  return true;
-}
-
-function warnIfUnhydratedTailNodes(fiber: Fiber) {
-  if (__DEV__) {
-    let nextInstance = nextHydratableInstance;
-    while (nextInstance) {
-      const diffNode = buildHydrationDiffNode(fiber, 0);
-      const description =
-        describeHydratableInstanceForDevWarnings(nextInstance);
-      diffNode.serverTail.push(description);
-      if (description.type === 'Suspense') {
-        const suspenseInstance: SuspenseInstance = (nextInstance: any);
-        nextInstance =
-          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
-      } else {
-        nextInstance = getNextHydratableSibling(nextInstance);
-      }
-    }
-  }
-}
-
-function resetHydrationState(): void {
-  if (!supportsHydration) {
-    return;
-  }
-
-  hydrationParentFiber = null;
-  nextHydratableInstance = null;
-  isHydrating = false;
-  didSuspendOrErrorDEV = false;
-}
-
-export function upgradeHydrationErrorsToRecoverable(): Array<
-  CapturedValue<mixed>,
-> | null {
-  const queuedErrors = hydrationErrors;
-  if (queuedErrors !== null) {
-    // Successfully completed a forced client render. The errors that occurred
-    // during the hydration attempt are now recovered. We will log them in
-    // commit phase, once the entire tree has finished.
-    queueRecoverableErrors(queuedErrors);
-    hydrationErrors = null;
-  }
-  return queuedErrors;
-}
-
-function getIsHydrating(): boolean {
-  return isHydrating;
-}
-
-export function queueHydrationError(error: CapturedValue<mixed>): void {
-  if (hydrationErrors === null) {
-    hydrationErrors = [error];
-  } else {
-    hydrationErrors.push(error);
+    nextHydratableInstance =
+      hydrationParentFiber !== null
+        ? getNextHydratableSibling(fiber.stateNode)
+        : null;
   }
-}
-
-export function emitPendingHydrationWarnings() {
-  if (__DEV__) {
-    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
-    // hydrated, however, we might still have DEV-only mismatches that we log now.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
-      hydrationDiffRootDEV = null;
-      const diff = describeDiff(diffRoot);
-
-      // Just pick the DFS-first leaf as the owner.
-      // Should be good enough since most warnings only have a single error.
-      let diffOwner: HydrationDiffNode = diffRoot;
-      while (diffOwner.children.length > 0) {
-        diffOwner = diffOwner.children[0];
-      }
 
-      runWithFiberInDEV(diffOwner.fiber, () => {
-        console.error(
-          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
-            'This can happen if a SSR-ed Client Component used:\n' +
-            '\n' +
-            "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-            "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-            "- Date formatting in a user's locale which doesn't match the server.\n" +
-            '- External changing data without sending a snapshot of it along with the HTML.\n' +
-            '- Invalid HTML tag nesting.\n' +
-            '\n' +
-            'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-            '\n' +
-            '%s%s',
-          'https://react.dev/link/hydration-mismatch',
-          diff,
-        );
-      });
-    }
-  }
+  return true;
 }
 
 export {
@@ -916,4 +750,5 @@ export {
   prepareToHydrateHostActivityInstance,
   prepareToHydrateHostSuspenseInstance,
   popHydrationState,
+  emitPendingHydrationWarnings,
 };
\ No newline at end of file
