--- react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual)@@ -1,5 +1,5 @@ /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -33,8 +33,10 @@ import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
 
 import {createCapturedValueAtFiber} from './ReactCapturedValue';
-
-import {createFiberFromDehydratedFragment} from './ReactFiber';
+import {
+  createFiberFromDehydratedFragment,
+  createFiberFromHostInstanceForDeletion,
+} from './ReactFiber';
 import {
   shouldSetTextContent,
   supportsHydration,
@@ -63,6 +65,7 @@   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
+  isHydratableText,
   validateHydratableInstance,
   validateHydratableTextInstance,
 } from './ReactFiberConfig';
@@ -122,10 +125,7 @@     fiber.return,
     distanceFromLeaf + 1,
   ).children;
-  // The same node may already exist in the parent. Since we currently always render depth first
-  // and rerender if we suspend or terminate early, if a shared ancestor was added we should still
-  // be inside of that shared ancestor which means it was the last one to be added. If this changes
-  // we may have to scan the whole set.
+  // The same node may already exist in the parent.
   if (siblings.length > 0 && siblings[siblings.length - 1].fiber === fiber) {
     const existing = siblings[siblings.length - 1];
     if (existing.distanceFromLeaf > distanceFromLeaf) {
@@ -144,17 +144,7 @@   return newNode;
 }
 
-function warnIfHydrating() {
-  if (__DEV__) {
-    if (isHydrating) {
-      console.error(
-        'We should not be hydrating here. This is a bug in React. Please file a bug.',
-      );
-    }
-  }
-}
-
-export function markDidThrowWhileHydratingDEV() {
+function markDidThrowWhileHydratingDEV() {
   if (__DEV__) {
     didSuspendOrErrorDEV = true;
   }
@@ -221,15 +211,65 @@   return true;
 }
 
+function warnForDeletedHydratableInstance(
+  parentType: string,
+  child: HydratableInstance,
+) {
+  if (__DEV__) {
+    const description = describeHydratableInstanceForDevWarnings(child);
+    if (typeof description === 'string') {
+      console.error(
+        'Did not expect server HTML to contain the text node "%s" in <%s>.',
+        description,
+        parentType,
+      );
+    } else {
+      console.error(
+        'Did not expect server HTML to contain a <%s> in <%s>.',
+        description.type,
+        parentType,
+      );
+    }
+  }
+}
+
+function warnForInsertedHydratedElement(parentType: string, tag: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      tag,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedText(parentType: string, text: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching text node for "%s" in <%s>.',
+      text,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedSuspense(parentType: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      'Suspense',
+      parentType,
+    );
+  }
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
   rejectedCandidate: null | HydratableInstance,
 ) {
   if (__DEV__) {
     if (didSuspendOrErrorDEV) {
-      // Inside a boundary that already suspended. We're currently rendering the
-      // siblings of a suspended node. The mismatch may be due to the missing
-      // data, so it's probably a false positive.
+      // Inside a boundary that already suspended.
       return;
     }
 
@@ -250,7 +290,6 @@   nextInstance: any,
   hostContext: HostContext,
 ) {
-  // fiber is a HostComponent Fiber
   const instance = canHydrateInstance(
     nextInstance,
     fiber.type,
@@ -284,7 +323,6 @@ }
 
 function tryHydrateText(fiber: Fiber, nextInstance: any) {
-  // fiber is a HostText Fiber
   const text = fiber.pendingProps;
   const textInstance = canHydrateTextInstance(
     nextInstance,
@@ -294,7 +332,6 @@   if (textInstance !== null) {
     fiber.stateNode = (textInstance: TextInstance);
     hydrationParentFiber = fiber;
-    // Text Instances don't have children so there's nothing to hydrate.
     nextHydratableInstance = null;
     return true;
   }
@@ -305,7 +342,6 @@   fiber: Fiber,
   nextInstance: any,
 ): null | ActivityInstance {
-  // fiber is a ActivityComponent Fiber
   const activityInstance = canHydrateActivityInstance(
     nextInstance,
     rootOrSingletonContext,
@@ -318,17 +354,11 @@       hydrationErrors: null,
     };
     fiber.memoizedState = activityState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
     const dehydratedFragment =
       createFiberFromDehydratedFragment(activityInstance);
     dehydratedFragment.return = fiber;
     fiber.child = dehydratedFragment;
     hydrationParentFiber = fiber;
-    // While an Activity Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
   }
   return activityInstance;
@@ -338,7 +368,6 @@   fiber: Fiber,
   nextInstance: any,
 ): null | SuspenseInstance {
-  // fiber is a SuspenseComponent Fiber
   const suspenseInstance = canHydrateSuspenseInstance(
     nextInstance,
     rootOrSingletonContext,
@@ -351,20 +380,15 @@       hydrationErrors: null,
     };
     fiber.memoizedState = suspenseState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
     const dehydratedFragment =
       createFiberFromDehydratedFragment(suspenseInstance);
     dehydratedFragment.return = fiber;
     fiber.child = dehydratedFragment;
     hydrationParentFiber = fiber;
-    // While a Suspense Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
-  }
-  return suspenseInstance;
+    return suspenseInstance;
+  }
+  return null;
 }
 
 export const HydrationMismatchException: mixed = new Error(
@@ -375,8 +399,6 @@ function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
   let diff = '';
   if (__DEV__) {
-    // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
     const diffRoot = hydrationDiffRootDEV;
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
@@ -384,7 +406,9 @@     }
   }
   const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+    `Hydration failed because the server rendered ${
+      fromText ? 'text' : 'HTML'
+    } didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
 ` +
       '\n' +
       "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
@@ -395,8 +419,9 @@       '\n' +
       'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
       '\n' +
-      'https://react.dev/link/hydration-mismatch' +
-      diff,
+      '%s%s',
+    'https://react.dev/link/hydration-mismatch',
+    diff,
   );
   queueHydrationError(createCapturedValueAtFiber(error, fiber));
   throw HydrationMismatchException;
@@ -446,8 +471,6 @@   if (!isHydrating) {
     return;
   }
-
-  // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
   const shouldKeepWarning = validateHydratableInstance(
     fiber.type,
@@ -474,7 +497,6 @@   const text = fiber.pendingProps;
 
   let shouldKeepWarning = true;
-  // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
   shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
 
@@ -523,18 +545,10 @@       rootOrSingletonContext,
     );
     if (markerInstance) {
-      // Found the marker instance.
       nextHydratableInstance = getNextHydratableSibling(markerInstance);
-      // Return true if this marker instance should use the state passed
-      // to hydrateRoot.
-      // TODO: As an optimization, Fizz should only emit these markers if form
-      // state is passed at the root.
       return isFormStateMarkerMatching(markerInstance);
     }
   }
-  // Should have found a marker instance. Throw an error to trigger client
-  // rendering. We don't bother to check if we're in a concurrent root because
-  // useActionState is a new API, so backwards compat is not an issue.
   throwOnHydrationMismatch(fiber);
   return false;
 }
@@ -551,6 +565,22 @@   }
 
   const instance: Instance = fiber.stateNode;
+  if (__DEV__) {
+    const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
+    if (shouldWarnIfMismatchDev) {
+      const differences = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.memoizedProps,
+        hostContext,
+      );
+      if (differences !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = differences;
+      }
+    }
+  }
+
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
@@ -575,8 +605,6 @@   const textContent: string = fiber.memoizedProps;
   const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
-  // We assume that prepareToHydrateHostTextInstance is called in a context where the
-  // hydration parent is the parent host component of this host text.
   const returnFiber = hydrationParentFiber;
   if (returnFiber !== null) {
     switch (returnFiber.tag) {
@@ -615,7 +643,6 @@         break;
       }
     }
-    // TODO: What if it's a SuspenseInstance?
   }
 
   const didHydrate = hydrateTextInstance(
@@ -649,7 +676,6 @@ 
   hydrateActivityInstance(activityInstance, fiber);
 }
-
 function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
   if (!supportsHydration) {
     throw new Error(
@@ -671,7 +697,6 @@ 
   hydrateSuspenseInstance(suspenseInstance, fiber);
 }
-
 function skipPastDehydratedActivityInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
@@ -692,12 +717,6 @@ function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -736,14 +755,9 @@     return false;
   }
   if (fiber !== hydrationParentFiber) {
-    // We're deeper than the current hydration context, inside an inserted
-    // tree.
     return false;
   }
   if (!isHydrating) {
-    // If we're not currently hydrating but we're in a hydration context, then
-    // we were an insertion and now need to pop up reenter hydration of our
-    // siblings.
     popToNextHostParent(fiber);
     isHydrating = true;
     return false;
@@ -752,16 +766,27 @@   const tag = fiber.tag;
 
   if (supportsSingletons) {
-    // With float we never clear the Root, or Singleton instances. We also do not clear Instances
-    // that have singleton text content
+    if (
+      tag === HostRoot ||
+      tag === HostSingleton ||
+      (tag === HostComponent &&
+        (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
+          shouldSetTextContent(fiber.type, fiber.memoizedProps)))
+    ) {
+      // don't clear
+    } else {
+      const nextInstance = nextHydratableInstance;
+      if (nextInstance) {
+        warnIfUnhydratedTailNodes(fiber);
+        throwOnHydrationMismatch(fiber);
+      }
+    }
+  } else {
     if (
       tag !== HostRoot &&
-      tag !== HostSingleton &&
-      !(
-        tag === HostComponent &&
-        (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
-          shouldSetTextContent(fiber.type, fiber.memoizedProps))
-      )
+      (tag === HostComponent &&
+        shouldDeleteUnhydratedTailInstances(fiber.type) &&
+        !shouldSetTextContent(fiber.type, fiber.memoizedProps))
     ) {
       const nextInstance = nextHydratableInstance;
       if (nextInstance) {
@@ -769,24 +794,8 @@         throwOnHydrationMismatch(fiber);
       }
     }
-  } else {
-    // If we have any remaining hydratable nodes, we need to delete them now.
-    // We only do this deeper than head and body since they tend to have random
-    // other nodes in them. We also ignore components with pure text content in
-    // side of them. We also don't delete anything inside the root container.
-    if (
-      tag !== HostRoot &&
-      (tag !== HostComponent ||
-        (shouldDeleteUnhydratedTailInstances(fiber.type) &&
-          !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
-    ) {
-      const nextInstance = nextHydratableInstance;
-      if (nextInstance) {
-        warnIfUnhydratedTailNodes(fiber);
-        throwOnHydrationMismatch(fiber);
-      }
-    }
-  }
+  }
+
   popToNextHostParent(fiber);
   if (tag === SuspenseComponent) {
     nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
@@ -835,14 +844,11 @@   didSuspendOrErrorDEV = false;
 }
 
-export function upgradeHydrationErrorsToRecoverable(): Array<
+function upgradeHydrationErrorsToRecoverable(): Array<
   CapturedValue<mixed>,
 > | null {
   const queuedErrors = hydrationErrors;
   if (queuedErrors !== null) {
-    // Successfully completed a forced client render. The errors that occurred
-    // during the hydration attempt are now recovered. We will log them in
-    // commit phase, once the entire tree has finished.
     queueRecoverableErrors(queuedErrors);
     hydrationErrors = null;
   }
@@ -853,7 +859,7 @@   return isHydrating;
 }
 
-export function queueHydrationError(error: CapturedValue<mixed>): void {
+function queueHydrationError(error: CapturedValue<mixed>): void {
   if (hydrationErrors === null) {
     hydrationErrors = [error];
   } else {
@@ -863,15 +869,12 @@ 
 export function emitPendingHydrationWarnings() {
   if (__DEV__) {
-    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
-    // hydrated, however, we might still have DEV-only mismatches that we log now.
     const diffRoot = hydrationDiffRootDEV;
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
       const diff = describeDiff(diffRoot);
 
-      // Just pick the DFS-first leaf as the owner.
-      // Should be good enough since most warnings only have a single error.
+      // pick DFS leaf as owner
       let diffOwner: HydrationDiffNode = diffRoot;
       while (diffOwner.children.length > 0) {
         diffOwner = diffOwner.children[0];
@@ -916,4 +919,7 @@   prepareToHydrateHostActivityInstance,
   prepareToHydrateHostSuspenseInstance,
   popHydrationState,
+  upgradeHydrationErrorsToRecoverable,
+  queueHydrationError,
+  emitPendingHydrationWarnings,
 };