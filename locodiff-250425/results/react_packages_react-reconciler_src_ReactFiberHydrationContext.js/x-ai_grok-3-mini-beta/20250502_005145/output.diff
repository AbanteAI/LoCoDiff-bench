--- react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual)@@ -17,11 +17,9 @@   Container,
   HostContext,
 } from './ReactFiberConfig';
-import type {ActivityState} from './ReactFiberActivityComponent';
 import type {SuspenseState} from './ReactFiberSuspenseComponent';
 import type {TreeContext} from './ReactFiberTreeContext';
 import type {CapturedValue} from './ReactCapturedValue';
-import type {HydrationDiffNode} from './ReactFiberHydrationDiffs';
 
 import {
   HostComponent,
@@ -31,8 +29,6 @@   ActivityComponent,
 } from './ReactWorkTags';
 import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
-
-import {createCapturedValueAtFiber} from './ReactCapturedValue';
 
 import {createFiberFromDehydratedFragment} from './ReactFiber';
 import {
@@ -51,7 +47,6 @@   describeHydratableInstanceForDevWarnings,
   hydrateTextInstance,
   diffHydratedTextForDevWarnings,
-  hydrateActivityInstance,
   hydrateSuspenseInstance,
   getNextHydratableInstanceAfterActivityInstance,
   getNextHydratableInstanceAfterSuspenseInstance,
@@ -63,8 +58,6 @@   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
-  validateHydratableInstance,
-  validateHydratableTextInstance,
 } from './ReactFiberConfig';
 import {OffscreenLane} from './ReactFiberLane';
 import {
@@ -74,7 +67,7 @@ import {queueRecoverableErrors} from './ReactFiberWorkLoop';
 import {getRootHostContainer, getHostContext} from './ReactFiberHostContext';
 import {describeDiff} from './ReactFiberHydrationDiffs';
-import {runWithFiberInDEV} from './ReactCurrentFiber';
+import {createCapturedValueAtFiber} from './ReactCapturedValue';
 
 // The deepest Fiber on the stack involved in a hydration context.
 // This may have been an insertion or a hydration.
@@ -105,7 +98,7 @@       hydrationDiffRootDEV = {
         fiber: fiber,
         children: [],
-        serverProps: undefined,
+        serverProps: null,
         serverTail: [],
         distanceFromLeaf: distanceFromLeaf,
       };
@@ -136,7 +129,7 @@   const newNode: HydrationDiffNode = {
     fiber: fiber,
     children: [],
-    serverProps: undefined,
+    serverProps: null,
     serverTail: [],
     distanceFromLeaf: distanceFromLeaf,
   };
@@ -245,36 +238,16 @@   }
 }
 
-function tryHydrateInstance(
-  fiber: Fiber,
-  nextInstance: any,
-  hostContext: HostContext,
-) {
+function tryHydrateInstance(fiber: Fiber, nextInstance: any, hostContext: any) {
   // fiber is a HostComponent Fiber
   const instance = canHydrateInstance(
     nextInstance,
     fiber.type,
     fiber.pendingProps,
-    rootOrSingletonContext,
+    hostContext,
   );
   if (instance !== null) {
     fiber.stateNode = (instance: Instance);
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          hostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
     hydrationParentFiber = fiber;
     nextHydratableInstance = getFirstHydratableChild(instance);
     rootOrSingletonContext = false;
@@ -283,22 +256,21 @@   return false;
 }
 
-function tryHydrateText(fiber: Fiber, nextInstance: any) {
+function tryHydrateText(
+  fiber: Fiber,
+  nextInstance: any,
+): null | (TextInstance) {
   // fiber is a HostText Fiber
   const text = fiber.pendingProps;
-  const textInstance = canHydrateTextInstance(
-    nextInstance,
-    text,
-    rootOrSingletonContext,
-  );
+  const textInstance = canHydrateTextInstance(nextInstance, text, false);
   if (textInstance !== null) {
     fiber.stateNode = (textInstance: TextInstance);
     hydrationParentFiber = fiber;
     // Text Instances don't have children so there's nothing to hydrate.
     nextHydratableInstance = null;
-    return true;
-  }
-  return false;
+    return textInstance;
+  }
+  return null;
 }
 
 function tryHydrateActivity(
@@ -320,7 +292,7 @@     fiber.memoizedState = activityState;
     // Store the dehydrated fragment as a child fiber.
     // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
+    // since it doesn't have to consider all Activity boundaries and
     // check if they're dehydrated ones or not.
     const dehydratedFragment =
       createFiberFromDehydratedFragment(activityInstance);
@@ -376,7 +348,6 @@   let diff = '';
   if (__DEV__) {
     // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
     const diffRoot = hydrationDiffRootDEV;
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
@@ -385,9 +356,8 @@   }
   const error = new Error(
     `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
-` +
-      '\n' +
-      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
+    ` +
+      "- A server/client branch or non-serializable value.\n" +
       "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
       "- Date formatting in a user's locale which doesn't match the server.\n" +
       '- External changing data without sending a snapshot of it along with the HTML.\n' +
@@ -395,8 +365,9 @@       '\n' +
       'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
       '\n' +
-      'https://react.dev/link/hydration-mismatch' +
-      diff,
+      '%s%s',
+    'https://react.dev/link/hydration-mismatch',
+    diff,
   );
   queueHydrationError(createCapturedValueAtFiber(error, fiber));
   throw HydrationMismatchException;
@@ -426,7 +397,7 @@           currentHostContext,
         );
         if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
+          const diffNode = buildHydrationDiffNode(fiber);
           diffNode.serverProps = differences;
         }
       }
@@ -483,7 +454,7 @@     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -499,11 +470,11 @@   return activityInstance;
 }
 
-function claimNextHydratableSuspenseInstance(fiber: Fiber): SuspenseInstance {
+function claimNextHydratableSuspenseInstance(
+  fiber: Fiber,
+): SuspenseInstance {
   const nextInstance = nextHydratableInstance;
-  const suspenseInstance = nextInstance
-    ? tryHydrateSuspense(fiber, nextInstance)
-    : null;
+  const suspenseInstance = nextInstance ? tryHydrateSuspense(fiber, nextInstance) : null;
   if (suspenseInstance === null) {
     warnNonHydratedInstance(fiber, nextInstance);
     throw throwOnHydrationMismatch(fiber);
@@ -559,70 +530,25 @@     fiber,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
-    throwOnHydrationMismatch(fiber, true);
+    throwOnHydrationMismatch(fiber);
   }
 }
 
 function prepareToHydrateHostTextInstance(fiber: Fiber): void {
-  if (!supportsHydration) {
+  if (!supportsHydratation) {
     throw new Error(
-      'Expected prepareToHydrateHostTextInstance() to never be called. ' +
+      'Expected prepareToHypdrateHostTextInstance() to never be called. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
-  let parentProps = null;
-  // We assume that prepareToHydrateHostTextInstance is called in a context where the
-  // hydration parent is the parent host component of this host text.
-  const returnFiber = hydrationParentFiber;
-  if (returnFiber !== null) {
-    switch (returnFiber.tag) {
-      case HostRoot: {
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
-      case HostSingleton:
-      case HostComponent: {
-        parentProps = returnFiber.memoizedProps;
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
-    }
-    // TODO: What if it's a SuspenseInstance?
-  }
-
   const didHydrate = hydrateTextInstance(
     textInstance,
     textContent,
     fiber,
-    parentProps,
+    null,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
     throwOnHydrationMismatch(fiber, true);
@@ -657,7 +583,6 @@         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -677,7 +602,7 @@ ): null | HydratableInstance {
   const activityState: null | ActivityState = fiber.memoizedState;
   const activityInstance: null | ActivityInstance =
-    activityState !== null ? activityState.dehydrated : null;
+    activityState != null ? activityState.dehydrated : null;
 
   if (!activityInstance) {
     throw new Error(
@@ -692,15 +617,9 @@ function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
-    suspenseState !== null ? suspenseState.dehydrated : null;
+    suspenseState != null ? suspenseState.dehydrated : null;
 
   if (!suspenseInstance) {
     throw new Error(
@@ -738,14 +657,6 @@   if (fiber !== hydrationParentFiber) {
     // We're deeper than the current hydration context, inside an inserted
     // tree.
-    return false;
-  }
-  if (!isHydrating) {
-    // If we're not currently hydrating but we're in a hydration context, then
-    // we were an insertion and now need to pop up reenter hydration of our
-    // siblings.
-    popToNextHostParent(fiber);
-    isHydrating = true;
     return false;
   }
 
@@ -824,79 +735,15 @@   }
 }
 
-function resetHydrationState(): void {
-  if (!supportsHydration) {
-    return;
-  }
-
-  hydrationParentFiber = null;
-  nextHydratableInstance = null;
-  isHydrating = false;
-  didSuspendOrErrorDEV = false;
-}
-
 export function upgradeHydrationErrorsToRecoverable(): Array<
   CapturedValue<mixed>,
 > | null {
   const queuedErrors = hydrationErrors;
   if (queuedErrors !== null) {
-    // Successfully completed a forced client render. The errors that occurred
-    // during the hydration attempt are now recovered. We will log them in
-    // commit phase, once the entire tree has finished.
     queueRecoverableErrors(queuedErrors);
     hydrationErrors = null;
   }
   return queuedErrors;
-}
-
-function getIsHydrating(): boolean {
-  return isHydrating;
-}
-
-export function queueHydrationError(error: CapturedValue<mixed>): void {
-  if (hydrationErrors === null) {
-    hydrationErrors = [error];
-  } else {
-    hydrationErrors.push(error);
-  }
-}
-
-export function emitPendingHydrationWarnings() {
-  if (__DEV__) {
-    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
-    // hydrated, however, we might still have DEV-only mismatches that we log now.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
-      hydrationDiffRootDEV = null;
-      const diff = describeDiff(diffRoot);
-
-      // Just pick the DFS-first leaf as the owner.
-      // Should be good enough since most warnings only have a single error.
-      let diffOwner: HydrationDiffNode = diffRoot;
-      while (diffOwner.children.length > 0) {
-        diffOwner = diffOwner.children[0];
-      }
-
-      runWithFiberInDEV(diffOwner.fiber, () => {
-        console.error(
-          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
-            'This can happen if a SSR-ed Client Component used:\n' +
-            '\n' +
-            "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-            "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-            "- Date formatting in a user's locale which doesn't match the server.\n" +
-            '- External changing data without sending a snapshot of it along with the HTML.\n' +
-            '- Invalid HTML tag nesting.\n' +
-            '\n' +
-            'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-            '\n' +
-            '%s%s',
-          'https://react.dev/link/hydration-mismatch',
-          diff,
-        );
-      });
-    }
-  }
 }
 
 export {
@@ -908,7 +755,7 @@   resetHydrationState,
   claimHydratableSingleton,
   tryToClaimNextHydratableInstance,
-  tryToClaimNextHydratableTextInstance,
+  tryToClaimNextHydratable supersedeTextInstance,
   claimNextHydratableActivityInstance,
   claimNextHydratableSuspenseInstance,
   prepareToHydrateHostInstance,
@@ -916,4 +763,5 @@   prepareToHydrateHostActivityInstance,
   prepareToHydrateHostSuspenseInstance,
   popHydrationState,
+  emitPendingHydrationWarnings,
 };