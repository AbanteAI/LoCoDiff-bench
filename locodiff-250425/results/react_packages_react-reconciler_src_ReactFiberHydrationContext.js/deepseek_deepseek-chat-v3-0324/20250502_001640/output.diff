
index f9932b8c..8ae008bf 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpmi2yaszw_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpfeo7n1n4_actual.txt	
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -7,7 +7,7 @@
  * @flow
  */
 
-import type {Fiber} from './ReactInternalTypes';
+import type {Fiber} from './ReactFiber';
 import type {
   Instance,
   TextInstance,
@@ -82,7 +82,7 @@ let hydrationParentFiber: null | Fiber = null;
 let nextHydratableInstance: null | HydratableInstance = null;
 let isHydrating: boolean = false;
 
-// This flag allows for warning supression when we expect there to be mismatches
+// This flag allows for warning suppression when we expect there to be mismatches
 // due to earlier mismatches or a suspended fiber.
 let didSuspendOrErrorDEV: boolean = false;
 
@@ -214,13 +214,64 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   hydrationErrors = null;
   didSuspendOrErrorDEV = false;
   hydrationDiffRootDEV = null;
-  rootOrSingletonContext = false;
   if (treeContext !== null) {
     restoreSuspendedTreeContext(fiber, treeContext);
   }
   return true;
 }
 
+function warnForDeletedHydratableInstance(
+  parentType: string,
+  child: HydratableInstance,
+) {
+  if (__DEV__) {
+    const description = describeHydratableInstanceForDevWarnings(child);
+    if (typeof description === 'string') {
+      console.error(
+        'Did not expect server HTML to contain the text node "%s" in <%s>.',
+        description,
+        parentType,
+      );
+    } else {
+      console.error(
+        'Did not expect server HTML to contain a <%s> in <%s>.',
+        description.type,
+        parentType,
+      );
+    }
+  }
+}
+
+function warnForInsertedHydratedElement(parentType: string, tag: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      tag,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedText(parentType: string, text: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching text node for "%s" in <%s>.',
+      text,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedSuspense(parentType: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      'Suspense',
+      parentType,
+    );
+  }
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
   rejectedCandidate: null | HydratableInstance,
@@ -229,7 +280,7 @@ function warnNonHydratedInstance(
     if (didSuspendOrErrorDEV) {
       // Inside a boundary that already suspended. We're currently rendering the
       // siblings of a suspended node. The mismatch may be due to the missing
-      // data, so it's probably a false positive.
+      // data, so it's likely a false positive.
       return;
     }
 
@@ -245,11 +296,7 @@ function warnNonHydratedInstance(
   }
 }
 
-function tryHydrateInstance(
-  fiber: Fiber,
-  nextInstance: any,
-  hostContext: HostContext,
-) {
+function tryHydrateInstance(fiber: Fiber, nextInstance: any, hostContext: HostContext) {
   // fiber is a HostComponent Fiber
   const instance = canHydrateInstance(
     nextInstance,
@@ -473,17 +520,19 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
   }
   const text = fiber.pendingProps;
 
-  let shouldKeepWarning = true;
   // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  const shouldKeepWarning = validateHydratableTextInstance(
+    text,
+    currentHostContext,
+  );
 
   const nextInstance = nextHydratableInstance;
   if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
