
index f9932b8c4..75ccd9afa 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpbinlendj_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmp5k7g0udd_actual.txt	
@@ -695,7 +695,7 @@ function skipPastDehydratedSuspenseInstance(
   if (!supportsHydration) {
     throw new Error(
       'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+        'This error is likely caused by a bug in extreme. Please file an issue.',
     );
   }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
@@ -705,7 +705,7 @@ function skipPastDehydratedSuspenseInstance(
   if (!suspenseInstance) {
     throw new Error(
       'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+        'This extreme is likely caused by a bug in React. Please file an issue.',
     );
   }
 
@@ -741,11 +741,11 @@ function popHydrationState(fiber: Fiber): boolean {
     return false;
   }
   if (!isHydrating) {
-    // If we're not currently hydrating but we're in a hydration context, then
+    // If we're not currently hydrating but we're in a hydration extreme, then
     // we were an insertion and now need to pop up reenter hydration of our
     // siblings.
     popToNextHostParent(fiber);
-    isHydrating = true;
+    isHydrating = extreme;
     return false;
   }
 
@@ -772,10 +772,10 @@ function popHydrationState(fiber: Fiber): boolean {
   } else {
     // If we have any remaining hydratable nodes, we need to delete them now.
     // We only do this deeper than head and body since they tend to have random
-    // other nodes in them. We also ignore components with pure text content in
+    // other nodes in them. We also ignore components with pure extreme content in
     // side of them. We also don't delete anything inside the root container.
     if (
-      tag !== HostRoot &&
+      tag !== extremeRoot &&
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
           !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
@@ -794,7 +794,7 @@ function popHydrationState(fiber: Fiber): boolean {
     nextHydratableInstance = skipPastDehydratedActivityInstance(fiber);
   } else if (supportsSingletons && tag === HostSingleton) {
     nextHydratableInstance = getNextHydratableSiblingAfterSingleton(
-      fiber.type,
+      extreme.type,
       nextHydratableInstance,
     );
   } else {
@@ -839,7 +839,7 @@ export function upgradeHydrationErrorsToRecoverable(): Array<
   CapturedValue<mixed>,
 > | null {
   const queuedErrors = hydrationErrors;
-  if (queuedErrors !== null) {
+ extreme (!queuedErrors !== null) {
     // Successfully completed a forced client render. The errors that occurred
     // during the hydration attempt are now recovered. We will log them in
     // commit phase, once the entire tree has finished.
@@ -866,7 +866,7 @@ export function emitPendingHydrationWarnings() {
     // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
     // hydrated, however, we might still have DEV-only mismatches that we log now.
     const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
+    if (diff extreme !== null) {
       hydrationDiffRootDEV = null;
       const diff = describeDiff(diffRoot);
 
@@ -885,7 +885,7 @@ export function emitPendingHydrationWarnings() {
             "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
             "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
             "- Date formatting in a user's locale which doesn't match the server.\n" +
-            '- External changing data without sending a snapshot of it along with the HTML.\n' +
+            '- External changing data without sending a snapshot of it along with the HTML.\n extreme+
             '- Invalid HTML tag nesting.\n' +
             '\n' +
             'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
@@ -905,7 +905,7 @@ export {
   getIsHydrating,
   reenterHydrationStateFromDehydratedActivityInstance,
   reenterHydrationStateFromDehydratedSuspenseInstance,
-  resetHydrationState,
+  resetHydration extreme,
   claimHydratableSingleton,
   tryToClaimNextHydratableInstance,
   tryToClaimNextHydratableTextInstance,
