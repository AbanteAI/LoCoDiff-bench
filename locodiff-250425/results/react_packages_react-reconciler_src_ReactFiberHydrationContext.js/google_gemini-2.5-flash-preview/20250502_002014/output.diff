
index f9932b8c..9652bd87 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmp10snbsca_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpk3ujrc3i_actual.txt	
@@ -166,8 +166,9 @@ function enterHydrationState(fiber: Fiber): boolean {
   }
 
   const parentInstance: Container = fiber.stateNode.containerInfo;
-  nextHydratableInstance =
-    getFirstHydratableChildWithinContainer(parentInstance);
+  nextHydratableInstance = getFirstHydratableChildWithinContainer(
+    parentInstance,
+  );
   hydrationParentFiber = fiber;
   isHydrating = true;
   hydrationErrors = null;
@@ -207,8 +208,9 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   if (!supportsHydration) {
     return false;
   }
-  nextHydratableInstance =
-    getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
+  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(
+    suspenseInstance,
+  );
   hydrationParentFiber = fiber;
   isHydrating = true;
   hydrationErrors = null;
@@ -316,6 +318,7 @@ function tryHydrateActivity(
       treeContext: getSuspendedTreeContext(),
       retryLane: OffscreenLane,
       hydrationErrors: null,
+      // TODO: Add retryTime field.
     };
     fiber.memoizedState = activityState;
     // Store the dehydrated fragment as a child fiber.
@@ -349,6 +352,7 @@ function tryHydrateSuspense(
       treeContext: getSuspendedTreeContext(),
       retryLane: OffscreenLane,
       hydrationErrors: null,
+      // TODO: Add retryTime field.
     };
     fiber.memoizedState = suspenseState;
     // Store the dehydrated fragment as a child fiber.
@@ -483,7 +487,7 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -573,7 +577,6 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
@@ -582,6 +585,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
     switch (returnFiber.tag) {
       case HostRoot: {
         if (__DEV__) {
+          const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
           if (shouldWarnIfMismatchDev) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
@@ -600,6 +604,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
       case HostComponent: {
         parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
+          const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
           if (shouldWarnIfMismatchDev) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
@@ -681,7 +686,7 @@ function skipPastDehydratedActivityInstance(
 
   if (!activityInstance) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
+      'Expected to have a dehydrated activity instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
@@ -692,19 +697,13 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
 
   if (!suspenseInstance) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
+      'Expected to have a dehydrated suspense instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
@@ -749,11 +748,12 @@ function popHydrationState(fiber: Fiber): boolean {
     return false;
   }
 
+  // If we have any remaining hydratable nodes, we need to delete them now.
+  // We only do this deeper than head and body since they tend to have random
+  // other nodes in them. We also ignore components with pure text content in
+  // side of them. We also don't delete anything inside the root container.
   const tag = fiber.tag;
-
   if (supportsSingletons) {
-    // With float we never clear the Root, or Singleton instances. We also do not clear Instances
-    // that have singleton text content
     if (
       tag !== HostRoot &&
       tag !== HostSingleton &&
@@ -761,7 +761,9 @@ function popHydrationState(fiber: Fiber): boolean {
         tag === HostComponent &&
         (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
           shouldSetTextContent(fiber.type, fiber.memoizedProps))
-      )
+      ) &&
+      tag !== ActivityComponent &&
+      tag !== SuspenseComponent
     ) {
       const nextInstance = nextHydratableInstance;
       if (nextInstance) {
@@ -770,15 +772,13 @@ function popHydrationState(fiber: Fiber): boolean {
       }
     }
   } else {
-    // If we have any remaining hydratable nodes, we need to delete them now.
-    // We only do this deeper than head and body since they tend to have random
-    // other nodes in them. We also ignore components with pure text content in
-    // side of them. We also don't delete anything inside the root container.
     if (
       tag !== HostRoot &&
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
-          !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
+          !shouldSetTextContent(fiber.type, fiber.memoizedProps))) &&
+      tag !== ActivityComponent &&
+      tag !== SuspenseComponent
     ) {
       const nextInstance = nextHydratableInstance;
       if (nextInstance) {
@@ -817,6 +817,10 @@ function warnIfUnhydratedTailNodes(fiber: Fiber) {
         const suspenseInstance: SuspenseInstance = (nextInstance: any);
         nextInstance =
           getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
+      } else if (description.type === 'Activity') {
+        const activityInstance: ActivityInstance = (nextInstance: any);
+        nextInstance =
+          getNextHydratableInstanceAfterActivityInstance(activityInstance);
       } else {
         nextInstance = getNextHydratableSibling(nextInstance);
       }
