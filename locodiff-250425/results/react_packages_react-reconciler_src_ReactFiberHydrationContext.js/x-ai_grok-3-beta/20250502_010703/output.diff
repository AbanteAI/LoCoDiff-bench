--- react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual)@@ -49,9 +49,9 @@   hydrateInstance,
   diffHydratedPropsForDevWarnings,
   describeHydratableInstanceForDevWarnings,
+  hydrateActivityInstance,
   hydrateTextInstance,
   diffHydratedTextForDevWarnings,
-  hydrateActivityInstance,
   hydrateSuspenseInstance,
   getNextHydratableInstanceAfterActivityInstance,
   getNextHydratableInstanceAfterSuspenseInstance,
@@ -207,8 +207,9 @@   if (!supportsHydration) {
     return false;
   }
-  nextHydratableInstance =
-    getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
+  nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(
+    suspenseInstance,
+  );
   hydrationParentFiber = fiber;
   isHydrating = true;
   hydrationErrors = null;
@@ -471,19 +472,21 @@   if (!isHydrating) {
     return;
   }
-  const text = fiber.pendingProps;
 
   let shouldKeepWarning = true;
   // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  shouldKeepWarning = validateHydratableTextInstance(
+    fiber.pendingProps,
+    currentHostContext,
+  );
 
   const nextInstance = nextHydratableInstance;
   if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -573,7 +576,6 @@ 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
@@ -582,7 +584,7 @@     switch (returnFiber.tag) {
       case HostRoot: {
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
@@ -600,7 +602,7 @@       case HostComponent: {
         parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
@@ -692,12 +694,6 @@ function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
