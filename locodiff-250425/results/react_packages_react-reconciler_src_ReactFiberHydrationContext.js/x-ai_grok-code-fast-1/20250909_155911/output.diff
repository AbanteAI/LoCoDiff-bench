
index f9932b8c4..81a84daa1 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpw_oz5m2g_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmp2srxqc6p_actual.txt	
@@ -63,6 +63,7 @@ import {
   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
+  isHydratableText,
   validateHydratableInstance,
   validateHydratableTextInstance,
 } from './ReactFiberConfig';
@@ -82,7 +83,7 @@ let hydrationParentFiber: null | Fiber = null;
 let nextHydratableInstance: null | HydratableInstance = null;
 let isHydrating: boolean = false;
 
-// This flag allows for warning supression when we expect there to be mismatches
+// This flag allows for warning suppression when we expect there to be mismatches
 // due to earlier mismatches or a suspended fiber.
 let didSuspendOrErrorDEV: boolean = false;
 
@@ -376,7 +377,6 @@ function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
   let diff = '';
   if (__DEV__) {
     // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
     const diffRoot = hydrationDiffRootDEV;
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
@@ -384,7 +384,9 @@ function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
     }
   }
   const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+    `Hydration failed because the server rendered ${
+      fromText ? 'text' : 'HTML'
+    } didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
 ` +
       '\n' +
       "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
@@ -455,6 +457,7 @@ function tryToClaimNextHydratableInstance(fiber: Fiber): void {
     currentHostContext,
   );
 
+  const initialInstance = nextHydratableInstance;
   const nextInstance = nextHydratableInstance;
   if (
     !nextInstance ||
@@ -474,10 +477,16 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
   const text = fiber.pendingProps;
 
   let shouldKeepWarning = true;
-  // Validate that this is ok to render here before any mismatches.
-  const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  // We assume that prepareToHydrateHostTextInstance is called in a context where the
+  // hydration parent is the parent host component of this host text.
+  const returnFiber = hydrationParentFiber;
+  if (returnFiber !== null) {
+    // Validate that this is ok to render here before any mismatches.
+    const currentHostContext = getHostContext();
+    shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  }
 
+  const initialInstance = nextHydratableInstance;
   const nextInstance = nextHydratableInstance;
   if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
     if (shouldKeepWarning) {
@@ -554,7 +563,7 @@ function prepareToHydrateHostInstance(
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
-    fiber.memoizedProps,
+    fiber.pendingProps,
     hostContext,
     fiber,
   );
@@ -573,8 +582,6 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
-  let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
   const returnFiber = hydrationParentFiber;
@@ -582,11 +589,11 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
     switch (returnFiber.tag) {
       case HostRoot: {
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
-              parentProps,
+              null,
             );
             if (difference !== null) {
               const diffNode = buildHydrationDiffNode(fiber, 0);
@@ -598,13 +605,12 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
       }
       case HostSingleton:
       case HostComponent: {
-        parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
-              parentProps,
+              returnFiber.memoizedProps,
             );
             if (difference !== null) {
               const diffNode = buildHydrationDiffNode(fiber, 0);
@@ -615,14 +621,13 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
         break;
       }
     }
-    // TODO: What if it's a SuspenseInstance?
   }
 
   const didHydrate = hydrateTextInstance(
     textInstance,
     textContent,
     fiber,
-    parentProps,
+    null,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
     throwOnHydrationMismatch(fiber, true);
@@ -657,7 +662,6 @@ function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -692,12 +696,6 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -869,7 +867,6 @@ export function emitPendingHydrationWarnings() {
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
       const diff = describeDiff(diffRoot);
-
       // Just pick the DFS-first leaf as the owner.
       // Should be good enough since most warnings only have a single error.
       let diffOwner: HydrationDiffNode = diffRoot;
