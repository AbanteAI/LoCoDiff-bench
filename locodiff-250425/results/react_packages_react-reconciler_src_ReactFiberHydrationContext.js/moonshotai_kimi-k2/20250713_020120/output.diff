
index f9932b8c4..b489a3b57 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpumce2u1u_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpr3mis_ar_actual.txt	
@@ -26,15 +26,15 @@ import type {HydrationDiffNode} from './ReactFiberHydrationDiffs';
 import {
   HostComponent,
   HostSingleton,
+  HostText,
   HostRoot,
   SuspenseComponent,
   ActivityComponent,
 } from './ReactWorkTags';
 import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
 
-import {createCapturedValueAtFiber} from './ReactCapturedValue';
-
 import {createFiberFromDehydratedFragment} from './ReactFiber';
+import {createCapturedValueAtFiber} from './ReactCapturedValue';
 import {
   shouldSetTextContent,
   supportsHydration,
@@ -221,6 +221,98 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   return true;
 }
 
+function warnForDeletedHydratableInstance(
+  parentType: string,
+  child: HydratableInstance,
+) {
+  if (__DEV__) {
+    const description = describeHydratableInstanceForDevWarnings(child);
+    if (typeof description === 'string') {
+      console.error(
+        'Did not expect server HTML to contain the text node "%s" in <%s>.',
+        description,
+        parentType,
+      );
+    } else {
+      console.error(
+        'Did not expect server HTML to contain a <%s> in <%s>.',
+        description.type,
+        parentType,
+      );
+    }
+  }
+}
+
+function warnForInsertedHydratedElement(parentType: string, tag: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      tag,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedText(parentType: string, text: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching text node for "%s" in <%s>.',
+      text,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedSuspense(parentType: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      'Suspense',
+      parentType,
+    );
+  }
+}
+
+function warnUnhydratedInstance(
+  returnFiber: Fiber,
+  instance: HydratableInstance,
+) {
+  if (__DEV__) {
+    if (didWarnInvalidHydration) {
+      return;
+    }
+    didWarnInvalidHydration = true;
+    switch (returnFiber.tag) {
+      case HostRoot: {
+        const description = describeHydratableInstanceForDevWarnings(instance);
+        if (typeof description === 'string') {
+          console.error(
+            'Did not expect server HTML to contain the text node "%s" in the root.',
+            description,
+          );
+        } else {
+          console.error(
+            'Did not expect server HTML to contain a <%s> in the root.',
+            description.type,
+          );
+        }
+        break;
+      }
+      case HostSingleton:
+      case HostComponent: {
+        warnForDeletedHydratableInstance(returnFiber.type, instance);
+        break;
+      }
+      case SuspenseComponent: {
+        const suspenseState: SuspenseState = returnFiber.memoizedState;
+        if (suspenseState.dehydrated !== null)
+          warnForDeletedHydratableInstance('Suspense', instance);
+        break;
+      }
+    }
+  }
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
   rejectedCandidate: null | HydratableInstance,
@@ -259,31 +351,18 @@ function tryHydrateInstance(
   );
   if (instance !== null) {
     fiber.stateNode = (instance: Instance);
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          hostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
     hydrationParentFiber = fiber;
     nextHydratableInstance = getFirstHydratableChild(instance);
     rootOrSingletonContext = false;
-    return true;
+    return instance;
   }
-  return false;
+  return null;
 }
 
-function tryHydrateText(fiber: Fiber, nextInstance: any) {
+function tryHydrateText(
+  fiber: Fiber,
+  nextInstance: any,
+) {
   // fiber is a HostText Fiber
   const text = fiber.pendingProps;
   const textInstance = canHydrateTextInstance(
@@ -296,9 +375,9 @@ function tryHydrateText(fiber: Fiber, nextInstance: any) {
     hydrationParentFiber = fiber;
     // Text Instances don't have children so there's nothing to hydrate.
     nextHydratableInstance = null;
-    return true;
+    return textInstance;
   }
-  return false;
+  return null;
 }
 
 function tryHydrateActivity(
@@ -330,8 +409,9 @@ function tryHydrateActivity(
     // While an Activity Instance does have children, we won't step into
     // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
+    return activityInstance;
   }
-  return activityInstance;
+  return null;
 }
 
 function tryHydrateSuspense(
@@ -363,8 +443,9 @@ function tryHydrateSuspense(
     // While a Suspense Instance does have children, we won't step into
     // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
+    return suspenseInstance;
   }
-  return suspenseInstance;
+  return null;
 }
 
 export const HydrationMismatchException: mixed = new Error(
@@ -384,7 +465,9 @@ function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
     }
   }
   const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+    `Hydration failed because the server rendered ${
+      fromText ? 'text' : 'HTML'
+    } didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
 ` +
       '\n' +
       "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
@@ -416,22 +499,6 @@ function claimHydratableSingleton(fiber: Fiber): void {
       currentHostContext,
       false,
     ));
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          currentHostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
     hydrationParentFiber = fiber;
     rootOrSingletonContext = true;
     nextHydratableInstance = getFirstHydratableChildWithinSingleton(
@@ -456,10 +523,7 @@ function tryToClaimNextHydratableInstance(fiber: Fiber): void {
   );
 
   const nextInstance = nextHydratableInstance;
-  if (
-    !nextInstance ||
-    !tryHydrateInstance(fiber, nextInstance, currentHostContext)
-  ) {
+  if (!nextInstance || !tryHydrateInstance(fiber, nextInstance, currentHostContext)) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
@@ -483,11 +547,13 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
-function claimNextHydratableActivityInstance(fiber: Fiber): ActivityInstance {
+function claimNextHydratableActivityInstance(
+  fiber: Fiber,
+): ActivityInstance {
   const nextInstance = nextHydratableInstance;
   const activityInstance = nextInstance
     ? tryHydrateActivity(fiber, nextInstance)
@@ -499,7 +565,9 @@ function claimNextHydratableActivityInstance(fiber: Fiber): ActivityInstance {
   return activityInstance;
 }
 
-function claimNextHydratableSuspenseInstance(fiber: Fiber): SuspenseInstance {
+function claimNextHydratableSuspenseInstance(
+  fiber: Fiber,
+): SuspenseInstance {
   const nextInstance = nextHydratableInstance;
   const suspenseInstance = nextInstance
     ? tryHydrateSuspense(fiber, nextInstance)
@@ -573,7 +641,6 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
@@ -582,7 +649,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
     switch (returnFiber.tag) {
       case HostRoot: {
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
@@ -600,7 +667,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
       case HostComponent: {
         parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
+          if (!didSuspendOrErrorDEV) {
             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
@@ -614,8 +681,8 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
         }
         break;
       }
+      // TODO: What if it's a SuspenseInstance?
     }
-    // TODO: What if it's a SuspenseInstance?
   }
 
   const didHydrate = hydrateTextInstance(
@@ -657,7 +724,6 @@ function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -681,7 +747,7 @@ function skipPastDehydratedActivityInstance(
 
   if (!activityInstance) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
+      'Expected to have a hydrated activity instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
@@ -692,12 +758,6 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -817,6 +877,10 @@ function warnIfUnhydratedTailNodes(fiber: Fiber) {
         const suspenseInstance: SuspenseInstance = (nextInstance: any);
         nextInstance =
           getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
+      } else if (description.type === 'Activity') {
+        const activityInstance: ActivityInstance = (nextInstance: any);
+        nextInstance =
+          getNextHydratableInstanceAfterActivityInstance(activityInstance);
       } else {
         nextInstance = getNextHydratableSibling(nextInstance);
       }
@@ -833,6 +897,7 @@ function resetHydrationState(): void {
   nextHydratableInstance = null;
   isHydrating = false;
   didSuspendOrErrorDEV = false;
+  hydrationDiffRootDEV = null;
 }
 
 export function upgradeHydrationErrorsToRecoverable(): Array<
@@ -849,10 +914,6 @@ export function upgradeHydrationErrorsToRecoverable(): Array<
   return queuedErrors;
 }
 
-function getIsHydrating(): boolean {
-  return isHydrating;
-}
-
 export function queueHydrationError(error: CapturedValue<mixed>): void {
   if (hydrationErrors === null) {
     hydrationErrors = [error];
@@ -899,6 +960,10 @@ export function emitPendingHydrationWarnings() {
   }
 }
 
+function getIsHydrating(): boolean {
+  return isHydrating;
+}
+
 export {
   warnIfHydrating,
   enterHydrationState,
