--- react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual)@@ -14,7 +14,7 @@   HydratableInstance,
   ActivityInstance,
   SuspenseInstance,
-  Container,
+  Container, 
   HostContext,
 } from './ReactFiberConfig';
 import type {ActivityState} from './ReactFiberActivityComponent';
@@ -27,7 +27,7 @@   HostComponent,
   HostSingleton,
   HostRoot,
-  SuspenseComponent,
+  SuspenseComponent, 
   ActivityComponent,
 } from './ReactWorkTags';
 import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
@@ -43,7 +43,7 @@   getNextHydratableSiblingAfterSingleton,
   getFirstHydratableChild,
   getFirstHydratableChildWithinContainer,
-  getFirstHydratableChildWithinActivityInstance,
+  getFirstHydratableChildWithinActivityInstance, 
   getFirstHydratableChildWithinSuspenseInstance,
   getFirstHydratableChildWithinSingleton,
   hydrateInstance,
@@ -58,7 +58,7 @@   shouldDeleteUnhydratedTailInstances,
   resolveSingletonInstance,
   canHydrateInstance,
-  canHydrateTextInstance,
+  canHydrateTextInstance, 
   canHydrateActivityInstance,
   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
@@ -83,7 +83,7 @@ let isHydrating: boolean = false;
 
 // This flag allows for warning supression when we expect there to be mismatches
-// due to earlier mismatches or a suspended fiber.
+// due to earlier mismatches or a suspended fiber.  
 let didSuspendOrErrorDEV: boolean = false;
 
 // Hydration differences found that haven't yet been logged.
@@ -114,7 +114,7 @@         'Saw multiple hydration diff roots in a pass. This is a bug in React.',
       );
     } else if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {
-      hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;
+      hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;  
     }
     return hydrationDiffRootDEV;
   }
@@ -166,7 +166,7 @@   }
 
   const parentInstance: Container = fiber.stateNode.containerInfo;
-  nextHydratableInstance =
+  nextHydratableInstance = 
     getFirstHydratableChildWithinContainer(parentInstance);
   hydrationParentFiber = fiber;
   isHydrating = true;
@@ -207,8 +207,7 @@   if (!supportsHydration) {
     return false;
   }
-  nextHydratableInstance =
-    getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
+  nextHydratableInstance = getNextHydratableSibling(suspenseInstance);
   hydrationParentFiber = fiber;
   isHydrating = true;
   hydrationErrors = null;
@@ -227,7 +226,7 @@ ) {
   if (__DEV__) {
     if (didSuspendOrErrorDEV) {
-      // Inside a boundary that already suspended. We're currently rendering the
+      // Inside a boundary that already suspended. We're currently rendering the 
       // siblings of a suspended node. The mismatch may be due to the missing
       // data, so it's probably a false positive.
       return;
@@ -238,7 +237,7 @@     // We use null as a signal that there was no node to match.
     diffNode.serverProps = null;
     if (rejectedCandidate !== null) {
-      const description =
+      const description = 
         describeHydratableInstanceForDevWarnings(rejectedCandidate);
       diffNode.serverTail.push(description);
     }
@@ -246,7 +245,7 @@ }
 
 function tryHydrateInstance(
-  fiber: Fiber,
+  fiber: Fiber, 
   nextInstance: any,
   hostContext: HostContext,
 ) {
@@ -305,7 +304,7 @@   fiber: Fiber,
   nextInstance: any,
 ): null | ActivityInstance {
-  // fiber is a ActivityComponent Fiber
+  // fiber is a ActivityComponent Fiber 
   const activityInstance = canHydrateActivityInstance(
     nextInstance,
     rootOrSingletonContext,
@@ -336,12 +335,12 @@ 
 function tryHydrateSuspense(
   fiber: Fiber,
-  nextInstance: any,
+  nextInstance: any,  
 ): null | SuspenseInstance {
   // fiber is a SuspenseComponent Fiber
   const suspenseInstance = canHydrateSuspenseInstance(
     nextInstance,
-    rootOrSingletonContext,
+    rootOrSingletonContext,  
   );
   if (suspenseInstance !== null) {
     const suspenseState: SuspenseState = {
@@ -353,9 +352,9 @@     fiber.memoizedState = suspenseState;
     // Store the dehydrated fragment as a child fiber.
     // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
+    // since it doesn't have to consider all Suspense boundaries and 
     // check if they're dehydrated ones or not.
-    const dehydratedFragment =
+    const dehydratedFragment = 
       createFiberFromDehydratedFragment(suspenseInstance);
     dehydratedFragment.return = fiber;
     fiber.child = dehydratedFragment;
@@ -412,7 +411,7 @@     const instance = (fiber.stateNode = resolveSingletonInstance(
       fiber.type,
       fiber.pendingProps,
-      currentRootContainer,
+      currentRootContainer, 
       currentHostContext,
       false,
     ));
@@ -423,7 +422,7 @@           instance,
           fiber.type,
           fiber.pendingProps,
-          currentHostContext,
+          currentHostContext,  
         );
         if (differences !== null) {
           const diffNode = buildHydrationDiffNode(fiber, 0);
@@ -437,7 +436,7 @@     nextHydratableInstance = getFirstHydratableChildWithinSingleton(
       fiber.type,
       instance,
-      nextHydratableInstance,
+      nextHydratableInstance,  
     );
   }
 }
@@ -447,23 +446,24 @@     return;
   }
 
+  const currentHostContext = getHostContext();
+
   // Validate that this is ok to render here before any mismatches.
-  const currentHostContext = getHostContext();
   const shouldKeepWarning = validateHydratableInstance(
-    fiber.type,
+    fiber.type, 
     fiber.pendingProps,
     currentHostContext,
   );
 
   const nextInstance = nextHydratableInstance;
   if (
-    !nextInstance ||
+    !nextInstance || 
     !tryHydrateInstance(fiber, nextInstance, currentHostContext)
   ) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber);  
   }
 }
 
@@ -471,6 +471,7 @@   if (!isHydrating) {
     return;
   }
+
   const text = fiber.pendingProps;
 
   let shouldKeepWarning = true;
@@ -483,13 +484,13 @@     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
 function claimNextHydratableActivityInstance(fiber: Fiber): ActivityInstance {
   const nextInstance = nextHydratableInstance;
-  const activityInstance = nextInstance
+  const activityInstance = nextInstance 
     ? tryHydrateActivity(fiber, nextInstance)
     : null;
   if (activityInstance === null) {
@@ -502,11 +503,11 @@ function claimNextHydratableSuspenseInstance(fiber: Fiber): SuspenseInstance {
   const nextInstance = nextHydratableInstance;
   const suspenseInstance = nextInstance
-    ? tryHydrateSuspense(fiber, nextInstance)
+    ? tryHydrateSuspense(fiber, nextInstance)  
     : null;
   if (suspenseInstance === null) {
     warnNonHydratedInstance(fiber, nextInstance);
-    throw throwOnHydrationMismatch(fiber);
+    throw throwOnHydrationMismatch(fiber);  
   }
   return suspenseInstance;
 }
@@ -524,10 +525,10 @@     );
     if (markerInstance) {
       // Found the marker instance.
-      nextHydratableInstance = getNextHydratableSibling(markerInstance);
+      nextHydratableInstance = getNextHydratableSibling(markerInstance); 
       // Return true if this marker instance should use the state passed
       // to hydrateRoot.
-      // TODO: As an optimization, Fizz should only emit these markers if form
+      // TODO: As an optimization, Fizz should only emit these markers if form 
       // state is passed at the root.
       return isFormStateMarkerMatching(markerInstance);
     }
@@ -545,12 +546,12 @@ ): void {
   if (!supportsHydration) {
     throw new Error(
-      'Expected prepareToHydrateHostInstance() to never be called. ' +
+      'Expected prepareToHydrateHostInstance() to never be called. ' + 
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
 
-  const instance: Instance = fiber.stateNode;
+  const instance: Instance = fiber.stateNode;  
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
@@ -574,6 +575,7 @@   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
   const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
+
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
@@ -604,7 +606,7 @@             const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
-              parentProps,
+              parentProps,  
             );
             if (difference !== null) {
               const diffNode = buildHydrationDiffNode(fiber, 0);
@@ -633,15 +635,15 @@   if (!supportsHydration) {
     throw new Error(
       'Expected prepareToHydrateHostActivityInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+        'This error is likely caused by a bug in React. Please file an issue.',  
     );
   }
   const activityState: null | ActivityState = fiber.memoizedState;
   const activityInstance: null | ActivityInstance =
     activityState !== null ? activityState.dehydrated : null;
-
+    
   if (!activityInstance) {
-    throw new Error(
+    throw new Error( 
       'Expected to have a hydrated activity instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
@@ -659,12 +661,12 @@   }
 
   const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
+  const suspenseInstance: null | SuspenseInstance = 
     suspenseState !== null ? suspenseState.dehydrated : null;
 
   if (!suspenseInstance) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
+      'Expected to have a hydrated suspense instance. ' + 
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
@@ -682,7 +684,7 @@   if (!activityInstance) {
     throw new Error(
       'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
+        'This error is likely caused by a bug in React. Please file an issue.',  
     );
   }
 
@@ -690,16 +692,10 @@ }
 
 function skipPastDehydratedSuspenseInstance(
-  fiber: Fiber,
+  fiber: Fiber,  
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
-  const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
+  const suspenseState: null | SuspenseState = fiber.memoizedState;  
+  const suspenseInstance: null | SuspenseInstance = 
     suspenseState !== null ? suspenseState.dehydrated : null;
 
   if (!suspenseInstance) {
@@ -717,14 +713,14 @@   while (hydrationParentFiber) {
     switch (hydrationParentFiber.tag) {
       case HostComponent:
-      case ActivityComponent:
+      case ActivityComponent:  
       case SuspenseComponent:
         rootOrSingletonContext = false;
         return;
       case HostSingleton:
       case HostRoot:
         rootOrSingletonContext = true;
-        return;
+        return; 
       default:
         hydrationParentFiber = hydrationParentFiber.return;
     }
@@ -743,7 +739,7 @@   if (!isHydrating) {
     // If we're not currently hydrating but we're in a hydration context, then
     // we were an insertion and now need to pop up reenter hydration of our
-    // siblings.
+    // siblings.  
     popToNextHostParent(fiber);
     isHydrating = true;
     return false;
@@ -752,16 +748,16 @@   const tag = fiber.tag;
 
   if (supportsSingletons) {
-    // With float we never clear the Root, or Singleton instances. We also do not clear Instances
+    // With float we never clear the Root, or Singleton instances. We also do not clear Instances  
     // that have singleton text content
     if (
       tag !== HostRoot &&
-      tag !== HostSingleton &&
+      tag !== HostSingleton && 
       !(
         tag === HostComponent &&
         (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
           shouldSetTextContent(fiber.type, fiber.memoizedProps))
-      )
+      )  
     ) {
       const nextInstance = nextHydratableInstance;
       if (nextInstance) {
@@ -775,7 +771,7 @@     // other nodes in them. We also ignore components with pure text content in
     // side of them. We also don't delete anything inside the root container.
     if (
-      tag !== HostRoot &&
+      tag !== HostRoot &&  
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
           !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
@@ -787,7 +783,9 @@       }
     }
   }
+
   popToNextHostParent(fiber);
+
   if (tag === SuspenseComponent) {
     nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
   } else if (tag === ActivityComponent) {
@@ -805,32 +803,13 @@   return true;
 }
 
-function warnIfUnhydratedTailNodes(fiber: Fiber) {
-  if (__DEV__) {
-    let nextInstance = nextHydratableInstance;
-    while (nextInstance) {
-      const diffNode = buildHydrationDiffNode(fiber, 0);
-      const description =
-        describeHydratableInstanceForDevWarnings(nextInstance);
-      diffNode.serverTail.push(description);
-      if (description.type === 'Suspense') {
-        const suspenseInstance: SuspenseInstance = (nextInstance: any);
-        nextInstance =
-          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
-      } else {
-        nextInstance = getNextHydratableSibling(nextInstance);
-      }
-    }
-  }
-}
-
 function resetHydrationState(): void {
   if (!supportsHydration) {
     return;
   }
 
   hydrationParentFiber = null;
-  nextHydratableInstance = null;
+  nextHydratableInstance = null; 
   isHydrating = false;
   didSuspendOrErrorDEV = false;
 }
@@ -863,57 +842,11 @@ 
 export function emitPendingHydrationWarnings() {
   if (__DEV__) {
-    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
+    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully  
     // hydrated, however, we might still have DEV-only mismatches that we log now.
     const diffRoot = hydrationDiffRootDEV;
     if (diffRoot !== null) {
       hydrationDiffRootDEV = null;
       const diff = describeDiff(diffRoot);
 
-      // Just pick the DFS-first leaf as the owner.
-      // Should be good enough since most warnings only have a single error.
-      let diffOwner: HydrationDiffNode = diffRoot;
-      while (diffOwner.children.length > 0) {
-        diffOwner = diffOwner.children[0];
-      }
-
-      runWithFiberInDEV(diffOwner.fiber, () => {
-        console.error(
-          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
-            'This can happen if a SSR-ed Client Component used:\n' +
-            '\n' +
-            "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-            "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-            "- Date formatting in a user's locale which doesn't match the server.\n" +
-            '- External changing data without sending a snapshot of it along with the HTML.\n' +
-            '- Invalid HTML tag nesting.\n' +
-            '\n' +
-            'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-            '\n' +
-            '%s%s',
-          'https://react.dev/link/hydration-mismatch',
-          diff,
-        );
-      });
-    }
-  }
-}
-
-export {
-  warnIfHydrating,
-  enterHydrationState,
-  getIsHydrating,
-  reenterHydrationStateFromDehydratedActivityInstance,
-  reenterHydrationStateFromDehydratedSuspenseInstance,
-  resetHydrationState,
-  claimHydratableSingleton,
-  tryToClaimNextHydratableInstance,
-  tryToClaimNextHydratableTextInstance,
-  claimNextHydratableActivityInstance,
-  claimNextHydratableSuspenseInstance,
-  prepareToHydrateHostInstance,
-  prepareToHydrateHostTextInstance,
-  prepareToHydrateHostActivityInstance,
-  prepareToHydrateHostSuspenseInstance,
-  popHydrationState,
-};+      // Just pick the DFS-first leaf as the owner.