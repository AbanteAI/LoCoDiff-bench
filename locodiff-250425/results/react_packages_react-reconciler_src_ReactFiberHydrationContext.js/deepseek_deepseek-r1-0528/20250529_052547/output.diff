
index f9932b8c4..99c17e11c 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpt_60b1qt_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpy3c6ysyr_actual.txt	
@@ -245,11 +245,82 @@ function warnNonHydratedInstance(
   }
 }
 
-function tryHydrateInstance(
-  fiber: Fiber,
-  nextInstance: any,
-  hostContext: HostContext,
-) {
+export const HydrationMismatchException: mixed = new Error(
+  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +
+    "userspace. If you're seeing this, it's likely a bug in React.",
+);
+
+function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
+  let diff = '';
+  if (__DEV__) {
+    // Consume the diff root for this mismatch.
+    // Any other errors will get their own diffs.
+    const diffRoot = hydrationDiffRootDEV;
+    if (diffRoot !== null) {
+      hydrationDiffRootDEV = null;
+      diff = describeDiff(diffRoot);
+    }
+  }
+  const error = new Error(
+    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+` +
+      '\n' +
+      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
+      "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
+      "- Date formatting in a user's locale which doesn't match the server.\n" +
+      '- External changing data without sending a snapshot of it along with the HTML.\n' +
+      '- Invalid HTML tag nesting.\n' +
+      '\n' +
+      'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
+      '\n' +
+      'https://react.dev/link/hydration-mismatch' +
+      diff,
+  );
+  queueHydrationError(createCapturedValueAtFiber(error, fiber));
+  throw HydrationMismatchException;
+}
+
+function claimHydratableSingleton(fiber: Fiber): void {
+  if (supportsSingletons) {
+    if (!isHydrating) {
+      return;
+    }
+    const currentRootContainer = getRootHostContainer();
+    const currentHostContext = getHostContext();
+    const instance = (fiber.stateNode = resolveSingletonInstance(
+      fiber.type,
+      fiber.pendingProps,
+      currentRootContainer,
+      currentHostContext,
+      false,
+    ));
+
+    if (__DEV__) {
+      if (!didSuspendOrErrorDEV) {
+        const differences = diffHydratedPropsForDevWarnings(
+          instance,
+          fiber.type,
+          fiber.pendingProps,
+          currentHostContext,
+        );
+        if (differences !== null) {
+          const diffNode = buildHydrationDiffNode(fiber, 0);
+          diffNode.serverProps = differences;
+        }
+      }
+    }
+
+    hydrationParentFiber = fiber;
+    rootOrSingletonContext = true;
+    nextHydratableInstance = getFirstHydratableChildWithinSingleton(
+      fiber.type,
+      instance,
+      nextHydratableInstance,
+    );
+  }
+}
+
+function tryHydrateInstance(fiber: Fiber, nextInstance: any, hostContext: any) {
   // fiber is a HostComponent Fiber
   const instance = canHydrateInstance(
     nextInstance,
@@ -339,10 +410,8 @@ function tryHydrateSuspense(
   nextInstance: any,
 ): null | SuspenseInstance {
   // fiber is a SuspenseComponent Fiber
-  const suspenseInstance = canHydrateSuspenseInstance(
-    nextInstance,
-    rootOrSingletonContext,
-  );
+  const suspenseInstance: null | SuspenseInstance =
+    canHydrateSuspenseInstance(nextInstance, rootOrSingletonContext);
   if (suspenseInstance !== null) {
     const suspenseState: SuspenseState = {
       dehydrated: suspenseInstance,
@@ -367,81 +436,6 @@ function tryHydrateSuspense(
   return suspenseInstance;
 }
 
-export const HydrationMismatchException: mixed = new Error(
-  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +
-    "userspace. If you're seeing this, it's likely a bug in React.",
-);
-
-function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
-  let diff = '';
-  if (__DEV__) {
-    // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
-      hydrationDiffRootDEV = null;
-      diff = describeDiff(diffRoot);
-    }
-  }
-  const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
-` +
-      '\n' +
-      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-      "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-      "- Date formatting in a user's locale which doesn't match the server.\n" +
-      '- External changing data without sending a snapshot of it along with the HTML.\n' +
-      '- Invalid HTML tag nesting.\n' +
-      '\n' +
-      'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-      '\n' +
-      'https://react.dev/link/hydration-mismatch' +
-      diff,
-  );
-  queueHydrationError(createCapturedValueAtFiber(error, fiber));
-  throw HydrationMismatchException;
-}
-
-function claimHydratableSingleton(fiber: Fiber): void {
-  if (supportsSingletons) {
-    if (!isHydrating) {
-      return;
-    }
-    const currentRootContainer = getRootHostContainer();
-    const currentHostContext = getHostContext();
-    const instance = (fiber.stateNode = resolveSingletonInstance(
-      fiber.type,
-      fiber.pendingProps,
-      currentRootContainer,
-      currentHostContext,
-      false,
-    ));
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          currentHostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
-    hydrationParentFiber = fiber;
-    rootOrSingletonContext = true;
-    nextHydratableInstance = getFirstHydratableChildWithinSingleton(
-      fiber.type,
-      instance,
-      nextHydratableInstance,
-    );
-  }
-}
-
 function tryToClaimNextHydratableInstance(fiber: Fiber): void {
   if (!isHydrating) {
     return;
@@ -456,10 +450,7 @@ function tryToClaimNextHydratableInstance(fiber: Fiber): void {
   );
 
   const nextInstance = nextHydratableInstance;
-  if (
-    !nextInstance ||
-    !tryHydrateInstance(fiber, nextInstance, currentHostContext)
-  ) {
+  if (!nextInstance || !tryHydrateInstance(fiber, nextInstance, currentHostContext)) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
@@ -472,7 +463,6 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     return;
   }
   const text = fiber.pendingProps;
-
   let shouldKeepWarning = true;
   // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
@@ -483,7 +473,7 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -514,8 +504,11 @@ function claimNextHydratableSuspenseInstance(fiber: Fiber): SuspenseInstance {
 export function tryToClaimNextHydratableFormMarkerInstance(
   fiber: Fiber,
 ): boolean {
-  if (!isHydrating) {
-    return false;
+  if (!supportsHydration) {
+    throw new Error(
+      'Expected tryToClaimNextHydratableFormMarkerInstance() to never be called. ' +
+        'This error is likely caused by a bug in React. Please file an issue.',
+    );
   }
   if (nextHydratableInstance) {
     const markerInstance = canHydrateFormStateMarker(
@@ -681,7 +674,7 @@ function skipPastDehydratedActivityInstance(
 
   if (!activityInstance) {
     throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
+      'Expected to have a hydrated activity instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
@@ -778,7 +771,7 @@ function popHydrationState(fiber: Fiber): boolean {
       tag !== HostRoot &&
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
-          !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
+          !shouldSetTextContent(fiber.type, fiber.memoizedProps))
     ) {
       const nextInstance = nextHydratableInstance;
       if (nextInstance) {
@@ -817,6 +810,10 @@ function warnIfUnhydratedTailNodes(fiber: Fiber) {
         const suspenseInstance: SuspenseInstance = (nextInstance: any);
         nextInstance =
           getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
+      } else if (description.type === 'Activity') {
+        const activityInstance: ActivityInstance = (nextInstance: any);
+        nextInstance =
+          getNextHydratableInstanceAfterActivityInstance(activityInstance);
       } else {
         nextInstance = getNextHydratableSibling(nextInstance);
       }
