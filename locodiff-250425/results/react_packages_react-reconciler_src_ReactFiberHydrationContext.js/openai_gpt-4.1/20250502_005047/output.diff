
index f9932b8c..5c75c705 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpdmdzgyf3_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpo_eudz7r_actual.txt	
@@ -154,7 +154,7 @@ function warnIfHydrating() {
   }
 }
 
-export function markDidThrowWhileHydratingDEV() {
+export function markDidThrowWhileHydratingDEV(): void {
   if (__DEV__) {
     didSuspendOrErrorDEV = true;
   }
@@ -355,8 +355,9 @@ function tryHydrateSuspense(
     // This simplifies the code for getHostSibling and deleting nodes,
     // since it doesn't have to consider all Suspense boundaries and
     // check if they're dehydrated ones or not.
-    const dehydratedFragment =
-      createFiberFromDehydratedFragment(suspenseInstance);
+    const dehydratedFragment = createFiberFromDehydratedFragment(
+      suspenseInstance,
+    );
     dehydratedFragment.return = fiber;
     fiber.child = dehydratedFragment;
     hydrationParentFiber = fiber;
@@ -483,7 +484,7 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -573,7 +574,6 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
 
   const textInstance: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
   // hydration parent is the parent host component of this host text.
@@ -582,16 +582,14 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
     switch (returnFiber.tag) {
       case HostRoot: {
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
+          const difference = diffHydratedTextForDevWarnings(
+            textInstance,
+            textContent,
+            parentProps,
+          );
+          if (difference !== null) {
+            const diffNode = buildHydrationDiffNode(fiber, 0);
+            diffNode.serverProps = difference;
           }
         }
         break;
@@ -600,16 +598,14 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
       case HostComponent: {
         parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
+          const difference = diffHydratedTextForDevWarnings(
+            textInstance,
+            textContent,
+            parentProps,
+          );
+          if (difference !== null) {
+            const diffNode = buildHydrationDiffNode(fiber, 0);
+            diffNode.serverProps = difference;
           }
         }
         break;
@@ -671,7 +667,6 @@ function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
 
   hydrateSuspenseInstance(suspenseInstance, fiber);
 }
-
 function skipPastDehydratedActivityInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
@@ -692,12 +687,6 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
