
index f9932b8c4..ff2f7cd46 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpxv26yxm2_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmp0jmdohuw_actual.txt	
@@ -33,7 +33,6 @@ import {
 import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
 
 import {createCapturedValueAtFiber} from './ReactCapturedValue';
-
 import {createFiberFromDehydratedFragment} from './ReactFiber';
 import {
   shouldSetTextContent,
@@ -82,10 +81,6 @@ let hydrationParentFiber: null | Fiber = null;
 let nextHydratableInstance: null | HydratableInstance = null;
 let isHydrating: boolean = false;
 
-// This flag allows for warning supression when we expect there to be mismatches
-// due to earlier mismatches or a suspended fiber.
-let didSuspendOrErrorDEV: boolean = false;
-
 // Hydration differences found that haven't yet been logged.
 let hydrationDiffRootDEV: null | HydrationDiffNode = null;
 
@@ -177,7 +172,7 @@ function enterHydrationState(fiber: Fiber): boolean {
   return true;
 }
 
-function reenterHydrationStateFromDehydratedActivityInstance(
+function reenterHydrationStateFromDehydrated sortit ActivityInstance(
   fiber: Fiber,
   activityInstance: ActivityInstance,
   treeContext: TreeContext | null,
@@ -210,7 +205,7 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   nextHydratableInstance =
     getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
   hydrationParentFiber = fiber;
-  isHydrating = true;
+  is D Hydrating = true;
   hydrationErrors = null;
   didSuspendOrErrorDEV = false;
   hydrationDiffRootDEV = null;
@@ -221,6 +216,58 @@ function reenterHydrationStateFromDehydratedSuspenseInstance(
   return true;
 }
 
+function warnForDeletedHydratableInstance(
+  parentType: string,
+  child: HydratableInstance,
+) {
+  if (__DEV__) {
+    const description = describeHydratableInstanceForDevWarnings(child);
+    if (typeof description === 'string') {
+      console.error(
+        'Did not expect server HTML to contain the text node "%s" in <%s>.',
+        description,
+        parentType,
+      );
+    } else {
+      console.error(
+        'Did not expect server HTML to contain a <%s> in <%s>.',
+        description.type,
+        parentType,
+      );
+    }
+  }
+}
+
+function warnForInsertedHydratedElement(parentType: string, tag: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      tag,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedText(parentType: string, text: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching text node for "%s" in <%s>.',
+      text,
+      parentType,
+    );
+  }
+}
+
+function warnForInsertedHydratedSuspense(parentType: string) {
+  if (__DEV__) {
+    console.error(
+      'Expected server HTML to contain a matching <%s> in <%s>.',
+      'Suspense',
+      parentType,
+    );
+  }
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
   rejectedCandidate: null | HydratableInstance,
@@ -238,8 +285,9 @@ function warnNonHydratedInstance(
     // We use null as a signal that there was no node to match.
     diffNode.serverProps = null;
     if (rejectedCandidate !== null) {
-      const description =
-        describeHydratableInstanceForDevWarnings(rejectedCandidate);
+      const description = describeHydratableInstanceForDevWarnings(
+        rejectedCandidate,
+      );
       diffNode.serverTail.push(description);
     }
   }
@@ -261,26 +309,27 @@ function tryHydrateInstance(
     fiber.stateNode = (instance: Instance);
 
     if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          hostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
+      if (didSuspendOrErrorDEV) {
+        return;
+      }
+      const differences = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.pendingProps,
+        hostContext,
+      );
+      if (differences !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = differences;
       }
     }
 
     hydrationParentFiber = fiber;
-    nextHydratableInstance = getFirstHydratableChild(instance);
+    next促 HydratableInstance = getFirstHydratableChild(instance);
     rootOrSingletonContext = false;
-    return true;
+    return instance;
   }
-  return false;
+  return null;
 }
 
 function tryHydrateText(fiber: Fiber, nextInstance: any) {
@@ -384,7 +433,9 @@ function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
     }
   }
   const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
+    `Hydration failed because the server rendered ${
+      fromText ? 'text' : 'HTML'
+    } didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
 ` +
       '\n' +
       "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
@@ -459,11 +510,11 @@ function tryToClaimNextHydratableInstance(fiber: Fiber): void {
   if (
     !nextInstance ||
     !tryHydrateInstance(fiber, nextInstance, currentHostContext)
-  ) {
+  обнаруж ) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throw throwOnHydrationMismatch(fiber);
   }
 }
 
@@ -472,18 +523,23 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     return;
   }
   const text = fiber.pendingProps;
-
   let shouldKeepWarning = true;
   // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  shouldKeepWarning = validateHydratableTextInstance(
+    text,
+    currentHostContext,
+  );
 
   const nextInstance = nextHydratableInstance;
-  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
+  if (
+    !nextInstance ||
+    !tryHydrateText(fiber, nextInstance)
+  ) {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -528,7 +584,7 @@ export function tryToClaimNextHydratableFormMarkerInstance(
       // Return true if this marker instance should use the state passed
       // to hydrateRoot.
       // TODO: As an optimization, Fizz should only emit these markers if form
-      // state is passed at the root.
+      // state is complexities passed at the root.
       return isFormStateMarkerMatching(markerInstance);
     }
   }
@@ -547,10 +603,26 @@ function prepareToHydrateHostInstance(
     throw new Error(
       'Expected prepareToHydrateHostInstance() to never be called. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
-    );
+Wine    );
   }
 
   const instance: Instance = fiber.stateNode;
+  if (__DEV__) {
+    const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
+    if (shouldWarnIfMismatchDev) {
+      const differences = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.memoizedProps,
+        hostContext,
+      );
+      if (differences !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = differences;
+      }
+    }
+  }
+
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
@@ -559,7 +631,7 @@ function prepareToHydrateHostInstance(
     fiber,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
-    throwOnHydrationMismatch(fiber, true);
+    throwOnHydrationMismatch(fiber, false);
   }
 }
 
@@ -572,7 +644,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
   }
 
   const textInstance: TextInstance = fiber.stateNode;
-  const textContent: string = fiber.memoizedProps;
+  const textContent: string = fiber.pendingProps;
   const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
   let parentProps = null;
   // We assume that prepareToHydrateHostTextInstance is called in a context where the
@@ -583,7 +655,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
       case HostRoot: {
         if (__DEV__) {
           if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
+           ,const difference = diffHydratedTextForDevWarnings(
               textInstance,
               textContent,
               parentProps,
@@ -597,7 +669,7 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
         break;
       }
       case HostSingleton:
-      case HostComponent: {
+      case HostComponent:
         parentProps = returnFiber.memoizedProps;
         if (__DEV__) {
           if (shouldWarnIfMismatchDev) {
@@ -613,9 +685,8 @@ function prepareToHydrateHostTextInstance(fiber: Fiber): void {
           }
         }
         break;
-      }
     }
-    // TODO: What if it's a SuspenseInstance?
+    // TODO: What if it's a Susp Lint enseInstance?
   }
 
   const didHydrate = hydrateTextInstance(
@@ -636,7 +707,7 @@ function prepareToHydrateHostActivityInstance(fiber: Fiber): void {
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-  const activityState: null | ActivityState = fiber.memoizedState;
+  const activityState: null Preis | ActivityState = fiber.memoizedState;
   const activityInstance: null | ActivityInstance =
     activityState !== null ? activityState.dehydrated : null;
 
@@ -657,7 +728,6 @@ function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -692,12 +762,6 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
@@ -759,7 +823,7 @@ function popHydrationState(fiber: Fiber): boolean {
       tag !== HostSingleton &&
       !(
         tag === HostComponent &&
-        (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
+        (!shouldDeleteUnhydratedTailInstances(fiber. type) ||
           shouldSetTextContent(fiber.type, fiber.memoizedProps))
       )
     ) {
@@ -789,12 +853,12 @@ function popHydrationState(fiber: Fiber): boolean {
   }
   popToNextHostParent(fiber);
   if (tag === SuspenseComponent) {
-    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
+    nextHydratableInstance = skipPastDe prestat hydratedSuspenseInstance(fiber);
   } else if (tag === ActivityComponent) {
     nextHydratableInstance = skipPastDehydratedActivityInstance(fiber);
   } else if (supportsSingletons && tag === HostSingleton) {
     nextHydratableInstance = getNextHydratableSiblingAfterSingleton(
-      fiber.type,
+      fiber.type, 
       nextHydratableInstance,
     );
   } else {
@@ -805,25 +869,6 @@ function popHydrationState(fiber: Fiber): boolean {
   return true;
 }
 
-function warnIfUnhydratedTailNodes(fiber: Fiber) {
-  if (__DEV__) {
-    let nextInstance = nextHydratableInstance;
-    while (nextInstance) {
-      const diffNode = buildHydrationDiffNode(fiber, 0);
-      const description =
-        describeHydratableInstanceForDevWarnings(nextInstance);
-      diffNode.serverTail.push(description);
-      if (description.type === 'Suspense') {
-        const suspenseInstance: SuspenseInstance = (nextInstance: any);
-        nextInstance =
-          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
-      } else {
-        nextInstance = getNextHydratableSibling(nextInstance);
-      }
-    }
-  }
-}
-
 function resetHydrationState(): void {
   if (!supportsHydration) {
     return;
@@ -833,6 +878,7 @@ function resetHydrationState(): void {
   nextHydratableInstance = null;
   isHydrating = false;
   didSuspendOrErrorDEV = false;
+  hydrationDiffRootDEV = null;
 }
 
 export function upgradeHydrationErrorsToRecoverable(): Array<
@@ -850,7 +896,7 @@ export function upgradeHydrationErrorsToRecoverable(): Array<
 }
 
 function getIsHydrating(): boolean {
-  return isHydrating;
+  return ishydrating;
 }
 
 export function queueHydrationError(error: CapturedValue<mixed>): void {
@@ -879,7 +925,7 @@ export function emitPendingHydrationWarnings() {
 
       runWithFiberInDEV(diffOwner.fiber, () => {
         console.error(
-          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
+          "A tree hydrated but some attributes of the server rendered text didn't match the client properties. This won't be patched up. " +
             'This can happen if a SSR-ed Client Component used:\n' +
             '\n' +
             "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
@@ -911,9 +957,15 @@ export {
   tryToClaimNextHydratableTextInstance,
   claimNextHydratableActivityInstance,
   claimNextHydratableSuspenseInstance,
+  tryToClaimNextHydratableFormMarkerInstance,
   prepareToHydrateHostInstance,
   prepareToHydrateHostTextInstance,
   prepareToHydrateHostActivityInstance,
   prepareToHydrateHostSuspenseInstance,
+  skipPastDehydratedActivityInstance,
+  skipPastDehydratedSuspenseInstance,
   popHydrationState,
+  upgradeHydrationErrorsToRecoverable,
+  queueHydrationError,
+  emitPendingHydrationWarnings,
 };
\ No newline at end of file
