--- react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual)@@ -8,6 +8,7 @@  */
 
 import type {Fiber} from './ReactInternalTypes';
+import {NoMode, ConcurrentMode} from './ReactTypeOfMode';
 import type {
   Instance,
   TextInstance,
@@ -26,15 +27,25 @@ import {
   HostComponent,
   HostSingleton,
+  HostText,
   HostRoot,
+  ActivityComponent,
   SuspenseComponent,
-  ActivityComponent,
 } from './ReactWorkTags';
-import {favorSafetyOverHydrationPerf} from 'shared/ReactFeatureFlags';
-
+import {
+  ChildDeletion,
+  Placement,
+  Hydrating,
+  NoFlags,
+  DidCapture,
+} from './ReactFiberFlags';
+import {
+  enableClientRenderFallbackOnTextMismatch,
+  favorSafetyOverHydrationPerf,
+} from 'shared/ReactFeatureFlags';
 import {createCapturedValueAtFiber} from './ReactCapturedValue';
 
-import {createFiberFromDehydratedFragment} from './ReactFiber';
+import {createFiberFromHostInstanceForDeletion} from './ReactFiber';
 import {
   shouldSetTextContent,
   supportsHydration,
@@ -43,9 +54,9 @@   getNextHydratableSiblingAfterSingleton,
   getFirstHydratableChild,
   getFirstHydratableChildWithinContainer,
+  getFirstHydratableChildWithinSingleton,
   getFirstHydratableChildWithinActivityInstance,
   getFirstHydratableChildWithinSuspenseInstance,
-  getFirstHydratableChildWithinSingleton,
   hydrateInstance,
   diffHydratedPropsForDevWarnings,
   describeHydratableInstanceForDevWarnings,
@@ -56,15 +67,14 @@   getNextHydratableInstanceAfterActivityInstance,
   getNextHydratableInstanceAfterSuspenseInstance,
   shouldDeleteUnhydratedTailInstances,
-  resolveSingletonInstance,
   canHydrateInstance,
   canHydrateTextInstance,
   canHydrateActivityInstance,
   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
-  validateHydratableInstance,
-  validateHydratableTextInstance,
+  isHydratableText,
+  resolveSingletonInstance,
 } from './ReactFiberConfig';
 import {OffscreenLane} from './ReactFiberLane';
 import {
@@ -82,19 +92,35 @@ let nextHydratableInstance: null | HydratableInstance = null;
 let isHydrating: boolean = false;
 
-// This flag allows for warning supression when we expect there to be mismatches
+// This flag allows for warning suppression when we expect there to be mismatches
 // due to earlier mismatches or a suspended fiber.
 let didSuspendOrErrorDEV: boolean = false;
 
+// Hydration errors that were thrown inside this boundary
+let hydrationErrors: Array<CapturedValue<mixed>> | null = null;
+
 // Hydration differences found that haven't yet been logged.
 let hydrationDiffRootDEV: null | HydrationDiffNode = null;
 
-// Hydration errors that were thrown inside this boundary
-let hydrationErrors: Array<CapturedValue<mixed>> | null = null;
-
+// The root or singleton context flag
 let rootOrSingletonContext = false;
 
-// Builds a common ancestor tree from the root down for collecting diffs.
+function warnIfHydrating() {
+  if (__DEV__) {
+    if (isHydrating) {
+      console.error(
+        'We should not be hydrating here. This is a bug in React. Please file a bug.'
+      );
+    }
+  }
+}
+
+export function markDidThrowWhileHydratingDEV() {
+  if (__DEV__) {
+    didSuspendOrErrorDEV = true;
+  }
+}
+
 function buildHydrationDiffNode(
   fiber: Fiber,
   distanceFromLeaf: number,
@@ -103,71 +129,59 @@     // We're at the root.
     if (hydrationDiffRootDEV === null) {
       hydrationDiffRootDEV = {
-        fiber: fiber,
+        fiber,
         children: [],
         serverProps: undefined,
         serverTail: [],
-        distanceFromLeaf: distanceFromLeaf,
+        distanceFromLeaf,
       };
-    } else if (hydrationDiffRootDEV.fiber !== fiber) {
-      throw new Error(
-        'Saw multiple hydration diff roots in a pass. This is a bug in React.',
-      );
-    } else if (hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf) {
-      hydrationDiffRootDEV.distanceFromLeaf = distanceFromLeaf;
+    } else {
+      if (
+        hydrationDiffRootDEV.fiber !== fiber ||
+        hydrationDiffRootDEV.distanceFromLeaf > distanceFromLeaf
+      ) {
+        hydrationDiffRootDEV = {
+          fiber,
+          children: hydrationDiffRootDEV.children,
+          serverProps: hydrationDiffRootDEV.serverProps,
+          serverTail: hydrationDiffRootDEV.serverTail,
+          distanceFromLeaf,
+        };
+      }
     }
     return hydrationDiffRootDEV;
   }
-  const siblings = buildHydrationDiffNode(
+  const parentNode = buildHydrationDiffNode(
     fiber.return,
     distanceFromLeaf + 1,
-  ).children;
-  // The same node may already exist in the parent. Since we currently always render depth first
-  // and rerender if we suspend or terminate early, if a shared ancestor was added we should still
-  // be inside of that shared ancestor which means it was the last one to be added. If this changes
-  // we may have to scan the whole set.
-  if (siblings.length > 0 && siblings[siblings.length - 1].fiber === fiber) {
-    const existing = siblings[siblings.length - 1];
-    if (existing.distanceFromLeaf > distanceFromLeaf) {
-      existing.distanceFromLeaf = distanceFromLeaf;
-    }
-    return existing;
+  );
+  const siblings = parentNode.children;
+  const last = siblings[siblings.length - 1];
+  if (last !== undefined && last.fiber === fiber) {
+    if (last.distanceFromLeaf > distanceFromLeaf) {
+      last.distanceFromLeaf = distanceFromLeaf;
+    }
+    return last;
   }
   const newNode: HydrationDiffNode = {
-    fiber: fiber,
+    fiber,
     children: [],
     serverProps: undefined,
     serverTail: [],
-    distanceFromLeaf: distanceFromLeaf,
+    distanceFromLeaf,
   };
   siblings.push(newNode);
   return newNode;
 }
 
-function warnIfHydrating() {
-  if (__DEV__) {
-    if (isHydrating) {
-      console.error(
-        'We should not be hydrating here. This is a bug in React. Please file a bug.',
-      );
-    }
-  }
-}
-
-export function markDidThrowWhileHydratingDEV() {
-  if (__DEV__) {
-    didSuspendOrErrorDEV = true;
-  }
-}
-
 function enterHydrationState(fiber: Fiber): boolean {
   if (!supportsHydration) {
     return false;
   }
-
   const parentInstance: Container = fiber.stateNode.containerInfo;
-  nextHydratableInstance =
-    getFirstHydratableChildWithinContainer(parentInstance);
+  nextHydratableInstance = getFirstHydratableChildWithinContainer(
+    parentInstance
+  );
   hydrationParentFiber = fiber;
   isHydrating = true;
   hydrationErrors = null;
@@ -221,26 +235,36 @@   return true;
 }
 
+function deleteHydratableInstance(
+  returnFiber: Fiber,
+  instance: HydratableInstance,
+) {
+  if (__DEV__) {
+    // no-op: warnings are collected in diffs
+  }
+  const childToDelete = createFiberFromHostInstanceForDeletion();
+  childToDelete.stateNode = instance;
+  childToDelete.return = returnFiber;
+  returnFiber.deletions = returnFiber.deletions || [];
+  returnFiber.deletions.push(childToDelete);
+  returnFiber.flags |= ChildDeletion;
+}
+
 function warnNonHydratedInstance(
   fiber: Fiber,
   rejectedCandidate: null | HydratableInstance,
 ) {
   if (__DEV__) {
     if (didSuspendOrErrorDEV) {
-      // Inside a boundary that already suspended. We're currently rendering the
-      // siblings of a suspended node. The mismatch may be due to the missing
-      // data, so it's probably a false positive.
       return;
     }
-
-    // Add this fiber to the diff tree.
     const diffNode = buildHydrationDiffNode(fiber, 0);
-    // We use null as a signal that there was no node to match.
     diffNode.serverProps = null;
     if (rejectedCandidate !== null) {
-      const description =
-        describeHydratableInstanceForDevWarnings(rejectedCandidate);
-      diffNode.serverTail.push(description);
+      const desc = describeHydratableInstanceForDevWarnings(
+        rejectedCandidate
+      );
+      diffNode.serverTail.push(desc);
     }
   }
 }
@@ -250,52 +274,64 @@   nextInstance: any,
   hostContext: HostContext,
 ) {
-  // fiber is a HostComponent Fiber
   const instance = canHydrateInstance(
     nextInstance,
     fiber.type,
     fiber.pendingProps,
-    rootOrSingletonContext,
+    hostContext,
+    rootOrSingletonContext
   );
   if (instance !== null) {
     fiber.stateNode = (instance: Instance);
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          hostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
     hydrationParentFiber = fiber;
     nextHydratableInstance = getFirstHydratableChild(instance);
     rootOrSingletonContext = false;
+
+    if (__DEV__ && !didSuspendOrErrorDEV) {
+      const diffs = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.memoizedProps,
+        hostContext
+      );
+      if (diffs !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = diffs;
+      }
+    }
+
     return true;
   }
   return false;
 }
 
-function tryHydrateText(fiber: Fiber, nextInstance: any) {
-  // fiber is a HostText Fiber
+function tryHydrateText(
+  fiber: Fiber,
+  nextInstance: any,
+) {
   const text = fiber.pendingProps;
   const textInstance = canHydrateTextInstance(
     nextInstance,
     text,
-    rootOrSingletonContext,
+    rootOrSingletonContext
   );
   if (textInstance !== null) {
     fiber.stateNode = (textInstance: TextInstance);
     hydrationParentFiber = fiber;
-    // Text Instances don't have children so there's nothing to hydrate.
     nextHydratableInstance = null;
+
+    if (__DEV__ && !didSuspendOrErrorDEV) {
+      const diff = diffHydratedTextForDevWarnings(
+        textInstance,
+        text,
+        fiber.memoizedProps
+      );
+      if (diff !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = diff;
+      }
+    }
+
     return true;
   }
   return false;
@@ -305,10 +341,9 @@   fiber: Fiber,
   nextInstance: any,
 ): null | ActivityInstance {
-  // fiber is a ActivityComponent Fiber
   const activityInstance = canHydrateActivityInstance(
     nextInstance,
-    rootOrSingletonContext,
+    rootOrSingletonContext
   );
   if (activityInstance !== null) {
     const activityState: ActivityState = {
@@ -318,173 +353,43 @@       hydrationErrors: null,
     };
     fiber.memoizedState = activityState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
-    const dehydratedFragment =
-      createFiberFromDehydratedFragment(activityInstance);
-    dehydratedFragment.return = fiber;
-    fiber.child = dehydratedFragment;
+    const dehydratedFrag = createFiberFromDehydratedFragment(
+      activityInstance
+    );
+    dehydratedFrag.return = fiber;
+    fiber.child = dehydratedFrag;
     hydrationParentFiber = fiber;
-    // While an Activity Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
-  }
-  return activityInstance;
+    return activityInstance;
+  }
+  return null;
 }
 
 function tryHydrateSuspense(
   fiber: Fiber,
   nextInstance: any,
 ): null | SuspenseInstance {
-  // fiber is a SuspenseComponent Fiber
   const suspenseInstance = canHydrateSuspenseInstance(
     nextInstance,
-    rootOrSingletonContext,
+    rootOrSingletonContext
   );
   if (suspenseInstance !== null) {
     const suspenseState: SuspenseState = {
       dehydrated: suspenseInstance,
       treeContext: getSuspendedTreeContext(),
       retryLane: OffscreenLane,
-      hydrationErrors: null,
     };
     fiber.memoizedState = suspenseState;
-    // Store the dehydrated fragment as a child fiber.
-    // This simplifies the code for getHostSibling and deleting nodes,
-    // since it doesn't have to consider all Suspense boundaries and
-    // check if they're dehydrated ones or not.
-    const dehydratedFragment =
-      createFiberFromDehydratedFragment(suspenseInstance);
-    dehydratedFragment.return = fiber;
-    fiber.child = dehydratedFragment;
+    const dehydratedFrag = createFiberFromDehydratedFragment(
+      suspenseInstance
+    );
+    dehydratedFrag.return = fiber;
+    fiber.child = dehydratedFrag;
     hydrationParentFiber = fiber;
-    // While a Suspense Instance does have children, we won't step into
-    // it during the first pass. Instead, we'll reenter it later.
     nextHydratableInstance = null;
-  }
-  return suspenseInstance;
-}
-
-export const HydrationMismatchException: mixed = new Error(
-  'Hydration Mismatch Exception: This is not a real error, and should not leak into ' +
-    "userspace. If you're seeing this, it's likely a bug in React.",
-);
-
-function throwOnHydrationMismatch(fiber: Fiber, fromText: boolean = false) {
-  let diff = '';
-  if (__DEV__) {
-    // Consume the diff root for this mismatch.
-    // Any other errors will get their own diffs.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
-      hydrationDiffRootDEV = null;
-      diff = describeDiff(diffRoot);
-    }
-  }
-  const error = new Error(
-    `Hydration failed because the server rendered ${fromText ? 'text' : 'HTML'} didn't match the client. As a result this tree will be regenerated on the client. This can happen if a SSR-ed Client Component used:
-` +
-      '\n' +
-      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-      "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-      "- Date formatting in a user's locale which doesn't match the server.\n" +
-      '- External changing data without sending a snapshot of it along with the HTML.\n' +
-      '- Invalid HTML tag nesting.\n' +
-      '\n' +
-      'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-      '\n' +
-      'https://react.dev/link/hydration-mismatch' +
-      diff,
-  );
-  queueHydrationError(createCapturedValueAtFiber(error, fiber));
-  throw HydrationMismatchException;
-}
-
-function claimHydratableSingleton(fiber: Fiber): void {
-  if (supportsSingletons) {
-    if (!isHydrating) {
-      return;
-    }
-    const currentRootContainer = getRootHostContainer();
-    const currentHostContext = getHostContext();
-    const instance = (fiber.stateNode = resolveSingletonInstance(
-      fiber.type,
-      fiber.pendingProps,
-      currentRootContainer,
-      currentHostContext,
-      false,
-    ));
-
-    if (__DEV__) {
-      if (!didSuspendOrErrorDEV) {
-        const differences = diffHydratedPropsForDevWarnings(
-          instance,
-          fiber.type,
-          fiber.pendingProps,
-          currentHostContext,
-        );
-        if (differences !== null) {
-          const diffNode = buildHydrationDiffNode(fiber, 0);
-          diffNode.serverProps = differences;
-        }
-      }
-    }
-
-    hydrationParentFiber = fiber;
-    rootOrSingletonContext = true;
-    nextHydratableInstance = getFirstHydratableChildWithinSingleton(
-      fiber.type,
-      instance,
-      nextHydratableInstance,
-    );
-  }
-}
-
-function tryToClaimNextHydratableInstance(fiber: Fiber): void {
-  if (!isHydrating) {
-    return;
-  }
-
-  // Validate that this is ok to render here before any mismatches.
-  const currentHostContext = getHostContext();
-  const shouldKeepWarning = validateHydratableInstance(
-    fiber.type,
-    fiber.pendingProps,
-    currentHostContext,
-  );
-
-  const nextInstance = nextHydratableInstance;
-  if (
-    !nextInstance ||
-    !tryHydrateInstance(fiber, nextInstance, currentHostContext)
-  ) {
-    if (shouldKeepWarning) {
-      warnNonHydratedInstance(fiber, nextInstance);
-    }
-    throwOnHydrationMismatch(fiber);
-  }
-}
-
-function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
-  if (!isHydrating) {
-    return;
-  }
-  const text = fiber.pendingProps;
-
-  let shouldKeepWarning = true;
-  // Validate that this is ok to render here before any mismatches.
-  const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
-
-  const nextInstance = nextHydratableInstance;
-  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
-    if (shouldKeepWarning) {
-      warnNonHydratedInstance(fiber, nextInstance);
-    }
-    throwOnHydrationMismatch(fiber);
-  }
+    return suspenseInstance;
+  }
+  return null;
 }
 
 function claimNextHydratableActivityInstance(fiber: Fiber): ActivityInstance {
@@ -494,7 +399,7 @@     : null;
   if (activityInstance === null) {
     warnNonHydratedInstance(fiber, nextInstance);
-    throw throwOnHydrationMismatch(fiber);
+    throw throwOnHydrationMismatch(fiber, false);
   }
   return activityInstance;
 }
@@ -506,7 +411,7 @@     : null;
   if (suspenseInstance === null) {
     warnNonHydratedInstance(fiber, nextInstance);
-    throw throwOnHydrationMismatch(fiber);
+    throw throwOnHydrationMismatch(fiber, false);
   }
   return suspenseInstance;
 }
@@ -518,25 +423,99 @@     return false;
   }
   if (nextHydratableInstance) {
-    const markerInstance = canHydrateFormStateMarker(
+    const marker = canHydrateFormStateMarker(
       nextHydratableInstance,
-      rootOrSingletonContext,
-    );
-    if (markerInstance) {
-      // Found the marker instance.
-      nextHydratableInstance = getNextHydratableSibling(markerInstance);
-      // Return true if this marker instance should use the state passed
-      // to hydrateRoot.
-      // TODO: As an optimization, Fizz should only emit these markers if form
-      // state is passed at the root.
-      return isFormStateMarkerMatching(markerInstance);
-    }
-  }
-  // Should have found a marker instance. Throw an error to trigger client
-  // rendering. We don't bother to check if we're in a concurrent root because
-  // useActionState is a new API, so backwards compat is not an issue.
-  throwOnHydrationMismatch(fiber);
-  return false;
+      rootOrSingletonContext
+    );
+    if (marker) {
+      nextHydratableInstance = getNextHydratableSibling(marker);
+      return isFormStateMarkerMatching(marker);
+    }
+  }
+  throw throwOnHydrationMismatch(fiber, false);
+}
+
+function claimHydratableSingleton(fiber: Fiber): void {
+  if (supportsSingletons) {
+    if (!isHydrating) {
+      return;
+    }
+    const currentRootContainer = getRootHostContainer();
+    const currentHostContext = getHostContext();
+    const instance: Instance = resolveSingletonInstance(
+      fiber.type,
+      fiber.pendingProps,
+      currentRootContainer,
+      currentHostContext,
+      false
+    );
+
+    if (__DEV__ && !didSuspendOrErrorDEV) {
+      const diffs = diffHydratedPropsForDevWarnings(
+        instance,
+        fiber.type,
+        fiber.pendingProps,
+        currentHostContext
+      );
+      if (diffs !== null) {
+        const diffNode = buildHydrationDiffNode(fiber, 0);
+        diffNode.serverProps = diffs;
+      }
+    }
+
+    fiber.stateNode = instance;
+    hydrationParentFiber = fiber;
+    rootOrSingletonContext = true;
+    nextHydratableInstance = getFirstHydratableChildWithinSingleton(
+      fiber.type,
+      instance,
+      nextHydratableInstance
+    );
+  }
+}
+
+function tryToClaimNextHydratableInstance(fiber: Fiber): void {
+  if (!isHydrating) {
+    return;
+  }
+  let nextInstance = nextHydratableInstance;
+  if (!nextInstance) {
+    warnNonHydratedInstance(fiber, null);
+    throw throwOnHydrationMismatch(fiber, false);
+  }
+  const firstAttempt = nextInstance;
+  if (!tryHydrateInstance(
+    fiber,
+    nextInstance,
+    getHostContext()
+  )) {
+    nextHydratableInstance = getNextHydratableSibling(firstAttempt);
+    const prevParent = (hydrationParentFiber: any);
+    if (
+      !nextHydratableInstance ||
+      !tryHydrateInstance(
+        fiber,
+        nextHydratableInstance,
+        getHostContext()
+      )
+    ) {
+      warnNonHydratedInstance(fiber, null);
+      throw throwOnHydrationMismatch(fiber, false);
+    }
+    deleteHydratableInstance(prevParent, firstAttempt);
+  }
+}
+
+function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
+  if (!isHydrating) {
+    return;
+  }
+  const text = fiber.pendingProps;
+  let nextInstance = nextHydratableInstance;
+  if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
+    warnNonHydratedInstance(fiber, nextInstance);
+    throw throwOnHydrationMismatch(fiber, true);
+  }
 }
 
 function prepareToHydrateHostInstance(
@@ -551,15 +530,29 @@   }
 
   const instance: Instance = fiber.stateNode;
+  if (__DEV__ && !didSuspendOrErrorDEV) {
+    const diffs = diffHydratedPropsForDevWarnings(
+      instance,
+      fiber.type,
+      fiber.memoizedProps,
+      hostContext
+    );
+    if (diffs !== null) {
+      const diffNode = buildHydrationDiffNode(fiber, 0);
+      diffNode.serverProps = diffs;
+    }
+  }
+
   const didHydrate = hydrateInstance(
     instance,
     fiber.type,
     fiber.memoizedProps,
     hostContext,
     fiber,
+    !didSuspendOrErrorDEV
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
-    throwOnHydrationMismatch(fiber, true);
+    throw throwOnHydrationMismatch(fiber, false);
   }
 }
 
@@ -571,61 +564,33 @@     );
   }
 
-  const textInstance: TextInstance = fiber.stateNode;
+  const textIns: TextInstance = fiber.stateNode;
   const textContent: string = fiber.memoizedProps;
-  const shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
+  const parentFiber = hydrationParentFiber;
   let parentProps = null;
-  // We assume that prepareToHydrateHostTextInstance is called in a context where the
-  // hydration parent is the parent host component of this host text.
-  const returnFiber = hydrationParentFiber;
-  if (returnFiber !== null) {
-    switch (returnFiber.tag) {
-      case HostRoot: {
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
-      case HostSingleton:
-      case HostComponent: {
-        parentProps = returnFiber.memoizedProps;
-        if (__DEV__) {
-          if (shouldWarnIfMismatchDev) {
-            const difference = diffHydratedTextForDevWarnings(
-              textInstance,
-              textContent,
-              parentProps,
-            );
-            if (difference !== null) {
-              const diffNode = buildHydrationDiffNode(fiber, 0);
-              diffNode.serverProps = difference;
-            }
-          }
-        }
-        break;
-      }
-    }
-    // TODO: What if it's a SuspenseInstance?
+  if (parentFiber !== null && parentFiber.tag === HostComponent) {
+    parentProps = parentFiber.memoizedProps;
+  }
+  if (__DEV__ && !didSuspendOrErrorDEV) {
+    const difference = diffHydratedTextForDevWarnings(
+      textIns,
+      textContent,
+      parentProps
+    );
+    if (difference !== null) {
+      const diffNode = buildHydrationDiffNode(fiber, 0);
+      diffNode.serverProps = difference;
+    }
   }
 
   const didHydrate = hydrateTextInstance(
-    textInstance,
+    textIns,
     textContent,
     fiber,
     parentProps,
   );
   if (!didHydrate && favorSafetyOverHydrationPerf) {
-    throwOnHydrationMismatch(fiber, true);
+    throw throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -637,17 +602,15 @@     );
   }
   const activityState: null | ActivityState = fiber.memoizedState;
-  const activityInstance: null | ActivityInstance =
+  const activityIns: null | ActivityInstance =
     activityState !== null ? activityState.dehydrated : null;
-
-  if (!activityInstance) {
+  if (!activityIns) {
     throw new Error(
       'Expected to have a hydrated activity instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
-  hydrateActivityInstance(activityInstance, fiber);
+  hydrateActivityInstance(activityIns, fiber);
 }
 
 function prepareToHydrateHostSuspenseInstance(fiber: Fiber): void {
@@ -657,59 +620,46 @@         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
-  const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
-    suspenseState !== null ? suspenseState.dehydrated : null;
-
-  if (!suspenseInstance) {
+  const state: null | SuspenseState = fiber.memoizedState;
+  const suspenseIns: null | SuspenseInstance =
+    state !== null ? state.dehydrated : null;
+  if (!suspenseIns) {
     throw new Error(
       'Expected to have a hydrated suspense instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
-  hydrateSuspenseInstance(suspenseInstance, fiber);
+  hydrateSuspenseInstance(suspenseIns, fiber);
 }
 
 function skipPastDehydratedActivityInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  const activityState: null | ActivityState = fiber.memoizedState;
-  const activityInstance: null | ActivityInstance =
-    activityState !== null ? activityState.dehydrated : null;
-
-  if (!activityInstance) {
+  const state: null | ActivityState = fiber.memoizedState;
+  const activityIns: null | ActivityInstance =
+    state !== null ? state.dehydrated : null;
+  if (!activityIns) {
+    throw new Error(
+      'Expected to have a hydrated activity instance. ' +
+        'This error is likely caused by a bug in React. Please file an issue.',
+    );
+  }
+  return getNextHydratableInstanceAfterActivityInstance(activityIns);
+}
+
+function skipPastDehydratedSuspenseInstance(
+  fiber: Fiber,
+): null | HydratableInstance {
+  const state: null | SuspenseState = fiber.memoizedState;
+  const suspenseIns: null | SuspenseInstance =
+    state !== null ? state.dehydrated : null;
+  if (!suspenseIns) {
     throw new Error(
       'Expected to have a hydrated suspense instance. ' +
         'This error is likely caused by a bug in React. Please file an issue.',
     );
   }
-
-  return getNextHydratableInstanceAfterActivityInstance(activityInstance);
-}
-
-function skipPastDehydratedSuspenseInstance(
-  fiber: Fiber,
-): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
-  const suspenseState: null | SuspenseState = fiber.memoizedState;
-  const suspenseInstance: null | SuspenseInstance =
-    suspenseState !== null ? suspenseState.dehydrated : null;
-
-  if (!suspenseInstance) {
-    throw new Error(
-      'Expected to have a hydrated suspense instance. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
-
-  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
+  return getNextHydratableInstanceAfterSuspenseInstance(suspenseIns);
 }
 
 function popToNextHostParent(fiber: Fiber): void {
@@ -729,6 +679,39 @@         hydrationParentFiber = hydrationParentFiber.return;
     }
   }
+  hydrationParentFiber = null;
+}
+
+function throwOnHydrationMismatch(
+  fiber: Fiber,
+  fromText: boolean = false
+): Error {
+  let diff = '';
+  if (__DEV__) {
+    const root = hydrationDiffRootDEV;
+    if (root !== null) {
+      hydrationDiffRootDEV = null;
+      diff = describeDiff(root);
+    }
+  }
+  const cause = new Error(
+    `Hydration failed because the server rendered ${
+      fromText ? 'text' : 'HTML'
+    } didn't match the client. This tree will be regenerated on the client. ` +
+      'This can happen if a SSR-ed Client Component used:\n' +
+      '\n' +
+      "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
+      "- Variable input such as `Date.now()` or `Math.random()`.\n" +
+      "- Date formatting in a user's locale that differs.\n" +
+      '- External changing data without sending a snapshot.\n' +
+      '- Invalid HTML tag nesting.\n' +
+      '\n' +
+      'It can also happen if a browser extension modified the HTML.\n\n' +
+      'https://react.dev/link/hydration-mismatch' +
+      diff
+  );
+  queueHydrationError(createCapturedValueAtFiber(cause, fiber));
+  throw HydrationMismatchException;
 }
 
 function popHydrationState(fiber: Fiber): boolean {
@@ -736,58 +719,54 @@     return false;
   }
   if (fiber !== hydrationParentFiber) {
-    // We're deeper than the current hydration context, inside an inserted
-    // tree.
     return false;
   }
   if (!isHydrating) {
-    // If we're not currently hydrating but we're in a hydration context, then
-    // we were an insertion and now need to pop up reenter hydration of our
-    // siblings.
     popToNextHostParent(fiber);
     isHydrating = true;
     return false;
   }
 
   const tag = fiber.tag;
-
   if (supportsSingletons) {
-    // With float we never clear the Root, or Singleton instances. We also do not clear Instances
-    // that have singleton text content
     if (
       tag !== HostRoot &&
       tag !== HostSingleton &&
-      !(
-        tag === HostComponent &&
-        (!shouldDeleteUnhydratedTailInstances(fiber.type) ||
-          shouldSetTextContent(fiber.type, fiber.memoizedProps))
-      )
+      !(tag === HostComponent &&
+        (!shouldDeleteUnhydratedTailInstances(
+          fiber.type
+        ) ||
+          shouldSetTextContent(
+            fiber.type,
+            fiber.memoizedProps
+          )))
     ) {
-      const nextInstance = nextHydratableInstance;
-      if (nextInstance) {
-        warnIfUnhydratedTailNodes(fiber);
-        throwOnHydrationMismatch(fiber);
+      const inst = nextHydratableInstance;
+      if (inst) {
+        warnNonHydratedInstance(fiber, inst);
+        throw throwOnHydrationMismatch(fiber, false);
       }
     }
   } else {
-    // If we have any remaining hydratable nodes, we need to delete them now.
-    // We only do this deeper than head and body since they tend to have random
-    // other nodes in them. We also ignore components with pure text content in
-    // side of them. We also don't delete anything inside the root container.
     if (
       tag !== HostRoot &&
       (tag !== HostComponent ||
         (shouldDeleteUnhydratedTailInstances(fiber.type) &&
-          !shouldSetTextContent(fiber.type, fiber.memoizedProps)))
+          !shouldSetTextContent(
+            fiber.type,
+            fiber.memoizedProps
+          )))
     ) {
-      const nextInstance = nextHydratableInstance;
-      if (nextInstance) {
-        warnIfUnhydratedTailNodes(fiber);
-        throwOnHydrationMismatch(fiber);
+      const inst = nextHydratableInstance;
+      if (inst) {
+        warnNonHydratedInstance(fiber, inst);
+        throw throwOnHydrationMismatch(fiber, false);
       }
     }
   }
+
   popToNextHostParent(fiber);
+
   if (tag === SuspenseComponent) {
     nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
   } else if (tag === ActivityComponent) {
@@ -795,7 +774,7 @@   } else if (supportsSingletons && tag === HostSingleton) {
     nextHydratableInstance = getNextHydratableSiblingAfterSingleton(
       fiber.type,
-      nextHydratableInstance,
+      nextHydratableInstance
     );
   } else {
     nextHydratableInstance = hydrationParentFiber
@@ -805,52 +784,15 @@   return true;
 }
 
-function warnIfUnhydratedTailNodes(fiber: Fiber) {
-  if (__DEV__) {
-    let nextInstance = nextHydratableInstance;
-    while (nextInstance) {
-      const diffNode = buildHydrationDiffNode(fiber, 0);
-      const description =
-        describeHydratableInstanceForDevWarnings(nextInstance);
-      diffNode.serverTail.push(description);
-      if (description.type === 'Suspense') {
-        const suspenseInstance: SuspenseInstance = (nextInstance: any);
-        nextInstance =
-          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
-      } else {
-        nextInstance = getNextHydratableSibling(nextInstance);
-      }
-    }
-  }
-}
-
 function resetHydrationState(): void {
   if (!supportsHydration) {
     return;
   }
-
   hydrationParentFiber = null;
   nextHydratableInstance = null;
   isHydrating = false;
   didSuspendOrErrorDEV = false;
-}
-
-export function upgradeHydrationErrorsToRecoverable(): Array<
-  CapturedValue<mixed>,
-> | null {
-  const queuedErrors = hydrationErrors;
-  if (queuedErrors !== null) {
-    // Successfully completed a forced client render. The errors that occurred
-    // during the hydration attempt are now recovered. We will log them in
-    // commit phase, once the entire tree has finished.
-    queueRecoverableErrors(queuedErrors);
-    hydrationErrors = null;
-  }
-  return queuedErrors;
-}
-
-function getIsHydrating(): boolean {
-  return isHydrating;
+  hydrationDiffRootDEV = null;
 }
 
 export function queueHydrationError(error: CapturedValue<mixed>): void {
@@ -861,38 +803,40 @@   }
 }
 
-export function emitPendingHydrationWarnings() {
+export function upgradeHydrationErrorsToRecoverable(): Array<
+  CapturedValue<mixed>
+> | null {
+  const errs = hydrationErrors;
+  if (errs !== null) {
+    queueRecoverableErrors(errs);
+    hydrationErrors = null;
+  }
+  return errs;
+}
+
+export function emitPendingHydrationWarnings(): void {
   if (__DEV__) {
-    // If we haven't yet thrown any hydration errors by the time we reach the end we've successfully
-    // hydrated, however, we might still have DEV-only mismatches that we log now.
-    const diffRoot = hydrationDiffRootDEV;
-    if (diffRoot !== null) {
+    const root = hydrationDiffRootDEV;
+    if (root !== null) {
       hydrationDiffRootDEV = null;
-      const diff = describeDiff(diffRoot);
-
-      // Just pick the DFS-first leaf as the owner.
-      // Should be good enough since most warnings only have a single error.
-      let diffOwner: HydrationDiffNode = diffRoot;
-      while (diffOwner.children.length > 0) {
-        diffOwner = diffOwner.children[0];
-      }
-
+      const diff = describeDiff(root);
+      const diffOwner = root.children.length
+        ? root.children[0]
+        : root;
       runWithFiberInDEV(diffOwner.fiber, () => {
         console.error(
-          "A tree hydrated but some attributes of the server rendered HTML didn't match the client properties. This won't be patched up. " +
+          "A tree hydrated but some attributes of the server rendered HTML didn't match the client. This won't be patched up. " +
             'This can happen if a SSR-ed Client Component used:\n' +
             '\n' +
             "- A server/client branch `if (typeof window !== 'undefined')`.\n" +
-            "- Variable input such as `Date.now()` or `Math.random()` which changes each time it's called.\n" +
-            "- Date formatting in a user's locale which doesn't match the server.\n" +
-            '- External changing data without sending a snapshot of it along with the HTML.\n' +
+            "- Variable input such as `Date.now()` or `Math.random()`.\n" +
+            "- Date formatting in a user's locale that differs.\n" +
+            '- External changing data without sending a snapshot.\n' +
             '- Invalid HTML tag nesting.\n' +
             '\n' +
-            'It can also happen if the client has a browser extension installed which messes with the HTML before React loaded.\n' +
-            '\n' +
-            '%s%s',
-          'https://react.dev/link/hydration-mismatch',
-          diff,
+            'It can also happen if a browser extension modified the HTML.\n\n' +
+            'https://react.dev/link/hydration-mismatch' +
+            diff
         );
       });
     }
@@ -902,7 +846,6 @@ export {
   warnIfHydrating,
   enterHydrationState,
-  getIsHydrating,
   reenterHydrationStateFromDehydratedActivityInstance,
   reenterHydrationStateFromDehydratedSuspenseInstance,
   resetHydrationState,
@@ -911,6 +854,7 @@   tryToClaimNextHydratableTextInstance,
   claimNextHydratableActivityInstance,
   claimNextHydratableSuspenseInstance,
+  tryToClaimNextHydratableFormMarkerInstance,
   prepareToHydrateHostInstance,
   prepareToHydrateHostTextInstance,
   prepareToHydrateHostActivityInstance,
