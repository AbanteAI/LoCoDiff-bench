
index f9932b8c4..a47b3e302 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpyl6naz_n_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmp9vxi97d7_actual.txt	
@@ -63,6 +63,7 @@ import {
   canHydrateSuspenseInstance,
   canHydrateFormStateMarker,
   isFormStateMarkerMatching,
+  isHydratableType,
   validateHydratableInstance,
   validateHydratableTextInstance,
 } from './ReactFiberConfig';
@@ -473,10 +474,12 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
   }
   const text = fiber.pendingProps;
 
-  let shouldKeepWarning = true;
   // Validate that this is ok to render here before any mismatches.
   const currentHostContext = getHostContext();
-  shouldKeepWarning = validateHydratableTextInstance(text, currentHostContext);
+  const shouldKeepWarning = validateHydratableTextInstance(
+    text,
+    currentHostContext,
+  );
 
   const nextInstance = nextHydratableInstance;
   if (!nextInstance || !tryHydrateText(fiber, nextInstance)) {
@@ -805,25 +808,6 @@ function popHydrationState(fiber: Fiber): boolean {
   return true;
 }
 
-function warnIfUnhydratedTailNodes(fiber: Fiber) {
-  if (__DEV__) {
-    let nextInstance = nextHydratableInstance;
-    while (nextInstance) {
-      const diffNode = buildHydrationDiffNode(fiber, 0);
-      const description =
-        describeHydratableInstanceForDevWarnings(nextInstance);
-      diffNode.serverTail.push(description);
-      if (description.type === 'Suspense') {
-        const suspenseInstance: SuspenseInstance = (nextInstance: any);
-        nextInstance =
-          getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
-      } else {
-        nextInstance = getNextHydratableSibling(nextInstance);
-      }
-    }
-  }
-}
-
 function resetHydrationState(): void {
   if (!supportsHydration) {
     return;
