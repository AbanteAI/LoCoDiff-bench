
index f9932b8c4..f0cb43690 100644
--- a/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_expectedoutput.txt (expected):tmp/tmpf0h90ov__expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberHydrationContext.js_extracted.txt (actual):tmp/tmpgxf0sctu_actual.txt	
@@ -483,7 +483,7 @@ function tryToClaimNextHydratableTextInstance(fiber: Fiber): void {
     if (shouldKeepWarning) {
       warnNonHydratedInstance(fiber, nextInstance);
     }
-    throwOnHydrationMismatch(fiber);
+    throwOnHydrationMismatch(fiber, true);
   }
 }
 
@@ -527,7 +527,7 @@ export function tryToClaimNextHydratableFormMarkerInstance(
       nextHydratableInstance = getNextHydratableSibling(markerInstance);
       // Return true if this marker instance should use the state passed
       // to hydrateRoot.
-      // TODO: As an optimization, Fizz should only emit these markers if form
+      // TODO: As an optimization, Fizz should only emit these markers if action
       // state is passed at the root.
       return isFormStateMarkerMatching(markerInstance);
     }
@@ -692,12 +692,6 @@ function skipPastDehydratedActivityInstance(
 function skipPastDehydratedSuspenseInstance(
   fiber: Fiber,
 ): null | HydratableInstance {
-  if (!supportsHydration) {
-    throw new Error(
-      'Expected skipPastDehydratedSuspenseInstance() to never be called. ' +
-        'This error is likely caused by a bug in React. Please file an issue.',
-    );
-  }
   const suspenseState: null | SuspenseState = fiber.memoizedState;
   const suspenseInstance: null | SuspenseInstance =
     suspenseState !== null ? suspenseState.dehydrated : null;
