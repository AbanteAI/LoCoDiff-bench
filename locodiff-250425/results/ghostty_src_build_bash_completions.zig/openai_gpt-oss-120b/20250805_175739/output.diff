
index bb347e1ba..fa1299ba5 100644
--- a/ghostty_src_build_bash_completions.zig_expectedoutput.txt (expected):tmp/tmpguqxc5am_expected.txt	
+++ b/ghostty_src_build_bash_completions.zig_extracted.txt (actual):tmp/tmpwazxygtp_actual.txt	
@@ -105,7 +105,6 @@ fn writeBashCompletions(writer: anytype) !void {
     for (@typeInfo(Config).@"struct".fields) |field| {
         if (field.name[0] == '_') continue;
         try writer.writeAll(pad3 ++ "--" ++ field.name ++ ") ");
-
         if (std.mem.startsWith(u8, field.name, "font-family"))
             try writer.writeAll("_fonts ;;")
         else if (std.mem.eql(u8, "theme", field.name))
@@ -142,19 +141,17 @@ fn writeBashCompletions(writer: anytype) !void {
                 else => try writer.writeAll("return ;;"),
             }
         }
-
         try writer.writeAll("\n");
     }
 
     try writer.writeAll(
+        \\
         \\      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
         \\    esac
         \\
         \\    return 0
         \\  }
         \\
-        \\  _handle_actions() {
-        \\
     );
 
     for (@typeInfo(Action).@"enum".fields) |field| {
@@ -162,14 +159,13 @@ fn writeBashCompletions(writer: anytype) !void {
         if (std.mem.eql(u8, "version", field.name)) continue;
 
         const options = @field(Action, field.name).options();
-        // assumes options will never be created with only <_name> members
         if (@typeInfo(options).@"struct".fields.len == 0) continue;
 
         var buffer: [field.name.len]u8 = undefined;
         const bashName: []u8 = buffer[0..field.name.len];
         @memcpy(bashName, field.name);
-
         std.mem.replaceScalar(u8, bashName, '-', '_');
+
         try writer.writeAll(pad2 ++ "local " ++ bashName ++ "=\"");
 
         {
@@ -189,6 +185,7 @@ fn writeBashCompletions(writer: anytype) !void {
 
     try writer.writeAll(
         \\
+        \\  _handle_actions() {
         \\    case "${COMP_WORDS[1]}" in
         \\
     );
@@ -200,7 +197,6 @@ fn writeBashCompletions(writer: anytype) !void {
         const options = @field(Action, field.name).options();
         if (@typeInfo(options).@"struct".fields.len == 0) continue;
 
-        // bash doesn't allow variable names containing '-' so replace them
         var buffer: [field.name.len]u8 = undefined;
         const bashName: []u8 = buffer[0..field.name.len];
         _ = std.mem.replace(u8, field.name, "-", "_", bashName);
@@ -243,7 +239,7 @@ fn writeBashCompletions(writer: anytype) !void {
                 },
                 else => {
                     if (std.mem.eql(u8, "config-file", opt.name)) {
-                        try writer.writeAll("_files ;;");
+                        try writer.writeAll("return ;;");
                     } else try writer.writeAll("return;;");
                 },
             }
@@ -258,6 +254,7 @@ fn writeBashCompletions(writer: anytype) !void {
     }
 
     try writer.writeAll(
+        \\
         \\      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
         \\    esac
         \\
