--- ghostty_src_build_bash_completions.zig_expectedoutput.txt (expected)+++ ghostty_src_build_bash_completions.zig_extracted.txt (actual)@@ -1,338 +1,370 @@-const std = @import("std");
-
-const Config = @import("../config/Config.zig");
-const Action = @import("../cli/action.zig").Action;
-
-/// A bash completions configuration that contains all the available commands
-/// and options.
-///
-/// Notes: bash completion support for --<key>=<value> depends on setting the completion
-/// system to _not_ print a space following each successful completion (see -o nospace).
-/// This results leading or tailing spaces being necessary to move onto the next match.
-///
-/// bash completion will read = as it's own completiong word regardless of whether or not
-/// it's part of an on going completion like --<key>=. Working around this requires looking
-/// backward in the command line args to pretend the = is an empty string
-/// see: https://www.gnu.org/software/gnuastro/manual/html_node/Bash-TAB-completion-tutorial.html
-pub const completions = comptimeGenerateBashCompletions();
-
-fn comptimeGenerateBashCompletions() []const u8 {
-    comptime {
-        @setEvalBranchQuota(50000);
-        var counter = std.io.countingWriter(std.io.null_writer);
-        try writeBashCompletions(&counter.writer());
-
-        var buf: [counter.bytes_written]u8 = undefined;
-        var stream = std.io.fixedBufferStream(&buf);
-        try writeBashCompletions(stream.writer());
-        const final = buf;
-        return final[0..stream.getWritten().len];
-    }
-}
-
-fn writeBashCompletions(writer: anytype) !void {
-    const pad1 = "  ";
-    const pad2 = pad1 ++ pad1;
-    const pad3 = pad2 ++ pad1;
-    const pad4 = pad3 ++ pad1;
-    const pad5 = pad4 ++ pad1;
-
-    try writer.writeAll(
-        \\_ghostty() {
-        \\
-        \\  # -o nospace requires we add back a space when a completion is finished
-        \\  # and not part of a --key= completion
-        \\  _add_spaces() {
-        \\    for idx in "${!COMPREPLY[@]}"; do
-        \\      [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
-        \\    done
-        \\  }
-        \\
-        \\  _fonts() {
-        \\    local IFS=$'\n'
-        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
-        \\  }
-        \\
-        \\  _themes() {
-        \\    local IFS=$'\n'
-        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
-        \\  }
-        \\
-        \\  _files() {
-        \\    mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
-        \\    for i in "${!COMPREPLY[@]}"; do
-        \\      if [[ -d "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]}/";
-        \\      fi
-        \\      if [[ -f "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]} ";
-        \\      fi
-        \\    done
-        \\  }
-        \\
-        \\  _dirs() {
-        \\    mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
-        \\    for i in "${!COMPREPLY[@]}"; do
-        \\      if [[ -d "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]}/";
-        \\      fi
-        \\    done
-        \\    if [[ "${#COMPREPLY[@]}" == 0 && -d "$cur" ]]; then
-        \\      COMPREPLY=( "$cur " )
-        \\    fi
-        \\  }
-        \\
-        \\  _handle_config() {
-        \\    local config="--help"
-        \\    config+=" --version"
-        \\
-    );
-
-    for (@typeInfo(Config).@"struct".fields) |field| {
-        if (field.name[0] == '_') continue;
-        switch (field.type) {
-            bool, ?bool => try writer.writeAll(pad2 ++ "config+=\" '--" ++ field.name ++ " '\"\n"),
-            else => try writer.writeAll(pad2 ++ "config+=\" --" ++ field.name ++ "=\"\n"),
-        }
-    }
-
-    try writer.writeAll(
-        \\
-        \\    case "$prev" in
-        \\
-    );
-
-    for (@typeInfo(Config).@"struct".fields) |field| {
-        if (field.name[0] == '_') continue;
-        try writer.writeAll(pad3 ++ "--" ++ field.name ++ ") ");
-
-        if (std.mem.startsWith(u8, field.name, "font-family"))
-            try writer.writeAll("_fonts ;;")
-        else if (std.mem.eql(u8, "theme", field.name))
-            try writer.writeAll("_themes ;;")
-        else if (std.mem.eql(u8, "working-directory", field.name))
-            try writer.writeAll("_dirs ;;")
-        else if (field.type == Config.RepeatablePath)
-            try writer.writeAll("_files ;;")
-        else {
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(field.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .@"struct" => |info| {
-                    if (!@hasDecl(field.type, "parseCLI") and info.layout == .@"packed") {
-                        try writer.writeAll(compgenPrefix);
-                        for (info.fields, 0..) |f, i| {
-                            if (i > 0) try writer.writeAll(" ");
-                            try writer.writeAll(f.name ++ " no-" ++ f.name);
-                        }
-                        try writer.writeAll(compgenSuffix);
-                    } else {
-                        try writer.writeAll("return ;;");
-                    }
-                },
-                else => try writer.writeAll("return ;;"),
-            }
-        }
-
-        try writer.writeAll("\n");
-    }
-
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
-        \\    esac
-        \\
-        \\    return 0
-        \\  }
-        \\
-        \\  _handle_actions() {
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        const options = @field(Action, field.name).options();
-        // assumes options will never be created with only <_name> members
-        if (@typeInfo(options).@"struct".fields.len == 0) continue;
-
-        var buffer: [field.name.len]u8 = undefined;
-        const bashName: []u8 = buffer[0..field.name.len];
-        @memcpy(bashName, field.name);
-
-        std.mem.replaceScalar(u8, bashName, '-', '_');
-        try writer.writeAll(pad2 ++ "local " ++ bashName ++ "=\"");
-
-        {
-            var count = 0;
-            for (@typeInfo(options).@"struct".fields) |opt| {
-                if (opt.name[0] == '_') continue;
-                if (count > 0) try writer.writeAll(" ");
-                switch (opt.type) {
-                    bool, ?bool => try writer.writeAll("'--" ++ opt.name ++ " '"),
-                    else => try writer.writeAll("--" ++ opt.name ++ "="),
-                }
-                count += 1;
-            }
-        }
-        try writer.writeAll(" --help\"\n");
-    }
-
-    try writer.writeAll(
-        \\
-        \\    case "${COMP_WORDS[1]}" in
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        const options = @field(Action, field.name).options();
-        if (@typeInfo(options).@"struct".fields.len == 0) continue;
-
-        // bash doesn't allow variable names containing '-' so replace them
-        var buffer: [field.name.len]u8 = undefined;
-        const bashName: []u8 = buffer[0..field.name.len];
-        _ = std.mem.replace(u8, field.name, "-", "_", bashName);
-
-        try writer.writeAll(pad3 ++ "+" ++ field.name ++ ")\n");
-        try writer.writeAll(pad4 ++ "case $prev in\n");
-        for (@typeInfo(options).@"struct".fields) |opt| {
-            if (opt.name[0] == '_') continue;
-
-            try writer.writeAll(pad5 ++ "--" ++ opt.name ++ ") ");
-
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(opt.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .optional => |optional| {
-                    switch (@typeInfo(optional.child)) {
-                        .@"enum" => |info| {
-                            try writer.writeAll(compgenPrefix);
-                            for (info.fields, 0..) |f, i| {
-                                if (i > 0) try writer.writeAll(" ");
-                                try writer.writeAll(f.name);
-                            }
-                            try writer.writeAll(compgenSuffix);
-                        },
-                        else => {
-                            if (std.mem.eql(u8, "config-file", opt.name)) {
-                                try writer.writeAll("return ;;");
-                            } else try writer.writeAll("return;;");
-                        },
-                    }
-                },
-                else => {
-                    if (std.mem.eql(u8, "config-file", opt.name)) {
-                        try writer.writeAll("_files ;;");
-                    } else try writer.writeAll("return;;");
-                },
-            }
-            try writer.writeAll("\n");
-        }
-        try writer.writeAll(pad5 ++ "*) mapfile -t COMPREPLY < <( compgen -W \"$" ++ bashName ++ "\" -- \"$cur\" ) ;;\n");
-        try writer.writeAll(
-            \\        esac
-            \\      ;;
-            \\
-        );
-    }
-
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
-        \\    esac
-        \\
-        \\    return 0
-        \\  }
-        \\
-        \\  # begin main logic
-        \\  local topLevel="-e"
-        \\  topLevel+=" --help"
-        \\  topLevel+=" --version"
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        try writer.writeAll(pad1 ++ "topLevel+=\" +" ++ field.name ++ "\"\n");
-    }
-
-    try writer.writeAll(
-        \\
-        \\  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
-        \\  local ghostty="$1"
-        \\
-        \\  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
-        \\  # if = is missing this script will degrade to matching on keys only.
-        \\  # eg: --key=
-        \\  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
-        \\
-        \\  if [ "$2" = "=" ]; then cur=""
-        \\  else                    cur="$2"
-        \\  fi
-        \\
-        \\  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
-        \\  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
-        \\  fi
-        \\
-        \\  # current completion is double quoted add a space so the curor progresses
-        \\  if [[ "$2" == \"*\" ]]; then
-        \\    COMPREPLY=( "$cur " );
-        \\    return;
-        \\  fi
-        \\
-        \\  case "$COMP_CWORD" in
-        \\    1)
-        \\      case "${COMP_WORDS[1]}" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        --*) _handle_config ;;
-        \\        *) mapfile -t COMPREPLY < <( compgen -W "${topLevel}" -- "$cur" ); _add_spaces ;;
-        \\      esac
-        \\      ;;
-        \\    *)
-        \\      case "$prev" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        *)
-        \\          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
-        \\            # must be completing with a space after the key eg: '--<key> '
-        \\            # clear out prev so we don't run any of the key specific completions
-        \\            prev=""
-        \\          fi
-        \\
-        \\          case "${COMP_WORDS[1]}" in
-        \\            --*) _handle_config ;;
-        \\            +*) _handle_actions ;;
-        \\          esac
-        \\          ;;
-        \\      esac
-        \\      ;;
-        \\  esac
-        \\
-        \\  return 0
-        \\}
-        \\
-        \\complete -o nospace -o bashdefault -F _ghostty ghostty
-        \\
-    );
-}+# -o nospace requires we add back a space when a completion is finished
+# and not part of a --key= completion
+addSpaces() {
+  for idx in "${!COMPREPLY[@]}"; do
+    [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
+  done
+}
+
+_fonts() {
+  local IFS=$'\n'
+  mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
+}
+
+_themes() {
+  local IFS=$'\n'
+  mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
+}
+
+_files() {
+  mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
+  for i in "${!COMPREPLY[@]}"; do
+    if [[ -d "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]}/";
+    fi
+    if [[ -f "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]} ";
+    fi
+  done
+}
+
+_dirs() {
+  mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
+  for i in "${!COMPREPLY[@]}"; do
+    if [[ -d "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]}/";
+    fi
+  done
+  if [[ "${#COMPREPLY[@]}" == 0 && -d "$cur" ]]; then
+    COMPREPLY=( "$cur " )
+  fi
+}
+
+_ghostty() {
+
+  # -o nospace requires we add back a space when a completion is finished
+  # and not part of a --key= completion
+  _add_spaces() {
+    for idx in "${!COMPREPLY[@]}"; do
+      [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
+    done
+  }
+
+  _fonts() {
+    local IFS=$'\n'
+    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
+  }
+
+  _themes() {
+    local IFS=$'\n'
+    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
+  }
+
+  _files() {
+    mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
+    for i in "${!COMPREPLY[@]}"; do
+      if [[ -d "${COMPREPLY[i]}" ]]; then
+        COMPREPLY[i]="${COMPREPLY[i]}/";
+      fi
+      if [[ -f "${COMPREPLY[i]}" ]]; then
+        COMPREPLY[i]="${COMPREPLY[i]} ";
+      fi
+    done
+  }
+
+  _dirs() {
+    mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
+    for i in "${!COMPREPLY[@]}"; do
+      if [[ -d "${COMPREPLY[i]}" ]]; then
+        COMPREPLY[i]="${COMPREPLY[i]}/";
+      fi
+    done
+    if [[ "${#COMPREPLY[@]}" == 0 && -d "$cur" ]]; then
+      COMPREPLY=( "$cur " )
+    fi
+  }
+
+  _handle_config() {
+    local config="--help"
+    config+=" --version"
+    config+=" --font-family="
+    config+=" --font-family-bold="
+    config+=" --font-family-italic="
+    config+=" --font-family-bold-italic="
+    config+=" --font-size="
+    config+=" --font-width="
+    config+=" --mouse-mod-is-super="
+    config+=" --mouse-hide-while-typing="
+    config+=" --cursor-style="
+    config+=" --cursor-unfocused-style="
+    config+=" --cursor-thickness="
+    config+=" --cursor-blink-interval="
+    config+=" --cursor-blink-mode="
+    config+=" --window-width="
+    config+=" --window-height="
+    config+=" --window-padding-x="
+    config+=" --window-padding-y="
+    config+=" --window-margin="
+    config+=" --window-decoration="
+    config+=" --text-composition-style="
+    config+=" --scroll-multiplier="
+    config+=" --desktop-entry="
+    config+=" --desktop-name="
+    config+=" --shell-integration-features="
+    config+=" --working-directory="
+    config+=" --tab-bar-style="
+    config+=" --tab-bar-appearance="
+    config+=" --mux-env-inherit="
+    config+=" '--copy-clipboard '"
+    config+=" '--cursor-hide-on-key-press '"
+    config+=" '--cursor-show-on-movement '"
+    config+=" '--background-image-blur '"
+    config+=" '--background-image-mode '"
+    config+=" '--background-opacity '"
+    config+=" '--clipboard-read '"
+    config+=" '--clipboard-trim-trailing-spaces '"
+    config+=" '--confirm-close-surface '"
+    config+=" '--confirm-close-tab '"
+    config+=" '--confirm-close-window '"
+    config+=" '--font-feature '"
+    config+=" '--disable-paste-protection '"
+    config+=" '--disable-renderer '"
+    config+=" '--disable-window-transparency '"
+    config+=" '--double-click-select-word-delimiters '"
+    config+=" '--experimental-pixel-perfect-drag-scroll '"
+    config+=" '--file-uri-handler-enabled '"
+    config+=" '--https-uri-handler-enabled '"
+    config+=" '--foreground-process-affinity '"
+    config+=" '--login-shell '"
+    config+=" '--path '"
+    config+=" '--scrollback-lines '"
+    config+=" '--shell-integration-location '"
+    config+=" '--show-tab-close-button '"
+    config+=" '--window-auto-resize '"
+    config+=" '--frame-rate-limiter '"
+    config+=" '--frame-rate-limiter-fps '"
+    config+=" '--wayland-app-id '"
+    config+=" '--macos-frame-animation '"
+    config+=" '--macos-titlebar-appears-transparent '"
+    config+=" '--macos-titlebar-buttonless '"
+    config+=" '--macos-titlebar-dim '"
+    config+=" '--macos-titlebar-high-contrast '"
+    config+=" '--macos-window-style '"
+    config+=" '--pty-timeout '"
+    config+=" '--window-theme-darkness '"
+    config+=" '--theme '"
+    config+=" '--clipboard-base64 '"
+    config+=" '--dyn-title-change '"
+    config+=" '--dyn-title-template '"
+    config+=" '--background-image '"
+    config+=" '--cursor-underline-thickness '"
+
+    case "$prev" in
+      --font-family) _fonts ;;
+      --font-family-bold) _fonts ;;
+      --font-family-italic) _fonts ;;
+      --font-family-bold-italic) _fonts ;;
+      --font-size) mapfile -t COMPREPLY < <( compgen -W "12 14 16 18" -- "$cur" ); _add_spaces ;;
+      --font-width) mapfile -t COMPREPLY < <( compgen -W "normal wide" -- "$cur" ); _add_spaces ;;
+      --mouse-mod-is-super) return ;;
+      --mouse-hide-while-typing) return ;;
+      --cursor-style) mapfile -t COMPREPLY < <( compgen -W "block beam underline" -- "$cur" ); _add_spaces ;;
+      --cursor-unfocused-style) mapfile -t COMPREPLY < <( compgen -W "block beam underline" -- "$cur" ); _add_spaces ;;
+      --cursor-thickness) return ;;
+      --cursor-blink-interval) return ;;
+      --cursor-blink-mode) mapfile -t COMPREPLY < <( compgen -W "on off unfocused_off" -- "$cur" ); _add_spaces ;;
+      --window-width) return ;;
+      --window-height) return ;;
+      --window-padding-x) return ;;
+      --window-padding-y) return ;;
+      --window-margin) return ;;
+      --window-decoration) mapfile -t COMPREPLY < <( compgen -W "full minimal none" -- "$cur" ); _add_spaces ;;
+      --text-composition-style) mapfile -t COMPREPLY < <( compgen -W "floating bar" -- "$cur" ); _add_spaces ;;
+      --scroll-multiplier) return ;;
+      --desktop-entry) mapfile -t COMPREPLY < <( compgen -W "system user none" -- "$cur" ); _add_spaces ;;
+      --desktop-name) return ;;
+      --shell-integration-features) mapfile -t COMPREPLY < <( compgen -W "ssh tmux title disable no-ssh no-tmux no-title" -- "$cur" ); _add_spaces ;;
+      --working-directory) _dirs ;;
+      --tab-bar-style) mapfile -t COMPREPLY < <( compgen -W "fancy compact group" -- "$cur" ); _add_spaces ;;
+      --tab-bar-appearance) mapfile -t COMPREPLY < <( compgen -W "hide always auto" -- "$cur" ); _add_spaces ;;
+      --mux-env-inherit) return ;;
+      --copy-clipboard) return ;;
+      --cursor-hide-on-key-press) return ;;
+      --cursor-show-on-movement) return ;;
+      --background-image-blur) return ;;
+      --background-image-mode) mapfile -t COMPREPLY < <( compgen -W "contain cover stretch center tile tiled" -- "$cur" ); _add_spaces ;;
+      --background-opacity) return ;;
+      --clipboard-read) return ;;
+      --clipboard-trim-trailing-spaces) return ;;
+      --confirm-close-surface) return ;;
+      --confirm-close-tab) return ;;
+      --confirm-close-window) return ;;
+      --font-feature) return ;;
+      --disable-paste-protection) return ;;
+      --disable-renderer) return ;;
+      --disable-window-transparency) return ;;
+      --double-click-select-word-delimiters) return ;;
+      --experimental-pixel-perfect-drag-scroll) return ;;
+      --file-uri-handler-enabled) return ;;
+      --https-uri-handler-enabled) return ;;
+      --foreground-process-affinity) return ;;
+      --login-shell) return ;;
+      --path) _files ;;
+      --scrollback-lines) return ;;
+      --shell-integration-location) _dirs ;;
+      --show-tab-close-button) return ;;
+      --window-auto-resize) return ;;
+      --frame-rate-limiter) mapfile -t COMPREPLY < <( compgen -W "auto display-rate fixed" -- "$cur" ); _add_spaces ;;
+      --frame-rate-limiter-fps) return ;;
+      --wayland-app-id) return ;;
+      --macos-frame-animation) return ;;
+      --macos-titlebar-appears-transparent) return ;;
+      --macos-titlebar-buttonless) return ;;
+      --macos-titlebar-dim) return ;;
+      --macos-titlebar-high-contrast) return ;;
+      --macos-window-style) mapfile -t COMPREPLY < <( compgen -W "normal hiddenTitleBarAndRounded" -- "$cur" ); _add_spaces ;;
+      --pty-timeout) return ;;
+      --window-theme-darkness) mapfile -t COMPREPLY < <( compgen -W "light dark follow-system" -- "$cur" ); _add_spaces ;;
+      --theme) _themes ;;
+      --clipboard-base64) return ;;
+      --dyn-title-change) mapfile -t COMPREPLY < <( compgen -W "all instances surfaces" -- "$cur" ); _add_spaces ;;
+      --dyn-title-template) return ;;
+      --background-image) _files ;;
+      --cursor-underline-thickness) return ;;
+      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
+    esac
+
+    return 0
+  }
+
+  _handle_actions() {
+    local bind="--help"
+    local keymaps="--help"
+    local list_fonts="--help"
+    local multiplexer="--help"
+    local session="--config-file= '--verbose ' --help"
+    local list_themes="--help"
+    local twm="--help"
+
+    case "${COMP_WORDS[1]}" in
+      +bind)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$bind" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +keymaps)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$keymaps" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +list-fonts)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$list_fonts" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +multiplexer)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$multiplexer" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +session)
+        case $prev in
+          --config-file) _files ;;
+          --verbose) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$session" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +list-themes)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$list_themes" -- "$cur" ) ;;
+        esac
+      ;;
+
+      +twm)
+        case $prev in
+          --*) return ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$twm" -- "$cur" ) ;;
+        esac
+      ;;
+
+      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
+    esac
+
+    return 0
+  }
+
+  # begin main logic
+  local topLevel="-e"
+  topLevel+=" --help"
+  topLevel+=" --version"
+  topLevel+=" +bind"
+  topLevel+=" +keymaps"
+  topLevel+=" +list-fonts"
+  topLevel+=" +multiplexer"
+  topLevel+=" +session"
+  topLevel+=" +list-themes"
+  topLevel+=" +twm"
+
+  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
+  local ghostty="$1"
+
+  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
+  # if = is missing this script will degrade to matching on keys only.
+  # eg: --key=
+  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
+
+  if [ "$2" = "=" ]; then cur=""
+  else                    cur="$2"
+  fi
+
+  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
+  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
+  fi
+
+  # current completion is double quoted add a space so the curor progresses
+  if [[ "$2" == \"*\" ]]; then
+    COMPREPLY=( "$cur " );
+    return;
+  fi
+
+  case "$COMP_CWORD" in
+    1)
+      case "${COMP_WORDS[1]}" in
+        -e | --help | --version) return 0 ;;
+        --*) _handle_config ;;
+        *) mapfile -t COMPREPLY < <( compgen -W "${topLevel}" -- "$cur" ); _add_spaces ;;
+      esac
+      ;;
+    *)
+      case "$prev" in
+        -e | --help | --version) return 0 ;;
+        *)
+          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
+            # must be completing with a space after the key eg: '--<key> '
+            # clear out prev so we don't run any of the key specific completions
+            prev=""
+          fi
+
+          case "${COMP_WORDS[1]}" in
+            --*) _handle_config ;;
+            +*) _handle_actions ;;
+          esac
+          ;;
+      esac
+      ;;
+  esac
+
+  return 0
+}
+
+complete -o nospace -o bashdefault -F _ghostty ghostty