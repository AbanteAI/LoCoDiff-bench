
index bb347e1ba..645d36e70 100644
--- a/ghostty_src_build_bash_completions.zig_expectedoutput.txt (expected):tmp/tmpo2_h31jv_expected.txt	
+++ b/ghostty_src_build_bash_completions.zig_extracted.txt (actual):tmp/tmp9karo992_actual.txt	
@@ -1,338 +1,325 @@
-const std = @import("std");
-
-const Config = @import("../config/Config.zig");
-const Action = @import("../cli/action.zig").Action;
-
-/// A bash completions configuration that contains all the available commands
-/// and options.
-///
-/// Notes: bash completion support for --<key>=<value> depends on setting the completion
-/// system to _not_ print a space following each successful completion (see -o nospace).
-/// This results leading or tailing spaces being necessary to move onto the next match.
-///
-/// bash completion will read = as it's own completiong word regardless of whether or not
-/// it's part of an on going completion like --<key>=. Working around this requires looking
-/// backward in the command line args to pretend the = is an empty string
-/// see: https://www.gnu.org/software/gnuastro/manual/html_node/Bash-TAB-completion-tutorial.html
-pub const completions = comptimeGenerateBashCompletions();
-
-fn comptimeGenerateBashCompletions() []const u8 {
-    comptime {
-        @setEvalBranchQuota(50000);
-        var counter = std.io.countingWriter(std.io.null_writer);
-        try writeBashCompletions(&counter.writer());
-
-        var buf: [counter.bytes_written]u8 = undefined;
-        var stream = std.io.fixedBufferStream(&buf);
-        try writeBashCompletions(stream.writer());
-        const final = buf;
-        return final[0..stream.getWritten().len];
-    }
+# -o nospace requires we add back a space when a completion is finished
+# and not part of a --key= completion
+_add_spaces() {
+  for idx in "${!COMPREPLY[@]}"; do
+    [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
+  done
 }
 
-fn writeBashCompletions(writer: anytype) !void {
-    const pad1 = "  ";
-    const pad2 = pad1 ++ pad1;
-    const pad3 = pad2 ++ pad1;
-    const pad4 = pad3 ++ pad1;
-    const pad5 = pad4 ++ pad1;
-
-    try writer.writeAll(
-        \\_ghostty() {
-        \\
-        \\  # -o nospace requires we add back a space when a completion is finished
-        \\  # and not part of a --key= completion
-        \\  _add_spaces() {
-        \\    for idx in "${!COMPREPLY[@]}"; do
-        \\      [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
-        \\    done
-        \\  }
-        \\
-        \\  _fonts() {
-        \\    local IFS=$'\n'
-        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
-        \\  }
-        \\
-        \\  _themes() {
-        \\    local IFS=$'\n'
-        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
-        \\  }
-        \\
-        \\  _files() {
-        \\    mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
-        \\    for i in "${!COMPREPLY[@]}"; do
-        \\      if [[ -d "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]}/";
-        \\      fi
-        \\      if [[ -f "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]} ";
-        \\      fi
-        \\    done
-        \\  }
-        \\
-        \\  _dirs() {
-        \\    mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
-        \\    for i in "${!COMPREPLY[@]}"; do
-        \\      if [[ -d "${COMPREPLY[i]}" ]]; then
-        \\        COMPREPLY[i]="${COMPREPLY[i]}/";
-        \\      fi
-        \\    done
-        \\    if [[ "${#COMPREPLY[@]}" == 0 && -d "$cur" ]]; then
-        \\      COMPREPLY=( "$cur " )
-        \\    fi
-        \\  }
-        \\
-        \\  _handle_config() {
-        \\    local config="--help"
-        \\    config+=" --version"
-        \\
-    );
-
-    for (@typeInfo(Config).@"struct".fields) |field| {
-        if (field.name[0] == '_') continue;
-        switch (field.type) {
-            bool, ?bool => try writer.writeAll(pad2 ++ "config+=\" '--" ++ field.name ++ " '\"\n"),
-            else => try writer.writeAll(pad2 ++ "config+=\" --" ++ field.name ++ "=\"\n"),
-        }
-    }
+_fonts() {
+  local IFS=$'\n'
+  mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
+}
 
-    try writer.writeAll(
-        \\
-        \\    case "$prev" in
-        \\
-    );
+_themes() {
+  local IFS=$'\n'
+  mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
+}
 
-    for (@typeInfo(Config).@"struct".fields) |field| {
-        if (field.name[0] == '_') continue;
-        try writer.writeAll(pad3 ++ "--" ++ field.name ++ ") ");
+_files() {
+  mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
+  for i in "${!COMPREPLY[@]}"; do
+    if [[ -d "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]}/";
+    fi
+    if [[ -f "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]} ";
+    fi
+  done
+}
 
-        if (std.mem.startsWith(u8, field.name, "font-family"))
-            try writer.writeAll("_fonts ;;")
-        else if (std.mem.eql(u8, "theme", field.name))
-            try writer.writeAll("_themes ;;")
-        else if (std.mem.eql(u8, "working-directory", field.name))
-            try writer.writeAll("_dirs ;;")
-        else if (field.type == Config.RepeatablePath)
-            try writer.writeAll("_files ;;")
-        else {
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(field.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .@"struct" => |info| {
-                    if (!@hasDecl(field.type, "parseCLI") and info.layout == .@"packed") {
-                        try writer.writeAll(compgenPrefix);
-                        for (info.fields, 0..) |f, i| {
-                            if (i > 0) try writer.writeAll(" ");
-                            try writer.writeAll(f.name ++ " no-" ++ f.name);
-                        }
-                        try writer.writeAll(compgenSuffix);
-                    } else {
-                        try writer.writeAll("return ;;");
-                    }
-                },
-                else => try writer.writeAll("return ;;"),
-            }
-        }
+_dirs() {
+  mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
+  for i in "${!COMPREPLY[@]}"; do
+    if [[ -d "${COMPREPLY[i]}" ]]; then
+      COMPREPLY[i]="${COMPREPLY[i]}/";
+    fi
+  done
+  if [[ "${#COMPREPLY[@]}" == 0 && -d "$cur" ]]; then
+    COMPREPLY=( "$cur " )
+  fi
+}
 
-        try writer.writeAll("\n");
-    }
+_handle_config() {
+  local config="--help"
+  config+=" --version"
 
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
-        \\    esac
-        \\
-        \\    return 0
-        \\  }
-        \\
-        \\  _handle_actions() {
-        \\
-    );
+  config+=" '--allow-hyperlink '"
+  config+=" '--allow-tracking '"
+  config+=" '--blink-text '"
+  config+=" --bold-bright="
+  config+=" --cell-height="
+  config+=" --cell-width="
+  config+=" --clipboard-autocopy="
+  config+=" --cursor-blink="
+  config+=" --cursor-color="
+  config+=" --cursor-shape="
+  config+=" --default-working-directory="
+  config+=" '--disable-font-fallback '"
+  config+=" '--disable-ligatures '"
+  config+=" '--enable-wayland '"
+  config+=" --exclude-from="
+  config+=" --font-family="
+  config+=" --font-features="
+  config+=" --font-size="
+  config+=" --font-variations="
+  config+=" --foreground-color="
+  config+=" --hide-menubar="
+  config+=" --hide-scrollbar="
+  config+=" --ime="
+  config+=" --letter-spacing="
+  config+=" --line-height="
+  config+=" --login-shell="
+  config+=" --maximized="
+  config+=" --opacity="
+  config+=" --padding-bottom="
+  config+=" --padding-left="
+  config+=" --padding-right="
+  config+=" --padding-top="
+  config+=" --scrollback-lines="
+  config+=" --scrollback-unlimited="
+  config+=" --shell="
+  config+=" --theme="
+  config+=" --title="
+  config+=" --visual-bell-audio-file="
+  config+=" --visual-bell-color="
+  config+=" --visual-bell-command="
+  config+=" --visual-bell-duration="
+  config+=" --visual-bell-mode="
+  config+=" --wayland-app-id="
+  config+=" --wayland-csd-mode="
+  config+=" --window-class="
+  config+=" --window-size="
+  config+=" --window-size-locked="
+  config+=" --working-directory="
+  config+=" --x11-csd-mode="
+  config+=" --x11-display="
+  config+=" --x11-window-type="
+  config+=" --zoom="
 
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
+    case "$prev" in
+      --allow-hyperlink) return ;;      --allow-tracking) return ;;      --blink-text) return ;;      --bold-bright) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --cell-height) return ;;      --cell-width) return ;;      --clipboard-autocopy) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --cursor-blink) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --cursor-color) return ;;      --cursor-shape) mapfile -t COMPREPLY < <( compgen -W "block underline bar" -- "$cur" ); _add_spaces ;;      --default-working-directory) return ;;      --disable-font-fallback) return ;;      --disable-ligatures) return ;;      --enable-wayland) return ;;      --exclude-from) _files ;;      --font-family) _fonts ;;      --font-features) return ;;      --font-size) return ;;      --font-variations) return ;;      --foreground-color) return ;;      --hide-menubar) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --hide-scrollbar) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --ime) mapfile -t COMPREPLY < <( compgen -W "none ibus" -- "$cur" ); _add_spaces ;;      --letter-spacing) return ;;      --line-height) return ;;      --login-shell) return ;;      --maximized) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --opacity) return ;;      --padding-bottom) return ;;      --padding-left) return ;;      --padding-right) return ;;      --padding-top) return ;;      --scrollback-lines) return ;;      --scrollback-unlimited) return ;;      --shell) return ;;      --theme) _themes ;;      --title) return ;;      --visual-bell-audio-file) return ;;      --visual-bell-color) return ;;      --visual-bell-command) return ;;      --visual-bell-duration) return ;;      --visual-bell-mode) mapfile -t COMPREPLY < <( compgen -W "none flash" -- "$cur" ); _add_spaces ;;      --wayland-app-id) return ;;      --wayland-csd-mode) mapfile -t COMPREPLY < <( compgen -W "client server" -- "$cur" ); _add_spaces ;;      --window-class) return ;;      --window-size) return ;;      --window-size-locked) mapfile -t COMPREPLY < <( compgen -W "true false" -- "$cur" ); _add_spaces ;;      --working-directory) _dirs ;;      --x11-csd-mode) mapfile -t COMPREPLY < <( compgen -W "client server" -- "$cur" ); _add_spaces ;;      --x11-display) return ;;      --x11-window-type) mapfile -t COMPREPLY < <( compgen -W "normal dialog splash utility toolbar menu tooltip dropdown-menu popup-menu" -- "$cur" ); _add_spaces ;;      --zoom) return ;;      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
+    esac
 
-        const options = @field(Action, field.name).options();
-        // assumes options will never be created with only <_name> members
-        if (@typeInfo(options).@"struct".fields.len == 0) continue;
+    return 0
+  }
 
-        var buffer: [field.name.len]u8 = undefined;
-        const bashName: []u8 = buffer[0..field.name.len];
-        @memcpy(bashName, field.name);
+  _handle_actions() {
 
-        std.mem.replaceScalar(u8, bashName, '-', '_');
-        try writer.writeAll(pad2 ++ "local " ++ bashName ++ "=\"");
+    local activate=""
+    local close_other_tabs=""
+    local close_tab=""
+    local copy=""
+    local detach=" --config-file="
+    local font_info=""
+    local list_fonts=""
+    local list_themes=""
+    local new_tab=" --config-file="
+    local new_window=" --config-file="
+    local next_tab=""
+    local paste=""
+    local prev_tab=""
+    local quit=""
+    local reload_config=""
+    local reset=""
+    local select_tab=""
+    local spawn=" --config-file="
+    local toggle_fullscreen=""
+    local toggle_maximized=""
+    local version=""
 
-        {
-            var count = 0;
-            for (@typeInfo(options).@"struct".fields) |opt| {
-                if (opt.name[0] == '_') continue;
-                if (count > 0) try writer.writeAll(" ");
-                switch (opt.type) {
-                    bool, ?bool => try writer.writeAll("'--" ++ opt.name ++ " '"),
-                    else => try writer.writeAll("--" ++ opt.name ++ "="),
-                }
-                count += 1;
-            }
-        }
-        try writer.writeAll(" --help\"\n");
-    }
+    case "${COMP_WORDS[1]}" in
 
-    try writer.writeAll(
-        \\
-        \\    case "${COMP_WORDS[1]}" in
-        \\
-    );
+      +activate)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$activate" -- "$cur" ) ;;
+        esac
+      ;;
+      +close-other-tabs)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$close_other_tabs" -- "$cur" ) ;;
+        esac
+      ;;
+      +close-tab)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$close_tab" -- "$cur" ) ;;
+        esac
+      ;;
+      +copy)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$copy" -- "$cur" ) ;;
+        esac
+      ;;
+      +detach)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$detach" -- "$cur" ) ;;
+        esac
+      ;;
+      +font-info)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$font_info" -- "$cur" ) ;;
+        esac
+      ;;
+      +list-fonts)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$list_fonts" -- "$cur" ) ;;
+        esac
+      ;;
+      +list-themes)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$list_themes" -- "$cur" ) ;;
+        esac
+      ;;
+      +new-tab)
+        case $prev in
+          --config-file) _files ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$new_tab" -- "$cur" ) ;;
+        esac
+      ;;
+      +new-window)
+        case $prev in
+          --config-file) _files ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$new_window" -- "$cur" ) ;;
+        esac
+      ;;
+      +next-tab)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$next_tab" -- "$cur" ) ;;
+        esac
+      ;;
+      +paste)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$paste" -- "$cur" ) ;;
+        esac
+      ;;
+      +prev-tab)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$prev_tab" -- "$cur" ) ;;
+        esac
+      ;;
+      +quit)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$quit" -- "$cur" ) ;;
+        esac
+      ;;
+      +reload-config)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$reload_config" -- "$cur" ) ;;
+        esac
+      ;;
+      +reset)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$reset" -- "$cur" ) ;;
+        esac
+      ;;
+      +select-tab)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$select_tab" -- "$cur" ) ;;
+        esac
+      ;;
+      +spawn)
+        case $prev in
+          --config-file) _files ;;
+          *) mapfile -t COMPREPLY < <( compgen -W "$spawn" -- "$cur" ) ;;
+        esac
+      ;;
+      +toggle-fullscreen)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$toggle_fullscreen" -- "$cur" ) ;;
+        esac
+      ;;
+      +toggle-maximized)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$toggle_maximized" -- "$cur" ) ;;
+        esac
+      ;;
+      +version)
+        case $prev in
+          *) mapfile -t COMPREPLY < <( compgen -W "$version" -- "$cur" ) ;;
+        esac
+      ;;
+      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
+    esac
 
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
+    return 0
+  }
 
-        const options = @field(Action, field.name).options();
-        if (@typeInfo(options).@"struct".fields.len == 0) continue;
+  # begin main logic
+  local topLevel="-e"
+  topLevel+=" --help"
+  topLevel+=" --version"
+  topLevel+=" +activate"
+  topLevel+=" +close-other-tabs"
+  topLevel+=" +close-tab"
+  topLevel+=" +copy"
+  topLevel+=" +detach"
+  topLevel+=" +font-info"
+  topLevel+=" +list-fonts"
+  topLevel+=" +list-themes"
+  topLevel+=" +new-tab"
+  topLevel+=" +new-window"
+  topLevel+=" +next-tab"
+  topLevel+=" +paste"
+  topLevel+=" +prev-tab"
+  topLevel+=" +quit"
+  topLevel+=" +reload-config"
+  topLevel+=" +reset"
+  topLevel+=" +select-tab"
+  topLevel+=" +spawn"
+  topLevel+=" +toggle-fullscreen"
+  topLevel+=" +toggle-maximized"
+  topLevel+=" +version"
 
-        // bash doesn't allow variable names containing '-' so replace them
-        var buffer: [field.name.len]u8 = undefined;
-        const bashName: []u8 = buffer[0..field.name.len];
-        _ = std.mem.replace(u8, field.name, "-", "_", bashName);
+  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
+  local ghostty="$1"
 
-        try writer.writeAll(pad3 ++ "+" ++ field.name ++ ")\n");
-        try writer.writeAll(pad4 ++ "case $prev in\n");
-        for (@typeInfo(options).@"struct".fields) |opt| {
-            if (opt.name[0] == '_') continue;
+  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
+  # if = is missing this script will degrade to matching on keys only.
+  # eg: --key=
+  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
 
-            try writer.writeAll(pad5 ++ "--" ++ opt.name ++ ") ");
+  if [ "$2" = "=" ]; then cur=""
+  else                    cur="$2"
+  fi
 
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(opt.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .optional => |optional| {
-                    switch (@typeInfo(optional.child)) {
-                        .@"enum" => |info| {
-                            try writer.writeAll(compgenPrefix);
-                            for (info.fields, 0..) |f, i| {
-                                if (i > 0) try writer.writeAll(" ");
-                                try writer.writeAll(f.name);
-                            }
-                            try writer.writeAll(compgenSuffix);
-                        },
-                        else => {
-                            if (std.mem.eql(u8, "config-file", opt.name)) {
-                                try writer.writeAll("return ;;");
-                            } else try writer.writeAll("return;;");
-                        },
-                    }
-                },
-                else => {
-                    if (std.mem.eql(u8, "config-file", opt.name)) {
-                        try writer.writeAll("_files ;;");
-                    } else try writer.writeAll("return;;");
-                },
-            }
-            try writer.writeAll("\n");
-        }
-        try writer.writeAll(pad5 ++ "*) mapfile -t COMPREPLY < <( compgen -W \"$" ++ bashName ++ "\" -- \"$cur\" ) ;;\n");
-        try writer.writeAll(
-            \\        esac
-            \\      ;;
-            \\
-        );
-    }
+  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
+  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
+  fi
 
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
-        \\    esac
-        \\
-        \\    return 0
-        \\  }
-        \\
-        \\  # begin main logic
-        \\  local topLevel="-e"
-        \\  topLevel+=" --help"
-        \\  topLevel+=" --version"
-        \\
-    );
+  # current completion is double quoted add a space so the curor progresses
+  if [[ "$2" == \"* ]]; then
+    COMPREPLY=( "$cur " );
+    return;
+  fi
 
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
+  case "$COMP_CWORD" in
+    1)
+      case "${COMP_WORDS[1]}" in
+        -e | --help | --version) return 0 ;;
+        --*) _handle_config ;;
+        *) mapfile -t COMPREPLY < <( compgen -W "${topLevel}" -- "$cur" ); _add_spaces ;;
+      esac
+      ;;
+    *)
+      case "$prev" in
+        -e | --help | --version) return 0 ;;
+        *)
+          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
+            # must be completing with a space after the key eg: '--<key> '
+            # clear out prev so we don't run any of the key specific completions
+            prev=""
+          fi
+        
+          case "${COMP_WORDS[1]}" in
+            --*) _handle_config ;;
+            +*) _handle_actions ;;
+          esac
+          ;;
+      esac
+      ;;
+  esac
 
-        try writer.writeAll(pad1 ++ "topLevel+=\" +" ++ field.name ++ "\"\n");
-    }
+  return 0
+}
 
-    try writer.writeAll(
-        \\
-        \\  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
-        \\  local ghostty="$1"
-        \\
-        \\  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
-        \\  # if = is missing this script will degrade to matching on keys only.
-        \\  # eg: --key=
-        \\  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
-        \\
-        \\  if [ "$2" = "=" ]; then cur=""
-        \\  else                    cur="$2"
-        \\  fi
-        \\
-        \\  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
-        \\  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
-        \\  fi
-        \\
-        \\  # current completion is double quoted add a space so the curor progresses
-        \\  if [[ "$2" == \"*\" ]]; then
-        \\    COMPREPLY=( "$cur " );
-        \\    return;
-        \\  fi
-        \\
-        \\  case "$COMP_CWORD" in
-        \\    1)
-        \\      case "${COMP_WORDS[1]}" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        --*) _handle_config ;;
-        \\        *) mapfile -t COMPREPLY < <( compgen -W "${topLevel}" -- "$cur" ); _add_spaces ;;
-        \\      esac
-        \\      ;;
-        \\    *)
-        \\      case "$prev" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        *)
-        \\          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
-        \\            # must be completing with a space after the key eg: '--<key> '
-        \\            # clear out prev so we don't run any of the key specific completions
-        \\            prev=""
-        \\          fi
-        \\
-        \\          case "${COMP_WORDS[1]}" in
-        \\            --*) _handle_config ;;
-        \\            +*) _handle_actions ;;
-        \\          esac
-        \\          ;;
-        \\      esac
-        \\      ;;
-        \\  esac
-        \\
-        \\  return 0
-        \\}
-        \\
-        \\complete -o nospace -o bashdefault -F _ghostty ghostty
-        \\
-    );
-}
\ No newline at end of file
+complete -o nospace -o bashdefault -F _ghostty ghostty
\ No newline at end of file
