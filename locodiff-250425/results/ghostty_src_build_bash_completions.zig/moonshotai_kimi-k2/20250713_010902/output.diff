
index bb347e1ba..5bf222949 100644
--- a/ghostty_src_build_bash_completions.zig_expectedoutput.txt (expected):tmp/tmphai4m4gi_expected.txt	
+++ b/ghostty_src_build_bash_completions.zig_extracted.txt (actual):tmp/tmpp7h5st1z_actual.txt	
@@ -39,7 +39,7 @@ fn writeBashCompletions(writer: anytype) !void {
 
     try writer.writeAll(
         \\_ghostty() {
-        \\
+        \
         \\  # -o nospace requires we add back a space when a completion is finished
         \\  # and not part of a --key= completion
         \\  _add_spaces() {
@@ -47,17 +47,17 @@ fn writeBashCompletions(writer: anytype) !void {
         \\      [ -n "${COMPREPLY[idx]}" ] && COMPREPLY[idx]="${COMPREPLY[idx]} ";
         \\    done
         \\  }
-        \\
+        \
         \\  _fonts() {
         \\    local IFS=$'\n'
         \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
         \\  }
-        \\
+        \
         \\  _themes() {
         \\    local IFS=$'\n'
         \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
         \\  }
-        \\
+        \
         \\  _files() {
         \\    mapfile -t COMPREPLY < <( compgen -o filenames -f -- "$cur" )
         \\    for i in "${!COMPREPLY[@]}"; do
@@ -69,7 +69,7 @@ fn writeBashCompletions(writer: anytype) !void {
         \\      fi
         \\    done
         \\  }
-        \\
+        \
         \\  _dirs() {
         \\    mapfile -t COMPREPLY < <( compgen -o dirnames -d -- "$cur" )
         \\    for i in "${!COMPREPLY[@]}"; do
@@ -81,11 +81,11 @@ fn writeBashCompletions(writer: anytype) !void {
         \\      COMPREPLY=( "$cur " )
         \\    fi
         \\  }
-        \\
+        \
         \\  _handle_config() {
         \\    local config="--help"
         \\    config+=" --version"
-        \\
+        \
     );
 
     for (@typeInfo(Config).@"struct".fields) |field| {
@@ -97,9 +97,9 @@ fn writeBashCompletions(writer: anytype) !void {
     }
 
     try writer.writeAll(
-        \\
+        \
         \\    case "$prev" in
-        \\
+        \
     );
 
     for (@typeInfo(Config).@"struct".fields) |field| {
@@ -149,12 +149,12 @@ fn writeBashCompletions(writer: anytype) !void {
     try writer.writeAll(
         \\      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
         \\    esac
-        \\
+        \
         \\    return 0
         \\  }
-        \\
+        \
         \\  _handle_actions() {
-        \\
+        \
     );
 
     for (@typeInfo(Action).@"enum".fields) |field| {
@@ -188,9 +188,9 @@ fn writeBashCompletions(writer: anytype) !void {
     }
 
     try writer.writeAll(
-        \\
+        \
         \\    case "${COMP_WORDS[1]}" in
-        \\
+        \
     );
 
     for (@typeInfo(Action).@"enum".fields) |field| {
@@ -224,115 +224,4 @@ fn writeBashCompletions(writer: anytype) !void {
                     }
                     try writer.writeAll(compgenSuffix);
                 },
-                .optional => |optional| {
-                    switch (@typeInfo(optional.child)) {
-                        .@"enum" => |info| {
-                            try writer.writeAll(compgenPrefix);
-                            for (info.fields, 0..) |f, i| {
-                                if (i > 0) try writer.writeAll(" ");
-                                try writer.writeAll(f.name);
-                            }
-                            try writer.writeAll(compgenSuffix);
-                        },
-                        else => {
-                            if (std.mem.eql(u8, "config-file", opt.name)) {
-                                try writer.writeAll("return ;;");
-                            } else try writer.writeAll("return;;");
-                        },
-                    }
-                },
-                else => {
-                    if (std.mem.eql(u8, "config-file", opt.name)) {
-                        try writer.writeAll("_files ;;");
-                    } else try writer.writeAll("return;;");
-                },
-            }
-            try writer.writeAll("\n");
-        }
-        try writer.writeAll(pad5 ++ "*) mapfile -t COMPREPLY < <( compgen -W \"$" ++ bashName ++ "\" -- \"$cur\" ) ;;\n");
-        try writer.writeAll(
-            \\        esac
-            \\      ;;
-            \\
-        );
-    }
-
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
-        \\    esac
-        \\
-        \\    return 0
-        \\  }
-        \\
-        \\  # begin main logic
-        \\  local topLevel="-e"
-        \\  topLevel+=" --help"
-        \\  topLevel+=" --version"
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        try writer.writeAll(pad1 ++ "topLevel+=\" +" ++ field.name ++ "\"\n");
-    }
-
-    try writer.writeAll(
-        \\
-        \\  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
-        \\  local ghostty="$1"
-        \\
-        \\  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
-        \\  # if = is missing this script will degrade to matching on keys only.
-        \\  # eg: --key=
-        \\  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
-        \\
-        \\  if [ "$2" = "=" ]; then cur=""
-        \\  else                    cur="$2"
-        \\  fi
-        \\
-        \\  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
-        \\  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
-        \\  fi
-        \\
-        \\  # current completion is double quoted add a space so the curor progresses
-        \\  if [[ "$2" == \"*\" ]]; then
-        \\    COMPREPLY=( "$cur " );
-        \\    return;
-        \\  fi
-        \\
-        \\  case "$COMP_CWORD" in
-        \\    1)
-        \\      case "${COMP_WORDS[1]}" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        --*) _handle_config ;;
-        \\        *) mapfile -t COMPREPLY < <( compgen -W "${topLevel}" -- "$cur" ); _add_spaces ;;
-        \\      esac
-        \\      ;;
-        \\    *)
-        \\      case "$prev" in
-        \\        -e | --help | --version) return 0 ;;
-        \\        *)
-        \\          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
-        \\            # must be completing with a space after the key eg: '--<key> '
-        \\            # clear out prev so we don't run any of the key specific completions
-        \\            prev=""
-        \\          fi
-        \\
-        \\          case "${COMP_WORDS[1]}" in
-        \\            --*) _handle_config ;;
-        \\            +*) _handle_actions ;;
-        \\          esac
-        \\          ;;
-        \\      esac
-        \\      ;;
-        \\  esac
-        \\
-        \\  return 0
-        \\}
-        \\
-        \\complete -o nospace -o bashdefault -F _ghostty ghostty
-        \\
-    );
-}
\ No newline at end of file
+                .optional =>
\ No newline at end of file
