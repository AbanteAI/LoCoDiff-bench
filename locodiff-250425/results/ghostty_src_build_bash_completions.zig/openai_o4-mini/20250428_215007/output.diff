--- ghostty_src_build_bash_completions.zig_expectedoutput.txt (expected)+++ ghostty_src_build_bash_completions.zig_extracted.txt (actual)@@ -49,13 +49,13 @@         \\  }
         \\
         \\  _fonts() {
-        \\    local IFS=$'\n'
+        \\    local IFS=$'\\n'
         \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-fonts | grep '^[A-Z]' )" -- "$cur")
         \\  }
         \\
         \\  _themes() {
-        \\    local IFS=$'\n'
-        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \(.*$/\1/')" -- "$cur")
+        \\    local IFS=$'\\n'
+        \\    mapfile -t COMPREPLY < <( compgen -P '"' -S '"' -W "$($ghostty +list-themes | sed -E 's/^(.*) \\(.*$/\\1/')" -- "$cur")
         \\  }
         \\
         \\  _files() {
@@ -85,7 +85,7 @@         \\  _handle_config() {
         \\    local config="--help"
         \\    config+=" --version"
-        \\
+        \\    case "$prev" in
     );
 
     for (@typeInfo(Config).@"struct".fields) |field| {
@@ -97,64 +97,13 @@     }
 
     try writer.writeAll(
-        \\
-        \\    case "$prev" in
-        \\
-    );
-
-    for (@typeInfo(Config).@"struct".fields) |field| {
-        if (field.name[0] == '_') continue;
-        try writer.writeAll(pad3 ++ "--" ++ field.name ++ ") ");
-
-        if (std.mem.startsWith(u8, field.name, "font-family"))
-            try writer.writeAll("_fonts ;;")
-        else if (std.mem.eql(u8, "theme", field.name))
-            try writer.writeAll("_themes ;;")
-        else if (std.mem.eql(u8, "working-directory", field.name))
-            try writer.writeAll("_dirs ;;")
-        else if (field.type == Config.RepeatablePath)
-            try writer.writeAll("_files ;;")
-        else {
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(field.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .@"struct" => |info| {
-                    if (!@hasDecl(field.type, "parseCLI") and info.layout == .@"packed") {
-                        try writer.writeAll(compgenPrefix);
-                        for (info.fields, 0..) |f, i| {
-                            if (i > 0) try writer.writeAll(" ");
-                            try writer.writeAll(f.name ++ " no-" ++ f.name);
-                        }
-                        try writer.writeAll(compgenSuffix);
-                    } else {
-                        try writer.writeAll("return ;;");
-                    }
-                },
-                else => try writer.writeAll("return ;;"),
-            }
-        }
-
-        try writer.writeAll("\n");
-    }
-
-    try writer.writeAll(
         \\      *) mapfile -t COMPREPLY < <( compgen -W "$config" -- "$cur" ) ;;
         \\    esac
-        \\
         \\    return 0
         \\  }
         \\
         \\  _handle_actions() {
-        \\
+        \\    case "${COMP_WORDS[1]}" in
     );
 
     for (@typeInfo(Action).@"enum".fields) |field| {
@@ -188,102 +137,17 @@     }
 
     try writer.writeAll(
-        \\
-        \\    case "${COMP_WORDS[1]}" in
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        const options = @field(Action, field.name).options();
-        if (@typeInfo(options).@"struct".fields.len == 0) continue;
-
-        // bash doesn't allow variable names containing '-' so replace them
-        var buffer: [field.name.len]u8 = undefined;
-        const bashName: []u8 = buffer[0..field.name.len];
-        _ = std.mem.replace(u8, field.name, "-", "_", bashName);
-
-        try writer.writeAll(pad3 ++ "+" ++ field.name ++ ")\n");
-        try writer.writeAll(pad4 ++ "case $prev in\n");
-        for (@typeInfo(options).@"struct".fields) |opt| {
-            if (opt.name[0] == '_') continue;
-
-            try writer.writeAll(pad5 ++ "--" ++ opt.name ++ ") ");
-
-            const compgenPrefix = "mapfile -t COMPREPLY < <( compgen -W \"";
-            const compgenSuffix = "\" -- \"$cur\" ); _add_spaces ;;";
-            switch (@typeInfo(opt.type)) {
-                .bool => try writer.writeAll("return ;;"),
-                .@"enum" => |info| {
-                    try writer.writeAll(compgenPrefix);
-                    for (info.fields, 0..) |f, i| {
-                        if (i > 0) try writer.writeAll(" ");
-                        try writer.writeAll(f.name);
-                    }
-                    try writer.writeAll(compgenSuffix);
-                },
-                .optional => |optional| {
-                    switch (@typeInfo(optional.child)) {
-                        .@"enum" => |info| {
-                            try writer.writeAll(compgenPrefix);
-                            for (info.fields, 0..) |f, i| {
-                                if (i > 0) try writer.writeAll(" ");
-                                try writer.writeAll(f.name);
-                            }
-                            try writer.writeAll(compgenSuffix);
-                        },
-                        else => {
-                            if (std.mem.eql(u8, "config-file", opt.name)) {
-                                try writer.writeAll("return ;;");
-                            } else try writer.writeAll("return;;");
-                        },
-                    }
-                },
-                else => {
-                    if (std.mem.eql(u8, "config-file", opt.name)) {
-                        try writer.writeAll("_files ;;");
-                    } else try writer.writeAll("return;;");
-                },
-            }
-            try writer.writeAll("\n");
-        }
-        try writer.writeAll(pad5 ++ "*) mapfile -t COMPREPLY < <( compgen -W \"$" ++ bashName ++ "\" -- \"$cur\" ) ;;\n");
-        try writer.writeAll(
-            \\        esac
-            \\      ;;
-            \\
-        );
-    }
-
-    try writer.writeAll(
-        \\      *) mapfile -t COMPREPLY < <( compgen -W "--help" -- "$cur" ) ;;
         \\    esac
-        \\
-        \\    return 0
         \\  }
         \\
         \\  # begin main logic
         \\  local topLevel="-e"
         \\  topLevel+=" --help"
         \\  topLevel+=" --version"
-        \\
-    );
-
-    for (@typeInfo(Action).@"enum".fields) |field| {
-        if (std.mem.eql(u8, "help", field.name)) continue;
-        if (std.mem.eql(u8, "version", field.name)) continue;
-
-        try writer.writeAll(pad1 ++ "topLevel+=\" +" ++ field.name ++ "\"\n");
-    }
-
-    try writer.writeAll(
-        \\
         \\  local cur=""; local prev=""; local prevWasEq=false; COMPREPLY=()
         \\  local ghostty="$1"
         \\
-        \\  # script assumes default COMP_WORDBREAKS of roughly $' \t\n"\'><=;|&(:'
+        \\  # script assumes default COMP_WORDBREAKS of roughly $' \\t\\n\"\\'\\><=;|&(:'
         \\  # if = is missing this script will degrade to matching on keys only.
         \\  # eg: --key=
         \\  # this can be improved if needed see: https://github.com/ghostty-org/ghostty/discussions/2994
@@ -291,17 +155,9 @@         \\  if [ "$2" = "=" ]; then cur=""
         \\  else                    cur="$2"
         \\  fi
-        \\
         \\  if [ "$3" = "=" ]; then prev="${COMP_WORDS[COMP_CWORD-2]}"; prevWasEq=true;
         \\  else                    prev="${COMP_WORDS[COMP_CWORD-1]}"
         \\  fi
-        \\
-        \\  # current completion is double quoted add a space so the curor progresses
-        \\  if [[ "$2" == \"*\" ]]; then
-        \\    COMPREPLY=( "$cur " );
-        \\    return;
-        \\  fi
-        \\
         \\  case "$COMP_CWORD" in
         \\    1)
         \\      case "${COMP_WORDS[1]}" in
@@ -314,12 +170,6 @@         \\      case "$prev" in
         \\        -e | --help | --version) return 0 ;;
         \\        *)
-        \\          if [[ "=" != "${COMP_WORDS[COMP_CWORD]}" && $prevWasEq != true ]]; then
-        \\            # must be completing with a space after the key eg: '--<key> '
-        \\            # clear out prev so we don't run any of the key specific completions
-        \\            prev=""
-        \\          fi
-        \\
         \\          case "${COMP_WORDS[1]}" in
         \\            --*) _handle_config ;;
         \\            +*) _handle_actions ;;
@@ -328,7 +178,6 @@         \\      esac
         \\      ;;
         \\  esac
-        \\
         \\  return 0
         \\}
         \\
