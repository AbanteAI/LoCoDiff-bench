use std::path::Path;
use std::sync::Arc;

use common::types::PointOffsetType;
use memmap2::Mmap;
use memory::madvise::{Advice, AdviceSetting, Madviseable};
use memory::mmap_ops::open_read_mmap;

use crate::common::operation_error::OperationResult;

mod header;
mod serializer;
mod view;

pub use serializer::GraphLinksSerializer;
pub use view::LinksIterator;
use view::{CompressionInfo, GraphLinksView};

#[derive(Clone, Debug, Copy, Eq, PartialEq)]
pub enum GraphLinksFormat {
    Plain,
    Compressed,
}

/*
Links data for whole graph layers.

                                    sorted
                     points:        points:
points to lvl        012345         142350
     0 -> 0
     1 -> 4    lvl4:  7       lvl4: 7
     2 -> 2    lvl3:  Z  Y    lvl3: ZY
     3 -> 2    lvl2:  abcd    lvl2: adbc
     4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
     5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted


lvl offset:        6       11     15     17
                   │       │      │      │
                   │       │      │      │
                   ▼       ▼      ▼      ▼
indexes:  012345   6789A   BCDE   FG     H

flatten:  123456   ADBCE   adbc   ZY     7
                   ▲ ▲ ▲   ▲ ▲    ▲      ▲
                   │ │ │   │ │    │      │
                   │ │ │   │ │    │      │
                   │ │ │   │ │    │      │
reindex:           142350  142350 142350 142350  (same for each level)


for lvl > 0:
links offset = level_offsets[level] + offsets[reindex[point_id]]
*/

self_cell::self_cell! {
    /// GraphLinks is the storage of HNSW graph links, either in memory or mmapped.
    pub struct GraphLinks {
        owner: GraphLinksEnum,
        #[covariant]
        dependent: GraphLinksView<'owner>,
    }
}

#[derive(Debug)]
enum GraphLinksEnum {
    Ram(Vec<u8>),
    Mmap(Arc<Mmap>),
}

impl GraphLinksEnum {
    fn load_view(&self) -> OperationResult<GraphLinksView> {
        let data = match self {
            GraphLinksEnum::Ram(data) => data.as_slice(),
            GraphLinksEnum::Mmap(mmap) => &mmap[..],
        };
        GraphLinksView::load(data)
    }
}

impl GraphLinks {
    /// Load graph links from file.
    /// If `on_disk` is false, it will pre-fault the pages into memory.
    pub fn load_from_file(path: &Path, on_disk: bool, format: GraphLinksFormat) -> OperationResult<Self> {
        let populate = !on_disk;
        let mmap = open_read_mmap(path, AdviceSetting::Advice(Advice::Random), populate)?;
        Self::try_new(GraphLinksEnum::Mmap(Arc::new(mmap)), |x| x.load_view(format))
    }

    /// Populate the disk cache with the mmapped data, if using mmapped storage.
    pub fn populate(&self) -> OperationResult<()> {
        match self.borrow_owner() {
            GraphLinksEnum::Mmap(mmap) => mmap.populate(),
            GraphLinksEnum::Ram(_) => {},
        };
        Ok(())
    }

    /// Iterate links for a given point and level.
    #[inline]
    pub fn links(&self, point_id: PointOffsetType, level: usize) -> LinksIterator {
        self.view().links(point_id, level)
    }

    /// Get the maximum level for the given point.
    pub fn point_level(&self, point_id: PointOffsetType) -> usize {
        self.view().point_level(point_id)
    }

    /// Convert the graph links into a nested Vec representation.
    pub fn into_edges(self) -> Vec<Vec<Vec<PointOffsetType>>> {
        let mut edges = Vec::with_capacity(self.num_points());
        for point_id in 0..self.num_points() {
            let num_levels = self.point_level(point_id as PointOffsetType) + 1;
            let mut levels = Vec::with_capacity(num_levels);
            for level in 0..num_levels {
                levels.push(self.links(point_id, level).collect());
            }
            edges.push(levels);
        }
        edges
    }

    /// Number of points in the graph.
    pub fn num_points(&self) -> usize {
        self.view().reindex.len()
    }

    /// Check if links are stored on disk (mmap).
    #[inline]
    pub fn on_disk(&self) -> bool {
        matches!(self.borrow_owner(), GraphLinksEnum::Mmap(_))
    }

    /// Check if links storage is compressed.
    pub fn compressed(&self) -> bool {
        matches!(self.view().compression, CompressionInfo::Compressed { .. })
    }
}