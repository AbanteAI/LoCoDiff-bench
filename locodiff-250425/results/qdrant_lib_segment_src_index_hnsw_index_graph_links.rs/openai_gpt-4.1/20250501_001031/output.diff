--- qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual)@@ -29,7 +29,6 @@      4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
      5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted
 
-
 lvl offset:        6       11     15     17
                    │       │      │      │
                    │       │      │      │
@@ -42,7 +41,6 @@                    │ │ │   │ │    │      │
                    │ │ │   │ │    │      │
 reindex:           142350  142350 142350 142350  (same for each level)
-
 
 for lvl > 0:
 links offset = level_offsets[level] + offsets[reindex[point_id]]
@@ -156,22 +154,18 @@     }
 }
 
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
-#[cfg(test)]
-pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
-    let first = links.len().min(m);
-    links[..first].sort_unstable();
-    links
-}
-
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
-    use rstest::rstest;
+    use rand::{seq::IteratorRandom, Rng as _, SeedableRng};
     use tempfile::Builder;
 
     use super::*;
+
+    fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
+        let first = links.len().min(m);
+        links[..first].sort_unstable();
+        links
+    }
 
     fn random_links(
         points_count: usize,
@@ -251,7 +245,7 @@         compare_links(links, cmp_links, format, m, m0);
     }
 
-    #[rstest]
+    #[rstest::rstest]
     #[case::uncompressed(GraphLinksFormat::Plain)]
     #[case::compressed(GraphLinksFormat::Compressed)]
     fn test_graph_links_construction(#[case] format: GraphLinksFormat) {
