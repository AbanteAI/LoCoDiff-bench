
index 39d70b1f5..01769c83f 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected):tmp/tmprxp57xp7_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual):tmp/tmphnr9mq1r_actual.txt	
@@ -4,6 +4,7 @@ use std::sync::Arc;
 use common::types::PointOffsetType;
 use memmap2::Mmap;
 use memory::madvise::{Advice, AdviceSetting, Madviseable};
+use memory::mmap_ops;
 use memory::mmap_ops::open_read_mmap;
 
 use crate::common::operation_error::OperationResult;
@@ -13,34 +14,33 @@ mod serializer;
 mod view;
 
 pub use serializer::GraphLinksSerializer;
-pub use view::LinksIterator;
-use view::{CompressionInfo, GraphLinksView};
+use view::{CompressionInfo, GraphLinksView, LinksIterator};
 
 /*
 Links data for whole graph layers.
 
-                                    sorted
-                     points:        points:
-points to lvl        012345         142350
-     0 -> 0
-     1 -> 4    lvl4:  7       lvl4: 7
-     2 -> 2    lvl3:  Z  Y    lvl3: ZY
-     3 -> 2    lvl2:  abcd    lvl2: adbc
-     4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
-     5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted
+                                   sorted
+                    points:        points:
+points to lvl       012345         142350
+    0 -> 0
+    1 -> 4    lvl4:  7       lvl4: 7
+    2 -> 2    lvl3:  Z  Y    lvl3: ZY
+    3 -> 2    lvl2:  abcd    lvl2: adbc
+    4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
+    5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted
 
 
 lvl offset:        6       11     15     17
-                   │       │      │      │
-                   │       │      │      │
-                   ▼       ▼      ▼      ▼
+                  │       │      │      │
+                  │       │      │      │
+                  ▼       ▼      ▼      ▼
 indexes:  012345   6789A   BCDE   FG     H
 
 flatten:  123456   ADBCE   adbc   ZY     7
-                   ▲ ▲ ▲   ▲ ▲    ▲      ▲
-                   │ │ │   │ │    │      │
-                   │ │ │   │ │    │      │
-                   │ │ │   │ │    │      │
+                  ▲ ▲ ▲   ▲ ▲    ▲      ▲
+                  │ │ │   │ │    │      │
+                  │ │ │   │ │    │      │
+                  │ │ │   │ │    │      │
 reindex:           142350  142350 142350 142350  (same for each level)
 
 
@@ -48,11 +48,7 @@ for lvl > 0:
 links offset = level_offsets[level] + offsets[reindex[point_id]]
 */
 
-#[derive(Debug, Clone, Copy, Eq, PartialEq)]
-pub enum GraphLinksFormat {
-    Plain,
-    Compressed,
-}
+pub const MMAP_PANIC_MESSAGE: &str = "Mmap links are not loaded";
 
 self_cell::self_cell! {
     pub struct GraphLinks {
@@ -167,12 +163,27 @@ pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<
 
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
+    use rand::RngCore as _;
     use rstest::rstest;
     use tempfile::Builder;
 
     use super::*;
 
+    fn to_vec(links: &GraphLinks) -> Vec<Vec<Vec<PointOffsetType>>> {
+        let mut result = Vec::new();
+        let num_points = links.num_points();
+        for i in 0..num_points {
+            let mut layers = Vec::new();
+            let num_levels = links.point_level(i as PointOffsetType) + 1;
+            for level in 0..num_levels {
+                let links = links.links(i as PointOffsetType, level).collect_vec();
+                layers.push(links);
+            }
+            result.push(layers);
+        }
+        result
+    }
+
     fn random_links(
         points_count: usize,
         max_levels_count: usize,
