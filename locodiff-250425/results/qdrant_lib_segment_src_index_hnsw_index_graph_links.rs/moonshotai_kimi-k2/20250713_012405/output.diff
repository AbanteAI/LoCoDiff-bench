
index 39d70b1f5..055a0d280 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected):tmp/tmp7vnwer8m_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual):tmp/tmpjwwg_wf0_actual.txt	
@@ -156,30 +156,30 @@ impl GraphLinks {
     }
 }
 
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
-#[cfg(test)]
-pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
-    let first = links.len().min(m);
-    links[..first].sort_unstable();
-    links
-}
-
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
-    use rstest::rstest;
+    use itertools::Itertools as _;
+    use rand::prelude::*;
     use tempfile::Builder;
 
     use super::*;
 
+    /// Sort the first `m` values in `links` and return them. Used to compare stored
+    /// links where the order of the first `m` links is not preserved.
+    #[cfg(test)]
+    pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
+        let first = links.len().min(m);
+        links[..first].sort_unstable();
+        links
+    }
+
     fn random_links(
         points_count: usize,
         max_levels_count: usize,
         m: usize,
         m0: usize,
     ) -> Vec<Vec<Vec<PointOffsetType>>> {
-        let mut rng = rand::rng();
+        let mut rng = rng();
         (0..points_count)
             .map(|_| {
                 let levels_count = rng.random_range(1..max_levels_count);
@@ -251,7 +251,7 @@ mod tests {
         compare_links(links, cmp_links, format, m, m0);
     }
 
-    #[rstest]
+    #[rstest::rstest]
     #[case::uncompressed(GraphLinksFormat::Plain)]
     #[case::compressed(GraphLinksFormat::Compressed)]
     fn test_graph_links_construction(#[case] format: GraphLinksFormat) {
