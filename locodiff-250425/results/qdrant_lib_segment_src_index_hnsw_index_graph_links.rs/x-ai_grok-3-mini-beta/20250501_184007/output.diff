--- qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual)@@ -1,20 +1,26 @@+use std::cmp::Reverse;
+use std::fs::File;
+use std::io::Write;
+use std::mem::take;
 use std::path::Path;
 use std::sync::Arc;
 
 use common::types::PointOffsetType;
 use memmap2::Mmap;
-use memory::madvise::{Advice, AdviceSetting, Madviseable};
+use memory::madvise::{Advice, AdviceSetting};
+use memory::mmap_ops;
 use memory::mmap_ops::open_read_mmap;
 
 use crate::common::operation_error::OperationResult;
+
+pub const MMAP_PANIC_MESSAGE: &str = "Mmap links are not loaded";
 
 mod header;
 mod serializer;
 mod view;
 
 pub use serializer::GraphLinksSerializer;
-pub use view::LinksIterator;
-use view::{CompressionInfo, GraphLinksView};
+use view::{CompressionInfo, GraphLinksView, LinksIterator};
 
 /*
 Links data for whole graph layers.
@@ -29,7 +35,6 @@      4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
      5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted
 
-
 lvl offset:        6       11     15     17
                    │       │      │      │
                    │       │      │      │
@@ -43,16 +48,9 @@                    │ │ │   │ │    │      │
 reindex:           142350  142350 142350 142350  (same for each level)
 
-
 for lvl > 0:
 links offset = level_offsets[level] + offsets[reindex[point_id]]
 */
-
-#[derive(Debug, Clone, Copy, Eq, PartialEq)]
-pub enum GraphLinksFormat {
-    Plain,
-    Compressed,
-}
 
 self_cell::self_cell! {
     pub struct GraphLinks {
@@ -60,7 +58,6 @@         #[covariant]
         dependent: GraphLinksView,
     }
-
     impl {Debug}
 }
 
@@ -130,6 +127,12 @@         self.view().point_level(point_id)
     }
 
+    pub fn links_vec(&self, point_id: PointOffsetType, level: usize) -> Vec<PointOffsetType> {
+        let mut links = Vec::new();
+        self.for_each_link(point_id, level, |link| links.push(link));
+        links
+    }
+
     /// Convert the graph links to a vector of edges, suitable for passing into
     /// [`GraphLinksSerializer::new`] or using in tests.
     pub fn into_edges(self) -> Vec<Vec<Vec<PointOffsetType>>> {
@@ -138,21 +141,22 @@             let num_levels = self.point_level(point_id as PointOffsetType) + 1;
             let mut levels = Vec::with_capacity(num_levels);
             for level in 0..num_levels {
-                levels.push(self.links(point_id as PointOffsetType, level).collect());
+                levels.push(self.links_vec(point_id as PointOffsetType, level));
             }
             edges.push(levels);
         }
+
         edges
     }
 
-    /// Populate the disk cache with data, if applicable.
-    /// This is a blocking operation.
-    pub fn populate(&self) -> OperationResult<()> {
+    pub fn prefault_mmap_pages(&self, path: &Path) -> Option<mmap_ops::PrefaultMmapPages> {
         match self.borrow_owner() {
-            GraphLinksEnum::Mmap(mmap) => mmap.populate(),
-            GraphLinksEnum::Ram(_) => {}
-        };
-        Ok(())
+            GraphLinksEnum::Mmap(mmap) => Some(mmap_ops::PrefaultMmapPages::new(
+                Arc::clone(mmap),
+                Some(path.to_owned()),
+            )),
+            GraphLinksEnum::Ram(_) => None,
+        }
     }
 }
 
@@ -172,30 +176,6 @@     use tempfile::Builder;
 
     use super::*;
-
-    fn random_links(
-        points_count: usize,
-        max_levels_count: usize,
-        m: usize,
-        m0: usize,
-    ) -> Vec<Vec<Vec<PointOffsetType>>> {
-        let mut rng = rand::rng();
-        (0..points_count)
-            .map(|_| {
-                let levels_count = rng.random_range(1..max_levels_count);
-                (0..levels_count)
-                    .map(|level| {
-                        let mut max_links_count = if level == 0 { m0 } else { m };
-                        max_links_count *= 2; // Simulate additional payload links.
-                        let links_count = rng.random_range(0..max_links_count);
-                        (0..links_count)
-                            .map(|_| rng.random_range(0..points_count) as PointOffsetType)
-                            .collect()
-                    })
-                    .collect()
-            })
-            .collect()
-    }
 
     fn compare_links(
         mut left: Vec<Vec<Vec<PointOffsetType>>>,
@@ -258,49 +238,41 @@         let m = 2;
         let m0 = m * 2;
 
-        let make_cmp_links = |links: Vec<Vec<Vec<PointOffsetType>>>,
-                              m: usize,
-                              m0: usize|
-         -> Vec<Vec<Vec<PointOffsetType>>> {
-            GraphLinksSerializer::new(links, format, m, m0)
-                .to_graph_links_ram()
-                .into_edges()
-        };
+        let make_cmp_links =
+            |links: Vec<Vec<Vec<PointOffsetType>>>,
+             format: GraphLinksFormat,
+             m: usize,
+             m0: usize|
+             -> Vec<Vec<Vec<PointOffsetType>>> {
+                GraphLinksSerializer::new(links, format, m, m0)
+                    .to_graph_links_ram()
+                    .into_edges()
+            };
 
         // no points
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 2 points without any links
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![vec![vec![]], vec![vec![]]];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // one link at level 0
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![vec![vec![1]], vec![vec![0]]];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 3 levels with no links at second level
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
             vec![vec![1, 2]],
             vec![vec![0, 2], vec![], vec![2]],
             vec![vec![0, 1], vec![], vec![1]],
         ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 3 levels with no links at last level
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
             vec![vec![1, 2], vec![2], vec![]],
             vec![vec![0, 2], vec![1], vec![]],
             vec![vec![0, 1]],
         ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 4 levels with random nonexistent links
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
             vec![vec![1, 2, 5, 6]],
             vec![vec![0, 2, 7, 8], vec![], vec![34, 45, 10]],
@@ -308,14 +280,12 @@             vec![vec![0, 1, 5, 6], vec![1, 5, 0]],
             vec![vec![0, 1, 9, 18], vec![1, 5, 6], vec![5], vec![9]],
         ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // fully random links
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
+        compare_links(links, cmp_links, format, m, m0);
         let m = 8;
         let m0 = m * 2;
         let links = random_links(100, 10, m, m0);
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
+        let cmp_links = make_cmp_links(links.clone(), format, m, m0);
         compare_links(links, cmp_links, format, m, m0);
     }
 
