--- qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual)@@ -154,178 +154,4 @@         };
         Ok(())
     }
-}
-
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
-#[cfg(test)]
-pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
-    let first = links.len().min(m);
-    links[..first].sort_unstable();
-    links
-}
-
-#[cfg(test)]
-mod tests {
-    use rand::Rng;
-    use rstest::rstest;
-    use tempfile::Builder;
-
-    use super::*;
-
-    fn random_links(
-        points_count: usize,
-        max_levels_count: usize,
-        m: usize,
-        m0: usize,
-    ) -> Vec<Vec<Vec<PointOffsetType>>> {
-        let mut rng = rand::rng();
-        (0..points_count)
-            .map(|_| {
-                let levels_count = rng.random_range(1..max_levels_count);
-                (0..levels_count)
-                    .map(|level| {
-                        let mut max_links_count = if level == 0 { m0 } else { m };
-                        max_links_count *= 2; // Simulate additional payload links.
-                        let links_count = rng.random_range(0..max_links_count);
-                        (0..links_count)
-                            .map(|_| rng.random_range(0..points_count) as PointOffsetType)
-                            .collect()
-                    })
-                    .collect()
-            })
-            .collect()
-    }
-
-    fn compare_links(
-        mut left: Vec<Vec<Vec<PointOffsetType>>>,
-        mut right: Vec<Vec<Vec<PointOffsetType>>>,
-        format: GraphLinksFormat,
-        m: usize,
-        m0: usize,
-    ) {
-        for links in [&mut left, &mut right].iter_mut() {
-            links.iter_mut().for_each(|levels| {
-                levels
-                    .iter_mut()
-                    .enumerate()
-                    .for_each(|(level_idx, links)| {
-                        *links = normalize_links(
-                            match format {
-                                GraphLinksFormat::Compressed => {
-                                    if level_idx == 0 {
-                                        m0
-                                    } else {
-                                        m
-                                    }
-                                }
-                                GraphLinksFormat::Plain => 0,
-                            },
-                            std::mem::take(links),
-                        );
-                    })
-            });
-        }
-        assert_eq!(left, right);
-    }
-
-    /// Test that random links can be saved by [`GraphLinksSerializer`] and
-    /// loaded correctly by a [`GraphLinks`] impl.
-    fn test_save_load(
-        points_count: usize,
-        max_levels_count: usize,
-        on_disk: bool,
-        format: GraphLinksFormat,
-        m: usize,
-        m0: usize,
-    ) {
-        let path = Builder::new().prefix("graph_dir").tempdir().unwrap();
-        let links_file = path.path().join("links.bin");
-        let links = random_links(points_count, max_levels_count, m, m0);
-        GraphLinksSerializer::new(links.clone(), format, m, m0)
-            .save_as(&links_file)
-            .unwrap();
-        let cmp_links = GraphLinks::load_from_file(&links_file, on_disk, format)
-            .unwrap()
-            .into_edges();
-        compare_links(links, cmp_links, format, m, m0);
-    }
-
-    #[rstest]
-    #[case::uncompressed(GraphLinksFormat::Plain)]
-    #[case::compressed(GraphLinksFormat::Compressed)]
-    fn test_graph_links_construction(#[case] format: GraphLinksFormat) {
-        let m = 2;
-        let m0 = m * 2;
-
-        let make_cmp_links = |links: Vec<Vec<Vec<PointOffsetType>>>,
-                              m: usize,
-                              m0: usize|
-         -> Vec<Vec<Vec<PointOffsetType>>> {
-            GraphLinksSerializer::new(links, format, m, m0)
-                .to_graph_links_ram()
-                .into_edges()
-        };
-
-        // no points
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 2 points without any links
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![vec![vec![]], vec![vec![]]];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // one link at level 0
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![vec![vec![1]], vec![vec![0]]];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 3 levels with no links at second level
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
-            vec![vec![1, 2]],
-            vec![vec![0, 2], vec![], vec![2]],
-            vec![vec![0, 1], vec![], vec![1]],
-        ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 3 levels with no links at last level
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
-            vec![vec![1, 2], vec![2], vec![]],
-            vec![vec![0, 2], vec![1], vec![]],
-            vec![vec![0, 1]],
-        ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // 4 levels with random nonexistent links
-        let links: Vec<Vec<Vec<PointOffsetType>>> = vec![
-            vec![vec![1, 2, 5, 6]],
-            vec![vec![0, 2, 7, 8], vec![], vec![34, 45, 10]],
-            vec![vec![0, 1, 1, 2], vec![3, 5, 9], vec![9, 8], vec![9], vec![]],
-            vec![vec![0, 1, 5, 6], vec![1, 5, 0]],
-            vec![vec![0, 1, 9, 18], vec![1, 5, 6], vec![5], vec![9]],
-        ];
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-
-        // fully random links
-        let m = 8;
-        let m0 = m * 2;
-        let links = random_links(100, 10, m, m0);
-        let cmp_links = make_cmp_links(links.clone(), m, m0);
-        compare_links(links, cmp_links, format, m, m0);
-    }
-
-    #[test]
-    fn test_graph_links_mmap_ram_compatibility() {
-        let m = 8;
-        let m0 = m * 2;
-        test_save_load(1000, 10, true, GraphLinksFormat::Compressed, m, m0);
-        test_save_load(1000, 10, false, GraphLinksFormat::Compressed, m, m0);
-        test_save_load(1000, 10, true, GraphLinksFormat::Plain, m, m0);
-        test_save_load(1000, 10, false, GraphLinksFormat::Plain, m, m0);
-    }
 }