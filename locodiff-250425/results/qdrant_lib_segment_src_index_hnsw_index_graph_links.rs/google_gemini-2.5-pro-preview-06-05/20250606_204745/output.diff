
index 39d70b1f5..3511c2578 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected):tmp/tmpb9mk1s5p_expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual):tmp/tmpgmwlmiej_actual.txt	
@@ -21,7 +21,7 @@ Links data for whole graph layers.
 
                                     sorted
                      points:        points:
-points to lvl        012345         142350
+points to lvl        012354         142350
      0 -> 0
      1 -> 4    lvl4:  7       lvl4: 7
      2 -> 2    lvl3:  Z  Y    lvl3: ZY
@@ -112,15 +112,6 @@ impl GraphLinks {
         self.view().reindex.len()
     }
 
-    pub fn for_each_link(
-        &self,
-        point_id: PointOffsetType,
-        level: usize,
-        f: impl FnMut(PointOffsetType),
-    ) {
-        self.links(point_id, level).for_each(f);
-    }
-
     #[inline]
     pub fn links(&self, point_id: PointOffsetType, level: usize) -> LinksIterator {
         self.view().links(point_id, level)
@@ -156,45 +147,20 @@ impl GraphLinks {
     }
 }
 
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
-#[cfg(test)]
-pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
-    let first = links.len().min(m);
-    links[..first].sort_unstable();
-    links
-}
-
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
     use rstest::rstest;
     use tempfile::Builder;
 
     use super::*;
 
-    fn random_links(
-        points_count: usize,
-        max_levels_count: usize,
-        m: usize,
-        m0: usize,
-    ) -> Vec<Vec<Vec<PointOffsetType>>> {
-        let mut rng = rand::rng();
-        (0..points_count)
-            .map(|_| {
-                let levels_count = rng.random_range(1..max_levels_count);
-                (0..levels_count)
-                    .map(|level| {
-                        let mut max_links_count = if level == 0 { m0 } else { m };
-                        max_links_count *= 2; // Simulate additional payload links.
-                        let links_count = rng.random_range(0..max_links_count);
-                        (0..links_count)
-                            .map(|_| rng.random_range(0..points_count) as PointOffsetType)
-                            .collect()
-                    })
-                    .collect()
-            })
-            .collect()
+    /// Sort the first `m` values in `links` and return them. Used to compare stored
+    /// links where the order of the first `m` links is not preserved.
+    #[cfg(test)]
+    pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
+        let first = links.len().min(m);
+        links[..first].sort_unstable();
+        links
     }
 
     fn compare_links(
@@ -229,6 +195,30 @@ mod tests {
         assert_eq!(left, right);
     }
 
+    fn random_links(
+        points_count: usize,
+        max_levels_count: usize,
+        m: usize,
+        m0: usize,
+    ) -> Vec<Vec<Vec<PointOffsetType>>> {
+        let mut rng = rand::rng();
+        (0..points_count)
+            .map(|_| {
+                let levels_count = rng.random_range(1..max_levels_count);
+                (0..levels_count)
+                    .map(|level| {
+                        let mut max_links_count = if level == 0 { m0 } else { m };
+                        max_links_count *= 2; // Simulate additional payload links.
+                        let links_count = rng.random_range(0..max_links_count);
+                        (0..links_count)
+                            .map(|_| rng.random_range(0..points_count) as PointOffsetType)
+                            .collect()
+                    })
+                    .collect()
+            })
+            .collect()
+    }
+
     /// Test that random links can be saved by [`GraphLinksSerializer`] and
     /// loaded correctly by a [`GraphLinks`] impl.
     fn test_save_load(
