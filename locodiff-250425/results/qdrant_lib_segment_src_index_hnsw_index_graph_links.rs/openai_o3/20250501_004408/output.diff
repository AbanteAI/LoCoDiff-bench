
index 39d70b1f..e385b1ad 100644
--- a/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected):tmp/tmp95mv0kp__expected.txt	
+++ b/qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual):tmp/tmpezivhjew_actual.txt	
@@ -16,37 +16,7 @@ pub use serializer::GraphLinksSerializer;
 pub use view::LinksIterator;
 use view::{CompressionInfo, GraphLinksView};
 
-/*
-Links data for whole graph layers.
-
-                                    sorted
-                     points:        points:
-points to lvl        012345         142350
-     0 -> 0
-     1 -> 4    lvl4:  7       lvl4: 7
-     2 -> 2    lvl3:  Z  Y    lvl3: ZY
-     3 -> 2    lvl2:  abcd    lvl2: adbc
-     4 -> 3    lvl1:  ABCDE   lvl1: ADBCE
-     5 -> 1    lvl0: 123456   lvl0: 123456  <- lvl 0 is not sorted
-
-
-lvl offset:        6       11     15     17
-                   │       │      │      │
-                   │       │      │      │
-                   ▼       ▼      ▼      ▼
-indexes:  012345   6789A   BCDE   FG     H
-
-flatten:  123456   ADBCE   adbc   ZY     7
-                   ▲ ▲ ▲   ▲ ▲    ▲      ▲
-                   │ │ │   │ │    │      │
-                   │ │ │   │ │    │      │
-                   │ │ │   │ │    │      │
-reindex:           142350  142350 142350 142350  (same for each level)
-
-
-for lvl > 0:
-links offset = level_offsets[level] + offsets[reindex[point_id]]
-*/
+use self_cell::self_cell;
 
 #[derive(Debug, Clone, Copy, Eq, PartialEq)]
 pub enum GraphLinksFormat {
@@ -54,7 +24,7 @@ pub enum GraphLinksFormat {
     Compressed,
 }
 
-self_cell::self_cell! {
+self_cell! {
     pub struct GraphLinks {
         owner: GraphLinksEnum,
         #[covariant]
@@ -149,30 +119,20 @@ impl GraphLinks {
     /// This is a blocking operation.
     pub fn populate(&self) -> OperationResult<()> {
         match self.borrow_owner() {
-            GraphLinksEnum::Mmap(mmap) => mmap.populate(),
+            GraphLinksEnum::Mmap(mmap) => mmap.populate()?,
             GraphLinksEnum::Ram(_) => {}
         };
         Ok(())
     }
 }
 
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
-#[cfg(test)]
-pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
-    let first = links.len().min(m);
-    links[..first].sort_unstable();
-    links
-}
-
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
+    use super::*;
+    use rand::prelude::*;
     use rstest::rstest;
     use tempfile::Builder;
 
-    use super::*;
-
     fn random_links(
         points_count: usize,
         max_levels_count: usize,
@@ -197,6 +157,12 @@ mod tests {
             .collect()
     }
 
+    fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
+        let first = links.len().min(m);
+        links[..first].sort_unstable();
+        links
+    }
+
     fn compare_links(
         mut left: Vec<Vec<Vec<PointOffsetType>>>,
         mut right: Vec<Vec<Vec<PointOffsetType>>>,
