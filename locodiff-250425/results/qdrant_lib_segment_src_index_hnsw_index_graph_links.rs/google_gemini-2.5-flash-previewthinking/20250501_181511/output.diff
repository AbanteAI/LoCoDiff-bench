--- qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_hnsw_index_graph_links.rs_extracted.txt (actual)@@ -38,7 +38,6 @@ 
 flatten:  123456   ADBCE   adbc   ZY     7
                    ▲ ▲ ▲   ▲ ▲    ▲      ▲
-                   │ │ │   │ │    │      │
                    │ │ │   │ │    │      │
                    │ │ │   │ │    │      │
 reindex:           142350  142350 142350 142350  (same for each level)
@@ -156,8 +155,8 @@     }
 }
 
-/// Sort the first `m` values in `links` and return them. Used to compare stored
-/// links where the order of the first `m` links is not preserved.
+// Sort the first `m` values in `links` and return them. Used to compare stored
+// links where the order of the first `m` links is not preserved.
 #[cfg(test)]
 pub(super) fn normalize_links(m: usize, mut links: Vec<PointOffsetType>) -> Vec<PointOffsetType> {
     let first = links.len().min(m);
@@ -167,7 +166,7 @@ 
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
+    use rand::rng;
     use rstest::rstest;
     use tempfile::Builder;
 
@@ -179,7 +178,7 @@         m: usize,
         m0: usize,
     ) -> Vec<Vec<Vec<PointOffsetType>>> {
-        let mut rng = rand::rng();
+        let mut rng = rng();
         (0..points_count)
             .map(|_| {
                 let levels_count = rng.random_range(1..max_levels_count);
