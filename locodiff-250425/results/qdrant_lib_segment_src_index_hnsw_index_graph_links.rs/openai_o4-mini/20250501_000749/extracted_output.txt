use std::path::Path;
use std::sync::Arc;

use common::types::PointOffsetType;
use memmap2::Mmap;
use memory::madvise::{Advice, AdviceSetting, Madviseable};
use memory::mmap_ops::open_read_mmap;

use crate::common::operation_error::OperationResult;

mod header;
mod serializer;
mod view;

pub use serializer::GraphLinksSerializer;
pub use view::LinksIterator;
use view::{CompressionInfo, GraphLinksView};

#[derive(Clone, Debug, Copy, Eq, PartialEq)]
pub enum GraphLinksFormat {
    Plain,
    Compressed,
}

self_cell::self_cell! {
    pub struct GraphLinks {
        owner: GraphLinksEnum,
        #[covariant]
        dependent: GraphLinksView,
    }
}

#[derive(Debug)]
enum GraphLinksEnum {
    Ram(Vec<u8>),
    Mmap(Arc<Mmap>),
}

impl GraphLinksEnum {
    fn load_view(&self, format: GraphLinksFormat) -> OperationResult<GraphLinksView> {
        let data = match self {
            GraphLinksEnum::Ram(data) => data.as_slice(),
            GraphLinksEnum::Mmap(mmap) => &mmap[..],
        };
        GraphLinksView::load(data, format)
    }
}

impl GraphLinks {
    pub fn load_from_file(path: &Path, on_disk: bool, format: GraphLinksFormat) -> OperationResult<Self> {
        let mmap = open_read_mmap(path, AdviceSetting::Advice(Advice::Random), !on_disk)?;
        Self::try_new(GraphLinksEnum::Mmap(Arc::new(mmap)), |x| x.load_view(format))
    }

    fn view(&self) -> &GraphLinksView {
        self.borrow_dependent()
    }

    #[inline]
    pub fn links(&self, point_id: PointOffsetType, level: usize) -> LinksIterator {
        self.view().links(point_id, level)
    }

    pub fn point_level(&self, point_id: PointOffsetType) -> usize {
        self.view().point_level(point_id)
    }

    /// Convert the graph links to a vector of edges, suitable for passing into
    /// [`GraphLinksSerializer::new`] or using in tests.
    pub fn into_edges(self) -> Vec<Vec<Vec<PointOffsetType>>> {
        let mut edges = Vec::with_capacity(self.num_points());
        for point_id in 0..self.num_points() {
            let num_levels = self.point_level(point_id as PointOffsetType) + 1;
            let mut levels = Vec::with_capacity(num_levels);
            for level in 0..num_levels {
                levels.push(self.links(point_id as PointOffsetType, level).collect());
            }
            edges.push(levels);
        }
        edges
    }

    /// Populate the disk cache with data, if applicable.
    /// This is a blocking operation.
    pub fn populate(&self) -> OperationResult<()> {
        match self.borrow_owner() {
            GraphLinksEnum::Mmap(mmap) => mmap.populate(),
            GraphLinksEnum::Ram(_) => {}
        };
        Ok(())
    }

    pub fn on_disk(&self) -> bool {
        matches!(self.borrow_owner(), GraphLinksEnum::Mmap(_))
    }

    pub fn num_points(&self) -> usize {
        self.view().reindex.len()
    }
}