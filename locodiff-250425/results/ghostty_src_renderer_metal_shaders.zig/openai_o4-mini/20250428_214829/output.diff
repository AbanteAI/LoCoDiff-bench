--- ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected)+++ ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual)@@ -29,11 +29,6 @@     /// against the output of the previous shader.
     post_pipelines: []const objc.Object,
 
-    /// Initialize our shader set.
-    ///
-    /// "post_shaders" is an optional list of postprocess shaders to run
-    /// against the final drawable texture. This is an array of shader source
-    /// code, not file paths.
     pub fn init(
         alloc: Allocator,
         device: objc.Object,
@@ -59,9 +54,6 @@             post_shaders,
             pixel_format,
         ) catch |err| err: {
-            // If an error happens while building postprocess shaders we
-            // want to just not use any postprocess shaders since we don't
-            // want to block Ghostty from working.
             log.warn("error initializing postprocess shaders err={}", .{err});
             break :err &.{};
         };
@@ -80,13 +72,10 @@     }
 
     pub fn deinit(self: *Shaders, alloc: Allocator) void {
-        // Release our primary shaders
         self.cell_text_pipeline.msgSend(void, objc.sel("release"), .{});
         self.cell_bg_pipeline.msgSend(void, objc.sel("release"), .{});
         self.image_pipeline.msgSend(void, objc.sel("release"), .{});
         self.library.msgSend(void, objc.sel("release"), .{});
-
-        // Release our postprocess shaders
         if (self.post_pipelines.len > 0) {
             for (self.post_pipelines) |pipeline| {
                 pipeline.msgSend(void, objc.sel("release"), .{});
@@ -171,9 +160,6 @@ 
 /// The uniforms used for custom postprocess shaders.
 pub const PostUniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
-    // MSL developer reference just so that we can be sure that we got
-    // it all exactly right.
     resolution: [3]f32 align(16),
     time: f32 align(4),
     time_delta: f32 align(4),
@@ -201,10 +187,7 @@     const library = device.msgSend(
         objc.Object,
         objc.sel("newLibraryWithData:error:"),
-        .{
-            data,
-            &err,
-        },
+        .{ data, &err },
     );
     try checkError(err);
 
@@ -214,8 +197,6 @@     return library;
 }
 
-/// Initialize our custom shader pipelines. The shaders argument is a
-/// set of shader source code, not file paths.
 fn initPostPipelines(
     alloc: Allocator,
     device: objc.Object,
@@ -223,13 +204,9 @@     shaders: []const [:0]const u8,
     pixel_format: mtl.MTLPixelFormat,
 ) ![]const objc.Object {
-    // If we have no shaders, do nothing.
     if (shaders.len == 0) return &.{};
 
-    // Keeps track of how many shaders we successfully wrote.
     var i: usize = 0;
-
-    // Initialize our result set. If any error happens, we undo everything.
     var pipelines = try alloc.alloc(objc.Object, shaders.len);
     errdefer {
         for (pipelines[0..i]) |pipeline| {
@@ -238,8 +215,6 @@         alloc.free(pipelines);
     }
 
-    // Build each shader. Note we don't use "0.." to build our index
-    // because we need to keep track of our length to clean up above.
     for (shaders) |source| {
         pipelines[i] = try initPostPipeline(
             device,
@@ -253,14 +228,12 @@     return pipelines;
 }
 
-/// Initialize a single custom shader pipeline from shader source.
 fn initPostPipeline(
     device: objc.Object,
     library: objc.Object,
     data: [:0]const u8,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Create our library which has the shader source
     const post_library = library: {
         const source = try macos.foundation.String.createWithBytes(
             data,
@@ -282,7 +255,6 @@     };
     defer post_library.msgSend(void, objc.sel("release"), .{});
 
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "full_screen_vertex",
@@ -290,10 +262,10 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -301,14 +273,11 @@             false,
         );
         defer str.release();
-
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -316,10 +285,10 @@         break :init id_init;
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
+
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -327,11 +296,9 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -362,19 +329,15 @@     };
 
     test {
-        // Minimizing the size of this struct is important,
-        // so we test it in order to be aware of any changes.
         try std.testing.expectEqual(32, @sizeOf(CellText));
     }
 };
 
-/// Initialize the cell render pipeline for our shader library.
 fn initCellTextPipeline(
     device: objc.Object,
     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_vertex",
@@ -382,10 +345,10 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -393,48 +356,33 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
-    // data layout of the vertex inputs. We use indexed (or "instanced")
-    // rendering, so this makes it so that each instance gets a single
-    // Cell as input.
     const vertex_desc = vertex_desc: {
-        const desc = init: {
-            const Class = objc.getClass("MTLVertexDescriptor").?;
-            const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
-            const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
-            break :init id_init;
-        };
-
-        // Our attributes are the fields of the input
-        const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
-        autoAttribute(CellText, attrs);
-
-        // The layout describes how and when we fetch the next vertex input.
-        const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
-        {
-            const layout = layouts.msgSend(
-                objc.Object,
-                objc.sel("objectAtIndexedSubscript:"),
-                .{@as(c_ulong, 0)},
-            );
-
-            // Access each Cell per instance, not per vertex.
-            layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
-            layout.setProperty("stride", @as(c_ulong, @sizeOf(CellText)));
-        }
-
-        break :vertex_desc desc;
+        const Class = objc.getClass("MTLVertexDescriptor").?;
+        const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
+        const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
+        break :init id_init;
     };
     defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
+    const attrs = objc.Object.fromId(vertex_desc.getProperty(?*anyopaque, "attributes"));
+    autoAttribute(CellText, attrs);
+
+    const layouts = objc.Object.fromId(vertex_desc.getProperty(?*anyopaque, "layouts"));
+    {
+        const layout = layouts.msgSend(
+            objc.Object,
+            objc.sel("objectAtIndexedSubscript:"),
+            .{@as(c_ulong, 0)},
+        );
+        layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
+        layout.setProperty("stride", @as(c_ulong, @sizeOf(CellText)));
+    }
+
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -443,12 +391,10 @@     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -456,11 +402,7 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
-
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -470,7 +412,6 @@         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -483,16 +424,13 @@     return pipeline_state;
 }
 
-/// This is a single parameter for the cell bg shader.
 pub const CellBg = [4]u8;
 
-/// Initialize the cell background render pipeline for our shader library.
 fn initCellBgPipeline(
     device: objc.Object,
     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_bg_vertex",
@@ -500,7 +438,6 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
@@ -512,13 +449,11 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -527,11 +462,9 @@     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -539,11 +472,7 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
-
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -553,7 +482,6 @@         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -572,7 +500,6 @@     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "image_vertex",
@@ -580,10 +507,10 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -591,48 +518,33 @@             false,
         );
         defer str.release();
-
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
-    // data layout of the vertex inputs. We use indexed (or "instanced")
-    // rendering, so this makes it so that each instance gets a single
-    // Image as input.
     const vertex_desc = vertex_desc: {
-        const desc = init: {
-            const Class = objc.getClass("MTLVertexDescriptor").?;
-            const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
-            const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
-            break :init id_init;
-        };
-
-        // Our attributes are the fields of the input
-        const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
-        autoAttribute(Image, attrs);
-
-        // The layout describes how and when we fetch the next vertex input.
-        const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
-        {
-            const layout = layouts.msgSend(
-                objc.Object,
-                objc.sel("objectAtIndexedSubscript:"),
-                .{@as(c_ulong, 0)},
-            );
-
-            // Access each Image per instance, not per vertex.
-            layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
-            layout.setProperty("stride", @as(c_ulong, @sizeOf(Image)));
-        }
-
-        break :vertex_desc desc;
+        const Class = objc.getClass("MTLVertexDescriptor").?;
+        const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
+        const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
+        break :init id_init;
     };
     defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
+    const attrs = objc.Object.fromId(vertex_desc.getProperty(?*anyopaque, "attributes"));
+    autoAttribute(Image, attrs);
+
+    const layouts = objc.Object.fromId(vertex_desc.getProperty(?*anyopaque, "layouts"));
+    {
+        const layout = layouts.msgSend(
+            objc.Object,
+            objc.sel("objectAtIndexedSubscript:"),
+            .{@as(c_ulong, 0)},
+        );
+        layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
+        layout.setProperty("stride", @as(c_ulong, @sizeOf(Image)));
+    }
+
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -641,12 +553,10 @@     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -654,11 +564,7 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
-
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -668,7 +574,6 @@         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -676,8 +581,19 @@         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
+}
+
+fn checkError(err_: ?*anyopaque) !void {
+    const nserr = objc.Object.fromId(err_ orelse return);
+    const str = @as(
+        *macos.foundation.String,
+        @ptrCast(nserr.getProperty(?*anyopaque, "localizedDescription").?),
+    );
+    log.err("metal error={s}", .{str.cstringPtr(.ascii).?});
+    return error.MetalFailed;
 }
 
 fn autoAttribute(T: type, attrs: objc.Object) void {
@@ -713,15 +629,4 @@         attr.setProperty("offset", @as(c_ulong, offset));
         attr.setProperty("bufferIndex", @as(c_ulong, 0));
     }
-}
-
-fn checkError(err_: ?*anyopaque) !void {
-    const nserr = objc.Object.fromId(err_ orelse return);
-    const str = @as(
-        *macos.foundation.String,
-        @ptrCast(nserr.getProperty(?*anyopaque, "localizedDescription").?),
-    );
-
-    log.err("metal error={s}", .{str.cstringPtr(.ascii).?});
-    return error.MetalFailed;
 }