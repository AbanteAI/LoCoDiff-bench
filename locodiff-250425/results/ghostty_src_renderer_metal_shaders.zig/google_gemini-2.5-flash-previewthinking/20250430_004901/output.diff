--- ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected)+++ ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual)@@ -104,6 +104,7 @@     dest_size: [2]f32,
 };
 
+
 /// The uniforms that are passed to the terminal cell shader.
 pub const Uniforms = extern struct {
     // Note: all of the explicit aligmnments are copied from the
@@ -186,6 +187,7 @@     sample_rate: f32 align(4),
 };
 
+
 /// Initialize the MTLLibrary. A MTLLibrary is a collection of shaders.
 fn initLibrary(device: objc.Object) !objc.Object {
     const start = try std.time.Instant.now();
@@ -294,6 +296,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,8 +308,8 @@         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
+
 
     // Create our descriptor
     const desc = init: {
@@ -339,6 +342,7 @@         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -386,6 +390,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,13 +402,13 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
+
 
     // Create the vertex descriptor. The vertex descriptor describes the
     // data layout of the vertex inputs. We use indexed (or "instanced")
     // rendering, so this makes it so that each instance gets a single
-    // Cell as input.
+    // CellText as input.
     const vertex_desc = vertex_desc: {
         const desc = init: {
             const Class = objc.getClass("MTLVertexDescriptor").?;
@@ -415,6 +420,7 @@         // Our attributes are the fields of the input
         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
         autoAttribute(CellText, attrs);
+
 
         // The layout describes how and when we fetch the next vertex input.
         const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
@@ -425,7 +431,7 @@                 .{@as(c_ulong, 0)},
             );
 
-            // Access each Cell per instance, not per vertex.
+            // Access each CellText per instance, not per vertex.
             layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
             layout.setProperty("stride", @as(c_ulong, @sizeOf(CellText)));
         }
@@ -518,6 +524,7 @@     };
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
+
     // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
@@ -584,6 +591,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,8 +603,8 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
+
 
     // Create the vertex descriptor. The vertex descriptor describes the
     // data layout of the vertex inputs. We use indexed (or "instanced")
@@ -614,6 +622,7 @@         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
         autoAttribute(Image, attrs);
 
+
         // The layout describes how and when we fetch the next vertex input.
         const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
         {
@@ -676,6 +685,7 @@         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
