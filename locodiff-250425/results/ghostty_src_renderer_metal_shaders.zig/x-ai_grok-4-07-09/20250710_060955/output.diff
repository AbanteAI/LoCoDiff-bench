
index 3a00b3f01..ea6409b36 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmp9662wi_a_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmp6d0j5ym0_actual.txt	
@@ -1,39 +1,18 @@
 const std = @import("std");
 const Allocator = std.mem.Allocator;
-const assert = std.debug.assert;
 const macos = @import("macos");
 const objc = @import("objc");
 const math = @import("../../math.zig");
-
 const mtl = @import("api.zig");
-
 const log = std.log.scoped(.metal);
 
-/// This contains the state for the shaders used by the Metal renderer.
 pub const Shaders = struct {
     library: objc.Object,
-
-    /// Renders cell foreground elements (text, decorations).
     cell_text_pipeline: objc.Object,
-
-    /// The cell background shader is the shader used to render the
-    /// background of terminal cells.
     cell_bg_pipeline: objc.Object,
-
-    /// The image shader is the shader used to render images for things
-    /// like the Kitty image protocol.
     image_pipeline: objc.Object,
-
-    /// Custom shaders to run against the final drawable texture. This
-    /// can be used to apply a lot of effects. Each shader is run in sequence
-    /// against the output of the previous shader.
     post_pipelines: []const objc.Object,
 
-    /// Initialize our shader set.
-    ///
-    /// "post_shaders" is an optional list of postprocess shaders to run
-    /// against the final drawable texture. This is an array of shader source
-    /// code, not file paths.
     pub fn init(
         alloc: Allocator,
         device: objc.Object,
@@ -59,9 +38,6 @@ pub const Shaders = struct {
             post_shaders,
             pixel_format,
         ) catch |err| err: {
-            // If an error happens while building postprocess shaders we
-            // want to just not use any postprocess shaders since we don't
-            // want to block Ghostty from working.
             log.warn("error initializing postprocess shaders err={}", .{err});
             break :err &.{};
         };
@@ -80,13 +56,11 @@ pub const Shaders = struct {
     }
 
     pub fn deinit(self: *Shaders, alloc: Allocator) void {
-        // Release our primary shaders
         self.cell_text_pipeline.msgSend(void, objc.sel("release"), .{});
         self.cell_bg_pipeline.msgSend(void, objc.sel("release"), .{});
         self.image_pipeline.msgSend(void, objc.sel("release"), .{});
         self.library.msgSend(void, objc.sel("release"), .{});
 
-        // Release our postprocess shaders
         if (self.post_pipelines.len > 0) {
             for (self.post_pipelines) |pipeline| {
                 pipeline.msgSend(void, objc.sel("release"), .{});
@@ -96,7 +70,28 @@ pub const Shaders = struct {
     }
 };
 
-/// Single parameter for the image shader. See shader for field details.
+pub const CellText = extern struct {
+    glyph_pos: [2]u32 align(8) = .{ 0, 0 },
+    glyph_size: [2]u32 align(8) = .{ 0, 0 },
+    bearings: [2]i16 align(4) = .{ 0, 0 },
+    grid_pos: [2]u16 align(4),
+    color: [4]u8 align(4),
+    mode: Mode align(1),
+    constraint_width: u8 align(1) = 0,
+
+    pub const Mode = enum(u8) {
+        fg = 1,
+        fg_constrained = 2,
+        fg_color = 3,
+        cursor = 4,
+        fg_powerline = 5,
+    };
+
+    test {
+        try std.testing.expectEqual(32, @sizeOf(CellText));
+    }
+};
+
 pub const Image = extern struct {
     grid_pos: [2]f32,
     cell_offset: [2]f32,
@@ -104,60 +99,19 @@ pub const Image = extern struct {
     dest_size: [2]f32,
 };
 
-/// The uniforms that are passed to the terminal cell shader.
 pub const Uniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
-    // MSL developer reference just so that we can be sure that we got
-    // it all exactly right.
-
-    /// The projection matrix for turning world coordinates to normalized.
-    /// This is calculated based on the size of the screen.
     projection_matrix: math.Mat align(16),
-
-    /// Size of a single cell in pixels, unscaled.
     cell_size: [2]f32 align(8),
-
-    /// Size of the grid in columns and rows.
     grid_size: [2]u16 align(4),
-
-    /// The padding around the terminal grid in pixels. In order:
-    /// top, right, bottom, left.
     grid_padding: [4]f32 align(16),
-
-    /// Bit mask defining which directions to
-    /// extend cell colors in to the padding.
-    /// Order, LSB first: left, right, up, down
     padding_extend: PaddingExtend align(1),
-
-    /// The minimum contrast ratio for text. The contrast ratio is calculated
-    /// according to the WCAG 2.0 spec.
     min_contrast: f32 align(4),
-
-    /// The cursor position and color.
     cursor_pos: [2]u16 align(4),
     cursor_color: [4]u8 align(4),
-
-    /// The background color for the whole surface.
     bg_color: [4]u8 align(4),
-
-    /// Whether the cursor is 2 cells wide.
     cursor_wide: bool align(1),
-
-    /// Indicates that colors provided to the shader are already in
-    /// the P3 color space, so they don't need to be converted from
-    /// sRGB.
     use_display_p3: bool align(1),
-
-    /// Indicates that the color attachments for the shaders have
-    /// an `*_srgb` pixel format, which means the shaders need to
-    /// output linear RGB colors rather than gamma encoded colors,
-    /// since blending will be performed in linear space and then
-    /// Metal itself will re-encode the colors for storage.
     use_linear_blending: bool align(1),
-
-    /// Enables a weight correction step that makes text rendered
-    /// with linear alpha blending have a similar apparent weight
-    /// (thickness) to gamma-incorrect blending.
     use_linear_correction: bool align(1) = false,
 
     const PaddingExtend = packed struct(u8) {
@@ -169,11 +123,7 @@ pub const Uniforms = extern struct {
     };
 };
 
-/// The uniforms used for custom postprocess shaders.
 pub const PostUniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
-    // MSL developer reference just so that we can be sure that we got
-    // it all exactly right.
     resolution: [3]f32 align(16),
     time: f32 align(4),
     time_delta: f32 align(4),
@@ -186,7 +136,6 @@ pub const PostUniforms = extern struct {
     sample_rate: f32 align(4),
 };
 
-/// Initialize the MTLLibrary. A MTLLibrary is a collection of shaders.
 fn initLibrary(device: objc.Object) !objc.Object {
     const start = try std.time.Instant.now();
 
@@ -201,10 +150,7 @@ fn initLibrary(device: objc.Object) !objc.Object {
     const library = device.msgSend(
         objc.Object,
         objc.sel("newLibraryWithData:error:"),
-        .{
-            data,
-            &err,
-        },
+        .{ data, &err },
     );
     try checkError(err);
 
@@ -214,8 +160,6 @@ fn initLibrary(device: objc.Object) !objc.Object {
     return library;
 }
 
-/// Initialize our custom shader pipelines. The shaders argument is a
-/// set of shader source code, not file paths.
 fn initPostPipelines(
     alloc: Allocator,
     device: objc.Object,
@@ -223,44 +167,32 @@ fn initPostPipelines(
     shaders: []const [:0]const u8,
     pixel_format: mtl.MTLPixelFormat,
 ) ![]const objc.Object {
-    // If we have no shaders, do nothing.
     if (shaders.len == 0) return &.{};
 
-    // Keeps track of how many shaders we successfully wrote.
     var i: usize = 0;
 
-    // Initialize our result set. If any error happens, we undo everything.
     var pipelines = try alloc.alloc(objc.Object, shaders.len);
     errdefer {
         for (pipelines[0..i]) |pipeline| {
             pipeline.msgSend(void, objc.sel("release"), .{});
         }
         alloc.free(pipelines);
-    }
+    };
 
-    // Build each shader. Note we don't use "0.." to build our index
-    // because we need to keep track of our length to clean up above.
     for (shaders) |source| {
-        pipelines[i] = try initPostPipeline(
-            device,
-            library,
-            source,
-            pixel_format,
-        );
+        pipelines[i] = try initPostPipeline(device, library, source, pixel_format);
         i += 1;
     }
 
     return pipelines;
 }
 
-/// Initialize a single custom shader pipeline from shader source.
 fn initPostPipeline(
     device: objc.Object,
     library: objc.Object,
     data: [:0]const u8,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Create our library which has the shader source
     const post_library = library: {
         const source = try macos.foundation.String.createWithBytes(
             data,
@@ -282,7 +214,6 @@ fn initPostPipeline(
     };
     defer post_library.msgSend(void, objc.sel("release"), .{});
 
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "full_screen_vertex",
@@ -294,6 +225,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,10 +237,8 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -319,7 +249,6 @@ fn initPostPipeline(
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -331,7 +260,6 @@ fn initPostPipeline(
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -343,38 +271,11 @@ fn initPostPipeline(
     return pipeline_state;
 }
 
-/// This is a single parameter for the terminal cell shader.
-pub const CellText = extern struct {
-    glyph_pos: [2]u32 align(8) = .{ 0, 0 },
-    glyph_size: [2]u32 align(8) = .{ 0, 0 },
-    bearings: [2]i16 align(4) = .{ 0, 0 },
-    grid_pos: [2]u16 align(4),
-    color: [4]u8 align(4),
-    mode: Mode align(1),
-    constraint_width: u8 align(1) = 0,
-
-    pub const Mode = enum(u8) {
-        fg = 1,
-        fg_constrained = 2,
-        fg_color = 3,
-        cursor = 4,
-        fg_powerline = 5,
-    };
-
-    test {
-        // Minimizing the size of this struct is important,
-        // so we test it in order to be aware of any changes.
-        try std.testing.expectEqual(32, @sizeOf(CellText));
-    }
-};
-
-/// Initialize the cell render pipeline for our shader library.
 fn initCellTextPipeline(
     device: objc.Object,
     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_vertex",
@@ -386,6 +287,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,13 +299,8 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
-    // data layout of the vertex inputs. We use indexed (or "instanced")
-    // rendering, so this makes it so that each instance gets a single
-    // Cell as input.
     const vertex_desc = vertex_desc: {
         const desc = init: {
             const Class = objc.getClass("MTLVertexDescriptor").?;
@@ -412,11 +309,9 @@ fn initCellTextPipeline(
             break :init id_init;
         };
 
-        // Our attributes are the fields of the input
         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
         autoAttribute(CellText, attrs);
 
-        // The layout describes how and when we fetch the next vertex input.
         const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
         {
             const layout = layouts.msgSend(
@@ -425,7 +320,6 @@ fn initCellTextPipeline(
                 .{@as(c_ulong, 0)},
             );
 
-            // Access each Cell per instance, not per vertex.
             layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
             layout.setProperty("stride", @as(c_ulong, @sizeOf(CellText)));
         }
@@ -434,7 +328,6 @@ fn initCellTextPipeline(
     };
     defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -443,12 +336,10 @@ fn initCellTextPipeline(
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -459,8 +350,6 @@ fn initCellTextPipeline(
 
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -470,7 +359,6 @@ fn initCellTextPipeline(
         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -483,19 +371,16 @@ fn initCellTextPipeline(
     return pipeline_state;
 }
 
-/// This is a single parameter for the cell bg shader.
 pub const CellBg = [4]u8;
 
-/// Initialize the cell background render pipeline for our shader library.
 fn initCellBgPipeline(
     device: objc.Object,
     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
-            "cell_bg_vertex",
+            "full_screen_vertex",
             .utf8,
             false,
         );
@@ -518,7 +403,6 @@ fn initCellBgPipeline(
     };
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -527,11 +411,9 @@ fn initCellBgPipeline(
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -542,8 +424,6 @@ fn initCellBgPipeline(
 
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -553,7 +433,6 @@ fn initCellBgPipeline(
         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -566,13 +445,11 @@ fn initCellBgPipeline(
     return pipeline_state;
 }
 
-/// Initialize the image render pipeline for our shader library.
 fn initImagePipeline(
     device: objc.Object,
     library: objc.Object,
     pixel_format: mtl.MTLPixelFormat,
 ) !objc.Object {
-    // Get our vertex and fragment functions
     const func_vert = func_vert: {
         const str = try macos.foundation.String.createWithBytes(
             "image_vertex",
@@ -584,6 +461,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,13 +473,8 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
-    // data layout of the vertex inputs. We use indexed (or "instanced")
-    // rendering, so this makes it so that each instance gets a single
-    // Image as input.
     const vertex_desc = vertex_desc: {
         const desc = init: {
             const Class = objc.getClass("MTLVertexDescriptor").?;
@@ -610,11 +483,9 @@ fn initImagePipeline(
             break :init id_init;
         };
 
-        // Our attributes are the fields of the input
         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
         autoAttribute(Image, attrs);
 
-        // The layout describes how and when we fetch the next vertex input.
         const layouts = objc.Object.fromId(desc.getProperty(?*anyopaque, "layouts"));
         {
             const layout = layouts.msgSend(
@@ -623,7 +494,6 @@ fn initImagePipeline(
                 .{@as(c_ulong, 0)},
             );
 
-            // Access each Image per instance, not per vertex.
             layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
             layout.setProperty("stride", @as(c_ulong, @sizeOf(Image)));
         }
@@ -632,7 +502,6 @@ fn initImagePipeline(
     };
     defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
-    // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
         const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
@@ -641,12 +510,10 @@ fn initImagePipeline(
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
 
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
 
-    // Set our color attachment
     const attachments = objc.Object.fromId(desc.getProperty(?*anyopaque, "colorAttachments"));
     {
         const attachment = attachments.msgSend(
@@ -657,8 +524,6 @@ fn initImagePipeline(
 
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
-        // Blending. This is required so that our text we render on top
-        // of our drawable properly blends into the bg.
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
@@ -668,7 +533,6 @@ fn initImagePipeline(
         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
     }
 
-    // Make our state
     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
@@ -676,6 +540,7 @@ fn initImagePipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
