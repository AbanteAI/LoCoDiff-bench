
index 3a00b3f01..42786e112 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmpetwnmp7l_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmpbm65totf_actual.txt	
@@ -386,6 +386,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,7 +398,6 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -442,8 +442,6 @@ fn initCellTextPipeline(
         break :init id_init;
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
-
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
@@ -483,7 +481,6 @@ fn initCellTextPipeline(
     return pipeline_state;
 }
 
-/// This is a single parameter for the cell bg shader.
 pub const CellBg = [4]u8;
 
 /// Initialize the cell background render pipeline for our shader library.
@@ -526,8 +523,6 @@ fn initCellBgPipeline(
         break :init id_init;
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
-
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
@@ -584,6 +579,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +591,6 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -640,8 +635,6 @@ fn initImagePipeline(
         break :init id_init;
     };
     defer desc.msgSend(void, objc.sel("release"), .{});
-
-    // Set our properties
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
     desc.setProperty("vertexDescriptor", vertex_desc);
