--- ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected)+++ ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual)@@ -20,13 +20,13 @@     /// background of terminal cells.
     cell_bg_pipeline: objc.Object,
 
-    /// The image shader is the shader used to render images for things
-    /// like the Kitty image protocol.
+    /// The image shader is the shader used to render images for
+    /// things like the Kitty image protocol.
     image_pipeline: objc.Object,
 
     /// Custom shaders to run against the final drawable texture. This
-    /// can be used to apply a lot of effects. Each shader is run in sequence
-    /// against the output of the previous shader.
+    /// can be used to apply a lot of effects. Each shader is run in
+    /// sequence against the output of the previous shader.
     post_pipelines: []const objc.Object,
 
     /// Initialize our shader set.
@@ -106,7 +106,7 @@ 
 /// The uniforms that are passed to the terminal cell shader.
 pub const Uniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
+    // Note: all of the explicit alignments are copied from the
     // MSL developer reference just so that we can be sure that we got
     // it all exactly right.
 
@@ -125,7 +125,7 @@     grid_padding: [4]f32 align(16),
 
     /// Bit mask defining which directions to
-    /// extend cell colors in to the padding.
+    /// extend cell colors into the padding.
     /// Order, LSB first: left, right, up, down
     padding_extend: PaddingExtend align(1),
 
@@ -167,23 +167,6 @@         down: bool = false,
         _padding: u4 = 0,
     };
-};
-
-/// The uniforms used for custom postprocess shaders.
-pub const PostUniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
-    // MSL developer reference just so that we can be sure that we got
-    // it all exactly right.
-    resolution: [3]f32 align(16),
-    time: f32 align(4),
-    time_delta: f32 align(4),
-    frame_rate: f32 align(4),
-    frame: i32 align(4),
-    channel_time: [4][4]f32 align(16),
-    channel_resolution: [4][4]f32 align(16),
-    mouse: [4]f32 align(16),
-    date: [4]f32 align(16),
-    sample_rate: f32 align(4),
 };
 
 /// Initialize the MTLLibrary. A MTLLibrary is a collection of shaders.
@@ -294,6 +277,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,7 +289,6 @@         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
@@ -327,7 +310,6 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
     }
 
@@ -386,6 +368,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,13 +380,12 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
+    // Create our vertex descriptor. The vertex descriptor describes the
     // data layout of the vertex inputs. We use indexed (or "instanced")
     // rendering, so this makes it so that each instance gets a single
-    // Cell as input.
+    // CellText as input.
     const vertex_desc = vertex_desc: {
         const desc = init: {
             const Class = objc.getClass("MTLVertexDescriptor").?;
@@ -411,6 +393,7 @@             const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
             break :init id_init;
         };
+        defer desc.msgSend(void, objc.sel("release"), .{});
 
         // Our attributes are the fields of the input
         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
@@ -425,14 +408,13 @@                 .{@as(c_ulong, 0)},
             );
 
-            // Access each Cell per instance, not per vertex.
+            // Access each CellText per instance, not per vertex.
             layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
             layout.setProperty("stride", @as(c_ulong, @sizeOf(CellText)));
         }
 
         break :vertex_desc desc;
     };
-    defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
     const desc = init: {
@@ -456,7 +438,6 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
         // Blending. This is required so that our text we render on top
@@ -478,7 +459,6 @@         .{ desc, &err },
     );
     try checkError(err);
-    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -539,7 +519,6 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
         // Blending. This is required so that our text we render on top
@@ -561,7 +540,6 @@         .{ desc, &err },
     );
     try checkError(err);
-    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -584,6 +562,7 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +574,6 @@         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -609,6 +587,7 @@             const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
             break :init id_init;
         };
+        defer desc.msgSend(void, objc.sel("release"), .{});
 
         // Our attributes are the fields of the input
         const attrs = objc.Object.fromId(desc.getProperty(?*anyopaque, "attributes"));
@@ -630,7 +609,6 @@ 
         break :vertex_desc desc;
     };
-    defer vertex_desc.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
     const desc = init: {
@@ -654,7 +632,6 @@             objc.sel("objectAtIndexedSubscript:"),
             .{@as(c_ulong, 0)},
         );
-
         attachment.setProperty("pixelFormat", @intFromEnum(pixel_format));
 
         // Blending. This is required so that our text we render on top
@@ -672,8 +649,7 @@     var err: ?*anyopaque = null;
     const pipeline_state = device.msgSend(
         objc.Object,
-        objc.sel("newRenderPipelineStateWithDescriptor:error:"),
-        .{ desc, &err },
+        objc.sel("newRenderPipelineStateWithDescriptor:error:"), .{ desc, &err },
     );
     try checkError(err);
 
@@ -705,10 +681,8 @@ 
         const attr = attrs.msgSend(
             objc.Object,
-            objc.sel("objectAtIndexedSubscript:"),
-            .{@as(c_ulong, i)},
-        );
-
+            objc.sel("objectAtIndexedSubscript:"), .{@as(c_ulong, i)},
+        );
         attr.setProperty("format", @intFromEnum(format));
         attr.setProperty("offset", @as(c_ulong, offset));
         attr.setProperty("bufferIndex", @as(c_ulong, 0));
