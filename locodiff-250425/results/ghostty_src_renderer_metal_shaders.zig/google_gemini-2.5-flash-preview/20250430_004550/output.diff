
index 3a00b3f0..23d46308 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmpe7bv9ani_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmpdr_s5r0b_actual.txt	
@@ -104,7 +104,8 @@ pub const Image = extern struct {
     dest_size: [2]f32,
 };
 
-/// The uniforms that are passed to the terminal cell shader.
+/// The uniforms that are passed to the terminal cell shader and other
+/// shaders.
 pub const Uniforms = extern struct {
     // Note: all of the explicit aligmnments are copied from the
     // MSL developer reference just so that we can be sure that we got
@@ -294,6 +295,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,9 +307,9 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
+
     // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
@@ -339,6 +341,7 @@ fn initPostPipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -386,6 +389,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,7 +401,6 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -584,6 +587,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +599,6 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -676,6 +679,7 @@ fn initImagePipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -700,6 +704,7 @@ fn autoAttribute(T: type, attrs: objc.Object) void {
             [2]u32 => mtl.MTLVertexFormat.uint2,
             [4]u32 => mtl.MTLVertexFormat.uint4,
             u8 => mtl.MTLVertexFormat.uchar,
+            bool => mtl.MTLVertexFormat.uchar,
             else => comptime unreachable,
         };
 
