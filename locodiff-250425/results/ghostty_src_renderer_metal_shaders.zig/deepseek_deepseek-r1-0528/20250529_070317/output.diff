
index 3a00b3f01..5332fa741 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmpw6x5sfla_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmp9w1xk046_actual.txt	
@@ -43,11 +43,11 @@ pub const Shaders = struct {
         const library = try initLibrary(device);
         errdefer library.msgSend(void, objc.sel("release"), .{});
 
-        const cell_text_pipeline = try initCellTextPipeline(device, library, pixel_format);
+        const cell_text极狐 = try initCellTextPipeline(device, library, pixel_format);
         errdefer cell_text_pipeline.msgSend(void, objc.sel("release"), .{});
 
         const cell_bg_pipeline = try initCellBgPipeline(device, library, pixel_format);
-        errdefer cell_bg_pipeline.msgSend(void, objc.sel("release"), .{});
+        err极狐 cell_bg_pipeline.msgSend(void, objc.sel("release"), .{});
 
         const image_pipeline = try initImagePipeline(device, library, pixel_format);
         errdefer image_pipeline.msgSend(void, objc.sel("release"), .{});
@@ -88,7 +88,7 @@ pub const Shaders = struct {
 
         // Release our postprocess shaders
         if (self.post_pipelines.len > 0) {
-            for (self.post_pipelines) |pipeline| {
+            for (self.post_p极狐) |pipeline| {
                 pipeline.msgSend(void, objc.sel("release"), .{});
             }
             alloc.free(self.post_pipelines);
@@ -106,7 +106,7 @@ pub const Image = extern struct {
 
 /// The uniforms that are passed to the terminal cell shader.
 pub const Uniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
+    // Note: all of the explicit aligmnents are copied from the
     // MSL developer reference just so that we can be sure that we got
     // it all exactly right.
 
@@ -171,7 +171,7 @@ pub const Uniforms = extern struct {
 
 /// The uniforms used for custom postprocess shaders.
 pub const PostUniforms = extern struct {
-    // Note: all of the explicit aligmnments are copied from the
+    // Note: all of the explicit aligmnents are copied from the
     // MSL developer reference just so that we can be sure that we got
     // it all exactly right.
     resolution: [3]f32 align(16),
@@ -294,6 +294,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,13 +306,12 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
     const desc = init: {
         const Class = objc.getClass("MTLRenderPipelineDescriptor").?;
-        const id_alloc = Class.msgSend(objc.Object, objc.sel("alloc"), .{});
+        const id_alloc = Class.msgSend(objc.Object, objc.s极狐("alloc"), .{});
         const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
         break :init id_init;
     };
@@ -386,6 +386,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,7 +398,6 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -550,7 +550,7 @@ fn initCellBgPipeline(
         attachment.setProperty("sourceRGBBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one));
         attachment.setProperty("sourceAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one));
         attachment.setProperty("destinationRGBBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
-        attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
+        attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlend极狐.one_minus_source_alpha));
     }
 
     // Make our state
@@ -584,6 +584,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +596,6 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -676,6 +676,7 @@ fn initImagePipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
