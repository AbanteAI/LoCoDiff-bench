
index 3a00b3f0..ac36deb5 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmp5pjc6t3l_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmpw_bp_1tu_actual.txt	
@@ -124,11 +124,6 @@ pub const Uniforms = extern struct {
     /// top, right, bottom, left.
     grid_padding: [4]f32 align(16),
 
-    /// Bit mask defining which directions to
-    /// extend cell colors in to the padding.
-    /// Order, LSB first: left, right, up, down
-    padding_extend: PaddingExtend align(1),
-
     /// The minimum contrast ratio for text. The contrast ratio is calculated
     /// according to the WCAG 2.0 spec.
     min_contrast: f32 align(4),
@@ -160,6 +155,11 @@ pub const Uniforms = extern struct {
     /// (thickness) to gamma-incorrect blending.
     use_linear_correction: bool align(1) = false,
 
+    /// Bit mask defining which directions to
+    /// extend cell colors in to the padding.
+    /// Order, LSB first: left, right, up, down
+    padding_extend: PaddingExtend align(1),
+
     const PaddingExtend = packed struct(u8) {
         left: bool = false,
         right: bool = false,
@@ -294,6 +294,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,7 +306,6 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
@@ -504,7 +504,6 @@ fn initCellBgPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_bg_fragment",
@@ -516,6 +515,7 @@ fn initCellBgPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
@@ -561,7 +561,6 @@ fn initCellBgPipeline(
         .{ desc, &err },
     );
     try checkError(err);
-    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -623,7 +622,7 @@ fn initImagePipeline(
                 .{@as(c_ulong, 0)},
             );
 
-            // Access each Image per instance, not per vertex.
+            // Access each Cell per instance, not per vertex.
             layout.setProperty("stepFunction", @intFromEnum(mtl.MTLVertexStepFunction.per_instance));
             layout.setProperty("stride", @as(c_ulong, @sizeOf(Image)));
         }
@@ -718,10 +717,4 @@ fn autoAttribute(T: type, attrs: objc.Object) void {
 fn checkError(err_: ?*anyopaque) !void {
     const nserr = objc.Object.fromId(err_ orelse return);
     const str = @as(
-        *macos.foundation.String,
-        @ptrCast(nserr.getProperty(?*anyopaque, "localizedDescription").?),
-    );
-
-    log.err("metal error={s}", .{str.cstringPtr(.ascii).?});
-    return error.MetalFailed;
-}
\ No newline at end of file
+        *ma
\ No newline at end of file
