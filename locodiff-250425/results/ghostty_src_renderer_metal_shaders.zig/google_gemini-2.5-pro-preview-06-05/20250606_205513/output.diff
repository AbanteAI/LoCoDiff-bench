
index 3a00b3f01..25c9f6800 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmp0q31hoa2_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmp4ucds8sh_actual.txt	
@@ -294,6 +294,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,7 +306,6 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
@@ -339,6 +339,7 @@ fn initPostPipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -386,6 +387,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,7 +399,6 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -584,6 +585,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +597,6 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -676,6 +677,7 @@ fn initImagePipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
