
index 3a00b3f0..c5dd6d57 100644
--- a/ghostty_src_renderer_metal_shaders.zig_expectedoutput.txt (expected):tmp/tmpjkhe0f14_expected.txt	
+++ b/ghostty_src_renderer_metal_shaders.zig_extracted.txt (actual):tmp/tmpa3fg6ljc_actual.txt	
@@ -140,9 +140,6 @@ pub const Uniforms = extern struct {
     /// The background color for the whole surface.
     bg_color: [4]u8 align(4),
 
-    /// Whether the cursor is 2 cells wide.
-    cursor_wide: bool align(1),
-
     /// Indicates that colors provided to the shader are already in
     /// the P3 color space, so they don't need to be converted from
     /// sRGB.
@@ -160,6 +157,9 @@ pub const Uniforms = extern struct {
     /// (thickness) to gamma-incorrect blending.
     use_linear_correction: bool align(1) = false,
 
+    /// Whether the cursor is 2 cells wide.
+    cursor_wide: bool align(1),
+
     const PaddingExtend = packed struct(u8) {
         left: bool = false,
         right: bool = false,
@@ -294,6 +294,7 @@ fn initPostPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "main0",
@@ -305,7 +306,6 @@ fn initPostPipeline(
         const ptr = post_library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create our descriptor
@@ -315,7 +315,6 @@ fn initPostPipeline(
         const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
         break :init id_init;
     };
-    defer desc.msgSend(void, objc.sel("release"), .{});
     desc.setProperty("vertexFunction", func_vert);
     desc.setProperty("fragmentFunction", func_frag);
 
@@ -339,6 +338,8 @@ fn initPostPipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
+    defer desc.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -351,6 +352,7 @@ pub const CellText = extern struct {
     grid_pos: [2]u16 align(4),
     color: [4]u8 align(4),
     mode: Mode align(1),
+
     constraint_width: u8 align(1) = 0,
 
     pub const Mode = enum(u8) {
@@ -386,6 +388,7 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "cell_text_fragment",
@@ -397,10 +400,9 @@ fn initCellTextPipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
-    // Create the vertex descriptor. The vertex descriptor describes the
+    // Create the vertex descriptor. The vertex descriptor describves the
     // data layout of the vertex inputs. We use indexed (or "instanced")
     // rendering, so this makes it so that each instance gets a single
     // Cell as input.
@@ -441,7 +443,6 @@ fn initCellTextPipeline(
         const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
         break :init id_init;
     };
-    defer desc.msgSend(void, objc.sel("release"), .{});
 
     // Set our properties
     desc.setProperty("vertexFunction", func_vert);
@@ -464,7 +465,7 @@ fn initCellTextPipeline(
         attachment.setProperty("blendingEnabled", true);
         attachment.setProperty("rgbBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
         attachment.setProperty("alphaBlendOperation", @intFromEnum(mtl.MTLBlendOperation.add));
-        attachment.setProperty("sourceRGBBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one));
+        attachment.setProperty("sourceRGBBlendFactor", @intFromEnum(mtl.MTLBlendFactor.source_alpha));
         attachment.setProperty("sourceAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one));
         attachment.setProperty("destinationRGBBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
         attachment.setProperty("destinationAlphaBlendFactor", @intFromEnum(mtl.MTLBlendFactor.one_minus_source_alpha));
@@ -479,11 +480,11 @@ fn initCellTextPipeline(
     );
     try checkError(err);
     errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
+    defer desc.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
 
-/// This is a single parameter for the cell bg shader.
 pub const CellBg = [4]u8;
 
 /// Initialize the cell background render pipeline for our shader library.
@@ -525,7 +526,6 @@ fn initCellBgPipeline(
         const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
         break :init id_init;
     };
-    defer desc.msgSend(void, objc.sel("release"), .{});
 
     // Set our properties
     desc.setProperty("vertexFunction", func_vert);
@@ -562,6 +562,7 @@ fn initCellBgPipeline(
     );
     try checkError(err);
     errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
+    defer desc.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
@@ -584,6 +585,7 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_vert objc.Object.fromId(ptr.?);
     };
+    defer func_vert.msgSend(void, objc.sel("release"), .{});
     const func_frag = func_frag: {
         const str = try macos.foundation.String.createWithBytes(
             "image_fragment",
@@ -595,7 +597,6 @@ fn initImagePipeline(
         const ptr = library.msgSend(?*anyopaque, objc.sel("newFunctionWithName:"), .{str});
         break :func_frag objc.Object.fromId(ptr.?);
     };
-    defer func_vert.msgSend(void, objc.sel("release"), .{});
     defer func_frag.msgSend(void, objc.sel("release"), .{});
 
     // Create the vertex descriptor. The vertex descriptor describes the
@@ -639,7 +640,6 @@ fn initImagePipeline(
         const id_init = id_alloc.msgSend(objc.Object, objc.sel("init"), .{});
         break :init id_init;
     };
-    defer desc.msgSend(void, objc.sel("release"), .{});
 
     // Set our properties
     desc.setProperty("vertexFunction", func_vert);
@@ -676,6 +676,8 @@ fn initImagePipeline(
         .{ desc, &err },
     );
     try checkError(err);
+    errdefer pipeline_state.msgSend(void, objc.sel("release"), .{});
+    defer desc.msgSend(void, objc.sel("release"), .{});
 
     return pipeline_state;
 }
