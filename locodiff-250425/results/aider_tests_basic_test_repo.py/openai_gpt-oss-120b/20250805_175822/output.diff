
index 303988afb..87182e2b8 100644
--- a/aider_tests_basic_test_repo.py_expectedoutput.txt (expected):tmp/tmpc7otrds__expected.txt	
+++ b/aider_tests_basic_test_repo.py_extracted.txt (actual):tmp/tmpyak0e1mm_actual.txt	
@@ -109,25 +109,16 @@ class TestRepo(unittest.TestCase):
     @patch("aider.models.Model.simple_send_with_retries")
     def test_get_commit_message(self, mock_send):
         mock_send.side_effect = ["", "a good commit message"]
-
         model1 = Model("gpt-3.5-turbo")
         model2 = Model("gpt-4")
         dump(model1)
         dump(model2)
         repo = GitRepo(InputOutput(), None, None, models=[model1, model2])
-
-        # Call the get_commit_message method with dummy diff and context
         result = repo.get_commit_message("dummy diff", "dummy context")
-
-        # Assert that the returned message is the expected one from the second model
         self.assertEqual(result, "a good commit message")
-
-        # Check that simple_send_with_retries was called twice
         self.assertEqual(mock_send.call_count, 2)
-
-        # Check that both calls were made with the same messages
-        first_call_messages = mock_send.call_args_list[0][0][0]  # Get messages from first call
-        second_call_messages = mock_send.call_args_list[1][0][0]  # Get messages from second call
+        first_call_messages = mock_send.call_args_list[0][0][0]
+        second_call_messages = mock_send.call_args_list[1][0][0]
         self.assertEqual(first_call_messages, second_call_messages)
 
     @patch("aider.models.Model.simple_send_with_retries")
@@ -135,10 +126,7 @@ class TestRepo(unittest.TestCase):
         mock_send.return_value = '"a good commit message"'
 
         repo = GitRepo(InputOutput(), None, None, models=[self.GPT35])
-        # Call the get_commit_message method with dummy diff and context
         result = repo.get_commit_message("dummy diff", "dummy context")
-
-        # Assert that the returned message is the expected one
         self.assertEqual(result, "a good commit message")
 
     @patch("aider.models.Model.simple_send_with_retries")
@@ -146,26 +134,10 @@ class TestRepo(unittest.TestCase):
         mock_send.return_value = 'a good "commit message"'
 
         repo = GitRepo(InputOutput(), None, None, models=[self.GPT35])
-        # Call the get_commit_message method with dummy diff and context
         result = repo.get_commit_message("dummy diff", "dummy context")
-
-        # Assert that the returned message is the expected one
         self.assertEqual(result, 'a good "commit message"')
 
-    @patch("aider.models.Model.simple_send_with_retries")
-    def test_get_commit_message_with_custom_prompt(self, mock_send):
-        mock_send.return_value = "Custom commit message"
-        custom_prompt = "Generate a commit message in the style of Shakespeare"
-
-        repo = GitRepo(InputOutput(), None, None, models=[self.GPT35], commit_prompt=custom_prompt)
-        result = repo.get_commit_message("dummy diff", "dummy context")
-
-        self.assertEqual(result, "Custom commit message")
-        mock_send.assert_called_once()
-        args = mock_send.call_args[0]  # Get positional args
-        self.assertEqual(args[0][0]["content"], custom_prompt)  # Check first message content
-
-    @patch("aider.repo.GitRepo.get_commit_message")
+    @patch("aider.repo.simple_send_with_retries")
     def test_commit_with_custom_committer_name(self, mock_send):
         mock_send.return_value = '"a good commit message"'
 
@@ -273,7 +245,7 @@ class TestRepo(unittest.TestCase):
             fname2.touch()
             raw_repo.git.add(str(fname2))
 
-            # both should be there
+            # both should be
             fnames = git_repo.get_tracked_files()
             self.assertIn(str(fname), fnames)
             self.assertIn(str(fname2), fnames)
