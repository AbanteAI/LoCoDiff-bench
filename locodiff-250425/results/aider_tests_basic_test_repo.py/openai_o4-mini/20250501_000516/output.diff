--- aider_tests_basic_test_repo.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_repo.py_extracted.txt (actual)@@ -318,16 +318,6 @@             self.assertNotIn(str(fname), fnames)
             self.assertIn(str(fname2), fnames)
 
-            # This does not work in github actions?!
-            # The mtime doesn't change, even if I time.sleep(1)
-            # Before doing this write_text()!?
-            #
-            # aiderignore.write_text("new2.txt\n")
-            # new2.txt should be gone!
-            # fnames = git_repo.get_tracked_files()
-            # self.assertIn(str(fname), fnames)
-            # self.assertNotIn(str(fname2), fnames)
-
     def test_get_tracked_files_from_subdir(self):
         with GitTemporaryDirectory():
             # new repo
@@ -351,6 +341,24 @@             raw_repo.git.commit("-m", "new")
             fnames = git_repo.get_tracked_files()
             self.assertIn(str(fname), fnames)
+
+    @patch("aider.models.Model.simple_send_with_retries")
+    def test_noop_commit(self, mock_send):
+        mock_send.return_value = '"a good commit message"'
+
+        with GitTemporaryDirectory():
+            # new repo
+            raw_repo = git.Repo()
+
+            # add it, but no commits at all in the raw_repo yet
+            fname = Path("file.txt")
+            fname.touch()
+            raw_repo.git.add(str(fname))
+            raw_repo.git.commit("-m", "new")
+
+            git_repo = GitRepo(InputOutput(), None, None)
+
+            git_repo.commit(fnames=[str(fname)])
 
     def test_subtree_only(self):
         with GitTemporaryDirectory():
@@ -388,24 +396,6 @@             self.assertNotIn(str(root_file), tracked_files)
             self.assertNotIn(str(another_subdir_file), tracked_files)
 
-    @patch("aider.models.Model.simple_send_with_retries")
-    def test_noop_commit(self, mock_send):
-        mock_send.return_value = '"a good commit message"'
-
-        with GitTemporaryDirectory():
-            # new repo
-            raw_repo = git.Repo()
-
-            # add it, but no commits at all in the raw_repo yet
-            fname = Path("file.txt")
-            fname.touch()
-            raw_repo.git.add(str(fname))
-            raw_repo.git.commit("-m", "new")
-
-            git_repo = GitRepo(InputOutput(), None, None)
-
-            git_repo.commit(fnames=[str(fname)])
-
     def test_git_commit_verify(self):
         """Test that git_commit_verify controls whether --no-verify is passed to git commit"""
         # Skip on Windows as hook execution works differently
