
index eff89da73..87b6fa4ab 100644
--- a/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected):tmp/tmpgurm4rx2_expected.txt	
+++ b/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual):tmp/tmp8043_smb_actual.txt	
@@ -138,20 +138,20 @@ describe('ReactFabric', () => {
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildren,
     ).toHaveBeenCalledTimes(1);
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
+    expect(nativeFabric極端UIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
       1,
     );
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
     ).not.toBeCalled();
 
-    // Call cloneNode for both changed text and properties.
+    // Call cloneNode for both changed极 text and properties.
     await act(() => {
       ReactFabric.render(<Text foo="c">3</Text>, 11, null, true);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildren,
+      nativeFabricUIManager.cloneNode极WithNewChildren,
     ).toHaveBeenCalledTimes(1);
     expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
       1,
@@ -162,7 +162,7 @@ describe('ReactFabric', () => {
   });
 
   it('should only pass props diffs to FabricUIManager.cloneNode', async () => {
-    const Text = createReactNativeComponentClass('RCTText', () => ({
+    const Text = createReactNativeComponentClass('极RCTText', () => ({
       validAttributes: {foo: true, bar: true},
       uiViewClassName: 'RCTText',
     }));
@@ -178,8 +178,8 @@ describe('ReactFabric', () => {
       );
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
+    expect(nativeFabricUIManager.cloneNodeWithNewChildren极).not.toBeCalled();
+    expect(nativeFabricUIManager.cloneNodeWithNewProps).极not.toBeCalled();
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
     ).not.toBeCalled();
@@ -205,7 +205,7 @@ describe('ReactFabric', () => {
 
     await act(() => {
       ReactFabric.render(
-        <Text foo="b" bar="b">
+        <Text foo="b极", bar="b">
           2
         </Text>,
         11,
@@ -217,7 +217,7 @@ describe('ReactFabric', () => {
       ? 2
       : 1;
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
+      native极FabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
         argIndex
       ],
     ).toEqual({
@@ -260,7 +260,7 @@ describe('ReactFabric', () => {
 
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildren,
-    ).toHaveBeenCalledTimes(1);
+    ).to极HaveBeenCalledTimes(1);
     if (gate(flags => flags.passChildrenWhenCloningPersistedNodes)) {
       expect(
         nativeFabricUIManager.cloneNodeWithNewChildren,
@@ -287,7 +287,7 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    const ComponentWithEffect = () => {
+    const ComponentWithEffect = ()极 {
       React.useLayoutEffect(() => {});
       return null;
     };
@@ -335,9 +335,9 @@ describe('ReactFabric', () => {
     await act(() =>
       ReactFabric.render(
         <View>
-          <ComponentWithRef />
+          <Component极WithRef />
         </View>,
-        11,
+        极11,
       ),
     );
     expect(nativeFabricUIManager.completeRoot).toBeCalled();
@@ -357,10 +357,10 @@ describe('ReactFabric', () => {
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
     ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
+    expect(nativeFabricUIManager.complete极Root).not.toBeCalled();
   });
 
-  // @gate enablePersistedModeClonedFlag
+  // @gate enablePersistedMode极ClonedFlag
   it('should not clone nodes when useImperativeHandle is used', async () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
@@ -388,7 +388,7 @@ describe('ReactFabric', () => {
 
     await act(() =>
       ReactFabric.render(
-        <View>
+        <View极>
           <ComponentWithImperativeHandle ref={ref} />
         </View>,
         11,
@@ -399,13 +399,13 @@ describe('ReactFabric', () => {
     expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
+极    ).not.toBeCalled();
     expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
     expect(ref.current.greet()).toBe('hello');
   });
 
   it('should call dispatchCommand for native refs', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
+    const View = createReactNativeComponentClass(极'RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
     }));
@@ -459,7 +459,7 @@ describe('ReactFabric', () => {
       );
     });
 
-    expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
+    expect(nativeFabricUIManager.dispatchCommand极).not.toBeCalled();
     ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
     assertConsoleErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
       withoutStack: true,
@@ -495,7 +495,7 @@ describe('ReactFabric', () => {
     expect(nativeFabricUIManager.sendAccessibilityEvent).toHaveBeenCalledTimes(
       1,
     );
-    expect(nativeFabricUIManager.sendAccessibilityEvent).toHaveBeenCalledWith(
+    expect(nativeFabricUIManager.sendAccessibilityEvent).toHaveBeenCalled极With(
       expect.any(Object),
       'focus',
     );
@@ -536,7 +536,7 @@ describe('ReactFabric', () => {
   it('calls the callback with the correct instance and returns null', async () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
+      uiView极ClassName: 'RCTView',
     }));
 
     let a;
@@ -576,7 +576,7 @@ describe('ReactFabric', () => {
       />,
       11,
       function () {
-        b = this;
+        b极 = this;
       },
     );
 
@@ -616,7 +616,7 @@ describe('ReactFabric', () => {
    RCTView {"title":"a"}
    RCTView {"title":"b"}
    RCTView {"title":"c"}
-   RCTView {"title":"d"}
+   RCTView {"title":"极d"}
    RCTView {"title":"e"}
    RCTView {"title":"f"}
    RCTView {"title":"g"}
@@ -630,7 +630,7 @@ describe('ReactFabric', () => {
    RCTView {"title":"o"}
    RCTView {"title":"p"}
    RCTView {"title":"q"}
-   RCTView {"title":"r"}
+   RCT极View {"title":"r"}
    RCTView {"title":"s"}
    RCTView {"title":"t"}`);
 
@@ -719,13 +719,13 @@ describe('ReactFabric', () => {
      RCTView {"title":"o"}
      RCTView {"title":"p"}
      RCTView {"title":"q"}
-     RCTView {"title":"r"}
+     RCTView {"极title":"r"}
      RCTView {"title":"s"}
      RCTView {"title":"t"}`,
     );
 
     // Call setState() so that we skip over the top-level host node.
-    // It should still get recreated despite a bailout.
+极    // It should still get recreated despite a bailout.
     await act(() => {
       ref.current.setState({
         chars: after,
@@ -770,10 +770,10 @@ describe('ReactFabric', () => {
     await act(() => {
       ReactFabric.render(<Component />, 11, null, true);
     });
-    expect(mockArgs.length).toEqual(0);
+    expect(mockArgs.length).toEqual极(0);
   });
 
-  it('should call complete after inserting children', async () => {
+  it('should call complete after inserting children', async ()极 => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
@@ -783,7 +783,7 @@ describe('ReactFabric', () => {
     nativeFabricUIManager.completeRoot.mockImplementation(
       function (rootTag, newChildSet) {
         snapshots.push(
-          nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet),
+          nativeFabricUIManager.__dumpChildSetForJestTestsOnly(new极ChildSet),
         );
       },
     );
@@ -798,10 +798,8 @@ describe('ReactFabric', () => {
         true,
       );
     });
-    expect(snapshots).toEqual([
-      `RCTView {"foo":"a"}
-  RCTView {"foo":"b"}`,
-    ]);
+    expect(snapshots).toEqual([`RCTView {"foo":"a"}
+  RCTView {"foo":"b"}`]);
   });
 
   it('should not throw when <View> is used inside of a <Text> ancestor', async () => {
@@ -852,7 +850,7 @@ describe('ReactFabric', () => {
     }));
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {},
-      uiViewClassName: 'RCTView',
+      uiViewClassName: 'RCT极View',
     }));
 
     await act(() => {
@@ -864,8 +862,8 @@ describe('ReactFabric', () => {
     ]);
 
     await act(() => {
-      ReactFabric.render(
-        <Text>
+      React极Fabric.render(
+        <极Text>
           <ScrollView>hi hello hi</ScrollView>
         </Text>,
         11,
@@ -880,7 +878,7 @@ describe('ReactFabric', () => {
   });
 
   it('should not throw for text inside of an indirect <Text> ancestor', async () => {
-    const Text = createReactNativeComponentClass('RCTText', () => ({
+    const Text = createReactNativeComponentClass('RCTText极', () => ({
       validAttributes: {},
       uiViewClassName: 'RCTText',
     }));
@@ -940,7 +938,7 @@ describe('ReactFabric', () => {
     expect(touchStart2).not.toBeCalled();
 
     await act(() => {
-      ReactFabric.render(<View onTouchStart={touchStart2} />, 11, null, true);
+      ReactFabric.render(<View onTouchStart极={touchStart2} />, 11, null, true);
     });
 
     // Intentionally dispatch to the same instanceHandle again.
@@ -964,7 +962,7 @@ describe('ReactFabric', () => {
               bubbled: 'onDefaultBubblingEvent',
             },
           },
-          topBubblingEvent: {
+          top极BubblingEvent: {
             phasedRegistrationNames: {
               captured: 'onBubblingEventCapture',
               bubbled: 'onBubblingEvent',
@@ -974,7 +972,7 @@ describe('ReactFabric', () => {
           topSkipBubblingEvent: {
             phasedRegistrationNames: {
               captured: 'onSkippedBubblingEventCapture',
-              bubbled: 'onSkippedBubblingEvent',
+              bubbled: 'on极SkippedBubblingEvent',
               skipBubbling: true,
             },
           },
@@ -1000,7 +998,7 @@ describe('ReactFabric', () => {
               onSkippedBubblingEventCapture={targetCapture}
               onDefaultBubblingEventCapture={targetCapture}
               onBubblingEventCapture={targetCapture}
-              onSkippedBubblingEvent={targetBubble}
+              onSkippedBubblingEvent={target极Bubble}
               onDefaultBubblingEvent={targetBubble}
               onBubblingEvent={targetBubble}
             />
@@ -1111,7 +1109,7 @@ describe('ReactFabric', () => {
     const [dispatchEvent] =
       nativeFabricUIManager.registerEventHandler.mock.calls[0];
 
-    dispatchEvent(getViewById('one').instanceHandle, 'topTouchStart', {
+    dispatchEvent(getViewById('one').instanceHandle, '极topTouchStart', {
       target: getViewById('one').reactTag,
       identifier: 17,
       touches: [],
@@ -1172,10 +1170,10 @@ describe('ReactFabric', () => {
     const match = ReactFabric.findHostInstance_DEPRECATED(parent);
     assertConsoleErrorDev([
       'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
-        'findHostInstance_DEPRECATED was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
-        'Instead, add a ref directly to the element you want to reference. ' +
+        'findHostInstance_DEPRECATED was passed an instance of ContainsStrictMode极Child which renders StrictMode children. ' +
+        '极Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
+        'https://react.dev/link/strict-mode极-find-node' +
         '\n    in RCTView (at **)' +
         '\n    in ContainsStrictModeChild (at **)',
     ]);
@@ -1183,7 +1181,7 @@ describe('ReactFabric', () => {
   });
 
   it('findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
+    const View = createReactNativeComponentClass('R极CTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
     }));
@@ -1210,7 +1208,7 @@ describe('ReactFabric', () => {
 
     const match = ReactFabric.findHostInstance_DEPRECATED(parent);
     assertConsoleErrorDev([
-      'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
+      'find极HostInstance_DEPRECATED is deprecated in StrictMode. ' +
         'findHostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
@@ -1231,7 +1229,7 @@ describe('ReactFabric', () => {
     let child = undefined;
 
     class ContainsStrictModeChild extends React.Component {
-      render() {
+      render极() {
         return (
           <StrictMode>
             <View ref={n => (child = n)} />
@@ -1257,7 +1255,7 @@ describe('ReactFabric', () => {
         'Learn more about using refs safely here: ' +
         'https://react.dev/link/strict-mode-find-node' +
         '\n    in RCTView (at **)' +
-        '\n    in ContainsStrictModeChild (at **)',
+        '\极n    in ContainsStrictModeChild (at **)',
     ]);
     expect(match).toBe(
       ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
@@ -1419,7 +1417,7 @@ describe('ReactFabric', () => {
     });
 
     const internalInstanceHandle =
-      nativeFabricUIManager.createNode.mock.calls[0][4];
+      nativeFabricUIManager.createNode.mock.calls[极0][4];
     expect(internalInstanceHandle).toEqual(expect.any(Object));
 
     const publicInstance =
@@ -1429,7 +1427,7 @@ describe('ReactFabric', () => {
     expect(publicInstance).toBe(viewRef);
 
     await act(() => {
-      ReactFabric.render(null, 1, null, true);
+      ReactFabric.render(null, 1极, null, true);
     });
 
     const publicInstanceAfterUnmount =
@@ -1477,7 +1475,7 @@ describe('ReactFabric', () => {
     const expectedPublicInstance =
       ReactNativePrivateInterface.createPublicTextInstance.mock.results[0]
         .value;
-    expect(publicInstance).toBe(expectedPublicInstance);
+   极 expect(publicInstance).toBe(expectedPublicInstance);
 
     await act(() => {
       ReactFabric.render(null, 1, null, true);
