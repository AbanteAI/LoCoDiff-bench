--- react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected)+++ react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual)@@ -83,11 +83,11 @@     expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][0]).toBe(
       firstNode,
     );
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
-    ).toEqual({
-      foo: 'bar',
-    });
+    expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1]).toEqual(
+      {
+        foo: 'bar',
+      },
+    );
   });
 
   it('should not call FabricUIManager.cloneNode after render for properties that have not changed', async () => {
@@ -194,8 +194,13 @@         true,
       );
     });
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
+    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
+      ? 2
+      : 1;
+    expect(
+      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
+        argIndex
+      ],
     ).toEqual({
       bar: 'b',
     });
@@ -213,13 +218,8 @@         true,
       );
     });
-    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
-      ? 2
-      : 1;
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
-        argIndex
-      ],
+    expect(
+      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][1],
     ).toEqual({
       foo: 'b',
     });
@@ -1005,7 +1005,7 @@               onBubblingEvent={targetBubble}
             />
           </View>,
-          11,
+          1,
           null,
           true,
         );
@@ -1407,7 +1407,6 @@     await act(() => {
       ReactFabric.render(
         <View
-          foo="test"
           ref={ref => {
             viewRef = ref;
           }}
