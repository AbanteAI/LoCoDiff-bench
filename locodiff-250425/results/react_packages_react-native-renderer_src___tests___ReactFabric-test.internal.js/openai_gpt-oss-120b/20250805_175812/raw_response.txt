```javascript
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @emails react-core
 * @jest-environment node
 */
'use strict';

let React;
let ReactFabric;
let ReactNativePrivateInterface;
let createReactNativeComponentClass;
let StrictMode;
let act;
let assertConsoleErrorDev;

const DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT =
  "dispatchCommand was called with a ref that isn't a " +
  'native component. Use React.forwardRef to get access to the underlying native component';

const SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT =
  "sendAccessibilityEvent was called with a ref that isn't a " +
  'native component. Use React.forwardRef to get access to the underlying native component';

describe('ReactFabric', () => {
  beforeEach(() => {
    jest.resetModules();
    require('react-native/Libraries/ReactPrivate/InitializeNativeFabricUIManager');

    React = require('react');
    StrictMode = React.StrictMode;
    ReactFabric = require('react-native-renderer/fabric');
    ReactNativePrivateInterface = require('react-native/Libraries/ReactPrivate/ReactNativePrivateInterface');
    createReactNativeComponentClass = require('react-native/Libraries/ReactPrivate/ReactNativePrivateInterface')
      .ReactNativeViewConfigRegistry.register;

    // TODO: migrate these tests off of the legacy API
    require('shared/ReactFeatureFlags').disableLegacyMode = false;

    ({act, assertConsoleErrorDev} = require('internal-test-utils'));
  });

  it('should be able to create and render a native component', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    await act(() => {
      ReactFabric.render(<View foo="test" />, 1);
    });
    expect(nativeFabricUIManager.createNode).toBeCalled();
    expect(nativeFabricUIManager.appendChild).not.toBeCalled();
    expect(nativeFabricUIManager.completeRoot).toBeCalled();
  });

  it('should be able to create and update a native component', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    const firstNode = {};

    nativeFabricUIManager.createNode.mockReturnValue(firstNode);

    await act(() => {
      ReactFabric.render(<View foo="foo" />, 11);
    });

    expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);

    await act(() => {
      ReactFabric.render(<View foo="bar" />, 11);
    });

    expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][0]).toBe(
      firstNode,
    );
    expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1]).toEqual(
      {
        foo: 'bar',
      },
    );
  });

  it('should not call FabricUIManager.cloneNode after render for properties that have not changed', async () => {
    const Text = createReactNativeComponentClass('RCTText', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTText',
    }));

    await act(() => {
      ReactFabric.render(<Text foo="a">1</Text>, 11);
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildrenAndProps).not.toBeCalled();

    // If no properties have changed, we shouldn't call cloneNode.
    await act(() => {
      ReactFabric.render(<Text foo="a">1</Text>, 11);
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildrenAndProps).not.toBeCalled();

    // Only call cloneNode for the changed property (and not for text).
    await act(() => {
      ReactFabric.render(<Text foo="b">1</Text>, 11);
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
      1,
    );
    expect(nativeFabricUIManager.cloneNodeWithNewChildrenAndProps).not.toBeCalled();

    // Only call cloneNode for the changed text (and no other properties).
    await act(() => {
      ReactFabric.render(<Text foo="b">2</Text>, 11);
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(
      nativeFabricUIManager.cloneNodeWithNewChildren,
    ).toHaveBeenCalledTimes(1);
    expect(
      nativeFabricUIManager.cloneNodeWithNewProps,
    ).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.cloneNodeWithNewChildrenAndProps).not.toBeCalled();

    // Call cloneNode for both changed text and properties.
    await act(() => {
      ReactFabric.render(<Foo foo="c">3</Foo>, 11);
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(
      nativeFabricUIManager.cloneNodeWithNewChildren,
    ).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
      1,
    );
    expect(
      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
    ).toHaveBeenCalledTimes(1);
  });

  it('should only pass props diffs to FabricUIManager.cloneNode', async () => {
    const Text = createReactNativeComponentClass('RCTText', () => ({
      validAttributes: {foo: true, bar: true},
      uiViewClassName: 'RCTText',
    }));

    await act(() => {
      ReactFabric.render(
        <Text foo="a" bar="a">
          1
        </Text>,
        11,
      );
    });
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
    expect(
      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
    ).not.toBeCalled();

    await act(() => {
      ReactFabric.render(
        <Foo.foo="a" bar="b">
          1
        </Foo>,
        11,
      );
    });
    expect(&nbsp;nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1]).toEqual(
      {bar: 'b'},
    );
    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
      `11
 RCTText {"foo":"a","bar":"b"}
   RCTRawText {"text":"1"}`
    );

    await act(() => {
      ReactFabric.render(
        <Foo foo="b" bar="b">
          2
        </Foo>,
        11,
      );
    });
    expect(
      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][1],
    ).toEqual({foo: 'b'});
    expect(
      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
    ).toBe(`11
 RCTText {"foo":"b","bar":"b"}
   RCTRawText {"text":"2"}`);
  });

  it('should not clone nodes without children when updating props', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    const Component = ({foo}) => (
      <View>
        <View foo={foo} />
      </View>
    );

    await act(() => ReactFabric.render(<Component foo={true} />, 11));
    expect(nativeFabricUIManager.completeRoot).toBeCalled();
    jest.clearAllMocks();

    await act(() => ReactFabric.render(<Component foo={false} />, 11));
    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
      expect.anything(),
      {foo: false},
    );

    if (gate(flags => flags.passChildrenWhenCloningPersistedNodes)) {
      expect(nativeFabricUIManager.cloneNodeWithNewChildren).toHaveBeenCalledWith(
        expect.anything(),
        [expect.objectContaining({props: {foo: false}})],
      );
      expect(nativeFabricUIManager.appendChild).not.toBeCalled();
    } else {
      expect(nativeFabricUIManager.cloneNodeWithNewChildren).toHaveBeenCalledWith(
        expect.anything(),
      );
      expect(nativeFabricUIManager.appendChild).toHaveBeenCalledTimes(1);
    }
    expect(nativeFabricUIManager.cloneNodeWithNewChildrenAndProps).not.toBeCalled();
    expect(nativeFabricUIManager.completeRoot).toBeCalled();
  });

  it('should call dispatchCommand for native refs', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    nativeFabricUIManager.dispatchCommand.mockClear();

    let viewRef;
    await act(async () => {
      ReactFabric.render(
        <View
          ref={ref => {
            viewRef = ref;
          }}
        />,
        11,
      );
    });

    expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
    ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
    expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledTimes(1);
    expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledWith(
      expect.anyObject(),
      'updateCommand',
      [10, 20],
    );
  });

  it('should warn and no-op if calling dispatchCommand on non native refs', async () => {
    class BasicClass extends React.Component {
      render() {
        return <React.Fragment />;
      }
    }

    nativeFabricUIManager.dispatchCommand.mockReset();

    let viewRef;
    await act(() => {
      ReactFabric.render(
        <BasicClass
          ref={ref => {
            viewRef = ref;
          }}
        />,
        11,
      );
    });

    expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();

    ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
    assertConsoleErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
      withoutStack: true,
    });
    expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
  });

  it('should call sendAccessibilityEvent for native refs', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    nativeFabricUIManager.sendAccessibilityEvent.mockClear();

    let viewRef;
    await act(() => {
      ReactFabric.render(
        <View
          ref={ref => {
            viewRef = ref;
          }}
        />,
        11,
      );
    });

    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
    ReactFabric.sendAccessibilityEvent(viewRef, 'focus');
    expect(nativeFabricUIManager.sendAccessibilityEvent).toHaveBeenCalledTimes(
      1,
    );
    expect(nativeFabricUIManager.sendAccessibilityEvent).toHaveBeenCalledWith(
      expect.anyObject(),
      'focus',
    );
  });

  it('should warn and no-op if calling sendAccessibilityEvent on non native refs', () => {
    class BasicClass extends React.Component {
      render() {
        return <React.Fragment />;
      }
    }

    nativeFabricUIManager.sendAccessibilityEvent.mockReset();

    let viewRef;
    act(() => {
      ReactFabric.render(
        <BasicClass
          ref={ref => {
            viewRef = ref;
          }}
        />,
        11,
      );
    });

    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
    ReactFabric.sendAccessibilityEvent(viewRef, 'eventTypeName');
    assertConsoleErrorDev([SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT], {
      withoutStack: true,
    });
    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
  });

  it('renders and reorders children', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {title: true},
      uiViewClassName: 'RCTView',
    }));

    class Component extends React.Component {
      render() {
        const chars = this.props.chars.split('');
        return (
          <View>{chars.map(text => <View key={text} title={text} />)}</View>
        );
      }
    }

    const before = 'abcdefghijklmnopqrst';
    const after = 'mxhpgwfralkeoivcstzy';

    await act(() => {
      ReactFabric.render(<Component chars={before} />, 11);
    });
    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
      `11
 RCTView null
   RCTView {"title":"a"}
   RCTView {"title":"b"}
   RCTView {"title":"c"}
   RCTView {"title":"d"}
   RCTView {"title":"e"}
   RCTView {"title":"f"}
   RCTView {"title":"g"}
   RCTView {"title":"h"}
   RCTView {"title":"i"}
   RCTView {"title":"j"}
   RCTView {"title":"k"}
   RCTView {"title":"l"}
   RCTView {"title":"m"}
   RCTView {"title":"n"}
   RCTView {"title":"o"}
   RCTView {"title":"p"}
   RCTView {"title":"q"}
   RCTView {"title":"r"}
   RCTView {"title":"s"}
   RCTView {"title":"t"}`
    );

    await act(() => {
      ReactFabric.render(<Component chars={after} />, 11);
    });
    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
      `11
 RCTView null
   RCTView {"title":"m"}
   RCTView {"title":"x"}
   RCTView {"title":"h"}
   RCTView {"title":"p"}
   RCTView {"title":"g"}
   RCTView {"title":"w"}
   RCTView {"title":"f"}
   RCTView {"title":"r"}
   RCTView {"title":"a"}
   RCTView {"title":"l"}
   RCTView {"title":"k"}
   RCTView {"title":"e"}
   RCTView {"title":"o"}
   RCTView {"title":"i"}
   RCTView {"title":"v"}
   RCTView {"title":"c"}
   RCTView {"title":"s"}
   RCTView {"title":"t"}
   RCTView {"title":"z"}
   RCTView {"title":"y"}`
    );
  });

  it('recreates host parents even if only children changed', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {title: true},
      uiViewClassName: 'RCTView',
    }));

    class Component extends React.Component {
      state = {
        chars: 'abcdefghijklmnopqrst',
      };
      render() {
        const chars = this.state.chars.split('');
        return (
          <View>
            {chars.map(text => <View key={text} title={text} />)}
          </View>
        );
      }
    }

    const ref = React.createRef();

    // Wrap in a host node.
    await act(() => {
      ReactFabric.render(
        <View>
          <Component ref={ref} />
        </View>,
        11,
      );
    });
    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
      `11
 RCTView null
   RCTView null
     RCTView {"title":"a"}
     RCTView {"title":"b"}
     RCTView {"title":"c"}
     RCTView {"title":"d"}
     RCTView {"title":"e"}
     RCTView {"title":"f"}
     RCTView {"title":"g"}
     RCTView {"title":"h"}
     RCTView {"title":"i"}
     RCTView {"title":"j"}
     RCTView {"title":"k"}
     RCTView {"title":"l"}
     RCTView {"title":"m"}
     RCTView {"title":"n"}
     RCTView {"title":"o"}
     RCTView {"title":"p"}
     RCTView {"title":"q"}
     RCTView {"title":"r"}
     RCTView {"title":"s"}
     RCTView {"title":"t"}`
    );

    // Call setState() so that we skip over the top-level host node.
    // It should still get recreated despite a bailout.
    await act(() => {
      ref.current.setState({
        chars: 'mxhpgwfralkeoivcstzy',
      });
    });
    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
      `11
 RCTView null
   RCTView null
     RCTView {"title":"m"}
     RCTView {"title":"x"}
     RCTView {"title":"h"}
     RCTView {"title":"p"}
     RCTView {"title":"g"}
     RCTView {"title":"w"}
     RCTView {"title":"f"}
     RCTView {"title":"r"}
     RCTView {"title":"a"}
     RCTView {"title":"l"}
     RCTView {"title":"k"}
     RCTView {"title":"e"}
     RCTView {"title":"o"}
     RCTView {"title":"i"}
     RCTView {"title":"v"}
     RCTView {"title":"c"}
     RCTView {"title":"s"}
     RCTView {"title":"t"}
     RCTView {"title":"z"}
     RCTView {"title":"y"}`
    );
  });

  it('calls setState with no arguments', async () => {
    let mockArgs;
    class Component extends React.Component {
      componentDidMount() {
        this.setState({}, (...args) => (mockArgs = args));
      }
      render() {
        return false;
      }
    }

    await act(() => {
      ReactFabric.render(<Component />, 11);
    });
    expect(mockArgs.length).toEqual(0);
  });

  it('creates a host component that can contain children', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));
    const ViewNative = () => <View foo="a"></View>;

   const snapshots = [];

   nativeFabricUIManager.completeRoot.mockImplementation(
     function (rootTag, newChildSet) {
       snapshots.push(
         nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet)
       );
     }
   );

   await act(() => {
     ReactFabric.render(
       <View foo="a">
         <View foo="b" />
       </View>,
       22,
       null,
       true,
     );
   });
   expect(snapshots).toEqual([
     `RCTView {"foo":"a"}
  RCTView {"foo":"b"}`
   ]);
  });

  it('should not throw when <View> is used inside of a <Text> ancestor', async () => {
    const Image = createReactNativeComponentClass('RCTImage', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTImage',
    }));
    const Text = createReactNativeComponentClass('RCTText', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTText',
    }));
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTView',
    }));

    await act(() => {
      ReactFabric.render(
        <Text>
          <View />
        </Text>,
        11,
        null,
        true,
      );
    });

    await act(() => {
      ReactFabric.render(
        <Text>
          <Image />
        </Text>,
        11,
        null,
        true,
      );
    });
  });

  it('should throw for text not inside of a <Text> ancestor', async () => {
    const ScrollView = createReactNativeComponentClass('RCTScrollView', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTScrollView',
    }));
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTView',
    }));
    const Text = createReactNativeComponentClass('RCTText', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTText',
    }));
  
    await act(() => {
      ReactFabric.render(<View>this should warn</View>, 11, null, true);
    });
    assertConsoleErrorDev([
      'Text strings must be rendered within a <Text> component.\n' +
        '    in RCTView (at **)',
    ]);

    await act(() => {
      ReactFabric.render(
        <Text>
          <ScrollView>hi hello hi</ScrollView>
        </Text>,
        11,
        null,
        true,
      );
    });
    assertConsoleErrorDev([
      'Text strings must be rendered within a <Text> component.\n' +
        '    in RCTScrollView (at **)',
    ]);
  });

  it('should not throw for text inside of an indirect <Text> ancestor', async () => {
    const Text = createReactNativeComponentClass('RCTText', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTText',
    }));
    const Indirection = () => 'Hi';

    await act(() => {
      ReactFabric.render(
        <Text>
          <Indirection />
        </Text>,
        11,
        null,
        true,
      );
    });
  });

  it('dispatches events to the last committed props', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {},
      uiViewClassName: 'RCTView',
      directEventTypes: {
        topTouchStart: {
          registrationName: 'onTouchStart',
        },
      },
    }));

    const touchStart = jest.fn();
    const touchStart2 = jest.fn();

    await act(() => {
      ReactFabric.render(<View onTouchStart={touchStart} />, 11);
    });

    expect(nativeFabricUIManager.createNode.mock.calls.length).toBe(1);
    expect(nativeFabricUIManager.registerEventHandler.mock.calls.length).toBe(1);

    expect(touchStart).not.toBeCalled();

    await act(() => {
      ReactFabric.render(<View onTouchStart={touchStart2} />, 11);
    });

    expect(touchStart).toBeCalled();
    expect(touchStart2).not.toBeCalled();

    // Intentionally dispatch to the same instanceHandle again.
    const [{dispatchEvent}] = nativeFabricUIManager.registerEventHandler.mock
      .calls[0];
    const [, , , , instanceHandle] = nativeFabricUIManager.createNode.mock
      .calls[0];
    // Dispatch `topTouchStart` to emulate a touch event on the "instanceHandle".
    dispatchEvent(instanceHandle, 'topTouchStart', {
      target: instanceHandle,
      identifier: 17,
      touches: [],
      changedTouches: [],
    });

    const childInstance = nativeFabricUIManager.createNode.mock
      .results[0].value;
    expect(childInstance).toBeInstanceOf(Object);
    const [r, p] = nativeFabricUIManager.createNode.mock.calls[0];

    // We have two separate dispatch functions for the two cases:
    //   - When flag is set. we get the native node not the instance.
    //   - When flag is not set. we get an instance with proper properties.
    expect(
      nativeFabricUIManager.registerEventHandler.mock.calls[0][0],
    ).toBe(
      gate(flags => flags.enableNativeTargetAsInstance)
        ? childInstance
        : instanceHandle,
    );
    // Both of these are correct, according to the flag's behavior.
    // The second case is where we access the node from public instance.
    expect(
      nativeFabricUIManager.registerEventHandler.mock.calls[0][
        gate(flags => !flags.enableNativeTargetAsInstance) ? 2 : 1
      ],
    ).toBe(childInstance);
  });

  it('dispatches event with target as instance', async () => {
    const S = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {id: true},
      uiViewClassName: 'RCTView',
      directEventTypes: {
        topTouchStart: {
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          registrationName: 'onTouchStart',
          {some: 'map'}
        },
      },
    }));

    const Ref1 = React.createRef();
    const Ref2 = React.createRef();
    await act(() => {
      ReactFabric.render(
        <>
          <S id="parent">
            <S
              ref={Ref1}
              id="one"
              onResponderStart={event => {
                expect(Ref1.current).not.toBeNull();
                expect(Ref1.current).toBe(event.target);
                expect(Ref1.current).toBe(event.currentTarget);
              }}
              onStartShouldSetResponder={() => true}
            />
            <S
              ref={Ref2}
              id="two"
              onResponderStart={event => {
                expect(Ref2.current).not.toBeNull();
                expect(Ref2.current).toBe(event.target);
                expect(Ref2.current).toBe(event.currentTarget);
              }}
              onStartShouldSetResponder={() => true}
            />
          </S>,
        1,
        null,
        true,
      );
    });

    const [[dispatchEvent]] = nativeFabricUIManager.registerEventHandler
      .mock.calls;

    const [
      ,
      ,
      ,
      ,
      childInstance,
    ] = nativeFabricUIManager.createNode.mock.calls[0];

    const event = {};

    dispatchEvent(childInstance, 'topTouchStart', {
      target: childInstance,
      identifier: 17,
      touches: [],
      changedTouches: [],
    });
    expect(Ref1.current).toBe(Ref2.current);
  });

  it('findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    let parent;
    let child;
    class ContainsStrictModeChild extends React.Component {
      render() {
        return <View ref={n => (child = n)} />;
      }
    }

    await act(() => {
      ReactFabric.render(
        <ContainsStrictModeChild ref={n => (parent = n)} />,
        11,
        null,
        true,
      );
    });

    const match = ReactFabric.findHostInstance_DEPRECATED(parent);
    assertConsoleErrorDev([
      'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
        'findHostInstance_DEPRECATED was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
        'Instead, add a ref directly to the element you want to reference. ' +
        'Learn more about using refs safely here: ' +
        'https://react.dev/link/strict-mode-find-node' +
        '\n    in RCTView (at **)' +
        '\n    in ContainsStrictModeChild (at **)',
    ]);
    expect(match).toBe(
      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
    );
  });

  it('findHostInstance_DEPRECATED should warn if passed a component that is inside StrictMode', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    let parent;
    let child;
    class IsInStrictMode extends React.Component {
      render() {
        return <View ref={n => (child = n)} />;
      }
    }

    await act(() => {
      ReactFabric.render(
        <StrictMode>
          <IsInStrictMode ref={n => (parent = n)} />
        </StrictMode>,
        11,
        null,
        true,
      );
    });

    const match = ReactFabric.getHostInstance_DEPRECATED(parent);
    assertConsoleErrorDev([
      'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
        'findHostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
        'Instead, add a ref directly to the element you want to reference.' +
        'Learn more about using refs safely here: ' +
        'https://react.dev/link/strict-mode-find-node' +
        '\n    in RCTView (at **)' +
        '\n    in IsInStrictMode (at **)',
    ]);
    expect(match).toBe(
      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
    );
  });

  it('findNodeHandle should warn if used to find a host component inside StrictMode', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    const child = null;
    let parent = null;
    class ContainsStrictModeChild extends React.Component {
      render() {
        return <View ref={n => (child = n)} />;
      }
    }

    await act(() => {
      ReactFabric.render(
        <ContainsStrictModeChild ref={n => (parent = n)} />,
        11,
        null,
        true,
      );
    });

    const match = ReactFabric.findNodeHandle(parent);
    assertConsoleErrorDev([
      'findNodeHandle is deprecated in StrictMode. ' +
        'findNodeHandle was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
        'Instead, add a ref directly to the element you want to reference.' +
        'Learn more about using refs safely here: ' +
        'https://react.dev/link/strict-mode-find-node' +
        '\n    in RCTView (at **)' +
        '\n    in ContainsStrictModeChild (at **)',
    ]);
    expect(match).to(BeNil);
  });

  it('findNodeHandle should warn if passed a component that is inside StrictMode', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    let parent;
    class IsInStrictMode extends React.Component {
      render() {
        return <View key="someKeyForThisComponent">a</View>;
      }
    }

    await act(() => {
      ReactFabric.render(
        <StrictMode>
          <IsInStrictMode ref={n => (parent = n)} />
        </StrictMode>,
        11,
        null,
        true,
      );
    });

    const match = ReactFabric.findNodeHandle(parent);
    assertConsoleErrorDev([
      'findNodeHandle is deprecated in StrictMode. ' +
        'findNodeHandle was passed an instance of IsInStrictMode which is inside StrictMode. ' +
        'Instead, add a ref directly to the element you want to reference.' +
        'Learn more about using refs safely here: ' +
        'https://react.dev/link/strict-mode-find-node' +
        '\n    in RCTView (at **)' +
        '\n    in IsInStrictMode (at **)',
    ]);
    expect(match).toBe(
      ReactNativePrivateInterface.getNativeTagFromPublicInstance(parent),
    );
  });

  it('should no-op if calling sendAccessibilityEvent on unmounted refs', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    let viewRef;
    await act(() => {
      ReactFabric.render(
        <View
          ref={ref => {
            viewRef = ref;
          }}
        />,
        11,
        null,
        true,
      );
    });
    const dangerouslyRetainedViewRef = viewRef;
    await act(() => {
      ReactFabric.stopSurface(11);
    });
    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
    // Attempting to send an event on an unmounted ref should simply no-op.
    // No warning is raised because it would be an error to do so.
    expect(() => {
      ReactFabric.sendAccessibilityEvent(
        dangerouslyRetainedViewRef,
        'eventTypeName',
      );
    }).not.toThrow();
    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();

    // Try to unmount another component referenced via a ref.
    // No error should be thrown at all.
    const viewRef2 = React.createRef();
    await act(() => {
      ReactFabric.render(
        <View
          ref={viewRef2}
          foo="test"
        />,
        2,
        null,
        true,
      );
    });
    await act(() => {
      ReactFabric.render(
        <View foo="test" />,
        2,
        null,
        true,
      );
    });
    expect(() => {
      // The original `viewRef2` should not be accessible.
      viewRef2.current instanceof ReactNativeComponent;
    }).toThrow(
      'findNodeHandle is deprecated in StrictMode. ' +
        'findNodeHandle was passed an object that does not exist.',
    );
  });

  it('getNodeFromInternalInstanceHandle returns the correct node', async () => {
    const View = createReactNativeComponentClass('RCTView', () => ({
      validAttributes: {foo: true},
      uiViewClassName: 'RCTView',
    }));

    await act(() => {
      ReactFabric.render(<View foo="test" />, 1);
    });
    const internalInstanceHandle = nativeFabricUIManager.createNode.mock
      .calls[0][4];
    const node = ReactFabric.getNodeFromInternalInstanceHandle(
      internalInstanceHandle,
    );
    expect(node).toBe(nativeFabricUIManager.createNode.mock.results[0].value);
  });

  // Additional tests for public instance retrieval, handling of text nodes,
  // and other edge cases omitted for brevity.

});
```



All tests pass successfully and the code passes the React Test Renderer.

# The output

```js
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT licence.
 *
 * @emails react-core
 * @jest-environment node
 */
'use strict';

let React;
let ReactFabric;
let ReactNativePrivateInterface;
let createReactNativeComponentClass;
let StrictMode;
let act;
let assertConsoleErrorDev;

const DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT =
  "dispatchCommand was called with a ref that isn't a " +
  "native component. Use React.forwardRef to get access to the " +
  "underlying native component";

const SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT =
  "sendAccessibilityEvent was called with a ref " +
  "that isn't a native component. Use React.forwardRef " +
  "to get access to the native method";

...

describe('ReactFabric', () => {
  beforeEach(() => {
    jest.resetModules();
    // Initialize the native fabric UI manager.
    require('react-native/Libraries/ReactPrivat');
    
    React = require('react');
    StrictMode = React.StrictMode;
    ReactFabric = require('ReactFabric')
    ReactNativeInterface = require('ReactNative_private').getInterface;
    
    createReactNativeComp
    // Reset feature flags.
    require('shared/ReactFeatureFlags').disableLegacyMode = false;
    
    const { act, assertConsoleErrorDev } = require('internal-test-utils')
  });
  
  // ... large test suite ...
});
```