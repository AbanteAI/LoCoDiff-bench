
index eff89da73..a721aa6d4 100644
--- a/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected):tmp/tmp98ap27f0_expected.txt	
+++ b/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual):tmp/tmp75jshd91_actual.txt	
@@ -12,34 +12,34 @@
 
 let React;
 let ReactFabric;
-let ReactNativePrivateInterface;
 let createReactNativeComponentClass;
 let StrictMode;
 let act;
-let assertConsoleErrorDev;
 
 const DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT =
-  "dispatchCommand was called with a ref that isn't a " +
+  "Warning: dispatchCommand was called with a ref that isn't a " +
   'native component. Use React.forwardRef to get access to the underlying native component';
 
 const SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT =
   "sendAccessibilityEvent was called with a ref that isn't a " +
   'native component. Use React.forwardRef to get access to the underlying native component';
 
+jest.mock('shared/ReactFeatureFlags', () =>
+  require('shared/forks/ReactFeatureFlags.native-oss'),
+);
+
 describe('ReactFabric', () => {
   beforeEach(() => {
     jest.resetModules();
 
-    require('react-native/Libraries/ReactPrivate/InitializeNativeFabricUIManager');
-
     React = require('react');
     StrictMode = React.StrictMode;
     ReactFabric = require('react-native-renderer/fabric');
-    ReactNativePrivateInterface = require('react-native/Libraries/ReactPrivate/ReactNativePrivateInterface');
     createReactNativeComponentClass =
       require('react-native/Libraries/ReactPrivate/ReactNativePrivateInterface')
         .ReactNativeViewConfigRegistry.register;
-    ({act, assertConsoleErrorDev} = require('internal-test-utils'));
+
+    act = require('internal-test-utils').act;
   });
 
   it('should be able to create and render a native component', async () => {
@@ -49,7 +49,7 @@ describe('ReactFabric', () => {
     }));
 
     await act(() => {
-      ReactFabric.render(<View foo="test" />, 1, null, true);
+      ReactFabric.render(<View foo="test" />, 1);
     });
     expect(nativeFabricUIManager.createNode).toBeCalled();
     expect(nativeFabricUIManager.appendChild).not.toBeCalled();
@@ -67,22 +67,22 @@ describe('ReactFabric', () => {
     nativeFabricUIManager.createNode.mockReturnValue(firstNode);
 
     await act(() => {
-      ReactFabric.render(<View foo="foo" />, 11, null, true);
+      ReactFabric.render(<View foo="foo" />, 11);
     });
 
     expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);
 
     await act(() => {
-      ReactFabric.render(<View foo="bar" />, 11, null, true);
+      ReactFabric.render(<View foo="bar" />, 11);
     });
 
     expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);
     expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
       1,
     );
-    expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][0]).toBe(
-      firstNode,
-    );
+    expect(
+      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][0],
+    ).toBe(firstNode);
     expect(
       nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
     ).toEqual({
@@ -97,7 +97,7 @@ describe('ReactFabric', () => {
     }));
 
     await act(() => {
-      ReactFabric.render(<Text foo="a">1</Text>, 11, null, true);
+      ReactFabric.render(<Text foo="a">1</Text>, 11);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
@@ -108,7 +108,7 @@ describe('ReactFabric', () => {
 
     // If no properties have changed, we shouldn't call cloneNode.
     await act(() => {
-      ReactFabric.render(<Text foo="a">1</Text>, 11, null, true);
+      ReactFabric.render(<Text foo="a">1</Text>, 11);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
@@ -119,7 +119,7 @@ describe('ReactFabric', () => {
 
     // Only call cloneNode for the changed property (and not for text).
     await act(() => {
-      ReactFabric.render(<Text foo="b">1</Text>, 11, null, true);
+      ReactFabric.render(<Text foo="b">1</Text>, 11);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
@@ -132,7 +132,7 @@ describe('ReactFabric', () => {
 
     // Only call cloneNode for the changed text (and no other properties).
     await act(() => {
-      ReactFabric.render(<Text foo="b">2</Text>, 11, null, true);
+      ReactFabric.render(<Text foo="b">2</Text>, 11);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(
@@ -147,7 +147,7 @@ describe('ReactFabric', () => {
 
     // Call cloneNode for both changed text and properties.
     await act(() => {
-      ReactFabric.render(<Text foo="c">3</Text>, 11, null, true);
+      ReactFabric.render(<Text foo="c">3</Text>, 11);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(
@@ -173,8 +173,6 @@ describe('ReactFabric', () => {
           1
         </Text>,
         11,
-        null,
-        true,
       );
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
@@ -190,8 +188,6 @@ describe('ReactFabric', () => {
           1
         </Text>,
         11,
-        null,
-        true,
       );
     });
     expect(
@@ -199,9 +195,9 @@ describe('ReactFabric', () => {
     ).toEqual({
       bar: 'b',
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTText {"foo":"a","bar":"b"}
-   RCTRawText {"text":"1"}`);
+    expect(
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
 
     await act(() => {
       ReactFabric.render(
@@ -209,199 +205,16 @@ describe('ReactFabric', () => {
           2
         </Text>,
         11,
-        null,
-        true,
       );
     });
-    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
-      ? 2
-      : 1;
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
-        argIndex
-      ],
+      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][1],
     ).toEqual({
       foo: 'b',
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTText {"foo":"b","bar":"b"}
-   RCTRawText {"text":"2"}`);
-  });
-
-  it('should not clone nodes without children when updating props', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const Component = ({foo}) => (
-      <View>
-        <View foo={foo} />
-      </View>
-    );
-
-    await act(() =>
-      ReactFabric.render(<Component foo={true} />, 11, null, true),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(<Component foo={false} />, 11, null, true),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
-      1,
-    );
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
-      expect.anything(),
-      {foo: false},
-    );
-
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildren,
-    ).toHaveBeenCalledTimes(1);
-    if (gate(flags => flags.passChildrenWhenCloningPersistedNodes)) {
-      expect(
-        nativeFabricUIManager.cloneNodeWithNewChildren,
-      ).toHaveBeenCalledWith(expect.anything(), [
-        expect.objectContaining({props: {foo: false}}),
-      ]);
-      expect(nativeFabricUIManager.appendChild).not.toBeCalled();
-    } else {
-      expect(
-        nativeFabricUIManager.cloneNodeWithNewChildren,
-      ).toHaveBeenCalledWith(expect.anything());
-      expect(nativeFabricUIManager.appendChild).toHaveBeenCalledTimes(1);
-    }
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when layout effects are used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithEffect = () => {
-      React.useLayoutEffect(() => {});
-      return null;
-    };
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithEffect />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithEffect />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when insertion effects are used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithRef = () => {
-      React.useInsertionEffect(() => {});
-      return null;
-    };
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithRef />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithRef />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when useImperativeHandle is used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithImperativeHandle = props => {
-      React.useImperativeHandle(props.ref, () => ({greet: () => 'hello'}));
-      return null;
-    };
-
-    const ref = React.createRef();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithImperativeHandle ref={ref} />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    expect(ref.current.greet()).toBe('hello');
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithImperativeHandle ref={ref} />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-    expect(ref.current.greet()).toBe('hello');
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
   });
 
   it('should call dispatchCommand for native refs', async () => {
@@ -421,8 +234,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
@@ -454,14 +265,13 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
     expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
-    ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
-    assertConsoleErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
+    expect(() => {
+      ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
+    }).toErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
       withoutStack: true,
     });
 
@@ -485,8 +295,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
@@ -519,47 +327,20 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
     expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
-    ReactFabric.sendAccessibilityEvent(viewRef, 'eventTypeName');
-    assertConsoleErrorDev([SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT], {
+    expect(() => {
+      ReactFabric.sendAccessibilityEvent(viewRef, 'eventTypeName');
+    }).toErrorDev([SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT], {
       withoutStack: true,
     });
 
     expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
   });
 
-  it('calls the callback with the correct instance and returns null', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    let a;
-    let b;
-    let c;
-    await act(() => {
-      c = ReactFabric.render(
-        <View foo="foo" ref={v => (a = v)} />,
-        11,
-        function () {
-          b = this;
-        },
-        true,
-      );
-    });
-
-    expect(a).toBeTruthy();
-    expect(a).toBe(b);
-    expect(c).toBe(null);
-  });
-
-  // @gate !disableLegacyMode
-  it('returns the instance in legacy mode and calls the callback with it', () => {
+  it('returns the correct instance and calls it in the callback', () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
@@ -568,12 +349,7 @@ describe('ReactFabric', () => {
     let a;
     let b;
     const c = ReactFabric.render(
-      <View
-        foo="foo"
-        ref={v => {
-          a = v;
-        }}
-      />,
+      <View foo="foo" ref={v => (a = v)} />,
       11,
       function () {
         b = this;
@@ -609,56 +385,18 @@ describe('ReactFabric', () => {
     const after = 'mxhpgwfralkeoivcstzy';
 
     await act(() => {
-      ReactFabric.render(<Component chars={before} />, 11, null, true);
+      ReactFabric.render(<Component chars={before} />, 11);
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTView null
-   RCTView {"title":"a"}
-   RCTView {"title":"b"}
-   RCTView {"title":"c"}
-   RCTView {"title":"d"}
-   RCTView {"title":"e"}
-   RCTView {"title":"f"}
-   RCTView {"title":"g"}
-   RCTView {"title":"h"}
-   RCTView {"title":"i"}
-   RCTView {"title":"j"}
-   RCTView {"title":"k"}
-   RCTView {"title":"l"}
-   RCTView {"title":"m"}
-   RCTView {"title":"n"}
-   RCTView {"title":"o"}
-   RCTView {"title":"p"}
-   RCTView {"title":"q"}
-   RCTView {"title":"r"}
-   RCTView {"title":"s"}
-   RCTView {"title":"t"}`);
+    expect(
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
 
     await act(() => {
-      ReactFabric.render(<Component chars={after} />, 11, null, true);
+      ReactFabric.render(<Component chars={after} />, 11);
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTView null
-   RCTView {"title":"m"}
-   RCTView {"title":"x"}
-   RCTView {"title":"h"}
-   RCTView {"title":"p"}
-   RCTView {"title":"g"}
-   RCTView {"title":"w"}
-   RCTView {"title":"f"}
-   RCTView {"title":"r"}
-   RCTView {"title":"a"}
-   RCTView {"title":"l"}
-   RCTView {"title":"k"}
-   RCTView {"title":"e"}
-   RCTView {"title":"o"}
-   RCTView {"title":"i"}
-   RCTView {"title":"v"}
-   RCTView {"title":"c"}
-   RCTView {"title":"s"}
-   RCTView {"title":"t"}
-   RCTView {"title":"z"}
-   RCTView {"title":"y"}`);
+    expect(
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
   });
 
   it('recreates host parents even if only children changed', async () => {
@@ -694,66 +432,20 @@ describe('ReactFabric', () => {
           <Component ref={ref} />
         </View>,
         11,
-        null,
-        true,
       );
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
-      `11
- RCTView null
-   RCTView null
-     RCTView {"title":"a"}
-     RCTView {"title":"b"}
-     RCTView {"title":"c"}
-     RCTView {"title":"d"}
-     RCTView {"title":"e"}
-     RCTView {"title":"f"}
-     RCTView {"title":"g"}
-     RCTView {"title":"h"}
-     RCTView {"title":"i"}
-     RCTView {"title":"j"}
-     RCTView {"title":"k"}
-     RCTView {"title":"l"}
-     RCTView {"title":"m"}
-     RCTView {"title":"n"}
-     RCTView {"title":"o"}
-     RCTView {"title":"p"}
-     RCTView {"title":"q"}
-     RCTView {"title":"r"}
-     RCTView {"title":"s"}
-     RCTView {"title":"t"}`,
-    );
+    expect(
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
 
     // Call setState() so that we skip over the top-level host node.
     // It should still get recreated despite a bailout.
-    await act(() => {
-      ref.current.setState({
-        chars: after,
-      });
+    ref.current.setState({
+      chars: after,
     });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTView null
-   RCTView null
-     RCTView {"title":"m"}
-     RCTView {"title":"x"}
-     RCTView {"title":"h"}
-     RCTView {"title":"p"}
-     RCTView {"title":"g"}
-     RCTView {"title":"w"}
-     RCTView {"title":"f"}
-     RCTView {"title":"r"}
-     RCTView {"title":"a"}
-     RCTView {"title":"l"}
-     RCTView {"title":"k"}
-     RCTView {"title":"e"}
-     RCTView {"title":"o"}
-     RCTView {"title":"i"}
-     RCTView {"title":"v"}
-     RCTView {"title":"c"}
-     RCTView {"title":"s"}
-     RCTView {"title":"t"}
-     RCTView {"title":"z"}
-     RCTView {"title":"y"}`);
+    expect(
+      nativeFabricUIManager.__dumpHierarchyForJestTestsOnly(),
+    ).toMatchSnapshot();
   });
 
   it('calls setState with no arguments', async () => {
@@ -768,7 +460,7 @@ describe('ReactFabric', () => {
     }
 
     await act(() => {
-      ReactFabric.render(<Component />, 11, null, true);
+      ReactFabric.render(<Component />, 11);
     });
     expect(mockArgs.length).toEqual(0);
   });
@@ -780,13 +472,14 @@ describe('ReactFabric', () => {
     }));
 
     const snapshots = [];
-    nativeFabricUIManager.completeRoot.mockImplementation(
-      function (rootTag, newChildSet) {
-        snapshots.push(
-          nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet),
-        );
-      },
-    );
+    nativeFabricUIManager.completeRoot.mockImplementation(function (
+      rootTag,
+      newChildSet,
+    ) {
+      snapshots.push(
+        nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet),
+      );
+    });
 
     await act(() => {
       ReactFabric.render(
@@ -794,14 +487,9 @@ describe('ReactFabric', () => {
           <View foo="b" />
         </View>,
         22,
-        null,
-        true,
       );
     });
-    expect(snapshots).toEqual([
-      `RCTView {"foo":"a"}
-  RCTView {"foo":"b"}`,
-    ]);
+    expect(snapshots).toMatchSnapshot();
   });
 
   it('should not throw when <View> is used inside of a <Text> ancestor', async () => {
@@ -824,8 +512,6 @@ describe('ReactFabric', () => {
           <View />
         </Text>,
         11,
-        null,
-        true,
       );
     });
 
@@ -835,8 +521,6 @@ describe('ReactFabric', () => {
           <Image />
         </Text>,
         11,
-        null,
-        true,
       );
     });
   });
@@ -855,28 +539,22 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    await act(() => {
-      ReactFabric.render(<View>this should warn</View>, 11, null, true);
-    });
-    assertConsoleErrorDev([
-      'Text strings must be rendered within a <Text> component.\n' +
-        '    in RCTView (at **)',
-    ]);
+    await expect(async () => {
+      await act(() => {
+        ReactFabric.render(<View>this should warn</View>, 11);
+      });
+    }).toErrorDev(['Text strings must be rendered within a <Text> component.']);
 
-    await act(() => {
-      ReactFabric.render(
-        <Text>
-          <ScrollView>hi hello hi</ScrollView>
-        </Text>,
-        11,
-        null,
-        true,
-      );
-    });
-    assertConsoleErrorDev([
-      'Text strings must be rendered within a <Text> component.\n' +
-        '    in RCTScrollView (at **)',
-    ]);
+    await expect(async () => {
+      await act(() => {
+        ReactFabric.render(
+          <Text>
+            <ScrollView>hi hello hi</ScrollView>
+          </Text>,
+          11,
+        );
+      });
+    }).toErrorDev(['Text strings must be rendered within a <Text> component.']);
   });
 
   it('should not throw for text inside of an indirect <Text> ancestor', async () => {
@@ -893,8 +571,6 @@ describe('ReactFabric', () => {
           <Indirection />
         </Text>,
         11,
-        null,
-        true,
       );
     });
   });
@@ -914,7 +590,7 @@ describe('ReactFabric', () => {
     const touchStart2 = jest.fn();
 
     await act(() => {
-      ReactFabric.render(<View onTouchStart={touchStart} />, 11, null, true);
+      ReactFabric.render(<View onTouchStart={touchStart} />, 11);
     });
 
     expect(nativeFabricUIManager.createNode.mock.calls.length).toBe(1);
@@ -940,7 +616,7 @@ describe('ReactFabric', () => {
     expect(touchStart2).not.toBeCalled();
 
     await act(() => {
-      ReactFabric.render(<View onTouchStart={touchStart2} />, 11, null, true);
+      ReactFabric.render(<View onTouchStart={touchStart2} />, 11);
     });
 
     // Intentionally dispatch to the same instanceHandle again.
@@ -1006,8 +682,6 @@ describe('ReactFabric', () => {
             />
           </View>,
           11,
-          null,
-          true,
         );
       });
 
@@ -1103,8 +777,6 @@ describe('ReactFabric', () => {
           />
         </View>,
         1,
-        null,
-        true,
       );
     });
 
@@ -1164,18 +836,18 @@ describe('ReactFabric', () => {
       ReactFabric.render(
         <ContainsStrictModeChild ref={n => (parent = n)} />,
         11,
-        null,
-        true,
       );
     });
 
-    const match = ReactFabric.findHostInstance_DEPRECATED(parent);
-    assertConsoleErrorDev([
-      'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
+    let match;
+    expect(
+      () => (match = ReactFabric.findHostInstance_DEPRECATED(parent)),
+    ).toErrorDev([
+      'Warning: findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
         'findHostInstance_DEPRECATED was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
+        'https://reactjs.org/link/strict-mode-find-node' +
         '\n    in RCTView (at **)' +
         '\n    in ContainsStrictModeChild (at **)',
     ]);
@@ -1203,18 +875,18 @@ describe('ReactFabric', () => {
           <IsInStrictMode ref={n => (parent = n)} />
         </StrictMode>,
         11,
-        null,
-        true,
       );
     });
 
-    const match = ReactFabric.findHostInstance_DEPRECATED(parent);
-    assertConsoleErrorDev([
-      'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
+    let match;
+    expect(
+      () => (match = ReactFabric.findHostInstance_DEPRECATED(parent)),
+    ).toErrorDev([
+      'Warning: findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
         'findHostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
+        'https://reactjs.org/link/strict-mode-find-node' +
         '\n    in RCTView (at **)' +
         '\n    in IsInStrictMode (at **)',
     ]);
@@ -1244,24 +916,20 @@ describe('ReactFabric', () => {
       ReactFabric.render(
         <ContainsStrictModeChild ref={n => (parent = n)} />,
         11,
-        null,
-        true,
       );
     });
 
-    const match = ReactFabric.findNodeHandle(parent);
-    assertConsoleErrorDev([
-      'findNodeHandle is deprecated in StrictMode. ' +
+    let match;
+    expect(() => (match = ReactFabric.findNodeHandle(parent))).toErrorDev([
+      'Warning: findNodeHandle is deprecated in StrictMode. ' +
         'findNodeHandle was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
+        'https://reactjs.org/link/strict-mode-find-node' +
         '\n    in RCTView (at **)' +
         '\n    in ContainsStrictModeChild (at **)',
     ]);
-    expect(match).toBe(
-      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
-    );
+    expect(match).toBe(child._nativeTag);
   });
 
   it('findNodeHandle should warn if passed a component that is inside StrictMode', async () => {
@@ -1285,58 +953,20 @@ describe('ReactFabric', () => {
           <IsInStrictMode ref={n => (parent = n)} />
         </StrictMode>,
         11,
-        null,
-        true,
       );
     });
 
-    const match = ReactFabric.findNodeHandle(parent);
-    assertConsoleErrorDev([
-      'findNodeHandle is deprecated in StrictMode. ' +
+    let match;
+    expect(() => (match = ReactFabric.findNodeHandle(parent))).toErrorDev([
+      'Warning: findNodeHandle is deprecated in StrictMode. ' +
         'findNodeHandle was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
+        'https://reactjs.org/link/strict-mode-find-node' +
         '\n    in RCTView (at **)' +
         '\n    in IsInStrictMode (at **)',
     ]);
-    expect(match).toBe(
-      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
-    );
-  });
-
-  it('findNodeHandle errors when called from render', async () => {
-    class TestComponent extends React.Component {
-      render() {
-        ReactFabric.findNodeHandle(this);
-        return null;
-      }
-    }
-    await act(() => {
-      ReactFabric.render(<TestComponent />, 11, null, true);
-    });
-    assertConsoleErrorDev([
-      'TestComponent is accessing findNodeHandle inside its render(). ' +
-        'render() should be a pure function of props and state. It should ' +
-        'never access something that requires stale data from the previous ' +
-        'render, such as refs. Move this logic to componentDidMount and ' +
-        'componentDidUpdate instead.\n' +
-        '    in TestComponent (at **)',
-    ]);
-  });
-
-  it("findNodeHandle doesn't error when called outside render", async () => {
-    class TestComponent extends React.Component {
-      render() {
-        return null;
-      }
-      componentDidMount() {
-        ReactFabric.findNodeHandle(this);
-      }
-    }
-    await act(() => {
-      ReactFabric.render(<TestComponent />, 11, null, true);
-    });
+    expect(match).toBe(child._nativeTag);
   });
 
   it('should no-op if calling sendAccessibilityEvent on unmounted refs', async () => {
@@ -1356,8 +986,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
     const dangerouslyRetainedViewRef = viewRef;
@@ -1372,122 +1000,4 @@ describe('ReactFabric', () => {
 
     expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
   });
-
-  it('getNodeFromInternalInstanceHandle should return the correct shadow node', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    await act(() => {
-      ReactFabric.render(<View foo="test" />, 1, null, true);
-    });
-
-    const internalInstanceHandle =
-      nativeFabricUIManager.createNode.mock.calls[0][4];
-    expect(internalInstanceHandle).toEqual(expect.any(Object));
-
-    const expectedShadowNode =
-      nativeFabricUIManager.createNode.mock.results[0].value;
-    expect(expectedShadowNode).toEqual(expect.any(Object));
-
-    const node = ReactFabric.getNodeFromInternalInstanceHandle(
-      internalInstanceHandle,
-    );
-    expect(node).toBe(expectedShadowNode);
-  });
-
-  it('getPublicInstanceFromInternalInstanceHandle should provide public instances for HostComponent', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    let viewRef;
-    await act(() => {
-      ReactFabric.render(
-        <View
-          foo="test"
-          ref={ref => {
-            viewRef = ref;
-          }}
-        />,
-        1,
-        null,
-        true,
-      );
-    });
-
-    const internalInstanceHandle =
-      nativeFabricUIManager.createNode.mock.calls[0][4];
-    expect(internalInstanceHandle).toEqual(expect.any(Object));
-
-    const publicInstance =
-      ReactFabric.getPublicInstanceFromInternalInstanceHandle(
-        internalInstanceHandle,
-      );
-    expect(publicInstance).toBe(viewRef);
-
-    await act(() => {
-      ReactFabric.render(null, 1, null, true);
-    });
-
-    const publicInstanceAfterUnmount =
-      ReactFabric.getPublicInstanceFromInternalInstanceHandle(
-        internalInstanceHandle,
-      );
-    expect(publicInstanceAfterUnmount).toBe(null);
-  });
-
-  it('getPublicInstanceFromInternalInstanceHandle should provide public instances for HostText', async () => {
-    jest.spyOn(ReactNativePrivateInterface, 'createPublicTextInstance');
-
-    const RCTText = createReactNativeComponentClass('RCTText', () => ({
-      validAttributes: {},
-      uiViewClassName: 'RCTText',
-    }));
-
-    await act(() => {
-      ReactFabric.render(<RCTText>Text content</RCTText>, 1, null, true);
-    });
-
-    // Access the internal instance handle used to create the text node.
-    const internalInstanceHandle =
-      nativeFabricUIManager.createNode.mock.calls[0][4];
-    expect(internalInstanceHandle).toEqual(expect.any(Object));
-
-    // Text public instances should be created lazily.
-    expect(
-      ReactNativePrivateInterface.createPublicTextInstance,
-    ).not.toHaveBeenCalled();
-
-    const publicInstance =
-      ReactFabric.getPublicInstanceFromInternalInstanceHandle(
-        internalInstanceHandle,
-      );
-
-    // We just requested the text public instance, so it should have been created at this point.
-    expect(
-      ReactNativePrivateInterface.createPublicTextInstance,
-    ).toHaveBeenCalledTimes(1);
-    expect(
-      ReactNativePrivateInterface.createPublicTextInstance,
-    ).toHaveBeenCalledWith(internalInstanceHandle);
-
-    const expectedPublicInstance =
-      ReactNativePrivateInterface.createPublicTextInstance.mock.results[0]
-        .value;
-    expect(publicInstance).toBe(expectedPublicInstance);
-
-    await act(() => {
-      ReactFabric.render(null, 1, null, true);
-    });
-
-    const publicInstanceAfterUnmount =
-      ReactFabric.getPublicInstanceFromInternalInstanceHandle(
-        internalInstanceHandle,
-      );
-
-    expect(publicInstanceAfterUnmount).toBe(null);
-  });
 });
\ No newline at end of file
