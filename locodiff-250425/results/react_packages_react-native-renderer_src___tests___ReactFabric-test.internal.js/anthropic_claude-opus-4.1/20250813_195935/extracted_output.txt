it('should call dispatchCommand for native refs', () => {
  const View = createReactNativeComponentClass('RCTView', () => ({
    validAttributes: {foo: true},
    uiViewClassName: 'RCTView',
  }));

  nativeFabricUIManager.dispatchCommand.mockClear();

  let viewRef;
  ReactFabric.render(
    <View
      ref={ref => {
        viewRef = ref;
      }}
    />,
    11,
  );

  expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
  ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
  expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledTimes(1);
  expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledWith(
    expect.any(Object),
    'updateCommand',
    [10, 20],
  );
});
```

This test also included warning validation for non-native refs:

```javascript
it('should warn and no-op if calling dispatchCommand on non native refs', () => {
  // ... test for warning when dispatchCommand is called on non-native components
});
```

## Key Evolution Points

### 1. **Migration to async/await (2021)**
In commits `59d3aca6` and `f85f429d` (July 2021), the tests were migrated to use `act()` with async/await patterns:

```javascript
await act(() => {
  ReactFabric.render(<View ref={ref => { viewRef = ref; }} />, 11, null, true);
});
```

### 2. **Concurrent Root Support (2024)**
In commit `8416ebee` (June 2024), the tests were updated to support concurrent root:

```javascript
await act(() => {
  ReactFabric.render(<View foo="test" />, 1, null, true); // true flag for concurrent
});
```

### 3. **Test Infrastructure Changes (2024)**
In commit `26297f53` (December 2024), the tests were updated to use new assertion helpers:

```javascript
ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
assertConsoleErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
  withoutStack: true,
});