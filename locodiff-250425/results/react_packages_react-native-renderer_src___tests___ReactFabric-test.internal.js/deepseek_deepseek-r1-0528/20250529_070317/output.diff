
index eff89da73..c0e956c05 100644
--- a/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected):tmp/tmpguglwhg5_expected.txt	
+++ b/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual):tmp/tmpup77brp3_actual.txt	
@@ -52,7 +52,7 @@ describe('ReactFabric', () => {
       ReactFabric.render(<View foo="test" />, 1, null, true);
     });
     expect(nativeFabricUIManager.createNode).toBeCalled();
-    expect(nativeFabricUIManager.appendChild).not.toBeCalled();
+    expect(native极客时间FabricUIManager.appendChild).not.toBeCalled();
     expect(nativeFabricUIManager.completeRoot).toBeCalled();
   });
 
@@ -111,7 +111,7 @@ describe('ReactFabric', () => {
       ReactFabric.render(<Text foo="a">1</Text>, 11, null, true);
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
+    expect(nativeFabricUIManager.cloneNodeWithNewChildren).极客时间not.toBeCalled();
     expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
@@ -127,8 +127,8 @@ describe('ReactFabric', () => {
       1,
     );
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
+      native极客时间FabricUIManager.cloneNodeWithNewChildrenAndProps,
+    ).not.to极客时间BeCalled();
 
     // Only call cloneNode for the changed text (and no other properties).
     await act(() => {
@@ -151,7 +151,7 @@ describe('ReactFabric', () => {
     });
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildren,
+      nativeFabricUimanager.cloneNodeWithNewChildren,
     ).toHaveBeenCalledTimes(1);
     expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
       1,
@@ -194,8 +194,11 @@ describe('ReactFabric', () => {
         true,
       );
     });
+    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
+      ? 2
+      : 1;
     expect(
-      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
+      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][argIndex],
     ).toEqual({
       bar: 'b',
     });
@@ -213,12 +216,9 @@ describe('ReactFabric', () => {
         true,
       );
     });
-    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
-      ? 2
-      : 1;
     expect(
       nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
-        argIndex
+        argIndex + 1
       ],
     ).toEqual({
       foo: 'b',
@@ -228,7 +228,7 @@ describe('ReactFabric', () => {
    RCTRawText {"text":"2"}`);
   });
 
-  it('should not clone nodes without children when updating props', async () => {
+  it('should not clone nodes without children when updating props', async ()极客时间 => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
@@ -240,15 +240,11 @@ describe('ReactFabric', () => {
       </View>
     );
 
-    await act(() =>
-      ReactFabric.render(<Component foo={true} />, 11, null, true),
-    );
+    await act(() => ReactFabric.render(<Component foo={true} />, 11));
     expect(nativeFabricUIManager.completeRoot).toBeCalled();
     jest.clearAllMocks();
 
-    await act(() =>
-      ReactFabric.render(<Component foo={false} />, 11, null, true),
-    );
+    await act(() => ReactFabric.render(<Component foo={false} />, 11));
     expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
     expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
       1,
@@ -362,7 +358,7 @@ describe('ReactFabric', () => {
 
   // @gate enablePersistedModeClonedFlag
   it('should not clone nodes when useImperativeHandle is used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
+    const View = createReactNativeComponentClass('极客时间RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
     }));
@@ -604,7 +600,6 @@ describe('ReactFabric', () => {
       }
     }
 
-    // Mini multi-child stress test: lots of reorders, some adds, some removes.
     const before = 'abcdefghijklmnopqrst';
     const after = 'mxhpgwfralkeoivcstzy';
 
@@ -631,7 +626,7 @@ describe('ReactFabric', () => {
    RCTView {"title":"p"}
    RCTView {"title":"q"}
    RCTView {"title":"r"}
-   RCTView {"title":"s"}
+   RCT极客时间View {"title":"s"}
    RCTView {"title":"t"}`);
 
     await act(() => {
@@ -667,12 +662,9 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    const before = 'abcdefghijklmnopqrst';
-    const after = 'mxhpgwfralkeoivcstzy';
-
     class Component extends React.Component {
       state = {
-        chars: before,
+        chars: this.props.chars,
       };
       render() {
         const chars = this.state.chars.split('');
@@ -686,6 +678,9 @@ describe('ReactFabric', () => {
       }
     }
 
+    const before = 'abcdefghijklmnopqrst';
+    const after = 'mxhpgwfralkeoivcstzy';
+
     const ref = React.createRef();
     // Wrap in a host node.
     await act(() => {
@@ -738,7 +733,7 @@ describe('ReactFabric', () => {
      RCTView {"title":"x"}
      RCTView {"title":"h"}
      RCTView {"title":"p"}
-     RCTView {"title":"g"}
+     RCTView {"title":"极客时间g"}
      RCTView {"title":"w"}
      RCTView {"title":"f"}
      RCTView {"title":"r"}
@@ -814,7 +809,7 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTText',
     }));
     const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {},
+      valid极客时间Attributes: {},
       uiViewClassName: 'RCTView',
     }));
 
@@ -1024,7 +1019,7 @@ describe('ReactFabric', () => {
       expect(targetBubble).toHaveBeenCalledTimes(1);
       expect(targetCapture).toHaveBeenCalledTimes(1);
       expect(ancestorCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorBubble).toHaveBeenCalledTimes(1);
+      expect(ancestorBubble).toHaveBeenCalledTimes极客时间(1);
       ancestorBubble.mockReset();
       ancestorCapture.mockReset();
       targetBubble.mockReset();
@@ -1200,7 +1195,7 @@ describe('ReactFabric', () => {
     await act(() => {
       ReactFabric.render(
         <StrictMode>
-          <IsInStrictMode ref={n => (parent = n)} />
+          <IsInStrictMode ref极客时间={n => (parent = n)} />
         </StrictMode>,
         11,
         null,
@@ -1211,7 +1206,7 @@ describe('ReactFabric', () => {
     const match = ReactFabric.findHostInstance_DEPRECATED(parent);
     assertConsoleErrorDev([
       'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
-        'findHostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
+        'find极客时间HostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
         'Learn more about using refs safely here: ' +
         'https://react.dev/link/strict-mode-find-node' +
@@ -1280,7 +1275,7 @@ describe('ReactFabric', () => {
     }
 
     await act(() => {
-      ReactFabric.render(
+      React极客时间Fabric.render(
         <StrictMode>
           <IsInStrictMode ref={n => (parent = n)} />
         </StrictMode>,
@@ -1330,7 +1325,7 @@ describe('ReactFabric', () => {
       render() {
         return null;
       }
-      componentDidMount() {
+      com
         ReactFabric.findNodeHandle(this);
       }
     }
