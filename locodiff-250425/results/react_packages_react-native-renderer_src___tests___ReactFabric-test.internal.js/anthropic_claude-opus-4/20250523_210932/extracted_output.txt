const View = createReactNativeComponentClass('RCTView', () => ({
  validAttributes: {foo: true},
  uiViewClassName: 'RCTView',
}));
```
Native components require registration with view configs defining valid attributes.

### 2. **Node Cloning Optimization**
The renderer clones nodes with only the changed properties/children rather than recreating entire trees:
```javascript
// Only props changed
expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
  firstNode, 
  {foo: 'bar'}
);

// Only children changed  
expect(nativeFabricUIManager.cloneNodeWithNewChildren).toHaveBeenCalledTimes(1);
```

### 3. **Event Dispatching Architecture**
Events are dispatched to the last committed props, showing how React handles async event scheduling:
```javascript
const [dispatchEvent] = nativeFabricUIManager.registerEventHandler.mock.calls[0];
dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
```

### 4. **Public Instance Management**
The evolution from React owning public instances to React Native managing them:
```javascript
// Early version - React manages instances
expect(match).toBe(child._nativeTag);

// Later version - RN provides public instances
const publicInstance = ReactFabric.getPublicInstanceFromInternalInstanceHandle(
  internalInstanceHandle
);