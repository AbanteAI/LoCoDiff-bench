# Summary of ReactFabric-test.internal.js

This test file demonstrates the evolution of React Native's Fabric renderer testing from 2018 to 2025. Here are the key themes and learnings:

## Major Patterns:

### 1. **Component Creation Boilerplate**
```javascript
const View = createReactNativeComponentClass('RCTView', () => ({
  validAttributes: {foo: true},
  uiViewClassName: 'RCTView',
}));
```
Native components require registration with view configs defining valid attributes.

### 2. **Node Cloning Optimization**
The renderer clones nodes with only the changed properties/children rather than recreating entire trees:
```javascript
// Only props changed
expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
  firstNode, 
  {foo: 'bar'}
);

// Only children changed  
expect(nativeFabricUIManager.cloneNodeWithNewChildren).toHaveBeenCalledTimes(1);
```

### 3. **Event Dispatching Architecture**
Events are dispatched to the last committed props, showing how React handles async event scheduling:
```javascript
const [dispatchEvent] = nativeFabricUIManager.registerEventHandler.mock.calls[0];
dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
```

### 4. **Public Instance Management**
The evolution from React owning public instances to React Native managing them:
```javascript
// Early version - React manages instances
expect(match).toBe(child._nativeTag);

// Later version - RN provides public instances
const publicInstance = ReactFabric.getPublicInstanceFromInternalInstanceHandle(
  internalInstanceHandle
);
```

## Key Implementation Details:

### 1. **Performance Optimizations**
- Lazy creation of text node public instances
- Diffing props to only clone what changed
- Avoiding clones when only effects (not host updates) occur

### 2. **Cross-Renderer Architecture**
- Clean separation between React and React Native responsibilities
- Use of internal instance handles vs public instances
- Private interfaces for renderer communication

### 3. **Safety Checks**
- Preventing text outside `<Text>` components
- Warning on invalid ref operations in StrictMode
- Blocking `findNodeHandle` calls during render

### 4. **Feature Evolution**
- Addition of `skipBubbling` for event optimization
- Support for `sendAccessibilityEvent`
- Migration from legacy to concurrent rendering mode
- Removal of deprecated patterns (NativeComponent, NativeMethodsMixin)

## Testing Best Practices Shown:

1. **Comprehensive Coverage**: Tests cover creation, updates, events, refs, edge cases
2. **Migration Testing**: Tests show how to handle API deprecations gracefully
3. **Performance Verification**: Tests verify optimization behaviors (cloning, bailouts)
4. **Error Boundary Testing**: Proper error message assertions with component stacks

This file serves as both a test suite and historical documentation of React Native's Fabric renderer evolution, showing the careful balance between performance, safety, and API stability.