
index eff89da7..d8fb7593 100644
--- a/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected):tmp/tmp9d3b82me_expected.txt	
+++ b/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual):tmp/tmp9yjkivx7_actual.txt	
@@ -7,7 +7,6 @@
  * @emails react-core
  * @jest-environment node
  */
-
 'use strict';
 
 let React;
@@ -69,25 +68,17 @@ describe('ReactFabric', () => {
     await act(() => {
       ReactFabric.render(<View foo="foo" />, 11, null, true);
     });
-
     expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);
 
     await act(() => {
       ReactFabric.render(<View foo="bar" />, 11, null, true);
     });
-
     expect(nativeFabricUIManager.createNode).toHaveBeenCalledTimes(1);
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
-      1,
-    );
-    expect(nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][0]).toBe(
+    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(1);
+    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
       firstNode,
+      {foo: 'bar'},
     );
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
-    ).toEqual({
-      foo: 'bar',
-    });
   });
 
   it('should not call FabricUIManager.cloneNode after render for properties that have not changed', async () => {
@@ -196,12 +187,12 @@ describe('ReactFabric', () => {
     });
     expect(
       nativeFabricUIManager.cloneNodeWithNewProps.mock.calls[0][1],
-    ).toEqual({
-      bar: 'b',
-    });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
+    ).toEqual({bar: 'b'});
+    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
+      `11
  RCTText {"foo":"a","bar":"b"}
-   RCTRawText {"text":"1"}`);
+  RCTRawText {"text":"1"}`,
+    );
 
     await act(() => {
       ReactFabric.render(
@@ -213,195 +204,14 @@ describe('ReactFabric', () => {
         true,
       );
     });
-    const argIndex = gate(flags => flags.passChildrenWhenCloningPersistedNodes)
-      ? 2
-      : 1;
     expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][
-        argIndex
-      ],
-    ).toEqual({
-      foo: 'b',
-    });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
+      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps.mock.calls[0][1],
+    ).toEqual({foo: 'b'});
+    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
+      `11
  RCTText {"foo":"b","bar":"b"}
-   RCTRawText {"text":"2"}`);
-  });
-
-  it('should not clone nodes without children when updating props', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const Component = ({foo}) => (
-      <View>
-        <View foo={foo} />
-      </View>
-    );
-
-    await act(() =>
-      ReactFabric.render(<Component foo={true} />, 11, null, true),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(<Component foo={false} />, 11, null, true),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledTimes(
-      1,
-    );
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).toHaveBeenCalledWith(
-      expect.anything(),
-      {foo: false},
-    );
-
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildren,
-    ).toHaveBeenCalledTimes(1);
-    if (gate(flags => flags.passChildrenWhenCloningPersistedNodes)) {
-      expect(
-        nativeFabricUIManager.cloneNodeWithNewChildren,
-      ).toHaveBeenCalledWith(expect.anything(), [
-        expect.objectContaining({props: {foo: false}}),
-      ]);
-      expect(nativeFabricUIManager.appendChild).not.toBeCalled();
-    } else {
-      expect(
-        nativeFabricUIManager.cloneNodeWithNewChildren,
-      ).toHaveBeenCalledWith(expect.anything());
-      expect(nativeFabricUIManager.appendChild).toHaveBeenCalledTimes(1);
-    }
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when layout effects are used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithEffect = () => {
-      React.useLayoutEffect(() => {});
-      return null;
-    };
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithEffect />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithEffect />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when insertion effects are used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithRef = () => {
-      React.useInsertionEffect(() => {});
-      return null;
-    };
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithRef />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithRef />
-        </View>,
-        11,
-      ),
+  RCTRawText {"text":"2"}`,
     );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-  });
-
-  // @gate enablePersistedModeClonedFlag
-  it('should not clone nodes when useImperativeHandle is used', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const ComponentWithImperativeHandle = props => {
-      React.useImperativeHandle(props.ref, () => ({greet: () => 'hello'}));
-      return null;
-    };
-
-    const ref = React.createRef();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithImperativeHandle ref={ref} />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.completeRoot).toBeCalled();
-    expect(ref.current.greet()).toBe('hello');
-    jest.clearAllMocks();
-
-    await act(() =>
-      ReactFabric.render(
-        <View>
-          <ComponentWithImperativeHandle ref={ref} />
-        </View>,
-        11,
-      ),
-    );
-    expect(nativeFabricUIManager.cloneNode).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewChildren).not.toBeCalled();
-    expect(nativeFabricUIManager.cloneNodeWithNewProps).not.toBeCalled();
-    expect(
-      nativeFabricUIManager.cloneNodeWithNewChildrenAndProps,
-    ).not.toBeCalled();
-    expect(nativeFabricUIManager.completeRoot).not.toBeCalled();
-    expect(ref.current.greet()).toBe('hello');
   });
 
   it('should call dispatchCommand for native refs', async () => {
@@ -421,41 +231,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
-      );
-    });
-
-    expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
-    ReactFabric.dispatchCommand(viewRef, 'updateCommand', [10, 20]);
-    expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledTimes(1);
-    expect(nativeFabricUIManager.dispatchCommand).toHaveBeenCalledWith(
-      expect.any(Object),
-      'updateCommand',
-      [10, 20],
-    );
-  });
-
-  it('should warn and no-op if calling dispatchCommand on non native refs', async () => {
-    class BasicClass extends React.Component {
-      render() {
-        return <React.Fragment />;
-      }
-    }
-
-    nativeFabricUIManager.dispatchCommand.mockReset();
-
-    let viewRef;
-    await act(() => {
-      ReactFabric.render(
-        <BasicClass
-          ref={ref => {
-            viewRef = ref;
-          }}
-        />,
-        11,
-        null,
-        true,
       );
     });
 
@@ -464,7 +239,6 @@ describe('ReactFabric', () => {
     assertConsoleErrorDev([DISPATCH_COMMAND_REQUIRES_HOST_COMPONENT], {
       withoutStack: true,
     });
-
     expect(nativeFabricUIManager.dispatchCommand).not.toBeCalled();
   });
 
@@ -485,8 +259,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
@@ -519,8 +291,6 @@ describe('ReactFabric', () => {
           }}
         />,
         11,
-        null,
-        true,
       );
     });
 
@@ -529,36 +299,9 @@ describe('ReactFabric', () => {
     assertConsoleErrorDev([SEND_ACCESSIBILITY_EVENT_REQUIRES_HOST_COMPONENT], {
       withoutStack: true,
     });
-
     expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
   });
 
-  it('calls the callback with the correct instance and returns null', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    let a;
-    let b;
-    let c;
-    await act(() => {
-      c = ReactFabric.render(
-        <View foo="foo" ref={v => (a = v)} />,
-        11,
-        function () {
-          b = this;
-        },
-        true,
-      );
-    });
-
-    expect(a).toBeTruthy();
-    expect(a).toBe(b);
-    expect(c).toBe(null);
-  });
-
-  // @gate !disableLegacyMode
   it('returns the instance in legacy mode and calls the callback with it', () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
@@ -582,7 +325,7 @@ describe('ReactFabric', () => {
 
     expect(a).toBeTruthy();
     expect(a).toBe(b);
-    expect(a).toBe(c);
+    expect(c).toBe(a);
   });
 
   it('renders and reorders children', async () => {
@@ -604,13 +347,10 @@ describe('ReactFabric', () => {
       }
     }
 
-    // Mini multi-child stress test: lots of reorders, some adds, some removes.
     const before = 'abcdefghijklmnopqrst';
     const after = 'mxhpgwfralkeoivcstzy';
 
-    await act(() => {
-      ReactFabric.render(<Component chars={before} />, 11, null, true);
-    });
+    await act(() => ReactFabric.render(<Component chars={before} />, 11, null, true));
     expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
  RCTView null
    RCTView {"title":"a"}
@@ -634,9 +374,7 @@ describe('ReactFabric', () => {
    RCTView {"title":"s"}
    RCTView {"title":"t"}`);
 
-    await act(() => {
-      ReactFabric.render(<Component chars={after} />, 11, null, true);
-    });
+    await act(() => ReactFabric.render(<Component chars={after} />, 11, null, true));
     expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
  RCTView null
    RCTView {"title":"m"}
@@ -661,118 +399,6 @@ describe('ReactFabric', () => {
    RCTView {"title":"y"}`);
   });
 
-  it('recreates host parents even if only children changed', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {title: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    const before = 'abcdefghijklmnopqrst';
-    const after = 'mxhpgwfralkeoivcstzy';
-
-    class Component extends React.Component {
-      state = {
-        chars: before,
-      };
-      render() {
-        const chars = this.state.chars.split('');
-        return (
-          <View>
-            {chars.map(text => (
-              <View key={text} title={text} />
-            ))}
-          </View>
-        );
-      }
-    }
-
-    const ref = React.createRef();
-    // Wrap in a host node.
-    await act(() => {
-      ReactFabric.render(
-        <View>
-          <Component ref={ref} />
-        </View>,
-        11,
-        null,
-        true,
-      );
-    });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(
-      `11
- RCTView null
-   RCTView null
-     RCTView {"title":"a"}
-     RCTView {"title":"b"}
-     RCTView {"title":"c"}
-     RCTView {"title":"d"}
-     RCTView {"title":"e"}
-     RCTView {"title":"f"}
-     RCTView {"title":"g"}
-     RCTView {"title":"h"}
-     RCTView {"title":"i"}
-     RCTView {"title":"j"}
-     RCTView {"title":"k"}
-     RCTView {"title":"l"}
-     RCTView {"title":"m"}
-     RCTView {"title":"n"}
-     RCTView {"title":"o"}
-     RCTView {"title":"p"}
-     RCTView {"title":"q"}
-     RCTView {"title":"r"}
-     RCTView {"title":"s"}
-     RCTView {"title":"t"}`,
-    );
-
-    // Call setState() so that we skip over the top-level host node.
-    // It should still get recreated despite a bailout.
-    await act(() => {
-      ref.current.setState({
-        chars: after,
-      });
-    });
-    expect(nativeFabricUIManager.__dumpHierarchyForJestTestsOnly()).toBe(`11
- RCTView null
-   RCTView null
-     RCTView {"title":"m"}
-     RCTView {"title":"x"}
-     RCTView {"title":"h"}
-     RCTView {"title":"p"}
-     RCTView {"title":"g"}
-     RCTView {"title":"w"}
-     RCTView {"title":"f"}
-     RCTView {"title":"r"}
-     RCTView {"title":"a"}
-     RCTView {"title":"l"}
-     RCTView {"title":"k"}
-     RCTView {"title":"e"}
-     RCTView {"title":"o"}
-     RCTView {"title":"i"}
-     RCTView {"title":"v"}
-     RCTView {"title":"c"}
-     RCTView {"title":"s"}
-     RCTView {"title":"t"}
-     RCTView {"title":"z"}
-     RCTView {"title":"y"}`);
-  });
-
-  it('calls setState with no arguments', async () => {
-    let mockArgs;
-    class Component extends React.Component {
-      componentDidMount() {
-        this.setState({}, (...args) => (mockArgs = args));
-      }
-      render() {
-        return false;
-      }
-    }
-
-    await act(() => {
-      ReactFabric.render(<Component />, 11, null, true);
-    });
-    expect(mockArgs.length).toEqual(0);
-  });
-
   it('should call complete after inserting children', async () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
@@ -780,15 +406,13 @@ describe('ReactFabric', () => {
     }));
 
     const snapshots = [];
-    nativeFabricUIManager.completeRoot.mockImplementation(
-      function (rootTag, newChildSet) {
-        snapshots.push(
-          nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet),
-        );
-      },
-    );
+    nativeFabricUIManager.completeRoot.mockImplementation(function(rootTag, newChildSet) {
+      snapshots.push(
+        nativeFabricUIManager.__dumpChildSetForJestTestsOnly(newChildSet),
+      );
+    });
 
-    await act(() => {
+    await act(() =>
       ReactFabric.render(
         <View foo="a">
           <View foo="b" />
@@ -796,11 +420,11 @@ describe('ReactFabric', () => {
         22,
         null,
         true,
-      );
-    });
+      ),
+    );
     expect(snapshots).toEqual([
       `RCTView {"foo":"a"}
-  RCTView {"foo":"b"}`,
+ RCTView {"foo":"b"}`,
     ]);
   });
 
@@ -818,7 +442,7 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    await act(() => {
+    await act(() =>
       ReactFabric.render(
         <Text>
           <View />
@@ -826,10 +450,10 @@ describe('ReactFabric', () => {
         11,
         null,
         true,
-      );
-    });
+      ),
+    );
 
-    await act(() => {
+    await act(() =>
       ReactFabric.render(
         <Text>
           <Image />
@@ -837,11 +461,11 @@ describe('ReactFabric', () => {
         11,
         null,
         true,
-      );
-    });
+      ),
+    );
   });
 
-  it('should console error for text not inside of a <Text> ancestor', async () => {
+  it('should throw for text not inside of a <Text> ancestor', async () => {
     const ScrollView = createReactNativeComponentClass('RCTScrollView', () => ({
       validAttributes: {},
       uiViewClassName: 'RCTScrollView',
@@ -855,15 +479,12 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    await act(() => {
-      ReactFabric.render(<View>this should warn</View>, 11, null, true);
-    });
-    assertConsoleErrorDev([
-      'Text strings must be rendered within a <Text> component.\n' +
-        '    in RCTView (at **)',
-    ]);
+    await act(() =>
+      ReactFabric.render(<View>this should warn</View>, 11, null, true),
+    );
+    assertConsoleErrorDev(['Text strings must be rendered within a <Text> component.\n    in RCTView (at **)']);
 
-    await act(() => {
+    await act(() =>
       ReactFabric.render(
         <Text>
           <ScrollView>hi hello hi</ScrollView>
@@ -871,12 +492,9 @@ describe('ReactFabric', () => {
         11,
         null,
         true,
-      );
-    });
-    assertConsoleErrorDev([
-      'Text strings must be rendered within a <Text> component.\n' +
-        '    in RCTScrollView (at **)',
-    ]);
+      ),
+    );
+    assertConsoleErrorDev(['Text strings must be rendered within a <Text> component.\n    in RCTScrollView (at **)']);
   });
 
   it('should not throw for text inside of an indirect <Text> ancestor', async () => {
@@ -887,7 +505,7 @@ describe('ReactFabric', () => {
 
     const Indirection = () => 'Hi';
 
-    await act(() => {
+    await act(() =>
       ReactFabric.render(
         <Text>
           <Indirection />
@@ -895,8 +513,8 @@ describe('ReactFabric', () => {
         11,
         null,
         true,
-      );
-    });
+      ),
+    );
   });
 
   it('dispatches events to the last committed props', async () => {
@@ -918,9 +536,9 @@ describe('ReactFabric', () => {
     });
 
     expect(nativeFabricUIManager.createNode.mock.calls.length).toBe(1);
-    expect(nativeFabricUIManager.registerEventHandler.mock.calls.length).toBe(
-      1,
-    );
+    expect(
+      nativeFabricUIManager.registerEventHandler.mock.calls.length,
+    ).toBe(1);
 
     const [, , , , instanceHandle] =
       nativeFabricUIManager.createNode.mock.calls[0];
@@ -932,10 +550,7 @@ describe('ReactFabric', () => {
       changedTouches: [],
     };
 
-    expect(touchStart).not.toBeCalled();
-
     dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
-
     expect(touchStart).toBeCalled();
     expect(touchStart2).not.toBeCalled();
 
@@ -945,210 +560,17 @@ describe('ReactFabric', () => {
 
     // Intentionally dispatch to the same instanceHandle again.
     dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
-
-    // The current semantics dictate that we always dispatch to the last committed
-    // props even though the actual scheduling of the event could have happened earlier.
-    // This could change in the future.
     expect(touchStart2).toBeCalled();
   });
 
-  describe('skipBubbling', () => {
-    it('should skip bubbling to ancestor if specified', async () => {
-      const View = createReactNativeComponentClass('RCTView', () => ({
-        validAttributes: {},
-        uiViewClassName: 'RCTView',
-        bubblingEventTypes: {
-          topDefaultBubblingEvent: {
-            phasedRegistrationNames: {
-              captured: 'onDefaultBubblingEventCapture',
-              bubbled: 'onDefaultBubblingEvent',
-            },
-          },
-          topBubblingEvent: {
-            phasedRegistrationNames: {
-              captured: 'onBubblingEventCapture',
-              bubbled: 'onBubblingEvent',
-              skipBubbling: false,
-            },
-          },
-          topSkipBubblingEvent: {
-            phasedRegistrationNames: {
-              captured: 'onSkippedBubblingEventCapture',
-              bubbled: 'onSkippedBubblingEvent',
-              skipBubbling: true,
-            },
-          },
-        },
-      }));
-      const ancestorBubble = jest.fn();
-      const ancestorCapture = jest.fn();
-      const targetBubble = jest.fn();
-      const targetCapture = jest.fn();
-
-      const event = {};
-
-      await act(() => {
-        ReactFabric.render(
-          <View
-            onSkippedBubblingEventCapture={ancestorCapture}
-            onDefaultBubblingEventCapture={ancestorCapture}
-            onBubblingEventCapture={ancestorCapture}
-            onSkippedBubblingEvent={ancestorBubble}
-            onDefaultBubblingEvent={ancestorBubble}
-            onBubblingEvent={ancestorBubble}>
-            <View
-              onSkippedBubblingEventCapture={targetCapture}
-              onDefaultBubblingEventCapture={targetCapture}
-              onBubblingEventCapture={targetCapture}
-              onSkippedBubblingEvent={targetBubble}
-              onDefaultBubblingEvent={targetBubble}
-              onBubblingEvent={targetBubble}
-            />
-          </View>,
-          11,
-          null,
-          true,
-        );
-      });
-
-      expect(nativeFabricUIManager.createNode.mock.calls.length).toBe(2);
-      expect(nativeFabricUIManager.registerEventHandler.mock.calls.length).toBe(
-        1,
-      );
-      const [, , , , childInstance] =
-        nativeFabricUIManager.createNode.mock.calls[0];
-      const [dispatchEvent] =
-        nativeFabricUIManager.registerEventHandler.mock.calls[0];
-
-      dispatchEvent(childInstance, 'topDefaultBubblingEvent', event);
-      expect(targetBubble).toHaveBeenCalledTimes(1);
-      expect(targetCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorBubble).toHaveBeenCalledTimes(1);
-      ancestorBubble.mockReset();
-      ancestorCapture.mockReset();
-      targetBubble.mockReset();
-      targetCapture.mockReset();
-
-      dispatchEvent(childInstance, 'topBubblingEvent', event);
-      expect(targetBubble).toHaveBeenCalledTimes(1);
-      expect(targetCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorBubble).toHaveBeenCalledTimes(1);
-      ancestorBubble.mockReset();
-      ancestorCapture.mockReset();
-      targetBubble.mockReset();
-      targetCapture.mockReset();
-
-      dispatchEvent(childInstance, 'topSkipBubblingEvent', event);
-      expect(targetBubble).toHaveBeenCalledTimes(1);
-      expect(targetCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorCapture).toHaveBeenCalledTimes(1);
-      expect(ancestorBubble).not.toBeCalled();
-    });
-  });
-
-  it('dispatches event with target as instance', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {
-        id: true,
-      },
-      uiViewClassName: 'RCTView',
-      directEventTypes: {
-        topTouchStart: {
-          registrationName: 'onTouchStart',
-        },
-        topTouchEnd: {
-          registrationName: 'onTouchEnd',
-        },
-      },
-    }));
-
-    function getViewById(id) {
-      const [reactTag, , , , instanceHandle] =
-        nativeFabricUIManager.createNode.mock.calls.find(
-          args => args[3] && args[3].id === id,
-        );
-
-      return {reactTag, instanceHandle};
-    }
-
-    const ref1 = React.createRef();
-    const ref2 = React.createRef();
-
-    await act(() => {
-      ReactFabric.render(
-        <View id="parent">
-          <View
-            ref={ref1}
-            id="one"
-            onResponderStart={event => {
-              expect(ref1.current).not.toBeNull();
-              // Check for referential equality
-              expect(ref1.current).toBe(event.target);
-              expect(ref1.current).toBe(event.currentTarget);
-            }}
-            onStartShouldSetResponder={() => true}
-          />
-          <View
-            ref={ref2}
-            id="two"
-            onResponderStart={event => {
-              expect(ref2.current).not.toBeNull();
-              // Check for referential equality
-              expect(ref2.current).toBe(event.target);
-              expect(ref2.current).toBe(event.currentTarget);
-            }}
-            onStartShouldSetResponder={() => true}
-          />
-        </View>,
-        1,
-        null,
-        true,
-      );
-    });
-
-    const [dispatchEvent] =
-      nativeFabricUIManager.registerEventHandler.mock.calls[0];
-
-    dispatchEvent(getViewById('one').instanceHandle, 'topTouchStart', {
-      target: getViewById('one').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
-    });
-    dispatchEvent(getViewById('one').instanceHandle, 'topTouchEnd', {
-      target: getViewById('one').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
-    });
-
-    dispatchEvent(getViewById('two').instanceHandle, 'topTouchStart', {
-      target: getViewById('two').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
-    });
-
-    dispatchEvent(getViewById('two').instanceHandle, 'topTouchEnd', {
-      target: getViewById('two').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
-    });
-
-    expect.assertions(6);
-  });
-
   it('findHostInstance_DEPRECATED should warn if used to find a host component inside StrictMode', async () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
     }));
 
-    let parent = undefined;
-    let child = undefined;
+    let parent;
+    let child;
 
     class ContainsStrictModeChild extends React.Component {
       render() {
@@ -1161,12 +583,7 @@ describe('ReactFabric', () => {
     }
 
     await act(() => {
-      ReactFabric.render(
-        <ContainsStrictModeChild ref={n => (parent = n)} />,
-        11,
-        null,
-        true,
-      );
+      ReactFabric.render(<ContainsStrictModeChild ref={n => (parent = n)} />, 11, null, true);
     });
 
     const match = ReactFabric.findHostInstance_DEPRECATED(parent);
@@ -1174,9 +591,8 @@ describe('ReactFabric', () => {
       'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
         'findHostInstance_DEPRECATED was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
-        'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
-        '\n    in RCTView (at **)' +
+        'Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\n' +
+        '    in RCTView (at **)' +
         '\n    in ContainsStrictModeChild (at **)',
     ]);
     expect(match).toBe(child);
@@ -1188,8 +604,8 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    let parent = undefined;
-    let child = undefined;
+    let parent;
+    let child;
 
     class IsInStrictMode extends React.Component {
       render() {
@@ -1213,9 +629,8 @@ describe('ReactFabric', () => {
       'findHostInstance_DEPRECATED is deprecated in StrictMode. ' +
         'findHostInstance_DEPRECATED was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
-        'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
-        '\n    in RCTView (at **)' +
+        'Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\n' +
+        '    in RCTView (at **)' +
         '\n    in IsInStrictMode (at **)',
     ]);
     expect(match).toBe(child);
@@ -1227,8 +642,8 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    let parent = undefined;
-    let child = undefined;
+    let parent;
+    let child;
 
     class ContainsStrictModeChild extends React.Component {
       render() {
@@ -1241,12 +656,7 @@ describe('ReactFabric', () => {
     }
 
     await act(() => {
-      ReactFabric.render(
-        <ContainsStrictModeChild ref={n => (parent = n)} />,
-        11,
-        null,
-        true,
-      );
+      ReactFabric.render(<ContainsStrictModeChild ref={n => (parent = n)} />, 11, null, true);
     });
 
     const match = ReactFabric.findNodeHandle(parent);
@@ -1254,14 +664,11 @@ describe('ReactFabric', () => {
       'findNodeHandle is deprecated in StrictMode. ' +
         'findNodeHandle was passed an instance of ContainsStrictModeChild which renders StrictMode children. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
-        'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
-        '\n    in RCTView (at **)' +
+        'Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\n' +
+        '    in RCTView (at **)' +
         '\n    in ContainsStrictModeChild (at **)',
     ]);
-    expect(match).toBe(
-      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
-    );
+    expect(match).toBe(ReactNativePrivateInterface.getNativeTagFromPublicInstance(child));
   });
 
   it('findNodeHandle should warn if passed a component that is inside StrictMode', async () => {
@@ -1270,8 +677,8 @@ describe('ReactFabric', () => {
       uiViewClassName: 'RCTView',
     }));
 
-    let parent = undefined;
-    let child = undefined;
+    let parent;
+    let child;
 
     class IsInStrictMode extends React.Component {
       render() {
@@ -1295,14 +702,11 @@ describe('ReactFabric', () => {
       'findNodeHandle is deprecated in StrictMode. ' +
         'findNodeHandle was passed an instance of IsInStrictMode which is inside StrictMode. ' +
         'Instead, add a ref directly to the element you want to reference. ' +
-        'Learn more about using refs safely here: ' +
-        'https://react.dev/link/strict-mode-find-node' +
-        '\n    in RCTView (at **)' +
+        'Learn more about using refs safely here: https://react.dev/link/strict-mode-find-node\n' +
+        '    in RCTView (at **)' +
         '\n    in IsInStrictMode (at **)',
     ]);
-    expect(match).toBe(
-      ReactNativePrivateInterface.getNativeTagFromPublicInstance(child),
-    );
+    expect(match).toBe(ReactNativePrivateInterface.getNativeTagFromPublicInstance(child));
   });
 
   it('findNodeHandle errors when called from render', async () => {
@@ -1339,41 +743,7 @@ describe('ReactFabric', () => {
     });
   });
 
-  it('should no-op if calling sendAccessibilityEvent on unmounted refs', async () => {
-    const View = createReactNativeComponentClass('RCTView', () => ({
-      validAttributes: {foo: true},
-      uiViewClassName: 'RCTView',
-    }));
-
-    nativeFabricUIManager.sendAccessibilityEvent.mockReset();
-
-    let viewRef;
-    await act(() => {
-      ReactFabric.render(
-        <View
-          ref={ref => {
-            viewRef = ref;
-          }}
-        />,
-        11,
-        null,
-        true,
-      );
-    });
-    const dangerouslyRetainedViewRef = viewRef;
-    await act(() => {
-      ReactFabric.stopSurface(11);
-    });
-
-    ReactFabric.sendAccessibilityEvent(
-      dangerouslyRetainedViewRef,
-      'eventTypeName',
-    );
-
-    expect(nativeFabricUIManager.sendAccessibilityEvent).not.toBeCalled();
-  });
-
-  it('getNodeFromInternalInstanceHandle should return the correct shadow node', async () => {
+  it('getNodeFromPublicInstance should return the correct shadow node', async () => {
     const View = createReactNativeComponentClass('RCTView', () => ({
       validAttributes: {foo: true},
       uiViewClassName: 'RCTView',
@@ -1383,17 +753,11 @@ describe('ReactFabric', () => {
       ReactFabric.render(<View foo="test" />, 1, null, true);
     });
 
-    const internalInstanceHandle =
-      nativeFabricUIManager.createNode.mock.calls[0][4];
-    expect(internalInstanceHandle).toEqual(expect.any(Object));
-
     const expectedShadowNode =
       nativeFabricUIManager.createNode.mock.results[0].value;
     expect(expectedShadowNode).toEqual(expect.any(Object));
 
-    const node = ReactFabric.getNodeFromInternalInstanceHandle(
-      internalInstanceHandle,
-    );
+    const node = ReactNativePrivateInterface.getNodeFromPublicInstance(viewRef);
     expect(node).toBe(expectedShadowNode);
   });
 
@@ -1451,12 +815,10 @@ describe('ReactFabric', () => {
       ReactFabric.render(<RCTText>Text content</RCTText>, 1, null, true);
     });
 
-    // Access the internal instance handle used to create the text node.
     const internalInstanceHandle =
       nativeFabricUIManager.createNode.mock.calls[0][4];
     expect(internalInstanceHandle).toEqual(expect.any(Object));
 
-    // Text public instances should be created lazily.
     expect(
       ReactNativePrivateInterface.createPublicTextInstance,
     ).not.toHaveBeenCalled();
@@ -1466,7 +828,6 @@ describe('ReactFabric', () => {
         internalInstanceHandle,
       );
 
-    // We just requested the text public instance, so it should have been created at this point.
     expect(
       ReactNativePrivateInterface.createPublicTextInstance,
     ).toHaveBeenCalledTimes(1);
@@ -1487,7 +848,6 @@ describe('ReactFabric', () => {
       ReactFabric.getPublicInstanceFromInternalInstanceHandle(
         internalInstanceHandle,
       );
-
     expect(publicInstanceAfterUnmount).toBe(null);
   });
 });
\ No newline at end of file
