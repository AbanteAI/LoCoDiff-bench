
index eff89da7..f8becbdb 100644
--- a/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_expectedoutput.txt (expected):tmp/tmpg7t4fg7m_expected.txt	
+++ b/react_packages_react-native-renderer_src___tests___ReactFabric-test.internal.js_extracted.txt (actual):tmp/tmpa8amv14d_actual.txt	
@@ -934,7 +934,9 @@ describe('ReactFabric', () => {
 
     expect(touchStart).not.toBeCalled();
 
-    dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
+    await act(() => {
+      dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
+    });
 
     expect(touchStart).toBeCalled();
     expect(touchStart2).not.toBeCalled();
@@ -944,7 +946,9 @@ describe('ReactFabric', () => {
     });
 
     // Intentionally dispatch to the same instanceHandle again.
-    dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
+    await act(() => {
+      dispatchEvent(instanceHandle, 'topTouchStart', touchEvent);
+    });
 
     // The current semantics dictate that we always dispatch to the last committed
     // props even though the actual scheduling of the event could have happened earlier.
@@ -1020,7 +1024,9 @@ describe('ReactFabric', () => {
       const [dispatchEvent] =
         nativeFabricUIManager.registerEventHandler.mock.calls[0];
 
-      dispatchEvent(childInstance, 'topDefaultBubblingEvent', event);
+      await act(() => {
+        dispatchEvent(childInstance, 'topDefaultBubblingEvent', event);
+      });
       expect(targetBubble).toHaveBeenCalledTimes(1);
       expect(targetCapture).toHaveBeenCalledTimes(1);
       expect(ancestorCapture).toHaveBeenCalledTimes(1);
@@ -1030,7 +1036,9 @@ describe('ReactFabric', () => {
       targetBubble.mockReset();
       targetCapture.mockReset();
 
-      dispatchEvent(childInstance, 'topBubblingEvent', event);
+      await act(() => {
+        dispatchEvent(childInstance, 'topBubblingEvent', event);
+      });
       expect(targetBubble).toHaveBeenCalledTimes(1);
       expect(targetCapture).toHaveBeenCalledTimes(1);
       expect(ancestorCapture).toHaveBeenCalledTimes(1);
@@ -1040,7 +1048,9 @@ describe('ReactFabric', () => {
       targetBubble.mockReset();
       targetCapture.mockReset();
 
-      dispatchEvent(childInstance, 'topSkipBubblingEvent', event);
+      await act(() => {
+        dispatchEvent(childInstance, 'topSkipBubblingEvent', event);
+      });
       expect(targetBubble).toHaveBeenCalledTimes(1);
       expect(targetCapture).toHaveBeenCalledTimes(1);
       expect(ancestorCapture).toHaveBeenCalledTimes(1);
@@ -1111,31 +1121,39 @@ describe('ReactFabric', () => {
     const [dispatchEvent] =
       nativeFabricUIManager.registerEventHandler.mock.calls[0];
 
-    dispatchEvent(getViewById('one').instanceHandle, 'topTouchStart', {
-      target: getViewById('one').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
+    await act(() => {
+      dispatchEvent(getViewById('one').instanceHandle, 'topTouchStart', {
+        target: getViewById('one').reactTag,
+        identifier: 17,
+        touches: [],
+        changedTouches: [],
+      });
     });
-    dispatchEvent(getViewById('one').instanceHandle, 'topTouchEnd', {
-      target: getViewById('one').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
+    await act(() => {
+      dispatchEvent(getViewById('one').instanceHandle, 'topTouchEnd', {
+        target: getViewById('one').reactTag,
+        identifier: 17,
+        touches: [],
+        changedTouches: [],
+      });
     });
 
-    dispatchEvent(getViewById('two').instanceHandle, 'topTouchStart', {
-      target: getViewById('two').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
+    await act(() => {
+      dispatchEvent(getViewById('two').instanceHandle, 'topTouchStart', {
+        target: getViewById('two').reactTag,
+        identifier: 17,
+        touches: [],
+        changedTouches: [],
+      });
     });
 
-    dispatchEvent(getViewById('two').instanceHandle, 'topTouchEnd', {
-      target: getViewById('two').reactTag,
-      identifier: 17,
-      touches: [],
-      changedTouches: [],
+    await act(() => {
+      dispatchEvent(getViewById('two').instanceHandle, 'topTouchEnd', {
+        target: getViewById('two').reactTag,
+        identifier: 17,
+        touches: [],
+        changedTouches: [],
+      });
     });
 
     expect.assertions(6);
