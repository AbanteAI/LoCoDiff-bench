
index dbe4ed68..9a9fcee7 100644
--- a/aider_tests_basic_test_models.py_expectedoutput.txt (expected):tmp/tmpqamr95v8_expected.txt	
+++ b/aider_tests_basic_test_models.py_extracted.txt (actual):tmp/tmpcb8adnk1_actual.txt	
@@ -95,9 +95,7 @@ class TestModels(unittest.TestCase):
         )  # Should return True because there's a problem with the editor model
         mock_io.tool_warning.assert_called_with(ANY)  # Ensure a warning was issued
 
-        warning_messages = [
-            warning_call.args[0] for warning_call in mock_io.tool_warning.call_args_list
-        ]
+        warning_messages = [warning_call.args[0] for warning_call in mock_io.tool_warning.call_args_list]
         print("Warning messages:", warning_messages)  # Add this line
 
         self.assertGreaterEqual(mock_io.tool_warning.call_count, 1)  # Expect two warnings
@@ -160,51 +158,6 @@ class TestModels(unittest.TestCase):
         self.assertEqual(model.name, "github/aider_tests_basic_test_models.py_extracted.txt (actual):
-        # Create a model instance to test the parse_token_value method
-        model = Model("gpt-4")
-
-        # Test integer inputs
-        self.assertEqual(model.parse_token_value(8096), 8096)
-        self.assertEqual(model.parse_token_value(1000), 1000)
-
-        # Test string inputs
-        self.assertEqual(model.parse_token_value("8096"), 8096)
-
-        # Test k/K suffix (kilobytes)
-        self.assertEqual(model.parse_token_value("8k"), 8 * 1024)
-        self.assertEqual(model.parse_token_value("8K"), 8 * 1024)
-        self.assertEqual(model.parse_token_value("10.5k"), 10.5 * 1024)
-        self.assertEqual(model.parse_token_value("0.5K"), 0.5 * 1024)
-
-        # Test m/M suffix (megabytes)
-        self.assertEqual(model.parse_token_value("1m"), 1 * 1024 * 1024)
-        self.assertEqual(model.parse_token_value("1M"), 1 * 1024 * 1024)
-        self.assertEqual(model.parse_token_value("0.5M"), 0.5 * 1024 * 1024)
-
-        # Test with spaces
-        self.assertEqual(model.parse_token_value(" 8k "), 8 * 1024)
-
-        # Test conversion from other types
-        self.assertEqual(model.parse_token_value(8.0), 8)
-
-    def test_set_thinking_tokens(self):
-        # Test that set_thinking_tokens correctly sets the tokens with different formats
-        model = Model("gpt-4")
-
-        # Test with integer
-        model.set_thinking_tokens(8096)
-        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 8096)
-        self.assertFalse(model.use_temperature)
-
-        # Test with string
-        model.set_thinking_tokens("10k")
-        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 10 * 1024)
-
-        # Test with decimal value
-        model.set_thinking_tokens("0.5M")
-        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 0.5 * 1024 * 1024)
-
     @patch("aider.models.check_pip_install_extra")
     def test_check_for_dependencies_bedrock(self, mock_check_pip):
         """Test that check_for_dependencies calls check_pip_install_extra for Bedrock models"""
@@ -322,7 +275,7 @@ class TestModels(unittest.TestCase):
         self.assertTrue(model.use_repo_map)
         self.assertTrue(model.examples_as_sys_msg)
         self.assertFalse(model.use_temperature)
-        self.assertEqual(model.reasoning_tag, "think")
+        self.assertEqual(model.remove_reasoning, "think")
 
         # Test provider/deepseek-r1 case
         model = Model("someprovider/deepseek-r1")
@@ -330,7 +283,7 @@ class TestModels(unittest.TestCase):
         self.assertTrue(model.use_repo_map)
         self.assertTrue(model.examples_as_sys_msg)
         self.assertFalse(model.use_temperature)
-        self.assertEqual(model.reasoning_tag, "think")
+        self.assertEqual(model.remove_reasoning, "think")
 
         # Test provider/deepseek-v3 case
         model = Model("anotherprovider/deepseek-v3")
@@ -376,8 +329,8 @@ class TestModels(unittest.TestCase):
 
     def test_aider_extra_model_settings(self):
         import tempfile
-
         import yaml
+        import os
 
         # Create temporary YAML file with test settings
         test_settings = [
@@ -418,8 +371,6 @@ class TestModels(unittest.TestCase):
             self.assertEqual(model.extra_params["some_param"], "some value")
         finally:
             # Clean up the temporary file
-            import os
-
             try:
                 os.unlink(tmp)
             except OSError:
@@ -558,6 +509,51 @@ class TestModels(unittest.TestCase):
             timeout=600,
         )
 
+    def test_parse_token_value(self):
+        # Create a model instance to test the parse_token_value method
+        model = Model("gpt-4")
+
+        # Test integer inputs
+        self.assertEqual(model.parse_token_value(8096), 8096)
+        self.assertEqual(model.parse_token_value(1000), 1000)
+
+        # Test string inputs
+        self.assertEqual(model.parse_token_value("8096"), 8096)
+
+        # Test k/K suffix (kilobytes)
+        self.assertEqual(model.parse_token_value("8k"), 8 * 1024)
+        self.assertEqual(model.parse_token_value("8K"), 8 * 1024)
+        self.assertEqual(model.parse_token_value("10.5k"), 10.5 * 1024)
+        self.assertEqual(model.parse_token_value("0.5K"), 0.5 * 1024)
+
+        # Test m/M suffix (megabytes)
+        self.assertEqual(model.parse_token_value("1m"), 1 * 1024 * 1024)
+        self.assertEqual(model.parse_token_value("1M"), 1 * 1024 * 1024)
+        self.assertEqual(model.parse_token_value("0.5M"), 0.5 * 1024 * 1024)
+
+        # Test with spaces
+        self.assertEqual(model.parse_token_value(" 8k "), 8 * 1024)
+
+        # Test conversion from other types
+        self.assertEqual(model.parse_token_value(8.0), 8)
+
+    def test_set_thinking_tokens(self):
+        # Test that set_thinking_tokens correctly sets the tokens with different formats
+        model = Model("gpt-4")
+
+        # Test with integer
+        model.set_thinking_tokens(8096)
+        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 8096)
+        self.assertFalse(model.use_temperature)
+
+        # Test with string
+        model.set_thinking_tokens("10k")
+        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 10 * 1024)
+
+        # Test with decimal value
+        model.set_thinking_tokens("0.5M")
+        self.assertEqual(model.extra_params["thinking"]["budget_tokens"], 0.5 * 1024 * 1024)
+
 
 if __name__ == "__main__":
     unittest.main()
\ No newline at end of file
