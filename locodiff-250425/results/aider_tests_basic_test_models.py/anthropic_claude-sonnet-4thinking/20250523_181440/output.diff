
index dbe4ed68c..452a375d5 100644
--- a/aider_tests_basic_test_models.py_expectedoutput.txt (expected):tmp/tmpjp3i0z9t_expected.txt	
+++ b/aider_tests_basic_test_models.py_extracted.txt (actual):tmp/tmp7drd5pd2_actual.txt	
@@ -83,6 +83,21 @@ class TestModels(unittest.TestCase):
         self.assertIn("- API_KEY1: Not set", str(calls))
         self.assertIn("- API_KEY2: Not set", str(calls))
 
+    @patch("aider.models.check_for_dependencies")
+    def test_sanity_check_model_calls_check_dependencies(self, mock_check_deps):
+        """Test that sanity_check_model calls check_for_dependencies"""
+        mock_io = MagicMock()
+        model = MagicMock()
+        model.name = "test-model"
+        model.missing_keys = []
+        model.keys_in_environment = True
+        model.info = {"some": "info"}
+
+        sanity_check_model(mock_io, model)
+
+        # Verify check_for_dependencies was called with the model name
+        mock_check_deps.assert_called_once_with(mock_io, "test-model")
+
     def test_sanity_check_models_bogus_editor(self):
         mock_io = MagicMock()
         main_model = Model("gpt-4")
@@ -105,21 +120,6 @@ class TestModels(unittest.TestCase):
             any("bogus-model" in msg for msg in warning_messages)
         )  # Check that one of the warnings mentions the bogus model
 
-    @patch("aider.models.check_for_dependencies")
-    def test_sanity_check_model_calls_check_dependencies(self, mock_check_deps):
-        """Test that sanity_check_model calls check_for_dependencies"""
-        mock_io = MagicMock()
-        model = MagicMock()
-        model.name = "test-model"
-        model.missing_keys = []
-        model.keys_in_environment = True
-        model.info = {"some": "info"}
-
-        sanity_check_model(mock_io, model)
-
-        # Verify check_for_dependencies was called with the model name
-        mock_check_deps.assert_called_once_with(mock_io, "test-model")
-
     def test_model_aliases(self):
         # Test common aliases
         model = Model("4")
@@ -146,6 +146,15 @@ class TestModels(unittest.TestCase):
         model = Model("opus")
         self.assertEqual(model.name, "claude-3-opus-20240229")
 
+        # Test GitHub Copilot models
+        model = Model("github/o1-mini")
+        self.assertEqual(model.name, "github/o1-mini")
+        self.assertEqual(model.use_temperature, False)
+
+        model = Model("github/o1-preview")
+        self.assertEqual(model.name, "github/o1-preview")
+        self.assertEqual(model.use_temperature, False)
+
         # Test non-alias passes through unchanged
         model = Model("gpt-4")
         self.assertEqual(model.name, "gpt-4")
