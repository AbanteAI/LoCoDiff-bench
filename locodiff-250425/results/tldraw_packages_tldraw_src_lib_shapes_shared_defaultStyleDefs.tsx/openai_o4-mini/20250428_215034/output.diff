
index beaf6080..06923ff7 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_expectedoutput.txt (expected):tmp/tmp2k4b3_en_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_extracted.txt (actual):tmp/tmpni5pninz_actual.txt	
@@ -17,13 +17,11 @@ import {
 import { useCallback, useEffect, useRef, useState } from 'react'
 import { useDefaultColorTheme } from './useDefaultColorTheme'
 
-/** @public */
 export function getFillDefForExport(fill: TLDefaultFillStyle): SvgExportDef {
 	return {
 		key: `${DefaultFontStyle.id}:${fill}`,
 		async getElement() {
 			if (fill !== 'pattern') return null
-
 			return <HashPatternForExport />
 		},
 	}
@@ -62,6 +60,7 @@ export function getFillDefForCanvas(): TLShapeUtilCanvasSvgDef {
 		component: PatternFillDefForCanvas,
 	}
 }
+
 const TILE_PATTERN_SIZE = 8
 
 const generateImage = (dpr: number, currentZoom: number, darkMode: boolean) => {
@@ -119,6 +118,7 @@ const canvasBlob = (size: [number, number], fn: (ctx: CanvasRenderingContext2D)
 	fn(ctx)
 	return canvas.toDataURL()
 }
+
 interface PatternDef {
 	zoom: number
 	url: string
@@ -158,7 +158,7 @@ export function useGetHashPatternZoomName() {
 }
 
 function getPatternLodsToGenerate(maxZoom: number) {
-	const levels = []
+	const levels: number[] = []
 	const minLod = 0
 	const maxLod = getPatternLodForZoomLevel(maxZoom)
 	for (let i = minLod; i <= maxLod; i++) {
@@ -216,6 +216,7 @@ function usePattern() {
 			setBackgroundUrls(urls)
 			setIsReady(true)
 		})
+
 		return () => {
 			isCancelled = true
 			setIsReady(false)
@@ -269,13 +270,9 @@ function PatternFillDefForCanvas() {
 				})
 			}
 		}
-	}, [editor, isReady])
+	}, [isReady, editor])
 
-	return (
-		<g ref={containerRef} data-testid={isReady ? 'ready-pattern-fill-defs' : undefined}>
-			{defs}
-		</g>
-	)
+	return <g ref={containerRef} data-testid={isReady ? 'ready-pattern-fill-defs' : undefined}>{defs}</g>
 }
 
 function findHtmlLayerParent(element: Element): HTMLElement | null {
