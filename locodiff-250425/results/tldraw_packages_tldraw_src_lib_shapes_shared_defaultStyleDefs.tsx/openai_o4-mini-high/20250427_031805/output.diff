--- tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_extracted.txt (actual)@@ -23,7 +23,6 @@ 		key: `${DefaultFontStyle.id}:${fill}`,
 		async getElement() {
 			if (fill !== 'pattern') return null
-
 			return <HashPatternForExport />
 		},
 	}
@@ -50,18 +49,19 @@ 				height="8"
 				patternUnits="userSpaceOnUse"
 			>
-				<rect x="0" y="0" width="8" height="8" fill={theme.solid} mask={`url(#${maskId})`} />
+				<rect
+					x="0"
+					y="0"
+					width="8"
+					height="8"
+					fill={theme.solid}
+					mask={`url(#${maskId})`}
+				/>
 			</pattern>
 		</>
 	)
 }
 
-export function getFillDefForCanvas(): TLShapeUtilCanvasSvgDef {
-	return {
-		key: `${DefaultFontStyle.id}:pattern`,
-		component: PatternFillDefForCanvas,
-	}
-}
 const TILE_PATTERN_SIZE = 8
 
 const generateImage = (dpr: number, currentZoom: number, darkMode: boolean) => {
@@ -119,6 +119,7 @@ 	fn(ctx)
 	return canvas.toDataURL()
 }
+
 interface PatternDef {
 	zoom: number
 	url: string
@@ -142,6 +143,14 @@ 	return defaultPixels
 }
 
+function getDefaultPatterns(maxZoom: number): PatternDef[] {
+	const pixels = getDefaultPixels()
+	return getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
+		{ zoom, url: pixels.white, theme: 'light' },
+		{ zoom, url: pixels.black, theme: 'dark' },
+	])
+}
+
 function getPatternLodForZoomLevel(zoom: number) {
 	return Math.ceil(Math.log2(Math.max(1, zoom)))
 }
@@ -158,7 +167,7 @@ }
 
 function getPatternLodsToGenerate(maxZoom: number) {
-	const levels = []
+	const levels: number[] = []
 	const minLod = 0
 	const maxLod = getPatternLodForZoomLevel(maxZoom)
 	for (let i = minLod; i <= maxLod; i++) {
@@ -167,22 +176,10 @@ 	return levels
 }
 
-function getDefaultPatterns(maxZoom: number): PatternDef[] {
-	const defaultPixels = getDefaultPixels()
-	return getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
-		{ zoom, url: defaultPixels.white, theme: 'light' },
-		{ zoom, url: defaultPixels.black, theme: 'dark' },
-	])
-}
-
 function usePattern() {
 	const editor = useEditor()
-	const dpr = useValue('devicePixelRatio', () => editor.getInstanceState().devicePixelRatio, [
-		editor,
-	])
-	const maxZoom = useValue('maxZoom', () => Math.ceil(last(editor.getCameraOptions().zoomSteps)!), [
-		editor,
-	])
+	const dpr = useValue('devicePixelRatio', () => editor.getInstanceState().devicePixelRatio, [editor])
+	const maxZoom = useValue('maxZoom', () => Math.ceil(last(editor.getCameraOptions().zoomSteps)!), [editor])
 	const [isReady, setIsReady] = useState(false)
 	const [backgroundUrls, setBackgroundUrls] = useState<PatternDef[]>(() =>
 		getDefaultPatterns(maxZoom)
@@ -196,15 +193,15 @@ 		}
 
 		const promise = Promise.all(
-			getPatternLodsToGenerate(maxZoom).flatMap<Promise<PatternDef>>((zoom) => [
+			getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
 				generateImage(dpr, zoom, false).then((blob) => ({
 					zoom,
-					theme: 'light',
+					theme: 'light' as const,
 					url: URL.createObjectURL(blob),
 				})),
 				generateImage(dpr, zoom, true).then((blob) => ({
 					zoom,
-					theme: 'dark',
+					theme: 'dark' as const,
 					url: URL.createObjectURL(blob),
 				})),
 			])
@@ -216,6 +213,7 @@ 			setBackgroundUrls(urls)
 			setIsReady(true)
 		})
+
 		return () => {
 			isCancelled = true
 			setIsReady(false)
@@ -258,11 +256,8 @@ 		if (isReady && tlenv.isSafari) {
 			const htmlLayer = findHtmlLayerParent(containerRef.current!)
 			if (htmlLayer) {
-				// Wait for `patternContext` to be picked up
 				editor.timers.requestAnimationFrame(() => {
 					htmlLayer.style.display = 'none'
-
-					// Wait for 'display = "none"' to take effect
 					editor.timers.requestAnimationFrame(() => {
 						htmlLayer.style.display = ''
 					})
