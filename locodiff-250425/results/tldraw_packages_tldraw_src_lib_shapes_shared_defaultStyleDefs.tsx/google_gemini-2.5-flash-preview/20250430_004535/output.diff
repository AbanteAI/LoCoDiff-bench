--- tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_shared_defaultStyleDefs.tsx_extracted.txt (actual)@@ -1,11 +1,8 @@ import {
 	DefaultColorThemePalette,
 	DefaultFontStyle,
-	SvgExportDef,
-	TLDefaultColorTheme,
-	TLDefaultFillStyle,
-	TLShapeUtilCanvasSvgDef,
 	debugFlags,
+	fetch,
 	last,
 	suffixSafeId,
 	tlenv,
@@ -16,6 +13,7 @@ } from '@tldraw/editor'
 import { useCallback, useEffect, useRef, useState } from 'react'
 import { useDefaultColorTheme } from './useDefaultColorTheme'
+
 
 /** @public */
 export function getFillDefForExport(fill: TLDefaultFillStyle): SvgExportDef {
@@ -56,13 +54,17 @@ 	)
 }
 
+
 export function getFillDefForCanvas(): TLShapeUtilCanvasSvgDef {
 	return {
 		key: `${DefaultFontStyle.id}:pattern`,
 		component: PatternFillDefForCanvas,
 	}
 }
+
+
 const TILE_PATTERN_SIZE = 8
+
 
 const generateImage = (dpr: number, currentZoom: number, darkMode: boolean) => {
 	return new Promise<Blob>((resolve, reject) => {
@@ -110,6 +112,7 @@ 	})
 }
 
+
 const canvasBlob = (size: [number, number], fn: (ctx: CanvasRenderingContext2D) => void) => {
 	const canvas = document.createElement('canvas')
 	canvas.width = size[0]
@@ -124,6 +127,7 @@ 	url: string
 	theme: 'light' | 'dark'
 }
+
 
 let defaultPixels: { white: string; black: string } | null = null
 function getDefaultPixels() {
@@ -142,9 +146,11 @@ 	return defaultPixels
 }
 
+
 function getPatternLodForZoomLevel(zoom: number) {
 	return Math.ceil(Math.log2(Math.max(1, zoom)))
 }
+
 
 export function useGetHashPatternZoomName() {
 	const id = useSharedSafeId('hash_pattern')
@@ -157,6 +163,7 @@ 	)
 }
 
+
 function getPatternLodsToGenerate(maxZoom: number) {
 	const levels = []
 	const minLod = 0
@@ -167,6 +174,7 @@ 	return levels
 }
 
+
 function getDefaultPatterns(maxZoom: number): PatternDef[] {
 	const defaultPixels = getDefaultPixels()
 	return getPatternLodsToGenerate(maxZoom).flatMap((zoom) => [
@@ -174,6 +182,7 @@ 		{ zoom, url: defaultPixels.black, theme: 'dark' },
 	])
 }
+
 
 function usePattern() {
 	const editor = useEditor()
@@ -225,7 +234,7 @@ 				}
 			})
 		}
-	}, [dpr, maxZoom])
+	}, [dpr, maxZoom, getHashPatternZoomName])
 
 	const defs = (
 		<>
@@ -249,6 +258,7 @@ 	return { defs, isReady }
 }
 
+
 function PatternFillDefForCanvas() {
 	const editor = useEditor()
 	const containerRef = useRef<SVGGElement>(null)
@@ -278,6 +288,7 @@ 	)
 }
 
+
 function findHtmlLayerParent(element: Element): HTMLElement | null {
 	if (element.classList.contains('tl-html-layer')) return element as HTMLElement
 	if (element.parentElement) return findHtmlLayerParent(element.parentElement)
