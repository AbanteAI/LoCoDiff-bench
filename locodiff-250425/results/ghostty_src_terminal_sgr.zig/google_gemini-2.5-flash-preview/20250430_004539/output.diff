
index d82d3f38..f00b5f8d 100644
--- a/ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected):tmp/tmph018xqkm_expected.txt	
+++ b/ghostty_src_terminal_sgr.zig_extracted.txt (actual):tmp/tmp7rg71zgq_actual.txt	
@@ -129,12 +129,10 @@ pub const Parser = struct {
 
             else => {
                 // Consume all the colon separated values.
-                const start = self.idx;
-                while (self.params_sep.isSet(self.idx)) self.idx += 1;
-                self.idx += 1;
+                self.consumeUnknownColon();
                 return .{ .unknown = .{
                     .full = self.params,
-                    .partial = slice[0 .. self.idx - start + 1],
+                    .partial = slice,
                 } };
             },
         };
@@ -212,7 +210,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -237,7 +234,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -261,7 +257,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -349,14 +344,14 @@ pub const Parser = struct {
     /// separator.
     fn isColon(self: *Parser) bool {
         // The `- 1` here is because the last value has no separator.
-        if (self.idx >= self.params.len - 1) return false;
+        if (self.idx >= self.params.len) return false;
         return self.params_sep.isSet(self.idx);
     }
 
     fn countColon(self: *Parser) usize {
         var count: usize = 0;
         var idx = self.idx;
-        while (idx < self.params.len - 1 and self.params_sep.isSet(idx)) : (idx += 1) {
+        while (idx < self.params.len and self.params_sep.isSet(idx)) : (idx += 1) {
             count += 1;
         }
         return count;
@@ -366,7 +361,7 @@ pub const Parser = struct {
     /// returns an unknown attribute.
     fn consumeUnknownColon(self: *Parser) void {
         const count = self.countColon();
-        self.idx += count + 1;
+        self.idx += count;
     }
 };
 
@@ -383,6 +378,8 @@ fn testParseColon(params: []const u16) Attribute {
 test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
+    try testing.expect(testParse(&[_]u16{ 0, 1 }).unknown.full.len == 2);
+    try testing.expect(testParse(&[_]u16{ 0, 1 }).unknown.partial.len == 2);
 
     {
         const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
@@ -392,7 +389,7 @@ test "sgr: Parser" {
         try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
     }
 
-    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }).unknown.full.len == 4);
 
     {
         const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
@@ -402,7 +399,7 @@ test "sgr: Parser" {
         try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
     }
 
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }).unknown.full.len == 4);
 }
 
 test "sgr: Parser multiple" {
@@ -422,7 +419,12 @@ test "sgr: unsupported with colon" {
             break :sep list;
         },
     };
-    try testing.expect(p.next().? == .unknown);
+    {
+        const v = p.next().?;
+        try testing.expect(v == .unknown);
+        try testing.expectEqual(@as([]const u16, &[_]u16{ 0, 4 }), v.unknown.partial.slice);
+    }
+
     try testing.expect(p.next().? == .bold);
     try testing.expect(p.next() == null);
 }
@@ -437,7 +439,11 @@ test "sgr: unsupported with multiple colon" {
             break :sep list;
         },
     };
-    try testing.expect(p.next().? == .unknown);
+    {
+        const v = p.next().?;
+        try testing.expect(v == .unknown);
+        try testing.expectEqual(@as([]const u16, &[_]u16{ 0, 4, 2 }), v.unknown.partial.slice);
+    }
     try testing.expect(p.next().? == .bold);
     try testing.expect(p.next() == null);
 }
@@ -541,7 +547,11 @@ test "sgr: underline style with too many colons" {
         },
     };
 
-    try testing.expect(p.next().? == .unknown);
+    {
+        const v = p.next().?;
+        try testing.expect(v == .unknown);
+        try testing.expectEqual(@as([]const u16, &[_]u16{ 4, 2, 3 }), v.unknown.partial.slice);
+    }
     try testing.expect(p.next().? == .bold);
     try testing.expect(p.next() == null);
 }
@@ -775,7 +785,11 @@ test "sgr: direct fg colon with too many colons" {
         },
     };
 
-    try testing.expect(p.next().? == .unknown);
+    {
+        const v = p.next().?;
+        try testing.expect(v == .unknown);
+        try testing.expectEqual(@as([]const u16, &[_]u16{ 38, 2, 0, 1, 2, 3, 4 }), v.unknown.partial.slice);
+    }
     try testing.expect(p.next().? == .bold);
     try testing.expect(p.next() == null);
 }
