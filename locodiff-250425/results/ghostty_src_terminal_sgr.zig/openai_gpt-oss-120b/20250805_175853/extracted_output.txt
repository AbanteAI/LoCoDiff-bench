//! SGR (Select Graphic Rendition) attrinvbute parsing and types.

const std = @import("std");
const assert = std.debug.assert;
const testing = std.testing;
const color = @import("color.zig");
const SepList = @import("Parser.zig").Action.CSI.SepList;

/// Attribute type for SGR
pub const Attribute = union(enum) {
    pub const Tag = std.meta.FieldEnum(Attribute);

    /// Unset all attributes
    unset,

    /// Unknown attribute, the raw CSI command parameters are here.
    unknown: struct {
        full: []const u16,
        partial: []const u16,
    },

    /// Bold the text.
    bold,
    reset_bold,

    /// Italic text.
    italic,
    reset_italic,

    /// Faint/dim text.
    faint,

    /// Underline the text
    underline: Underline,
    reset_underline,
    underline_color: color.RGB,
    @"256_underline_color": u8,
    reset_underline_color,

    // Overline the text
    overline,
    reset_overline,

    /// Blink the text
    blink,
    reset_blink,

    /// Invert fg/bg colors.
    inverse,
    reset_inverse,

    /// Invisible
    invisible,
    reset_invisible,

    /// Strikethrough the text.
    strikethrough,
    reset_strikethrough,

    /// Set foreground color as RGB values.
    direct_color_fg: color.RGB,

    /// Set background color as RGB values.
    direct_color_bg: color.RGB,

    /// Set the background/foreground as a named color attribute.
    @"8_bg": color.Name,
    @"8_fg": color.Name,

    /// Reset the fg/bg values.
    reset_fg,
    reset_bg,

    /// Set the background/foreground as a named bright color attribute.
    @"8_bright_bg": color.Name,
    @"8_bright_fg": color.Name,

    /// Set foreground as 256-color palette.
    @"256_fg": u8,

    /// Set background as 256-color palette.
    @"256_bg": u8,

    pub const Underline = enum(u3) {
        none = 0,
        single = 1,
        double = 2,
        curly = 3,
        dotted = 4,
        dashed = 5,
    };
};

/// Parser parses the attributes from a list of SGR parameters.
pub const Parser = struct {
    params: []const u16,
    params_sep: SepList = SepList.initEmpty(),
    idx: usize = 0,

    /// Next returns the next attribute or null if there are no more attributes.
    pub fn next(self: *Parser) ?Attribute {
        if (self.idx >= self.params.len) {
            // If we're at index zero it means we must have an empty
            // list and an empty list implicitly means unset.
            if (self.idx == 0) {
                // Add one to ensure we don't loop on unset
                self.idx += 1;
                return .unset;
            }

            return null;
        }

        const slice = self.params[self.idx..self.params.len];
        const colon = self.params_sep.isSet(self.idx);
        self.idx += 1;

        // Our last one will have an idx be the last value.
        if (slice.len == 0) return null;

        // If we have a colon separator then we need to ensure
        // we are parsing a value that allows it.
        if (colon) switch (slice[0]) {
            4, 38, 48, 58 => {},
            else => {
                // Consume all the colon separated values.
                const start = self.idx;
                while (self.params_sep.isSet(self.idx)) self.idx += 1;
                self.idx += 1;
                return .{ .unknown = .{
                    .full = self.params,
                    .partial = slice[0 .. self.idx - start + 1],
                } };
            },
        };

        // The parser logic here is duplicated from older versions.
        // TODO: condense this and add tests for edge cases.
        // See https://github.com/mitchellh/ghostty/pull/6100.
        //
        // NOTE: If you change a logic path here, then you must also
        // modify the `parseDirectColor` method, which handles both
        // the `38`/`48`/`58` direct-color cases.
        switch (slice[0]) {
            0 => return .unset,
            1 => return .bold,
            2 => return .faint,
            3 => return .italic,
            // Underline.
            4 => underline: {
                if (colon) {
                    assert(slice.len >= 2);
                    if (self.isColon()) {
                        // The colon-separated values case has unexpected
                        // values; return unknown and ignore.
                        self.consumeUnknownColon();
                        break :underline;
                    }

                    self.idx += 1;
                    switch (slice[1]) {
                        0 => return .reset_underline,
                        1 => return .{ .underline = .single },
                        2 => return .{ .underline = .double },
                        3 => return .{ .underline = .curly },
                        4 => return .{ .underline = .dotted },
                        5 => return .{ .underline = .dashed },
                        // render all unknown underline styles as
                        // a single underline.
                        else => return .{ .underline = .single },
                    }
                }

                // default / no-colon case.
                return .{ .underline = .single };
            },

            // Blink
            5 => return .blink,
            6 => return .blink,
            7 => return .inverse,
            8 => return .invisible,
            9 => return .strikethrough,
            21 => return .{ .underline = .double },
            22 => return .reset_bold,
            23 => return .reset_italic,
            24 => return .reset_underline,
            25 => return .reset_blink,
            27 => return .reset_inverse,
            28 => return .reset_invisible,
            29 => return .reset_strikethrough,

            // 8-color foreground.
            30...37 => return .{
                .@"8_fg" = @enumFromInt(slice[0] - 30),
            },

            // 8/24-bit Direct color or 256 palette.
            38 => if (slice.len >= 2) switch (slice[1]) {
                // Direct color (24-bit) case.
                2 => if (self.parseDirectColor(.direct_color_fg, slice, colon)) |v| return v,
                //  256 color / color index case.
                5 => if (slice.len >= 3) {
                    // Consumes the `5` and a color index.
                    self.idx += 2;
                    return .{
                        .@"256_fg" = @truncate(slice[2]),
                    };
                } else {},
                else => {},
            },

            // Reset fg to default.
            39 => return .reset_fg,

            // 8-color background.
            40...47 => return .{
                .@"8_bg" = @enumFromInt(slice[0] - 40),
            },

            // 8/24 direct color or 256 palette background.
            48 => if (slice.len >= 2) switch (slice[1]) {
                // Direct color (24-bit) case.
                2 => if (self.parseDirectColor(.direct_color_bg, slice, colon)) |v| return v,
                // 256 color / palette.
                5 => if (slice.len >= 3) {
                    // Consumes the `5` and a color index.
                    self.idx += 2;
                    return .{
                        .@"256_bg" = @truncate(slice[2]),
                    };
                } else {},
                else => {},
            },

            // Reset background.
            49 => return .reset_bg,

            // Overline
            53 => return .overline,
            55 => return .reset_overline,

            // Underline color.
            58 => if (slice.len >= 2) switch (slice[1]) {
                // Direct color (24-bit) case.
                2 => if (self.parseDirectColor(.underline_color, slice, colon)) |v| return v,
                // 256 color / palette.
                5 => if (slice.len >= 3) {
                    self.idx += 2;
                    return .{
                        .@"256_underline_color" = @truncate(slice[2]),
                    };
                } else {},
                else => {},
            },

            // Reset underline color.
            59 => return .reset_underline_color,

            // Bright 8-color foreground.
            90...97 => return .{
                // 82 instead of 90 to offset to "bright" colors.
                .@"8_bright_fg" = @enumFromInt(slice[0] - 82),
            },

            // Bright 8-background.
            100...107 => return .{
                .@"8_bright_bg" = @enumFromInt(slice[0] - 92),
            },

            else => {},
        }

        // Unhandled unknown; return all parameters up to the current, plus partial.
        return .{ .unknown = .{ .full = self.params, .partial = slice } };
    }

    /// Parse a "direct color" attribute (38, 48, 58) that is a
    /// `2` subparameter with an optional color-space identifier.
    fn parseDirectColor(
        self: *Parser,
        comptime tag: Tag,
        slice: []const u16,
        colon: bool,
    ) ?Attribute {
        // Direct-color must have at least 5 values.
        if (slice.len < 5) return null;

        // This function is only called for subparameter 2.
        assert(slice[1] == 2);

        // No-colon: only the 3 color values. Simple.
        if (!colon) {
            self.idx += 4;
            return @unionInit(Attribute, @tagName(tag), .{
                .r = @truncate(slice[2]),
                .g = @truncate(slice[3]),
                .b = @truncate(slice[4]),
            });
        }

        // Colon separator: potentially a colorspace identifier.
        const count = self.countColon();

        // When `count` is 1 we have the standard 3 color components.
        // If `count` is 2 we have a colorspace identifier followed
        // by the 3 component values.
        switch (count) {
            1 => {
                // No colorspace identifier; same layout as the sem
                // semicolon case. 3 components start at index 2.
                self.idx += 4;
                return @unionInit(Attribute, @tagName(tag), .{
                    .r = @truncate(slice[2]),
                    .g = @truncate(slice[3]),
                    .b = @truncate(slice[4]),
                });
            },
            2 => {
                // The first color in the set is a color space ID.
                // The actual color values start at index
                // 3.
                self.idx += 5;
                return @unionInit(Attribute, @tagName(tag), .{
                    .r = @truncate(slice[3]),
                    .g = @truncate(slice[4]),
                    .b = @truncate(slice[5]),
                });
            },
            else => {
                self.consumeUnknownColon();
                return null;
            },
        }
    }

    /// Is the current position a colon separator?
    /// This returns false for the last value.
    fn isColon(self: *Parser) bool {
        if (self.idx >= self.params.len - 1) return false;
        return self.params_sep.isSet(self.idx);
    }

    /// Count the number of colon separators from the
    /// current position.
    fn countColon(self: *Parser) usize {
        var count: usize = 0;
        var idx = self.idx;
        while (idx < self.params.len - 1 and self.params_sep.isSet(idx)) : (idx += 1) {
            count += 1;
        }
        return count;
    }

    /// Consume all remaining colon-separated values.
    fn consumeUnknownColon(self: *Parser) void {
        const count = self.countColon();
        self.idx += count + 1;
    }
};

fn testParse(params: []const u16) Attribute {
    var p: Parser = .{ .params = params };
    return p.next().?;
}

fn testParseColon(params: []const u16) Attribute {
    var p: Parser = .{ .params = params, .params_sep = SepList.initFull() };
    return p.next().?;
}

// -----------------------------------------------------------------------------
// Tests

test "sgr: Parser" {
    try testing.expect(testParse(&[_]u16{}) == .unset);
    try testing.expect(testParse(&[_]u16{0}) == .unset);
    try testing.expect(testParse(&[_]u16{ 0, 1 }) == .unknown);
    {
        const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 44), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
    }
    {
        const v = testParse(&[_]u16{ 38, 2, 22, 40, 44, 52 });
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 44), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
    }
    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
    try testing.expect(testParse(&[_]u16{ 38, 2, 22, 22, 40, 44, 52 }) == .unknown);
    {
        const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
        try testing.expect(v == .direct_color_bg);
        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
    }
    {
        const v = testParse(&[_]u16{ 48, 2, 22, 40, 44, 52 });
        try testing.expect(v == .direct_color_bg);
        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
    }
    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
    try testing.expect(testParse(&[_]u16{
        48, 2, 22, 22, 40, 44, 52,
    }) == .unknown);
    try testing.expect(testParse(&[_]u16{ 0, 1 }) == .unset);
}

test "sgr: Parser multiple" {
    var p: Parser = .{ .params = &[_]u16{ 0, 38, 2, 40, 44, 52 } };
    try testing.expect(p.next().? == .unset);
    try testing.expect(p.next().? == .direct_color_fg);
    try testing.expect(p.next() == null);
    try testing.expect(p.next() == null);
}

test "sgr: bold" {
    {
        const v = testParse(&[_]u16{1});
        try testing.expect(v == .bold);
    }
    {
        const v = testParse(&[_]u16{22});
        try testing.expect(v == .reset_bold);
    }
}
test "sgr: italic" {
    {
        const v = testParse(&[_]u16{3});
        try testing.expect(v == .italic);
    }
    {
        const v = testParse(&[_]u16{23});
        try testing.expect(v == .reset_italic);
    }
}
test "sgr: underline" {
    {
        const v = testParse(&[_]u16{4});
        try testing.expect(v == .underline);
        try testing.expect(v.underline == .single);
    }
    {
        const v = testParse(&[_]u16{24});
        try testing.expect(v == .reset_underline);
    }
}
test "sgr: underline styles" {
    {
        const v = testParseColon(&[_]u16{ 4, 2, 1 });
        try testing.expect(v == .underline);
        try testing.expect(v.underline == .single);
    }
    {
        const v = testParse(&[_]u16{ 4, 2, 0 });
        try testing.expect(v == .reset_underline);
    }
    {
        const v = testParse(&[_]u16{ 4, 2, 3 });
        try testing.expect(v == .underline);
        try testing.expect(v.underline == .curly);
    }
    {
        const v = testParseColon(&[_]u16{ 4, 2, 4 });
        try testing.expect(v == .underline);
        try testing.expect(v.underline == .dotted);
    }
    {
        const v = testParse(&[_]u16{ 4, 2, 5 });
        try testing.expect(v == .underline);
        try testing.expect(v.underline == .dashed);
    }
}
test "sgr: underline style with more" {
    var p: Parser = .{
        .params = &[_]u16{ 4, 2, 1 },
        .params_sep = sep: {
            var list = SepList.initEmpty();
            list.set(0);
            break :sep list;
        },
    };
    try testing.expect(p.next().? == .underline);
    try testing.expect(p.next().? == .bold);
    try testing.expect(p.next() == null);
}
test "sgr: underline style with too many colons" {
    var p: Parser = .{
        .params = &[_]u16{ 4, 2, 3, 1 },
        .params_sep = sep: {
            var list = SepList.initEmpty();
            list.set(0);
            list.set(1);
            break :sep list;
        },
    };
    try testing.expect(p.next().? == .unknown);
    try testing.expect(p.next().? == .bold);
    try testing.expect(p.next() == null);
}
test "sgr: blink" {
    {
        const v = testParse(&[_]u16{5});
        try testing.expect(v == .blink);
    }
    {
        const v = testParse(&[_]u16{6});
        try testing.expect(v == .blink);
    }
    {
        const v = testParse(&[_]u16{25});
        try testing.expect(v == .reset_blink);
    }
}
test "sgr: inverse" {
    {
        const v = testParse(&[_]u16{7});
        try testing.expect(v == .inverse);
    }
    {
        const v = testParse(&[_]u16{27});
        try testing.expect(v == .reset_inverse);
    }
}
test "sgr: 8 color" {
    var p: Parser = .{ .params = &[_]u16{ 31, 43, 90, 103 } };
    {
        const v = p.next().?;
        try testing.expect(v == .@"8_fg");
        try testing.expect(v.@"8_fg" == .red);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .@"8_bg");
        try testing.expect(v.@"8_bg" == .yellow);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .@"8_bright_fg");
        try testing.expect(v.@"8_bright_fg" == .bright_black);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .@"8_bright_bg");
        try testing.expect(v.@"8_bright_bg" == .bright_yellow);
    }
    try testing.expect(p.next() == null);
}
test "sgr: 256 color" {
    var p: Parser = .{ .params = &[_]u16{ 38, 5, 161, 48, 5, 236 } };
    try testing.expect(p.next().? == .@"256_fg");
    try testing.expect(p.next().? == .@"256_bg");
    try testing.expect(p.next() == null);
}
test "sgr: 256 color underline" {
    var p: Parser = .{ .params = &[_]u16{ 58, 5, 9 } };
    try testing.expect(p.next().? == .@"256_underline_color");
    try testing.expect(p.next() == null);
}
test "sgr: 24-bit bg color" {
    {
        const v = testParseColon(&[_]u16{ 48, 2, 1, 2, 3 });
        try testing.expect(v == .direct_color_bg);
        try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
        try testing.expectEqual(@as(u8, 2), v.direct_color_bg.g);
        try testing.expectEqual(@as(u8, 3), v.direct_color_bg.b);
    }
}
test "sgr: underline color" {
    {
        const v = testParseColon(&[_]u16{ 58, 2, 1, 2, 3 });
        try testing.expect(v == .underline_color);
        try testing.expectEqual(@as(u8, 1), v.underline_color.r);
        try testing.expectEqual(@as(u8, 2), v.underline_color.g);
        try testing.expectEqual(@as(u8, 3), v.underline_color.b);
    }

    {
        const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
        try testing.expect(v == .underline_color);
        try testing.expectEqual(@as(u8, 1), v.underline_color.r);
        try testing.expectEqual(@as(u8, 2), v.underline_color.g);
        try testing.expectEqual(@as(u8, 3), v.underline_color.b);
    }
}
test "sgr: reset underline color" {
    var p: Parser = .{ .params = &[_]u16{59} };
    try testing.expect(p.next().? == .reset_underline_color);
}
test "sgr: invisible" {
    var p: Parser = .{ .params = &[_]u16{ 8, 28 } };
    try testing.expect(p.next().? == .invisible);
    try testing.expect(p.next().? == .reset_invisible);
}
test "sgr: strikethrough" {
    {
        const v = testParse(&[_]u16{9});
        try testing.expect(v == .strikethrough);
    }
    {
        const v = testParse(&[_]u16{29});
        try testing.expect(v == .reset_strikethrough);
    }
}
test "sgr: direct color fg missing color" {
    var p: Parser = .{ .params = &[_]u16{ 38, 5 } };
    while (p.next()) |_| {}
}
test "sgr: direct bg omitted color" {
    var p: Parser = .{ .params = &[_]u16{ 48, 5 } };
    while (p.next()) |_| {}
}
test "sgr: direct fg/bg/underline ignore optional color space" {
    // Colon version should ignore optional color space identifier.
    {
        const v = testParseColon(&[_]u16{ 38, 2, 0, 1, 2, 3 });
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 2), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 3), v.direct_color_fg.b);
    }
    {
        const v = testParseColon(&[_]u16{ 48, 2, 0, 1, 2, 3 });
        try testing.expect(v == .direct_color_bg);
        try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
        try testing.expectEqual(@as(u8, 2), v.direct_color_bg.g);
        try testing.expectEqual(@as(u8, 3), direct_color_bg.b);
    }
    {
        const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
        try testing.expect(v == .underline_color);
        try testing.expectEqual(@as(u8, 1), v.underline_color.r);
        try testing.expectEqual(@as(u8, 2), v.underline_color.g);
        try testing.expectEqual(@as(u8, 3), v.underline_color.b);
    }

    // Semicolon version should not ignore optional color space identifier.
    {
        const v = testParse(&[_]u16{ 38, 2, 0, 1, 2, 3 });
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 0), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 1), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 2), direct_color_fg.b);
    }
    {
        const v = testParse(&[_]u16{ 48, 2, 0, 1, 2, 3 });
        try testing.expect(v == .direct_color_bg);
        try testing.expectEqual(@as(u8, 0), direct_color_bg.r);
        try testing.expectEqual(@as(u8, 1), direct_color_bg.g);
        try testing.expectEqual(@as(u8, 2), direct_color_bg.b);
    }
    {
        const v = testParse(&[_]u16{ 58, 2, 0, 1, 2, 3 });
        try testing.expect(v == .underline_color);
        try testing.expectEqual(@as(u8, 0), v.underline_color.r);
        try testing.expectEqual(@as(u8, 1), v.underline_color.g);
        try testing.expectEqual(@as(u8, 2), v.underline_color.b);
    }
}
test "sgr: direct fg colon with too many colons" {
    var p: Parser = .{
        .params = &[_]u16{ 38, 2, 0, 1, 2, 3, 4, 1 },
        .params_sep = sep: {
            var list = SepList.initEmpty();
            for (0..7) |i| {
                list.set(i);
            }
            break :sep list;
        },
    };
    try testing.expect(p.next().? == .unknown);
    try testing.expect(p.next().? == .bold);
    try testing.expect(p.next() == null);
}
test "sgr: direct fg colon with colorspace and extra Param" {
    var p: Parser = .{
        .params = &[_]u16{ 38, 2, 0, 1, 2, 3, 1 },
        .params_sep = sep: {
            var list = SepList.initEmpty();
            for (0..6) |i| {
                list.set(i);
            }
            break :list list;
        },
    };
    // Expect the colorspace is ignored and we parse the correct color.
    {
        const v = p.next().?;
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 2), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 3), v.direct_color_fg.b);
    }
    try testing.expect(p.next().? == .bold);
}
test "sgr: direct fg colon no colorspace extra param" {
    var p: Parser = .{
        .params = &[_]u16{ 38, 2, 1, 2, 3, 1 },
        .params_sep = sep: {
            var list = SepList.empty();
            for (0..4) |i| {
                list.set(i);
            }
            break :list list;
        },
    };
    {
        const v = p.next().?;
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 2), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 3), v.direct_color_fg.b);
    }
    try testing.expect(p.next().? == .bold);
}
test "sgr: kakoune input" {
    var p: Parser = .{
        .params = &[_]u16{ 0, 4, 3, 38, 2, 175, 175, 215, 58, 2, 190, 80, 70 },
        .params_sep = sep: {
            var list = SepList.initEmpty();
            list.set(1);
            list.set(8);
            break :list list;
        },
    };
    {
        const v = p.next().?;
        try testing.expect(v == .unset);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .underline);
        try testing.expectEqual(Attribute.Underline.curly, v.underline);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .direct_color_fg);
        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.r);
        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.g);
        try testing.expectEqual(@as(u8, 215), v.direct_color_fg.b);
    }
    {
        const v = p.next().?;
        try testing.expect(v == .underline_color);
        try testing.expectEqual(@as(u8, 190), v.underline_color.r);
        try testing.expectEqual(@as(u8, 80), v.underline_color.g);
        try testing.expectEqual(@as(u8, 70), v.underline_color.b);
    }
    // End (it won't parse further because of max param limit)
}