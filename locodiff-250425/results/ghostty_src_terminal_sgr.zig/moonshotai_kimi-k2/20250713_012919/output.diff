
index d82d3f385..67d8a9321 100644
--- a/ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected):tmp/tmpnb0bgk7__expected.txt	
+++ b/ghostty_src_terminal_sgr.zig_extracted.txt (actual):tmp/tmpukrc1_ej_actual.txt	
@@ -83,7 +83,7 @@ pub const Attribute = union(enum) {
     @"256_bg": u8,
 
     /// Set foreground color as 256-color palette.
-    @"256_fg": u8,
+    @"256_fg": u8;
 
     pub const Underline = enum(u3) {
         none = 0,
@@ -212,7 +212,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -237,7 +236,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -261,7 +259,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -383,26 +380,6 @@ fn testParseColon(params: []const u16) Attribute {
 test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
-
-    {
-        const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
-
-    {
-        const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
 }
 
 test "sgr: Parser multiple" {
@@ -470,6 +447,7 @@ test "sgr: underline" {
     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
+        try testing.expectEqual(Attribute.Underline.single, v.underline);
     }
 
     {
@@ -667,6 +645,18 @@ test "sgr: invisible" {
     try testing.expect(p.next().? == .reset_invisible);
 }
 
+test "sgr: overline" {
+    {
+        const v = testParse(&[_]u16{53});
+        try testing.expect(v == .overline);
+    }
+
+    {
+        const v = testParse(&[_]u16{55});
+        try testing.expect(v == .reset_overline);
+    }
+}
+
 test "sgr: underline, bg, and fg" {
     var p: Parser = .{
         .params = &[_]u16{ 4, 38, 2, 255, 247, 219, 48, 2, 242, 93, 147, 4 },
