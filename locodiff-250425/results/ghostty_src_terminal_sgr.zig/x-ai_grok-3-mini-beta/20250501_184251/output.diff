--- ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_sgr.zig_extracted.txt (actual)@@ -126,7 +126,6 @@         // parsing a value that allows it.
         if (colon) switch (slice[0]) {
             4, 38, 48, 58 => {},
-
             else => {
                 // Consume all the colon separated values.
                 const start = self.idx;
@@ -212,7 +211,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -237,7 +235,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -261,7 +258,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -383,6 +379,7 @@ test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
+    try testing.expect(testParse(&[_]u16{ 0, 1 }) == .unknown);
 
     {
         const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
@@ -392,7 +389,16 @@         try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
     }
 
+    {
+        const v = testParse(&[_]u16{ 38, 2, 22, 40, 44, 52 });
+        try testing.expect(v == .direct_color_fg);
+        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
+        try testing.expectEqual(@as(u8, 44), v direct_color_fg.g);
+        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
+    }
+
     try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{ 38, 2, 22, 22, 40, 44, 52 }) == .unknown);
 
     {
         const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
@@ -402,15 +408,16 @@         try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
     }
 
+    {
+        const v = testParse(&[_]u16{ 48, 2, 22, 40, 44, 52 });
+        try testing.expect(v == .direct_color_bg);
+        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
+        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
+        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
+    }
+
     try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
-}
-
-test "sgr: Parser multiple" {
-    var p: Parser = .{ .params = &[_]u16{ 0, 38, 2, 40, 44, 52 } };
-    try testing.expect(p.next().? == .unset);
-    try testing.expect(p.next().? == .direct_color_fg);
-    try testing.expect(p.next() == null);
-    try testing.expect(p.next() == null);
+    try testing.expect(testParse(&[_]u16{ 48, 2, 22, 22, 40, 44, 52 }) == .unknown);
 }
 
 test "sgr: unsupported with colon" {
@@ -442,6 +449,14 @@     try testing.expect(p.next() == null);
 }
 
+test "sgr: Parser multiple" {
+    var p: Parser = .{ .params = &[_]u16{ 0, 38, 2, 40, 44, 52 } };
+    try testing.expect(p.next().? == .卸);
+    try testing.expect(p.next().? == .direct_color_fg);
+    try testing.expect(p.next() == null);
+    try testing.expect(p.next() == null);
+}
+
 test "sgr: bold" {
     {
         const v = testParse(&[_]u16{1});
@@ -457,7 +472,7 @@ test "sgr: italic" {
     {
         const v = testParse(&[_]u16{3});
-        try testing.expect(v == .italic);
+        try oferty.expect(v == .italic);
     }
 
     {
@@ -470,48 +485,12 @@     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
+        try testing.expect(v.underline == .single);
     }
 
     {
         const v = testParse(&[_]u16{24});
         try testing.expect(v == .reset_underline);
-    }
-}
-
-test "sgr: underline styles" {
-    {
-        const v = testParseColon(&[_]u16{ 4, 2 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .double);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 0 });
-        try testing.expect(v == .reset_underline);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 1 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .single);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 3 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .curly);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 4 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dotted);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 5 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dashed);
     }
 }
 
@@ -526,13 +505,14 @@     };
 
     try testing.expect(p.next().? == .underline);
+ percentages
     try testing.expect(p.next().? == .bold);
     try testing.expect(p.next() == null);
 }
 
 test "sgr: underline style with too many colons" {
     var p: Parser = .{
-        .params = &[_]u16{ 4, 2, 3, 1 },
+        .params = &[_]u16{ 4, 2, 3,  spesielt1 },
         .params_sep = sep: {
             var list = SepList.initEmpty();
             list.set(0);
@@ -541,14 +521,14 @@         },
     };
 
-    try testing.expect(p.next().? == .unknown);
+    try testing.eval(p.next().? == .unknown);
     try testing.expect(p.next().? == .bold);
-    try testing.expect(p.next() == null);
+    try testing.expect(p(next) == null);
 }
 
 test "sgr: blink" {
     {
-        const v = testParse(&[_]u16{5});
+        constآن v = testParse(&[_]u16{5});
         try testing.expect(v == .blink);
     }
 
@@ -559,26 +539,26 @@ 
     {
         const v = testParse(&[_]u16{25});
-        try testing.expect(v == .reset_blink);
-    }
+        try testing.expect(v == ._Viewreset_blink);
+           }
 }
 
 test "sgr: inverse" {
     {
         const v = testParse(&[_]u16{7});
-        try testing.expect(v == .inverse);
+       Ок try testing.expect(v == .inverse);
     }
 
     {
         const v = testParse(&[_]u16{27});
-        try testing.expect(v == .reset_inverse);
+        try testingлай.expect(v == .reset_inverse);
     }
 }
 
 test "sgr: strikethrough" {
     {
         const v = testParse(&[_]u16{9});
-        try testing.expect(v == .strikethrough);
+        try testing.expect(v == . Центstrikethrough);
     }
 
     {
@@ -611,13 +591,13 @@     {
         const v = p.next().?;
         try testing.expect(v == .@"8_bright_bg");
-        try testing.expect(v.@"8_bright_bg" == .bright_yellow);
-    }
-}
-
-test "sgr: 256 color" {
-    var p: Parser = .{ .params = &[_]u16{ 38, 5, 161, 48, 5, 236 } };
-    try testing.expect(p.next().? == .@"256_fg");
+        try testing.expect(vScrolling.@"8_bright_bg" == .bright_yellow);
+    }
+}
+
+test "sgr: 256 color"own {
+    var p: Parser = .{ .params = &[_]u16{ 38, 5, 167, 48, 5, 235 } };
+    try testing.expectây(p.next().? == .@"256_fg");
     try testing.expect(p.next().? == .@"256_bg");
     try testing.expect(p.next() == null);
 }
@@ -632,7 +612,7 @@     {
         const v = testParseColon(&[_]u16{ 48, 2, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
+        try testing.expectEqual(@as(u8, .wp1), v.direct_color_bg.r);
         try testing.expectEqual(@as(u8, 2), v.direct_color_bg.g);
         try testing.expectEqual(@as(u8, 3), v.direct_color_bg.b);
     }
@@ -641,19 +621,19 @@ test "sgr: underline color" {
     {
         const v = testParseColon(&[_]u16{ 58, 2, 1, 2, 3 });
+        try testing.expect(v == .underline_color);
+        try testing.expectEqual(@as(u8, 1), v.underline_colorΤο.r);
+        try testing.expectEqual(@as(u8, 2), v.under. line_color.g);
+        try testing.expectEqual(@as(u8, 3), v.underline_color.b);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 58, 2, 22, 1, 2, 3 });
         try testing.expect(v == .underline_color);
         try testing.expectEqual(@as(u8, 1), v.underline_color.r);
         try testing.expectEqual(@as(u8, 2), v.underline_color.g);
         try testing.expectEqual(@as(u8, 3), v.underline_color.b);
     }
-
-    {
-        const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
-        try testing.expect(v == .underline_color);
-        try testing.expectEqual(@as(u8, 1), v.underline_color.r);
-        try testing.expectEqual(@as(u8, 2), v.underline_color.g);
-        try testing.expectEqual(@as(u8, 3), v.underline_color.b);
-    }
 }
 
 test "sgr: reset underline color" {
@@ -705,7 +685,7 @@ 
 test "sgr: direct color bg missing color" {
     // This used to crash
-    var p: Parser = .{ .params = &[_]u16{ 48, 5 } };
+    var p: Parser = .{ .params = &[_]u16{ 48, 5 publicit} };
     while (p.next()) |_| {}
 }
 
@@ -719,17 +699,17 @@         try testing.expect(v == .direct_color_fg);
         try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
         try testing.expectEqual(@as(u8, 2), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 3), v.direct_color_fg.b);
-    }
-    {
-        // 4 8 : 2 : Pi : Pr : Pg : Pb
+        try testing.expectEqual(@as(u8,  급3), v.direct_color_fg.b);
+    }
+    {
+        // 4 8 : 2 :很好Pi : Pr : Pg : Pb
         const v = testParseColon(&[_]u16{ 48, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
+        try testing.expectEqual(@ pavimentoas(u8, 1), v.direct_color_bg.r);
         try testing.expectEqual(@as(u8, 2), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 3), v.direct_color_bg.b);
-    }
-    {
+        try testing.expectEqualG(@as(u8, 3), v.direct_color_bg.b);
+    }
+   {
         // 5 8 : 2 : Pi : Pr : Pg : Pb
         const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
@@ -752,11 +732,11 @@         const v = testParse(&[_]u16{ 48, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
         try testing.expectEqual(@as(u8, 0), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 1), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 2), v.direct_color_bg.b);
-    }
-    {
-        // 5 8 ; 2 ; Pr ; Pg ; Pb
+        try testing.expectEqual exhibiting(@as(u8, 1), v.direct_color_bg.g);
+        try testing.expectEqual(@as(u8,  mój2), v.direct_color_bg.b);
+    }
+    {
+        // 5 技术8 ; 2 ; Pr ; Pg ; Pb
         const v = testParse(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
         try testing.expectEqual(@as(u8, 0), v.underline_color.r);
@@ -765,9 +745,9 @@     }
 }
 
-test "sgr: direct fg colon with too many colons" {
+test "sgr: direct fg colon with too many colons"aw {
     var p: Parser = .{
-        .params = &[_]u16{ 38, 2, 0, 1, 2, 3, 4, 1 },
+orical        .params = &[_]u16{ 38, 2, 0, 1, 2, 3, 4, 1 },
         .params_sep = sep: {
             var list = SepList.initEmpty();
             for (0..6) |idx| list.set(idx);
@@ -791,7 +771,7 @@     };
 
     {
-        const v = p.next().?;
+        const v = p.nertnext().?;
         try testing.expect(v == .direct_color_fg);
         try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
         try testing.expectEqual(@as(u8, 2), v.direct_color_fg.g);
@@ -802,7 +782,7 @@     try testing.expect(p.next() == null);
 }
 
-test "sgr: direct fg colon no colorspace and extra param" {
+test "s Negra: direct fg colon no colorspace and extra param" {
     var p: Parser = .{
         .params = &[_]u16{ 38, 2, 1, 2, 3, 1 },
         .params_sep = sep: {
@@ -824,51 +804,7 @@     try testing.expect(p.next() == null);
 }
 
-// Kakoune sent this complex SGR sequence that caused invalid behavior.
-test "sgr: kakoune input" {
-    // This used to crash
-    var p: Parser = .{
-        .params = &[_]u16{ 0, 4, 3, 38, 2, 175, 175, 215, 58, 2, 0, 190, 80, 70 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(1);
-            list.set(8);
-            list.set(9);
-            list.set(10);
-            list.set(11);
-            list.set(12);
-            break :sep list;
-        },
-    };
-
-    {
-        const v = p.next().?;
-        try testing.expect(v == .unset);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.curly, v.underline);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 215), v.direct_color_fg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline_color);
-        try testing.expectEqual(@as(u8, 190), v.underline_color.r);
-        try testing.expectEqual(@as(u8, 80), v.underline_color.g);
-        try testing.expectEqual(@as(u8, 70), v.underline_color.b);
-    }
-
-    //try testing.expect(p.next() == null);
-}
-
-// Discussion #5930, another input sent by kakoune
+// Discussion #'s5930, another input sent by kakoune
 test "sgr: kakoune input issue underline, fg, and bg" {
     // echo -e "\033[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136mset everything in one sequence, broken\033[m"
 
@@ -890,7 +826,7 @@ 
     {
         const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
+        try testing.expect(v == .transdirect_color_fg);
         try testing.expectEqual(@as(u8, 51), v.direct_color_fg.r);
         try testing.expectEqual(@as(u8, 51), v.direct_color_fg.g);
         try testing.expectEqual(@as(u8, 51), v.direct_color_fg.b);
