--- ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_sgr.zig_extracted.txt (actual)@@ -81,7 +81,6 @@ 
     /// Set background color as 256-color palette.
     @"256_bg": u8,
-
     /// Set foreground color as 256-color palette.
     @"256_fg": u8,
 
@@ -111,7 +110,6 @@                 self.idx += 1;
                 return .unset;
             }
-
             return null;
         }
 
@@ -132,22 +130,18 @@                 const start = self.idx;
                 while (self.params_sep.isSet(self.idx)) self.idx += 1;
                 self.idx += 1;
-                return .{ .unknown = .{
+                return .unknown = .{
                     .full = self.params,
                     .partial = slice[0 .. self.idx - start + 1],
-                } };
+                };
             },
         };
 
         switch (slice[0]) {
             0 => return .unset,
-
             1 => return .bold,
-
             2 => return .faint,
-
             3 => return .italic,
-
             4 => underline: {
                 if (colon) {
                     assert(slice.len >= 2);
@@ -155,7 +149,6 @@                         self.consumeUnknownColon();
                         break :underline;
                     }
-
                     self.idx += 1;
                     switch (slice[1]) {
                         0 => return .reset_underline,
@@ -164,129 +157,61 @@                         3 => return .{ .underline = .curly },
                         4 => return .{ .underline = .dotted },
                         5 => return .{ .underline = .dashed },
-
-                        // For unknown underline styles, just render
-                        // a single underline.
                         else => return .{ .underline = .single },
                     }
                 }
-
                 return .{ .underline = .single };
             },
-
             5 => return .blink,
-
             6 => return .blink,
-
             7 => return .inverse,
-
             8 => return .invisible,
-
             9 => return .strikethrough,
-
             21 => return .{ .underline = .double },
-
             22 => return .reset_bold,
-
             23 => return .reset_italic,
-
             24 => return .reset_underline,
-
             25 => return .reset_blink,
-
             27 => return .reset_inverse,
-
             28 => return .reset_invisible,
-
             29 => return .reset_strikethrough,
-
-            30...37 => return .{
-                .@"8_fg" = @enumFromInt(slice[0] - 30),
-            },
-
+            30...37 => return .{ .@"8_fg" = @enumFromInt(slice[0] - 30) },
             38 => if (slice.len >= 2) switch (slice[1]) {
-                // `2` indicates direct-color (r, g, b).
-                // We need at least 3 more params for this to make sense.
-                2 => if (self.parseDirectColor(
-                    .direct_color_fg,
-                    slice,
-                    colon,
-                )) |v| return v,
-
-                // `5` indicates indexed color.
+                2 => if (self.parseDirectColor(.direct_color_fg, slice, colon)) |v| return v,
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
-                    return .{
-                        .@"256_fg" = @truncate(slice[2]),
-                    };
+                    return .{ .@"256_fg" = @truncate(slice[2]) };
                 },
                 else => {},
             },
-
             39 => return .reset_fg,
-
-            40...47 => return .{
-                .@"8_bg" = @enumFromInt(slice[0] - 40),
-            },
-
+            40...47 => return .{ .@"8_bg" = @enumFromInt(slice[0] - 40) },
             48 => if (slice.len >= 2) switch (slice[1]) {
-                // `2` indicates direct-color (r, g, b).
-                // We need at least 3 more params for this to make sense.
-                2 => if (self.parseDirectColor(
-                    .direct_color_bg,
-                    slice,
-                    colon,
-                )) |v| return v,
-
-                // `5` indicates indexed color.
+                2 => if (self.parseDirectColor(.direct_color_bg, slice, colon)) |v| return v,
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
-                    return .{
-                        .@"256_bg" = @truncate(slice[2]),
-                    };
+                    return .{ .@"256_bg" = @truncate(slice[2]) };
                 },
                 else => {},
             },
-
             49 => return .reset_bg,
-
             53 => return .overline,
             55 => return .reset_overline,
-
             58 => if (slice.len >= 2) switch (slice[1]) {
-                // `2` indicates direct-color (r, g, b).
-                // We need at least 3 more params for this to make sense.
-                2 => if (self.parseDirectColor(
-                    .underline_color,
-                    slice,
-                    colon,
-                )) |v| return v,
-
-                // `5` indicates indexed color.
+                2 => if (self.parseDirectColor(.underline_color, slice, colon)) |v| return v,
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
-                    return .{
-                        .@"256_underline_color" = @truncate(slice[2]),
-                    };
+                    return .{ .@"256_underline_color" = @truncate(slice[2]) };
                 },
                 else => {},
             },
-
             59 => return .reset_underline_color,
-
-            90...97 => return .{
-                // 82 instead of 90 to offset to "bright" colors
-                .@"8_bright_fg" = @enumFromInt(slice[0] - 82),
-            },
-
-            100...107 => return .{
-                .@"8_bright_bg" = @enumFromInt(slice[0] - 92),
-            },
-
+            90...97 => return .{ .@"8_bright_fg" = @enumFromInt(slice[0] - 82) },
+            100...107 => return .{ .@"8_bright_bg" = @enumFromInt(slice[0] - 92) },
             else => {},
         }
 
-        return .{ .unknown = .{ .full = self.params, .partial = slice } };
+        return .unknown = .{ .full = self.params, .partial = slice };
     }
 
     fn parseDirectColor(
@@ -297,15 +222,8 @@     ) ?Attribute {
         // Any direct color style must have at least 5 values.
         if (slice.len < 5) return null;
-
-        // Only used for direct color sets (38, 48, 58) and subparam 2.
         assert(slice[1] == 2);
 
-        // Note: We use @truncate because the value should be 0 to 255. If
-        // it isn't, the behavior is undefined so we just... truncate it.
-
-        // If we don't have a colon, then we expect exactly 3 semicolon
-        // separated values.
         if (!colon) {
             self.idx += 4;
             return @unionInit(Attribute, @tagName(tag), .{
@@ -315,8 +233,6 @@             });
         }
 
-        // We have a colon, we might have either 5 or 6 values depending
-        // on if the colorspace is present.
         const count = self.countColon();
         switch (count) {
             3 => {
@@ -327,7 +243,6 @@                     .b = @truncate(slice[4]),
                 });
             },
-
             4 => {
                 self.idx += 5;
                 return @unionInit(Attribute, @tagName(tag), .{
@@ -336,7 +251,6 @@                     .b = @truncate(slice[5]),
                 });
             },
-
             else => {
                 self.consumeUnknownColon();
                 return null;
@@ -344,11 +258,7 @@         }
     }
 
-    /// Returns true if the present position has a colon separator.
-    /// This always returns false for the last value since it has no
-    /// separator.
     fn isColon(self: *Parser) bool {
-        // The `- 1` here is because the last value has no separator.
         if (self.idx >= self.params.len - 1) return false;
         return self.params_sep.isSet(self.idx);
     }
@@ -362,8 +272,6 @@         return count;
     }
 
-    /// Consumes all the remaining parameters separated by a colon and
-    /// returns an unknown attribute.
     fn consumeUnknownColon(self: *Parser) void {
         const count = self.countColon();
         self.idx += count + 1;
@@ -383,34 +291,6 @@ test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
-
-    {
-        const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
-
-    {
-        const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
-}
-
-test "sgr: Parser multiple" {
-    var p: Parser = .{ .params = &[_]u16{ 0, 38, 2, 40, 44, 52 } };
-    try testing.expect(p.next().? == .unset);
-    try testing.expect(p.next().? == .direct_color_fg);
-    try testing.expect(p.next() == null);
-    try testing.expect(p.next() == null);
 }
 
 test "sgr: unsupported with colon" {
@@ -447,7 +327,6 @@         const v = testParse(&[_]u16{1});
         try testing.expect(v == .bold);
     }
-
     {
         const v = testParse(&[_]u16{22});
         try testing.expect(v == .reset_bold);
@@ -459,7 +338,6 @@         const v = testParse(&[_]u16{3});
         try testing.expect(v == .italic);
     }
-
     {
         const v = testParse(&[_]u16{23});
         try testing.expect(v == .reset_italic);
@@ -470,93 +348,19 @@     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
-    }
-
+        try testing.expect(v.underline == .single);
+    }
     {
         const v = testParse(&[_]u16{24});
         try testing.expect(v == .reset_underline);
     }
 }
 
-test "sgr: underline styles" {
-    {
-        const v = testParseColon(&[_]u16{ 4, 2 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .double);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 0 });
-        try testing.expect(v == .reset_underline);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 1 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .single);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 3 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .curly);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 4 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dotted);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 5 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dashed);
-    }
-}
-
-test "sgr: underline style with more" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 2, 1 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(0);
-            break :sep list;
-        },
-    };
-
-    try testing.expect(p.next().? == .underline);
-    try testing.expect(p.next().? == .bold);
-    try testing.expect(p.next() == null);
-}
-
-test "sgr: underline style with too many colons" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 2, 3, 1 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(0);
-            list.set(1);
-            break :sep list;
-        },
-    };
-
-    try testing.expect(p.next().? == .unknown);
-    try testing.expect(p.next().? == .bold);
-    try testing.expect(p.next() == null);
-}
-
 test "sgr: blink" {
     {
         const v = testParse(&[_]u16{5});
         try testing.expect(v == .blink);
     }
-
-    {
-        const v = testParse(&[_]u16{6});
-        try testing.expect(v == .blink);
-    }
-
     {
         const v = testParse(&[_]u16{25});
         try testing.expect(v == .reset_blink);
@@ -568,25 +372,12 @@         const v = testParse(&[_]u16{7});
         try testing.expect(v == .inverse);
     }
-
     {
         const v = testParse(&[_]u16{27});
         try testing.expect(v == .reset_inverse);
     }
 }
 
-test "sgr: strikethrough" {
-    {
-        const v = testParse(&[_]u16{9});
-        try testing.expect(v == .strikethrough);
-    }
-
-    {
-        const v = testParse(&[_]u16{29});
-        try testing.expect(v == .reset_strikethrough);
-    }
-}
-
 test "sgr: 8 color" {
     var p: Parser = .{ .params = &[_]u16{ 31, 43, 90, 103 } };
 
@@ -595,19 +386,16 @@         try testing.expect(v == .@"8_fg");
         try testing.expect(v.@"8_fg" == .red);
     }
-
     {
         const v = p.next().?;
         try testing.expect(v == .@"8_bg");
         try testing.expect(v.@"8_bg" == .yellow);
     }
-
     {
         const v = p.next().?;
         try testing.expect(v == .@"8_bright_fg");
         try testing.expect(v.@"8_bright_fg" == .bright_black);
     }
-
     {
         const v = p.next().?;
         try testing.expect(v == .@"8_bright_bg");
@@ -619,12 +407,6 @@     var p: Parser = .{ .params = &[_]u16{ 38, 5, 161, 48, 5, 236 } };
     try testing.expect(p.next().? == .@"256_fg");
     try testing.expect(p.next().? == .@"256_bg");
-    try testing.expect(p.next() == null);
-}
-
-test "sgr: 256 color underline" {
-    var p: Parser = .{ .params = &[_]u16{ 58, 5, 9 } };
-    try testing.expect(p.next().? == .@"256_underline_color");
     try testing.expect(p.next() == null);
 }
 
@@ -646,7 +428,6 @@         try testing.expectEqual(@as(u8, 2), v.underline_color.g);
         try testing.expectEqual(@as(u8, 3), v.underline_color.b);
     }
-
     {
         const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
@@ -667,36 +448,6 @@     try testing.expect(p.next().? == .reset_invisible);
 }
 
-test "sgr: underline, bg, and fg" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 38, 2, 255, 247, 219, 48, 2, 242, 93, 147, 4 },
-    };
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 255), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 247), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 219), v.direct_color_fg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 242), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 93), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 147), v.direct_color_bg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
-}
-
 test "sgr: direct color fg missing color" {
     // This used to crash
     var p: Parser = .{ .params = &[_]u16{ 38, 5 } };
@@ -709,12 +460,14 @@     while (p.next()) |_| {}
 }
 
+test "sgr: 256 color underline" {
+    var p: Parser = .{ .params = &[_]u16{ 58, 5, 9 } };
+    try testing.expect(p.next().? == .@"256_underline_color");
+    try testing.expect(p.next() == null);
+}
+
 test "sgr: direct fg/bg/underline ignore optional color space" {
-    // These behaviors have been verified against xterm.
-
-    // Colon version should skip the optional color space identifier
-    {
-        // 3 8 : 2 : Pi : Pr : Pg : Pb
+    {
         const v = testParseColon(&[_]u16{ 38, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_fg);
         try testing.expectEqual(@as(u8, 1), v.direct_color_fg.r);
@@ -722,7 +475,6 @@         try testing.expectEqual(@as(u8, 3), v.direct_color_fg.b);
     }
     {
-        // 4 8 : 2 : Pi : Pr : Pg : Pb
         const v = testParseColon(&[_]u16{ 48, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
         try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
@@ -730,7 +482,6 @@         try testing.expectEqual(@as(u8, 3), v.direct_color_bg.b);
     }
     {
-        // 5 8 : 2 : Pi : Pr : Pg : Pb
         const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
         try testing.expectEqual(@as(u8, 1), v.underline_color.r);
@@ -738,9 +489,7 @@         try testing.expectEqual(@as(u8, 3), v.underline_color.b);
     }
 
-    // Semicolon version should not parse optional color space identifier
-    {
-        // 3 8 ; 2 ; Pr ; Pg ; Pb
+    {
         const v = testParse(&[_]u16{ 38, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_fg);
         try testing.expectEqual(@as(u8, 0), v.direct_color_fg.r);
@@ -748,7 +497,6 @@         try testing.expectEqual(@as(u8, 2), v.direct_color_fg.b);
     }
     {
-        // 4 8 ; 2 ; Pr ; Pg ; Pb
         const v = testParse(&[_]u16{ 48, 2, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
         try testing.expectEqual(@as(u8, 0), v.direct_color_bg.r);
@@ -756,7 +504,6 @@         try testing.expectEqual(@as(u8, 2), v.direct_color_bg.b);
     }
     {
-        // 5 8 ; 2 ; Pr ; Pg ; Pb
         const v = testParse(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
         try testing.expectEqual(@as(u8, 0), v.underline_color.r);
@@ -826,7 +573,6 @@ 
 // Kakoune sent this complex SGR sequence that caused invalid behavior.
 test "sgr: kakoune input" {
-    // This used to crash
     var p: Parser = .{
         .params = &[_]u16{ 0, 4, 3, 38, 2, 175, 175, 215, 58, 2, 0, 190, 80, 70 },
         .params_sep = sep: {
@@ -868,11 +614,7 @@     //try testing.expect(p.next() == null);
 }
 
-// Discussion #5930, another input sent by kakoune
 test "sgr: kakoune input issue underline, fg, and bg" {
-    // echo -e "\033[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136mset everything in one sequence, broken\033[m"
-
-    // This used to crash
     var p: Parser = .{
         .params = &[_]u16{ 4, 3, 38, 2, 51, 51, 51, 48, 2, 170, 170, 170, 58, 2, 255, 97, 136 },
         .params_sep = sep: {
