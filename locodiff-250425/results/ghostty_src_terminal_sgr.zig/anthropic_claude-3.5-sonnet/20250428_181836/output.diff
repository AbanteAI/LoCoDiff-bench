--- ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_sgr.zig_extracted.txt (actual)@@ -665,36 +665,6 @@     var p: Parser = .{ .params = &[_]u16{ 8, 28 } };
     try testing.expect(p.next().? == .invisible);
     try testing.expect(p.next().? == .reset_invisible);
-}
-
-test "sgr: underline, bg, and fg" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 38, 2, 255, 247, 219, 48, 2, 242, 93, 147, 4 },
-    };
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 255), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 247), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 219), v.direct_color_fg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 242), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 93), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 147), v.direct_color_bg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
 }
 
 test "sgr: direct color fg missing color" {
@@ -842,75 +812,4 @@     };
 
     {
-        const v = p.next().?;
-        try testing.expect(v == .unset);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.curly, v.underline);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 175), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 215), v.direct_color_fg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline_color);
-        try testing.expectEqual(@as(u8, 190), v.underline_color.r);
-        try testing.expectEqual(@as(u8, 80), v.underline_color.g);
-        try testing.expectEqual(@as(u8, 70), v.underline_color.b);
-    }
-
-    //try testing.expect(p.next() == null);
-}
-
-// Discussion #5930, another input sent by kakoune
-test "sgr: kakoune input issue underline, fg, and bg" {
-    // echo -e "\033[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136mset everything in one sequence, broken\033[m"
-
-    // This used to crash
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 3, 38, 2, 51, 51, 51, 48, 2, 170, 170, 170, 58, 2, 255, 97, 136 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(0);
-            break :sep list;
-        },
-    };
-
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.curly, v.underline);
-    }
-
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 51), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 51), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 51), v.direct_color_fg.b);
-    }
-
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 170), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 170), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 170), v.direct_color_bg.b);
-    }
-
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline_color);
-        try testing.expectEqual(@as(u8, 255), v.underline_color.r);
-        try testing.expectEqual(@as(u8, 97), v.underline_color.g);
-        try testing.expectEqual(@as(u8, 136), v.underline_color.b);
-    }
-
-    try testing.expect(p.next() == null);
-}+        const