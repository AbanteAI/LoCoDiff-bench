--- ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_sgr.zig_extracted.txt (actual)@@ -212,7 +212,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -237,7 +236,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -261,7 +259,6 @@                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -303,7 +300,7 @@ 
         // Note: We use @truncate because the value should be 0 to 255. If
         // it isn't, the behavior is undefined so we just... truncate it.
-
+        //
         // If we don't have a colon, then we expect exactly 3 semicolon
         // separated values.
         if (!colon) {
@@ -384,25 +381,25 @@     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
 
-    {
-        const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
-
-    {
-        const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
-    }
-
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{1}) == .bold);
+    try testing.expect(testParse(&[_]u16{22}) == .reset_bold);
+
+    try testing.expect(testParse(&[_]u16{2}) == .faint);
+
+    try testing.expect(testParse(&[_]u16{3}) == .italic);
+    try testing.expect(testParse(&[_]u16{23}) == .reset_italic);
+
+    try testing.expect(testParse(&[_]u16{5}) == .blink);
+    try testing.expect(testParse(&[_]u16{25}) == .reset_blink);
+
+    try testing.expect(testParse(&[_]u16{7}) == .inverse);
+    try testing.expect(testParse(&[_]u16{27}) == .reset_inverse);
+
+    try testing.expect(testParse(&[_]u16{8}) == .invisible);
+    try testing.expect(testParse(&[_]u16{28}) == .reset_invisible);
+
+    try testing.expect(testParse(&[_]u16{9}) == .strikethrough);
+    try testing.expect(testParse(&[_]u16{29}) == .reset_strikethrough);
 }
 
 test "sgr: Parser multiple" {
@@ -470,6 +467,7 @@     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
+        try testing.expect(v.underline == .single);
     }
 
     {
@@ -512,6 +510,12 @@         const v = testParseColon(&[_]u16{ 4, 5 });
         try testing.expect(v == .underline);
         try testing.expect(v.underline == .dashed);
+    }
+
+    {
+        const v = testParse(&[_]u16{21});
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .double);
     }
 }
 
@@ -587,6 +591,12 @@     }
 }
 
+test "sgr: invisible" {
+    var p: Parser = .{ .params = &[_]u16{ 8, 28 } };
+    try testing.expect(p.next().? == .invisible);
+    try testing.expect(p.next().? == .reset_invisible);
+}
+
 test "sgr: 8 color" {
     var p: Parser = .{ .params = &[_]u16{ 31, 43, 90, 103 } };
 
@@ -659,42 +669,6 @@ test "sgr: reset underline color" {
     var p: Parser = .{ .params = &[_]u16{59} };
     try testing.expect(p.next().? == .reset_underline_color);
-}
-
-test "sgr: invisible" {
-    var p: Parser = .{ .params = &[_]u16{ 8, 28 } };
-    try testing.expect(p.next().? == .invisible);
-    try testing.expect(p.next().? == .reset_invisible);
-}
-
-test "sgr: underline, bg, and fg" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 38, 2, 255, 247, 219, 48, 2, 242, 93, 147, 4 },
-    };
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_fg);
-        try testing.expectEqual(@as(u8, 255), v.direct_color_fg.r);
-        try testing.expectEqual(@as(u8, 247), v.direct_color_fg.g);
-        try testing.expectEqual(@as(u8, 219), v.direct_color_fg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .direct_color_bg);
-        try testing.expectEqual(@as(u8, 242), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 93), v.direct_color_bg.g);
-        try testing.expectEqual(@as(u8, 147), v.direct_color_bg.b);
-    }
-    {
-        const v = p.next().?;
-        try testing.expect(v == .underline);
-        try testing.expectEqual(Attribute.Underline.single, v.underline);
-    }
 }
 
 test "sgr: direct color fg missing color" {
