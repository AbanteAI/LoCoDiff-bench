
index d82d3f385..f6ca89c92 100644
--- a/ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected):tmp/tmp1qorhzjm_expected.txt	
+++ b/ghostty_src_terminal_sgr.zig_extracted.txt (actual):tmp/tmpkablyz3z_actual.txt	
@@ -212,7 +212,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -237,7 +236,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -261,7 +259,6 @@ pub const Parser = struct {
                     slice,
                     colon,
                 )) |v| return v,
-
                 // `5` indicates indexed color.
                 5 => if (slice.len >= 3) {
                     self.idx += 2;
@@ -466,103 +463,6 @@ test "sgr: italic" {
     }
 }
 
-test "sgr: underline" {
-    {
-        const v = testParse(&[_]u16{4});
-        try testing.expect(v == .underline);
-    }
-
-    {
-        const v = testParse(&[_]u16{24});
-        try testing.expect(v == .reset_underline);
-    }
-}
-
-test "sgr: underline styles" {
-    {
-        const v = testParseColon(&[_]u16{ 4, 2 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .double);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 0 });
-        try testing.expect(v == .reset_underline);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 1 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .single);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 3 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .curly);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 4 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dotted);
-    }
-
-    {
-        const v = testParseColon(&[_]u16{ 4, 5 });
-        try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dashed);
-    }
-}
-
-test "sgr: underline style with more" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 2, 1 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(0);
-            break :sep list;
-        },
-    };
-
-    try testing.expect(p.next().? == .underline);
-    try testing.expect(p.next().? == .bold);
-    try testing.expect(p.next() == null);
-}
-
-test "sgr: underline style with too many colons" {
-    var p: Parser = .{
-        .params = &[_]u16{ 4, 2, 3, 1 },
-        .params_sep = sep: {
-            var list = SepList.initEmpty();
-            list.set(0);
-            list.set(1);
-            break :sep list;
-        },
-    };
-
-    try testing.expect(p.next().? == .unknown);
-    try testing.expect(p.next().? == .bold);
-    try testing.expect(p.next() == null);
-}
-
-test "sgr: blink" {
-    {
-        const v = testParse(&[_]u16{5});
-        try testing.expect(v == .blink);
-    }
-
-    {
-        const v = testParse(&[_]u16{6});
-        try testing.expect(v == .blink);
-    }
-
-    {
-        const v = testParse(&[_]u16{25});
-        try testing.expect(v == .reset_blink);
-    }
-}
-
 test "sgr: inverse" {
     {
         const v = testParse(&[_]u16{7});
@@ -913,4 +813,101 @@ test "sgr: kakoune input issue underline, fg, and bg" {
     }
 
     try testing.expect(p.next() == null);
+}
+
+test "sgr: underline" {
+    {
+        const v = testParse(&[_]u16{4});
+        try testing.expect(v == .underline);
+    }
+
+    {
+        const v = testParse(&[_]u16{24});
+        try testing.expect(v == .reset_underline);
+    }
+}
+
+test "sgr: underline styles" {
+    {
+        const v = testParseColon(&[_]u16{ 4, 2 });
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .double);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 4, 0 });
+        try testing.expect(v == .reset_underline);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 4, 1 });
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .single);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 4, 3 });
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .curly);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 4, 4 });
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .dotted);
+    }
+
+    {
+        const v = testParseColon(&[_]u16{ 4, 5 });
+        try testing.expect(v == .underline);
+        try testing.expect(v.underline == .dashed);
+    }
+}
+
+test "sgr: underline style with more" {
+    var p: Parser = .{
+        .params = &[_]u16{ 4, 2, 1 },
+        .params_sep = sep: {
+            var list = SepList.initEmpty();
+            list.set(0);
+            break :sep list;
+        },
+    };
+
+    try testing.expect(p.next().? == .underline);
+    try testing.expect(p.next().? == .bold);
+    try testing.expect(p.next() == null);
+}
+
+test "sgr: underline style with too many colons" {
+    var p: Parser = .{
+        .params = &[_]u16{ 4, 2, 3, 1 },
+        .params_sep = sep: {
+            var list = SepList.initEmpty();
+            list.set(0);
+            list.set(1);
+            break :sep list;
+        },
+    };
+
+    try testing.expect(p.next().? == .unknown);
+    try testing.expect(p.next().? == .bold);
+    try testing.expect(p.next() == null);
+}
+
+test "sgr: blink" {
+    {
+        const v = testParse(&[_]u16{5});
+        try testing.expect(v == .blink);
+    }
+
+    {
+        const v = testParse(&[_]u16{6});
+        try testing.expect(v == .blink);
+    }
+
+    {
+        const v = testParse(&[_]u16{25});
+        try testing.expect(v == .reset_blink);
+    }
 }
\ No newline at end of file
