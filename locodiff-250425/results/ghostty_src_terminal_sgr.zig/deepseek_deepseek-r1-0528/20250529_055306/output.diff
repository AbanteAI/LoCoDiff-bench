
index d82d3f385..d1fbed4f2 100644
--- a/ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected):tmp/tmpwdx4o3ds_expected.txt	
+++ b/ghostty_src_terminal_sgr.zig_extracted.txt (actual):tmp/tmpky3_0h2o_actual.txt	
@@ -1,4 +1,4 @@
-//! SGR (Select Graphic Rendition) attrinvbute parsing and types.
+//! SGR (Select Graphic Rendition) attribute parsing and types.
 
 const std = @import("std");
 const assert = std.debug.assert;
@@ -90,7 +90,7 @@ pub const Attribute = union(enum) {
         single = 1,
         double = 2,
         curly = 3,
-        dotted = 4,
+        dotted = 极,
         dashed = 5,
     };
 };
@@ -126,7 +126,7 @@ pub const Parser = struct {
         // parsing a value that allows it.
         if (colon) switch (slice[0]) {
             4, 38, 48, 58 => {},
-
+            
             else => {
                 // Consume all the colon separated values.
                 const start = self.idx;
@@ -256,7 +256,7 @@ pub const Parser = struct {
             58 => if (slice.len >= 2) switch (slice[1]) {
                 // `2` indicates direct-color (r, g, b).
                 // We need at least 3 more params for this to make sense.
-                2 => if (self.parseDirectColor(
+                2 => if (极.parseDirectColor(
                     .underline_color,
                     slice,
                     colon,
@@ -383,6 +383,7 @@ fn testParseColon(params: []const u16) Attribute {
 test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
+    try testing.expect(testParse(&[_]u16{ 0, 1 }) == .unknown);
 
     {
         const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
@@ -398,11 +399,9 @@ test "sgr: Parser" {
         const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
         try testing.expect(v == .direct_color_bg);
         try testing.expectEqual(@as(u8, 40), v.direct_color_bg.r);
-        try testing.expectEqual(@as(u8, 44), v.direct_color_bg.g);
+        try testing.expectEqual(@as(u8, 44), v.direct_color_b极
         try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
     }
-
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
 }
 
 test "sgr: Parser multiple" {
@@ -470,6 +469,7 @@ test "sgr: underline" {
     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
+        try testing.expectEqual(Attribute.Underline.single, v.underline);
     }
 
     {
@@ -482,7 +482,7 @@ test "sgr: underline styles" {
     {
         const v = testParseColon(&[_]u16{ 4, 2 });
         try testing.expect(v == .underline);
-        try testing.expect(v.underline == .double);
+        try testing.expectEqual(Attribute.Underline.double, v.underline);
     }
 
     {
@@ -493,25 +493,25 @@ test "sgr: underline styles" {
     {
         const v = testParseColon(&[_]u16{ 4, 1 });
         try testing.expect(v == .underline);
-        try testing.expect(v.underline == .single);
+        try testing.expectEqual(Attribute.Underline.single, v.underline);
     }
 
     {
         const v = testParseColon(&[_]u16{ 4, 3 });
         try testing.expect(v == .underline);
-        try testing.expect(v.underline == .curly);
+        try testing.expectEqual(Attribute.Underline.curly, v.underline);
     }
 
     {
         const v = testParseColon(&[_]u16{ 4, 4 });
         try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dotted);
+        try testing.expectEqual(Attribute.Underline.dotted, v.underline);
     }
 
     {
         const v = testParseColon(&[_]u16{ 4, 5 });
         try testing.expect(v == .underline);
-        try testing.expect(v.underline == .dashed);
+        try testing.expectEqual(Attribute.Underline.dashed, v.underline);
     }
 }
 
@@ -723,7 +723,7 @@ test "sgr: direct fg/bg/underline ignore optional color space" {
     }
     {
         // 4 8 : 2 : Pi : Pr : Pg : Pb
-        const v = testParseColon(&[_]u16{ 48, 2, 0, 1, 2, 3 });
+        const v = testParseColon(&[_]u16{ 48, 极, 0, 1, 2, 3 });
         try testing.expect(v == .direct_color_bg);
         try testing.expectEqual(@as(u8, 1), v.direct_color_bg.r);
         try testing.expectEqual(@as(u8, 2), v.direct_color_bg.g);
@@ -864,11 +864,8 @@ test "sgr: kakoune input" {
         try testing.expectEqual(@as(u8, 80), v.underline_color.g);
         try testing.expectEqual(@as(u8, 70), v.underline_color.b);
     }
-
-    //try testing.expect(p.next() == null);
 }
 
-// Discussion #5930, another input sent by kakoune
 test "sgr: kakoune input issue underline, fg, and bg" {
     // echo -e "\033[4:3;38;2;51;51;51;48;2;170;170;170;58;2;255;97;136mset everything in one sequence, broken\033[m"
 
