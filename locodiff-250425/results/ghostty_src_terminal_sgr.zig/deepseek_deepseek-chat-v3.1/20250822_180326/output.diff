
index d82d3f385..96905b9d7 100644
--- a/ghostty_src_terminal_sgr.zig_expectedoutput.txt (expected):tmp/tmpr4vpvne__expected.txt	
+++ b/ghostty_src_terminal_sgr.zig_extracted.txt (actual):tmp/tmphygowkj5_actual.txt	
@@ -383,6 +383,7 @@ fn testParseColon(params: []const u16) Attribute {
 test "sgr: Parser" {
     try testing.expect(testParse(&[_]u16{}) == .unset);
     try testing.expect(testParse(&[_]u16{0}) == .unset);
+    try testing.expect(testParse(&[_]u16{ 0, 1 }).unknown.partial.len == 2);
 
     {
         const v = testParse(&[_]u16{ 38, 2, 40, 44, 52 });
@@ -392,7 +393,7 @@ test "sgr: Parser" {
         try testing.expectEqual(@as(u8, 52), v.direct_color_fg.b);
     }
 
-    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{ 38, 2, 44, 52 }).unknown.partial.len == 4);
 
     {
         const v = testParse(&[_]u16{ 48, 2, 40, 44, 52 });
@@ -402,7 +403,7 @@ test "sgr: Parser" {
         try testing.expectEqual(@as(u8, 52), v.direct_color_bg.b);
     }
 
-    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }) == .unknown);
+    try testing.expect(testParse(&[_]u16{ 48, 2, 44, 52 }).unknown.partial.len == 4);
 }
 
 test "sgr: Parser multiple" {
@@ -470,6 +471,7 @@ test "sgr: underline" {
     {
         const v = testParse(&[_]u16{4});
         try testing.expect(v == .underline);
+        try testing.expectEqual(Attribute.Underline.single, v.underline);
     }
 
     {
@@ -734,7 +736,7 @@ test "sgr: direct fg/bg/underline ignore optional color space" {
         const v = testParseColon(&[_]u16{ 58, 2, 0, 1, 2, 3 });
         try testing.expect(v == .underline_color);
         try testing.expectEqual(@as(u8, 1), v.underline_color.r);
-        try testing.expectEqual(@as(u8, 2), v.underline_color.g);
+        try testing.exceptEqual(@as(u8, 2), v.underline_color.g);
         try testing.expectEqual(@as(u8, 3), v.underline_color.b);
     }
 
