
index a2b4b4303..252f6c87d 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected):tmp/tmpbypxbcin_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual):tmp/tmpxcgtvgcd_actual.txt	
@@ -1,10 +1,15 @@
-use std::collections::{BTreeSet, HashMap};
+use std::collections::BTreeSet;
+use std::collections::HashMap;
+use std::mem::size_of;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde::{Deserialize, Serialize};
 
-use crate::common::operation_error::OperationResult;
+use crate::common::operation_error::{OperationError, OperationResult};
+use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
+use crate::index::field_index::full_text_index::mmap_inverted_index::MmapInvertedIndex;
+use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition, PrimaryCondition};
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
@@ -94,8 +99,11 @@ pub trait InvertedIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn get_posting_len(
+        &self,
+        token_id: TokenId,
+        hw_counter: &HardwareCounterCell,
+    ) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -202,7 +210,8 @@ mod tests {
     use std::collections::BTreeSet;
 
     use common::counter::hardware_counter::HardwareCounterCell;
-    use rand::Rng;
+    use rand::rng;
+    use rand::RngCore;
     use rand::seq::SliceRandom;
     use rstest::rstest;
 
@@ -212,18 +221,18 @@ mod tests {
     use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
 
     fn generate_word() -> String {
-        let mut rng = rand::rng();
+        let mut rng = rng();
 
         // Each word is 1 to 3 characters long
         let len = rng.random_range(1..=3);
-        rng.sample_iter(rand::distr::Alphanumeric)
+        rng.sample_iter(rand::distributions::Alphanumeric)
             .take(len)
             .map(char::from)
             .collect()
     }
 
     fn generate_query() -> Vec<String> {
-        let mut rng = rand::rng();
+        let mut rng = rng();
         let len = rng.random_range(1..=2);
         (0..len).map(|_| generate_word()).collect()
     }
@@ -365,6 +374,8 @@ mod tests {
 
         MmapInvertedIndex::create(path.clone(), immutable).unwrap();
 
+        let hw_counter = HardwareCounterCell::new();
+
         let mut mmap_index = MmapInvertedIndex::open(path, false).unwrap();
 
         let queries: Vec<_> = (0..100).map(|_| generate_query()).collect();
@@ -375,8 +386,6 @@ mod tests {
             .map(|query| to_parsed_query(query, |token| mutable.vocab.get(&token).copied()))
             .collect();
 
-        let hw_counter = HardwareCounterCell::new();
-
         let imm_parsed_queries: Vec<_> = queries
             .into_iter()
             .map(|query| {
