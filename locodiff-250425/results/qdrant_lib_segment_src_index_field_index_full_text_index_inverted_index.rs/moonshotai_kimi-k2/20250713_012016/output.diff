
index a2b4b4303..773fb4507 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected):tmp/tmpruzrdva7_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual):tmp/tmpesrb0h38_actual.txt	
@@ -48,7 +48,6 @@ impl ParsedQuery {
         if self.tokens.contains(&None) {
             return false;
         }
-
         // Check that all tokens are in document
         self.tokens
             .iter()
@@ -94,8 +93,7 @@ pub trait InvertedIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -311,12 +309,11 @@ mod tests {
     fn test_immutable_to_mmap(#[case] indexed_count: u32, #[case] deleted_count: u32) {
         let mutable = mutable_inverted_index(indexed_count, deleted_count);
         let immutable = ImmutableInvertedIndex::from(mutable);
+        let hw_counter = HardwareCounterCell::new();
 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable.clone()).unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
+        MmapInvertedIndex::create(path.clone(), immutable).unwrap();
 
         let mmap = MmapInvertedIndex::open(path, false).unwrap();
 
@@ -337,14 +334,14 @@ mod tests {
         for (point_id, count) in immutable.point_to_tokens_count.iter().enumerate() {
             // Check same deleted points
             assert_eq!(
-                mmap.deleted_points.get(point_id).unwrap(),
+                mmap.deleted_points.get(point_id),
                 count.is_none(),
                 "point_id: {point_id}"
             );
 
             // Check same count
             assert_eq!(
-                *mmap.point_to_tokens_count.get(point_id).unwrap(),
+                *mmap.point_to_tokens_count.get(point_id),
                 count.unwrap_or(0)
             );
         }
@@ -361,6 +358,8 @@ mod tests {
         let mut mutable = mutable_inverted_index(indexed_count, deleted_count);
         let immutable = ImmutableInvertedIndex::from(mutable.clone());
 
+        let hw_counter = HardwareCounterCell::new();
+
         let path = tempfile::tempdir().unwrap().into_path();
 
         MmapInvertedIndex::create(path.clone(), immutable).unwrap();
@@ -375,13 +374,9 @@ mod tests {
             .map(|query| to_parsed_query(query, |token| mutable.vocab.get(&token).copied()))
             .collect();
 
-        let hw_counter = HardwareCounterCell::new();
-
         let imm_parsed_queries: Vec<_> = queries
             .into_iter()
-            .map(|query| {
-                to_parsed_query(query, |token| mmap_index.get_token_id(&token, &hw_counter))
-            })
+            .map(|query| to_parsed_query(query, |token| mmap_index.get_token_id(&token, &hw_counter)))
             .collect();
 
         for (mut_query, imm_query) in mut_parsed_queries
