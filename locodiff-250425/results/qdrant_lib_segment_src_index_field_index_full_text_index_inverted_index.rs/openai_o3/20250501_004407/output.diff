--- qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual)@@ -75,7 +75,6 @@             };
             document_tokens.push(vocab_idx);
         }
-
         Document::new(document_tokens)
     }
 
@@ -88,14 +87,17 @@ 
     fn remove_document(&mut self, idx: PointOffsetType) -> bool;
 
-    fn filter<'a>(
-        &'a self,
-        query: ParsedQuery,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
-
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn filter(
+        &self,
+        query: &ParsedQuery,
+        hw_counter: &HardwareCounterCell,
+    ) -> Box<dyn Iterator<Item = PointOffsetType> + '_>;
+
+    fn get_posting_len(
+        &self,
+        token_id: TokenId,
+        hw_counter: &HardwareCounterCell,
+    ) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -202,8 +204,8 @@     use std::collections::BTreeSet;
 
     use common::counter::hardware_counter::HardwareCounterCell;
+    use rand::seq::SliceRandom;
     use rand::Rng;
-    use rand::seq::SliceRandom;
     use rstest::rstest;
 
     use super::{InvertedIndex, ParsedQuery, TokenId};
@@ -310,7 +312,7 @@     #[test]
     fn test_immutable_to_mmap(#[case] indexed_count: u32, #[case] deleted_count: u32) {
         let mutable = mutable_inverted_index(indexed_count, deleted_count);
-        let immutable = ImmutableInvertedIndex::from(mutable);
+        let immutable = ImmutableInvertedIndex::from(mutable.clone());
 
         let path = tempfile::tempdir().unwrap().into_path();
 
