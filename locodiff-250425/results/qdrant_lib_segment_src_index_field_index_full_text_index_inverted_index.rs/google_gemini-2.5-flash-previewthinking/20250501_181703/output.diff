
index a2b4b430..ad4df6f2 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected):tmp/tmprfdf4kmw_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual):tmp/tmpgcpgfawl_actual.txt	
@@ -1,6 +1,8 @@
 use std::collections::{BTreeSet, HashMap};
 
+#[allow(unused_imports)] // This import is used in tests and trait methods
 use common::counter::hardware_counter::HardwareCounterCell;
+
 use common::types::PointOffsetType;
 use serde::{Deserialize, Serialize};
 
@@ -8,6 +10,10 @@ use crate::common::operation_error::OperationResult;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition, PrimaryCondition};
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
+use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
+use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
+
+
 pub type TokenId = u32;
 
 #[derive(Default, Serialize, Deserialize, Debug, Clone)]
@@ -57,26 +63,35 @@ impl ParsedQuery {
     }
 }
 
+// This helper function is used by the default trait method `document_from_tokens`
+pub fn document_from_tokens_impl(
+    vocab: &mut HashMap<String, TokenId>,
+    tokens: &BTreeSet<String>,
+) -> Document {
+    let mut document_tokens = vec![];
+    for token in tokens {
+        // check if in vocab
+        let vocab_idx = match vocab.get(token) {
+            Some(&idx) => idx,
+            None => {
+                let next_token_id = vocab.len() as TokenId;
+                 vocab.insert(token.to_string(), next_token_id);
+                next_token_id
+            }
+        };
+        document_tokens.push(vocab_idx);
+    }
+
+    Document::new(document_tokens)
+}
+
+
 pub trait InvertedIndex {
     fn get_vocab_mut(&mut self) -> &mut HashMap<String, TokenId>;
 
     fn document_from_tokens(&mut self, tokens: &BTreeSet<String>) -> Document {
         let vocab = self.get_vocab_mut();
-        let mut document_tokens = vec![];
-        for token in tokens {
-            // check if in vocab
-            let vocab_idx = match vocab.get(token) {
-                Some(&idx) => idx,
-                None => {
-                    let next_token_id = vocab.len() as TokenId;
-                    vocab.insert(token.to_string(), next_token_id);
-                    next_token_id
-                }
-            };
-            document_tokens.push(vocab_idx);
-        }
-
-        Document::new(document_tokens)
+        document_from_tokens_impl(vocab, tokens)
     }
 
     fn index_document(
@@ -94,8 +109,11 @@ pub trait InvertedIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn get_posting_len(
+        &self,
+        token_id: TokenId,
+        hw_counter: &HardwareCounterCell,
+    ) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -185,7 +203,6 @@ pub trait InvertedIndex {
         &self,
         parsed_query: &ParsedQuery,
         point_id: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
     ) -> bool;
 
     fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
@@ -197,20 +214,41 @@ pub trait InvertedIndex {
     fn get_token_id(&self, token: &str, hw_counter: &HardwareCounterCell) -> Option<TokenId>;
 }
 
+
+// The enum itself is defined in this file and implements the trait. The impl block is not here.
+pub enum InvertedIndex {
+    Mutable(MutableInvertedIndex),
+    Immutable(ImmutableInvertedIndex),
+}
+
+impl InvertedIndex {
+    pub fn new(is_appendable: bool) -> InvertedIndex {
+        if is_appendable {
+            InvertedIndex::Mutable(MutableInvertedIndex::default())
+        } else {
+            InvertedIndex::Immutable(ImmutableInvertedIndex::default())
+        }
+    }
+}
+
+
 #[cfg(test)]
 mod tests {
     use std::collections::BTreeSet;
+    use std::path::Path;
 
     use common::counter::hardware_counter::HardwareCounterCell;
     use rand::Rng;
     use rand::seq::SliceRandom;
     use rstest::rstest;
 
-    use super::{InvertedIndex, ParsedQuery, TokenId};
     use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
     use crate::index::field_index::full_text_index::mmap_inverted_index::MmapInvertedIndex;
     use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
 
+    // Import types from the parent module explicitly
+    use super::{Document, ParsedQuery, TokenId, document_from_tokens_impl};
+
     fn generate_word() -> String {
         let mut rng = rand::rng();
 
@@ -236,17 +274,18 @@ mod tests {
         ParsedQuery { tokens }
     }
 
+    // mutable_inverted_index is a helper to generate a MutableInvertedIndex
     fn mutable_inverted_index(indexed_count: u32, deleted_count: u32) -> MutableInvertedIndex {
         let mut index = MutableInvertedIndex::default();
 
-        let hw_counter = HardwareCounterCell::new();
+        let hw_counter = HardwareCounterCell::new(); // Needed for index_document
 
         for idx in 0..indexed_count {
             // Generate 10 tot 30-word documents
             let doc_len = rand::rng().random_range(10..=30);
             let tokens: BTreeSet<String> = (0..doc_len).map(|_| generate_word()).collect();
-            let document = index.document_from_tokens(&tokens);
-            index.index_document(idx, document, &hw_counter).unwrap();
+            let document = document_from_tokens_impl(&mut index.vocab, &tokens); // Use the helper function
+            index.index_document(idx, document, &hw_counter).unwrap(); // Pass hw_counter
         }
 
         // Remove some points
@@ -263,12 +302,14 @@ mod tests {
     fn test_mutable_to_immutable() {
         let mutable = mutable_inverted_index(2000, 400);
 
-        let immutable = ImmutableInvertedIndex::from(mutable.clone());
+        let immutable = ImmutableInvertedIndex::from(mutable.clone()); // Immutable passed by cloned value
 
         assert!(immutable.vocab.len() < mutable.vocab.len());
         assert!(immutable.postings.len() < mutable.postings.len());
         assert!(!immutable.vocab.is_empty());
 
+        let hw_counter = HardwareCounterCell::new(); // Needed for posting iter/reader
+
         // Check that new vocabulary token ids leads to the same posting lists
         assert!({
             immutable.vocab.iter().all(|(key, new_token)| {
@@ -289,10 +330,10 @@ mod tests {
 
                 let new_contains_orig = orig_posting
                     .iter()
-                    .all(|point_id| new_posting.reader().contains(point_id));
+                    .all(|point_id| new_posting.reader().contains(point_id)); // Use reader().contains() implies CompressedPostingList has a reader() method
 
                 let orig_contains_new = new_posting
-                    .iter()
+                    .iter() // hw_counter removed from iter in 56a7cfdb205f90df28d2816d9e8ef6251fc517a2
                     .all(|point_id| orig_posting.contains(point_id));
 
                 new_contains_orig && orig_contains_new
@@ -307,44 +348,48 @@ mod tests {
     #[case(1111, 0)]
     #[case(10, 2)]
     #[case(0, 0)]
-    #[test]
     fn test_immutable_to_mmap(#[case] indexed_count: u32, #[case] deleted_count: u32) {
         let mutable = mutable_inverted_index(indexed_count, deleted_count);
         let immutable = ImmutableInvertedIndex::from(mutable);
 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable.clone()).unwrap();
+        // Ensure the directory exists for Mmap creation
+        std::fs::create_dir_all(&path).unwrap();
 
-        let hw_counter = HardwareCounterCell::new();
+        MmapInvertedIndex::create(&path, immutable.clone()).unwrap(); // Immutable passed by cloned value
 
-        let mmap = MmapInvertedIndex::open(path, false).unwrap();
+        let hw_counter = HardwareCounterCell::new(); // Needed for mmap interaction
+
+        let mmap = MmapInvertedIndex::open(&path, false).unwrap(); // Takes path and populate bool
 
         // Check same vocabulary
         for (token, token_id) in immutable.vocab.iter() {
-            assert_eq!(mmap.get_token_id(token, &hw_counter), Some(*token_id));
+            assert_eq!(mmap.get_token_id(token, &hw_counter), Some(*token_id)); // Pass hw_counter
         }
 
         // Check same postings
         for (token_id, posting) in immutable.postings.iter().enumerate() {
-            let chunk_reader = mmap.postings.get(token_id as u32, &hw_counter).unwrap();
+            let chunk_reader = mmap.postings.get(token_id as u32, &hw_counter).unwrap(); // Pass hw_counter
 
-            for point_id in posting.iter() {
+            for point_id in posting.iter() { // hw_counter removed from iter in 56a7cfdb205f90df28d2816d9e8ef6251fc517a2
                 assert!(chunk_reader.contains(point_id));
             }
         }
 
         for (point_id, count) in immutable.point_to_tokens_count.iter().enumerate() {
             // Check same deleted points
+            // Check size_of PointOffsetType vs u32 logic here. MmapBitSlice uses u32 index.
             assert_eq!(
-                mmap.deleted_points.get(point_id).unwrap(),
+                mmap.deleted_points.get(point_id as u32),
                 count.is_none(),
                 "point_id: {point_id}"
             );
 
             // Check same count
+            // MmapVector takes u32 index
             assert_eq!(
-                *mmap.point_to_tokens_count.get(point_id).unwrap(),
+                *mmap.point_to_tokens_count.get(point_id as u32),
                 count.unwrap_or(0)
             );
         }
@@ -359,13 +404,18 @@ mod tests {
         let deleted_count = 500;
 
         let mut mutable = mutable_inverted_index(indexed_count, deleted_count);
-        let immutable = ImmutableInvertedIndex::from(mutable.clone());
+        let immutable = ImmutableInvertedIndex::from(mutable.clone()); // Immutable passed by cloned value
 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable).unwrap();
+        // Ensure the directory exists for Mmap creation
+        std::fs::create_dir_all(&path).unwrap();
+
+        MmapInvertedIndex::create(&path, immutable).unwrap(); // Immutable passed by value
 
-        let mut mmap_index = MmapInvertedIndex::open(path, false).unwrap();
+        let hw_counter = HardwareCounterCell::new(); // Needed for mmap interaction
+
+        let mut mmap_index = MmapInvertedIndex::open(&path, false).unwrap(); // Takes path and populate bool
 
         let queries: Vec<_> = (0..100).map(|_| generate_query()).collect();
 
@@ -375,12 +425,10 @@ mod tests {
             .map(|query| to_parsed_query(query, |token| mutable.vocab.get(&token).copied()))
             .collect();
 
-        let hw_counter = HardwareCounterCell::new();
-
         let imm_parsed_queries: Vec<_> = queries
             .into_iter()
             .map(|query| {
-                to_parsed_query(query, |token| mmap_index.get_token_id(&token, &hw_counter))
+                to_parsed_query(query, |token| mmap_index.get_token_id(&token, &hw_counter)) // Pass hw_counter
             })
             .collect();
 
@@ -389,9 +437,9 @@ mod tests {
             .cloned()
             .zip(imm_parsed_queries.iter().cloned())
         {
-            let mut_filtered = mutable.filter(mut_query, &hw_counter).collect::<Vec<_>>();
+            let mut_filtered = mutable.filter(mut_query, &hw_counter).collect::<Vec<_>>(); // Pass hw_counter, query by value
             let imm_filtered = mmap_index
-                .filter(imm_query, &hw_counter)
+                .filter(imm_query, &hw_counter) // Pass hw_counter, query by value
                 .collect::<Vec<_>>();
 
             assert_eq!(mut_filtered, imm_filtered);
@@ -405,7 +453,7 @@ mod tests {
 
         for point_id in &points_to_delete {
             mutable.remove_document(*point_id);
-            mmap_index.remove_document(*point_id);
+            mmap_index.remove_document(*point_id); // mmap_index removes document
         }
 
         // Check congruence after deletion
@@ -415,9 +463,9 @@ mod tests {
             .cloned()
             .zip(imm_parsed_queries.iter().cloned())
         {
-            let mut_filtered = mutable.filter(mut_query, &hw_counter).collect::<Vec<_>>();
+            let mut_filtered = mutable.filter(mut_query, &hw_counter).collect::<Vec<_>>(); // Pass hw_counter, query by value
             let imm_filtered = mmap_index
-                .filter(imm_query, &hw_counter)
+                .filter(imm_query, &hw_counter) // Pass hw_counter, query by value
                 .collect::<Vec<_>>();
 
             assert_eq!(mut_filtered, imm_filtered);
