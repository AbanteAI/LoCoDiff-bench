--- qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual)@@ -1,10 +1,8 @@ use std::collections::{BTreeSet, HashMap};
 
-use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde::{Deserialize, Serialize};
 
-use crate::common::operation_error::OperationResult;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition, PrimaryCondition};
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
@@ -75,7 +73,6 @@             };
             document_tokens.push(vocab_idx);
         }
-
         Document::new(document_tokens)
     }
 
@@ -83,25 +80,24 @@         &mut self,
         idx: PointOffsetType,
         document: Document,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()>;
+        // was: hw_counter: &HardwareCounterCell,
+    ) -> crate::common::operation_error::OperationResult<()>;
 
     fn remove_document(&mut self, idx: PointOffsetType) -> bool;
 
     fn filter<'a>(
         &'a self,
         query: ParsedQuery,
-        hw_counter: &'a HardwareCounterCell,
+        // was: hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn get_posting_len(&self, token_id: TokenId /*, hw_counter: &HardwareCounterCell */) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
         query: &ParsedQuery,
         condition: &FieldCondition,
-        hw_counter: &HardwareCounterCell,
+        // was: hw_counter: &HardwareCounterCell,
     ) -> CardinalityEstimation {
         let points_count = self.points_count();
 
@@ -110,7 +106,7 @@             .iter()
             .map(|&vocab_idx| match vocab_idx {
                 None => None,
-                Some(idx) => self.get_posting_len(idx, hw_counter),
+                Some(idx) => self.get_posting_len(idx),
             })
             .collect();
         if posting_lengths.is_none() || points_count == 0 {
@@ -185,7 +181,7 @@         &self,
         parsed_query: &ParsedQuery,
         point_id: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
+        // was: hw_counter: &HardwareCounterCell,
     ) -> bool;
 
     fn values_is_empty(&self, point_id: PointOffsetType) -> bool;
@@ -194,7 +190,7 @@ 
     fn points_count(&self) -> usize;
 
-    fn get_token_id(&self, token: &str, hw_counter: &HardwareCounterCell) -> Option<TokenId>;
+    fn get_token_id(&self, token: &str /*, hw_counter: &HardwareCounterCell */) -> Option<TokenId>;
 }
 
 #[cfg(test)]
@@ -310,7 +306,7 @@     #[test]
     fn test_immutable_to_mmap(#[case] indexed_count: u32, #[case] deleted_count: u32) {
         let mutable = mutable_inverted_index(indexed_count, deleted_count);
-        let immutable = ImmutableInvertedIndex::from(mutable);
+        let immutable = ImmutableInvertedIndex::from(mutable.clone());
 
         let path = tempfile::tempdir().unwrap().into_path();
 
