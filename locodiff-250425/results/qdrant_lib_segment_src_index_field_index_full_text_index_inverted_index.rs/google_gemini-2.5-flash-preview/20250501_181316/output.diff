--- qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual)@@ -1,10 +1,13 @@ use std::collections::{BTreeSet, HashMap};
+use std::mem::size_of;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use serde::{Deserialize, Serialize};
 
 use crate::common::operation_error::OperationResult;
+use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
+use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition, PrimaryCondition};
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
@@ -75,7 +78,6 @@             };
             document_tokens.push(vocab_idx);
         }
-
         Document::new(document_tokens)
     }
 
@@ -206,7 +208,7 @@     use rand::seq::SliceRandom;
     use rstest::rstest;
 
-    use super::{InvertedIndex, ParsedQuery, TokenId};
+    use super::{Document, InvertedIndex, ParsedQuery, TokenId};
     use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
     use crate::index::field_index::full_text_index::mmap_inverted_index::MmapInvertedIndex;
     use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
@@ -252,52 +254,11 @@         // Remove some points
         let mut points_to_delete = (0..indexed_count).collect::<Vec<_>>();
         points_to_delete.shuffle(&mut rand::rng());
-        for idx in &points_to_delete[..deleted_count as usize] {
+        for idx in points_to_delete.iter().take(deleted_count as usize) {
             index.remove_document(*idx);
         }
 
         index
-    }
-
-    #[test]
-    fn test_mutable_to_immutable() {
-        let mutable = mutable_inverted_index(2000, 400);
-
-        let immutable = ImmutableInvertedIndex::from(mutable.clone());
-
-        assert!(immutable.vocab.len() < mutable.vocab.len());
-        assert!(immutable.postings.len() < mutable.postings.len());
-        assert!(!immutable.vocab.is_empty());
-
-        // Check that new vocabulary token ids leads to the same posting lists
-        assert!({
-            immutable.vocab.iter().all(|(key, new_token)| {
-                let new_posting = immutable
-                    .postings
-                    .get(*new_token as usize)
-                    .cloned()
-                    .unwrap();
-
-                let orig_token = mutable.vocab.get(key).unwrap();
-
-                let orig_posting = mutable
-                    .postings
-                    .get(*orig_token as usize)
-                    .cloned()
-                    .unwrap()
-                    .unwrap();
-
-                let new_contains_orig = orig_posting
-                    .iter()
-                    .all(|point_id| new_posting.reader().contains(point_id));
-
-                let orig_contains_new = new_posting
-                    .iter()
-                    .all(|point_id| orig_posting.contains(point_id));
-
-                new_contains_orig && orig_contains_new
-            })
-        });
     }
 
     #[rstest]
@@ -307,10 +268,9 @@     #[case(1111, 0)]
     #[case(10, 2)]
     #[case(0, 0)]
-    #[test]
     fn test_immutable_to_mmap(#[case] indexed_count: u32, #[case] deleted_count: u32) {
         let mutable = mutable_inverted_index(indexed_count, deleted_count);
-        let immutable = ImmutableInvertedIndex::from(mutable);
+        let immutable = ImmutableInvertedIndex::from(mutable.clone());
 
         let path = tempfile::tempdir().unwrap().into_path();
 
