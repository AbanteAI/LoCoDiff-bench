--- qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual)@@ -5,6 +5,9 @@ use serde::{Deserialize, Serialize};
 
 use crate::common::operation_error::OperationResult;
+use crate::index::field_index::full_text_index::immutable_inverted_index::ImmutableInvertedIndex;
+use crate::index::field_index::full_text_index::mmap_inverted_index::MmapInvertedIndex;
+use crate::index::field_index::full_text_index::mutable_inverted_index::MutableInvertedIndex;
 use crate::index::field_index::{CardinalityEstimation, PayloadBlockCondition, PrimaryCondition};
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
@@ -21,20 +24,20 @@         Self { tokens }
     }
 
+    pub fn is_empty(&self) -> bool {
+        self.tokens.is_empty()
+    }
+
+    pub fn tokens(&self) -> &[TokenId] {
+        &self.tokens
+    }
+
+    pub fn check(&self, token: TokenId) -> bool {
+        self.tokens.binary_search(&token).is_ok()
+    }
+
     pub fn len(&self) -> usize {
         self.tokens.len()
-    }
-
-    pub fn is_empty(&self) -> bool {
-        self.tokens.is_empty()
-    }
-
-    pub fn tokens(&self) -> &[TokenId] {
-        &self.tokens
-    }
-
-    pub fn check(&self, token: TokenId) -> bool {
-        self.tokens.binary_search(&token).is_ok()
     }
 }
 
@@ -69,7 +72,7 @@                 Some(&idx) => idx,
                 None => {
                     let next_token_id = vocab.len() as TokenId;
-                    vocab.insert(token.to_string(), next_token_id);
+                    vocab.insert(token.clone(), next_token_id);
                     next_token_id
                 }
             };
@@ -95,7 +98,7 @@     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
     fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+        -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -167,7 +170,17 @@         let map_filter_condition = move |(token, postings_len): (&str, usize)| {
             if postings_len >= threshold {
                 Some(PayloadBlockCondition {
-                    condition: FieldCondition::new_match(key.clone(), Match::new_text(token)),
+                    condition: FieldCondition {
+                        key: key.clone(),
+                        r#match: Some(Match::Text(MatchText {
+                            text: token.to_string(),
+                        })),
+                        range: None,
+                        geo_bounding_box: None,
+                        geo_radius: None,
+                        geo_polygon: None,
+                        values_count: None,
+                    },
                     cardinality: postings_len,
                 })
             } else {
@@ -175,8 +188,6 @@             }
         };
 
-        // It might be very hard to predict possible combinations of conditions,
-        // so we only build it for individual tokens
         self.vocab_with_postings_len_iter()
             .filter_map(map_filter_condition)
     }
@@ -314,10 +325,9 @@ 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable.clone()).unwrap();
+        MmapInvertedIndex::create(path.clone(), immutable).unwrap();
 
         let hw_counter = HardwareCounterCell::new();
-
         let mmap = MmapInvertedIndex::open(path, false).unwrap();
 
         // Check same vocabulary
@@ -358,13 +368,14 @@         let indexed_count = 10000;
         let deleted_count = 500;
 
-        let mut mutable = mutable_inverted_index(indexed_count, deleted_count);
+        let mutable = mutable_inverted_index(indexed_count, deleted_count);
         let immutable = ImmutableInvertedIndex::from(mutable.clone());
 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable).unwrap();
-
+        MmapInvertedIndex::create(path.clone(), immutable.clone()).unwrap();
+
+        let hw_counter = HardwareCounterCell::new();
         let mut mmap_index = MmapInvertedIndex::open(path, false).unwrap();
 
         let queries: Vec<_> = (0..100).map(|_| generate_query()).collect();
@@ -374,8 +385,6 @@             .into_iter()
             .map(|query| to_parsed_query(query, |token| mutable.vocab.get(&token).copied()))
             .collect();
-
-        let hw_counter = HardwareCounterCell::new();
 
         let imm_parsed_queries: Vec<_> = queries
             .into_iter()
