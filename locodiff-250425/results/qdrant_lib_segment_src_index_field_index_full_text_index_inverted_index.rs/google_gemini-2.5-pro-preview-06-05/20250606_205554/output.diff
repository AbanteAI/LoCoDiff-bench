
index a2b4b4303..85cb99345 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_expectedoutput.txt (expected):tmp/tmphd3ebc7l_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_inverted_index.rs_extracted.txt (actual):tmp/tmpldy4aa4p_actual.txt	
@@ -1,4 +1,5 @@
 use std::collections::{BTreeSet, HashMap};
+use std::mem::size_of;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
@@ -94,8 +95,11 @@ pub trait InvertedIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
-    fn get_posting_len(&self, token_id: TokenId, hw_counter: &HardwareCounterCell)
-    -> Option<usize>;
+    fn get_posting_len(
+        &self,
+        token_id: TokenId,
+        hw_counter: &HardwareCounterCell,
+    ) -> Option<usize>;
 
     fn estimate_cardinality(
         &self,
@@ -246,7 +250,9 @@ mod tests {
             let doc_len = rand::rng().random_range(10..=30);
             let tokens: BTreeSet<String> = (0..doc_len).map(|_| generate_word()).collect();
             let document = index.document_from_tokens(&tokens);
-            index.index_document(idx, document, &hw_counter).unwrap();
+            index
+                .index_document(idx, document, &hw_counter)
+                .unwrap();
         }
 
         // Remove some points
@@ -363,7 +369,7 @@ mod tests {
 
         let path = tempfile::tempdir().unwrap().into_path();
 
-        MmapInvertedIndex::create(path.clone(), immutable).unwrap();
+        MmapInvertedIndex::create(path.clone(), immutable.clone()).unwrap();
 
         let mut mmap_index = MmapInvertedIndex::open(path, false).unwrap();
 
