
index 80b84077..0e2f0f8e 100644
--- a/aider_tests_basic_test_reasoning.py_expectedoutput.txt (expected):tmp/tmpseufv79b_expected.txt	
+++ b/aider_tests_basic_test_reasoning.py_extracted.txt (actual):tmp/tmpbm33s58s_actual.txt	
@@ -245,6 +245,10 @@ class TestReasoning(unittest.TestCase):
             self.assertIn(reasoning_content, output)
             self.assertIn(main_content, output)
 
+            # Verify that partial_response_content only contains the main content
+            coder.remove_reasoning_content()
+            self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
+
             # Ensure proper order: reasoning first, then main content
             reasoning_pos = output.find(reasoning_content)
             main_pos = output.find(main_content)
@@ -252,10 +256,6 @@ class TestReasoning(unittest.TestCase):
                 reasoning_pos, main_pos, "Reasoning content should appear before main content"
             )
 
-            # Verify that partial_response_content only contains the main content
-            coder.remove_reasoning_content()
-            self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
-
     def test_send_with_think_tags_stream(self):
         """Test that streaming with <think> tags is properly processed and formatted."""
         # Setup IO with pretty output for streaming
@@ -586,11 +586,17 @@ End"""
 
         # Mock the completion response
         mock_response = MagicMock()
-        mock_response.choices = [MagicMock(message=MagicMock(content="""Here is some text
+        mock_response.choices = [
+            MagicMock(
+                message=MagicMock(
+                    content="""Here is some text
 <think>
 This reasoning should be removed
 </think>
-And this text should remain"""))]
+And this text should remain"""
+                )
+            )
+        ]
         mock_completion.return_value = mock_response
 
         messages = [{"role": "user", "content": "test"}]
