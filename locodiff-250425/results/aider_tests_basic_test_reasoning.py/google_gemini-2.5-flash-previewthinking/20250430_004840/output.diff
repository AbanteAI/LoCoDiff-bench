--- aider_tests_basic_test_reasoning.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_reasoning.py_extracted.txt (actual)@@ -245,16 +245,16 @@             self.assertIn(reasoning_content, output)
             self.assertIn(main_content, output)
 
+            # Verify that partial_response_content only contains the main content
+            coder.remove_reasoning_content()
+            self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
+
             # Ensure proper order: reasoning first, then main content
             reasoning_pos = output.find(reasoning_content)
             main_pos = output.find(main_content)
             self.assertLess(
                 reasoning_pos, main_pos, "Reasoning content should appear before main content"
             )
-
-            # Verify that partial_response_content only contains the main content
-            coder.remove_reasoning_content()
-            self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
 
     def test_send_with_think_tags_stream(self):
         """Test that streaming with <think> tags is properly processed and formatted."""
@@ -323,7 +323,10 @@         mock_hash.hexdigest.return_value = "mock_hash_digest"
 
         # Mock the model's send_completion to return the hash and completion
-        with patch.object(model, "send_completion", return_value=(mock_hash, chunks)):
+        with (
+            patch.object(model, "send_completion", return_value=(mock_hash, chunks)),
+            patch.object(model, "token_count", return_value=10),
+        ):  # Mock token count to avoid serialization issues
             # Set mdstream directly on the coder object
             coder.mdstream = mock_mdstream
 
@@ -363,6 +366,10 @@             self.assertLess(
                 reasoning_pos, main_pos, "Reasoning content should appear before main content"
             )
+
+            # Verify that partial_response_content only contains the main content
+            coder.remove_reasoning_content()
+            self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
 
     def test_remove_reasoning_content(self):
         """Test the remove_reasoning_content function from reasoning_tags module."""
