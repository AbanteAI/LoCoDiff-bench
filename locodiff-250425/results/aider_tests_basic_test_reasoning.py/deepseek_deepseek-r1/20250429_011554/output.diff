--- aider_tests_basic_test_reasoning.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_reasoning.py_extracted.txt (actual)@@ -48,6 +48,16 @@             # Call send with a simple message
             messages = [{"role": "user", "content": "test prompt"}]
             list(coder.send(messages))
+
+            # Format the response as it would happen in the normal flow
+            coder.partial_response_content = mock_completion.content
+            coder.partial_response_reasoning_content = mock_completion.reasoning_content
+            output = coder.get_multi_response_content_in_progress(final=True)
+
+            # Manually call ai_output to simulate the normal flow
+            coder.io.ai_output(output)
+
+            print(coder.partial_response_content)
 
             # Now verify ai_output was called with the right content
             io.assistant_output.assert_called_once()
@@ -188,26 +198,7 @@             self.assertEqual(coder.partial_response_content.strip(), expected_content)
 
     def test_send_with_think_tags(self):
-        """Test that <think> tags are properly processed and formatted."""
-        # Setup IO with no pretty
-        io = InputOutput(pretty=False)
-        io.assistant_output = MagicMock()
-
-        # Setup model and coder
-        model = Model("gpt-3.5-turbo")
-        model.reasoning_tag = "think"  # Set to remove <think> tags
-        coder = Coder.create(model, None, io=io, stream=False)
-
-        # Test data
-        reasoning_content = "My step-by-step reasoning process"
-        main_content = "Final answer after reasoning"
-
-        # Create content with think tags
-        combined_content = f"""<think>
-{reasoning_content}
-</think>
-
-{main_content}"""
+        """Test that {main_content}"""
 
         # Mock completion response with think tags in content
         class MockCompletion:
@@ -257,59 +248,7 @@             self.assertEqual(coder.partial_response_content.strip(), main_content.strip())
 
     def test_send_with_think_tags_stream(self):
-        """Test that streaming with <think> tags is properly processed and formatted."""
-        # Setup IO with pretty output for streaming
-        io = InputOutput(pretty=True)
-        mock_mdstream = MagicMock()
-        io.get_assistant_mdstream = MagicMock(return_value=mock_mdstream)
-
-        # Setup model and coder
-        model = Model("gpt-3.5-turbo")
-        model.reasoning_tag = "think"  # Set to remove <think> tags
-        coder = Coder.create(model, None, io=io, stream=True)
-
-        # Ensure the coder shows pretty output
-        coder.show_pretty = MagicMock(return_value=True)
-
-        # Mock streaming response chunks
-        class MockStreamingChunk:
-            def __init__(
-                self, content=None, reasoning_content=None, reasoning=None, finish_reason=None
-            ):
-                self.choices = [MagicMock()]
-                self.choices[0].delta = MagicMock()
-                self.choices[0].finish_reason = finish_reason
-
-                # Set content if provided
-                if content is not None:
-                    self.choices[0].delta.content = content
-                else:
-                    # Need to handle attribute access that would raise AttributeError
-                    delattr(self.choices[0].delta, "content")
-
-                # Set reasoning_content if provided
-                if reasoning_content is not None:
-                    self.choices[0].delta.reasoning_content = reasoning_content
-                else:
-                    # Need to handle attribute access that would raise AttributeError
-                    delattr(self.choices[0].delta, "reasoning_content")
-
-                # Set reasoning if provided
-                if reasoning is not None:
-                    self.choices[0].delta.reasoning = reasoning
-                else:
-                    # Need to handle attribute access that would raise AttributeError
-                    delattr(self.choices[0].delta, "reasoning")
-
-        # Create chunks to simulate streaming with think tags
-        chunks = [
-            # Start with open think tag
-            MockStreamingChunk(content="<think>\n", reasoning_content=None),
-            # Reasoning content inside think tags
-            MockStreamingChunk(content="My step-by-step ", reasoning_content=None),
-            MockStreamingChunk(content="reasoning process\n", reasoning_content=None),
-            # Close think tag
-            MockStreamingChunk(content="</think>\n\n", reasoning_content=None),
+        """Test that streaming with \n\n", reasoning_content=None),
             # Main content
             MockStreamingChunk(content="Final ", reasoning_content=None),
             MockStreamingChunk(content="answer ", reasoning_content=None),
@@ -323,7 +262,10 @@         mock_hash.hexdigest.return_value = "mock_hash_digest"
 
         # Mock the model's send_completion to return the hash and completion
-        with patch.object(model, "send_completion", return_value=(mock_hash, chunks)):
+        with (
+            patch.object(model, "send_completion", return_value=(mock_hash, chunks)),
+            patch.object(model, "token_count", return_value=10),
+        ):  # Mock token count to avoid serialization issues
             # Set mdstream directly on the coder object
             coder.mdstream = mock_mdstream
 
@@ -364,18 +306,19 @@                 reasoning_pos, main_pos, "Reasoning content should appear before main content"
             )
 
+            # Verify that partial_response_content only contains the main content
+            coder.remove_reasoning_content()
+            expected_content = "Final answer after reasoning"
+            self.assertEqual(coder.partial_response_content.strip(), expected_content)
+
     def test_remove_reasoning_content(self):
         """Test the remove_reasoning_content function from reasoning_tags module."""
         # Test with no removal configured
-        text = "Here is <think>some reasoning</think> and regular text"
+        text = "Here is and regular text"
         self.assertEqual(remove_reasoning_content(text, None), text)
 
         # Test with removal configured
         text = """Here is some text
-<think>
-This is reasoning that should be removed
-Over multiple lines
-</think>
 And more text here"""
         expected = """Here is some text
 
@@ -384,9 +327,7 @@ 
         # Test with multiple reasoning blocks
         text = """Start
-<think>Block 1</think>
 Middle
-<think>Block 2</think>
 End"""
         expected = """Start
 
@@ -586,11 +527,14 @@ 
         # Mock the completion response
         mock_response = MagicMock()
-        mock_response.choices = [MagicMock(message=MagicMock(content="""Here is some text
-<think>
-This reasoning should be removed
-</think>
-And this text should remain"""))]
+        mock_response.choices = [
+            MagicMock(
+                message=MagicMock(
+                    content="""Here is some text
+And this text should remain"""
+                )
+            )
+        ]
         mock_completion.return_value = mock_response
 
         messages = [{"role": "user", "content": "test"}]
