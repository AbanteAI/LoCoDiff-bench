
index 80b84077..a8eb8b12 100644
--- a/aider_tests_basic_test_reasoning.py_expectedoutput.txt (expected):tmp/tmpngjt78sk_expected.txt	
+++ b/aider_tests_basic_test_reasoning.py_extracted.txt (actual):tmp/tmp108sp9cz_actual.txt	
@@ -187,6 +187,9 @@ class TestReasoning(unittest.TestCase):
             expected_content = "Final answer after reasoning"
             self.assertEqual(coder.partial_response_content.strip(), expected_content)
 
+            # Verify that partial_response_content only contains the main content
+            self.assertEqual(coder.partial_response_content.strip(), "Final answer after reasoning")
+
     def test_send_with_think_tags(self):
         """Test that <think> tags are properly processed and formatted."""
         # Setup IO with no pretty
@@ -323,7 +326,10 @@ class TestReasoning(unittest.TestCase):
         mock_hash.hexdigest.return_value = "mock_hash_digest"
 
         # Mock the model's send_completion to return the hash and completion
-        with patch.object(model, "send_completion", return_value=(mock_hash, chunks)):
+        with (
+            patch.object(model, "send_completion", return_value=(mock_hash, chunks)),
+            patch.object(model, "token_count", return_value=10),
+        ):  # Mock token count to avoid serialization issues
             # Set mdstream directly on the coder object
             coder.mdstream = mock_mdstream
 
@@ -586,11 +592,17 @@ End"""
 
         # Mock the completion response
         mock_response = MagicMock()
-        mock_response.choices = [MagicMock(message=MagicMock(content="""Here is some text
+        mock_response.choices = [
+            MagicMock(
+                message=MagicMock(
+                    content="""Here is some text
 <think>
 This reasoning should be removed
 </think>
-And this text should remain"""))]
+And this text should remain"""
+                )
+            )
+        ]
         mock_completion.return_value = mock_response
 
         messages = [{"role": "user", "content": "test"}]
