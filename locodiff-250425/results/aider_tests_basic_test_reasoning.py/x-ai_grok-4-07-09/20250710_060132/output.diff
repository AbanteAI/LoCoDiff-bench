
index 80b840774..b9a3faa79 100644
--- a/aider_tests_basic_test_reasoning.py_expectedoutput.txt (expected):tmp/tmppvc6ol9a_expected.txt	
+++ b/aider_tests_basic_test_reasoning.py_extracted.txt (actual):tmp/tmp287pie_c_actual.txt	
@@ -31,6 +31,7 @@ class TestReasoning(unittest.TestCase):
         class MockCompletion:
             def __init__(self, content, reasoning_content):
                 self.content = content
+                self.reasoning_content = reasoning_content
                 # Add required attributes expected by show_send_output
                 self.choices = [MagicMock()]
                 self.choices[0].message.content = content
@@ -138,10 +139,7 @@ class TestReasoning(unittest.TestCase):
         mock_hash.hexdigest.return_value = "mock_hash_digest"
 
         # Mock the model's send_completion to return the hash and completion
-        with (
-            patch.object(model, "send_completion", return_value=(mock_hash, chunks)),
-            patch.object(model, "token_count", return_value=10),
-        ):  # Mock token count to avoid serialization issues
+        with patch.object(model, "send_completion", return_value=(mock_hash, chunks)):
             # Set mdstream directly on the coder object
             coder.mdstream = mock_mdstream
 
@@ -323,7 +321,10 @@ class TestReasoning(unittest.TestCase):
         mock_hash.hexdigest.return_value = "mock_hash_digest"
 
         # Mock the model's send_completion to return the hash and completion
-        with patch.object(model, "send_completion", return_value=(mock_hash, chunks)):
+        with (
+            patch.object(model, "send_completion", return_value=(mock_hash, chunks)),
+            patch.object(model, "token_count", return_value=10),
+        ):  # Mock token count to avoid serialization issues
             # Set mdstream directly on the coder object
             coder.mdstream = mock_mdstream
 
