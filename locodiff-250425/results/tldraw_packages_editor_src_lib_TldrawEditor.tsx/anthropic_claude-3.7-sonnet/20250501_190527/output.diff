
index fb7399b5..73af7276 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpvm4strik_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmp07vvmshz_actual.txt	
@@ -317,10 +317,7 @@ export const TldrawEditor = memo(function TldrawEditor({
 })
 
 function TldrawEditorWithOwnStore(
-	props: Required<
-		TldrawEditorProps & { store: undefined; user: TLUser },
-		'shapeUtils' | 'bindingUtils' | 'tools'
-	>
+	props: Required<TldrawEditorProps & { store: undefined; user: TLUser }, 'shapeUtils' | 'bindingUtils' | 'tools'>
 ) {
 	const {
 		defaultName,
@@ -377,7 +374,8 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 			throw store.error
 		}
 		case 'loading': {
-			return LoadingScreen ? <LoadingScreen /> : null
+			const LoadingScreen = rest.components?.LoadingScreen ?? DefaultLoadingScreen
+			return <LoadingScreen />
 		}
 		case 'not-synced': {
 			break
@@ -465,7 +463,6 @@ function TldrawEditorWithReadyStore({
 				getContainer: () => container,
 				user,
 				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
@@ -529,22 +526,6 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
-
 	// For our examples site, we want autoFocus to be true on the examples site, but not
 	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
 	// overrides the `autoFocus` prop and prevents the editor from focusing immediately,
@@ -614,13 +595,29 @@ function TldrawEditorWithReadyStore({
 		)
 	}
 
+	const crashingError = useSyncExternalStore(
+		useCallback(
+			(onStoreChange) => {
+				if (editor) {
+					editor.on('crash', onStoreChange)
+					return () => editor.off('crash', onStoreChange)
+				}
+				return () => {
+					// noop
+				}
+			},
+			[editor]
+		),
+		() => editor?.getCrashingError() ?? null
+	)
+
+	const { Canvas } = useEditorComponents()
+
+	if (!editor) {
+		return <div className="tl-canvas" ref={canvasRef} />
+	}
+
 	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
 		<OptionalErrorBoundary
 			fallback={ErrorFallback as any}
 			onError={(error) =>
