
index fb7399b5c..db35a48df 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpeq0sqm0s_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpfgzvh231_actual.txt	
@@ -14,11 +14,11 @@ import React, {
 } from 'react'
 
 import classNames from 'classnames'
+import { TLDeepLinkOptions } from '..'
 import { version } from '../version'
 import { OptionalErrorBoundary } from './components/ErrorBoundary'
 import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
 import { TLEditorSnapshot } from './config/TLEditorSnapshot'
-import { TLStoreBaseOptions } from './config/createTLStore'
 import { TLUser, createTLUser } from './config/createTLUser'
 import { TLAnyBindingUtilConstructor } from './config/defaultBindings'
 import { TLAnyShapeUtilConstructor } from './config/defaultShapes'
@@ -28,7 +28,7 @@ import { TLCameraOptions } from './editor/types/misc-types'
 import { ContainerProvider, useContainer } from './hooks/useContainer'
 import { useCursor } from './hooks/useCursor'
 import { useDarkMode } from './hooks/useDarkMode'
-import { EditorProvider, useEditor } from './hooks/useEditor'
+import { EditorContext, useEditor } from './hooks/useEditor'
 import {
 	EditorComponentsProvider,
 	TLEditorComponents,
@@ -43,14 +43,12 @@ import { useZoomCss } from './hooks/useZoomCss'
 import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
 import { TldrawOptions } from './options'
-import { TLDeepLinkOptions } from './utils/deepLinks'
 import { stopEventPropagation } from './utils/dom'
-import { TLTextOptions } from './utils/richText'
 import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'
 
 /**
  * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when passing in a
- * `TLStore` directly. If you would like tldraw to create a store for you, use
+ * {@link store#TLStore} directly. If you would like tldraw to create a store for you, use
  * {@link TldrawEditorWithoutStoreProps}.
  *
  * @public
@@ -64,12 +62,12 @@ export interface TldrawEditorWithStoreProps {
 
 /**
  * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when not passing in a
- * `TLStore` directly. If you would like to pass in a store directly, use
+ * {@link store#TLStore} directly. If you would like to pass in a store directly, use
  * {@link TldrawEditorWithStoreProps}.
  *
  * @public
  */
-export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
+export interface TldrawEditorWithoutStoreProps extends import('./config/createTLStore').TLStoreBaseOptions {
 	store?: undefined
 
 	/**
@@ -168,11 +166,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	cameraOptions?: Partial<TLCameraOptions>
 
-	/**
-	 * Text options for the editor.
-	 */
-	textOptions?: TLTextOptions
-
 	/**
 	 * Options for the editor.
 	 */
@@ -191,38 +184,9 @@ export interface TldrawEditorBaseProps {
 	/**
 	 * Predicate for whether or not a shape should be hidden.
 	 *
-	 * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
+	 * Hidden shapes will not render in the editor, and they will not be eligible for hit test...
 	 */
-	isShapeHidden?(shape: TLShape, editor: Editor): boolean
-
-	/**
-	 * Provides a way to hide shapes.
-	 *
-	 * Hidden shapes will not render in the editor, and they will not be eligible for hit test via
-	 * {@link Editor#getShapeAtPoint} and {@link Editor#getShapesAtPoint}. But otherwise they will
-	 * remain in the store and participate in all other operations.
-	 *
-	 * @example
-	 * ```ts
-	 * getShapeVisibility={(shape, editor) => shape.meta.hidden ? 'hidden' : 'inherit'}
-	 * ```
-	 *
-	 * - `'inherit' | undefined` - (default) The shape will be visible unless its parent is hidden.
-	 * - `'hidden'` - The shape will be hidden.
-	 * - `'visible'` - The shape will be visible.
-	 *
-	 * @param shape - The shape to check.
-	 * @param editor - The editor instance.
-	 */
-	getShapeVisibility?(
-		shape: TLShape,
-		editor: Editor
-	): 'visible' | 'hidden' | 'inherit' | null | undefined
-
-	/**
-	 * The URLs for the fonts to use in the editor.
-	 */
-	assetUrls?: { fonts?: { [key: string]: string | undefined } }
+	isShapeHidden?: (shape: TLShape) => boolean
 }
 
 /**
@@ -255,7 +219,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 	components,
 	className,
 	user: _user,
-	options: _options,
 	...rest
 }: TldrawEditorProps) {
 	const [container, setContainer] = useState<HTMLElement | null>(null)
@@ -273,7 +236,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 		bindingUtils: rest.bindingUtils ?? EMPTY_BINDING_UTILS_ARRAY,
 		tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
 		components,
-		options: useShallowObjectIdentity(_options),
 	}
 
 	return (
@@ -284,8 +246,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 			className={classNames(`${TL_CONTAINER_CLASS} tl-theme__light`, className)}
 			onPointerDown={stopEventPropagation}
 			tabIndex={-1}
-			role="application"
-			aria-label={_options?.branding ?? 'tldraw'}
 		>
 			<OptionalErrorBoundary
 				fallback={ErrorFallback}
@@ -332,7 +292,6 @@ function TldrawEditorWithOwnStore(
 		sessionId,
 		user,
 		assets,
-		migrations,
 	} = props
 
 	const syncedStore = useLocalStore({
@@ -344,7 +303,6 @@ function TldrawEditorWithOwnStore(
 		defaultName,
 		snapshot,
 		assets,
-		migrations,
 	})
 
 	return <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />
@@ -367,8 +325,6 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 		}
 	}, [container, user])
 
-	const { LoadingScreen } = useEditorComponents()
-
 	switch (store.status) {
 		case 'error': {
 			// for error handling, we fall back to the default error boundary.
@@ -377,6 +333,7 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 			throw store.error
 		}
 		case 'loading': {
+			const { LoadingScreen } = useEditorComponents()
 			return LoadingScreen ? <LoadingScreen /> : null
 		}
 		case 'not-synced': {
@@ -407,14 +364,9 @@ function TldrawEditorWithReadyStore({
 	autoFocus = true,
 	inferDarkMode,
 	cameraOptions,
-	textOptions,
 	options,
 	licenseKey,
 	deepLinks: _deepLinks,
-	// eslint-disable-next-line @typescript-eslint/no-deprecated
-	isShapeHidden,
-	getShapeVisibility,
-	assetUrls,
 }: Required<
 	TldrawEditorProps & {
 		store: TLStore
@@ -469,12 +421,8 @@ function TldrawEditorWithReadyStore({
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
-				textOptions,
 				options,
 				licenseKey,
-				isShapeHidden,
-				getShapeVisibility,
-				fontAssetUrls: assetUrls?.fonts,
 			})
 
 			editor.updateViewportScreenBounds(canvasRef.current ?? container)
@@ -498,21 +446,7 @@ function TldrawEditorWithReadyStore({
 			}
 		},
 		// if any of these change, we need to recreate the editor.
-		[
-			bindingUtils,
-			container,
-			options,
-			shapeUtils,
-			store,
-			tools,
-			user,
-			setEditor,
-			licenseKey,
-			isShapeHidden,
-			getShapeVisibility,
-			textOptions,
-			assetUrls,
-		]
+		[bindingUtils, container, options, shapeUtils, store, tools, user, setEditor, licenseKey]
 	)
 
 	useLayoutEffect(() => {
@@ -577,41 +511,10 @@ function TldrawEditorWithReadyStore({
 		[editor, autoFocus]
 	)
 
-	const [_fontLoadingState, setFontLoadingState] = useState<{
-		editor: Editor
-		isLoaded: boolean
-	} | null>(null)
-	let fontLoadingState = _fontLoadingState
-	if (editor !== fontLoadingState?.editor) {
-		fontLoadingState = null
-	}
-	useEffect(() => {
-		if (!editor) return
-		let isCancelled = false
-
-		setFontLoadingState({ editor, isLoaded: false })
-
-		editor.fonts
-			.loadRequiredFontsForCurrentPage(editor.options.maxFontsToLoadBeforeRender)
-			.finally(() => {
-				if (isCancelled) return
-				setFontLoadingState({ editor, isLoaded: true })
-			})
-
-		return () => {
-			isCancelled = true
-		}
-	}, [editor])
+	const { Canvas } = useEditorComponents()
 
-	const { Canvas, LoadingScreen } = useEditorComponents()
-
-	if (!editor || !fontLoadingState?.isLoaded) {
-		return (
-			<>
-				{LoadingScreen && <LoadingScreen />}
-				<div className="tl-canvas" ref={canvasRef} />
-			</>
-		)
+	if (!editor) {
+		return <div className="tl-canvas" ref={canvasRef} />
 	}
 
 	return (
@@ -622,7 +525,7 @@ function TldrawEditorWithReadyStore({
 		// document in the event of an error to reassure them that their work is
 		// not lost.
 		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
+			fallback={ErrorFallback}
 			onError={(error) =>
 				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
 			}
@@ -630,12 +533,12 @@ function TldrawEditorWithReadyStore({
 			{crashingError ? (
 				<Crash crashingError={crashingError} />
 			) : (
-				<EditorProvider editor={editor}>
+				<EditorContext.Provider value={editor}>
 					<Layout onMount={onMount}>
-						{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
+						{children ?? (Canvas ? <Canvas /> : null)}
 						<Watermark />
 					</Layout>
-				</EditorProvider>
+				</EditorContext.Provider>
 			)}
 		</OptionalErrorBoundary>
 	)
@@ -670,11 +573,7 @@ export interface LoadingScreenProps {
 
 /** @public @react */
 export function LoadingScreen({ children }: LoadingScreenProps) {
-	return (
-		<div className="tl-loading" aria-busy="true" tabIndex={0}>
-			{children}
-		</div>
-	)
+	return <div className="tl-loading">{children}</div>
 }
 
 /** @public @react */
@@ -701,7 +600,7 @@ export function useOnMount(onMount?: TLOnMountHandler) {
 		return teardown
 	})
 
-	React.useLayoutEffect(() => {
+	useLayoutEffect(() => {
 		if (editor) return onMountEvent?.(editor)
 	}, [editor, onMountEvent])
 }
\ No newline at end of file
