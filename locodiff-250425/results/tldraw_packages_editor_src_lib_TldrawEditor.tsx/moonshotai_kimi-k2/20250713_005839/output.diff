
index fb7399b5c..67ac9bc8d 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpdl3mehio_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpbnwns29b_actual.txt	
@@ -36,9 +36,9 @@ import {
 } from './hooks/useEditorComponents'
 import { useEvent } from './hooks/useEvent'
 import { useForceUpdate } from './hooks/useForceUpdate'
-import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useLocalStore } from './hooks/useLocalStore'
 import { useRefState } from './hooks/useRefState'
+import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useZoomCss } from './hooks/useZoomCss'
 import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
@@ -148,16 +148,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	initialState?: string
 
-	/**
-	 * A classname to pass to the editor's container.
-	 */
-	className?: string
-
-	/**
-	 * The user interacting with the editor.
-	 */
-	user?: TLUser
-
 	/**
 	 * Whether to infer dark mode from the user's OS. Defaults to false.
 	 */
@@ -393,8 +383,6 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 	return <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />
 })
 
-const noAutoFocus = () => document.location.search.includes('tldraw_preserve_focus') // || !document.hasFocus() // breaks in nextjs
-
 function TldrawEditorWithReadyStore({
 	onMount,
 	children,
@@ -422,9 +410,6 @@ function TldrawEditorWithReadyStore({
 	},
 	'shapeUtils' | 'bindingUtils' | 'tools'
 >) {
-	const { ErrorFallback } = useEditorComponents()
-	const container = useContainer()
-
 	const [editor, setEditor] = useRefState<Editor | null>(null)
 
 	const canvasRef = useRef<HTMLDivElement | null>(null)
@@ -465,7 +450,6 @@ function TldrawEditorWithReadyStore({
 				getContainer: () => container,
 				user,
 				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
@@ -545,38 +529,6 @@ function TldrawEditorWithReadyStore({
 		() => editor?.getCrashingError() ?? null
 	)
 
-	// For our examples site, we want autoFocus to be true on the examples site, but not
-	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
-	// overrides the `autoFocus` prop and prevents the editor from focusing immediately,
-	// however here we also add some logic to focus the editor when the user clicks
-	// on it and unfocus it when the user clicks away from it.
-	useEffect(
-		function handleFocusOnPointerDownForPreserveFocusMode() {
-			if (!editor) return
-
-			function handleFocusOnPointerDown() {
-				if (!editor) return
-				editor.focus()
-			}
-
-			function handleBlurOnPointerDown() {
-				if (!editor) return
-				editor.blur()
-			}
-
-			if (autoFocus && noAutoFocus()) {
-				editor.getContainer().addEventListener('pointerdown', handleFocusOnPointerDown)
-				document.body.addEventListener('pointerdown', handleBlurOnPointerDown)
-
-				return () => {
-					editor.getContainer()?.removeEventListener('pointerdown', handleFocusOnPointerDown)
-					document.body.removeEventListener('pointerdown', handleBlurOnPointerDown)
-				}
-			}
-		},
-		[editor, autoFocus]
-	)
-
 	const [_fontLoadingState, setFontLoadingState] = useState<{
 		editor: Editor
 		isLoaded: boolean
@@ -615,12 +567,6 @@ function TldrawEditorWithReadyStore({
 	}
 
 	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
 		<OptionalErrorBoundary
 			fallback={ErrorFallback as any}
 			onError={(error) =>
@@ -641,6 +587,8 @@ function TldrawEditorWithReadyStore({
 	)
 }
 
+const noAutoFocus = () => document.location.search.includes('tldraw_preserve_focus') // || !document.hasFocus() // breaks in nextjs
+
 function Layout({ children, onMount }: { children: ReactNode; onMount?: TLOnMountHandler }) {
 	useZoomCss()
 	useCursor()
@@ -679,7 +627,11 @@ export function LoadingScreen({ children }: LoadingScreenProps) {
 
 /** @public @react */
 export function ErrorScreen({ children }: LoadingScreenProps) {
-	return <div className="tl-loading">{children}</div>
+	return (
+		<div className="tl-loading">
+			{children}
+		</div>
+	)
 }
 
 /** @internal */
