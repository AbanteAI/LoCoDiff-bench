
index fb7399b5c..e865bb1b3 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmp1xtzpfap_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmp7dziqfiz_actual.txt	
@@ -95,13 +95,6 @@ export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
 /** @public */
 export type TldrawEditorStoreProps = TldrawEditorWithStoreProps | TldrawEditorWithoutStoreProps
 
-/**
- * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
- *
- * @public
- **/
-export type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps
-
 /**
  * Base props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
  *
@@ -617,8 +610,8 @@ function TldrawEditorWithReadyStore({
 	return (
 		// the top-level tldraw component also renders an error boundary almost
 		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
+		// access to `Editor`, which means that here we can enrich errors with data
+		// from editor for reporting, and also still attempt to render the user's
 		// document in the event of an error to reassure them that their work is
 		// not lost.
 		<OptionalErrorBoundary
@@ -646,15 +639,7 @@ function Layout({ children, onMount }: { children: ReactNode; onMount?: TLOnMoun
 	useCursor()
 	useDarkMode()
 	useForceUpdate()
-	useOnMount((editor) => {
-		const teardownStore = editor.store.props.onMount(editor)
-		const teardownCallback = onMount?.(editor)
-
-		return () => {
-			teardownStore?.()
-			teardownCallback?.()
-		}
-	})
+	useOnMount(onMount)
 
 	return children
 }
