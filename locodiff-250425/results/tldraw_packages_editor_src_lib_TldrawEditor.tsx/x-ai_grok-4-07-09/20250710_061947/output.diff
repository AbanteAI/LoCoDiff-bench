
index fb7399b5c..bfd8767f5 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpu_aqnx6u_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmp35it_mft_actual.txt	
@@ -44,8 +44,8 @@ import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
 import { TldrawOptions } from './options'
 import { TLDeepLinkOptions } from './utils/deepLinks'
-import { stopEventPropagation } from './utils/dom'
 import { TLTextOptions } from './utils/richText'
+import { stopEventPropagation } from './utils/dom'
 import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'
 
 /**
@@ -95,11 +95,7 @@ export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
 /** @public */
 export type TldrawEditorStoreProps = TldrawEditorWithStoreProps | TldrawEditorWithoutStoreProps
 
-/**
- * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
- *
- * @public
- **/
+/** @public */
 export type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps
 
 /**
@@ -128,6 +124,11 @@ export interface TldrawEditorBaseProps {
 	 */
 	tools?: readonly TLStateNodeConstructor[]
 
+	/**
+	 * Urls for the editor to find fonts and other assets.
+	 */
+	assetUrls?: { fonts?: { [key: string]: string | undefined } }
+
 	/**
 	 * Whether to automatically focus the editor when it mounts.
 	 */
@@ -140,9 +141,22 @@ export interface TldrawEditorBaseProps {
 
 	/**
 	 * Called when the editor has mounted.
+	 * @example
+	 * ```ts
+	 * <Tldraw onMount={(editor) => editor.selectAll()} />
+	 * ```
+	 * @param editor - The editor instance.
+	 *
+	 * @public
 	 */
 	onMount?: TLOnMountHandler
 
+	/**
+	 * The id of the editor instance (e.g. a browser tab if the editor will have only one tldraw app per
+	 * tab). If not given, one will be generated.
+	 */
+	instanceId?: string
+
 	/**
 	 * The editor's initial state (usually the id of the first active tool).
 	 */
@@ -188,13 +202,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	deepLinks?: true | TLDeepLinkOptions
 
-	/**
-	 * Predicate for whether or not a shape should be hidden.
-	 *
-	 * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
-	 */
-	isShapeHidden?(shape: TLShape, editor: Editor): boolean
-
 	/**
 	 * Provides a way to hide shapes.
 	 *
@@ -218,11 +225,6 @@ export interface TldrawEditorBaseProps {
 		shape: TLShape,
 		editor: Editor
 	): 'visible' | 'hidden' | 'inherit' | null | undefined
-
-	/**
-	 * The URLs for the fonts to use in the editor.
-	 */
-	assetUrls?: { fonts?: { [key: string]: string | undefined } }
 }
 
 /**
@@ -230,478 +232,4 @@ export interface TldrawEditorBaseProps {
  * @example
  * ```ts
  * <Tldraw onMount={(editor) => editor.selectAll()} />
- * ```
- * @param editor - The editor instance.
- *
- * @public
- */
-export type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void
-
-declare global {
-	interface Window {
-		tldrawReady: boolean
-	}
-}
-
-const EMPTY_SHAPE_UTILS_ARRAY = [] as const
-const EMPTY_BINDING_UTILS_ARRAY = [] as const
-const EMPTY_TOOLS_ARRAY = [] as const
-/** @internal */
-export const TL_CONTAINER_CLASS = 'tl-container'
-
-/** @public @react */
-export const TldrawEditor = memo(function TldrawEditor({
-	store,
-	components,
-	className,
-	user: _user,
-	options: _options,
-	...rest
-}: TldrawEditorProps) {
-	const [container, setContainer] = useState<HTMLElement | null>(null)
-	const user = useMemo(() => _user ?? createTLUser(), [_user])
-
-	const ErrorFallback =
-		components?.ErrorFallback === undefined ? DefaultErrorFallback : components?.ErrorFallback
-
-	// apply defaults. if you're using the bare @tldraw/editor package, we
-	// default these to the "tldraw zero" configuration. We have different
-	// defaults applied in tldraw.
-	const withDefaults = {
-		...rest,
-		shapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,
-		bindingUtils: rest.bindingUtils ?? EMPTY_BINDING_UTILS_ARRAY,
-		tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
-		components,
-		options: useShallowObjectIdentity(_options),
-	}
-
-	return (
-		<div
-			ref={setContainer}
-			data-tldraw={version}
-			draggable={false}
-			className={classNames(`${TL_CONTAINER_CLASS} tl-theme__light`, className)}
-			onPointerDown={stopEventPropagation}
-			tabIndex={-1}
-			role="application"
-			aria-label={_options?.branding ?? 'tldraw'}
-		>
-			<OptionalErrorBoundary
-				fallback={ErrorFallback}
-				onError={(error) => annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })}
-			>
-				{container && (
-					<LicenseProvider licenseKey={rest.licenseKey}>
-						<ContainerProvider container={container}>
-							<EditorComponentsProvider overrides={components}>
-								{store ? (
-									store instanceof Store ? (
-										// Store is ready to go, whether externally synced or not
-										<TldrawEditorWithReadyStore {...withDefaults} store={store} user={user} />
-									) : (
-										// Store is a synced store, so handle syncing stages internally
-										<TldrawEditorWithLoadingStore {...withDefaults} store={store} user={user} />
-									)
-								) : (
-									// We have no store (it's undefined) so create one and possibly sync it
-									<TldrawEditorWithOwnStore {...withDefaults} store={store} user={user} />
-								)}
-							</EditorComponentsProvider>
-						</ContainerProvider>
-					</LicenseProvider>
-				)}
-			</OptionalErrorBoundary>
-		</div>
-	)
-})
-
-function TldrawEditorWithOwnStore(
-	props: Required<
-		TldrawEditorProps & { store: undefined; user: TLUser },
-		'shapeUtils' | 'bindingUtils' | 'tools'
-	>
-) {
-	const {
-		defaultName,
-		snapshot,
-		initialData,
-		shapeUtils,
-		bindingUtils,
-		persistenceKey,
-		sessionId,
-		user,
-		assets,
-		migrations,
-	} = props
-
-	const syncedStore = useLocalStore({
-		shapeUtils,
-		bindingUtils,
-		initialData,
-		persistenceKey,
-		sessionId,
-		defaultName,
-		snapshot,
-		assets,
-		migrations,
-	})
-
-	return <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />
-}
-
-const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
-	store,
-	user,
-	...rest
-}: Required<
-	TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser },
-	'shapeUtils' | 'bindingUtils' | 'tools'
->) {
-	const container = useContainer()
-
-	useLayoutEffect(() => {
-		if (user.userPreferences.get().colorScheme === 'dark') {
-			container.classList.remove('tl-theme__light')
-			container.classList.add('tl-theme__dark')
-		}
-	}, [container, user])
-
-	const { LoadingScreen } = useEditorComponents()
-
-	switch (store.status) {
-		case 'error': {
-			// for error handling, we fall back to the default error boundary.
-			// if users want to handle this error differently, they can render
-			// their own error screen before the TldrawEditor component
-			throw store.error
-		}
-		case 'loading': {
-			return LoadingScreen ? <LoadingScreen /> : null
-		}
-		case 'not-synced': {
-			break
-		}
-		case 'synced-local': {
-			break
-		}
-		case 'synced-remote': {
-			break
-		}
-	}
-
-	return <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />
-})
-
-const noAutoFocus = () => document.location.search.includes('tldraw_preserve_focus') // || !document.hasFocus() // breaks in nextjs
-
-function TldrawEditorWithReadyStore({
-	onMount,
-	children,
-	store,
-	tools,
-	shapeUtils,
-	bindingUtils,
-	user,
-	initialState,
-	autoFocus = true,
-	inferDarkMode,
-	cameraOptions,
-	textOptions,
-	options,
-	licenseKey,
-	deepLinks: _deepLinks,
-	// eslint-disable-next-line @typescript-eslint/no-deprecated
-	isShapeHidden,
-	getShapeVisibility,
-	assetUrls,
-}: Required<
-	TldrawEditorProps & {
-		store: TLStore
-		user: TLUser
-	},
-	'shapeUtils' | 'bindingUtils' | 'tools'
->) {
-	const { ErrorFallback } = useEditorComponents()
-	const container = useContainer()
-
-	const [editor, setEditor] = useRefState<Editor | null>(null)
-
-	const canvasRef = useRef<HTMLDivElement | null>(null)
-
-	const deepLinks = useShallowObjectIdentity(_deepLinks === true ? {} : _deepLinks)
-
-	// props in this ref can be changed without causing the editor to be recreated.
-	const editorOptionsRef = useRef({
-		// for these, it's because they're only used when the editor first mounts:
-		autoFocus: autoFocus && !noAutoFocus(),
-		inferDarkMode,
-		initialState,
-
-		// for these, it's because we keep them up to date in a separate effect:
-		cameraOptions,
-		deepLinks,
-	})
-
-	useLayoutEffect(() => {
-		editorOptionsRef.current = {
-			autoFocus: autoFocus && !noAutoFocus(),
-			inferDarkMode,
-			initialState,
-			cameraOptions,
-			deepLinks,
-		}
-	}, [autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks])
-
-	useLayoutEffect(
-		() => {
-			const { autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks } =
-				editorOptionsRef.current
-			const editor = new Editor({
-				store,
-				shapeUtils,
-				bindingUtils,
-				tools,
-				getContainer: () => container,
-				user,
-				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
-				autoFocus,
-				inferDarkMode,
-				cameraOptions,
-				textOptions,
-				options,
-				licenseKey,
-				isShapeHidden,
-				getShapeVisibility,
-				fontAssetUrls: assetUrls?.fonts,
-			})
-
-			editor.updateViewportScreenBounds(canvasRef.current ?? container)
-
-			// Use the ref here because we only want to do this once when the editor is created.
-			// We don't want changes to the urlStateSync prop to trigger creating new editors.
-			if (deepLinks) {
-				if (!deepLinks?.getUrl) {
-					// load the state from window.location
-					editor.navigateToDeepLink(deepLinks)
-				} else {
-					// load the state from the provided URL
-					editor.navigateToDeepLink({ ...deepLinks, url: deepLinks.getUrl(editor) })
-				}
-			}
-
-			setEditor(editor)
-
-			return () => {
-				editor.dispose()
-			}
-		},
-		// if any of these change, we need to recreate the editor.
-		[
-			bindingUtils,
-			container,
-			options,
-			shapeUtils,
-			store,
-			tools,
-			user,
-			setEditor,
-			licenseKey,
-			isShapeHidden,
-			getShapeVisibility,
-			textOptions,
-			assetUrls,
-		]
-	)
-
-	useLayoutEffect(() => {
-		if (!editor) return
-		if (deepLinks) {
-			return editor.registerDeepLinkListener(deepLinks)
-		}
-	}, [editor, deepLinks])
-
-	// keep the editor up to date with the latest camera options
-	useLayoutEffect(() => {
-		if (editor && cameraOptions) {
-			editor.setCameraOptions(cameraOptions)
-		}
-	}, [editor, cameraOptions])
-
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
-
-	// For our examples site, we want autoFocus to be true on the examples site, but not
-	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
-	// overrides the `autoFocus` prop and prevents the editor from focusing immediately,
-	// however here we also add some logic to focus the editor when the user clicks
-	// on it and unfocus it when the user clicks away from it.
-	useEffect(
-		function handleFocusOnPointerDownForPreserveFocusMode() {
-			if (!editor) return
-
-			function handleFocusOnPointerDown() {
-				if (!editor) return
-				editor.focus()
-			}
-
-			function handleBlurOnPointerDown() {
-				if (!editor) return
-				editor.blur()
-			}
-
-			if (autoFocus && noAutoFocus()) {
-				editor.getContainer().addEventListener('pointerdown', handleFocusOnPointerDown)
-				document.body.addEventListener('pointerdown', handleBlurOnPointerDown)
-
-				return () => {
-					editor.getContainer()?.removeEventListener('pointerdown', handleFocusOnPointerDown)
-					document.body.removeEventListener('pointerdown', handleBlurOnPointerDown)
-				}
-			}
-		},
-		[editor, autoFocus]
-	)
-
-	const [_fontLoadingState, setFontLoadingState] = useState<{
-		editor: Editor
-		isLoaded: boolean
-	} | null>(null)
-	let fontLoadingState = _fontLoadingState
-	if (editor !== fontLoadingState?.editor) {
-		fontLoadingState = null
-	}
-	useEffect(() => {
-		if (!editor) return
-		let isCancelled = false
-
-		setFontLoadingState({ editor, isLoaded: false })
-
-		editor.fonts
-			.loadRequiredFontsForCurrentPage(editor.options.maxFontsToLoadBeforeRender)
-			.finally(() => {
-				if (isCancelled) return
-				setFontLoadingState({ editor, isLoaded: true })
-			})
-
-		return () => {
-			isCancelled = true
-		}
-	}, [editor])
-
-	const { Canvas, LoadingScreen } = useEditorComponents()
-
-	if (!editor || !fontLoadingState?.isLoaded) {
-		return (
-			<>
-				{LoadingScreen && <LoadingScreen />}
-				<div className="tl-canvas" ref={canvasRef} />
-			</>
-		)
-	}
-
-	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
-		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
-			onError={(error) =>
-				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
-			}
-		>
-			{crashingError ? (
-				<Crash crashingError={crashingError} />
-			) : (
-				<EditorProvider editor={editor}>
-					<Layout onMount={onMount}>
-						{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
-						<Watermark />
-					</Layout>
-				</EditorProvider>
-			)}
-		</OptionalErrorBoundary>
-	)
-}
-
-function Layout({ children, onMount }: { children: ReactNode; onMount?: TLOnMountHandler }) {
-	useZoomCss()
-	useCursor()
-	useDarkMode()
-	useForceUpdate()
-	useOnMount((editor) => {
-		const teardownStore = editor.store.props.onMount(editor)
-		const teardownCallback = onMount?.(editor)
-
-		return () => {
-			teardownStore?.()
-			teardownCallback?.()
-		}
-	})
-
-	return children
-}
-
-function Crash({ crashingError }: { crashingError: unknown }): null {
-	throw crashingError
-}
-
-/** @public */
-export interface LoadingScreenProps {
-	children: ReactNode
-}
-
-/** @public @react */
-export function LoadingScreen({ children }: LoadingScreenProps) {
-	return (
-		<div className="tl-loading" aria-busy="true" tabIndex={0}>
-			{children}
-		</div>
-	)
-}
-
-/** @public @react */
-export function ErrorScreen({ children }: LoadingScreenProps) {
-	return <div className="tl-loading">{children}</div>
-}
-
-/** @internal */
-export function useOnMount(onMount?: TLOnMountHandler) {
-	const editor = useEditor()
-
-	const onMountEvent = useEvent((editor: Editor) => {
-		let teardown: (() => void) | void = undefined
-		// If the user wants to do something when the editor mounts, we make sure it doesn't effect the history.
-		// todo: is this reeeeally what we want to do, or should we leave it up to the caller?
-		editor.run(
-			() => {
-				teardown = onMount?.(editor)
-				editor.emit('mount')
-			},
-			{ history: 'ignore' }
-		)
-		window.tldrawReady = true
-		return teardown
-	})
-
-	React.useLayoutEffect(() => {
-		if (editor) return onMountEvent?.(editor)
-	}, [editor, onMountEvent])
-}
\ No newline at end of file
+ *
\ No newline at end of file
