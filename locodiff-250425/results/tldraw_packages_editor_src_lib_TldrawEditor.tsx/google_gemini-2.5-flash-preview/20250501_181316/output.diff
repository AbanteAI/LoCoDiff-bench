
index fb7399b5..412c7a22 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmp_mawac0k_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpqzugeimp_actual.txt	
@@ -40,8 +40,6 @@ import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useLocalStore } from './hooks/useLocalStore'
 import { useRefState } from './hooks/useRefState'
 import { useZoomCss } from './hooks/useZoomCss'
-import { LicenseProvider } from './license/LicenseProvider'
-import { Watermark } from './license/Watermark'
 import { TldrawOptions } from './options'
 import { TLDeepLinkOptions } from './utils/deepLinks'
 import { stopEventPropagation } from './utils/dom'
@@ -128,6 +126,11 @@ export interface TldrawEditorBaseProps {
 	 */
 	tools?: readonly TLStateNodeConstructor[]
 
+	/**
+	 * Urls for the editor to find fonts and other assets.
+	 */
+	assetUrls?: { [key: string]: string | undefined }
+
 	/**
 	 * Whether to automatically focus the editor when it mounts.
 	 */
@@ -188,13 +191,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	deepLinks?: true | TLDeepLinkOptions
 
-	/**
-	 * Predicate for whether or not a shape should be hidden.
-	 *
-	 * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
-	 */
-	isShapeHidden?(shape: TLShape, editor: Editor): boolean
-
 	/**
 	 * Provides a way to hide shapes.
 	 *
@@ -219,6 +215,11 @@ export interface TldrawEditorBaseProps {
 		editor: Editor
 	): 'visible' | 'hidden' | 'inherit' | null | undefined
 
+	/**
+	 * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
+	 */
+	isShapeHidden?(shape: TLShape, editor: Editor): boolean
+
 	/**
 	 * The URLs for the fonts to use in the editor.
 	 */
@@ -264,9 +265,7 @@ export const TldrawEditor = memo(function TldrawEditor({
 	const ErrorFallback =
 		components?.ErrorFallback === undefined ? DefaultErrorFallback : components?.ErrorFallback
 
-	// apply defaults. if you're using the bare @tldraw/editor package, we
-	// default these to the "tldraw zero" configuration. We have different
-	// defaults applied in tldraw.
+	// defaults for props that don't default in Tldraw.tsx
 	const withDefaults = {
 		...rest,
 		shapeUtils: rest.shapeUtils ?? EMPTY_SHAPE_UTILS_ARRAY,
@@ -331,7 +330,7 @@ function TldrawEditorWithOwnStore(
 		persistenceKey,
 		sessionId,
 		user,
-		assets,
+		assetUrls,
 		migrations,
 	} = props
 
@@ -343,7 +342,7 @@ function TldrawEditorWithOwnStore(
 		sessionId,
 		defaultName,
 		snapshot,
-		assets,
+		assetUrls,
 		migrations,
 	})
 
@@ -425,8 +424,6 @@ function TldrawEditorWithReadyStore({
 	const { ErrorFallback } = useEditorComponents()
 	const container = useContainer()
 
-	const [editor, setEditor] = useRefState<Editor | null>(null)
-
 	const canvasRef = useRef<HTMLDivElement | null>(null)
 
 	const deepLinks = useShallowObjectIdentity(_deepLinks === true ? {} : _deepLinks)
@@ -437,10 +434,14 @@ function TldrawEditorWithReadyStore({
 		autoFocus: autoFocus && !noAutoFocus(),
 		inferDarkMode,
 		initialState,
+		isShapeHidden,
+		getShapeVisibility,
+		assetUrls,
 
 		// for these, it's because we keep them up to date in a separate effect:
 		cameraOptions,
 		deepLinks,
+		textOptions,
 	})
 
 	useLayoutEffect(() => {
@@ -448,15 +449,43 @@ function TldrawEditorWithReadyStore({
 			autoFocus: autoFocus && !noAutoFocus(),
 			inferDarkMode,
 			initialState,
+			isShapeHidden,
+			getShapeVisibility,
+			assetUrls,
 			cameraOptions,
 			deepLinks,
+			textOptions,
 		}
-	}, [autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks])
+		// We do not want to include the assets or getShapeVisibility/isShapeHidden here, since the editor will handle them later.
+		// Including them here would cause the useRef hook to set them in the ref prematurely, which causes other effects to run twice.
+		// The editor handles the rest.
+	}, [
+		autoFocus,
+		inferDarkMode,
+		initialState,
+		cameraOptions,
+		deepLinks,
+		textOptions,
+		isShapeHidden,
+		getShapeVisibility,
+		assetUrls,
+	])
+
+	const [editor, setEditor] = useRefState<Editor | null>(null)
 
 	useLayoutEffect(
 		() => {
-			const { autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks } =
-				editorOptionsRef.current
+			const {
+				autoFocus,
+				inferDarkMode,
+				initialState,
+				cameraOptions,
+				deepLinks,
+				textOptions,
+				isShapeHidden,
+				getShapeVisibility,
+				assetUrls,
+			} = editorOptionsRef.current
 			const editor = new Editor({
 				store,
 				shapeUtils,
@@ -498,21 +527,7 @@ function TldrawEditorWithReadyStore({
 			}
 		},
 		// if any of these change, we need to recreate the editor.
-		[
-			bindingUtils,
-			container,
-			options,
-			shapeUtils,
-			store,
-			tools,
-			user,
-			setEditor,
-			licenseKey,
-			isShapeHidden,
-			getShapeVisibility,
-			textOptions,
-			assetUrls,
-		]
+		[bindingUtils, container, options, shapeUtils, store, tools, user, setEditor, licenseKey]
 	)
 
 	useLayoutEffect(() => {
@@ -529,21 +544,11 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
+	useLayoutEffect(() => {
+		if (editor && textOptions) {
+			editor.setTextOptions(textOptions)
+		}
+	}, [editor, textOptions])
 
 	// For our examples site, we want autoFocus to be true on the examples site, but not
 	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
@@ -603,7 +608,7 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor])
 
-	const { Canvas, LoadingScreen } = useEditorComponents()
+	const { Canvas } = useEditorComponents()
 
 	if (!editor || !fontLoadingState?.isLoaded) {
 		return (
@@ -615,29 +620,12 @@ function TldrawEditorWithReadyStore({
 	}
 
 	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
-		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
-			onError={(error) =>
-				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
-			}
-		>
-			{crashingError ? (
-				<Crash crashingError={crashingError} />
-			) : (
-				<EditorProvider editor={editor}>
-					<Layout onMount={onMount}>
-						{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
-						<Watermark />
-					</Layout>
-				</EditorProvider>
-			)}
-		</OptionalErrorBoundary>
+		<EditorProvider editor={editor}>
+			<Layout onMount={onMount}>
+				{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
+				<Watermark />
+			</Layout>
+		</EditorProvider>
 	)
 }
 
@@ -680,28 +668,4 @@ export function LoadingScreen({ children }: LoadingScreenProps) {
 /** @public @react */
 export function ErrorScreen({ children }: LoadingScreenProps) {
 	return <div className="tl-loading">{children}</div>
-}
-
-/** @internal */
-export function useOnMount(onMount?: TLOnMountHandler) {
-	const editor = useEditor()
-
-	const onMountEvent = useEvent((editor: Editor) => {
-		let teardown: (() => void) | void = undefined
-		// If the user wants to do something when the editor mounts, we make sure it doesn't effect the history.
-		// todo: is this reeeeally what we want to do, or should we leave it up to the caller?
-		editor.run(
-			() => {
-				teardown = onMount?.(editor)
-				editor.emit('mount')
-			},
-			{ history: 'ignore' }
-		)
-		window.tldrawReady = true
-		return teardown
-	})
-
-	React.useLayoutEffect(() => {
-		if (editor) return onMountEvent?.(editor)
-	}, [editor, onMountEvent])
 }
\ No newline at end of file
