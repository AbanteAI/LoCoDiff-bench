
index fb7399b5..8787ea79 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmp31w4pd1l_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpjg5vopdu_actual.txt	
@@ -1,5 +1,5 @@
 import { MigrationSequence, Store } from '@tldraw/store'
-import { TLShape, TLStore, TLStoreSnapshot } from '@tldraw/tlschema'
+import { TLStore, TLStoreSnapshot } from '@tldraw/tlschema'
 import { Required, annotateError } from '@tldraw/utils'
 import React, {
 	ReactNode,
@@ -18,7 +18,6 @@ import { version } from '../version'
 import { OptionalErrorBoundary } from './components/ErrorBoundary'
 import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
 import { TLEditorSnapshot } from './config/TLEditorSnapshot'
-import { TLStoreBaseOptions } from './config/createTLStore'
 import { TLUser, createTLUser } from './config/createTLUser'
 import { TLAnyBindingUtilConstructor } from './config/defaultBindings'
 import { TLAnyShapeUtilConstructor } from './config/defaultShapes'
@@ -153,16 +152,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	className?: string
 
-	/**
-	 * The user interacting with the editor.
-	 */
-	user?: TLUser
-
-	/**
-	 * Whether to infer dark mode from the user's OS. Defaults to false.
-	 */
-	inferDarkMode?: boolean
-
 	/**
 	 * Camera options for the editor.
 	 */
@@ -317,10 +306,7 @@ export const TldrawEditor = memo(function TldrawEditor({
 })
 
 function TldrawEditorWithOwnStore(
-	props: Required<
-		TldrawEditorProps & { store: undefined; user: TLUser },
-		'shapeUtils' | 'bindingUtils' | 'tools'
-	>
+	props: Required<TldrawEditorProps & { store: undefined; user: TLUser }, 'shapeUtils' | 'tools'>
 ) {
 	const {
 		defaultName,
@@ -339,7 +325,6 @@ function TldrawEditorWithOwnStore(
 		shapeUtils,
 		bindingUtils,
 		initialData,
-		persistenceKey,
 		sessionId,
 		defaultName,
 		snapshot,
@@ -356,7 +341,7 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 	...rest
 }: Required<
 	TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser },
-	'shapeUtils' | 'bindingUtils' | 'tools'
+	'shapeUtils' | 'tools'
 >) {
 	const container = useContainer()
 
@@ -367,8 +352,6 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 		}
 	}, [container, user])
 
-	const { LoadingScreen } = useEditorComponents()
-
 	switch (store.status) {
 		case 'error': {
 			// for error handling, we fall back to the default error boundary.
@@ -377,7 +360,8 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 			throw store.error
 		}
 		case 'loading': {
-			return LoadingScreen ? <LoadingScreen /> : null
+			const LoadingScreen = rest.components?.LoadingScreen ?? DefaultLoadingScreen
+			return <LoadingScreen />
 		}
 		case 'not-synced': {
 			break
@@ -465,7 +449,6 @@ function TldrawEditorWithReadyStore({
 				getContainer: () => container,
 				user,
 				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
@@ -529,22 +512,6 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
-
 	// For our examples site, we want autoFocus to be true on the examples site, but not
 	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
 	// overrides the `autoFocus` prop and prevents the editor from focusing immediately,
@@ -615,14 +582,8 @@ function TldrawEditorWithReadyStore({
 	}
 
 	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
 		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
+			fallback={ErrorFallback}
 			onError={(error) =>
 				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
 			}
@@ -688,8 +649,6 @@ export function useOnMount(onMount?: TLOnMountHandler) {
 
 	const onMountEvent = useEvent((editor: Editor) => {
 		let teardown: (() => void) | void = undefined
-		// If the user wants to do something when the editor mounts, we make sure it doesn't effect the history.
-		// todo: is this reeeeally what we want to do, or should we leave it up to the caller?
 		editor.run(
 			() => {
 				teardown = onMount?.(editor)
