
index fb7399b5c..9e5796ef5 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpycj47g_k_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmp345hcr13_actual.txt	
@@ -14,6 +14,7 @@ import React, {
 } from 'react'
 
 import classNames from 'classnames'
+import { TLDeepLinkOptions } from '..'
 import { version } from '../version'
 import { OptionalErrorBoundary } from './components/ErrorBoundary'
 import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
@@ -28,7 +29,7 @@ import { TLCameraOptions } from './editor/types/misc-types'
 import { ContainerProvider, useContainer } from './hooks/useContainer'
 import { useCursor } from './hooks/useCursor'
 import { useDarkMode } from './hooks/useDarkMode'
-import { EditorProvider, useEditor } from './hooks/useEditor'
+import { EditorContext, useEditor } from './hooks/useEditor'
 import {
 	EditorComponentsProvider,
 	TLEditorComponents,
@@ -43,14 +44,12 @@ import { useZoomCss } from './hooks/useZoomCss'
 import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
 import { TldrawOptions } from './options'
-import { TLDeepLinkOptions } from './utils/deepLinks'
 import { stopEventPropagation } from './utils/dom'
-import { TLTextOptions } from './utils/richText'
 import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'
 
 /**
  * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when passing in a
- * `TLStore` directly. If you would like tldraw to create a store for you, use
+ * {@link store#TLStore} directly. If you would like tldraw to create a store for you, use
  * {@link TldrawEditorWithoutStoreProps}.
  *
  * @public
@@ -64,7 +63,7 @@ export interface TldrawEditorWithStoreProps {
 
 /**
  * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when not passing in a
- * `TLStore` directly. If you would like to pass in a store directly, use
+ * {@link store#TLStore} directly. If you would like to pass in a store directly, use
  * {@link TldrawEditorWithStoreProps}.
  *
  * @public
@@ -168,11 +167,6 @@ export interface TldrawEditorBaseProps {
 	 */
 	cameraOptions?: Partial<TLCameraOptions>
 
-	/**
-	 * Text options for the editor.
-	 */
-	textOptions?: TLTextOptions
-
 	/**
 	 * Options for the editor.
 	 */
@@ -191,38 +185,9 @@ export interface TldrawEditorBaseProps {
 	/**
 	 * Predicate for whether or not a shape should be hidden.
 	 *
-	 * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
-	 */
-	isShapeHidden?(shape: TLShape, editor: Editor): boolean
-
-	/**
-	 * Provides a way to hide shapes.
-	 *
-	 * Hidden shapes will not render in the editor, and they will not be eligible for hit test via
-	 * {@link Editor#getShapeAtPoint} and {@link Editor#getShapesAtPoint}. But otherwise they will
-	 * remain in the store and participate in all other operations.
-	 *
-	 * @example
-	 * ```ts
-	 * getShapeVisibility={(shape, editor) => shape.meta.hidden ? 'hidden' : 'inherit'}
-	 * ```
-	 *
-	 * - `'inherit' | undefined` - (default) The shape will be visible unless its parent is hidden.
-	 * - `'hidden'` - The shape will be hidden.
-	 * - `'visible'` - The shape will be visible.
-	 *
-	 * @param shape - The shape to check.
-	 * @param editor - The editor instance.
-	 */
-	getShapeVisibility?(
-		shape: TLShape,
-		editor: Editor
-	): 'visible' | 'hidden' | 'inherit' | null | undefined
-
-	/**
-	 * The URLs for the fonts to use in the editor.
+	 * Hidden shapes will not render in the editor, and they will not be eligible for hit test...
 	 */
-	assetUrls?: { fonts?: { [key: string]: string | undefined } }
+	isShapeHidden?: (shape: TLShape) => boolean
 }
 
 /**
@@ -237,15 +202,6 @@ export interface TldrawEditorBaseProps {
  */
 export type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void
 
-declare global {
-	interface Window {
-		tldrawReady: boolean
-	}
-}
-
-const EMPTY_SHAPE_UTILS_ARRAY = [] as const
-const EMPTY_BINDING_UTILS_ARRAY = [] as const
-const EMPTY_TOOLS_ARRAY = [] as const
 /** @internal */
 export const TL_CONTAINER_CLASS = 'tl-container'
 
@@ -255,7 +211,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 	components,
 	className,
 	user: _user,
-	options: _options,
 	...rest
 }: TldrawEditorProps) {
 	const [container, setContainer] = useState<HTMLElement | null>(null)
@@ -273,7 +228,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 		bindingUtils: rest.bindingUtils ?? EMPTY_BINDING_UTILS_ARRAY,
 		tools: rest.tools ?? EMPTY_TOOLS_ARRAY,
 		components,
-		options: useShallowObjectIdentity(_options),
 	}
 
 	return (
@@ -284,8 +238,6 @@ export const TldrawEditor = memo(function TldrawEditor({
 			className={classNames(`${TL_CONTAINER_CLASS} tl-theme__light`, className)}
 			onPointerDown={stopEventPropagation}
 			tabIndex={-1}
-			role="application"
-			aria-label={_options?.branding ?? 'tldraw'}
 		>
 			<OptionalErrorBoundary
 				fallback={ErrorFallback}
@@ -407,14 +359,10 @@ function TldrawEditorWithReadyStore({
 	autoFocus = true,
 	inferDarkMode,
 	cameraOptions,
-	textOptions,
 	options,
 	licenseKey,
 	deepLinks: _deepLinks,
-	// eslint-disable-next-line @typescript-eslint/no-deprecated
 	isShapeHidden,
-	getShapeVisibility,
-	assetUrls,
 }: Required<
 	TldrawEditorProps & {
 		store: TLStore
@@ -469,12 +417,9 @@ function TldrawEditorWithReadyStore({
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
-				textOptions,
 				options,
 				licenseKey,
 				isShapeHidden,
-				getShapeVisibility,
-				fontAssetUrls: assetUrls?.fonts,
 			})
 
 			editor.updateViewportScreenBounds(canvasRef.current ?? container)
@@ -498,21 +443,7 @@ function TldrawEditorWithReadyStore({
 			}
 		},
 		// if any of these change, we need to recreate the editor.
-		[
-			bindingUtils,
-			container,
-			options,
-			shapeUtils,
-			store,
-			tools,
-			user,
-			setEditor,
-			licenseKey,
-			isShapeHidden,
-			getShapeVisibility,
-			textOptions,
-			assetUrls,
-		]
+		[bindingUtils, container, options, shapeUtils, store, tools, user, setEditor, licenseKey, isShapeHidden]
 	)
 
 	useLayoutEffect(() => {
@@ -529,12 +460,21 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
+	// keep the editor up to date with the latest isShapeHidden
+	useLayoutEffect(() => {
+		if (editor && typeof isShapeHidden === 'function') {
+			;(editor as any).setIsShapeHidden?.(isShapeHidden)
+		}
+	}, [editor, isShapeHidden])
+
 	const crashingError = useSyncExternalStore(
 		useCallback(
 			(onStoreChange) => {
 				if (editor) {
 					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
+					return () => {
+						editor.off('crash', onStoreChange)
+					}
 				}
 				return () => {
 					// noop
@@ -577,41 +517,10 @@ function TldrawEditorWithReadyStore({
 		[editor, autoFocus]
 	)
 
-	const [_fontLoadingState, setFontLoadingState] = useState<{
-		editor: Editor
-		isLoaded: boolean
-	} | null>(null)
-	let fontLoadingState = _fontLoadingState
-	if (editor !== fontLoadingState?.editor) {
-		fontLoadingState = null
-	}
-	useEffect(() => {
-		if (!editor) return
-		let isCancelled = false
-
-		setFontLoadingState({ editor, isLoaded: false })
-
-		editor.fonts
-			.loadRequiredFontsForCurrentPage(editor.options.maxFontsToLoadBeforeRender)
-			.finally(() => {
-				if (isCancelled) return
-				setFontLoadingState({ editor, isLoaded: true })
-			})
-
-		return () => {
-			isCancelled = true
-		}
-	}, [editor])
+	const { Canvas } = useEditorComponents()
 
-	const { Canvas, LoadingScreen } = useEditorComponents()
-
-	if (!editor || !fontLoadingState?.isLoaded) {
-		return (
-			<>
-				{LoadingScreen && <LoadingScreen />}
-				<div className="tl-canvas" ref={canvasRef} />
-			</>
-		)
+	if (!editor) {
+		return <div className="tl-canvas" ref={canvasRef} />
 	}
 
 	return (
@@ -622,20 +531,18 @@ function TldrawEditorWithReadyStore({
 		// document in the event of an error to reassure them that their work is
 		// not lost.
 		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
-			onError={(error) =>
-				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
-			}
+			fallback={ErrorFallback}
+			onError={(error) => editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })}
 		>
 			{crashingError ? (
 				<Crash crashingError={crashingError} />
 			) : (
-				<EditorProvider editor={editor}>
+				<EditorContext.Provider value={editor}>
 					<Layout onMount={onMount}>
-						{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
+						{children ?? (Canvas ? <Canvas /> : null)}
 						<Watermark />
 					</Layout>
-				</EditorProvider>
+				</EditorContext.Provider>
 			)}
 		</OptionalErrorBoundary>
 	)
@@ -646,15 +553,7 @@ function Layout({ children, onMount }: { children: ReactNode; onMount?: TLOnMoun
 	useCursor()
 	useDarkMode()
 	useForceUpdate()
-	useOnMount((editor) => {
-		const teardownStore = editor.store.props.onMount(editor)
-		const teardownCallback = onMount?.(editor)
-
-		return () => {
-			teardownStore?.()
-			teardownCallback?.()
-		}
-	})
+	useOnMount(onMount)
 
 	return children
 }
@@ -663,18 +562,13 @@ function Crash({ crashingError }: { crashingError: unknown }): null {
 	throw crashingError
 }
 
-/** @public */
 export interface LoadingScreenProps {
 	children: ReactNode
 }
 
 /** @public @react */
 export function LoadingScreen({ children }: LoadingScreenProps) {
-	return (
-		<div className="tl-loading" aria-busy="true" tabIndex={0}>
-			{children}
-		</div>
-	)
+	return <div className="tl-loading">{children}</div>
 }
 
 /** @public @react */
@@ -697,11 +591,15 @@ export function useOnMount(onMount?: TLOnMountHandler) {
 			},
 			{ history: 'ignore' }
 		)
-		window.tldrawReady = true
+		;(window as any).tldrawReady = true
 		return teardown
 	})
 
 	React.useLayoutEffect(() => {
 		if (editor) return onMountEvent?.(editor)
 	}, [editor, onMountEvent])
-}
\ No newline at end of file
+}
+
+const EMPTY_SHAPE_UTILS_ARRAY = [] as const
+const EMPTY_BINDING_UTILS_ARRAY = [] as const
+const EMPTY_TOOLS_ARRAY = [] as const
\ No newline at end of file
