
index fb7399b5..5df031ec 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmp3gshm0tn_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpvp4zv1ne_actual.txt	
@@ -1,5 +1,9 @@
 import { MigrationSequence, Store } from '@tldraw/store'
-import { TLShape, TLStore, TLStoreSnapshot } from '@tldraw/tlschema'
+import {
+	TLShape,
+	TLStore,
+	TLStoreSnapshot,
+} from '@tldraw/tlschema'
 import { Required, annotateError } from '@tldraw/utils'
 import React, {
 	ReactNode,
@@ -28,17 +32,17 @@ import { TLCameraOptions } from './editor/types/misc-types'
 import { ContainerProvider, useContainer } from './hooks/useContainer'
 import { useCursor } from './hooks/useCursor'
 import { useDarkMode } from './hooks/useDarkMode'
-import { EditorProvider, useEditor } from './hooks/useEditor'
 import {
 	EditorComponentsProvider,
 	TLEditorComponents,
 	useEditorComponents,
 } from './hooks/useEditorComponents'
+import { EditorProvider, useEditor } from './hooks/useEditor'
 import { useEvent } from './hooks/useEvent'
 import { useForceUpdate } from './hooks/useForceUpdate'
-import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useLocalStore } from './hooks/useLocalStore'
 import { useRefState } from './hooks/useRefState'
+import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useZoomCss } from './hooks/useZoomCss'
 import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
@@ -95,13 +99,6 @@ export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
 /** @public */
 export type TldrawEditorStoreProps = TldrawEditorWithStoreProps | TldrawEditorWithoutStoreProps
 
-/**
- * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
- *
- * @public
- **/
-export type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps
-
 /**
  * Base props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
  *
@@ -128,36 +125,29 @@ export interface TldrawEditorBaseProps {
 	 */
 	tools?: readonly TLStateNodeConstructor[]
 
+	/** Urls for where to find fonts and other assets. */
+	assetUrls?: { fonts?: { [key: string]: string | undefined } }
+
 	/**
 	 * Whether to automatically focus the editor when it mounts.
 	 */
 	autoFocus?: boolean
 
-	/**
-	 * Overrides for the editor's components, such as handles, collaborator cursors, etc.
-	 */
+	/** Overrides for the tldraw user interface components. */
 	components?: TLEditorComponents
 
 	/**
 	 * Called when the editor has mounted.
+	 * @example
+	 * ```ts
+	 * <Tldraw onMount={(editor) => editor.selectAll()} />
+	 * ```
+	 * @param editor - The editor instance.
+	 *
+	 * @public
 	 */
 	onMount?: TLOnMountHandler
 
-	/**
-	 * The editor's initial state (usually the id of the first active tool).
-	 */
-	initialState?: string
-
-	/**
-	 * A classname to pass to the editor's container.
-	 */
-	className?: string
-
-	/**
-	 * The user interacting with the editor.
-	 */
-	user?: TLUser
-
 	/**
 	 * Whether to infer dark mode from the user's OS. Defaults to false.
 	 */
@@ -218,25 +208,8 @@ export interface TldrawEditorBaseProps {
 		shape: TLShape,
 		editor: Editor
 	): 'visible' | 'hidden' | 'inherit' | null | undefined
-
-	/**
-	 * The URLs for the fonts to use in the editor.
-	 */
-	assetUrls?: { fonts?: { [key: string]: string | undefined } }
 }
 
-/**
- * Called when the editor has mounted.
- * @example
- * ```ts
- * <Tldraw onMount={(editor) => editor.selectAll()} />
- * ```
- * @param editor - The editor instance.
- *
- * @public
- */
-export type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void
-
 declare global {
 	interface Window {
 		tldrawReady: boolean
@@ -354,10 +327,7 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 	store,
 	user,
 	...rest
-}: Required<
-	TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser },
-	'shapeUtils' | 'bindingUtils' | 'tools'
->) {
+}: Required<TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser }, 'shapeUtils' | 'bindingUtils' | 'tools'>) {
 	const container = useContainer()
 
 	useLayoutEffect(() => {
@@ -367,8 +337,6 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 		}
 	}, [container, user])
 
-	const { LoadingScreen } = useEditorComponents()
-
 	switch (store.status) {
 		case 'error': {
 			// for error handling, we fall back to the default error boundary.
@@ -377,6 +345,7 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 			throw store.error
 		}
 		case 'loading': {
+			const { LoadingScreen } = useEditorComponents()
 			return LoadingScreen ? <LoadingScreen /> : null
 		}
 		case 'not-synced': {
@@ -465,7 +434,6 @@ function TldrawEditorWithReadyStore({
 				getContainer: () => container,
 				user,
 				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
@@ -510,8 +478,6 @@ function TldrawEditorWithReadyStore({
 			licenseKey,
 			isShapeHidden,
 			getShapeVisibility,
-			textOptions,
-			assetUrls,
 		]
 	)
 
@@ -529,21 +495,9 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
+	const { Canvas } = useEditorComponents()
+
+	// focus + blur (for docs site) ------------
 
 	// For our examples site, we want autoFocus to be true on the examples site, but not
 	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
@@ -577,6 +531,8 @@ function TldrawEditorWithReadyStore({
 		[editor, autoFocus]
 	)
 
+	// font loading state ----------------------
+
 	const [_fontLoadingState, setFontLoadingState] = useState<{
 		editor: Editor
 		isLoaded: boolean
@@ -603,7 +559,7 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor])
 
-	const { Canvas, LoadingScreen } = useEditorComponents()
+	const { LoadingScreen } = useEditorComponents()
 
 	if (!editor || !fontLoadingState?.isLoaded) {
 		return (
@@ -614,30 +570,49 @@ function TldrawEditorWithReadyStore({
 		)
 	}
 
-	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
-		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
-			onError={(error) =>
-				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
-			}
-		>
-			{crashingError ? (
+	// crash page ------------------------------
+
+	const crashingError = useSyncExternalStore(
+		useCallback(
+			(onStoreChange) => {
+				if (editor) {
+					editor.on('crash', onStoreChange)
+					return () => editor.off('crash', onStoreChange)
+				}
+				return () => {
+					// noop
+				}
+			},
+			[editor]
+		),
+		() => editor?.getCrashingError() ?? null
+	)
+
+	if (crashingError) {
+		return (
+			<OptionalErrorBoundary
+				fallback={ErrorFallback}
+				onError={(error) =>
+					editor.annotateError(error, {
+						origin: 'react.tldraw',
+						willCrashApp: false,
+					})
+				}
+			>
 				<Crash crashingError={crashingError} />
-			) : (
-				<EditorProvider editor={editor}>
-					<Layout onMount={onMount}>
-						{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
-						<Watermark />
-					</Layout>
-				</EditorProvider>
-			)}
-		</OptionalErrorBoundary>
+			</OptionalErrorBoundary>
+		)
+	}
+
+	// normal page ------------------------------
+
+	return (
+		<EditorProvider editor={editor}>
+			<Layout onMount={onMount}>
+				{children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
+				<Watermark />
+			</Layout>
+		</EditorProvider>
 	)
 }
 
@@ -704,4 +679,16 @@ export function useOnMount(onMount?: TLOnMountHandler) {
 	React.useLayoutEffect(() => {
 		if (editor) return onMountEvent?.(editor)
 	}, [editor, onMountEvent])
-}
\ No newline at end of file
+}
+
+/**
+ * Called when the editor has mounted.
+ * @example
+ * ```ts
+ * <Tldraw onMount={(editor) => editor.selectAll()} />
+ * ```
+ * @param editor - The editor instance.
+ *
+ * @public
+ */
+export type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void
\ No newline at end of file
