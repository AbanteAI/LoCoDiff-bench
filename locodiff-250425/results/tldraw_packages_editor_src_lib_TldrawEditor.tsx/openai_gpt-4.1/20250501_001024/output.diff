
index fb7399b5..87f783b2 100644
--- a/tldraw_packages_editor_src_lib_TldrawEditor.tsx_expectedoutput.txt (expected):tmp/tmpk08s4qy9_expected.txt	
+++ b/tldraw_packages_editor_src_lib_TldrawEditor.tsx_extracted.txt (actual):tmp/tmpy2ibqquk_actual.txt	
@@ -5,7 +5,6 @@ import React, {
 	ReactNode,
 	memo,
 	useCallback,
-	useEffect,
 	useLayoutEffect,
 	useMemo,
 	useRef,
@@ -18,7 +17,6 @@ import { version } from '../version'
 import { OptionalErrorBoundary } from './components/ErrorBoundary'
 import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
 import { TLEditorSnapshot } from './config/TLEditorSnapshot'
-import { TLStoreBaseOptions } from './config/createTLStore'
 import { TLUser, createTLUser } from './config/createTLUser'
 import { TLAnyBindingUtilConstructor } from './config/defaultBindings'
 import { TLAnyShapeUtilConstructor } from './config/defaultShapes'
@@ -36,17 +34,17 @@ import {
 } from './hooks/useEditorComponents'
 import { useEvent } from './hooks/useEvent'
 import { useForceUpdate } from './hooks/useForceUpdate'
-import { useShallowObjectIdentity } from './hooks/useIdentity'
 import { useLocalStore } from './hooks/useLocalStore'
 import { useRefState } from './hooks/useRefState'
 import { useZoomCss } from './hooks/useZoomCss'
 import { LicenseProvider } from './license/LicenseProvider'
 import { Watermark } from './license/Watermark'
 import { TldrawOptions } from './options'
-import { TLDeepLinkOptions } from './utils/deepLinks'
 import { stopEventPropagation } from './utils/dom'
-import { TLTextOptions } from './utils/richText'
 import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'
+import { TLDeepLinkOptions } from './utils/deepLinks'
+import { TLTextOptions } from './utils/richText'
+import { useShallowObjectIdentity } from './hooks/useIdentity'
 
 /**
  * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when passing in a
@@ -69,7 +67,7 @@ export interface TldrawEditorWithStoreProps {
  *
  * @public
  */
-export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
+export interface TldrawEditorWithoutStoreProps {
 	store?: undefined
 
 	/**
@@ -90,18 +88,26 @@ export interface TldrawEditorWithoutStoreProps extends TLStoreBaseOptions {
 	persistenceKey?: string
 
 	sessionId?: string
+
+	/**
+	 * Name to use for the document.
+	 */
+	defaultName?: string
+
+	/**
+	 * Asset upload/resolve options for the store. See docs for more info.
+	 * @deprecated Experimental
+	 */
+	assets?: any
+	/**
+	 * The initial data for the store.
+	 * @deprecated Will be replaced by `snapshot`.
+	 */
+	initialData?: any
 }
 
-/** @public */
 export type TldrawEditorStoreProps = TldrawEditorWithStoreProps | TldrawEditorWithoutStoreProps
 
-/**
- * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
- *
- * @public
- **/
-export type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps
-
 /**
  * Base props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
  *
@@ -133,16 +139,9 @@ export interface TldrawEditorBaseProps {
 	 */
 	autoFocus?: boolean
 
-	/**
-	 * Overrides for the editor's components, such as handles, collaborator cursors, etc.
-	 */
+	/** Overrides for the editor's components, such as handles, collaborator cursors, etc. */
 	components?: TLEditorComponents
 
-	/**
-	 * Called when the editor has mounted.
-	 */
-	onMount?: TLOnMountHandler
-
 	/**
 	 * The editor's initial state (usually the id of the first active tool).
 	 */
@@ -226,23 +225,17 @@ export interface TldrawEditorBaseProps {
 }
 
 /**
- * Called when the editor has mounted.
- * @example
- * ```ts
- * <Tldraw onMount={(editor) => editor.selectAll()} />
- * ```
- * @param editor - The editor instance.
+ * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
  *
  * @public
- */
-export type TLOnMountHandler = (editor: Editor) => (() => void | undefined) | undefined | void
+ **/
+export type TldrawEditorProps = TldrawEditorBaseProps & TldrawEditorStoreProps
 
 declare global {
 	interface Window {
 		tldrawReady: boolean
 	}
 }
-
 const EMPTY_SHAPE_UTILS_ARRAY = [] as const
 const EMPTY_BINDING_UTILS_ARRAY = [] as const
 const EMPTY_TOOLS_ARRAY = [] as const
@@ -354,21 +347,17 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 	store,
 	user,
 	...rest
-}: Required<
-	TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser },
-	'shapeUtils' | 'bindingUtils' | 'tools'
->) {
+}: Required<TldrawEditorProps & { store: TLStoreWithStatus; user: TLUser }, 'shapeUtils' | 'bindingUtils' | 'tools'>) {
 	const container = useContainer()
 
 	useLayoutEffect(() => {
+		// @ts-expect-error - this can actually be null!
 		if (user.userPreferences.get().colorScheme === 'dark') {
 			container.classList.remove('tl-theme__light')
 			container.classList.add('tl-theme__dark')
 		}
 	}, [container, user])
 
-	const { LoadingScreen } = useEditorComponents()
-
 	switch (store.status) {
 		case 'error': {
 			// for error handling, we fall back to the default error boundary.
@@ -377,6 +366,7 @@ const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
 			throw store.error
 		}
 		case 'loading': {
+			const { LoadingScreen } = useEditorComponents()
 			return LoadingScreen ? <LoadingScreen /> : null
 		}
 		case 'not-synced': {
@@ -465,7 +455,6 @@ function TldrawEditorWithReadyStore({
 				getContainer: () => container,
 				user,
 				initialState,
-				// we should check for some kind of query parameter that turns off autofocus
 				autoFocus,
 				inferDarkMode,
 				cameraOptions,
@@ -497,7 +486,6 @@ function TldrawEditorWithReadyStore({
 				editor.dispose()
 			}
 		},
-		// if any of these change, we need to recreate the editor.
 		[
 			bindingUtils,
 			container,
@@ -529,22 +517,6 @@ function TldrawEditorWithReadyStore({
 		}
 	}, [editor, cameraOptions])
 
-	const crashingError = useSyncExternalStore(
-		useCallback(
-			(onStoreChange) => {
-				if (editor) {
-					editor.on('crash', onStoreChange)
-					return () => editor.off('crash', onStoreChange)
-				}
-				return () => {
-					// noop
-				}
-			},
-			[editor]
-		),
-		() => editor?.getCrashingError() ?? null
-	)
-
 	// For our examples site, we want autoFocus to be true on the examples site, but not
 	// when embedded in our docs site. If present, the `tldraw_preserve_focus` search param
 	// overrides the `autoFocus` prop and prevents the editor from focusing immediately,
@@ -614,15 +586,29 @@ function TldrawEditorWithReadyStore({
 		)
 	}
 
+	const crashingError = useSyncExternalStore(
+		useCallback(
+			(onStoreChange) => {
+				if (editor) {
+					editor.on('crash', onStoreChange)
+					return () => editor.off('crash', onStoreChange)
+				}
+				return () => {
+					// noop
+				}
+			},
+			[editor]
+		),
+		() => editor?.getCrashingError() ?? null
+	)
+
+	if (!editor) {
+		return <div className="tl-canvas" ref={canvasRef} />
+	}
+
 	return (
-		// the top-level tldraw component also renders an error boundary almost
-		// identical to this one. the reason we have two is because this one has
-		// access to `App`, which means that here we can enrich errors with data
-		// from app for reporting, and also still attempt to render the user's
-		// document in the event of an error to reassure them that their work is
-		// not lost.
 		<OptionalErrorBoundary
-			fallback={ErrorFallback as any}
+			fallback={ErrorFallback}
 			onError={(error) =>
 				editor.annotateError(error, { origin: 'react.tldraw', willCrashApp: true })
 			}
