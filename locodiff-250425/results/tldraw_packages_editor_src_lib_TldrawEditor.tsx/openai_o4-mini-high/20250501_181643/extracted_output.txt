import { MigrationSequence, Store } from '@tldraw/store'
import { TLShape, TLStore, TLStoreSnapshot } from '@tldraw/tlschema'
import { Required, annotateError } from '@tldraw/utils'
import React, {
  ReactNode,
  memo,
  useCallback,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
  useSyncExternalStore,
  useEffect,
} from 'react'
import classNames from 'classnames'
import { version } from '../version'
import { OptionalErrorBoundary } from './components/ErrorBoundary'
import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
import { TLEditorSnapshot } from './config/TLEditorSnapshot'
import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'
import { TLAnyBindingUtilConstructor } from './config/defaultBindings'
import { TLAnyShapeUtilConstructor } from './config/defaultShapes'
import { Editor } from './editor/Editor'
import { TLStateNodeConstructor } from './editor/tools/StateNode'
import { TLCameraOptions } from './editor/types/misc-types'
import { ContainerProvider, useContainer } from './hooks/useContainer'
import { useCursor } from './hooks/useCursor'
import { useDarkMode } from './hooks/useDarkMode'
import { EditorProvider, useEditor } from './hooks/useEditor'
import {
  EditorComponentsProvider,
  TLEditorComponents,
  useEditorComponents,
} from './hooks/useEditorComponents'
import { useEvent } from './hooks/useEvent'
import { useForceUpdate } from './hooks/useForceUpdate'
import { useLocalStore } from './hooks/useLocalStore'
import { useRefState } from './hooks/useRefState'
import { useZoomCss } from './hooks/useZoomCss'
import { stopEventPropagation } from './utils/dom'
import { LicenseProvider } from './license/LicenseProvider'
import { Watermark } from './license/Watermark'
import { TldrawOptions } from './options'

/**
 * Props for the `tldraw` and `TldrawEditor` components, when passing in a
 * store directly. If you would like tldraw to create a store for you, use
 * {@link TldrawEditorWithoutStoreProps}.
 *
 * @public
 */
export interface TldrawEditorWithStoreProps {
  /**
   * The store to use in the editor.
   */
  store: TLStore | TLStoreWithStatus
}

/**
 * Props for the `tldraw` and `TldrawEditor` components, when not passing in a
 * store directly. If you would like to pass in a store directly, use
 * {@link TldrawEditorWithStoreProps}.
 *
 * @public
 */
export interface TldrawEditorWithoutStoreProps {
  store?: undefined
  migrations?: readonly MigrationSequence[]
  snapshot?: TLEditorSnapshot | TLStoreSnapshot
  persistenceKey?: string
  sessionId?: string
  defaultName?: string
  assets?: Record<string, unknown>
}

/** @public */
export type TldrawEditorStoreProps =
  | TldrawEditorWithStoreProps
  | TldrawEditorWithoutStoreProps

/**
 * Base props for the `tldraw` and `TldrawEditor` components.
 *
 * @public
 */
export interface TldrawEditorBaseProps {
  /** The component’s children. */
  children?: ReactNode

  /**
   * An array of shape utils to use in the editor.
   */
  shapeUtils?: readonly TLAnyShapeUtilConstructor[]

  /**
   * An array of binding utils to use in the editor.
   */
  bindingUtils?: readonly TLAnyBindingUtilConstructor[]

  /**
   * An array of tools to add to the editor’s state chart.
   */
  tools?: readonly TLStateNodeConstructor[]

  /**
   * Whether to automatically focus the editor when it mounts.
   */
  autoFocus?: boolean

  /**
   * Overrides for the editor’s components, such as handles, collaborator cursors, etc.
   */
  components?: TLEditorComponents

  /**
   * Called when the editor has mounted.
   */
  onMount?: (editor: Editor) => (() => void) | undefined | void

  /**
   * The editor’s initial state (usually the id of the first active tool).
   */
  initialState?: string

  /**
   * A classname to pass to the editor’s container.
   */
  className?: string

  /**
   * The user interacting with the editor.
   */
  user?: TLStore['props']['user']

  /**
   * Whether to infer dark mode from the user’s OS. Defaults to false.
   */
  inferDarkMode?: boolean

  /**
   * Camera options for the editor.
   */
  cameraOptions?: Partial<TLCameraOptions>

  /**
   * Options for the editor.
   */
  options?: Partial<TldrawOptions>

  /**
   * The license key.
   */
  licenseKey?: string

  /**
   * Predicate for whether or not a shape should be hidden.
   *
   * Hidden shapes will not render in the editor, and they will not be eligible for hit test via
   * {@link Editor#getShapeAtPoint} and {@link Editor#getShapesAtPoint}. But otherwise they will
   * remain in the store and participate in all other operations.
   *
   * @deprecated Use {@link TldrawEditorBaseProps#getShapeVisibility} instead.
   */
  isShapeHidden?(shape: TLShape, editor: Editor): boolean

  /**
   * Provides a way to hide shapes.
   *
   * Hidden shapes will not render in the editor, and they will not be eligible for hit test via
   * {@link Editor#getShapeAtPoint} and {@link Editor#getShapesAtPoint}. But otherwise they will
   * remain in the store and participate in all other operations.
   *
   * @example
   * ```ts
   * getShapeVisibility={(shape, editor) =>
   *   shape.meta.hidden ? 'hidden' : 'inherit'
   * }
   * ```
   *
   * - `'inherit' | undefined` — (default) The shape will be visible unless its parent is hidden.
   * - `'hidden'` — The shape will be hidden.
   * - `'visible'` — The shape will be visible.
   *
   * @param shape — The shape to check.
   * @param editor — The editor instance.
   */
  getShapeVisibility?(
    shape: TLShape,
    editor: Editor
  ): 'visible' | 'hidden' | 'inherit' | null | undefined

  /**
   * The URLs for the fonts to use in the editor.
   */
  assetUrls?: { fonts?: Record<string, string> }
}

/**
 * Props for the `tldraw` and `TldrawEditor` components.
 *
 * @public
 */
export type TldrawEditorProps = TldrawEditorBaseProps &
  TldrawEditorStoreProps

/** @internal */
export const TL_CONTAINER_CLASS = 'tl-container'

/** @public @react */
export const TldrawEditor = memo(function TldrawEditor({
  store,
  components,
  className,
  user: _user,
  options: _options,
  ...rest
}: TldrawEditorProps) {
  const [container, setContainer] = useState<HTMLElement | null>(null)
  const user = useMemo(() => _user ?? Editor.createDefaultUser(), [_user])
  const ErrorFallback =
    components?.ErrorFallback === undefined
      ? DefaultErrorFallback
      : components?.ErrorFallback

  const withDefaults = {
    ...rest,
    shapeUtils: rest.shapeUtils ?? [],
    bindingUtils: rest.bindingUtils ?? [],
    tools: rest.tools ?? [],
    components,
    options: useMemo(() => _options ?? {}, [_options]),
  }

  return (
    <div
      ref={setContainer}
      data-tldraw={version}
      draggable={false}
      className={classNames(`${TL_CONTAINER_CLASS} tl-theme__light`, className)}
      onPointerDown={stopEventPropagation}
      tabIndex={-1}
      role="application"
      aria-label={withDefaults.options.branding}
    >
      <OptionalErrorBoundary
        fallback={ErrorFallback}
        onError={(error) =>
          annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })
        }
      >
        {container && (
          <LicenseProvider licenseKey={withDefaults.licenseKey}>
            <ContainerProvider container={container}>
              <EditorComponentsProvider overrides={components}>
                {store ? (
                  store instanceof Store ? (
                    <TldrawEditorWithReadyStore
                      {...withDefaults}
                      store={store}
                      user={user}
                    />
                  ) : (
                    <TldrawEditorWithLoadingStore
                      {...withDefaults}
                      store={store}
                      user={user}
                    />
                  )
                ) : (
                  <TldrawEditorWithOwnStore
                    {...withDefaults}
                    store={store}
                    user={user}
                  />
                )}
              </EditorComponentsProvider>
            </ContainerProvider>
          </LicenseProvider>
        )}
      </OptionalErrorBoundary>
    </div>
  )
})

function TldrawEditorWithOwnStore(
  props: Required<TldrawEditorProps & { store: undefined; user: TLStore['props']['user'] }, 'shapeUtils' | 'bindingUtils' | 'tools'>
) {
  const {
    defaultName,
    snapshot,
    initialData,
    shapeUtils,
    bindingUtils,
    persistenceKey,
    sessionId,
    user,
    assets,
    migrations,
  } = props

  const syncedStore = useLocalStore({
    shapeUtils,
    bindingUtils,
    initialData,
    snapshot,
    persistenceKey,
    sessionId,
    defaultName,
    assets,
    migrations,
  })

  return (
    <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />
  )
}

const TldrawEditorWithLoadingStore = memo(function TldrawEditorBeforeLoading({
  store,
  user,
  ...rest
}: Required<TldrawEditorProps & { store: TLStoreWithStatus; user: TLStore['props']['user'] }, 'shapeUtils' | 'bindingUtils' | 'tools'>) {
  const container = useContainer()

  useLayoutEffect(() => {
    if (user.preferences.get().colorScheme === 'dark') {
      container.classList.remove('tl-theme__light')
      container.classList.add('tl-theme__dark')
    }
  }, [container, user])

  if (store.status === 'error') {
    throw store.error
  }

  if (store.status === 'loading') {
    const { LoadingScreen } = useEditorComponents()
    return LoadingScreen ? <LoadingScreen /> : null
  }

  return (
    <TldrawEditorWithReadyStore
      {...rest}
      store={store.store}
      user={user}
    />
  )
})

function TldrawEditorWithReadyStore({
  onMount,
  children,
  shapeUtils,
  bindingUtils,
  tools,
  autoFocus = true,
  inferDarkMode,
  cameraOptions,
  textOptions,
  options,
  licenseKey,
  deepLinks: _deepLinks,
  // eslint-disable-next-line @typescript-eslint/no-deprecated
  isShapeHidden,
  getShapeVisibility,
  assetUrls,
  store,
  user,
}: Required<TldrawEditorProps & { store: TLStore; user: TLStore['props']['user'] }, 'shapeUtils' | 'bindingUtils' | 'tools'>) {
  const container = useContainer()
  const canvasRef = useRef<HTMLDivElement | null>(null)
  const [editor, setEditor] = useRefState<Editor | null>(null)

  const deepLinks = useMemo(
    () => (_deepLinks === true ? {} : _deepLinks),
    [_deepLinks]
  )

  const editorOptionsRef = useRef({
    autoFocus: autoFocus && !document.location.search.includes('tldraw_preserve_focus'),
    inferDarkMode,
    initialState,
    cameraOptions,
    deepLinks,
  })

  useLayoutEffect(() => {
    editorOptionsRef.current = {
      autoFocus: autoFocus && !document.location.search.includes('tldraw_preserve_focus'),
      inferDarkMode,
      initialState,
      cameraOptions,
      deepLinks,
    }
  }, [autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks])

  useLayoutEffect(
    () => {
      const {
        autoFocus: initFocus,
        inferDarkMode: initDark,
        initialState: initState,
        cameraOptions: initCam,
        deepLinks: initDeep,
      } = editorOptionsRef.current

      const ed = new Editor({
        store,
        shapeUtils,
        bindingUtils,
        tools,
        getContainer: () => container,
        user,
        initialState: initState,
        autoFocus: initFocus,
        inferDarkMode: initDark,
        cameraOptions: initCam,
        textOptions,
        options,
        licenseKey,
        isShapeHidden,
        getShapeVisibility,
        fontAssetUrls: assetUrls?.fonts,
        deepLinks: initDeep,
      })

      ed.updateViewportScreenBounds(canvasRef.current ?? container)

      if (deepLinks) {
        if (!deepLinks.getUrl) {
          ed.navigateToDeepLink(deepLinks)
        } else {
          ed.navigateToDeepLink({ ...deepLinks, url: deepLinks.getUrl(ed) })
        }
      }

      setEditor(ed)

      return () => {
        ed.dispose()
      }
    },
    [bindingUtils, container, options, shapeUtils, store, tools, user, setEditor, licenseKey, isShapeHidden, getShapeVisibility]
  )

  useLayoutEffect(() => {
    if (!editor) return
    if (deepLinks) {
      return editor.registerDeepLinkListener(deepLinks)
    }
  }, [editor, deepLinks])

  useLayoutEffect(() => {
    if (editor && cameraOptions) {
      editor.setCameraOptions(cameraOptions)
    }
  }, [editor, cameraOptions])

  const [fontLoading, setFontLoading] = useState<{
    editor: Editor
    isLoaded: boolean
  } | null>(null)

  useEffect(() => {
    if (!editor) return
    let cancelled = false

    setFontLoading({ editor, isLoaded: false })

    editor.fonts
      .loadRequiredFontsForCurrentPage(editor.options.maxFontsToLoadBeforeRender)
      .finally(() => {
        if (cancelled) return
        setFontLoading({ editor, isLoaded: true })
      })

    return () => {
      cancelled = true
    }
  }, [editor])

  useEffect(() => {
    if (!editor) return
    if (autoFocus && document.location.search.includes('tldraw_preserve_focus')) {
      function onFocus() {
        editor.focus()
      }
      function onBlur() {
        editor.blur()
      }
      editor.getContainer().addEventListener('pointerdown', onFocus)
      document.body.addEventListener('pointerdown', onBlur)
      return () => {
        editor.getContainer()?.removeEventListener('pointerdown', onFocus)
        document.body.removeEventListener('pointerdown', onBlur)
      }
    }
  }, [editor, autoFocus])

  const { Canvas, LoadingScreen } = useEditorComponents()

  if (!editor || !fontLoading?.isLoaded) {
    return (
      <>
        {LoadingScreen && <LoadingScreen />}
        <div className="tl-canvas" ref={canvasRef} />
      </>
    )
  }

  return (
    <EditorProvider editor={editor}>
      <Layout onMount={onMount}>
        {children ?? (Canvas ? <Canvas key={editor.contextId} /> : null)}
        <Watermark />
      </Layout>
    </EditorProvider>
  )
}

function Layout({
  children,
  onMount,
}: {
  children: ReactNode
  onMount?: (editor: Editor) => (() => void) | undefined | void
}) {
  useZoomCss()
  useCursor()
  useDarkMode()
  useForceUpdate()
  useOnMount((editor) => {
    const teardownStore = editor.store.props.onMount(editor)
    const teardownCallback = onMount?.(editor)
    return () => {
      teardownStore?.()
      teardownCallback?.()
    }
  })

  return <>{children}</>
}

function Crash({ crashingError }: { crashingError: unknown }): null {
  throw crashingError
}

/** @public @react */
export interface LoadingScreenProps {
  children: ReactNode
}

/** @public @react */
export function LoadingScreen({ children }: LoadingScreenProps) {
  return (
    <div className="tl-loading" aria-busy="true" tabIndex={0}>
      {children}
    </div>
  )
}

/** @public @react */
export function ErrorScreen({ children }: LoadingScreenProps) {
  return <div className="tl-loading">{children}</div>
}

/** @internal */
export function useOnMount(onMount?: (editor: Editor) => (() => void) | undefined | void) {
  const editor = useEditor()
  const onMountEvent = useEvent((ed: Editor) => {
    let teardown: (() => void) | void = undefined
    ed.run(() => {
      teardown = onMount?.(ed)
      ed.emit('mount')
    }, { history: 'ignore' })
    window.tldrawReady = true
    return teardown
  })
  useLayoutEffect(() => {
    if (editor) return onMountEvent?.(editor)
  }, [editor, onMountEvent])
}