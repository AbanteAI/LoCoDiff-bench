commit 1273653e5066fa1f24d129edd148509c3ed3e5d7
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sat May 3 14:32:51 2025 +0100

    assets: make option to transform urls dynamically to provide different sized assets on demand (#3992)
    
    this is take 2 of #3709
    
    Closes
    https://linear.app/tldraw/issue/TDE-1037/make-opt-in-feature-for-users-to-provide-different-assets-depending-on
    (also covers tde-368 and tde-367)
    
    This replaces (but has a couple of temporary pieces for backwards
    compatibility) our asset fetching logic to make it more declarative: you
    can specify URLs when creating assets and you'll get callbacks when
    those URLs need to be resolved or when they've changed.
    
    The core of this is that there's now an `AssetOptions` object which
    contains callbacks/handlers for asset events. The most important ones
    are `onResolveAsset` and `onResolveAssetForSvgExport`, which are called
    when tldraw needs the URL for an asset outside of React. The difference
    between them is that `onResolveAssetForSvgExport` should return a static
    URL (e.g. a base64 encoded data url) whereas `onResolveAsset` can return
    any URL (including data uris or webp for example).
    
    For backwards compatibility, if you don't provide asset options then
    we'll do what we were doing before.
    
    For better forwards compatibility, if you *do* provide asset options
    (but don't provide some of the handlers), then we'll provide default
    behaviours (e.g. only providing `onResolveAsset` will give you the same
    behaviour as before).
    
    `useDefaultAssetUrlWithOverrides` is a hook that you can use to override
    certain asset URLs (e.g. for one part of the app) in a way that's
    compatible with this new system.
    
    If you're using our default components then the only changes required
    are to the `assetUrls` and/or `onCreateAssetFromFile` props - you can
    now pass callbacks instead of URLs if you want to:
    ```tsx
    <Tldraw
      assetUrls={{
        fonts: {
          monospace: 'https://bringyour.com/fonts/mono.woff2',
          serif: 'https://bringyour.com/fonts/serif.woff2',
          sansSerif: () => {
            if (window.devicePixelRatio > 1) {
              return 'https://bringyour.com/fonts/sansSerif.@2x.woff2'
            }
            return 'https://bringyour.com/fonts/sansSerif.woff2'
          }
        }
      }}
      onCreateAssetFromFile={async (file) => {
        const someId = await uploadToS3(file)
        return {
          id: someId,
          type: 'image',
          props: {
            name: file.name,
            w: 100,
            h: 100,
            mimeType: file.type,
            src: () => `https://my-cloudfront-distro/${someId}.webp`
          }
        }
      }}
    />
    ```
    
    ### Change type
    
    - [x] `feature`
    - [ ] `improvement`
    - [x] `api`
    - [ ] `other`
    
    ### Test Plan
    
    - [ ] test on example app (tldraw)
    - [x] test on dotcom (tldraw.com, staging)
    - [ ] test on data
    
    ### Release notes
    
    - Asset urls can now be functions that are resolved when the assets are
    needed, which means you can provide different assets for different
    scenarios, such as different sized versions of assets depending on the
    current zoom level.

diff --git a/packages/editor/src/lib/TldrawEditor.tsx b/packages/editor/src/lib/TldrawEditor.tsx
index eefd1264a..9076c3e36 100644
--- a/packages/editor/src/lib/TldrawEditor.tsx
+++ b/packages/editor/src/lib/TldrawEditor.tsx
@@ -220,9 +220,9 @@ export interface TldrawEditorBaseProps {
 	getShapeVisibility?(
 		shape: TLShape,
 		editor: Editor
-	): 'visible' | 'hidden' | 'inherit' | null | undefined
+	): 'visible' | 'hidden' | 'inherit' | undefined
 
-	/**
+	/** 
 	 * The URLs for the fonts to use in the editor.
 	 */
 	assetUrls?: { fonts?: { [key: string]: string | undefined } }