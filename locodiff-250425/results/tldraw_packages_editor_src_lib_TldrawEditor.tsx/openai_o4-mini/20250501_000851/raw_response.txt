```typescript
import { MigrationSequence, Store } from '@tldraw/store'
import { TLShape, TLStore, TLStoreSnapshot } from '@tldraw/tlschema'
import { Required, annotateError } from '@tldraw/utils'
import React, {
  ReactNode,
  memo,
  useCallback,
  useEffect,
  useLayoutEffect,
  useMemo,
  useRef,
  useState,
  useSyncExternalStore,
} from 'react'
import classNames from 'classnames'
import { version } from '../version'
import { OptionalErrorBoundary } from './components/ErrorBoundary'
import { DefaultErrorFallback } from './components/default-components/DefaultErrorFallback'
import { TLEditorSnapshot } from './config/TLEditorSnapshot'
import { TLUser, createTLUser } from './config/createTLUser'
import { TLAnyBindingUtilConstructor } from './config/defaultBindings'
import { TLAnyShapeUtilConstructor } from './config/defaultShapes'
import { Editor } from './editor/Editor'
import { TLStateNodeConstructor } from './editor/tools/StateNode'
import { TLCameraOptions } from './editor/types/misc-types'
import { ContainerProvider, useContainer } from './hooks/useContainer'
import { useCursor } from './hooks/useCursor'
import { useDarkMode } from './hooks/useDarkMode'
import { EditorProvider, useEditor } from './hooks/useEditor'
import {
  EditorComponentsProvider,
  TLEditorComponents,
  useEditorComponents,
} from './hooks/useEditorComponents'
import { useEvent } from './hooks/useEvent'
import { useForceUpdate } from './hooks/useForceUpdate'
import { useLocalStore } from './hooks/useLocalStore'
import { useRefState } from './hooks/useRefState'
import { useZoomCss } from './hooks/useZoomCss'
import { LicenseProvider } from './license/LicenseProvider'
import { Watermark } from './license/Watermark'
import { TldrawOptions } from './options'
import { TLTextOptions } from './utils/richText'
import { stopEventPropagation } from './utils/dom'
import { TLStoreWithStatus } from './utils/sync/StoreWithStatus'

/**
 * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when passing in a
 * `TLStore` directly. If you would like tldraw to create a store for you, use
 * {@link TldrawEditorWithoutStoreProps}.
 *
 * @public
 */
export interface TldrawEditorWithStoreProps {
  /** The store to use in the editor. */
  store: TLStore | TLStoreWithStatus
}

/**
 * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components, when not passing in a
 * `TLStore` directly. If you would like to pass in a store directly, use
 * {@link TldrawEditorWithStoreProps}.
 *
 * @public
 */
export interface TldrawEditorWithoutStoreProps {
  /** Additional migrations to use in the store */
  migrations?: readonly MigrationSequence[]
  /**
   * A starting snapshot of data to pre-populate the store. Do not supply both this and
   * `initialData`.
   */
  snapshot?: TLEditorSnapshot | TLStoreSnapshot
  /**
   * If you would like to persist the store to the browser's local IndexedDB storage and sync it
   * across tabs, provide a key here. Each key represents a single tldraw document.
   */
  persistenceKey?: string
  sessionId?: string
}

/** @public */
export type TldrawEditorStoreProps =
  | TldrawEditorWithStoreProps
  | TldrawEditorWithoutStoreProps

/**
 * Props for the {@link tldraw#Tldraw} and {@link TldrawEditor} components.
 *
 * @public
 **/
export interface TldrawEditorBaseProps {
  /** The component's children. */
  children?: ReactNode
  /** An array of shape utils to use in the editor. */
  shapeUtils?: readonly TLAnyShapeUtilConstructor[]
  /** An array of binding utils to use in the editor. */
  bindingUtils?: readonly TLAnyBindingUtilConstructor[]
  /** An array of tools to add to the editor's state chart. */
  tools?: readonly TLStateNodeConstructor[]
  /** Camera options for the editor. */
  cameraOptions?: Partial<TLCameraOptions>
  /** Text options for the editor. */
  textOptions?: TLTextOptions
  /** Options for the editor. */
  options?: Partial<TldrawOptions>
  /** The license key. */
  licenseKey?: string
  /**
   * Options for syncing the editor's camera state with the URL.
   */
  deepLinks?: true | TLDeepLinkOptions
  /**
   * Provides a way to hide shapes.
   *
   * Hidden shapes will not render in the editor, and they will not be eligible for hit test via
   * {@link Editor#getShapeAtPoint} and {@link Editor#getShapesAtPoint}. But otherwise they will
   * remain in the store and participate in all other operations.
   *
   * @example
   * ```ts
   * getShapeVisibility={(shape, editor) => shape.meta.hidden ? 'hidden' : 'inherit'}
   * ```
   *
   * - `'inherit' | undefined` - (default) The shape will be visible unless its parent is hidden.
   * - `'hidden'` - The shape will be hidden.
   * - `'visible'` - The shape will be visible.
   *
   * @param shape - The shape to check.
   * @param editor - The editor instance.
   */
  getShapeVisibility?(
    shape: TLShape,
    editor: Editor
  ): 'visible' | 'hidden' | 'inherit' | null | undefined
  /**
   * The URLs for the fonts to use in the editor.
   */
  assetUrls?: { fonts?: { [key: string]: string | undefined } }
}

/** @public @react */
export const TldrawEditor = memo(function TldrawEditor({
  store,
  components,
  className,
  user: _user,
  options: _options,
  ...rest
}: TldrawEditorBaseProps & TldrawEditorStoreProps) {
  const [container, setContainer] = useState<HTMLElement | null>(null)
  const user = useMemo(() => _user ?? createTLUser(), [_user])
  const ErrorFallback =
    components?.ErrorFallback === undefined
      ? DefaultErrorFallback
      : components?.ErrorFallback

  const withDefaults = {
    ...rest,
    shapeUtils: rest.shapeUtils ?? [],
    bindingUtils: rest.bindingUtils ?? [],
    tools: rest.tools ?? [],
    components,
    options: useShallowObjectIdentity(_options),
  }

  return (
    <div
      ref={setContainer}
      data-tldraw={version}
      draggable={false}
      className={classNames(`${TL_CONTAINER_CLASS} tl-theme__light`, className)}
      onPointerDown={stopEventPropagation}
      tabIndex={-1}
      role="application"
      aria-label={_options?.branding ?? 'tldraw'}
    >
      <OptionalErrorBoundary
        fallback={ErrorFallback}
        onError={(error) =>
          annotateError(error, { tags: { origin: 'react.tldraw-before-app' } })
        }
      >
        {container && (
          <LicenseProvider licenseKey={rest.licenseKey}>
            <ContainerProvider container={container}>
              <EditorComponentsProvider overrides={components}>
                {store ? (
                  store instanceof Store ? (
                    <TldrawEditorWithReadyStore
                      {...withDefaults}
                      store={store}
                      user={user}
                    />
                  ) : (
                    <TldrawEditorWithLoadingStore
                      {...withDefaults}
                      store={store}
                      user={user}
                    />
                  )
                ) : (
                  <TldrawEditorWithOwnStore
                    {...withDefaults}
                    store={store}
                    user={user}
                  />
                )}
              </EditorComponentsProvider>
            </ContainerProvider>
          </LicenseProvider>
        )}
      </OptionalErrorBoundary>
    </div>
  )
})

function TldrawEditorWithOwnStore(
  props: Required<TldrawEditorBaseProps & TldrawEditorWithoutStoreProps & { user: TLUser }, 'shapeUtils' | 'bindingUtils' | 'tools'>
) {
  const {
    migrations,
    snapshot,
    initialData,
    persistenceKey,
    sessionId,
    defaultName,
    shapeUtils,
    bindingUtils,
    tools,
    user,
    assetUrls,
  } = props

  const syncedStore = useLocalStore({
    migrations,
    initialData,
    snapshot,
    persistenceKey,
    sessionId,
    defaultName,
    shapeUtils,
    bindingUtils,
    tools,
    user,
    assetUrls,
  })

  return <TldrawEditorWithLoadingStore {...props} store={syncedStore} user={user} />
}

const TldrawEditorWithLoadingStore = memo(function TldrawEditorWithLoadingStore({
  store,
  user,
  ...rest
}: Required<TldrawEditorBaseProps & TldrawEditorWithStoreProps & { user: TLUser }, 'shapeUtils' | 'bindingUtils' | 'tools'>) {
  const container = useContainer()

  useLayoutEffect(() => {
    if (user.userPreferences.get().colorScheme === 'dark') {
      container.classList.remove('tl-theme__light')
      container.classList.add('tl-theme__dark')
    }
  }, [container, user])

  switch (store.status) {
    case 'error': {
      throw store.error
    }
    case 'loading': {
      const { LoadingScreen } = useEditorComponents()
      return LoadingScreen ? <LoadingScreen /> : null
    }
    case 'not-synced':
    case 'synced-local':
    case 'synced-remote':
      break
  }

  return <TldrawEditorWithReadyStore {...rest} store={store.store} user={user} />
})

function TldrawEditorWithReadyStore({
  onMount,
  children,
  store,
  tools,
  shapeUtils,
  bindingUtils,
  cameraOptions,
  textOptions,
  options,
  licenseKey,
  deepLinks: _deepLinks,
  // eslint-disable-next-line @typescript-eslint/no-deprecated
  isShapeHidden,
  getShapeVisibility,
  assetUrls,
  user,
}: Required<
  TldrawEditorBaseProps & TldrawEditorStoreProps & { user: TLUser },
  'shapeUtils' | 'bindingUtils' | 'tools'
>) {
  const { ErrorFallback } = useEditorComponents()
  const container = useContainer()
  const [editor, setEditor] = useRefState<Editor | null>(null)
  const canvasRef = useRef<HTMLDivElement | null>(null)

  const deepLinks = useShallowObjectIdentity(_deepLinks === true ? {} : _deepLinks)

  const editorOptionsRef = useRef({
    // used only on mount
    autoFocus,
    inferDarkMode,
    initialState,

    // kept up to date separately
    cameraOptions,
    deepLinks,
  })

  useLayoutEffect(() => {
    editorOptionsRef.current = {
      autoFocus,
      inferDarkMode,
      initialState,
      cameraOptions,
      deepLinks,
    }
  }, [autoFocus, inferDarkMode, initialState, cameraOptions, deepLinks])

  useLayoutEffect(
    () => {
      const {
        autoFocus,
        inferDarkMode,
        initialState,
        cameraOptions,
        deepLinks,
      } = editorOptionsRef.current
      const e = new Editor({
        store,
        shapeUtils,
        bindingUtils,
        tools,
        getContainer: () => container,
        user,
        initialState,
        autoFocus: autoFocus && !document.location.search.includes('tldraw_preserve_focus'),
        inferDarkMode,
        cameraOptions,
        textOptions,
        options,
        licenseKey,
        isShapeHidden,
        getShapeVisibility,
        fontAssetUrls: assetUrls?.fonts,
      })

      e.updateViewportScreenBounds(canvasRef.current ?? container)

      if (deepLinks) {
        if (!deepLinks.getUrl) {
          e.navigateToDeepLink(deepLinks)
        } else {
          e.navigateToDeepLink({ ...deepLinks, url: deepLinks.getUrl(e) })
        }
      }

      setEditor(e)
      return () => e.dispose()
    },
    [bindingUtils, container, getShapeVisibility, options, shapeUtils, store, tools, user, licenseKey, textOptions, assetUrls]
  )

  useLayoutEffect(() => {
    if (editor && cameraOptions) {
      editor.setCameraOptions(cameraOptions)
    }
  }, [editor, cameraOptions])

  useLayoutEffect(() => {
    if (!editor) return
    if (deepLinks) {
      return editor.registerDeepLinkListener(deepLinks)
    }
  }, [editor, deepLinks])

  useEffect(() => {
    if (!editor) return
    let isCancelled = false
    editor.fonts
      .loadRequiredFontsForCurrentPage(editor.options.maxFontsToLoadBeforeRender)
      .finally(() => {
        if (!isCancelled) {
          setFontLoadingState({ editor, isLoaded: true })
        }
      })
    return () => {
      isCancelled = true
    }
  }, [editor])

  const { Canvas, LoadingScreen } = useEditorComponents()

  if (!editor || !_fontLoadingState?.isLoaded) {
    return (
      <>
        {LoadingScreen && <LoadingScreen />}
        <div className="tl-canvas" ref={canvasRef} />
      </>
    )
  }

  return (
    <EditorProvider editor={editor}>
      <Layout onMount={onMount}>{children ?? (Canvas ? <Canvas /> : null)}<Watermark /></Layout>
    </EditorProvider>
  )
}

function Layout({ children, onMount }: { children: ReactNode; onMount?: TLOnMountHandler }) {
  useZoomCss()
  useCursor()
  useDarkMode()
  useForceUpdate()
  useOnMount(onMount)
  return <>{children}</>
}

function Crash({ crashingError }: { crashingError: unknown }): null {
  throw crashingError
}

/** @public @react */
export function LoadingScreen({ children }: { children: ReactNode }) {
  return (
    <div className="tl-loading" aria-busy="true" tabIndex={0}>
      {children}
    </div>
  )
}

/** @public @react */
export function ErrorScreen({ children }: { children: ReactNode }) {
  return <div className="tl-loading">{children}</div>
}

/** @internal */
export function useOnMount(onMount?: TLOnMountHandler) {
  const editor = useEditor()
  const onMountEvent = useEvent((editor: Editor) => {
    let teardown: (() => void) | void = undefined
    editor.run(
      () => {
        teardown = onMount?.(editor)
        editor.emit('mount')
      },
      { history: 'ignore' }
    )
    window.tldrawReady = true
    return teardown
  })
  useLayoutEffect(() => {
    if (editor) return onMountEvent?.(editor)
  }, [editor, onMountEvent])
}
```