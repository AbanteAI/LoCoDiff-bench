
index a7fabdd8..b949ef06 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmp1gui_i1c_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmpalbl_ily_actual.txt	
@@ -206,6 +206,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -224,6 +225,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +235,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +245,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +255,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -286,6 +291,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -416,6 +422,47 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return 0
 	}
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getOutlineSegments(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
+	/**
+	 * Get whether the shape can receive children of a given type.
+	 *
+	 * @param shape - The shape.
+	 * @param type - The shape type.
+	 * @public
+	 */
+	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']): boolean {
+		return false
+	}
+
+	/**
+	 * Get whether the shape can receive children of a given type.
+	 *
+	 * @param shape - The shape type.
+	 * @param shapes - The shapes that are being dropped.
+	 * @public
+	 */
+	canDropShapes(_shape: Shape, _shapes: TLShape[]): boolean {
+		return false
+	}
+
 	/**
 	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
 	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
