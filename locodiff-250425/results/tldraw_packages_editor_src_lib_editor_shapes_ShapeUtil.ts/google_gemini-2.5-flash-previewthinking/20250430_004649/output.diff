--- tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual)@@ -6,7 +6,7 @@ 	TLHandle,
 	TLPropsMigrations,
 	TLShape,
-	TLShapeCrop,
+	TLCrop,
 	TLShapePartial,
 	TLUnknownShape,
 } from '@tldraw/tlschema'
@@ -14,6 +14,7 @@ import { Box, SelectionHandle } from '../../primitives/Box'
 import { Vec } from '../../primitives/Vec'
 import { Geometry2d } from '../../primitives/geometry/Geometry2d'
+import { linesIntersect } from '../../primitives/intersect'
 import type { Editor } from '../Editor'
 import { TLFontFace } from '../managers/FontManager'
 import { BoundsSnapGeometry } from '../managers/SnapManager/BoundsSnaps'
@@ -179,7 +180,7 @@ 	 * @param shape - The shape.
 	 * @public
 	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
+	getFontFaces(_shape: Shape): TLFontFace[] {
 		return EMPTY_ARRAY
 	}
 
@@ -194,18 +195,9 @@ 	}
 
 	/**
-	 * Whether the shape can be tabbed to.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
-	}
-
-	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -224,6 +216,7 @@ 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +226,7 @@ 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +236,7 @@ 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +246,7 @@ 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -258,12 +254,10 @@ 	}
 
 	/**
-	 * Whether the shape can participate in layout functions such as alignment or distribution.
+	 * Whether the shape participates in stacking, aligning, and distributing.
 	 *
 	 * @param shape - The shape.
 	 * @param info - Additional context information: the type of action causing the layout and the
-	 * @public
-	 *
 	 * @public
 	 */
 	canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean {
@@ -286,6 +280,7 @@ 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +290,7 @@ 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +300,7 @@ 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +310,7 @@ 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +320,7 @@ 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -373,7 +372,7 @@ 	 * @param type - The shape type.
 	 * @public
 	 */
-	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']) {
+	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']): boolean {
 		return false
 	}
 
@@ -384,7 +383,7 @@ 	 * @param shapes - The shapes that are being dropped.
 	 * @public
 	 */
-	canDropShapes(_shape: Shape, _shapes: TLShape[]) {
+	canDropShapes(_shape: Shape, _shapes: TLShape[]): boolean {
 		return false
 	}
 
@@ -417,18 +416,6 @@ 	}
 
 	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
-	}
-
-	/**
 	 * Get the geometry to use when snapping to this this shape in translate/resize operations. See
 	 * {@link BoundsSnapGeometry} for details.
 	 */
@@ -452,6 +439,10 @@ 		return undefined
 	}
 
+	canTabTo(_shape: Shape): boolean {
+		return true
+	}
+
 	//  Events
 
 	/**
@@ -461,9 +452,7 @@ 	 * @example
 	 *
 	 * ```ts
-	 * onBeforeCreate = (next) => {
-	 * 	return { ...next, x: next.x + 1 }
-	 * }
+	 * onBeforeCreate?(next: Shape): Shape | void
 	 * ```
 	 *
 	 * @param next - The next shape.
@@ -479,11 +468,7 @@ 	 * @example
 	 *
 	 * ```ts
-	 * onBeforeUpdate = (prev, next) => {
-	 * 	if (prev.x === next.x) {
-	 * 		return { ...next, x: next.x + 1 }
-	 * 	}
-	 * }
+	 * onBeforeUpdate?(prev: Shape, next: Shape): Shape | void
 	 * ```
 	 *
 	 * @param prev - The previous shape.
@@ -512,9 +497,7 @@ 	 * @example
 	 *
 	 * ```ts
-	 * onDragShapesOver = (shape, shapes) => {
-	 * 	this.editor.reparentShapes(shapes, shape.id)
-	 * }
+	 * onDragShapesOver?(shape: Shape, shapes: TLShape[]): void
 	 * ```
 	 *
 	 * @param shape - The shape.
@@ -606,7 +589,7 @@ 	 * A callback called when a shape's handle changes.
 	 *
 	 * @param shape - The current shape.
-	 * @param info - An object containing the handle and whether the handle is 'precise' or not.
+	 * @param info - An object containing the handle and whether the handle is 'precise' or not, and the shape's initial state.
 	 * @returns A change to apply to the shape, or void.
 	 * @public
 	 */
@@ -707,13 +690,15 @@  * Info about a crop.
  * @param handle - The handle being dragged.
  * @param change - The distance the handle is moved.
+ * @param crop - The current crop.
+ * @param uncroppedSize - The size of the uncropped image.
  * @param initialShape - The shape at the start of the resize.
  * @public
  */
 export interface TLCropInfo<T extends TLShape> {
 	handle: SelectionHandle
 	change: Vec
-	crop: TLShapeCrop
+	crop: TLCrop
 	uncroppedSize: { w: number; h: number }
 	initialShape: T
 }
@@ -755,8 +740,32 @@ /* -------------------- Dragging -------------------- */
 
 /** @public */
+export type TLOnDragHandler<T extends TLShape, R = void> = (shape: T, shapes: TLShape[]) => R
+
+/** @internal */
+export type TLOnBindingChangeHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+
+/** @public */
+export type TLOnChildrenChangeHandler<T extends TLShape> = (shape: T) => TLShapePartial[] | void
+
+/** @public */
 export interface TLHandleDragInfo<T extends TLShape> {
 	handle: TLHandle
 	isPrecise: boolean
 	initial?: T | undefined
-}+}
+
+/** @public */
+export type TLOnHandleDragHandler<T extends TLShape> = (shape: T, info: TLHandleDragInfo<T>) => TLShapePartial<T> | void
+
+/** @public */
+export type TLOnClickHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+/** @public */
+export type TLOnEditEndHandler<T extends TLShape> = (shape: T) => void
+/** @public */
+export type TLOnDoubleClickHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+/** @public */
+export type TLOnDoubleClickHandleHandler<T extends TLShape> = (
+	shape: T,
+	handle: TLHandle
+) => TLShapePartial<T> | void