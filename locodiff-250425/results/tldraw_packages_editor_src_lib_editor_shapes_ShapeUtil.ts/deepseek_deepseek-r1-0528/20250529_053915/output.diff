
index a7fabdd89..46a4f7bc2 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpgmfgp7od_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp8g10bh12_actual.txt	
@@ -1,6 +1,5 @@
 /* eslint-disable @typescript-eslint/no-unused-vars */
-import { EMPTY_ARRAY } from '@tldraw/state'
-import { LegacyMigrations, MigrationSequence } from '@tldraw/store'
+import { Migrations } from '@tldraw/store'
 import {
 	RecordProps,
 	TLHandle,
@@ -10,7 +9,7 @@ import {
 	TLShapePartial,
 	TLUnknownShape,
 } from '@tldraw/tlschema'
-import { ReactElement } from 'react'
+import { EMPTY_ARRAY } from '@tldraw/state'
 import { Box, SelectionHandle } from '../../primitives/Box'
 import { Vec } from '../../primitives/Vec'
 import { Geometry2d } from '../../primitives/geometry/Geometry2d'
@@ -38,7 +37,7 @@ export interface TLShapeUtilConstructor<
  *
  * @public
  */
-export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknownShape> {
+export interface TLShapeUtilCanBindOpts {
 	/** The type of shape referenced by the `fromId` of the binding. */
 	fromShapeType: string
 	/** The type of shape referenced by the `toId` of the binding. */
@@ -173,7 +172,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	abstract indicator(shape: Shape): any
 
 	/**
-	 * Get the font faces that should be rendered in the document in order for this shape to render
+	 * The font faces that should be rendered in the document in order for this shape to render
 	 * correctly.
 	 *
 	 * @param shape - The shape.
@@ -194,18 +193,18 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can be tabbed to.
+	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
 	 *
-	 * @param shape - The shape.
 	 * @public
 	 */
-	canTabTo(_shape: Shape): boolean {
+	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
 		return true
 	}
 
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -213,17 +212,19 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
+	 * Whether the shape can be tabbed to.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
-	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+	canTabTo(_shape: Shape): boolean {
 		return true
 	}
 
 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +234,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +244,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +254,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -286,6 +290,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +300,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +310,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +320,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +330,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -366,6 +375,25 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getOutlineSegments(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
@@ -416,14 +444,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return 0
 	}
 
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
+	/* Defs for shapes */
 	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
 		return []
 	}
@@ -455,25 +476,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	//  Events
 
 	/**
-	 * A callback called just before a shape is created. This method provides a last chance to modify
-	 * the created shape.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * onBeforeCreate = (next) => {
-	 * 	return { ...next, x: next.x + 1 }
-	 * }
-	 * ```
-	 *
-	 * @param next - The next shape.
-	 * @returns The next shape or void.
-	 * @public
-	 */
-	onBeforeCreate?(next: Shape): Shape | void
-
-	/**
-	 * A callback called just before a shape is updated. This method provides a last chance to modify
+	 * A callback called before a shape is updated. This method provides a last chance to modify
 	 * the updated shape.
 	 *
 	 * @example
@@ -602,16 +605,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	onTranslateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
 
-	/**
-	 * A callback called when a shape's handle changes.
-	 *
-	 * @param shape - The current shape.
-	 * @param info - An object containing the handle and whether the handle is 'precise' or not.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onHandleDrag?(shape: Shape, info: TLHandleDragInfo<Shape>): TLShapePartial<Shape> | void
-
 	/**
 	 * A callback called when a shape starts being rotated.
 	 *
@@ -750,13 +743,4 @@ export interface TLResizeInfo<T extends TLShape> {
 	scaleY: number
 	initialBounds: Box
 	initialShape: T
-}
-
-/* -------------------- Dragging -------------------- */
-
-/** @public */
-export interface TLHandleDragInfo<T extends TLShape> {
-	handle: TLHandle
-	isPrecise: boolean
-	initial?: T | undefined
 }
\ No newline at end of file
