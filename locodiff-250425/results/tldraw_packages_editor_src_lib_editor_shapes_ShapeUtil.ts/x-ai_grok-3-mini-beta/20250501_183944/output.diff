
index a7fabdd8..2fd7aedd 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpfeoqnwhh_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp5wla73xb_actual.txt	
@@ -1,6 +1,6 @@
 /* eslint-disable @typescript-eslint/no-unused-vars */
 import { EMPTY_ARRAY } from '@tldraw/state'
-import { LegacyMigrations, MigrationSequence } from '@tldraw/store'
+import { LegacyMigrations } from '@tldraw/store'
 import {
 	RecordProps,
 	TLHandle,
@@ -15,11 +15,12 @@ import { Box, SelectionHandle } from '../../primitives/Box'
 import { Vec } from '../../primitives/Vec'
 import { Geometry2d } from '../../primitives/geometry/Geometry2d'
 import type { Editor } from '../Editor'
-import { TLFontFace } from '../managers/FontManager'
 import { BoundsSnapGeometry } from '../managers/SnapManager/BoundsSnaps'
 import { HandleSnapGeometry } from '../managers/SnapManager/HandleSnaps'
 import { SvgExportContext } from '../types/SvgExportContext'
 import { TLResizeHandle } from '../types/selection-types'
+import { TLShapeUtilCanBindOpts } from './ShapeUtilCanBindOpts'
+import { TLGeometryOpts } from './ShapeUtilGeometryOpts'
 
 /** @public */
 export interface TLShapeUtilConstructor<
@@ -47,6 +48,16 @@ export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknown
 	bindingType: string
 }
 
+/**
+ * Additional options for the {@link ShapeUtil.getGeometry} method.
+ *
+ * @public
+ */
+export interface TLGeometryOpts {
+	/** The context in which the geometry is being requested. */
+	context?: string
+}
+
 /**
  * Options passed to {@link ShapeUtil.canBeLaidOut}.
  *
@@ -59,15 +70,6 @@ export interface TLShapeUtilCanBeLaidOutOpts {
 	shapes?: TLShape[]
 }
 
-/** Additional options for the {@link ShapeUtil.getGeometry} method.
- *
- * @public
- */
-export interface TLGeometryOpts {
-	/** The context in which the geometry is being requested. */
-	context?: string
-}
-
 /** @public */
 export interface TLShapeUtilCanvasSvgDef {
 	key: string
@@ -140,49 +142,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	static type: string
 
-	/**
-	 * Get the default props for a shape.
-	 *
-	 * @public
-	 */
-	abstract getDefaultProps(): Shape['props']
-
-	/**
-	 * Get the shape's geometry.
-	 *
-	 * @param shape - The shape.
-	 * @param opts - Additional options for the request.
-	 * @public
-	 */
-	abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d
-
-	/**
-	 * Get a JSX element for the shape (as an HTML element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract component(shape: Shape): any
-
-	/**
-	 * Get JSX describing the shape's indicator (as an SVG element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract indicator(shape: Shape): any
-
-	/**
-	 * Get the font faces that should be rendered in the document in order for this shape to render
-	 * correctly.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
-		return EMPTY_ARRAY
-	}
-
 	/**
 	 * Whether the shape can be snapped to by another shape.
 	 *
@@ -193,19 +152,10 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return true
 	}
 
-	/**
-	 * Whether the shape can be tabbed to.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
-	}
-
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -224,6 +174,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +184,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +194,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +204,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -260,10 +214,8 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can participate in layout functions such as alignment or distribution.
 	 *
-	 * @param shape - The shape.
-	 * @param info - Additional context information: the type of action causing the layout and the
-	 * @public
-	 *
+	 * @param _shape - The shape.
+	 * @param _info - Additional context information: the type of action causing the layout and the
 	 * @public
 	 */
 	canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean {
@@ -272,7 +224,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 
 	/**
 	 * Does this shape provide a background for its children? If this is true,
-	 * then any children with a `renderBackground` method will have their
+	 * then any children with a `backgroundComponent` will have their
 	 * backgrounds rendered _above_ this shape. Otherwise, the children's
 	 * backgrounds will be rendered above either the next ancestor that provides
 	 * a background, or the canvas background.
@@ -286,6 +238,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +248,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +258,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +268,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +278,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param _shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -367,65 +324,113 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	getHandles?(shape: Shape): TLHandle[]
 
 	/**
-	 * Get whether the shape can receive children of a given type.
+	 * Get the shape's geometry.
+	 *
+	 * @param shape - The shape.
+	 * @param opts - Additional options for the request.
+	 * @public
+	 */
+	abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d
+
+	/**
+	 * Get the font faces that should be rendered in the document in order for this shape to render
+	 * correctly.
 	 *
 	 * @param shape - The shape.
-	 * @param type - The shape type.
 	 * @public
 	 */
-	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']) {
+	getFontFaces(shape: Shape): TLFontFace[] {
+		return EMPTY_ARRAY
+	}
+
+	/**
+	 * Whether the shape can be snapped to by another shape.
+	 *
+	 * @param _shape - The shape.
+	 * @public
+	 */
+	canSnap(_shape: Shape): boolean {
+		return true
+	}
+
+	/**
+	 * Whether the shape can be scrolled while editing.
+	 *
+	 * @param _shape - The shape.
+	 * @public
+	 */
+	canScroll(_shape: Shape): boolean {
 		return false
 	}
 
 	/**
-	 * Get whether the shape can receive children of a given type.
+	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
+	 *
+	 * @public
+	 */
+	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+		return true
+	}
+
+	/**
+	 * Whether the shape can be tabbed to.
+	 *
+	 * @param _shape - The shape.
+	 * @public
+	 */
+	canTabTo(_shape: Shape): boolean {
+		return true
+	}
+
+	/**
+	 * Whether the shape can be double clicked to edit.
 	 *
-	 * @param shape - The shape type.
-	 * @param shapes - The shapes that are being dropped.
+	 * @param _shape - The shape.
 	 * @public
 	 */
-	canDropShapes(_shape: Shape, _shapes: TLShape[]) {
+	canEdit(_shape: Shape): boolean {
 		return false
 	}
 
 	/**
-	 * Get the shape as an SVG object.
+	 * Whether the shape can be resized.
 	 *
-	 * @param shape - The shape.
-	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
+	 * @param _shape - The shape.
 	 * @public
 	 */
-	toSvg?(shape: Shape, ctx: SvgExportContext): ReactElement | null | Promise<ReactElement | null>
+	canResize(_shape: Shape): boolean {
+		return true
+	}
 
 	/**
-	 * Get the shape's background layer as an SVG object.
+	 * Whether the shape can be edited in read-only mode.
 	 *
-	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
+	 * @param _shape - The shape.
 	 * @public
 	 */
-	toBackgroundSvg?(
-		shape: Shape,
-		ctx: SvgExportContext
-	): ReactElement | null | Promise<ReactElement | null>
+	canEditInReadOnly(_shape: Shape): boolean {
+		return false
+	}
 
-	/** @internal */
-	expandSelectionOutlinePx(shape: Shape): number | Box {
-		return 0
+	/**
+	 * Whether the shape can be cropped.
+	 *
+	 * @param _shape - The shape.
+	 * @public
+	 */
+	canCrop(_shape: Shape): boolean {
+		return false
 	}
 
 	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
+	 * Whether the shape can participate in layout functions such as alignment or distribution.
 	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
+	 * @param _shape - The shape.
+	 * @param _info - Additional context information: the type of action causing the layout and the
+	 * @public
 	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
+	canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean {
+		return true
 	}
 
 	/**
@@ -494,7 +499,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	onBeforeUpdate?(prev: Shape, next: Shape): Shape | void
 
 	/**
-	 * A callback called when a shape changes from a crop.
+	 * A callback called when cropping the shape.
 	 *
 	 * @param shape - The shape at the start of the crop.
 	 * @param info - Info about the crop.
@@ -515,248 +520,4 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * onDragShapesOver = (shape, shapes) => {
 	 * 	this.editor.reparentShapes(shapes, shape.id)
 	 * }
-	 * ```
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dragged over this one.
-	 * @public
-	 */
-	onDragShapesOver?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when some other shapes are dragged out of this one.
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dragged out.
-	 * @public
-	 */
-	onDragShapesOut?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when some other shapes are dropped over this one.
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dropped over this one.
-	 * @public
-	 */
-	onDropShapesOver?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when a shape starts being resized.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResizeStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a resize.
-	 *
-	 * @param shape - The shape at the start of the resize.
-	 * @param info - Info about the resize.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResize?(
-		shape: Shape,
-		info: TLResizeInfo<Shape>
-	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
-
-	/**
-	 * A callback called when a shape finishes resizing.
-	 *
-	 * @param initial - The shape at the start of the resize.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResizeEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape starts being translated.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslateStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a translation.
-	 *
-	 * @param initial - The shape at the start of the translation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes translating.
-	 *
-	 * @param initial - The shape at the start of the translation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's handle changes.
-	 *
-	 * @param shape - The current shape.
-	 * @param info - An object containing the handle and whether the handle is 'precise' or not.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onHandleDrag?(shape: Shape, info: TLHandleDragInfo<Shape>): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape starts being rotated.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotateStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a rotation.
-	 *
-	 * @param initial - The shape at the start of the rotation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes rotating.
-	 *
-	 * @param initial - The shape at the start of the rotation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * Not currently used.
-	 *
-	 * @internal
-	 */
-	onBindingChange?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's children change.
-	 *
-	 * @param shape - The shape.
-	 * @returns An array of shape updates, or void.
-	 * @public
-	 */
-	onChildrenChange?(shape: Shape): TLShapePartial[] | void
-
-	/**
-	 * A callback called when a shape's handle is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @param handle - The handle that is double-clicked.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClickHandle?(shape: Shape, handle: TLHandle): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's edge is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClickEdge?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClick?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape is clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onClick?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes being editing.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	onEditEnd?(shape: Shape): void
-}
-
-/**
- * Info about a crop.
- * @param handle - The handle being dragged.
- * @param change - The distance the handle is moved.
- * @param initialShape - The shape at the start of the resize.
- * @public
- */
-export interface TLCropInfo<T extends TLShape> {
-	handle: SelectionHandle
-	change: Vec
-	crop: TLShapeCrop
-	uncroppedSize: { w: number; h: number }
-	initialShape: T
-}
-
-/**
- * The type of resize.
- *
- * 'scale_shape' - The shape is being scaled, usually as part of a larger selection.
- *
- * 'resize_bounds' - The user is directly manipulating an individual shape's bounds using a resize
- * handle. It is up to shape util implementers to decide how they want to handle the two
- * situations.
- *
- * @public
- */
-export type TLResizeMode = 'scale_shape' | 'resize_bounds'
-
-/**
- * Info about a resize.
- * @param newPoint - The new local position of the shape.
- * @param handle - The handle being dragged.
- * @param mode - The type of resize.
- * @param scaleX - The scale in the x-axis.
- * @param scaleY - The scale in the y-axis.
- * @param initialBounds - The bounds of the shape at the start of the resize.
- * @param initialShape - The shape at the start of the resize.
- * @public
- */
-export interface TLResizeInfo<T extends TLShape> {
-	newPoint: Vec
-	handle: TLResizeHandle
-	mode: TLResizeMode
-	scaleX: number
-	scaleY: number
-	initialBounds: Box
-	initialShape: T
-}
-
-/* -------------------- Dragging -------------------- */
-
-/** @public */
-export interface TLHandleDragInfo<T extends TLShape> {
-	handle: TLHandle
-	isPrecise: boolean
-	initial?: T | undefined
-}
\ No newline at end of file
+	 *
\ No newline at end of file
