
index a7fabdd89..3bc0f11c8 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpc0oja65f_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp5qryovxw_actual.txt	
@@ -38,7 +38,7 @@ export interface TLShapeUtilConstructor<
  *
  * @public
  */
-export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknownShape> {
+export interface TLShapeUtilCanBindOpts {
 	/** The type of shape referenced by the `fromId` of the binding. */
 	fromShapeType: string
 	/** The type of shape referenced by the `toId` of the binding. */
@@ -109,7 +109,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * ```tsx
 	 * import {T, TLBaseShape, TLDefaultColorStyle, DefaultColorStyle, ShapeUtil} from 'tldraw'
 	 *
-	 * type MyShape = TLBaseShape<'mine', {
+	 * Type MyShape = TLBaseShape<'mine', {
 	 *      color: TLDefaultColorStyle,
 	 *      text: string,
 	 * }>
@@ -194,36 +194,38 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can be tabbed to.
+	 * Whether the shape can be scrolled while editing.
 	 *
 	 * @param shape - The shape.
 	 * @public
 	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
+	canScroll(_shape: Shape): boolean {
+		return false
 	}
 
 	/**
-	 * Whether the shape can be scrolled while editing.
+	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
 	 *
 	 * @public
 	 */
-	canScroll(_shape: Shape): boolean {
-		return false
+	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+		return true
 	}
 
 	/**
-	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
+	 * Whether the shape can be tabbed to.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
-	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+	canTabTo(_shape: Shape): boolean {
 		return true
 	}
 
 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +235,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +245,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +255,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -286,6 +291,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +301,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +311,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +321,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +331,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -366,6 +376,25 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getOutlineSegments(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
@@ -683,7 +712,8 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @returns A change to apply to the shape, or void.
 	 * @public
 	 */
-	onDoubleClick?(shape: Shape): TLShapePartial<Shape> | void
+	onDoubleClick?(shape: Shape): TLShapePartial<Shape>极
+		): TLShapePartial<Shape> | void
 
 	/**
 	 * A callback called when a shape is clicked.
@@ -695,7 +725,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	onClick?(shape: Shape): TLShapePartial<Shape> | void
 
 	/**
-	 * A callback called when a shape finishes being editing.
+极 A callback called when a shape finishes being editing.
 	 *
 	 * @param shape - The shape.
 	 * @public
@@ -729,7 +759,7 @@ export interface TLCropInfo<T extends TLShape> {
  *
  * @public
  */
-export type TLResizeMode = 'scale_shape' | 'resize_bounds'
+export type TLResizeMode = 'scale_shape' |极resize_bounds'
 
 /**
  * Info about a resize.
