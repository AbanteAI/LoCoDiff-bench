--- tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual)@@ -79,9 +79,9 @@ 	/** Configure this shape utils {@link ShapeUtil.options | `options`}. */
 	static configure<T extends TLShapeUtilConstructor<any, any>>(
 		this: T,
-		options: T extends new (...args: any[]) => { options: infer Options } ? Partial<Options> : never
+		options: T extends new (...args: any[]) => { options: infer Options } ? Partial<Options> : never,
 	): T {
-		// @ts-expect-error -- typescript has no idea what's going on here but it's fine
+		// @ts-expect-error -- TypeScript can't track the dynamic subclassing
 		return class extends this {
 			// @ts-expect-error
 			options = { ...this.options, ...options }
@@ -95,6 +95,7 @@ 	 * this to provide customization options for your shape. If using an existing shape util, you
 	 * can customizing this by calling {@link ShapeUtil.configure}.
 	 */
+	// eslint-disable-next-line @typescript-eslint/ban-types
 	options = {}
 
 	/**
@@ -134,13 +135,6 @@ 	static migrations?: LegacyMigrations | TLPropsMigrations | MigrationSequence
 
 	/**
-	 * The type of the shape util, which should match the shape's type.
-	 *
-	 * @public
-	 */
-	static type: string
-
-	/**
 	 * Get the default props for a shape.
 	 *
 	 * @public
@@ -179,7 +173,7 @@ 	 * @param shape - The shape.
 	 * @public
 	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
+	getFontFaces(_shape: Shape): TLFontFace[] {
 		return EMPTY_ARRAY
 	}
 
@@ -262,8 +256,6 @@ 	 *
 	 * @param shape - The shape.
 	 * @param info - Additional context information: the type of action causing the layout and the
-	 * @public
-	 *
 	 * @public
 	 */
 	canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean {
@@ -355,12 +347,6 @@ 	/**
 	 * Get an array of handle models for the shape. This is an optional method.
 	 *
-	 * @example
-	 *
-	 * ```ts
-	 * util.getHandles?.(myShape)
-	 * ```
-	 *
 	 * @param shape - The shape.
 	 * @public
 	 */
@@ -408,24 +394,12 @@ 	 */
 	toBackgroundSvg?(
 		shape: Shape,
-		ctx: SvgExportContext
+		ctx: SvgExportContext,
 	): ReactElement | null | Promise<ReactElement | null>
 
 	/** @internal */
-	expandSelectionOutlinePx(shape: Shape): number | Box {
+	expandSelectionOutlinePx(_shape: Shape): number | Box {
 		return 0
-	}
-
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
 	}
 
 	/**
@@ -458,14 +432,6 @@ 	 * A callback called just before a shape is created. This method provides a last chance to modify
 	 * the created shape.
 	 *
-	 * @example
-	 *
-	 * ```ts
-	 * onBeforeCreate = (next) => {
-	 * 	return { ...next, x: next.x + 1 }
-	 * }
-	 * ```
-	 *
 	 * @param next - The next shape.
 	 * @returns The next shape or void.
 	 * @public
@@ -475,16 +441,6 @@ 	/**
 	 * A callback called just before a shape is updated. This method provides a last chance to modify
 	 * the updated shape.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * onBeforeUpdate = (prev, next) => {
-	 * 	if (prev.x === next.x) {
-	 * 		return { ...next, x: next.x + 1 }
-	 * 	}
-	 * }
-	 * ```
 	 *
 	 * @param prev - The previous shape.
 	 * @param next - The next shape.
@@ -503,19 +459,11 @@ 	 */
 	onCrop?(
 		shape: Shape,
-		info: TLCropInfo<Shape>
+		info: TLCropInfo<Shape>,
 	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
 
 	/**
 	 * A callback called when some other shapes are dragged over this one.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * onDragShapesOver = (shape, shapes) => {
-	 * 	this.editor.reparentShapes(shapes, shape.id)
-	 * }
-	 * ```
 	 *
 	 * @param shape - The shape.
 	 * @param shapes - The shapes that are being dragged over this one.
@@ -560,7 +508,7 @@ 	 */
 	onResize?(
 		shape: Shape,
-		info: TLResizeInfo<Shape>
+		info: TLResizeInfo<Shape>,
 	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
 
 	/**
@@ -755,8 +703,29 @@ /* -------------------- Dragging -------------------- */
 
 /** @public */
+export type TLOnDragHandler<T extends TLShape, R = void> = (shape: T, shapes: TLShape[]) => R
+
+/** @internal */
+export type TLOnBindingChangeHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+
+/** @public */
+export type TLOnChildrenChangeHandler<T extends TLShape> = (shape: T) => TLShapePartial[] | void
+
+/** @public */
 export interface TLHandleDragInfo<T extends TLShape> {
 	handle: TLHandle
 	isPrecise: boolean
 	initial?: T | undefined
-}+}
+
+/** @public */
+export type TLOnClickHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+/** @public */
+export type TLOnEditEndHandler<T extends TLShape> = (shape: T) => void
+/** @public */
+export type TLOnDoubleClickHandler<T extends TLShape> = (shape: T) => TLShapePartial<T> | void
+/** @public */
+export type TLOnDoubleClickHandleHandler<T extends TLShape> = (
+	shape: T,
+	handle: TLHandle,
+) => TLShapePartial<T> | void