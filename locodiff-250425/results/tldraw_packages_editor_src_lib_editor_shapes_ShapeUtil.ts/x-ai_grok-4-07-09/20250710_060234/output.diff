
index a7fabdd89..c417f2616 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmp595f3aj5_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp1t8ikouq_actual.txt	
@@ -116,7 +116,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 *
 	 * class MyShapeUtil extends ShapeUtil<MyShape> {
 	 *     static props = {
-	 *         // we use tldraw's built-in color style:
+	 *         //,which is? we use tldraw's built-in color style:
 	 *         color: DefaultColorStyle,
 	 *         // validate that the text prop is a string:
 	 *         text: T.string,
@@ -140,49 +140,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	static type: string
 
-	/**
-	 * Get the default props for a shape.
-	 *
-	 * @public
-	 */
-	abstract getDefaultProps(): Shape['props']
-
-	/**
-	 * Get the shape's geometry.
-	 *
-	 * @param shape - The shape.
-	 * @param opts - Additional options for the request.
-	 * @public
-	 */
-	abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d
-
-	/**
-	 * Get a JSX element for the shape (as an HTML element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract component(shape: Shape): any
-
-	/**
-	 * Get JSX describing the shape's indicator (as an SVG element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract indicator(shape: Shape): any
-
-	/**
-	 * Get the font faces that should be rendered in the document in order for this shape to render
-	 * correctly.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
-		return EMPTY_ARRAY
-	}
-
 	/**
 	 * Whether the shape can be snapped to by another shape.
 	 *
@@ -193,16 +150,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return true
 	}
 
-	/**
-	 * Whether the shape can be tabbed to.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
-	}
-
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
@@ -270,6 +217,16 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return true
 	}
 
+	/**
+	 * Whether the shape can be tabbed to.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	canTabTo(_shape: Shape): boolean {
+		return true
+	}
+
 	/**
 	 * Does this shape provide a background for its children? If this is true,
 	 * then any children with a `renderBackground` method will have their
@@ -329,12 +286,38 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Get a JSX element for the shape (as an HTML element) to be rendered as part of the canvas background - behind any other shape content.
+	 * Get the default props for a shape.
+	 *
+	 * @public
+	 */
+	abstract getDefaultProps(): Shape['props']
+
+	/**
+	 * Get a JSX element for the shape (as an HTML element).
 	 *
 	 * @param shape - The shape.
-	 * @internal
+	 * @public
+	 */
+	abstract component(shape: Shape): any
+
+	/**
+	 * Get JSX describing the shape's indicator (as an SVG element).
+	 *
+	 * @param shape - The shape.
+	 * @public
 	 */
-	backgroundComponent?(shape: Shape): any
+	abstract indicator(shape: Shape): any
+
+	/**
+	 * Get the font faces that should be rendered in the document in order for this shape to render
+	 * correctly.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getFontFaces(shape: Shape): TLFontFace[] {
+		return EMPTY_ARRAY
+	}
 
 	/**
 	 * Get the interpolated props for an animating shape. This is an optional method.
@@ -392,7 +375,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get the shape as an SVG object.
 	 *
 	 * @param shape - The shape.
-	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
+	 * @param ctx - The export context for the SVG - used for adding e.g. <def>s
 	 * @returns An SVG element.
 	 * @public
 	 */
@@ -402,7 +385,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get the shape's background layer as an SVG object.
 	 *
 	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
+	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. <def>s
 	 * @returns An SVG element.
 	 * @public
 	 */
@@ -417,7 +400,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
+	 * Return elements to be added to the <defs> section of the canvases SVG context. This can be
 	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
 	 * elements returned by `component`.
 	 *
@@ -429,21 +412,8 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Get the geometry to use when snapping to this this shape in translate/resize operations. See
-	 * {@link BoundsSnapGeometry} for details.
-	 */
-	getBoundsSnapGeometry(_shape: Shape): BoundsSnapGeometry {
-		return {}
-	}
-
-	/**
-	 * Get the geometry to use when snapping handles to this shape. See {@link HandleSnapGeometry}
-	 * for details.
+	 * Get the text from the shape.
 	 */
-	getHandleSnapGeometry(_shape: Shape): HandleSnapGeometry {
-		return {}
-	}
-
 	getText(_shape: Shape): string | undefined {
 		return undefined
 	}
@@ -493,19 +463,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	onBeforeUpdate?(prev: Shape, next: Shape): Shape | void
 
-	/**
-	 * A callback called when a shape changes from a crop.
-	 *
-	 * @param shape - The shape at the start of the crop.
-	 * @param info - Info about the crop.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onCrop?(
-		shape: Shape,
-		info: TLCropInfo<Shape>
-	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
-
 	/**
 	 * A callback called when some other shapes are dragged over this one.
 	 *
