
index a7fabdd8..6bcafe3a 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpudn5my8l_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmpclmpblon_actual.txt	
@@ -206,6 +206,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -224,6 +225,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +235,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +245,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +255,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -277,6 +282,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * backgrounds will be rendered above either the next ancestor that provides
 	 * a background, or the canvas background.
 	 *
+	 * @param shape - The shape.
 	 * @internal
 	 */
 	providesBackgroundForChildren(_shape: Shape): boolean {
@@ -286,6 +292,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +302,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +312,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +322,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +332,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -366,68 +377,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
-	/**
-	 * Get whether the shape can receive children of a given type.
-	 *
-	 * @param shape - The shape.
-	 * @param type - The shape type.
-	 * @public
-	 */
-	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']) {
-		return false
-	}
-
-	/**
-	 * Get whether the shape can receive children of a given type.
-	 *
-	 * @param shape - The shape type.
-	 * @param shapes - The shapes that are being dropped.
-	 * @public
-	 */
-	canDropShapes(_shape: Shape, _shapes: TLShape[]) {
-		return false
-	}
-
-	/**
-	 * Get the shape as an SVG object.
-	 *
-	 * @param shape - The shape.
-	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
-	 * @public
-	 */
-	toSvg?(shape: Shape, ctx: SvgExportContext): ReactElement | null | Promise<ReactElement | null>
-
-	/**
-	 * Get the shape's background layer as an SVG object.
-	 *
-	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
-	 * @public
-	 */
-	toBackgroundSvg?(
-		shape: Shape,
-		ctx: SvgExportContext
-	): ReactElement | null | Promise<ReactElement | null>
-
-	/** @internal */
-	expandSelectionOutlinePx(shape: Shape): number | Box {
-		return 0
-	}
-
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
-	}
-
 	/**
 	 * Get the geometry to use when snapping to this this shape in translate/resize operations. See
 	 * {@link BoundsSnapGeometry} for details.
