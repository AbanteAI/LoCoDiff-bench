--- tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual)@@ -59,7 +59,8 @@ 	shapes?: TLShape[]
 }
 
-/** Additional options for the {@link ShapeUtil.getGeometry} method.
+/**
+ * Additional options for the {@link ShapeUtil.getGeometry} method.
  *
  * @public
  */
@@ -206,6 +207,7 @@ 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canScroll(_shape: Shape): boolean {
@@ -224,6 +226,7 @@ 	/**
 	 * Whether the shape can be double clicked to edit.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEdit(_shape: Shape): boolean {
@@ -233,6 +236,7 @@ 	/**
 	 * Whether the shape can be resized.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canResize(_shape: Shape): boolean {
@@ -242,6 +246,7 @@ 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canEditInReadOnly(_shape: Shape): boolean {
@@ -251,6 +256,7 @@ 	/**
 	 * Whether the shape can be cropped.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	canCrop(_shape: Shape): boolean {
@@ -258,7 +264,7 @@ 	}
 
 	/**
-	 * Whether the shape can participate in layout functions such as alignment or distribution.
+	 * Whether the shape participates in layout functions such as alignment or distribution.
 	 *
 	 * @param shape - The shape.
 	 * @param info - Additional context information: the type of action causing the layout and the
@@ -286,6 +292,7 @@ 	/**
 	 * Whether the shape should hide its resize handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideResizeHandles(_shape: Shape): boolean {
@@ -295,6 +302,7 @@ 	/**
 	 * Whether the shape should hide its rotation handles when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideRotateHandle(_shape: Shape): boolean {
@@ -304,6 +312,7 @@ 	/**
 	 * Whether the shape should hide its selection bounds background when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsBg(_shape: Shape): boolean {
@@ -313,6 +322,7 @@ 	/**
 	 * Whether the shape should hide its selection bounds foreground when selected.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	hideSelectionBoundsFg(_shape: Shape): boolean {
@@ -322,6 +332,7 @@ 	/**
 	 * Whether the shape's aspect ratio is locked.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
 	isAspectRatioLocked(_shape: Shape): boolean {
@@ -380,7 +391,7 @@ 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
-	 * @param shape - The shape type.
+	 * @param shape - The shape.
 	 * @param shapes - The shapes that are being dropped.
 	 * @public
 	 */
@@ -402,7 +413,7 @@ 	 * Get the shape's background layer as an SVG object.
 	 *
 	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
+	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
 	 * @returns An SVG element.
 	 * @public
 	 */
@@ -414,18 +425,6 @@ 	/** @internal */
 	expandSelectionOutlinePx(shape: Shape): number | Box {
 		return 0
-	}
-
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
 	}
 
 	/**
