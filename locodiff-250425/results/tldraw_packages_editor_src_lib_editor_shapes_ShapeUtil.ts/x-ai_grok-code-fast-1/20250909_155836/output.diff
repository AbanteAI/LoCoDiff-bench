
index a7fabdd89..d2480bbad 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpmnhv5z1v_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmpflcebbv7_actual.txt	
@@ -10,7 +10,6 @@ import {
 	TLShapePartial,
 	TLUnknownShape,
 } from '@tldraw/tlschema'
-import { ReactElement } from 'react'
 import { Box, SelectionHandle } from '../../primitives/Box'
 import { Vec } from '../../primitives/Vec'
 import { Geometry2d } from '../../primitives/geometry/Geometry2d'
@@ -64,7 +63,6 @@ export interface TLShapeUtilCanBeLaidOutOpts {
  * @public
  */
 export interface TLGeometryOpts {
-	/** The context in which the geometry is being requested. */
 	context?: string
 }
 
@@ -90,12 +88,14 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 
 	constructor(public editor: Editor) {}
 
+	options = {}
+
 	/**
-	 * Options for this shape util. If you're implementing a custom shape util, you can override
-	 * this to provide customization options for your shape. If using an existing shape util, you
-	 * can customizing this by calling {@link ShapeUtil.configure}.
+	 * The type of the shape util, which should match the shape's type.
+	 *
+	 * @public
 	 */
-	options = {}
+	static type: string
 
 	/**
 	 * Props allow you to define the shape's properties in a way that the editor can understand.
@@ -133,56 +133,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	static migrations?: LegacyMigrations | TLPropsMigrations | MigrationSequence
 
-	/**
-	 * The type of the shape util, which should match the shape's type.
-	 *
-	 * @public
-	 */
-	static type: string
-
-	/**
-	 * Get the default props for a shape.
-	 *
-	 * @public
-	 */
-	abstract getDefaultProps(): Shape['props']
-
-	/**
-	 * Get the shape's geometry.
-	 *
-	 * @param shape - The shape.
-	 * @param opts - Additional options for the request.
-	 * @public
-	 */
-	abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d
-
-	/**
-	 * Get a JSX element for the shape (as an HTML element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract component(shape: Shape): any
-
-	/**
-	 * Get JSX describing the shape's indicator (as an SVG element).
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	abstract indicator(shape: Shape): any
-
-	/**
-	 * Get the font faces that should be rendered in the document in order for this shape to render
-	 * correctly.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
-		return EMPTY_ARRAY
-	}
-
 	/**
 	 * Whether the shape can be snapped to by another shape.
 	 *
@@ -193,16 +143,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return true
 	}
 
-	/**
-	 * Whether the shape can be tabbed to.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
-	}
-
 	/**
 	 * Whether the shape can be scrolled while editing.
 	 *
@@ -230,15 +170,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return false
 	}
 
-	/**
-	 * Whether the shape can be resized.
-	 *
-	 * @public
-	 */
-	canResize(_shape: Shape): boolean {
-		return true
-	}
-
 	/**
 	 * Whether the shape can be edited in read-only mode.
 	 *
@@ -270,15 +201,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return true
 	}
 
-	/**
-	 * Does this shape provide a background for its children? If this is true,
-	 * then any children with a `renderBackground` method will have their
-	 * backgrounds rendered _above_ this shape. Otherwise, the children's
-	 * backgrounds will be rendered above either the next ancestor that provides
-	 * a background, or the canvas background.
-	 *
-	 * @internal
-	 */
 	providesBackgroundForChildren(_shape: Shape): boolean {
 		return false
 	}
@@ -328,6 +250,59 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return false
 	}
 
+	/**
+	 * Get the default props for a shape.
+	 *
+	 * @public
+	 */
+	abstract getDefaultProps(): Shape['props']
+
+	/**
+	 * Get the shape's geometry.
+	 *
+	 * @param shape - The shape.
+	 * @param opts - Additional options for the request.
+	 * @public
+	 */
+	abstract getGeometry(shape: Shape, opts?: TLGeometryOpts): Geometry2d
+
+	/**
+	 * Get a JSX element for the shape (as an HTML element).
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	abstract component(shape: Shape): any
+
+	/**
+	 * Get JSX describing the shape's indicator (as an SVG element).
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	abstract indicator(shape: Shape): any
+
+	/**
+	 * Get the font faces that should be rendered in the document in order for this shape to render
+	 * correctly.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getFontFaces(_shape: Shape): TLFontFace[] {
+		return EMPTY_ARRAY
+	}
+
+	/**
+	 * Whether the shape can be tabbed to.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	canTabTo(_shape: Shape): boolean {
+		return true
+	}
+
 	/**
 	 * Get a JSX element for the shape (as an HTML element) to be rendered as part of the canvas background - behind any other shape content.
 	 *
@@ -366,6 +341,25 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getOutlineSegments(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
@@ -392,8 +386,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get the shape as an SVG object.
 	 *
 	 * @param shape - The shape.
-	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
 	 * @public
 	 */
 	toSvg?(shape: Shape, ctx: SvgExportContext): ReactElement | null | Promise<ReactElement | null>
@@ -402,8 +394,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get the shape's background layer as an SVG object.
 	 *
 	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
 	 * @public
 	 */
 	toBackgroundSvg?(
@@ -416,18 +406,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return 0
 	}
 
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
-	}
-
 	/**
 	 * Get the geometry to use when snapping to this this shape in translate/resize operations. See
 	 * {@link BoundsSnapGeometry} for details.
@@ -444,10 +422,22 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return {}
 	}
 
+	/**
+	 * Get the text contained in the shape.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
 	getText(_shape: Shape): string | undefined {
 		return undefined
 	}
 
+	/**
+	 * Get the aria live text for the shape.
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
 	getAriaDescriptor(_shape: Shape): string | undefined {
 		return undefined
 	}
@@ -484,279 +474,5 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * 		return { ...next, x: next.x + 1 }
 	 * 	}
 	 * }
-	 * ```
-	 *
-	 * @param prev - The previous shape.
-	 * @param next - The next shape.
-	 * @returns The next shape or void.
-	 * @public
-	 */
-	onBeforeUpdate?(prev: Shape, next: Shape): Shape | void
-
-	/**
-	 * A callback called when a shape changes from a crop.
 	 *
-	 * @param shape - The shape at the start of the crop.
-	 * @param info - Info about the crop.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onCrop?(
-		shape: Shape,
-		info: TLCropInfo<Shape>
-	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
-
-	/**
-	 * A callback called when some other shapes are dragged over this one.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * onDragShapesOver = (shape, shapes) => {
-	 * 	this.editor.reparentShapes(shapes, shape.id)
-	 * }
-	 * ```
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dragged over this one.
-	 * @public
-	 */
-	onDragShapesOver?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when some other shapes are dragged out of this one.
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dragged out.
-	 * @public
-	 */
-	onDragShapesOut?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when some other shapes are dropped over this one.
-	 *
-	 * @param shape - The shape.
-	 * @param shapes - The shapes that are being dropped over this one.
-	 * @public
-	 */
-	onDropShapesOver?(shape: Shape, shapes: TLShape[]): void
-
-	/**
-	 * A callback called when a shape starts being resized.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResizeStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a resize.
-	 *
-	 * @param shape - The shape at the start of the resize.
-	 * @param info - Info about the resize.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResize?(
-		shape: Shape,
-		info: TLResizeInfo<Shape>
-	): Omit<TLShapePartial<Shape>, 'id' | 'type'> | undefined | void
-
-	/**
-	 * A callback called when a shape finishes resizing.
-	 *
-	 * @param initial - The shape at the start of the resize.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onResizeEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape starts being translated.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslateStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a translation.
-	 *
-	 * @param initial - The shape at the start of the translation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes translating.
-	 *
-	 * @param initial - The shape at the start of the translation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onTranslateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's handle changes.
-	 *
-	 * @param shape - The current shape.
-	 * @param info - An object containing the handle and whether the handle is 'precise' or not.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onHandleDrag?(shape: Shape, info: TLHandleDragInfo<Shape>): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape starts being rotated.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotateStart?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape changes from a rotation.
-	 *
-	 * @param initial - The shape at the start of the rotation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotate?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes rotating.
-	 *
-	 * @param initial - The shape at the start of the rotation.
-	 * @param current - The current shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onRotateEnd?(initial: Shape, current: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * Not currently used.
-	 *
-	 * @internal
-	 */
-	onBindingChange?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's children change.
-	 *
-	 * @param shape - The shape.
-	 * @returns An array of shape updates, or void.
-	 * @public
-	 */
-	onChildrenChange?(shape: Shape): TLShapePartial[] | void
-
-	/**
-	 * A callback called when a shape's handle is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @param handle - The handle that is double-clicked.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClickHandle?(shape: Shape, handle: TLHandle): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape's edge is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClickEdge?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape is double clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onDoubleClick?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape is clicked.
-	 *
-	 * @param shape - The shape.
-	 * @returns A change to apply to the shape, or void.
-	 * @public
-	 */
-	onClick?(shape: Shape): TLShapePartial<Shape> | void
-
-	/**
-	 * A callback called when a shape finishes being editing.
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	onEditEnd?(shape: Shape): void
-}
-
-/**
- * Info about a crop.
- * @param handle - The handle being dragged.
- * @param change - The distance the handle is moved.
- * @param initialShape - The shape at the start of the resize.
- * @public
- */
-export interface TLCropInfo<T extends TLShape> {
-	handle: SelectionHandle
-	change: Vec
-	crop: TLShapeCrop
-	uncroppedSize: { w: number; h: number }
-	initialShape: T
-}
-
-/**
- * The type of resize.
- *
- * 'scale_shape' - The shape is being scaled, usually as part of a larger selection.
- *
- * 'resize_bounds' - The user is directly manipulating an individual shape's bounds using a resize
- * handle. It is up to shape util implementers to decide how they want to handle the two
- * situations.
- *
- * @public
- */
-export type TLResizeMode = 'scale_shape' | 'resize_bounds'
-
-/**
- * Info about a resize.
- * @param newPoint - The new local position of the shape.
- * @param handle - The handle being dragged.
- * @param mode - The type of resize.
- * @param scaleX - The scale in the x-axis.
- * @param scaleY - The scale in the y-axis.
- * @param initialBounds - The bounds of the shape at the start of the resize.
- * @param initialShape - The shape at the start of the resize.
- * @public
- */
-export interface TLResizeInfo<T extends TLShape> {
-	newPoint: Vec
-	handle: TLResizeHandle
-	mode: TLResizeMode
-	scaleX: number
-	scaleY: number
-	initialBounds: Box
-	initialShape: T
-}
-
-/* -------------------- Dragging -------------------- */
-
-/** @public */
-export interface TLHandleDragInfo<T extends TLShape> {
-	handle: TLHandle
-	isPrecise: boolean
-	initial?: T | undefined
-}
\ No newline at end of file
+	 *
\ No newline at end of file
