
index a7fabdd89..63806a8b7 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpiq0dm7p6_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp6i4236ds_actual.txt	
@@ -36,9 +36,8 @@ export interface TLShapeUtilConstructor<
  * Options passed to {@link ShapeUtil.canBind}. A binding that could be made. At least one of
  * `fromShapeType` or `toShapeType` will belong to this shape util.
  *
- * @public
- */
-export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknownShape> {
+ * @public */
+export interface TLShapeUtilCanBindOpts {
 	/** The type of shape referenced by the `fromId` of the binding. */
 	fromShapeType: string
 	/** The type of shape referenced by the `toId` of the binding. */
@@ -172,6 +171,14 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	abstract indicator(shape: Shape): any
 
+	/**
+	 * Get a JSX element for the shape (as an HTML element) to be rendered as part of the canvas background - behind any other shape content.
+	 *
+	 * @param shape - The shape.
+	 * @internal
+	 */
+	backgroundComponent?(shape: Shape): any
+
 	/**
 	 * Get the font faces that should be rendered in the document in order for this shape to render
 	 * correctly.
@@ -183,6 +190,36 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return EMPTY_ARRAY
 	}
 
+	/**
+	 * Get the interpolated props for an animating shape. This is an optional method.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getInterpolatedProps?.(startShape, endShape, t)
+	 * ```
+	 *
+	 * @param startShape - The initial shape.
+	 * @param endShape - The initial shape.
+	 * @param progress - The normalized progress between zero (start) and 1 (end).
+	 * @public
+	 */
+	getInterpolatedProps?(startShape: Shape, endShape: Shape, progress: number): Shape['props']
+
+	/**
+	 * Get an array of handle models for the shape. This is an optional method.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getHandles?.(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getHandles?(shape: Shape): TLHandle[]
+
 	/**
 	 * Whether the shape can be snapped to by another shape.
 	 *
@@ -328,94 +365,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return false
 	}
 
-	/**
-	 * Get a JSX element for the shape (as an HTML element) to be rendered as part of the canvas background - behind any other shape content.
-	 *
-	 * @param shape - The shape.
-	 * @internal
-	 */
-	backgroundComponent?(shape: Shape): any
-
-	/**
-	 * Get the interpolated props for an animating shape. This is an optional method.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * util.getInterpolatedProps?.(startShape, endShape, t)
-	 * ```
-	 *
-	 * @param startShape - The initial shape.
-	 * @param endShape - The initial shape.
-	 * @param progress - The normalized progress between zero (start) and 1 (end).
-	 * @public
-	 */
-	getInterpolatedProps?(startShape: Shape, endShape: Shape, progress: number): Shape['props']
-
-	/**
-	 * Get an array of handle models for the shape. This is an optional method.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * util.getHandles?.(myShape)
-	 * ```
-	 *
-	 * @param shape - The shape.
-	 * @public
-	 */
-	getHandles?(shape: Shape): TLHandle[]
-
-	/**
-	 * Get whether the shape can receive children of a given type.
-	 *
-	 * @param shape - The shape.
-	 * @param type - The shape type.
-	 * @public
-	 */
-	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']) {
-		return false
-	}
-
-	/**
-	 * Get whether the shape can receive children of a given type.
-	 *
-	 * @param shape - The shape type.
-	 * @param shapes - The shapes that are being dropped.
-	 * @public
-	 */
-	canDropShapes(_shape: Shape, _shapes: TLShape[]) {
-		return false
-	}
-
-	/**
-	 * Get the shape as an SVG object.
-	 *
-	 * @param shape - The shape.
-	 * @param ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
-	 * @public
-	 */
-	toSvg?(shape: Shape, ctx: SvgExportContext): ReactElement | null | Promise<ReactElement | null>
-
-	/**
-	 * Get the shape's background layer as an SVG object.
-	 *
-	 * @param shape - The shape.
-	 * @param ctx - ctx - The export context for the SVG - used for adding e.g. \<def\>s
-	 * @returns An SVG element.
-	 * @public
-	 */
-	toBackgroundSvg?(
-		shape: Shape,
-		ctx: SvgExportContext
-	): ReactElement | null | Promise<ReactElement | null>
-
-	/** @internal */
-	expandSelectionOutlinePx(shape: Shape): number | Box {
-		return 0
-	}
-
 	/**
 	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
 	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
@@ -701,6 +650,34 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @public
 	 */
 	onEditEnd?(shape: Shape): void
+
+	/** @internal */
+	expandSelectionOutlinePx(shape: Shape): number | Box {
+		return 0
+	}
+
+	/**
+	 * Get the shape as an SVG object (or component) for export.
+	 *
+	 * @param shape - The shape.
+	 * @param ctx - The export context for the SVG - used for adding e.g. \<defs\>s
+	 * @returns An SVG element or null.
+	 * @public
+	 */
+	toSvg?(shape: Shape, ctx: SvgExportContext): ReactElement | null | Promise<ReactElement | null>
+
+	/**
+	 * Get the shape's background layer as an SVG object for export.
+	 *
+	 * @param shape - The shape.
+	 * @param ctx - The export context for the SVG - used for adding e.g. \<defs\>s
+	 * @returns An SVG element or null.
+	 * @public
+	 */
+	toBackgroundSvg?(
+		shape: Shape,
+		ctx: SvgExportContext
+	): ReactElement | null | Promise<ReactElement | null>
 }
 
 /**
@@ -752,8 +729,6 @@ export interface TLResizeInfo<T extends TLShape> {
 	initialShape: T
 }
 
-/* -------------------- Dragging -------------------- */
-
 /** @public */
 export interface TLHandleDragInfo<T extends TLShape> {
 	handle: TLHandle
