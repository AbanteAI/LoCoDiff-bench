
index a7fabdd8..d48c165b 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmp95d95_6n_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmpf0scfaj2_actual.txt	
@@ -24,7 +24,7 @@ import { TLResizeHandle } from '../types/selection-types'
 /** @public */
 export interface TLShapeUtilConstructor<
 	T extends TLUnknownShape,
-	U extends ShapeUtil<T> = ShapeUtil<T>,
+	U extends ShapeUtil<T> = ShapeUtil<T>
 > {
 	new (editor: Editor): U
 	type: T['type']
@@ -36,9 +36,8 @@ export interface TLShapeUtilConstructor<
  * Options passed to {@link ShapeUtil.canBind}. A binding that could be made. At least one of
  * `fromShapeType` or `toShapeType` will belong to this shape util.
  *
- * @public
- */
-export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknownShape> {
+ * @public */
+export interface TLShapeUtilCanBindOpts {
 	/** The type of shape referenced by the `fromId` of the binding. */
 	fromShapeType: string
 	/** The type of shape referenced by the `toId` of the binding. */
@@ -50,8 +49,7 @@ export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknown
 /**
  * Options passed to {@link ShapeUtil.canBeLaidOut}.
  *
- * @public
- */
+ * @public */
 export interface TLShapeUtilCanBeLaidOutOpts {
 	/** The type of action causing the layout. */
 	type?: 'align' | 'distribute' | 'pack' | 'stack' | 'flip' | 'stretch'
@@ -61,8 +59,7 @@ export interface TLShapeUtilCanBeLaidOutOpts {
 
 /** Additional options for the {@link ShapeUtil.getGeometry} method.
  *
- * @public
- */
+ * @public */
 export interface TLGeometryOpts {
 	/** The context in which the geometry is being requested. */
 	context?: string
@@ -194,30 +191,30 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can be tabbed to.
+	 * Whether the shape can be scrolled while editing.
 	 *
-	 * @param shape - The shape.
 	 * @public
 	 */
-	canTabTo(_shape: Shape): boolean {
-		return true
+	canScroll(_shape: Shape): boolean {
+		return false
 	}
 
 	/**
-	 * Whether the shape can be scrolled while editing.
+	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
 	 *
 	 * @public
 	 */
-	canScroll(_shape: Shape): boolean {
-		return false
+	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+		return true
 	}
 
 	/**
-	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
+	 * Whether the shape can be tabbed to.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
-	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
+	canTabTo(_shape: Shape): boolean {
 		return true
 	}
 
@@ -340,7 +337,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get the interpolated props for an animating shape. This is an optional method.
 	 *
 	 * @example
-	 *
 	 * ```ts
 	 * util.getInterpolatedProps?.(startShape, endShape, t)
 	 * ```
@@ -356,7 +352,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * Get an array of handle models for the shape. This is an optional method.
 	 *
 	 * @example
-	 *
 	 * ```ts
 	 * util.getHandles?.(myShape)
 	 * ```
@@ -444,22 +439,11 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return {}
 	}
 
-	getText(_shape: Shape): string | undefined {
-		return undefined
-	}
-
-	getAriaDescriptor(_shape: Shape): string | undefined {
-		return undefined
-	}
-
-	//  Events
-
 	/**
 	 * A callback called just before a shape is created. This method provides a last chance to modify
 	 * the created shape.
 	 *
 	 * @example
-	 *
 	 * ```ts
 	 * onBeforeCreate = (next) => {
 	 * 	return { ...next, x: next.x + 1 }
@@ -477,7 +461,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * the updated shape.
 	 *
 	 * @example
-	 *
 	 * ```ts
 	 * onBeforeUpdate = (prev, next) => {
 	 * 	if (prev.x === next.x) {
@@ -510,7 +493,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * A callback called when some other shapes are dragged over this one.
 	 *
 	 * @example
-	 *
 	 * ```ts
 	 * onDragShapesOver = (shape, shapes) => {
 	 * 	this.editor.reparentShapes(shapes, shape.id)
@@ -701,6 +683,14 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @public
 	 */
 	onEditEnd?(shape: Shape): void
+
+	getText(_shape: Shape): string | undefined {
+		return undefined
+	}
+
+	getAriaDescriptor(_shape: Shape): string | undefined {
+		return undefined
+	}
 }
 
 /**
