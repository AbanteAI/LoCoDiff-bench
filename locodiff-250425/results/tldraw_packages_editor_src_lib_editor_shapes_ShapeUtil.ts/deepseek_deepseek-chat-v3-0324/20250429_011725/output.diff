
index a7fabdd8..db4292d0 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpto7spvqh_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmp5p021gfe_actual.txt	
@@ -194,31 +194,31 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can be tabbed to.
+	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
 	 *
-	 * @param shape - The shape.
 	 * @public
 	 */
-	canTabTo(_shape: Shape): boolean {
+	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
 		return true
 	}
 
 	/**
-	 * Whether the shape can be scrolled while editing.
+	 * Whether the shape can be tabbed to.
 	 *
+	 * @param shape - The shape.
 	 * @public
 	 */
-	canScroll(_shape: Shape): boolean {
-		return false
+	canTabTo(_shape: Shape): boolean {
+		return true
 	}
 
 	/**
-	 * Whether the shape can be bound to. See {@link TLShapeUtilCanBindOpts} for details.
+	 * Whether the shape can be scrolled while editing.
 	 *
 	 * @public
 	 */
-	canBind(_opts: TLShapeUtilCanBindOpts): boolean {
-		return true
+	canScroll(_shape: Shape): boolean {
+		return false
 	}
 
 	/**
@@ -366,6 +366,25 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * util.getOutlineSegments(myShape)
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
@@ -416,18 +435,6 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		return 0
 	}
 
-	/**
-	 * Return elements to be added to the \<defs\> section of the canvases SVG context. This can be
-	 * used to define SVG content (e.g. patterns & masks) that can be referred to by ID from svg
-	 * elements returned by `component`.
-	 *
-	 * Each def should have a unique `key`. If multiple defs from different shapes all have the same
-	 * key, only one will be used.
-	 */
-	getCanvasSvgDefs(): TLShapeUtilCanvasSvgDef[] {
-		return []
-	}
-
 	/**
 	 * Get the geometry to use when snapping to this this shape in translate/resize operations. See
 	 * {@link BoundsSnapGeometry} for details.
