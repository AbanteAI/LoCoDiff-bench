
index a7fabdd8..ca275523 100644
--- a/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_expectedoutput.txt (expected):tmp/tmpmzhn8qrn_expected.txt	
+++ b/tldraw_packages_editor_src_lib_editor_shapes_ShapeUtil.ts_extracted.txt (actual):tmp/tmpv31re4l5_actual.txt	
@@ -38,7 +38,7 @@ export interface TLShapeUtilConstructor<
  *
  * @public
  */
-export interface TLShapeUtilCanBindOpts<Shape extends TLUnknownShape = TLUnknownShape> {
+export interface TLShapeUtilCanBindOpts {
 	/** The type of shape referenced by the `fromId` of the binding. */
 	fromShapeType: string
 	/** The type of shape referenced by the `toId` of the binding. */
@@ -88,6 +88,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 		}
 	}
 
+	/* eslint-disable @typescript-eslint/no-unused-vars */
 	constructor(public editor: Editor) {}
 
 	/**
@@ -171,6 +172,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @public
 	 */
 	abstract indicator(shape: Shape): any
+	/* eslint-enable @typescript-eslint/no-unused-vars */
 
 	/**
 	 * Get the font faces that should be rendered in the document in order for this shape to render
@@ -179,7 +181,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @param shape - The shape.
 	 * @public
 	 */
-	getFontFaces(shape: Shape): TLFontFace[] {
+	getFontFaces(_shape: Shape): TLFontFace[] {
 		return EMPTY_ARRAY
 	}
 
@@ -258,13 +260,12 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	}
 
 	/**
-	 * Whether the shape can participate in layout functions such as alignment or distribution.
+	 * Whether the shape participates in stacking, aligning, and distributing.
 	 *
 	 * @param shape - The shape.
 	 * @param info - Additional context information: the type of action causing the layout and the
 	 * @public
-	 *
-	 * @public
+	 * @param info
 	 */
 	canBeLaidOut(_shape: Shape, _info: TLShapeUtilCanBeLaidOutOpts): boolean {
 		return true
@@ -366,6 +367,25 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 */
 	getHandles?(shape: Shape): TLHandle[]
 
+	/**
+	 * Get an array of outline segments for the shape. For most shapes,
+	 * this will be a single segment that includes the entire outline.
+	 * For shapes with handles, this might be segments of the outline
+	 * between each handle.
+	 *
+	 * @example
+	 *
+	 * ```ts
+	 * this.editor.getShapeOutlineSegments(myShape, { snap: true })
+	 * ```
+	 *
+	 * @param shape - The shape.
+	 * @public
+	 */
+	getOutlineSegments(shape: Shape): Vec[][] {
+		return [this.editor.getShapeGeometry(shape).vertices]
+	}
+
 	/**
 	 * Get whether the shape can receive children of a given type.
 	 *
@@ -373,7 +393,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @param type - The shape type.
 	 * @public
 	 */
-	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']) {
+	canReceiveNewChildrenOfType(_shape: Shape, _type: TLShape['type']): boolean {
 		return false
 	}
 
@@ -384,7 +404,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	 * @param shapes - The shapes that are being dropped.
 	 * @public
 	 */
-	canDropShapes(_shape: Shape, _shapes: TLShape[]) {
+	canDropShapes(_shape: Shape, _shapes: TLShape[]): boolean {
 		return false
 	}
 
@@ -412,7 +432,7 @@ export abstract class ShapeUtil<Shape extends TLUnknownShape = TLUnknownShape> {
 	): ReactElement | null | Promise<ReactElement | null>
 
 	/** @internal */
-	expandSelectionOutlinePx(shape: Shape): number | Box {
+	expandSelectionOutlinePx(_shape: Shape): number | Box {
 		return 0
 	}
 
