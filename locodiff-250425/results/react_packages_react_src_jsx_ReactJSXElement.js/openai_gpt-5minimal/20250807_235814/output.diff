
index 43e688b1c..7e80440d4 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmp40dldt7v_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmppu0z4des_actual.txt	
@@ -551,6 +551,11 @@ function jsxDEVImpl(
       }
     }
 
+    let propName;
+
+    // Reserved names are extracted
+    let props;
+
     let key = null;
 
     // Currently, key can be spread in as a prop. This causes a potential
@@ -573,7 +578,6 @@ function jsxDEVImpl(
       key = '' + config.key;
     }
 
-    let props;
     if (!('key' in config)) {
       // If key was not spread in, we can reuse the original props object. This
       // only works for `jsx`, not `createElement`, because `jsx` is a compiler
@@ -602,7 +606,7 @@ function jsxDEVImpl(
       // Resolve default props
       if (type && type.defaultProps) {
         const defaultProps = type.defaultProps;
-        for (const propName in defaultProps) {
+        for (propName in defaultProps) {
           if (props[propName] === undefined) {
             props[propName] = defaultProps[propName];
           }
@@ -888,15 +892,6 @@ export function cloneElement(element, config, children) {
   return clonedElement;
 }
 
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
 function validateChildKeys(node, parentType) {
   if (__DEV__) {
     // With owner stacks is, no warnings happens. All we do is
