--- react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected)+++ react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual)@@ -14,7 +14,7 @@   REACT_FRAGMENT_TYPE,
   REACT_LAZY_TYPE,
 } from 'shared/ReactSymbols';
-import {checkKeyStringCoercion} from 'shared/CheckStringCoercion';
+import {checkKeyStringCoercion} from 'shared/CheckStringCoercion'; 
 import isArray from 'shared/isArray';
 import {
   disableDefaultPropsExceptForClasses,
@@ -37,8 +37,6 @@     type !== null &&
     type.$$typeof === REACT_LAZY_TYPE
   ) {
-    // We don't want to eagerly initialize the initializer in DEV mode so we can't
-    // call it to extract the type so we don't know the type of this component.
     return '<...>';
   }
   try {
@@ -65,6 +63,7 @@   /** @noinline */
   return (() => Error('react-stack-top-frame'))();
 }
+
 const createFakeCallStack = {
   'react-stack-bottom-frame': function (callStackForError) {
     return callStackForError();
@@ -183,10 +182,8 @@   debugStack,
   debugTask,
 ) {
-  // Ignore whatever was passed as the ref argument and treat `props.ref` as
-  // the source of truth. The only thing we use this for is `element.ref`,
-  // which will log a deprecation warning on access. In the next release, we
-  // can remove `element.ref` as well as the `ref` argument.
+  // Treat `props.ref` as the source of truth. The only thing we use this
+  // for is `element.ref`, which will log a deprecation warning on access.
   const refProp = props.ref;
 
   // An undefined `element.ref` is coerced to `null` for
@@ -237,32 +234,13 @@         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
+
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
     // commonly used development environments.
     element._store = {};
 
-    // To make comparing ReactElements easier for testing purposes, we make
-    // the validation flag non-enumerable (where possible, which should
-    // include every environment we run tests in), so the test framework
-    // ignores it.
     Object.defineProperty(element._store, 'validated', {
       configurable: false,
       enumerable: false,
@@ -292,6 +270,19 @@       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
@@ -396,7 +387,7 @@ ) {
   if (__DEV__) {
     const isStaticChildren = false;
-    const trackActualOwner =
+    const trackActualOwner = 
       __DEV__ &&
       ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
     return jsxDEVImpl(
@@ -427,7 +418,7 @@ ) {
   if (__DEV__) {
     const isStaticChildren = true;
-    const trackActualOwner =
+    const trackActualOwner = 
       __DEV__ &&
       ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
     return jsxDEVImpl(
@@ -465,7 +456,7 @@     type,
     config,
     maybeKey,
-    isStaticChildren,
+    isStaticChildren, 
     source,
     self,
     __DEV__ &&
@@ -499,8 +490,9 @@     // errors. We don't want exception behavior to differ between dev and
     // prod. (Rendering will throw with a helpful message and as soon as the
     // type is fixed, the key warnings will appear.)
-    // With owner stacks, we no longer need the type here so this comment is
-    // no longer true. Which is why we can run this even for invalid types.
+    // With owner stacks, we no longer need the type here so this comment
+    // is no longer true. Which is why we can run this even for invalid
+    // types.
     const children = config.children;
     if (children !== undefined) {
       if (isStaticChildren) {
@@ -598,6 +590,7 @@       }
     }
 
+    // Resolve default props
     if (!disableDefaultPropsExceptForClasses) {
       // Resolve default props
       if (type && type.defaultProps) {
@@ -653,9 +646,6 @@     // Unlike the jsx() runtime, createElement() doesn't warn about key spread.
   }
 
-  let propName;
-
-  // Reserved names are extracted
   const props = {};
 
   let key = null;
@@ -689,7 +679,7 @@     }
 
     // Remaining properties are added to a new props object
-    for (propName in config) {
+    for (const propName in config) {
       if (
         hasOwnProperty.call(config, propName) &&
         // Skip over reserved prop names
@@ -697,7 +687,7 @@         // Even though we don't use these anymore in the runtime, we don't want
         // them to appear as props, so in createElement we filter them out.
         // We don't have to do this in the jsx() runtime because the jsx()
-        // transform never passed these as props; it used separate arguments.
+        // transform never passed these as props.
         propName !== '__self' &&
         propName !== '__source'
       ) {
@@ -725,14 +715,18 @@   }
 
   // Resolve default props
-  if (type && type.defaultProps) {
-    const defaultProps = type.defaultProps;
-    for (propName in defaultProps) {
-      if (props[propName] === undefined) {
-        props[propName] = defaultProps[propName];
-      }
-    }
-  }
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (const propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
+        }
+      }
+    }
+  }
+
   if (__DEV__) {
     if (key) {
       const displayName =
@@ -742,8 +736,9 @@       defineKeyPropWarningGetter(props, displayName);
     }
   }
+
   const trackActualOwner =
-    __DEV__ &&
+    __DEV__ && 
     ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
   return ReactElement(
     type,
@@ -790,7 +785,7 @@ export function cloneElement(element, config, children) {
   if (element === null || element === undefined) {
     throw new Error(
-      `The argument must be a React element, but you passed ${element}.`,
+      'The argument must be a React element, but you passed ' + element + '.',
     );
   }
 
@@ -876,7 +871,7 @@     undefined,
     undefined,
     owner,
-    props,
+    props, 
     __DEV__ && element._debugStack,
     __DEV__ && element._debugTask,
   );
@@ -886,28 +881,6 @@   }
 
   return clonedElement;
-}
-
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
-function validateChildKeys(node, parentType) {
-  if (__DEV__) {
-    // With owner stacks is, no warnings happens. All we do is
-    // mark elements as being in a valid static child position so they
-    // don't need keys.
-    if (isValidElement(node)) {
-      if (node._store) {
-        node._store.validated = 1;
-      }
-    }
-  }
 }
 
 /**
@@ -923,4 +896,18 @@     object !== null &&
     object.$$typeof === REACT_ELEMENT_TYPE
   );
-}+}
+
+/**
+ * Ensure that every element either is passed in a static location, in an
+ * array with an explicit keys property defined, or in an object literal
+ * with valid key property.
+ *
+ * @internal
+ * @param {ReactNode} node Statically passed child of any type.
+ * @param {*} parentType node's parent's type.
+ */
+function validateChildKeys(node, parentType) {
+  if (__DEV__) {
+    // With owner stacks is, no warnings happens. All we do is
+    //