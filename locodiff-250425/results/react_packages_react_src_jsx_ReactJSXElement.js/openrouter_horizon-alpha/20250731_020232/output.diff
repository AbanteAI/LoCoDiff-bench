
index 43e688b1c..1f4abe97e 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmp2ms1rgg9_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmp30far_t7_actual.txt	
@@ -50,14 +50,11 @@ function getTaskName(type) {
 }
 
 function getOwner() {
-  if (__DEV__) {
-    const dispatcher = ReactSharedInternals.A;
-    if (dispatcher === null) {
-      return null;
-    }
-    return dispatcher.getOwner();
+  const dispatcher = ReactSharedInternals.A;
+  if (dispatcher === null) {
+    return null;
   }
-  return null;
+  return dispatcher.getOwner();
 }
 
 /** @noinline */
@@ -160,10 +157,6 @@ function elementRefGetterWithDeprecationWarning() {
  * if something is a React Element.
  *
  * @param {*} type
- * @param {*} props
- * @param {*} key
- * @param {string|object} ref
- * @param {*} owner
  * @param {*} self A *temporary* helper to detect places where `this` is
  * different from the `owner` when React.createElement is called, so that we
  * can warn. We want to get rid of owner and replace string `ref`s with arrow
@@ -888,15 +881,6 @@ export function cloneElement(element, config, children) {
   return clonedElement;
 }
 
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
 function validateChildKeys(node, parentType) {
   if (__DEV__) {
     // With owner stacks is, no warnings happens. All we do is
