
index 43e688b1c..9ace39a27 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmp5a3qctl7_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmpg5gdefax_actual.txt	
@@ -5,7 +5,6 @@
  * LICENSE file in the root directory of this source tree.
  */
 
-import getComponentNameFromType from 'shared/getComponentNameFromType';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
 import hasOwnProperty from 'shared/hasOwnProperty';
 import assign from 'shared/assign';
@@ -16,10 +15,7 @@ import {
 } from 'shared/ReactSymbols';
 import {checkKeyStringCoercion} from 'shared/CheckStringCoercion';
 import isArray from 'shared/isArray';
-import {
-  disableDefaultPropsExceptForClasses,
-  ownerStackLimit,
-} from 'shared/ReactFeatureFlags';
+import {disableDefaultPropsExceptForClasses} from 'shared/ReactFeatureFlags';
 
 const createTask =
   // eslint-disable-next-line react-internal/no-production-logging
@@ -74,12 +70,15 @@ const createFakeCallStack = {
 let specialPropKeyWarningShown;
 let didWarnAboutElementRef;
 let didWarnAboutOldJSXRuntime;
-let unknownOwnerDebugStack;
-let unknownOwnerDebugTask;
 
 if (__DEV__) {
   didWarnAboutElementRef = {};
+}
+
+let unknownOwnerDebugStack;
+let unknownOwnerDebugTask;
 
+if (__DEV__) {
   // We use this technique to trick minifiers to preserve the function name.
   unknownOwnerDebugStack = createFakeCallStack['react-stack-bottom-frame'].bind(
     createFakeCallStack,
@@ -160,17 +159,14 @@ function elementRefGetterWithDeprecationWarning() {
  * if something is a React Element.
  *
  * @param {*} type
- * @param {*} props
  * @param {*} key
- * @param {string|object} ref
+ * @param {*} ref
+ * @param {*} self
+ * @param {*} source
  * @param {*} owner
- * @param {*} self A *temporary* helper to detect places where `this` is
- * different from the `owner` when React.createElement is called, so that we
- * can warn. We want to get rid of owner and replace string `ref`s with arrow
- * functions, and as long as `this` and owner are the same, there will be no
- * change in behavior.
- * @param {*} source An annotation object (added by a transpiler or otherwise)
- * indicating filename, line number, and/or other information.
+ * @param {*} props
+ * @param {*} debugStack
+ * @param {*} debugTask
  * @internal
  */
 function ReactElement(
@@ -468,14 +464,8 @@ export function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {
     isStaticChildren,
     source,
     self,
-    __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
-    __DEV__ &&
-      (trackActualOwner
-        ? createTask(getTaskName(type))
-        : unknownOwnerDebugTask),
+    __DEV__ && (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
+    __DEV__ && (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
@@ -653,9 +643,6 @@ export function createElement(type, config, children) {
     // Unlike the jsx() runtime, createElement() doesn't warn about key spread.
   }
 
-  let propName;
-
-  // Reserved names are extracted
   const props = {};
 
   let key = null;
@@ -681,6 +668,10 @@ export function createElement(type, config, children) {
       }
     }
 
+    if (hasValidRef(config)) {
+      if (__DEV__) {
+      }
+    }
     if (hasValidKey(config)) {
       if (__DEV__) {
         checkKeyStringCoercion(config.key);
@@ -689,7 +680,7 @@ export function createElement(type, config, children) {
     }
 
     // Remaining properties are added to a new props object
-    for (propName in config) {
+    for (const propName in config) {
       if (
         hasOwnProperty.call(config, propName) &&
         // Skip over reserved prop names
@@ -727,7 +718,7 @@ export function createElement(type, config, children) {
   // Resolve default props
   if (type && type.defaultProps) {
     const defaultProps = type.defaultProps;
-    for (propName in defaultProps) {
+    for (const propName in defaultProps) {
       if (props[propName] === undefined) {
         props[propName] = defaultProps[propName];
       }
@@ -752,14 +743,8 @@ export function createElement(type, config, children) {
     undefined,
     getOwner(),
     props,
-    __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
-    __DEV__ &&
-      (trackActualOwner
-        ? createTask(getTaskName(type))
-        : unknownOwnerDebugTask),
+    __DEV__ && (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
+    __DEV__ && (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
@@ -910,6 +895,14 @@ function validateChildKeys(node, parentType) {
   }
 }
 
+let getComponentNameFromType = function(type) {
+  return "";
+};
+
+if (__DEV__) {
+  getComponentNameFromType = require('shared/getComponentNameFromType');
+}
+
 /**
  * Verifies the object is a ReactElement.
  * See https://reactjs.org/docs/react-api.html#isvalidelement
