
index 43e688b1..ea5e0b2b 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmpcqemkwq0_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmph3z3qqsw_actual.txt	
@@ -16,10 +16,7 @@ import {
 } from 'shared/ReactSymbols';
 import {checkKeyStringCoercion} from 'shared/CheckStringCoercion';
 import isArray from 'shared/isArray';
-import {
-  disableDefaultPropsExceptForClasses,
-  ownerStackLimit,
-} from 'shared/ReactFeatureFlags';
+import {disableDefaultPropsExceptForClasses} from 'shared/ReactFeatureFlags';
 
 const createTask =
   // eslint-disable-next-line react-internal/no-production-logging
@@ -237,32 +234,16 @@ function ReactElement(
         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
+    Object.defineProperty(element, '_store', {
+      configurable: false,
+      enumerable: false,
+      writable: true,
+      value: {},
+    });
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
     // commonly used development environments.
-    element._store = {};
-
-    // To make comparing ReactElements easier for testing purposes, we make
-    // the validation flag non-enumerable (where possible, which should
-    // include every environment we run tests in), so the test framework
-    // ignores it.
     Object.defineProperty(element._store, 'validated', {
       configurable: false,
       enumerable: false,
@@ -292,6 +273,19 @@ function ReactElement(
       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
@@ -550,85 +544,85 @@ function jsxDEVImpl(
         didWarnAboutKeySpread[componentName + beforeExample] = true;
       }
     }
+  }
 
-    let key = null;
+  let key = null;
 
-    // Currently, key can be spread in as a prop. This causes a potential
-    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
-    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
-    // but as an intermediary step, we will use jsxDEV for everything except
-    // <div {...props} key="Hi" />, because we aren't currently able to tell if
-    // key is explicitly declared to be undefined or not.
-    if (maybeKey !== undefined) {
-      if (__DEV__) {
-        checkKeyStringCoercion(maybeKey);
-      }
-      key = '' + maybeKey;
+  // Currently, key can be spread in as a prop. This causes a potential
+  // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
+  // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
+  // but as an intermediary step, we will use jsxDEV for everything except
+  // <div {...props} key="Hi" />, because we aren't currently able to tell if
+  // key is explicitly declared to be undefined or not.
+  if (maybeKey !== undefined) {
+    if (__DEV__) {
+      checkKeyStringCoercion(maybeKey);
     }
+    key = '' + maybeKey;
+  }
 
-    if (hasValidKey(config)) {
-      if (__DEV__) {
-        checkKeyStringCoercion(config.key);
-      }
-      key = '' + config.key;
+  if (hasValidKey(config)) {
+    if (__DEV__) {
+      checkKeyStringCoercion(config.key);
     }
+    key = '' + config.key;
+  }
 
-    let props;
-    if (!('key' in config)) {
-      // If key was not spread in, we can reuse the original props object. This
-      // only works for `jsx`, not `createElement`, because `jsx` is a compiler
-      // target and the compiler always passes a new object. For `createElement`,
-      // we can't assume a new object is passed every time because it can be
-      // called manually.
-      //
-      // Spreading key is a warning in dev. In a future release, we will not
-      // remove a spread key from the props object. (But we'll still warn.) We'll
-      // always pass the object straight through.
-      props = config;
-    } else {
-      // We need to remove reserved props (key, prop, ref). Create a fresh props
-      // object and copy over all the non-reserved props. We don't use `delete`
-      // because in V8 it will deopt the object to dictionary mode.
-      props = {};
-      for (const propName in config) {
-        // Skip over reserved prop names
-        if (propName !== 'key') {
-          props[propName] = config[propName];
-        }
+  let props;
+  if (!('key' in config)) {
+    // If key was not spread in, we can reuse the original props object. This
+    // only works for `jsx`, not `createElement`, because `jsx` is a compiler
+    // target and the compiler always passes a new object. For `createElement`,
+    // we can't assume a new object is passed every time because it can be
+    // called manually.
+    //
+    // Spreading key is a warning in dev. In a future release, we will not
+    // remove a spread key from the props object. (But we'll still warn.) We'll
+    // always pass the object straight through.
+    props = config;
+  } else {
+    // We need to remove reserved props (key, prop, ref). Create a fresh props
+    // object and copy over all the non-reserved props. We don't use `delete`
+    // because in V8 it will deopt the object to dictionary mode.
+    props = {};
+    for (const propName in config) {
+      // Skip over reserved prop names
+      if (propName !== 'key') {
+        props[propName] = config[propName];
       }
     }
+  }
 
-    if (!disableDefaultPropsExceptForClasses) {
-      // Resolve default props
-      if (type && type.defaultProps) {
-        const defaultProps = type.defaultProps;
-        for (const propName in defaultProps) {
-          if (props[propName] === undefined) {
-            props[propName] = defaultProps[propName];
-          }
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (const propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
         }
       }
     }
+  }
 
-    if (key) {
-      const displayName =
-        typeof type === 'function'
-          ? type.displayName || type.name || 'Unknown'
-          : type;
-      defineKeyPropWarningGetter(props, displayName);
-    }
-
-    return ReactElement(
-      type,
-      key,
-      self,
-      source,
-      getOwner(),
-      props,
-      debugStack,
-      debugTask,
-    );
+  if (key) {
+    const displayName =
+      typeof type === 'function'
+        ? type.displayName || type.name || 'Unknown'
+        : type;
+    defineKeyPropWarningGetter(props, displayName);
   }
+
+  return ReactElement(
+    type,
+    key,
+    self,
+    source,
+    getOwner(),
+    props,
+    debugStack,
+    debugTask,
+  );
 }
 
 /**
@@ -753,13 +747,9 @@ export function createElement(type, config, children) {
     getOwner(),
     props,
     __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
+      (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
     __DEV__ &&
-      (trackActualOwner
-        ? createTask(getTaskName(type))
-        : unknownOwnerDebugTask),
+      (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
