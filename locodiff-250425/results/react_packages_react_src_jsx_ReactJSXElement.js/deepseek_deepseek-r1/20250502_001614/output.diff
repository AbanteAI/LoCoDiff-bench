--- react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected)+++ react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual)@@ -153,26 +153,6 @@   }
 }
 
-/**
- * Factory method to create a new React element. This no longer adheres to
- * the class pattern, so do not use new to call it. Also, instanceof check
- * will not work. Instead test $$typeof field against Symbol.for('react.transitional.element') to check
- * if something is a React Element.
- *
- * @param {*} type
- * @param {*} props
- * @param {*} key
- * @param {string|object} ref
- * @param {*} owner
- * @param {*} self A *temporary* helper to detect places where `this` is
- * different from the `owner` when React.createElement is called, so that we
- * can warn. We want to get rid of owner and replace string `ref`s with arrow
- * functions, and as long as `this` and owner are the same, there will be no
- * change in behavior.
- * @param {*} source An annotation object (added by a transpiler or otherwise)
- * indicating filename, line number, and/or other information.
- * @internal
- */
 function ReactElement(
   type,
   key,
@@ -237,45 +217,6 @@         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
-    // The validation flag is currently mutative. We put it on
-    // an external backing store so that we can freeze the whole object.
-    // This can be replaced with a WeakMap once they are implemented in
-    // commonly used development environments.
-    element._store = {};
-
-    // To make comparing ReactElements easier for testing purposes, we make
-    // the validation flag non-enumerable (where possible, which should
-    // include every environment we run tests in), so the test framework
-    // ignores it.
-    Object.defineProperty(element._store, 'validated', {
-      configurable: false,
-      enumerable: false,
-      writable: true,
-      value: 0,
-    });
-    // debugInfo contains Server Component debug information.
-    Object.defineProperty(element, '_debugInfo', {
-      configurable: false,
-      enumerable: false,
-      writable: true,
-      value: null,
-    });
     Object.defineProperty(element, '_debugStack', {
       configurable: false,
       enumerable: false,
@@ -292,17 +233,24 @@       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
 }
 
-/**
- * https://github.com/reactjs/rfcs/pull/107
- * @param {*} type
- * @param {object} props
- * @param {string} key
- */
 export function jsxProd(type, config, maybeKey) {
   let key = null;
 
@@ -327,7 +275,7 @@   }
 
   let props;
-  if (!('key' in config)) {
+  if (
     // If key was not spread in, we can reuse the original props object. This
     // only works for `jsx`, not `createElement`, because `jsx` is a compiler
     // target and the compiler always passes a new object. For `createElement`,
@@ -337,6 +285,8 @@     // Spreading key is a warning in dev. In a future release, we will not
     // remove a spread key from the props object. (But we'll still warn.) We'll
     // always pass the object straight through.
+    !('key' in config)
+  ) {
     props = config;
   } else {
     // We need to remove reserved props (key, prop, ref). Create a fresh props
@@ -527,7 +477,7 @@     // Warn about key spread regardless of whether the type is valid.
     if (hasOwnProperty.call(config, 'key')) {
       const componentName = getComponentNameFromType(type);
-      const keys = Object.keys(config).filter(k => k !== 'key');
+      const keys = Object.keys(config).filter((k) => k !== 'key');
       const beforeExample =
         keys.length > 0
           ? '{key: someKey, ' + keys.join(': ..., ') + ': ...}'
@@ -550,85 +500,87 @@         didWarnAboutKeySpread[componentName + beforeExample] = true;
       }
     }
-
-    let key = null;
-
-    // Currently, key can be spread in as a prop. This causes a potential
-    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
-    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
-    // but as an intermediary step, we will use jsxDEV for everything except
-    // <div {...props} key="Hi" />, because we aren't currently able to tell if
-    // key is explicitly declared to be undefined or not.
-    if (maybeKey !== undefined) {
-      if (__DEV__) {
-        checkKeyStringCoercion(maybeKey);
-      }
-      key = '' + maybeKey;
-    }
-
-    if (hasValidKey(config)) {
-      if (__DEV__) {
-        checkKeyStringCoercion(config.key);
-      }
-      key = '' + config.key;
-    }
-
-    let props;
-    if (!('key' in config)) {
-      // If key was not spread in, we can reuse the original props object. This
-      // only works for `jsx`, not `createElement`, because `jsx` is a compiler
-      // target and the compiler always passes a new object. For `createElement`,
-      // we can't assume a new object is passed every time because it can be
-      // called manually.
-      //
-      // Spreading key is a warning in dev. In a future release, we will not
-      // remove a spread key from the props object. (But we'll still warn.) We'll
-      // always pass the object straight through.
-      props = config;
-    } else {
-      // We need to remove reserved props (key, prop, ref). Create a fresh props
-      // object and copy over all the non-reserved props. We don't use `delete`
-      // because in V8 it will deopt the object to dictionary mode.
-      props = {};
-      for (const propName in config) {
-        // Skip over reserved prop names
-        if (propName !== 'key') {
-          props[propName] = config[propName];
+  }
+
+  let key = null;
+
+  // Currently, key can be spread in as a prop. This causes a potential
+  // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
+  // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
+  // but as an intermediary step, we will use jsxDEV for everything except
+  // <div {...props} key="Hi" />, because we aren't currently able to tell if
+  // key is explicitly declared to be undefined or not.
+  if (maybeKey !== undefined) {
+    if (__DEV__) {
+      checkKeyStringCoercion(maybeKey);
+    }
+    key = '' + maybeKey;
+  }
+
+  if (hasValidKey(config)) {
+    if (__DEV__) {
+      checkKeyStringCoercion(config.key);
+    }
+    key = '' + config.key;
+  }
+
+  let props;
+  if (
+    // If key was not spread in, we can reuse the original props object. This
+    // only works for `jsx`, not `createElement`, because `jsx` is a compiler
+    // target and the compiler always passes a new object. For `createElement`,
+    // we can't assume a new object is passed every time because it can be
+    // called manually.
+    //
+    // Spreading key is a warning in dev. In a future release, we will not
+    // remove a spread key from the props object. (But we'll still warn.) We'll
+    // always pass the object straight through.
+    !('key' in config)
+  ) {
+    props = config;
+  } else {
+    // We need to remove reserved props (key, prop, ref). Create a fresh props
+    // object and copy over all the non-reserved props. We don't use `delete`
+    // because in V8 it will deopt the object to dictionary mode.
+    props = {};
+    for (const propName in config) {
+      // Skip over reserved prop names
+      if (propName !== 'key') {
+        props[propName] = config[propName];
+      }
+    }
+  }
+
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (const propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
         }
       }
     }
-
-    if (!disableDefaultPropsExceptForClasses) {
-      // Resolve default props
-      if (type && type.defaultProps) {
-        const defaultProps = type.defaultProps;
-        for (const propName in defaultProps) {
-          if (props[propName] === undefined) {
-            props[propName] = defaultProps[propName];
-          }
-        }
-      }
-    }
-
-    if (key) {
-      const displayName =
-        typeof type === 'function'
-          ? type.displayName || type.name || 'Unknown'
-          : type;
-      defineKeyPropWarningGetter(props, displayName);
-    }
-
-    return ReactElement(
-      type,
-      key,
-      self,
-      source,
-      getOwner(),
-      props,
-      debugStack,
-      debugTask,
-    );
-  }
+  }
+
+  if (key) {
+    const displayName =
+      typeof type === 'function'
+        ? type.displayName || type.name || 'Unknown'
+        : type;
+    defineKeyPropWarningGetter(props, displayName);
+  }
+
+  return ReactElement(
+    type,
+    key,
+    self,
+    source,
+    getOwner(),
+    props,
+    debugStack,
+    debugTask,
+  );
 }
 
 /**
@@ -665,7 +617,7 @@       if (
         !didWarnAboutOldJSXRuntime &&
         '__self' in config &&
-        // Do not assume this is the result of an oudated JSX transform if key
+        // Do not assume this is the result of an outdated JSX transform if key
         // is present, because the modern JSX transform sometimes outputs
         // createElement to preserve precedence between a static key and a
         // spread key. To avoid false positive warnings, we never warn if
@@ -757,9 +709,7 @@         ? Error('react-stack-top-frame')
         : unknownOwnerDebugStack),
     __DEV__ &&
-      (trackActualOwner
-        ? createTask(getTaskName(type))
-        : unknownOwnerDebugTask),
+      (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
@@ -789,9 +739,7 @@  */
 export function cloneElement(element, config, children) {
   if (element === null || element === undefined) {
-    throw new Error(
-      `The argument must be a React element, but you passed ${element}.`,
-    );
+    throw new Error(`The argument must be a React element, but you passed ${element}.`);
   }
 
   let propName;
@@ -888,15 +836,6 @@   return clonedElement;
 }
 
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
 function validateChildKeys(node, parentType) {
   if (__DEV__) {
     // With owner stacks is, no warnings happens. All we do is
