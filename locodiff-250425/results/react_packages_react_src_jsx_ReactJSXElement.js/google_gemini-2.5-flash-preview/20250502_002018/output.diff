--- react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected)+++ react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual)@@ -27,27 +27,6 @@     ? // eslint-disable-next-line react-internal/no-production-logging
       console.createTask
     : () => null;
-
-function getTaskName(type) {
-  if (type === REACT_FRAGMENT_TYPE) {
-    return '<>';
-  }
-  if (
-    typeof type === 'object' &&
-    type !== null &&
-    type.$$typeof === REACT_LAZY_TYPE
-  ) {
-    // We don't want to eagerly initialize the initializer in DEV mode so we can't
-    // call it to extract the type so we don't know the type of this component.
-    return '<...>';
-  }
-  try {
-    const name = getComponentNameFromType(type);
-    return name ? '<' + name + '>' : '<...>';
-  } catch (x) {
-    return '<...>';
-  }
-}
 
 function getOwner() {
   if (__DEV__) {
@@ -237,22 +216,7 @@         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
+
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
@@ -292,9 +256,43 @@       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
+}
+
+function getTaskName(type) {
+  if (type === REACT_FRAGMENT_TYPE) {
+    return '<>';
+  }
+  if (
+    typeof type === 'object' &&
+    type !== null &&
+    type.$$typeof === REACT_LAZY_TYPE
+  ) {
+    // We don't want to eagerly initialize the initializer in DEV mode so we can't
+    // call it to extract the type so we don't know the type of this component.
+    return '<...>';
+  }
+  try {
+    const name = getComponentNameFromType(type);
+    return name ? '<' + name + '>' : '<...>';
+  } catch (x) {
+    return '<...>';
+  }
 }
 
 /**
@@ -525,7 +523,9 @@     }
 
     // Warn about key spread regardless of whether the type is valid.
-    if (hasOwnProperty.call(config, 'key')) {
+    if (hasOwnProperty.call(config, 'key') && maybeKey === undefined) {
+      // Do not warn if the key comes from the maybeKey argument. That key
+      // is statically provided in JSX.
       const componentName = getComponentNameFromType(type);
       const keys = Object.keys(config).filter(k => k !== 'key');
       const beforeExample =
@@ -551,28 +551,6 @@       }
     }
 
-    let key = null;
-
-    // Currently, key can be spread in as a prop. This causes a potential
-    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
-    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
-    // but as an intermediary step, we will use jsxDEV for everything except
-    // <div {...props} key="Hi" />, because we aren't currently able to tell if
-    // key is explicitly declared to be undefined or not.
-    if (maybeKey !== undefined) {
-      if (__DEV__) {
-        checkKeyStringCoercion(maybeKey);
-      }
-      key = '' + maybeKey;
-    }
-
-    if (hasValidKey(config)) {
-      if (__DEV__) {
-        checkKeyStringCoercion(config.key);
-      }
-      key = '' + config.key;
-    }
-
     let props;
     if (!('key' in config)) {
       // If key was not spread in, we can reuse the original props object. This
@@ -611,6 +589,10 @@     }
 
     if (key) {
+      // The renderer will add a key warning for explicitly passed keys even in
+      // JSX, however we also log it here with a more precise stack frame.
+      // The renderer will de-duplicate these warnings when it encounters them.
+      // This makes debugging explicit key warnings easier.
       const displayName =
         typeof type === 'function'
           ? type.displayName || type.name || 'Unknown'
@@ -651,6 +633,29 @@     }
 
     // Unlike the jsx() runtime, createElement() doesn't warn about key spread.
+
+    // In older versions, createElement would sometimes pass __self to the new
+    // element, which we'll use as a heuristic to detect if it was called by an
+    // outdated JSX transform instead of manually.
+    if (
+      !didWarnAboutOldJSXRuntime &&
+      config !== null &&
+      typeof config === 'object' &&
+      '__self' in config &&
+      // Do not assume this is the result of an oudated JSX transform if key
+      // is present, because the modern JSX transform sometimes outputs
+      // createElement to preserve precedence between a static key and a
+      // spread key. To avoid false positive warnings, we never warn if
+      // there's a key.
+      !('key' in config)
+    ) {
+      didWarnAboutOldJSXRuntime = true;
+      console.warn(
+        'Your app (or one of its dependencies) is using an outdated JSX ' +
+          'transform. Update to the modern JSX transform for ' +
+          'faster performance: https://react.dev/link/new-jsx-transform',
+      );
+    }
   }
 
   let propName;
@@ -661,26 +666,13 @@   let key = null;
 
   if (config != null) {
-    if (__DEV__) {
-      if (
-        !didWarnAboutOldJSXRuntime &&
-        '__self' in config &&
-        // Do not assume this is the result of an oudated JSX transform if key
-        // is present, because the modern JSX transform sometimes outputs
-        // createElement to preserve precedence between a static key and a
-        // spread key. To avoid false positive warnings, we never warn if
-        // there's a key.
-        !('key' in config)
-      ) {
-        didWarnAboutOldJSXRuntime = true;
-        console.warn(
-          'Your app (or one of its dependencies) is using an outdated JSX ' +
-            'transform. Update to the modern JSX transform for ' +
-            'faster performance: https://react.dev/link/new-jsx-transform',
-        );
-      }
-    }
-
+    if (hasValidRef(config)) {
+      // createElement doesn't extract ref. It always appears as a prop, just
+      // like it would in JSX.
+      //
+      // The reconciler will extract the ref from the props object and add it to
+      // the fiber.
+    }
     if (hasValidKey(config)) {
       if (__DEV__) {
         checkKeyStringCoercion(config.key);
@@ -724,17 +716,23 @@     props.children = childArray;
   }
 
-  // Resolve default props
-  if (type && type.defaultProps) {
-    const defaultProps = type.defaultProps;
-    for (propName in defaultProps) {
-      if (props[propName] === undefined) {
-        props[propName] = defaultProps[propName];
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
+        }
       }
     }
   }
   if (__DEV__) {
     if (key) {
+      // The renderer will add a key warning for explicitly passed keys even in
+      // JSX, however we also log it here with a more precise stack frame.
+      // The renderer will de-duplicate these warnings when it encounters them.
+      // This makes debugging explicit key warnings easier.
       const displayName =
         typeof type === 'function'
           ? type.displayName || type.name || 'Unknown'
@@ -742,6 +740,7 @@       defineKeyPropWarningGetter(props, displayName);
     }
   }
+
   const trackActualOwner =
     __DEV__ &&
     ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
@@ -869,6 +868,37 @@     }
     props.children = childArray;
   }
+  if (__DEV__) {
+    if (key) {
+      // The renderer will add a key warning for explicitly passed keys even in
+      // JSX, however we also log it here with a more precise stack frame.
+      // The renderer will de-duplicate these warnings when it encounters them.
+      // This makes debugging explicit key warnings easier.
+      const displayName =
+        typeof element.type === 'function'
+          ? element.type.displayName || element.type.name || 'Unknown'
+          : element.type;
+      defineKeyPropWarningGetter(props, displayName);
+    }
+    if (hasValidRef(config)) {
+      const displayName =
+        typeof element.type === 'function'
+          ? element.type.displayName || element.type.name || 'Unknown'
+          : element.type;
+      const elementRef = element.ref;
+      if (elementRef !== null && elementRef !== undefined) {
+        // The renderer will report a warning similar to this one, but for
+        // explicitly passed refs. We also log it here with a more precise
+        // stack frame. The renderer will de-duplicate these warnings when it
+        // encounters them. This makes debugging explicit ref warnings easier.
+        console.error(
+          '%s: The `ref` prop is deprecated and will be removed in React 19. ' +
+            'Use it as a prop instead, e.g. <a ref={myRef} />.',
+          displayName,
+        );
+      }
+    }
+  }
 
   const clonedElement = ReactElement(
     element.type,
@@ -886,28 +916,6 @@   }
 
   return clonedElement;
-}
-
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
-function validateChildKeys(node, parentType) {
-  if (__DEV__) {
-    // With owner stacks is, no warnings happens. All we do is
-    // mark elements as being in a valid static child position so they
-    // don't need keys.
-    if (isValidElement(node)) {
-      if (node._store) {
-        node._store.validated = 1;
-      }
-    }
-  }
 }
 
 /**
@@ -923,4 +931,28 @@     object !== null &&
     object.$$typeof === REACT_ELEMENT_TYPE
   );
+}
+
+const ownerHasKeyUseWarning = {};
+
+/**
+ * Ensure that every element either is passed in a static location, in an
+ * array with an explicit keys property defined, or in an object literal
+ * with valid key property.
+ *
+ * @internal
+ * @param {ReactNode} node Statically passed child of any type.
+ * @param {*} parentType node's parent's type.
+ */
+function validateChildKeys(node, parentType) {
+  if (__DEV__) {
+    // With owner stacks is, no warnings happens. All we do is
+    // mark elements as being in a valid static child position so they
+    // don't need keys.
+    if (isValidElement(node)) {
+      if (node._store) {
+        node._store.validated = 1;
+      }
+    }
+  }
 }