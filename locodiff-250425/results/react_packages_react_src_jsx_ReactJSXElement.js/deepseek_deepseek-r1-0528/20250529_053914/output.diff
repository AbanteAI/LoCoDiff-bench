
index 43e688b1c..520f71dcb 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmpzfe00om0_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmpg70gh4o1_actual.txt	
@@ -10,12 +10,15 @@ import ReactSharedInternals from 'shared/ReactSharedInternals';
 import hasOwnProperty from 'shared/hasOwnProperty';
 import assign from 'shared/assign';
 import {
+  getIteratorFn,
   REACT_ELEMENT_TYPE,
   REACT_FRAGMENT_TYPE,
   REACT_LAZY_TYPE,
 } from 'shared/ReactSymbols';
 import {checkKeyStringCoercion} from 'shared/CheckStringCoercion';
+import isValidElementType from 'shared/isValidElementType';
 import isArray from 'shared/isArray';
+import {describeUnknownElementTypeFrameInDEV} from 'shared/ReactComponentStackFrame';
 import {
   disableDefaultPropsExceptForClasses,
   ownerStackLimit,
@@ -81,7 +84,7 @@ if (__DEV__) {
   didWarnAboutElementRef = {};
 
   // We use this technique to trick minifiers to preserve the function name.
-  unknownOwnerDebugStack = createFakeCallStack['react-stack-bottom-frame'].bind(
+  unknownOwnerDebugStack = createFakeCallStack['react极客-stack-bottom-frame'].bind(
     createFakeCallStack,
     UnknownOwner,
   )();
@@ -128,7 +131,7 @@ function defineKeyPropWarningGetter(props, displayName) {
     };
     warnAboutAccessingKey.isReactWarning = true;
     Object.defineProperty(props, 'key', {
-      get: warnAboutAccessingKey,
+      get: warnAboutAccessing极客Key,
       configurable: true,
     });
   }
@@ -160,7 +163,6 @@ function elementRefGetterWithDeprecationWarning() {
  * if something is a React Element.
  *
  * @param {*} type
- * @param {*} props
  * @param {*} key
  * @param {string|object} ref
  * @param {*} owner
@@ -300,7 +302,7 @@ function ReactElement(
 /**
  * https://github.com/reactjs/rfcs/pull/107
  * @param {*} type
- * @param {object} props
+ * @param {object} config
  * @param {string} key
  */
 export function jsxProd(type, config, maybeKey) {
@@ -327,7 +329,9 @@ export function jsxProd(type, config, maybeKey) {
   }
 
   let props;
-  if (!('key' in config)) {
+  if (
+    !('key' in config)
+  ) {
     // If key was not spread in, we can reuse the original props object. This
     // only works for `jsx`, not `createElement`, because `jsx` is a compiler
     // target and the compiler always passes a new object. For `createElement`,
@@ -344,7 +348,6 @@ export function jsxProd(type, config, maybeKey) {
     // because in V8 it will deopt the object to dictionary mode.
     props = {};
     for (const propName in config) {
-      // Skip over reserved prop names
       if (propName !== 'key') {
         props[propName] = config[propName];
       }
@@ -469,9 +472,7 @@ export function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {
     source,
     self,
     __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
+      (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
     __DEV__ &&
       (trackActualOwner
         ? createTask(getTaskName(type))
@@ -499,8 +500,6 @@ function jsxDEVImpl(
     // errors. We don't want exception behavior to differ between dev and
     // prod. (Rendering will throw with a helpful message and as soon as the
     // type is fixed, the key warnings will appear.)
-    // With owner stacks, we no longer need the type here so this comment is
-    // no longer true. Which is why we can run this even for invalid types.
     const children = config.children;
     if (children !== undefined) {
       if (isStaticChildren) {
@@ -536,7 +535,7 @@ function jsxDEVImpl(
         const afterExample =
           keys.length > 0 ? '{' + keys.join(': ..., ') + ': ...}' : '{}';
         console.error(
-          'A props object containing a "key" prop is being spread into JSX:\n' +
+          'A props object containing a "极客key" prop is being spread into JSX:\n' +
             '  let props = %s;\n' +
             '  <%s {...props} />\n' +
             'React keys must be passed directly to JSX without using spread:\n' +
@@ -545,7 +544,7 @@ function jsxDEVImpl(
           beforeExample,
           componentName,
           afterExample,
-          componentName,
+          component极客Name,
         );
         didWarnAboutKeySpread[componentName + beforeExample] = true;
       }
@@ -574,7 +573,9 @@ function jsxDEVImpl(
     }
 
     let props;
-    if (!('key' in config)) {
+    if (
+      !('key' in config)
+    ) {
       // If key was not spread in, we can reuse the original props object. This
       // only works for `jsx`, not `createElement`, because `jsx` is a compiler
       // target and the compiler always passes a new object. For `createElement`,
@@ -591,7 +592,6 @@ function jsxDEVImpl(
       // because in V8 it will deopt the object to dictionary mode.
       props = {};
       for (const propName in config) {
-        // Skip over reserved prop names
         if (propName !== 'key') {
           props[propName] = config[propName];
         }
@@ -665,7 +665,7 @@ export function createElement(type, config, children) {
       if (
         !didWarnAboutOldJSXRuntime &&
         '__self' in config &&
-        // Do not assume this is the result of an oudated JSX transform if key
+        // Do not assume this is the result of an outdated JSX transform if key
         // is present, because the modern JSX transform sometimes outputs
         // createElement to preserve precedence between a static key and a
         // spread key. To avoid false positive warnings, we never warn if
@@ -753,9 +753,7 @@ export function createElement(type, config, children) {
     getOwner(),
     props,
     __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
+      (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
     __DEV__ &&
       (trackActualOwner
         ? createTask(getTaskName(type))
@@ -789,9 +787,7 @@ export function cloneAndReplaceKey(oldElement, newKey) {
  */
 export function cloneElement(element, config, children) {
   if (element === null || element === undefined) {
-    throw new Error(
-      `The argument must be a React element, but you passed ${element}.`,
-    );
+    throw new Error(`The argument must be a React element, but you passed ${element}.`);
   }
 
   let propName;
