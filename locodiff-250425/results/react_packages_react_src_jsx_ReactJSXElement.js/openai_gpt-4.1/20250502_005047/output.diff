--- react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected)+++ react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual)@@ -237,22 +237,6 @@         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
@@ -267,7 +251,7 @@       configurable: false,
       enumerable: false,
       writable: true,
-      value: 0,
+      value: false,
     });
     // debugInfo contains Server Component debug information.
     Object.defineProperty(element, '_debugInfo', {
@@ -292,9 +276,41 @@       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
+}
+
+/**
+ * https://github.com/reactjs/rfcs/pull/107
+ * @param {*} type
+ * @param {object} props
+ * @param {string} key
+ */
+export function jsx(type, config, maybeKey) {
+  return jsxProd(type, config, maybeKey);
+}
+/**
+ * https://github.com/reactjs/rfcs/pull/107
+ * @param {*} type
+ * @param {object} props
+ * @param {string} key
+ */
+export function jsxs(type, config, maybeKey) {
+  return jsxProd(type, config, maybeKey);
 }
 
 /**
@@ -370,8 +386,8 @@     undefined,
     getOwner(),
     props,
-    undefined,
-    undefined,
+    __DEV__ && Error('react-stack-top-frame'),
+    __DEV__ && createTask(getTaskName(type)),
   );
 }
 
@@ -524,7 +540,6 @@       }
     }
 
-    // Warn about key spread regardless of whether the type is valid.
     if (hasOwnProperty.call(config, 'key')) {
       const componentName = getComponentNameFromType(type);
       const keys = Object.keys(config).filter(k => k !== 'key');
@@ -724,12 +739,14 @@     props.children = childArray;
   }
 
-  // Resolve default props
-  if (type && type.defaultProps) {
-    const defaultProps = type.defaultProps;
-    for (propName in defaultProps) {
-      if (props[propName] === undefined) {
-        props[propName] = defaultProps[propName];
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
+        }
       }
     }
   }
@@ -889,28 +906,6 @@ }
 
 /**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
-function validateChildKeys(node, parentType) {
-  if (__DEV__) {
-    // With owner stacks is, no warnings happens. All we do is
-    // mark elements as being in a valid static child position so they
-    // don't need keys.
-    if (isValidElement(node)) {
-      if (node._store) {
-        node._store.validated = 1;
-      }
-    }
-  }
-}
-
-/**
  * Verifies the object is a ReactElement.
  * See https://reactjs.org/docs/react-api.html#isvalidelement
  * @param {?object} object
@@ -923,4 +918,26 @@     object !== null &&
     object.$$typeof === REACT_ELEMENT_TYPE
   );
+}
+
+/**
+ * Ensure that every element either is passed in a static location, in an
+ * array with an explicit keys property defined, or in an object literal
+ * with valid key property.
+ *
+ * @internal
+ * @param {ReactNode} node Statically passed child of any type.
+ * @param {*} parentType node's parent's type.
+ */
+function validateChildKeys(node, parentType) {
+  if (__DEV__) {
+    // With owner stacks is, no warnings happens. All we do is
+    // mark elements as being in a valid static child position so they
+    // don't need keys.
+    if (isValidElement(node)) {
+      if (node._store) {
+        node._store.validated = 1;
+      }
+    }
+  }
 }