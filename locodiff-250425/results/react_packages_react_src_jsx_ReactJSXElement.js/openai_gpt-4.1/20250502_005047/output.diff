
index 43e688b1..6937f5bf 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmpd4p54x_c_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmpebuomfss_actual.txt	
@@ -237,22 +237,6 @@ function ReactElement(
         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
@@ -267,7 +251,7 @@ function ReactElement(
       configurable: false,
       enumerable: false,
       writable: true,
-      value: 0,
+      value: false,
     });
     // debugInfo contains Server Component debug information.
     Object.defineProperty(element, '_debugInfo', {
@@ -292,11 +276,43 @@ function ReactElement(
       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT_ELEMENT_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
 }
 
+/**
+ * https://github.com/reactjs/rfcs/pull/107
+ * @param {*} type
+ * @param {object} props
+ * @param {string} key
+ */
+export function jsx(type, config, maybeKey) {
+  return jsxProd(type, config, maybeKey);
+}
+/**
+ * https://github.com/reactjs/rfcs/pull/107
+ * @param {*} type
+ * @param {object} props
+ * @param {string} key
+ */
+export function jsxs(type, config, maybeKey) {
+  return jsxProd(type, config, maybeKey);
+}
+
 /**
  * https://github.com/reactjs/rfcs/pull/107
  * @param {*} type
@@ -370,8 +386,8 @@ export function jsxProd(type, config, maybeKey) {
     undefined,
     getOwner(),
     props,
-    undefined,
-    undefined,
+    __DEV__ && Error('react-stack-top-frame'),
+    __DEV__ && createTask(getTaskName(type)),
   );
 }
 
@@ -524,7 +540,6 @@ function jsxDEVImpl(
       }
     }
 
-    // Warn about key spread regardless of whether the type is valid.
     if (hasOwnProperty.call(config, 'key')) {
       const componentName = getComponentNameFromType(type);
       const keys = Object.keys(config).filter(k => k !== 'key');
@@ -724,12 +739,14 @@ export function createElement(type, config, children) {
     props.children = childArray;
   }
 
-  // Resolve default props
-  if (type && type.defaultProps) {
-    const defaultProps = type.defaultProps;
-    for (propName in defaultProps) {
-      if (props[propName] === undefined) {
-        props[propName] = defaultProps[propName];
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
+        }
       }
     }
   }
@@ -888,6 +905,21 @@ export function cloneElement(element, config, children) {
   return clonedElement;
 }
 
+/**
+ * Verifies the object is a ReactElement.
+ * See https://reactjs.org/docs/react-api.html#isvalidelement
+ * @param {?object} object
+ * @return {boolean} True if `object` is a ReactElement.
+ * @final
+ */
+export function isValidElement(object) {
+  return (
+    typeof object === 'object' &&
+    object !== null &&
+    object.$$typeof === REACT_ELEMENT_TYPE
+  );
+}
+
 /**
  * Ensure that every element either is passed in a static location, in an
  * array with an explicit keys property defined, or in an object literal
@@ -908,19 +940,4 @@ function validateChildKeys(node, parentType) {
       }
     }
   }
-}
-
-/**
- * Verifies the object is a ReactElement.
- * See https://reactjs.org/docs/react-api.html#isvalidelement
- * @param {?object} object
- * @return {boolean} True if `object` is a ReactElement.
- * @final
- */
-export function isValidElement(object) {
-  return (
-    typeof object === 'object' &&
-    object !== null &&
-    object.$$typeof === REACT_ELEMENT_TYPE
-  );
 }
\ No newline at end of file
