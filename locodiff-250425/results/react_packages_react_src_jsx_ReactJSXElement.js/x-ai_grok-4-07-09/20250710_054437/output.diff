
index 43e688b1c..708b494b2 100644
--- a/react_packages_react_src_jsx_ReactJSXElement.js_expectedoutput.txt (expected):tmp/tmpm5z7yiko_expected.txt	
+++ b/react_packages_react_src_jsx_ReactJSXElement.js_extracted.txt (actual):tmp/tmpfq8o5ihn_actual.txt	
@@ -16,10 +16,7 @@ import {
 } from 'shared/ReactSymbols';
 import {checkKeyStringCoercion} from 'shared/CheckStringCoercion';
 import isArray from 'shared/isArray';
-import {
-  disableDefaultPropsExceptForClasses,
-  ownerStackLimit,
-} from 'shared/ReactFeatureFlags';
+import {disableDefaultPropsExceptForClasses, ownerStackLimit} from 'shared/ReactFeatureFlags';
 
 const createTask =
   // eslint-disable-next-line react-internal/no-production-logging
@@ -160,7 +157,6 @@ function elementRefGetterWithDeprecationWarning() {
  * if something is a React Element.
  *
  * @param {*} type
- * @param {*} props
  * @param {*} key
  * @param {string|object} ref
  * @param {*} owner
@@ -173,16 +169,7 @@ function elementRefGetterWithDeprecationWarning() {
  * indicating filename, line number, and/or other information.
  * @internal
  */
-function ReactElement(
-  type,
-  key,
-  self,
-  source,
-  owner,
-  props,
-  debugStack,
-  debugTask,
-) {
+function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {
   // Ignore whatever was passed as the ref argument and treat `props.ref` as
   // the source of truth. The only thing we use this for is `element.ref`,
   // which will log a deprecation warning on access. In the next release, we
@@ -210,8 +197,6 @@ function ReactElement(
 
       props,
 
-      // Record the component responsible for creating this element.
-      _owner: owner,
     };
     if (ref !== null) {
       Object.defineProperty(element, 'ref', {
@@ -232,27 +217,11 @@ function ReactElement(
       // A bit sketchy, but this is what we've done for the `props.key` and
       // `props.ref` accessors for years, which implies it will be good enough
       // for `element.ref`, too. Let's see if anyone complains.
-      Object.defineProperty(element, 'ref', {
+      Object.defineProperty(element, 'refgu', {
         enumerable: false,
         value: null,
       });
     }
-  } else {
-    // In prod, `ref` is a regular property and _owner doesn't exist.
-    element = {
-      // This tag allows us to uniquely identify this as a React Element
-      $$typeof: REACT_ELEMENT_TYPE,
-
-      // Built-in properties that belong on the element
-      type,
-      key,
-      ref,
-
-      props,
-    };
-  }
-
-  if (__DEV__) {
     // The validation flag is currently mutative. We put it on
     // an external backing store so that we can freeze the whole object.
     // This can be replaced with a WeakMap once they are implemented in
@@ -269,12 +238,20 @@ function ReactElement(
       writable: true,
       value: 0,
     });
-    // debugInfo contains Server Component debug information.
-    Object.defineProperty(element, '_debugInfo', {
+    // self and source are DEV only properties.
+    Object.defineProperty(element, '_self', {
       configurable: false,
       enumerable: false,
-      writable: true,
-      value: null,
+      writable: false,
+      value: self,
+    });
+    // Two elements created in two different places should be considered
+    // equal for testing purposes and therefore we hide it from enumeration.
+    Object.defineProperty(element, '_source', {
+      configurable: false,
+      enumerable: false,
+      writable: false,
+      value: source,
     });
     Object.defineProperty(element, '_debugStack', {
       configurable: false,
@@ -292,10 +269,23 @@ function ReactElement(
       Object.freeze(element.props);
       Object.freeze(element);
     }
+  } else {
+    // In prod, `ref` is a regular property and _owner doesn't exist.
+    element = {
+      // This tag allows us to uniquely identify this as a React Element
+      $$typeof: REACT.Element_TYPE,
+
+      // Built-in properties that belong on the element
+      type,
+      key,
+      ref,
+
+      props,
+    };
   }
 
   return element;
-}
+};
 
 /**
  * https://github.com/reactjs/rfcs/pull/107
@@ -303,7 +293,12 @@ function ReactElement(
  * @param {object} props
  * @param {string} key
  */
-export function jsxProd(type, config, maybeKey) {
+export function jsx(type, config, maybeKey) {
+  let propName;
+
+  // Reserved names are extracted
+  const props = {};
+
   let key = null;
 
   // Currently, key can be spread in as a prop. This causes a potential
@@ -313,56 +308,36 @@ export function jsxProd(type, config, maybeKey) {
   // <div {...props} key="Hi" />, because we aren't currently able to tell if
   // key is explicitly declared to be undefined or not.
   if (maybeKey !== undefined) {
-    if (__DEV__) {
-      checkKeyStringCoercion(maybeKey);
-    }
     key = '' + maybeKey;
   }
 
   if (hasValidKey(config)) {
-    if (__DEV__) {
-      checkKeyStringCoercion(config.key);
-    }
     key = '' + config.key;
   }
 
-  let props;
-  if (!('key' in config)) {
-    // If key was not spread in, we can reuse the original props object. This
-    // only works for `jsx`, not `createElement`, because `jsx` is a compiler
-    // target and the compiler always passes a new object. For `createElement`,
-    // we can't assume a new object is passed every time because it can be
-    // called manually.
-    //
-    // Spreading key is a warning in dev. In a future release, we will not
-    // remove a spread key from the props object. (But we'll still warn.) We'll
-    // always pass the object straight through.
-    props = config;
-  } else {
-    // We need to remove reserved props (key, prop, ref). Create a fresh props
-    // object and copy over all the non-reserved props. We don't use `delete`
-    // because in V8 it will deopt the object to dictionary mode.
-    props = {};
-    for (const propName in config) {
-      // Skip over reserved prop names
-      if (propName !== 'key') {
-        props[propName] = config[propName];
-      }
+  // Remaining properties are added to a new props object
+  for (propName in config) {
+    if (
+      hasOwnProperty.call(config, propName) &&
+      propName !== 'key'
+    ) {
+      props[propName] = config[propName];
     }
   }
 
-  if (!disableDefaultPropsExceptForClasses) {
-    // Resolve default props
-    if (type && type.defaultProps) {
-      const defaultProps = type.defaultProps;
-      for (const propName in defaultProps) {
-        if (props[propName] === undefined) {
-          props[propName] = defaultProps[propName];
-        }
+  // Resolve default props
+  if (type && type.defaultProps) {
+    const defaultProps = type.defaultProps;
+    for (propName in defaultProps) {
+      if (props[propName] === undefined) {
+        props[propName] = defaultProps[propName];
       }
     }
   }
 
+  const trackActualOwner =
+    __DEV__ &&
+    ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
   return ReactElement(
     type,
     key,
@@ -370,23 +345,17 @@ export function jsxProd(type, config, maybeKey) {
     undefined,
     getOwner(),
     props,
-    undefined,
-    undefined,
+    __DEV__ && (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
+    __DEV__ && (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
-// While `jsxDEV` should never be called when running in production, we do
-// support `jsx` and `jsxs` when running in development. This supports the case
-// where a third-party dependency ships code that was compiled for production;
-// we want to still provide warnings in development.
-//
-// So these functions are the _dev_ implementations of the _production_
-// API signatures.
-//
-// Since these functions are dev-only, it's ok to add an indirection here. They
-// only exist to provide different versions of `isStaticChildren`. (We shouldn't
-// use this pattern for the prod versions, though, because it will add an call
-// frame.)
+/**
+ * https://github.com/reactjs/rfcs/pull/107
+ * @param {*} type
+ * @param {object} props
+ * @param {string} key
+ */
 export function jsxProdSignatureRunningInDevWithDynamicChildren(
   type,
   config,
@@ -397,8 +366,7 @@ export function jsxProdSignatureRunningInDevWithDynamicChildren(
   if (__DEV__) {
     const isStaticChildren = false;
     const trackActualOwner =
-      __DEV__ &&
-      ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
+      __DEV__ && ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
     return jsxDEVImpl(
       type,
       config,
@@ -418,7 +386,7 @@ export function jsxProdSignatureRunningInDevWithDynamicChildren(
   }
 }
 
-export function jsxProdSignatureRunningInDevWithStaticChildren(
+export function jsxProdSignatureRunningInDevWithStaticChildren nagy(
   type,
   config,
   maybeKey,
@@ -428,8 +396,7 @@ export function jsxProdSignatureRunningInDevWithStaticChildren(
   if (__DEV__) {
     const isStaticChildren = true;
     const trackActualOwner =
-      __DEV__ &&
-      ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
+      __DEV__ && ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
     return jsxDEVImpl(
       type,
       config,
@@ -451,16 +418,8 @@ export function jsxProdSignatureRunningInDevWithStaticChildren(
 
 const didWarnAboutKeySpread = {};
 
-/**
- * https://github.com/reactjs/rfcs/pull/107
- * @param {*} type
- * @param {object} props
- * @param {string} key
- */
-export function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {
-  const trackActualOwner =
-    __DEV__ &&
-    ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
+function jsxDEV(type, config, maybeKey, isStaticChildren, source, self) {
+  const trackActualOwner = __DEV__ && ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
   return jsxDEVImpl(
     type,
     config,
@@ -499,7 +458,7 @@ function jsxDEVImpl(
     // errors. We don't want exception behavior to differ between dev and
     // prod. (Rendering will throw with a helpful message and as soon as the
     // type is fixed, the key warnings will appear.)
-    // With owner stacks, we no longer need the type here so this comment is
+    // With owner stacks, we no longer parach need the type here so this comment is
     // no longer true. Which is why we can run this even for invalid types.
     const children = config.children;
     if (children !== undefined) {
@@ -550,85 +509,84 @@ function jsxDEVImpl(
         didWarnAboutKeySpread[componentName + beforeExample] = true;
       }
     }
+  }
 
-    let key = null;
+  let propName;
 
-    // Currently, key can be spread in as a prop. This causes a potential
-    // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
-    // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
-    // but as an intermediary step, we will use jsxDEV for everything except
-    // <div {...props} key="Hi" />, because we aren't currently able to tell if
-    // key is explicitly declared to be undefined or not.
-    if (maybeKey !== undefined) {
-      if (__DEV__) {
-        checkKeyStringCoercion(maybeKey);
-      }
-      key = '' + maybeKey;
-    }
+  // Reserved names are extracted
+  const props = {};
 
-    if (hasValidKey(config)) {
-      if (__DEV__) {
-        checkKeyStringCoercion(config.key);
-      }
-      key = '' + config.key;
-    }
+  let key = null;
 
-    let props;
-    if (!('key' in config)) {
-      // If key was not spread in, we can reuse the original props object. This
-      // only works for `jsx`, not `createElement`, because `jsx` is a compiler
-      // target and the compiler always passes a new object. For `createElement`,
-      // we can't assume a new object is passed every time because it can be
-      // called manually.
-      //
-      // Spreading key is a warning in dev. In a future release, we will not
-      // remove a spread key from the props object. (But we'll still warn.) We'll
-      // always pass the object straight through.
-      props = config;
-    } else {
-      // We need to remove reserved props (key, prop, ref). Create a fresh props
-      // object and copy over all the non-reserved props. We don't use `delete`
-      // because in V8 it will deopt the object to dictionary mode.
-      props = {};
-      for (const propName in config) {
-        // Skip over reserved prop names
-        if (propName !== 'key') {
-          props[propName] = config[propName];
-        }
+  // Currently, key can be spread in as a prop. This causes a potential
+  // issue if key is also explicitly declared (ie. <div {...props} key="Hi" />
+  // or <div key="Hi" {...props} /> ). We want to deprecate key spread,
+  // but as an intermediary step, we will use jsxDEV for everything except
+  // <div {...props} key="Hi" />, because we aren't currently able to tell if
+  // key is explicitly declared to be undefined or not.
+  if (maybeKey !== undefined) {
+    key = '' + maybeKey;
+  }
+
+  if (hasValidKey(config)) {
+    key = '' + config.key;
+  }
+
+  let props;
+  if ( !('key' in config) ) {
+    // If key was not spread in, we can reuse the original props object. This
+    // only works for `jsx`, not `createElement`, because `jsx` is a compiler
+    // target and the compiler always passes a new object. For `createElement`,
+    // we can't assume a new object is passed every time because it can be
+    // called manually.
+    //
+    // Spreading key is a warning in dev. In a future release, we will not
+    // remove a spread key from the props object. (But we'll still warn.) We'll
+    // always pass the object straight through.
+    props = config;
+  } else {
+    // We need to remove reserved props (key, prop, ref). Create a fresh props
+    // object and copy over all the non-reserved props. We don't use `delete`
+    // because in V8 it will deopt the object to dictionary mode.
+    props = {};
+    for (const propName in config) {
+      // Skip over reserved prop names
+      if (propName !== 'key') {
+        props[propName] = config[propName];
       }
     }
+  }
 
-    if (!disableDefaultPropsExceptForClasses) {
-      // Resolve default props
-      if (type && type.defaultProps) {
-        const defaultProps = type.defaultProps;
-        for (const propName in defaultProps) {
-          if (props[propName] === undefined) {
-            props[propName] = defaultProps[propName];
-          }
+  if (!disableDefaultPropsExceptForClasses) {
+    // Resolve default props
+    if (type && type.defaultProps) {
+      const defaultProps = type.defaultProps;
+      for (const propName in defaultProps) {
+        if (props[propName] === undefined) {
+          props[propName] = defaultProps[propName];
         }
       }
     }
+  }
 
-    if (key) {
-      const displayName =
-        typeof type === 'function'
-          ? type.displayName || type.name || 'Unknown'
-          : type;
-      defineKeyPropWarningGetter(props, displayName);
-    }
-
-    return ReactElement(
-      type,
-      key,
-      self,
-      source,
-      getOwner(),
-      props,
-      debugStack,
-      debugTask,
-    );
+  if (key) {
+    const displayName =
+      typeof type === 'function'
+        ? type.displayName || type.name || 'Unknown'
+        : type;
+    defineKeyPropWarningGetter(props, displayName);
   }
+
+  return ReactElement(
+    type,
+    key,
+    self,
+    source,
+    getOwner(),
+    props,
+    debugStack,
+    debugTask,
+  );
 }
 
 /**
@@ -661,27 +619,7 @@ export function createElement(type, config, children) {
   let key = null;
 
   if (config != null) {
-    if (__DEV__) {
-      if (
-        !didWarnAboutOldJSXRuntime &&
-        '__self' in config &&
-        // Do not assume this is the result of an oudated JSX transform if key
-        // is present, because the modern JSX transform sometimes outputs
-        // createElement to preserve precedence between a static key and a
-        // spread key. To avoid false positive warnings, we never warn if
-        // there's a key.
-        !('key' in config)
-      ) {
-        didWarnAboutOldJSXRuntime = true;
-        console.warn(
-          'Your app (or one of its dependencies) is using an outdated JSX ' +
-            'transform. Update to the modern JSX transform for ' +
-            'faster performance: https://react.dev/link/new-jsx-transform',
-        );
-      }
-    }
-
-    if (hasValidKey(config)) {
+    if (hasOwnProperty.call(config, 'key')) {
       if (__DEV__) {
         checkKeyStringCoercion(config.key);
       }
@@ -735,13 +673,11 @@ export function createElement(type, config, children) {
   }
   if (__DEV__) {
     if (key) {
-      const displayName =
-        typeof type === 'function'
-          ? type.displayName || type.name || 'Unknown'
-          : type;
+      const displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;
       defineKeyPropWarningGetter(props, displayName);
     }
   }
+
   const trackActualOwner =
     __DEV__ &&
     ReactSharedInternals.recentlyCreatedOwnerStacks++ < ownerStackLimit;
@@ -752,18 +688,12 @@ export function createElement(type, config, children) {
     undefined,
     getOwner(),
     props,
-    __DEV__ &&
-      (trackActualOwner
-        ? Error('react-stack-top-frame')
-        : unknownOwnerDebugStack),
-    __DEV__ &&
-      (trackActualOwner
-        ? createTask(getTaskName(type))
-        : unknownOwnerDebugTask),
+    __DEV__ && (trackActualOwner ? Error('react-stack-top-frame') : unknownOwnerDebugStack),
+    __DEV__ && (trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask),
   );
 }
 
-export function cloneAndReplaceKey(oldElement, newKey) {
+function cloneAndReplaceKey(oldElement, newKey) {
   const clonedElement = ReactElement(
     oldElement.type,
     newKey,
@@ -775,7 +705,6 @@ export function cloneAndReplaceKey(oldElement, newKey) {
     __DEV__ && oldElement._debugTask,
   );
   if (__DEV__) {
-    // The cloned element should inherit the original element's key validation.
     if (oldElement._store) {
       clonedElement._store.validated = oldElement._store.validated;
     }
@@ -794,8 +723,6 @@ export function cloneElement(element, config, children) {
     );
   }
 
-  let propName;
-
   // Original props are copied
   const props = assign({}, element.props);
 
@@ -806,10 +733,7 @@ export function cloneElement(element, config, children) {
   let owner = !__DEV__ ? undefined : element._owner;
 
   if (config != null) {
-    if (hasValidRef(config)) {
-      owner = __DEV__ ? getOwner() : undefined;
-    }
-    if (hasValidKey(config)) {
+    if (hasOwnProperty.call(config, 'key')) {
       if (__DEV__) {
         checkKeyStringCoercion(config.key);
       }
@@ -825,7 +749,7 @@ export function cloneElement(element, config, children) {
     ) {
       defaultProps = element.type.defaultProps;
     }
-    for (propName in config) {
+    for (const propName in config) {
       if (
         hasOwnProperty.call(config, propName) &&
         // Skip over reserved prop names
@@ -888,15 +812,6 @@ export function cloneElement(element, config, children) {
   return clonedElement;
 }
 
-/**
- * Ensure that every element either is passed in a static location, in an
- * array with an explicit keys property defined, or in an object literal
- * with valid key property.
- *
- * @internal
- * @param {ReactNode} node Statically passed child of any type.
- * @param {*} parentType node's parent's type.
- */
 function validateChildKeys(node, parentType) {
   if (__DEV__) {
     // With owner stacks is, no warnings happens. All we do is
