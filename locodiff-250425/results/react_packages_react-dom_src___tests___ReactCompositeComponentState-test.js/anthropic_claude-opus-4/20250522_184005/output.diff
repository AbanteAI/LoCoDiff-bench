
index c73d0a5b6..3558be8a7 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected):tmp/tmp3bfywyrg_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual):tmp/tmpw60c7qfe_actual.txt	
@@ -478,134 +478,4 @@ describe('ReactCompositeComponent-state', () => {
         "this.state is deprecated (except inside a component's constructor). " +
         'Use setState instead.\n' +
         '    in Test (at **)',
-    ]);
-
-    assertLog([
-      'render -- step: 1, extra: true',
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
-    ]);
-
-    // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
-  });
-
-  it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
-    class Test extends React.Component {
-      state = {step: 1, extra: true};
-      UNSAFE_componentWillMount() {
-        this.setState({step: 2}, () => {
-          // Tests that earlier setState callbacks are not dropped
-          Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
-          );
-        });
-        // Treat like replaceState
-        this.state = {step: 3};
-      }
-      render() {
-        Scheduler.log(
-          `render -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
-        );
-        return null;
-      }
-    }
-
-    // Mount
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    ReactDOM.flushSync(() => {
-      root.render(<Test />);
-    });
-    assertConsoleErrorDev([
-      'Test.componentWillMount(): Assigning directly to ' +
-        "this.state is deprecated (except inside a component's constructor). " +
-        'Use setState instead.\n' +
-        '    in Test (at **)',
-    ]);
-
-    assertLog([
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
-
-      // A second time for the retry.
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
-    ]);
-  });
-
-  it('should not support setState in componentWillUnmount', async () => {
-    let subscription;
-    class A extends React.Component {
-      componentWillUnmount() {
-        subscription();
-      }
-      render() {
-        return 'A';
-      }
-    }
-
-    class B extends React.Component {
-      state = {siblingUnmounted: false};
-      UNSAFE_componentWillMount() {
-        subscription = () => this.setState({siblingUnmounted: true});
-      }
-      render() {
-        return 'B' + (this.state.siblingUnmounted ? ' No Sibling' : '');
-      }
-    }
-
-    const el = document.createElement('div');
-    const root = ReactDOMClient.createRoot(el);
-    await act(() => {
-      root.render(<A />);
-    });
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.flushSync(() => {
-      root.render(<B />);
-    });
-    assertConsoleErrorDev([
-      "Can't perform a React state update on a component that hasn't mounted yet. " +
-        'This indicates that you have a side-effect in your render function that ' +
-        'asynchronously later calls tries to update the component. ' +
-        'Move this work to useEffect instead.\n' +
-        '    in B (at **)',
-    ]);
-  });
-
-  // @gate !disableLegacyMode
-  it('Legacy mode should support setState in componentWillUnmount (#18851)', () => {
-    let subscription;
-    class A extends React.Component {
-      componentWillUnmount() {
-        subscription();
-      }
-      render() {
-        return 'A';
-      }
-    }
-
-    class B extends React.Component {
-      state = {siblingUnmounted: false};
-      UNSAFE_componentWillMount() {
-        subscription = () => this.setState({siblingUnmounted: true});
-      }
-      render() {
-        return 'B' + (this.state.siblingUnmounted ? ' No Sibling' : '');
-      }
-    }
-
-    const el = document.createElement('div');
-    ReactDOM.render(<A />, el);
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.render(<B />, el);
-    expect(el.textContent).toBe('B No Sibling');
-  });
-});
\ No newline at end of file
+    ]);
\ No newline at end of file
