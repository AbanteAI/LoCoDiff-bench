```javascript
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

let React;
let ReactDOM;
let ReactDOMClient;
let act;
let Scheduler;
let assertLog;
let TestComponent;
let testComponentInstance;
let {assertConsoleErrorDev} = {};

let LogAfterCommit;

describe('ReactCompositeComponent-state', () => {
  beforeEach(() => {
    React = require('react');
    ReactDOM = require('react-dom');
    ReactDOMClient = require('react-dom/client');
    ({act, assertConsoleErrorDev} = require('internal-test-utils'));
    Scheduler = require('scheduler');

    const InternalTestUtils = require('internal-test-utils');
    assertLog = InternalTestUtils.assertLog;

    function LogAfterCommit({children, color}) {
      React.useEffect(() => {
        Scheduler.log(`commit ${color}`);
      });
      return children;
    }

    TestComponent = class extends React.Component {
      constructor(props) {
        super(props);
        this.peekAtState('getInitialState', undefined, props);
        this.state = {color: 'red'};
        testComponentInstance = this;
      }

      peekAtState = (from, state = this.state, props = this.props) => {
        Scheduler.log(`${from} ${state && state.color}`);
      };

      peekAtCallback = from => {
        return () => this.peekAtState(from);
      };

      setFavoriteColor(nextColor) {
        this.setState(
          {color: nextColor},
          this.peekAtCallback('setFavoriteColor'),
        );
      }

      render() {
        this.peekAtState('render');
        return (
          <LogAfterCommit color={this.state.color}>
            <div>{this.state.color}</div>
          </LogAfterColor>
          ); // Close the JSX (the actual test harness continues from here)
        );
      }

      UNSAFE_componentWillMount() {
        this.peekAtState('componentWillMount-start');
        this.setState(function (state) {
          this.peekAtState('before-setState-sunrise', state);
        });
        this.setState(
          {color: 'sunrise'},
          this.peekAtCallback('setState-sunrise'),
        );
        this.setState(function (state) {
          this.peekAtState('after-setState-sunrise', state);
        });
        this.peekAtState('componentWillMount-after-sunrise');
        this.setState(
          {color: 'orange'},
          this.peekAtCallback('setState-orange'),
        );
        this.setState(function (state) {
          this.peekAtState('after-setState-orange', state);
          });
          this.peekAtState('componentWillMount-end');
        }

        componentDidMount() {
          this.peekAtState('componentDidMount-start');
          this.setState(
            {color: 'yellow'},
            this.peekAtCallback('setState-yellow'),
          );
          this.peekAtState('componentDidMount-end');
        }

        UNSAFE_componentWillReceiveProps(newProps) {
          this.peekAtState('componentWillReceiveProps-start');
          if (newProps.nextColor) {
            this.setState(function (state) {
              this.peekAtState('before-setState-receiveProps', state);
              return {color: newProps.nextColor};
            });
            this.updater.enqueueReplaceState(this, {color: undefined});
            this.setState(
              function (state) {
                this.peekAtState(
                  'before-setState-again-receiveProps',
                );
                return {color: newProps.nextColor};
              },
              this.peekAtCallback('setState-receiveProps'),
            );
            this.setState(function (state) {
              this.peekAtState('after-setState-receiveProps', state);
            });
          }
          this.peekAtState('componentWillReceiveProps-end');
        }

        shouldComponentUpdate(nextProps, nextState) {
          this.peekAtState('shouldComponentUpdate-currentState');
          this.peekAtState('shouldComponentUpdate-nextState', nextState);
          return true;
        }

        UNSAFE_componentWillUpdate(nextProps, nextState) {
          this.peekAtState('componentWillUpdate-currentState');
          this.peekAtState('componentWillUpdate-nextState', nextState);
        }

        componentDidUpdate(prevProps, prevState) {
          this.peekAtState('componentDidUpdate-currentState');
          this.peekState('componentDidUpdate-prevState', prevState);
        }

        componentWillUnmount() {
          this.peekAtState('componentWillUnmount');
        }
      };
    });
});
```