
index c73d0a5b6..8583624ca 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected):tmp/tmp_ub28bxa_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual):tmp/tmp32kz2nd8_actual.txt	
@@ -7,8 +7,6 @@
  * @emails react-core
  */
 
-'use strict';
-
 let React;
 let ReactDOM;
 let ReactDOMClient;
@@ -175,15 +173,6 @@ describe('ReactCompositeComponent-state', () => {
       'setState-sunrise orange',
       'setState-orange orange',
       'commit orange',
-      'shouldComponentUpdate-currentState orange',
-      'shouldComponentUpdate-nextState yellow',
-      'componentWillUpdate-currentState orange',
-      'componentWillUpdate-nextState yellow',
-      'render yellow',
-      'componentDidUpdate-currentState yellow',
-      'componentDidUpdate-prevState orange',
-      'setState-yellow yellow',
-      'commit yellow',
     ]);
 
     await act(() => {
@@ -487,11 +476,9 @@ describe('ReactCompositeComponent-state', () => {
     ]);
 
     // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
   });
 
   it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
@@ -561,51 +548,4 @@ describe('ReactCompositeComponent-state', () => {
     }
 
     const el = document.createElement('div');
-    const root = ReactDOMClient.createRoot(el);
-    await act(() => {
-      root.render(<A />);
-    });
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.flushSync(() => {
-      root.render(<B />);
-    });
-    assertConsoleErrorDev([
-      "Can't perform a React state update on a component that hasn't mounted yet. " +
-        'This indicates that you have a side-effect in your render function that ' +
-        'asynchronously later calls tries to update the component. ' +
-        'Move this work to useEffect instead.\n' +
-        '    in B (at **)',
-    ]);
-  });
-
-  // @gate !disableLegacyMode
-  it('Legacy mode should support setState in componentWillUnmount (#18851)', () => {
-    let subscription;
-    class A extends React.Component {
-      componentWillUnmount() {
-        subscription();
-      }
-      render() {
-        return 'A';
-      }
-    }
-
-    class B extends React.Component {
-      state = {siblingUnmounted: false};
-      UNSAFE_componentWillMount() {
-        subscription = () => this.setState({siblingUnmounted: true});
-      }
-      render() {
-        return 'B' + (this.state.siblingUnmounted ? ' No Sibling' : '');
-      }
-    }
-
-    const el = document.createElement('div');
-    ReactDOM.render(<A />, el);
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.render(<B />, el);
-    expect(el.textContent).toBe('B No Sibling');
-  });
-});
\ No newline at end of file
+    const root = ReactDOMClient.createRoot(el);
\ No newline at end of file
