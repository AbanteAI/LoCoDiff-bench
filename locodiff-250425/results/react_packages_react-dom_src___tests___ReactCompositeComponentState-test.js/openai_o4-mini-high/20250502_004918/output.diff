--- react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual)@@ -3,8 +3,6 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -111,10 +109,13 @@           // No longer a public API, but we can test that it works internally by
           // reaching into the updater.
           this.updater.enqueueReplaceState(this, {color: undefined});
-          this.setState(function (state) {
-            this.peekAtState('before-setState-again-receiveProps', state);
-            return {color: newProps.nextColor};
-          }, this.peekAtCallback('setState-receiveProps'));
+          this.setState(
+            function (state) {
+              this.peekAtState('before-setState-again-receiveProps', state);
+              return {color: newProps.nextColor};
+            },
+            this.peekAtCallback('setState-receiveProps'),
+          );
           this.setState(function (state) {
             this.peekAtState('after-setState-receiveProps', state);
           });
@@ -154,36 +155,19 @@     });
 
     assertLog([
-      // there is no state when getInitialState() is called
       'getInitialState undefined',
       'componentWillMount-start red',
-      // setState()'s only enqueue pending states.
       'componentWillMount-after-sunrise red',
       'componentWillMount-end red',
-      // pending state queue is processed
       'before-setState-sunrise red',
       'after-setState-sunrise sunrise',
       'after-setState-orange orange',
-      // pending state has been applied
       'render orange',
       'componentDidMount-start orange',
-      // setState-sunrise and setState-orange should be called here,
-      // after the bug in #1740
-      // componentDidMount() called setState({color:'yellow'}), which is async.
-      // The update doesn't happen until the next flush.
       'componentDidMount-end orange',
       'setState-sunrise orange',
       'setState-orange orange',
       'commit orange',
-      'shouldComponentUpdate-currentState orange',
-      'shouldComponentUpdate-nextState yellow',
-      'componentWillUpdate-currentState orange',
-      'componentWillUpdate-nextState yellow',
-      'render yellow',
-      'componentDidUpdate-currentState yellow',
-      'componentDidUpdate-prevState orange',
-      'setState-yellow yellow',
-      'commit yellow',
     ]);
 
     await act(() => {
@@ -192,11 +176,7 @@ 
     assertLog([
       'componentWillReceiveProps-start yellow',
-      // setState({color:'green'}) only enqueues a pending state.
       'componentWillReceiveProps-end yellow',
-      // pending state queue is processed
-      // We keep updates in the queue to support
-      // replaceState(prevState => newState).
       'before-setState-receiveProps yellow',
       'before-setState-again-receiveProps undefined',
       'after-setState-receiveProps green',
@@ -216,7 +196,6 @@     });
 
     assertLog([
-      // setFavoriteColor('blue')
       'shouldComponentUpdate-currentState green',
       'shouldComponentUpdate-nextState blue',
       'componentWillUpdate-currentState green',
@@ -227,13 +206,14 @@       'setFavoriteColor blue',
       'commit blue',
     ]);
+
     await act(() => {
       testComponentInstance.forceUpdate(
         testComponentInstance.peekAtCallback('forceUpdate'),
       );
     });
+
     assertLog([
-      // forceUpdate()
       'componentWillUpdate-currentState blue',
       'componentWillUpdate-nextState blue',
       'render blue',
@@ -245,15 +225,12 @@ 
     root.unmount();
 
-    assertLog([
-      // unmount()
-      // state is available within `componentWillUnmount()`
-      'componentWillUnmount blue',
-    ]);
+    assertLog(['componentWillUnmount blue']);
   });
 
   it('should call componentDidUpdate of children first', async () => {
     const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
 
     let child = null;
     let parent = null;
@@ -295,7 +272,6 @@       }
     }
 
-    const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
@@ -305,8 +281,6 @@       child.setState({bar: true});
     });
 
-    // When we render changes top-down in a batch, children's componentDidUpdate
-    // happens before the parent.
     assertLog(['child did update', 'parent did update']);
 
     shouldUpdate = false;
@@ -316,17 +290,15 @@       child.setState({bar: false});
     });
 
-    // We expect the same thing to happen if we bail out in the middle.
     assertLog(['child did update', 'parent did update']);
   });
 
-  it('should batch unmounts', async () => {
+  it('should batch unmounts', () => {
     let outer;
     class Inner extends React.Component {
       render() {
         return <div />;
       }
-
       componentWillUnmount() {
         // This should get silently ignored (maybe with a warning), but it
         // shouldn't break React.
@@ -339,7 +311,6 @@       componentDidMount() {
         outer = this;
       }
-
       render() {
         return <div>{this.state.showInner && <Inner />}</div>;
       }
@@ -347,20 +318,18 @@ 
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Outer />);
-    });
-
+    root.render(<Outer />);
     expect(() => {
       root.unmount();
     }).not.toThrow();
   });
 
   it('should update state when called from child cWRP', async () => {
+    const log = [];
     class Parent extends React.Component {
       state = {value: 'one'};
       render() {
-        Scheduler.log('parent render ' + this.state.value);
+        log.push('parent render ' + this.state.value);
         return <Child parent={this} value={this.state.value} />;
       }
     }
@@ -370,15 +339,13 @@         if (updated) {
           return;
         }
-        Scheduler.log('child componentWillReceiveProps ' + this.props.value);
+        log.push('child componentWillReceiveProps ' + this.props.value);
         this.props.parent.setState({value: 'two'});
-        Scheduler.log(
-          'child componentWillReceiveProps done ' + this.props.value,
-        );
+        log.push('child componentWillReceiveProps done ' + this.props.value);
         updated = true;
       }
       render() {
-        Scheduler.log('child render ' + this.props.value);
+        log.push('child render ' + this.props.value);
         return <div>{this.props.value}</div>;
       }
     }
@@ -387,13 +354,12 @@     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog(['parent render one', 'child render one']);
     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog([
+    assertLog(log, [
+      'parent render one',
+      'child render one',
       'parent render one',
       'child componentWillReceiveProps one',
       'child componentWillReceiveProps done one',
@@ -404,18 +370,14 @@   });
 
   it('should merge state when sCU returns false', async () => {
-    let test;
+    const log = [];
     class Test extends React.Component {
       state = {a: 0};
-      componentDidMount() {
-        test = this;
-      }
-
       render() {
         return null;
       }
       shouldComponentUpdate(nextProps, nextState) {
-        Scheduler.log(
+        log.push(
           'scu from ' +
             Object.keys(this.state) +
             ' to ' +
@@ -431,14 +393,9 @@       root.render(<Test />);
     });
     await act(() => {
-      test.setState({b: 0});
-    });
-
-    assertLog(['scu from a to a,b']);
-    await act(() => {
-      test.setState({c: 0});
-    });
-    assertLog(['scu from a,b to a,b,c']);
+      root.render(<Test />);
+    });
+    assertLog(log, ['scu from a to a,b', 'scu from a,b to a,b,c']);
   });
 
   it('should treat assigning to this.state inside cWRP as a replaceState, with a warning', async () => {
@@ -448,11 +405,9 @@         this.setState({step: 2}, () => {
           // Tests that earlier setState callbacks are not dropped
           Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
-        // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
@@ -463,13 +418,11 @@       }
     }
 
-    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<Test />);
     });
-    // Update
     ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
@@ -485,13 +438,6 @@       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
-
-    // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
   });
 
   it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
@@ -501,11 +447,9 @@         this.setState({step: 2}, () => {
           // Tests that earlier setState callbacks are not dropped
           Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
-        // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
@@ -516,7 +460,6 @@       }
     }
 
-    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     ReactDOM.flushSync(() => {
@@ -530,10 +473,6 @@     ]);
 
     assertLog([
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
-
-      // A second time for the retry.
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
