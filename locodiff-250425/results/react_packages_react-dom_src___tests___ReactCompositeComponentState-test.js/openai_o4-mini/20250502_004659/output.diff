--- react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual)@@ -3,8 +3,6 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -111,10 +109,16 @@           // No longer a public API, but we can test that it works internally by
           // reaching into the updater.
           this.updater.enqueueReplaceState(this, {color: undefined});
-          this.setState(function (state) {
-            this.peekAtState('before-setState-again-receiveProps', state);
-            return {color: newProps.nextColor};
-          }, this.peekAtCallback('setState-receiveProps'));
+          this.setState(
+            function (state) {
+              this.peekAtState(
+                'before-setState-again-receiveProps',
+                state,
+              );
+              return {color: newProps.nextColor};
+            },
+            this.peekAtCallback('setState-receiveProps'),
+          );
           this.setState(function (state) {
             this.peekAtState('after-setState-receiveProps', state);
           });
@@ -152,25 +156,16 @@     await act(() => {
       root.render(<TestComponent />);
     });
-
-    assertLog([
-      // there is no state when getInitialState() is called
+    assertLog([
       'getInitialState undefined',
       'componentWillMount-start red',
-      // setState()'s only enqueue pending states.
       'componentWillMount-after-sunrise red',
       'componentWillMount-end red',
-      // pending state queue is processed
       'before-setState-sunrise red',
       'after-setState-sunrise sunrise',
       'after-setState-orange orange',
-      // pending state has been applied
       'render orange',
       'componentDidMount-start orange',
-      // setState-sunrise and setState-orange should be called here,
-      // after the bug in #1740
-      // componentDidMount() called setState({color:'yellow'}), which is async.
-      // The update doesn't happen until the next flush.
       'componentDidMount-end orange',
       'setState-sunrise orange',
       'setState-orange orange',
@@ -189,14 +184,9 @@     await act(() => {
       root.render(<TestComponent nextColor="green" />);
     });
-
     assertLog([
       'componentWillReceiveProps-start yellow',
-      // setState({color:'green'}) only enqueues a pending state.
       'componentWillReceiveProps-end yellow',
-      // pending state queue is processed
-      // We keep updates in the queue to support
-      // replaceState(prevState => newState).
       'before-setState-receiveProps yellow',
       'before-setState-again-receiveProps undefined',
       'after-setState-receiveProps green',
@@ -214,9 +204,7 @@     await act(() => {
       testComponentInstance.setFavoriteColor('blue');
     });
-
-    assertLog([
-      // setFavoriteColor('blue')
+    assertLog([
       'shouldComponentUpdate-currentState green',
       'shouldComponentUpdate-nextState blue',
       'componentWillUpdate-currentState green',
@@ -227,13 +215,13 @@       'setFavoriteColor blue',
       'commit blue',
     ]);
+
     await act(() => {
       testComponentInstance.forceUpdate(
         testComponentInstance.peekAtCallback('forceUpdate'),
       );
     });
     assertLog([
-      // forceUpdate()
       'componentWillUpdate-currentState blue',
       'componentWillUpdate-nextState blue',
       'render blue',
@@ -244,10 +232,7 @@     ]);
 
     root.unmount();
-
-    assertLog([
-      // unmount()
-      // state is available within `componentWillUnmount()`
+    assertLog([
       'componentWillUnmount blue',
     ]);
   });
@@ -257,6 +242,7 @@ 
     let child = null;
     let parent = null;
+    let shouldUpdate = true;
 
     class Child extends React.Component {
       state = {bar: false};
@@ -271,8 +257,6 @@       }
     }
 
-    let shouldUpdate = true;
-
     class Intermediate extends React.Component {
       shouldComponentUpdate() {
         return shouldUpdate;
@@ -304,32 +288,24 @@       parent.setState({foo: true});
       child.setState({bar: true});
     });
-
-    // When we render changes top-down in a batch, children's componentDidUpdate
-    // happens before the parent.
     assertLog(['child did update', 'parent did update']);
 
     shouldUpdate = false;
-
     await act(() => {
       parent.setState({foo: false});
       child.setState({bar: false});
     });
-
-    // We expect the same thing to happen if we bail out in the middle.
     assertLog(['child did update', 'parent did update']);
   });
 
   it('should batch unmounts', async () => {
     let outer;
+
     class Inner extends React.Component {
       render() {
         return <div />;
       }
-
       componentWillUnmount() {
-        // This should get silently ignored (maybe with a warning), but it
-        // shouldn't break React.
         outer.setState({showInner: false});
       }
     }
@@ -339,7 +315,6 @@       componentDidMount() {
         outer = this;
       }
-
       render() {
         return <div>{this.state.showInner && <Inner />}</div>;
       }
@@ -350,7 +325,6 @@     await act(() => {
       root.render(<Outer />);
     });
-
     expect(() => {
       root.unmount();
     }).not.toThrow();
@@ -364,17 +338,17 @@         return <Child parent={this} value={this.state.value} />;
       }
     }
+
     let updated = false;
+
     class Child extends React.Component {
-      UNSAFE_componentWillReceiveProps() {
+      componentWillReceiveProps() {
         if (updated) {
           return;
         }
         Scheduler.log('child componentWillReceiveProps ' + this.props.value);
         this.props.parent.setState({value: 'two'});
-        Scheduler.log(
-          'child componentWillReceiveProps done ' + this.props.value,
-        );
+        Scheduler.log('child componentWillReceiveProps done ' + this.props.value);
         updated = true;
       }
       render() {
@@ -382,18 +356,18 @@         return <div>{this.props.value}</div>;
       }
     }
+
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog(['parent render one', 'child render one']);
     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog([
+    assertLog([
+      'parent render one',
+      'child render one',
       'parent render one',
       'child componentWillReceiveProps one',
       'child componentWillReceiveProps done one',
@@ -410,7 +384,6 @@       componentDidMount() {
         test = this;
       }
-
       render() {
         return null;
       }
@@ -433,7 +406,6 @@     await act(() => {
       test.setState({b: 0});
     });
-
     assertLog(['scu from a to a,b']);
     await act(() => {
       test.setState({c: 0});
@@ -446,7 +418,6 @@       state = {step: 1, extra: true};
       UNSAFE_componentWillReceiveProps() {
         this.setState({step: 2}, () => {
-          // Tests that earlier setState callbacks are not dropped
           Scheduler.log(
             `callback -- step: ${this.state.step}, extra: ${!!this.state
               .extra}`,
@@ -463,35 +434,27 @@       }
     }
 
-    // Mount
-    const container = document.createElement('div');
-    const root = ReactDOMClient.createRoot(container);
-    await act(() => {
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
-    // Update
     ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
     assertConsoleErrorDev([
-      'Test.componentWillReceiveProps(): Assigning directly to ' +
-        "this.state is deprecated (except inside a component's constructor). " +
-        'Use setState instead.\n' +
+      'Test.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component\'s constructor). Use setState instead.\n' +
         '    in Test (at **)',
     ]);
-
     assertLog([
       'render -- step: 1, extra: true',
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
 
-    // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
   });
 
   it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
@@ -499,10 +462,8 @@       state = {step: 1, extra: true};
       UNSAFE_componentWillMount() {
         this.setState({step: 2}, () => {
-          // Tests that earlier setState callbacks are not dropped
           Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
         // Treat like replaceState
@@ -516,24 +477,18 @@       }
     }
 
-    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
     assertConsoleErrorDev([
-      'Test.componentWillMount(): Assigning directly to ' +
-        "this.state is deprecated (except inside a component's constructor). " +
-        'Use setState instead.\n' +
+      'Test.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component\'s constructor). Use setState instead.\n' +
         '    in Test (at **)',
     ]);
-
     assertLog([
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
-
-      // A second time for the retry.
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
@@ -560,13 +515,12 @@       }
     }
 
-    const el = document.createElement('div');
-    const root = ReactDOMClient.createRoot(el);
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<A />);
     });
-    expect(el.textContent).toBe('A');
-
+    expect(container.textContent).toBe('A');
     ReactDOM.flushSync(() => {
       root.render(<B />);
     });
@@ -601,11 +555,15 @@       }
     }
 
-    const el = document.createElement('div');
-    ReactDOM.render(<A />, el);
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.render(<B />, el);
-    expect(el.textContent).toBe('B No Sibling');
+    const container = document.createElement('div');
+    const root = ReactDOMClient.createRoot(container);
+    ReactDOM.flushSync(() => {
+      root.render(<A />);
+    });
+    expect(container.textContent).toBe('A');
+    ReactDOM.flushSync(() => {
+      root.render(<B />);
+    });
+    expect(container.textContent).toBe('B No Sibling');
   });
 });