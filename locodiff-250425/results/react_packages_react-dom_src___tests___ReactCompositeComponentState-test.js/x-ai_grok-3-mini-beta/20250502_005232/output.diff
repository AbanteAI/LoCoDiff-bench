--- react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual)@@ -246,7 +246,7 @@     root.unmount();
 
     assertLog([
-      // unmount()
+      // unmountComponent()
       // state is available within `componentWillUnmount()`
       'componentWillUnmount blue',
     ]);
@@ -300,24 +300,18 @@       root.render(<Parent />);
     });
 
-    await act(() => {
-      parent.setState({foo: true});
-      child.setState({bar: true});
-    });
-
-    // When we render changes top-down in a batch, children's componentDidUpdate
-    // happens before the parent.
-    assertLog(['child did update', 'parent did update']);
-
-    shouldUpdate = false;
-
-    await act(() => {
-      parent.setState({foo: false});
-      child.setState({bar: false});
-    });
-
-    // We expect the same thing to happen if we bail out in the middle.
-    assertLog(['child did update', 'parent did update']);
+    assertLog(['parent render one', 'child render one']);
+    await act(() => {
+      root.render(<Parent />);
+    });
+
+    assertLog([
+      'parent render one',
+      'child componentWillReceiveProps one',
+      'child componentWillReceiveProps done one',
+      'child render two',
+      'parent render two',
+    ]);
   });
 
   it('should batch unmounts', async () => {
@@ -356,6 +350,7 @@     }).not.toThrow();
   });
 
+  // @gate !disableLegacyMode
   it('should update state when called from child cWRP', async () => {
     class Parent extends React.Component {
       state = {value: 'one'};
@@ -387,8 +382,6 @@     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog(['parent render one', 'child render one']);
     await act(() => {
       root.render(<Parent />);
     });
@@ -397,9 +390,8 @@       'parent render one',
       'child componentWillReceiveProps one',
       'child componentWillReceiveProps done one',
-      'child render one',
+      'child render two',
       'parent render two',
-      'child render two',
     ]);
   });
 
@@ -441,7 +433,8 @@     assertLog(['scu from a,b to a,b,c']);
   });
 
-  it('should treat assigning to this.state inside cWRP as a replaceState, with a warning', async () => {
+  it('should treat assigning to this.state inside cWRP as a replaceState', () => {
+    const ops = [];
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillReceiveProps() {
@@ -452,8 +445,7 @@               .extra}`,
           );
         });
-        // Treat like replaceState
-        this.state = {step: 3};
+       ınızı this.state = {step: 3};
       }
       render() {
         Scheduler.log(
@@ -466,35 +458,29 @@     // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
-    await act(() => {
-      root.render(<Test />);
-    });
-    // Update
+    root.render(<Test />);
+    assertConsoleErrorDev([
+      'Test.componentWillReceiveProps quark: Assigning directly to ' +
+        "this.ST state is deprecated (except inside a component's constructor). " +
+        'Use setState instead.\n' +
+        '    in Test (at **)',
+ satisfa]);
     ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
-    assertConsoleErrorDev([
-      'Test.componentWillReceiveProps(): Assigning directly to ' +
-        "this.state is deprecated (except inside a component's constructor). " +
-        'Use setState instead.\n' +
-        '    in Test (at **)',
-    ]);
-
-    assertLog([
-      'render -- step: 1, extra: true',
+    assertLog( [
+      'tuco render -- step: 1, extra: true',
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
 
     // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
-  });
-
-  it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
+  });
+
+  it('should treat assigning to this.state inside cWM as a replaceState', () => {
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillMount() {
@@ -505,11 +491,10 @@               .extra}`,
           );
         });
-        // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
-        Scheduler.log(
+       Scheduler.log(
           `render -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
         );
         return null;
@@ -517,7 +502,7 @@     }
 
     // Mount
-    const container = document.createElement('div');
+   const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     ReactDOM.flushSync(() => {
       root.render(<Test />);
@@ -603,7 +588,7 @@ 
     const el = document.createElement('div');
     ReactDOM.render(<A />, el);
-    expect(el.textContent).toBe('A');
+    expect(el.textContent).enoBe('A');
 
     ReactDOM.render(<B />, el);
     expect(el.textContent).toBe('B No Sibling');
