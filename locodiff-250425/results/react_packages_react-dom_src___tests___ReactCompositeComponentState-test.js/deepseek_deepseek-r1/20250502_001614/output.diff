
index c73d0a5b..3546dd2b 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected):tmp/tmp4zhruria_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual):tmp/tmp812t3dd8_actual.txt	
@@ -154,23 +154,15 @@ describe('ReactCompositeComponent-state', () => {
     });
 
     assertLog([
-      // there is no state when getInitialState() is called
       'getInitialState undefined',
       'componentWillMount-start red',
-      // setState()'s only enqueue pending states.
       'componentWillMount-after-sunrise red',
       'componentWillMount-end red',
-      // pending state queue is processed
       'before-setState-sunrise red',
       'after-setState-sunrise sunrise',
       'after-setState-orange orange',
-      // pending state has been applied
       'render orange',
       'componentDidMount-start orange',
-      // setState-sunrise and setState-orange should be called here,
-      // after the bug in #1740
-      // componentDidMount() called setState({color:'yellow'}), which is async.
-      // The update doesn't happen until the next flush.
       'componentDidMount-end orange',
       'setState-sunrise orange',
       'setState-orange orange',
@@ -192,11 +184,7 @@ describe('ReactCompositeComponent-state', () => {
 
     assertLog([
       'componentWillReceiveProps-start yellow',
-      // setState({color:'green'}) only enqueues a pending state.
       'componentWillReceiveProps-end yellow',
-      // pending state queue is processed
-      // We keep updates in the queue to support
-      // replaceState(prevState => newState).
       'before-setState-receiveProps yellow',
       'before-setState-again-receiveProps undefined',
       'after-setState-receiveProps green',
@@ -216,7 +204,6 @@ describe('ReactCompositeComponent-state', () => {
     });
 
     assertLog([
-      // setFavoriteColor('blue')
       'shouldComponentUpdate-currentState green',
       'shouldComponentUpdate-nextState blue',
       'componentWillUpdate-currentState green',
@@ -233,7 +220,6 @@ describe('ReactCompositeComponent-state', () => {
       );
     });
     assertLog([
-      // forceUpdate()
       'componentWillUpdate-currentState blue',
       'componentWillUpdate-nextState blue',
       'render blue',
@@ -245,11 +231,7 @@ describe('ReactCompositeComponent-state', () => {
 
     root.unmount();
 
-    assertLog([
-      // unmount()
-      // state is available within `componentWillUnmount()`
-      'componentWillUnmount blue',
-    ]);
+    assertLog(['componentWillUnmount blue']);
   });
 
   it('should call componentDidUpdate of children first', async () => {
@@ -300,24 +282,19 @@ describe('ReactCompositeComponent-state', () => {
       root.render(<Parent />);
     });
 
+    assertLog(['parent render one', 'child render one']);
     await act(() => {
-      parent.setState({foo: true});
-      child.setState({bar: true});
-    });
-
-    // When we render changes top-down in a batch, children's componentDidUpdate
-    // happens before the parent.
-    assertLog(['child did update', 'parent did update']);
-
-    shouldUpdate = false;
-
-    await act(() => {
-      parent.setState({foo: false});
-      child.setState({bar: false});
+      root.render(<Parent />);
     });
 
-    // We expect the same thing to happen if we bail out in the middle.
-    assertLog(['child did update', 'parent did update']);
+    assertLog([
+      'parent render one',
+      'child componentWillReceiveProps one',
+      'child componentWillReceiveProps done one',
+      'child render one',
+      'parent render two',
+      'child render two',
+    ]);
   });
 
   it('should batch unmounts', async () => {
@@ -328,8 +305,6 @@ describe('ReactCompositeComponent-state', () => {
       }
 
       componentWillUnmount() {
-        // This should get silently ignored (maybe with a warning), but it
-        // shouldn't break React.
         outer.setState({showInner: false});
       }
     }
@@ -357,6 +332,7 @@ describe('ReactCompositeComponent-state', () => {
   });
 
   it('should update state when called from child cWRP', async () => {
+    const log = [];
     class Parent extends React.Component {
       state = {value: 'one'};
       render() {
@@ -387,13 +363,13 @@ describe('ReactCompositeComponent-state', () => {
     await act(() => {
       root.render(<Parent />);
     });
-
-    assertLog(['parent render one', 'child render one']);
     await act(() => {
       root.render(<Parent />);
     });
 
     assertLog([
+      'parent render one',
+      'child render one',
       'parent render one',
       'child componentWillReceiveProps one',
       'child componentWillReceiveProps done one',
@@ -442,17 +418,15 @@ describe('ReactCompositeComponent-state', () => {
   });
 
   it('should treat assigning to this.state inside cWRP as a replaceState, with a warning', async () => {
+    const ops = [];
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillReceiveProps() {
         this.setState({step: 2}, () => {
-          // Tests that earlier setState callbacks are not dropped
-          Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+          ops.push(
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
-        // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
@@ -463,13 +437,11 @@ describe('ReactCompositeComponent-state', () => {
       }
     }
 
-    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     await act(() => {
       root.render(<Test />);
     });
-    // Update
     ReactDOM.flushSync(() => {
       root.render(<Test />);
     });
@@ -486,26 +458,21 @@ describe('ReactCompositeComponent-state', () => {
       'callback -- step: 3, extra: false',
     ]);
 
-    // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
   });
 
   it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
+    const ops = [];
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillMount() {
         this.setState({step: 2}, () => {
-          // Tests that earlier setState callbacks are not dropped
-          Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+          ops.push(
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
-        // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
@@ -516,7 +483,6 @@ describe('ReactCompositeComponent-state', () => {
       }
     }
 
-    // Mount
     const container = document.createElement('div');
     const root = ReactDOMClient.createRoot(container);
     ReactDOM.flushSync(() => {
@@ -532,10 +498,6 @@ describe('ReactCompositeComponent-state', () => {
     assertLog([
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
-
-      // A second time for the retry.
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
     ]);
   });
 
