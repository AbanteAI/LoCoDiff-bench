
index c73d0a5b6..a0cdc4b5e 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected):tmp/tmpxa5b87po_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual):tmp/tmpacyes9up_actual.txt	
@@ -246,7 +246,7 @@ describe('ReactCompositeComponent-state', () => {
     root.unmount();
 
     assertLog([
-      // unmount()
+      // unmountComponent()
       // state is available within `componentWillUnmount()`
       'componentWillUnmount blue',
     ]);
@@ -304,7 +304,6 @@ describe('ReactCompositeComponent-state', () => {
       parent.setState({foo: true});
       child.setState({bar: true});
     });
-
     // When we render changes top-down in a batch, children's componentDidUpdate
     // happens before the parent.
     assertLog(['child did update', 'parent did update']);
@@ -315,7 +314,6 @@ describe('ReactCompositeComponent-state', () => {
       parent.setState({foo: false});
       child.setState({bar: false});
     });
-
     // We expect the same thing to happen if we bail out in the middle.
     assertLog(['child did update', 'parent did update']);
   });
@@ -487,14 +485,12 @@ describe('ReactCompositeComponent-state', () => {
     ]);
 
     // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
   });
 
-  it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
+  it('should treat assigning to this.state inside cWM as a replaceState, with a warning', async () => {
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillMount() {
@@ -532,10 +528,6 @@ describe('ReactCompositeComponent-state', () => {
     assertLog([
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
-
-      // A second time for the retry.
-      'render -- step: 3, extra: false',
-      'callback -- step: 3, extra: false',
     ]);
   });
 
