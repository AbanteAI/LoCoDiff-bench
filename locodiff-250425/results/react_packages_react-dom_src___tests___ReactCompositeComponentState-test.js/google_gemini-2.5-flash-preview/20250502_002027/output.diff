--- react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual)@@ -539,6 +539,103 @@     ]);
   });
 
+  if (!require('shared/ReactFeatureFlags').disableModulePatternComponents) {
+    it('should support stateful module pattern components', async () => {
+      function Child() {
+        return {
+          state: {
+            count: 123,
+          },
+          render() {
+            return <div>{`count:${this.state.count}`}</div>;
+          },
+        };
+      }
+
+      const el = document.createElement('div');
+      const root = ReactDOMClient.createRoot(el);
+      expect(() => {
+        ReactDOM.flushSync(() => {
+          root.render(<Child />);
+        });
+      }).toErrorDev(
+        'Warning: The <Child /> component appears to be a function component that returns a class instance. ' +
+          'Change Child to a class that extends React.Component instead. ' +
+          "If you can't use a class try assigning the prototype on the function as a workaround. " +
+          '`Child.prototype = React.Component.prototype`. ' +
+          "Don't use an arrow function since it cannot be called with `new` by React.",
+      );
+
+      expect(el.textContent).toBe('count:123');
+    });
+
+    it('should support getDerivedStateFromProps for module pattern components', async () => {
+      function Child() {
+        return {
+          state: {
+            count: 1,
+          },
+          render() {
+            return <div>{`count:${this.state.count}`}</div>;
+          },
+        };
+      }
+      Child.getDerivedStateFromProps = (props, prevState) => {
+        return {
+          count: prevState.count + props.incrementBy,
+        };
+      };
+
+      const el = document.createElement('div');
+      const root = ReactDOMClient.createRoot(el);
+      await act(() => {
+        root.render(<Child incrementBy={0} />);
+      });
+
+      expect(el.textContent).toBe('count:1');
+      await act(() => {
+        root.render(<Child incrementBy={2} />);
+      });
+      expect(el.textContent).toBe('count:3');
+
+      await act(() => {
+        root.render(<Child incrementBy={1} />);
+      });
+      expect(el.textContent).toBe('count:4');
+    });
+  }
+
+  // @gate !disableLegacyMode
+  it('Legacy mode should support setState in componentWillUnmount (#18851)', () => {
+    let subscription;
+    class A extends React.Component {
+      componentWillUnmount() {
+        subscription();
+      }
+      render() {
+        return 'A';
+      }
+    }
+
+    class B extends React.Component {
+      state = {siblingUnmounted: false};
+      UNSAFE_componentWillMount() {
+        subscription = () => this.setState({siblingUnmounted: true});
+      }
+      render() {
+        return 'B' + (this.state.siblingUnmounted ? ' No Sibling' : '');
+      }
+    }
+
+    const el = document.createElement('div');
+    const root = ReactDOM.createRoot(el);
+    root.render(<A />);
+    expect(el.textContent).toBe('A');
+
+    root.render(<B />);
+    expect(el.textContent).toBe('B No Sibling');
+  });
+
   it('should not support setState in componentWillUnmount', async () => {
     let subscription;
     class A extends React.Component {
@@ -578,34 +675,4 @@         '    in B (at **)',
     ]);
   });
-
-  // @gate !disableLegacyMode
-  it('Legacy mode should support setState in componentWillUnmount (#18851)', () => {
-    let subscription;
-    class A extends React.Component {
-      componentWillUnmount() {
-        subscription();
-      }
-      render() {
-        return 'A';
-      }
-    }
-
-    class B extends React.Component {
-      state = {siblingUnmounted: false};
-      UNSAFE_componentWillMount() {
-        subscription = () => this.setState({siblingUnmounted: true});
-      }
-      render() {
-        return 'B' + (this.state.siblingUnmounted ? ' No Sibling' : '');
-      }
-    }
-
-    const el = document.createElement('div');
-    ReactDOM.render(<A />, el);
-    expect(el.textContent).toBe('A');
-
-    ReactDOM.render(<B />, el);
-    expect(el.textContent).toBe('B No Sibling');
-  });
 });