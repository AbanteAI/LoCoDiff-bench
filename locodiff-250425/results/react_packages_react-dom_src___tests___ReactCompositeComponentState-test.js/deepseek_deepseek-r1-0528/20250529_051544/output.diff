
index c73d0a5b6..a186ef2a2 100644
--- a/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_expectedoutput.txt (expected):tmp/tmpkz9uwmdg_expected.txt	
+++ b/react_packages_react-dom_src___tests___ReactCompositeComponentState-test.js_extracted.txt (actual):tmp/tmpsps596cx_actual.txt	
@@ -300,13 +300,20 @@ describe('ReactCompositeComponent-state', () => {
       root.render(<Parent />);
     });
 
+    assertLog(['parent render one', 'child render one']);
     await act(() => {
-      parent.setState({foo: true});
-      child.setState({bar: true});
+      root.render(<Parent />);
     });
 
-    // When we render changes top-down in a batch, children's componentDidUpdate
-    // happens before the parent.
+    assertLog([
+      'parent render one',
+      'child componentWillReceiveProps one',
+      'child componentWillReceiveProps done one',
+      'child render one',
+      'parent render two',
+      'child render two',
+    ]);
+
     assertLog(['child did update', 'parent did update']);
 
     shouldUpdate = false;
@@ -357,6 +364,7 @@ describe('ReactCompositeComponent-state', () => {
   });
 
   it('should update state when called from child cWRP', async () => {
+    const log = [];
     class Parent extends React.Component {
       state = {value: 'one'};
       render() {
@@ -442,21 +450,21 @@ describe('ReactCompositeComponent-state', () => {
   });
 
   it('should treat assigning to this.state inside cWRP as a replaceState, with a warning', async () => {
+    const ops = [];
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillReceiveProps() {
         this.setState({step: 2}, () => {
           // Tests that earlier setState callbacks are not dropped
-          Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+          ops.push(
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
         // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
-        Scheduler.log(
+        ops.push(
           `render -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
         );
         return null;
@@ -480,36 +488,34 @@ describe('ReactCompositeComponent-state', () => {
         '    in Test (at **)',
     ]);
 
-    assertLog([
+    expect(ops).toEqual([
       'render -- step: 1, extra: true',
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
     ]);
 
     // Check deduplication; (no additional warnings are expected)
-    expect(() => {
-      ReactDOM.flushSync(() => {
-        root.render(<Test />);
-      });
-    }).not.toThrow();
+    ReactDOM.flushSync(() => {
+      root.render(<Test />);
+    });
   });
 
   it('should treat assigning to this.state inside cWM as a replaceState, with a warning', () => {
+    const ops = [];
     class Test extends React.Component {
       state = {step: 1, extra: true};
       UNSAFE_componentWillMount() {
         this.setState({step: 2}, () => {
           // Tests that earlier setState callbacks are not dropped
-          Scheduler.log(
-            `callback -- step: ${this.state.step}, extra: ${!!this.state
-              .extra}`,
+          ops.push(
+            `callback -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
           );
         });
         // Treat like replaceState
         this.state = {step: 3};
       }
       render() {
-        Scheduler.log(
+        ops.push(
           `render -- step: ${this.state.step}, extra: ${!!this.state.extra}`,
         );
         return null;
@@ -529,7 +535,7 @@ describe('ReactCompositeComponent-state', () => {
         '    in Test (at **)',
     ]);
 
-    assertLog([
+    expect(ops).toEqual([
       'render -- step: 3, extra: false',
       'callback -- step: 3, extra: false',
 
