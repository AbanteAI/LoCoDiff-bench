
index a8e64210..c65498a6 100644
--- a/react_packages_react-devtools-shared_src_backendAPI.js_expectedoutput.txt (expected):tmp/tmp5ai7nntw_expected.txt	
+++ b/react_packages_react-devtools-shared_src_backendAPI.js_extracted.txt (actual):tmp/tmpc98wkh8u_actual.txt	
@@ -87,6 +87,27 @@ export function copyInspectedElementPath({
   });
 }
 
+let storeAsGlobalCount = 0;
+
+export function storeAsGlobal({
+  bridge,
+  id,
+  path,
+  rendererID,
+}: {
+  bridge: FrontendBridge,
+  id: number,
+  path: Array<string | number>,
+  rendererID: number,
+}): void {
+  bridge.send('storeAsGlobal', {
+    count: storeAsGlobalCount++,
+    id,
+    path,
+    rendererID,
+  });
+}
+
 export function inspectElement(
   bridge: FrontendBridge,
   forceFullData: boolean,
@@ -101,7 +122,6 @@ export function inspectElement(
     'inspectedElement',
     bridge,
     `Timed out while inspecting element ${id}.`,
-    shouldListenToPauseEvents,
   );
 
   bridge.send('inspectElement', {
@@ -115,27 +135,6 @@ export function inspectElement(
   return promise;
 }
 
-let storeAsGlobalCount = 0;
-
-export function storeAsGlobal({
-  bridge,
-  id,
-  path,
-  rendererID,
-}: {
-  bridge: FrontendBridge,
-  id: number,
-  path: Array<string | number>,
-  rendererID: number,
-}): void {
-  bridge.send('storeAsGlobal', {
-    count: storeAsGlobalCount++,
-    id,
-    path,
-    rendererID,
-  });
-}
-
 const TIMEOUT_DELAY = 10_000;
 
 let requestCounter = 0;
@@ -256,7 +255,6 @@ export function convertInspectedElementBackendToFrontend(
     hasLegacyContext,
     id,
     key,
-    plugins,
     rendererPackageName,
     rendererVersion,
     rootType,
@@ -282,7 +280,7 @@ export function convertInspectedElementBackendToFrontend(
 
 export function hydrateHelper(
   dehydratedData: DehydratedData | null,
-  path: ?InspectedElementPath,
+  path?: Array<string | number>,
 ): Object | null {
   if (dehydratedData !== null) {
     const {cleaned, data, unserializable} = dehydratedData;
