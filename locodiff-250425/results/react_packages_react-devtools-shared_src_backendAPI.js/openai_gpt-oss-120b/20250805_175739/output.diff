
index a8e642100..959f2d6e0 100644
--- a/react_packages_react-devtools-shared_src_backendAPI.js_expectedoutput.txt (expected):tmp/tmpkyzlmhxn_expected.txt	
+++ b/react_packages_react-devtools-shared_src_backendAPI.js_extracted.txt (actual):tmp/tmpcl3yanfb_actual.txt	
@@ -13,10 +13,6 @@ import Store from 'react-devtools-shared/src/devtools/store';
 import TimeoutError from 'react-devtools-shared/src/errors/TimeoutError';
 import ElementPollingCancellationError from 'react-devtools-shared/src/errors/ElementPollingCancellationError';
 
-import type {
-  InspectedElement as InspectedElementBackend,
-  InspectedElementPayload,
-} from 'react-devtools-shared/src/backend/types';
 import type {
   BackendEvents,
   FrontendBridge,
@@ -25,6 +21,10 @@ import type {
   DehydratedData,
   InspectedElement as InspectedElementFrontend,
 } from 'react-devtools-shared/src/frontend/types';
+import type {
+  InspectedElement as InspectedElementBackend,
+  InspectedElementPayload,
+} from 'react-devtools-shared/src/backend/types';
 import type {InspectedElementPath} from 'react-devtools-shared/src/frontend/types';
 
 export function clearErrorsAndWarnings({
@@ -151,11 +151,9 @@ function getPromiseForRequestID<T>(
     const cleanup = () => {
       bridge.removeListener(eventType, onInspectedElement);
       bridge.removeListener('shutdown', onShutdown);
-
       if (shouldListenToPauseEvents) {
         bridge.removeListener('pauseElementPolling', onDisconnect);
       }
-
       clearTimeout(timeoutID);
     };
 
@@ -187,7 +185,6 @@ function getPromiseForRequestID<T>(
 
     bridge.addListener(eventType, onInspectedElement);
     bridge.addListener('shutdown', onShutdown);
-
     if (shouldListenToPauseEvents) {
       bridge.addListener('pauseElementPolling', onDisconnect);
     }
@@ -225,18 +222,18 @@ export function convertInspectedElementBackendToFrontend(
     canViewSource,
     hasLegacyContext,
     id,
+    key,
+    rendererPackageName,
+    rendererVersion,
+    rootType,
+    source,
     type,
     owners,
-    source,
     context,
     hooks,
     plugins,
     props,
-    rendererPackageName,
-    rendererVersion,
-    rootType,
     state,
-    key,
     errors,
     warnings,
     nativeTag,
@@ -256,12 +253,9 @@ export function convertInspectedElementBackendToFrontend(
     hasLegacyContext,
     id,
     key,
-    plugins,
     rendererPackageName,
     rendererVersion,
     rootType,
-    // Previous backend implementations (<= 5.0.1) have a different interface for Source, with fileName.
-    // This gates the source features for only compatible backends: >= 5.0.2
     source: source && source.sourceURL ? source : null,
     type,
     owners:
@@ -270,6 +264,7 @@ export function convertInspectedElementBackendToFrontend(
         : owners.map(backendToFrontendSerializedElementMapper),
     context: hydrateHelper(context),
     hooks: hydrateHelper(hooks),
+    plugins,
     props: hydrateHelper(props),
     state: hydrateHelper(state),
     errors,
@@ -290,8 +285,6 @@ export function hydrateHelper(
     if (path) {
       const {length} = path;
       if (length > 0) {
-        // Hydration helper requires full paths, but inspection dehydrates with relative paths.
-        // In that event it's important that we adjust the "cleaned" paths to match.
         return hydrate(
           data,
           cleaned.map(cleanedPath => cleanedPath.slice(length)),
