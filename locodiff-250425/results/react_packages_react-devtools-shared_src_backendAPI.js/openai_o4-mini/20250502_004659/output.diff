
index a8e64210..0dc640fd 100644
--- a/react_packages_react-devtools-shared_src_backendAPI.js_expectedoutput.txt (expected):tmp/tmp7za68gng_expected.txt	
+++ b/react_packages_react-devtools-shared_src_backendAPI.js_extracted.txt (actual):tmp/tmpr5ur6j9b_actual.txt	
@@ -151,11 +151,9 @@ function getPromiseForRequestID<T>(
     const cleanup = () => {
       bridge.removeListener(eventType, onInspectedElement);
       bridge.removeListener('shutdown', onShutdown);
-
       if (shouldListenToPauseEvents) {
         bridge.removeListener('pauseElementPolling', onDisconnect);
       }
-
       clearTimeout(timeoutID);
     };
 
@@ -187,7 +185,6 @@ function getPromiseForRequestID<T>(
 
     bridge.addListener(eventType, onInspectedElement);
     bridge.addListener('shutdown', onShutdown);
-
     if (shouldListenToPauseEvents) {
       bridge.addListener('pauseElementPolling', onDisconnect);
     }
@@ -202,7 +199,7 @@ export function cloneInspectedElementWithPath(
   value: Object,
 ): InspectedElementFrontend {
   const hydratedValue = hydrateHelper(value, path);
-  const clonedInspectedElement = {...inspectedElement};
+  const clonedInspectedElement = { ...inspectedElement };
 
   fillInPath(clonedInspectedElement, value, path, hydratedValue);
 
@@ -225,9 +222,9 @@ export function convertInspectedElementBackendToFrontend(
     canViewSource,
     hasLegacyContext,
     id,
+    source,
     type,
     owners,
-    source,
     context,
     hooks,
     plugins,
@@ -256,7 +253,7 @@ export function convertInspectedElementBackendToFrontend(
     hasLegacyContext,
     id,
     key,
-    plugins,
+    nativeTag,
     rendererPackageName,
     rendererVersion,
     rootType,
@@ -270,11 +267,11 @@ export function convertInspectedElementBackendToFrontend(
         : owners.map(backendToFrontendSerializedElementMapper),
     context: hydrateHelper(context),
     hooks: hydrateHelper(hooks),
+    plugins,
     props: hydrateHelper(props),
     state: hydrateHelper(state),
     errors,
     warnings,
-    nativeTag,
   };
 
   return inspectedElement;
@@ -285,10 +282,10 @@ export function hydrateHelper(
   path: ?InspectedElementPath,
 ): Object | null {
   if (dehydratedData !== null) {
-    const {cleaned, data, unserializable} = dehydratedData;
+    const { cleaned, data, unserializable } = dehydratedData;
 
     if (path) {
-      const {length} = path;
+      const { length } = path;
       if (length > 0) {
         // Hydration helper requires full paths, but inspection dehydrates with relative paths.
         // In that event it's important that we adjust the "cleaned" paths to match.
