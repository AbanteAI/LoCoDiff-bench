
index ba169d3f..6bb9feab 100644
--- a/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected):tmp/tmpnbsa1foq_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual):tmp/tmph51aw27p_actual.txt	
@@ -66,10 +66,6 @@ function unwindWork(
   workInProgress: Fiber,
   renderLanes: Lanes,
 ): Fiber | null {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
   popTreeContext(workInProgress);
   switch (workInProgress.tag) {
     case ClassComponent: {
@@ -107,26 +103,21 @@ function unwindWork(
         (flags & ShouldCapture) !== NoFlags &&
         (flags & DidCapture) === NoFlags
       ) {
-        // There was an error during render that wasn't captured by a suspense
-        // boundary. Do a second pass on the root to unmount the children.
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
         return workInProgress;
       }
-      // We unwound to the root without completing it. Exit.
       return null;
     }
     case HostHoistable:
     case HostSingleton:
     case HostComponent: {
-      // TODO: popHydrationState
       popHostContext(workInProgress);
       return null;
     }
-    case ActivityComponent: {
-      const activityState: null | ActivityState = workInProgress.memoizedState;
-      if (activityState !== null) {
-        popSuspenseHandler(workInProgress);
-
+    case SuspenseComponent: {
+      popSuspenseHandler(workInProgress);
+      const suspenseState: null | SuspenseState = workInProgress.memoizedState;
+      if (suspenseState !== null && suspenseState.dehydrated !== null) {
         if (workInProgress.alternate === null) {
           throw new Error(
             'Threw in newly mounted dehydrated component. This is likely a bug in ' +
@@ -140,7 +131,6 @@ function unwindWork(
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -151,10 +141,11 @@ function unwindWork(
       }
       return null;
     }
-    case SuspenseComponent: {
-      popSuspenseHandler(workInProgress);
-      const suspenseState: null | SuspenseState = workInProgress.memoizedState;
-      if (suspenseState !== null && suspenseState.dehydrated !== null) {
+    case ActivityComponent: {
+      const activityState: null | ActivityState = workInProgress.memoizedState;
+      if (activityState !== null) {
+        popSuspenseHandler(workInProgress);
+
         if (workInProgress.alternate === null) {
           throw new Error(
             'Threw in newly mounted dehydrated component. This is likely a bug in ' +
@@ -168,7 +159,6 @@ function unwindWork(
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -181,14 +171,12 @@ function unwindWork(
     }
     case SuspenseListComponent: {
       popSuspenseListContext(workInProgress);
-      // SuspenseList doesn't actually catch anything. It should've been
-      // caught by a nested boundary. If not, it should bubble through.
       return null;
     }
     case HostPortal:
       popHostContainer(workInProgress);
       return null;
-    case ContextProvider:
+    case ContextProvider: {
       let context: ReactContext<any>;
       if (enableRenderableContext) {
         context = workInProgress.type;
@@ -197,6 +185,7 @@ function unwindWork(
       }
       popProvider(context, workInProgress);
       return null;
+    }
     case OffscreenComponent:
     case LegacyHiddenComponent: {
       popSuspenseHandler(workInProgress);
@@ -205,7 +194,6 @@ function unwindWork(
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -216,17 +204,19 @@ function unwindWork(
       }
       return null;
     }
-    case CacheComponent:
+    case CacheComponent: {
       const cache: Cache = workInProgress.memoizedState.cache;
       popCacheProvider(workInProgress, cache);
       return null;
-    case TracingMarkerComponent:
+    }
+    case TracingMarkerComponent: {
       if (enableTransitionTracing) {
         if (workInProgress.stateNode !== null) {
           popMarkerInstance(workInProgress);
         }
       }
       return null;
+    }
     default:
       return null;
   }
@@ -237,10 +227,6 @@ function unwindInterruptedWork(
   interruptedWork: Fiber,
   renderLanes: Lanes,
 ) {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
   popTreeContext(interruptedWork);
   switch (interruptedWork.tag) {
     case ClassComponent: {
@@ -273,19 +259,18 @@ function unwindInterruptedWork(
     case HostPortal:
       popHostContainer(interruptedWork);
       break;
-    case ActivityComponent: {
+    case SuspenseComponent:
+      popSuspenseHandler(interruptedWork);
+      break;
+    case ActivityComponent:
       if (interruptedWork.memoizedState !== null) {
         popSuspenseHandler(interruptedWork);
       }
       break;
-    }
-    case SuspenseComponent:
-      popSuspenseHandler(interruptedWork);
-      break;
     case SuspenseListComponent:
       popSuspenseListContext(interruptedWork);
       break;
-    case ContextProvider:
+    case ContextProvider: {
       let context: ReactContext<any>;
       if (enableRenderableContext) {
         context = interruptedWork.type;
@@ -294,16 +279,18 @@ function unwindInterruptedWork(
       }
       popProvider(context, interruptedWork);
       break;
+    }
     case OffscreenComponent:
     case LegacyHiddenComponent:
       popSuspenseHandler(interruptedWork);
       popHiddenContext(interruptedWork);
       popTransition(interruptedWork, current);
       break;
-    case CacheComponent:
+    case CacheComponent: {
       const cache: Cache = interruptedWork.memoizedState.cache;
       popCacheProvider(interruptedWork, cache);
       break;
+    }
     case TracingMarkerComponent:
       if (enableTransitionTracing) {
         const instance: TracingMarkerInstance | null =
