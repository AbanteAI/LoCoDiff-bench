
index ba169d3f..6e5ab9e7 100644
--- a/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected):tmp/tmp3vftrexj_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual):tmp/tmpigaqu4sv_actual.txt	
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) Meta Platforms, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -15,6 +15,9 @@ import type {SuspenseState} from './ReactFiberSuspenseComponent';
 import type {Cache} from './ReactFiberCacheComponent';
 import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
 
+import {
+  resetWorkInProgressVersions as resetMutableSourceWorkInProgressVersions,
+} from './ReactMutableSource';
 import {
   ClassComponent,
   HostRoot,
@@ -102,6 +105,7 @@ function unwindWork(
       popRootTransition(workInProgress, root, renderLanes);
       popHostContainer(workInProgress);
       popTopLevelLegacyContextObject(workInProgress);
+      resetMutableSourceWorkInProgressVersions();
       const flags = workInProgress.flags;
       if (
         (flags & ShouldCapture) !== NoFlags &&
@@ -140,7 +144,6 @@ function unwindWork(
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -216,10 +219,11 @@ function unwindWork(
       }
       return null;
     }
-    case CacheComponent:
+    case CacheComponent: {
       const cache: Cache = workInProgress.memoizedState.cache;
       popCacheProvider(workInProgress, cache);
       return null;
+    }
     case TracingMarkerComponent:
       if (enableTransitionTracing) {
         if (workInProgress.stateNode !== null) {
@@ -237,10 +241,6 @@ function unwindInterruptedWork(
   interruptedWork: Fiber,
   renderLanes: Lanes,
 ) {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
   popTreeContext(interruptedWork);
   switch (interruptedWork.tag) {
     case ClassComponent: {
@@ -262,6 +262,7 @@ function unwindInterruptedWork(
       popRootTransition(interruptedWork, root, renderLanes);
       popHostContainer(interruptedWork);
       popTopLevelLegacyContextObject(interruptedWork);
+      resetMutableSourceWorkInProgressVersions();
       break;
     }
     case HostHoistable:
@@ -273,12 +274,11 @@ function unwindInterruptedWork(
     case HostPortal:
       popHostContainer(interruptedWork);
       break;
-    case ActivityComponent: {
+    case ActivityComponent:
       if (interruptedWork.memoizedState !== null) {
         popSuspenseHandler(interruptedWork);
       }
       break;
-    }
     case SuspenseComponent:
       popSuspenseHandler(interruptedWork);
       break;
@@ -300,10 +300,11 @@ function unwindInterruptedWork(
       popHiddenContext(interruptedWork);
       popTransition(interruptedWork, current);
       break;
-    case CacheComponent:
+    case CacheComponent: {
       const cache: Cache = interruptedWork.memoizedState.cache;
       popCacheProvider(interruptedWork, cache);
       break;
+    }
     case TracingMarkerComponent:
       if (enableTransitionTracing) {
         const instance: TracingMarkerInstance | null =
