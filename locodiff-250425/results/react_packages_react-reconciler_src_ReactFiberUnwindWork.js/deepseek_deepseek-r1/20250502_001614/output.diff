--- react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual)@@ -66,10 +66,6 @@   workInProgress: Fiber,
   renderLanes: Lanes,
 ): Fiber | null {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
   popTreeContext(workInProgress);
   switch (workInProgress.tag) {
     case ClassComponent: {
@@ -107,18 +103,14 @@         (flags & ShouldCapture) !== NoFlags &&
         (flags & DidCapture) === NoFlags
       ) {
-        // There was an error during render that wasn't captured by a suspense
-        // boundary. Do a second pass on the root to unmount the children.
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        return workInProgress;
-      }
-      // We unwound to the root without completing it. Exit.
+        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
+        return workInProgress;
+      }
       return null;
     }
     case HostHoistable:
     case HostSingleton:
     case HostComponent: {
-      // TODO: popHydrationState
       popHostContext(workInProgress);
       return null;
     }
@@ -140,7 +132,6 @@       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -161,14 +152,12 @@               'React. Please file an issue.',
           );
         }
-
         resetHydrationState();
       }
 
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -181,8 +170,6 @@     }
     case SuspenseListComponent: {
       popSuspenseListContext(workInProgress);
-      // SuspenseList doesn't actually catch anything. It should've been
-      // caught by a nested boundary. If not, it should bubble through.
       return null;
     }
     case HostPortal:
@@ -205,7 +192,6 @@       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
         if (
           enableProfilerTimer &&
           (workInProgress.mode & ProfileMode) !== NoMode
@@ -237,10 +223,6 @@   interruptedWork: Fiber,
   renderLanes: Lanes,
 ) {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
   popTreeContext(interruptedWork);
   switch (interruptedWork.tag) {
     case ClassComponent: {
