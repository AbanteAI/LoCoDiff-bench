--- react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual)@@ -16,9 +16,36 @@ import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
 
 import {
+  popHostContainer,
+  popHostContext,
+} from './ReactFiberHostContext';
+import {
+  popSuspenseListContext,
+  popSuspenseHandler,
+} from './ReactFiberSuspenseContext';
+import {popHiddenContext} from './ReactFiberHiddenContext';
+import {resetHydrationState} from './ReactFiberHydrationContext';
+import {
+  isContextProvider as isLegacyContextProvider,
+  popContext as popLegacyContext,
+  popTopLevelContextObject as popTopLevelLegacyContextObject,
+} from './ReactFiberContext';
+import {popProvider} from './ReactFiberNewContext';
+import {popCacheProvider} from './ReactFiberCacheComponent';
+import {transferActualDuration} from './ReactProfilerTimer';
+import {popTreeContext} from './ReactFiberTreeContext';
+import {
+  popRootTransition,
+  popTransition,
+} from './ReactFiberTransition';
+import {
+  popMarkerInstance,
+  popRootMarkerInstance,
+} from './ReactFiberTracingMarkerComponent';
+
+import {
   ClassComponent,
   HostRoot,
-  HostComponent,
   HostHoistable,
   HostSingleton,
   HostPortal,
@@ -38,28 +65,6 @@   enableTransitionTracing,
   enableRenderableContext,
 } from 'shared/ReactFeatureFlags';
-
-import {popHostContainer, popHostContext} from './ReactFiberHostContext';
-import {
-  popSuspenseListContext,
-  popSuspenseHandler,
-} from './ReactFiberSuspenseContext';
-import {popHiddenContext} from './ReactFiberHiddenContext';
-import {resetHydrationState} from './ReactFiberHydrationContext';
-import {
-  isContextProvider as isLegacyContextProvider,
-  popContext as popLegacyContext,
-  popTopLevelContextObject as popTopLevelLegacyContextObject,
-} from './ReactFiberContext';
-import {popProvider} from './ReactFiberNewContext';
-import {popCacheProvider} from './ReactFiberCacheComponent';
-import {transferActualDuration} from './ReactProfilerTimer';
-import {popTreeContext} from './ReactFiberTreeContext';
-import {popRootTransition, popTransition} from './ReactFiberTransition';
-import {
-  popMarkerInstance,
-  popRootMarkerInstance,
-} from './ReactFiberTracingMarkerComponent';
 
 function unwindWork(
   current: Fiber | null,
@@ -122,35 +127,6 @@       popHostContext(workInProgress);
       return null;
     }
-    case ActivityComponent: {
-      const activityState: null | ActivityState = workInProgress.memoizedState;
-      if (activityState !== null) {
-        popSuspenseHandler(workInProgress);
-
-        if (workInProgress.alternate === null) {
-          throw new Error(
-            'Threw in newly mounted dehydrated component. This is likely a bug in ' +
-              'React. Please file an issue.',
-          );
-        }
-
-        resetHydrationState();
-      }
-
-      const flags = workInProgress.flags;
-      if (flags & ShouldCapture) {
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
-        if (
-          enableProfilerTimer &&
-          (workInProgress.mode & ProfileMode) !== NoMode
-        ) {
-          transferActualDuration(workInProgress);
-        }
-        return workInProgress;
-      }
-      return null;
-    }
     case SuspenseComponent: {
       popSuspenseHandler(workInProgress);
       const suspenseState: null | SuspenseState = workInProgress.memoizedState;
@@ -158,13 +134,11 @@         if (workInProgress.alternate === null) {
           throw new Error(
             'Threw in newly mounted dehydrated component. This is likely a bug in ' +
-              'React. Please file an issue.',
+            'React. Please file an issue.',
           );
         }
-
         resetHydrationState();
       }
-
       const flags = workInProgress.flags;
       if (flags & ShouldCapture) {
         workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
@@ -227,6 +201,32 @@         }
       }
       return null;
+    case ActivityComponent: {
+      const activityState: null | ActivityState = workInProgress.memoizedState;
+      if (activityState !== null) {
+        popSuspenseHandler(workInProgress);
+        if (workInProgress.alternate === null) {
+          throw new Error(
+            'Threw in newly mounted dehydrated component. This is likely a bug in ' +
+            'React. Please file an issue.',
+          );
+        }
+        resetHydrationState();
+      }
+      const flags = workInProgress.flags;
+      if (flags & ShouldCapture) {
+        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
+        // Captured a suspense effect. Re-render the boundary.
+        if (
+          enableProfilerTimer &&
+          (workInProgress.mode & ProfileMode) !== NoMode
+        ) {
+          transferActualDuration(workInProgress);
+        }
+        return workInProgress;
+      }
+      return null;
+    }
     default:
       return null;
   }
@@ -254,11 +254,9 @@       const root: FiberRoot = interruptedWork.stateNode;
       const cache: Cache = interruptedWork.memoizedState.cache;
       popCacheProvider(interruptedWork, cache);
-
       if (enableTransitionTracing) {
         popRootMarkerInstance(interruptedWork);
       }
-
       popRootTransition(interruptedWork, root, renderLanes);
       popHostContainer(interruptedWork);
       popTopLevelLegacyContextObject(interruptedWork);
@@ -273,12 +271,6 @@     case HostPortal:
       popHostContainer(interruptedWork);
       break;
-    case ActivityComponent: {
-      if (interruptedWork.memoizedState !== null) {
-        popSuspenseHandler(interruptedWork);
-      }
-      break;
-    }
     case SuspenseComponent:
       popSuspenseHandler(interruptedWork);
       break;
@@ -286,13 +278,13 @@       popSuspenseListContext(interruptedWork);
       break;
     case ContextProvider:
-      let context: ReactContext<any>;
+      let contextInterrupt: ReactContext<any>;
       if (enableRenderableContext) {
-        context = interruptedWork.type;
+        contextInterrupt = interruptedWork.type;
       } else {
-        context = interruptedWork.type._context;
-      }
-      popProvider(context, interruptedWork);
+        contextInterrupt = interruptedWork.type._context;
+      }
+      popProvider(contextInterrupt, interruptedWork);
       break;
     case OffscreenComponent:
     case LegacyHiddenComponent:
@@ -301,8 +293,8 @@       popTransition(interruptedWork, current);
       break;
     case CacheComponent:
-      const cache: Cache = interruptedWork.memoizedState.cache;
-      popCacheProvider(interruptedWork, cache);
+      const cacheInterrupt: Cache = interruptedWork.memoizedState.cache;
+      popCacheProvider(interruptedWork, cacheInterrupt);
       break;
     case TracingMarkerComponent:
       if (enableTransitionTracing) {
@@ -313,6 +305,12 @@         }
       }
       break;
+    case ActivityComponent: {
+      if (interruptedWork.memoizedState !== null) {
+        popSuspenseHandler(interruptedWork);
+      }
+      break;
+    }
     default:
       break;
   }
