
index ba169d3f..119d7bf2 100644
--- a/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected):tmp/tmpwtrk_p5o_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual):tmp/tmpaquuhirj_actual.txt	
@@ -40,10 +40,7 @@ import {
 } from 'shared/ReactFeatureFlags';
 
 import {popHostContainer, popHostContext} from './ReactFiberHostContext';
-import {
-  popSuspenseListContext,
-  popSuspenseHandler,
-} from './ReactFiberSuspenseContext';
+import {popSuspenseContext} from './ReactFiberSuspenseContext';
 import {popHiddenContext} from './ReactFiberHiddenContext';
 import {resetHydrationState} from './ReactFiberHydrationContext';
 import {
@@ -60,6 +57,10 @@ import {
   popMarkerInstance,
   popRootMarkerInstance,
 } from './ReactFiberTracingMarkerComponent';
+import {
+  popSuspenseListContext,
+  popSuspenseHandler,
+} from './ReactFiberSuspenseContext';
 
 function unwindWork(
   current: Fiber | null,
@@ -180,7 +181,7 @@ function unwindWork(
       return null;
     }
     case SuspenseListComponent: {
-      popSuspenseListContext(workInProgress);
+      popSuspenseContext(workInProgress);
       // SuspenseList doesn't actually catch anything. It should've been
       // caught by a nested boundary. If not, it should bubble through.
       return null;
@@ -283,7 +284,7 @@ function unwindInterruptedWork(
       popSuspenseHandler(interruptedWork);
       break;
     case SuspenseListComponent:
-      popSuspenseListContext(interruptedWork);
+      popSuspenseContext(interruptedWork);
       break;
     case ContextProvider:
       let context: ReactContext<any>;
