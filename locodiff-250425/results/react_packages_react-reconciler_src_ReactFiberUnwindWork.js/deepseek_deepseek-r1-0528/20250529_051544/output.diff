
index ba169d3f5..b979fd22a 100644
--- a/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_expectedoutput.txt (expected):tmp/tmp4u61rsqm_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberUnwindWork.js_extracted.txt (actual):tmp/tmpm7ehphee_actual.txt	
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) 2013-present, Facebook, Inc.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -7,315 +7,415 @@
  * @flow
  */
 
-import type {ReactContext} from 'shared/ReactTypes';
-import type {Fiber, FiberRoot} from './ReactInternalTypes';
-import type {Lanes} from './ReactFiberLane';
-import type {ActivityState} from './ReactFiberActivityComponent';
-import type {SuspenseState} from './ReactFiberSuspenseComponent';
-import type {Cache} from './ReactFiberCacheComponent';
-import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
+import type {HostConfig} from 'react-reconciler';
+import type {Fiber} from './ReactFiber';
+import type {ExpirationTime} from './ReactFiberExpirationTime';
+import type {HostContext} from './ReactFiberHostContext';
+import type {LegacyContext} from './ReactFiberContext';
+import type {NewContext} from './ReactFiberNewContext';
+import type {CapturedValue} from './ReactCapturedValue';
+import type {ProfilerTimer} from './ReactProfilerTimer';
+import type {Update} from './ReactUpdateQueue';
+import type {Thenable} from './ReactFiberScheduler';
+
+import {createCapturedValue} from './ReactCapturedValue';
+import {
+  enqueueCapturedUpdate,
+  createUpdate,
+  enqueueUpdate,
+  CaptureUpdate,
+} from './ReactUpdateQueue';
+import {logError} from './ReactFiberCommitWork';
 
 import {
   ClassComponent,
   HostRoot,
   HostComponent,
-  HostHoistable,
-  HostSingleton,
   HostPortal,
   ContextProvider,
-  ActivityComponent,
-  SuspenseComponent,
-  SuspenseListComponent,
-  OffscreenComponent,
-  LegacyHiddenComponent,
-  CacheComponent,
-  TracingMarkerComponent,
-} from './ReactWorkTags';
-import {DidCapture, NoFlags, ShouldCapture} from './ReactFiberFlags';
-import {NoMode, ProfileMode} from './ReactTypeOfMode';
+  Profiler,
+  PlaceholderComponent,
+} from 'shared/ReactTypeOfWork';
 import {
+  DidCapture,
+  Incomplete,
+  NoEffect,
+  ShouldCapture,
+  Update as UpdateEffect,
+} from 'shared/ReactTypeOfSideEffect';
+import {
+  enableGetDerivedStateFromCatch,
   enableProfilerTimer,
-  enableTransitionTracing,
-  enableRenderableContext,
+  enableSuspense,
 } from 'shared/ReactFeatureFlags';
 
-import {popHostContainer, popHostContext} from './ReactFiberHostContext';
-import {
-  popSuspenseListContext,
-  popSuspenseHandler,
-} from './ReactFiberSuspenseContext';
-import {popHiddenContext} from './ReactFiberHiddenContext';
-import {resetHydrationState} from './ReactFiberHydrationContext';
-import {
-  isContextProvider as isLegacyContextProvider,
-  popContext as popLegacyContext,
-  popTopLevelContextObject as popTopLevelLegacyContextObject,
-} from './ReactFiberContext';
-import {popProvider} from './ReactFiberNewContext';
-import {popCacheProvider} from './ReactFiberCacheComponent';
-import {transferActualDuration} from './ReactProfilerTimer';
-import {popTreeContext} from './ReactFiberTreeContext';
-import {popRootTransition, popTransition} from './ReactFiberTransition';
-import {
-  popMarkerInstance,
-  popRootMarkerInstance,
-} from './ReactFiberTracingMarkerComponent';
+import {Sync, expirationTimeToMs} from './ReactFiberExpirationTime';
 
-function unwindWork(
-  current: Fiber | null,
-  workInProgress: Fiber,
-  renderLanes: Lanes,
-): Fiber | null {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
-  popTreeContext(workInProgress);
-  switch (workInProgress.tag) {
-    case ClassComponent: {
-      const Component = workInProgress.type;
-      if (isLegacyContextProvider(Component)) {
-        popLegacyContext(workInProgress);
-      }
-      const flags = workInProgress.flags;
-      if (flags & ShouldCapture) {
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
+export default function<T, P, I, TI, HI, PI, C, CC, CX, PL>(
+  config: HostConfig<T, P, I, TI, HI, PI, C, CC, CX, PL>,
+  hostContext: HostContext<C, CX>,
+  legacyContext: LegacyContext,
+  newContext: NewContext,
+  scheduleWork: (fiber: Fiber, expirationTime: ExpirationTime) => void,
+  computeExpirationForFiber: (
+    startTime: ExpirationTime,
+    fiber: Fiber,
+  ) => ExpirationTime,
+  recalculateCurrentTime: () => ExpirationTime,
+  markLegacyErrorBoundaryAsFailed: (instance: mixed) => void,
+  isAlreadyFailedLegacyErrorBoundary: (instance: mixed) => boolean,
+  onUncaughtError: (error: mixed) => void,
+  profilerTimer: ProfilerTimer,
+  suspendRoot: (
+    root: FiberRoot,
+    thenable: Thenable,
+    timeoutMs: number,
+    suspendedTime: ExpirationTime,
+  ) => void,
+  retrySuspendedRoot: (root: FiberRoot, suspendedTime: ExpirationTime) => void,
+) {
+  const {popHostContainer, popHostContext} = hostContext;
+  const {
+    popContextProvider: popLegacyContextProvider,
+    popTopLevelContextObject: popTopLevelLegacyContextObject,
+  } = legacyContext;
+  const {popProvider} = newContext;
+  const {
+    resumeActualRenderTimerIfPaused,
+    recordElapsedActualRenderTime,
+  } = profilerTimer;
+
+  function createRootErrorUpdate(
+    fiber: Fiber,
+    errorInfo: CapturedValue<mixed>,
+    expirationTime: ExpirationTime,
+  ): Update<null> {
+    const update = createUpdate(expirationTime);
+    // Unmount the root by rendering null.
+    update.tag = CaptureUpdate;
+    // Caution: React DevTools currently depends on this property
+    // being called "element".
+    update.payload = {element: null};
+    const error = errorInfo.value;
+    update.callback = () => {
+      onUncaughtError(error);
+      logError(fiber, errorInfo);
+    };
+    return update;
+  }
+
+  function createClassErrorUpdate(
+    fiber: Fiber,
+    errorInfo: CapturedValue<mixed>,
+    expirationTime: ExpirationTime,
+  ): Update<mixed> {
+    const update = createUpdate(expirationTime);
+    update.tag = CaptureUpdate;
+    const getDerivedStateFromCatch = fiber.type.getDerivedStateFromCatch;
+    if (
+      enableGetDerivedStateFromCatch &&
+      typeof getDerivedStateFromCatch === 'function'
+    ) {
+      const error = errorInfo.value;
+      update.payload = () => {
+        return getDerivedStateFromCatch(error);
+      };
+    }
+
+    const inst = fiber.stateNode;
+    if (inst !== null && typeof inst.componentDidCatch === 'function') {
+      update.callback = function callback() {
         if (
-          enableProfilerTimer &&
-          (workInProgress.mode & ProfileMode) !== NoMode
+          !enableGetDerivedStateFromCatch ||
+          getDerivedStateFromCatch !== 'function'
         ) {
-          transferActualDuration(workInProgress);
+          // To preserve the preexisting retry behavior of error boundaries,
+          // we keep track of which ones already failed during this batch.
+          // This gets reset before we yield back to the browser.
+          // TODO: Warn in strict mode if getDerivedStateFromCatch is
+          // not defined.
+          markLegacyErrorBoundaryAsFailed(this);
         }
-        return workInProgress;
-      }
-      return null;
+        const error = errorInfo.value;
+        const stack = errorInfo.stack;
+        logError(fiber, errorInfo);
+        this.componentDidCatch(error, {
+          componentStack: stack !== null ? stack : '',
+        });
+      };
     }
-    case HostRoot: {
-      const root: FiberRoot = workInProgress.stateNode;
-      const cache: Cache = workInProgress.memoizedState.cache;
-      popCacheProvider(workInProgress, cache);
+    return update;
+  }
 
-      if (enableTransitionTracing) {
-        popRootMarkerInstance(workInProgress);
-      }
+  function schedulePing(finishedWork) {
+    // Once the promise resolves, we should try rendering the non-
+    // placeholder state again.
+    const currentTime = recalculateCurrentTime();
+    const expirationTime = computeExpirationForFiber(currentTime, finishedWork);
+    const recoveryUpdate = createUpdate(expirationTime);
+    enqueueUpdate(finishedWork, recoveryUpdate, expirationTime);
+    scheduleWork(finishedWork, expirationTime);
+  }
 
-      popRootTransition(workInProgress, root, renderLanes);
-      popHostContainer(workInProgress);
-      popTopLevelLegacyContextObject(workInProgress);
-      const flags = workInProgress.flags;
-      if (
-        (flags & ShouldCapture) !== NoFlags &&
-        (flags & DidCapture) === NoFlags
-      ) {
-        // There was an error during render that wasn't captured by a suspense
-        // boundary. Do a second pass on the root to unmount the children.
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        return workInProgress;
-      }
-      // We unwound to the root without completing it. Exit.
-      return null;
-    }
-    case HostHoistable:
-    case HostSingleton:
-    case HostComponent: {
-      // TODO: popHydrationState
-      popHostContext(workInProgress);
-      return null;
-    }
-    case ActivityComponent: {
-      const activityState: null | ActivityState = workInProgress.memoizedState;
-      if (activityState !== null) {
-        popSuspenseHandler(workInProgress);
+  function throwException(
+    root: FiberRoot,
+    returnFiber: Fiber,
+    sourceFiber: Fiber,
+    value: mixed,
+    renderExpirationTime: ExpirationTime,
+    currentTimeMs: number,
+  ) {
+    // The source fiber did not complete.
+    sourceFiber.effectTag |= Incomplete;
+    // Its effect list is no longer valid.
+    sourceFiber.firstEffect = sourceFiber.lastEffect = null;
 
-        if (workInProgress.alternate === null) {
-          throw new Error(
-            'Threw in newly mounted dehydrated component. This is likely a bug in ' +
-              'React. Please file an issue.',
-          );
-        }
+    if (
+      enableSuspense &&
+      value !== null &&
+      typeof value === 'object' &&
+      typeof value.then === 'function'
+    ) {
+      // This is a thenable.
+      const thenable: Thenable = (value: any);
 
-        resetHydrationState();
+      const expirationTimeMs = expirationTimeToMs(renderExpirationTime);
+      const startTimeMs = expirationTimeMs - 5000;
+      let elapsedMs = currentTimeMs - startTimeMs;
+      if (elapsedMs < 0) {
+        elapsedMs = 0;
       }
+      const remainingTimeMs = expirationTimeMs - currentTimeMs;
 
-      const flags = workInProgress.flags;
-      if (flags & ShouldCapture) {
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
-        if (
-          enableProfilerTimer &&
-          (workInProgress.mode & ProfileMode) !== NoMode
-        ) {
-          transferActualDuration(workInProgress);
+      // Find the earliest timeout of all the timeouts in the ancestor path.
+      // TODO: Alternatively, we could store the earliest timeout on the context
+      // stack, rather than searching on every suspend.
+      let workInProgress = returnFiber;
+      let earliestTimeoutMs = -1;
+      searchForEarliestTimeout: do {
+        if (workInProgress.tag === PlaceholderComponent) {
+          const current = work极Progress.alternate;
+          if (current !== null && current.memoizedState === true) {
+            // A parent Placeholder already committed in a placeholder state. We
+            // need to handle this promise immediately. In other words, we
+            // should never suspend inside a tree that already expired.
+            earliestTimeoutMs = 0;
+            break searchForEarliestTimeout;
+          }
+          let timeoutPropMs = workInProgress.pendingProps.ms;
+          if (typeof timeoutPropMs === 'number') {
+            if (timeoutPropMs <= 0) {
+              earliestTimeoutMs = 0;
+              break searchForEarliestTimeout;
+            } else if (
+              earliestTimeoutMs === -1 ||
+              timeoutPropMs < earliestTimeoutMs
+            ) {
+              earliestTimeoutMs = timeoutPropMs;
+            }
+          } else if (earliestTimeoutMs === -1) {
+            earliestTimeoutMs = remaining极Ms;
+          }
         }
-        return workInProgress;
+        workInProgress = workInProgress.return;
+      } while (workInProgress !== null);
+
+      // Compute the remaining time until the timeout.
+      const msUntilTimeout = earliestTimeoutMs - elapsedMs;
+
+      if (renderExpirationTime === Sync || msUntilTimeout > 0) {
+        // There's still time remaining.
+        suspendRoot(root, thenable, msUntilTimeout, renderExpirationTime);
+        const onResolveOrReject = () => {
+          retrySuspendedRoot(root, renderExpirationTime);
+        };
+        thenable.then(onResolveOrReject, onResolveOrReject);
+        return;
+      } else {
+        // No time remaining. Need to fallback to placeholder.
+        // Find the nearest placeholder that can be retried.
+        workInProgress = returnFiber;
+        do {
+          switch (workInProgress.tag) {
+            case HostRoot: {
+              // The root expired, but no fallback was provided. Throw a
+              // helpful error.
+              const message =
+                renderExpirationTime === Sync
+                  ? 'A synchronous update was suspended, but no fallback UI ' +
+                    'was provided.'
+                  : 'An update was suspended for longer than the timeout, ' +
+                    'but no fallback UI was provided.';
+              value = new Error(message);
+              break;
+            }
+            case PlaceholderComponent: {
+              if ((workInProgress.effectTag & DidCapture) === NoEffect) {
+                workInProgress.effectTag |= ShouldCapture;
+                const onResolveOrReject = schedulePing.bind(
+                  null,
+                  workInProgress,
+                );
+                thenable.then(onResolveOrReject, onResolveOrReject);
+                return;
+              }
+              // Already captured during this render. Continue to the next
+              // Placeholder ancestor.
+              break;
+            }
+          }
+          workInProgress = workInProgress.return;
+        } while (workInProgress !== null);
       }
-      return null;
     }
-    case SuspenseComponent: {
-      popSuspenseHandler(workInProgress);
-      const suspenseState: null | SuspenseState = workInProgress.memoizedState;
-      if (suspenseState !== null && suspenseState.dehydrated !== null) {
-        if (workInProgress.alternate === null) {
-          throw new Error(
-            'Threw in newly mounted dehydrated component. This is likely a bug in ' +
-              'React. Please file an issue.',
+
+    // We didn't find a boundary that could handle this type of exception. Start
+    // over and traverse parent path again, this time treating the exception
+    // as an error.
+    value = createCapturedValue(value, sourceFiber);
+    let workInProgress = returnFiber;
+    do {
+      switch (workInProgress.tag) {
+        case HostRoot: {
+          const errorInfo = value;
+          workInProgress.effectTag |= ShouldCapture;
+          const update = createRootErrorUpdate(
+            workInProgress,
+            errorInfo,
+            renderExpirationTime,
           );
+          enqueueCapturedUpdate(workInProgress, update, renderExpirationTime);
+          return;
         }
-
-        resetHydrationState();
+        case ClassComponent:
+          // Capture and retry
+          const errorInfo = value;
+          const ctor = workInProgress.type;
+          const instance = workInProgress.stateNode;
+          if (
+            (workInProgress.effectTag & DidCapture) === NoEffect &&
+            ((typeof ctor.getDerivedStateFromCatch === 'function' &&
+              enableGet极StateFromCatch) ||
+              (instance !== null &&
+                typeof instance.componentDidCatch === 'function' &&
+                !isAlreadyFailedLegacyErrorBoundary(instance)))
+          ) {
+            workInProgress.effectTag |= ShouldCapture;
+            const update = createClassErrorUpdate(
+              workInProgress,
+              errorInfo,
+              renderExpirationTime,
+            );
+            enqueueCapturedUpdate(workInProgress, update, renderExpirationTime);
+            return;
+          }
+          break;
+        default:
+          break;
       }
+      workInProgress = workInProgress.return;
+    } while (workInProgress !== null);
+  }
 
-      const flags = workInProgress.flags;
-      if (flags & ShouldCapture) {
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
-        if (
-          enableProfilerTimer &&
-          (workInProgress.mode & ProfileMode) !== NoMode
-        ) {
-          transferActualDuration(workInProgress);
-        }
-        return workInProgress;
+  function unwindWork(
+    workInProgress: Fiber,
+    renderExpirationTime: ExpirationTime,
+  ) {
+    if (enableProfilerTimer) {
+      if (workInProgress.mode & ProfileMode) {
+        recordElapsedActualRenderTime(workInProgress);
       }
-      return null;
-    }
-    case SuspenseListComponent: {
-      popSuspenseListContext(workInProgress);
-      // SuspenseList doesn't actually catch anything. It should've been
-      // caught by a nested boundary. If not, it should bubble through.
-      return null;
     }
-    case HostPortal:
-      popHostContainer(workInProgress);
-      return null;
-    case ContextProvider:
-      let context: ReactContext<any>;
-      if (enableRenderableContext) {
-        context = workInProgress.type;
-      } else {
-        context = workInProgress.type._context;
+
+    switch (workInProgress.tag) {
+      case ClassComponent: {
+        popLegacyContextProvider(workInProgress);
+        const effectTag = workInProgress.effectTag;
+        if (effectTag & ShouldCapture) {
+          workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;
+          return workInProgress;
+        }
+        return null;
       }
-      popProvider(context, workInProgress);
-      return null;
-    case OffscreenComponent:
-    case LegacyHiddenComponent: {
-      popSuspenseHandler(workInProgress);
-      popHiddenContext(workInProgress);
-      popTransition(workInProgress, current);
-      const flags = workInProgress.flags;
-      if (flags & ShouldCapture) {
-        workInProgress.flags = (flags & ~ShouldCapture) | DidCapture;
-        // Captured a suspense effect. Re-render the boundary.
-        if (
-          enableProfilerTimer &&
-          (workInProgress.mode & ProfileMode) !== NoMode
-        ) {
-          transferActualDuration(workInProgress);
+      case HostRoot: {
+        popHostContainer(workInProgress);
+        popTopLevelLegacyContextObject(workInProgress);
+        const effectTag = workInProgress.effectTag;
+        if (effectTag & ShouldCapture) {
+          workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;
+          return workInProgress;
         }
-        return workInProgress;
+        return null;
       }
-      return null;
-    }
-    case CacheComponent:
-      const cache: Cache = workInProgress.memoizedState.cache;
-      popCacheProvider(workInProgress, cache);
-      return null;
-    case TracingMarkerComponent:
-      if (enableTransitionTracing) {
-        if (workInProgress.stateNode !== null) {
-          popMarkerInstance(workInProgress);
+      case HostComponent: {
+        popHostContext(workInProgress);
+        return null;
+      }
+      case PlaceholderComponent: {
+        const effectTag = workInProgress.effectTag;
+        if (effectTag & ShouldCapture) {
+          workInProgress.effectTag = (effectTag & ~ShouldCapture) | DidCapture;
+          return workInProgress;
         }
+        return null;
       }
-      return null;
-    default:
-      return null;
+      case HostPortal:
+        popHostContainer(workInProgress);
+        return null;
+      case ContextProvider:
+        popProvider(workInProgress);
+        return null;
+      default:
+        return null;
+    }
   }
-}
 
-function unwindInterruptedWork(
-  current: Fiber | null,
-  interruptedWork: Fiber,
-  renderLanes: Lanes,
-) {
-  // Note: This intentionally doesn't check if we're hydrating because comparing
-  // to the current tree provider fiber is just as fast and less error-prone.
-  // Ideally we would have a special version of the work loop only
-  // for hydration.
-  popTreeContext(interruptedWork);
-  switch (interruptedWork.tag) {
-    case ClassComponent: {
-      const childContextTypes = interruptedWork.type.childContextTypes;
-      if (childContextTypes !== null && childContextTypes !== undefined) {
-        popLegacyContext(interruptedWork);
+  function unwindInterruptedWork(interruptedWork: Fiber) {
+    if (enableProfilerTimer) {
+      if (interruptedWork.mode & ProfileMode) {
+        // Resume in case we're picking up on work that was paused.
+        resumeActualRenderTimerIfPaused();
+        recordElapsedActualRenderTime(interruptedWork);
       }
-      break;
     }
-    case HostRoot: {
-      const root: FiberRoot = interruptedWork.stateNode;
-      const cache: Cache = interruptedWork.memoizedState.cache;
-      popCacheProvider(interruptedWork, cache);
 
-      if (enableTransitionTracing) {
-        popRootMarkerInstance(interruptedWork);
+    switch (interruptedWork.tag) {
+      case ClassComponent: {
+        popLegacyContextProvider(interruptedWork);
+        break;
       }
-
-      popRootTransition(interruptedWork, root, renderLanes);
-      popHostContainer(interruptedWork);
-      popTopLevelLegacyContextObject(interruptedWork);
-      break;
-    }
-    case HostHoistable:
-    case HostSingleton:
-    case HostComponent: {
-      popHostContext(interruptedWork);
-      break;
-    }
-    case HostPortal:
-      popHostContainer(interruptedWork);
-      break;
-    case ActivityComponent: {
-      if (interruptedWork.memoizedState !== null) {
-        popSuspenseHandler(interruptedWork);
+      case HostRoot: {
+        popHostContainer(interruptedWork);
+        popTopLevelLegacyContextObject(interruptedWork);
+        break;
       }
-      break;
-    }
-    case SuspenseComponent:
-      popSuspenseHandler(interruptedWork);
-      break;
-    case SuspenseListComponent:
-      popSuspenseListContext(interruptedWork);
-      break;
-    case ContextProvider:
-      let context: ReactContext<any>;
-      if (enableRenderableContext) {
-        context = interruptedWork.type;
-      } else {
-        context = interruptedWork.type._context;
+      case HostComponent: {
+        popHostContext(interruptedWork);
+        break;
       }
-      popProvider(context, interruptedWork);
-      break;
-    case OffscreenComponent:
-    case LegacyHiddenComponent:
-      popSuspenseHandler(interruptedWork);
-      popHiddenContext(interruptedWork);
-      popTransition(interruptedWork, current);
-      break;
-    case CacheComponent:
-      const cache: Cache = interruptedWork.memoizedState.cache;
-      popCacheProvider(interruptedWork, cache);
-      break;
-    case TracingMarkerComponent:
-      if (enableTransitionTracing) {
-        const instance: TracingMarkerInstance | null =
-          interruptedWork.stateNode;
-        if (instance !== null) {
-          popMarkerInstance(interruptedWork);
+      case HostPortal:
+        popHostContainer(interruptedWork);
+        break;
+      case ContextProvider:
+        popProvider(interruptedWork);
+        break;
+      case Profiler:
+        if (enableProfilerTimer) {
+          // Resume in case we're picking up on work that was paused.
+          resumeActualRenderTimerIfPaused();
+          recordElapsedActualRenderTime(interruptedWork);
         }
-      }
-      break;
-    default:
-      break;
+        break;
+      default:
+        break;
+    }
   }
-}
 
-export {unwindWork, unwindInterruptedWork};
\ No newline at end of file
+  return {
+    throwException,
+    unwindWork,
+    unwindInterruptedWork,
+    createRootErrorUpdate,
+    createClassErrorUpdate,
+  };
+}
\ No newline at end of file
