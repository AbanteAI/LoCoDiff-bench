
index 70dd22b46..248ef8a19 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpo7twk_ou_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmp75c8w1k__actual.txt	
@@ -3,15 +3,14 @@ use std::collections::HashMap;
 use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use ahash::AHasher;
 use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
@@ -25,18 +24,18 @@ use super::{
     get_vector_storage_path, new_segment_path, open_segment_db, open_vector_storage,
 };
 use crate::common::error_logging::LogError;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::entry::entry_point::SegmentEntry;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
-use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
+use crate::id_tracker::{for_each_unique_point, IdTracker, IdTrackerEnum};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
 use crate::index::{PayloadIndex, VectorIndexEnum};
-use crate::payload_storage::PayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
+use crate::payload_storage::PayloadStorage;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
     VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
@@ -439,6 +438,9 @@ impl SegmentBuilder {
             }
         }
 
+        self.id_tracker.mapping_flusher()()?;
+        self.id_tracker.versions_flusher()()?;
+
         Ok(true)
     }
 
@@ -463,7 +465,7 @@ impl SegmentBuilder {
 
             let appendable_flag = segment_config.is_appendable();
 
-            payload_storage.flusher()()?;
+            payload_storage.flusher()?;
             let payload_storage_arc = Arc::new(AtomicRefCell::new(payload_storage));
 
             let id_tracker = match id_tracker {
@@ -482,9 +484,29 @@ impl SegmentBuilder {
             };
 
             id_tracker.mapping_flusher()()?;
-            id_tracker.versions_flusher()()?;
+            id_tracker.versions_flusher()?;
             let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
 
+            let payload_index_path = get_payload_index_path(temp_dir.path());
+
+            let mut payload_index = StructPayloadIndex::open(
+                payload_storage_arc.clone(),
+                id_tracker_arc.clone(),
+                vector_storages_arc.clone(),
+                &payload_index_path,
+                appendable_flag,
+            )?;
+            for (field, payload_schema) in indexed_fields {
+                payload_index.set_indexed(&field, payload_schema, hw_counter)?;
+                check_process_stopped(stopped)?;
+            }
+
+            payload_index.flusher()()?;
+            let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
+
+            // Arc permit to share it with each vector store
+            let permit = Arc::new(permit);
+
             let mut quantized_vectors = Self::update_quantization(
                 &segment_config,
                 &vector_data,
@@ -503,7 +525,7 @@ impl SegmentBuilder {
                     )));
                 };
 
-                vector_info.vector_storage.flusher()()?;
+                vector_info.vector_storage.flusher()?;
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
@@ -519,7 +541,7 @@ impl SegmentBuilder {
                     )));
                 };
 
-                vector_info.vector_storage.flusher()()?;
+                vector_info.vector_storage.flusher()?;
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
@@ -555,45 +577,33 @@ impl SegmentBuilder {
             #[cfg(not(feature = "gpu"))]
             let gpu_device = None;
 
+            // If GPU is enabled, release all CPU cores except one.
+            if let Some(_gpu_device) = &gpu_device {
+                if permit.num_cpus > 1 {
+                    permit.release_cpu_count(permit.num_cpus - 1);
+                }
+            }
+
             // Arc permit to share it with each vector store
             let permit = Arc::new(permit);
 
             for (vector_name, vector_config) in &segment_config.vector_data {
-                let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
-                let quantized_vectors =
-                    Arc::new(AtomicRefCell::new(quantized_vectors.remove(vector_name)));
+                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
+                let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
+                let quantized_vectors = quantized_vectors.remove(vector_name);
+                let quantized_vectors_arc = Arc::new(AtomicRefCell::new(quantized_vectors));
 
-                let index = build_vector_index(
+                create_vector_index(
                     vector_config,
-                    VectorIndexOpenArgs {
-                        path: &get_vector_index_path(temp_dir.path(), vector_name),
-                        id_tracker: id_tracker_arc.clone(),
-                        vector_storage: vector_storage.clone(),
-                        payload_index: payload_index_arc.clone(),
-                        quantized_vectors: quantized_vectors.clone(),
-                    },
-                    VectorIndexBuildArgs {
-                        permit: permit.clone(),
-                        old_indices: &old_indices.remove(vector_name).unwrap(),
-                        gpu_device: gpu_device.as_ref(),
-                        stopped,
-                        feature_flags: feature_flags(),
-                    },
+                    &vector_index_path,
+                    id_tracker_arc.clone(),
+                    vector_storage_arc,
+                    payload_index_arc.clone(),
+                    quantized_vectors_arc,
+                    Some(permit.clone()),
+                    gpu_device.as_ref(),
+                    stopped,
                 )?;
-
-                if vector_storage.borrow().is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
-                }
-
-                if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
-                    quantized_vectors.clear_cache()?;
-                }
-
-                // Index if always loaded on-disk=true from build function
-                // So we may clear unconditionally
-                index.clear_cache()?;
             }
 
             for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
@@ -601,7 +611,7 @@ impl SegmentBuilder {
 
                 let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
 
-                let index = create_sparse_vector_index(SparseVectorIndexOpenArgs {
+                create_sparse_vector_index(SparseVectorIndexOpenArgs {
                     config: sparse_vector_config.index,
                     id_tracker: id_tracker_arc.clone(),
                     vector_storage: vector_storage_arc.clone(),
@@ -610,46 +620,19 @@ impl SegmentBuilder {
                     stopped,
                     tick_progress: || (),
                 })?;
-
-                if sparse_vector_config.storage_type.is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage_arc.borrow().clear_cache()?;
-                }
-
-                if sparse_vector_config.index.index_type.is_on_disk() {
-                    index.clear_cache()?;
-                }
             }
 
-            if segment_config.payload_storage_type.is_on_disk() {
-                // If payload storage is expected to be on-disk, we need to clear cache
-                // to avoid cache pollution
-                payload_storage_arc.borrow().clear_cache()?;
-            }
-
-            // Clear cache for payload index to avoid cache pollution
-            payload_index_arc.borrow().clear_cache_if_on_disk()?;
-
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
             // Finalize the newly created segment by saving config and version
             Segment::save_state(
                 &SegmentState {
                     version: Some(version),
                     config: segment_config,
                 },
-                temp_dir.path(),
+                &temp_dir.path(),
             )?;
 
             // After version is saved, segment can be loaded on restart
-            SegmentVersion::save(temp_dir.path())?;
+            SegmentVersion::save(&temp_dir.path())?;
             // All temp data is evicted from RAM
             (temp_dir, destination_path)
         };
