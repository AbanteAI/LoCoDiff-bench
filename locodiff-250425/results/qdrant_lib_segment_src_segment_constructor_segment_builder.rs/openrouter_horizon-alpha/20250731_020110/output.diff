
index 70dd22b46..bc8a3e6eb 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmp64y4bhan_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpqbq3qmi__actual.txt	
@@ -11,11 +11,9 @@ use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
-use itertools::Itertools;
 use tempfile::TempDir;
 use uuid::Uuid;
 
@@ -125,7 +123,6 @@ impl SegmentBuilder {
                 &sparse_vector_config.storage_type,
                 &stopped,
             )?;
-
             vector_data.insert(
                 vector_name.to_owned(),
                 VectorData {
@@ -277,7 +274,7 @@ impl SegmentBuilder {
         }
 
         let mut points_to_insert = Vec::new();
-        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
+        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect::<Vec<_>>();
         for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
             points_to_insert.push(PointData {
                 external_id: CompactExtendedPointId::from(item.external_id),
@@ -427,7 +424,7 @@ impl SegmentBuilder {
                     self.payload_storage.set(
                         new_internal_id,
                         &other_payload,
-                        &HardwareCounterCell::disposable(),
+                        &hw_counter,
                     )?;
                 }
             }
@@ -543,18 +540,6 @@ impl SegmentBuilder {
             payload_index.flusher()()?;
             let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
 
-            // Try to lock GPU device.
-            #[cfg(feature = "gpu")]
-            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
-            #[cfg(feature = "gpu")]
-            let gpu_device = gpu_devices_manager
-                .as_ref()
-                .map(|devices_manager| devices_manager.lock_device(stopped))
-                .transpose()?
-                .flatten();
-            #[cfg(not(feature = "gpu"))]
-            let gpu_device = None;
-
             // Arc permit to share it with each vector store
             let permit = Arc::new(permit);
 
@@ -575,7 +560,7 @@ impl SegmentBuilder {
                     VectorIndexBuildArgs {
                         permit: permit.clone(),
                         old_indices: &old_indices.remove(vector_name).unwrap(),
-                        gpu_device: gpu_device.as_ref(),
+                        gpu_device: None,
                         stopped,
                         feature_flags: feature_flags(),
                     },
@@ -631,14 +616,6 @@ impl SegmentBuilder {
             // Clear cache for payload index to avoid cache pollution
             payload_index_arc.borrow().clear_cache_if_on_disk()?;
 
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
             // Finalize the newly created segment by saving config and version
             Segment::save_state(
                 &SegmentState {
