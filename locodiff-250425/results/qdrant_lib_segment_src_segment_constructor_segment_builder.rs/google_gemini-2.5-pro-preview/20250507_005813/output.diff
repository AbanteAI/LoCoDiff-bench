
index 70dd22b4..391f6dc2 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmp5896j6mi_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmp48z3v6pn_actual.txt	
@@ -204,16 +204,6 @@ impl SegmentBuilder {
                 FieldIndex::FloatIndex(index) => {
                     if let Some(numbers) = index.get_values(internal_id) {
                         for number in numbers {
-                            // Bit-level conversion of f64 to u64 preserves ordering
-                            // (for positive numbers)
-                            //
-                            // 0.001 -> 4562254508917369340
-                            // 0.01  -> 4576918229304087675
-                            // 0.05  -> 4587366580439587226
-                            // 0.1   -> 4591870180066957722
-                            // 1     -> 4607182418800017408
-                            // 2     -> 4611686018427387904
-                            // 10    -> 4621819117588971520
                             ordering = ordering.wrapping_add(number.to_bits());
                         }
                     }
@@ -314,13 +304,13 @@ impl SegmentBuilder {
         let src_segment_max_version = segments.iter().map(|i| i.version()).max().unwrap();
         self.version = cmp::max(self.version, src_segment_max_version);
 
-        let vector_storages: Vec<_> = segments.iter().map(|i| &i.vector_data).collect();
+        let vector_data_map: Vec<_> = segments.iter().map(|i| &i.vector_data).collect();
 
         let mut new_internal_range = None;
         for (vector_name, vector_data) in &mut self.vector_data {
             check_process_stopped(stopped)?;
 
-            let other_vector_storages = vector_storages
+            let other_vector_storages_with_indices = vector_data_map
                 .iter()
                 .map(|i| {
                     let other_vector_data = i.get(vector_name).ok_or_else(|| {
@@ -340,7 +330,7 @@ impl SegmentBuilder {
 
             let mut iter = points_to_insert.iter().map(|point_data| {
                 let other_vector_storage =
-                    &other_vector_storages[point_data.segment_index.get() as usize];
+                    &other_vector_storages_with_indices[point_data.segment_index.get() as usize];
                 let vec = other_vector_storage.get_vector(point_data.internal_id);
                 let vector_deleted = other_vector_storage.is_deleted_vector(point_data.internal_id);
                 (vec, vector_deleted)
@@ -427,7 +417,7 @@ impl SegmentBuilder {
                     self.payload_storage.set(
                         new_internal_id,
                         &other_payload,
-                        &HardwareCounterCell::disposable(),
+                        &hw_counter,
                     )?;
                 }
             }
@@ -669,7 +659,7 @@ impl SegmentBuilder {
 
     fn update_quantization(
         segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
+        vector_data_map: &HashMap<VectorNameBuf, VectorData>,
         temp_path: &Path,
         permit: &ResourcePermit,
         stopped: &AtomicBool,
@@ -678,7 +668,7 @@ impl SegmentBuilder {
 
         let mut quantized_vectors_map = HashMap::new();
 
-        for (vector_name, vector_info) in vector_storages {
+        for (vector_name, vector_info) in vector_data_map {
             let Some(vector_config) = config.vector_data.get(vector_name) else {
                 continue;
             };
