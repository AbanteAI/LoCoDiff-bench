--- qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual)@@ -262,20 +262,6 @@             return Ok(true);
         }
 
-        struct PointData {
-            external_id: CompactExtendedPointId,
-            /// [`CompactExtendedPointId`] is 17 bytes, we reduce
-            /// `segment_index` to 3 bytes to avoid paddings and align nicely.
-            segment_index: U24,
-            internal_id: PointOffsetType,
-            version: u64,
-            ordering: u64,
-        }
-
-        if segments.len() > U24::MAX as usize {
-            return Err(OperationError::service_error("Too many segments to update"));
-        }
-
         let mut points_to_insert = Vec::new();
         let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
         for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
@@ -748,4 +734,14 @@                 err
             ))
         })
+}
+
+struct PointData {
+    external_id: CompactExtendedPointId,
+    /// [`CompactExtendedPointId`] is 17 bytes, we reduce
+    /// `segment_index` to 3 bytes to avoid paddings and align nicely.
+    segment_index: U24,
+    internal_id: PointOffsetType,
+    version: u64,
+    ordering: u64,
 }