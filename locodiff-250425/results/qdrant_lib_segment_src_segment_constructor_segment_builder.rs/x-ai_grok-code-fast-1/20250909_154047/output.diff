
index 70dd22b46..d6f68eec9 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmp4291hgzu_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpcjlxgkrd_actual.txt	
@@ -1,17 +1,16 @@
-use std::cmp;
+use core::cmp;
 use std::collections::HashMap;
 use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use ahash::AHasher;
 use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
@@ -23,6 +22,7 @@ use super::{
     create_mutable_id_tracker, create_payload_storage, create_sparse_vector_index,
     create_sparse_vector_storage, get_payload_index_path, get_vector_index_path,
     get_vector_storage_path, new_segment_path, open_segment_db, open_vector_storage,
+    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
 };
 use crate::common::error_logging::LogError;
 use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
@@ -30,6 +30,7 @@ use crate::entry::entry_point::SegmentEntry;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
+use crate::id_tracker::in_memory_id_tracker::*;
 use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
@@ -38,9 +39,6 @@ use crate::index::{PayloadIndex, VectorIndexEnum};
 use crate::payload_storage::PayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::segment::{Segment, SegmentVersion};
-use crate::segment_constructor::{
-    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
-};
 use crate::types::{
     CompactExtendedPointId, ExtendedPointId, PayloadFieldSchema, PayloadKeyType, SegmentConfig,
     SegmentState, SeqNumberType, VectorNameBuf,
@@ -178,7 +176,7 @@ impl SegmentBuilder {
                 FieldIndex::IntMapIndex(index) => {
                     if let Some(numbers) = index.get_values(internal_id) {
                         for number in numbers {
-                            ordering = ordering.wrapping_add(*number as u64);
+                            ordering = ordering.wrapping_add(number as u64);
                         }
                     }
                     break;
@@ -196,7 +194,7 @@ impl SegmentBuilder {
                 FieldIndex::IntIndex(index) => {
                     if let Some(numbers) = index.get_values(internal_id) {
                         for number in numbers {
-                            ordering = ordering.wrapping_add(number as u64);
+                            ordering = ordering.wrapping_add(*number as u64);
                         }
                     }
                     break;
@@ -227,6 +225,10 @@ impl SegmentBuilder {
                     }
                     break;
                 }
+                FieldIndex::GeoIndex(_) => {}
+                FieldIndex::FullTextIndex(_) => {}
+                FieldIndex::BoolIndex(_) => {}
+                FieldIndex::NullIndex(_) => {}
                 FieldIndex::UuidMapIndex(index) => {
                     if let Some(ids) = index.get_values(internal_id) {
                         uuid_hash(&mut ordering, ids.copied());
@@ -239,10 +241,6 @@ impl SegmentBuilder {
                     }
                     break;
                 }
-                FieldIndex::GeoIndex(_) => {}
-                FieldIndex::FullTextIndex(_) => {}
-                FieldIndex::BoolIndex(_) => {}
-                FieldIndex::NullIndex(_) => {}
             }
         }
         ordering
@@ -319,14 +317,13 @@ impl SegmentBuilder {
         let mut new_internal_range = None;
         for (vector_name, vector_data) in &mut self.vector_data {
             check_process_stopped(stopped)?;
-
             let other_vector_storages = vector_storages
                 .iter()
                 .map(|i| {
                     let other_vector_data = i.get(vector_name).ok_or_else(|| {
                         OperationError::service_error(format!(
                             "Cannot update from other segment because it is \
-                             missing vector name {vector_name}"
+                                   missing vector name {vector_name}"
                         ))
                     })?;
 
@@ -353,7 +350,7 @@ impl SegmentBuilder {
                     if new_internal_range != &internal_range {
                         return Err(OperationError::service_error(format!(
                             "Internal ids range mismatch between self segment vectors and other segment vectors\n\
-                                vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
+                                                        vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
                         )));
                     }
                 }
@@ -361,391 +358,4 @@ impl SegmentBuilder {
             }
         }
 
-        let hw_counter = HardwareCounterCell::disposable(); // Disposable counter for internal operations.
-
-        if let Some(new_internal_range) = new_internal_range {
-            let internal_id_iter = new_internal_range.zip(points_to_insert.iter());
-
-            for (new_internal_id, point_data) in internal_id_iter {
-                check_process_stopped(stopped)?;
-
-                let old_internal_id = point_data.internal_id;
-
-                let other_payload = payloads[point_data.segment_index.get() as usize]
-                    .get_payload(old_internal_id, &hw_counter)?; // Internal operation, no measurement needed!
-
-                match self
-                    .id_tracker
-                    .internal_id(ExtendedPointId::from(point_data.external_id))
-                {
-                    Some(existing_internal_id) => {
-                        debug_assert!(
-                            false,
-                            "This code should not be reachable, cause points were resolved with `merged_points`"
-                        );
-
-                        let existing_external_version = self
-                            .id_tracker
-                            .internal_version(existing_internal_id)
-                            .unwrap();
-
-                        let remove_id = if existing_external_version < point_data.version {
-                            // Other version is the newest, remove the existing one and replace
-                            self.id_tracker
-                                .drop(ExtendedPointId::from(point_data.external_id))?;
-                            self.id_tracker.set_link(
-                                ExtendedPointId::from(point_data.external_id),
-                                new_internal_id,
-                            )?;
-                            self.id_tracker
-                                .set_internal_version(new_internal_id, point_data.version)?;
-                            self.payload_storage
-                                .clear(existing_internal_id, &hw_counter)?;
-
-                            existing_internal_id
-                        } else {
-                            // Old version is still good, do not move anything else
-                            // Mark newly added vector as removed
-                            new_internal_id
-                        };
-                        for vector_data in self.vector_data.values_mut() {
-                            vector_data.vector_storage.delete_vector(remove_id)?;
-                        }
-                    }
-                    None => {
-                        self.id_tracker.set_link(
-                            ExtendedPointId::from(point_data.external_id),
-                            new_internal_id,
-                        )?;
-                        self.id_tracker
-                            .set_internal_version(new_internal_id, point_data.version)?;
-                    }
-                }
-
-                // Propagate payload to new segment
-                if !other_payload.is_empty() {
-                    self.payload_storage.set(
-                        new_internal_id,
-                        &other_payload,
-                        &HardwareCounterCell::disposable(),
-                    )?;
-                }
-            }
-        }
-
-        for payload in payloads {
-            for (field, payload_schema) in payload.indexed_fields() {
-                self.indexed_fields.insert(field, payload_schema);
-            }
-        }
-
-        Ok(true)
-    }
-
-    pub fn build(
-        self,
-        permit: ResourcePermit,
-        stopped: &AtomicBool,
-        hw_counter: &HardwareCounterCell,
-    ) -> Result<Segment, OperationError> {
-        let (temp_dir, destination_path) = {
-            let SegmentBuilder {
-                version,
-                id_tracker,
-                payload_storage,
-                mut vector_data,
-                segment_config,
-                destination_path,
-                temp_dir,
-                indexed_fields,
-                defragment_keys: _,
-            } = self;
-
-            let appendable_flag = segment_config.is_appendable();
-
-            payload_storage.flusher()()?;
-            let payload_storage_arc = Arc::new(AtomicRefCell::new(payload_storage));
-
-            let id_tracker = match id_tracker {
-                IdTrackerEnum::InMemoryIdTracker(in_memory_id_tracker) => {
-                    let (versions, mappings) = in_memory_id_tracker.into_internal();
-                    let compressed_mapping = CompressedPointMappings::from_mappings(mappings);
-                    let immutable_id_tracker =
-                        ImmutableIdTracker::new(temp_dir.path(), &versions, compressed_mapping)?;
-                    IdTrackerEnum::ImmutableIdTracker(immutable_id_tracker)
-                }
-                IdTrackerEnum::MutableIdTracker(_) => id_tracker,
-                IdTrackerEnum::ImmutableIdTracker(_) => {
-                    unreachable!("ImmutableIdTracker should not be used for building segment")
-                }
-                IdTrackerEnum::RocksDbIdTracker(_) => id_tracker,
-            };
-
-            id_tracker.mapping_flusher()()?;
-            id_tracker.versions_flusher()()?;
-            let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
-
-            let mut quantized_vectors = Self::update_quantization(
-                &segment_config,
-                &vector_data,
-                temp_dir.path(),
-                &permit,
-                stopped,
-            )?;
-
-            let mut vector_storages_arc = HashMap::new();
-            let mut old_indices = HashMap::new();
-
-            for vector_name in segment_config.vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                old_indices.insert(vector_name, vector_info.old_indices);
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
-            }
-
-            for vector_name in segment_config.sparse_vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on sparse segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
-            }
-
-            let payload_index_path = get_payload_index_path(temp_dir.path());
-
-            let mut payload_index = StructPayloadIndex::open(
-                payload_storage_arc.clone(),
-                id_tracker_arc.clone(),
-                vector_storages_arc.clone(),
-                &payload_index_path,
-                appendable_flag,
-            )?;
-            for (field, payload_schema) in indexed_fields {
-                payload_index.set_indexed(&field, payload_schema, hw_counter)?;
-                check_process_stopped(stopped)?;
-            }
-
-            payload_index.flusher()()?;
-            let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
-
-            // Try to lock GPU device.
-            #[cfg(feature = "gpu")]
-            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
-            #[cfg(feature = "gpu")]
-            let gpu_device = gpu_devices_manager
-                .as_ref()
-                .map(|devices_manager| devices_manager.lock_device(stopped))
-                .transpose()?
-                .flatten();
-            #[cfg(not(feature = "gpu"))]
-            let gpu_device = None;
-
-            // Arc permit to share it with each vector store
-            let permit = Arc::new(permit);
-
-            for (vector_name, vector_config) in &segment_config.vector_data {
-                let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
-                let quantized_vectors =
-                    Arc::new(AtomicRefCell::new(quantized_vectors.remove(vector_name)));
-
-                let index = build_vector_index(
-                    vector_config,
-                    VectorIndexOpenArgs {
-                        path: &get_vector_index_path(temp_dir.path(), vector_name),
-                        id_tracker: id_tracker_arc.clone(),
-                        vector_storage: vector_storage.clone(),
-                        payload_index: payload_index_arc.clone(),
-                        quantized_vectors: quantized_vectors.clone(),
-                    },
-                    VectorIndexBuildArgs {
-                        permit: permit.clone(),
-                        old_indices: &old_indices.remove(vector_name).unwrap(),
-                        gpu_device: gpu_device.as_ref(),
-                        stopped,
-                        feature_flags: feature_flags(),
-                    },
-                )?;
-
-                if vector_storage.borrow().is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
-                }
-
-                if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
-                    quantized_vectors.clear_cache()?;
-                }
-
-                // Index if always loaded on-disk=true from build function
-                // So we may clear unconditionally
-                index.clear_cache()?;
-            }
-
-            for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
-                let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
-
-                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
-
-                let index = create_sparse_vector_index(SparseVectorIndexOpenArgs {
-                    config: sparse_vector_config.index,
-                    id_tracker: id_tracker_arc.clone(),
-                    vector_storage: vector_storage_arc.clone(),
-                    payload_index: payload_index_arc.clone(),
-                    path: &vector_index_path,
-                    stopped,
-                    tick_progress: || (),
-                })?;
-
-                if sparse_vector_config.storage_type.is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage_arc.borrow().clear_cache()?;
-                }
-
-                if sparse_vector_config.index.index_type.is_on_disk() {
-                    index.clear_cache()?;
-                }
-            }
-
-            if segment_config.payload_storage_type.is_on_disk() {
-                // If payload storage is expected to be on-disk, we need to clear cache
-                // to avoid cache pollution
-                payload_storage_arc.borrow().clear_cache()?;
-            }
-
-            // Clear cache for payload index to avoid cache pollution
-            payload_index_arc.borrow().clear_cache_if_on_disk()?;
-
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
-            // Finalize the newly created segment by saving config and version
-            Segment::save_state(
-                &SegmentState {
-                    version: Some(version),
-                    config: segment_config,
-                },
-                temp_dir.path(),
-            )?;
-
-            // After version is saved, segment can be loaded on restart
-            SegmentVersion::save(temp_dir.path())?;
-            // All temp data is evicted from RAM
-            (temp_dir, destination_path)
-        };
-
-        // Move fully constructed segment into collection directory and load back to RAM
-        std::fs::rename(temp_dir.into_path(), &destination_path)
-            .describe("Moving segment data after optimization")?;
-
-        let loaded_segment = load_segment(&destination_path, stopped)?.ok_or_else(|| {
-            OperationError::service_error(format!(
-                "Segment loading error: {}",
-                destination_path.display()
-            ))
-        })?;
-        Ok(loaded_segment)
-    }
-
-    fn update_quantization(
-        segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
-        temp_path: &Path,
-        permit: &ResourcePermit,
-        stopped: &AtomicBool,
-    ) -> OperationResult<HashMap<VectorNameBuf, QuantizedVectors>> {
-        let config = segment_config.clone();
-
-        let mut quantized_vectors_map = HashMap::new();
-
-        for (vector_name, vector_info) in vector_storages {
-            let Some(vector_config) = config.vector_data.get(vector_name) else {
-                continue;
-            };
-
-            let is_appendable = vector_config.is_appendable();
-
-            // Don't build quantization for appendable vectors
-            if is_appendable {
-                continue;
-            }
-
-            let max_threads = permit.num_cpus as usize;
-
-            if let Some(quantization) = config.quantization_config(vector_name) {
-                let segment_path = temp_path;
-
-                check_process_stopped(stopped)?;
-
-                let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
-
-                let quantized_vectors = QuantizedVectors::create(
-                    &vector_info.vector_storage,
-                    quantization,
-                    &vector_storage_path,
-                    max_threads,
-                    stopped,
-                )?;
-
-                quantized_vectors_map.insert(vector_name.to_owned(), quantized_vectors);
-            }
-        }
-        Ok(quantized_vectors_map)
-    }
-}
-
-fn uuid_hash<I>(hash: &mut u64, ids: I)
-where
-    I: Iterator<Item = u128>,
-{
-    for id in ids {
-        let uuid = Uuid::from_u128(id);
-
-        // Not all Uuid versions hold timestamp data. The most common version, v4 for example is completely
-        // random and can't be sorted. To still allow defragmentation, we assume that usually the same
-        // version gets used for a payload key and implement an alternative sorting criteria, that just
-        // takes the Uuids bytes to group equal Uuids together.
-        if let Some(timestamp) = uuid.get_timestamp() {
-            *hash = hash.wrapping_add(timestamp.to_gregorian().0);
-        } else {
-            // First part of u128
-            *hash = hash.wrapping_add((id >> 64) as u64);
-
-            // Second part of u128
-            *hash = hash.wrapping_add(id as u64);
-        }
-    }
-}
-
-fn create_temp_dir(parent_path: &Path) -> Result<TempDir, OperationError> {
-    // Ensure parent path exists
-    std::fs::create_dir_all(parent_path)
-        .and_then(|_| TempDir::with_prefix_in("segment_builder_", parent_path))
-        .map_err(|err| {
-            OperationError::service_error(format!(
-                "Could not create temp directory in `{}`: {}",
-                parent_path.display(),
-                err
-            ))
-        })
-}
\ No newline at end of file
+        let hw_counter = HardwareCounterCell
\ No newline at end of file
