
index 70dd22b4..dd81e3c3 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpru0qheua_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpbwmxqpbv_actual.txt	
@@ -11,7 +11,6 @@ use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
@@ -235,7 +234,7 @@ impl SegmentBuilder {
                 }
                 FieldIndex::UuidIndex(index) => {
                     if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids);
+                        uuid_hash(&mut ordering, ids.copied());
                     }
                     break;
                 }
@@ -353,7 +352,7 @@ impl SegmentBuilder {
                     if new_internal_range != &internal_range {
                         return Err(OperationError::service_error(format!(
                             "Internal ids range mismatch between self segment vectors and other segment vectors\n\
-                                vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
+                            vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
                         )));
                     }
                 }
@@ -427,7 +426,7 @@ impl SegmentBuilder {
                     self.payload_storage.set(
                         new_internal_id,
                         &other_payload,
-                        &HardwareCounterCell::disposable(),
+                        &hw_counter,
                     )?;
                 }
             }
@@ -439,6 +438,9 @@ impl SegmentBuilder {
             }
         }
 
+        self.id_tracker.mapping_flusher()()?;
+        self.id_tracker.versions_flusher()?;
+
         Ok(true)
     }
 
@@ -503,7 +505,7 @@ impl SegmentBuilder {
                     )));
                 };
 
-                vector_info.vector_storage.flusher()()?;
+                vector_info.vector_storage.flusher()?;
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
@@ -519,7 +521,7 @@ impl SegmentBuilder {
                     )));
                 };
 
-                vector_info.vector_storage.flusher()()?;
+                vector_info.vector_storage.flusher()?;
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
