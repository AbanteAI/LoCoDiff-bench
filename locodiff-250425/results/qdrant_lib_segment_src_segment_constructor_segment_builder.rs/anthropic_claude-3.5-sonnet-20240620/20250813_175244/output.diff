
index 70dd22b46..46f3ee96b 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpe7nsawn3_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmprouohe_l_actual.txt	
@@ -478,23 +478,13 @@ impl SegmentBuilder {
                 IdTrackerEnum::ImmutableIdTracker(_) => {
                     unreachable!("ImmutableIdTracker should not be used for building segment")
                 }
-                IdTrackerEnum::RocksDbIdTracker(_) => id_tracker,
             };
 
             id_tracker.mapping_flusher()()?;
             id_tracker.versions_flusher()()?;
             let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
 
-            let mut quantized_vectors = Self::update_quantization(
-                &segment_config,
-                &vector_data,
-                temp_dir.path(),
-                &permit,
-                stopped,
-            )?;
-
             let mut vector_storages_arc = HashMap::new();
-            let mut old_indices = HashMap::new();
 
             for vector_name in segment_config.vector_data.keys() {
                 let Some(vector_info) = vector_data.remove(vector_name) else {
@@ -507,8 +497,6 @@ impl SegmentBuilder {
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
-                old_indices.insert(vector_name, vector_info.old_indices);
-
                 vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
             }
 
@@ -558,17 +546,32 @@ impl SegmentBuilder {
             // Arc permit to share it with each vector store
             let permit = Arc::new(permit);
 
+            let mut quantized_vectors = Self::update_quantization(
+                &segment_config,
+                &vector_data,
+                temp_dir.path(),
+                &permit,
+                stopped,
+            )?;
+
+            let mut old_indices = HashMap::new();
+
             for (vector_name, vector_config) in &segment_config.vector_data {
-                let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
-                let quantized_vectors =
-                    Arc::new(AtomicRefCell::new(quantized_vectors.remove(vector_name)));
+                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
+                let vector_storage = vector_data.remove(vector_name).unwrap();
+                let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
+                let quantized_vectors = Arc::new(AtomicRefCell::new(
+                    quantized_vectors.remove(vector_name),
+                ));
+
+                old_indices.insert(vector_name, vector_storage.old_indices);
 
                 let index = build_vector_index(
                     vector_config,
                     VectorIndexOpenArgs {
-                        path: &get_vector_index_path(temp_dir.path(), vector_name),
+                        path: &vector_index_path,
                         id_tracker: id_tracker_arc.clone(),
-                        vector_storage: vector_storage.clone(),
+                        vector_storage: vector_storage_arc.clone(),
                         payload_index: payload_index_arc.clone(),
                         quantized_vectors: quantized_vectors.clone(),
                     },
@@ -581,10 +584,10 @@ impl SegmentBuilder {
                     },
                 )?;
 
-                if vector_storage.borrow().is_on_disk() {
+                if vector_storage_arc.borrow().is_on_disk() {
                     // If vector storage is expected to be on-disk, we need to clear cache
                     // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
+                    vector_storage_arc.borrow().clear_cache()?;
                 }
 
                 if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
