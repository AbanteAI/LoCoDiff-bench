
index 70dd22b4..a2d05306 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpdrwfx4wd_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmp0ph_dswz_actual.txt	
@@ -3,19 +3,17 @@ use std::collections::HashMap;
 use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use ahash::AHasher;
 use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
-use itertools::Itertools;
 use tempfile::TempDir;
 use uuid::Uuid;
 
@@ -25,21 +23,21 @@ use super::{
     get_vector_storage_path, new_segment_path, open_segment_db, open_vector_storage,
 };
 use crate::common::error_logging::LogError;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::entry::entry_point::SegmentEntry;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
-use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
+use crate::id_tracker::{for_each_unique_point, IdTracker, IdTrackerEnum};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
 use crate::index::{PayloadIndex, VectorIndexEnum};
-use crate::payload_storage::PayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
+use crate::payload_storage::PayloadStorage;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
-    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
+    build_vector_index, load_segment, VectorIndexBuildArgs, VectorIndexOpenArgs,
 };
 use crate::types::{
     CompactExtendedPointId, ExtendedPointId, PayloadFieldSchema, PayloadKeyType, SegmentConfig,
@@ -56,13 +54,11 @@ pub struct SegmentBuilder {
     vector_data: HashMap<VectorNameBuf, VectorData>,
     segment_config: SegmentConfig,
 
-    // The path, where fully created segment will be moved
+    /// Where the fully-built segment will be moved
     destination_path: PathBuf,
-    // The temporary segment directory
+    /// Temporary directory for building
     temp_dir: TempDir,
     indexed_fields: HashMap<PayloadKeyType, PayloadFieldSchema>,
-
-    // Payload key to defragment data to
     defragment_keys: Vec<PayloadKeyType>,
 }
 
@@ -77,12 +73,10 @@ impl SegmentBuilder {
         temp_dir: &Path,
         segment_config: &SegmentConfig,
     ) -> OperationResult<Self> {
-        // When we build a new segment, it is empty at first,
-        // so we can ignore the `stopped` flag
+        // ignore `stopped` flag during initial build
         let stopped = AtomicBool::new(false);
 
         let temp_dir = create_temp_dir(temp_dir)?;
-
         let database = open_segment_db(temp_dir.path(), segment_config)?;
 
         let id_tracker = if segment_config.is_appendable() {
@@ -92,58 +86,47 @@ impl SegmentBuilder {
         };
 
         let payload_storage =
-            create_payload_storage(database.clone(), segment_config, temp_dir.path())?;
+            create_payload_storage(database.clone(), segment_config, segments_path)?;
 
         let mut vector_data = HashMap::new();
-
         for (vector_name, vector_config) in &segment_config.vector_data {
-            let vector_storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
-            let vector_storage = open_vector_storage(
+            let storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
+            let vs = open_vector_storage(
                 &database,
                 vector_config,
                 &stopped,
-                &vector_storage_path,
+                &storage_path,
                 vector_name,
             )?;
-
             vector_data.insert(
                 vector_name.to_owned(),
-                VectorData {
-                    vector_storage,
-                    old_indices: Vec::new(),
-                },
+                VectorData { vector_storage: vs, old_indices: Vec::new() },
             );
         }
 
-        for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
-            let vector_storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
-
-            let vector_storage = create_sparse_vector_storage(
+        for (vector_name, sparse_config) in &segment_config.sparse_vector_data {
+            let storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
+            let vs = create_sparse_vector_storage(
                 database.clone(),
-                &vector_storage_path,
+                &storage_path,
                 vector_name,
-                &sparse_vector_config.storage_type,
+                &sparse_config.storage_type,
                 &stopped,
             )?;
-
             vector_data.insert(
                 vector_name.to_owned(),
-                VectorData {
-                    vector_storage,
-                    old_indices: Vec::new(),
-                },
+                VectorData { vector_storage: vs, old_indices: Vec::new() },
             );
         }
 
         let destination_path = new_segment_path(segments_path);
 
         Ok(SegmentBuilder {
-            version: Default::default(), // default version is 0
+            version: 0,
             id_tracker,
             payload_storage,
             vector_data,
             segment_config: segment_config.clone(),
-
             destination_path,
             temp_dir,
             indexed_fields: Default::default(),
@@ -151,10 +134,6 @@ impl SegmentBuilder {
         })
     }
 
-    pub fn set_defragment_keys(&mut self, keys: Vec<PayloadKeyType>) {
-        self.defragment_keys = keys;
-    }
-
     pub fn remove_indexed_field(&mut self, field: &PayloadKeyType) {
         self.indexed_fields.remove(field);
     }
@@ -163,122 +142,78 @@ impl SegmentBuilder {
         self.indexed_fields.insert(field, schema);
     }
 
-    /// Get ordering value from the payload index
-    ///
-    /// Ordering value is used to sort points to keep points with the same payload together
-    /// Under the assumption that points are queried together, this will reduce the number of
-    /// random disk reads.
-    ///
-    /// Note: This value doesn't guarantee strict ordering in ambiguous cases.
-    ///       It should only be used in optimization purposes, not for correctness.
     fn _get_ordering_value(internal_id: PointOffsetType, indices: &[FieldIndex]) -> u64 {
         let mut ordering = 0;
-        for payload_index in indices {
-            match payload_index {
-                FieldIndex::IntMapIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            ordering = ordering.wrapping_add(*number as u64);
-                        }
+        for idx in indices {
+            match idx {
+                FieldIndex::IntMapIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        for &v in vals { ordering = ordering.wrapping_add(v as u64); }
                     }
                     break;
                 }
-                FieldIndex::KeywordIndex(index) => {
-                    if let Some(keywords) = index.get_values(internal_id) {
-                        for keyword in keywords {
-                            let mut hasher = AHasher::default();
-                            keyword.hash(&mut hasher);
-                            ordering = ordering.wrapping_add(hasher.finish());
+                FieldIndex::KeywordIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        for kw in vals {
+                            let mut h = AHasher::default();
+                            kw.hash(&mut h);
+                            ordering = ordering.wrapping_add(h.finish());
                         }
                     }
                     break;
                 }
-                FieldIndex::IntIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            ordering = ordering.wrapping_add(number as u64);
-                        }
+                FieldIndex::IntIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        for &v in vals { ordering = ordering.wrapping_add(v as u64); }
                     }
                     break;
                 }
-                FieldIndex::FloatIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            // Bit-level conversion of f64 to u64 preserves ordering
-                            // (for positive numbers)
-                            //
-                            // 0.001 -> 4562254508917369340
-                            // 0.01  -> 4576918229304087675
-                            // 0.05  -> 4587366580439587226
-                            // 0.1   -> 4591870180066957722
-                            // 1     -> 4607182418800017408
-                            // 2     -> 4611686018427387904
-                            // 10    -> 4621819117588971520
-                            ordering = ordering.wrapping_add(number.to_bits());
-                        }
+                FieldIndex::FloatIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        for &v in vals { ordering = ordering.wrapping_add(v.to_bits()); }
                     }
                     break;
                 }
-                FieldIndex::DatetimeIndex(index) => {
-                    if let Some(dates) = index.get_values(internal_id) {
-                        for date in dates {
-                            ordering = ordering.wrapping_add(date as u64);
-                        }
+                FieldIndex::DatetimeIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        for &v in vals { ordering = ordering.wrapping_add(v as u64); }
                     }
                     break;
                 }
-                FieldIndex::UuidMapIndex(index) => {
-                    if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids.copied());
+                FieldIndex::UuidMapIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        uuid_hash(&mut ordering, vals.copied());
                     }
                     break;
                 }
-                FieldIndex::UuidIndex(index) => {
-                    if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids);
+                FieldIndex::UuidIndex(i) => {
+                    if let Some(vals) = i.get_values(internal_id) {
+                        uuid_hash(&mut ordering, vals.copied());
                     }
                     break;
                 }
-                FieldIndex::GeoIndex(_) => {}
-                FieldIndex::FullTextIndex(_) => {}
-                FieldIndex::BoolIndex(_) => {}
-                FieldIndex::NullIndex(_) => {}
+                FieldIndex::BoolIndex(_)
+                | FieldIndex::GeoIndex(_)
+                | FieldIndex::FullTextIndex(_)
+                | FieldIndex::NullIndex(_) => {}
             }
         }
         ordering
     }
 
-    /// Update current segment builder with all (not deleted) vectors and payload from `segments`.
-    /// Also defragments if the `defragment_key` is set.
-    /// However only points in the same call get defragmented and grouped together.
-    /// Therefore this function should only be called once, unless this behavior is desired.
-    ///
-    /// # Result
-    ///
-    /// * `bool` - if `true` - data successfully added, if `false` - process was interrupted
-    ///
+    /// Update builder from multiple existing segments, with optional defragmentation.
     pub fn update(&mut self, segments: &[&Segment], stopped: &AtomicBool) -> OperationResult<bool> {
         if segments.is_empty() {
             return Ok(true);
         }
 
-        struct PointData {
-            external_id: CompactExtendedPointId,
-            /// [`CompactExtendedPointId`] is 17 bytes, we reduce
-            /// `segment_index` to 3 bytes to avoid paddings and align nicely.
-            segment_index: U24,
-            internal_id: PointOffsetType,
-            version: u64,
-            ordering: u64,
-        }
-
+        // collect unique points across segments
         if segments.len() > U24::MAX as usize {
             return Err(OperationError::service_error("Too many segments to update"));
         }
-
         let mut points_to_insert = Vec::new();
-        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
-        for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
+        let locked_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect::<Vec<_>>();
+        for_each_unique_point(locked_trackers.iter().map(|i| i.deref()), |item| {
             points_to_insert.push(PointData {
                 external_id: CompactExtendedPointId::from(item.external_id),
                 segment_index: U24::new_wrapped(item.tracker_index as u32),
@@ -286,157 +221,108 @@ impl SegmentBuilder {
                 version: item.version,
                 ordering: 0,
             });
-        });
-        drop(locked_id_trackers);
-
-        let payloads: Vec<_> = segments.iter().map(|i| i.payload_index.borrow()).collect();
-
-        for defragment_key in &self.defragment_keys {
-            for point_data in &mut points_to_insert {
-                let Some(payload_indices) = payloads[point_data.segment_index.get() as usize]
-                    .field_indexes
-                    .get(defragment_key)
-                else {
-                    continue;
-                };
-
-                point_data.ordering = point_data.ordering.wrapping_add(Self::_get_ordering_value(
-                    point_data.internal_id,
-                    payload_indices,
-                ));
-            }
         }
+        drop(locked_trackers);
 
+        let payloads: Vec<_> = segments.iter().map(|s| s.payload_index.borrow()).collect();
+
+        // compute defragmentation ordering
+        for key in &self.defragment_keys {
+            for p in &mut points_to_insert {
+                if let Some(idcs) = payloads[p.segment_index.get() as usize].field_indexes.get(key) {
+                    p.ordering = p.ordering.wrapping_add(Self::_get_ordering_value(p.internal_id, idcs));
+                }
+            }
+        }
         if !self.defragment_keys.is_empty() {
-            points_to_insert.sort_unstable_by_key(|i| i.ordering);
+            points_to_insert.sort_unstable_by_key(|p| p.ordering);
         }
 
-        let src_segment_max_version = segments.iter().map(|i| i.version()).max().unwrap();
-        self.version = cmp::max(self.version, src_segment_max_version);
+        // update version
+        let max_ver = segments.iter().map(|s| s.version()).max().unwrap();
+        self.version = cmp::max(self.version, max_ver);
 
-        let vector_storages: Vec<_> = segments.iter().map(|i| &i.vector_data).collect();
+        // gather other-vector storages
+        let other_vecs: Vec<_> = segments.iter().map(|s| &s.vector_data).collect();
 
-        let mut new_internal_range = None;
-        for (vector_name, vector_data) in &mut self.vector_data {
+        let mut new_range = None;
+        for (name, vd) in &mut self.vector_data {
             check_process_stopped(stopped)?;
-
-            let other_vector_storages = vector_storages
-                .iter()
-                .map(|i| {
-                    let other_vector_data = i.get(vector_name).ok_or_else(|| {
-                        OperationError::service_error(format!(
-                            "Cannot update from other segment because it is \
-                             missing vector name {vector_name}"
-                        ))
-                    })?;
-
-                    vector_data
-                        .old_indices
-                        .push(Arc::clone(&other_vector_data.vector_index));
-
-                    Ok(other_vector_data.vector_storage.borrow())
-                })
-                .collect::<Result<Vec<_>, OperationError>>()?;
-
-            let mut iter = points_to_insert.iter().map(|point_data| {
-                let other_vector_storage =
-                    &other_vector_storages[point_data.segment_index.get() as usize];
-                let vec = other_vector_storage.get_vector(point_data.internal_id);
-                let vector_deleted = other_vector_storage.is_deleted_vector(point_data.internal_id);
-                (vec, vector_deleted)
+            // record old indices
+            for seg_vd in &other_vecs {
+                let ovd = seg_vd.get(name).ok_or_else(|| {
+                    OperationError::service_error(format!(
+                        "Cannot update from other segment because it is missing vector name {name}"
+                    ))
+                })?;
+                vd.old_indices.push(Arc::clone(&ovd.vector_index));
+            }
+            // prepare iter of (vec, deleted)
+            let mut iter = points_to_insert.iter().map(|p| {
+                let ovd = &other_vecs[p.segment_index.get() as usize][name].vector_storage;
+                let v = ovd.get_vector(p.internal_id);
+                let d = ovd.is_deleted_vector(p.internal_id);
+                (v, d)
             });
-
-            let internal_range = vector_data.vector_storage.update_from(&mut iter, stopped)?;
-
-            match &new_internal_range {
-                Some(new_internal_range) => {
-                    if new_internal_range != &internal_range {
-                        return Err(OperationError::service_error(format!(
-                            "Internal ids range mismatch between self segment vectors and other segment vectors\n\
-                                vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
-                        )));
-                    }
+            let range = vd.vector_storage.update_from(&mut iter, stopped)?;
+            match &new_range {
+                Some(r0) if r0 != &range => {
+                    return Err(OperationError::service_error(format!(
+                        "Internal ids range mismatch between self and other for {name}: self={r0:?}, other={range:?}"
+                    )));
                 }
-                None => new_internal_range = Some(internal_range),
+                None => new_range = Some(range.clone()),
+                _ => {}
             }
         }
 
-        let hw_counter = HardwareCounterCell::disposable(); // Disposable counter for internal operations.
-
-        if let Some(new_internal_range) = new_internal_range {
-            let internal_id_iter = new_internal_range.zip(points_to_insert.iter());
-
-            for (new_internal_id, point_data) in internal_id_iter {
+        if let Some(range) = new_range {
+            let mut hw = HardwareCounterCell::disposable();
+            for (new_id, p) in range.zip(points_to_insert.iter()) {
                 check_process_stopped(stopped)?;
-
-                let old_internal_id = point_data.internal_id;
-
-                let other_payload = payloads[point_data.segment_index.get() as usize]
-                    .get_payload(old_internal_id, &hw_counter)?; // Internal operation, no measurement needed!
-
-                match self
-                    .id_tracker
-                    .internal_id(ExtendedPointId::from(point_data.external_id))
-                {
-                    Some(existing_internal_id) => {
-                        debug_assert!(
-                            false,
-                            "This code should not be reachable, cause points were resolved with `merged_points`"
-                        );
-
-                        let existing_external_version = self
-                            .id_tracker
-                            .internal_version(existing_internal_id)
-                            .unwrap();
-
-                        let remove_id = if existing_external_version < point_data.version {
-                            // Other version is the newest, remove the existing one and replace
-                            self.id_tracker
-                                .drop(ExtendedPointId::from(point_data.external_id))?;
-                            self.id_tracker.set_link(
-                                ExtendedPointId::from(point_data.external_id),
-                                new_internal_id,
-                            )?;
-                            self.id_tracker
-                                .set_internal_version(new_internal_id, point_data.version)?;
-                            self.payload_storage
-                                .clear(existing_internal_id, &hw_counter)?;
-
-                            existing_internal_id
+                let old_id = p.internal_id;
+                let other_payload = payloads[p.segment_index.get() as usize]
+                    .get_payload(old_id, &hw)?;
+                match self.id_tracker.internal_id(ExtendedPointId::from(p.external_id)) {
+                    Some(existing) => {
+                        // never actually reached because we collapsed versions above
+                        let ev = self.id_tracker.internal_version(existing).unwrap();
+                        let remove = if ev < p.version {
+                            self.id_tracker.drop(ExtendedPointId::from(p.external_id))?;
+                            self.id_tracker.set_link(ExtendedPointId::from(p.external_id), new_id)?;
+                            self.id_tracker.set_internal_version(new_id, p.version)?;
+                            self.payload_storage.clear(existing, &hw)?;
+                            existing
                         } else {
-                            // Old version is still good, do not move anything else
-                            // Mark newly added vector as removed
-                            new_internal_id
+                            new_id
                         };
-                        for vector_data in self.vector_data.values_mut() {
-                            vector_data.vector_storage.delete_vector(remove_id)?;
+                        for vd in self.vector_data.values_mut() {
+                            vd.vector_storage.delete_vector(remove)?;
                         }
                     }
                     None => {
                         self.id_tracker.set_link(
-                            ExtendedPointId::from(point_data.external_id),
-                            new_internal_id,
+                            ExtendedPointId::from(p.external_id),
+                            new_id,
                         )?;
-                        self.id_tracker
-                            .set_internal_version(new_internal_id, point_data.version)?;
+                        self.id_tracker.set_internal_version(new_id, p.version)?;
                     }
                 }
-
-                // Propagate payload to new segment
                 if !other_payload.is_empty() {
-                    self.payload_storage.set(
-                        new_internal_id,
-                        &other_payload,
-                        &HardwareCounterCell::disposable(),
-                    )?;
+                    self.payload_storage.set(new_id, &other_payload, &hw)?;
                 }
             }
-        }
-
-        for payload in payloads {
-            for (field, payload_schema) in payload.indexed_fields() {
-                self.indexed_fields.insert(field, payload_schema);
+            // merge indexed fields
+            for payload in payloads {
+                for (f, s) in payload.indexed_fields() {
+                    self.indexed_fields.insert(f, s);
+                }
             }
+            // flush trackers
+            let mut m = self.id_tracker.mapping_flusher()()?;
+            let mut v = self.id_tracker.versions_flusher()()?;
+            (m)()?;
+            (v)()?;
         }
 
         Ok(true)
@@ -448,7 +334,7 @@ impl SegmentBuilder {
         stopped: &AtomicBool,
         hw_counter: &HardwareCounterCell,
     ) -> Result<Segment, OperationError> {
-        let (temp_dir, destination_path) = {
+        let (temp_dir, dest) = {
             let SegmentBuilder {
                 version,
                 id_tracker,
@@ -461,31 +347,21 @@ impl SegmentBuilder {
                 defragment_keys: _,
             } = self;
 
-            let appendable_flag = segment_config.is_appendable();
+            let appendable = segment_config.is_appendable();
 
+            // flush payload storage
             payload_storage.flusher()()?;
-            let payload_storage_arc = Arc::new(AtomicRefCell::new(payload_storage));
-
-            let id_tracker = match id_tracker {
-                IdTrackerEnum::InMemoryIdTracker(in_memory_id_tracker) => {
-                    let (versions, mappings) = in_memory_id_tracker.into_internal();
-                    let compressed_mapping = CompressedPointMappings::from_mappings(mappings);
-                    let immutable_id_tracker =
-                        ImmutableIdTracker::new(temp_dir.path(), &versions, compressed_mapping)?;
-                    IdTrackerEnum::ImmutableIdTracker(immutable_id_tracker)
-                }
-                IdTrackerEnum::MutableIdTracker(_) => id_tracker,
-                IdTrackerEnum::ImmutableIdTracker(_) => {
-                    unreachable!("ImmutableIdTracker should not be used for building segment")
-                }
-                IdTrackerEnum::RocksDbIdTracker(_) => id_tracker,
-            };
+            let payload_arc = Arc::new(AtomicRefCell::new(payload_storage));
 
-            id_tracker.mapping_flusher()()?;
-            id_tracker.versions_flusher()()?;
-            let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
+            // flush trackers
+            let mut mf = id_tracker.mapping_flusher()()?;
+            let mut vf = id_tracker.versions_flusher()()?;
+            (mf)()?;
+            (vf)()?;
+            let tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
 
-            let mut quantized_vectors = Self::update_quantization(
+            // update quantization
+            let quantized = Self::update_quantization(
                 &segment_config,
                 &vector_data,
                 temp_dir.path(),
@@ -493,259 +369,173 @@ impl SegmentBuilder {
                 stopped,
             )?;
 
-            let mut vector_storages_arc = HashMap::new();
-            let mut old_indices = HashMap::new();
-
-            for vector_name in segment_config.vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                old_indices.insert(vector_name, vector_info.old_indices);
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
+            // clear caches & build vector indexes
+            let mut vec_storages_arc = HashMap::new();
+            let mut old_inds = HashMap::new();
+            for name in segment_config.vector_data.keys() {
+                let dat = vector_data.remove(name).unwrap();
+                dat.vector_storage.flusher()()?;
+                let stor_arc = Arc::new(AtomicRefCell::new(dat.vector_storage));
+                old_inds.insert(name.clone(), dat.old_indices);
+                vec_storages_arc.insert(name.clone(), stor_arc);
             }
-
-            for vector_name in segment_config.sparse_vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on sparse segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
+            for name in segment_config.sparse_vector_data.keys() {
+                let dat = vector_data.remove(name).unwrap();
+                dat.vector_storage.flusher()()?;
+                let stor_arc = Arc::new(AtomicRefCell::new(dat.vector_storage));
+                vec_storages_arc.insert(name.clone(), stor_arc);
             }
 
-            let payload_index_path = get_payload_index_path(temp_dir.path());
-
-            let mut payload_index = StructPayloadIndex::open(
-                payload_storage_arc.clone(),
-                id_tracker_arc.clone(),
-                vector_storages_arc.clone(),
-                &payload_index_path,
-                appendable_flag,
+            // open payload index
+            let pidx_path = get_payload_index_path(temp_dir.path());
+            let mut pidx = StructPayloadIndex::open(
+                payload_arc.clone(),
+                tracker_arc.clone(),
+                vec_storages_arc.clone(),
+                &pidx_path,
+                appendable,
             )?;
-            for (field, payload_schema) in indexed_fields {
-                payload_index.set_indexed(&field, payload_schema, hw_counter)?;
+            for (f, s) in indexed_fields {
+                pidx.set_indexed(&f, s, hw_counter)?;
                 check_process_stopped(stopped)?;
             }
+            pidx.flusher()()?;
+            let pidx_arc = Arc::new(AtomicRefCell::new(pidx));
 
-            payload_index.flusher()()?;
-            let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
-
-            // Try to lock GPU device.
-            #[cfg(feature = "gpu")]
-            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
+            // build HNSW / vector indexes
             #[cfg(feature = "gpu")]
-            let gpu_device = gpu_devices_manager
-                .as_ref()
-                .map(|devices_manager| devices_manager.lock_device(stopped))
-                .transpose()?
-                .flatten();
+            let gpu_d = {
+                let gm = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
+                gm.as_ref().and_then(|m| m.lock_device(stopped)?)
+            };
             #[cfg(not(feature = "gpu"))]
-            let gpu_device = None;
+            let gpu_d = None;
 
-            // Arc permit to share it with each vector store
-            let permit = Arc::new(permit);
+            let perm = Arc::new(permit);
 
-            for (vector_name, vector_config) in &segment_config.vector_data {
-                let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
-                let quantized_vectors =
-                    Arc::new(AtomicRefCell::new(quantized_vectors.remove(vector_name)));
-
-                let index = build_vector_index(
-                    vector_config,
+            for (name, cfg) in &segment_config.vector_data {
+                let sto = vec_storages_arc.remove(name).unwrap();
+                let quant_arc = Arc::new(AtomicRefCell::new(quantized.remove(name)));
+                let idx = build_vector_index(
+                    cfg,
                     VectorIndexOpenArgs {
-                        path: &get_vector_index_path(temp_dir.path(), vector_name),
-                        id_tracker: id_tracker_arc.clone(),
-                        vector_storage: vector_storage.clone(),
-                        payload_index: payload_index_arc.clone(),
-                        quantized_vectors: quantized_vectors.clone(),
+                        path: &get_vector_index_path(temp_dir.path(), name),
+                        id_tracker: tracker_arc.clone(),
+                        vector_storage: sto.clone(),
+                        payload_index: pidx_arc.clone(),
+                        quantized_vectors: quant_arc.clone(),
                     },
                     VectorIndexBuildArgs {
-                        permit: permit.clone(),
-                        old_indices: &old_indices.remove(vector_name).unwrap(),
-                        gpu_device: gpu_device.as_ref(),
+                        permit: perm.clone(),
+                        old_indices: &old_inds.remove(name).unwrap(),
+                        gpu_device: gpu_d.as_ref(),
                         stopped,
                         feature_flags: feature_flags(),
                     },
                 )?;
-
-                if vector_storage.borrow().is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
+                if sto.borrow().is_on_disk() {
+                    sto.borrow().clear_cache()?;
                 }
-
-                if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
-                    quantized_vectors.clear_cache()?;
+                if let Some(qv) = quant_arc.borrow().as_ref() {
+                    qv.clear_cache()?;
                 }
-
-                // Index if always loaded on-disk=true from build function
-                // So we may clear unconditionally
-                index.clear_cache()?;
+                idx.clear_cache()?;
             }
 
-            for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
-                let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
-
-                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
-
-                let index = create_sparse_vector_index(SparseVectorIndexOpenArgs {
-                    config: sparse_vector_config.index,
-                    id_tracker: id_tracker_arc.clone(),
-                    vector_storage: vector_storage_arc.clone(),
-                    payload_index: payload_index_arc.clone(),
-                    path: &vector_index_path,
+            for (name, sparse_cfg) in &segment_config.sparse_vector_data {
+                let sto = vec_storages_arc.remove(name).unwrap();
+                let idx = create_sparse_vector_index(SparseVectorIndexOpenArgs {
+                    config: sparse_cfg.index,
+                    id_tracker: tracker_arc.clone(),
+                    vector_storage: sto.clone(),
+                    payload_index: pidx_arc.clone(),
+                    path: &get_vector_index_path(temp_dir.path(), name),
                     stopped,
-                    tick_progress: || (),
+                    tick_progress: || {},
                 })?;
-
-                if sparse_vector_config.storage_type.is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage_arc.borrow().clear_cache()?;
+                if sparse_cfg.storage_type.is_on_disk() {
+                    sto.borrow().clear_cache()?;
                 }
-
-                if sparse_vector_config.index.index_type.is_on_disk() {
-                    index.clear_cache()?;
+                if sparse_cfg.index.index_type.is_on_disk() {
+                    idx.clear_cache()?;
                 }
             }
 
             if segment_config.payload_storage_type.is_on_disk() {
-                // If payload storage is expected to be on-disk, we need to clear cache
-                // to avoid cache pollution
-                payload_storage_arc.borrow().clear_cache()?;
+                payload_arc.borrow().clear_cache()?;
             }
+            pidx_arc.borrow().clear_cache_if_on_disk()?;
 
-            // Clear cache for payload index to avoid cache pollution
-            payload_index_arc.borrow().clear_cache_if_on_disk()?;
-
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
-            // Finalize the newly created segment by saving config and version
+            // finalize
             Segment::save_state(
-                &SegmentState {
-                    version: Some(version),
-                    config: segment_config,
-                },
+                &SegmentState { version: Some(version), config: segment_config },
                 temp_dir.path(),
             )?;
-
-            // After version is saved, segment can be loaded on restart
             SegmentVersion::save(temp_dir.path())?;
-            // All temp data is evicted from RAM
             (temp_dir, destination_path)
         };
 
-        // Move fully constructed segment into collection directory and load back to RAM
-        std::fs::rename(temp_dir.into_path(), &destination_path)
+        std::fs::rename(temp_dir.into_path(), &dest)
             .describe("Moving segment data after optimization")?;
-
-        let loaded_segment = load_segment(&destination_path, stopped)?.ok_or_else(|| {
-            OperationError::service_error(format!(
-                "Segment loading error: {}",
-                destination_path.display()
-            ))
-        })?;
-        Ok(loaded_segment)
+        let loaded = load_segment(&dest, stopped)?
+            .ok_or_else(|| OperationError::service_error(format!("Segment loading error: {}", dest.display())))?;
+        Ok(loaded)
     }
 
     fn update_quantization(
         segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
+        vector_data: &HashMap<VectorNameBuf, VectorData>,
         temp_path: &Path,
         permit: &ResourcePermit,
         stopped: &AtomicBool,
     ) -> OperationResult<HashMap<VectorNameBuf, QuantizedVectors>> {
-        let config = segment_config.clone();
-
-        let mut quantized_vectors_map = HashMap::new();
-
-        for (vector_name, vector_info) in vector_storages {
-            let Some(vector_config) = config.vector_data.get(vector_name) else {
-                continue;
+        let cfg = segment_config.clone();
+        let mut out = HashMap::new();
+        for (name, dat) in vector_data {
+            let vc = match cfg.vector_data.get(name) {
+                Some(v) if !v.is_appendable() => v,
+                _ => continue,
             };
-
-            let is_appendable = vector_config.is_appendable();
-
-            // Don't build quantization for appendable vectors
-            if is_appendable {
-                continue;
-            }
-
             let max_threads = permit.num_cpus as usize;
-
-            if let Some(quantization) = config.quantization_config(vector_name) {
-                let segment_path = temp_path;
-
+            if let Some(q) = cfg.quantization_config(name) {
                 check_process_stopped(stopped)?;
-
-                let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
-
-                let quantized_vectors = QuantizedVectors::create(
-                    &vector_info.vector_storage,
-                    quantization,
-                    &vector_storage_path,
-                    max_threads,
-                    stopped,
-                )?;
-
-                quantized_vectors_map.insert(vector_name.to_owned(), quantized_vectors);
+                let path = get_vector_storage_path(temp_path, name);
+                let vq = QuantizedVectors::create(&dat.vector_storage, q, &path, max_threads, stopped)?;
+                out.insert(name.clone(), vq);
             }
         }
-        Ok(quantized_vectors_map)
+        Ok(out)
     }
 }
 
-fn uuid_hash<I>(hash: &mut u64, ids: I)
+fn create_temp_dir(parent: &Path) -> Result<TempDir, OperationError> {
+    std::fs::create_dir_all(parent)
+        .and_then(|_| TempDir::with_prefix_in("segment_builder_", parent))
+        .map_err(|e| OperationError::service_error(format!(
+            "Could not create temp directory in `{}`: {}",
+            parent.display(), e
+        )))
+}
+
+fn uuid_hash<I>(h: &mut u64, iter: I)
 where
     I: Iterator<Item = u128>,
 {
-    for id in ids {
-        let uuid = Uuid::from_u128(id);
-
-        // Not all Uuid versions hold timestamp data. The most common version, v4 for example is completely
-        // random and can't be sorted. To still allow defragmentation, we assume that usually the same
-        // version gets used for a payload key and implement an alternative sorting criteria, that just
-        // takes the Uuids bytes to group equal Uuids together.
-        if let Some(timestamp) = uuid.get_timestamp() {
-            *hash = hash.wrapping_add(timestamp.to_gregorian().0);
+    for id in iter {
+        let u = Uuid::from_u128(id);
+        if let Some(ts) = u.get_timestamp() {
+            *h = h.wrapping_add(ts.to_gregorian().0);
         } else {
-            // First part of u128
-            *hash = hash.wrapping_add((id >> 64) as u64);
-
-            // Second part of u128
-            *hash = hash.wrapping_add(id as u64);
+            *h = h.wrapping_add((id >> 64) as u64);
+            *h = h.wrapping_add(id as u64);
         }
     }
 }
 
-fn create_temp_dir(parent_path: &Path) -> Result<TempDir, OperationError> {
-    // Ensure parent path exists
-    std::fs::create_dir_all(parent_path)
-        .and_then(|_| TempDir::with_prefix_in("segment_builder_", parent_path))
-        .map_err(|err| {
-            OperationError::service_error(format!(
-                "Could not create temp directory in `{}`: {}",
-                parent_path.display(),
-                err
-            ))
-        })
+struct PointData {
+    external_id: CompactExtendedPointId,
+    segment_index: U24,
+    internal_id: PointOffsetType,
+    version: u64,
+    ordering: u64,
 }
\ No newline at end of file
