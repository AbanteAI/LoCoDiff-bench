
index 70dd22b4..d50115c5 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpc3zefz76_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpl8ru8yi__actual.txt	
@@ -1,17 +1,16 @@
-use std::cmp;
+use core::cmp;
 use std::collections::HashMap;
 use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use ahash::AHasher;
 use atomic_refcell::AtomicRefCell;
 use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
@@ -25,21 +24,21 @@ use super::{
     get_vector_storage_path, new_segment_path, open_segment_db, open_vector_storage,
 };
 use crate::common::error_logging::LogError;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::entry::entry_point::SegmentEntry;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
-use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
+use crate::id_tracker::{for_each_unique_point, IdTracker, IdTrackerEnum};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
 use crate::index::{PayloadIndex, VectorIndexEnum};
-use crate::payload_storage::PayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
+use crate::payload_storage::PayloadStorage;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
-    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
+    build_vector_index, load_segment, VectorIndexBuildArgs, VectorIndexOpenArgs,
 };
 use crate::types::{
     CompactExtendedPointId, ExtendedPointId, PayloadFieldSchema, PayloadKeyType, SegmentConfig,
@@ -235,7 +234,7 @@ impl SegmentBuilder {
                 }
                 FieldIndex::UuidIndex(index) => {
                     if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids);
+                        uuid_hash(&mut ordering, ids.copied());
                     }
                     break;
                 }
@@ -262,20 +261,6 @@ impl SegmentBuilder {
             return Ok(true);
         }
 
-        struct PointData {
-            external_id: CompactExtendedPointId,
-            /// [`CompactExtendedPointId`] is 17 bytes, we reduce
-            /// `segment_index` to 3 bytes to avoid paddings and align nicely.
-            segment_index: U24,
-            internal_id: PointOffsetType,
-            version: u64,
-            ordering: u64,
-        }
-
-        if segments.len() > U24::MAX as usize {
-            return Err(OperationError::service_error("Too many segments to update"));
-        }
-
         let mut points_to_insert = Vec::new();
         let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
         for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
@@ -439,12 +424,15 @@ impl SegmentBuilder {
             }
         }
 
+        self.id_tracker.mapping_flusher()()?;
+        self.id_tracker.versions_flusher()()?;
+
         Ok(true)
     }
 
     pub fn build(
         self,
-        permit: ResourcePermit,
+        mut permit: ResourcePermit,
         stopped: &AtomicBool,
         hw_counter: &HardwareCounterCell,
     ) -> Result<Segment, OperationError> {
@@ -485,6 +473,21 @@ impl SegmentBuilder {
             id_tracker.versions_flusher()()?;
             let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
 
+            // Try to lock GPU device.
+            #[cfg(feature = "gpu")]
+            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
+            #[cfg(feature = "gpu")]
+            let gpu_device = gpu_devices_manager
+                .as_ref()
+                .map(|devices_manager| devices_manager.lock_device(stopped))
+                .transpose()?
+                .flatten();
+            #[cfg(not(feature = "gpu"))]
+            let gpu_device = None;
+
+            // Arc permit to share it with each vector store
+            let permit = Arc::new(permit);
+
             let mut quantized_vectors = Self::update_quantization(
                 &segment_config,
                 &vector_data,
@@ -507,7 +510,7 @@ impl SegmentBuilder {
 
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
 
-                old_indices.insert(vector_name, vector_info.old_indices);
+                old_indices.insert(vector_name.to_owned(), vector_info.old_indices);
 
                 vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
             }
@@ -535,6 +538,7 @@ impl SegmentBuilder {
                 &payload_index_path,
                 appendable_flag,
             )?;
+
             for (field, payload_schema) in indexed_fields {
                 payload_index.set_indexed(&field, payload_schema, hw_counter)?;
                 check_process_stopped(stopped)?;
@@ -543,21 +547,6 @@ impl SegmentBuilder {
             payload_index.flusher()()?;
             let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
 
-            // Try to lock GPU device.
-            #[cfg(feature = "gpu")]
-            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
-            #[cfg(feature = "gpu")]
-            let gpu_device = gpu_devices_manager
-                .as_ref()
-                .map(|devices_manager| devices_manager.lock_device(stopped))
-                .transpose()?
-                .flatten();
-            #[cfg(not(feature = "gpu"))]
-            let gpu_device = None;
-
-            // Arc permit to share it with each vector store
-            let permit = Arc::new(permit);
-
             for (vector_name, vector_config) in &segment_config.vector_data {
                 let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
                 let quantized_vectors =
@@ -584,22 +573,22 @@ impl SegmentBuilder {
                 if vector_storage.borrow().is_on_disk() {
                     // If vector storage is expected to be on-disk, we need to clear cache
                     // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
+                    vector_storage.borrow().clear_cache(hw_counter)?;
                 }
 
                 if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
-                    quantized_vectors.clear_cache()?;
+                    quantized_vectors.clear_cache(hw_counter)?;
                 }
 
                 // Index if always loaded on-disk=true from build function
                 // So we may clear unconditionally
-                index.clear_cache()?;
+                index.clear_cache(hw_counter)?;
             }
 
             for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
                 let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
 
-                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
+                let vector_storage_arc = vector_storages_arc.remove(vector_name.as_str()).unwrap();
 
                 let index = create_sparse_vector_index(SparseVectorIndexOpenArgs {
                     config: sparse_vector_config.index,
@@ -614,22 +603,22 @@ impl SegmentBuilder {
                 if sparse_vector_config.storage_type.is_on_disk() {
                     // If vector storage is expected to be on-disk, we need to clear cache
                     // to avoid cache pollution
-                    vector_storage_arc.borrow().clear_cache()?;
+                    vector_storage_arc.borrow().clear_cache(hw_counter)?;
                 }
 
                 if sparse_vector_config.index.index_type.is_on_disk() {
-                    index.clear_cache()?;
+                    index.clear_cache(hw_counter)?;
                 }
             }
 
             if segment_config.payload_storage_type.is_on_disk() {
                 // If payload storage is expected to be on-disk, we need to clear cache
                 // to avoid cache pollution
-                payload_storage_arc.borrow().clear_cache()?;
+                payload_storage_arc.borrow().clear_cache(hw_counter)?;
             }
 
             // Clear cache for payload index to avoid cache pollution
-            payload_index_arc.borrow().clear_cache_if_on_disk()?;
+            payload_index_arc.borrow().clear_cache_if_on_disk(hw_counter)?;
 
             // We're done with CPU-intensive tasks, release CPU permit
             debug_assert_eq!(
@@ -666,52 +655,6 @@ impl SegmentBuilder {
         })?;
         Ok(loaded_segment)
     }
-
-    fn update_quantization(
-        segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
-        temp_path: &Path,
-        permit: &ResourcePermit,
-        stopped: &AtomicBool,
-    ) -> OperationResult<HashMap<VectorNameBuf, QuantizedVectors>> {
-        let config = segment_config.clone();
-
-        let mut quantized_vectors_map = HashMap::new();
-
-        for (vector_name, vector_info) in vector_storages {
-            let Some(vector_config) = config.vector_data.get(vector_name) else {
-                continue;
-            };
-
-            let is_appendable = vector_config.is_appendable();
-
-            // Don't build quantization for appendable vectors
-            if is_appendable {
-                continue;
-            }
-
-            let max_threads = permit.num_cpus as usize;
-
-            if let Some(quantization) = config.quantization_config(vector_name) {
-                let segment_path = temp_path;
-
-                check_process_stopped(stopped)?;
-
-                let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
-
-                let quantized_vectors = QuantizedVectors::create(
-                    &vector_info.vector_storage,
-                    quantization,
-                    &vector_storage_path,
-                    max_threads,
-                    stopped,
-                )?;
-
-                quantized_vectors_map.insert(vector_name.to_owned(), quantized_vectors);
-            }
-        }
-        Ok(quantized_vectors_map)
-    }
 }
 
 fn uuid_hash<I>(hash: &mut u64, ids: I)
@@ -748,4 +691,14 @@ fn create_temp_dir(parent_path: &Path) -> Result<TempDir, OperationError> {
                 err
             ))
         })
+}
+
+struct PointData {
+    external_id: CompactExtendedPointId,
+    /// [`CompactExtendedPointId`] is 17 bytes, we reduce
+    /// `segment_index` to 3 bytes to avoid paddings and align nicely.
+    segment_index: U24,
+    internal_id: PointOffsetType,
+    version: u64,
+    ordering: u64,
 }
\ No newline at end of file
