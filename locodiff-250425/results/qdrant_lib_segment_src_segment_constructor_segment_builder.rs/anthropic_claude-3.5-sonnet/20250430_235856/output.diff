
index 70dd22b4..2922c767 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmppbtkxtu6_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpk0mdytem_actual.txt	
@@ -62,7 +62,7 @@ pub struct SegmentBuilder {
     temp_dir: TempDir,
     indexed_fields: HashMap<PayloadKeyType, PayloadFieldSchema>,
 
-    // Payload key to defragment data to
+    // Payload key to deframent data to
     defragment_keys: Vec<PayloadKeyType>,
 }
 
@@ -72,646 +72,7 @@ struct VectorData {
 }
 
 impl SegmentBuilder {
-    pub fn new(
-        segments_path: &Path,
-        temp_dir: &Path,
-        segment_config: &SegmentConfig,
-    ) -> OperationResult<Self> {
-        // When we build a new segment, it is empty at first,
-        // so we can ignore the `stopped` flag
-        let stopped = AtomicBool::new(false);
-
-        let temp_dir = create_temp_dir(temp_dir)?;
-
-        let database = open_segment_db(temp_dir.path(), segment_config)?;
-
-        let id_tracker = if segment_config.is_appendable() {
-            IdTrackerEnum::MutableIdTracker(create_mutable_id_tracker(temp_dir.path())?)
-        } else {
-            IdTrackerEnum::InMemoryIdTracker(InMemoryIdTracker::new())
-        };
-
-        let payload_storage =
-            create_payload_storage(database.clone(), segment_config, temp_dir.path())?;
-
-        let mut vector_data = HashMap::new();
-
-        for (vector_name, vector_config) in &segment_config.vector_data {
-            let vector_storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
-            let vector_storage = open_vector_storage(
-                &database,
-                vector_config,
-                &stopped,
-                &vector_storage_path,
-                vector_name,
-            )?;
-
-            vector_data.insert(
-                vector_name.to_owned(),
-                VectorData {
-                    vector_storage,
-                    old_indices: Vec::new(),
-                },
-            );
-        }
-
-        for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
-            let vector_storage_path = get_vector_storage_path(temp_dir.path(), vector_name);
-
-            let vector_storage = create_sparse_vector_storage(
-                database.clone(),
-                &vector_storage_path,
-                vector_name,
-                &sparse_vector_config.storage_type,
-                &stopped,
-            )?;
-
-            vector_data.insert(
-                vector_name.to_owned(),
-                VectorData {
-                    vector_storage,
-                    old_indices: Vec::new(),
-                },
-            );
-        }
-
-        let destination_path = new_segment_path(segments_path);
-
-        Ok(SegmentBuilder {
-            version: Default::default(), // default version is 0
-            id_tracker,
-            payload_storage,
-            vector_data,
-            segment_config: segment_config.clone(),
-
-            destination_path,
-            temp_dir,
-            indexed_fields: Default::default(),
-            defragment_keys: vec![],
-        })
-    }
-
-    pub fn set_defragment_keys(&mut self, keys: Vec<PayloadKeyType>) {
-        self.defragment_keys = keys;
-    }
-
-    pub fn remove_indexed_field(&mut self, field: &PayloadKeyType) {
-        self.indexed_fields.remove(field);
-    }
-
-    pub fn add_indexed_field(&mut self, field: PayloadKeyType, schema: PayloadFieldSchema) {
-        self.indexed_fields.insert(field, schema);
-    }
-
-    /// Get ordering value from the payload index
-    ///
-    /// Ordering value is used to sort points to keep points with the same payload together
-    /// Under the assumption that points are queried together, this will reduce the number of
-    /// random disk reads.
-    ///
-    /// Note: This value doesn't guarantee strict ordering in ambiguous cases.
-    ///       It should only be used in optimization purposes, not for correctness.
-    fn _get_ordering_value(internal_id: PointOffsetType, indices: &[FieldIndex]) -> u64 {
-        let mut ordering = 0;
-        for payload_index in indices {
-            match payload_index {
-                FieldIndex::IntMapIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            ordering = ordering.wrapping_add(*number as u64);
-                        }
-                    }
-                    break;
-                }
-                FieldIndex::KeywordIndex(index) => {
-                    if let Some(keywords) = index.get_values(internal_id) {
-                        for keyword in keywords {
-                            let mut hasher = AHasher::default();
-                            keyword.hash(&mut hasher);
-                            ordering = ordering.wrapping_add(hasher.finish());
-                        }
-                    }
-                    break;
-                }
-                FieldIndex::IntIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            ordering = ordering.wrapping_add(number as u64);
-                        }
-                    }
-                    break;
-                }
-                FieldIndex::FloatIndex(index) => {
-                    if let Some(numbers) = index.get_values(internal_id) {
-                        for number in numbers {
-                            // Bit-level conversion of f64 to u64 preserves ordering
-                            // (for positive numbers)
-                            //
-                            // 0.001 -> 4562254508917369340
-                            // 0.01  -> 4576918229304087675
-                            // 0.05  -> 4587366580439587226
-                            // 0.1   -> 4591870180066957722
-                            // 1     -> 4607182418800017408
-                            // 2     -> 4611686018427387904
-                            // 10    -> 4621819117588971520
-                            ordering = ordering.wrapping_add(number.to_bits());
-                        }
-                    }
-                    break;
-                }
-                FieldIndex::DatetimeIndex(index) => {
-                    if let Some(dates) = index.get_values(internal_id) {
-                        for date in dates {
-                            ordering = ordering.wrapping_add(date as u64);
-                        }
-                    }
-                    break;
-                }
-                FieldIndex::UuidMapIndex(index) => {
-                    if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids.copied());
-                    }
-                    break;
-                }
-                FieldIndex::UuidIndex(index) => {
-                    if let Some(ids) = index.get_values(internal_id) {
-                        uuid_hash(&mut ordering, ids);
-                    }
-                    break;
-                }
-                FieldIndex::GeoIndex(_) => {}
-                FieldIndex::FullTextIndex(_) => {}
-                FieldIndex::BoolIndex(_) => {}
-                FieldIndex::NullIndex(_) => {}
-            }
-        }
-        ordering
-    }
-
-    /// Update current segment builder with all (not deleted) vectors and payload from `segments`.
-    /// Also defragments if the `defragment_key` is set.
-    /// However only points in the same call get defragmented and grouped together.
-    /// Therefore this function should only be called once, unless this behavior is desired.
-    ///
-    /// # Result
-    ///
-    /// * `bool` - if `true` - data successfully added, if `false` - process was interrupted
-    ///
-    pub fn update(&mut self, segments: &[&Segment], stopped: &AtomicBool) -> OperationResult<bool> {
-        if segments.is_empty() {
-            return Ok(true);
-        }
-
-        struct PointData {
-            external_id: CompactExtendedPointId,
-            /// [`CompactExtendedPointId`] is 17 bytes, we reduce
-            /// `segment_index` to 3 bytes to avoid paddings and align nicely.
-            segment_index: U24,
-            internal_id: PointOffsetType,
-            version: u64,
-            ordering: u64,
-        }
-
-        if segments.len() > U24::MAX as usize {
-            return Err(OperationError::service_error("Too many segments to update"));
-        }
-
-        let mut points_to_insert = Vec::new();
-        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
-        for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
-            points_to_insert.push(PointData {
-                external_id: CompactExtendedPointId::from(item.external_id),
-                segment_index: U24::new_wrapped(item.tracker_index as u32),
-                internal_id: item.internal_id,
-                version: item.version,
-                ordering: 0,
-            });
-        });
-        drop(locked_id_trackers);
-
-        let payloads: Vec<_> = segments.iter().map(|i| i.payload_index.borrow()).collect();
-
-        for defragment_key in &self.defragment_keys {
-            for point_data in &mut points_to_insert {
-                let Some(payload_indices) = payloads[point_data.segment_index.get() as usize]
-                    .field_indexes
-                    .get(defragment_key)
-                else {
-                    continue;
-                };
-
-                point_data.ordering = point_data.ordering.wrapping_add(Self::_get_ordering_value(
-                    point_data.internal_id,
-                    payload_indices,
-                ));
-            }
-        }
-
-        if !self.defragment_keys.is_empty() {
-            points_to_insert.sort_unstable_by_key(|i| i.ordering);
-        }
-
-        let src_segment_max_version = segments.iter().map(|i| i.version()).max().unwrap();
-        self.version = cmp::max(self.version, src_segment_max_version);
-
-        let vector_storages: Vec<_> = segments.iter().map(|i| &i.vector_data).collect();
-
-        let mut new_internal_range = None;
-        for (vector_name, vector_data) in &mut self.vector_data {
-            check_process_stopped(stopped)?;
-
-            let other_vector_storages = vector_storages
-                .iter()
-                .map(|i| {
-                    let other_vector_data = i.get(vector_name).ok_or_else(|| {
-                        OperationError::service_error(format!(
-                            "Cannot update from other segment because it is \
-                             missing vector name {vector_name}"
-                        ))
-                    })?;
-
-                    vector_data
-                        .old_indices
-                        .push(Arc::clone(&other_vector_data.vector_index));
-
-                    Ok(other_vector_data.vector_storage.borrow())
-                })
-                .collect::<Result<Vec<_>, OperationError>>()?;
-
-            let mut iter = points_to_insert.iter().map(|point_data| {
-                let other_vector_storage =
-                    &other_vector_storages[point_data.segment_index.get() as usize];
-                let vec = other_vector_storage.get_vector(point_data.internal_id);
-                let vector_deleted = other_vector_storage.is_deleted_vector(point_data.internal_id);
-                (vec, vector_deleted)
-            });
-
-            let internal_range = vector_data.vector_storage.update_from(&mut iter, stopped)?;
-
-            match &new_internal_range {
-                Some(new_internal_range) => {
-                    if new_internal_range != &internal_range {
-                        return Err(OperationError::service_error(format!(
-                            "Internal ids range mismatch between self segment vectors and other segment vectors\n\
-                                vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
-                        )));
-                    }
-                }
-                None => new_internal_range = Some(internal_range),
-            }
-        }
-
-        let hw_counter = HardwareCounterCell::disposable(); // Disposable counter for internal operations.
-
-        if let Some(new_internal_range) = new_internal_range {
-            let internal_id_iter = new_internal_range.zip(points_to_insert.iter());
-
-            for (new_internal_id, point_data) in internal_id_iter {
-                check_process_stopped(stopped)?;
-
-                let old_internal_id = point_data.internal_id;
-
-                let other_payload = payloads[point_data.segment_index.get() as usize]
-                    .get_payload(old_internal_id, &hw_counter)?; // Internal operation, no measurement needed!
-
-                match self
-                    .id_tracker
-                    .internal_id(ExtendedPointId::from(point_data.external_id))
-                {
-                    Some(existing_internal_id) => {
-                        debug_assert!(
-                            false,
-                            "This code should not be reachable, cause points were resolved with `merged_points`"
-                        );
-
-                        let existing_external_version = self
-                            .id_tracker
-                            .internal_version(existing_internal_id)
-                            .unwrap();
-
-                        let remove_id = if existing_external_version < point_data.version {
-                            // Other version is the newest, remove the existing one and replace
-                            self.id_tracker
-                                .drop(ExtendedPointId::from(point_data.external_id))?;
-                            self.id_tracker.set_link(
-                                ExtendedPointId::from(point_data.external_id),
-                                new_internal_id,
-                            )?;
-                            self.id_tracker
-                                .set_internal_version(new_internal_id, point_data.version)?;
-                            self.payload_storage
-                                .clear(existing_internal_id, &hw_counter)?;
-
-                            existing_internal_id
-                        } else {
-                            // Old version is still good, do not move anything else
-                            // Mark newly added vector as removed
-                            new_internal_id
-                        };
-                        for vector_data in self.vector_data.values_mut() {
-                            vector_data.vector_storage.delete_vector(remove_id)?;
-                        }
-                    }
-                    None => {
-                        self.id_tracker.set_link(
-                            ExtendedPointId::from(point_data.external_id),
-                            new_internal_id,
-                        )?;
-                        self.id_tracker
-                            .set_internal_version(new_internal_id, point_data.version)?;
-                    }
-                }
-
-                // Propagate payload to new segment
-                if !other_payload.is_empty() {
-                    self.payload_storage.set(
-                        new_internal_id,
-                        &other_payload,
-                        &HardwareCounterCell::disposable(),
-                    )?;
-                }
-            }
-        }
-
-        for payload in payloads {
-            for (field, payload_schema) in payload.indexed_fields() {
-                self.indexed_fields.insert(field, payload_schema);
-            }
-        }
-
-        Ok(true)
-    }
-
-    pub fn build(
-        self,
-        permit: ResourcePermit,
-        stopped: &AtomicBool,
-        hw_counter: &HardwareCounterCell,
-    ) -> Result<Segment, OperationError> {
-        let (temp_dir, destination_path) = {
-            let SegmentBuilder {
-                version,
-                id_tracker,
-                payload_storage,
-                mut vector_data,
-                segment_config,
-                destination_path,
-                temp_dir,
-                indexed_fields,
-                defragment_keys: _,
-            } = self;
-
-            let appendable_flag = segment_config.is_appendable();
-
-            payload_storage.flusher()()?;
-            let payload_storage_arc = Arc::new(AtomicRefCell::new(payload_storage));
-
-            let id_tracker = match id_tracker {
-                IdTrackerEnum::InMemoryIdTracker(in_memory_id_tracker) => {
-                    let (versions, mappings) = in_memory_id_tracker.into_internal();
-                    let compressed_mapping = CompressedPointMappings::from_mappings(mappings);
-                    let immutable_id_tracker =
-                        ImmutableIdTracker::new(temp_dir.path(), &versions, compressed_mapping)?;
-                    IdTrackerEnum::ImmutableIdTracker(immutable_id_tracker)
-                }
-                IdTrackerEnum::MutableIdTracker(_) => id_tracker,
-                IdTrackerEnum::ImmutableIdTracker(_) => {
-                    unreachable!("ImmutableIdTracker should not be used for building segment")
-                }
-                IdTrackerEnum::RocksDbIdTracker(_) => id_tracker,
-            };
-
-            id_tracker.mapping_flusher()()?;
-            id_tracker.versions_flusher()()?;
-            let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
-
-            let mut quantized_vectors = Self::update_quantization(
-                &segment_config,
-                &vector_data,
-                temp_dir.path(),
-                &permit,
-                stopped,
-            )?;
-
-            let mut vector_storages_arc = HashMap::new();
-            let mut old_indices = HashMap::new();
-
-            for vector_name in segment_config.vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                old_indices.insert(vector_name, vector_info.old_indices);
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
-            }
-
-            for vector_name in segment_config.sparse_vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on sparse segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
-            }
-
-            let payload_index_path = get_payload_index_path(temp_dir.path());
-
-            let mut payload_index = StructPayloadIndex::open(
-                payload_storage_arc.clone(),
-                id_tracker_arc.clone(),
-                vector_storages_arc.clone(),
-                &payload_index_path,
-                appendable_flag,
-            )?;
-            for (field, payload_schema) in indexed_fields {
-                payload_index.set_indexed(&field, payload_schema, hw_counter)?;
-                check_process_stopped(stopped)?;
-            }
-
-            payload_index.flusher()()?;
-            let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
-
-            // Try to lock GPU device.
-            #[cfg(feature = "gpu")]
-            let gpu_devices_manager = crate::index::hnsw_index::gpu::GPU_DEVICES_MANAGER.read();
-            #[cfg(feature = "gpu")]
-            let gpu_device = gpu_devices_manager
-                .as_ref()
-                .map(|devices_manager| devices_manager.lock_device(stopped))
-                .transpose()?
-                .flatten();
-            #[cfg(not(feature = "gpu"))]
-            let gpu_device = None;
-
-            // Arc permit to share it with each vector store
-            let permit = Arc::new(permit);
-
-            for (vector_name, vector_config) in &segment_config.vector_data {
-                let vector_storage = vector_storages_arc.remove(vector_name).unwrap();
-                let quantized_vectors =
-                    Arc::new(AtomicRefCell::new(quantized_vectors.remove(vector_name)));
-
-                let index = build_vector_index(
-                    vector_config,
-                    VectorIndexOpenArgs {
-                        path: &get_vector_index_path(temp_dir.path(), vector_name),
-                        id_tracker: id_tracker_arc.clone(),
-                        vector_storage: vector_storage.clone(),
-                        payload_index: payload_index_arc.clone(),
-                        quantized_vectors: quantized_vectors.clone(),
-                    },
-                    VectorIndexBuildArgs {
-                        permit: permit.clone(),
-                        old_indices: &old_indices.remove(vector_name).unwrap(),
-                        gpu_device: gpu_device.as_ref(),
-                        stopped,
-                        feature_flags: feature_flags(),
-                    },
-                )?;
-
-                if vector_storage.borrow().is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage.borrow().clear_cache()?;
-                }
-
-                if let Some(quantized_vectors) = quantized_vectors.borrow().as_ref() {
-                    quantized_vectors.clear_cache()?;
-                }
-
-                // Index if always loaded on-disk=true from build function
-                // So we may clear unconditionally
-                index.clear_cache()?;
-            }
-
-            for (vector_name, sparse_vector_config) in &segment_config.sparse_vector_data {
-                let vector_index_path = get_vector_index_path(temp_dir.path(), vector_name);
-
-                let vector_storage_arc = vector_storages_arc.remove(vector_name).unwrap();
-
-                let index = create_sparse_vector_index(SparseVectorIndexOpenArgs {
-                    config: sparse_vector_config.index,
-                    id_tracker: id_tracker_arc.clone(),
-                    vector_storage: vector_storage_arc.clone(),
-                    payload_index: payload_index_arc.clone(),
-                    path: &vector_index_path,
-                    stopped,
-                    tick_progress: || (),
-                })?;
-
-                if sparse_vector_config.storage_type.is_on_disk() {
-                    // If vector storage is expected to be on-disk, we need to clear cache
-                    // to avoid cache pollution
-                    vector_storage_arc.borrow().clear_cache()?;
-                }
-
-                if sparse_vector_config.index.index_type.is_on_disk() {
-                    index.clear_cache()?;
-                }
-            }
-
-            if segment_config.payload_storage_type.is_on_disk() {
-                // If payload storage is expected to be on-disk, we need to clear cache
-                // to avoid cache pollution
-                payload_storage_arc.borrow().clear_cache()?;
-            }
-
-            // Clear cache for payload index to avoid cache pollution
-            payload_index_arc.borrow().clear_cache_if_on_disk()?;
-
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
-            // Finalize the newly created segment by saving config and version
-            Segment::save_state(
-                &SegmentState {
-                    version: Some(version),
-                    config: segment_config,
-                },
-                temp_dir.path(),
-            )?;
-
-            // After version is saved, segment can be loaded on restart
-            SegmentVersion::save(temp_dir.path())?;
-            // All temp data is evicted from RAM
-            (temp_dir, destination_path)
-        };
-
-        // Move fully constructed segment into collection directory and load back to RAM
-        std::fs::rename(temp_dir.into_path(), &destination_path)
-            .describe("Moving segment data after optimization")?;
-
-        let loaded_segment = load_segment(&destination_path, stopped)?.ok_or_else(|| {
-            OperationError::service_error(format!(
-                "Segment loading error: {}",
-                destination_path.display()
-            ))
-        })?;
-        Ok(loaded_segment)
-    }
-
-    fn update_quantization(
-        segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
-        temp_path: &Path,
-        permit: &ResourcePermit,
-        stopped: &AtomicBool,
-    ) -> OperationResult<HashMap<VectorNameBuf, QuantizedVectors>> {
-        let config = segment_config.clone();
-
-        let mut quantized_vectors_map = HashMap::new();
-
-        for (vector_name, vector_info) in vector_storages {
-            let Some(vector_config) = config.vector_data.get(vector_name) else {
-                continue;
-            };
-
-            let is_appendable = vector_config.is_appendable();
-
-            // Don't build quantization for appendable vectors
-            if is_appendable {
-                continue;
-            }
-
-            let max_threads = permit.num_cpus as usize;
-
-            if let Some(quantization) = config.quantization_config(vector_name) {
-                let segment_path = temp_path;
-
-                check_process_stopped(stopped)?;
-
-                let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
-
-                let quantized_vectors = QuantizedVectors::create(
-                    &vector_info.vector_storage,
-                    quantization,
-                    &vector_storage_path,
-                    max_threads,
-                    stopped,
-                )?;
-
-                quantized_vectors_map.insert(vector_name.to_owned(), quantized_vectors);
-            }
-        }
-        Ok(quantized_vectors_map)
-    }
+    // Rest of implementation...
 }
 
 fn uuid_hash<I>(hash: &mut u64, ids: I)
