--- qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual)@@ -3,8 +3,8 @@ use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
+use std::sync::atomic::AtomicBool;
 use std::sync::Arc;
-use std::sync::atomic::AtomicBool;
 
 use ahash::AHasher;
 use atomic_refcell::AtomicRefCell;
@@ -25,21 +25,21 @@     get_vector_storage_path, new_segment_path, open_segment_db, open_vector_storage,
 };
 use crate::common::error_logging::LogError;
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
 use crate::entry::entry_point::SegmentEntry;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
-use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
+use crate::id_tracker::{for_each_unique_point, IdTracker, IdTrackerEnum};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
 use crate::index::{PayloadIndex, VectorIndexEnum};
+use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::PayloadStorage;
-use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
-    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
+    build_vector_index, load_segment, VectorIndexBuildArgs, VectorIndexOpenArgs,
 };
 use crate::types::{
     CompactExtendedPointId, ExtendedPointId, PayloadFieldSchema, PayloadKeyType, SegmentConfig,
@@ -48,6 +48,12 @@ use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
 use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 
+/// Structure with all data required for building vector index
+struct VectorData {
+    vector_storage: VectorStorageEnum,
+    old_indices: Vec<Arc<AtomicRefCell<VectorIndexEnum>>>,
+}
+
 /// Structure for constructing segment out of several other segments
 pub struct SegmentBuilder {
     version: SeqNumberType,
@@ -64,11 +70,6 @@ 
     // Payload key to defragment data to
     defragment_keys: Vec<PayloadKeyType>,
-}
-
-struct VectorData {
-    vector_storage: VectorStorageEnum,
-    old_indices: Vec<Arc<AtomicRefCell<VectorIndexEnum>>>,
 }
 
 impl SegmentBuilder {
@@ -125,7 +126,6 @@                 &sparse_vector_config.storage_type,
                 &stopped,
             )?;
-
             vector_data.insert(
                 vector_name.to_owned(),
                 VectorData {
@@ -163,8 +163,6 @@         self.indexed_fields.insert(field, schema);
     }
 
-    /// Get ordering value from the payload index
-    ///
     /// Ordering value is used to sort points to keep points with the same payload together
     /// Under the assumption that points are queried together, this will reduce the number of
     /// random disk reads.
@@ -206,14 +204,6 @@                         for number in numbers {
                             // Bit-level conversion of f64 to u64 preserves ordering
                             // (for positive numbers)
-                            //
-                            // 0.001 -> 4562254508917369340
-                            // 0.01  -> 4576918229304087675
-                            // 0.05  -> 4587366580439587226
-                            // 0.1   -> 4591870180066957722
-                            // 1     -> 4607182418800017408
-                            // 2     -> 4611686018427387904
-                            // 10    -> 4621819117588971520
                             ordering = ordering.wrapping_add(number.to_bits());
                         }
                     }
@@ -300,10 +290,12 @@                     continue;
                 };
 
-                point_data.ordering = point_data.ordering.wrapping_add(Self::_get_ordering_value(
-                    point_data.internal_id,
-                    payload_indices,
-                ));
+                point_data.ordering = point_data
+                    .ordering
+                    .wrapping_add(Self::_get_ordering_value(
+                        point_data.internal_id,
+                        payload_indices,
+                    ));
             }
         }
 
@@ -352,9 +344,9 @@                 Some(new_internal_range) => {
                     if new_internal_range != &internal_range {
                         return Err(OperationError::service_error(format!(
-                            "Internal ids range mismatch between self segment vectors and other segment vectors\n\
-                                vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
-                        )));
+                                "Internal ids range mismatch between self segment vectors and other segment vectors\n\
+                                 vector_name: {vector_name}, self range: {new_internal_range:?}, other range: {internal_range:?}"
+                            )));
                     }
                 }
                 None => new_internal_range = Some(internal_range),
@@ -399,8 +391,7 @@                             )?;
                             self.id_tracker
                                 .set_internal_version(new_internal_id, point_data.version)?;
-                            self.payload_storage
-                                .clear(existing_internal_id, &hw_counter)?;
+                            self.payload_storage.clear(existing_internal_id, &hw_counter)?;
 
                             existing_internal_id
                         } else {
@@ -424,11 +415,8 @@ 
                 // Propagate payload to new segment
                 if !other_payload.is_empty() {
-                    self.payload_storage.set(
-                        new_internal_id,
-                        &other_payload,
-                        &HardwareCounterCell::disposable(),
-                    )?;
+                    self.payload_storage
+                        .set(new_internal_id, &other_payload, &hw_counter)?;
                 }
             }
         }
@@ -438,6 +426,9 @@                 self.indexed_fields.insert(field, payload_schema);
             }
         }
+
+        self.id_tracker.mapping_flusher()()?;
+        self.id_tracker.versions_flusher()()?;
 
         Ok(true)
     }
@@ -535,6 +526,7 @@                 &payload_index_path,
                 appendable_flag,
             )?;
+
             for (field, payload_schema) in indexed_fields {
                 payload_index.set_indexed(&field, payload_schema, hw_counter)?;
                 check_process_stopped(stopped)?;
@@ -632,10 +624,9 @@             payload_index_arc.borrow().clear_cache_if_on_disk()?;
 
             // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
+            debug_assert!(
+                Arc::strong_count(&permit) == 1,
+                "Must release Resource permit Arc everywhere",
             );
             drop(permit);
 
