--- qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual)@@ -1,5 +1,5 @@ use std::cmp;
-use std::collections::HashMap;
+use std::collections::{HashMap, HashSet};
 use std::hash::{Hash, Hasher};
 use std::ops::Deref;
 use std::path::{Path, PathBuf};
@@ -11,7 +11,6 @@ use bitvec::macros::internal::funty::Integral;
 use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
 use io::storage_version::StorageVersion;
@@ -30,7 +29,7 @@ use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
-use crate::id_tracker::{IdTracker, IdTrackerEnum, for_each_unique_point};
+use crate::id_tracker::{for_each_unique_point, IdTracker, IdTrackerEnum};
 use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
@@ -39,7 +38,7 @@ use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
-    VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
+    build_vector_index, load_segment, VectorIndexBuildArgs, VectorIndexOpenArgs,
 };
 use crate::types::{
     CompactExtendedPointId, ExtendedPointId, PayloadFieldSchema, PayloadKeyType, SegmentConfig,
@@ -196,7 +195,7 @@                 FieldIndex::IntIndex(index) => {
                     if let Some(numbers) = index.get_values(internal_id) {
                         for number in numbers {
-                            ordering = ordering.wrapping_add(number as u64);
+                            ordering = ordering.wrapping_add(*number as u64);
                         }
                     }
                     break;
@@ -222,7 +221,7 @@                 FieldIndex::DatetimeIndex(index) => {
                     if let Some(dates) = index.get_values(internal_id) {
                         for date in dates {
-                            ordering = ordering.wrapping_add(date as u64);
+                            ordering = ordering.wrapping_add(*date as u64);
                         }
                     }
                     break;
@@ -438,6 +437,9 @@                 self.indexed_fields.insert(field, payload_schema);
             }
         }
+
+        self.id_tracker.mapping_flusher()()?;
+        self.id_tracker.versions_flusher()()?;
 
         Ok(true)
     }
@@ -463,7 +465,7 @@ 
             let appendable_flag = segment_config.is_appendable();
 
-            payload_storage.flusher()()?;
+            payload_storage.flusher()?;
             let payload_storage_arc = Arc::new(AtomicRefCell::new(payload_storage));
 
             let id_tracker = match id_tracker {
@@ -481,48 +483,23 @@                 IdTrackerEnum::RocksDbIdTracker(_) => id_tracker,
             };
 
-            id_tracker.mapping_flusher()()?;
-            id_tracker.versions_flusher()()?;
+            id_tracker.mapping_flusher()?;
+            id_tracker.versions_flusher()?;
             let id_tracker_arc = Arc::new(AtomicRefCell::new(id_tracker));
-
-            let mut quantized_vectors = Self::update_quantization(
-                &segment_config,
-                &vector_data,
-                temp_dir.path(),
-                &permit,
-                stopped,
-            )?;
 
             let mut vector_storages_arc = HashMap::new();
             let mut old_indices = HashMap::new();
 
-            for vector_name in segment_config.vector_data.keys() {
+            for vector_name in segment_config.vector_data.keys().chain(segment_config.sparse_vector_data.keys()) {
                 let Some(vector_info) = vector_data.remove(vector_name) else {
                     return Err(OperationError::service_error(format!(
                         "Vector storage for vector name {vector_name} not found on segment build"
                     )));
                 };
 
-                vector_info.vector_storage.flusher()()?;
-
+                vector_info.vector_storage.flusher()?;
                 let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
-                old_indices.insert(vector_name, vector_info.old_indices);
-
-                vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
-            }
-
-            for vector_name in segment_config.sparse_vector_data.keys() {
-                let Some(vector_info) = vector_data.remove(vector_name) else {
-                    return Err(OperationError::service_error(format!(
-                        "Vector storage for vector name {vector_name} not found on sparse segment build"
-                    )));
-                };
-
-                vector_info.vector_storage.flusher()()?;
-
-                let vector_storage_arc = Arc::new(AtomicRefCell::new(vector_info.vector_storage));
-
+                old_indices.insert(vector_name.to_owned(), vector_info.old_indices);
                 vector_storages_arc.insert(vector_name.to_owned(), vector_storage_arc);
             }
 
@@ -535,12 +512,13 @@                 &payload_index_path,
                 appendable_flag,
             )?;
+
             for (field, payload_schema) in indexed_fields {
                 payload_index.set_indexed(&field, payload_schema, hw_counter)?;
                 check_process_stopped(stopped)?;
             }
 
-            payload_index.flusher()()?;
+            payload_index.flusher()?;
             let payload_index_arc = Arc::new(AtomicRefCell::new(payload_index));
 
             // Try to lock GPU device.
@@ -554,6 +532,13 @@                 .flatten();
             #[cfg(not(feature = "gpu"))]
             let gpu_device = None;
+
+            // If GPU is enabled, release all CPU cores except one.
+            if let Some(_gpu_device) = &gpu_device {
+                if permit.num_cpus > 1 {
+                    permit.release_cpu_count(permit.num_cpus - 1);
+                }
+            }
 
             // Arc permit to share it with each vector store
             let permit = Arc::new(permit);
@@ -577,7 +562,6 @@                         old_indices: &old_indices.remove(vector_name).unwrap(),
                         gpu_device: gpu_device.as_ref(),
                         stopped,
-                        feature_flags: feature_flags(),
                     },
                 )?;
 
@@ -665,52 +649,6 @@             ))
         })?;
         Ok(loaded_segment)
-    }
-
-    fn update_quantization(
-        segment_config: &SegmentConfig,
-        vector_storages: &HashMap<VectorNameBuf, VectorData>,
-        temp_path: &Path,
-        permit: &ResourcePermit,
-        stopped: &AtomicBool,
-    ) -> OperationResult<HashMap<VectorNameBuf, QuantizedVectors>> {
-        let config = segment_config.clone();
-
-        let mut quantized_vectors_map = HashMap::new();
-
-        for (vector_name, vector_info) in vector_storages {
-            let Some(vector_config) = config.vector_data.get(vector_name) else {
-                continue;
-            };
-
-            let is_appendable = vector_config.is_appendable();
-
-            // Don't build quantization for appendable vectors
-            if is_appendable {
-                continue;
-            }
-
-            let max_threads = permit.num_cpus as usize;
-
-            if let Some(quantization) = config.quantization_config(vector_name) {
-                let segment_path = temp_path;
-
-                check_process_stopped(stopped)?;
-
-                let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
-
-                let quantized_vectors = QuantizedVectors::create(
-                    &vector_info.vector_storage,
-                    quantization,
-                    &vector_storage_path,
-                    max_threads,
-                    stopped,
-                )?;
-
-                quantized_vectors_map.insert(vector_name.to_owned(), quantized_vectors);
-            }
-        }
-        Ok(quantized_vectors_map)
     }
 }
 
