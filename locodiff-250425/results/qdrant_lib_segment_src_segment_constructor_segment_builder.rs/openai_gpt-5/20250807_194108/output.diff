
index 70dd22b46..228176744 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_expectedoutput.txt (expected):tmp/tmpv4lsn8t1_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_builder.rs_extracted.txt (actual):tmp/tmpysvnqz_0_actual.txt	
@@ -14,8 +14,6 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::flags::feature_flags;
 use common::small_uint::U24;
 use common::types::PointOffsetType;
-use io::storage_version::StorageVersion;
-use itertools::Itertools;
 use tempfile::TempDir;
 use uuid::Uuid;
 
@@ -35,8 +33,8 @@ use crate::index::field_index::FieldIndex;
 use crate::index::sparse_index::sparse_vector_index::SparseVectorIndexOpenArgs;
 use crate::index::struct_payload_index::StructPayloadIndex;
 use crate::index::{PayloadIndex, VectorIndexEnum};
-use crate::payload_storage::PayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
+use crate::payload_storage::PayloadStorage;
 use crate::segment::{Segment, SegmentVersion};
 use crate::segment_constructor::{
     VectorIndexBuildArgs, VectorIndexOpenArgs, build_vector_index, load_segment,
@@ -125,7 +123,6 @@ impl SegmentBuilder {
                 &sparse_vector_config.storage_type,
                 &stopped,
             )?;
-
             vector_data.insert(
                 vector_name.to_owned(),
                 VectorData {
@@ -277,7 +274,7 @@ impl SegmentBuilder {
         }
 
         let mut points_to_insert = Vec::new();
-        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect_vec();
+        let locked_id_trackers = segments.iter().map(|s| s.id_tracker.borrow()).collect::<Vec<_>>();
         for_each_unique_point(locked_id_trackers.iter().map(|i| i.deref()), |item| {
             points_to_insert.push(PointData {
                 external_id: CompactExtendedPointId::from(item.external_id),
@@ -427,7 +424,7 @@ impl SegmentBuilder {
                     self.payload_storage.set(
                         new_internal_id,
                         &other_payload,
-                        &HardwareCounterCell::disposable(),
+                        &hw_counter,
                     )?;
                 }
             }
@@ -631,14 +628,6 @@ impl SegmentBuilder {
             // Clear cache for payload index to avoid cache pollution
             payload_index_arc.borrow().clear_cache_if_on_disk()?;
 
-            // We're done with CPU-intensive tasks, release CPU permit
-            debug_assert_eq!(
-                Arc::strong_count(&permit),
-                1,
-                "Must release CPU permit Arc everywhere",
-            );
-            drop(permit);
-
             // Finalize the newly created segment by saving config and version
             Segment::save_state(
                 &SegmentState {
