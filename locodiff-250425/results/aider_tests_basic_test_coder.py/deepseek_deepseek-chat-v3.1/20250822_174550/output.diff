
index c051e53fd..0d4926c5f 100644
--- a/aider_tests_basic_test_coder.py_expectedoutput.txt (expected):tmp/tmpca4_acku_expected.txt	
+++ b/aider_tests_basic_test_coder.py_extracted.txt (actual):tmp/tmpdk35d8vb_actual.txt	
@@ -172,6 +172,24 @@ class TestCoder(unittest.TestCase):
 
             self.assertEqual(coder.abs_fnames, set([str(fname.resolve())]))
 
+    def test_check_for_subdir_mention(self):
+        with GitTemporaryDirectory():
+            io = InputOutput(pretty=False, yes=True)
+            coder = Coder.create(self.GPT35, None, io)
+
+            fname = Path("other") / "file1.txt"
+            fname.parent.mkdir(parents=True, exist_ok=True)
+            fname.touch()
+
+            mock = MagicMock()
+            mock.return_value = set([str(fname)])
+            coder.repo.get_tracked_files = mock
+
+            # Call the check_for_file_mentions method
+            coder.check_for_file_mentions(f"Please check `{fname}`")
+
+            self.assertEqual(coder.abs_fnames, set([str(fname.resolve())]))
+
     def test_skip_duplicate_basename_mentions(self):
         with GitTemporaryDirectory():
             io = InputOutput(pretty=False, yes=True)
@@ -267,24 +285,6 @@ class TestCoder(unittest.TestCase):
             # Assert that file1.txt is in ignore_mentions
             self.assertIn("file1.txt", coder.ignore_mentions)
 
-    def test_check_for_subdir_mention(self):
-        with GitTemporaryDirectory():
-            io = InputOutput(pretty=False, yes=True)
-            coder = Coder.create(self.GPT35, None, io)
-
-            fname = Path("other") / "file1.txt"
-            fname.parent.mkdir(parents=True, exist_ok=True)
-            fname.touch()
-
-            mock = MagicMock()
-            mock.return_value = set([str(fname)])
-            coder.repo.get_tracked_files = mock
-
-            # Call the check_for_file_mentions method
-            coder.check_for_file_mentions(f"Please check `{fname}`")
-
-            self.assertEqual(coder.abs_fnames, set([str(fname.resolve())]))
-
     def test_get_file_mentions_various_formats(self):
         with GitTemporaryDirectory():
             io = InputOutput(pretty=False, yes=True)
@@ -765,7 +765,7 @@ three
             io = InputOutput(yes=True)
             coder = Coder.create(self.GPT35, "diff", io=io, fnames=[str(fname)])
 
-            def mock_send(*args, **kwargs):
+            def mock_send(*args, ****kwargs):
                 coder.partial_response_content = f"""
 Do this:
 
@@ -1076,9 +1076,7 @@ This command will print 'Hello, World!' to the console."""
                 },
                 {
                     "role": "user",
-                    "content": (
-                        "I need to write a function that calculates the factorial of a number."
-                    ),
+                    "content": ("I need to write a function that calculates the factorial of a number."),
                 },
                 {
                     "role": "assistant",
@@ -1098,9 +1096,8 @@ This command will print 'Hello, World!' to the console."""
                 "max_input_tokens": 4000,
                 "max_output_tokens": 1000,
             }
-            coder.partial_response_content = (
-                "Here's an optimized version of the factorial function:"
-            )
+            coder.partial_response_content = ("Here's an optimized version of the factorial function:")
+
             coder.io.tool_error = MagicMock()
 
             # Call the method
@@ -1270,6 +1267,10 @@ This command will print 'Hello, World!' to the console."""
                 coder.auto_accept_architect = False
                 coder.verbose = False
                 coder.total_cost = 0
+                coder.cur_messages = []
+                coder.done_messages = []
+                coder.summarizer = MagicMock()
+                coder.summarizer.too_big.return_value = False
 
                 # Mock editor_coder creation and execution
                 mock_editor = MagicMock()
