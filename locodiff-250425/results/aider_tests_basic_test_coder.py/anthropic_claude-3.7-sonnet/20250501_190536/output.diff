--- aider_tests_basic_test_coder.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_coder.py_extracted.txt (actual)@@ -1004,48 +1004,6 @@             self.assertEqual(result, message)
             coder.commands.scraper.scrape.assert_not_called()
 
-    def test_unknown_edit_format_exception(self):
-        # Test the exception message format
-        invalid_format = "invalid_format"
-        valid_formats = ["diff", "whole", "map"]
-        exc = UnknownEditFormat(invalid_format, valid_formats)
-        expected_msg = (
-            f"Unknown edit format {invalid_format}. Valid formats are: {', '.join(valid_formats)}"
-        )
-        self.assertEqual(str(exc), expected_msg)
-
-    def test_unknown_edit_format_creation(self):
-        # Test that creating a Coder with invalid edit format raises the exception
-        io = InputOutput(yes=True)
-        invalid_format = "invalid_format"
-
-        with self.assertRaises(UnknownEditFormat) as cm:
-            Coder.create(self.GPT35, invalid_format, io=io)
-
-        exc = cm.exception
-        self.assertEqual(exc.edit_format, invalid_format)
-        self.assertIsInstance(exc.valid_formats, list)
-        self.assertTrue(len(exc.valid_formats) > 0)
-
-    def test_system_prompt_prefix(self):
-        # Test that system_prompt_prefix is properly set and used
-        io = InputOutput(yes=True)
-        test_prefix = "Test prefix. "
-
-        # Create a model with system_prompt_prefix
-        model = Model("gpt-3.5-turbo")
-        model.system_prompt_prefix = test_prefix
-
-        coder = Coder.create(model, None, io=io)
-
-        # Get the formatted messages
-        chunks = coder.format_messages()
-        messages = chunks.all_messages()
-
-        # Check if the system message contains our prefix
-        system_message = next(msg for msg in messages if msg["role"] == "system")
-        self.assertTrue(system_message["content"].startswith(test_prefix))
-
     def test_coder_create_with_new_file_oserror(self):
         with GitTemporaryDirectory():
             io = InputOutput(yes=True)
@@ -1116,6 +1074,25 @@             self.assertIn("Output tokens:", error_message)
             self.assertIn("Total tokens:", error_message)
 
+    def test_system_prompt_prefix(self):
+        # Test that system_prompt_prefix is properly set and used
+        io = InputOutput(yes=True)
+        test_prefix = "Test prefix. "
+
+        # Create a model with system_prompt_prefix
+        model = Model("gpt-3.5-turbo")
+        model.system_prompt_prefix = test_prefix
+
+        coder = Coder.create(model, None, io=io)
+
+        # Get the formatted messages
+        chunks = coder.format_messages()
+        messages = chunks.all_messages()
+
+        # Check if the system message contains our prefix
+        system_message = next(msg for msg in messages if msg["role"] == "system")
+        self.assertTrue(system_message["content"].startswith(test_prefix))
+
     def test_keyboard_interrupt_handling(self):
         with GitTemporaryDirectory():
             io = InputOutput(yes=True)
@@ -1180,6 +1157,29 @@             # Verify message structure remains valid
             sanity_check_messages(coder.cur_messages)
             self.assertEqual(coder.cur_messages[-1]["role"], "assistant")
+
+    def test_unknown_edit_format_exception(self):
+        # Test the exception message format
+        invalid_format = "invalid_format"
+        valid_formats = ["diff", "whole", "map"]
+        exc = UnknownEditFormat(invalid_format, valid_formats)
+        expected_msg = (
+            f"Unknown edit format {invalid_format}. Valid formats are: {', '.join(valid_formats)}"
+        )
+        self.assertEqual(str(exc), expected_msg)
+
+    def test_unknown_edit_format_creation(self):
+        # Test that creating a Coder with invalid edit format raises the exception
+        io = InputOutput(yes=True)
+        invalid_format = "invalid_format"
+
+        with self.assertRaises(UnknownEditFormat) as cm:
+            Coder.create(self.GPT35, invalid_format, io=io)
+
+        exc = cm.exception
+        self.assertEqual(exc.edit_format, invalid_format)
+        self.assertIsInstance(exc.valid_formats, list)
+        self.assertTrue(len(exc.valid_formats) > 0)
 
     def test_architect_coder_auto_accept_true(self):
         with GitTemporaryDirectory():
@@ -1270,6 +1270,10 @@                 coder.auto_accept_architect = False
                 coder.verbose = False
                 coder.total_cost = 0
+                coder.cur_messages = []
+                coder.done_messages = []
+                coder.summarizer = MagicMock()
+                coder.summarizer.too_big.return_value = False
 
                 # Mock editor_coder creation and execution
                 mock_editor = MagicMock()
