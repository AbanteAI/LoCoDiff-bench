
index 96b6a24d..92168566 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected):tmp/tmp_crwpixp_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual):tmp/tmpydurovhb_actual.txt	
@@ -15,8 +15,8 @@ import {
 	useDialogs,
 	useEditor,
 	useEvent,
+	useValue,
 } from 'tldraw'
-import { ThemeUpdater } from '../../../components/ThemeUpdater/ThemeUpdater'
 import { assetUrls } from '../../../utils/assetUrls'
 import { MULTIPLAYER_SERVER } from '../../../utils/config'
 import { createAssetFromUrl } from '../../../utils/createAssetFromUrl'
@@ -34,7 +34,6 @@ import { TlaEditorMenuPanel } from './editor-components/TlaEditorMenuPanel'
 import { TlaEditorSharePanel } from './editor-components/TlaEditorSharePanel'
 import { TlaEditorTopPanel } from './editor-components/TlaEditorTopPanel'
 import { SneakyTldrawFileDropHandler } from './sneaky/SneakyFileDropHandler'
-import { SneakySetDocumentTitle } from './sneaky/SneakySetDocumentTitle'
 import { useFileEditorOverrides } from './useFileEditorOverrides'
 
 /** @internal */
@@ -56,12 +55,9 @@ interface TlaEditorProps {
 export function TlaEditor(props: TlaEditorProps) {
 	// force re-mount when the file slug changes to prevent state from leaking between files
 	return (
-		<>
-			<SneakySetDocumentTitle />
-			<ReadyWrapper key={props.fileSlug}>
-				<TlaEditorInner {...props} key={props.fileSlug} />
-			</ReadyWrapper>
-		</>
+		<ReadyWrapper key={props.fileSlug}>
+			<TlaEditorInner {...props} key={props.fileSlug} />
+		</ReadyWrapper>
 	)
 }
 
@@ -120,6 +116,7 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 			} else if (deepLink) {
 				editor.navigateToDeepLink(parseDeepLinkString(deepLink))
 			}
+
 			const sessionState$ = createSessionStateSnapshotSignal(editor.store)
 			const updateSessionState = throttle((state: TLSessionStateSnapshot) => {
 				app.onFileSessionStateUpdate(fileId, state)
@@ -176,39 +173,6 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 		userInfo: app?.tlUser.userPreferences,
 	})
 
-	// Handle entering and exiting the file, with some protection against rapid enters/exits
-	useEffect(() => {
-		if (!app) return
-		if (store.status !== 'synced-remote') return
-		let didEnter = false
-		let timer: any
-
-		const fileState = app.getFileState(fileId)
-
-		if (fileState && fileState.firstVisitAt) {
-			// If there's a file state already then wait a second before marking it as entered
-			timer = tltime.setTimeout(
-				'file enter timer',
-				() => {
-					app.onFileEnter(fileId)
-					didEnter = true
-				},
-				1000
-			)
-		} else {
-			// If there's not a file state yet (i.e. if we're visiting this for the first time) then do an enter
-			app.onFileEnter(fileId)
-			didEnter = true
-		}
-
-		return () => {
-			clearTimeout(timer)
-			if (didEnter) {
-				app.onFileExit(fileId)
-			}
-		}
-	}, [app, fileId, store.status])
-
 	const overrides = useFileEditorOverrides({ fileSlug })
 
 	return (
@@ -226,15 +190,31 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 				overrides={overrides}
 				getShapeVisibility={getShapeVisibility}
 			>
-				<ThemeUpdater />
-				<SneakyDarkModeSync />
-				{app && <SneakyTldrawFileDropHandler />}
-				<SneakyFileUpdateHandler fileId={fileId} />
+				<InjectStuff app={app} fileId={fileId} remountImageShapes={remountImageShapes} />
 			</Tldraw>
 		</TlaEditorWrapper>
 	)
 }
 
+function InjectStuff({
+	app,
+	fileId,
+	remountImageShapes,
+}: {
+	app: ReturnType<typeof useMaybeApp> | null
+	fileId: string
+	remountImageShapes: () => void
+}) {
+	return (
+		<>
+			<ThemeUpdater />
+			<SneakyDarkModeSync />
+			{app && <SneakyTldrawFileDropHandler />}
+			<SneakyFileUpdateHandler fileId={fileId} />
+		</>
+	)
+}
+
 function SneakyFileUpdateHandler({ fileId }: { fileId: string }) {
 	const app = useMaybeApp()
 	const editor = useEditor()
