
index 96b6a24d9..5da8d40c7 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected):tmp/tmp8x5w_cit_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual):tmp/tmpeos_dhhw_actual.txt	
@@ -1,20 +1,23 @@
 import { useSync } from '@tldraw/sync'
-import { useCallback, useEffect, useMemo } from 'react'
+import { useCallback, useEffect } from 'react'
 import {
 	Editor,
 	TLComponents,
 	TLSessionStateSnapshot,
 	TLUiDialogsContextType,
 	Tldraw,
+	assert,
 	createSessionStateSnapshotSignal,
 	parseDeepLinkString,
 	react,
 	throttle,
 	tltime,
 	useAtom,
+	useCollaborationStatus,
 	useDialogs,
 	useEditor,
 	useEvent,
+	useValue,
 } from 'tldraw'
 import { ThemeUpdater } from '../../../components/ThemeUpdater/ThemeUpdater'
 import { assetUrls } from '../../../utils/assetUrls'
@@ -54,6 +57,11 @@ interface TlaEditorProps {
 }
 
 export function TlaEditor(props: TlaEditorProps) {
+	if (props.fileOpenState?.mode === 'duplicate') {
+		assert(props.fileOpenState.duplicateId, 'duplicateId is required when mode is duplicate')
+	} else {
+		assert(!props.fileOpenState.duplicateId, 'duplicateId is not allowed when mode is not duplicate')
+	}
 	// force re-mount when the file slug changes to prevent state from leaking between files
 	return (
 		<>
@@ -123,7 +131,7 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 			const sessionState$ = createSessionStateSnapshotSignal(editor.store)
 			const updateSessionState = throttle((state: TLSessionStateSnapshot) => {
 				app.onFileSessionStateUpdate(fileId, state)
-			}, 5000)
+			}, 500)
 			// don't want to update if they only open the file and didn't look around
 			let firstTime = true
 			const cleanup = react('update session state', () => {
@@ -247,7 +255,7 @@ function SneakyFileUpdateHandler({ fileId }: { fileId: string }) {
 			// This is used to update the lastEditAt time in the database, and to let the local
 			// room know that an edit has been made.
 			// It doesn't need to be super fast or accurate so we can throttle it a lot
-			10_000
+			5000
 		)
 		const unsub = editor.store.listen(onChange, { scope: 'document', source: 'user' })
 		return () => {
