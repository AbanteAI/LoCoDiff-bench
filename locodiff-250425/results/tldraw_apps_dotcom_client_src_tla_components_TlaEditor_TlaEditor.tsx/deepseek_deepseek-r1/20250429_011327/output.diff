--- tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual)@@ -1,3 +1,4 @@+import { useAuth } from '@clerk/clerk-react'
 import { useSync } from '@tldraw/sync'
 import { useCallback, useEffect, useMemo } from 'react'
 import {
@@ -54,7 +55,6 @@ }
 
 export function TlaEditor(props: TlaEditorProps) {
-	// force re-mount when the file slug changes to prevent state from leaking between files
 	return (
 		<>
 			<SneakySetDocumentTitle />
@@ -74,15 +74,8 @@ 	const setIsReady = useSetIsReady()
 
 	const dialogs = useDialogs()
-	// need to wrap this in a useEvent to prevent the context id from changing on us
-	const addDialog: TLUiDialogsContextType['addDialog'] = useEvent((dialog) =>
-		dialogs.addDialog(dialog)
-	)
-
-	// We cycle this flag to cause shapes to remount when slurping images/videos fails.
-	// Because in that case we want to show the failure state for the images/videos.
-	// i.e. where it appears that they are not present. so the user knows which ones failed.
-	// There's probably a better way of doing this but I couldn't think of one.
+	const addDialog: TLUiDialogsContextType['addDialog'] = useEvent((dialog) => dialogs.addDialog(dialog))
+
 	const hideAllShapes = useAtom('hideAllShapes', false)
 	const getShapeVisibility = useCallback(
 		() => (hideAllShapes.get() ? 'hidden' : 'inherit'),
@@ -99,10 +92,7 @@ 		(editor: Editor) => {
 			;(window as any).app = app
 			;(window as any).editor = editor
-			// Register the editor globally
 			globalEditor.set(editor)
-
-			// Register the external asset handler
 			editor.registerExternalAssetHandler('url', createAssetFromUrl)
 
 			if (!app) {
@@ -124,7 +114,6 @@ 			const updateSessionState = throttle((state: TLSessionStateSnapshot) => {
 				app.onFileSessionStateUpdate(fileId, state)
 			}, 5000)
-			// don't want to update if they only open the file and didn't look around
 			let firstTime = true
 			const cleanup = react('update session state', () => {
 				const state = sessionState$.get()
@@ -176,7 +165,6 @@ 		userInfo: app?.tlUser.userPreferences,
 	})
 
-	// Handle entering and exiting the file, with some protection against rapid enters/exits
 	useEffect(() => {
 		if (!app) return
 		if (store.status !== 'synced-remote') return
@@ -186,7 +174,6 @@ 		const fileState = app.getFileState(fileId)
 
 		if (fileState && fileState.firstVisitAt) {
-			// If there's a file state already then wait a second before marking it as entered
 			timer = tltime.setTimeout(
 				'file enter timer',
 				() => {
@@ -196,7 +183,6 @@ 				1000
 			)
 		} else {
-			// If there's not a file state yet (i.e. if we're visiting this for the first time) then do an enter
 			app.onFileEnter(fileId)
 			didEnter = true
 		}
@@ -244,9 +230,6 @@ 				if (!app) return
 				app.onFileEdit(fileId)
 			},
-			// This is used to update the lastEditAt time in the database, and to let the local
-			// room know that an edit has been made.
-			// It doesn't need to be super fast or accurate so we can throttle it a lot
 			10_000
 		)
 		const unsub = editor.store.listen(onChange, { scope: 'document', source: 'user' })
