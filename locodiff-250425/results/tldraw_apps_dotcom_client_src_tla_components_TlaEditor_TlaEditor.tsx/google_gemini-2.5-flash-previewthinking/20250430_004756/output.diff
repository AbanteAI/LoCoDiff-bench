--- tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected)+++ tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual)@@ -1,20 +1,36 @@+import { useAuth } from '@clerk/clerk-react'
+import { TlaFileOpenMode } from '@tldraw/dotcom-shared'
 import { useSync } from '@tldraw/sync'
+import { fileSave } from 'browser-fs-access'
 import { useCallback, useEffect, useMemo } from 'react'
+import { Helmet } from 'react-helmet-async'
+import { useParams } from 'react-router-dom'
 import {
 	Editor,
+	OfflineIndicator,
 	TLComponents,
+	TLDRAW_FILE_EXTENSION,
 	TLSessionStateSnapshot,
+	TLStore,
 	TLUiDialogsContextType,
+	TLUiOverrides,
 	Tldraw,
+	TldrawUiMenuGroup,
+	TldrawUiMenuItem,
+	assert,
 	createSessionStateSnapshotSignal,
 	parseDeepLinkString,
 	react,
+	serializeTldrawJsonBlob,
 	throttle,
 	tltime,
+	useActions,
 	useAtom,
+	useCollaborationStatus,
 	useDialogs,
 	useEditor,
 	useEvent,
+	useValue,
 } from 'tldraw'
 import { ThemeUpdater } from '../../../components/ThemeUpdater/ThemeUpdater'
 import { assetUrls } from '../../../utils/assetUrls'
@@ -22,9 +38,12 @@ import { createAssetFromUrl } from '../../../utils/createAssetFromUrl'
 import { globalEditor } from '../../../utils/globalEditor'
 import { multiplayerAssetStore } from '../../../utils/multiplayerAssetStore'
+import { SAVE_FILE_COPY_ACTION } from '../../../utils/useFileSystem'
 import { useHandleUiEvents } from '../../../utils/useHandleUiEvent'
+import { defineMessages, useMsg } from '../../app/i18n'
 import { useMaybeApp } from '../../hooks/useAppState'
 import { ReadyWrapper, useSetIsReady } from '../../hooks/useIsReady'
+import { getSnapshotsFromDroppedTldrawFiles } from '../../hooks/useTldrFileDrop'
 import { useTldrawUser } from '../../hooks/useUser'
 import { maybeSlurp } from '../../utils/slurping'
 import { SneakyDarkModeSync } from './SneakyDarkModeSync'
@@ -36,6 +55,12 @@ import { SneakyTldrawFileDropHandler } from './sneaky/SneakyFileDropHandler'
 import { SneakySetDocumentTitle } from './sneaky/SneakySetDocumentTitle'
 import { useFileEditorOverrides } from './useFileEditorOverrides'
+import styles from './editor.module.css'
+
+const messages = defineMessages({
+	file: { defaultMessage: 'File' },
+	untitledProject: { defaultMessage: 'Untitled file' },
+})
 
 /** @internal */
 export const components: TLComponents = {
@@ -49,11 +74,18 @@ 
 interface TlaEditorProps {
 	fileSlug: string
+	mode?: TlaFileOpenMode
+	duplicateId?: string
 	isEmbed?: boolean
 	deepLinks?: boolean
 }
 
 export function TlaEditor(props: TlaEditorProps) {
+	if (props.mode === 'duplicate') {
+		assert(props.duplicateId, 'duplicateId is required when mode is duplicate')
+	} else {
+		assert(!props.duplicateId, 'duplicateId is not allowed when mode is not duplicate')
+	}
 	// force re-mount when the file slug changes to prevent state from leaking between files
 	return (
 		<>
@@ -65,7 +97,7 @@ 	)
 }
 
-function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
+function TlaEditorInner({ fileSlug, mode, deepLinks, duplicateId }: TlaEditorProps) {
 	const handleUiEvent = useHandleUiEvents()
 	const app = useMaybeApp()
 
@@ -170,8 +202,15 @@ 			if (hasUser) {
 				url.searchParams.set('accessToken', await getUserToken())
 			}
+			if (mode) {
+				url.searchParams.set('mode', mode)
+				if (mode === 'duplicate') {
+					assert(duplicateId, 'duplicateId is required when mode is duplicate')
+					url.searchParams.set('duplicateId', duplicateId)
+				}
+			}
 			return url.toString()
-		}, [fileSlug, hasUser, getUserToken]),
+		}, [fileSlug, hasUser, getUserToken, mode, duplicateId]),
 		assets,
 		userInfo: app?.tlUser.userPreferences,
 	})
@@ -212,7 +251,7 @@ 	const overrides = useFileEditorOverrides({ fileSlug })
 
 	return (
-		<TlaEditorWrapper>
+		<TlaEditorWrapper data-testid="tla-editor">
 			<Tldraw
 				className="tla-editor"
 				store={store}
