
index 96b6a24d..f36fb4f6 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected):tmp/tmptxs4q5bg_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual):tmp/tmpgk_3k_g0_actual.txt	
@@ -1,3 +1,4 @@
+import { TlaFileOpenMode } from '@tldraw/dotcom-shared'
 import { useSync } from '@tldraw/sync'
 import { useCallback, useEffect, useMemo } from 'react'
 import {
@@ -7,7 +8,6 @@ import {
 	TLUiDialogsContextType,
 	Tldraw,
 	createSessionStateSnapshotSignal,
-	parseDeepLinkString,
 	react,
 	throttle,
 	tltime,
@@ -30,6 +30,7 @@ import { maybeSlurp } from '../../utils/slurping'
 import { SneakyDarkModeSync } from './SneakyDarkModeSync'
 import { TlaEditorWrapper } from './TlaEditorWrapper'
 import { TlaEditorErrorFallback } from './editor-components/TlaEditorErrorFallback'
+import { TlaEditorKeyboardShortcutsDialog } from './editor-components/TlaEditorKeyboardShortcutsDialog'
 import { TlaEditorMenuPanel } from './editor-components/TlaEditorMenuPanel'
 import { TlaEditorSharePanel } from './editor-components/TlaEditorSharePanel'
 import { TlaEditorTopPanel } from './editor-components/TlaEditorTopPanel'
@@ -40,6 +41,7 @@ import { useFileEditorOverrides } from './useFileEditorOverrides'
 /** @internal */
 export const components: TLComponents = {
 	ErrorFallback: TlaEditorErrorFallback,
+	KeyboardShortcutsDialog: TlaEditorKeyboardShortcutsDialog,
 	MenuPanel: TlaEditorMenuPanel,
 	TopPanel: TlaEditorTopPanel,
 	SharePanel: TlaEditorSharePanel,
@@ -65,14 +67,13 @@ export function TlaEditor(props: TlaEditorProps) {
 	)
 }
 
-function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
+function TlaEditorInner({ fileSlug, isEmbed, deepLinks }: TlaEditorProps) {
 	const handleUiEvent = useHandleUiEvents()
 	const app = useMaybeApp()
 
 	const fileId = fileSlug
 
 	const setIsReady = useSetIsReady()
-
 	const dialogs = useDialogs()
 	// need to wrap this in a useEvent to prevent the context id from changing on us
 	const addDialog: TLUiDialogsContextType['addDialog'] = useEvent((dialog) =>
@@ -111,14 +112,11 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 			}
 
 			const fileState = app.getFileState(fileId)
-			const deepLink = new URLSearchParams(window.location.search).get('d')
-			if (fileState?.lastSessionState && !deepLink) {
+			if (fileState?.lastSessionState) {
 				editor.loadSnapshot(
 					{ session: JSON.parse(fileState.lastSessionState.trim() || 'null') },
 					{ forceOverwriteSessionState: true }
 				)
-			} else if (deepLink) {
-				editor.navigateToDeepLink(parseDeepLinkString(deepLink))
 			}
 			const sessionState$ = createSessionStateSnapshotSignal(editor.store)
 			const updateSessionState = throttle((state: TLSessionStateSnapshot) => {
@@ -156,10 +154,6 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 	)
 
 	const user = useTldrawUser()
-	const getUserToken = useEvent(async () => {
-		return (await user?.getToken()) ?? 'not-logged-in'
-	})
-	const hasUser = !!user
 	const assets = useMemo(() => {
 		return multiplayerAssetStore(() => fileId)
 	}, [fileId])
@@ -167,11 +161,11 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 	const store = useSync({
 		uri: useCallback(async () => {
 			const url = new URL(`${MULTIPLAYER_SERVER}/app/file/${fileSlug}`)
-			if (hasUser) {
-				url.searchParams.set('accessToken', await getUserToken())
+			if (user) {
+				url.searchParams.set('accessToken', await user.getToken())
 			}
 			return url.toString()
-		}, [fileSlug, hasUser, getUserToken]),
+		}, [fileSlug, user]),
 		assets,
 		userInfo: app?.tlUser.userPreferences,
 	})
@@ -235,6 +229,31 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 	)
 }
 
+function SneakyTldrawFileDropHandler() {
+	const editor = useEditor()
+	const app = useMaybeApp()
+	const auth = useAuth()
+	useEffect(() => {
+		if (!auth) return
+		if (!app) return
+		const defaultOnDrop = editor.externalContentHandlers['files']
+		editor.registerExternalContentHandler('files', async (content) => {
+			const { files } = content
+			const tldrawFiles = files.filter((file) => file.name.endsWith('.tldr'))
+			if (tldrawFiles.length > 0) {
+				const snapshots = await getSnapshotsFromDroppedTldrawFiles(editor, tldrawFiles)
+				if (!snapshots.length) return
+				const token = await auth.getToken()
+				if (!token) return
+				await app.createFilesFromTldrFiles(snapshots, token)
+			} else {
+				defaultOnDrop?.(content)
+			}
+		})
+	}, [editor, app, auth])
+	return null
+}
+
 function SneakyFileUpdateHandler({ fileId }: { fileId: string }) {
 	const app = useMaybeApp()
 	const editor = useEditor()
