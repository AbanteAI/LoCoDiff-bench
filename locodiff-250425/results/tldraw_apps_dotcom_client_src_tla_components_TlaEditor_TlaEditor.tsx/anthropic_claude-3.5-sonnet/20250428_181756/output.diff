
index 96b6a24d..f92242c3 100644
--- a/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_expectedoutput.txt (expected):tmp/tmp3o3df9ln_expected.txt	
+++ b/tldraw_apps_dotcom_client_src_tla_components_TlaEditor_TlaEditor.tsx_extracted.txt (actual):tmp/tmpa32d2wba_actual.txt	
@@ -13,7 +13,7 @@ import {
 	tltime,
 	useAtom,
 	useDialogs,
-	useEditor,
+	useEditor, 
 	useEvent,
 } from 'tldraw'
 import { ThemeUpdater } from '../../../components/ThemeUpdater/ThemeUpdater'
@@ -34,7 +34,6 @@ import { TlaEditorMenuPanel } from './editor-components/TlaEditorMenuPanel'
 import { TlaEditorSharePanel } from './editor-components/TlaEditorSharePanel'
 import { TlaEditorTopPanel } from './editor-components/TlaEditorTopPanel'
 import { SneakyTldrawFileDropHandler } from './sneaky/SneakyFileDropHandler'
-import { SneakySetDocumentTitle } from './sneaky/SneakySetDocumentTitle'
 import { useFileEditorOverrides } from './useFileEditorOverrides'
 
 /** @internal */
@@ -54,10 +53,8 @@ interface TlaEditorProps {
 }
 
 export function TlaEditor(props: TlaEditorProps) {
-	// force re-mount when the file slug changes to prevent state from leaking between files
 	return (
 		<>
-			<SneakySetDocumentTitle />
 			<ReadyWrapper key={props.fileSlug}>
 				<TlaEditorInner {...props} key={props.fileSlug} />
 			</ReadyWrapper>
@@ -74,15 +71,10 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 	const setIsReady = useSetIsReady()
 
 	const dialogs = useDialogs()
-	// need to wrap this in a useEvent to prevent the context id from changing on us
 	const addDialog: TLUiDialogsContextType['addDialog'] = useEvent((dialog) =>
 		dialogs.addDialog(dialog)
 	)
 
-	// We cycle this flag to cause shapes to remount when slurping images/videos fails.
-	// Because in that case we want to show the failure state for the images/videos.
-	// i.e. where it appears that they are not present. so the user knows which ones failed.
-	// There's probably a better way of doing this but I couldn't think of one.
 	const hideAllShapes = useAtom('hideAllShapes', false)
 	const getShapeVisibility = useCallback(
 		() => (hideAllShapes.get() ? 'hidden' : 'inherit'),
@@ -99,10 +91,8 @@ function TlaEditorInner({ fileSlug, deepLinks }: TlaEditorProps) {
 		(editor: Editor) => {
 			;(window as any).app = app
 			;(window as any).editor = editor
-			// Register the editor globally
 			globalEditor.set(editor)
 
-			// Register the external asset handler
 			editor.registerExternalAssetHandler('url', createAssetFromUrl)
 
 			if (!app) {
