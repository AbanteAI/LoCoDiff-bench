
index 4e5c39ca..bc4988d9 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmpj553ee_5_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpskx0paip_actual.txt	
@@ -1,5 +1,4 @@
-#![cfg_attr(not(feature = "testing"), allow(unused_imports))]
-
+#[cfg_attr(not(feature = "testing"), allow(unused_imports))]
 use std::cell::RefCell;
 use std::collections::HashMap;
 use std::ops::Deref;
@@ -9,7 +8,7 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -153,7 +152,7 @@ where
                 .any(|object| {
                     check_payload(
                         Box::new(|| OwnedPayloadRef::from(object)),
-                        None,            // HasId check in nested fields is not supported
+                        None, // HasId check in nested fields is not supported
                         &HashMap::new(), // HasVector check in nested fields is not supported
                         &nested.nested.filter,
                         point_id,
@@ -214,13 +213,22 @@ where
                     }
                     index_checked = true;
                     // If index check of the condition returned something, we don't need to check
-                    // other indexes
+                    // other indexes.
+                    //
+                    // Example: user checks if field >= 5. Index for field can say: point has values
+                    // [1, 10]. If this index can handle >=5 check, then it already returns true.
+                    // If it replies: point has values [1, 10] and cannot handle >=5, then the flag
+                    // index_checked is true.
                     break;
                 }
             }
             if !index_checked {
                 // If none of the indexes returned anything, we need to check the condition
-                // against the payload
+                // against the payload.
+                //
+                // Example: The only index available is a Keyword field index for numeric values.
+                // User is querying for a numeric field. In this case index.special_check_condition
+                // will return None, and we will end up here, verifying the filter against the payload.
                 if field_condition.check(p) {
                     return true;
                 }
@@ -275,10 +283,10 @@ impl ConditionChecker for SimpleConditionChecker {
                 if payload_ref_cell.borrow().is_none() {
                     let payload_ptr = match payload_storage_guard.deref() {
                         PayloadStorageEnum::InMemoryPayloadStorage(s) => {
-                            s.payload_ptr(point_id).map(|x| x.into())
+                            s.payload_ptr(point_id).map(Into::into)
                         }
                         PayloadStorageEnum::SimplePayloadStorage(s) => {
-                            s.payload_ptr(point_id).map(|x| x.into())
+                            s.payload_ptr(point_id).map(Into::into)
                         }
                         PayloadStorageEnum::OnDiskPayloadStorage(s) => {
                             // Warn: Possible panic here
@@ -296,7 +304,7 @@ impl ConditionChecker for SimpleConditionChecker {
                             // Which may lead to slowdown and assumes a lot of changes.
                             s.read_payload(point_id, &hw_counter)
                                 .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
-                                .map(|x| x.into())
+                                .map(Into::into)
                         }
                         PayloadStorageEnum::MmapPayloadStorage(s) => {
                             let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
@@ -329,13 +337,13 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
+    use crate::payload_storage::PayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -352,7 +360,7 @@ mod tests {
             },
             "price": 499.90,
             "amount": 10,
-            "rating": vec![3, 7, 9, 9],
+            "rating": [3, 7, 9, 9],
             "color": "red",
             "has_delivery": true,
             "shipped_at": "2020-02-15T00:00:00Z",
@@ -589,13 +597,13 @@ mod tests {
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_blue.clone(), in_moscow.clone()]),
+                    must: Some(vec![match_blue, in_moscow]),
                     must_not: None,
                 }),
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_red.clone(), in_berlin.clone()]),
+                    must: Some(vec![match_red, in_berlin]),
                     must_not: None,
                 }),
             ]),
@@ -648,17 +656,17 @@ mod tests {
         assert!(!payload_checker.check(0, &query));
 
         // id Filter
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
+        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(Into::into).collect();
 
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
         assert!(!payload_checker.check(2, &query));
 
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
+        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(Into::into).collect();
 
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
         assert!(payload_checker.check(10, &query));
 
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
+        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(Into::into).collect();
 
         let query = Filter::new_must(Condition::HasId(ids.into()));
         assert!(payload_checker.check(2, &query));
