--- qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual)@@ -9,7 +9,7 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -31,7 +31,7 @@     }
 }
 
-pub fn check_filter<F>(checker: &F, filter: &Filter) -> bool
+fn check_filter<F>(checker: &F, filter: &Filter) -> bool
 where
     F: Fn(&Condition) -> bool,
 {
@@ -62,14 +62,12 @@         Some(MinShould {
             conditions,
             min_count,
-        }) => {
-            conditions
-                .iter()
-                .filter(|cond| check(cond))
-                .take(*min_count)
-                .count()
-                == *min_count
-        }
+        }) => conditions
+            .iter()
+            .filter(|cond| check(cond))
+            .take(*min_count)
+            .count()
+            == *min_count,
     }
 }
 
@@ -153,8 +151,8 @@                 .any(|object| {
                     check_payload(
                         Box::new(|| OwnedPayloadRef::from(object)),
-                        None,            // HasId check in nested fields is not supported
-                        &HashMap::new(), // HasVector check in nested fields is not supported
+                        None,            // nested filters don't look at external IDs
+                        &HashMap::new(), // nested filters don't check vectors
                         &nested.nested.filter,
                         point_id,
                         &nested_indexes,
@@ -162,11 +160,9 @@                     )
                 })
         }
-
         Condition::CustomIdChecker(cond) => id_tracker
             .and_then(|id_tracker| id_tracker.external_id(point_id))
             .is_some_and(|point_id| cond.check(point_id)),
-
         Condition::Filter(_) => unreachable!(),
     };
 
@@ -200,7 +196,6 @@         return field_condition.check_empty();
     }
 
-    // This covers a case, when a field index affects the result of the condition.
     if let Some(field_indexes) = field_indexes {
         for p in field_values {
             let mut index_checked = false;
@@ -209,31 +204,22 @@                     index.special_check_condition(field_condition, p, hw_counter)
                 {
                     if index_check_res {
-                        // If at least one object matches the condition, we can return true
                         return true;
                     }
                     index_checked = true;
-                    // If index check of the condition returned something, we don't need to check
-                    // other indexes
                     break;
                 }
             }
-            if !index_checked {
-                // If none of the indexes returned anything, we need to check the condition
-                // against the payload
-                if field_condition.check(p) {
-                    return true;
-                }
+            if !index_checked && field_condition.check(p) {
+                return true;
             }
         }
         false
     } else {
-        // Fallback to regular condition check if there are no indexes for the field
         field_values.into_iter().any(|p| field_condition.check(p))
     }
 }
 
-/// Only used for testing
 #[cfg(feature = "testing")]
 pub struct SimpleConditionChecker {
     payload_storage: Arc<AtomicRefCell<PayloadStorageEnum>>,
@@ -249,7 +235,7 @@         id_tracker: Arc<AtomicRefCell<IdTrackerSS>>,
         vector_storages: HashMap<VectorNameBuf, Arc<AtomicRefCell<VectorStorageEnum>>>,
     ) -> Self {
-        SimpleConditionChecker {
+        Self {
             payload_storage,
             id_tracker,
             vector_storages,
@@ -261,13 +247,10 @@ #[cfg(feature = "testing")]
 impl ConditionChecker for SimpleConditionChecker {
     fn check(&self, point_id: PointOffsetType, query: &Filter) -> bool {
-        let hw_counter = HardwareCounterCell::new(); // No measurements needed as this is only for test!
-
+        let hw_counter = HardwareCounterCell::new(); // Not used in tests
         let payload_storage_guard = self.payload_storage.borrow();
-
         let payload_ref_cell: RefCell<Option<OwnedPayloadRef>> = RefCell::new(None);
         let id_tracker = self.id_tracker.borrow();
-
         let vector_storages = &self.vector_storages;
 
         check_payload(
@@ -280,24 +263,10 @@                         PayloadStorageEnum::SimplePayloadStorage(s) => {
                             s.payload_ptr(point_id).map(|x| x.into())
                         }
-                        PayloadStorageEnum::OnDiskPayloadStorage(s) => {
-                            // Warn: Possible panic here
-                            // Currently, it is possible that `read_payload` fails with Err,
-                            // but it seems like a very rare possibility which might only happen
-                            // if something is wrong with disk or storage is corrupted.
-                            //
-                            // In both cases it means that service can't be of use any longer.
-                            // It is as good as dead. Therefore it is tolerable to just panic here.
-                            // Downside is - API user won't be notified of the failure.
-                            // It will just timeout.
-                            //
-                            // The alternative:
-                            // Rewrite condition checking code to support error reporting.
-                            // Which may lead to slowdown and assumes a lot of changes.
-                            s.read_payload(point_id, &hw_counter)
-                                .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
-                                .map(|x| x.into())
-                        }
+                        PayloadStorageEnum::OnDiskPayloadStorage(s) => s
+                            .read_payload(point_id, &hw_counter)
+                            .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
+                            .map(|x| x.into()),
                         PayloadStorageEnum::MmapPayloadStorage(s) => {
                             let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
                                 panic!("Payload storage is corrupted: {err}")
@@ -305,9 +274,9 @@                             Some(OwnedPayloadRef::from(payload))
                         }
                     };
-
-                    payload_ref_cell
-                        .replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
+                    payload_ref_cell.replace(
+                        payload_ptr.or_else(|| Some((&self.empty_payload).into())),
+                    );
                 }
                 payload_ref_cell.borrow().as_ref().cloned().unwrap()
             }),
@@ -316,26 +285,27 @@             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
 
-#[cfg(test)]
+#[cfg(feature = "testing")]
 mod tests {
+    use super::*;
+
     use std::str::FromStr;
 
     use ahash::AHashSet;
     use tempfile::Builder;
 
-    use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
+    use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
     use crate::id_tracker::IdTracker;
-    use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
+    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::payload_storage::PayloadStorage;
-    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -468,10 +438,8 @@                 lte: None,
             },
         ));
-        let with_delivery = Condition::Field(FieldCondition::new_match(
-            JsonPath::new("has_delivery"),
-            true.into(),
-        ));
+        let with_delivery =
+            Condition::Field(FieldCondition::new_match(JsonPath::new("has_delivery"), true.into()));
 
         let many_value_count_condition =
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
@@ -483,7 +451,6 @@                     lte: None,
                 },
             )));
-        assert!(!payload_checker.check(0, &many_value_count_condition));
 
         let few_value_count_condition =
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
@@ -495,6 +462,7 @@                     lte: None,
                 },
             )));
+        assert!(!payload_checker.check(0, &many_value_count_condition));
         assert!(payload_checker.check(0, &few_value_count_condition));
 
         let in_berlin = Condition::Field(FieldCondition::new_geo_bounding_box(
@@ -605,10 +573,10 @@         };
         assert!(payload_checker.check(0, &query));
 
-        let query = Filter::new_must_not(with_bad_rating);
+        let query = Filter::new_must_not(with_bad_rating.clone());
         assert!(!payload_checker.check(0, &query));
 
-        // min_should
+        // min_should clause
         let query = Filter::new_min_should(MinShould {
             conditions: vec![match_blue.clone(), in_moscow.clone()],
             min_count: 1,
@@ -626,13 +594,13 @@                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_blue, in_moscow]),
+                    must: Some(vec![match_blue.clone(), in_moscow.clone()]),
                     must_not: None,
                 }),
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_red, in_berlin]),
+                    must: Some(vec![match_red.clone(), in_berlin.clone()]),
                     must_not: None,
                 }),
             ],
@@ -640,26 +608,23 @@         });
         assert!(payload_checker.check(0, &query));
 
-        // DateTime payload index
+        // DateTime payload index checks
         let query = Filter::new_must(shipped_in_february);
         assert!(payload_checker.check(0, &query));
 
         let query = Filter::new_must(shipped_in_march);
         assert!(!payload_checker.check(0, &query));
 
-        // id Filter
+        // ID filter checks
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
         assert!(!payload_checker.check(2, &query));
 
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
         assert!(payload_checker.check(10, &query));
 
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
         let query = Filter::new_must(Condition::HasId(ids.into()));
         assert!(payload_checker.check(2, &query));
     }
