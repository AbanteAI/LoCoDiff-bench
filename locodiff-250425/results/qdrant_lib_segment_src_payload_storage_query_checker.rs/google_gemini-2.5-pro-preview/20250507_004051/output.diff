
index 4e5c39ca..0131f2a3 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmplm912kzx_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpdgjqa__2_actual.txt	
@@ -9,7 +9,7 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -278,9 +278,6 @@ impl ConditionChecker for SimpleConditionChecker {
                             s.payload_ptr(point_id).map(|x| x.into())
                         }
                         PayloadStorageEnum::SimplePayloadStorage(s) => {
-                            s.payload_ptr(point_id).map(|x| x.into())
-                        }
-                        PayloadStorageEnum::OnDiskPayloadStorage(s) => {
                             // Warn: Possible panic here
                             // Currently, it is possible that `read_payload` fails with Err,
                             // but it seems like a very rare possibility which might only happen
@@ -329,12 +326,11 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
@@ -605,9 +601,6 @@ mod tests {
         };
         assert!(payload_checker.check(0, &query));
 
-        let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
-
         // min_should
         let query = Filter::new_min_should(MinShould {
             conditions: vec![match_blue.clone(), in_moscow.clone()],
@@ -647,6 +640,9 @@ mod tests {
         let query = Filter::new_must(shipped_in_march);
         assert!(!payload_checker.check(0, &query));
 
+        let query = Filter::new_must_not(with_bad_rating);
+        assert!(!payload_checker.check(0, &query));
+
         // id Filter
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
 
