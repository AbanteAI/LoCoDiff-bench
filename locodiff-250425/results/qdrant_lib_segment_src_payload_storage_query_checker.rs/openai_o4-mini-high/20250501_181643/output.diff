--- qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual)@@ -8,18 +8,17 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
-
 use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::{ConditionChecker, PayloadStorage};
+use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 use crate::types::{
     Condition, FieldCondition, Filter, IsEmptyCondition, IsNullCondition, MinShould,
     OwnedPayloadRef, Payload, PayloadContainer, PayloadKeyType, VectorNameBuf,
 };
-use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 
 fn check_condition<F>(checker: &F, condition: &Condition) -> bool
 where
@@ -39,17 +38,6 @@         && check_min_should(checker, &filter.min_should)
         && check_must(checker, &filter.must)
         && check_must_not(checker, &filter.must_not)
-}
-
-fn check_should<F>(checker: &F, should: &Option<Vec<Condition>>) -> bool
-where
-    F: Fn(&Condition) -> bool,
-{
-    let check = |x| check_condition(checker, x);
-    match should {
-        None => true,
-        Some(conditions) => conditions.iter().any(check),
-    }
 }
 
 fn check_min_should<F>(checker: &F, min_should: &Option<MinShould>) -> bool
@@ -62,14 +50,12 @@         Some(MinShould {
             conditions,
             min_count,
-        }) => {
-            conditions
-                .iter()
-                .filter(|cond| check(cond))
-                .take(*min_count)
-                .count()
-                == *min_count
-        }
+        }) => conditions
+            .iter()
+            .filter(|cond| check(cond))
+            .take(*min_count)
+            .count()
+            == *min_count,
     }
 }
 
@@ -104,10 +90,7 @@ {
     let nested_indexes: HashMap<_, _> = field_indexes
         .iter()
-        .filter_map(|(key, indexes)| {
-            key.strip_prefix(nested_path)
-                .map(|key| (key, indexes.as_ref()))
-        })
+        .filter_map(|(key, indexes)| key.strip_prefix(nested_path).map(|key| (key, indexes.as_ref())))
         .collect();
     nested_indexes
 }
@@ -131,8 +114,12 @@             field_indexes,
             hw_counter,
         ),
-        Condition::IsEmpty(is_empty) => check_is_empty_condition(is_empty, get_payload().deref()),
-        Condition::IsNull(is_null) => check_is_null_condition(is_null, get_payload().deref()),
+        Condition::IsEmpty(is_empty) => {
+            check_is_empty_condition(is_empty, get_payload().deref())
+        }
+        Condition::IsNull(is_null) => {
+            check_is_null_condition(is_null, get_payload().deref())
+        }
         Condition::HasId(has_id) => id_tracker
             .and_then(|id_tracker| id_tracker.external_id(point_id))
             .is_some_and(|id| has_id.has_id.contains(&id)),
@@ -143,6 +130,9 @@                 false
             }
         }
+        Condition::CustomIdChecker(cond) => id_tracker
+            .and_then(|id_tracker| id_tracker.external_id(point_id))
+            .is_some_and(|point_id| cond.check(point_id)),
         Condition::Nested(nested) => {
             let nested_path = nested.array_key();
             let nested_indexes = select_nested_indexes(&nested_path, field_indexes);
@@ -153,8 +143,8 @@                 .any(|object| {
                     check_payload(
                         Box::new(|| OwnedPayloadRef::from(object)),
-                        None,            // HasId check in nested fields is not supported
-                        &HashMap::new(), // HasVector check in nested fields is not supported
+                        None,
+                        &HashMap::new(),
                         &nested.nested.filter,
                         point_id,
                         &nested_indexes,
@@ -162,11 +152,6 @@                     )
                 })
         }
-
-        Condition::CustomIdChecker(cond) => id_tracker
-            .and_then(|id_tracker| id_tracker.external_id(point_id))
-            .is_some_and(|point_id| cond.check(point_id)),
-
         Condition::Filter(_) => unreachable!(),
     };
 
@@ -180,7 +165,10 @@     check_is_empty(payload.get_value(&is_empty.is_empty.key).iter().copied())
 }
 
-pub fn check_is_null_condition(is_null: &IsNullCondition, payload: &impl PayloadContainer) -> bool {
+pub fn check_is_null_condition(
+    is_null: &IsNullCondition,
+    payload: &impl PayloadContainer,
+) -> bool {
     check_is_null(payload.get_value(&is_null.is_null.key).iter().copied())
 }
 
@@ -194,14 +182,12 @@     R: AsRef<Vec<FieldIndex>>,
 {
     let field_values = payload.get_value(&field_condition.key);
-    let field_indexes = field_indexes.get(&field_condition.key);
 
     if field_values.is_empty() {
         return field_condition.check_empty();
     }
 
-    // This covers a case, when a field index affects the result of the condition.
-    if let Some(field_indexes) = field_indexes {
+    if let Some(field_indexes) = field_indexes.get(&field_condition.key) {
         for p in field_values {
             let mut index_checked = false;
             for index in field_indexes.as_ref() {
@@ -209,26 +195,18 @@                     index.special_check_condition(field_condition, p, hw_counter)
                 {
                     if index_check_res {
-                        // If at least one object matches the condition, we can return true
                         return true;
                     }
                     index_checked = true;
-                    // If index check of the condition returned something, we don't need to check
-                    // other indexes
                     break;
                 }
             }
-            if !index_checked {
-                // If none of the indexes returned anything, we need to check the condition
-                // against the payload
-                if field_condition.check(p) {
-                    return true;
-                }
+            if !index_checked && field_condition.check(p) {
+                return true;
             }
         }
         false
     } else {
-        // Fallback to regular condition check if there are no indexes for the field
         field_values.into_iter().any(|p| field_condition.check(p))
     }
 }
@@ -261,14 +239,12 @@ #[cfg(feature = "testing")]
 impl ConditionChecker for SimpleConditionChecker {
     fn check(&self, point_id: PointOffsetType, query: &Filter) -> bool {
-        let hw_counter = HardwareCounterCell::new(); // No measurements needed as this is only for test!
-
+        let hw_counter = HardwareCounterCell::new();
         let payload_storage_guard = self.payload_storage.borrow();
 
         let payload_ref_cell: RefCell<Option<OwnedPayloadRef>> = RefCell::new(None);
+
         let id_tracker = self.id_tracker.borrow();
-
-        let vector_storages = &self.vector_storages;
 
         check_payload(
             Box::new(|| {
@@ -281,42 +257,27 @@                             s.payload_ptr(point_id).map(|x| x.into())
                         }
                         PayloadStorageEnum::OnDiskPayloadStorage(s) => {
-                            // Warn: Possible panic here
-                            // Currently, it is possible that `read_payload` fails with Err,
-                            // but it seems like a very rare possibility which might only happen
-                            // if something is wrong with disk or storage is corrupted.
-                            //
-                            // In both cases it means that service can't be of use any longer.
-                            // It is as good as dead. Therefore it is tolerable to just panic here.
-                            // Downside is - API user won't be notified of the failure.
-                            // It will just timeout.
-                            //
-                            // The alternative:
-                            // Rewrite condition checking code to support error reporting.
-                            // Which may lead to slowdown and assumes a lot of changes.
                             s.read_payload(point_id, &hw_counter)
                                 .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
                                 .map(|x| x.into())
                         }
                         PayloadStorageEnum::MmapPayloadStorage(s) => {
-                            let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
-                                panic!("Payload storage is corrupted: {err}")
-                            });
+                            let payload = s.get(point_id, &hw_counter)
+                                .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"));
                             Some(OwnedPayloadRef::from(payload))
                         }
                     };
-
                     payload_ref_cell
                         .replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
                 }
                 payload_ref_cell.borrow().as_ref().cloned().unwrap()
             }),
             Some(id_tracker.deref()),
-            vector_storages,
+            &self.vector_storages,
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -324,20 +285,20 @@ #[cfg(test)]
 mod tests {
     use std::str::FromStr;
-
     use ahash::AHashSet;
     use tempfile::Builder;
 
     use super::*;
     use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
     use crate::id_tracker::IdTracker;
-    use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
+    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::payload_storage::PayloadStorage;
-    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::types::{
-        DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
+        DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range,
+        ValuesCount,
     };
 
     #[test]
@@ -371,7 +332,9 @@         id_tracker.set_link(1.into(), 1).unwrap();
         id_tracker.set_link(2.into(), 2).unwrap();
         id_tracker.set_link(10.into(), 10).unwrap();
-        payload_storage.overwrite(0, &payload, &hw_counter).unwrap();
+        payload_storage
+            .overwrite(0, &payload, &hw_counter)
+            .unwrap();
 
         let payload_checker = SimpleConditionChecker::new(
             Arc::new(AtomicRefCell::new(payload_storage)),
@@ -379,69 +342,72 @@             HashMap::new(),
         );
 
-        let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
+        // is-empty
+        let is_empty_price = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
             is_empty: PayloadField {
                 key: JsonPath::new("price"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_empty_condition));
-
-        let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
+        assert!(!payload_checker.check(0, &is_empty_price));
+
+        let is_empty_new = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
             is_empty: PayloadField {
                 key: JsonPath::new("something_new"),
             },
         }));
-        assert!(payload_checker.check(0, &is_empty_condition));
-
-        let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
+        assert!(payload_checker.check(0, &is_empty_new));
+
+        let is_empty_parts = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
             is_empty: PayloadField {
                 key: JsonPath::new("parts"),
             },
         }));
-        assert!(payload_checker.check(0, &is_empty_condition));
-
-        let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
+        assert!(payload_checker.check(0, &is_empty_parts));
+
+        let is_empty_not_null = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
             is_empty: PayloadField {
                 key: JsonPath::new("not_null"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_empty_condition));
-
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        assert!(!payload_checker.check(0, &is_empty_not_null));
+
+        // is-null
+        let is_null_amount = Filter::new_must(Condition::IsNull(IsNullCondition {
             is_null: PayloadField {
                 key: JsonPath::new("amount"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_null_condition));
-
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        assert!(!payload_checker.check(0, &is_null_amount));
+
+        let is_null_parts = Filter::new_must(Condition::IsNull(IsNullCondition {
             is_null: PayloadField {
                 key: JsonPath::new("parts"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_null_condition));
-
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        assert!(!payload_checker.check(0, &is_null_parts));
+
+        let is_null_else = Filter::new_must(Condition::IsNull(IsNullCondition {
             is_null: PayloadField {
                 key: JsonPath::new("something_else"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_null_condition));
-
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        assert!(!payload_checker.check(0, &is_null_else));
+
+        let is_null_packaging = Filter::new_must(Condition::IsNull(IsNullCondition {
             is_null: PayloadField {
                 key: JsonPath::new("packaging"),
             },
         }));
-        assert!(payload_checker.check(0, &is_null_condition));
-
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        assert!(payload_checker.check(0, &is_null_packaging));
+
+        let is_null_not_null = Filter::new_must(Condition::IsNull(IsNullCondition {
             is_null: PayloadField {
                 key: JsonPath::new("not_null"),
             },
         }));
-        assert!(!payload_checker.check(0, &is_null_condition));
-
+        assert!(!payload_checker.check(0, &is_null_not_null));
+
+        // match
         let match_red = Condition::Field(FieldCondition::new_match(
             JsonPath::new("color"),
             "red".to_owned().into(),
@@ -450,7 +416,7 @@             JsonPath::new("color"),
             "blue".to_owned().into(),
         ));
-        let shipped_in_february = Condition::Field(FieldCondition::new_datetime_range(
+        let shipped_feb = Condition::Field(FieldCondition::new_datetime_range(
             JsonPath::new("shipped_at"),
             Range {
                 lt: Some(DateTimeWrapper::from_str("2020-03-01T00:00:00Z").unwrap()),
@@ -459,7 +425,7 @@                 lte: None,
             },
         ));
-        let shipped_in_march = Condition::Field(FieldCondition::new_datetime_range(
+        let shipped_mar = Condition::Field(FieldCondition::new_datetime_range(
             JsonPath::new("shipped_at"),
             Range {
                 lt: Some(DateTimeWrapper::from_str("2020-04-01T00:00:00Z").unwrap()),
@@ -472,30 +438,26 @@             JsonPath::new("has_delivery"),
             true.into(),
         ));
-
-        let many_value_count_condition =
-            Filter::new_must(Condition::Field(FieldCondition::new_values_count(
-                JsonPath::new("rating"),
-                ValuesCount {
-                    lt: None,
-                    gt: None,
-                    gte: Some(10),
-                    lte: None,
-                },
-            )));
-        assert!(!payload_checker.check(0, &many_value_count_condition));
-
-        let few_value_count_condition =
-            Filter::new_must(Condition::Field(FieldCondition::new_values_count(
-                JsonPath::new("rating"),
-                ValuesCount {
-                    lt: Some(5),
-                    gt: None,
-                    gte: None,
-                    lte: None,
-                },
-            )));
-        assert!(payload_checker.check(0, &few_value_count_condition));
+        let many_values = Filter::new_must(Condition::Field(FieldCondition::new_values_count(
+            JsonPath::new("rating"),
+            ValuesCount {
+                lt: None,
+                gt: None,
+                gte: Some(10),
+                lte: None,
+            },
+        )));
+        let few_values = Filter::new_must(Condition::Field(FieldCondition::new_values_count(
+            JsonPath::new("rating"),
+            ValuesCount {
+                lt: Some(5),
+                gt: None,
+                gte: None,
+                lte: None,
+            },
+        )));
+        assert!(!payload_checker.check(0, &many_values));
+        assert!(payload_checker.check(0, &few_values));
 
         let in_berlin = Condition::Field(FieldCondition::new_geo_bounding_box(
             JsonPath::new("location"),
@@ -510,7 +472,6 @@                 },
             },
         ));
-
         let in_moscow = Condition::Field(FieldCondition::new_geo_bounding_box(
             JsonPath::new("location"),
             GeoBoundingBox {
@@ -524,8 +485,7 @@                 },
             },
         ));
-
-        let with_bad_rating = Condition::Field(FieldCondition::new_range(
+        let bad_rating = Condition::Field(FieldCondition::new_range(
             JsonPath::new("rating"),
             Range {
                 lt: None,
@@ -535,56 +495,36 @@             },
         ));
 
-        let query = Filter::new_must(match_red.clone());
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must(match_blue.clone());
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(match_blue.clone());
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(match_red.clone());
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
+        // simple
+        let q1 = Filter::new_must(match_red.clone());
+        assert!(payload_checker.check(0, &q1));
+        let q2 = Filter::new_must(match_blue.clone());
+        assert!(!payload_checker.check(0, &q2));
+
+        // must_not
+        let q3 = Filter::new_must_not(match_blue.clone());
+        assert!(payload_checker.check(0, &q3));
+        let q4 = Filter::new_must_not(match_red.clone());
+        assert!(!payload_checker.check(0, &q4));
+
+        // combined
+        let q5 = Filter {
             should: Some(vec![match_red.clone(), match_blue.clone()]),
             min_should: None,
             must: Some(vec![with_delivery.clone(), in_berlin.clone()]),
             must_not: None,
         };
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter {
+        assert!(payload_checker.check(0, &q5));
+        let q6 = Filter {
             should: Some(vec![match_red.clone(), match_blue.clone()]),
             min_should: None,
-            must: Some(vec![with_delivery, in_moscow.clone()]),
+            must: Some(vec![with_delivery.clone(), in_moscow.clone()]),
             must_not: None,
         };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red.clone(), in_moscow.clone()]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue.clone(), in_berlin.clone()]),
-                    must_not: None,
-                }),
-            ]),
-            min_should: None,
-            must: None,
-            must_not: None,
-        };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
+        assert!(!payload_checker.check(0, &q6));
+
+        // nested
+        let q7 = Filter {
             should: Some(vec![
                 Condition::Filter(Filter {
                     should: None,
@@ -603,26 +543,9 @@             must: None,
             must_not: None,
         };
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
-
-        // min_should
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_blue.clone(), in_moscow.clone()],
-            min_count: 1,
-        });
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_red.clone(), in_berlin.clone(), in_moscow.clone()],
-            min_count: 2,
-        });
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![
+        assert!(!payload_checker.check(0, &q7));
+        let q8 = Filter {
+            should: Some(vec![
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
@@ -635,32 +558,26 @@                     must: Some(vec![match_red, in_berlin]),
                     must_not: None,
                 }),
-            ],
-            min_count: 1,
-        });
-        assert!(payload_checker.check(0, &query));
-
-        // DateTime payload index
-        let query = Filter::new_must(shipped_in_february);
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must(shipped_in_march);
-        assert!(!payload_checker.check(0, &query));
-
-        // id Filter
+            ]),
+            min_should: None,
+            must: None,
+            must_not: None,
+        };
+        assert!(payload_checker.check(0, &q8));
+
+        // datetime
+        let q9 = Filter::new_must(shipped_feb);
+        assert!(payload_checker.check(0, &q9));
+        let q10 = Filter::new_must(shipped_mar);
+        assert!(!payload_checker.check(0, &q10));
+
+        // id
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(!payload_checker.check(2, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(10, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(2, &query));
+        let q11 = Filter::new_must_not(Condition::HasId(ids.clone().into()));
+        assert!(!payload_checker.check(2, &q11));
+        let q12 = Filter::new_must_not(Condition::HasId(ids.clone().into()));
+        assert!(payload_checker.check(10, &q12));
+        let q13 = Filter::new_must(Condition::HasId(ids.into()));
+        assert!(payload_checker.check(2, &q13));
     }
 }