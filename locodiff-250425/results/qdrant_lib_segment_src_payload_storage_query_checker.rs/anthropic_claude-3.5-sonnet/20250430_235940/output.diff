
index 4e5c39ca..36494055 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmpvclv8xfi_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpgv8_0kcb_actual.txt	
@@ -21,7 +21,7 @@ use crate::types::{
 };
 use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 
-fn check_condition<F>(checker: &F, condition: &Condition) -> bool
+fn check_condition<F>(checker: &F, condition: &Condition) -> bool 
 where
     F: Fn(&Condition) -> bool,
 {
@@ -31,7 +31,7 @@ where
     }
 }
 
-pub fn check_filter<F>(checker: &F, filter: &Filter) -> bool
+fn check_filter<F>(checker: &F, filter: &Filter) -> bool
 where
     F: Fn(&Condition) -> bool,
 {
@@ -52,7 +52,7 @@ where
     }
 }
 
-fn check_min_should<F>(checker: &F, min_should: &Option<MinShould>) -> bool
+fn check_min_should<F>(checker: &F, min_should: &Option<MinShould>) -> bool 
 where
     F: Fn(&Condition) -> bool,
 {
@@ -316,7 +316,7 @@ impl ConditionChecker for SimpleConditionChecker {
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -483,7 +483,6 @@ mod tests {
                     lte: None,
                 },
             )));
-        assert!(!payload_checker.check(0, &many_value_count_condition));
 
         let few_value_count_condition =
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
@@ -495,6 +494,7 @@ mod tests {
                     lte: None,
                 },
             )));
+        assert!(!payload_checker.check(0, &many_value_count_condition));
         assert!(payload_checker.check(0, &few_value_count_condition));
 
         let in_berlin = Condition::Field(FieldCondition::new_geo_bounding_box(
@@ -605,9 +605,6 @@ mod tests {
         };
         assert!(payload_checker.check(0, &query));
 
-        let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
-
         // min_should
         let query = Filter::new_min_should(MinShould {
             conditions: vec![match_blue.clone(), in_moscow.clone()],
@@ -647,6 +644,9 @@ mod tests {
         let query = Filter::new_must(shipped_in_march);
         assert!(!payload_checker.check(0, &query));
 
+        let query = Filter::new_must_not(with_bad_rating);
+        assert!(!payload_checker.check(0, &query));
+
         // id Filter
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
 
