--- qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual)@@ -96,20 +96,20 @@ }
 
 pub fn select_nested_indexes<'a, R>(
-    nested_path: &PayloadKeyType,
+    nested_path: &VectorNameBuf,
     field_indexes: &'a HashMap<PayloadKeyType, R>,
 ) -> HashMap<PayloadKeyType, &'a Vec<FieldIndex>>
 where
     R: AsRef<Vec<FieldIndex>>,
 {
-    let nested_indexes: HashMap<_, _> = field_indexes
+    let nested_prefix = format!("{}.", nested_path);
+    field_indexes
         .iter()
         .filter_map(|(key, indexes)| {
-            key.strip_prefix(nested_path)
-                .map(|key| (key, indexes.as_ref()))
+            key.strip_prefix(&nested_prefix)
+                .map(|key| (key.into(), indexes.as_ref()))
         })
-        .collect();
-    nested_indexes
+        .collect()
 }
 
 pub fn check_payload<'a, R>(
@@ -131,18 +131,23 @@             field_indexes,
             hw_counter,
         ),
-        Condition::IsEmpty(is_empty) => check_is_empty_condition(is_empty, get_payload().deref()),
-        Condition::IsNull(is_null) => check_is_null_condition(is_null, get_payload().deref()),
+        Condition::IsEmpty(is_empty) => {
+            check_is_empty_condition(is_empty, get_payload().deref())
+        }
+        Condition::IsNull(is_null) => {
+            check_is_null_condition(is_null, get_payload().deref())
+        }
         Condition::HasId(has_id) => id_tracker
             .and_then(|id_tracker| id_tracker.external_id(point_id))
             .is_some_and(|id| has_id.has_id.contains(&id)),
         Condition::HasVector(has_vector) => {
-            if let Some(vector_storage) = vector_storages.get(&has_vector.has_vector) {
-                !vector_storage.borrow().is_deleted_vector(point_id)
-            } else {
-                false
-            }
-        }
+            vector_storages
+                .get(&has_vector.has_vector)
+                .map_or(false, |vs| !vs.borrow().is_deleted_vector(point_id))
+        }
+        Condition::CustomIdChecker(cond) => id_tracker
+            .and_then(|id_tracker| id_tracker.external_id(point_id))
+            .is_some_and(|id| cond.check(id)),
         Condition::Nested(nested) => {
             let nested_path = nested.array_key();
             let nested_indexes = select_nested_indexes(&nested_path, field_indexes);
@@ -153,8 +158,8 @@                 .any(|object| {
                     check_payload(
                         Box::new(|| OwnedPayloadRef::from(object)),
-                        None,            // HasId check in nested fields is not supported
-                        &HashMap::new(), // HasVector check in nested fields is not supported
+                        None,
+                        &HashMap::new(),
                         &nested.nested.filter,
                         point_id,
                         &nested_indexes,
@@ -162,14 +167,8 @@                     )
                 })
         }
-
-        Condition::CustomIdChecker(cond) => id_tracker
-            .and_then(|id_tracker| id_tracker.external_id(point_id))
-            .is_some_and(|point_id| cond.check(point_id)),
-
         Condition::Filter(_) => unreachable!(),
     };
-
     check_filter(&checker, query)
 }
 
@@ -180,7 +179,10 @@     check_is_empty(payload.get_value(&is_empty.is_empty.key).iter().copied())
 }
 
-pub fn check_is_null_condition(is_null: &IsNullCondition, payload: &impl PayloadContainer) -> bool {
+pub fn check_is_null_condition(
+    is_null: &IsNullCondition,
+    payload: &impl PayloadContainer,
+) -> bool {
     check_is_null(payload.get_value(&is_null.is_null.key).iter().copied())
 }
 
@@ -200,7 +202,6 @@         return field_condition.check_empty();
     }
 
-    // This covers a case, when a field index affects the result of the condition.
     if let Some(field_indexes) = field_indexes {
         for p in field_values {
             let mut index_checked = false;
@@ -209,31 +210,22 @@                     index.special_check_condition(field_condition, p, hw_counter)
                 {
                     if index_check_res {
-                        // If at least one object matches the condition, we can return true
                         return true;
                     }
                     index_checked = true;
-                    // If index check of the condition returned something, we don't need to check
-                    // other indexes
                     break;
                 }
             }
-            if !index_checked {
-                // If none of the indexes returned anything, we need to check the condition
-                // against the payload
-                if field_condition.check(p) {
-                    return true;
-                }
+            if !index_checked && field_condition.check(p) {
+                return true;
             }
         }
         false
     } else {
-        // Fallback to regular condition check if there are no indexes for the field
         field_values.into_iter().any(|p| field_condition.check(p))
     }
 }
 
-/// Only used for testing
 #[cfg(feature = "testing")]
 pub struct SimpleConditionChecker {
     payload_storage: Arc<AtomicRefCell<PayloadStorageEnum>>,
@@ -261,14 +253,9 @@ #[cfg(feature = "testing")]
 impl ConditionChecker for SimpleConditionChecker {
     fn check(&self, point_id: PointOffsetType, query: &Filter) -> bool {
-        let hw_counter = HardwareCounterCell::new(); // No measurements needed as this is only for test!
-
+        let hw_counter = HardwareCounterCell::new();
         let payload_storage_guard = self.payload_storage.borrow();
-
         let payload_ref_cell: RefCell<Option<OwnedPayloadRef>> = RefCell::new(None);
-        let id_tracker = self.id_tracker.borrow();
-
-        let vector_storages = &self.vector_storages;
 
         check_payload(
             Box::new(|| {
@@ -281,42 +268,28 @@                             s.payload_ptr(point_id).map(|x| x.into())
                         }
                         PayloadStorageEnum::OnDiskPayloadStorage(s) => {
-                            // Warn: Possible panic here
-                            // Currently, it is possible that `read_payload` fails with Err,
-                            // but it seems like a very rare possibility which might only happen
-                            // if something is wrong with disk or storage is corrupted.
-                            //
-                            // In both cases it means that service can't be of use any longer.
-                            // It is as good as dead. Therefore it is tolerable to just panic here.
-                            // Downside is - API user won't be notified of the failure.
-                            // It will just timeout.
-                            //
-                            // The alternative:
-                            // Rewrite condition checking code to support error reporting.
-                            // Which may lead to slowdown and assumes a lot of changes.
                             s.read_payload(point_id, &hw_counter)
                                 .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
                                 .map(|x| x.into())
                         }
                         PayloadStorageEnum::MmapPayloadStorage(s) => {
-                            let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
-                                panic!("Payload storage is corrupted: {err}")
-                            });
+                            let payload = s.get(point_id, &hw_counter)
+                                .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"));
                             Some(OwnedPayloadRef::from(payload))
                         }
                     };
-
-                    payload_ref_cell
-                        .replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
+                    payload_ref_cell.replace(
+                        payload_ptr.or_else(|| Some((&self.empty_payload).into())),
+                    );
                 }
                 payload_ref_cell.borrow().as_ref().cloned().unwrap()
             }),
-            Some(id_tracker.deref()),
-            vector_storages,
+            Some(self.id_tracker.borrow().deref()),
+            &self.vector_storages,
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -334,8 +307,8 @@     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
+    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::payload_storage::PayloadStorage;
-    use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -362,7 +335,6 @@         };
 
         let hw_counter = HardwareCounterCell::new();
-
         let mut payload_storage: PayloadStorageEnum =
             SimplePayloadStorage::open(db.clone()).unwrap().into();
         let mut id_tracker = SimpleIdTracker::open(db).unwrap();
@@ -380,65 +352,47 @@         );
 
         let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
-            is_empty: PayloadField {
-                key: JsonPath::new("price"),
-            },
+            is_empty: PayloadField { key: JsonPath::new("price") },
         }));
         assert!(!payload_checker.check(0, &is_empty_condition));
 
         let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
-            is_empty: PayloadField {
-                key: JsonPath::new("something_new"),
-            },
+            is_empty: PayloadField { key: JsonPath::new("something_new") },
         }));
         assert!(payload_checker.check(0, &is_empty_condition));
 
         let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
-            is_empty: PayloadField {
-                key: JsonPath::new("parts"),
-            },
+            is_empty: PayloadField { key: JsonPath::new("parts") },
         }));
         assert!(payload_checker.check(0, &is_empty_condition));
 
         let is_empty_condition = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
-            is_empty: PayloadField {
-                key: JsonPath::new("not_null"),
-            },
+            is_empty: PayloadField { key: JsonPath::new("not_null") },
         }));
         assert!(!payload_checker.check(0, &is_empty_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
-            is_null: PayloadField {
-                key: JsonPath::new("amount"),
-            },
+            is_null: PayloadField { key: JsonPath::new("amount") },
         }));
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
-            is_null: PayloadField {
-                key: JsonPath::new("parts"),
-            },
+            is_null: PayloadField { key: JsonPath::new("parts") },
         }));
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
-            is_null: PayloadField {
-                key: JsonPath::new("something_else"),
-            },
+            is_null: PayloadField { key: JsonPath::new("something_else") },
         }));
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
-            is_null: PayloadField {
-                key: JsonPath::new("packaging"),
-            },
+            is_null: PayloadField { key: JsonPath::new("packaging") },
         }));
         assert!(payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
-            is_null: PayloadField {
-                key: JsonPath::new("not_null"),
-            },
+            is_null: PayloadField { key: JsonPath::new("not_null") },
         }));
         assert!(!payload_checker.check(0, &is_null_condition));
 
@@ -484,7 +438,6 @@                 },
             )));
         assert!(!payload_checker.check(0, &many_value_count_condition));
-
         let few_value_count_condition =
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
                 JsonPath::new("rating"),
@@ -500,30 +453,19 @@         let in_berlin = Condition::Field(FieldCondition::new_geo_bounding_box(
             JsonPath::new("location"),
             GeoBoundingBox {
-                top_left: GeoPoint {
-                    lon: 13.08835,
-                    lat: 52.67551,
-                },
-                bottom_right: GeoPoint {
-                    lon: 13.76116,
-                    lat: 52.33826,
-                },
+                top_left: GeoPoint { lon: 13.08835, lat: 52.67551 },
+                bottom_right: GeoPoint { lon: 13.76116, lat: 52.33826 },
             },
         ));
-
+        assert!(payload_checker.check(0, &Filter::new_must(in_berlin.clone())));
         let in_moscow = Condition::Field(FieldCondition::new_geo_bounding_box(
             JsonPath::new("location"),
             GeoBoundingBox {
-                top_left: GeoPoint {
-                    lon: 37.0366,
-                    lat: 56.1859,
-                },
-                bottom_right: GeoPoint {
-                    lon: 38.2532,
-                    lat: 55.317,
-                },
+                top_left: GeoPoint { lon: 37.0366, lat: 56.1859 },
+                bottom_right: GeoPoint { lon: 38.2532, lat: 55.317 },
             },
         ));
+        assert!(!payload_checker.check(0, &Filter::new_must(in_moscow.clone())));
 
         let with_bad_rating = Condition::Field(FieldCondition::new_range(
             JsonPath::new("rating"),
@@ -534,58 +476,23 @@                 lte: Some(5.),
             },
         ));
-
-        let query = Filter::new_must(match_red.clone());
+        assert!(!payload_checker.check(0, &Filter::new_must_not(with_bad_rating.clone())));
+
+        // min_should
+        let query = Filter::new_min_should(MinShould {
+            conditions: vec![match_blue.clone(), in_moscow.clone()],
+            min_count: 1,
+        });
+        assert!(!payload_checker.check(0, &query));
+
+        let query = Filter::new_min_should(MinShould {
+            conditions: vec![match_red.clone(), in_berlin.clone(), in_moscow.clone()],
+            min_count: 2,
+        });
         assert!(payload_checker.check(0, &query));
 
-        let query = Filter::new_must(match_blue.clone());
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(match_blue.clone());
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(match_red.clone());
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![match_red.clone(), match_blue.clone()]),
-            min_should: None,
-            must: Some(vec![with_delivery.clone(), in_berlin.clone()]),
-            must_not: None,
-        };
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![match_red.clone(), match_blue.clone()]),
-            min_should: None,
-            must: Some(vec![with_delivery, in_moscow.clone()]),
-            must_not: None,
-        };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red.clone(), in_moscow.clone()]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue.clone(), in_berlin.clone()]),
-                    must_not: None,
-                }),
-            ]),
-            min_should: None,
-            must: None,
-            must_not: None,
-        };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![
+        let query = Filter::new_min_should(MinShould {
+            conditions: vec![
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
@@ -598,69 +505,19 @@                     must: Some(vec![match_red.clone(), in_berlin.clone()]),
                     must_not: None,
                 }),
-            ]),
-            min_should: None,
-            must: None,
-            must_not: None,
-        };
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
-
-        // min_should
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_blue.clone(), in_moscow.clone()],
-            min_count: 1,
-        });
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_red.clone(), in_berlin.clone(), in_moscow.clone()],
-            min_count: 2,
-        });
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue, in_moscow]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red, in_berlin]),
-                    must_not: None,
-                }),
             ],
             min_count: 1,
         });
         assert!(payload_checker.check(0, &query));
 
         // DateTime payload index
-        let query = Filter::new_must(shipped_in_february);
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must(shipped_in_march);
-        assert!(!payload_checker.check(0, &query));
+        assert!(payload_checker.check(0, &Filter::new_must(shipped_in_february.clone())));
+        assert!(!payload_checker.check(0, &Filter::new_must(shipped_in_march.clone())));
 
         // id Filter
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(!payload_checker.check(2, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(10, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(2, &query));
+        assert!(!payload_checker.check(2, &Filter::new_must_not(Condition::HasId(ids.clone().into()))));
+        assert!(payload_checker.check(10, &Filter::new_must_not(Condition::HasId(ids.clone().into()))));
+        assert!(payload_checker.check(2, &Filter::new_must(Condition::HasId(ids.into()))));
     }
 }