
index 4e5c39ca7..c534684d9 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmp1svkk351_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpqs3juim6_actual.txt	
@@ -9,7 +9,7 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -316,7 +316,7 @@ impl ConditionChecker for SimpleConditionChecker {
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -329,13 +329,13 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
+    use crate::payload_storage::PayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -352,7 +352,7 @@ mod tests {
             },
             "price": 499.90,
             "amount": 10,
-            "rating": vec![3, 7, 9, 9],
+            "rating": [3, 7, 9, 9],
             "color": "red",
             "has_delivery": true,
             "shipped_at": "2020-02-15T00:00:00Z",
@@ -371,7 +371,9 @@ mod tests {
         id_tracker.set_link(1.into(), 1).unwrap();
         id_tracker.set_link(2.into(), 2).unwrap();
         id_tracker.set_link(10.into(), 10).unwrap();
-        payload_storage.overwrite(0, &payload, &hw_counter).unwrap();
+        payload_storage
+            .overwrite(0, &payload, &hw_counter)
+            .unwrap();
 
         let payload_checker = SimpleConditionChecker::new(
             Arc::new(AtomicRefCell::new(payload_storage)),
@@ -582,7 +584,7 @@ mod tests {
             must: None,
             must_not: None,
         };
-        assert!(!payload_checker.check(0, &query));
+        assert!(payload_checker.check(0, &query));
 
         let query = Filter {
             should: Some(vec![
