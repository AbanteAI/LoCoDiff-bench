
index 4e5c39ca7..95353307c 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmphb6673lk_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpv69t5js1_actual.txt	
@@ -1,15 +1,15 @@
 #![cfg_attr(not(feature = "testing"), allow(unused_imports))]
 
 use std::cell::RefCell;
-use std::collections::HashMap;
 use std::ops::Deref;
 use std::sync::Arc;
 
+use ahash::HashMap;
 use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -62,14 +62,12 @@ where
         Some(MinShould {
             conditions,
             min_count,
-        }) => {
-            conditions
-                .iter()
-                .filter(|cond| check(cond))
-                .take(*min_count)
-                .count()
-                == *min_count
-        }
+        }) => conditions
+            .iter()
+            .filter(|cond| check(cond))
+            .take(*min_count)
+            .count()
+            == *min_count,
     }
 }
 
@@ -173,10 +171,7 @@ where
     check_filter(&checker, query)
 }
 
-pub fn check_is_empty_condition(
-    is_empty: &IsEmptyCondition,
-    payload: &impl PayloadContainer,
-) -> bool {
+pub fn check_is_empty_condition(is_empty: &IsEmptyCondition, payload: &impl PayloadContainer) -> bool {
     check_is_empty(payload.get_value(&is_empty.is_empty.key).iter().copied())
 }
 
@@ -194,14 +189,13 @@ where
     R: AsRef<Vec<FieldIndex>>,
 {
     let field_values = payload.get_value(&field_condition.key);
-    let field_indexes = field_indexes.get(&field_condition.key);
 
     if field_values.is_empty() {
         return field_condition.check_empty();
     }
 
     // This covers a case, when a field index affects the result of the condition.
-    if let Some(field_indexes) = field_indexes {
+    if let Some(field_indexes) = field_indexes.get(&field_condition.key) {
         for p in field_values {
             let mut index_checked = false;
             for index in field_indexes.as_ref() {
@@ -233,7 +227,6 @@ where
     }
 }
 
-/// Only used for testing
 #[cfg(feature = "testing")]
 pub struct SimpleConditionChecker {
     payload_storage: Arc<AtomicRefCell<PayloadStorageEnum>>,
@@ -306,8 +299,7 @@ impl ConditionChecker for SimpleConditionChecker {
                         }
                     };
 
-                    payload_ref_cell
-                        .replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
+                    payload_ref_cell.replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
                 }
                 payload_ref_cell.borrow().as_ref().cloned().unwrap()
             }),
@@ -329,13 +321,13 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
+    use crate::payload_storage::PayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -626,13 +618,13 @@ mod tests {
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_blue, in_moscow]),
+                    must: Some(vec![match_blue.clone(), in_moscow.clone()]),
                     must_not: None,
                 }),
                 Condition::Filter(Filter {
                     should: None,
                     min_should: None,
-                    must: Some(vec![match_red, in_berlin]),
+                    must: Some(vec![match_red.clone(), in_berlin.clone()]),
                     must_not: None,
                 }),
             ],
