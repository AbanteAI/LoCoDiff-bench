
index 4e5c39ca7..c527b239a 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmpr0yjkr95_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpcnngqco1_actual.txt	
@@ -3,6 +3,7 @@
 use std::cell::RefCell;
 use std::collections::HashMap;
 use std::ops::Deref;
+use std::str::FromStr;
 use std::sync::Arc;
 
 use atomic_refcell::AtomicRefCell;
@@ -12,12 +13,13 @@ use common::types::PointOffsetType;
 use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
+use crate::json_path::JsonPath;
 use crate::payload_storage::condition_checker::ValueChecker;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::{ConditionChecker, PayloadStorage};
 use crate::types::{
-    Condition, FieldCondition, Filter, IsEmptyCondition, IsNullCondition, MinShould,
-    OwnedPayloadRef, Payload, PayloadContainer, PayloadKeyType, VectorNameBuf,
+    Condition, DateTimeWrapper, FieldCondition, Filter, IsEmptyCondition, IsNullCondition,
+    MinShould, OwnedPayloadRef, Payload, PayloadContainer, PayloadKeyType, VectorNameBuf,
 };
 use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 
@@ -105,8 +107,7 @@ where
     let nested_indexes: HashMap<_, _> = field_indexes
         .iter()
         .filter_map(|(key, indexes)| {
-            key.strip_prefix(nested_path)
-                .map(|key| (key, indexes.as_ref()))
+            key.strip_prefix(nested_path).map(|key| (key.to_owned(), indexes.as_ref()))
         })
         .collect();
     nested_indexes
@@ -162,7 +163,6 @@ where
                     )
                 })
         }
-
         Condition::CustomIdChecker(cond) => id_tracker
             .and_then(|id_tracker| id_tracker.external_id(point_id))
             .is_some_and(|point_id| cond.check(point_id)),
@@ -180,7 +180,10 @@ pub fn check_is_empty_condition(
     check_is_empty(payload.get_value(&is_empty.is_empty.key).iter().copied())
 }
 
-pub fn check_is_null_condition(is_null: &IsNullCondition, payload: &impl PayloadContainer) -> bool {
+pub fn check_is_null_condition(
+    is_null: &IsNullCondition,
+    payload: &impl PayloadContainer,
+) -> bool {
     check_is_null(payload.get_value(&is_null.is_null.key).iter().copied())
 }
 
@@ -194,19 +197,19 @@ where
     R: AsRef<Vec<FieldIndex>>,
 {
     let field_values = payload.get_value(&field_condition.key);
-    let field_indexes = field_indexes.get(&field_condition.key);
-
     if field_values.is_empty() {
         return field_condition.check_empty();
     }
 
+    let field_indexes = field_indexes.get(&field_condition.key);
+
     // This covers a case, when a field index affects the result of the condition.
     if let Some(field_indexes) = field_indexes {
         for p in field_values {
             let mut index_checked = false;
             for index in field_indexes.as_ref() {
                 if let Some(index_check_res) =
-                    index.special_check_condition(field_condition, p, hw_counter)
+                    index.special_check_condition(field_condition, &p, hw_counter)
                 {
                     if index_check_res {
                         // If at least one object matches the condition, we can return true
@@ -221,7 +224,7 @@ where
             if !index_checked {
                 // If none of the indexes returned anything, we need to check the condition
                 // against the payload
-                if field_condition.check(p) {
+                if field_condition.check(&p) {
                     return true;
                 }
             }
@@ -229,7 +232,7 @@ where
         false
     } else {
         // Fallback to regular condition check if there are no indexes for the field
-        field_values.into_iter().any(|p| field_condition.check(p))
+        field_values.into_iter().any(|p| field_condition.check(&p))
     }
 }
 
@@ -266,6 +269,7 @@ impl ConditionChecker for SimpleConditionChecker {
         let payload_storage_guard = self.payload_storage.borrow();
 
         let payload_ref_cell: RefCell<Option<OwnedPayloadRef>> = RefCell::new(None);
+
         let id_tracker = self.id_tracker.borrow();
 
         let vector_storages = &self.vector_storages;
@@ -299,9 +303,11 @@ impl ConditionChecker for SimpleConditionChecker {
                                 .map(|x| x.into())
                         }
                         PayloadStorageEnum::MmapPayloadStorage(s) => {
-                            let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
-                                panic!("Payload storage is corrupted: {err}")
-                            });
+                            let payload = s
+                                .get(point_id, &hw_counter)
+                                .unwrap_or_else(|err| {
+                                    panic!("Payload storage is corrupted: {err}")
+                                });
                             Some(OwnedPayloadRef::from(payload))
                         }
                     };
@@ -316,7 +322,7 @@ impl ConditionChecker for SimpleConditionChecker {
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -329,13 +335,13 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
+    use crate::payload_storage::PayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -411,256 +417,446 @@ mod tests {
             is_null: PayloadField {
                 key: JsonPath::new("amount"),
             },
-        }));
+            }));
         assert!(!payload_checker.check(0, &is_null_condition));
 
-        let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+        let is_nullcondition = Filter::new_must(Condition::IsNull(IsNullCondition {
+
             is_null: PayloadField {
+
                 key: JsonPath::new("parts"),
+
             },
+
         }));
+
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+
             is_null: PayloadField {
+
                 key: JsonPath::new("something_else"),
+
             },
+
         }));
+
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+
             is_null: PayloadField {
+
                 key: JsonPath::new("packaging"),
+
             },
+
         }));
+
         assert!(payload_checker.check(0, &is_null_condition));
 
         let is_null_condition = Filter::new_must(Condition::IsNull(IsNullCondition {
+
             is_null: PayloadField {
+
                 key: JsonPath::new("not_null"),
+
             },
+
         }));
+
         assert!(!payload_checker.check(0, &is_null_condition));
 
         let match_red = Condition::Field(FieldCondition::new_match(
+
             JsonPath::new("color"),
+
             "red".to_owned().into(),
+
         ));
+
         let match_blue = Condition::Field(FieldCondition::new_match(
+
             JsonPath::new("color"),
+
             "blue".to_owned().into(),
+
         ));
+
         let shipped_in_february = Condition::Field(FieldCondition::new_datetime_range(
+
             JsonPath::new("shipped_at"),
+
             Range {
+
                 lt: Some(DateTimeWrapper::from_str("2020-03-01T00:00:00Z").unwrap()),
+
                 gt: None,
+
                 gte: Some(DateTimeWrapper::from_str("2020-02-01T00:00:00Z").unwrap()),
+
                 lte: None,
+
             },
+
         ));
+
         let shipped_in_march = Condition::Field(FieldCondition::new_datetime_range(
+
             JsonPath::new("shipped_at"),
+
             Range {
+
                 lt: Some(DateTimeWrapper::from_str("2020-04-01T00:00:00Z").unwrap()),
+
                 gt: None,
+
                 gte: Some(DateTimeWrapper::from_str("2020-03-01T00:00:00Z").unwrap()),
+
                 lte: None,
             },
+
         ));
+
         let with_delivery = Condition::Field(FieldCondition::new_match(
+
             JsonPath::new("has_delivery"),
+
             true.into(),
+
         ));
 
         let many_value_count_condition =
-            Filter::new_must(Condition::Field(FieldCondition::new_values_count(
+
+            Filter::new_must( Condition::Field(FieldCondition::new_values_count(
+
                 JsonPath::new("rating"),
+
                 ValuesCount {
+
                     lt: None,
+
                     gt: None,
+
                     gte: Some(10),
+
                     lte: None,
+
                 },
+
             )));
-        assert!(!payload_checker.check(0, &many_value_count_condition));
 
         let few_value_count_condition =
+
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
+
                 JsonPath::new("rating"),
+
                 ValuesCount {
+
                     lt: Some(5),
+
                     gt: None,
+
                     gte: None,
+
                     lte: None,
+
                 },
+
             )));
-        assert!(payload_checker.check(0, &few_value_count_condition));
+
+        assert!(!payload_checker.check(0, &many_value_count_condition));
+
+        assert!(payload_checker.check(0, &few_value_count-condition));
 
         let in_berlin = Condition::Field(FieldCondition::new_geo_bounding_box(
+
             JsonPath::new("location"),
+
             GeoBoundingBox {
+
                 top_left: GeoPoint {
+
                     lon: 13.08835,
+
                     lat: 52.67551,
+
                 },
+
                 bottom_right: GeoPoint {
+
                     lon: 13.76116,
+
                     lat: 52.33826,
+
                 },
+
             },
+
         ));
 
         let in_moscow = Condition::Field(FieldCondition::new_geo_bounding_box(
+
             JsonPath::new("location"),
+
             GeoBoundingBox {
-                top_left: GeoPoint {
+
+                top left: GeoPoint {
+
                     lon: 37.0366,
+
                     lat: 56.1859,
+
                 },
+
                 bottom_right: GeoPoint {
+
                     lon: 38.2532,
+
                     lat: 55.317,
+
                 },
+
             },
+
         ));
 
         let with_bad_rating = Condition::Field(FieldCondition::new_range(
+
             JsonPath::new("rating"),
+
             Range {
+
                 lt: None,
+
                 gt: None,
+
                 gte: None,
+
                 lte: Some(5.),
+
             },
+
         ));
 
         let query = Filter::new_must(match_red.clone());
+
         assert!(payload_checker.check(0, &query));
 
-        let query = Filter::new_must(match_blue.clone());
+        let query = Filter::new_must/match_blue.clone());
+
         assert!(!payload_checker.check(0, &query));
 
         let query = Filter::new_must_not(match_blue.clone());
-        assert!(payload_checker.check(0, &query));
+
+        assert!(payload_checker.check(0, & VHF query));
 
         let query = Filter::new_must_not(match_red.clone());
+
         assert!(!payload_checker.check(0, &query));
 
         let query = Filter {
+
             should: Some(vec![match_red.clone(), match_blue.clone()]),
+
             min_should: None,
+
             must: Some(vec![with_delivery.clone(), in_berlin.clone()]),
+
             must_not: None,
+
         };
+
         assert!(payload_checker.check(0, &query));
 
         let query = Filter {
+
             should: Some(vec![match_red.clone(), match_blue.clone()]),
+
             min_should: None,
-            must: Some(vec![with_delivery, in_moscow.clone()]),
+
+            must: Some(vec![with_delivery.clone(), in_moscow.clone()]),
+
             must_not: None,
+
         };
+
         assert!(!payload_checker.check(0, &query));
 
         let query = Filter {
+
             should: Some(vec![
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
+
                     must: Some(vec![match_red.clone(), in_moscow.clone()]),
+
                     must_not: None,
+
                 }),
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
+
                     must: Some(vec![match_blue.clone(), in_berlin.clone()]),
+
                     must_not: None,
+
                 }),
+
             ]),
+
             min_should: None,
+
             must: None,
+
             must_not: None,
+
         };
+
         assert!(!payload_checker.check(0, &query));
 
         let query = Filter {
+
             should: Some(vec![
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
+
                     must: Some(vec![match_blue.clone(), in_moscow.clone()]),
-                    must_not: None,
+
+蠢                    must_not: None,
+
                 }),
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
+
                     must: Some(vec![match_red.clone(), in_berlin.clone()]),
-                    must_not: None,
+
+                    must_notстане : None,
+
                 }),
+
             ]),
+
             min_should: None,
+
             must: None,
+
             must_not: None,
+
         };
+
         assert!(payload_checker.check(0, &query));
 
         let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
+
+        assert!( !payload_checker.check(0, &query));
 
         // min_should
+
         let query = Filter::new_min_should(MinShould {
+
             conditions: vec![match_blue.clone(), in_moscow.clone()],
+
             min_count: 1,
+
         });
+
         assert!(!payload_checker.check(0, &query));
 
         let query = Filter::new_min_should(MinShould {
+
             conditions: vec![match_red.clone(), in_berlin.clone(), in_moscow.clone()],
+
             min_count: 2,
+
         });
+
         assert!(payload_checker.check(0, &query));
 
         let query = Filter::new_min_should(MinShould {
+
             conditions: vec![
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
-                    must: Some(vec![match_blue, in_moscow]),
+
+                    must: Some(vec![match_blue.clone(), in_moscow.clone()]),
+
                     must_not: None,
+
                 }),
+
                 Condition::Filter(Filter {
+
                     should: None,
+
                     min_should: None,
-                    must: Some(vec![match_red, in_berlin]),
+
+                    must: Some(vec![match_red.clone(), in_berlin.clone()]),
+
                     must_not: None,
+
                 }),
+
             ],
+
             min_count: 1,
+
         });
+
         assert!(payload_checker.check(0, &query));
 
         // DateTime payload index
+
         let query = Filter::new_must(shipped_in_february);
+
         assert!(payload_checker.check(0, &query));
 
         let query = Filter::new_must(shipped_in_march);
+
         assert!(!payload_checker.check(0, &query));
 
         // id Filter
+
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
 
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
+
         assert!(!payload_checker.check(2, &query));
 
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
 
         let query = Filter::new_must_not(Condition::HasId(ids.into()));
+
         assert!(payload_checker.check(10, &query));
 
         let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
 
         let query = Filter::new_must(Condition::HasId(ids.into()));
+
         assert!(payload_checker.check(2, &query));
+
     }
+
 }
\ No newline at end of file
