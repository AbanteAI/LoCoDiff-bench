
index 4e5c39ca7..e91e947e4 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmpf4kd2a90_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmp_l0ie9dy_actual.txt	
@@ -5,11 +5,12 @@ use std::collections::HashMap;
 use std::ops::Deref;
 use std::sync::Arc;
 
+use ahash::AHashSet;
 use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -62,14 +63,12 @@ where
         Some(MinShould {
             conditions,
             min_count,
-        }) => {
-            conditions
-                .iter()
-                .filter(|cond| check(cond))
-                .take(*min_count)
-                .count()
-                == *min_count
-        }
+        }) => conditions
+            .iter()
+            .filter(|cond| check(cond))
+            .take(*min_count)
+            .count()
+            == *min_count,
     }
 }
 
@@ -329,13 +328,13 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
-    use crate::id_tracker::IdTracker;
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::IdTracker;
     use crate::json_path::JsonPath;
     use crate::payload_json;
-    use crate::payload_storage::PayloadStorage;
     use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
+    use crate::payload_storage::PayloadStorage;
     use crate::types::{
         DateTimeWrapper, FieldCondition, GeoBoundingBox, GeoPoint, PayloadField, Range, ValuesCount,
     };
@@ -558,109 +557,4 @@ mod tests {
         let query = Filter {
             should: Some(vec![match_red.clone(), match_blue.clone()]),
             min_should: None,
-            must: Some(vec![with_delivery, in_moscow.clone()]),
-            must_not: None,
-        };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red.clone(), in_moscow.clone()]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue.clone(), in_berlin.clone()]),
-                    must_not: None,
-                }),
-            ]),
-            min_should: None,
-            must: None,
-            must_not: None,
-        };
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter {
-            should: Some(vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue.clone(), in_moscow.clone()]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red.clone(), in_berlin.clone()]),
-                    must_not: None,
-                }),
-            ]),
-            min_should: None,
-            must: None,
-            must_not: None,
-        };
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must_not(with_bad_rating);
-        assert!(!payload_checker.check(0, &query));
-
-        // min_should
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_blue.clone(), in_moscow.clone()],
-            min_count: 1,
-        });
-        assert!(!payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![match_red.clone(), in_berlin.clone(), in_moscow.clone()],
-            min_count: 2,
-        });
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_min_should(MinShould {
-            conditions: vec![
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_blue, in_moscow]),
-                    must_not: None,
-                }),
-                Condition::Filter(Filter {
-                    should: None,
-                    min_should: None,
-                    must: Some(vec![match_red, in_berlin]),
-                    must_not: None,
-                }),
-            ],
-            min_count: 1,
-        });
-        assert!(payload_checker.check(0, &query));
-
-        // DateTime payload index
-        let query = Filter::new_must(shipped_in_february);
-        assert!(payload_checker.check(0, &query));
-
-        let query = Filter::new_must(shipped_in_march);
-        assert!(!payload_checker.check(0, &query));
-
-        // id Filter
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(!payload_checker.check(2, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must_not(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(10, &query));
-
-        let ids: AHashSet<_> = vec![1, 2, 3].into_iter().map(|x| x.into()).collect();
-
-        let query = Filter::new_must(Condition::HasId(ids.into()));
-        assert!(payload_checker.check(2, &query));
-    }
-}
\ No newline at end of file
+            must: Some(vec![with_delivery, in_moscow.clone()]),
\ No newline at end of file
