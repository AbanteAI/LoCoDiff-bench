
index 4e5c39ca7..6acfb9fef 100644
--- a/qdrant_lib_segment_src_payload_storage_query_checker.rs_expectedoutput.txt (expected):tmp/tmpdhlm4m52_expected.txt	
+++ b/qdrant_lib_segment_src_payload_storage_query_checker.rs_extracted.txt (actual):tmp/tmpu1hf69r0_actual.txt	
@@ -1,5 +1,3 @@
-#![cfg_attr(not(feature = "testing"), allow(unused_imports))]
-
 use std::cell::RefCell;
 use std::collections::HashMap;
 use std::ops::Deref;
@@ -9,7 +7,7 @@ use atomic_refcell::AtomicRefCell;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 
-use crate::common::utils::{IndexesMap, check_is_empty, check_is_null};
+use crate::common::utils::{check_is_empty, check_is_null, IndexesMap};
 use crate::id_tracker::IdTrackerSS;
 use crate::index::field_index::FieldIndex;
 use crate::payload_storage::condition_checker::ValueChecker;
@@ -62,14 +60,12 @@ where
         Some(MinShould {
             conditions,
             min_count,
-        }) => {
-            conditions
-                .iter()
-                .filter(|cond| check(cond))
-                .take(*min_count)
-                .count()
-                == *min_count
-        }
+        }) => conditions
+            .iter()
+            .filter(|cond| check(cond))
+            .take(*min_count)
+            .count()
+            == *min_count,
     }
 }
 
@@ -162,11 +158,9 @@ where
                     )
                 })
         }
-
         Condition::CustomIdChecker(cond) => id_tracker
             .and_then(|id_tracker| id_tracker.external_id(point_id))
             .is_some_and(|point_id| cond.check(point_id)),
-
         Condition::Filter(_) => unreachable!(),
     };
 
@@ -180,7 +174,10 @@ pub fn check_is_empty_condition(
     check_is_empty(payload.get_value(&is_empty.is_empty.key).iter().copied())
 }
 
-pub fn check_is_null_condition(is_null: &IsNullCondition, payload: &impl PayloadContainer) -> bool {
+pub fn check_is_null_condition(
+    is_null: &IsNullCondition,
+    payload: &impl PayloadContainer,
+) -> bool {
     check_is_null(payload.get_value(&is_null.is_null.key).iter().copied())
 }
 
@@ -200,7 +197,6 @@ where
         return field_condition.check_empty();
     }
 
-    // This covers a case, when a field index affects the result of the condition.
     if let Some(field_indexes) = field_indexes {
         for p in field_values {
             let mut index_checked = false;
@@ -209,18 +205,13 @@ where
                     index.special_check_condition(field_condition, p, hw_counter)
                 {
                     if index_check_res {
-                        // If at least one object matches the condition, we can return true
                         return true;
                     }
                     index_checked = true;
-                    // If index check of the condition returned something, we don't need to check
-                    // other indexes
                     break;
                 }
             }
             if !index_checked {
-                // If none of the indexes returned anything, we need to check the condition
-                // against the payload
                 if field_condition.check(p) {
                     return true;
                 }
@@ -228,7 +219,6 @@ where
         }
         false
     } else {
-        // Fallback to regular condition check if there are no indexes for the field
         field_values.into_iter().any(|p| field_condition.check(p))
     }
 }
@@ -262,61 +252,38 @@ impl SimpleConditionChecker {
 impl ConditionChecker for SimpleConditionChecker {
     fn check(&self, point_id: PointOffsetType, query: &Filter) -> bool {
         let hw_counter = HardwareCounterCell::new(); // No measurements needed as this is only for test!
-
         let payload_storage_guard = self.payload_storage.borrow();
-
-        let payload_ref_cell: RefCell<Option<OwnedPayloadRef>> = RefCell::new(None);
         let id_tracker = self.id_tracker.borrow();
-
         let vector_storages = &self.vector_storages;
-
         check_payload(
             Box::new(|| {
-                if payload_ref_cell.borrow().is_none() {
-                    let payload_ptr = match payload_storage_guard.deref() {
-                        PayloadStorageEnum::InMemoryPayloadStorage(s) => {
-                            s.payload_ptr(point_id).map(|x| x.into())
-                        }
-                        PayloadStorageEnum::SimplePayloadStorage(s) => {
-                            s.payload_ptr(point_id).map(|x| x.into())
-                        }
-                        PayloadStorageEnum::OnDiskPayloadStorage(s) => {
-                            // Warn: Possible panic here
-                            // Currently, it is possible that `read_payload` fails with Err,
-                            // but it seems like a very rare possibility which might only happen
-                            // if something is wrong with disk or storage is corrupted.
-                            //
-                            // In both cases it means that service can't be of use any longer.
-                            // It is as good as dead. Therefore it is tolerable to just panic here.
-                            // Downside is - API user won't be notified of the failure.
-                            // It will just timeout.
-                            //
-                            // The alternative:
-                            // Rewrite condition checking code to support error reporting.
-                            // Which may lead to slowdown and assumes a lot of changes.
-                            s.read_payload(point_id, &hw_counter)
-                                .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
-                                .map(|x| x.into())
-                        }
-                        PayloadStorageEnum::MmapPayloadStorage(s) => {
-                            let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
-                                panic!("Payload storage is corrupted: {err}")
-                            });
-                            Some(OwnedPayloadRef::from(payload))
-                        }
-                    };
-
-                    payload_ref_cell
-                        .replace(payload_ptr.or_else(|| Some((&self.empty_payload).into())));
-                }
-                payload_ref_cell.borrow().as_ref().cloned().unwrap()
+                let payload_ptr = match payload_storage_guard.deref() {
+                    PayloadStorageEnum::InMemoryPayloadStorage(s) => {
+                        s.payload_ptr(point_id).map(|x| x.into())
+                    }
+                    PayloadStorageEnum::SimplePayloadStorage(s) => {
+                        s.payload_ptr(point_id).map(|x| x.into())
+                    }
+                    PayloadStorageEnum::OnDiskPayloadStorage(s) => {
+                        s.read_payload(point_id, &hw_counter)
+                            .unwrap_or_else(|err| panic!("Payload storage is corrupted: {err}"))
+                            .map(|x| x.into())
+                    }
+                    PayloadStorageEnum::MmapPayloadStorage(s) => {
+                        let payload = s.get(point_id, &hw_counter).unwrap_or_else(|err| {
+                            panic!("Payload storage is corrupted: {err}")
+                        });
+                        Some(OwnedPayloadRef::from(payload))
+                    }
+                };
+                payload_ptr.unwrap_or_else(|| (&self.empty_payload).into())
             }),
             Some(id_tracker.deref()),
             vector_storages,
             query,
             point_id,
             &IndexesMap::new(),
-            &HardwareCounterCell::new(),
+            &hw_counter,
         )
     }
 }
@@ -362,7 +329,6 @@ mod tests {
         };
 
         let hw_counter = HardwareCounterCell::new();
-
         let mut payload_storage: PayloadStorageEnum =
             SimplePayloadStorage::open(db.clone()).unwrap().into();
         let mut id_tracker = SimpleIdTracker::open(db).unwrap();
@@ -468,10 +434,8 @@ mod tests {
                 lte: None,
             },
         ));
-        let with_delivery = Condition::Field(FieldCondition::new_match(
-            JsonPath::new("has_delivery"),
-            true.into(),
-        ));
+        let with_delivery =
+            Condition::Field(FieldCondition::new_match(JsonPath::new("has_delivery"), true.into()));
 
         let many_value_count_condition =
             Filter::new_must(Condition::Field(FieldCondition::new_values_count(
