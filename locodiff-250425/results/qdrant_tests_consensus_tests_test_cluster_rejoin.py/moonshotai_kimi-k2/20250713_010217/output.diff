
index 95fb168d6..79971306e 100644
--- a/qdrant_tests_consensus_tests_test_cluster_rejoin.py_expectedoutput.txt (expected):tmp/tmptzbuu914_expected.txt	
+++ b/qdrant_tests_consensus_tests_test_cluster_rejoin.py_extracted.txt (actual):tmp/tmpqv2orsd1_actual.txt	
@@ -6,6 +6,8 @@ from typing import Any
 
 from consensus_tests.fixtures import create_collection, upsert_random_points, drop_collection
 import requests
+import pytest
+import json
 from .utils import *
 
 N_PEERS = 3
@@ -100,6 +102,7 @@ def test_rejoin_origin_from_wal(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_cluster, overwrite_first_voter)
 
+
 def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
     """
     This test checks that Qdrant persists origin peer ID (`first_voter` field in `raft_state.json`)
@@ -253,50 +256,6 @@ def rejoin_cluster_test(
     info = get_collection_cluster_info(new_peer_uri, collection)
     assert len(info["remote_shards"]) == expected_shards
 
-def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
-    assert_project_root()
-
-    # Collect peer URIs
-    peer_uris = []
-
-    # Create peer directories
-    peer_dirs = make_peer_folders(tmp_path, peers)
-
-    # Copy first peer Raft state and WAL from `test_cluster_rejoin_data`.
-    #
-    # It's just an "empty" peer, but its peer ID is *not* committed into WAL. We can use this peer to
-    # test that first peer ID is correctly recovered/propagated, even when it's not committed into WAL.
-    shutil.copytree("tests/consensus_tests/test_cluster_rejoin_data", f"{peer_dirs[0]}/storage")
-
-    # Modify peer URI in Raft state to prevent URI change on startup ðŸ™„
-    p2p_port = get_port()
-    grpc_port = get_port()
-    http_port = get_port()
-
-    with open(f"{peer_dirs[0]}/storage/raft_state.json", "r+") as file:
-        state = json.load(file)
-
-        state["peer_address_by_id"][str(state["this_peer_id"])] = f"http://127.0.0.1:{p2p_port}"
-
-        file.seek(0, io.SEEK_SET)
-        file.truncate()
-        json.dump(state, file)
-
-    # Start first peer
-    first_peer_uri, bootstrap_uri = start_first_peer(peer_dirs[0], "peer_0_0.log", p2p_port)
-    peer_uris.append(first_peer_uri)
-
-    wait_for_peer_online(first_peer_uri)
-
-    # Bootstrap other peers
-    for peer_idx in range(1, peers):
-        peer_uri = start_peer(peer_dirs[peer_idx], f"peer_0_{peer_idx}.log", bootstrap_uri)
-        peer_uris.append(peer_uri)
-
-    wait_all_peers_up(peer_uris)
-
-    return peer_uris, peer_dirs, bootstrap_uri
-
 
 def move_all_shards_from_peer(peer_uri: str, collection: str = "test_collection") -> tuple[int, int]:
     """
@@ -354,4 +313,48 @@ def add_new_peer(tmp_path: pathlib.Path, peer_idx: int, bootstrap_uri: str, coll
     if collection is not None:
         wait_collection_on_all_peers(collection, [peer_uri])
 
-    return peer_uri, peer_dir
\ No newline at end of file
+    return peer_uri, peer_dir
+
+def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
+    assert_project_root()
+
+    # Collect peer URIs
+    peer_uris = []
+
+    # Create peer directories
+    peer_dirs = make_peer_folders(tmp_path, peers)
+
+    # Copy first peer Raft state and WAL from `test_cluster_rejoin_data`.
+    #
+    # It's just an "empty" peer, but its peer ID is *not* committed into WAL. We can use this peer to
+    # test that first peer ID is correctly recovered/propagated, even when it's not committed into WAL.
+    shutil.copytree("tests/consensus_tests/test_cluster_rejoin_data", f"{peer_dirs[0]}/storage")
+
+    # Modify peer URI in Raft state to prevent URI change on startup ðŸ™„
+    p2p_port = get_port()
+    grpc_port = get_port()
+    http_port = get_port()
+
+    with open(f"{peer_dirs[0]}/storage/raft_state.json", "r+") as file:
+        state = json.load(file)
+
+        state["peer_address_by_id"][str(state["this_peer_id"])] = f"http://127.0.0.1:{p2p_port}"
+
+        file.seek(0, io.SEEK_SET)
+        file.truncate()
+        json.dump(state, file)
+
+    # Start first peer
+    first_peer_uri, bootstrap_uri = start_first_peer(peer_dirs[0], "peer_0_0.log", p2p_port)
+    peer_uris.append(first_peer_uri)
+
+    wait_for_peer_online(first_peer_uri)
+
+    # Bootstrap other peers
+    for peer_idx in range(1, peers):
+        peer_uri = start_peer(peer_dirs[peer_idx], f"peer_0_{peer_idx}.log", bootstrap_uri)
+        peer_uris.append(peer_uri)
+
+    wait_all_peers_up(peer_uris)
+
+    return peer_uris, peer_dirs, bootstrap_uri
\ No newline at end of file
