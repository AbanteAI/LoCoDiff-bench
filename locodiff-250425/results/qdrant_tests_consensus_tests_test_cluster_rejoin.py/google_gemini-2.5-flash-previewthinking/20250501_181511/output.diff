--- qdrant_tests_consensus_tests_test_cluster_rejoin.py_expectedoutput.txt (expected)+++ qdrant_tests_consensus_tests_test_cluster_rejoin.py_extracted.txt (actual)@@ -2,11 +2,12 @@ import pathlib
 import shutil
 from time import sleep
-from typing import Any
+from typing import Any, Callable
 
 from consensus_tests.fixtures import create_collection, upsert_random_points, drop_collection
 import requests
 from .utils import *
+import pytest
 
 N_PEERS = 3
 N_REPLICA = 2
@@ -100,6 +101,7 @@ 
     rejoin_cluster_test(tmp_path, start_cluster, overwrite_first_voter)
 
+
 def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
     """
     This test checks that Qdrant persists origin peer ID (`first_voter` field in `raft_state.json`)
@@ -121,6 +123,7 @@ 
     rejoin_cluster_test(tmp_path, start_preconfigured_cluster, assert_first_voter)
 
+
 @pytest.mark.skip("this test simulates and asserts past, incorrect behavior")
 def test_rejoin_no_origin(tmp_path: pathlib.Path):
     """
@@ -187,6 +190,7 @@     move_all_shards_from_peer(peer_uris[0], collection)
     remove_peer(peer_uris[0])
     processes.pop(0).kill()
+
 
     # Wait a few seconds for new leader
     sleep(5)
@@ -253,6 +257,7 @@     info = get_collection_cluster_info(new_peer_uri, collection)
     assert len(info["remote_shards"]) == expected_shards
 
+
 def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
     assert_project_root()
 
