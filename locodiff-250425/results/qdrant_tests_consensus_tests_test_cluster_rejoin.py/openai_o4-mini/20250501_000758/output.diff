
index 95fb168d..7b85fe30 100644
--- a/qdrant_tests_consensus_tests_test_cluster_rejoin.py_expectedoutput.txt (expected):tmp/tmpjydu0o26_expected.txt	
+++ b/qdrant_tests_consensus_tests_test_cluster_rejoin.py_extracted.txt (actual):tmp/tmp4by3krb0_actual.txt	
@@ -12,15 +12,18 @@ N_PEERS = 3
 N_REPLICA = 2
 N_SHARDS = 3
 
-
 @pytest.mark.parametrize("uris_in_env", [False, True])
 def test_rejoin_cluster(tmp_path: pathlib.Path, uris_in_env):
     assert_project_root()
     # Start cluster
-    peer_api_uris, peer_dirs, bootstrap_uri = start_cluster(tmp_path, N_PEERS, port_seed=10000, uris_in_env=uris_in_env)
+    peer_api_uris, peer_dirs, bootstrap_uri = start_cluster(
+        tmp_path, N_PEERS, port_seed=10000, uris_in_env=uris_in_env
+    )
 
     create_collection(peer_api_uris[0], shard_number=N_SHARDS, replication_factor=N_REPLICA)
-    wait_collection_exists_and_active_on_all_peers(collection_name="test_collection", peer_api_uris=peer_api_uris)
+    wait_collection_exists_and_active_on_all_peers(
+        collection_name="test_collection", peer_api_uris=peer_api_uris
+    )
     upsert_random_points(peer_api_uris[0], 100)
 
     # Stop last node
@@ -33,14 +36,17 @@ def test_rejoin_cluster(tmp_path: pathlib.Path, uris_in_env):
     # Assert that there are dead replicas
     wait_for_some_replicas_not_active(peer_api_uris[0], "test_collection")
 
-    # Repeatedly drop, re-create collection and add data to it to accumulate Raft log entries
     for i in range(0, 2):
         print(f"creating collection {i}")
         # Drop test_collection
         drop_collection(peer_api_uris[0], "test_collection", timeout=5)
         # Re-create test_collection
-        create_collection(peer_api_uris[0], shard_number=N_SHARDS, replication_factor=N_REPLICA, timeout=3)
-        # Collection might not be ready yet, we don't care
+        create_collection(
+            peer_api_uris[0],
+            shard_number=N_SHARDS,
+            replication_factor=N_REPLICA,
+            timeout=3,
+        )
         upsert_random_points(peer_api_uris[0], 100)
         print(f"before recovery end {i}")
         res = requests.get(f"{peer_api_uris[1]}/collections")
@@ -52,24 +58,34 @@ def test_rejoin_cluster(tmp_path: pathlib.Path, uris_in_env):
         "test_collection2",
         shard_number=N_SHARDS,
         replication_factor=N_REPLICA,
-        timeout=3
+        timeout=3,
     )
 
     # Restart last node
-    new_url = start_peer(peer_dirs[-1], "peer_0_restarted.log", bootstrap_uri, port=20000, uris_in_env=uris_in_env)
+    new_url = start_peer(
+        peer_dirs[-1],
+        "peer_0_restarted.log",
+        bootstrap_uri,
+        port=20000,
+        uris_in_env=uris_in_env,
+    )
 
     peer_api_uris[-1] = new_url
 
     # Wait for restarted node to be up and ready
     wait_all_peers_up([new_url])
 
-    # Repeatedly drop, re-create collection and add data to it to accumulate Raft log entries
     for i in range(0, 5):
         print(f"after recovery start {i}")
         # Drop test_collection
         drop_collection(peer_api_uris[0], "test_collection", timeout=5)
         # Re-create test_collection
-        create_collection(peer_api_uris[0], shard_number=N_SHARDS, replication_factor=N_REPLICA, timeout=3)
+        create_collection(
+            peer_api_uris[0],
+            shard_number=N_SHARDS,
+            replication_factor=N_REPLICA,
+            timeout=3,
+        )
         upsert_random_points(peer_api_uris[0], 500, fail_on_error=False)
         print(f"after recovery end {i}")
         res = requests.get(f"{new_url}/collections")
@@ -100,6 +116,128 @@ def test_rejoin_origin_from_wal(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_cluster, overwrite_first_voter)
 
+
+def rejoin_cluster_test(
+    tmp_path: pathlib.Path,
+    start_cluster: Callable[[pathlib.Path, int], tuple[list[str], list[pathlib.Path], str]],
+    raft_state: Callable[[dict[str, Any], int], Any | None],
+    collection: str = "test_collection",
+    peers: int = 3,
+    shards: int = 3,
+    expected_shards: int = 3,
+):
+    """
+    Parameterized test body, that tests adding new peer after origin peer was removed from the cluster.
+    See: <https://github.com/qdrant/qdrant/issues/5138>
+    """
+
+    # Start cluster
+    peer_uris, peer_dirs, bootstrap_uri = start_cluster(tmp_path, peers)
+
+    # Get origin peer ID
+    origin_peer_id = get_cluster_info(peer_uris[0])["peer_id"]
+
+    # Create collection, move all shards from first peer, remove first peer from cluster
+    create_collection(peer_uris[0], collection, shards, 1)
+    move_all_shards_from_peer(peer_uris[0], collection)
+    remove_peer(peer_uris[0])
+    processes.pop(0).kill()
+
+    # Generally, we could use *any* (second/third/random/last/etc) peer to bootstrap new peer from,
+    # but using second peer allows to (trivially) catch a single additional corner case in how we
+    # initialize consensus state when bootstrapping new peer.
+
+    # Kill second peer
+    second_peer = processes.pop(0)
+    second_peer.kill()
+
+    # Check/modify last peer `raft_state.json`
+    with open(f"{peer_dirs[1]}/storage/raft_state.json", "r+") as file:
+        state = json.load(file)
+
+        if new_state := raft_state(state, origin_peer_id):
+            file.seek(0, io.SEEK_SET)
+            file.truncate()
+            json.dump(new_state, file)
+
+    # Restart second peer with the same URI and ports
+    second_peer_uri, bootstrap_uri = start_first_peer(
+        peer_dirs[1], "peer_0_1_restarted.log", second_peer.p2p_port
+    )
+    wait_for_peer_online(second_peer_uri)
+
+    # Add new peer to cluster
+    new_peer_uri, new_peer_dir = add_new_peer(tmp_path, peers, bootstrap_uri, collection)
+
+    # Assert that new peer observe expected number of remote shards
+    info = get_collection_cluster_info(new_peer_uri, collection)
+    assert len(info["remote_shards"]) == expected_shards
+
+
+def move_all_shards_from_peer(peer_uri: str, collection: str = "test_collection") -> tuple[int, int]:
+    """
+    Moves all shards from peer at `peer_uri` to another (random) peer in the cluster.
+    """
+
+    # Find peer to move shards to
+    info = get_cluster_info(peer_uri)
+
+    current_peer_id = info["peer_id"]
+    other_peer_id = None
+
+    for peer_id, info in info["peers"].items():
+        peer_id = int(peer_id)
+
+        if peer_id != current_peer_id:
+            other_peer_id = peer_id
+            break
+
+    assert other_peer_id
+
+    # Move all shards from first peer to second peer
+    info = get_collection_cluster_info(peer_uri, collection)
+
+    for shard in info["local_shards"]:
+        resp = requests.post(
+            f"{peer_uri}/collections/{collection}/cluster",
+            json={
+                "move_shard": {
+                    "from_peer_id": current_peer_id,
+                    "to_peer_id": other_peer_id,
+                    "shard_id": shard["shard_id"],
+                }
+            },
+        )
+
+        assert_http_ok(resp)
+
+    # Wait until all transfers finished
+    wait_for_collection_shard_transfers_count(peer_uri, collection, 0)
+
+    return current_peer_id, other_peer_id
+
+
+def remove_peer(peer_uri: str, peer_id: int | None = None):
+    if peer_id is None:
+        info = get_cluster_info(peer_uri)
+        peer_id = info["peer_id"]
+
+    resp = requests.delete(f"{peer_uri}/cluster/peer/{peer_id}")
+    assert_http_ok(resp)
+
+
+def add_new_peer(tmp_path: pathlib.Path, peer_idx: int, bootstrap_uri: str, collection: str | None = None):
+    peer_dir = make_peer_folder(tmp_path, peer_idx)
+    peer_uri = start_peer(peer_dir, f"peer_0_{peer_idx}.log", bootstrap_uri)
+
+    wait_for_peer_online(peer_uri)
+
+    if collection is not None:
+        wait_collection_on_all_peers(collection, [peer_uri])
+
+    return peer_uri, peer_dir
+
+
 def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
     """
     This test checks that Qdrant persists origin peer ID (`first_voter` field in `raft_state.json`)
@@ -121,6 +259,7 @@ def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_preconfigured_cluster, assert_first_voter)
 
+
 @pytest.mark.skip("this test simulates and asserts past, incorrect behavior")
 def test_rejoin_no_origin(tmp_path: pathlib.Path):
     """
@@ -174,7 +313,9 @@ def test_rejoin_recover_origin(tmp_path: pathlib.Path):
         json.dump(state, file)
 
     # Restart second peer with the same URI and ports
-    second_peer_uri, bootstrap_uri = start_first_peer(peer_dirs[1], "peer_0_1_restarted.log", second_peer.p2p_port)
+    second_peer_uri, bootstrap_uri = start_first_peer(
+        peer_dirs[1], "peer_0_1_restarted.log", second_peer.p2p_port
+    )
     wait_for_peer_online(second_peer_uri)
 
     # Assert second peer recovered `first_voter` from WAL
@@ -199,60 +340,6 @@ def test_rejoin_recover_origin(tmp_path: pathlib.Path):
     assert len(info["remote_shards"]) == shards
 
 
-def rejoin_cluster_test(
-    tmp_path: pathlib.Path,
-    start_cluster: Callable[[pathlib.Path, int], tuple[list[str], list[pathlib.Path], str]],
-    raft_state: Callable[[dict[str, Any], int], Any | None],
-    collection: str = "test_collection",
-    peers: int = 3,
-    shards: int = 3,
-    expected_shards: int = 3,
-):
-    """
-    Parameterized test body, that tests adding new peer after origin peer was removed from the cluster.
-    See: <https://github.com/qdrant/qdrant/issues/5138>
-    """
-
-    # Start cluster
-    peer_uris, peer_dirs, bootstrap_uri = start_cluster(tmp_path, peers)
-
-    # Get origin peer ID
-    origin_peer_id = get_cluster_info(peer_uris[0])["peer_id"]
-
-    # Create collection, move all shards from first peer, remove first peer from cluster
-    create_collection(peer_uris[0], collection, shards, 1)
-    move_all_shards_from_peer(peer_uris[0], collection)
-    remove_peer(peer_uris[0])
-    processes.pop(0).kill()
-
-    # Generally, we could use *any* (second/third/random/last/etc) peer to bootstrap new peer from,
-    # but using second peer allows to (trivially) catch a single additional corner case in how we
-    # initialize consensus state when bootstrapping new peer.
-
-    # Kill second peer
-    second_peer = processes.pop(0)
-    second_peer.kill()
-
-    # Check/modify last peer `raft_state.json`
-    with open(f"{peer_dirs[1]}/storage/raft_state.json", "r+") as file:
-        state = json.load(file)
-
-        if new_state := raft_state(state, origin_peer_id):
-            file.seek(0, io.SEEK_SET)
-            file.truncate()
-            json.dump(new_state, file)
-
-    # Restart second peer with the same URI and ports
-    second_peer_uri, bootstrap_uri = start_first_peer(peer_dirs[1], "peer_0_1_restarted.log", second_peer.p2p_port)
-    wait_for_peer_online(second_peer_uri)
-
-    # Add new peer to cluster
-    new_peer_uri, new_peer_dir = add_new_peer(tmp_path, peers, bootstrap_uri, collection)
-
-    # Assert that new peer observe expected number of remote shards
-    info = get_collection_cluster_info(new_peer_uri, collection)
-    assert len(info["remote_shards"]) == expected_shards
-
 def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
     assert_project_root()
 
@@ -266,7 +353,10 @@ def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
     #
     # It's just an "empty" peer, but its peer ID is *not* committed into WAL. We can use this peer to
     # test that first peer ID is correctly recovered/propagated, even when it's not committed into WAL.
-    shutil.copytree("tests/consensus_tests/test_cluster_rejoin_data", f"{peer_dirs[0]}/storage")
+    shutil.copytree(
+        "tests/consensus_tests/test_cluster_rejoin_data",
+        f"{peer_dirs[0]}/storage",
+    )
 
     # Modify peer URI in Raft state to prevent URI change on startup 🙄
     p2p_port = get_port()
@@ -283,7 +373,9 @@ def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
         json.dump(state, file)
 
     # Start first peer
-    first_peer_uri, bootstrap_uri = start_first_peer(peer_dirs[0], "peer_0_0.log", p2p_port)
+    first_peer_uri, bootstrap_uri = start_first_peer(
+        peer_dirs[0], "peer_0_0.log", p2p_port
+    )
     peer_uris.append(first_peer_uri)
 
     wait_for_peer_online(first_peer_uri)
@@ -295,63 +387,4 @@ def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
 
     wait_all_peers_up(peer_uris)
 
-    return peer_uris, peer_dirs, bootstrap_uri
-
-
-def move_all_shards_from_peer(peer_uri: str, collection: str = "test_collection") -> tuple[int, int]:
-    """
-    Moves all shards from peer at `peer_uri` to another (random) peer in the cluster.
-    """
-
-    # Find peer to move shards to
-    info = get_cluster_info(peer_uri)
-
-    current_peer_id = info["peer_id"]
-    other_peer_id = None
-
-    for peer_id, info in info["peers"].items():
-        peer_id = int(peer_id)
-
-        if peer_id != current_peer_id:
-            other_peer_id = peer_id
-            break
-
-    assert other_peer_id
-
-    # Move all shards from first peer to second peer
-    info = get_collection_cluster_info(peer_uri, collection)
-
-    for shard in info["local_shards"]:
-        resp = requests.post(f"{peer_uri}/collections/{collection}/cluster", json={
-            "move_shard": {
-                "from_peer_id": current_peer_id,
-                "to_peer_id": other_peer_id,
-                "shard_id": shard["shard_id"],
-            }
-        })
-
-        assert_http_ok(resp)
-
-    # Wait until all transfers finished
-    wait_for_collection_shard_transfers_count(peer_uri, collection, 0)
-
-    return current_peer_id, other_peer_id
-
-def remove_peer(peer_uri: str, peer_id: int | None = None):
-    if peer_id is None:
-        info = get_cluster_info(peer_uri)
-        peer_id = info["peer_id"]
-
-    resp = requests.delete(f"{peer_uri}/cluster/peer/{peer_id}")
-    assert_http_ok(resp)
-
-def add_new_peer(tmp_path: pathlib.Path, peer_idx: int, bootstrap_uri: str, collection: str | None = None):
-    peer_dir = make_peer_folder(tmp_path, peer_idx)
-    peer_uri = start_peer(peer_dir, f"peer_0_{peer_idx}.log", bootstrap_uri)
-
-    wait_for_peer_online(peer_uri)
-
-    if collection is not None:
-        wait_collection_on_all_peers(collection, [peer_uri])
-
-    return peer_uri, peer_dir
\ No newline at end of file
+    return peer_uris, peer_dirs, bootstrap_uri
\ No newline at end of file
