
index 95fb168d..1f089674 100644
--- a/qdrant_tests_consensus_tests_test_cluster_rejoin.py_expectedoutput.txt (expected):tmp/tmpp9sci5xw_expected.txt	
+++ b/qdrant_tests_consensus_tests_test_cluster_rejoin.py_extracted.txt (actual):tmp/tmpkx5oeuid_actual.txt	
@@ -2,11 +2,34 @@ import io
 import pathlib
 import shutil
 from time import sleep
-from typing import Any
+from typing import Any, Callable
 
-from consensus_tests.fixtures import create_collection, upsert_random_points, drop_collection
+import pytest
 import requests
-from .utils import *
+
+from consensus_tests.fixtures import create_collection, upsert_random_points, drop_collection
+from .utils import (
+    assert_http_ok,
+    assert_project_root,
+    get_cluster_info,
+    get_collection_cluster_info,
+    make_peer_folder,
+    make_peer_folders,
+    processes,
+    remove_peer as utils_remove_peer,
+    start_cluster as utils_start_cluster,
+    start_peer,
+    start_first_peer,
+    wait_all_peers_up,
+    wait_collection_exists_and_active_on_all_peers,
+    wait_collection_on_all_peers,
+    wait_for_all_replicas_active,
+    wait_for_collection_shard_transfers_count,
+    wait_for_peer_online,
+    wait_for_some_replicas_not_active,
+    get_port,
+    wait_collection_on_all_peers,
+)
 
 N_PEERS = 3
 N_REPLICA = 2
@@ -17,7 +40,7 @@ N_SHARDS = 3
 def test_rejoin_cluster(tmp_path: pathlib.Path, uris_in_env):
     assert_project_root()
     # Start cluster
-    peer_api_uris, peer_dirs, bootstrap_uri = start_cluster(tmp_path, N_PEERS, port_seed=10000, uris_in_env=uris_in_env)
+    peer_api_uris, peer_dirs, bootstrap_uri = utils_start_cluster(tmp_path, N_PEERS, port_seed=10000, uris_in_env=uris_in_env)
 
     create_collection(peer_api_uris[0], shard_number=N_SHARDS, replication_factor=N_REPLICA)
     wait_collection_exists_and_active_on_all_peers(collection_name="test_collection", peer_api_uris=peer_api_uris)
@@ -98,7 +121,8 @@ def test_rejoin_origin_from_wal(tmp_path: pathlib.Path):
         state["first_voter"] = state["this_peer_id"]
         return state
 
-    rejoin_cluster_test(tmp_path, start_cluster, overwrite_first_voter)
+    rejoin_cluster_test(tmp_path, utils_start_cluster, overwrite_first_voter)
+
 
 def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
     """
@@ -121,6 +145,7 @@ def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_preconfigured_cluster, assert_first_voter)
 
+
 @pytest.mark.skip("this test simulates and asserts past, incorrect behavior")
 def test_rejoin_no_origin(tmp_path: pathlib.Path):
     """
@@ -185,7 +210,7 @@ def test_rejoin_recover_origin(tmp_path: pathlib.Path):
     # Create collection, move all shards from first peer, remove first peer from cluster
     create_collection(peer_uris[0], collection, shards, 1)
     move_all_shards_from_peer(peer_uris[0], collection)
-    remove_peer(peer_uris[0])
+    utils_remove_peer(peer_uris[0])
     processes.pop(0).kill()
 
     # Wait a few seconds for new leader
@@ -222,7 +247,7 @@ def rejoin_cluster_test(
     # Create collection, move all shards from first peer, remove first peer from cluster
     create_collection(peer_uris[0], collection, shards, 1)
     move_all_shards_from_peer(peer_uris[0], collection)
-    remove_peer(peer_uris[0])
+    utils_remove_peer(peer_uris[0])
     processes.pop(0).kill()
 
     # Generally, we could use *any* (second/third/random/last/etc) peer to bootstrap new peer from,
@@ -253,6 +278,7 @@ def rejoin_cluster_test(
     info = get_collection_cluster_info(new_peer_uri, collection)
     assert len(info["remote_shards"]) == expected_shards
 
+
 def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
     assert_project_root()
 
@@ -337,13 +363,6 @@ def move_all_shards_from_peer(peer_uri: str, collection: str = "test_collection"
 
     return current_peer_id, other_peer_id
 
-def remove_peer(peer_uri: str, peer_id: int | None = None):
-    if peer_id is None:
-        info = get_cluster_info(peer_uri)
-        peer_id = info["peer_id"]
-
-    resp = requests.delete(f"{peer_uri}/cluster/peer/{peer_id}")
-    assert_http_ok(resp)
 
 def add_new_peer(tmp_path: pathlib.Path, peer_idx: int, bootstrap_uri: str, collection: str | None = None):
     peer_dir = make_peer_folder(tmp_path, peer_idx)
