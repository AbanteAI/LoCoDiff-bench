
index 95fb168d..4801a18a 100644
--- a/qdrant_tests_consensus_tests_test_cluster_rejoin.py_expectedoutput.txt (expected):tmp/tmpru_n9ken_expected.txt	
+++ b/qdrant_tests_consensus_tests_test_cluster_rejoin.py_extracted.txt (actual):tmp/tmpb2ai87x4_actual.txt	
@@ -100,6 +100,7 @@ def test_rejoin_origin_from_wal(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_cluster, overwrite_first_voter)
 
+
 def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
     """
     This test checks that Qdrant persists origin peer ID (`first_voter` field in `raft_state.json`)
@@ -121,6 +122,7 @@ def test_rejoin_origin_from_state(tmp_path: pathlib.Path):
 
     rejoin_cluster_test(tmp_path, start_preconfigured_cluster, assert_first_voter)
 
+
 @pytest.mark.skip("this test simulates and asserts past, incorrect behavior")
 def test_rejoin_no_origin(tmp_path: pathlib.Path):
     """
@@ -253,6 +255,7 @@ def rejoin_cluster_test(
     info = get_collection_cluster_info(new_peer_uri, collection)
     assert len(info["remote_shards"]) == expected_shards
 
+
 def start_preconfigured_cluster(tmp_path: pathlib.Path, peers: int = 3):
     assert_project_root()
 
@@ -337,6 +340,7 @@ def move_all_shards_from_peer(peer_uri: str, collection: str = "test_collection"
 
     return current_peer_id, other_peer_id
 
+
 def remove_peer(peer_uri: str, peer_id: int | None = None):
     if peer_id is None:
         info = get_cluster_info(peer_uri)
@@ -345,6 +349,7 @@ def remove_peer(peer_uri: str, peer_id: int | None = None):
     resp = requests.delete(f"{peer_uri}/cluster/peer/{peer_id}")
     assert_http_ok(resp)
 
+
 def add_new_peer(tmp_path: pathlib.Path, peer_idx: int, bootstrap_uri: str, collection: str | None = None):
     peer_dir = make_peer_folder(tmp_path, peer_idx)
     peer_uri = start_peer(peer_dir, f"peer_0_{peer_idx}.log", bootstrap_uri)
