
index 1790a2e6..fba89b49 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpgegl8fpa_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmpx9p2gy6g_actual.txt	
@@ -160,8 +160,9 @@ pub const Face = struct {
         self.* = undefined;
     }
 
-    /// Return a new face that is the same as this but has a transformation
-    /// matrix applied to italicize it.
+    /// Return a new face that is the same as this but applies a synthetic
+    /// italic effect to it. This is useful for fonts that don't have an italic
+    /// variant.
     pub fn syntheticItalic(self: *const Face, opts: font.face.Options) !Face {
         const ct_font = try self.font.copyWithAttributes(0.0, &italic_skew, null);
         errdefer ct_font.release();
@@ -496,13 +497,6 @@ pub const Face = struct {
         };
     }
 
-    pub const GetMetricsError = error{
-        CopyTableError,
-        InvalidHeadTable,
-        InvalidPostTable,
-        InvalidHheaTable,
-    };
-
     /// Get the `FaceMetrics` for this face.
     pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
         const ct_font = self.font;
@@ -545,19 +539,6 @@ pub const Face = struct {
             };
         };
 
-        // Read the 'OS/2' table out of the font data if it's available.
-        const os2_: ?opentype.OS2 = os2: {
-            const tag = macos.text.FontTableTag.init("OS/2");
-            const data = ct_font.copyTable(tag) orelse break :os2 null;
-            defer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            break :os2 opentype.OS2.init(ptr[0..len]) catch |err| {
-                log.warn("error parsing OS/2 table: {}", .{err});
-                break :os2 null;
-            };
-        };
-
         // Read the 'hhea' table out of the font data.
         const hhea: opentype.Hhea = hhea: {
             const tag = macos.text.FontTableTag.init("hhea");
@@ -572,6 +553,19 @@ pub const Face = struct {
             };
         };
 
+        // Read the 'OS/2' table out of the font data if it's available.
+        const os2_: ?opentype.OS2 = os2: {
+            const tag = macos.text.FontTableTag.init("OS/2");
+            const data = ct_font.copyTable(tag) orelse break :os2 null;
+            defer data.release();
+            const ptr = data.getPointer();
+            const len = data.getLength();
+            break :os2 opentype.OS2.init(ptr[0..len]) catch |err| {
+                log.warn("error parsing OS/2 table: {}", .{err});
+                break :os2 null;
+            };
+        };
+
         const units_per_em: f64 = @floatFromInt(head.unitsPerEm);
         const px_per_em: f64 = ct_font.getSize();
         const px_per_unit: f64 = px_per_em / units_per_em;
@@ -645,7 +639,7 @@ pub const Face = struct {
         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
 
-        const underline_thickness = if (has_broken_underline)
+        const underline_thickness: ?f64 = if (has_broken_underline)
             null
         else
             @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
@@ -888,6 +882,10 @@ test "name" {
 
 test "emoji" {
     const testing = std.testing;
+    const alloc = testing.allocator;
+
+    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
+    defer atlas.deinit(alloc);
 
     const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
     defer name.release();
