--- ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_coretext.zig_extracted.txt (actual)@@ -183,7 +183,6 @@         // font size.
         const points_f64: f64 = @floatCast(opts.size.points);
         const line_width = @max(points_f64 / 14.0, 1);
-        // log.debug("synthetic bold line width={}", .{line_width});
         face.synthetic_bold = line_width;
 
         return face;
@@ -645,7 +644,7 @@         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
 
-        const underline_thickness = if (has_broken_underline)
+        const underline_thickness: ?f64 = if (has_broken_underline)
             null
         else
             @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
@@ -836,197 +835,4 @@ 
         return false;
     }
-};
-
-test {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    const name = try macos.foundation.String.createWithBytes("Monaco", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "name" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Menlo", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    var buf: [1024]u8 = undefined;
-    const font_name = try face.name(&buf);
-    try testing.expect(std.mem.eql(u8, font_name, "Menlo"));
-}
-
-test "emoji" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 18 } });
-    defer face.deinit();
-
-    // Glyph index check
-    {
-        const id = face.glyphIndex('ðŸ¥¸').?;
-        try testing.expect(face.isColorGlyph(id));
-    }
-}
-
-test "in-memory" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable set variation" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    try face.setVariations(&.{
-        .{ .id = font.face.Variation.Id.init("wght"), .value = 400 },
-    }, .{ .size = .{ .points = 12 } });
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "svg font table" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expect(table.len > 0);
-}
-
-test "glyphIndex colored vs text" {
-    const testing = std.testing;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    {
-        const glyph = face.glyphIndex('A').?;
-        try testing.expectEqual(4, glyph);
-        try testing.expect(!face.isColorGlyph(glyph));
-    }
-
-    {
-        const glyph = face.glyphIndex(0xE800).?;
-        try testing.expectEqual(11482, glyph);
-        try testing.expect(face.isColorGlyph(glyph));
-    }
-}+};