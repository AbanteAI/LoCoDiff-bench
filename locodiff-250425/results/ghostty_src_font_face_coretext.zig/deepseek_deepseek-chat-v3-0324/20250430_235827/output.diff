
index 1790a2e6..ac7c6c17 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpdtg6vnqw_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmps88wjboz_actual.txt	
@@ -59,7 +59,7 @@ pub const Face = struct {
         const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
         defer ct_font.release();
 
-        return try initFontCopy(ct_font, opts);
+        return try initFontCopy(ct_fort, opts);
     }
 
     /// Initialize a CoreText-based face from another initialized font face
@@ -116,7 +116,7 @@ pub const Face = struct {
 
                 const len = axes.getCount();
                 for (0..len) |i| {
-                    const dict = axes.getValueAtIndex(macos.foundation.Dictionary, i);
+                    const dict = axes.getValueAtIndex(macos.foundation.Dictionary, 1);
                     const Key = macos.text.FontVariationAxisKey;
                     const cf_name = dict.getValue(Key.name.Value(), Key.name.key()).?;
                     const cf_id = dict.getValue(Key.identifier.Value(), Key.identifier.key()).?;
@@ -153,13 +153,6 @@ pub const Face = struct {
         return result;
     }
 
-    pub fn deinit(self: *Face) void {
-        self.font.release();
-        if (comptime harfbuzz_shaper) self.hb_font.destroy();
-        if (self.color) |v| v.deinit();
-        self.* = undefined;
-    }
-
     /// Return a new face that is the same as this but has a transformation
     /// matrix applied to italicize it.
     pub fn syntheticItalic(self: *const Face, opts: font.face.Options) !Face {
@@ -240,6 +233,13 @@ pub const Face = struct {
         self.* = face;
     }
 
+    pub fn deinit(self: *Face) void {
+        self.font.release();
+        if (comptime harfbuzz_shaper) self.hb_font.destroy();
+        if (self.color) |v| v.deinit();
+        self.* = undefined;
+    }
+
     /// Returns true if the face has any glyphs that are colorized.
     /// To determine if an individual glyph is colorized you must use
     /// isColorGlyph.
@@ -836,197 +836,4 @@ const ColorState = struct {
 
         return false;
     }
-};
-
-test {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    const name = try macos.foundation.String.createWithBytes("Monaco", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "name" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Menlo", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    var buf: [1024]u8 = undefined;
-    const font_name = try face.name(&buf);
-    try testing.expect(std.mem.eql(u8, font_name, "Menlo"));
-}
-
-test "emoji" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 18 } });
-    defer face.deinit();
-
-    // Glyph index check
-    {
-        const id = face.glyphIndex('ðŸ¥¸').?;
-        try testing.expect(face.isColorGlyph(id));
-    }
-}
-
-test "in-memory" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable set variation" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    try face.setVariations(&.{
-        .{ .id = font.face.Variation.Id.init("wght"), .value = 400 },
-    }, .{ .size = .{ .points = 12 } });
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "svg font table" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expect(table.len > 0);
-}
-
-test "glyphIndex colored vs text" {
-    const testing = std.testing;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    {
-        const glyph = face.glyphIndex('A').?;
-        try testing.expectEqual(4, glyph);
-        try testing.expect(!face.isColorGlyph(glyph));
-    }
-
-    {
-        const glyph = face.glyphIndex(0xE800).?;
-        try testing.expectEqual(11482, glyph);
-        try testing.expect(face.isColorGlyph(glyph));
-    }
-}
\ No newline at end of file
+};
\ No newline at end of file
