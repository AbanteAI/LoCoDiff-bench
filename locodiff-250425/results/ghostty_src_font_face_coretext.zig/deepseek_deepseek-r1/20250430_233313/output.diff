--- ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_coretext.zig_extracted.txt (actual)@@ -150,6 +150,20 @@             }
         }
 
+        // If our presentation is emoji, we also check for the presence of
+        // emoji codepoints. This forces fonts with colorized glyphs that aren't
+        // emoji font to be treated as text. Long term, this isn't what we want
+        // but this fixes some bugs in the short term. See:
+        // https://github.com/mitchellh/ghostty/issues/1768
+        //
+        // Longer term, we'd like to detect mixed color/non-color fonts and
+        // handle them correctly by rendering the color glyphs as color and the
+        // non-color glyphs as text.
+        if (result.presentation == .emoji and result.glyphIndex('ðŸ¥¸') == null) {
+            log.warn("font has colorized glyphs but isn't emoji, treating as text", .{});
+            result.presentation = .text;
+        }
+
         return result;
     }
 
@@ -178,9 +192,8 @@ 
         // To determine our synthetic bold line width we get a multiplier
         // from the font size in points. This is a heuristic that is based
-        // on the fact that a line width of 1 looks good to me at a certain
-        // point size. We want to scale that up roughly linearly with the
-        // font size.
+        // on the fact that a line width of 1 looks good to me at 12 points
+        // and we want to scale that up roughly linearly with the font size.
         const points_f64: f64 = @floatCast(opts.size.points);
         const line_width = @max(points_f64 / 14.0, 1);
         // log.debug("synthetic bold line width={}", .{line_width});
@@ -273,6 +286,8 @@         return @intCast(glyphs[0]);
     }
 
+    /// Render a glyph using the glyph index. The rendered glyph is stored in the
+    /// given texture atlas.
     pub fn renderGlyph(
         self: Face,
         alloc: Allocator,
@@ -283,9 +298,7 @@         var glyphs = [_]macos.graphics.Glyph{@intCast(glyph_index)};
 
         // Get the bounding rect for rendering this glyph.
-        // This is in a coordinate space with (0.0, 0.0)
-        // in the bottom left and +Y pointing up.
-        var rect = self.font.getBoundingRectsForGlyphs(.horizontal, &glyphs, null);
+        var rect = self.font.getBoundingRectForGlyphs(.horizontal, &glyphs, null);
 
         // If we're rendering a synthetic bold then we will gain 50% of
         // the line width on every edge, which means we should increase
@@ -296,18 +309,6 @@             rect.size.height += line_width;
             rect.origin.x -= line_width / 2;
             rect.origin.y -= line_width / 2;
-        }
-
-        // We make an assumption that font smoothing ("thicken")
-        // adds no more than 1 extra pixel to any edge. We don't
-        // add extra size if it's a sbix color font though, since
-        // bitmaps aren't affected by smoothing.
-        const sbix = self.color != null and self.color.?.sbix;
-        if (opts.thicken and !sbix) {
-            rect.size.width += 2.0;
-            rect.size.height += 2.0;
-            rect.origin.x -= 1.0;
-            rect.origin.y -= 1.0;
         }
 
         // We compute the minimum and maximum x and y values.
@@ -398,7 +399,7 @@         });
 
         context.setAllowsFontSmoothing(ctx, true);
-        context.setShouldSmoothFonts(ctx, opts.thicken); // The amadeus "enthicken"
+        context.setShouldSmoothFonts(ctx, opts.thicken);
         context.setAllowsFontSubpixelQuantization(ctx, true);
         context.setShouldSubpixelQuantizeFonts(ctx, true);
         context.setAllowsFontSubpixelPositioning(ctx, true);
@@ -729,10 +730,13 @@             .ascent = ascent,
             .descent = descent,
             .line_gap = line_gap,
+
             .underline_position = underline_position,
             .underline_thickness = underline_thickness,
+
             .strikethrough_position = strikethrough_position,
             .strikethrough_thickness = strikethrough_thickness,
+
             .cap_height = cap_height,
             .ex_height = ex_height,
         };
@@ -758,8 +762,6 @@     }
 };
 
-/// The state associated with a font face that may have colorized glyphs.
-/// This is used to determine if a specific glyph ID is colorized.
 const ColorState = struct {
     /// True if there is an sbix font table. For now, the mere presence
     /// of an sbix font table causes us to assume the glyph is colored.
@@ -902,131 +904,4 @@     // Glyph index check
     {
         const id = face.glyphIndex('ðŸ¥¸').?;
-        try testing.expect(face.isColorGlyph(id));
-    }
-}
-
-test "in-memory" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable set variation" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    try face.setVariations(&.{
-        .{ .id = font.face.Variation.Id.init("wght"), .value = 400 },
-    }, .{ .size = .{ .points = 12 } });
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "svg font table" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expect(table.len > 0);
-}
-
-test "glyphIndex colored vs text" {
-    const testing = std.testing;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    {
-        const glyph = face.glyphIndex('A').?;
-        try testing.expectEqual(4, glyph);
-        try testing.expect(!face.isColorGlyph(glyph));
-    }
-
-    {
-        const glyph = face.glyphIndex(0xE800).?;
-        try testing.expectEqual(11482, glyph);
-        try testing.expect(face.isColorGlyph(glyph));
-    }
-}+        try testing.expect(face.i