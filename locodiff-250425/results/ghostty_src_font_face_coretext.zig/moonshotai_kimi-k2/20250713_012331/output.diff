
index 1790a2e6e..c63468f07 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpx29cz1c1_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmp4zvz1hcd_actual.txt	
@@ -1,5 +1,4 @@
 const std = @import("std");
-const builtin = @import("builtin");
 const assert = std.debug.assert;
 const Allocator = std.mem.Allocator;
 const macos = @import("macos");
@@ -84,6 +83,11 @@ pub const Face = struct {
     /// the CTFont. This does NOT copy or retain the CTFont.
     pub fn initFont(ct_font: *macos.text.Font, opts: font.face.Options) !Face {
         const traits = ct_font.getSymbolicTraits();
+        const color: ?ColorState = if (traits.color_glyphs)
+            try ColorState.init(ct_font)
+        else
+            null;
+        errdefer if (color) |v| v.deinit();
 
         var hb_font = if (comptime harfbuzz_shaper) font: {
             var hb_font = try harfbuzz.coretext.createFont(ct_font);
@@ -92,12 +96,6 @@ pub const Face = struct {
         } else {};
         errdefer if (comptime harfbuzz_shaper) hb_font.destroy();
 
-        const color: ?ColorState = if (traits.color_glyphs)
-            try ColorState.init(ct_font)
-        else
-            null;
-        errdefer if (color) |v| v.deinit();
-
         var result: Face = .{
             .font = ct_font,
             .hb_font = hb_font,
@@ -645,7 +643,7 @@ pub const Face = struct {
         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
 
-        const underline_thickness = if (has_broken_underline)
+        const underline_thickness: ?f64 = if (has_broken_underline)
             null
         else
             @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
@@ -780,7 +778,7 @@ const ColorState = struct {
         const sbix: bool = sbix: {
             const tag = macos.text.FontTableTag.init("sbix");
             const data = f.copyTable(tag) orelse break :sbix false;
-            data.release();
+            defer data.release();
             break :sbix data.getLength() > 0;
         };
 
@@ -855,6 +853,8 @@ test {
     var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
     defer face.deinit();
 
+    try testing.expectEqual(font.Presentation.text, face.presentation);
+
     // Generate all visible ASCII
     var i: u8 = 32;
     while (i < 127) : (i += 1) {
@@ -881,6 +881,8 @@ test "name" {
     var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
     defer face.deinit();
 
+    try testing.expectEqual(font.Presentation.text, face.presentation);
+
     var buf: [1024]u8 = undefined;
     const font_name = try face.name(&buf);
     try testing.expect(std.mem.eql(u8, font_name, "Menlo"));
