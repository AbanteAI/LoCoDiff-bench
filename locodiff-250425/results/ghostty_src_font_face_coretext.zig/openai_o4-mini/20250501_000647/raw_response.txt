```zig
const std = @import("std");
const builtin = @import("builtin");
const assert = std.debug.assert;
const Allocator = std.mem.Allocator;
const macos = @import("macos");
const harfbuzz = @import("harfbuzz");
const font = @import("../main.zig");
const opentype = @import("../opentype.zig");
const quirks = @import("../../quirks.zig");

const log = std.log.scoped(.font_face);

pub const Face = struct {
    /// Our font face
    font: *macos.text.Font,

    /// Harfbuzz font corresponding to this face. We only use this
    /// if we're using Harfbuzz.
    hb_font: if (harfbuzz_shaper) harfbuzz.Font else void,

    /// Set quirks.disableDefaultFontFeatures
    quirks_disable_default_font_features: bool = false,

    /// True if our build is using Harfbuzz. If we're not, we can avoid
    /// some Harfbuzz-specific code paths.
    const harfbuzz_shaper = font.options.backend.hasHarfbuzz();

    /// The matrix applied to a regular font to auto-italicize it.
    pub const italic_skew = macos.graphics.AffineTransform{
        .a = 1,
        .b = 0,
        .c = 0.267949, // approx. tan(15)
        .d = 1,
        .tx = 0,
        .ty = 0,
    };

    /// True if this font face should be rasterized with a synthetic bold
    /// effect. This is used for fonts that don't have a bold variant.
    synthetic_bold: ?f64 = null,

    /// If the face can possibly be colored, then this is the state
    /// used to check for color information. This is null if the font
    /// can't possibly be colored.
    color: ?ColorState = null,

    /// Initialize a CoreText-based font from a TTF/TTC in memory.
    pub fn init(lib: font.Library, source: [:0]const u8, opts: font.face.Options) !Face {
        _ = lib;

        const data = try macos.foundation.Data.createWithBytesNoCopy(source);
        defer data.release();

        const desc = macos.text.createFontDescriptorFromData(data) orelse
            return error.FontInitFailure;
        defer desc.release();

        const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
        defer ct_font.release();

        return try initFont(ct_font, opts);
    }

    /// Initialize a face with a CTFont. This will take ownership over
    /// the CTFont. This does NOT copy or retain the CTFont.
    pub fn initFont(ct_font: *macos.text.Font, opts: font.face.Options) !Face {
        const traits = ct_font.getSymbolicTraits();

        var metrics = try calcMetrics(ct_font);
        if (opts.metric_modifiers) |v| metrics.apply(v.*);

        var hb_font = if (comptime harfbuzz_shaper) font: {
            var hb_font = try harfbuzz.coretext.createFont(ct_font);
            hb_font.setScale(opts.size.pixels(), opts.size.pixels());
            break :font hb_font;
        } else {};
        errdefer if (comptime harfbuzz_shaper) hb_font.destroy();

        const color: ?ColorState = if (traits.color_glyphs)
            try ColorState.init(ct_font)
        else
            null;
        errdefer if (color) |v| v.deinit();

        var result: Face = .{
            .font = ct_font,
            .hb_font = hb_font,
            .quirks_disable_default_font_features = false,
            .synthetic_bold = null,
            .color = color,
        };
        result.quirks_disable_default_font_features = quirks.disableDefaultFontFeatures(&result);

        if (comptime builtin.mode == .Debug) {
            if (ct_font.copyAttribute(.variation_axes)) |axes| {
                defer axes.release();
                var buf: [1024]u8 = undefined;
                log.debug("variation axes font={s}", .{try result.name(&buf)});
                const len = axes.getCount();
                for (0..len) |i| {
                    const dict = axes.getValueAtIndex(macos.foundation.Dictionary, i);
                    const Key = macos.text.FontVariationAxisKey;
                    const cf_name = dict.getValue(Key.name.Value(), Key.name.key()).?;
                    const cf_id = dict.getValue(Key.identifier.Value(), Key.identifier.key()).?;
                    const cf_min = dict.getValue(Key.minimum_value.Value(), Key.minimum_value.key()).?;
                    const cf_max = dict.getValue(Key.maximum_value.Value(), Key.maximum_value.key()).?;
                    const cf_def = dict.getValue(Key.default_value.Value(), Key.default_value.key()).?;

                    const namestr = cf_name.cstring(&buf, .utf8) orelse "";

                    var id_raw: c_int = 0;
                    _ = cf_id.getValue(.int, &id_raw);
                    const id: font.face.Variation.Id = @bitCast(id_raw);

                    var min: f64 = 0;
                    _ = cf_min.getValue(.double, &min);

                    var max: f64 = 0;
                    _ = cf_max.getValue(.double, &max);

                    var def: f64 = 0;
                    _ = cf_def.getValue(.double, &def);

                    log.debug("variation axis: name={s} id={s} min={} max={} def={}", .{
                        namestr,
                        id.str(),
                        min,
                        max,
                        def,
                    });
                }
            }
        }

        return result;
    }

    pub fn deinit(self: *Face) void {
        self.font.release();
        if (comptime harfbuzz_shaper) self.hb_font.destroy();
        if (self.color) |v| v.deinit();
        self.* = undefined;
    }

    /// Return a new face that is the same as this but has a transformation
    /// matrix applied to italicize it.
    pub fn syntheticItalic(self: *const Face, opts: font.face.Options) !Face {
        const ct_font = try self.font.copyWithAttributes(0.0, &italic_skew, null);
        errdefer ct_font.release();
        return try initFont(ct_font, opts);
    }

    /// Return a new face that is the same as this but applies a synthetic
    /// bold effect to it.
    pub fn syntheticBold(self: *const Face, opts: font.face.Options) !Face {
        const ct_font = try self.font.copyWithAttributes(0.0, null, null);
        errdefer ct_font.release();
        var face = try initFont(ct_font, opts);

        const points_f64: f64 = @floatCast(opts.size.points);
        const line_width = @max(points_f64 / 14.0, 1);
        face.synthetic_bold = line_width;

        return face;
    }

    /// Returns the font name. If allocation is required, buf will be used,
    /// but sometimes allocation isn't required and a static string is
    /// returned.
    pub fn name(self: *const Face, buf: []u8) Allocator.Error![]const u8 {
        const family_name = self.font.copyFamilyName();
        if (family_name.cstringPtr(.utf8)) |str| return str;

        return family_name.cstring(buf, .utf8) orelse error.OutOfMemory;
    }

    /// Returns true if the face has any glyphs that are colorized.
    pub fn hasColor(self: *const Face) bool {
        return self.color != null;
    }

    /// Returns true if the given glyph ID is colorized.
    pub fn isColorGlyph(self: *const Face, glyph_id: u32) bool {
        const c = self.color orelse return false;
        return c.isColorGlyph(glyph_id);
    }

    /// Returns the glyph index for the given Unicode code point. If this
    /// face doesn't support this glyph, null is returned.
    pub fn glyphIndex(self: Face, cp: u32) ?u32 {
        var unichars: [2]u16 = undefined;
        const pair = macos.foundation.stringGetSurrogatePairForLongCharacter(cp, &unichars);
        const len: usize = if (pair) 2 else 1;

        var glyphs = [_]macos.graphics.Glyph{@intCast(unichars[0])};
        if (!self.font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len])) return null;
        if (pair) assert(glyphs[1] == 0);

        return @intCast(glyphs[0]);
    }

    /// Render a glyph using the glyph index. The rendered glyph is stored in the
    /// given texture atlas.
    pub fn renderGlyph(
        self: Face,
        alloc: Allocator,
        atlas: *font.Atlas,
        glyph_index: u32,
        opts: font.face.RenderOptions,
    ) !font.Glyph {
        var glyphs = [_]macos.graphics.Glyph{@intCast(glyph_index)};

        // Get the bounding rect for this glyph to determine the area to render.
        var rect = self.font.getBoundingRectsForGlyphs(.horizontal, &glyphs, null);

        // If synthetic bold, expand and shift
        if (self.synthetic_bold) |lw| {
            rect.size.width += lw;
            rect.size.height += lw;
            rect.origin.x -= lw / 2;
            rect.origin.y -= lw / 2;
        }

        const sbix = self.color != null and self.color.?.sbix;
        if (opts.thicken and !sbix) {
            rect.size.width += 2.0;
            rect.size.height += 2.0;
            rect.origin.x -= 1.0;
            rect.origin.y -= 1.0;
        }

        // Compute integer bounds
        const x0 = @intFromFloat(@floor(rect.origin.x));
        const x1 = @intFromFloat(@ceil(rect.origin.x + rect.size.width));
        const y0 = @intFromFloat(@floor(rect.origin.y));
        const y1 = @intFromFloat(@ceil(rect.origin.y + rect.size.height));

        if (x1 <= x0 or y1 <= y0) {
            return font.Glyph{
                .width = 0,
                .height = 0,
                .offset_x = 0,
                .offset_y = 0,
                .atlas_x = 0,
                .atlas_y = 0,
                .advance_x = 0,
            };
        }

        const width: u32 = @intCast(x1 - x0);
        const height: u32 = @intCast(y1 - y0);

        const color = if (!self.isColorGlyph(glyph_index)) .{
            .color = false,
            .depth = 1,
            .space = try macos.graphics.ColorSpace.createNamed(.linearGray),
            .context_opts = @intFromEnum(macos.graphics.ImageAlphaInfo.only),
        } else .{
            .color = true,
            .depth = 4,
            .space = try macos.graphics.ColorSpace.createNamed(.displayP3),
            .context_opts = @intFromEnum(macos.graphics.BitmapInfo.byte_order_32_little) |
                @intFromEnum(macos.graphics.ImageAlphaInfo.premultiplied_first),
        };
        defer color.space.release();

        const buf = try alloc.alloc(u8, width * height * color.depth);
        defer alloc.free(buf);
        @memset(buf, 0);

        const context = macos.graphics.BitmapContext.context;
        const ctx = try macos.graphics.BitmapContext.create(
            buf,
            width,
            height,
            8,
            width * color.depth,
            color.space,
            color.context_opts,
        );
        defer context.release(ctx);

        // Initial fill
        if (color.color)
            context.setRGBFillColor(ctx, 1, 1, 1, 0)
        else
            context.setGrayFillColor(ctx, 1, 0);
        context.fillRect(ctx, .{
            .origin = .{ .x = 0, .y = 0 },
            .size = .{
                .width = @floatFromInt(width),
                .height = @floatFromInt(height),
            },
        });

        // Text rendering settings
        context.setAllowsFontSmoothing(ctx, true);
        context.setShouldSmoothFonts(ctx, opts.thicken);
        context.setAllowsFontSubpixelQuantization(ctx, true);
        context.setShouldSubpixelQuantizeFonts(ctx, true);
        context.setAllowsFontSubpixelPositioning(ctx, true);
        context.setShouldSubpixelPositionFonts(ctx, true);
        context.setAllowsAntialiasing(ctx, true);
        context.setShouldAntialias(ctx, true);

        // Fill/stroke for synthetic bold
        if (self.synthetic_bold) |lw| {
            context.setTextDrawingMode(ctx, .fill_stroke);
            context.setLineWidth(ctx, lw);
        }

        // Glyph color
        if (color.color) {
            context.setRGBFillColor(ctx, 1, 1, 1, 1);
            context.setRGBStrokeColor(ctx, 1, 1, 1, 1);
        } else {
            const strength: f64 = @floatFromInt(opts.thicken_strength);
            context.setGrayFillColor(ctx, strength / 255.0, 1);
            context.setGrayStrokeColor(ctx, strength / 255.0, 1);
        }

        // Draw the glyph
        self.font.drawGlyphs(&glyphs, &.{
            .{ .x = @floatFromInt(-x0), .y = @floatFromInt(-y0) },
        }, ctx);

        // Reserve in atlas with 1px padding on right/bottom only
        var region = try atlas.reserve(alloc, width + 1, height + 1);
        region.width -= 1;
        region.height -= 1;
        atlas.set(region, buf);

        const grid_metrics = opts.grid_metrics orelse font.Metrics.calc(try self.getMetrics());
        const offset_y: i32 = @as(i32, @intCast(grid_metrics.cell_baseline)) + y1;
        const offset_x: i32 = block: {
            var r: i32 = x0;
            if (grid_metrics.original_cell_width) |ow| {
                const before = @intCast(ow);
                const after = @intCast(grid_metrics.cell_width);
                r += @divTrunc(after - before, 2);
            }
            break :offset_x r;
        };

        var advances: [glyphs.len]macos.graphics.Size = undefined;
        _ = self.font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);

        return font.Glyph{
            .width = width,
            .height = height,
            .offset_x = offset_x,
            .offset_y = offset_y,
            .atlas_x = region.x,
            .atlas_y = region.y,
            .advance_x = @floatCast(advances[0].width),
        };
    }

    const GetMetricsError = error{
        CopyTableError,
        InvalidHeadTable,
        InvalidPostTable,
        InvalidHheaTable,
    };

    /// Get the FaceMetrics for this face.
    pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
        return calcMetrics(self.font);
    }

    /// Copy the font table data for the given tag.
    pub fn copyTable(
        self: Face,
        alloc: Allocator,
        tag: *const [4]u8,
    ) Allocator.Error!?[]u8 {
        const data = self.font.copyTable(macos.text.FontTableTag.init(tag)) orelse return null;
        defer data.release();
        const buf = try alloc.alloc(u8, data.getLength()) catch return error.OutOfMemory;
        defer alloc.free(buf);
        const ptr = data.getPointer();
        @memcpy(buf, ptr[0..buf.len]);
        return buf;
    }

    fn calcMetrics(ct_font: *macos.text.Font) GetMetricsError!font.Metrics.FaceMetrics {
        // Head or bhed
        const head: opentype.Head = head: {
            const head_tag = macos.text.FontTableTag.init("head");
            const bhed_tag = macos.text.FontTableTag.init("bhed");
            const data =
                ct_font.copyTable(head_tag) orelse
                ct_font.copyTable(bhed_tag) orelse
                return error.CopyTableError;
            defer data.release();
            const ptr = data.getPointer();
            const len = data.getLength();
            break :head opentype.Head.init(ptr[0..len]) catch |err| {
                return switch (err) {
                    error.EndOfStream => error.InvalidHeadTable,
                };
            };
        };

        // Post
        const post: opentype.Post = post: {
            const tag = macos.text.FontTableTag.init("post");
            const data = ct_font.copyTable(tag) orelse return error.CopyTableError;
            defer data.release();
            const ptr = data.getPointer();
            const len = data.getLength();
            break :post opentype.Post.init(ptr[0..len]) catch |err| {
                return switch (err) {
                    error.EndOfStream => error.InvalidPostTable,
                };
            };
        };

        // Hhea
        const hhea: opentype.Hhea = hhea: {
            const tag = macos.text.FontTableTag.init("hhea");
            const data = ct_font.copyTable(tag) orelse return error.CopyTableError;
            defer data.release();
            const ptr = data.getPointer();
            const len = data.getLength();
            break :hhea opentype.Hhea.init(ptr[0..len]) catch |err| {
                return switch (err) {
                    error.EndOfStream => error.InvalidHheaTable,
                };
            };
        };

        // OS/2 optional
        const os2_: ?opentype.OS2 = os2: {
            const tag = macos.text.FontTableTag.init("OS/2");
            const data = ct_font.copyTable(tag) orelse break :os2 null;
            defer data.release();
            const ptr = data.getPointer();
            const len = data.getLength();
            break :os2 opentype.OS2.init(ptr[0..len]) catch |err| {
                log.warn("error parsing OS/2 table: {}", .{err});
                break :os2 null;
            };
        };

        // Units
        const units_per_em: f64 = @floatFromInt(head.unitsPerEm);
        const px_per_em: f64 = ct_font.getSize();
        const px_per_unit: f64 = px_per_em / units_per_em;

        // Vertical metrics selection
        const ascent: f64, descent: f64, line_gap: f64 = vertical_metrics: {
            const os2_ascent = if (os2_) |o| @floatFromInt(o.sTypoAscender) else 0.0;
            const os2_descent = if (os2_) |o| @floatFromInt(o.sTypoDescender) else 0.0;
            const os2_line_gap = if (os2_) |o| @floatFromInt(o.sTypoLineGap) else 0.0;
            const hhea_asc = @floatFromInt(hhea.ascender);
            const hhea_des = @floatFromInt(hhea.descender);
            const hhea_gap = @floatFromInt(hhea.lineGap);

            // useTypoMetrics
            if (os2_ and os2_.?.fsSelection.use_typo_metrics) {
                break :vertical_metrics .{ os2_ascent * px_per_unit, os2_descent * px_per_unit, os2_line_gap * px_per_unit };
            }

            // hhea
            if (hhea.ascender != 0 or hhea.descender != 0) {
                break :vertical_metrics .{ hhea_asc * px_per_unit, hhea_des * px_per_unit, hhea_gap * px_per_unit };
            }

            // os/2
            if (os2_ascent != 0 or os2_descent != 0) {
                break :vertical_metrics .{ os2_ascent * px_per_unit, os2_descent * px_per_unit, os2_line_gap * px_per_unit };
            }

            // Windows
            if (os2_) |o| {
                const win_asc = @floatFromInt(o.usWinAscent);
                const win_des = @floatFromInt(o.usWinDescent);
                break :vertical_metrics .{ win_asc * px_per_unit, -win_des * px_per_unit, 0.0 };
            }

            // fallback hhea
            break :vertical_metrics .{ hhea_asc * px_per_unit, hhea_des * px_per_unit, hhea_gap * px_per_unit };
        };

        // Underline metrics
        const has_bad_ul = os2_ and os2_.?.post.underlineThickness == 0;
        const underline_position: f64 = if (has_bad_ul and os2_?.post.underlinePosition == 0)
            px_per_em * 1.0 else (@floatFromInt(os2_?.post.underlinePosition orelse 0) * px_per_unit);
        const underline_thickness: f64 = if (has_bad_ul)
            1.0 else (@floatFromInt(os2_?.post.underlineThickness orelse 1) * px_per_unit);

        // Strike metrics
        const has_bad_st = os2_ and os2_.?.yStrikeoutSize == 0;
        const strikethrough_position: f64 = if (has_bad_st and os2_?.yStrikeoutPosition == 0)
            px_per_em * 0.5 else (@floatFromInt(os2_?.yStrikeoutPosition orelse 0) * px_per_unit);
        const strikethrough_thickness: f64 = if (has_bad_st)
            underline_thickness else (@floatFromInt(os2_?.yStrikeoutSize orelse @intFromFloat(underline_thickness)) * px_per_unit);

        // Cap/ex height
        const cap_height: f64 = if (os2_?.sCapHeight) |h| @floatFromInt(h) * px_per_unit else ct_font.getCapHeight();
        const ex_height: f64 = if (os2_?.sxHeight) |h| @floatFromInt(h) * px_per_unit else ct_font.getXHeight();

        // Cell width via ASCII
        const cell_width: f64 = cell_width: {
            const unichars = comptime block: {
                const len = 127 - 32;
                var arr: [len]u16 = undefined;
                var i: u16 = 32;
                while (i < 127) : (i += 1) {
                    arr[i - 32] = i;
                }
                break :block arr;
            };
            var glyphs: [unichars.len]macos.graphics.Glyph = undefined;
            _ = ct_font.getGlyphsForCharacters(&unichars, &glyphs);
            var advances: [unichars.len]macos.graphics.Size = undefined;
            _ = ct_font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);
            var m: f64 = 0;
            for (advances) |a| {
                m = @max(a.width, m);
            }
            break :cell_width m;
        };

        return font.Metrics.calc(.{
            .cell_width = cell_width,
            .ascent = ascent,
            .descent = descent,
            .line_gap = line_gap,
            .underline_position = underline_position,
            .underline_thickness = underline_thickness,
            .strikethrough_position = strikethrough_position,
            .strikethrough_thickness = strikethrough_thickness,
            .cap_height = cap_height,
            .ex_height = ex_height,
        });
    }
};

const ColorState = struct {
    sbix: bool,
    svg: ?opentype.SVG,
    svg_data: ?*macos.foundation.Data,

    pub fn init(f: *macos.text.Font) !ColorState {
        const sbix = sbix: {
            const tag = macos.text.FontTableTag.init("sbix");
            const data = f.copyTable(tag) orelse break :sbix false;
            data.release();
            break :sbix data.getLength() > 0;
        };

        const svg: ?struct { svg: opentype.SVG, data: *macos.foundation.Data } = svg: {
            const tag = macos.text.FontTableTag.init("SVG ");
            const data = f.copyTable(tag) orelse break :svg null;
            const ptr = data.getPointer();
            const len = data.getLength();
            break :svg .{ .svg = try opentype.SVG.init(ptr[0..len]), .data = data };
        };

        return .{ .sbix = sbix, .svg = svg?.svg, .svg_data = svg?.data };
    }

    pub fn deinit(self: *const ColorState) void {
        if (self.svg_data) |d| d.release();
    }

    pub fn isColorGlyph(self: *const ColorState, glyph_id: u32) bool {
        const gid = std.math.cast(u16, glyph_id) orelse return false;
        if (self.sbix) return true;
        if (self.svg) |s| if (s.hasGlyph(gid)) return true;
        return false;
    }
};
```