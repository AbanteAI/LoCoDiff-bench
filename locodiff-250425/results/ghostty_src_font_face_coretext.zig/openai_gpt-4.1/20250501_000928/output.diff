--- ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected)+++ ghostty_src_font_face_coretext.zig_extracted.txt (actual)@@ -354,15 +354,6 @@         };
         defer color.space.release();
 
-        // This is just a safety check.
-        if (atlas.format.depth() != color.depth) {
-            log.warn("font atlas color depth doesn't equal font color depth atlas={} font={}", .{
-                atlas.format.depth(),
-                color.depth,
-            });
-            return error.InvalidAtlasFormat;
-        }
-
         // Our buffer for rendering. We could cache this but glyph rasterization
         // usually stabilizes pretty quickly and is very infrequent so I think
         // the allocation overhead is acceptable compared to the cost of
@@ -485,6 +476,18 @@         var advances: [glyphs.len]macos.graphics.Size = undefined;
         _ = self.font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);
 
+        // std.log.warn("renderGlyph rect={} width={} height={} render_x={} render_y={} offset_y={} ascent={} cell_height={} cell_baseline={}", .{
+        //     rect,
+        //     width,
+        //     height,
+        //     render_x,
+        //     render_y,
+        //     offset_y,
+        //     glyph_ascent,
+        //     self.metrics.cell_height,
+        //     self.metrics.cell_baseline,
+        // });
+
         return .{
             .width = width,
             .height = height,
@@ -506,7 +509,6 @@     /// Get the `FaceMetrics` for this face.
     pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
         const ct_font = self.font;
-
         // Read the 'head' table out of the font data.
         const head: opentype.Head = head: {
             // macOS bitmap-only fonts use a 'bhed' tag rather than 'head', but
