
index 1790a2e6..061143e2 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpg10b8riz_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmpevsq01et_actual.txt	
@@ -105,6 +105,20 @@ pub const Face = struct {
         };
         result.quirks_disable_default_font_features = quirks.disableDefaultFontFeatures(&result);
 
+        // If our presentation is emoji, we also check for the presence of
+        // emoji codepoints. This forces fonts with colorized glyphs that aren't
+        // emoji font to be treated as text. Long term, this isn't what we want
+        // but this fixes some bugs in the short term. See:
+        // https://github.com/mitchellh/ghostty/issues/1768
+        //
+        // Longer term, we'd like to detect mixed color/non-color fonts and
+        // handle them correctly by rendering the color glyphs as color and the
+        // non-color glyphs as text.
+        if (result.color != null and result.glyphIndex('ðŸ¥¸') == null) {
+            log.warn("font has colorized glyphs but isn't emoji, treating as text", .{});
+            result.color = null;
+        }
+
         // In debug mode, we output information about available variation axes,
         // if they exist.
         if (comptime builtin.mode == .Debug) {
@@ -640,7 +654,7 @@ pub const Face = struct {
 
         // If the underline position isn't 0 then we do use it,
         // even if the thickness is't properly specified.
-        const underline_position: ?f64 = if (has_broken_underline and post.underlinePosition == 0)
+        const underline_position = if (has_broken_underline and post.underlinePosition == 0)
             null
         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
