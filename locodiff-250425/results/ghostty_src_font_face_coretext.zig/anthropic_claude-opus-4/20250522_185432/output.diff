
index 1790a2e6e..2884af05d 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpox0xcapx_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmp63emqsf5_actual.txt	
@@ -335,698 +335,4 @@ pub const Face = struct {
         const height: u32 = @intCast(y1 - y0);
 
         // Settings that are specific to if we are rendering text or emoji.
-        const color: struct {
-            color: bool,
-            depth: u32,
-            space: *macos.graphics.ColorSpace,
-            context_opts: c_uint,
-        } = if (!self.isColorGlyph(glyph_index)) .{
-            .color = false,
-            .depth = 1,
-            .space = try macos.graphics.ColorSpace.createNamed(.linearGray),
-            .context_opts = @intFromEnum(macos.graphics.ImageAlphaInfo.only),
-        } else .{
-            .color = true,
-            .depth = 4,
-            .space = try macos.graphics.ColorSpace.createNamed(.displayP3),
-            .context_opts = @intFromEnum(macos.graphics.BitmapInfo.byte_order_32_little) |
-                @intFromEnum(macos.graphics.ImageAlphaInfo.premultiplied_first),
-        };
-        defer color.space.release();
-
-        // This is just a safety check.
-        if (atlas.format.depth() != color.depth) {
-            log.warn("font atlas color depth doesn't equal font color depth atlas={} font={}", .{
-                atlas.format.depth(),
-                color.depth,
-            });
-            return error.InvalidAtlasFormat;
-        }
-
-        // Our buffer for rendering. We could cache this but glyph rasterization
-        // usually stabilizes pretty quickly and is very infrequent so I think
-        // the allocation overhead is acceptable compared to the cost of
-        // caching it forever or having to deal with a cache lifetime.
-        const buf = try alloc.alloc(u8, width * height * color.depth);
-        defer alloc.free(buf);
-        @memset(buf, 0);
-
-        const context = macos.graphics.BitmapContext.context;
-        const ctx = try macos.graphics.BitmapContext.create(
-            buf,
-            width,
-            height,
-            8,
-            width * color.depth,
-            color.space,
-            color.context_opts,
-        );
-        defer context.release(ctx);
-
-        // Perform an initial fill. This ensures that we don't have any
-        // uninitialized pixels in the bitmap.
-        if (color.color)
-            context.setRGBFillColor(ctx, 1, 1, 1, 0)
-        else
-            context.setGrayFillColor(ctx, 1, 0);
-        context.fillRect(ctx, .{
-            .origin = .{ .x = 0, .y = 0 },
-            .size = .{
-                .width = @floatFromInt(width),
-                .height = @floatFromInt(height),
-            },
-        });
-
-        context.setAllowsFontSmoothing(ctx, true);
-        context.setShouldSmoothFonts(ctx, opts.thicken); // The amadeus "enthicken"
-        context.setAllowsFontSubpixelQuantization(ctx, true);
-        context.setShouldSubpixelQuantizeFonts(ctx, true);
-        context.setAllowsFontSubpixelPositioning(ctx, true);
-        context.setShouldSubpixelPositionFonts(ctx, true);
-        context.setAllowsAntialiasing(ctx, true);
-        context.setShouldAntialias(ctx, true);
-
-        // Set our color for drawing
-        if (color.color) {
-            context.setRGBFillColor(ctx, 1, 1, 1, 1);
-            context.setRGBStrokeColor(ctx, 1, 1, 1, 1);
-        } else {
-            const strength: f64 = @floatFromInt(opts.thicken_strength);
-            context.setGrayFillColor(ctx, strength / 255.0, 1);
-            context.setGrayStrokeColor(ctx, strength / 255.0, 1);
-        }
-
-        // If we are drawing with synthetic bold then use a fill stroke
-        // which strokes the outlines of the glyph making a more bold look.
-        if (self.synthetic_bold) |line_width| {
-            context.setTextDrawingMode(ctx, .fill_stroke);
-            context.setLineWidth(ctx, line_width);
-        }
-
-        // We want to render the glyphs at (0,0), but the glyphs themselves
-        // are offset by bearings, so we have to undo those bearings in order
-        // to get them to 0,0.
-        self.font.drawGlyphs(&glyphs, &.{
-            .{
-                .x = @floatFromInt(-x0),
-                .y = @floatFromInt(-y0),
-            },
-        }, ctx);
-
-        const region = region: {
-            // We reserve a region that's 1px wider and taller than we need
-            // in order to create a 1px separation between adjacent glyphs
-            // to prevent interpolation with adjacent glyphs while sampling
-            // from the atlas.
-            var region = try atlas.reserve(
-                alloc,
-                width + 1,
-                height + 1,
-            );
-
-            // We adjust the region width and height back down since we
-            // don't need the extra pixel, we just needed to reserve it
-            // so that it isn't used for other glyphs in the future.
-            region.width -= 1;
-            region.height -= 1;
-            break :region region;
-        };
-        atlas.set(region, buf);
-
-        const metrics = opts.grid_metrics;
-
-        // This should be the distance from the bottom of
-        // the cell to the top of the glyph's bounding box.
-        //
-        // The calculation is distance from bottom of cell to
-        // baseline plus distance from baseline to top of glyph.
-        const offset_y: i32 = @as(i32, @intCast(metrics.cell_baseline)) + y1;
-
-        // This should be the distance from the left of
-        // the cell to the left of the glyph's bounding box.
-        const offset_x: i32 = offset_x: {
-            var result: i32 = x0;
-
-            // If our cell was resized then we adjust our glyph's
-            // position relative to the new center. This keeps glyphs
-            // centered in the cell whether it was made wider or narrower.
-            if (metrics.original_cell_width) |original_width| {
-                const before: i32 = @intCast(original_width);
-                const after: i32 = @intCast(metrics.cell_width);
-                // Increase the offset by half of the difference
-                // between the widths to keep things centered.
-                result += @divTrunc(after - before, 2);
-            }
-
-            break :offset_x result;
-        };
-
-        // Get our advance
-        var advances: [glyphs.len]macos.graphics.Size = undefined;
-        _ = self.font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);
-
-        return .{
-            .width = width,
-            .height = height,
-            .offset_x = offset_x,
-            .offset_y = offset_y,
-            .atlas_x = region.x,
-            .atlas_y = region.y,
-            .advance_x = @floatCast(advances[0].width),
-        };
-    }
-
-    pub const GetMetricsError = error{
-        CopyTableError,
-        InvalidHeadTable,
-        InvalidPostTable,
-        InvalidHheaTable,
-    };
-
-    /// Get the `FaceMetrics` for this face.
-    pub fn getMetrics(self: *Face) GetMetricsError!font.Metrics.FaceMetrics {
-        const ct_font = self.font;
-
-        // Read the 'head' table out of the font data.
-        const head: opentype.Head = head: {
-            // macOS bitmap-only fonts use a 'bhed' tag rather than 'head', but
-            // the table format is byte-identical to the 'head' table, so if we
-            // can't find 'head' we try 'bhed' instead before failing.
-            //
-            // ref: https://fontforge.org/docs/techref/bitmaponlysfnt.html
-            const head_tag = macos.text.FontTableTag.init("head");
-            const bhed_tag = macos.text.FontTableTag.init("bhed");
-            const data =
-                ct_font.copyTable(head_tag) orelse
-                ct_font.copyTable(bhed_tag) orelse
-                return error.CopyTableError;
-            defer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            break :head opentype.Head.init(ptr[0..len]) catch |err| {
-                return switch (err) {
-                    error.EndOfStream,
-                    => error.InvalidHeadTable,
-                };
-            };
-        };
-
-        // Read the 'post' table out of the font data.
-        const post: opentype.Post = post: {
-            const tag = macos.text.FontTableTag.init("post");
-            const data = ct_font.copyTable(tag) orelse return error.CopyTableError;
-            defer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            break :post opentype.Post.init(ptr[0..len]) catch |err| {
-                return switch (err) {
-                    error.EndOfStream => error.InvalidPostTable,
-                };
-            };
-        };
-
-        // Read the 'OS/2' table out of the font data if it's available.
-        const os2_: ?opentype.OS2 = os2: {
-            const tag = macos.text.FontTableTag.init("OS/2");
-            const data = ct_font.copyTable(tag) orelse break :os2 null;
-            defer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            break :os2 opentype.OS2.init(ptr[0..len]) catch |err| {
-                log.warn("error parsing OS/2 table: {}", .{err});
-                break :os2 null;
-            };
-        };
-
-        // Read the 'hhea' table out of the font data.
-        const hhea: opentype.Hhea = hhea: {
-            const tag = macos.text.FontTableTag.init("hhea");
-            const data = ct_font.copyTable(tag) orelse return error.CopyTableError;
-            defer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            break :hhea opentype.Hhea.init(ptr[0..len]) catch |err| {
-                return switch (err) {
-                    error.EndOfStream => error.InvalidHheaTable,
-                };
-            };
-        };
-
-        const units_per_em: f64 = @floatFromInt(head.unitsPerEm);
-        const px_per_em: f64 = ct_font.getSize();
-        const px_per_unit: f64 = px_per_em / units_per_em;
-
-        const ascent: f64, const descent: f64, const line_gap: f64 = vertical_metrics: {
-            const hhea_ascent: f64 = @floatFromInt(hhea.ascender);
-            const hhea_descent: f64 = @floatFromInt(hhea.descender);
-            const hhea_line_gap: f64 = @floatFromInt(hhea.lineGap);
-
-            if (os2_) |os2| {
-                const os2_ascent: f64 = @floatFromInt(os2.sTypoAscender);
-                const os2_descent: f64 = @floatFromInt(os2.sTypoDescender);
-                const os2_line_gap: f64 = @floatFromInt(os2.sTypoLineGap);
-
-                // If the font says to use typo metrics, trust it.
-                if (os2.fsSelection.use_typo_metrics) break :vertical_metrics .{
-                    os2_ascent * px_per_unit,
-                    os2_descent * px_per_unit,
-                    os2_line_gap * px_per_unit,
-                };
-
-                // Otherwise we prefer the height metrics from 'hhea' if they
-                // are available, or else OS/2 sTypo* metrics, and if all else
-                // fails then we use OS/2 usWin* metrics.
-                //
-                // This is not "standard" behavior, but it's our best bet to
-                // account for fonts being... just weird. It's pretty much what
-                // FreeType does to get its generic ascent and descent metrics.
-
-                if (hhea.ascender != 0 or hhea.descender != 0) break :vertical_metrics .{
-                    hhea_ascent * px_per_unit,
-                    hhea_descent * px_per_unit,
-                    hhea_line_gap * px_per_unit,
-                };
-
-                if (os2_ascent != 0 or os2_descent != 0) break :vertical_metrics .{
-                    os2_ascent * px_per_unit,
-                    os2_descent * px_per_unit,
-                    os2_line_gap * px_per_unit,
-                };
-
-                const win_ascent: f64 = @floatFromInt(os2.usWinAscent);
-                const win_descent: f64 = @floatFromInt(os2.usWinDescent);
-                break :vertical_metrics .{
-                    win_ascent * px_per_unit,
-                    // usWinDescent is *positive* -> down unlike sTypoDescender
-                    // and hhea.Descender, so we flip its sign to fix this.
-                    -win_descent * px_per_unit,
-                    0.0,
-                };
-            }
-
-            // If our font has no OS/2 table, then we just
-            // blindly use the metrics from the hhea table.
-            break :vertical_metrics .{
-                hhea_ascent * px_per_unit,
-                hhea_descent * px_per_unit,
-                hhea_line_gap * px_per_unit,
-            };
-        };
-
-        // Some fonts have degenerate 'post' tables where the underline
-        // thickness (and often position) are 0. We consider them null
-        // if this is the case and use our own fallbacks when we calculate.
-        const has_broken_underline = post.underlineThickness == 0;
-
-        // If the underline position isn't 0 then we do use it,
-        // even if the thickness is't properly specified.
-        const underline_position: ?f64 = if (has_broken_underline and post.underlinePosition == 0)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
-
-        const underline_thickness = if (has_broken_underline)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
-
-        // Similar logic to the underline above.
-        const strikethrough_position, const strikethrough_thickness = st: {
-            const os2 = os2_ orelse break :st .{ null, null };
-
-            const has_broken_strikethrough = os2.yStrikeoutSize == 0;
-
-            const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 0)
-                null
-            else
-                @as(f64, @floatFromInt(os2.yStrikeoutPosition)) * px_per_unit;
-
-            const thick: ?f64 = if (has_broken_strikethrough)
-                null
-            else
-                @as(f64, @floatFromInt(os2.yStrikeoutSize)) * px_per_unit;
-
-            break :st .{ pos, thick };
-        };
-
-        // We fall back to whatever CoreText does if the
-        // OS/2 table doesn't specify a cap or ex height.
-        const cap_height: f64, const ex_height: f64 = heights: {
-            const os2 = os2_ orelse break :heights .{
-                ct_font.getCapHeight(),
-                ct_font.getXHeight(),
-            };
-
-            break :heights .{
-                if (os2.sCapHeight) |sCapHeight|
-                    @as(f64, @floatFromInt(sCapHeight)) * px_per_unit
-                else
-                    ct_font.getCapHeight(),
-
-                if (os2.sxHeight) |sxHeight|
-                    @as(f64, @floatFromInt(sxHeight)) * px_per_unit
-                else
-                    ct_font.getXHeight(),
-            };
-        };
-
-        // Cell width is calculated by calculating the widest width of the
-        // visible ASCII characters. Usually 'M' is widest but we just take
-        // whatever is widest.
-        const cell_width: f64 = cell_width: {
-            // Build a comptime array of all the ASCII chars
-            const unichars = comptime unichars: {
-                const len = 127 - 32;
-                var result: [len]u16 = undefined;
-                var i: u16 = 32;
-                while (i < 127) : (i += 1) {
-                    result[i - 32] = i;
-                }
-
-                break :unichars result;
-            };
-
-            // Get our glyph IDs for the ASCII chars
-            var glyphs: [unichars.len]macos.graphics.Glyph = undefined;
-            _ = ct_font.getGlyphsForCharacters(&unichars, &glyphs);
-
-            // Get all our advances
-            var advances: [unichars.len]macos.graphics.Size = undefined;
-            _ = ct_font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);
-
-            // Find the maximum advance
-            var max: f64 = 0;
-            var i: usize = 0;
-            while (i < advances.len) : (i += 1) {
-                max = @max(advances[i].width, max);
-            }
-
-            break :cell_width max;
-        };
-
-        return .{
-            .cell_width = cell_width,
-            .ascent = ascent,
-            .descent = descent,
-            .line_gap = line_gap,
-            .underline_position = underline_position,
-            .underline_thickness = underline_thickness,
-            .strikethrough_position = strikethrough_position,
-            .strikethrough_thickness = strikethrough_thickness,
-            .cap_height = cap_height,
-            .ex_height = ex_height,
-        };
-    }
-
-    /// Copy the font table data for the given tag.
-    pub fn copyTable(
-        self: Face,
-        alloc: Allocator,
-        tag: *const [4]u8,
-    ) Allocator.Error!?[]u8 {
-        const data = self.font.copyTable(macos.text.FontTableTag.init(tag)) orelse
-            return null;
-        defer data.release();
-
-        const buf = try alloc.alloc(u8, data.getLength());
-        errdefer alloc.free(buf);
-
-        const ptr = data.getPointer();
-        @memcpy(buf, ptr[0..buf.len]);
-
-        return buf;
-    }
-};
-
-/// The state associated with a font face that may have colorized glyphs.
-/// This is used to determine if a specific glyph ID is colorized.
-const ColorState = struct {
-    /// True if there is an sbix font table. For now, the mere presence
-    /// of an sbix font table causes us to assume the glyph is colored.
-    /// We can improve this later.
-    sbix: bool,
-
-    /// The SVG font table data (if any), which we can use to determine
-    /// if a glyph is present in the SVG table.
-    svg: ?opentype.SVG,
-    svg_data: ?*macos.foundation.Data,
-
-    pub const Error = error{InvalidSVGTable};
-
-    pub fn init(f: *macos.text.Font) Error!ColorState {
-        // sbix is true if the table exists in the font data at all.
-        // In the future we probably want to actually parse it and
-        // check for glyphs.
-        const sbix: bool = sbix: {
-            const tag = macos.text.FontTableTag.init("sbix");
-            const data = f.copyTable(tag) orelse break :sbix false;
-            data.release();
-            break :sbix data.getLength() > 0;
-        };
-
-        // Read the SVG table out of the font data.
-        const svg: ?struct {
-            svg: opentype.SVG,
-            data: *macos.foundation.Data,
-        } = svg: {
-            const tag = macos.text.FontTableTag.init("SVG ");
-            const data = f.copyTable(tag) orelse break :svg null;
-            errdefer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            const svg = opentype.SVG.init(ptr[0..len]) catch |err| {
-                return switch (err) {
-                    error.EndOfStream,
-                    error.SVGVersionNotSupported,
-                    => error.InvalidSVGTable,
-                };
-            };
-
-            break :svg .{
-                .svg = svg,
-                .data = data,
-            };
-        };
-
-        return .{
-            .sbix = sbix,
-            .svg = if (svg) |v| v.svg else null,
-            .svg_data = if (svg) |v| v.data else null,
-        };
-    }
-
-    pub fn deinit(self: *const ColorState) void {
-        if (self.svg_data) |v| v.release();
-    }
-
-    /// Returns true if the given glyph ID is colored.
-    pub fn isColorGlyph(self: *const ColorState, glyph_id: u32) bool {
-        // Our font system uses 32-bit glyph IDs for special values but
-        // actual fonts only contain 16-bit glyph IDs so if we can't cast
-        // into it it must be false.
-        const glyph_u16 = std.math.cast(u16, glyph_id) orelse return false;
-
-        // sbix is always true for now
-        if (self.sbix) return true;
-
-        // if we have svg data, check it
-        if (self.svg) |svg| {
-            if (svg.hasGlyph(glyph_u16)) return true;
-        }
-
-        return false;
-    }
-};
-
-test {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    const name = try macos.foundation.String.createWithBytes("Monaco", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "name" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Menlo", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    var buf: [1024]u8 = undefined;
-    const font_name = try face.name(&buf);
-    try testing.expect(std.mem.eql(u8, font_name, "Menlo"));
-}
-
-test "emoji" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 18 } });
-    defer face.deinit();
-
-    // Glyph index check
-    {
-        const id = face.glyphIndex('🥸').?;
-        try testing.expect(face.isColorGlyph(id));
-    }
-}
-
-test "in-memory" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable set variation" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    try face.setVariations(&.{
-        .{ .id = font.face.Variation.Id.init("wght"), .value = 400 },
-    }, .{ .size = .{ .points = 12 } });
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "svg font table" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expect(table.len > 0);
-}
-
-test "glyphIndex colored vs text" {
-    const testing = std.testing;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    {
-        const glyph = face.glyphIndex('A').?;
-        try testing.expectEqual(4, glyph);
-        try testing.expect(!face.isColorGlyph(glyph));
-    }
-
-    {
-        const glyph = face.glyphIndex(0xE800).?;
-        try testing.expectEqual(11482, glyph);
-        try testing.expect(face.isColorGlyph(glyph));
-    }
-}
\ No newline at end of file
+        const color: struct {
\ No newline at end of file
