
index 1790a2e6..3428acab 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpgx4ybm1j_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmp1m40bxzt_actual.txt	
@@ -83,8 +83,6 @@ pub const Face = struct {
     /// Initialize a face with a CTFont. This will take ownership over
     /// the CTFont. This does NOT copy or retain the CTFont.
     pub fn initFont(ct_font: *macos.text.Font, opts: font.face.Options) !Face {
-        const traits = ct_font.getSymbolicTraits();
-
         var hb_font = if (comptime harfbuzz_shaper) font: {
             var hb_font = try harfbuzz.coretext.createFont(ct_font);
             hb_font.setScale(opts.size.pixels(), opts.size.pixels());
@@ -92,6 +90,8 @@ pub const Face = struct {
         } else {};
         errdefer if (comptime harfbuzz_shaper) hb_font.destroy();
 
+        const traits = ct_font.getSymbolicTraits();
+
         const color: ?ColorState = if (traits.color_glyphs)
             try ColorState.init(ct_font)
         else
@@ -160,8 +160,8 @@ pub const Face = struct {
         self.* = undefined;
     }
 
-    /// Return a new face that is the same as this but has a transformation
-    /// matrix applied to italicize it.
+    /// Return a new face that is the same as this but applies a synthetic
+    /// italic effect to it.
     pub fn syntheticItalic(self: *const Face, opts: font.face.Options) !Face {
         const ct_font = try self.font.copyWithAttributes(0.0, &italic_skew, null);
         errdefer ct_font.release();
@@ -280,6 +280,12 @@ pub const Face = struct {
         glyph_index: u32,
         opts: font.face.RenderOptions,
     ) !font.Glyph {
+        // We reserve a region that's 1px wider and taller than we need
+        // in order to create a 1px separation between adjacent glyphs
+        // to prevent interpolation with adjacent glyphs while sampling
+        // from the atlas.
+        const padding = 1;
+
         var glyphs = [_]macos.graphics.Glyph{@intCast(glyph_index)};
 
         // Get the bounding rect for rendering this glyph.
@@ -356,9 +362,10 @@ pub const Face = struct {
 
         // This is just a safety check.
         if (atlas.format.depth() != color.depth) {
-            log.warn("font atlas color depth doesn't equal font color depth atlas={} font={}", .{
+            log.warn("font atlas color depth doesn't equal font color depth atlas={} font={} expected={}", .{
                 atlas.format.depth(),
                 color.depth,
+                atlas.format.depth(),
             });
             return error.InvalidAtlasFormat;
         }
@@ -572,6 +579,7 @@ pub const Face = struct {
             };
         };
 
+
         const units_per_em: f64 = @floatFromInt(head.unitsPerEm);
         const px_per_em: f64 = ct_font.getSize();
         const px_per_unit: f64 = px_per_em / units_per_em;
@@ -633,22 +641,32 @@ pub const Face = struct {
             };
         };
 
-        // Some fonts have degenerate 'post' tables where the underline
-        // thickness (and often position) are 0. We consider them null
-        // if this is the case and use our own fallbacks when we calculate.
-        const has_broken_underline = post.underlineThickness == 0;
+        const underline_position: ?f64 = underline_position: {
+            const post = post orelse break :underline_position null;
 
-        // If the underline position isn't 0 then we do use it,
-        // even if the thickness is't properly specified.
-        const underline_position: ?f64 = if (has_broken_underline and post.underlinePosition == 0)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
+            // Some fonts have degenerate 'post' tables where the underline
+            // thickness (and often position) are 0. We consider them null
+            // if this is the case and use our own fallbacks when we calculate.
+            const has_broken_underline = post.underlineThickness == 0;
 
-        const underline_thickness = if (has_broken_underline)
-            null
-        else
-            @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
+            // If the underline position isn't 0 then we do use it,
+            // even if the thickness is't properly specified.
+            if (has_broken_underline and post.underlinePosition == 0)
+                break :underline_position null;
+            else
+                break :underline_position @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
+        };
+
+        const underline_thickness: ?f64 = underline_thickness: {
+            const post = post orelse break :underline_thickness null;
+
+            const has_broken_underline = post.underlineThickness == 0;
+
+            if (has_broken_underline)
+                break :underline_thickness null;
+            else
+                break :underline_thickness @as(f64, @floatFromInt(post.underlineThickness)) * px_per_unit;
+        };
 
         // Similar logic to the underline above.
         const strikethrough_position, const strikethrough_thickness = st: {
@@ -690,6 +708,7 @@ pub const Face = struct {
             };
         };
 
+
         // Cell width is calculated by calculating the widest width of the
         // visible ASCII characters. Usually 'M' is widest but we just take
         // whatever is widest.
@@ -724,7 +743,7 @@ pub const Face = struct {
             break :cell_width max;
         };
 
-        return .{
+        return font.Metrics.FaceMetrics.calc(.{
             .cell_width = cell_width,
             .ascent = ascent,
             .descent = descent,
@@ -735,7 +754,7 @@ pub const Face = struct {
             .strikethrough_thickness = strikethrough_thickness,
             .cap_height = cap_height,
             .ex_height = ex_height,
-        };
+        });
     }
 
     /// Copy the font table data for the given tag.
@@ -888,7 +907,7 @@ test "name" {
 
 test "emoji" {
     const testing = std.testing;
-
+    const alloc = testing.allocator;
     const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
     defer name.release();
     const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
