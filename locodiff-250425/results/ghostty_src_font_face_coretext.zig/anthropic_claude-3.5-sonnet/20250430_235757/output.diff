
index 1790a2e6..1b093966 100644
--- a/ghostty_src_font_face_coretext.zig_expectedoutput.txt (expected):tmp/tmpkt_ebvod_expected.txt	
+++ b/ghostty_src_font_face_coretext.zig_extracted.txt (actual):tmp/tmpkrf_d2_6_actual.txt	
@@ -1,6 +1,6 @@
 const std = @import("std");
 const builtin = @import("builtin");
-const assert = std.debug.assert;
+const assert = std.debug.assert; 
 const Allocator = std.mem.Allocator;
 const macos = @import("macos");
 const harfbuzz = @import("harfbuzz");
@@ -35,7 +35,7 @@ pub const Face = struct {
     /// some Harfbuzz-specific code paths.
     const harfbuzz_shaper = font.options.backend.hasHarfbuzz();
 
-    /// The matrix applied to a regular font to auto-italicize it.
+    /// The matrix applied to a regular font to auto-italicize it.  
     pub const italic_skew = macos.graphics.AffineTransform{
         .a = 1,
         .b = 0,
@@ -62,7 +62,7 @@ pub const Face = struct {
         return try initFontCopy(ct_font, opts);
     }
 
-    /// Initialize a CoreText-based face from another initialized font face
+    /// Initialize a CoreText-based face from another initialized font face 
     /// but with a new size. This is often how CoreText fonts are initialized
     /// because the font is loaded at a default size during discovery, and then
     /// adjusted to the final size for final load.
@@ -80,7 +80,7 @@ pub const Face = struct {
         return try initFont(ct_font, opts);
     }
 
-    /// Initialize a face with a CTFont. This will take ownership over
+    /// Initialize a face with a CTFont. This will take ownership over  
     /// the CTFont. This does NOT copy or retain the CTFont.
     pub fn initFont(ct_font: *macos.text.Font, opts: font.face.Options) !Face {
         const traits = ct_font.getSymbolicTraits();
@@ -88,7 +88,7 @@ pub const Face = struct {
         var hb_font = if (comptime harfbuzz_shaper) font: {
             var hb_font = try harfbuzz.coretext.createFont(ct_font);
             hb_font.setScale(opts.size.pixels(), opts.size.pixels());
-            break :font hb_font;
+            break :font hb_font; 
         } else {};
         errdefer if (comptime harfbuzz_shaper) hb_font.destroy();
 
@@ -106,7 +106,7 @@ pub const Face = struct {
         result.quirks_disable_default_font_features = quirks.disableDefaultFontFeatures(&result);
 
         // In debug mode, we output information about available variation axes,
-        // if they exist.
+        // if they exist. 
         if (comptime builtin.mode == .Debug) {
             if (ct_font.copyAttribute(.variation_axes)) |axes| {
                 defer axes.release();
@@ -142,7 +142,7 @@ pub const Face = struct {
                     log.debug("variation axis: name={s} id={s} min={} max={} def={}", .{
                         namestr,
                         id.str(),
-                        min,
+                        min,  
                         max,
                         def,
                     });
@@ -156,7 +156,7 @@ pub const Face = struct {
     pub fn deinit(self: *Face) void {
         self.font.release();
         if (comptime harfbuzz_shaper) self.hb_font.destroy();
-        if (self.color) |v| v.deinit();
+        if (self.color) |v| v.deinit(); 
         self.* = undefined;
     }
 
@@ -169,7 +169,7 @@ pub const Face = struct {
     }
 
     /// Return a new face that is the same as this but applies a synthetic
-    /// bold effect to it. This is useful for fonts that don't have a bold
+    /// bold effect to it. This is useful for fonts that don't have a bold 
     /// variant.
     pub fn syntheticBold(self: *const Face, opts: font.face.Options) !Face {
         const ct_font = try self.font.copyWithAttributes(0.0, null, null);
@@ -216,7 +216,7 @@ pub const Face = struct {
     pub fn setVariations(
         self: *Face,
         vs: []const font.face.Variation,
-        opts: font.face.Options,
+        opts: font.face.Options,  
     ) !void {
         // If we have no variations, we don't need to do anything.
         if (vs.len == 0) return;
@@ -278,7 +278,7 @@ pub const Face = struct {
         alloc: Allocator,
         atlas: *font.Atlas,
         glyph_index: u32,
-        opts: font.face.RenderOptions,
+        opts: font.face.Options,
     ) !font.Glyph {
         var glyphs = [_]macos.graphics.Glyph{@intCast(glyph_index)};
 
@@ -346,7 +346,7 @@ pub const Face = struct {
             .space = try macos.graphics.ColorSpace.createNamed(.linearGray),
             .context_opts = @intFromEnum(macos.graphics.ImageAlphaInfo.only),
         } else .{
-            .color = true,
+            .color = true, 
             .depth = 4,
             .space = try macos.graphics.ColorSpace.createNamed(.displayP3),
             .context_opts = @intFromEnum(macos.graphics.BitmapInfo.byte_order_32_little) |
@@ -371,6 +371,7 @@ pub const Face = struct {
         defer alloc.free(buf);
         @memset(buf, 0);
 
+        // Create our context
         const context = macos.graphics.BitmapContext.context;
         const ctx = try macos.graphics.BitmapContext.create(
             buf,
@@ -397,8 +398,9 @@ pub const Face = struct {
             },
         });
 
+        // Set up rendering settings
         context.setAllowsFontSmoothing(ctx, true);
-        context.setShouldSmoothFonts(ctx, opts.thicken); // The amadeus "enthicken"
+        context.setShouldSmoothFonts(ctx, opts.thicken);
         context.setAllowsFontSubpixelQuantization(ctx, true);
         context.setShouldSubpixelQuantizeFonts(ctx, true);
         context.setAllowsFontSubpixelPositioning(ctx, true);
@@ -458,17 +460,17 @@ pub const Face = struct {
         // This should be the distance from the bottom of
         // the cell to the top of the glyph's bounding box.
         //
-        // The calculation is distance from bottom of cell to
+        // The calculation is distance from bottom of cell to 
         // baseline plus distance from baseline to top of glyph.
         const offset_y: i32 = @as(i32, @intCast(metrics.cell_baseline)) + y1;
 
-        // This should be the distance from the left of
+        // This should be the distance from the left of 
         // the cell to the left of the glyph's bounding box.
         const offset_x: i32 = offset_x: {
             var result: i32 = x0;
 
             // If our cell was resized then we adjust our glyph's
-            // position relative to the new center. This keeps glyphs
+            // position relative to the new center. This keeps glyphs 
             // centered in the cell whether it was made wider or narrower.
             if (metrics.original_cell_width) |original_width| {
                 const before: i32 = @intCast(original_width);
@@ -516,7 +518,7 @@ pub const Face = struct {
             // ref: https://fontforge.org/docs/techref/bitmaponlysfnt.html
             const head_tag = macos.text.FontTableTag.init("head");
             const bhed_tag = macos.text.FontTableTag.init("bhed");
-            const data =
+            const data = 
                 ct_font.copyTable(head_tag) orelse
                 ct_font.copyTable(bhed_tag) orelse
                 return error.CopyTableError;
@@ -594,32 +596,26 @@ pub const Face = struct {
                 };
 
                 // Otherwise we prefer the height metrics from 'hhea' if they
-                // are available, or else OS/2 sTypo* metrics, and if all else
-                // fails then we use OS/2 usWin* metrics.
-                //
-                // This is not "standard" behavior, but it's our best bet to
-                // account for fonts being... just weird. It's pretty much what
-                // FreeType does to get its generic ascent and descent metrics.
-
+                // are available
                 if (hhea.ascender != 0 or hhea.descender != 0) break :vertical_metrics .{
                     hhea_ascent * px_per_unit,
                     hhea_descent * px_per_unit,
                     hhea_line_gap * px_per_unit,
                 };
 
+                // Otherwise try OS/2 typo metrics
                 if (os2_ascent != 0 or os2_descent != 0) break :vertical_metrics .{
                     os2_ascent * px_per_unit,
                     os2_descent * px_per_unit,
                     os2_line_gap * px_per_unit,
                 };
 
+                // Finally use usWin metrics
                 const win_ascent: f64 = @floatFromInt(os2.usWinAscent);
                 const win_descent: f64 = @floatFromInt(os2.usWinDescent);
                 break :vertical_metrics .{
                     win_ascent * px_per_unit,
-                    // usWinDescent is *positive* -> down unlike sTypoDescender
-                    // and hhea.Descender, so we flip its sign to fix this.
-                    -win_descent * px_per_unit,
+                    -win_descent * px_per_unit,  // Win descent is positive -> down
                     0.0,
                 };
             }
@@ -638,9 +634,9 @@ pub const Face = struct {
         // if this is the case and use our own fallbacks when we calculate.
         const has_broken_underline = post.underlineThickness == 0;
 
-        // If the underline position isn't 0 then we do use it,
+        // If the underline position isn't 0 then we do use it, 
         // even if the thickness is't properly specified.
-        const underline_position: ?f64 = if (has_broken_underline and post.underlinePosition == 0)
+        const underline_position = if (has_broken_underline and post.underlinePosition == 0)
             null
         else
             @as(f64, @floatFromInt(post.underlinePosition)) * px_per_unit;
@@ -658,7 +654,7 @@ pub const Face = struct {
 
             const pos: ?f64 = if (has_broken_strikethrough and os2.yStrikeoutPosition == 0)
                 null
-            else
+            else  
                 @as(f64, @floatFromInt(os2.yStrikeoutPosition)) * px_per_unit;
 
             const thick: ?f64 = if (has_broken_strikethrough)
@@ -684,349 +680,4 @@ pub const Face = struct {
                     ct_font.getCapHeight(),
 
                 if (os2.sxHeight) |sxHeight|
-                    @as(f64, @floatFromInt(sxHeight)) * px_per_unit
-                else
-                    ct_font.getXHeight(),
-            };
-        };
-
-        // Cell width is calculated by calculating the widest width of the
-        // visible ASCII characters. Usually 'M' is widest but we just take
-        // whatever is widest.
-        const cell_width: f64 = cell_width: {
-            // Build a comptime array of all the ASCII chars
-            const unichars = comptime unichars: {
-                const len = 127 - 32;
-                var result: [len]u16 = undefined;
-                var i: u16 = 32;
-                while (i < 127) : (i += 1) {
-                    result[i - 32] = i;
-                }
-
-                break :unichars result;
-            };
-
-            // Get our glyph IDs for the ASCII chars
-            var glyphs: [unichars.len]macos.graphics.Glyph = undefined;
-            _ = ct_font.getGlyphsForCharacters(&unichars, &glyphs);
-
-            // Get all our advances
-            var advances: [unichars.len]macos.graphics.Size = undefined;
-            _ = ct_font.getAdvancesForGlyphs(.horizontal, &glyphs, &advances);
-
-            // Find the maximum advance
-            var max: f64 = 0;
-            var i: usize = 0;
-            while (i < advances.len) : (i += 1) {
-                max = @max(advances[i].width, max);
-            }
-
-            break :cell_width max;
-        };
-
-        return .{
-            .cell_width = cell_width,
-            .ascent = ascent,
-            .descent = descent,
-            .line_gap = line_gap,
-            .underline_position = underline_position,
-            .underline_thickness = underline_thickness,
-            .strikethrough_position = strikethrough_position,
-            .strikethrough_thickness = strikethrough_thickness,
-            .cap_height = cap_height,
-            .ex_height = ex_height,
-        };
-    }
-
-    /// Copy the font table data for the given tag.
-    pub fn copyTable(
-        self: Face,
-        alloc: Allocator,
-        tag: *const [4]u8,
-    ) Allocator.Error!?[]u8 {
-        const data = self.font.copyTable(macos.text.FontTableTag.init(tag)) orelse
-            return null;
-        defer data.release();
-
-        const buf = try alloc.alloc(u8, data.getLength());
-        errdefer alloc.free(buf);
-
-        const ptr = data.getPointer();
-        @memcpy(buf, ptr[0..buf.len]);
-
-        return buf;
-    }
-};
-
-/// The state associated with a font face that may have colorized glyphs.
-/// This is used to determine if a specific glyph ID is colorized.
-const ColorState = struct {
-    /// True if there is an sbix font table. For now, the mere presence
-    /// of an sbix font table causes us to assume the glyph is colored.
-    /// We can improve this later.
-    sbix: bool,
-
-    /// The SVG font table data (if any), which we can use to determine
-    /// if a glyph is present in the SVG table.
-    svg: ?opentype.SVG,
-    svg_data: ?*macos.foundation.Data,
-
-    pub const Error = error{InvalidSVGTable};
-
-    pub fn init(f: *macos.text.Font) Error!ColorState {
-        // sbix is true if the table exists in the font data at all.
-        // In the future we probably want to actually parse it and
-        // check for glyphs.
-        const sbix: bool = sbix: {
-            const tag = macos.text.FontTableTag.init("sbix");
-            const data = f.copyTable(tag) orelse break :sbix false;
-            data.release();
-            break :sbix data.getLength() > 0;
-        };
-
-        // Read the SVG table out of the font data.
-        const svg: ?struct {
-            svg: opentype.SVG,
-            data: *macos.foundation.Data,
-        } = svg: {
-            const tag = macos.text.FontTableTag.init("SVG ");
-            const data = f.copyTable(tag) orelse break :svg null;
-            errdefer data.release();
-            const ptr = data.getPointer();
-            const len = data.getLength();
-            const svg = opentype.SVG.init(ptr[0..len]) catch |err| {
-                return switch (err) {
-                    error.EndOfStream,
-                    error.SVGVersionNotSupported,
-                    => error.InvalidSVGTable,
-                };
-            };
-
-            break :svg .{
-                .svg = svg,
-                .data = data,
-            };
-        };
-
-        return .{
-            .sbix = sbix,
-            .svg = if (svg) |v| v.svg else null,
-            .svg_data = if (svg) |v| v.data else null,
-        };
-    }
-
-    pub fn deinit(self: *const ColorState) void {
-        if (self.svg_data) |v| v.release();
-    }
-
-    /// Returns true if the given glyph ID is colored.
-    pub fn isColorGlyph(self: *const ColorState, glyph_id: u32) bool {
-        // Our font system uses 32-bit glyph IDs for special values but
-        // actual fonts only contain 16-bit glyph IDs so if we can't cast
-        // into it it must be false.
-        const glyph_u16 = std.math.cast(u16, glyph_id) orelse return false;
-
-        // sbix is always true for now
-        if (self.sbix) return true;
-
-        // if we have svg data, check it
-        if (self.svg) |svg| {
-            if (svg.hasGlyph(glyph_u16)) return true;
-        }
-
-        return false;
-    }
-};
-
-test {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    const name = try macos.foundation.String.createWithBytes("Monaco", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "name" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Menlo", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    var buf: [1024]u8 = undefined;
-    const font_name = try face.name(&buf);
-    try testing.expect(std.mem.eql(u8, font_name, "Menlo"));
-}
-
-test "emoji" {
-    const testing = std.testing;
-
-    const name = try macos.foundation.String.createWithBytes("Apple Color Emoji", .utf8, false);
-    defer name.release();
-    const desc = try macos.text.FontDescriptor.createWithNameAndSize(name, 12);
-    defer desc.release();
-    const ct_font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-    defer ct_font.release();
-
-    var face = try Face.initFontCopy(ct_font, .{ .size = .{ .points = 18 } });
-    defer face.deinit();
-
-    // Glyph index check
-    {
-        const id = face.glyphIndex('🥸').?;
-        try testing.expect(face.isColorGlyph(id));
-    }
-}
-
-test "in-memory" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "variable set variation" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.variable;
-
-    var atlas = try font.Atlas.init(alloc, 512, .grayscale);
-    defer atlas.deinit(alloc);
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    try face.setVariations(&.{
-        .{ .id = font.face.Variation.Id.init("wght"), .value = 400 },
-    }, .{ .size = .{ .points = 12 } });
-
-    // Generate all visible ASCII
-    var i: u8 = 32;
-    while (i < 127) : (i += 1) {
-        try testing.expect(face.glyphIndex(i) != null);
-        _ = try face.renderGlyph(
-            alloc,
-            &atlas,
-            face.glyphIndex(i).?,
-            .{ .grid_metrics = font.Metrics.calc(try face.getMetrics()) },
-        );
-    }
-}
-
-test "svg font table" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    const table = (try face.copyTable(alloc, "SVG ")).?;
-    defer alloc.free(table);
-
-    try testing.expect(table.len > 0);
-}
-
-test "glyphIndex colored vs text" {
-    const testing = std.testing;
-    const testFont = font.embedded.julia_mono;
-
-    var lib = try font.Library.init();
-    defer lib.deinit();
-
-    var face = try Face.init(lib, testFont, .{ .size = .{ .points = 12 } });
-    defer face.deinit();
-
-    {
-        const glyph = face.glyphIndex('A').?;
-        try testing.expectEqual(4, glyph);
-        try testing.expect(!face.isColorGlyph(glyph));
-    }
-
-    {
-        const glyph = face.glyphIndex(0xE800).?;
-        try testing.expectEqual(11482, glyph);
-        try testing.expect(face.isColorGlyph(glyph));
-    }
-}
\ No newline at end of file
+                    @as(f64
\ No newline at end of file
