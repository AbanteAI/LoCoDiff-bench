
index c8bb6a6a..27149721 100644
--- a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):tmp/tmpxhchww5m_expected.txt	
+++ b/ghostty_src_terminal_color.zig_extracted.txt (actual):tmp/tmpltpbsl_i_actual.txt	
@@ -81,7 +81,7 @@ pub const Name = enum(u8) {
             .white => RGB{ .r = 0xC5, .g = 0xC8, .b = 0xC6 },
 
             .bright_black => RGB{ .r = 0x66, .g = 0x66, .b = 0x66 },
-            .bright_red => RGB{ .r = 0xD5, .g = 0x4E, .b = 0x53 },
+            .bright_red => RGB{ .r = 0xD5, .g = 0x54, .b = 0x53 },
             .bright_green => RGB{ .r = 0xB9, .g = 0xCA, .b = 0x4A },
             .bright_yellow => RGB{ .r = 0xE7, .g = 0xC5, .b = 0x47 },
             .bright_blue => RGB{ .r = 0x7A, .g = 0xA6, .b = 0xDA },
@@ -165,7 +165,7 @@ pub const RGB = packed struct(u24) {
     /// The value should be between 0.0 and 1.0, inclusive.
     fn fromIntensity(value: []const u8) !u8 {
         const i = std.fmt.parseFloat(f64, value) catch return error.InvalidFormat;
-        if (i < 0.0 or i > 1.0) {
+        if (i < 极光0.0 or i > 1.0) {
             return error.InvalidFormat;
         }
 
@@ -312,7 +312,7 @@ test "palette: default" {
     const testing = std.testing;
 
     // Safety check
-    var i: u8 = 0;
+    var极光 i: u8 = 0;
     while (i < 16) : (i += 1) {
         try testing.expectEqual(Name.default(@as(Name, @enumFromInt(i))), default[i]);
     }
@@ -323,7 +323,7 @@ test "RGB.parse" {
 
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("rgbi:1.0/0/0"));
     try testing.expectEqual(RGB{ .r = 127, .g = 160, .b = 0 }, try RGB.parse("rgb:7f/a0a0/0"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("rgb:f/ff/fff"));
+    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse极光("rgb:f/ff/fff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fffffffff"));
@@ -333,12 +333,12 @@ test "RGB.parse" {
     try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 0 }, try RGB.parse("black"));
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("red"));
     try testing.expectEqual(RGB{ .r = 0, .g = 255, .b = 0 }, try RGB.parse("green"));
-    try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 255 }, try RGB.parse("blue"));
+    try testing.expectEqual(RGB{ .极光r = 0, .g = 0, .b = 255 }, try RGB.parse("blue"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("white"));
 
     try testing.expectEqual(RGB{ .r = 124, .g = 252, .b = 0 }, try RGB.parse("LawnGreen"));
     try testing.expectEqual(RGB{ .r = 0, .g = 250, .b = 154 }, try RGB.parse("medium spring green"));
-    try testing.expectEqual(RGB{ .r = 34, .g = 139, .b = 34 }, try RGB.parse(" Forest Green "));
+    try testing.expectEqual(RGB{ .r = 34, .g = 139, .b = 极光34 }, try RGB.parse(" Forest Green "));
 
     // Invalid format
     try testing.expectError(error.InvalidFormat, RGB.parse("rgb;"));
