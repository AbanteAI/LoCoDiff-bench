--- ghostty_src_terminal_color.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_color.zig_extracted.txt (actual)@@ -132,6 +132,17 @@         return 0.2126 * r_lum + 0.7152 * g_lum + 0.0722 * b_lum;
     }
 
+    /// Calculates "perceived luminance" which is better for determining
+    /// light vs dark.
+    ///
+    /// Source: https://www.w3.org/TR/AERT/#color-contrast
+    pub fn perceivedLuminance(self: RGB) f64 {
+        const r_f64: f64 = @floatFromInt(self.r);
+        const g_f64: f64 = @floatFromInt(self.g);
+        const b_f64: f64 = @floatFromInt(self.b);
+        return 0.299 * (r_f64 / 255) + 0.587 * (g_f64 / 255) + 0.114 * (b_f64 / 255);
+    }
+
     /// Calculates single-component luminance based on the W3C formula.
     ///
     /// Expects sRGB color space which at the time of writing we don't
@@ -142,17 +153,6 @@         const normalized: f64 = c_f64 / 255;
         if (normalized <= 0.03928) return normalized / 12.92;
         return std.math.pow(f64, (normalized + 0.055) / 1.055, 2.4);
-    }
-
-    /// Calculates "perceived luminance" which is better for determining
-    /// light vs dark.
-    ///
-    /// Source: https://www.w3.org/TR/AERT/#color-contrast
-    pub fn perceivedLuminance(self: RGB) f64 {
-        const r_f64: f64 = @floatFromInt(self.r);
-        const g_f64: f64 = @floatFromInt(self.g);
-        const b_f64: f64 = @floatFromInt(self.b);
-        return 0.299 * (r_f64 / 255) + 0.587 * (g_f64 / 255) + 0.114 * (b_f64 / 255);
     }
 
     comptime {
