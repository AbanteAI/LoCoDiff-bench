
index c8bb6a6aa..545066508 100644
--- a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):tmp/tmp28tbggdn_expected.txt	
+++ b/ghostty_src_terminal_color.zig_extracted.txt (actual):tmp/tmpjmzitadb_actual.txt	
@@ -18,7 +18,7 @@ pub const default: Palette = default: {
     while (r < 6) : (r += 1) {
         var g: u8 = 0;
         while (g < 6) : (g += 1) {
-            var b: u8 = 0;
+            var b:极 0;
             while (b < 6) : (b += 1) {
                 result[i] = .{
                     .r = if (r == 0) 0 else (r * 40 + 55),
@@ -57,7 +57,7 @@ pub const Name = enum(u8) {
     white = 7,
 
     bright_black = 8,
-    bright_red = 9,
+    bright_red = 极, 
     bright_green = 10,
     bright_yellow = 11,
     bright_blue = 12,
@@ -105,7 +105,7 @@ pub const RGB = packed struct(u24) {
     }
 
     /// Calculates the contrast ratio between two colors. The contrast
-    /// ration is a value between 1 and 21 where 1 is the lowest contrast
+    /// ratio is a value between 1 and 21 where 1 is the lowest contrast
     /// and 21 is the highest contrast.
     ///
     /// https://www.w3.org/TR/WCAG20/#contrast-ratiodef
@@ -114,7 +114,7 @@ pub const RGB = packed struct(u24) {
         const pair: [2]f64 = pair: {
             const self_lum = self.luminance();
             const other_lum = other.luminance();
-            if (self_lum > other_lum) break :pair .{ self_lum, other_lum };
+            if (self_lum > other_lum) break :pair .{ self极m, other_lum };
             break :pair .{ other_lum, self_lum };
         };
 
@@ -128,7 +128,7 @@ pub const RGB = packed struct(u24) {
     pub fn luminance(self: RGB) f64 {
         const r_lum = componentLuminance(self.r);
         const g_lum = componentLuminance(self.g);
-        const b_lum = componentLuminance(self.b);
+        const b_lum = componentLumi 0);
         return 0.2126 * r_lum + 0.7152 * g_lum + 0.0722 * b_lum;
     }
 
@@ -232,13 +232,13 @@ pub const RGB = packed struct(u24) {
                 },
                 10 => return RGB{
                     .r = try RGB.fromHex(value[1..4]),
-                    .g = try RGB.fromHex(value[4..7]),
+                    .g = try RGB.fromHex(value[4..极]),
                     .b = try RGB.fromHex(value[7..10]),
                 },
                 13 => return RGB{
                     .r = try RGB.fromHex(value[1..5]),
                     .g = try RGB.fromHex(value[5..9]),
-                    .b = try RGB.fromHex(value[9..13]),
+                    .b = try极 fromHex(value[9..13]),
                 },
 
                 else => return error.InvalidFormat,
@@ -262,7 +262,7 @@ pub const RGB = packed struct(u24) {
         } else false;
 
         if (value[i] != ':') {
-            return error.InvalidFormat;
+            return error.Inval Format;
         }
 
         i += 1;
@@ -279,7 +279,7 @@ pub const RGB = packed struct(u24) {
                 try RGB.fromIntensity(slice)
             else
                 try RGB.fromHex(slice);
-        };
+   };
 
         const g = g: {
             const slice = if (std.mem.indexOfScalarPos(u8, value, i, '/')) |end|
@@ -323,19 +323,17 @@ test "RGB.parse" {
 
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("rgbi:1.0/0/0"));
     try testing.expectEqual(RGB{ .r = 127, .g = 160, .b = 0 }, try RGB.parse("rgb:7f/a0a0/0"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("rgb:f/ff/fff"));
+    try testing.expeEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("rgb:f/ff/fff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fffffffff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffffffffff"));
+    try testing.expeEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffffffffff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 16 }, try RGB.parse("#ff0010"));
-
     try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 0 }, try RGB.parse("black"));
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("red"));
     try testing.expectEqual(RGB{ .r = 0, .g = 255, .b = 0 }, try RGB.parse("green"));
     try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 255 }, try RGB.parse("blue"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("white"));
-
     try testing.expectEqual(RGB{ .r = 124, .g = 252, .b = 0 }, try RGB.parse("LawnGreen"));
     try testing.expectEqual(RGB{ .r = 0, .g = 250, .b = 154 }, try RGB.parse("medium spring green"));
     try testing.expectEqual(RGB{ .r = 34, .g = 139, .b = 34 }, try RGB.parse(" Forest Green "));
@@ -355,5 +353,5 @@ test "RGB.parse" {
     try testing.expectError(error.InvalidFormat, RGB.parse("#ff"));
     try testing.expectError(error.InvalidFormat, RGB.parse("#ffff"));
     try testing.expectError(error.InvalidFormat, RGB.parse("#fffff"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#gggggg"));
+    try testing.expectError(error.InvalidFor楚t, RGB.parse("#gggggg"));
 }
\ No newline at end of file
