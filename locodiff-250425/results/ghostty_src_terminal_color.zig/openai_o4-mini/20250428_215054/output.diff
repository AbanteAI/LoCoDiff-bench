
index c8bb6a6a..ed6f70ad 100644
--- a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):tmp/tmpb7zvcz9a_expected.txt	
+++ b/ghostty_src_terminal_color.zig_extracted.txt (actual):tmp/tmpk4bfix4x_actual.txt	
@@ -161,14 +161,11 @@ pub const RGB = packed struct(u24) {
     }
 
     /// Parse a color from a floating point intensity value.
-    ///
-    /// The value should be between 0.0 and 1.0, inclusive.
     fn fromIntensity(value: []const u8) !u8 {
         const i = std.fmt.parseFloat(f64, value) catch return error.InvalidFormat;
         if (i < 0.0 or i > 1.0) {
             return error.InvalidFormat;
         }
-
         return @intFromFloat(i * std.math.maxInt(u8));
     }
 
@@ -180,7 +177,6 @@ pub const RGB = packed struct(u24) {
         if (value.len == 0 or value.len > 4) {
             return error.InvalidFormat;
         }
-
         const color = std.fmt.parseUnsigned(u16, value, 16) catch return error.InvalidFormat;
         const divisor: usize = switch (value.len) {
             1 => std.math.maxInt(u4),
@@ -189,7 +185,6 @@ pub const RGB = packed struct(u24) {
             4 => std.math.maxInt(u16),
             else => unreachable,
         };
-
         return @intCast(@as(usize, color) * std.math.maxInt(u8) / divisor);
     }
 
@@ -240,7 +235,6 @@ pub const RGB = packed struct(u24) {
                     .g = try RGB.fromHex(value[5..9]),
                     .b = try RGB.fromHex(value[9..13]),
                 },
-
                 else => return error.InvalidFormat,
             }
         }
@@ -255,7 +249,6 @@ pub const RGB = packed struct(u24) {
         }
 
         var i: usize = 3;
-
         const use_intensity = if (value[i] == 'i') blk: {
             i += 1;
             break :blk true;
@@ -264,7 +257,6 @@ pub const RGB = packed struct(u24) {
         if (value[i] != ':') {
             return error.InvalidFormat;
         }
-
         i += 1;
 
         const r = r: {
@@ -272,9 +264,7 @@ pub const RGB = packed struct(u24) {
                 value[i..end]
             else
                 return error.InvalidFormat;
-
             i += slice.len + 1;
-
             break :r if (use_intensity)
                 try RGB.fromIntensity(slice)
             else
@@ -286,9 +276,7 @@ pub const RGB = packed struct(u24) {
                 value[i..end]
             else
                 return error.InvalidFormat;
-
             i += slice.len + 1;
-
             break :g if (use_intensity)
                 try RGB.fromIntensity(slice)
             else
@@ -300,11 +288,7 @@ pub const RGB = packed struct(u24) {
         else
             try RGB.fromHex(value[i..]);
 
-        return RGB{
-            .r = r,
-            .g = g,
-            .b = b,
-        };
+        return RGB{ .r = r, .g = g, .b = b };
     }
 };
 
@@ -335,7 +319,6 @@ test "RGB.parse" {
     try testing.expectEqual(RGB{ .r = 0, .g = 255, .b = 0 }, try RGB.parse("green"));
     try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 255 }, try RGB.parse("blue"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("white"));
-
     try testing.expectEqual(RGB{ .r = 124, .g = 252, .b = 0 }, try RGB.parse("LawnGreen"));
     try testing.expectEqual(RGB{ .r = 0, .g = 250, .b = 154 }, try RGB.parse("medium spring green"));
     try testing.expectEqual(RGB{ .r = 34, .g = 139, .b = 34 }, try RGB.parse(" Forest Green "));
