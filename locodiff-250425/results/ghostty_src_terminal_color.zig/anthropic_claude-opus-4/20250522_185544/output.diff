
index c8bb6a6aa..0cd47d08c 100644
--- a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):tmp/tmp9wivn5ha_expected.txt	
+++ b/ghostty_src_terminal_color.zig_extracted.txt (actual):tmp/tmphb2nnkx5_actual.txt	
@@ -324,36 +324,4 @@ test "RGB.parse" {
     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("rgbi:1.0/0/0"));
     try testing.expectEqual(RGB{ .r = 127, .g = 160, .b = 0 }, try RGB.parse("rgb:7f/a0a0/0"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("rgb:f/ff/fff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fffffffff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffffffffff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 16 }, try RGB.parse("#ff0010"));
-
-    try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 0 }, try RGB.parse("black"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("red"));
-    try testing.expectEqual(RGB{ .r = 0, .g = 255, .b = 0 }, try RGB.parse("green"));
-    try testing.expectEqual(RGB{ .r = 0, .g = 0, .b = 255 }, try RGB.parse("blue"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("white"));
-
-    try testing.expectEqual(RGB{ .r = 124, .g = 252, .b = 0 }, try RGB.parse("LawnGreen"));
-    try testing.expectEqual(RGB{ .r = 0, .g = 250, .b = 154 }, try RGB.parse("medium spring green"));
-    try testing.expectEqual(RGB{ .r = 34, .g = 139, .b = 34 }, try RGB.parse(" Forest Green "));
-
-    // Invalid format
-    try testing.expectError(error.InvalidFormat, RGB.parse("rgb;"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("rgb:"));
-    try testing.expectError(error.InvalidFormat, RGB.parse(":a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):00000///"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("rgb:000/"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("rgbi:a/ghostty_src_terminal_color.zig_expectedoutput.txt (expected):0.5/0.0/1.0"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("rgb:not/hex/zz"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#ff"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#ffff"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#fffff"));
-    try testing.expectError(error.InvalidFormat, RGB.parse("#gggggg"));
-}
\ No newline at end of file
+    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b
\ No newline at end of file
