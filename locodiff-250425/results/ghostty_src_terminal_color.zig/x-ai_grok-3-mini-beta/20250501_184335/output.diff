--- ghostty_src_terminal_color.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_color.zig_extracted.txt (actual)@@ -9,7 +9,7 @@     // Named values
     var i: u8 = 0;
     while (i < 16) : (i += 1) {
-        result[i] = Name.default(@enumFromInt(i)) catch unreachable;
+        result[i] = Name.default(@as(Name, @enumFromInt(i))) catch unreachable;
     }
 
     // Cube
@@ -34,7 +34,7 @@     // Gray ramp
     assert(i == 232);
     assert(@TypeOf(i) == u8);
-    while (i > 0) : (i +%= 1) {
+    while (i < 256) : (i += 1) {
         const value = ((i - 232) * 10) + 8;
         result[i] = .{ .r = value, .g = value, .b = value };
     }
@@ -324,7 +324,6 @@     try testing.expectEqual(RGB{ .r = 255, .g = 0, .b = 0 }, try RGB.parse("rgbi:1.0/0/0"));
     try testing.expectEqual(RGB{ .r = 127, .g = 160, .b = 0 }, try RGB.parse("rgb:7f/a0a0/0"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("rgb:f/ff/fff"));
-    try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#fffffffff"));
     try testing.expectEqual(RGB{ .r = 255, .g = 255, .b = 255 }, try RGB.parse("#ffffffffffff"));
