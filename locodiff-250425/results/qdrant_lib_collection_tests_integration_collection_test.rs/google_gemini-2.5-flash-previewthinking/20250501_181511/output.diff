
index 7f71a6bd..b1c0aeeb 100644
--- a/qdrant_lib_collection_tests_integration_collection_test.rs_expectedoutput.txt (expected):tmp/tmpnglznpg5_expected.txt	
+++ b/qdrant_lib_collection_tests_integration_collection_test.rs_extracted.txt (actual):tmp/tmp2oltizh4_actual.txt	
@@ -27,7 +27,7 @@ use segment::types::{
 use serde_json::Map;
 use tempfile::Builder;
 
-use crate::common::{N_SHARDS, load_local_collection, simple_collection_fixture};
+use crate::common::{load_local_collection, simple_collection_fixture, N_SHARDS};
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_collection_updater() {
@@ -82,14 +82,13 @@ async fn test_collection_updater_with_shards(shard_number: u32) {
         score_threshold: None,
     };
 
-    let hw_acc = HwMeasurementAcc::new();
     let search_res = collection
         .search(
             search_request.into(),
             None,
             &ShardSelectorInternal::All,
             None,
-            hw_acc,
+            HwMeasurementAcc::new(),
         )
         .await;
 
@@ -153,14 +152,13 @@ async fn test_collection_search_with_payload_and_vector_with_shards(shard_number
         score_threshold: None,
     };
 
-    let hw_acc = HwMeasurementAcc::new();
     let search_res = collection
         .search(
             search_request.into(),
             None,
             &ShardSelectorInternal::All,
             None,
-            hw_acc,
+            HwMeasurementAcc::new(),
         )
         .await;
 
@@ -188,14 +186,13 @@ async fn test_collection_search_with_payload_and_vector_with_shards(shard_number
         exact: true,
     };
 
-    let hw_acc = HwMeasurementAcc::new();
     let count_res = collection
         .count(
             count_request,
             None,
             &ShardSelectorInternal::All,
             None,
-            hw_acc,
+            HwMeasurementAcc::new(),
         )
         .await
         .unwrap();
@@ -236,7 +233,7 @@ async fn test_collection_loading_with_shards(shard_number: u32) {
 
         let hw_counter = HwMeasurementAcc::new();
         collection
-            .update_from_client_simple(insert_points, true, WriteOrdering::default(), hw_counter)
+            .update_from_client_simple(insert_points, true, WriteOrdering::default(), hw_counter.clone())
             .await
             .unwrap();
 
@@ -682,11 +679,11 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
         let valid_asc_second_page_points = [10, 9, 8, 7, 6]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
         assert_eq!(asc_second_page.points.len(), 5);
         assert!(asc_second_page_points.is_subset(&valid_asc_second_page_points));
 
@@ -722,17 +719,17 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
 
         let valid_desc_second_page_points = [5, 6, 7, 8, 9]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
 
         assert_eq!(desc_second_page.points.len(), 4);
         assert!(
             desc_second_page_points.is_subset(&valid_desc_second_page_points),
-            "expected: {valid_desc_second_page_points:?}, got: {desc_second_page_points:?}"
+            "expected: {valid_desc_second_page_points:?}, got: {desc_second_page_points:?}",
         );
     }
 
