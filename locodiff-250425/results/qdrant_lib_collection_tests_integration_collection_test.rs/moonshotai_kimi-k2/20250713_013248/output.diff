
index 7f71a6bd1..fdce849b5 100644
--- a/qdrant_lib_collection_tests_integration_collection_test.rs_expectedoutput.txt (expected):tmp/tmpqmzjf_uk_expected.txt	
+++ b/qdrant_lib_collection_tests_integration_collection_test.rs_extracted.txt (actual):tmp/tmpiawfi0ui_actual.txt	
@@ -1,9 +1,8 @@
-use std::collections::{HashMap, HashSet};
+use std::collections::HashMap;
 use std::fs::File;
 
 use ahash::AHashSet;
 use api::rest::{OrderByInterface, SearchRequestInternal};
-use collection::operations::CollectionUpdateOperations;
 use collection::operations::payload_ops::{PayloadOps, SetPayloadOp};
 use collection::operations::point_ops::{
     BatchPersisted, BatchVectorStructPersisted, PointInsertOperationsInternal, PointOperations,
@@ -14,6 +13,7 @@ use collection::operations::types::{
     CountRequestInternal, PointRequestInternal, RecommendRequestInternal, ScrollRequestInternal,
     UpdateStatus,
 };
+use collection::operations::CollectionUpdateOperations;
 use collection::recommendations::recommend_by;
 use collection::shards::replica_set::{ReplicaSetState, ReplicaState};
 use common::counter::hardware_accumulator::HwMeasurementAcc;
@@ -27,7 +27,7 @@ use segment::types::{
 use serde_json::Map;
 use tempfile::Builder;
 
-use crate::common::{N_SHARDS, load_local_collection, simple_collection_fixture};
+use crate::common::{load_local_collection, simple_collection_fixture, N_SHARDS};
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_collection_updater() {
@@ -252,7 +252,12 @@ async fn test_collection_loading_with_shards(shard_number: u32) {
 
         let hw_counter = HwMeasurementAcc::new();
         collection
-            .update_from_client_simple(assign_payload, true, WriteOrdering::default(), hw_counter)
+            .update_from_client_simple(
+                assign_payload,
+                true,
+                WriteOrdering::default(),
+                hw_counter,
+            )
             .await
             .unwrap();
     }
@@ -682,11 +687,11 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
         let valid_asc_second_page_points = [10, 9, 8, 7, 6]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
         assert_eq!(asc_second_page.points.len(), 5);
         assert!(asc_second_page_points.is_subset(&valid_asc_second_page_points));
 
@@ -722,17 +727,19 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
 
         let valid_desc_second_page_points = [5, 6, 7, 8, 9]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
 
         assert_eq!(desc_second_page.points.len(), 4);
         assert!(
             desc_second_page_points.is_subset(&valid_desc_second_page_points),
-            "expected: {valid_desc_second_page_points:?}, got: {desc_second_page_points:?}"
+            "expected: {:?}, got: {:?}",
+            valid_desc_second_page_points,
+            desc_second_page_points
         );
     }
 
@@ -829,7 +836,12 @@ async fn test_collection_delete_points_by_filter_with_shards(shard_number: u32)
     );
 
     let delete_result = collection
-        .update_from_client_simple(delete_points, true, WriteOrdering::default(), hw_counter)
+        .update_from_client_simple(
+            delete_points,
+            true,
+            WriteOrdering::default(),
+            hw_counter,
+        )
         .await;
 
     match delete_result {
