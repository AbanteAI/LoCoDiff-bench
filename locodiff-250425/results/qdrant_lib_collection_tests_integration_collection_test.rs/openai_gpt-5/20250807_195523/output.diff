
index 7f71a6bd1..fd0f5a59b 100644
--- a/qdrant_lib_collection_tests_integration_collection_test.rs_expectedoutput.txt (expected):tmp/tmpw0zs9f4v_expected.txt	
+++ b/qdrant_lib_collection_tests_integration_collection_test.rs_extracted.txt (actual):tmp/tmpsuq3_xm1_actual.txt	
@@ -27,7 +27,7 @@ use segment::types::{
 use serde_json::Map;
 use tempfile::Builder;
 
-use crate::common::{N_SHARDS, load_local_collection, simple_collection_fixture};
+use crate::common::{load_local_collection, simple_collection_fixture, N_SHARDS};
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_collection_updater() {
@@ -310,9 +310,9 @@ fn test_deserialization() {
 
     let _read_obj: CollectionUpdateOperations = serde_json::from_str(&json_str).unwrap();
 
-    let crob_bytes = rmp_serde::to_vec(&insert_points).unwrap();
+    let raw_bytes = rmp_serde::to_vec(&insert_points).unwrap();
 
-    let _read_obj2: CollectionUpdateOperations = rmp_serde::from_slice(&crob_bytes).unwrap();
+    let _read_obj2: CollectionUpdateOperations = rmp_serde::from_slice(&raw_bytes).unwrap();
 }
 
 #[test]
@@ -512,32 +512,30 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
         get_payload(1.0),
     ];
 
-    let batch = BatchPersisted {
-        ids: vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
-            .into_iter()
-            .map(|x| x.into())
-            .collect_vec(),
-        vectors: BatchVectorStructPersisted::Single(vec![
-            vec![0.0, 0.0, 1.0, 1.0],
-            vec![1.0, 0.0, 0.0, 0.0],
-            vec![1.0, 0.0, 0.0, 0.0],
-            vec![0.0, 1.0, 0.0, 0.0],
-            vec![0.0, 1.0, 0.0, 0.0],
-            vec![0.0, 0.0, 1.0, 0.0],
-            vec![0.0, 0.0, 1.0, 0.0],
-            vec![0.0, 0.0, 0.0, 1.0],
-            vec![0.0, 0.0, 0.0, 1.0],
-            vec![0.0, 1.0, 1.0, 1.0],
-            vec![0.0, 1.0, 1.0, 1.0],
-            vec![0.0, 1.0, 1.0, 1.0],
-            vec![0.0, 1.0, 1.0, 1.0],
-            vec![1.0, 1.0, 1.0, 1.0],
-        ]),
-        payloads: Some(payloads),
-    };
-
     let insert_points = CollectionUpdateOperations::PointOperation(PointOperations::UpsertPoints(
-        PointInsertOperationsInternal::from(batch),
+        PointInsertOperationsInternal::from(BatchPersisted {
+            ids: vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]
+                .into_iter()
+                .map(|x| x.into())
+                .collect_vec(),
+            vectors: BatchVectorStructPersisted::Single(vec![
+                vec![0.0, 0.0, 1.0, 1.0],
+                vec![1.0, 0.0, 0.0, 0.0],
+                vec![1.0, 0.0, 0.0, 0.0],
+                vec![0.0, 1.0, 0.0, 0.0],
+                vec![0.0, 1.0, 0.0, 0.0],
+                vec![0.0, 0.0, 1.0, 0.0],
+                vec![0.0, 0.0, 1.0, 0.0],
+                vec![0.0, 0.0, 0.0, 1.0],
+                vec![0.0, 0.0, 0.0, 1.0],
+                vec![0.0, 1.0, 1.0, 1.0],
+                vec![0.0, 1.0, 1.0, 1.0],
+                vec![0.0, 1.0, 1.0, 1.0],
+                vec![0.0, 1.0, 1.0, 1.0],
+                vec![1.0, 1.0, 1.0, 1.0],
+            ]),
+            payloads: Some(payloads),
+        }),
     ));
 
     let hw_counter = HwMeasurementAcc::new();
@@ -745,7 +743,9 @@ async fn test_ordered_scroll_api_with_shards(shard_number: u32) {
                 filter: None,
                 with_payload: Some(WithPayloadInterface::Bool(true)),
                 with_vector: false.into(),
-                order_by: Some(OrderByInterface::Key(MULTI_VALUE_KEY.parse().unwrap())),
+                order_by: Some(OrderByInterface::Key(
+                    MULTI_VALUE_KEY.parse().unwrap(),
+                )),
             },
             None,
             &ShardSelectorInternal::All,
