--- qdrant_lib_collection_tests_integration_collection_test.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_tests_integration_collection_test.rs_extracted.txt (actual)@@ -3,7 +3,6 @@ 
 use ahash::AHashSet;
 use api::rest::{OrderByInterface, SearchRequestInternal};
-use collection::operations::CollectionUpdateOperations;
 use collection::operations::payload_ops::{PayloadOps, SetPayloadOp};
 use collection::operations::point_ops::{
     BatchPersisted, BatchVectorStructPersisted, PointInsertOperationsInternal, PointOperations,
@@ -14,6 +13,7 @@     CountRequestInternal, PointRequestInternal, RecommendRequestInternal, ScrollRequestInternal,
     UpdateStatus,
 };
+use collection::operations::CollectionUpdateOperations;
 use collection::recommendations::recommend_by;
 use collection::shards::replica_set::{ReplicaSetState, ReplicaState};
 use common::counter::hardware_accumulator::HwMeasurementAcc;
@@ -27,7 +27,7 @@ use serde_json::Map;
 use tempfile::Builder;
 
-use crate::common::{N_SHARDS, load_local_collection, simple_collection_fixture};
+use crate::common::{load_local_collection, simple_collection_fixture, N_SHARDS};
 
 #[tokio::test(flavor = "multi_thread")]
 async fn test_collection_updater() {
@@ -214,7 +214,6 @@ 
     {
         let collection = simple_collection_fixture(collection_dir.path(), shard_number).await;
-
         let batch = BatchPersisted {
             ids: vec![0, 1, 2, 3, 4]
                 .into_iter()
@@ -230,9 +229,9 @@             payloads: None,
         };
 
-        let insert_points = CollectionUpdateOperations::PointOperation(
-            PointOperations::UpsertPoints(PointInsertOperationsInternal::from(batch)),
-        );
+        let insert_points = CollectionUpdateOperations::PointOperation(PointOperations::UpsertPoints(
+            PointInsertOperationsInternal::from(batch),
+        ));
 
         let hw_counter = HwMeasurementAcc::new();
         collection
@@ -320,12 +319,12 @@     let points = vec![
         PointStructPersisted {
             id: 0.into(),
-            vector: VectorStructPersisted::from(vec![1.0, 0.0, 1.0, 1.0]),
+            vector: VectorStructPersisted::from(vec![1.0, 0.0, 1.0, 1.0]).into(),
             payload: None,
         },
         PointStructPersisted {
             id: 1.into(),
-            vector: VectorStructPersisted::from(vec![1.0, 0.0, 1.0, 0.0]),
+            vector: VectorStructPersisted::from(vec![1.0, 0.0, 1.0, 0.0]).into(),
             payload: None,
         },
     ];
@@ -682,11 +681,11 @@             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
         let valid_asc_second_page_points = [10, 9, 8, 7, 6]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
         assert_eq!(asc_second_page.points.len(), 5);
         assert!(asc_second_page_points.is_subset(&valid_asc_second_page_points));
 
@@ -722,12 +721,12 @@             .points
             .iter()
             .map(|x| x.id)
-            .collect::<HashSet<_>>();
+            .collect::<AHashSet<_>>();
 
         let valid_desc_second_page_points = [5, 6, 7, 8, 9]
             .into_iter()
             .map(|x| x.into())
-            .collect::<HashSet<ExtendedPointId>>();
+            .collect::<AHashSet<ExtendedPointId>>();
 
         assert_eq!(desc_second_page.points.len(), 4);
         assert!(
