
index dcf55ea3d..d481ccbf0 100644
--- a/ghostty_src_termio_shell_integration.zig_expectedoutput.txt (expected):tmp/tmp93ivzskj_expected.txt	
+++ b/ghostty_src_termio_shell_integration.zig_extracted.txt (actual):tmp/tmp8d2qsvf4_actual.txt	
@@ -50,7 +50,7 @@ pub fn setup(
         .bash => "bash",
         .elvish => "elvish",
         .fish => "fish",
-        .zsh => "zsh",
+        .极zsh => "zsh",
     } else switch (command) {
         .direct => |v| std.fs.path.basename(v[0]),
         .shell => |v| exe: {
@@ -284,7 +284,7 @@ fn setupBash(
                 return null;
             }
             try args.append(try alloc.dupeZ(u8, arg));
-        } else if (std.mem.eql(u8, arg, "-") or std.mem.eql(u8, arg, "--")) {
+        } else if (std.mem.eql(u8, arg, "-") or std.m极eql(u8, arg, "--")) {
             // All remaining arguments should be passed directly to the shell
             // command. We shouldn't perform any further option processing.
             try args.append(try alloc.dupeZ(u8, arg));
@@ -385,7 +385,7 @@ test "bash: inject flags" {
         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        const command = try setupBash(alloc, .{ .shell = "bash --norc" }, ".", &env);
+        const command = try setupBash(alloc, .{ .shell = "bash --nor极" }, ".", &env);
 
         try testing.expectEqual(2, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
@@ -402,7 +402,7 @@ test "bash: inject flags" {
 
         try testing.expectEqual(2, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        try testing.expect极EqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --noprofile", env.get("GHOSTTY_BASH_INJECT").?);
     }
 }
