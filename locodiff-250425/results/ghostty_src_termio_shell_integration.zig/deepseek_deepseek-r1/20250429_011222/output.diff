
index dcf55ea3..2b307d0b 100644
--- a/ghostty_src_termio_shell_integration.zig_expectedoutput.txt (expected):tmp/tmpqxrcataa_expected.txt	
+++ b/ghostty_src_termio_shell_integration.zig_extracted.txt (actual):tmp/tmpcrv7mnib_actual.txt	
@@ -54,9 +54,6 @@ pub fn setup(
     } else switch (command) {
         .direct => |v| std.fs.path.basename(v[0]),
         .shell => |v| exe: {
-            // Shell strings can include spaces so we want to only
-            // look up to the space if it exists. No shell that we integrate
-            // has spaces.
             const idx = std.mem.indexOfScalar(u8, v, ' ') orelse v.len;
             break :exe std.fs.path.basename(v[0..idx]);
         },
@@ -84,21 +81,12 @@ fn setupShell(
     exe: []const u8,
 ) !?ShellIntegration {
     if (std.mem.eql(u8, "bash", exe)) {
-        // Apple distributes their own patched version of Bash 3.2
-        // on macOS that disables the ENV-based POSIX startup path.
-        // This means we're unable to perform our automatic shell
-        // integration sequence in this specific environment.
-        //
-        // If we're running "/bin/bash" on Darwin, we can assume
-        // we're using Apple's Bash because /bin is non-writable
-        // on modern macOS due to System Integrity Protection.
         if (comptime builtin.target.os.tag.isDarwin()) {
-            if (std.mem.eql(u8, "/bin/bash", switch (command) {
+            const cmd_str = switch (command) {
                 .direct => |v| v[0],
                 .shell => |v| v,
-            })) {
-                return null;
-            }
+            };
+            if (std.mem.eql(u8, "/bin/bash", cmd_str)) return null;
         }
 
         const new_command = try setupBash(
@@ -242,51 +230,30 @@ fn setupBash(
     var args = try std.ArrayList([:0]const u8).initCapacity(alloc, 2);
     defer args.deinit();
 
-    // Iterator that yields each argument in the original command line.
-    // This will allocate once proportionate to the command line length.
     var iter = try command.argIterator(alloc);
     defer iter.deinit();
 
-    // Start accumulating arguments with the executable and `--posix` mode flag.
     if (iter.next()) |exe| {
         try args.append(try alloc.dupeZ(u8, exe));
     } else return null;
     try args.append("--posix");
 
-    // Stores the list of intercepted command line flags that will be passed
-    // to our shell integration script: --norc --noprofile
-    // We always include at least "1" so the script can differentiate between
-    // being manually sourced or automatically injected (from here).
     var inject = try std.BoundedArray(u8, 32).init(0);
     try inject.appendSlice("1");
 
-    // Walk through the rest of the given arguments. If we see an option that
-    // would require complex or unsupported integration behavior, we bail out
-    // and skip loading our shell integration. Users can still manually source
-    // the shell integration script.
-    //
-    // Unsupported options:
-    //  -c          -c is always non-interactive
-    //  --posix     POSIX mode (a la /bin/sh)
     var rcfile: ?[]const u8 = null;
     while (iter.next()) |arg| {
-        if (std.mem.eql(u8, arg, "--posix")) {
-            return null;
-        } else if (std.mem.eql(u8, arg, "--norc")) {
+        if (std.mem.eql(u8, arg, "--posix")) return null;
+        if (std.mem.eql(u8, arg, "--norc")) {
             try inject.appendSlice(" --norc");
         } else if (std.mem.eql(u8, arg, "--noprofile")) {
             try inject.appendSlice(" --noprofile");
         } else if (std.mem.eql(u8, arg, "--rcfile") or std.mem.eql(u8, arg, "--init-file")) {
             rcfile = iter.next();
         } else if (arg.len > 1 and arg[0] == '-' and arg[1] != '-') {
-            // '-c command' is always non-interactive
-            if (std.mem.indexOfScalar(u8, arg, 'c') != null) {
-                return null;
-            }
+            if (std.mem.indexOfScalar(u8, arg, 'c') != null) return null;
             try args.append(try alloc.dupeZ(u8, arg));
         } else if (std.mem.eql(u8, arg, "-") or std.mem.eql(u8, arg, "--")) {
-            // All remaining arguments should be passed directly to the shell
-            // command. We shouldn't perform any further option processing.
             try args.append(try alloc.dupeZ(u8, arg));
             while (iter.next()) |remaining_arg| {
                 try args.append(try alloc.dupeZ(u8, remaining_arg));
@@ -297,12 +264,8 @@ fn setupBash(
         }
     }
     try env.put("GHOSTTY_BASH_INJECT", inject.slice());
-    if (rcfile) |v| {
-        try env.put("GHOSTTY_BASH_RCFILE", v);
-    }
+    if (rcfile) |v| try env.put("GHOSTTY_BASH_RCFILE", v);
 
-    // In POSIX mode, HISTFILE defaults to ~/.sh_history, so unless we're
-    // staying in POSIX mode (--posix), change it back to ~/.bash_history.
     if (env.get("HISTFILE") == null) {
         var home_buf: [1024]u8 = undefined;
         if (try homedir.home(&home_buf)) |home| {
@@ -317,7 +280,6 @@ fn setupBash(
         }
     }
 
-    // Set our new ENV to point to our integration script.
     var path_buf: [std.fs.max_path_bytes]u8 = undefined;
     const integ_dir = try std.fmt.bufPrint(
         &path_buf,
@@ -326,8 +288,6 @@ fn setupBash(
     );
     try env.put("ENV", integ_dir);
 
-    // Since we built up a command line, we don't need to wrap it in
-    // ANOTHER shell anymore and can do a direct command.
     return .{ .direct = try args.toOwnedSlice() };
 }
 
@@ -341,12 +301,9 @@ test "bash" {
     defer env.deinit();
 
     const command = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
-
     try testing.expectEqual(2, command.?.direct.len);
     try testing.expectEqualStrings("bash", command.?.direct[0]);
-    try testing.expectEqualStrings("--posix", command.?.direct[1]);
     try testing.expectEqualStrings("./shell-integration/bash/ghostty.bash", env.get("ENV").?);
-    try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_INJECT").?);
 }
 
 test "bash: unsupported options" {
@@ -366,11 +323,7 @@ test "bash: unsupported options" {
     for (cmdlines) |cmdline| {
         var env = EnvMap.init(alloc);
         defer env.deinit();
-
         try testing.expect(try setupBash(alloc, .{ .shell = cmdline }, ".", &env) == null);
-        try testing.expect(env.get("GHOSTTY_BASH_INJECT") == null);
-        try testing.expect(env.get("GHOSTTY_BASH_RCFILE") == null);
-        try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
     }
 }
 
@@ -380,29 +333,17 @@ test "bash: inject flags" {
     defer arena.deinit();
     const alloc = arena.allocator();
 
-    // bash --norc
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
-
         const command = try setupBash(alloc, .{ .shell = "bash --norc" }, ".", &env);
-
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --norc", env.get("GHOSTTY_BASH_INJECT").?);
     }
 
-    // bash --noprofile
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
-
         const command = try setupBash(alloc, .{ .shell = "bash --noprofile" }, ".", &env);
-
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --noprofile", env.get("GHOSTTY_BASH_INJECT").?);
     }
 }
@@ -416,21 +357,13 @@ test "bash: rcfile" {
     var env = EnvMap.init(alloc);
     defer env.deinit();
 
-    // bash --rcfile
     {
         const command = try setupBash(alloc, .{ .shell = "bash --rcfile profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
 
-    // bash --init-file
     {
         const command = try setupBash(alloc, .{ .shell = "bash --init-file profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
 }
@@ -441,26 +374,19 @@ test "bash: HISTFILE" {
     defer arena.deinit();
     const alloc = arena.allocator();
 
-    // HISTFILE unset
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
-
         _ = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
         try testing.expect(std.mem.endsWith(u8, env.get("HISTFILE").?, ".bash_history"));
-        try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE").?);
     }
 
-    // HISTFILE set
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
-
         try env.put("HISTFILE", "my_history");
-
         _ = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
         try testing.expectEqualStrings("my_history", env.get("HISTFILE").?);
-        try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
     }
 }
 
@@ -473,28 +399,14 @@ test "bash: additional arguments" {
     var env = EnvMap.init(alloc);
     defer env.deinit();
 
-    // "-" argument separator
     {
         const command = try setupBash(alloc, .{ .shell = "bash - --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("-", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
     }
 
-    // "--" argument separator
     {
         const command = try setupBash(alloc, .{ .shell = "bash -- --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("--", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
     }
 }
 
@@ -511,31 +423,16 @@ fn setupXdgDataDirs(
     env: *EnvMap,
 ) !void {
     var path_buf: [std.fs.max_path_bytes]u8 = undefined;
-
-    // Get our path to the shell integration directory.
     const integ_dir = try std.fmt.bufPrint(
         &path_buf,
         "{s}/shell-integration",
         .{resource_dir},
     );
-
-    // Set an env var so we can remove this from XDG_DATA_DIRS later.
-    // This happens in the shell integration config itself. We do this
-    // so that our modifications don't interfere with other commands.
     try env.put("GHOSTTY_SHELL_INTEGRATION_XDG_DIR", integ_dir);
 
-    // We attempt to avoid allocating by using the stack up to 4K.
-    // Max stack size is considerably larger on mac
-    // 4K is a reasonable size for this for most cases. However, env
-    // vars can be significantly larger so if we have to we fall
-    // back to a heap allocated value.
     var stack_alloc_state = std.heap.stackFallback(4096, alloc_arena);
     const stack_alloc = stack_alloc_state.get();
 
-    // If no XDG_DATA_DIRS set use the default value as specified.
-    // This ensures that the default directories aren't lost by setting
-    // our desired integration dir directly. See #2711.
-    // <https://specifications.freedesktop.org/basedir-spec/0.6/#variables>
     const xdg_data_dirs_key = "XDG_DATA_DIRS";
     try env.put(
         xdg_data_dirs_key,
@@ -549,34 +446,26 @@ fn setupXdgDataDirs(
 
 test "xdg: empty XDG_DATA_DIRS" {
     const testing = std.testing;
-
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
 
     var env = EnvMap.init(alloc);
     defer env.deinit();
-
     try setupXdgDataDirs(alloc, ".", &env);
-
-    try testing.expectEqualStrings("./shell-integration", env.get("GHOSTTY_SHELL_INTEGRATION_XDG_DIR").?);
     try testing.expectEqualStrings("./shell-integration:/usr/local/share:/usr/share", env.get("XDG_DATA_DIRS").?);
 }
 
 test "xdg: existing XDG_DATA_DIRS" {
     const testing = std.testing;
-
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
 
     var env = EnvMap.init(alloc);
     defer env.deinit();
-
     try env.put("XDG_DATA_DIRS", "/opt/share");
     try setupXdgDataDirs(alloc, ".", &env);
-
-    try testing.expectEqualStrings("./shell-integration", env.get("GHOSTTY_SHELL_INTEGRATION_XDG_DIR").?);
     try testing.expectEqualStrings("./shell-integration:/opt/share", env.get("XDG_DATA_DIRS").?);
 }
 
@@ -587,12 +476,8 @@ fn setupZsh(
     resource_dir: []const u8,
     env: *EnvMap,
 ) !void {
-    // Preserve the old zdotdir value so we can recover it.
-    if (env.get("ZDOTDIR")) |old| {
-        try env.put("GHOSTTY_ZSH_ZDOTDIR", old);
-    }
+    if (env.get("ZDOTDIR")) |old| try env.put("GHOSTTY_ZSH_ZDOTDIR", old);
 
-    // Set our new ZDOTDIR
     var path_buf: [std.fs.max_path_bytes]u8 = undefined;
     const integ_dir = try std.fmt.bufPrint(
         &path_buf,
