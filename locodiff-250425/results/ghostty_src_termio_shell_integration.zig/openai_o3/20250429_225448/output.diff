--- ghostty_src_termio_shell_integration.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_shell_integration.zig_extracted.txt (actual)@@ -49,26 +49,19 @@     const exe = if (force_shell) |shell| switch (shell) {
         .bash => "bash",
         .elvish => "elvish",
-        .fish => "fish",
-        .zsh => "zsh",
+        .fish  => "fish",
+        .zsh   => "zsh",
     } else switch (command) {
         .direct => |v| std.fs.path.basename(v[0]),
-        .shell => |v| exe: {
-            // Shell strings can include spaces so we want to only
-            // look up to the space if it exists. No shell that we integrate
-            // has spaces.
+        .shell  => |v| exe: {
+            // The command can include arguments. Look for the first space
+            // and use the basename of the first part as the command's exe.
             const idx = std.mem.indexOfScalar(u8, v, ' ') orelse v.len;
             break :exe std.fs.path.basename(v[0..idx]);
         },
     };
 
-    const result = try setupShell(
-        alloc_arena,
-        resource_dir,
-        command,
-        env,
-        exe,
-    );
+    const result = try setupShell(alloc_arena, resource_dir, command, env, exe);
 
     // Setup our feature env vars
     try setupFeatures(env, features);
@@ -95,7 +88,7 @@         if (comptime builtin.target.os.tag.isDarwin()) {
             if (std.mem.eql(u8, "/bin/bash", switch (command) {
                 .direct => |v| v[0],
-                .shell => |v| v,
+                .shell  => |v| v,
             })) {
                 return null;
             }
@@ -108,7 +101,7 @@             env,
         ) orelse return null;
         return .{
-            .shell = .bash,
+            .shell   = .bash,
             .command = new_command,
         };
     }
@@ -116,7 +109,7 @@     if (std.mem.eql(u8, "elvish", exe)) {
         try setupXdgDataDirs(alloc_arena, resource_dir, env);
         return .{
-            .shell = .elvish,
+            .shell   = .elvish,
             .command = try command.clone(alloc_arena),
         };
     }
@@ -124,7 +117,7 @@     if (std.mem.eql(u8, "fish", exe)) {
         try setupXdgDataDirs(alloc_arena, resource_dir, env);
         return .{
-            .shell = .fish,
+            .shell   = .fish,
             .command = try command.clone(alloc_arena),
         };
     }
@@ -132,7 +125,7 @@     if (std.mem.eql(u8, "zsh", exe)) {
         try setupZsh(resource_dir, env);
         return .{
-            .shell = .zsh,
+            .shell   = .zsh,
             .command = try command.clone(alloc_arena),
         };
     }
@@ -231,8 +224,8 @@ /// our script's responsibility (along with disabling POSIX
 /// mode).
 ///
-/// This returns a new (allocated) shell command string that
-/// enables the integration or null if integration failed.
+/// This returns a new (allocated) command that enables the
+/// integration or null if integration failed.
 fn setupBash(
     alloc: Allocator,
     command: config.Command,
@@ -243,7 +236,6 @@     defer args.deinit();
 
     // Iterator that yields each argument in the original command line.
-    // This will allocate once proportionate to the command line length.
     var iter = try command.argIterator(alloc);
     defer iter.deinit();
 
@@ -301,8 +293,7 @@         try env.put("GHOSTTY_BASH_RCFILE", v);
     }
 
-    // In POSIX mode, HISTFILE defaults to ~/.sh_history, so unless we're
-    // staying in POSIX mode (--posix), change it back to ~/.bash_history.
+    // HISTFILE defaults to ~/.sh_history; change to ~/.bash_history if unset.
     if (env.get("HISTFILE") == null) {
         var home_buf: [1024]u8 = undefined;
         if (try homedir.home(&home_buf)) |home| {
@@ -327,12 +318,13 @@     try env.put("ENV", integ_dir);
 
     // Since we built up a command line, we don't need to wrap it in
-    // ANOTHER shell anymore and can do a direct command.
+    // another shell anymore and can do a direct command.
     return .{ .direct = try args.toOwnedSlice() };
 }
 
 test "bash" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -342,8 +334,8 @@ 
     const command = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
 
-    try testing.expectEqual(2, command.?.direct.len);
-    try testing.expectEqualStrings("bash", command.?.direct[0]);
+    try testing.expectEqual(@as(usize, 2), command.?.direct.len);
+    try testing.expectEqualStrings("bash",   command.?.direct[0]);
     try testing.expectEqualStrings("--posix", command.?.direct[1]);
     try testing.expectEqualStrings("./shell-integration/bash/ghostty.bash", env.get("ENV").?);
     try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_INJECT").?);
@@ -351,6 +343,7 @@ 
 test "bash: unsupported options" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -376,6 +369,7 @@ 
 test "bash: inject flags" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -387,8 +381,8 @@ 
         const command = try setupBash(alloc, .{ .shell = "bash --norc" }, ".", &env);
 
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+        try testing.expectEqual(@as(usize, 2), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --norc", env.get("GHOSTTY_BASH_INJECT").?);
     }
@@ -400,8 +394,8 @@ 
         const command = try setupBash(alloc, .{ .shell = "bash --noprofile" }, ".", &env);
 
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+        try testing.expectEqual(@as(usize, 2), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --noprofile", env.get("GHOSTTY_BASH_INJECT").?);
     }
@@ -409,6 +403,7 @@ 
 test "bash: rcfile" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -419,8 +414,9 @@     // bash --rcfile
     {
         const command = try setupBash(alloc, .{ .shell = "bash --rcfile profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+
+        try testing.expectEqual(@as(usize, 2), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
@@ -428,8 +424,9 @@     // bash --init-file
     {
         const command = try setupBash(alloc, .{ .shell = "bash --init-file profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+
+        try testing.expectEqual(@as(usize, 2), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
@@ -437,6 +434,7 @@ 
 test "bash: HISTFILE" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -466,6 +464,7 @@ 
 test "bash: additional arguments" {
     const testing = std.testing;
+
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -476,25 +475,25 @@     // "-" argument separator
     {
         const command = try setupBash(alloc, .{ .shell = "bash - --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+        try testing.expectEqual(@as(usize, 6), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("-", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
+        try testing.expectEqualStrings("-",      command.?.direct[2]);
+        try testing.expectEqualStrings("--arg",  command.?.direct[3]);
+        try testing.expectEqualStrings("file1",  command.?.direct[4]);
+        try testing.expectEqualStrings("file2",  command.?.direct[5]);
     }
 
     // "--" argument separator
     {
         const command = try setupBash(alloc, .{ .shell = "bash -- --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
+        try testing.expectEqual(@as(usize, 6), command.?.direct.len);
+        try testing.expectEqualStrings("bash",   command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("--", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
+        try testing.expectEqualStrings("--",     command.?.direct[2]);
+        try testing.expectEqualStrings("--arg",  command.?.direct[3]);
+        try testing.expectEqualStrings("file1",  command.?.direct[4]);
+        try testing.expectEqualStrings("file2",  command.?.direct[5]);
     }
 }
 
