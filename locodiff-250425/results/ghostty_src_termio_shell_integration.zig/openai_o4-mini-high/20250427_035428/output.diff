--- ghostty_src_termio_shell_integration.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_shell_integration.zig_extracted.txt (actual)@@ -34,7 +34,6 @@ /// integrated shell integration and return a ShellIntegration
 /// struct describing the integration.  If integration fails
 /// (shell type couldn't be detected, etc.), this will return null.
-///
 /// The allocator is used for temporary values and to allocate values
 /// in the ShellIntegration result. It is expected to be an arena to
 /// simplify cleanup.
@@ -70,10 +69,93 @@         exe,
     );
 
-    // Setup our feature env vars
+    // Setup our feature env var
     try setupFeatures(env, features);
 
     return result;
+}
+
+test "force shell" {
+    const testing = std.testing;
+    var arena = ArenaAllocator.init(testing.allocator);
+    defer arena.deinit();
+    const alloc = arena.allocator();
+
+    var env = EnvMap.init(alloc);
+    defer env.deinit();
+
+    inline for (@typeInfo(Shell).@"enum".fields) |field| {
+        const shell = @field(Shell, field.name);
+        const result = try setup(
+            alloc,
+            ".",
+            .{ .shell = "sh" },
+            &env,
+            shell,
+            .{},
+        );
+        try testing.expectEqual(shell, result.?.shell);
+    }
+}
+
+/// Set up the shell integration features environment variable.
+pub fn setupFeatures(
+    env: *EnvMap,
+    features: config.ShellIntegrationFeatures,
+) !void {
+    const fields = @typeInfo(@TypeOf(features)).@"struct".fields;
+    const capacity: usize = capacity: {
+        comptime var n: usize = fields.len - 1; // commas
+        inline for (fields) |f| n += f.name.len;
+        break :capacity n;
+    };
+    var buffer = try std.BoundedArray(u8, capacity).init(0);
+
+    inline for (fields) |f| {
+        if (@field(features, f.name)) {
+            if (buffer.len > 0) try buffer.append(',');
+            try buffer.appendSlice(f.name);
+        }
+    }
+
+    if (buffer.len > 0) {
+        try env.put("GHOSTTY_SHELL_FEATURES", buffer.slice());
+    }
+}
+
+test "setup features" {
+    const testing = std.testing;
+
+    var arena = ArenaAllocator.init(testing.allocator);
+    defer arena.deinit();
+    const alloc = arena.allocator();
+
+    // Test: all features enabled
+    {
+        var env = EnvMap.init(alloc);
+        defer env.deinit();
+
+        try setupFeatures(&env, .{ .cursor = true, .sudo = true, .title = true });
+        try testing.expectEqualStrings("cursor,sudo,title", env.get("GHOSTTY_SHELL_FEATURES").?);
+    }
+
+    // Test: all features disabled
+    {
+        var env = EnvMap.init(alloc);
+        defer env.deinit();
+
+        try setupFeatures(&env, .{ .cursor = false, .sudo = false, .title = false });
+        try testing.expect(env.get("GHOSTTY_SHELL_FEATURES") == null);
+    }
+
+    // Test: mixed features
+    {
+        var env = EnvMap.init(alloc);
+        defer env.deinit();
+
+        try setupFeatures(&env, .{ .cursor = false, .sudo = true, .title = false });
+        try testing.expectEqualStrings("sudo", env.get("GHOSTTY_SHELL_FEATURES").?);
+    }
 }
 
 fn setupShell(
@@ -93,10 +175,7 @@         // we're using Apple's Bash because /bin is non-writable
         // on modern macOS due to System Integrity Protection.
         if (comptime builtin.target.os.tag.isDarwin()) {
-            if (std.mem.eql(u8, "/bin/bash", switch (command) {
-                .direct => |v| v[0],
-                .shell => |v| v,
-            })) {
+            if (std.mem.eql(u8, "/bin/bash", command)) {
                 return null;
             }
         }
@@ -140,90 +219,6 @@     return null;
 }
 
-test "force shell" {
-    const testing = std.testing;
-
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var env = EnvMap.init(alloc);
-    defer env.deinit();
-
-    inline for (@typeInfo(Shell).@"enum".fields) |field| {
-        const shell = @field(Shell, field.name);
-        const result = try setup(
-            alloc,
-            ".",
-            .{ .shell = "sh" },
-            &env,
-            shell,
-            .{},
-        );
-        try testing.expectEqual(shell, result.?.shell);
-    }
-}
-
-/// Set up the shell integration features environment variable.
-pub fn setupFeatures(
-    env: *EnvMap,
-    features: config.ShellIntegrationFeatures,
-) !void {
-    const fields = @typeInfo(@TypeOf(features)).@"struct".fields;
-    const capacity: usize = capacity: {
-        comptime var n: usize = fields.len - 1; // commas
-        inline for (fields) |field| n += field.name.len;
-        break :capacity n;
-    };
-    var buffer = try std.BoundedArray(u8, capacity).init(0);
-
-    inline for (fields) |field| {
-        if (@field(features, field.name)) {
-            if (buffer.len > 0) try buffer.append(',');
-            try buffer.appendSlice(field.name);
-        }
-    }
-
-    if (buffer.len > 0) {
-        try env.put("GHOSTTY_SHELL_FEATURES", buffer.slice());
-    }
-}
-
-test "setup features" {
-    const testing = std.testing;
-
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    // Test: all features enabled
-    {
-        var env = EnvMap.init(alloc);
-        defer env.deinit();
-
-        try setupFeatures(&env, .{ .cursor = true, .sudo = true, .title = true });
-        try testing.expectEqualStrings("cursor,sudo,title", env.get("GHOSTTY_SHELL_FEATURES").?);
-    }
-
-    // Test: all features disabled
-    {
-        var env = EnvMap.init(alloc);
-        defer env.deinit();
-
-        try setupFeatures(&env, .{ .cursor = false, .sudo = false, .title = false });
-        try testing.expect(env.get("GHOSTTY_SHELL_FEATURES") == null);
-    }
-
-    // Test: mixed features
-    {
-        var env = EnvMap.init(alloc);
-        defer env.deinit();
-
-        try setupFeatures(&env, .{ .cursor = false, .sudo = true, .title = false });
-        try testing.expectEqualStrings("sudo", env.get("GHOSTTY_SHELL_FEATURES").?);
-    }
-}
-
 /// Setup the bash automatic shell integration. This works by
 /// starting bash in POSIX mode and using the ENV environment
 /// variable to load our bash integration script. This prevents
@@ -231,7 +226,7 @@ /// our script's responsibility (along with disabling POSIX
 /// mode).
 ///
-/// This returns a new (allocated) shell command string that
+/// This returns a new (allocated) shell command struct that
 /// enables the integration or null if integration failed.
 fn setupBash(
     alloc: Allocator,
@@ -239,11 +234,10 @@     resource_dir: []const u8,
     env: *EnvMap,
 ) !?config.Command {
-    var args = try std.ArrayList([:0]const u8).initCapacity(alloc, 2);
+    var args = try std.ArrayList([]const u8).initCapacity(alloc, 2);
     defer args.deinit();
 
     // Iterator that yields each argument in the original command line.
-    // This will allocate once proportionate to the command line length.
     var iter = try command.argIterator(alloc);
     defer iter.deinit();
 
@@ -255,20 +249,14 @@ 
     // Stores the list of intercepted command line flags that will be passed
     // to our shell integration script: --norc --noprofile
-    // We always include at least "1" so the script can differentiate between
-    // being manually sourced or automatically injected (from here).
+    // We always include at least "1" so the script can differentiate.
     var inject = try std.BoundedArray(u8, 32).init(0);
     try inject.appendSlice("1");
 
-    // Walk through the rest of the given arguments. If we see an option that
-    // would require complex or unsupported integration behavior, we bail out
-    // and skip loading our shell integration. Users can still manually source
-    // the shell integration script.
-    //
-    // Unsupported options:
-    //  -c          -c is always non-interactive
-    //  --posix     POSIX mode (a la /bin/sh)
     var rcfile: ?[]const u8 = null;
+
+    // Walk through remaining arguments.
+    // Unsupported options: -c (always non-interactive), --posix
     while (iter.next()) |arg| {
         if (std.mem.eql(u8, arg, "--posix")) {
             return null;
@@ -285,24 +273,22 @@             }
             try args.append(try alloc.dupeZ(u8, arg));
         } else if (std.mem.eql(u8, arg, "-") or std.mem.eql(u8, arg, "--")) {
-            // All remaining arguments should be passed directly to the shell
-            // command. We shouldn't perform any further option processing.
+            // All remaining args go directly.
             try args.append(try alloc.dupeZ(u8, arg));
-            while (iter.next()) |remaining_arg| {
-                try args.append(try alloc.dupeZ(u8, remaining_arg));
+            while (iter.next()) |rem| {
+                try args.append(try alloc.dupeZ(u8, rem));
             }
             break;
         } else {
             try args.append(try alloc.dupeZ(u8, arg));
         }
     }
+
     try env.put("GHOSTTY_BASH_INJECT", inject.slice());
     if (rcfile) |v| {
         try env.put("GHOSTTY_BASH_RCFILE", v);
     }
 
-    // In POSIX mode, HISTFILE defaults to ~/.sh_history, so unless we're
-    // staying in POSIX mode (--posix), change it back to ~/.bash_history.
     if (env.get("HISTFILE") == null) {
         var home_buf: [1024]u8 = undefined;
         if (try homedir.home(&home_buf)) |home| {
@@ -317,7 +303,6 @@         }
     }
 
-    // Set our new ENV to point to our integration script.
     var path_buf: [std.fs.max_path_bytes]u8 = undefined;
     const integ_dir = try std.fmt.bufPrint(
         &path_buf,
@@ -326,70 +311,37 @@     );
     try env.put("ENV", integ_dir);
 
-    // Since we built up a command line, we don't need to wrap it in
-    // ANOTHER shell anymore and can do a direct command.
     return .{ .direct = try args.toOwnedSlice() };
 }
 
 test "bash" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    var env = EnvMap.init(alloc);
-    defer env.deinit();
-
-    const command = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
-
-    try testing.expectEqual(2, command.?.direct.len);
-    try testing.expectEqualStrings("bash", command.?.direct[0]);
-    try testing.expectEqualStrings("--posix", command.?.direct[1]);
+    const alloc = testing.allocator;
+
+    var env = EnvMap.init(alloc);
+    defer env.deinit();
+
+    const command = try setupBash(alloc, "bash", ".", &env);
+    defer if (command) |c| alloc.free(c);
+
+    try testing.expectEqualStrings("bash --posix", command.?);
     try testing.expectEqualStrings("./shell-integration/bash/ghostty.bash", env.get("ENV").?);
     try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_INJECT").?);
 }
 
-test "bash: unsupported options" {
-    const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
-
-    const cmdlines = [_][:0]const u8{
-        "bash --posix",
-        "bash --rcfile script.sh --posix",
-        "bash --init-file script.sh --posix",
-        "bash -c script.sh",
-        "bash -ic script.sh",
-    };
-
-    for (cmdlines) |cmdline| {
-        var env = EnvMap.init(alloc);
-        defer env.deinit();
-
-        try testing.expect(try setupBash(alloc, .{ .shell = cmdline }, ".", &env) == null);
-        try testing.expect(env.get("GHOSTTY_BASH_INJECT") == null);
-        try testing.expect(env.get("GHOSTTY_BASH_RCFILE") == null);
-        try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
-    }
-}
-
 test "bash: inject flags" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
+    const alloc = testing.allocator;
 
     // bash --norc
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        const command = try setupBash(alloc, .{ .shell = "bash --norc" }, ".", &env);
-
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        const command = try setupBash(alloc, "bash --norc", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix", command.?);
         try testing.expectEqualStrings("1 --norc", env.get("GHOSTTY_BASH_INJECT").?);
     }
 
@@ -398,55 +350,63 @@         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        const command = try setupBash(alloc, .{ .shell = "bash --noprofile" }, ".", &env);
-
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        const command = try setupBash(alloc, "bash --noprofile", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix", command.?);
         try testing.expectEqualStrings("1 --noprofile", env.get("GHOSTTY_BASH_INJECT").?);
     }
 }
 
 test "bash: rcfile" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
+    const alloc = testing.allocator;
 
     var env = EnvMap.init(alloc);
     defer env.deinit();
 
     // bash --rcfile
     {
-        const command = try setupBash(alloc, .{ .shell = "bash --rcfile profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        const command = try setupBash(alloc, "bash --rcfile profile.sh", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix", command.?);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
 
     // bash --init-file
     {
-        const command = try setupBash(alloc, .{ .shell = "bash --init-file profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        const command = try setupBash(alloc, "bash --init-file profile.sh", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix", command.?);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
 }
 
+test "bash: -c command" {
+    const testing = std.testing;
+    const alloc = testing.allocator;
+
+    var env = EnvMap.init(alloc);
+    defer env.deinit();
+
+    try testing.expect(try setupBash(alloc, "bash -c script.sh", ".", &env) == null);
+    try testing.expect(try setupBash(alloc, "bash -ic script.sh", ".", &env) == null);
+}
+
 test "bash: HISTFILE" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
+    const alloc = testing.allocator;
 
     // HISTFILE unset
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        _ = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
+        const command = try setupBash(alloc, "bash", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
         try testing.expect(std.mem.endsWith(u8, env.get("HISTFILE").?, ".bash_history"));
         try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE").?);
     }
@@ -458,53 +418,66 @@ 
         try env.put("HISTFILE", "my_history");
 
-        _ = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
+        const command = try setupBash(alloc, "bash", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
         try testing.expectEqualStrings("my_history", env.get("HISTFILE").?);
         try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
     }
+
+    // HISTFILE unset (POSIX mode)
+    {
+        var env = EnvMap.init(alloc);
+        defer env.deinit();
+
+        const command = try setupBash(alloc, "bash --posix", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expect(env.get("HISTFILE") == null);
+        try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
+    }
+
+    // HISTFILE set (POSIX mode)
+    {
+        var env = EnvMap.init(alloc);
+        defer env.deinit();
+
+        try env.put("HISTFILE", "my_history");
+
+        const command = try setupBash(alloc, "bash --posix", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("my_history", env.get("HISTFILE").?);
+        try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
+    }
 }
 
 test "bash: additional arguments" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
-    defer arena.deinit();
-    const alloc = arena.allocator();
+    const alloc = testing.allocator;
 
     var env = EnvMap.init(alloc);
     defer env.deinit();
 
     // "-" argument separator
     {
-        const command = try setupBash(alloc, .{ .shell = "bash - --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("-", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
+        const command = try setupBash(alloc, "bash - --arg file1 file2", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix - --arg file1 file2", command.?);
     }
 
     // "--" argument separator
     {
-        const command = try setupBash(alloc, .{ .shell = "bash -- --arg file1 file2" }, ".", &env);
-        try testing.expectEqual(6, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("--", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
-        try testing.expectEqualStrings("file2", command.?.direct[5]);
+        const command = try setupBash(alloc, "bash -- --arg file1 file2", ".", &env);
+        defer if (command) |c| alloc.free(c);
+
+        try testing.expectEqualStrings("bash --posix -- --arg file1 file2", command.?);
     }
 }
 
 /// Setup automatic shell integration for shells that include
 /// their modules from paths in `XDG_DATA_DIRS` env variable.
-///
-/// The shell-integration path is prepended to `XDG_DATA_DIRS`.
-/// It is also saved in the `GHOSTTY_SHELL_INTEGRATION_XDG_DIR` variable
-/// so that the shell can refer to it and safely remove this directory
-/// from `XDG_DATA_DIRS` when integration is complete.
 fn setupXdgDataDirs(
     alloc_arena: Allocator,
     resource_dir: []const u8,
@@ -525,7 +498,7 @@     try env.put("GHOSTTY_SHELL_INTEGRATION_XDG_DIR", integ_dir);
 
     // We attempt to avoid allocating by using the stack up to 4K.
-    // Max stack size is considerably larger on mac
+    // Max stack size is considerably larger on macOS and Linux but
     // 4K is a reasonable size for this for most cases. However, env
     // vars can be significantly larger so if we have to we fall
     // back to a heap allocated value.
@@ -536,12 +509,12 @@     // This ensures that the default directories aren't lost by setting
     // our desired integration dir directly. See #2711.
     // <https://specifications.freedesktop.org/basedir-spec/0.6/#variables>
-    const xdg_data_dirs_key = "XDG_DATA_DIRS";
+    const xdg_data_dir_key = "XDG_DATA_DIRS";
     try env.put(
-        xdg_data_dirs_key,
+        xdg_data_dir_key,
         try internal_os.prependEnv(
             stack_alloc,
-            env.get(xdg_data_dirs_key) orelse "/usr/local/share:/usr/share",
+            env.get(xdg_data_dir_key) orelse "/usr/local/share:/usr/share",
             integ_dir,
         ),
     );
