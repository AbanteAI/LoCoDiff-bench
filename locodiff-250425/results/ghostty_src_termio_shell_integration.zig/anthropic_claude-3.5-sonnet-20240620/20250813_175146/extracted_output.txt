const std = @import("std");
const builtin = @import("builtin");
const Allocator = std.mem.Allocator;
const ArenaAllocator = std.heap.ArenaAllocator;
const EnvMap = std.process.EnvMap;
const config = @import("../config.zig");
const homedir = @import("../os/homedir.zig");
const internal_os = @import("../os/main.zig");

const log = std.log.scoped(.shell_integration);

/// Shell types we support
pub const Shell = enum {
    bash,
    elvish,
    fish,
    zsh,
};

pub const ShellIntegration = struct {
    /// The successfully-integrated shell.
    shell: Shell,

    /// A revised, integration-aware shell command.
    command: config.Command,
};

/// Set up the command execution environment for automatic
/// integrated shell integration and return a ShellIntegration
/// struct describing the integration.  If integration fails
/// (shell type couldn't be detected, etc.), this will return null.
///
/// The allocator is used for temporary values and to allocate values
/// in the ShellIntegration result.
pub fn setup(
    alloc_arena: Allocator,
    resource_dir: []const u8,
    command: config.Command,
    env: *EnvMap,
    force_shell: ?Shell,
    features: config.ShellIntegrationFeatures,
) !?ShellIntegration {
    const exe = if (force_shell) |shell| switch (shell) {
        .bash => "bash",
        .elvish => "elvish",
        .fish => "fish",
        .zsh => "zsh",
    } else switch (command) {
        .direct => |v| std.fs.path.basename(v[0]),
        .shell => |v| exe: {
            // Shell strings can include spaces so we want to only
            // look up to the space if it exists. No shell that we integrate
            // has spaces.
            const idx = std.mem.indexOfScalar(u8, v, ' ') orelse v.len;
            break :exe std.fs.path.basename(v[0..idx]);
        },
    };

    const result = try setupShell(
        alloc_arena,
        resource_dir,
        command,
        env,
        exe,
    );

    // Setup our feature env vars
    try setupFeatures(env, features);

    return result;
}

fn setupShell(
    alloc_arena: Allocator,
    resource_dir: []const u8,
    command: config.Command,
    env: *EnvMap,
    exe: []const u8,
) !?ShellIntegration {
    if (std.mem.eql(u8, "bash", exe)) {
        // Apple distributes their own patched version of Bash 3.2
        // on macOS that disables the ENV-based POSIX startup path.
        // This means we're unable to perform our automatic shell
        // integration sequence in this specific environment.
        //
        // If we're running "/bin/bash" on Darwin, we can assume
        // we're using Apple's Bash because /bin is non-writable
        // on modern macOS due to System Integrity Protection.
        if (comptime builtin.target.os.tag.isDarwin()) {
            if (std.mem.eql(u8, "/bin/bash", switch (command) {
                .direct => |v| v[0],
                .shell => |v| v,
            })) {
                return null;
            }
        }

        const new_command = try setupBash(
            alloc_arena,
            command,
            resource_dir,
            env,
        ) orelse return null;
        return .{
            .shell = .bash,
            .command = new_command,
        };
    }

    if (std.mem.eql(u8, "elvish", exe)) {
        try setupXdgDataDirs(alloc_arena, resource_dir, env);
        return .{
            .shell = .elvish,
            .command = try command.clone(alloc_arena),
        };
    }

    if (std.mem.eql(u8, "fish", exe)) {
        try setupXdgDataDirs(alloc_arena, resource_dir, env);
        return .{
            .shell = .fish,
            .command = try command.clone(alloc_arena),
        };
    }

    if (std.mem.eql(u8, "zsh", exe)) {
        try setupZsh(resource_dir, env);
        return .{
            .shell = .zsh,
            .command = try command.clone(alloc_arena),
        };
    }

    return null;
}

/// Set up the shell integration features environment variable.
pub fn setupFeatures(
    env: *EnvMap,
    features: config.ShellIntegrationFeatures,
) !void {
    const fields = @typeInfo(@TypeOf(features)).@"struct".fields;
    const capacity: usize = capacity: {
        comptime var n: usize = fields.len - 1; // commas
        inline for (fields) |field| n += field.name.len;
        break :capacity n;
    };
    var buffer = try std.BoundedArray(u8, capacity).init(0);

    inline for (fields) |field| {
        if (@field(features, field.name)) {
            if (buffer.len > 0) try buffer.append(',');
            try buffer.appendSlice(field.name);
        }
    }

    if (buffer.len > 0) {
        try env.put("GHOSTTY_SHELL_FEATURES", buffer.slice());
    }
}

fn setupBash(
    alloc: Allocator,
    command: config.Command,
    resource_dir: []const u8,
    env: *EnvMap,
) !?config.Command {
    var args = try std.ArrayList([:0]const u8).initCapacity(alloc, 2);
    defer args.deinit();

    var iter = try command.argIterator(alloc);
    defer iter.deinit();

    if (iter.next()) |exe| {
        try args.append(try alloc.dupeZ(u8, exe));
    } else return null;
    try args.append("--posix");

    var inject = try std.BoundedArray(u8, 32).init(0);
    try inject.appendSlice("1");

    var rcfile: ?[]const u8 = null;
    while (iter.next()) |arg| {
        if (std.mem.eql(u8, arg, "--posix")) {
            return null;
        } else if (std.mem.eql(u8, arg, "--norc")) {
            try inject.appendSlice(" --norc");
        } else if (std.mem.eql(u8, arg, "--noprofile")) {
            try inject.appendSlice(" --noprofile");
        } else if (std.mem.eql(u8, arg, "--rcfile") or std.mem.eql(u8, arg, "--init-file")) {
            rcfile = iter.next();
        } else if (arg.len > 1 and arg[0] == '-' and arg[1] != '-') {
            if (std.mem.indexOfScalar(u8, arg, 'c') != null) {
                return null;
            }
            try args.append(try alloc.dupeZ(u8, arg));
        } else if (std.mem.eql(u8, arg, "-") or std.mem.eql(u8, arg, "--")) {
            try args.append(try alloc.dupeZ(u8, arg));
            while (iter.next()) |remaining_arg| {
                try args.append(try alloc.dupeZ(u8, remaining_arg));
            }
            break;
        } else {
            try args.append(try alloc.dupeZ(u8, arg));
        }
    }
    try env.put("GHOSTTY_BASH_INJECT", inject.slice());
    if (rcfile) |v| {
        try env.put("GHOSTTY_BASH_RCFILE", v);
    }

    if (env.get("HISTFILE") == null) {
        var home_buf: [1024]u8 = undefined;
        if (try homedir.home(&home_buf)) |home| {
            var histfile_buf: [std.fs.max_path_bytes]u8 = undefined;
            const histfile = try std.fmt.bufPrint(
                &histfile_buf,
                "{s}/.bash_history",
                .{home},
            );
            try env.put("HISTFILE", histfile);
            try env.put("GHOSTTY_BASH_UNEXPORT_HISTFILE", "1");
        }
    }

    var path_buf: [std.fs.max_path_bytes]u8 = undefined;
    const integ_dir = try std.fmt.bufPrint(
        &path_buf,
        "{s}/shell-integration/bash/ghostty.bash",
        .{resource_dir},
    );
    try env.put("ENV", integ_dir);

    return .{ .direct = try args.toOwnedSlice() };
}

fn setupXdgDataDirs(
    alloc_arena: Allocator,
    resource_dir: []const u8,
    env: *EnvMap,
) !void {
    var path_buf: [std.fs.max_path_bytes]u8 = undefined;

    const integ_dir = try std.fmt.bufPrint(
        &path_buf,
        "{s}/shell-integration",
        .{resource_dir},
    );

    try env.put("GHOSTTY_SHELL_INTEGRATION_XDG_DIR", integ_dir);

    var stack_alloc_state = std.heap.stackFallback(4096, alloc_arena);
    const stack_alloc = stack_alloc_state.get();

    const xdg_data_dirs_key = "XDG_DATA_DIRS";
    try env.put(
        xdg_data_dirs_key,
        try internal_os.prependEnv(
            stack_alloc,
            env.get(xdg_data_dirs_key) orelse "/usr/local/share:/usr/share",
            integ_dir,
        ),
    );
}

fn setupZsh(
    resource_dir: []const u8,
    env: *EnvMap,
) !void {
    if (env.get("ZDOTDIR")) |old| {
        try env.put("GHOSTTY_ZSH_ZDOTDIR", old);
    }

    var path_buf: [std.fs.max_path_bytes]u8 = undefined;
    const integ_dir = try std.fmt.bufPrint(
        &path_buf,
        "{s}/shell-integration/zsh",
        .{resource_dir},
    );
    try env.put("ZDOTDIR", integ_dir);
}