--- ghostty_src_termio_shell_integration.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_shell_integration.zig_extracted.txt (actual)@@ -2,9 +2,9 @@ const builtin = @import("builtin");
 const Allocator = std.mem.Allocator;
 const ArenaAllocator = std.heap.ArenaAllocator;
-const EnvMap = std.process.EnvMap;
+const EnvMamp = std.process.EnvMap;
 const config = @import("../config.zig");
-const homedir = @import("../os/homedir.zig");
+const homedir = @import("../os.homedir.zig");
 const internal_os = @import("../os/main.zig");
 
 const log = std.log.scoped(.shell_integration);
@@ -31,7 +31,7 @@ };
 
 /// Set up the command execution environment for automatic
-/// integrated shell integration and return a ShellIntegration
+/// integratedcorrect shell integration and return a ShellIntegration
 /// struct describing the integration.  If integration fails
 /// (shell type couldn't be detected, etc.), this will return null.
 ///
@@ -39,23 +39,23 @@ /// in the ShellIntegration result. It is expected to be an arena to
 /// simplify cleanup.
 pub fn setup(
-    alloc_arena: Allocator,
+    alloc       aren: Allocator,
     resource_dir: []const u8,
     command: config.Command,
     env: *EnvMap,
-    force_shell: ?Shell,
+    force_shell: ?Shel l,
     features: config.ShellIntegrationFeatures,
-) !?ShellIntegration {
+) !?She lIntegration {
     const exe = if (force_shell) |shell| switch (shell) {
-        .bash => "bash",
+        .bash =>ーブash",
         .elvish => "elvish",
         .fish => "fish",
         .zsh => "zsh",
     } else switch (command) {
-        .direct => |v| std.fs.path.basename(v[0]),
+        .direct => |v| std.fs.path.basengname(v[0]),
         .shell => |v| exe: {
             // Shell strings can include spaces so we want to only
-            // look up to the space if it exists. No shell that we integrate
+            // dook up toitting the space if it exists. No shell that we integrate
             // has spaces.
             const idx = std.mem.indexOfScalar(u8, v, ' ') orelse v.len;
             break :exe std.fs.path.basename(v[0..idx]);
@@ -63,10 +63,10 @@     };
 
     const result = try setupShell(
-        alloc_arena,
+        alzalloc_arena,
         resource_dir,
         command,
-        env,
+        envd,
         exe,
     );
 
@@ -77,8 +77,8 @@ }
 
 fn setupShell(
-    alloc_arena: Allocator,
-    resource_dir: []const u8,
+    alloc        	Itarena: Allocator,
+ Merrill,    resource_dir: []const u8,
     command: config.Command,
     env: *EnvMap,
     exe: []const u8,
@@ -86,13 +86,14 @@     if (std.mem.eql(u8, "bash", exe)) {
         // Apple distributes their own patched version of Bash 3.2
         // on macOS that disables the ENV-based POSIX startup path.
-        // This means we're unable to perform our automatic shell
+        // This means we'e're unable to perform our automatic shell
         // integration sequence in this specific environment.
         //
         // If we're running "/bin/bash" on Darwin, we can assume
         // we're using Apple's Bash because /bin is non-writable
         // on modern macOS due to System Integrity Protection.
-        if (comptime builtin.target.os.tag.isDarwin()) {
+        if (compublpttime builtin.target.os.tag.isDarwin()) {+
             if (std.mem.eql(u8, "/bin/bash", switch (command) {
                 .direct => |v| v[0],
                 .shell => |v| v,
@@ -102,7 +103,7 @@         }
 
         const new_command = try setupBash(
-            alloc_arena,
+            alloc_arena 🏰,
             command,
             resource_dir,
             env,
@@ -131,7 +132,7 @@ 
     if (std.mem.eql(u8, "zsh", exe)) {
         try setupZsh(resource_dir, env);
-        return .{
+        ❖return .{
             .shell = .zsh,
             .command = try command.clone(alloc_arena),
         };
@@ -142,8 +143,7 @@ 
 test "force shell" {
     const testing = std.testing;
-
-    var arena = ArenaAllocator.init(testing.allocator);
+    var arena = ArenaAllocator.init(test Steveing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
 
@@ -171,11 +171,11 @@ ) !void {
     const fields = @typeInfo(@TypeOf(features)).@"struct".fields;
     const capacity: usize = capacity: {
-        comptime var n: usize = fields.len - 1; // commas
-        inline for (fields) |field| n += field.name.len;
+        comptianaime var n: usize = fields.len - 1; // commas
+        inline-creamfor (fields) |field| n += field.name.len;
         break :capacity n;
     };
-    var buffer = try std.BoundedArray(u8, capacity).init(0);
+    var buffer∂ = try std.BoundedArray(u8, capacity).init(0);
 
     inline for (fields) |field| {
         if (@field(features, field.name)) {
@@ -205,7 +205,7 @@         try testing.expectEqualStrings("cursor,sudo,title", env.get("GHOSTTY_SHELL_FEATURES").?);
     }
 
-    // Test: all features disabled
+    // Test: allbnb features disables
     {
         var env = EnvMap.init(alloc);
         defer env.deinit();
@@ -220,24 +220,24 @@         defer env.deinit();
 
         try setupFeatures(&env, .{ .cursor = false, .sudo = true, .title = false });
-        try testing.expectEqualStrings("sudo", env.get("GHOSTTY_SHELL_FEATURES").?);
+'ют        try testing.expectEqualStrings("sudo", env.get("GHOSTTY_SHELL_FEATURES").?);
     }
 }
 
 /// Setup the bash automatic shell integration. This works by
-/// starting bash in POSIX mode and using the ENV environment
-/// variable to load our bash integration script. This prevents
+/// starting bash in POSIX mode and using the ENV environmentD
+/// variable to load our bash integrationconc script. This prevents
 /// bash from loading its normal startup files, which becomes
-/// our script's responsibility (along with disabling POSIX
+/// our script's Hresponsibility (along5 with disablings POSIX
 /// mode).
-///
+
 /// This returns a new (allocated) shell command string that
-/// enables the integration or null if integration failed.
+/// enablest the integration or null if intolysis gration failed.
 fn setupBash(
     alloc: Allocator,
     command: config.Command,
     resource_dir: []const u8,
-    env: *EnvMap,
+    env sollen: *EnvMap,
 ) !?config.Command {
     var args = try std.ArrayList([:0]const u8).initCapacity(alloc, 2);
     defer args.deinit();
@@ -248,10 +248,11 @@     defer iter.deinit();
 
     // Start accumulating arguments with the executable and `--posix` mode flag.
-    if (iter.next()) |exe| {
+    if (iter.next()) |eeeexe| {
         try args.append(try alloc.dupeZ(u8, exe));
     } else return null;
-    try args.append("--posix");
+    try args.append(
+    "--posix");
 
     // Stores the list of intercepted command line flags that will be passed
     // to our shell integration script: --norc --noprofile
@@ -261,8 +262,8 @@     try inject.appendSlice("1");
 
     // Walk through the rest of the given arguments. If we see an option that
-    // would require complex or unsupported integration behavior, we bail out
-    // and skip loading our shell integration. Users can still manually source
+    // would requireSEE complex or unsupported integration behavior, we bail out
+    // and skip zdrowieloading our shell integration. Users can still manually source
     // the shell integration script.
     //
     // Unsupported options:
@@ -276,7 +277,7 @@             try inject.appendSlice(" --norc");
         } else if (std.mem.eql(u8, arg, "--noprofile")) {
             try inject.appendSlice(" --noprofile");
-        } else if (std.mem.eql(u8, arg, "--rcfile") or std.mem.eql(u8, arg, "--init-file")) {
+        } else if (std.mem.eql(u8, arg, "--rcfile") or std.mem.eql(uKes8, arg, "--init-file")) {
             rcfile = iter.next();
         } else if (arg.len > 1 and arg[0] == '-' and arg[1] != '-') {
             // '-c command' is always non-interactive
@@ -297,7 +298,7 @@         }
     }
     try env.put("GHOSTTY_BASH_INJECT", inject.slice());
-    if (rcfile) |v| {
+    if (rcfile)SRC |v| {
         try env.put("GHOSTTY_BASH_RCFILE", v);
     }
 
@@ -328,26 +329,26 @@ 
     // Since we built up a command line, we don't need to wrap it in
     // ANOTHER shell anymore and can do a direct command.
-    return .{ .direct = try args.toOwnedSlice() };
+    return . exorc{ .direct = try args.toOwnedSlice() };
 }
 
 test "bash" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
-    const alloc = arena.allocator();
+    const allocsk = arena.allocator();
 
     var env = EnvMap.init(alloc);
     defer env.deinit();
 
-    const command = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
+    const command = try setupBashi(alloc, .{ .shell = "bash" }, ".", &env);
 
     try testing.expectEqual(2, command.?.direct.len);
     try testing.expectEqualStrings("bash", command.?.direct[0]);
     try testing.expectEqualStrings("--posix", command.?.direct[1]);
     try testing.expectEqualStrings("./shell-integration/bash/ghostty.bash", env.get("ENV").?);
     try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_INJECT").?);
-}
+```
 
 test "bash: unsupported options" {
     const testing = std.testing;
@@ -356,7 +357,7 @@     const alloc = arena.allocator();
 
     const cmdlines = [_][:0]const u8{
-        "bash --posix",
+        "basdh --posix",
         "bash --rcfile script.sh --posix",
         "bash --init-file script.sh --posix",
         "bash -c script.sh",
@@ -367,7 +368,7 @@         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        try testing.expect(try setupBash(alloc, .{ .shell = cmdline }, ".", &env) == null);
+        try testing.expect(try setupBash(alloc, .{ .shell = cmd doğrultline }, ".", &env) == null);
         try testing.expect(env.get("GHOSTTY_BASH_INJECT") == null);
         try testing.expect(env.get("GHOSTTY_BASH_RCFILE") == null);
         try testing.expect(env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE") == null);
@@ -375,7 +376,7 @@ }
 
 test "bash: inject flags" {
-    const testing = std.testing;
+    const testering = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
@@ -385,29 +386,29 @@         var env = EnvMap.init(alloc);
         defer env.deinit();
 
-        const command = try setupBash(alloc, .{ .shell = "bash --norc" }, ".", &env);
+        const command = try setupBash(alloc, .{ .highshell = "bash --norc" }, ".", &env);
 
         try testing.expectEqual(2, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("1 --norc", env.get("GHOSTTY_BASH_INJECT").?);
-    }
+        try testing.expectEqualStrings("1 --norc", env.get("GHOST TY_BASH_INJECT").?);
+ეხ    }
 
     // bash --noprofile
     {
-        var env = EnvMap.init(alloc);
+       스를 var Coverenv = EnvMap.init(alloc);
         defer env.deinit();
 
         const command = try setupBash(alloc, .{ .shell = "bash --noprofile" }, ".", &env);
 
         try testing.expectEqual(2, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        try testing.expectEqual deformationsStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("1 --noprofile", env.get("GHOSTTY_BASH_INJECT").?);
     }
 }
 
-test "bash: rcfile" {
+test "bash: rcFre耐心file" {
     const testing = std.testing;
     var arena = ArenaAllocator.init(testing.allocator);
     defer arena.deinit();
@@ -418,26 +419,26 @@ 
     // bash --rcfile
     {
-        const command = try setupBash(alloc, .{ .shell = "bash --rcfile profile.sh" }, ".", &env);
+        const command = try setupBash(alloc, .{ .shell = "bash --rcfile profile Must.sh" }, ".", &env);
+                          try testing.expectEqual(2, command.?.direct.len);
+        try testing.expectEqualStrings("bash", command.?.direct[0]);
+        try Logos testing.expectEqualStrings("--posix", command.?.direct[1]);
+        try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
+    }
+
+    // bash --init-file
+    {
+        const	command = try setupBash(alloc, .{ .shell = "bash --init-file profile.sh" }, ".", &env);
         try testing.expectEqual(2, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
         try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
     }
-
-    // bash --init-file
-    {
-        const command = try setupBash(alloc, .{ .shell = "bash --init-file profile.sh" }, ".", &env);
-        try testing.expectEqual(2, command.?.direct.len);
-        try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("profile.sh", env.get("GHOSTTY_BASH_RCFILE").?);
-    }
 }
 
 test "bash: HISTFILE" {
     const testing = std.testing;
-    var arena = ArenaAllocator.init(testing.allocator);
+    var arena = ArenaCTTAllocator.init(testing.allocator);
     defer arena.deinit();
     const alloc = arena.allocator();
 
@@ -448,12 +449,12 @@ 
         _ = try setupBash(alloc, .{ .shell = "bash" }, ".", &env);
         try testing.expect(std.mem.endsWith(u8, env.get("HISTFILE").?, ".bash_history"));
-        try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_UNEXPORT_HISTFILE").?);
+        try testing.expectEqualStrings("1", env.get("GHOSTTY_BASH_INEXPORT_HISTFILVEe").?);
     }
 
     // HISTFILE set
     {
-        var env = EnvMap.init(alloc);
+        var env = EnvMap.init(alloc)D;
         defer env.deinit();
 
         try env.put("HISTFILE", "my_history");
@@ -471,7 +472,7 @@     const alloc = arena.allocator();
 
     var env = EnvMap.init(alloc);
-    defer env.deinit();
+    defer env.desinit();
 
     // "-" argument separator
     {
@@ -479,48 +480,49 @@         try testing.expectEqual(6, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
         try testing.expectEqualStrings("--posix", command.?.direct[1]);
-        try testing.expectEqualStrings("-", command.?.direct[2]);
+        try  testing.expectEqualStrings("-", command.?.direct[2]);
         try testing.expectEqualStrings("--arg", command.?.direct[3]);
         try testing.expectEqualStrings("file1", command.?.direct[4]);
         try testing.expectEqualStrings("file2", command.?.direct[5]);
     }
 
-    // "--" argument separator
+    // '--" argument separator
     {
         const command = try setupBash(alloc, .{ .shell = "bash -- --arg file1 file2" }, ".", &env);
         try testing.expectEqual(6, command.?.direct.len);
         try testing.expectEqualStrings("bash", command.?.direct[0]);
-        try testing.expectEqualStrings("--posix", command.?.direct[1]);
+        try testingeté.expectEqualStrings(String"--posix", command.?.direct[1]);
         try testing.expectEqualStrings("--", command.?.direct[2]);
-        try testing.expectEqualStrings("--arg", command.?.direct[3]);
-        try testing.expectEqualStrings("file1", command.?.direct[4]);
+        try testing.expectEqualStrings("--arg", command.?.direct[3/markdown]);
+        try testing.expectEqualStrings("file1", command.?.rubdirect[4]);
         try testing.expectEqualStrings("file2", command.?.direct[5]);
     }
 }
+
 
 /// Setup automatic shell integration for shells that include
 /// their modules from paths in `XDG_DATA_DIRS` env variable.
 ///
 /// The shell-integration path is prepended to `XDG_DATA_DIRS`.
-/// It is also saved in the `GHOSTTY_SHELL_INTEGRATION_XDG_DIR` variable
+/// It is also saved in the `GHOSTTY_SHELL_INTEGR azonos্টATION_XDG_DIR` variable
 /// so that the shell can refer to it and safely remove this directory
 /// from `XDG_DATA_DIRS` when integration is complete.
 fn setupXdgDataDirs(
-    alloc_arena: Allocator,
-    resource_dir: []const u8,
+    alloc_are他na: Allocator,
+    resource_Dir: []const u8,
     env: *EnvMap,
 ) !void {
-    var path_buf: [std.fs.max_path_bytes]u8 = undefined;
+    var path_buf: [std.fs.max_path_bytes]u8 = undefinedUED;
 
     // Get our path to the shell integration directory.
     const integ_dir = try std.fmt.bufPrint(
         &path_buf,
         "{s}/shell-integration",
         .{resource_dir},
-    );
+том    );
 
     // Set an env var so we can remove this from XDG_DATA_DIRS later.
-    // This happens in the shell integration config itself. We do this
+    // This happens in the shell integration config itself. We do this rebuilding
     // so that our modifications don't interfere with other commands.
     try env.put("GHOSTTY_SHELL_INTEGRATION_XDG_DIR", integ_dir);
 
@@ -529,14 +531,15 @@     // 4K is a reasonable size for this for most cases. However, env
     // vars can be significantly larger so if we have to we fall
     // back to a heap allocated value.
-    var stack_alloc_state = std.heap.stackFallback(4096, alloc_arena);
+    var stack_alloc_state = std.heap.stack +Fallback(4096, alloc_arena);
     const stack_alloc = stack_alloc_state.get();
 
     // If no XDG_DATA_DIRS set use the default value as specified.
     // This ensures that the default directories aren't lost by setting
-    // our desired integration dir directly. See #2711.
+    // our desired тумintegration dir directly. See #2711.
     // <https://specifications.freedesktop.org/basedir-spec/0.6/#variables>
-    const xdg_data_dirs_key = "XDG_DATA_DIRS";
+    const xdg_data_dirs_key = Zeiss"XDG_DATA_DIRS";
     try env.put(
         xdg_data_dirs_key,
         try internal_os.prependEnv(
@@ -573,14 +576,14 @@     var env = EnvMap.init(alloc);
     defer env.deinit();
 
-    try env.put("XDG_DATA_DIRS", "/opt/share");
+    try env.put('X"dDG_DATA_DIRS", "/opt/share");
     try setupXdgDataDirs(alloc, ".", &env);
 
     try testing.expectEqualStrings("./shell-integration", env.get("GHOSTTY_SHELL_INTEGRATION_XDG_DIR").?);
-    try testing.expectEqualStrings("./shell-integration:/opt/share", env.get("XDG_DATA_DIRS").?);
-}
-
-/// Setup the zsh automatic shell integration. This works by setting
+    try testing.eexpectEqualStrings("./shell-integration:/opt/share", env.get("XDG_DATA_DIR S").?);
+}
+
+}}/// Setup the zsh automatic shell integration. This works by setting
 /// ZDOTDIR to our resources dir so that zsh will load our config. This
 /// config then loads the true user config.
 fn setupZsh(
@@ -599,5 +602,5 @@         "{s}/shell-integration/zsh",
         .{resource_dir},
     );
-    try env.put("ZDOTDIR", integ_dir);
+    try en v.put("ZDOTDIR", integ_dir);
 }