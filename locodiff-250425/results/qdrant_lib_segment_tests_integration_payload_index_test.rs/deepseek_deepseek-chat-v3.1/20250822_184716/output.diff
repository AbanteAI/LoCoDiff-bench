
index d46358c38..dd8bf6620 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpdwkwy05a_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmp4s3ofrw8_actual.txt	
@@ -19,7 +19,7 @@ use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
     KeywordIndexType, TextIndexParams, TextIndexType,
 };
-use segment::data_types::vectors::{DEFAULT_VECTOR_NAME, only_default_vector};
+use segment::data_types::vectors::{only_default_vector, DEFAULT_VECTOR_NAME};
 use segment::entry::entry_point::SegmentEntry;
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::fixtures::payload_fixtures::{
@@ -58,7 +58,7 @@ macro_rules! here {
 /// `anyhow::ensure!` but with location, as what `assert!` would do
 macro_rules! ensure {
     ($($arg:tt)*) => {
-        (|| Ok(anyhow::ensure!($($arg)*)))().map_err(|e| {
+        (|| Ok(anyhow::ensure!($($arg)*))().map_err(|e| {
             e.context(here!())
         })?
     };
@@ -473,8 +473,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
         for index in indexes {
             assert!(index.count_indexed_points() < num_points as usize);
             assert!(
-                index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                index.count_indexed_points() > (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -972,418 +971,4 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
                 "got different ScoredPoint {r1:?} and {r2:?} for\n\
                 query vector {query_vector:?}\n\
                 query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                struct result{struct_result:?}"
-            );
-            ensure!((r1.score - r2.score) < 0.0001);
-            ensure!(
-                r1.id == r3.id,
-                "got different ScoredPoint {r1:?} and {r3:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                mmap result  {mmap_result:?}",
-            );
-            ensure!((r1.score - r3.score) < 0.0001);
-        }
-    }
-    Ok(())
-}
-
-fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    let geo_bbox = GeoBoundingBox {
-        top_left: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-        bottom_right: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_bounding_box(
-        JsonPath::new("geo_key"),
-        geo_bbox,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    let r_meters = rnd.random_range(1.0..10000.0);
-    let geo_radius = GeoRadius {
-        center: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-        radius: r_meters,
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_radius(
-        JsonPath::new("geo_key"),
-        geo_radius,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result<()> {
-    let polygon_edge = 5;
-    let interiors_num = 3;
-
-    fn generate_ring(polygon_edge: i32) -> GeoLineString {
-        let mut rnd = rand::rng();
-        let mut line = GeoLineString {
-            points: (0..polygon_edge)
-                .map(|_| GeoPoint {
-                    lon: rnd.random_range(LON_RANGE),
-                    lat: rnd.random_range(LAT_RANGE),
-                })
-                .collect(),
-        };
-        line.points.push(line.points[0]); // add last point that is identical to the first
-        line
-    }
-
-    let exterior = generate_ring(polygon_edge);
-    let interiors = Some(
-        std::iter::repeat_with(|| generate_ring(polygon_edge))
-            .take(interiors_num)
-            .collect(),
-    );
-
-    let geo_polygon = GeoPolygon {
-        exterior,
-        interiors,
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_polygon(
-        JsonPath::new("geo_key"),
-        geo_polygon,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let mut rnd = rand::rng();
-
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
-#[test]
-fn test_update_payload_index_type() {
-    let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-    let mut payload_storage = InMemoryPayloadStorage::default();
-
-    let point_num = 10;
-    let mut points = HashMap::new();
-
-    let mut payloads: Vec<Payload> = vec![];
-    for i in 0..point_num {
-        payloads.push(payload_json! {"field": i});
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    for (idx, payload) in payloads.into_iter().enumerate() {
-        points.insert(idx, payload.clone());
-        payload_storage
-            .set(idx as PointOffsetType, &payload, &hw_counter)
-            .unwrap();
-    }
-
-    let wrapped_payload_storage = Arc::new(AtomicRefCell::new(payload_storage.into()));
-    let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(point_num)));
-
-    let mut index = StructPayloadIndex::open(
-        wrapped_payload_storage,
-        id_tracker,
-        HashMap::new(),
-        dir.path(),
-        true,
-    )
-    .unwrap();
-
-    let field = JsonPath::new("field");
-
-    // set field to Integer type
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-
-    // update field to Keyword type
-    index.set_indexed(&field, Keyword, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Keyword)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), 0); // only one field index for Keyword
-
-    // set field to Integer type (again)
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-}
-
-fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
-    let keywords: IndexSet<String, FnvBuildHasher> = ["value1", "value2"]
-        .iter()
-        .map(|&i| i.to_string())
-        .collect();
-    let any_match = FieldCondition::new_match(
-        JsonPath::new(STR_KEY),
-        Match::new_any(AnyVariants::Strings(keywords)),
-    );
-
-    let filter = Filter::new_must(Condition::Field(any_match.clone()));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = test_segments
-        .struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    ensure!(estimation.primary_clauses.len() == 1);
-    for clause in estimation.primary_clauses.iter() {
-        let expected_primary_clause = any_match.clone();
-
-        match clause {
-            PrimaryCondition::Condition(field_condition) => {
-                ensure!(*field_condition == Box::new(expected_primary_clause));
-            }
-            o => panic!("unexpected primary clause: {o:?}"),
-        }
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = test_segments.struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = test_segments
-        .struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    ensure!(exact <= estimation.max);
-    ensure!(exact >= estimation.min);
-
-    Ok(())
-}
-
-/// FacetParams fixture without a filter
-fn keyword_facet_request() -> FacetParams {
-    let limit = 1000;
-    let key: JsonPath = STR_KEY.try_into().unwrap();
-    let exact = false; // This is only used at local shard level
-
-    // *** Without filter ***
-    FacetParams {
-        key: key.clone(),
-        limit,
-        filter: None,
-        exact,
-    }
-}
-
-/// Checks that the counts are the same as counting each value exactly.
-fn validate_facet_result(
-    segment: &Segment,
-    facet_hits: HashMap<FacetValue, usize>,
-    filter: Option<Filter>,
-) -> Result<()> {
-    let hw_counter = HardwareCounterCell::new();
-
-    for (value, count) in facet_hits.iter() {
-        // Compare against exact count
-        let value = ValueVariants::from(value.clone());
-
-        let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
-            JsonPath::new(STR_KEY),
-            Match::from(value.clone()),
-        )));
-        let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
-
-        let exact = segment
-            .read_filtered(
-                None,
-                None,
-                count_filter.as_ref(),
-                &Default::default(),
-                &hw_counter,
-            )
-            .len();
-
-        ensure!(*count == exact, "Facet value: {value:?}");
-    }
-
-    Ok(())
-}
-
-fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
-    let request = keyword_facet_request();
-
-    // Plain segment should fail, as it does not have a keyword index
-    assert!(
-        test_segments
-            .plain_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .is_err(),
-    );
-
-    // Struct segment
-    let facet_hits = test_segments
-        .struct_segment
-        .facet(&request, &Default::default(), &Default::default())
-        .unwrap();
-
-    validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
-}
-
-fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
-    let request = keyword_facet_request();
-
-    let facet_hits = test_segments
-        .mmap_segment
-        .facet(&request, &Default::default(), &Default::default())
-        .unwrap();
-
-    validate_facet_result(&test_segments.mmap_segment, facet_hits, None).context(here!())
-}
-
-fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
-    let mut request = keyword_facet_request();
-
-    for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
-        request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
-            .struct_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .unwrap();
-
-        validate_facet_result(&test_segments.struct_segment, facet_hits, Some(filter))
-            .context(here!())?
-    }
-    Ok(())
-}
-
-fn test_mmap_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
-    let mut request = keyword_facet_request();
-
-    for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
-        request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
-            .mmap_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .unwrap();
-
-        validate_facet_result(&test_segments.mmap_segment, facet_hits, Some(filter))
-            .context(here!())?
-    }
-    Ok(())
-}
\ No newline at end of file
+                plain result {plain
\ No newline at end of file
