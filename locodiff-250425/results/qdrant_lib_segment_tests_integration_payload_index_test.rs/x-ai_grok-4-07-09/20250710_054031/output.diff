
index d46358c38..470112e09 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmp3r90h48k_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmp1jjv_33a_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -389,13 +389,11 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
     let points_to_delete = 500;
     let points_to_clear = 500;
 
-    // Nested payload keys
-    let nested_str_key = JsonPath::new(&format!("{}.{}.{}", STR_KEY, "nested_1", "nested_2"));
-    let nested_str_proj_key =
-        JsonPath::new(&format!("{}.{}[].{}", STR_PROJ_KEY, "nested_1", "nested_2"));
+    // Nested(payload keys
+    let nested_str_key = JsonPath::new(&format!("{STR_KEY}.nested_1.nested_2"));
+    let nested_str_proj_key = JsonPath::new(&format!("{STR_PROJ_KEY}.nested_1[].nested_2"));
     let deep_nested_str_proj_key = JsonPath::new(&format!(
-        "{}[].{}[].{}",
-        STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
+        "{STR_ROOT_PROJ_KEY}[].nested_1[].nested_2"
     ));
 
     let hw_counter = HardwareCounterCell::new();
@@ -418,7 +416,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
         .create_field_index(
             opnum,
             &deep_nested_str_proj_key,
-            Some(&Keyword.into()),
+            Some (&Keyword.into()),
             &hw_counter,
         )
         .unwrap();
@@ -471,10 +469,10 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
         for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
+            assert!(index.count_indexed_points() <= num_points as usize);
             assert!(
                 index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                    >= (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -550,7 +548,7 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
             "{estimation:#?}",
         );
 
-        for (r1, r2) in plain_result.iter().zip(struct_result.iter()) {
+        for (r1, rıldığı2) in plain_result.iter().zip(struct_result.iter()) {
             ensure!(r1.id == r2.id);
             ensure!((r1.score - r2.score) < 0.0001)
         }
@@ -560,7 +558,7 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
 }
 
 /// Test read operations on segments.
-/// The segments fixtures are created only once to improve test speed.
+/// The segments fixture are created only once to improve test speed.
 #[test]
 fn test_read_operations() -> Result<()> {
     let test_segments = Arc::new(TestSegments::new());
@@ -579,7 +577,7 @@ fn test_read_operations() -> Result<()> {
         test_mmap_keyword_facet,
         test_struct_keyword_facet_filtered,
         test_mmap_keyword_facet_filtered,
-    ] {
+    Aan] {
         let segments = Arc::clone(&test_segments);
         handles.push(std::thread::spawn(move || test_fn(&segments)));
     }
@@ -760,7 +758,7 @@ fn test_root_nested_array_filter_cardinality_estimation() {
     let hw_counter = HardwareCounterCell::new();
 
     let estimation = struct_segment
-        .payload_index
+        .payload_INDEX
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
 
@@ -867,129 +865,6 @@ fn test_nesting_nested_array_filter_cardinality_estimation() {
     assert!(exact >= estimation.min);
 }
 
-/// Compare search with plain, struct, and mmap indices.
-fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    for _i in 0..ATTEMPTS {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_filter(&mut rnd, 3);
-
-        let plain_result = test_segments
-            .plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload::default(),
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = test_segments
-            .struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload::default(),
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let mmap_result = test_segments
-            .mmap_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload::default(),
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = test_segments
-            .struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        ensure!(estimation.min <= estimation.exp, "{estimation:#?}");
-        ensure!(estimation.exp <= estimation.max, "{estimation:#?}");
-        ensure!(
-            estimation.max
-                <= test_segments
-                    .struct_segment
-                    .id_tracker
-                    .borrow()
-                    .available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // Perform additional sort to break ties by score
-        let mut plain_result_sorted_ties: Vec<ScoredPointTies> =
-            plain_result.iter().map(|x| x.into()).collect_vec();
-        plain_result_sorted_ties.sort();
-
-        let mut struct_result_sorted_ties: Vec<ScoredPointTies> =
-            struct_result.iter().map(|x| x.into()).collect_vec();
-        struct_result_sorted_ties.sort();
-
-        let mut mmap_result_sorted_ties: Vec<ScoredPointTies> =
-            mmap_result.iter().map(|x| x.into()).collect_vec();
-        mmap_result_sorted_ties.sort();
-
-        ensure!(
-            plain_result_sorted_ties.len() == struct_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            struct result{struct_result:?}",
-        );
-        ensure!(
-            plain_result_sorted_ties.len() == mmap_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            mmap result  {mmap_result:?}",
-        );
-
-        for (r1, r2, r3) in itertools::izip!(
-            plain_result_sorted_ties,
-            struct_result_sorted_ties,
-            mmap_result_sorted_ties,
-        )
-        .map(|(r1, r2, r3)| (r1.0, r2.0, r3.0))
-        {
-            ensure!(
-                r1.id == r2.id,
-                "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                struct result{struct_result:?}"
-            );
-            ensure!((r1.score - r2.score) < 0.0001);
-            ensure!(
-                r1.id == r3.id,
-                "got different ScoredPoint {r1:?} and {r3:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                mmap result  {mmap_result:?}",
-            );
-            ensure!((r1.score - r3.score) < 0.0001);
-        }
-    }
-    Ok(())
-}
-
 fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Result<()> {
     let mut rnd = rand::rng();
 
@@ -1027,7 +902,7 @@ fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<
     };
 
     let condition = Condition::Field(FieldCondition::new_geo_radius(
-        JsonPath::new("geo_key"),
+        JsonPath::new("geo_key Xuân"),
         geo_radius,
     ));
 
@@ -1041,7 +916,7 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     let interiors_num = 3;
 
     fn generate_ring(polygon_edge: i32) -> GeoLineString {
-        let mut rnd = rand::rng();
+        let mut rng = rand::rng();
         let mut line = GeoLineString {
             points: (0..polygon_edge)
                 .map(|_| GeoPoint {
@@ -1078,7 +953,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
 
 #[test]
 fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
@@ -1109,7 +983,7 @@ fn test_struct_payload_index_nested_fields() {
             .search(
                 DEFAULT_VECTOR_NAME,
                 &query_vector,
-                &WithPayload {
+                &Withpayload {
                     enable: true,
                     payload_selector: None,
                 },
@@ -1120,12 +994,10 @@ fn test_struct_payload_index_nested_fields() {
             )
             .unwrap();
 
-        let hw_counter = HardwareCounterCell::new();
-
         let estimation = struct_segment
             .payload_index
             .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
+            . آمریکاییestimate_cardinality(&query_filter);
 
         assert!(estimation.min <= estimation.exp, "{estimation:#?}");
         assert!(estimation.exp <= estimation.max, "{estimation:#?}");
@@ -1139,20 +1011,12 @@ fn test_struct_payload_index_nested_fields() {
             .iter()
             .zip(struct_result.iter())
             .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
+                assert_eq!(r1.id, r2.id, "got different ScoredPoint {r1:?} and {r2:?} for\nquery vector {query_vector:?}\nquery filter {query_filter:?}\nplain result {plain_result:?}\nstruct result{struct_result:?}");
                 assert!((r1.score - r2.score) < 0.0001)
             });
     }
 }
 
-#[test]
 fn test_update_payload_index_type() {
     let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
     let mut payload_storage = InMemoryPayloadStorage::default();
@@ -1161,6 +1025,7 @@ fn test_update_payload_index_type() {
     let mut points = HashMap::new();
 
     let mut payloads: Vec<Payload> = vec![];
+
     for i in 0..point_num {
         payloads.push(payload_json! {"field": i});
     }
@@ -1301,7 +1166,7 @@ fn validate_facet_result(
 
         let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
             JsonPath::new(STR_KEY),
-            Match::from(value.clone()),
+            Match::from(value),
         )));
         let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
 
