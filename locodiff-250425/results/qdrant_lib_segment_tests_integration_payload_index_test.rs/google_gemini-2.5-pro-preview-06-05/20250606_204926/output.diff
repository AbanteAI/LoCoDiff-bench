
index d46358c38..8af75f7fd 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmp6jbe3s2d_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmp9dsq13fr_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -19,21 +19,21 @@ use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
     KeywordIndexType, TextIndexParams, TextIndexType,
 };
-use segment::data_types::vectors::{DEFAULT_VECTOR_NAME, only_default_vector};
+use segment::data_types::vectors::{only_default_vector, DEFAULT_VECTOR_NAME};
 use segment::entry::entry_point::SegmentEntry;
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::fixtures::payload_fixtures::{
-    FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE, LON_RANGE, STR_KEY,
-    STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY, generate_diverse_nested_payload,
-    generate_diverse_payload, random_filter, random_nested_filter, random_vector,
+    generate_diverse_nested_payload, generate_diverse_payload, random_filter, random_nested_filter,
+    random_vector, FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE,
+    LON_RANGE, STR_KEY, STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY,
 };
-use segment::index::PayloadIndex;
 use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
+use segment::index::PayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
-use segment::payload_storage::PayloadStorage;
 use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
+use segment::payload_storage::PayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
@@ -473,8 +473,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
         for index in indexes {
             assert!(index.count_indexed_points() < num_points as usize);
             assert!(
-                index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                index.count_indexed_points() > (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -1221,7 +1220,7 @@ fn test_update_payload_index_type() {
 fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     let keywords: IndexSet<String, FnvBuildHasher> = ["value1", "value2"]
         .iter()
-        .map(|&i| i.to_string())
+        .map(|i| i.to_string())
         .collect();
     let any_match = FieldCondition::new_match(
         JsonPath::new(STR_KEY),
@@ -1325,12 +1324,10 @@ fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
 
     // Plain segment should fail, as it does not have a keyword index
-    assert!(
-        test_segments
-            .plain_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .is_err(),
-    );
+    assert!(test_segments
+        .plain_segment
+        .facet(&request, &Default::default(), &Default::default())
+        .is_err());
 
     // Struct segment
     let facet_hits = test_segments
