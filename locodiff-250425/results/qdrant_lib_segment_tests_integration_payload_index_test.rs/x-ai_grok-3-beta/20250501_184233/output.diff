
index d46358c3..c1b6a40a 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmp_e79knq2_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpmwq03yk7_actual.txt	
@@ -1,8 +1,9 @@
+use std::cmp::Reverse;
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -473,8 +474,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
         for index in indexes {
             assert!(index.count_indexed_points() < num_points as usize);
             assert!(
-                index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                index.count_indexed_points() > (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -770,7 +770,7 @@ fn test_root_nested_array_filter_cardinality_estimation() {
     let primary_clause = estimation.primary_clauses.first().unwrap();
 
     let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
+        JsonPath::new(&format!("{}[].{}", STR_ROOT_PROJ_KEY, nested_key)), // full key expected
         "some value".to_owned().into(),
     );
 
@@ -867,7 +867,6 @@ fn test_nesting_nested_array_filter_cardinality_estimation() {
     assert!(exact >= estimation.min);
 }
 
-/// Compare search with plain, struct, and mmap indices.
 fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
     let mut rnd = rand::rng();
 
@@ -1078,7 +1077,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
 
 #[test]
 fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
