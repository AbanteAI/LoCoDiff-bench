--- qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual)@@ -1,8 +1,8 @@ use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
+use std::sync::atomic::AtomicBool;
 use std::sync::Arc;
-use std::sync::atomic::AtomicBool;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -85,9 +85,9 @@         let config = Self::make_simple_config(true);
 
         let mut plain_segment =
-            build_segment(&base_dir.path().join("plain"), &config, true).unwrap();
+            build_segment(&base_dir.path().join("plain"), &config).unwrap();
         let mut struct_segment =
-            build_segment(&base_dir.path().join("struct"), &config, true).unwrap();
+            build_segment(&base_dir.path().join("struct"), &config).unwrap();
 
         let num_points = 3000;
         let points_to_delete = 500;
@@ -259,7 +259,7 @@                         Indexes::Hnsw(HnswConfig::default())
                     },
                     quantization_config: None,
-                    multivector_config: None,
+                    multivec_config: None,
                     datatype: None,
                 },
             )]),
@@ -809,10 +809,8 @@ 
     // rely on test data from `build_test_segments_nested_payload`
     let nested_match_key = "nested_2";
-    let nested_match = FieldCondition::new_match(
-        JsonPath::new(nested_match_key),
-        "some value".to_owned().into(),
-    );
+    let nested_match =
+        FieldCondition::new_match(JsonPath::new(nested_match_key), "some value".to_owned().into());
     let filter = Filter::new_must(Condition::new_nested(
         JsonPath::new(STR_ROOT_PROJ_KEY),
         Filter::new_must(Condition::new_nested(
@@ -990,92 +988,6 @@     Ok(())
 }
 
-fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    let geo_bbox = GeoBoundingBox {
-        top_left: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-        bottom_right: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_bounding_box(
-        JsonPath::new("geo_key"),
-        geo_bbox,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    let r_meters = rnd.random_range(1.0..10000.0);
-    let geo_radius = GeoRadius {
-        center: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
-        },
-        radius: r_meters,
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_radius(
-        JsonPath::new("geo_key"),
-        geo_radius,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result<()> {
-    let polygon_edge = 5;
-    let interiors_num = 3;
-
-    fn generate_ring(polygon_edge: i32) -> GeoLineString {
-        let mut rnd = rand::rng();
-        let mut line = GeoLineString {
-            points: (0..polygon_edge)
-                .map(|_| GeoPoint {
-                    lon: rnd.random_range(LON_RANGE),
-                    lat: rnd.random_range(LAT_RANGE),
-                })
-                .collect(),
-        };
-        line.points.push(line.points[0]); // add last point that is identical to the first
-        line
-    }
-
-    let exterior = generate_ring(polygon_edge);
-    let interiors = Some(
-        std::iter::repeat_with(|| generate_ring(polygon_edge))
-            .take(interiors_num)
-            .collect(),
-    );
-
-    let geo_polygon = GeoPolygon {
-        exterior,
-        interiors,
-    };
-
-    let condition = Condition::Field(FieldCondition::new_geo_polygon(
-        JsonPath::new("geo_key"),
-        geo_polygon,
-    ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
 #[test]
 fn test_struct_payload_index_nested_fields() {
     // Compare search with plain and struct indexes
