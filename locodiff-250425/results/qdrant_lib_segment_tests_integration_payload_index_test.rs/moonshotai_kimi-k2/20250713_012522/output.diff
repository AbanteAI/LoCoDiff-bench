
index d46358c38..def261542 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpaet6i7_j_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpc8brbwve_actual.txt	
@@ -134,7 +134,12 @@ impl TestSegments {
             )
             .unwrap();
         struct_segment
-            .create_field_index(opnum, &JsonPath::new(INT_KEY), None, &hw_counter)
+            .create_field_index(
+                opnum,
+                &JsonPath::new(INT_KEY),
+                None,
+                &hw_counter,
+            )
             .unwrap();
         struct_segment
             .create_field_index(
@@ -295,7 +300,7 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Keyword(
                     KeywordIndexParams {
                         r#type: KeywordIndexType::Keyword,
-                        is_tenant: None,
+                        is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
@@ -402,7 +407,12 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     let mut opnum = 0;
     struct_segment
-        .create_field_index(opnum, &nested_str_key, Some(&Keyword.into()), &hw_counter)
+        .create_field_index(
+            opnum,
+            &nested_str_key,
+            Some(&Keyword.into()),
+            &hw_counter,
+        )
         .unwrap();
 
     struct_segment
@@ -474,7 +484,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
             assert!(index.count_indexed_points() < num_points as usize);
             assert!(
                 index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                    >= (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -598,20 +608,19 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
         },
     }));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let estimation_struct = test_segments
         .struct_segment
         .payload_index
         .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
+        .estimate_cardinality(&filter);
 
     let estimation_plain = test_segments
         .plain_segment
         .payload_index
         .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
+        .estimate_cardinality(&filter);
 
+    let hw_counter = HardwareCounterCell::new();
     let plain_result = test_segments
         .plain_segment
         .payload_index
@@ -1076,82 +1085,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let mut rnd = rand::rng();
-
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
 #[test]
 fn test_update_payload_index_type() {
     let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -1250,8 +1183,6 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
         }
     }
 
-    let hw_counter = HardwareCounterCell::new();
-
     let payload_index = test_segments.struct_segment.payload_index.borrow();
     let filter_context = payload_index.filter_context(&filter, &hw_counter);
     let exact = test_segments
