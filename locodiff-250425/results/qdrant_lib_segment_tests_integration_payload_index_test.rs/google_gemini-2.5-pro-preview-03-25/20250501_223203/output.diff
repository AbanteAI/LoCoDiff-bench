
index d46358c3..2a43fe48 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpeyrd0rfu_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmp5tf2d3q3_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -273,6 +273,7 @@ impl TestSegments {
     fn make_mmap_segment(path: &Path, plain_segment: &Segment) -> Segment {
         let stopped = AtomicBool::new(false);
         create_dir(path).unwrap();
+        let hw_counter = HardwareCounterCell::new();
 
         let mut builder = SegmentBuilder::new(
             path,
@@ -283,7 +284,6 @@ impl TestSegments {
 
         builder.update(&[plain_segment], &stopped).unwrap();
         let permit = ResourcePermit::dummy(1);
-        let hw_counter = HardwareCounterCell::new();
 
         let mut segment = builder.build(permit, &stopped, &hw_counter).unwrap();
         let opnum = segment.version() + 1;
@@ -471,10 +471,10 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
         for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
+            assert!(index.count_indexed_points() <= num_points as usize);
             assert!(
                 index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                    >= (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -742,7 +742,7 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
 }
 
 #[test]
-fn test_root_nested_array_filter_cardinality_estimation() {
+fn test_root_nested_array_filter_cardinality_estimation() -> Result<()> {
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
@@ -796,12 +796,14 @@ fn test_root_nested_array_filter_cardinality_estimation() {
     eprintln!("exact = {exact:#?}");
     eprintln!("estimation = {estimation:#?}");
 
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
+    ensure!(exact <= estimation.max);
+    ensure!(exact >= estimation.min);
+
+    Ok(())
 }
 
 #[test]
-fn test_nesting_nested_array_filter_cardinality_estimation() {
+fn test_nesting_nested_array_filter_cardinality_estimation() -> Result<()> {
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
@@ -863,8 +865,88 @@ fn test_nesting_nested_array_filter_cardinality_estimation() {
     eprintln!("exact = {exact:#?}");
     eprintln!("estimation = {estimation:#?}");
 
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
+    ensure!(exact <= estimation.max);
+    ensure!(exact >= estimation.min);
+
+    Ok(())
+}
+
+#[test]
+fn test_struct_payload_index_nested_fields() -> Result<()> {
+    // Compare search with plain and struct indexes
+    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
+    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
+
+    let mut rnd = rand::rng();
+
+    let (struct_segment, plain_segment) =
+        build_test_segments_nested_payload(dir1.path(), dir2.path());
+
+    let attempts = 100;
+    for _i in 0..attempts {
+        let query_vector = random_vector(&mut rnd, DIM).into();
+        let query_filter = random_nested_filter(&mut rnd);
+        let plain_result = plain_segment
+            .search(
+                DEFAULT_VECTOR_NAME,
+                &query_vector,
+                &WithPayload {
+                    enable: true,
+                    payload_selector: None,
+                },
+                &false.into(),
+                Some(&query_filter),
+                5,
+                None,
+            )
+            .unwrap();
+        let struct_result = struct_segment
+            .search(
+                DEFAULT_VECTOR_NAME,
+                &query_vector,
+                &WithPayload {
+                    enable: true,
+                    payload_selector: None,
+                },
+                &false.into(),
+                Some(&query_filter),
+                5,
+                None,
+            )
+            .unwrap();
+
+        let hw_counter = HardwareCounterCell::new();
+
+        let estimation = struct_segment
+            .payload_index
+            .borrow()
+            .estimate_cardinality(&query_filter, &hw_counter);
+
+        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
+        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
+        assert!(
+            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
+            "{estimation:#?}",
+        );
+
+        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
+        plain_result
+            .iter()
+            .zip(struct_result.iter())
+            .for_each(|(r1, r2)| {
+                ensure!(
+                    r1.id == r2.id,
+                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
+                    query vector {query_vector:?}\n\
+                    query filter {query_filter:?}\n\
+                    plain result {plain_result:?}\n\
+                    struct result{struct_result:?}"
+                )
+                .unwrap();
+                ensure!((r1.score - r2.score) < 0.0001).unwrap()
+            });
+    }
+    Ok(())
 }
 
 /// Compare search with plain, struct, and mmap indices.
@@ -1076,82 +1158,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let mut rnd = rand::rng();
-
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
 #[test]
 fn test_update_payload_index_type() {
     let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -1170,7 +1176,7 @@ fn test_update_payload_index_type() {
     for (idx, payload) in payloads.into_iter().enumerate() {
         points.insert(idx, payload.clone());
         payload_storage
-            .set(idx as PointOffsetType, &payload, &hw_counter)
+            .assign(idx as PointOffsetType, &payload, &hw_counter)
             .unwrap();
     }
 
@@ -1324,18 +1330,20 @@ fn validate_facet_result(
 fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
 
+    let hw_counter = HardwareCounterCell::new();
+
     // Plain segment should fail, as it does not have a keyword index
     assert!(
         test_segments
             .plain_segment
-            .facet(&request, &Default::default(), &Default::default())
+            .facet(&request, &Default::default(), &hw_counter)
             .is_err(),
     );
 
     // Struct segment
     let facet_hits = test_segments
         .struct_segment
-        .facet(&request, &Default::default(), &Default::default())
+        .facet(&request, &Default::default(), &hw_counter)
         .unwrap();
 
     validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
@@ -1344,9 +1352,11 @@ fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
 fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
 
+    let hw_counter = HardwareCounterCell::new();
+
     let facet_hits = test_segments
         .mmap_segment
-        .facet(&request, &Default::default(), &Default::default())
+        .facet(&request, &Default::default(), &hw_counter)
         .unwrap();
 
     validate_facet_result(&test_segments.mmap_segment, facet_hits, None).context(here!())
@@ -1355,13 +1365,15 @@ fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
 fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
 
+    let hw_counter = HardwareCounterCell::new();
+
     for _ in 0..ATTEMPTS {
         let filter = random_filter(&mut rand::rng(), 3);
         request.filter = Some(filter.clone());
 
         let facet_hits = test_segments
             .struct_segment
-            .facet(&request, &Default::default(), &Default::default())
+            .facet(&request, &Default::default(), &hw_counter)
             .unwrap();
 
         validate_facet_result(&test_segments.struct_segment, facet_hits, Some(filter))
@@ -1373,13 +1385,15 @@ fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()
 fn test_mmap_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
 
+    let hw_counter = HardwareCounterCell::new();
+
     for _ in 0..ATTEMPTS {
         let filter = random_filter(&mut rand::rng(), 3);
         request.filter = Some(filter.clone());
 
         let facet_hits = test_segments
             .mmap_segment
-            .facet(&request, &Default::default(), &Default::default())
+            .facet(&request, &Default::default(), &hw_counter)
             .unwrap();
 
         validate_facet_result(&test_segments.mmap_segment, facet_hits, Some(filter))
