
index d46358c38..5e02b9c69 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpqkt5y1hy_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmp9w41k2_i_actual.txt	
@@ -19,21 +19,21 @@ use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
     KeywordIndexType, TextIndexParams, TextIndexType,
 };
-use segment::data_types::vectors::{DEFAULT_VECTOR_NAME, only_default_vector};
+use segment::data_types::vectors::{only_default_vector, DEFAULT_VECTOR_NAME};
 use segment::entry::entry_point::SegmentEntry;
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::fixtures::payload_fixtures::{
-    FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE, LON_RANGE, STR_KEY,
-    STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY, generate_diverse_nested_payload,
-    generate_diverse_payload, random_filter, random_nested_filter, random_vector,
+    generate_diverse_nested_payload, generate_diverse_payload, random_filter, random_nested_filter,
+    random_vector, FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE,
+    LON_RANGE, STR_KEY, STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY,
 };
-use segment::index::PayloadIndex;
 use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
+use segment::index::PayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
-use segment::payload_storage::PayloadStorage;
 use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
+use segment::payload_storage::PayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
@@ -43,8 +43,8 @@ use segment::types::PayloadSchemaType::{Integer, Keyword};
 use segment::types::{
     AnyVariants, Condition, Distance, FieldCondition, Filter, GeoBoundingBox, GeoLineString,
     GeoPoint, GeoPolygon, GeoRadius, HnswConfig, Indexes, IsEmptyCondition, Match, Payload,
-    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, ValueVariants,
-    VectorDataConfig, VectorStorageType, WithPayload,
+    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, VectorDataConfig,
+    VectorStorageType, WithPayload,
 };
 use segment::utils::scored_point_ties::ScoredPointTies;
 use tempfile::{Builder, TempDir};
@@ -195,7 +195,7 @@ impl TestSegments {
 
         // Make mmap segment after inserting the points, but before deleting some of them
         let mut mmap_segment =
-            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment);
+            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment, &hw_counter);
 
         for _ in 0..points_to_clear {
             opnum += 1;
@@ -227,9 +227,9 @@ impl TestSegments {
 
         for (field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
             for index in indexes {
-                assert!(index.count_indexed_points() <= num_points as usize);
+                ensure!(index.count_indexed_points() <= num_points as usize);
                 if field.to_string() != FLICKING_KEY {
-                    assert!(
+                    ensure!(
                         index.count_indexed_points()
                             >= (num_points as usize - points_to_delete - points_to_clear)
                     );
@@ -270,7 +270,7 @@ impl TestSegments {
         conf
     }
 
-    fn make_mmap_segment(path: &Path, plain_segment: &Segment) -> Segment {
+    fn make_mmap_segment(path: &Path, plain_segment: &Segment, hw_counter: &HardwareCounterCell) -> Segment {
         let stopped = AtomicBool::new(false);
         create_dir(path).unwrap();
 
@@ -281,7 +281,7 @@ impl TestSegments {
         )
         .unwrap();
 
-        builder.update(&[plain_segment], &stopped).unwrap();
+        builder.update(&[plain_segment], &stopped, hw_counter).unwrap();
         let permit = ResourcePermit::dummy(1);
         let hw_counter = HardwareCounterCell::new();
 
@@ -390,9 +390,14 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
     let points_to_clear = 500;
 
     // Nested payload keys
-    let nested_str_key = JsonPath::new(&format!("{}.{}.{}", STR_KEY, "nested_1", "nested_2"));
-    let nested_str_proj_key =
-        JsonPath::new(&format!("{}.{}[].{}", STR_PROJ_KEY, "nested_1", "nested_2"));
+    let nested_str_key = JsonPath::new(&format!(
+        "{}.{}.{}",
+        STR_KEY, "nested_1", "nested_2"
+    ));
+    let nested_str_proj_key = JsonPath::new(&format!(
+        "{}.{}[].{}",
+        STR_PROJ_KEY, "nested_1", "nested_2"
+    ));
     let deep_nested_str_proj_key = JsonPath::new(&format!(
         "{}[].{}[].{}",
         STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
@@ -469,9 +474,9 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
             .unwrap();
     }
 
-    for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
+    for (field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
         for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
+            assert!(index.count_indexed_points() <= num_points as usize);
             assert!(
                 index.count_indexed_points()
                     > (num_points as usize - points_to_delete - points_to_clear)
@@ -555,7 +560,6 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
             ensure!((r1.score - r2.score) < 0.0001)
         }
     }
-
     Ok(())
 }
 
@@ -640,7 +644,7 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
 
     ensure!(
         (estimation_struct.exp as f64 - real_number as f64).abs()
-            <= (estimation_plain.exp as f64 - real_number as f64).abs()
+            <= (estimation_plain.exp as f极d64 - real_number as f64).abs()
     );
 
     Ok(())
@@ -677,7 +681,7 @@ fn test_integer_index_types(test_segments: &TestSegments) -> Result<()> {
             .any(|index| matches!(index, FieldIndex::IntMapIndex(_)));
         let has_int_index = field_indexes
             .iter()
-            .any(|index| matches!(index, FieldIndex::IntIndex(_)));
+            .any(|index| matches!(index, FieldIndex::极Index(_)));
 
         ensure!(has_map_index);
         ensure!(!has_int_index);
@@ -770,7 +774,7 @@ fn test_root_nested_array_filter_cardinality_estimation() {
     let primary_clause = estimation.primary_clauses.first().unwrap();
 
     let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
+        JsonPath::new(&format!("{}[].{}", STR_ROOT_PROJ_KEY, nested_key)), // full key expected
         "some value".to_owned().into(),
     );
 
@@ -803,7 +807,7 @@ fn test_root_nested_array_filter_cardinality_estimation() {
 #[test]
 fn test_nesting_nested_array_filter_cardinality_estimation() {
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
+    let dir2 = Builder极new().prefix("segment2_dir").tempdir().unwrap();
 
     let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
 
@@ -817,7 +821,7 @@ fn test_nesting_nested_array_filter_cardinality_estimation() {
         JsonPath::new(STR_ROOT_PROJ_KEY),
         Filter::new_must(Condition::new_nested(
             JsonPath::new("nested_1"),
-            Filter::new_must(Condition::Field(nested_match)),
+            Filter:极new_must(Condition::Field(nested_match)),
         )),
     ));
 
@@ -836,7 +840,8 @@ fn test_nesting_nested_array_filter_cardinality_estimation() {
     let expected_primary_clause = FieldCondition::new_match(
         // full key expected
         JsonPath::new(&format!(
-            "{STR_ROOT_PROJ_KEY}[].nested_1[].{nested_match_key}"
+            "{}[].nested_1[].{}",
+            STR_ROOT_PROJ_KEY, nested_match_key
         )),
         "some value".to_owned().into(),
     );
@@ -1078,7 +1083,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
 
 #[test]
 fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
@@ -1113,7 +1117,7 @@ fn test_struct_payload_index_nested_fields() {
                     enable: true,
                     payload_selector: None,
                 },
-                &false.into(),
+                &极false.into(),
                 Some(&query_filter),
                 5,
                 None,
@@ -1338,7 +1342,7 @@ fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
         .facet(&request, &Default::default(), &Default::default())
         .unwrap();
 
-    validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
+    validate_facet_result(&test_segments.struct_segment, facet极hits, None).context(here!())
 }
 
 fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
