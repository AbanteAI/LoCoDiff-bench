
index d46358c3..dcf350df 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpmr6_kqdc_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpznwixmpy_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -32,8 +32,8 @@ use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
+use segment::payload_storage::InMemoryPayloadStorage;
 use segment::payload_storage::PayloadStorage;
-use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
@@ -227,9 +227,9 @@ impl TestSegments {
 
         for (field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
             for index in indexes {
-                assert!(index.count_indexed_points() <= num_points as usize);
+                ensure!(index.count_indexed_points() <= num_points as usize);
                 if field.to_string() != FLICKING_KEY {
-                    assert!(
+                    ensure!(
                         index.count_indexed_points()
                             >= (num_points as usize - points_to_delete - points_to_clear)
                     );
@@ -280,10 +280,10 @@ impl TestSegments {
             &Self::make_simple_config(false),
         )
         .unwrap();
+        let hw_counter = HardwareCounterCell::new();
 
         builder.update(&[plain_segment], &stopped).unwrap();
         let permit = ResourcePermit::dummy(1);
-        let hw_counter = HardwareCounterCell::new();
 
         let mut segment = builder.build(permit, &stopped, &hw_counter).unwrap();
         let opnum = segment.version() + 1;
@@ -390,12 +390,11 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
     let points_to_clear = 500;
 
     // Nested payload keys
-    let nested_str_key = JsonPath::new(&format!("{}.{}.{}", STR_KEY, "nested_1", "nested_2"));
+    let nested_str_key = JsonPath::new(&format!("{STR_KEY}.nested_1.nested_2"));
     let nested_str_proj_key =
-        JsonPath::new(&format!("{}.{}[].{}", STR_PROJ_KEY, "nested_1", "nested_2"));
+        JsonPath::new(&format!("{STR_PROJ_KEY}.nested_1[].nested_2"));
     let deep_nested_str_proj_key = JsonPath::new(&format!(
-        "{}[].{}[].{}",
-        STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
+        "{STR_ROOT_PROJ_KEY}[].nested_1[].nested_2"
     ));
 
     let hw_counter = HardwareCounterCell::new();
@@ -471,10 +470,10 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
         for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
-            assert!(
+            ensure!(index.count_indexed_points() <= num_points as usize);
+            ensure!(
                 index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
+                    >= (num_points as usize - points_to_delete - points_to_clear)
             );
         }
     }
@@ -770,7 +769,8 @@ fn test_root_nested_array_filter_cardinality_estimation() {
     let primary_clause = estimation.primary_clauses.first().unwrap();
 
     let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
+        // full key expected
+        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")),
         "some value".to_owned().into(),
     );
 
@@ -1078,7 +1078,6 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
 
 #[test]
 fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
     let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
     let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
 
