
index d46358c3..2cd7ba00 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpjncgbjuf_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpc084eqv1_actual.txt	
@@ -12,8 +12,8 @@ use common::types::PointOffsetType;
 use fnv::FnvBuildHasher;
 use indexmap::IndexSet;
 use itertools::Itertools;
-use rand::prelude::StdRng;
 use rand::{Rng, SeedableRng};
+use rand::prelude::StdRng;
 use segment::data_types::facets::{FacetParams, FacetValue};
 use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
@@ -27,28 +27,30 @@ use segment::fixtures::payload_fixtures::{
     STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY, generate_diverse_nested_payload,
     generate_diverse_payload, random_filter, random_nested_filter, random_vector,
 };
-use segment::index::PayloadIndex;
 use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
-use segment::payload_storage::PayloadStorage;
 use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
+use segment::payload_storage::PayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
-use segment::segment_constructor::simple_segment_constructor::build_simple_segment;
 use segment::types::PayloadFieldSchema::{FieldParams, FieldType};
 use segment::types::PayloadSchemaType::{Integer, Keyword};
 use segment::types::{
     AnyVariants, Condition, Distance, FieldCondition, Filter, GeoBoundingBox, GeoLineString,
     GeoPoint, GeoPolygon, GeoRadius, HnswConfig, Indexes, IsEmptyCondition, Match, Payload,
-    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, ValueVariants,
-    VectorDataConfig, VectorStorageType, WithPayload,
+    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, VectorDataConfig,
+    VectorStorageType, WithPayload,
 };
+use segment::index::PayloadIndex;
 use segment::utils::scored_point_ties::ScoredPointTies;
 use tempfile::{Builder, TempDir};
 
+const DIM: usize = 5;
+const ATTEMPTS: usize = 20;
+
 macro_rules! here {
     () => {
         format!("at {}:{}", file!(), line!())
@@ -64,9 +66,6 @@ macro_rules! ensure {
     };
 }
 
-const DIM: usize = 5;
-const ATTEMPTS: usize = 20;
-
 struct TestSegments {
     _base_dir: TempDir,
     struct_segment: Segment,
@@ -77,9 +76,7 @@ struct TestSegments {
 impl TestSegments {
     fn new() -> Self {
         let base_dir = Builder::new().prefix("test_segments").tempdir().unwrap();
-
         let hw_counter = HardwareCounterCell::new();
-
         let mut rnd = StdRng::seed_from_u64(42);
 
         let config = Self::make_simple_config(true);
@@ -95,12 +92,7 @@ impl TestSegments {
 
         let mut opnum = 0;
         struct_segment
-            .create_field_index(
-                opnum,
-                &JsonPath::new(INT_KEY_2),
-                Some(&Integer.into()),
-                &hw_counter,
-            )
+            .create_field_index(opnum, &JsonPath::new(INT_KEY_2), Some(&Integer.into()), &hw_counter)
             .unwrap();
 
         opnum += 1;
@@ -193,9 +185,8 @@ impl TestSegments {
             )
             .unwrap();
 
-        // Make mmap segment after inserting the points, but before deleting some of them
         let mut mmap_segment =
-            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment);
+            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment, &hw_counter);
 
         for _ in 0..points_to_clear {
             opnum += 1;
@@ -237,7 +228,7 @@ impl TestSegments {
             }
         }
 
-        Self {
+        TestSegments {
             _base_dir: base_dir,
             struct_segment,
             plain_segment,
@@ -270,7 +261,11 @@ impl TestSegments {
         conf
     }
 
-    fn make_mmap_segment(path: &Path, plain_segment: &Segment) -> Segment {
+    fn make_mmap_segment(
+        path: &Path,
+        plain_segment: &Segment,
+        hw_counter: &HardwareCounterCell,
+    ) -> Segment {
         let stopped = AtomicBool::new(false);
         create_dir(path).unwrap();
 
@@ -280,12 +275,10 @@ impl TestSegments {
             &Self::make_simple_config(false),
         )
         .unwrap();
-
         builder.update(&[plain_segment], &stopped).unwrap();
         let permit = ResourcePermit::dummy(1);
-        let hw_counter = HardwareCounterCell::new();
 
-        let mut segment = builder.build(permit, &stopped, &hw_counter).unwrap();
+        let mut segment = builder.build(permit, &stopped, hw_counter).unwrap();
         let opnum = segment.version() + 1;
 
         segment
@@ -295,11 +288,11 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Keyword(
                     KeywordIndexParams {
                         r#type: KeywordIndexType::Keyword,
-                        is_tenant: None,
+                        is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -315,7 +308,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -331,7 +324,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -347,7 +340,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -359,7 +352,7 @@ impl TestSegments {
                     is_principal: None,
                     on_disk: Some(true),
                 }))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -371,7 +364,7 @@ impl TestSegments {
                     on_disk: Some(true),
                     ..Default::default()
                 }))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
 
@@ -391,20 +384,20 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     // Nested payload keys
     let nested_str_key = JsonPath::new(&format!("{}.{}.{}", STR_KEY, "nested_1", "nested_2"));
-    let nested_str_proj_key =
-        JsonPath::new(&format!("{}.{}[].{}", STR_PROJ_KEY, "nested_1", "nested_2"));
+    let nested_str_proj_key = JsonPath::new(&format!(
+        "{}.{}[].{}",
+        STR_PROJ_KEY, "nested_1", "nested_2"
+    ));
     let deep_nested_str_proj_key = JsonPath::new(&format!(
         "{}[].{}[].{}",
         STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
     ));
 
     let hw_counter = HardwareCounterCell::new();
-
     let mut opnum = 0;
     struct_segment
         .create_field_index(opnum, &nested_str_key, Some(&Keyword.into()), &hw_counter)
         .unwrap();
-
     struct_segment
         .create_field_index(
             opnum,
@@ -413,7 +406,6 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
             &hw_counter,
         )
         .unwrap();
-
     struct_segment
         .create_field_index(
             opnum,
@@ -469,23 +461,12 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
             .unwrap();
     }
 
-    for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
-        for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
-            assert!(
-                index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
-            );
-        }
-    }
-
     (struct_segment, plain_segment)
 }
 
 fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Result<()> {
     let mut rnd = rand::rng();
-
-    for _i in 0..ATTEMPTS {
+    for _ in 0..ATTEMPTS {
         let query = random_vector(&mut rnd, DIM).into();
         let plain_result = test_segments
             .plain_segment
@@ -532,6 +513,7 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
             )
             .unwrap();
 
+        let hw_counter = HardwareCounterCell::new();
         let estimation = test_segments
             .struct_segment
             .payload_index
@@ -555,12 +537,9 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
             ensure!((r1.score - r2.score) < 0.0001)
         }
     }
-
     Ok(())
 }
 
-/// Test read operations on segments.
-/// The segments fixtures are created only once to improve test speed.
 #[test]
 fn test_read_operations() -> Result<()> {
     let test_segments = Arc::new(TestSegments::new());
@@ -592,14 +571,13 @@ fn test_read_operations() -> Result<()> {
 }
 
 fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
     let filter = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
         is_empty: PayloadField {
             key: JsonPath::new(FLICKING_KEY),
         },
     }));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let estimation_struct = test_segments
         .struct_segment
         .payload_index
@@ -619,7 +597,6 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
         .query_points(&filter, &hw_counter);
 
     let real_number = plain_result.len();
-
     let struct_result = test_segments
         .struct_segment
         .payload_index
@@ -627,17 +604,14 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
         .query_points(&filter, &hw_counter);
 
     ensure!(plain_result == struct_result);
-
     eprintln!("estimation_plain = {estimation_plain:#?}");
     eprintln!("estimation_struct = {estimation_struct:#?}");
     eprintln!("real_number = {real_number:#?}");
 
     ensure!(estimation_plain.max >= real_number);
     ensure!(estimation_plain.min <= real_number);
-
     ensure!(estimation_struct.max >= real_number);
     ensure!(estimation_struct.min <= real_number);
-
     ensure!(
         (estimation_struct.exp as f64 - real_number as f64).abs()
             <= (estimation_plain.exp as f64 - real_number as f64).abs()
@@ -712,15 +686,12 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     )));
 
     let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
 
-    let hw_counter = HardwareCounterCell::new();
-
     let payload_index = test_segments.struct_segment.payload_index.borrow();
     let filter_context = payload_index.filter_context(&filter, &hw_counter);
     let exact = test_segments
@@ -741,132 +712,6 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     Ok(())
 }
 
-#[test]
-fn test_root_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_key = "nested_1[].nested_2";
-    let nested_match =
-        FieldCondition::new_match(JsonPath::new(nested_key), "some value".to_owned().into());
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::Field(nested_match)),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
-#[test]
-fn test_nesting_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_match_key = "nested_2";
-    let nested_match = FieldCondition::new_match(
-        JsonPath::new(nested_match_key),
-        "some value".to_owned().into(),
-    );
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::new_nested(
-            JsonPath::new("nested_1"),
-            Filter::new_must(Condition::Field(nested_match)),
-        )),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        // full key expected
-        JsonPath::new(&format!(
-            "{STR_ROOT_PROJ_KEY}[].nested_1[].{nested_match_key}"
-        )),
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
 /// Compare search with plain, struct, and mmap indices.
 fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
     let mut rnd = rand::rng();
@@ -913,7 +758,6 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             .unwrap();
 
         let hw_counter = HardwareCounterCell::new();
-
         let estimation = test_segments
             .struct_segment
             .payload_index
@@ -932,58 +776,27 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             "{estimation:#?}",
         );
 
-        // Perform additional sort to break ties by score
-        let mut plain_result_sorted_ties: Vec<ScoredPointTies> =
+        // break ties
+        let mut plain_sorted: Vec<ScoredPointTies> =
             plain_result.iter().map(|x| x.into()).collect_vec();
-        plain_result_sorted_ties.sort();
-
-        let mut struct_result_sorted_ties: Vec<ScoredPointTies> =
+        plain_sorted.sort();
+        let mut struct_sorted: Vec<ScoredPointTies> =
             struct_result.iter().map(|x| x.into()).collect_vec();
-        struct_result_sorted_ties.sort();
-
-        let mut mmap_result_sorted_ties: Vec<ScoredPointTies> =
+        struct_sorted.sort();
+        let mut mmap_sorted: Vec<ScoredPointTies> =
             mmap_result.iter().map(|x| x.into()).collect_vec();
-        mmap_result_sorted_ties.sort();
+        mmap_sorted.sort();
 
-        ensure!(
-            plain_result_sorted_ties.len() == struct_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            struct result{struct_result:?}",
-        );
-        ensure!(
-            plain_result_sorted_ties.len() == mmap_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            mmap result  {mmap_result:?}",
-        );
+        ensure!(plain_sorted.len() == struct_sorted.len());
+        ensure!(plain_sorted.len() == mmap_sorted.len());
 
-        for (r1, r2, r3) in itertools::izip!(
-            plain_result_sorted_ties,
-            struct_result_sorted_ties,
-            mmap_result_sorted_ties,
-        )
-        .map(|(r1, r2, r3)| (r1.0, r2.0, r3.0))
-        {
-            ensure!(
-                r1.id == r2.id,
-                "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                struct result{struct_result:?}"
-            );
+        for (r1, r2, r3) in itertools::izip!(plain_sorted, struct_sorted, mmap_sorted) {
+            let r1 = r1.0;
+            let r2 = r2.0;
+            let r3 = r3.0;
+            ensure!(r1.id == r2.id, "Mismatch plain vs struct");
             ensure!((r1.score - r2.score) < 0.0001);
-            ensure!(
-                r1.id == r3.id,
-                "got different ScoredPoint {r1:?} and {r3:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                mmap result  {mmap_result:?}",
-            );
+            ensure!(r1.id == r3.id, "Mismatch plain vs mmap");
             ensure!((r1.score - r3.score) < 0.0001);
         }
     }
@@ -1008,7 +821,6 @@ fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Re
         JsonPath::new("geo_key"),
         geo_bbox,
     ));
-
     let query_filter = Filter::new_must(condition);
 
     validate_geo_filter(test_segments, query_filter).context(here!())
@@ -1016,7 +828,6 @@ fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Re
 
 fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<()> {
     let mut rnd = rand::rng();
-
     let r_meters = rnd.random_range(1.0..10000.0);
     let geo_radius = GeoRadius {
         center: GeoPoint {
@@ -1025,15 +836,11 @@ fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<
         },
         radius: r_meters,
     };
-
     let condition = Condition::Field(FieldCondition::new_geo_radius(
         JsonPath::new("geo_key"),
         geo_radius,
     ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
+    validate_geo_filter(test_segments, Filter::new_must(condition)).context(here!())
 }
 
 fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result<()> {
@@ -1050,7 +857,7 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
                 })
                 .collect(),
         };
-        line.points.push(line.points[0]); // add last point that is identical to the first
+        line.points.push(line.points[0]); // identical
         line
     }
 
@@ -1060,162 +867,13 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
             .take(interiors_num)
             .collect(),
     );
-
-    let geo_polygon = GeoPolygon {
-        exterior,
-        interiors,
-    };
+    let geo_polygon = GeoPolygon { exterior, interiors };
 
     let condition = Condition::Field(FieldCondition::new_geo_polygon(
         JsonPath::new("geo_key"),
         geo_polygon,
     ));
-
-    let query_filter = Filter::new_must(condition);
-
-    validate_geo_filter(test_segments, query_filter).context(here!())
-}
-
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let mut rnd = rand::rng();
-
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
-#[test]
-fn test_update_payload_index_type() {
-    let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-    let mut payload_storage = InMemoryPayloadStorage::default();
-
-    let point_num = 10;
-    let mut points = HashMap::new();
-
-    let mut payloads: Vec<Payload> = vec![];
-    for i in 0..point_num {
-        payloads.push(payload_json! {"field": i});
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    for (idx, payload) in payloads.into_iter().enumerate() {
-        points.insert(idx, payload.clone());
-        payload_storage
-            .set(idx as PointOffsetType, &payload, &hw_counter)
-            .unwrap();
-    }
-
-    let wrapped_payload_storage = Arc::new(AtomicRefCell::new(payload_storage.into()));
-    let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(point_num)));
-
-    let mut index = StructPayloadIndex::open(
-        wrapped_payload_storage,
-        id_tracker,
-        HashMap::new(),
-        dir.path(),
-        true,
-    )
-    .unwrap();
-
-    let field = JsonPath::new("field");
-
-    // set field to Integer type
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-
-    // update field to Keyword type
-    index.set_indexed(&field, Keyword, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Keyword)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), 0); // only one field index for Keyword
-
-    // set field to Integer type (again)
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
+    validate_geo_filter(test_segments, Filter::new_must(condition)).context(here!())
 }
 
 fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
@@ -1227,11 +885,9 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
         JsonPath::new(STR_KEY),
         Match::new_any(AnyVariants::Strings(keywords)),
     );
-
     let filter = Filter::new_must(Condition::Field(any_match.clone()));
 
     let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
@@ -1240,35 +896,15 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
 
     ensure!(estimation.primary_clauses.len() == 1);
     for clause in estimation.primary_clauses.iter() {
-        let expected_primary_clause = any_match.clone();
-
+        let expected = any_match.clone();
         match clause {
             PrimaryCondition::Condition(field_condition) => {
-                ensure!(*field_condition == Box::new(expected_primary_clause));
+                ensure!(*field_condition == Box::new(expected));
             }
             o => panic!("unexpected primary clause: {o:?}"),
         }
     }
 
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = test_segments.struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = test_segments
-        .struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    ensure!(exact <= estimation.max);
-    ensure!(exact >= estimation.min);
-
     Ok(())
 }
 
@@ -1276,114 +912,82 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
 fn keyword_facet_request() -> FacetParams {
     let limit = 1000;
     let key: JsonPath = STR_KEY.try_into().unwrap();
-    let exact = false; // This is only used at local shard level
-
-    // *** Without filter ***
-    FacetParams {
-        key: key.clone(),
-        limit,
-        filter: None,
-        exact,
-    }
+    let exact = false;
+    FacetParams { key, limit, filter: None, exact }
 }
 
-/// Checks that the counts are the same as counting each value exactly.
+/// Checks counts match exact
 fn validate_facet_result(
     segment: &Segment,
     facet_hits: HashMap<FacetValue, usize>,
     filter: Option<Filter>,
 ) -> Result<()> {
     let hw_counter = HardwareCounterCell::new();
-
     for (value, count) in facet_hits.iter() {
-        // Compare against exact count
         let value = ValueVariants::from(value.clone());
-
         let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
             JsonPath::new(STR_KEY),
             Match::from(value.clone()),
         )));
         let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
-
         let exact = segment
-            .read_filtered(
-                None,
-                None,
-                count_filter.as_ref(),
-                &Default::default(),
-                &hw_counter,
-            )
+            .read_filtered(None, None, count_filter.as_ref(), &Default::default(), &hw_counter)
             .len();
-
         ensure!(*count == exact, "Facet value: {value:?}");
     }
-
     Ok(())
 }
 
 fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
-
-    // Plain segment should fail, as it does not have a keyword index
     assert!(
         test_segments
             .plain_segment
             .facet(&request, &Default::default(), &Default::default())
             .is_err(),
     );
-
-    // Struct segment
-    let facet_hits = test_segments
+    let hits = test_segments
         .struct_segment
         .facet(&request, &Default::default(), &Default::default())
         .unwrap();
-
-    validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
+    validate_facet_result(&test_segments.struct_segment, hits, None).context(here!())
 }
 
 fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
-
-    let facet_hits = test_segments
+    let hits = test_segments
         .mmap_segment
         .facet(&request, &Default::default(), &Default::default())
         .unwrap();
-
-    validate_facet_result(&test_segments.mmap_segment, facet_hits, None).context(here!())
+    validate_facet_result(&test_segments.mmap_segment, hits, None).context(here!())
 }
 
 fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
-
     for _ in 0..ATTEMPTS {
         let filter = random_filter(&mut rand::rng(), 3);
         request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
+        let hits = test_segments
             .struct_segment
             .facet(&request, &Default::default(), &Default::default())
             .unwrap();
-
-        validate_facet_result(&test_segments.struct_segment, facet_hits, Some(filter))
-            .context(here!())?
+        validate_facet_result(&test_segments.struct_segment, hits, Some(filter))
+            .context(here!())?;
     }
     Ok(())
 }
 
 fn test_mmap_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
-
     for _ in 0..ATTEMPTS {
         let filter = random_filter(&mut rand::rng(), 3);
         request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
+        let hits = test_segments
             .mmap_segment
             .facet(&request, &Default::default(), &Default::default())
             .unwrap();
-
-        validate_facet_result(&test_segments.mmap_segment, facet_hits, Some(filter))
-            .context(here!())?
+        validate_facet_result(&test_segments.mmap_segment, hits, Some(filter))
+            .context(here!())?;
     }
     Ok(())
 }
\ No newline at end of file
