
index d46358c3..846bb126 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpemv2a9ng_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpqghj0rem_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::HashMap;
 use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
@@ -12,9 +12,8 @@ use common::types::PointOffsetType;
 use fnv::FnvBuildHasher;
 use indexmap::IndexSet;
 use itertools::Itertools;
+use rand::{SeedableRng, rng, RngCore};
 use rand::prelude::StdRng;
-use rand::{Rng, SeedableRng};
-use segment::data_types::facets::{FacetParams, FacetValue};
 use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
     KeywordIndexType, TextIndexParams, TextIndexType,
@@ -27,9 +26,9 @@ use segment::fixtures::payload_fixtures::{
     STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY, generate_diverse_nested_payload,
     generate_diverse_payload, random_filter, random_nested_filter, random_vector,
 };
-use segment::index::PayloadIndex;
 use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
+use segment::index::PayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
 use segment::payload_storage::PayloadStorage;
@@ -37,25 +36,26 @@ use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
-use segment::segment_constructor::simple_segment_constructor::build_simple_segment;
 use segment::types::PayloadFieldSchema::{FieldParams, FieldType};
 use segment::types::PayloadSchemaType::{Integer, Keyword};
 use segment::types::{
     AnyVariants, Condition, Distance, FieldCondition, Filter, GeoBoundingBox, GeoLineString,
     GeoPoint, GeoPolygon, GeoRadius, HnswConfig, Indexes, IsEmptyCondition, Match, Payload,
-    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, ValueVariants,
-    VectorDataConfig, VectorStorageType, WithPayload,
+    PayloadField, PayloadSchemaParams, PayloadSchemaType, Range, SegmentConfig, VectorDataConfig,
+    VectorStorageType, WithPayload,
 };
 use segment::utils::scored_point_ties::ScoredPointTies;
 use tempfile::{Builder, TempDir};
 
+const DIM: usize = 5;
+const ATTEMPTS: usize = 20;
+
 macro_rules! here {
     () => {
         format!("at {}:{}", file!(), line!())
     };
 }
 
-/// `anyhow::ensure!` but with location, as what `assert!` would do
 macro_rules! ensure {
     ($($arg:tt)*) => {
         (|| Ok(anyhow::ensure!($($arg)*)))().map_err(|e| {
@@ -64,9 +64,6 @@ macro_rules! ensure {
     };
 }
 
-const DIM: usize = 5;
-const ATTEMPTS: usize = 20;
-
 struct TestSegments {
     _base_dir: TempDir,
     struct_segment: Segment,
@@ -77,13 +74,10 @@ struct TestSegments {
 impl TestSegments {
     fn new() -> Self {
         let base_dir = Builder::new().prefix("test_segments").tempdir().unwrap();
-
         let hw_counter = HardwareCounterCell::new();
-
         let mut rnd = StdRng::seed_from_u64(42);
 
         let config = Self::make_simple_config(true);
-
         let mut plain_segment =
             build_segment(&base_dir.path().join("plain"), &config, true).unwrap();
         let mut struct_segment =
@@ -95,12 +89,7 @@ impl TestSegments {
 
         let mut opnum = 0;
         struct_segment
-            .create_field_index(
-                opnum,
-                &JsonPath::new(INT_KEY_2),
-                Some(&Integer.into()),
-                &hw_counter,
-            )
+            .create_field_index(opnum, &JsonPath::new(INT_KEY_2), Some(&Integer.into()), &hw_counter)
             .unwrap();
 
         opnum += 1;
@@ -193,9 +182,8 @@ impl TestSegments {
             )
             .unwrap();
 
-        // Make mmap segment after inserting the points, but before deleting some of them
         let mut mmap_segment =
-            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment);
+            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment, &hw_counter);
 
         for _ in 0..points_to_clear {
             opnum += 1;
@@ -227,9 +215,9 @@ impl TestSegments {
 
         for (field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
             for index in indexes {
-                assert!(index.count_indexed_points() <= num_points as usize);
+                ensure!(index.count_indexed_points() <= num_points as usize);
                 if field.to_string() != FLICKING_KEY {
-                    assert!(
+                    ensure!(
                         index.count_indexed_points()
                             >= (num_points as usize - points_to_delete - points_to_clear)
                     );
@@ -270,7 +258,11 @@ impl TestSegments {
         conf
     }
 
-    fn make_mmap_segment(path: &Path, plain_segment: &Segment) -> Segment {
+    fn make_mmap_segment(
+        path: &Path,
+        plain_segment: &Segment,
+        hw_counter: &HardwareCounterCell,
+    ) -> Segment {
         let stopped = AtomicBool::new(false);
         create_dir(path).unwrap();
 
@@ -283,9 +275,8 @@ impl TestSegments {
 
         builder.update(&[plain_segment], &stopped).unwrap();
         let permit = ResourcePermit::dummy(1);
-        let hw_counter = HardwareCounterCell::new();
 
-        let mut segment = builder.build(permit, &stopped, &hw_counter).unwrap();
+        let mut segment = builder.build(permit, &stopped, hw_counter).unwrap();
         let opnum = segment.version() + 1;
 
         segment
@@ -295,11 +286,11 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Keyword(
                     KeywordIndexParams {
                         r#type: KeywordIndexType::Keyword,
-                        is_tenant: None,
+                        is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -315,7 +306,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -331,7 +322,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -347,7 +338,7 @@ impl TestSegments {
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -359,7 +350,15 @@ impl TestSegments {
                     is_principal: None,
                     on_disk: Some(true),
                 }))),
-                &hw_counter,
+                hw_counter,
+            )
+            .unwrap();
+        segment
+            .create_field_index(
+                opnum,
+                &JsonPath::new(GEO_KEY),
+                Some(&PayloadSchemaType::Geo.into()),
+                hw_counter,
             )
             .unwrap();
         segment
@@ -371,7 +370,7 @@ impl TestSegments {
                     on_disk: Some(true),
                     ..Default::default()
                 }))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
 
@@ -379,113 +378,9 @@ impl TestSegments {
     }
 }
 
-fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) -> (Segment, Segment) {
-    let mut rnd = StdRng::seed_from_u64(42);
-
-    let mut plain_segment = build_simple_segment(path_plain, DIM, Distance::Dot).unwrap();
-    let mut struct_segment = build_simple_segment(path_struct, DIM, Distance::Dot).unwrap();
-
-    let num_points = 3000;
-    let points_to_delete = 500;
-    let points_to_clear = 500;
-
-    // Nested payload keys
-    let nested_str_key = JsonPath::new(&format!("{}.{}.{}", STR_KEY, "nested_1", "nested_2"));
-    let nested_str_proj_key =
-        JsonPath::new(&format!("{}.{}[].{}", STR_PROJ_KEY, "nested_1", "nested_2"));
-    let deep_nested_str_proj_key = JsonPath::new(&format!(
-        "{}[].{}[].{}",
-        STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let mut opnum = 0;
-    struct_segment
-        .create_field_index(opnum, &nested_str_key, Some(&Keyword.into()), &hw_counter)
-        .unwrap();
-
-    struct_segment
-        .create_field_index(
-            opnum,
-            &nested_str_proj_key,
-            Some(&Keyword.into()),
-            &hw_counter,
-        )
-        .unwrap();
-
-    struct_segment
-        .create_field_index(
-            opnum,
-            &deep_nested_str_proj_key,
-            Some(&Keyword.into()),
-            &hw_counter,
-        )
-        .unwrap();
-
-    eprintln!("{deep_nested_str_proj_key}");
-
-    opnum += 1;
-    for n in 0..num_points {
-        let idx = n.into();
-        let vector = random_vector(&mut rnd, DIM);
-        let payload: Payload = generate_diverse_nested_payload(&mut rnd);
-
-        plain_segment
-            .upsert_point(opnum, idx, only_default_vector(&vector), &hw_counter)
-            .unwrap();
-        struct_segment
-            .upsert_point(opnum, idx, only_default_vector(&vector), &hw_counter)
-            .unwrap();
-        plain_segment
-            .set_full_payload(opnum, idx, &payload, &hw_counter)
-            .unwrap();
-        struct_segment
-            .set_full_payload(opnum, idx, &payload, &hw_counter)
-            .unwrap();
-
-        opnum += 1;
-    }
-
-    for _ in 0..points_to_clear {
-        opnum += 1;
-        let idx_to_remove = rnd.random_range(0..num_points);
-        plain_segment
-            .clear_payload(opnum, idx_to_remove.into(), &hw_counter)
-            .unwrap();
-        struct_segment
-            .clear_payload(opnum, idx_to_remove.into(), &hw_counter)
-            .unwrap();
-    }
-
-    for _ in 0..points_to_delete {
-        opnum += 1;
-        let idx_to_remove = rnd.random_range(0..num_points);
-        plain_segment
-            .delete_point(opnum, idx_to_remove.into(), &hw_counter)
-            .unwrap();
-        struct_segment
-            .delete_point(opnum, idx_to_remove.into(), &hw_counter)
-            .unwrap();
-    }
-
-    for (_field, indexes) in struct_segment.payload_index.borrow().field_indexes.iter() {
-        for index in indexes {
-            assert!(index.count_indexed_points() < num_points as usize);
-            assert!(
-                index.count_indexed_points()
-                    > (num_points as usize - points_to_delete - points_to_clear)
-            );
-        }
-    }
-
-    (struct_segment, plain_segment)
-}
-
 fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    for _i in 0..ATTEMPTS {
+    let mut rnd = rng();
+    for _ in 0..ATTEMPTS {
         let query = random_vector(&mut rnd, DIM).into();
         let plain_result = test_segments
             .plain_segment
@@ -552,15 +447,55 @@ fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Re
 
         for (r1, r2) in plain_result.iter().zip(struct_result.iter()) {
             ensure!(r1.id == r2.id);
-            ensure!((r1.score - r2.score) < 0.0001)
+            ensure!((r1.score - r2.score) < 0.0001);
         }
     }
 
     Ok(())
 }
 
-/// Test read operations on segments.
-/// The segments fixtures are created only once to improve test speed.
+fn validate_facet_result(
+    segment: &Segment,
+    facet_hits: HashMap<FacetValue, usize>,
+    filter: Option<Filter>,
+) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
+    for (value, count) in facet_hits.iter() {
+        let value = ValueVariants::from(value.clone());
+        let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
+            JsonPath::new(STR_KEY),
+            Match::from(value.clone()),
+        )));
+        let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
+
+        let exact = segment
+            .read_filtered(
+                None,
+                None,
+                count_filter.as_ref(),
+                &Default::default(),
+                &hw_counter,
+            )
+            .len();
+
+        ensure!(*count == exact, "Facet value: {value:?}");
+    }
+    Ok(())
+}
+
+fn keyword_facet_request() -> FacetParams {
+    let limit = 1000;
+    let key: JsonPath = STR_KEY.try_into().unwrap();
+    let exact = false;
+
+    FacetParams {
+        key: key.clone(),
+        limit,
+        filter: None,
+        exact,
+    }
+}
+
 #[test]
 fn test_read_operations() -> Result<()> {
     let test_segments = Arc::new(TestSegments::new());
@@ -599,27 +534,22 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
     }));
 
     let hw_counter = HardwareCounterCell::new();
-
     let estimation_struct = test_segments
         .struct_segment
         .payload_index
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
-
     let estimation_plain = test_segments
         .plain_segment
         .payload_index
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
-
     let plain_result = test_segments
         .plain_segment
         .payload_index
         .borrow()
         .query_points(&filter, &hw_counter);
-
     let real_number = plain_result.len();
-
     let struct_result = test_segments
         .struct_segment
         .payload_index
@@ -627,22 +557,14 @@ fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
         .query_points(&filter, &hw_counter);
 
     ensure!(plain_result == struct_result);
-
-    eprintln!("estimation_plain = {estimation_plain:#?}");
-    eprintln!("estimation_struct = {estimation_struct:#?}");
-    eprintln!("real_number = {real_number:#?}");
-
     ensure!(estimation_plain.max >= real_number);
     ensure!(estimation_plain.min <= real_number);
-
     ensure!(estimation_struct.max >= real_number);
     ensure!(estimation_struct.min <= real_number);
-
     ensure!(
         (estimation_struct.exp as f64 - real_number as f64).abs()
             <= (estimation_plain.exp as f64 - real_number as f64).abs()
     );
-
     Ok(())
 }
 
@@ -655,15 +577,14 @@ fn test_integer_index_types(test_segments: &TestSegments) -> Result<()> {
         ("mmap", &test_segments.mmap_segment.payload_index.borrow()),
     ] {
         eprintln!("Checking {kind}_segment");
-        let field_indexes = indexes.field_indexes.get(&JsonPath::new(INT_KEY)).unwrap();
 
+        let field_indexes = indexes.field_indexes.get(&JsonPath::new(INT_KEY)).unwrap();
         let has_map_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntMapIndex(_)));
         let has_int_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntIndex(_)));
-
         ensure!(has_map_index);
         ensure!(has_int_index);
 
@@ -671,14 +592,12 @@ fn test_integer_index_types(test_segments: &TestSegments) -> Result<()> {
             .field_indexes
             .get(&JsonPath::new(INT_KEY_2))
             .unwrap();
-
         let has_map_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntMapIndex(_)));
         let has_int_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntIndex(_)));
-
         ensure!(has_map_index);
         ensure!(!has_int_index);
 
@@ -686,14 +605,12 @@ fn test_integer_index_types(test_segments: &TestSegments) -> Result<()> {
             .field_indexes
             .get(&JsonPath::new(INT_KEY_3))
             .unwrap();
-
         let has_map_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntMapIndex(_)));
         let has_int_index = field_indexes
             .iter()
             .any(|index| matches!(index, FieldIndex::IntIndex(_)));
-
         ensure!(!has_map_index);
         ensure!(has_int_index);
     }
@@ -712,166 +629,34 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     )));
 
     let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
 
-    let hw_counter = HardwareCounterCell::new();
-
+    let hw_counter2 = HardwareCounterCell::new();
     let payload_index = test_segments.struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
+    let filter_context = payload_index.filter_context(&filter, &hw_counter2);
     let exact = test_segments
         .struct_segment
         .id_tracker
         .borrow()
         .iter_ids()
         .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
+        .count();
 
     eprintln!("exact = {exact:#?}");
     eprintln!("estimation = {estimation:#?}");
 
     ensure!(exact <= estimation.max);
     ensure!(exact >= estimation.min);
-
     Ok(())
 }
 
-#[test]
-fn test_root_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_key = "nested_1[].nested_2";
-    let nested_match =
-        FieldCondition::new_match(JsonPath::new(nested_key), "some value".to_owned().into());
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::Field(nested_match)),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
-#[test]
-fn test_nesting_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_match_key = "nested_2";
-    let nested_match = FieldCondition::new_match(
-        JsonPath::new(nested_match_key),
-        "some value".to_owned().into(),
-    );
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::new_nested(
-            JsonPath::new("nested_1"),
-            Filter::new_must(Condition::Field(nested_match)),
-        )),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        // full key expected
-        JsonPath::new(&format!(
-            "{STR_ROOT_PROJ_KEY}[].nested_1[].{nested_match_key}"
-        )),
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
-/// Compare search with plain, struct, and mmap indices.
 fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    for _i in 0..ATTEMPTS {
+    let mut rnd = rng();
+    for _ in 0..ATTEMPTS {
         let query_vector = random_vector(&mut rnd, DIM).into();
         let query_filter = random_filter(&mut rnd, 3);
 
@@ -887,6 +672,7 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
                 None,
             )
             .unwrap();
+
         let struct_result = test_segments
             .struct_segment
             .search(
@@ -899,6 +685,7 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
                 None,
             )
             .unwrap();
+
         let mmap_result = test_segments
             .mmap_segment
             .search(
@@ -913,7 +700,6 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             .unwrap();
 
         let hw_counter = HardwareCounterCell::new();
-
         let estimation = test_segments
             .struct_segment
             .payload_index
@@ -932,15 +718,12 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             "{estimation:#?}",
         );
 
-        // Perform additional sort to break ties by score
         let mut plain_result_sorted_ties: Vec<ScoredPointTies> =
             plain_result.iter().map(|x| x.into()).collect_vec();
         plain_result_sorted_ties.sort();
-
         let mut struct_result_sorted_ties: Vec<ScoredPointTies> =
             struct_result.iter().map(|x| x.into()).collect_vec();
         struct_result_sorted_ties.sort();
-
         let mut mmap_result_sorted_ties: Vec<ScoredPointTies> =
             mmap_result.iter().map(|x| x.into()).collect_vec();
         mmap_result_sorted_ties.sort();
@@ -982,7 +765,7 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
                 query vector {query_vector:?}\n\
                 query filter {query_filter:?}\n\
                 plain result {plain_result:?}\n\
-                mmap result  {mmap_result:?}",
+                mmap result  {mmap_result:?}"
             );
             ensure!((r1.score - r3.score) < 0.0001);
         }
@@ -991,7 +774,7 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
 }
 
 fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
+    let mut rnd = rng();
 
     let geo_bbox = GeoBoundingBox {
         top_left: GeoPoint {
@@ -1010,12 +793,11 @@ fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Re
     ));
 
     let query_filter = Filter::new_must(condition);
-
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
 fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<()> {
-    let mut rnd = rand::rng();
+    let mut rnd = rng();
 
     let r_meters = rnd.random_range(1.0..10000.0);
     let geo_radius = GeoRadius {
@@ -1032,7 +814,6 @@ fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<
     ));
 
     let query_filter = Filter::new_must(condition);
-
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
@@ -1041,7 +822,7 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     let interiors_num = 3;
 
     fn generate_ring(polygon_edge: i32) -> GeoLineString {
-        let mut rnd = rand::rng();
+        let mut rnd = rng();
         let mut line = GeoLineString {
             points: (0..polygon_edge)
                 .map(|_| GeoPoint {
@@ -1060,11 +841,7 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
             .take(interiors_num)
             .collect(),
     );
-
-    let geo_polygon = GeoPolygon {
-        exterior,
-        interiors,
-    };
+    let geo_polygon = GeoPolygon { exterior, interiors };
 
     let condition = Condition::Field(FieldCondition::new_geo_polygon(
         JsonPath::new("geo_key"),
@@ -1072,152 +849,9 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     ));
 
     let query_filter = Filter::new_must(condition);
-
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let mut rnd = rand::rng();
-
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-        let struct_result = struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
-            "{estimation:#?}",
-        );
-
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
-#[test]
-fn test_update_payload_index_type() {
-    let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-    let mut payload_storage = InMemoryPayloadStorage::default();
-
-    let point_num = 10;
-    let mut points = HashMap::new();
-
-    let mut payloads: Vec<Payload> = vec![];
-    for i in 0..point_num {
-        payloads.push(payload_json! {"field": i});
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    for (idx, payload) in payloads.into_iter().enumerate() {
-        points.insert(idx, payload.clone());
-        payload_storage
-            .set(idx as PointOffsetType, &payload, &hw_counter)
-            .unwrap();
-    }
-
-    let wrapped_payload_storage = Arc::new(AtomicRefCell::new(payload_storage.into()));
-    let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(point_num)));
-
-    let mut index = StructPayloadIndex::open(
-        wrapped_payload_storage,
-        id_tracker,
-        HashMap::new(),
-        dir.path(),
-        true,
-    )
-    .unwrap();
-
-    let field = JsonPath::new("field");
-
-    // set field to Integer type
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-
-    // update field to Keyword type
-    index.set_indexed(&field, Keyword, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Keyword)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), 0); // only one field index for Keyword
-
-    // set field to Integer type (again)
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-}
-
 fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     let keywords: IndexSet<String, FnvBuildHasher> = ["value1", "value2"]
         .iter()
@@ -1231,7 +865,6 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
     let filter = Filter::new_must(Condition::Field(any_match.clone()));
 
     let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
@@ -1241,7 +874,6 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
     ensure!(estimation.primary_clauses.len() == 1);
     for clause in estimation.primary_clauses.iter() {
         let expected_primary_clause = any_match.clone();
-
         match clause {
             PrimaryCondition::Condition(field_condition) => {
                 ensure!(*field_condition == Box::new(expected_primary_clause));
@@ -1250,81 +882,12 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
         }
     }
 
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = test_segments.struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = test_segments
-        .struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    ensure!(exact <= estimation.max);
-    ensure!(exact >= estimation.min);
-
-    Ok(())
-}
-
-/// FacetParams fixture without a filter
-fn keyword_facet_request() -> FacetParams {
-    let limit = 1000;
-    let key: JsonPath = STR_KEY.try_into().unwrap();
-    let exact = false; // This is only used at local shard level
-
-    // *** Without filter ***
-    FacetParams {
-        key: key.clone(),
-        limit,
-        filter: None,
-        exact,
-    }
-}
-
-/// Checks that the counts are the same as counting each value exactly.
-fn validate_facet_result(
-    segment: &Segment,
-    facet_hits: HashMap<FacetValue, usize>,
-    filter: Option<Filter>,
-) -> Result<()> {
-    let hw_counter = HardwareCounterCell::new();
-
-    for (value, count) in facet_hits.iter() {
-        // Compare against exact count
-        let value = ValueVariants::from(value.clone());
-
-        let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
-            JsonPath::new(STR_KEY),
-            Match::from(value.clone()),
-        )));
-        let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
-
-        let exact = segment
-            .read_filtered(
-                None,
-                None,
-                count_filter.as_ref(),
-                &Default::default(),
-                &hw_counter,
-            )
-            .len();
-
-        ensure!(*count == exact, "Facet value: {value:?}");
-    }
-
     Ok(())
 }
 
 fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
     let request = keyword_facet_request();
 
-    // Plain segment should fail, as it does not have a keyword index
     assert!(
         test_segments
             .plain_segment
@@ -1332,12 +895,10 @@ fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
             .is_err(),
     );
 
-    // Struct segment
     let facet_hits = test_segments
         .struct_segment
         .facet(&request, &Default::default(), &Default::default())
         .unwrap();
-
     validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
 }
 
@@ -1348,42 +909,35 @@ fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
         .mmap_segment
         .facet(&request, &Default::default(), &Default::default())
         .unwrap();
-
     validate_facet_result(&test_segments.mmap_segment, facet_hits, None).context(here!())
 }
 
 fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
-
     for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
+        let filter = random_filter(&mut rng(), 3);
         request.filter = Some(filter.clone());
-
         let facet_hits = test_segments
             .struct_segment
             .facet(&request, &Default::default(), &Default::default())
             .unwrap();
-
         validate_facet_result(&test_segments.struct_segment, facet_hits, Some(filter))
-            .context(here!())?
+            .context(here!())?;
     }
     Ok(())
 }
 
 fn test_mmap_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
     let mut request = keyword_facet_request();
-
     for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
+        let filter = random_filter(&mut rng(), 3);
         request.filter = Some(filter.clone());
-
         let facet_hits = test_segments
             .mmap_segment
             .facet(&request, &Default::default(), &Default::default())
             .unwrap();
-
         validate_facet_result(&test_segments.mmap_segment, facet_hits, Some(filter))
-            .context(here!())?
+            .context(here!())?;
     }
     Ok(())
 }
\ No newline at end of file
