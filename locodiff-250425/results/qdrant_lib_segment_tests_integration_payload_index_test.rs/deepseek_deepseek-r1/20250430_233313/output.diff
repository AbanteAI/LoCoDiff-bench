
index d46358c3..dd6fbf1b 100644
--- a/qdrant_lib_segment_tests_integration_payload_index_test.rs_expectedoutput.txt (expected):tmp/tmpfwix8t8y_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_payload_index_test.rs_extracted.txt (actual):tmp/tmpur4oj15f_actual.txt	
@@ -1,12 +1,6 @@
 use std::collections::HashMap;
-use std::fs::create_dir;
 use std::path::Path;
-use std::sync::Arc;
-use std::sync::atomic::AtomicBool;
-
-use anyhow::{Context, Result};
 use atomic_refcell::AtomicRefCell;
-use common::budget::ResourcePermit;
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::PointOffsetType;
 use fnv::FnvBuildHasher;
@@ -19,21 +13,21 @@ use segment::data_types::index::{
     FloatIndexParams, FloatIndexType, IntegerIndexParams, IntegerIndexType, KeywordIndexParams,
     KeywordIndexType, TextIndexParams, TextIndexType,
 };
-use segment::data_types::vectors::{DEFAULT_VECTOR_NAME, only_default_vector};
+use segment::data_types::vectors::{only_default_vector, DEFAULT_VECTOR_NAME};
 use segment::entry::entry_point::SegmentEntry;
 use segment::fixtures::payload_context_fixture::FixtureIdTracker;
 use segment::fixtures::payload_fixtures::{
-    FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE, LON_RANGE, STR_KEY,
-    STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY, generate_diverse_nested_payload,
-    generate_diverse_payload, random_filter, random_nested_filter, random_vector,
+    generate_diverse_nested_payload, generate_diverse_payload, random_filter, random_nested_filter,
+    random_vector, FLICKING_KEY, FLT_KEY, GEO_KEY, INT_KEY, INT_KEY_2, INT_KEY_3, LAT_RANGE,
+    LON_RANGE, STR_KEY, STR_PROJ_KEY, STR_ROOT_PROJ_KEY, TEXT_KEY,
 };
-use segment::index::PayloadIndex;
 use segment::index::field_index::{FieldIndex, PrimaryCondition};
 use segment::index::struct_payload_index::StructPayloadIndex;
+use segment::index::PayloadIndex;
 use segment::json_path::JsonPath;
 use segment::payload_json;
-use segment::payload_storage::PayloadStorage;
 use segment::payload_storage::in_memory_payload_storage::InMemoryPayloadStorage;
+use segment::payload_storage::PayloadStorage;
 use segment::segment::Segment;
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
@@ -49,21 +43,6 @@ use segment::types::{
 use segment::utils::scored_point_ties::ScoredPointTies;
 use tempfile::{Builder, TempDir};
 
-macro_rules! here {
-    () => {
-        format!("at {}:{}", file!(), line!())
-    };
-}
-
-/// `anyhow::ensure!` but with location, as what `assert!` would do
-macro_rules! ensure {
-    ($($arg:tt)*) => {
-        (|| Ok(anyhow::ensure!($($arg)*)))().map_err(|e| {
-            e.context(here!())
-        })?
-    };
-}
-
 const DIM: usize = 5;
 const ATTEMPTS: usize = 20;
 
@@ -77,11 +56,9 @@ struct TestSegments {
 impl TestSegments {
     fn new() -> Self {
         let base_dir = Builder::new().prefix("test_segments").tempdir().unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
+        let mut hw_counter = HardwareCounterCell::new();
 
         let mut rnd = StdRng::seed_from_u64(42);
-
         let config = Self::make_simple_config(true);
 
         let mut plain_segment =
@@ -143,8 +120,8 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Integer(
                     IntegerIndexParams {
                         r#type: IntegerIndexType::Integer,
-                        lookup: Some(true),
-                        range: Some(false),
+                        lookup: true,
+                        range: false,
                         is_principal: None,
                         on_disk: None,
                     },
@@ -159,8 +136,8 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Integer(
                     IntegerIndexParams {
                         r#type: IntegerIndexType::Integer,
-                        lookup: Some(false),
-                        range: Some(true),
+                        lookup: false,
+                        range: true,
                         is_principal: None,
                         on_disk: None,
                     },
@@ -193,13 +170,12 @@ impl TestSegments {
             )
             .unwrap();
 
-        // Make mmap segment after inserting the points, but before deleting some of them
         let mut mmap_segment =
-            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment);
+            Self::make_mmap_segment(&base_dir.path().join("mmap"), &plain_segment, &hw_counter);
 
         for _ in 0..points_to_clear {
             opnum += 1;
-            let idx_to_remove = rnd.random_range(0..num_points);
+            let idx_to_remove = rnd.gen_range(0..num_points);
             plain_segment
                 .clear_payload(opnum, idx_to_remove.into(), &hw_counter)
                 .unwrap();
@@ -213,7 +189,7 @@ impl TestSegments {
 
         for _ in 0..points_to_delete {
             opnum += 1;
-            let idx_to_remove = rnd.random_range(0..num_points);
+            let idx_to_remove = rnd.gen_range(0..num_points);
             plain_segment
                 .delete_point(opnum, idx_to_remove.into(), &hw_counter)
                 .unwrap();
@@ -270,7 +246,7 @@ impl TestSegments {
         conf
     }
 
-    fn make_mmap_segment(path: &Path, plain_segment: &Segment) -> Segment {
+    fn make_mmap_segment(path: &Path, plain_segment: &Segment, hw_counter: &HardwareCounterCell) -> Segment {
         let stopped = AtomicBool::new(false);
         create_dir(path).unwrap();
 
@@ -278,14 +254,14 @@ impl TestSegments {
             path,
             &path.with_extension("tmp"),
             &Self::make_simple_config(false),
+            hw_counter,
         )
         .unwrap();
 
-        builder.update(&[plain_segment], &stopped).unwrap();
+        builder.update(&[plain_segment], &stopped, hw_counter).unwrap();
         let permit = ResourcePermit::dummy(1);
-        let hw_counter = HardwareCounterCell::new();
 
-        let mut segment = builder.build(permit, &stopped, &hw_counter).unwrap();
+        let mut segment = builder.build(permit, &stopped, hw_counter).unwrap();
         let opnum = segment.version() + 1;
 
         segment
@@ -295,11 +271,11 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Keyword(
                     KeywordIndexParams {
                         r#type: KeywordIndexType::Keyword,
-                        is_tenant: None,
+                        is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -309,13 +285,13 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Integer(
                     IntegerIndexParams {
                         r#type: IntegerIndexType::Integer,
-                        lookup: Some(true),
-                        range: Some(true),
+                        lookup: true,
+                        range: true,
                         is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -325,13 +301,13 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Integer(
                     IntegerIndexParams {
                         r#type: IntegerIndexType::Integer,
-                        lookup: Some(true),
-                        range: Some(false),
+                        lookup: true,
+                        range: false,
                         is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -341,13 +317,13 @@ impl TestSegments {
                 Some(&FieldParams(PayloadSchemaParams::Integer(
                     IntegerIndexParams {
                         r#type: IntegerIndexType::Integer,
-                        lookup: Some(false),
-                        range: Some(true),
+                        lookup: false,
+                        range: true,
                         is_principal: None,
                         on_disk: Some(true),
                     },
                 ))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -359,7 +335,7 @@ impl TestSegments {
                     is_principal: None,
                     on_disk: Some(true),
                 }))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
         segment
@@ -371,7 +347,7 @@ impl TestSegments {
                     on_disk: Some(true),
                     ..Default::default()
                 }))),
-                &hw_counter,
+                hw_counter,
             )
             .unwrap();
 
@@ -398,9 +374,8 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
         STR_ROOT_PROJ_KEY, "nested_1", "nested_2"
     ));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let mut opnum = 0;
+    let hw_counter = HardwareCounterCell::new();
     struct_segment
         .create_field_index(opnum, &nested_str_key, Some(&Keyword.into()), &hw_counter)
         .unwrap();
@@ -449,7 +424,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     for _ in 0..points_to_clear {
         opnum += 1;
-        let idx_to_remove = rnd.random_range(0..num_points);
+        let idx_to_remove = rnd.gen_range(0..num_points);
         plain_segment
             .clear_payload(opnum, idx_to_remove.into(), &hw_counter)
             .unwrap();
@@ -460,7 +435,7 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
 
     for _ in 0..points_to_delete {
         opnum += 1;
-        let idx_to_remove = rnd.random_range(0..num_points);
+        let idx_to_remove = rnd.gen_range(0..num_points);
         plain_segment
             .delete_point(opnum, idx_to_remove.into(), &hw_counter)
             .unwrap();
@@ -482,86 +457,6 @@ fn build_test_segments_nested_payload(path_struct: &Path, path_plain: &Path) ->
     (struct_segment, plain_segment)
 }
 
-fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Result<()> {
-    let mut rnd = rand::rng();
-
-    for _i in 0..ATTEMPTS {
-        let query = random_vector(&mut rnd, DIM).into();
-        let plain_result = test_segments
-            .plain_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query,
-                &WithPayload::default(),
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let hw_counter = HardwareCounterCell::new();
-        let estimation = test_segments
-            .plain_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        ensure!(estimation.min <= estimation.exp, "{estimation:#?}");
-        ensure!(estimation.exp <= estimation.max, "{estimation:#?}");
-        ensure!(
-            estimation.max
-                <= test_segments
-                    .struct_segment
-                    .id_tracker
-                    .borrow()
-                    .available_point_count(),
-            "{estimation:#?}",
-        );
-
-        let struct_result = test_segments
-            .struct_segment
-            .search(
-                DEFAULT_VECTOR_NAME,
-                &query,
-                &WithPayload::default(),
-                &false.into(),
-                Some(&query_filter),
-                5,
-                None,
-            )
-            .unwrap();
-
-        let estimation = test_segments
-            .struct_segment
-            .payload_index
-            .borrow()
-            .estimate_cardinality(&query_filter, &hw_counter);
-
-        ensure!(estimation.min <= estimation.exp, "{estimation:#?}");
-        ensure!(estimation.exp <= estimation.max, "{estimation:#?}");
-        ensure!(
-            estimation.max
-                <= test_segments
-                    .struct_segment
-                    .id_tracker
-                    .borrow()
-                    .available_point_count(),
-            "{estimation:#?}",
-        );
-
-        for (r1, r2) in plain_result.iter().zip(struct_result.iter()) {
-            ensure!(r1.id == r2.id);
-            ensure!((r1.score - r2.score) < 0.0001)
-        }
-    }
-
-    Ok(())
-}
-
-/// Test read operations on segments.
-/// The segments fixtures are created only once to improve test speed.
-#[test]
 fn test_read_operations() -> Result<()> {
     let test_segments = Arc::new(TestSegments::new());
     let mut handles = vec![];
@@ -592,14 +487,13 @@ fn test_read_operations() -> Result<()> {
 }
 
 fn test_is_empty_conditions(test_segments: &TestSegments) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
     let filter = Filter::new_must(Condition::IsEmpty(IsEmptyCondition {
         is_empty: PayloadField {
             key: JsonPath::new(FLICKING_KEY),
         },
     }));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let estimation_struct = test_segments
         .struct_segment
         .payload_index
@@ -701,6 +595,7 @@ fn test_integer_index_types(test_segments: &TestSegments) -> Result<()> {
 }
 
 fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
     let filter = Filter::new_must(Condition::Field(FieldCondition::new_range(
         JsonPath::new(INT_KEY),
         Range {
@@ -711,16 +606,12 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
         },
     )));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
         .borrow()
         .estimate_cardinality(&filter, &hw_counter);
 
-    let hw_counter = HardwareCounterCell::new();
-
     let payload_index = test_segments.struct_segment.payload_index.borrow();
     let filter_context = payload_index.filter_context(&filter, &hw_counter);
     let exact = test_segments
@@ -741,134 +632,8 @@ fn test_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
     Ok(())
 }
 
-#[test]
-fn test_root_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_key = "nested_1[].nested_2";
-    let nested_match =
-        FieldCondition::new_match(JsonPath::new(nested_key), "some value".to_owned().into());
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::Field(nested_match)),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        JsonPath::new(&format!("{STR_ROOT_PROJ_KEY}[].{nested_key}")), // full key expected
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
-#[test]
-fn test_nesting_nested_array_filter_cardinality_estimation() {
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
-    let (struct_segment, _) = build_test_segments_nested_payload(dir1.path(), dir2.path());
-
-    // rely on test data from `build_test_segments_nested_payload`
-    let nested_match_key = "nested_2";
-    let nested_match = FieldCondition::new_match(
-        JsonPath::new(nested_match_key),
-        "some value".to_owned().into(),
-    );
-    let filter = Filter::new_must(Condition::new_nested(
-        JsonPath::new(STR_ROOT_PROJ_KEY),
-        Filter::new_must(Condition::new_nested(
-            JsonPath::new("nested_1"),
-            Filter::new_must(Condition::Field(nested_match)),
-        )),
-    ));
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let estimation = struct_segment
-        .payload_index
-        .borrow()
-        .estimate_cardinality(&filter, &hw_counter);
-
-    // not empty primary clauses
-    assert_eq!(estimation.primary_clauses.len(), 1);
-    eprintln!("primary_clauses = {:#?}", estimation.primary_clauses);
-    let primary_clause = estimation.primary_clauses.first().unwrap();
-
-    let expected_primary_clause = FieldCondition::new_match(
-        // full key expected
-        JsonPath::new(&format!(
-            "{STR_ROOT_PROJ_KEY}[].nested_1[].{nested_match_key}"
-        )),
-        "some value".to_owned().into(),
-    );
-
-    match primary_clause {
-        PrimaryCondition::Condition(field_condition) => {
-            assert_eq!(*field_condition, Box::new(expected_primary_clause));
-        }
-        o => panic!("unexpected primary clause: {o:?}"),
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let payload_index = struct_segment.payload_index.borrow();
-    let filter_context = payload_index.filter_context(&filter, &hw_counter);
-    let exact = struct_segment
-        .id_tracker
-        .borrow()
-        .iter_ids()
-        .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
-
-    eprintln!("exact = {exact:#?}");
-    eprintln!("estimation = {estimation:#?}");
-
-    assert!(exact <= estimation.max);
-    assert!(exact >= estimation.min);
-}
-
-/// Compare search with plain, struct, and mmap indices.
 fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
     let mut rnd = rand::rng();
 
     for _i in 0..ATTEMPTS {
@@ -912,8 +677,6 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             )
             .unwrap();
 
-        let hw_counter = HardwareCounterCell::new();
-
         let estimation = test_segments
             .struct_segment
             .payload_index
@@ -932,7 +695,6 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
             "{estimation:#?}",
         );
 
-        // Perform additional sort to break ties by score
         let mut plain_result_sorted_ties: Vec<ScoredPointTies> =
             plain_result.iter().map(|x| x.into()).collect_vec();
         plain_result_sorted_ties.sort();
@@ -947,17 +709,11 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
 
         ensure!(
             plain_result_sorted_ties.len() == struct_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            struct result{struct_result:?}",
+            "query vector {query_vector:?}\nquery filter {query_filter:?}\nplain result {plain_result:?}\nstruct result{struct_result:?}",
         );
         ensure!(
             plain_result_sorted_ties.len() == mmap_result_sorted_ties.len(),
-            "query vector {query_vector:?}\n\
-            query filter {query_filter:?}\n\
-            plain result {plain_result:?}\n\
-            mmap result  {mmap_result:?}",
+            "query vector {query_vector:?}\nquery filter {query_filter:?}\nplain result {plain_result:?}\nmmap result  {mmap_result:?}",
         );
 
         for (r1, r2, r3) in itertools::izip!(
@@ -969,22 +725,14 @@ fn test_struct_payload_index(test_segments: &TestSegments) -> Result<()> {
         {
             ensure!(
                 r1.id == r2.id,
-                "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                struct result{struct_result:?}"
+                "got different ScoredPoint {r1:?} and {r2:?} for\nquery vector {query_vector:?}\nquery filter {query_filter:?}\nplain result {plain_result:?}\nstruct result{struct_result:?}"
             );
-            ensure!((r1.score - r2.score) < 0.0001);
+            ensure!(f32::abs(r1.score - r2.score) < 0.0001);
             ensure!(
                 r1.id == r3.id,
-                "got different ScoredPoint {r1:?} and {r3:?} for\n\
-                query vector {query_vector:?}\n\
-                query filter {query_filter:?}\n\
-                plain result {plain_result:?}\n\
-                mmap result  {mmap_result:?}",
+                "got different ScoredPoint {r1:?} and {r3:?} for\nquery vector {query_vector:?}\nquery filter {query_filter:?}\nplain result {plain_result:?}\nmmap result  {mmap_result:?}",
             );
-            ensure!((r1.score - r3.score) < 0.0001);
+            ensure!(f32::abs(r1.score - r3.score) < 0.0001);
         }
     }
     Ok(())
@@ -995,17 +743,17 @@ fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Re
 
     let geo_bbox = GeoBoundingBox {
         top_left: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
+            lat: rnd.gen_range(LAT_RANGE),
+            lon: rnd.gen_range(LON_RANGE),
         },
         bottom_right: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
+            lat: rnd.gen_range(LAT_RANGE),
+            lon: rnd.gen_range(LON_RANGE),
         },
     };
 
     let condition = Condition::Field(FieldCondition::new_geo_bounding_box(
-        JsonPath::new("geo_key"),
+        JsonPath::new(GEO_KEY),
         geo_bbox,
     ));
 
@@ -1017,17 +765,17 @@ fn test_struct_payload_geo_boundingbox_index(test_segments: &TestSegments) -> Re
 fn test_struct_payload_geo_radius_index(test_segments: &TestSegments) -> Result<()> {
     let mut rnd = rand::rng();
 
-    let r_meters = rnd.random_range(1.0..10000.0);
+    let r_meters = rnd.gen_range(1.0..10000.0);
     let geo_radius = GeoRadius {
         center: GeoPoint {
-            lon: rnd.random_range(LON_RANGE),
-            lat: rnd.random_range(LAT_RANGE),
+            lat: rnd.gen_range(LAT_RANGE),
+            lon: rnd.gen_range(LON_RANGE),
         },
         radius: r_meters,
     };
 
     let condition = Condition::Field(FieldCondition::new_geo_radius(
-        JsonPath::new("geo_key"),
+        JsonPath::new(GEO_KEY),
         geo_radius,
     ));
 
@@ -1045,12 +793,12 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
         let mut line = GeoLineString {
             points: (0..polygon_edge)
                 .map(|_| GeoPoint {
-                    lon: rnd.random_range(LON_RANGE),
-                    lat: rnd.random_range(LAT_RANGE),
+                    lat: rnd.gen_range(LAT_RANGE),
+                    lon: rnd.gen_range(LON_RANGE),
                 })
                 .collect(),
         };
-        line.points.push(line.points[0]); // add last point that is identical to the first
+        line.points.push(line.points[0]);
         line
     }
 
@@ -1067,7 +815,7 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     };
 
     let condition = Condition::Field(FieldCondition::new_geo_polygon(
-        JsonPath::new("geo_key"),
+        JsonPath::new(GEO_KEY),
         geo_polygon,
     ));
 
@@ -1076,43 +824,56 @@ fn test_struct_payload_geo_polygon_index(test_segments: &TestSegments) -> Result
     validate_geo_filter(test_segments, query_filter).context(here!())
 }
 
-#[test]
-fn test_struct_payload_index_nested_fields() {
-    // Compare search with plain and struct indexes
-    let dir1 = Builder::new().prefix("segment1_dir").tempdir().unwrap();
-    let dir2 = Builder::new().prefix("segment2_dir").tempdir().unwrap();
-
+fn validate_geo_filter(test_segments: &TestSegments, query_filter: Filter) -> Result<()> {
     let mut rnd = rand::rng();
+    let hw_counter = HardwareCounterCell::new();
 
-    let (struct_segment, plain_segment) =
-        build_test_segments_nested_payload(dir1.path(), dir2.path());
+    for _i in 0..ATTEMPTS {
+        let query = random_vector(&mut rnd, DIM).into();
 
-    let attempts = 100;
-    for _i in 0..attempts {
-        let query_vector = random_vector(&mut rnd, DIM).into();
-        let query_filter = random_nested_filter(&mut rnd);
-        let plain_result = plain_segment
+        let plain_result = test_segments
+            .plain_segment
             .search(
                 DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
+                &query,
+                &WithPayload::default(),
                 &false.into(),
                 Some(&query_filter),
                 5,
                 None,
             )
             .unwrap();
-        let struct_result = struct_segment
+
+        let estimation = test_segments
+            .plain_segment
+            .payload_index
+            .borrow()
+            .estimate_cardinality(&query_filter, &hw_counter);
+
+        ensure!(
+            estimation.min <= estimation.exp,
+            "{estimation:#?}"
+        );
+        ensure!(
+            estimation.exp <= estimation.max,
+            "{estimation:#?}"
+        );
+        ensure!(
+            estimation.max
+                <= test_segments
+                    .struct_segment
+                    .id_tracker
+                    .borrow()
+                    .available_point_count(),
+            "{estimation:#?}",
+        );
+
+        let struct_result = test_segments
+            .struct_segment
             .search(
                 DEFAULT_VECTOR_NAME,
-                &query_vector,
-                &WithPayload {
-                    enable: true,
-                    payload_selector: None,
-                },
+                &query,
+                &WithPayload::default(),
                 &false.into(),
                 Some(&query_filter),
                 5,
@@ -1120,105 +881,47 @@ fn test_struct_payload_index_nested_fields() {
             )
             .unwrap();
 
-        let hw_counter = HardwareCounterCell::new();
-
-        let estimation = struct_segment
+        let estimation = test_segments
+            .struct_segment
             .payload_index
             .borrow()
             .estimate_cardinality(&query_filter, &hw_counter);
 
-        assert!(estimation.min <= estimation.exp, "{estimation:#?}");
-        assert!(estimation.exp <= estimation.max, "{estimation:#?}");
-        assert!(
-            estimation.max <= struct_segment.id_tracker.borrow().available_point_count(),
+        ensure!(
+            estimation.min <= estimation.exp,
+            "{estimation:#?}"
+        );
+        ensure!(
+            estimation.exp <= estimation.max,
+            "{estimation:#?}"
+        );
+        ensure!(
+            estimation.max
+                <= test_segments
+                    .struct_segment
+                    .id_tracker
+                    .borrow()
+                    .available_point_count(),
             "{estimation:#?}",
         );
 
-        // warning: report flakiness at https://github.com/qdrant/qdrant/issues/534
-        plain_result
-            .iter()
-            .zip(struct_result.iter())
-            .for_each(|(r1, r2)| {
-                assert_eq!(
-                    r1.id, r2.id,
-                    "got different ScoredPoint {r1:?} and {r2:?} for\n\
-                    query vector {query_vector:?}\n\
-                    query filter {query_filter:?}\n\
-                    plain result {plain_result:?}\n\
-                    struct result{struct_result:?}"
-                );
-                assert!((r1.score - r2.score) < 0.0001)
-            });
-    }
-}
-
-#[test]
-fn test_update_payload_index_type() {
-    let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-    let mut payload_storage = InMemoryPayloadStorage::default();
-
-    let point_num = 10;
-    let mut points = HashMap::new();
-
-    let mut payloads: Vec<Payload> = vec![];
-    for i in 0..point_num {
-        payloads.push(payload_json! {"field": i});
-    }
-
-    let hw_counter = HardwareCounterCell::new();
-
-    for (idx, payload) in payloads.into_iter().enumerate() {
-        points.insert(idx, payload.clone());
-        payload_storage
-            .set(idx as PointOffsetType, &payload, &hw_counter)
-            .unwrap();
+        for (r1, r2) in plain_result.iter().zip(struct_result.iter()) {
+            ensure!(
+                r1.id == r2.id,
+                "Mismatch IDs: {r1:?} vs {r2:?}, query: {query:?}, filter: {query_filter:?}"
+            );
+            ensure!(
+                (r1.score - r2.score).abs() < 0.0001,
+                "Score mismatch: {r1:?} vs {r2:?}, query: {query:?}, filter: {query_filter:?}"
+            );
+        }
     }
 
-    let wrapped_payload_storage = Arc::new(AtomicRefCell::new(payload_storage.into()));
-    let id_tracker = Arc::new(AtomicRefCell::new(FixtureIdTracker::new(point_num)));
-
-    let mut index = StructPayloadIndex::open(
-        wrapped_payload_storage,
-        id_tracker,
-        HashMap::new(),
-        dir.path(),
-        true,
-    )
-    .unwrap();
-
-    let field = JsonPath::new("field");
-
-    // set field to Integer type
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
-
-    // update field to Keyword type
-    index.set_indexed(&field, Keyword, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Keyword)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), 0); // only one field index for Keyword
-
-    // set field to Integer type (again)
-    index.set_indexed(&field, Integer, &hw_counter).unwrap();
-    assert_eq!(
-        *index.indexed_fields().get(&field).unwrap(),
-        FieldType(Integer)
-    );
-    let field_index = index.field_indexes.get(&field).unwrap();
-    assert_eq!(field_index[0].count_indexed_points(), point_num);
-    assert_eq!(field_index[1].count_indexed_points(), point_num);
+    Ok(())
 }
 
 fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Result<()> {
+    let hw_counter = HardwareCounterCell::new();
     let keywords: IndexSet<String, FnvBuildHasher> = ["value1", "value2"]
         .iter()
         .map(|&i| i.to_string())
@@ -1230,8 +933,6 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
 
     let filter = Filter::new_must(Condition::Field(any_match.clone()));
 
-    let hw_counter = HardwareCounterCell::new();
-
     let estimation = test_segments
         .struct_segment
         .payload_index
@@ -1241,17 +942,17 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
     ensure!(estimation.primary_clauses.len() == 1);
     for clause in estimation.primary_clauses.iter() {
         let expected_primary_clause = any_match.clone();
-
         match clause {
             PrimaryCondition::Condition(field_condition) => {
-                ensure!(*field_condition == Box::new(expected_primary_clause));
+                ensure!(
+                    *field_condition == Box::new(expected_primary_clause),
+                    "Mismatch in primary clause"
+                );
             }
-            o => panic!("unexpected primary clause: {o:?}"),
+            o => panic!("Unexpected primary clause: {o:?}"),
         }
     }
 
-    let hw_counter = HardwareCounterCell::new();
-
     let payload_index = test_segments.struct_segment.payload_index.borrow();
     let filter_context = payload_index.filter_context(&filter, &hw_counter);
     let exact = test_segments
@@ -1260,8 +961,7 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
         .borrow()
         .iter_ids()
         .filter(|x| filter_context.check(*x))
-        .collect_vec()
-        .len();
+        .count();
 
     eprintln!("exact = {exact:#?}");
     eprintln!("estimation = {estimation:#?}");
@@ -1272,22 +972,15 @@ fn test_any_matcher_cardinality_estimation(test_segments: &TestSegments) -> Resu
     Ok(())
 }
 
-/// FacetParams fixture without a filter
 fn keyword_facet_request() -> FacetParams {
-    let limit = 1000;
-    let key: JsonPath = STR_KEY.try_into().unwrap();
-    let exact = false; // This is only used at local shard level
-
-    // *** Without filter ***
     FacetParams {
-        key: key.clone(),
-        limit,
+        key: JsonPath::new(STR_KEY),
+        limit: 1000,
         filter: None,
-        exact,
+        exact: false,
     }
 }
 
-/// Checks that the counts are the same as counting each value exactly.
 fn validate_facet_result(
     segment: &Segment,
     facet_hits: HashMap<FacetValue, usize>,
@@ -1296,94 +989,4 @@ fn validate_facet_result(
     let hw_counter = HardwareCounterCell::new();
 
     for (value, count) in facet_hits.iter() {
-        // Compare against exact count
-        let value = ValueVariants::from(value.clone());
-
-        let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
-            JsonPath::new(STR_KEY),
-            Match::from(value.clone()),
-        )));
-        let count_filter = Filter::merge_opts(Some(count_filter), filter.clone());
-
-        let exact = segment
-            .read_filtered(
-                None,
-                None,
-                count_filter.as_ref(),
-                &Default::default(),
-                &hw_counter,
-            )
-            .len();
-
-        ensure!(*count == exact, "Facet value: {value:?}");
-    }
-
-    Ok(())
-}
-
-fn test_struct_keyword_facet(test_segments: &TestSegments) -> Result<()> {
-    let request = keyword_facet_request();
-
-    // Plain segment should fail, as it does not have a keyword index
-    assert!(
-        test_segments
-            .plain_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .is_err(),
-    );
-
-    // Struct segment
-    let facet_hits = test_segments
-        .struct_segment
-        .facet(&request, &Default::default(), &Default::default())
-        .unwrap();
-
-    validate_facet_result(&test_segments.struct_segment, facet_hits, None).context(here!())
-}
-
-fn test_mmap_keyword_facet(test_segments: &TestSegments) -> Result<()> {
-    let request = keyword_facet_request();
-
-    let facet_hits = test_segments
-        .mmap_segment
-        .facet(&request, &Default::default(), &Default::default())
-        .unwrap();
-
-    validate_facet_result(&test_segments.mmap_segment, facet_hits, None).context(here!())
-}
-
-fn test_struct_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
-    let mut request = keyword_facet_request();
-
-    for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
-        request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
-            .struct_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .unwrap();
-
-        validate_facet_result(&test_segments.struct_segment, facet_hits, Some(filter))
-            .context(here!())?
-    }
-    Ok(())
-}
-
-fn test_mmap_keyword_facet_filtered(test_segments: &TestSegments) -> Result<()> {
-    let mut request = keyword_facet_request();
-
-    for _ in 0..ATTEMPTS {
-        let filter = random_filter(&mut rand::rng(), 3);
-        request.filter = Some(filter.clone());
-
-        let facet_hits = test_segments
-            .mmap_segment
-            .facet(&request, &Default::default(), &Default::default())
-            .unwrap();
-
-        validate_facet_result(&test_segments.mmap_segment, facet_hits, Some(filter))
-            .context(here!())?
-    }
-    Ok(())
-}
\ No newline at end of file
+        let count_filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
\ No newline at end of file
