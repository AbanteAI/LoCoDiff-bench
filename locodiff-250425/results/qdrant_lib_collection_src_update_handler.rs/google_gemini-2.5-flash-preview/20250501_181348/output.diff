--- qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual)@@ -1,8 +1,8 @@ use std::cmp::min;
 use std::collections::HashSet;
 use std::path::{Path, PathBuf};
+use std::sync::atomic::{AtomicBool, AtomicU64, AtomicUsize, Ordering};
 use std::sync::Arc;
-use std::sync::atomic::{AtomicBool, AtomicU64, AtomicUsize, Ordering};
 
 use common::budget::ResourceBudget;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
@@ -154,12 +154,12 @@             optimizers_log,
             total_optimized_points,
             optimizer_resource_budget,
+            flush_interval_sec,
             flush_worker: None,
             flush_stop: None,
             runtime_handle,
             wal,
             wal_keep_from: Arc::new(u64::MAX.into()),
-            flush_interval_sec,
             optimization_handles: Arc::new(TokioMutex::new(vec![])),
             max_optimization_threads,
             clocks,
@@ -205,7 +205,7 @@ 
     pub fn stop_flush_worker(&mut self) {
         if let Some(flush_stop) = self.flush_stop.take() {
-            if let Err(()) = flush_stop.send(()) {
+            if flush_stop.send(()).is_err() {
                 warn!("Failed to stop flush worker as it is already stopped.");
             }
         }
@@ -229,7 +229,7 @@ 
         let mut opt_handles_guard = self.optimization_handles.lock().await;
         let opt_handles = std::mem::take(&mut *opt_handles_guard);
-        let stopping_handles = opt_handles
+        let stopping_handles: Vec<_> = opt_handles
             .into_iter()
             .filter_map(|h| h.stop())
             .collect_vec();
@@ -284,8 +284,8 @@         'outer: for optimizer in optimizers.iter() {
             loop {
                 // Return early if we reached the optimization job limit
-                if limit.map(|extra| handles.len() >= extra).unwrap_or(false) {
-                    log::trace!("Reached optimization job limit, postponing other optimizations");
+                if limit.is_some_and(|extra| handles.len() >= extra) {
+                    trace!("Reached optimization job limit, postponing other optimizations");
                     break 'outer;
                 }
 
@@ -340,7 +340,7 @@                     {
                         let resource_budget = optimizer_resource_budget.clone();
                         let segments = segments.clone();
-                        move |stopped| {
+                        move |stopped| unsafe { // Unsafety: panics are marked as unsafe and must be handled here
                             // Track optimizer status
                             let tracker = Tracker::start(optimizer.as_ref().name(), nsi.clone());
                             let tracker_handle = tracker.handle();
@@ -354,7 +354,7 @@                                 resource_budget,
                                 stopped,
                             ) {
-                                // Perform some actions when optimization if finished
+                                // Perform somections when optimization if finished
                                 Ok(optimized_points) => {
                                     let is_optimized = optimized_points > 0;
                                     total_optimized_points
@@ -364,35 +364,25 @@                                     is_optimized
                                 }
                                 // Handle and report errors
-                                Err(error) => match error {
-                                    CollectionError::Cancelled { description } => {
-                                        debug!("Optimization cancelled - {description}");
-                                        tracker_handle
-                                            .update(TrackerStatus::Cancelled(description));
-                                        false
-                                    }
-                                    _ => {
-                                        segments.write().report_optimizer_error(error.clone());
-
-                                        // Error of the optimization can not be handled by API user
-                                        // It is only possible to fix after full restart,
-                                        // so the best available action here is to stop whole
-                                        // optimization thread and log the error
-                                        log::error!("Optimization error: {error}");
-
-                                        tracker_handle
-                                            .update(TrackerStatus::Error(error.to_string()));
-
-                                        panic!("Optimization error: {error}");
-                                    }
-                                },
+                                Err(error) => { // Cannot use match as it is unstable during unwinding
+                                    let status = match matches!(error, CollectionError::Cancelled { .. }) {
+                                        true => TrackerStatus::Cancelled(error.to_string()),
+                                        false => {
+                                            segments.write().report_optimizer_error(error.clone());
+                                            TrackerStatus::Error(error.to_string())
+                                        }
+                                    };
+                                    log::error!("Optimization error: {error}");
+                                    tracker_handle.update(status);
+                                    panic!("Optimization error: {error}"); // Panics are expected to be caught by handle.join_and_handle_panic()
+                                }
                             }
                         }
                     },
                     // Panic handler
                     Some(Box::new(move |panic_payload| {
                         let message = panic::downcast_str(&panic_payload).unwrap_or("");
-                        let separator = if !message.is_empty() { ": " } else { "" };
+                        let separator = if message.is_empty() { "" } else { ": " };
 
                         warn!(
                             "Optimization task panicked, collection may be in unstable state\
@@ -477,7 +467,6 @@         (has_triggered_any_optimizers, has_suboptimal_optimizers)
     }
 
-    #[allow(clippy::too_many_arguments)]
     pub(crate) async fn process_optimization(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         segments: LockedSegmentHolder,
@@ -507,39 +496,6 @@         handles.append(&mut new_handles);
     }
 
-    /// Cleanup finalized optimization task handles
-    ///
-    /// This finds and removes completed tasks from our list of optimization handles.
-    /// It also propagates any panics (and unknown errors) so we properly handle them if desired.
-    ///
-    /// It is essential to call this every once in a while for handling panics in time.
-    ///
-    /// Returns true if any optimization handle was finished, joined and removed.
-    async fn cleanup_optimization_handles(
-        optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>>>,
-    ) -> bool {
-        // Remove finished handles
-        let finished_handles: Vec<_> = {
-            let mut handles = optimization_handles.lock().await;
-            (0..handles.len())
-                .filter(|i| handles[*i].is_finished())
-                .collect::<Vec<_>>()
-                .into_iter()
-                .rev()
-                .map(|i| handles.swap_remove(i))
-                .collect()
-        };
-
-        let finished_any = !finished_handles.is_empty();
-
-        // Finalize all finished handles to propagate panics
-        for handle in finished_handles {
-            handle.join_and_handle_panic().await;
-        }
-
-        finished_any
-    }
-
     #[allow(clippy::too_many_arguments)]
     async fn optimization_worker_fn(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
@@ -558,8 +514,7 @@         let max_handles = max_handles.unwrap_or(usize::MAX);
         let max_indexing_threads = optimizers
             .first()
-            .map(|optimizer| optimizer.hnsw_config().max_indexing_threads)
-            .unwrap_or_default();
+            .map_or(0, |optimizer| optimizer.hnsw_config().max_indexing_threads);
 
         // Asynchronous task to trigger optimizers once CPU budget is available again
         let mut resource_available_trigger: Option<JoinHandle<()>> = None;
@@ -701,13 +656,10 @@                         Ok(())
                     };
 
+                    let hw_counter = hw_measurements.get_counter_cell();
+
                     let operation_result = flush_res.and_then(|_| {
-                        CollectionUpdater::update(
-                            &segments,
-                            op_num,
-                            operation,
-                            &hw_measurements.get_counter_cell(),
-                        )
+                        CollectionUpdater::update(&segments, op_num, operation, &hw_counter)
                     });
 
                     let res = match operation_result {
@@ -797,6 +749,7 @@                 }
             };
 
+
             // Acknowledge confirmed version in WAL, but don't acknowledge the specified
             // `keep_from` index or higher.
             // This is to prevent truncating WAL entries that other bits of code still depend on
