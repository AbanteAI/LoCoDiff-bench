--- qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual)@@ -37,6 +37,7 @@ use crate::shards::local_shard::LocalShardClocks;
 use crate::wal::WalError;
 use crate::wal_delta::LockedWal;
+
 
 /// Interval at which the optimizer worker cleans up old optimization handles
 ///
@@ -213,6 +214,7 @@ 
     /// Gracefully wait before all optimizations stop
     /// If some optimization is in progress - it will be finished before shutdown.
+    /// Blocking function.
     pub async fn wait_workers_stops(&mut self) -> CollectionResult<()> {
         let maybe_handle = self.update_worker.take();
         if let Some(handle) = maybe_handle {
@@ -263,9 +265,6 @@         Ok(0)
     }
 
-    /// Checks conditions for all optimizers until there is no suggested segment
-    /// Starts a task for each optimization
-    /// Returns handles for started tasks
     pub(crate) fn launch_optimization<F>(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         optimizers_log: Arc<Mutex<TrackerLog>>,
@@ -372,6 +371,8 @@                                         false
                                     }
                                     _ => {
+                                        // Save only the first error
+                                        // If is more likely to be the real cause of all further problems
                                         segments.write().report_optimizer_error(error.clone());
 
                                         // Error of the optimization can not be handled by API user
@@ -567,8 +568,7 @@         loop {
             let result = timeout(OPTIMIZER_CLEANUP_INTERVAL, receiver.recv()).await;
 
-            let cleaned_any =
-                Self::cleanup_optimization_handles(optimization_handles.clone()).await;
+            let cleaned_any = Self::cleanup_optimization_handles(optimization_handles.clone()).await;
 
             // Either continue below here with the worker, or reloop/break
             // Decision logic doing one of three things:
