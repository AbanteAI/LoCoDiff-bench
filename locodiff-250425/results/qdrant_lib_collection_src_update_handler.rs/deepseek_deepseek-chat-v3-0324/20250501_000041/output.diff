
index cb922e86..e4c922a0 100644
--- a/qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected):tmp/tmpx36r3mdo_expected.txt	
+++ b/qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual):tmp/tmpzsgui5s__actual.txt	
@@ -127,8 +127,8 @@ pub struct UpdateHandler {
     has_triggered_optimizers: Arc<AtomicBool>,
 }
 
+#[allow(clippy::too_many_arguments)]
 impl UpdateHandler {
-    #[allow(clippy::too_many_arguments)]
     pub fn new(
         shared_storage_config: Arc<SharedStorageConfig>,
         payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
@@ -229,10 +229,7 @@ impl UpdateHandler {
 
         let mut opt_handles_guard = self.optimization_handles.lock().await;
         let opt_handles = std::mem::take(&mut *opt_handles_guard);
-        let stopping_handles = opt_handles
-            .into_iter()
-            .filter_map(|h| h.stop())
-            .collect_vec();
+        let stopping_handles = opt_handles.into_iter().filter_map(|h| h.stop()).collect_vec();
 
         for res in stopping_handles {
             res.await?;
@@ -280,7 +277,6 @@ impl UpdateHandler {
     {
         let mut scheduled_segment_ids = HashSet::<_>::default();
         let mut handles = vec![];
-
         'outer: for optimizer in optimizers.iter() {
             loop {
                 // Return early if we reached the optimization job limit
@@ -366,7 +362,7 @@ impl UpdateHandler {
                                 // Handle and report errors
                                 Err(error) => match error {
                                     CollectionError::Cancelled { description } => {
-                                        debug!("Optimization cancelled - {description}");
+                                        debug!("Optimization cancelled - {}", description);
                                         tracker_handle
                                             .update(TrackerStatus::Cancelled(description));
                                         false
@@ -378,7 +374,7 @@ impl UpdateHandler {
                                         // It is only possible to fix after full restart,
                                         // so the best available action here is to stop whole
                                         // optimization thread and log the error
-                                        log::error!("Optimization error: {error}");
+                                        log::error!("Optimization error: {}", error);
 
                                         tracker_handle
                                             .update(TrackerStatus::Error(error.to_string()));
@@ -391,25 +387,24 @@ impl UpdateHandler {
                     },
                     // Panic handler
                     Some(Box::new(move |panic_payload| {
-                        let message = panic::downcast_str(&panic_payload).unwrap_or("");
-                        let separator = if !message.is_empty() { ": " } else { "" };
+                        let panic_msg = panic::downcast_str(&panic_payload).unwrap_or("");
+                        let separator = if !panic_msg.is_empty() { ": " } else { "" };
 
                         warn!(
                             "Optimization task panicked, collection may be in unstable state\
-                             {separator}{message}"
+                             {separator}{panic_msg}"
                         );
 
                         segments
                             .write()
                             .report_optimizer_error(CollectionError::service_error(format!(
-                                "Optimization task panicked{separator}{message}"
+                                "Optimization task panicked{separator}{panic_msg}"
                             )));
                     })),
                 );
                 handles.push(handle);
             }
         }
-
         handles
     }
 
@@ -811,7 +806,7 @@ impl UpdateHandler {
 
             let ack = confirmed_version.min(keep_from.saturating_sub(1));
 
-            if let Err(err) = clocks.store_if_changed(&shard_path).await {
+            if let Err(err) = clocks.store(&shard_path).await {
                 log::warn!("Failed to store clock maps to disk: {err}");
                 segments.write().report_optimizer_error(err);
             }
