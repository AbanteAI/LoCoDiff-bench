
index cb922e86..d491d4dc 100644
--- a/qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected):tmp/tmpq8pnn4un_expected.txt	
+++ b/qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual):tmp/tmp1u6adrq6_actual.txt	
@@ -10,7 +10,6 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::panic;
 use itertools::Itertools;
 use log::{debug, error, info, trace, warn};
-use parking_lot::Mutex;
 use segment::common::operation_error::OperationResult;
 use segment::index::hnsw_index::num_rayon_threads;
 use segment::types::SeqNumberType;
@@ -266,6 +265,7 @@ impl UpdateHandler {
     /// Checks conditions for all optimizers until there is no suggested segment
     /// Starts a task for each optimization
     /// Returns handles for started tasks
+    #[allow(clippy::too_many_arguments)]
     pub(crate) fn launch_optimization<F>(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         optimizers_log: Arc<Mutex<TrackerLog>>,
@@ -372,6 +372,8 @@ impl UpdateHandler {
                                         false
                                     }
                                     _ => {
+                                        // Save only the first error
+                                        // If is more likely to be the real cause of all further problems
                                         segments.write().report_optimizer_error(error.clone());
 
                                         // Error of the optimization can not be handled by API user
@@ -751,9 +753,10 @@ impl UpdateHandler {
         optimize_sender
             .send(OptimizerSignal::Stop)
             .await
-            .unwrap_or_else(|_| debug!("Optimizer already stopped"));
+            .unwrap_or_else(|_| debug!("Optimizer alerady stopped"));
     }
 
+    #[allow(clippy::too_many_arguments)]
     async fn flush_worker(
         segments: LockedSegmentHolder,
         wal: LockedWal,
