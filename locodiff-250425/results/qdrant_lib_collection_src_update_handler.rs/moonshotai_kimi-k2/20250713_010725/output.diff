
index cb922e861..034b24f03 100644
--- a/qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected):tmp/tmpwm708rl8_expected.txt	
+++ b/qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual):tmp/tmpdt9zymn7_actual.txt	
@@ -19,7 +19,7 @@ use tokio::sync::mpsc::{self, Receiver, Sender};
 use tokio::sync::{Mutex as TokioMutex, oneshot};
 use tokio::task::{self, JoinHandle};
 use tokio::time::error::Elapsed;
-use tokio::time::{Duration, timeout};
+use tokio::time::{timeout, Duration};
 
 use crate::collection::payload_index_schema::PayloadIndexSchema;
 use crate::collection_manager::collection_updater::CollectionUpdater;
@@ -28,7 +28,7 @@ use crate::collection_manager::optimizers::segment_optimizer::{
     OptimizerThresholds, SegmentOptimizer,
 };
 use crate::collection_manager::optimizers::{Tracker, TrackerLog, TrackerStatus};
-use crate::common::stoppable_task::{StoppableTaskHandle, spawn_stoppable};
+use crate::common::stoppable_task::{spawn_stoppable, StoppableTaskHandle};
 use crate::config::CollectionParams;
 use crate::operations::CollectionUpdateOperations;
 use crate::operations::shared_storage_config::SharedStorageConfig;
@@ -56,6 +56,7 @@ pub struct OperationData {
     pub wait: bool,
     /// Callback notification channel
     pub sender: Option<oneshot::Sender<CollectionResult<usize>>>,
+    /// Hardware measurements accumulator
     pub hw_measurements: HwMeasurementAcc,
 }
 
@@ -255,7 +256,7 @@ impl UpdateHandler {
                         &segments,
                         op_num,
                         operation.operation,
-                        &HardwareCounterCell::disposable(), // Internal operation, no measurement needed
+                        &HardwareCounterCell::disposable(),
                     )?;
                 }
             }
@@ -263,8 +264,6 @@ impl UpdateHandler {
         Ok(0)
     }
 
-    /// Checks conditions for all optimizers until there is no suggested segment
-    /// Starts a task for each optimization
     /// Returns handles for started tasks
     pub(crate) fn launch_optimization<F>(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
@@ -285,7 +284,7 @@ impl UpdateHandler {
             loop {
                 // Return early if we reached the optimization job limit
                 if limit.map(|extra| handles.len() >= extra).unwrap_or(false) {
-                    log::trace!("Reached optimization job limit, postponing other optimizations");
+                    trace!("Reached optimization job limit, postponing other optimizations");
                     break 'outer;
                 }
 
@@ -295,8 +294,6 @@ impl UpdateHandler {
                     break;
                 }
 
-                debug!("Optimizing segments: {:?}", &nonoptimal_segment_ids);
-
                 // Determine how many Resources we prefer for optimization task, acquire permit for it
                 // And use same amount of IO threads as CPUs
                 let max_indexing_threads = optimizer.hnsw_config().max_indexing_threads;
@@ -305,7 +302,7 @@ impl UpdateHandler {
                     // If there is no Resource budget, break outer loop and return early
                     // If we have no handles (no optimizations) trigger callback so that we wake up
                     // our optimization worker to try again later, otherwise it could get stuck
-                    log::trace!(
+                    trace!(
                         "No available IO permit for {} optimizer, postponing",
                         optimizer.name(),
                     );
@@ -314,7 +311,7 @@ impl UpdateHandler {
                     }
                     break 'outer;
                 };
-                log::trace!(
+                trace!(
                     "Acquired {} IO permit for {} optimizer",
                     permit.num_io,
                     optimizer.name(),
@@ -374,11 +371,11 @@ impl UpdateHandler {
                                     _ => {
                                         segments.write().report_optimizer_error(error.clone());
 
-                                        // Error of the optimization can not be handled by API user
+                                        // Error of the optimization cannot be handled by API user
                                         // It is only possible to fix after full restart,
                                         // so the best available action here is to stop whole
                                         // optimization thread and log the error
-                                        log::error!("Optimization error: {error}");
+                                        error!("Optimization error: {error}");
 
                                         tracker_handle
                                             .update(TrackerStatus::Error(error.to_string()));
@@ -447,7 +444,7 @@ impl UpdateHandler {
         };
 
         if no_segment_with_capacity {
-            log::debug!("Creating new appendable segment, all existing segments are over capacity");
+            debug!("Creating new appendable segment, all existing segments are over capacity");
             segments.write().create_appendable_segment(
                 segments_path,
                 collection_params,
@@ -477,7 +474,6 @@ impl UpdateHandler {
         (has_triggered_any_optimizers, has_suboptimal_optimizers)
     }
 
-    #[allow(clippy::too_many_arguments)]
     pub(crate) async fn process_optimization(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         segments: LockedSegmentHolder,
@@ -540,7 +536,6 @@ impl UpdateHandler {
         finished_any
     }
 
-    #[allow(clippy::too_many_arguments)]
     async fn optimization_worker_fn(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         sender: Sender<OptimizerSignal>,
@@ -561,7 +556,7 @@ impl UpdateHandler {
             .map(|optimizer| optimizer.hnsw_config().max_indexing_threads)
             .unwrap_or_default();
 
-        // Asynchronous task to trigger optimizers once CPU budget is available again
+        // Asynchronous task to trigger optimizers once resource budget is available again
         let mut resource_available_trigger: Option<JoinHandle<()>> = None;
 
         loop {
@@ -588,9 +583,7 @@ impl UpdateHandler {
                     // tasks that'll trigger this for us. If we don't run optimizers here we might
                     // get stuck into yellow state until a new update operation is received.
                     // See: <https://github.com/qdrant/qdrant/pull/5111>
-                    log::warn!(
-                        "Cleaned a optimization handle after timeout, explicitly triggering optimizers",
-                    );
+                    warn!("Cleaned optimization handle after timeout, explicitly triggering optimizers");
                     true
                 }
                 // Hit optimizer cleanup interval, did not clean up a task: do 2
@@ -612,9 +605,7 @@ impl UpdateHandler {
                     &payload_index_schema.read(),
                 );
                 if let Err(err) = result {
-                    log::error!(
-                        "Failed to ensure there are appendable segments with capacity: {err}"
-                    );
+                    error!("Failed to ensure there are appendable segments with capacity: {err}");
                     panic!("Failed to ensure there are appendable segments with capacity: {err}");
                 }
             }
@@ -652,13 +643,13 @@ impl UpdateHandler {
             }
 
             // Determine optimization handle limit based on max handles we allow
-            // Not related to the CPU budget, but a different limit for the maximum number
+            // Not related to the resource budget, but a different limit for the maximum number
             // of concurrent concrete optimizations per shard as configured by the user in
             // the Qdrant configuration.
             // Skip if we reached limit, an ongoing optimization that finishes will trigger this loop again
             let limit = max_handles.saturating_sub(optimization_handles.lock().await.len());
             if limit == 0 {
-                log::trace!("Skipping optimization check, we reached optimization thread limit");
+                trace!("Skipping optimization check, we reached optimization thread limit");
                 continue;
             }
 
@@ -736,9 +727,7 @@ impl UpdateHandler {
                     .send(OptimizerSignal::Nop)
                     .await
                     .unwrap_or_else(|_| {
-                        info!(
-                            "Can't notify optimizers, assume process is dead. Restart is required"
-                        );
+                        info!("Can't notify optimizers, assume process is dead. Restart is required");
                     }),
                 UpdateSignal::Plunger(callback_sender) => {
                     callback_sender.send(()).unwrap_or_else(|_| {
@@ -812,12 +801,12 @@ impl UpdateHandler {
             let ack = confirmed_version.min(keep_from.saturating_sub(1));
 
             if let Err(err) = clocks.store_if_changed(&shard_path).await {
-                log::warn!("Failed to store clock maps to disk: {err}");
+                warn!("Failed to store clock maps to disk: {err}");
                 segments.write().report_optimizer_error(err);
             }
 
             if let Err(err) = wal.lock().await.ack(ack) {
-                log::warn!("Failed to acknowledge WAL version: {err}");
+                warn!("Failed to acknowledge WAL version: {err}");
                 segments.write().report_optimizer_error(err);
             }
         }
@@ -837,7 +826,7 @@ impl UpdateHandler {
     }
 }
 
-/// Trigger optimizers when CPU budget is available
+/// Trigger optimizers when resource budget is available
 fn trigger_optimizers_on_resource_budget(
     optimizer_resource_budget: ResourceBudget,
     desired_cpus: usize,
@@ -845,15 +834,15 @@ fn trigger_optimizers_on_resource_budget(
     sender: Sender<OptimizerSignal>,
 ) -> JoinHandle<()> {
     task::spawn(async move {
-        log::trace!("Skipping optimization checks, waiting for CPU budget to be available");
+        log::trace!("Skipping optimization checks, waiting for resource budget to be available");
         optimizer_resource_budget
             .notify_on_budget_available(desired_cpus, desired_io)
             .await;
-        log::trace!("Continue optimization checks, new CPU budget available");
+        log::trace!("Continue optimization checks, new resource budget available");
 
         // Trigger optimizers with Nop operation
         sender.send(OptimizerSignal::Nop).await.unwrap_or_else(|_| {
-            log::info!("Can't notify optimizers, assume process is dead. Restart is required")
+            log::info!("Can't notify optimizers, assume process is dead. Restart is required");
         });
     })
 }
\ No newline at end of file
