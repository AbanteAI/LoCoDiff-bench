
index cb922e861..03fd47419 100644
--- a/qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected):tmp/tmp3zcxfiju_expected.txt	
+++ b/qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual):tmp/tmpjt0twcpf_actual.txt	
@@ -104,10 +104,6 @@ pub struct UpdateHandler {
     update_worker: Option<JoinHandle<()>>,
     /// Process, that listens for post-update signals and performs optimization
     optimizer_worker: Option<JoinHandle<()>>,
-    /// Process that periodically flushes segments and tries to truncate wal
-    flush_worker: Option<JoinHandle<()>>,
-    /// Sender to stop flush worker
-    flush_stop: Option<oneshot::Sender<()>>,
     runtime_handle: Handle,
     /// WAL, required for operations
     wal: LockedWal,
@@ -213,6 +209,7 @@ impl UpdateHandler {
 
     /// Gracefully wait before all optimizations stop
     /// If some optimization is in progress - it will be finished before shutdown.
+    /// Blocking function.
     pub async fn wait_workers_stops(&mut self) -> CollectionResult<()> {
         let maybe_handle = self.update_worker.take();
         if let Some(handle) = maybe_handle {
@@ -222,10 +219,6 @@ impl UpdateHandler {
         if let Some(handle) = maybe_handle {
             handle.await?;
         }
-        let maybe_handle = self.flush_worker.take();
-        if let Some(handle) = maybe_handle {
-            handle.await?;
-        }
 
         let mut opt_handles_guard = self.optimization_handles.lock().await;
         let opt_handles = std::mem::take(&mut *opt_handles_guard);
@@ -269,7 +262,7 @@ impl UpdateHandler {
     pub(crate) fn launch_optimization<F>(
         optimizers: Arc<Vec<Arc<Optimizer>>>,
         optimizers_log: Arc<Mutex<TrackerLog>>,
-        total_optimized_points: Arc<AtomicUsize>,
+        total_optimized_points: Arc<AtomicUsize>>,
         optimizer_resource_budget: &ResourceBudget,
         segments: LockedSegmentHolder,
         callback: F,
@@ -396,7 +389,7 @@ impl UpdateHandler {
 
                         warn!(
                             "Optimization task panicked, collection may be in unstable state\
-                             {separator}{message}"
+                             {separator}{message}",
                         );
 
                         segments
@@ -483,7 +476,7 @@ impl UpdateHandler {
         segments: LockedSegmentHolder,
         optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>>>,
         optimizers_log: Arc<Mutex<TrackerLog>>,
-        total_optimized_points: Arc<AtomicUsize>,
+        total_optimized_points: Arc<AtomicUsize>>,
         optimizer_resource_budget: &ResourceBudget,
         sender: Sender<OptimizerSignal>,
         limit: usize,
@@ -549,7 +542,7 @@ impl UpdateHandler {
         wal: LockedWal,
         optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>>>,
         optimizers_log: Arc<Mutex<TrackerLog>>,
-        total_optimized_points: Arc<AtomicUsize>,
+        total_optimized_points: Arc<AtomicUsize>>,
         optimizer_resource_budget: ResourceBudget,
         max_handles: Option<usize>,
         has_triggered_optimizers: Arc<AtomicBool>,
