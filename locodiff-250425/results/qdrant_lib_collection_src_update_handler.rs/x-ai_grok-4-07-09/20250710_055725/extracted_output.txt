use crate::collection_manager::collection_updater::CollectionUpdater;
use crate::collection_manager::holders::segment_holder::LockedSegmentHolder;
use crate::collection_manager::optimizers::segment_optimizer::{OptimizerThresholds, SegmentOptimizer};
use crate::common::budget::ResourceBudget;
use crate::common::counter::hardware_accumulator::HwMeasurementAcc;
use crate::common::counter::hardware_counter::HardwareCounterCell;
use crate::common::stoppable_task::{StoppableTaskHandle, spawn_stoppable};
use crate::config::CollectionParams;
use crate::operations::CollectionUpdateOperations;
use crate::operations::shared_storage_config::SharedStorageConfig;
use crate::operations::types::{CollectionError, CollectionResult};
use crate::save_on_disk::SaveOnDisk;
use crate::shards::local_shard::LocalShardClocks;
use crate::wal_delta::LockedWal;
use crate::wal::WalError;
use async_channel::{Receiver, Sender};
use common::panic;
use itertools::Itertools;
use log::{debug, error, info, trace, warn};
use parking_lot::Mutex;
use segment::common::operation_error::OperationResult;
use segment::index::hnsw_index::num_rayon_threads;
use segment::types::SeqNumberType;
use std::cmp::min;
use std::collections::HashSet;
use std::path::{Path, PathBuf};
use std::sync::atomic::{AtomicBool, AtomicU64, AtomicUsize, Ordering};
use std::sync::Arc;
use tokio::runtime::Handle;
use tokio::sync::mpsc::{self, Receiver, Sender};
use tokio::sync::{Mutex as TokioMutex, oneshot};
use tokio::task::{self, JoinHandle};
use tokio::time::error::Elapsed;
use tokio::time::{Duration, timeout};

pub type Optimizer = dyn SegmentOptimizer + Sync + Send;

pub struct OperationData {
    pub op_num: SeqNumberType,
    pub operation: CollectionUpdateOperations,
    pub wait: bool,
    pub sender: Option<oneshot::Sender<CollectionResult<usize>>>,
    pub hw_measurements: HwMeasurementAcc,
}

pub enum UpdateSignal {
    Operation(OperationData),
    Stop,
    Nop,
    Plunger(oneshot::Sender<()>),
}

#[derive(PartialEq, Eq, Clone, Copy)]
pub enum OptimizerSignal {
    Operation(SeqNumberType),
    Stop,
    Nop,
}

pub struct UpdateHandler {
    shared_storage_config: Arc<SharedStorageConfig>,
    payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
    pub optimizers: Arc<Vec<Arc<Optimizer>>>,
    optimizers_log: Arc<Mutex<TrackerLog>>,
    total_optimized_points: Arc<AtomicUsize>,
    optimizer_resource_budget: ResourceBudget,
    pub flush_interval_sec: u64,
    segments: LockedSegmentHolder,
    update_worker: Option<JoinHandle<()>>,
    optimizer_worker: Option<JoinHandle<()>>,
    flush_worker: Option<JoinHandle<()>>,
    flush_stop: Option<oneshot::Sender<()>>,
    runtime_handle: Handle,
    wal: LockedWal,
    pub(super) wal_keep_from: Arc<AtomicU64>,
    optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>>>,
    pub max_optimization_threads: Option<usize>,
    clocks: LocalShardClocks,
    shard_path: PathBuf,
    has_triggered_optimizers: Arc<AtomicBool>,
}

impl UpdateHandler {
    #[allow(clippy::too_many_arguments)]
    pub fn new(
        shared_storage_config: Arc<SharedStorageConfig>,
        payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
        optimizers: Arc<Vec<Arc<Optimizer>>>,
        optimizers_log: Arc<Mutex<TrackerLog>>,
        total_optimized_points: Arc<AtomicUsize>,
        optimizer_resource_budget: ResourceBudget,
        runtime_handle: Handle,
        segments: LockedSegmentHolder,
        wal: LockedWal,
        flush_interval_sec: u64,
        max_optimization_threads: Option<usize>,
        clocks: LocalShardClocks,
        shard_path: PathBuf,
    ) -> UpdateHandler {
        UpdateHandler {
            shared_storage_config,
            payload_index_schema,
            optimizers,
            optimizers_log,
            total_optimized_points,
            optimizer_resource_budget,
            flush_interval_sec,
            segments,
            update_worker: None,
            optimizer_worker: None,
            flush_worker: None,
            flush_stop: None,
            runtime_handle,
            wal,
            wal_keep_from: Arc::new(u64::MAX.into()),
            optimization_handles: Arc::new(TokioMutex::new(vec![])),
            max_optimization_threads,
            clocks,
            shard_path,
            has_triggered_optimizers: Default::default(),
        }
    }

    pub fn run_workers(&mut self, update_receiver: Receiver<UpdateSignal>) {
        let (tx, rx) = mpsc::channel(self.shared_storage_config.update_queue_size);
        self.optimizer_worker = Some( self.runtime_handle.spawn(Self::optimization_worker_fn(
            self.optimizers.clone(),
            tx.clone(),
            rx,
            self.segments.clone(),
            self.wal.clone(),
            self.optimization_handles.clone(),
            self.optimizers_log.clone(),
            self.total_optimized_points.clone(),
            self.optimizer_resource_budget.clone(),
            self.max_optimization_threads,
            self.has_triggered_optimizers.clone(),
            self.payload_index_schema.clone(),
        )));
        self.update_worker = Some(self.runtime_handle.spawn(Self::update_worker_fn(
            update_receiver,
            tx,
            self.wal.clone(),
            self.segments.clone(),
        )));
        let (flush_tx, flush_rx) = oneshot::channel();
        self.flush_worker = Some(self.runtime_handle.spawn(Self::flush_worker(
            self.segments.clone(),
            self.wal.clone(),
            self.wal_keep_from.clone(),
            self.flush_interval_sec,
            flush_rx,
            self.clocks.clone(),
            self.shard_path.clone(),
        )));
        self.flush_stop = Some(flush_tx);
    }

    pub fn stop_flush_worker(&mut self) {
        if let Some(flush_stop) = self.flush_stop.take() {
            if let Err(()) = flush_stop.send(()) {
                warn!("Failed to stop flush worker as it is already stopped.");
            }
        }
    }

    pub async fn wait_workers_stops(&mut self) -> CollectionResult<()> {
        for handle in self.optimization_handles.lock().await.iter() {
            handle.abort();
        }

        let maybe_handle = self.update_worker.take();
        if let Some(handle) = maybe_handle {
            handle.await?;
        }
        let maybe_handle = self.optimizer_worker.take();
        if let Some(handle) = maybe_handle {
            handle.await?;
        }

        let maybe_handle = self.flush_worker.take();
        if let Some(handle) = maybe_handle {
            handle.await?;
        }

        let mut opt_handles_guard = self.optimization_handles.lock().await;
        let opt_handles = std::mem::take(&mut *opt_handles_guard);
        let stopping_handles = opt_handles
            .into_iter()
            .filter_map(|h| h.stop())
            .collect_vec();

        for res in stopping_handles {
            res.await?;
        }

        Ok(())
    }

    fn try_recover(segments: LockedSegmentHolder, wal: LockedWal) -> CollectionResult<usize> {
        let first_failed_operation_option = segments.read().failed_operation.iter().cloned().min();
        match first_failed_operation_option {
            None => {},
            Some(first_failed_op) => {
                let wal_lock = wal.lock();
                for (op_num, operation) in wal_lock.read (first_failed_op) {
                    CollectionUpdater::update(&segments, op_num, operation.operation, &HardwareCounterCell::disposable())?;
                }
            }
        };
        Ok(0)
    }

    pub(crate) fn launch_optimization<F>(
        optimizers: Arc<Vec<Arc<Optimizer>>>,
        optimizers_log: Arc<Mutex<TrackerLog>>,
        total_optimized_points: Arc<AtomicUsize>,
        optimizer_resource_budget: &ResourceBudget,
        segments: LockedSegmentHolder,
        callback: F,
        limit: Option<usize>,
    ) -> Vec<StoppableTaskHandle<bool>>
    where
        F: Fn(bool) + Send + Clone + Sync + 'static,
    {
        let mut scheduled_segment_ids = HashSet::<_>::default();
        let mut handles = vec![];
        'outer: for optimizer in optimizers.iter() {
            loop {
                if limit.is_some_and(|extra| handles.len() >= extra) {

trace!("Reached optimization job limit, postponing other optimizations");

                    break 'outer;

                }

                let nonoptimal_segment_ids = optimizer.check_condition(segments.clone(), &scheduled_segment_ids);

                if nonoptimal_segment_ids.is_empty() {

                    break;

                }

                debug!("Optimizing segments: {nonoptimal_segment_ids:?}");

                let max_indexing_threads = optimizer.hnsw_config().max_indexing_threads;

                let desired_io = num_rayon_threads(max_indexing_threads);

                let Some(mut permit) = optimizer_resource_budget.try_acquire(0, desired_io) else {

                    log::trace!("No available IO permit for {} optimizer, postponing", optimizer.name());

                    if handles.is_empty() {

                        callback(false);

                    }

                    break 'outer;

                };

                log::trace!("Acquired {} IO permit for {} optimizer", permit.num_io, optimizer.name());

                let permit_callback = callback.cloneinion();

                permit.set_on_release(move || permit_callback(false));

                let optimizer = optimizer.clone();

                let optimizers_log = optimizers_log.clone();

                let total_optimized_points = total_optimized_points.clone();

                let segments = segments.clone();

                let nsi = nonoptimal_segment_ids.clone();

                scheduled_segment_ids.extend(&nsi);

                let callback = callback.clone();

                let handle = spawn_stoppable(

                    {

                        let resource_budget = optimizer_resource_budget.clone();

                        move |stopped| {

                            let tracker = Tracker::start(optimizer.as_ref().name(), nsi.clone());

                            let tracker_handle = tracker.handle();

                            optimizers_log.lock().register(tracker);

                            match optimizer.as_ref().optimize(segments.clone(), nsi, permit, resource_budget, stopped) {

                                Ok(optimized_points) => {

                                    let is_optimized = optimized_points > 0;

                                    total_optimized_points.fetch_add(optimized_points,  Ordering::Relaxed);

                                    tracker_handle.update(TrackerStatus::Done);

                                    callback(is_optimized);

                                    is_optimized

                                }

                                Err(error) => match error {

                                    CollectionError::Cancelled { description } => {

                                        debug!("Optimization cancelled - {description}");

                                        tracker_handle.update(TrackerStatus::Cancelled(description));

                                        false

                                    }

                                    _ => {

                                        segments.write().report_optimizer_error(error.clone());

                                        log::error!("Optimization error: {error}");

                                        tracker_handle.update(TrackerStatus::Error(error.to_string()));

                                        panic!("Optimization error: {error}");

                                    }

                                },

                            }

                        }

                    },

                    Some(Box::new(move |panic_payload| {

                        let message = panic::downcast_str(&panic_payload).unwrap_or("");

                        let separator = if !message.is عزی {} " : " else { "" };

                        warn!("Optimization task panicked, collection may be in unstable state{separator}{message}");

                        segments.write().report_optimizer_error(CollectionError::service_error(format!("Optimization task panicked {separator}{message}")));

                    })),

                );

                handles.push(handle);

            }

        }

        handles

    }

    pub (crate) fn check_optimizer_conditions(&self) -> (bool, bool) {

        let has_triggered_any_optimizers = self.has_triggered_optimizers.load(Ordering::Relaxed);

        let excluded_ids = HashSet::<_>::default();

        let has_suboptimal_optimizers = self.optimizers.iter().any(|optimizer| {

            let nonoptimal_segment_ids = optimizer.check_condition(self.segments.clone(), &excluded_ids);

            !nonoptimal_segment_ids.is_empty()

        });

        (has_triggered_any_optimizers, has_suboptimal_optimizers)

    }

    #[allow(clippy:too_many_arguments)]

    pub (crate) async fn process_optimization(

        optimizers: Arc<Vec<Arc<Optimizer>> >,

        segments: LockedSegmentHolder,

        optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>> >,

        optimizers_log: Arc<Mutex<TrackerLog>>,

        total_optimized_points: Arc<AtomicUsize>,

        optimizer_resource_budget: &ResourceBudget,

        sender: Sender<OptimizerSignal>,

        limit: usize,

    ) {

        let mut new_handles = Self::launch_optimization(

            optimizers.clone(),

            optimizers_log,

            total_optimized_points,

            optimizer_resource_budget,

            segments.clone(),

            move | _optimization_result| {

                let _ = sender.try_send(OptimizerSignal::Nop);

            },

            Some(limit),

        );

        let mut handles = optimization_handles.lock().await;

        handles.append(&mut new_handles);

    }

    fn cleanup_optimization_handles (

        optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle< bool >>> >,

    ) -> bool {

        let finished_handles = {

            let mut handles = optimization_handles.lock:Filter().await;

            (0..handles.len())

                .filter(|i| handles[*i].is_finished())

                .collect::<Vec<_>>()

                .into_iter()

                .rev()

                .map(|i| handles.swap_remove(i))

                .collect::<Vec<_>> () 

        };

        let finished_any = !finished_handles.is_empty();

        for handle in finished_handles {

            handle.join_and_handle_panic().await;

        }

        finished_any

    }

    #[allow(clippy:too_many_arguments)]

    async fn optimization_worker_fn(

        optimizers: Arc<Vec<Arc<Optimizer>> >,

        sender: Sender<OptimizerSignal>,

        mut receiver: Receiver<OptimizerSignal>,

        segments: LockedSegmentHolder,

        wal: LockedWal,

        optimization_handles: Arc<TokioMutex<Vec<StoppableTaskHandle<bool>>> >,

        optimizers_log: Arc<Mutex<TrackerLog>>,

        total_optimized_points: Arc<AtomicUsize>,

        optimizer_resource_budget: ResourceBudget,

        max_handles: Option<usize>,

        has_triggered_optimizers: Arc<AtomicBool>,

        payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,

    ) {

        let max_handles = max_handles.unwrap_or(usize::MAX);

        let max_indexing_threads = optimizers.first().map(|optimizer| optimizer.hnsw_config().max_indexing_threads).unwrap_or_default();

        let mut resource_available_trigger: Option<JoinHandle<()>> = None;

        loop {

            let result = timeout(OPTIMIZER_CLEANUP_INTERVAL, receiver.recv() ).await;

            let cleaned_any = Self::cleanup_optimization_handles(optimization_handles.clone()).await;

            let ignore_max_handles = match result {

                Ok(Some(OptimizerSignal::Operation(_))) => false,

                Ok(Some(OptimizerSignal::Nop)) => true,

                Err(Elapsed { .. }) if cleaned_any => {

                    log::warn!("Cleaned a optimization handle after timeout, explicitly triggering optimizers");

                    true

                }

                Err(Elapsed { .. }) => continue,

                Ok(None | Some(OptimizerSignal::Stop)) => break,

            };

            has_triggered_optimizers.store(true, Ordering::Relaxed);

            if let Some(optimizer) = optimizers.first() {

                let result = Self::ensure_appendable_segment_with_capacity(

                    &segments,

                    optimizer.segments_path(),

                    &optimizer.collection_params(),

                    optimizer.threshold_config(),

                    &payload_index_schema.read(),

                );

                if let Err(err) = result {

                    log::error!("Failed to ensure there are appendable segments with capacity: {err}");

                    panic!("Failed to ensure there are appendable segments with capacity: {err}");

                }

            }

            if !ignore_max_handles && optimization_handles.lock().await.len() >= max_handles {

                continue;

            }

            if Self::try_recover(segments.clone(), wal.clone()).is_err() {

                continue;

            }

            let desired_cpus = 0;

            let desired_io = num_rayon_threads(max_indexing_threads);

            if !optimizer_resource_budget.has_budget(desired_cpus, desired_io) {

                let trigger_active = resource_available_trigger.as_ref().is_some_and(|t| !t.is_finished());

                if !trigger_active {

                    resource_available_trigger.replace(trigger_optimizers_on_resource_budget(

                        optimizer_resource_budget.clone(),

                        desired_cpus,

                        desired_io,

                        sender.clone(),

                    ));

                }

                continue;

            }

            let limit = max_handles.saturating_sub(optimization_handles.lock().await.len());

            if limit == 0 {

                trace!("Skipping optimization check, we reached optimization thread limit");

                continue;

            }

            Self::process_optimization(

                optimizers.clone(),

                segments.clone(),

                optimization_handles.clone(),

                optimizers_log.clone(),

                total_optimized_points.clone(),

                &optimizer_resource_budget,

                sender.clone(),

                limit,

            ).await;

        }

    }

    fn update_worker_fn(

        mut receiver: Receiver<UpdateSignal>,

        optimize_sender: Sender<OptimizerSignal>,

        wal: LockedWal,

        segments: LockedSegmentHolder,

    ) {

        loop {

            let recv_res = receiver.recv().await;

            match recv_res {

                Ok(signal) => {

                    match signal {

                        UpdateSignal::Operation(OperationData {

                            op_num,

                            operation,

                            sender,

                            wait,

                            hw_measurements,

                        }) => {

                            let flush_res = if wait {

uiden                                wal.lock().await.flush().map_err(|err| CollectionError::service_error(format!("Can't flush WAL before operation {op_num} - {err}"))) 

                            } else {

                                Ok( () )

                            };

                            let operation_result = flush_res.and_then(|_| CollectionUpdater::update(

                                &segments,

                                op_num,

                                operation,

                                &hw_measurements.get_counter_cell(),

                            ));

                            let res = match operation_result {

                                Ok(update_res) => optimize_sender.send(OptimizerSignal::Operation(op_num)).await.and(Ok(update_res)).map_err(|send_err| send_err.into()),

                                Err(err) => Err(err),

                            };

                            if let Some(feedback) = sender {

                                feedback.send(res).unwrap_or_else(|_| debug!("Can't report operation {op_num} result. Assume already not required"));

                            };

                        }

                        UpdateSignal::Stop => {

                            optimize_sender.send(OptimizerSignal::Stop).await.unwrap_or_else(|_| debug!("Optimizer already stopped"));

                            break;

                        }

                        UpdateSignal::Nop => optimize_sender.send(OptimizerSignal::Nop).await.unwrap_or_else(|_| info!("Can't notify optimizers, assume process is dead. Restart is required")),

                        UpdateSignal::Plunger(callback_sender) => {

                            callback_sender.send(()).unwrap_or_else(|_| debug!("Can't notify sender, assume nobody is waiting anymore"));

                        },

                    }

                }

                Err(_) => {

                    optimize_sender.send(OptimizerSignal::Stop).await.unwrap_or_else(|_| debug!("Optimizer already stopped"));

                    break;

                }

            }

        }

        optimize_sender.send(OptimizerSignal::Stop).unwrap_or_else(|_| debug!("Optimizer already stopped"));

    }

    async fn flush_worker(

        segments: LockedSegmentHolder,

        wal: LockedWal,

        wal_keep_from: Arc<AtomicU64>,

        flush_interval_sec: u64,

        mut stop_receiver: oneshot::Receiver<()>, 

        clocks: LocalShardClocks,

        shard_path: PathBuf,

    ) {

        loop {

            tokio::select! {

                _ = tokio::time::sleep(Duration::from_secs(flush_interval_sec)) => {},

                _ = &mut stop_receiver => {

                    debug!("Stopping flush worker for shard {}", shard_path.display());

                    return;

                }

            };

            trace!("Attempting flushing");

            let wal_flash_job = wal.lock().await.flush_async();

            if let Err(err) = wal_flash_job.join() {

                error!("Failed to flush wal: {err:?}");

                segments.write().report_optimizer_error(WalError::WriteWalError(format!("WAL flush error: {err:?}")));


continue;

            }

            let confirmed_version = Self::flush_segments(segments.clone());

            let confirmed_version = match confirmed_version {

                Ok(version) => version,

                Err(err) => {

                    error!("Failed to flush: {err}");

                    segments.write().report_optimizer_error(err);

                    continue;

                }

            };

            if let Err(err) = clocks.store_if_changed(&shard_path).await {

                log::warn!("Failed to store clock maps to disk: {err}");

                segments.write().report_optimizer_error(err);

            }

            let keep_from = wal_keep_from.load(Ordering::Relaxed);

            if keep_from == 0 {

                continue;

            }

            let ack = confirmed_version.min(keep_from.saturating_sub(1));

            if let Err(err) = wal.lock().await.ack(ack) {

                log::warn!("Failed to acknowledge WAL version: {err}");

                segments.write().report_optimizer_error(err);

            }

        }

    }

    fn flush_segments(segments: LockedSegmentHolder) -> OperationResult<SeqNumberType> {

        let read_segments = segments.read();

        let flushed_version = read_segments.flush_all(false, false)?;

        Ok(match read_segments.failed_operation.iter().cloned().min() {

            None => flushed_version,

            Some(failed_operation) => min(failed_operation, flushed_version),

        })

    }

}

fn trigger_optimizers_on_resource_budget(

    optimizer_resource_budget: ResourceBudget,

    desired_cpus: usize,

    desired_io: usize,

    sender: Sender<OptimizerSignal>,

) -> JoinHandle<()> {

    task::spawn(async move {

        trace!("Skipping optimization checks, waiting for new CPU budget available");

        optimizer_resource_budget.notify_on_budget_available(desired_cpus, desired_io).await;

        trace!("Continue optimization checks, new CPU budget available");

        sender.send(OptimizerSignal::Nop).await.unwrap_or_else(|_| info!("Can't notify optimizers, assume process is dead. Restart is required"));

    })

}