
index cb922e861..54584f6b7 100644
--- a/qdrant_lib_collection_src_update_handler.rs_expectedoutput.txt (expected):tmp/tmp7wb4du87_expected.txt	
+++ b/qdrant_lib_collection_src_update_handler.rs_extracted.txt (actual):tmp/tmpdol4rlmv_actual.txt	
@@ -104,10 +104,6 @@ pub struct UpdateHandler {
     update_worker: Option<JoinHandle<()>>,
     /// Process, that listens for post-update signals and performs optimization
     optimizer_worker: Option<JoinHandle<()>>,
-    /// Process that periodically flushes segments and tries to truncate wal
-    flush_worker: Option<JoinHandle<()>>,
-    /// Sender to stop flush worker
-    flush_stop: Option<oneshot::Sender<()>>,
     runtime_handle: Handle,
     /// WAL, required for operations
     wal: LockedWal,
@@ -125,6 +121,10 @@ pub struct UpdateHandler {
     shard_path: PathBuf,
     /// Whether we have ever triggered optimizers since starting.
     has_triggered_optimizers: Arc<AtomicBool>,
+    /// Process that periodically flushes segments and tries to truncate wal
+    flush_worker: Option<JoinHandle<()>>,
+    /// Sender to stop flush worker
+    flush_stop: Option<oneshot::Sender<()>>,
 }
 
 impl UpdateHandler {
@@ -213,6 +213,7 @@ impl UpdateHandler {
 
     /// Gracefully wait before all optimizations stop
     /// If some optimization is in progress - it will be finished before shutdown.
+    /// Blocking function.
     pub async fn wait_workers_stops(&mut self) -> CollectionResult<()> {
         let maybe_handle = self.update_worker.take();
         if let Some(handle) = maybe_handle {
@@ -222,10 +223,6 @@ impl UpdateHandler {
         if let Some(handle) = maybe_handle {
             handle.await?;
         }
-        let maybe_handle = self.flush_worker.take();
-        if let Some(handle) = maybe_handle {
-            handle.await?;
-        }
 
         let mut opt_handles_guard = self.optimization_handles.lock().await;
         let opt_handles = std::mem::take(&mut *opt_handles_guard);
@@ -238,6 +235,11 @@ impl UpdateHandler {
             res.await?;
         }
 
+        let maybe_handle = self.flush_worker.take();
+        if let Some(handle) = maybe_handle {
+            handle.await?;
+        }
+
         Ok(())
     }
 
