
index 21d2ee83..b7c46348 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmprdjweabz_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpweqmcani_actual.txt	
@@ -115,6 +115,19 @@ describe('ReactExpiration', () => {
     }
   }
 
+  function span(prop) {
+    return {type: 'span', children: [], prop, hidden: false};
+  }
+
+  function flushNextRenderIfExpired() {
+    // This will start rendering the next level of work. If the work hasn't
+    // expired yet, React will exit without doing anything. If it has expired,
+    // it will schedule a sync task.
+    Scheduler.unstable_flushExpired();
+    // Flush the sync task.
+    ReactNoop.flushSync();
+  }
+
   it('increases priority of updates as time progresses', async () => {
     ReactNoop.render(<Text text="Step 1" />);
     React.startTransition(() => {
@@ -290,7 +303,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -336,6 +348,7 @@ describe('ReactExpiration', () => {
       root.render(<App />);
     });
 
+
     await waitFor(['A']);
     await waitFor(['B']);
     await waitFor(['C']);
@@ -365,6 +378,7 @@ describe('ReactExpiration', () => {
       root.render(<App />);
     });
 
+
     await waitFor(['A']);
     await waitFor(['B']);
     await waitFor(['C']);
@@ -469,6 +483,7 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         updateNormalPri();
       });
+
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
       assertLog(['Sync pri: 1', 'Normal pri: 0']);
@@ -489,6 +504,7 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         updateNormalPri();
       });
+
       await waitFor(['Sync pri: 1']);
 
       // This time, a lot of time has elapsed since the normal pri update
@@ -542,7 +558,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +579,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -575,6 +591,7 @@ describe('ReactExpiration', () => {
     expect(root).toMatchRenderedOutput('Sync pri: 2, Idle pri: 2');
   });
 
+  // @gate experimental
   it('when multiple lanes expire, we can finish the in-progress one without including the others', async () => {
     let setA;
     let setB;
@@ -666,7 +683,6 @@ describe('ReactExpiration', () => {
       assertLog(['Promise resolved [A1]']);
 
       await waitFor(['A1']);
-      expect(root).toMatchRenderedOutput('A0BC');
 
       // Lots more time elapses. We're CPU-bound now, so we should treat this
       // as starvation.
@@ -679,6 +695,7 @@ describe('ReactExpiration', () => {
     });
   });
 
+  // @gate experimental
   it('flushSync should not affect expired work', async () => {
     let setA;
     let setB;
