
index 21d2ee830..09ab0b7c8 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmphksn2qzz_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpxidf8qui_actual.txt	
@@ -115,6 +115,15 @@ describe('ReactExpiration', () => {
     }
   }
 
+  function flushNextRenderIfExpired() {
+    // This will start rendering the next level of work. If the work hasn't
+    // expired yet, React will exit without doing anything. If it has expired,
+    // it will schedule a sync task.
+    Scheduler.unstable_flushExpired();
+    // Flush the sync task.
+    ReactNoop.flushSync();
+  }
+
   it('increases priority of updates as time progresses', async () => {
     ReactNoop.render(<Text text="Step 1" />);
     React.startTransition(() => {
@@ -182,7 +191,9 @@ describe('ReactExpiration', () => {
 
     // Now do the same thing again, except this time don't flush any work in
     // between the two updates.
-    ReactNoop.render(<TextClass text="A" />);
+    React.startTransition(() => {
+      ReactNoop.render(<TextClass text="A" />);
+    });
     Scheduler.unstable_advanceTime(2000);
     assertLog([]);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
@@ -221,7 +232,6 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -240,7 +250,9 @@ describe('ReactExpiration', () => {
 
       // Now do the same thing again, except this time don't flush any work in
       // between the two updates.
-      ReactNoop.render(<TextClass text="A" />);
+      React.startTransition(() => {
+        ReactNoop.render(<TextClass text="A" />);
+      });
       Scheduler.unstable_advanceTime(2000);
       assertLog([]);
       expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
@@ -251,7 +263,7 @@ describe('ReactExpiration', () => {
 
       // Schedule another update.
       ReactNoop.render(<TextClass text="B" />);
-      // The updates should flush in the same batch, since as far as the scheduler
+      // The updates should flush in the same batch, as far as the scheduler
       // knows, they may have occurred inside the same event.
       await waitForAll(['B [render]', 'B [commit]']);
     },
@@ -290,7 +302,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +317,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -425,7 +435,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
@@ -440,17 +449,17 @@ describe('ReactExpiration', () => {
     let updateSyncPri;
     let updateNormalPri;
     function App() {
-      const [highPri, setHighPri] = useState(0);
+      const [syncPri, setSyncPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
       updateSyncPri = () => {
         ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
+          setSyncPri(n => n + 1);
         });
       };
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
-          <Text text={'Sync pri: ' + highPri} />
+          <Text text={'Sync pri: ' + syncPri} />
           {', '}
           <Text text={'Normal pri: ' + normalPri} />
         </>
@@ -514,7 +523,7 @@ describe('ReactExpiration', () => {
     let updateIdlePri;
     function App() {
       const [syncPri, setSyncPri] = useState(0);
-      const [highPri, setIdlePri] = useState(0);
+      const [idlePri, setIdlePri] = useState(0);
       updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateIdlePri = () =>
         ReactNoop.idleUpdates(() => {
@@ -524,7 +533,7 @@ describe('ReactExpiration', () => {
         <>
           <Text text={'Sync pri: ' + syncPri} />
           {', '}
-          <Text text={'Idle pri: ' + highPri} />
+          <Text text={'Idle pri: ' + idlePri} />
         </>
       );
     }
@@ -542,7 +551,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -641,7 +649,7 @@ describe('ReactExpiration', () => {
     }
 
     const root = ReactNoop.createRoot();
-    await act(async () => {
+    await act(() => {
       await resolveText('A0');
       root.render(<App step={0} />);
     });
@@ -666,6 +674,7 @@ describe('ReactExpiration', () => {
       assertLog(['Promise resolved [A1]']);
 
       await waitFor(['A1']);
+
       expect(root).toMatchRenderedOutput('A0BC');
 
       // Lots more time elapses. We're CPU-bound now, so we should treat this
