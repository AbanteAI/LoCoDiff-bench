
index 21d2ee83..8d675dd0 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmpfjg8_d5c_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpr5su92ab_actual.txt	
@@ -115,28 +115,34 @@ describe('ReactExpiration', () => {
     }
   }
 
-  it('increases priority of updates as time progresses', async () => {
-    ReactNoop.render(<Text text="Step 1" />);
-    React.startTransition(() => {
-      ReactNoop.render(<Text text="Step 2" />);
-    });
-    await waitFor(['Step 1']);
+  function span(prop) {
+    return {type: 'span', children: [], prop, hidden: false};
+  }
 
-    expect(ReactNoop).toMatchRenderedOutput('Step 1');
+  function flushNextRenderIfExpired() {
+    // This will start rendering the next level of work. If the work hasn't
+    // expired yet, React will exit without doing anything. If it has expired,
+    // it will schedule a sync task.
+    Scheduler.unstable_flushExpired();
+    // Flush the sync task.
+    ReactNoop.flushSync();
+  }
 
-    // Nothing has expired yet because time hasn't advanced.
-    await unstable_waitForExpired([]);
-    expect(ReactNoop).toMatchRenderedOutput('Step 1');
+  it('increases priority of updates as time progresses', async () => {
+    ReactNoop.render(<span prop="done" />);
+    expect(ReactNoop).toMatchRenderedOutput(null);
 
+    // Nothing has expired yet because time hasn't advanced.
+    flushNextRenderIfExpired();
+    expect(ReactNoop).toMatchRenderedOutput(null);
     // Advance time a bit, but not enough to expire the low pri update.
     ReactNoop.expire(4500);
-    await unstable_waitForExpired([]);
-    expect(ReactNoop).toMatchRenderedOutput('Step 1');
-
-    // Advance by a little bit more. Now the update should expire and flush.
+    flushNextRenderIfExpired();
+    expect(ReactNoop).toMatchRenderedOutput(null);
+    // Advance by another second. Now the update should expire and flush.
     ReactNoop.expire(500);
-    await unstable_waitForExpired(['Step 2']);
-    expect(ReactNoop).toMatchRenderedOutput('Step 2');
+    flushNextRenderIfExpired();
+    expect(ReactNoop).toMatchRenderedOutput(<span prop="done" />);
   });
 
   it('two updates of like priority in the same event always flush within the same batch', async () => {
@@ -161,9 +167,13 @@ describe('ReactExpiration', () => {
 
     // First, show what happens for updates in two separate events.
     // Schedule an update.
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        ReactNoop.render(<TextClass text="A" />);
+      });
+    } else {
       ReactNoop.render(<TextClass text="A" />);
-    });
+    }
     // Advance the timer.
     Scheduler.unstable_advanceTime(2000);
     // Partially flush the first update, then interrupt it.
@@ -218,9 +228,13 @@ describe('ReactExpiration', () => {
 
       // First, show what happens for updates in two separate events.
       // Schedule an update.
-      React.startTransition(() => {
+      if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+        startTransition(() => {
+          ReactNoop.render(<TextClass text="A" />);
+        });
+      } else {
         ReactNoop.render(<TextClass text="A" />);
-      });
+      }
 
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
@@ -287,10 +301,13 @@ describe('ReactExpiration', () => {
     }
 
     // Initial mount
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        ReactNoop.render(<App />);
+      });
+    } else {
       ReactNoop.render(<App />);
-    });
-
+    }
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -303,16 +320,20 @@ describe('ReactExpiration', () => {
     ]);
 
     // Partial update
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        subscribers.forEach(s => s.setState({text: '1'}));
+      });
+    } else {
       subscribers.forEach(s => s.setState({text: '1'}));
-    });
+    }
 
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
     // advanced, this update should be given a different expiration time than
     // the currently rendering one. So, C and D should render with 1, not 2.
-    React.startTransition(() => {
+    startTransition(() => {
       subscribers.forEach(s => s.setState({text: '2'}));
     });
     await waitFor(['1 [C] [render]', '1 [D] [render]']);
@@ -332,9 +353,13 @@ describe('ReactExpiration', () => {
       );
     }
 
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        root.render(<App />);
+      });
+    } else {
       root.render(<App />);
-    });
+    }
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -342,7 +367,8 @@ describe('ReactExpiration', () => {
 
     Scheduler.unstable_advanceTime(10000);
 
-    await unstable_waitForExpired(['D', 'E']);
+    flushNextRenderIfExpired();
+    assertLog(['D', 'E']);
     expect(root).toMatchRenderedOutput('ABCDE');
   });
 
@@ -361,9 +387,13 @@ describe('ReactExpiration', () => {
         </>
       );
     }
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        root.render(<App />);
+      });
+    } else {
       root.render(<App />);
-    });
+    }
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -371,7 +401,8 @@ describe('ReactExpiration', () => {
 
     Scheduler.unstable_advanceTime(10000);
 
-    await unstable_waitForExpired(['D', 'E']);
+    flushNextRenderIfExpired();
+    assertLog(['D', 'E']);
     expect(root).toMatchRenderedOutput('ABCDE');
   });
 
@@ -382,36 +413,57 @@ describe('ReactExpiration', () => {
     jest.resetModules();
     Scheduler = require('scheduler');
 
-    const InternalTestUtils = require('internal-test-utils');
-    waitFor = InternalTestUtils.waitFor;
-    assertLog = InternalTestUtils.assertLog;
-    unstable_waitForExpired = InternalTestUtils.unstable_waitForExpired;
-
-    // Before importing the renderer, advance the current time by a number
-    // larger than the maximum allowed for bitwise operations.
-    const maxSigned31BitInt = 1073741823;
-    Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
-
-    // Now import the renderer. On module initialization, it will read the
-    // current time.
-    ReactNoop = require('react-noop-renderer');
-    React = require('react');
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      // Before importing the renderer, advance the current time by a number
+      // larger than the maximum allowed for bitwise operations.
+      const maxSigned31BitInt = 1073741823;
+      Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
+      // Now import the renderer. On module initialization, it will read the
+      // current time.
+      ReactNoop = require('react-noop-renderer');
+      ReactNoop.render('Hi');
 
-    ReactNoop.render(<Text text="Step 1" />);
-    React.startTransition(() => {
-      ReactNoop.render(<Text text="Step 2" />);
-    });
-    await waitFor(['Step 1']);
+      // The update should not have expired yet.
+      flushNextRenderIfExpired();
+      await waitFor([]);
+      expect(ReactNoop).toMatchRenderedOutput(null);
+      // Advance the time some more to expire the update.
+      Scheduler.unstable_advanceTime(10000);
+      flushNextRenderIfExpired();
+      await waitFor([]);
+      expect(ReactNoop).toMatchRenderedOutput('Hi');
+    } else {
+      const InternalTestUtils = require('internal-test-utils');
+      waitFor = InternalTestUtils.waitFor;
+      assertLog = InternalTestUtils.assertLog;
+      unstable_waitForExpired = InternalTestUtils.unstable_waitForExpired;
+
+      // Before importing the renderer, advance the current time by a number
+      // larger than the maximum allowed for bitwise operations.
+      const maxSigned31BitInt = 1073741823;
+      Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
+
+      // Now import the renderer. On module initialization, it will read the
+      // current time.
+      ReactNoop = require('react-noop-renderer');
+      React = require('react');
+
+      ReactNoop.render(<Text text="Step 1" />);
+      startTransition(() => {
+        ReactNoop.render(<Text text="Step 2" />);
+      });
+      await waitFor(['Step 1']);
 
-    // The update should not have expired yet.
-    await unstable_waitForExpired([]);
+      // The update should not have expired yet.
+      await unstable_waitForExpired([]);
 
-    expect(ReactNoop).toMatchRenderedOutput('Step 1');
+      expect(ReactNoop).toMatchRenderedOutput('Step 1');
 
-    // Advance the time some more to expire the update.
-    Scheduler.unstable_advanceTime(10000);
-    await unstable_waitForExpired(['Step 2']);
-    expect(ReactNoop).toMatchRenderedOutput('Step 2');
+      // Advance the time some more to expire the update.
+      Scheduler.unstable_advanceTime(10000);
+      await unstable_waitForExpired(['Step 2']);
+      expect(ReactNoop).toMatchRenderedOutput('Step 2');
+    }
   });
 
   it('should measure callback timeout relative to current time, not start-up time', async () => {
@@ -422,9 +474,13 @@ describe('ReactExpiration', () => {
     // Before scheduling an update, advance the current time.
     Scheduler.unstable_advanceTime(10000);
 
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      startTransition(() => {
+        ReactNoop.render('Hi');
+      });
+    } else {
       ReactNoop.render('Hi');
-    });
+    }
 
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
@@ -466,9 +522,13 @@ describe('ReactExpiration', () => {
 
     // First demonstrate what happens when there's no starvation
     await act(async () => {
-      React.startTransition(() => {
+      if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+        startTransition(() => {
+          updateNormalPri();
+        });
+      } else {
         updateNormalPri();
-      });
+      }
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
       assertLog(['Sync pri: 1', 'Normal pri: 0']);
@@ -486,9 +546,13 @@ describe('ReactExpiration', () => {
 
     // Do the same thing, but starve the first update
     await act(async () => {
-      React.startTransition(() => {
+      if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+        startTransition(() => {
+          updateNormalPri();
+        });
+      } else {
         updateNormalPri();
-      });
+      }
       await waitFor(['Sync pri: 1']);
 
       // This time, a lot of time has elapsed since the normal pri update
@@ -564,6 +628,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -575,6 +640,7 @@ describe('ReactExpiration', () => {
     expect(root).toMatchRenderedOutput('Sync pri: 2, Idle pri: 2');
   });
 
+  // @gate experimental
   it('when multiple lanes expire, we can finish the in-progress one without including the others', async () => {
     let setA;
     let setB;
@@ -649,9 +715,13 @@ describe('ReactExpiration', () => {
     expect(root).toMatchRenderedOutput('A0BC');
 
     await act(async () => {
-      React.startTransition(() => {
+      if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+        startTransition(() => {
+          root.render(<App step={1} />);
+        });
+      } else {
         root.render(<App step={1} />);
-      });
+      }
       await waitForAll([
         'Suspend! [A1]',
 
@@ -665,6 +735,8 @@ describe('ReactExpiration', () => {
       await resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
+      // But the update doesn't expire, because it was IO bound. So we can
+      // partially rendering without finishing.
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
@@ -679,6 +751,7 @@ describe('ReactExpiration', () => {
     });
   });
 
+  // @gate experimental
   it('flushSync should not affect expired work', async () => {
     let setA;
     let setB;
@@ -723,6 +796,7 @@ describe('ReactExpiration', () => {
     });
   });
 
+  // @gate experimental
   it('passive effects of expired update flush after paint', async () => {
     function App({step}) {
       useEffect(() => {
