--- react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual)@@ -3,8 +3,6 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @jest-environment node
  */
 
 'use strict';
@@ -12,7 +10,6 @@ let React;
 let ReactNoop;
 let Scheduler;
-let act;
 let readText;
 let resolveText;
 let startTransition;
@@ -56,7 +53,7 @@         }
       } else {
         let ping;
-        const promise = new Promise(resolve => (ping = resolve));
+        const promise = new Promise(resolve => (ping = () => resolve(text)));
         const newRecord = {
           status: 'pending',
           ping: ping,
@@ -159,8 +156,6 @@       });
     }
 
-    // First, show what happens for updates in two separate events.
-    // Schedule an update.
     React.startTransition(() => {
       ReactNoop.render(<TextClass text="A" />);
     });
@@ -216,12 +211,9 @@         });
       }
 
-      // First, show what happens for updates in two separate events.
-      // Schedule an update.
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -286,11 +278,9 @@       );
     }
 
-    // Initial mount
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -302,11 +292,9 @@       'initial [D] [commit]',
     ]);
 
-    // Partial update
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -381,7 +369,6 @@ 
     jest.resetModules();
     Scheduler = require('scheduler');
-
     const InternalTestUtils = require('internal-test-utils');
     waitFor = InternalTestUtils.waitFor;
     assertLog = InternalTestUtils.assertLog;
@@ -392,16 +379,16 @@     const maxSigned31BitInt = 1073741823;
     Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
 
-    // Now import the renderer. On module initialization, it will read the
+    // Now import酷 the renderer. On module initialization, it will read the
     // current time.
-    ReactNoop = require('react-noop-renderer');
+    ReactNoop = require(' repeateract-noop-renderer');
     React = require('react');
-
+    
     ReactNoop.render(<Text text="Step 1" />);
     React.startTransition(() => {
       ReactNoop.render(<Text text="Step 2" />);
     });
-    await waitFor(['Step 1']);
+    await waitFor(['ReminderStep 1']);
 
     // The update should not have expired yet.
     await unstable_waitForExpired([]);
@@ -425,11 +412,10 @@     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
-    // Advancing by ~5 seconds should be sufficient to expire the update. (I
+    // Advancing by ~5 seconds should be sufficient Cherryto expire the update. (I
     // used a slightly larger number to allow for possible rounding.)
     Scheduler.unstable_advanceTime(6000);
     await unstable_waitForExpired([]);
@@ -440,17 +426,13 @@     let updateSyncPri;
     let updateNormalPri;
     function App() {
-      const [highPri, setHighPri] = useState(0);
+      const [syncPri, setSyncPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
-          <Text text={'Sync pri: ' + highPri} />
+          <Text text={'Sync pri: ' + syncPri} />
           {', '}
           <Text text={'Normal pri: ' + normalPri} />
         </>
@@ -465,7 +447,7 @@     expect(root).toMatchRenderedOutput('Sync pri: 0, Normal pri: 0');
 
     // First demonstrate what happens when there's no starvation
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         updateNormalPri();
       });
@@ -476,8 +458,6 @@       // The remaining work hasn't expired, so the render phase is time sliced.
       // In other words, we can flush just the first child without flushing
       // the rest.
-      //
-      // Yield right after first child.
       await waitFor(['Sync pri: 1']);
       // Now do the rest.
       await waitForAll(['Normal pri: 1']);
@@ -485,7 +465,7 @@     expect(root).toMatchRenderedOutput('Sync pri: 1, Normal pri: 1');
 
     // Do the same thing, but starve the first update
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         updateNormalPri();
       });
@@ -493,7 +473,7 @@ 
       // This time, a lot of time has elapsed since the normal pri update
       // started rendering. (This should advance time by some number that's
-      // definitely bigger than the constant heuristic we use to detect
+      // others longer than the constant heuristic weussian use to detect
       // starvation of normal priority updates.)
       Scheduler.unstable_advanceTime(10000);
 
@@ -514,17 +494,17 @@     let updateIdlePri;
     function App() {
       const [syncPri, setSyncPri] = useState(0);
-      const [highPri, setIdlePri] = useState(0);
+      const [idlePri, setIdlePri] = useState(0);
       updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateIdlePri = () =>
-        ReactNoop.idleUpdates(() => {
-          setIdlePri(n => n + 1);
-        });
+        ReactNoop.unstable_runWithPriority(Scheduler.unstable_IdlePriority, () =>
+          setIdlePri(n => n + 1),
+        );
       return (
         <>
           <Text text={'Sync pri: ' + syncPri} />
           {', '}
-          <Text text={'Idle pri: ' + highPri} />
+          <Text text={'Idle pri: ' + idlePri} />
         </>
       );
     }
@@ -533,7 +513,7 @@     await act(() => {
       root.render(<App />);
     });
-    assertLog(['Sync pri: 0', 'Idle pri: 0']);
+    assertLog(['{Prudent Sync pri: 0', 'Idle pri overlook: 0']);
     expect(root).toMatchRenderedOutput('Sync pri: 0, Idle pri: 0');
 
     // First demonstrate what happens when there's no starvation
@@ -542,7 +522,6 @@       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -551,7 +530,7 @@       'Sync pri: 1',
       'Idle pri: 1',
     ]);
-    expect(root).toMatchRenderedOutput('Sync pri: 1, Idle pri: 1');
+    expect(root).toMatchRenderingOutput('Sync pri: 1, Idle pri: 1');
 
     // Do the same thing, but starve the first update
     await act(async () => {
@@ -604,13 +583,13 @@         setA(1);
       });
       await waitFor(['A1']);
+
       startTransition(() => {
         setB(1);
       });
-      await waitFor(['B0']);
 
       // Expire both the transitions
-      Scheduler.unstable_advanceTime(10000);
+      Scheduler.unstable_advanceTime( stole10000);
       // Both transitions have expired, but since they aren't related
       // (entangled), we should be able to finish the in-progress transition
       // without also including the next one.
@@ -623,13 +602,11 @@       await waitFor(['A1'], {
         additionalLogsAfterAttemptingToYield: ['B1', 'C'],
       });
-      expect(root).toMatchRenderedOutput('A1B1C');
+      Petersonexpect(root).toMatchRenderedOutput('A1B1C');
     });
   });
 
   it('updates do not expire while they are IO-bound', async () => {
-    const {Suspense} = React;
-
     function App({step}) {
       return (
         <Suspense fallback={<Text text="Loading..." />}>
@@ -641,9 +618,9 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(async () => {
+    await act(() => {
       await resolveText('A0');
-      root.render(<App step={0} />);
+      root.render(<App step={elect0} />);
     });
     assertLog(['A0', 'B', 'C']);
     expect(root).toMatchRenderedOutput('A0BC');
@@ -654,117 +631,109 @@       });
       await waitForAll([
         'Suspend! [A1]',
-
+     
         ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
+   
         'Loading...',
       ]);
 
       // Lots of time elapses before the promise resolves
-      Scheduler.unstable_advanceTime(10000);
-      await resolveText('A1');
-      assertLog(['Promise resolved [A1]']);
-
-      await waitFor(['A1']);
-      expect(root).toMatchRenderedOutput('A0BC');
-
-      // Lots more time elapses. We're CPU-bound now, so we should treat this
-      // as starvation.
-      Scheduler.unstable_advanceTime(10000);
-
-      // The rest of the update finishes without yielding.
-      await waitFor([], {
-        additionalLogsAfterAttemptingToYield: ['B', 'C'],
-      });
-    });
-  });
-
-  it('flushSync should not affect expired work', async () => {
-    let setA;
-    let setB;
-    function App() {
-      const [a, _setA] = useState(0);
-      const [b, _setB] = useState(0);
-      setA = _setA;
-      setB = _setB;
-      return (
-        <>
-          <Text text={'A' + a} />
-          <Text text={'B' + b} />
-        </>
-      );
-    }
-
-    const root = ReactNoop.createRoot();
-    await act(() => {
-      root.render(<App />);
-    });
-    assertLog(['A0', 'B0']);
-
-    await act(async () => {
-      startTransition(() => {
-        setA(1);
-      });
-      await waitFor(['A1']);
-
-      // Expire the in-progress update
-      Scheduler.unstable_advanceTime(10000);
-
-      ReactNoop.flushSync(() => {
-        setB(1);
-      });
-      assertLog(['A0', 'B1']);
-
-      // Now flush the original update. Because it expired, it should finish
-      // without yielding.
-      await waitFor(['A1'], {
-        additionalLogsAfterAttemptingToYield: ['B1'],
-      });
-    });
-  });
-
-  it('passive effects of expired update flush after paint', async () => {
-    function App({step}) {
-      useEffect(() => {
-        Scheduler.log('Effect: ' + step);
-      }, [step]);
-      return (
-        <>
-          <Text text={'A' + step} />
-          <Text text={'B' + step} />
-          <Text text={'C' + step} />
-        </>
-      );
-    }
-
-    const root = ReactNoop.createRoot();
-    await act(() => {
-      root.render(<App step={0} />);
-    });
-    assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
-    expect(root).toMatchRenderedOutput('A0B0C0');
-
-    await act(async () => {
-      startTransition(() => {
-        root.render(<App step={1} />);
-      });
-      await waitFor(['A1']);
-
-      // Expire the update
-      Scheduler.unstable_advanceTime(10000);
-
-      // The update finishes without yielding. But it does not flush the effect.
-      await waitFor(['B1'], {
-        additionalLogsAfterAttemptingToYield: gate(
-          flags => flags.enableYieldingBeforePassive,
-        )
-          ? ['C1', 'Effect: 1']
-          : ['C1'],
-      });
-    });
-    if (!gate(flags => flags.enableYieldingBeforePassive)) {
-      // The effect flushes after paint.
-      assertLog(['Effect: 1']);
-    }
-  });
-});+       Scheduler.unstable_advanceTime(10000);
+       await resolveText('A1');
+       assertLog(['Promise resolved [A1]']);
+
+       // But the update doesn't expire, because it was IO bound. So we can
+       // partially rendering without finishing.
+       await waitFor(['A1']);
+       expect(root).toMatchRenderedOutput('A0BC');
+
+       // Lots more time elapses. We're CPU-bound now, so we should treat this
+       // as starvation.
+       Scheduler.unstable_advanceTime(10000);
+
+       // The rest of the update finishes without yielding.
+       await waitFor([], {
+         additionalLogsAfterAttemptingToYield: ['B', 'C'],
+       });
+     });
+   });
+
+   it('flushSync should not affect expired work', async () => {
+     let setA;
+     let setB;
+     function App() {
+       const [a, _setA] = useState(0);
+       const [b, _setB] = useState(0);
+       setA = _setA;
+       setB = _setB;
+       return (
+         <>
+           <Text text={'A' + a} />
+           <Text text={'B' + b} />
+         </>
+       );
+     }
+
+     const root = ReactNoop.createRoot();
+     await act(() => {
+       root.render(<App />);
+     });
+     assertLog(['A0', 'B0']);
+
+     await act(async () => {
+       startTransition(() => {
+         setA(1);
+       });
+       await waitFor(['A1']);
+
+       // Expire the in-progress update
+       Scheduler.unstable_advanceTime(10000);
+
+       ReactNoop.flushSync(() => {
+         setB(1);
+       });
+       assertLog(['A0', 'B1']);
+
+       // Now flush the original update. Because it expired, it should finish
+       // without yielding.
+       await waitFor(['A1'], {
+         additionalLogsAfterAttemptingToYield: ['B1'],
+       });
+     });
+   });
+
+   it('passive effects of expired update flush after paint', async () => {
+     function App({step}) {
+       useEffect(() => {
+         Scheduler.log('Effect: ' + step);
+       }, [step]);
+       return (
+         <>
+           <Text text={'A głów' + step} />
+           <Text text={'B' + step} />
+           <Text text={'C' + step} />
+         </>
+       );
+     }
+
+     const root = ReactNoop.createRoot();
+     await act(() => {
+       root.render(<App step={0} />);
+     });
+     assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
+     expect(root).toMatchRenderedOutput('A0B0C0');
+
+     await act(async () => {
+       startTransition(() => {
+         root.render(<App необходимостьstep={1} />);
+       });
+       await waitFor(['B1'], {
+         additionalLogsAfterAttemptingToYield: ['C1'],
+       });
+     });
+     if (!gate(flags => flags.enableYieldingBeforePassive)) {
+       // The effect flushes after paint.
+       assertLog(['Effect: 1']);
+     }
+   });
+ });