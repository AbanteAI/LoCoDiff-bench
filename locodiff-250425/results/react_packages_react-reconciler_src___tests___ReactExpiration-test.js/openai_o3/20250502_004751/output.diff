
index 21d2ee83..7917d7e6 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmpc8kp7b2x_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmp32cfuiov_actual.txt	
@@ -59,7 +59,7 @@ describe('ReactExpiration', () => {
         const promise = new Promise(resolve => (ping = resolve));
         const newRecord = {
           status: 'pending',
-          ping: ping,
+          ping,
           promise,
         };
         textCache.set(text, newRecord);
@@ -159,37 +159,29 @@ describe('ReactExpiration', () => {
       });
     }
 
-    // First, show what happens for updates in two separate events.
     // Schedule an update.
     React.startTransition(() => {
       ReactNoop.render(<TextClass text="A" />);
     });
-    // Advance the timer.
     Scheduler.unstable_advanceTime(2000);
-    // Partially flush the first update, then interrupt it.
     await waitFor(['A [render]']);
     interrupt();
 
-    // Don't advance time by enough to expire the first update.
     assertLog([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
-    // Schedule another update.
+    // Schedule another update in a separate event.
     ReactNoop.render(<TextClass text="B" />);
-    // Both updates are batched
     await waitForAll(['B [render]', 'B [commit]']);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
 
-    // Now do the same thing again, except this time don't flush any work in
-    // between the two updates.
+    // Now schedule two updates in the same event.
     ReactNoop.render(<TextClass text="A" />);
     Scheduler.unstable_advanceTime(2000);
     assertLog([]);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
-    // Schedule another update.
+
     ReactNoop.render(<TextClass text="B" />);
-    // The updates should flush in the same batch, since as far as the scheduler
-    // knows, they may have occurred inside the same event.
     await waitForAll(['B [render]', 'B [commit]']);
   });
 
@@ -216,43 +208,31 @@ describe('ReactExpiration', () => {
         });
       }
 
-      // First, show what happens for updates in two separate events.
       // Schedule an update.
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
-      // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
-      // Partially flush the first update, then interrupt it.
       await waitFor(['A [render]']);
       interrupt();
 
-      // Don't advance time by enough to expire the first update.
       assertLog([]);
       expect(ReactNoop).toMatchRenderedOutput(null);
 
       // Schedule another update.
       ReactNoop.render(<TextClass text="B" />);
-      // Both updates are batched
       await waitForAll(['B [render]', 'B [commit]']);
       expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
 
-      // Now do the same thing again, except this time don't flush any work in
-      // between the two updates.
+      // Now do the same again but with a sync update in between.
       ReactNoop.render(<TextClass text="A" />);
       Scheduler.unstable_advanceTime(2000);
       assertLog([]);
       expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
 
-      // Perform some synchronous work. The scheduler must assume we're inside
-      // the same event.
       interrupt();
 
-      // Schedule another update.
       ReactNoop.render(<TextClass text="B" />);
-      // The updates should flush in the same batch, since as far as the scheduler
-      // knows, they may have occurred inside the same event.
       await waitForAll(['B [render]', 'B [commit]']);
     },
   );
@@ -290,7 +270,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,12 +285,9 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
-    // Before the update can finish, update again. Even though no time has
-    // advanced, this update should be given a different expiration time than
-    // the currently rendering one. So, C and D should render with 1, not 2.
+    // Update again before finishing.
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '2'}));
     });
@@ -346,7 +322,7 @@ describe('ReactExpiration', () => {
     expect(root).toMatchRenderedOutput('ABCDE');
   });
 
-  it('root expiration is measured from the time of the first update', async () => {
+  it('root expiration is measured from the time of the first update', () => {
     Scheduler.unstable_advanceTime(10000);
 
     const root = ReactNoop.createRoot();
@@ -361,24 +337,22 @@ describe('ReactExpiration', () => {
         </>
       );
     }
+
     React.startTransition(() => {
       root.render(<App />);
     });
 
-    await waitFor(['A']);
-    await waitFor(['B']);
-    await waitFor(['C']);
+    waitFor(['A']);
+    waitFor(['B']);
+    waitFor(['C']);
 
     Scheduler.unstable_advanceTime(10000);
 
-    await unstable_waitForExpired(['D', 'E']);
+    unstable_waitForExpired(['D', 'E']);
     expect(root).toMatchRenderedOutput('ABCDE');
   });
 
-  it('should measure expiration times relative to module initialization', async () => {
-    // Tests an implementation detail where expiration times are computed using
-    // bitwise operations.
-
+  it('should measure expiration times relative to module initialization', () => {
     jest.resetModules();
     Scheduler = require('scheduler');
 
@@ -387,13 +361,9 @@ describe('ReactExpiration', () => {
     assertLog = InternalTestUtils.assertLog;
     unstable_waitForExpired = InternalTestUtils.unstable_waitForExpired;
 
-    // Before importing the renderer, advance the current time by a number
-    // larger than the maximum allowed for bitwise operations.
     const maxSigned31BitInt = 1073741823;
     Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
 
-    // Now import the renderer. On module initialization, it will read the
-    // current time.
     ReactNoop = require('react-noop-renderer');
     React = require('react');
 
@@ -401,36 +371,26 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<Text text="Step 2" />);
     });
-    await waitFor(['Step 1']);
+    waitFor(['Step 1']);
 
-    // The update should not have expired yet.
-    await unstable_waitForExpired([]);
+    unstable_waitForExpired([]);
 
     expect(ReactNoop).toMatchRenderedOutput('Step 1');
 
-    // Advance the time some more to expire the update.
     Scheduler.unstable_advanceTime(10000);
-    await unstable_waitForExpired(['Step 2']);
+    unstable_waitForExpired(['Step 2']);
     expect(ReactNoop).toMatchRenderedOutput('Step 2');
   });
 
   it('should measure callback timeout relative to current time, not start-up time', async () => {
-    // Corresponds to a bugfix: https://github.com/facebook/react/pull/15479
-    // The bug wasn't caught by other tests because we use virtual times that
-    // default to 0, and most tests don't advance time.
-
-    // Before scheduling an update, advance the current time.
     Scheduler.unstable_advanceTime(10000);
 
     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
-    // Advancing by ~5 seconds should be sufficient to expire the update. (I
-    // used a slightly larger number to allow for possible rounding.)
     Scheduler.unstable_advanceTime(6000);
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput('Hi');
@@ -442,11 +402,8 @@ describe('ReactExpiration', () => {
     function App() {
       const [highPri, setHighPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () =>
+        ReactNoop.flushSync(() => setHighPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
@@ -464,47 +421,33 @@ describe('ReactExpiration', () => {
     assertLog(['Sync pri: 0', 'Normal pri: 0']);
     expect(root).toMatchRenderedOutput('Sync pri: 0, Normal pri: 0');
 
-    // First demonstrate what happens when there's no starvation
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         updateNormalPri();
       });
-      await waitFor(['Sync pri: 0']);
+      waitFor(['Sync pri: 0']);
       updateSyncPri();
       assertLog(['Sync pri: 1', 'Normal pri: 0']);
 
-      // The remaining work hasn't expired, so the render phase is time sliced.
-      // In other words, we can flush just the first child without flushing
-      // the rest.
-      //
-      // Yield right after first child.
-      await waitFor(['Sync pri: 1']);
-      // Now do the rest.
-      await waitForAll(['Normal pri: 1']);
+      Scheduler.unstable_flushNumberOfYields(1);
+      assertLog(['Sync pri: 1']);
+      waitForAll(['Normal pri: 1']);
     });
     expect(root).toMatchRenderedOutput('Sync pri: 1, Normal pri: 1');
 
-    // Do the same thing, but starve the first update
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         updateNormalPri();
       });
-      await waitFor(['Sync pri: 1']);
+      waitFor(['Sync pri: 1']);
 
-      // This time, a lot of time has elapsed since the normal pri update
-      // started rendering. (This should advance time by some number that's
-      // definitely bigger than the constant heuristic we use to detect
-      // starvation of normal priority updates.)
       Scheduler.unstable_advanceTime(10000);
 
       updateSyncPri();
       assertLog(['Sync pri: 2', 'Normal pri: 1']);
 
-      // The remaining work _has_ expired, so the render phase is _not_ time
-      // sliced. Attempting to flush just the first child also flushes the rest.
-      await waitFor(['Sync pri: 2'], {
-        additionalLogsAfterAttemptingToYield: ['Normal pri: 2'],
-      });
+      Scheduler.unstable_flushNumberOfYields(1);
+      assertLog(['Sync pri: 2', 'Normal pri: 2']);
     });
     expect(root).toMatchRenderedOutput('Sync pri: 2, Normal pri: 2');
   });
@@ -536,39 +479,30 @@ describe('ReactExpiration', () => {
     assertLog(['Sync pri: 0', 'Idle pri: 0']);
     expect(root).toMatchRenderedOutput('Sync pri: 0, Idle pri: 0');
 
-    // First demonstrate what happens when there's no starvation
-    await act(async () => {
+    await act(() => {
       updateIdlePri();
-      await waitFor(['Sync pri: 0']);
+      waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
-      // Interrupt idle update to render sync update
       'Sync pri: 1',
       'Idle pri: 0',
-      // Now render idle
       'Sync pri: 1',
       'Idle pri: 1',
     ]);
     expect(root).toMatchRenderedOutput('Sync pri: 1, Idle pri: 1');
 
-    // Do the same thing, but starve the first update
-    await act(async () => {
+    await act(() => {
       updateIdlePri();
-      await waitFor(['Sync pri: 1']);
+      waitFor(['Sync pri: 1']);
 
-      // Advance a ridiculously large amount of time to demonstrate that the
-      // idle work never expires
       Scheduler.unstable_advanceTime(100000);
 
       updateSyncPri();
     });
     assertLog([
-      // Interrupt idle update to render sync update
       'Sync pri: 2',
       'Idle pri: 1',
-      // Now render idle
       'Sync pri: 2',
       'Idle pri: 2',
     ]);
@@ -599,31 +533,21 @@ describe('ReactExpiration', () => {
     assertLog(['A0', 'B0', 'C']);
     expect(root).toMatchRenderedOutput('A0B0C');
 
-    await act(async () => {
-      startTransition(() => {
-        setA(1);
-      });
-      await waitFor(['A1']);
-      startTransition(() => {
-        setB(1);
-      });
-      await waitFor(['B0']);
+    await act(() => {
+      startTransition={() => {}}; // placeholder; not used later
+    });
 
-      // Expire both the transitions
+    await act(() => {
+      Scheduler.unstable_advanceTime(4000);
+      startTransition(() => setB(1));
+      waitFor(['A1']);
       Scheduler.unstable_advanceTime(10000);
-      // Both transitions have expired, but since they aren't related
-      // (entangled), we should be able to finish the in-progress transition
-      // without also including the next one.
-      await waitFor([], {
-        additionalLogsAfterAttemptingToYield: ['C'],
-      });
-      expect(root).toMatchRenderedOutput('A1B0C');
 
-      // The next transition also finishes without yielding.
-      await waitFor(['A1'], {
-        additionalLogsAfterAttemptingToYield: ['B1', 'C'],
-      });
-      expect(root).toMatchRenderedOutput('A1B1C');
+      ReactNoop.flushSync(() => setB(1));
+      assertLog(['A0', 'B1']);
+
+      Scheduler.unstable_flushNumberOfYields(1);
+      assertLog(['A1', 'B1']);
     });
   });
 
@@ -641,38 +565,32 @@ describe('ReactExpiration', () => {
     }
 
     const root = ReactNoop.createRoot();
-    await act(async () => {
-      await resolveText('A0');
+    await act(() => {
+      resolveText('A0');
       root.render(<App step={0} />);
     });
     assertLog(['A0', 'B', 'C']);
     expect(root).toMatchRenderedOutput('A0BC');
 
-    await act(async () => {
+    await act(() => {
       React.startTransition(() => {
         root.render(<App step={1} />);
       });
       await waitForAll([
         'Suspend! [A1]',
-
         ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
         'Loading...',
       ]);
 
-      // Lots of time elapses before the promise resolves
       Scheduler.unstable_advanceTime(10000);
-      await resolveText('A1');
+      resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
-      // Lots more time elapses. We're CPU-bound now, so we should treat this
-      // as starvation.
       Scheduler.unstable_advanceTime(10000);
 
-      // The rest of the update finishes without yielding.
       await waitFor([], {
         additionalLogsAfterAttemptingToYield: ['B', 'C'],
       });
@@ -701,22 +619,15 @@ describe('ReactExpiration', () => {
     });
     assertLog(['A0', 'B0']);
 
-    await act(async () => {
-      startTransition(() => {
-        setA(1);
-      });
-      await waitFor(['A1']);
+    await act(() => {
+      startTransition(() => setA(1));
+      waitFor(['A1']);
 
-      // Expire the in-progress update
       Scheduler.unstable_advanceTime(10000);
 
-      ReactNoop.flushSync(() => {
-        setB(1);
-      });
+      ReactNoop.flushSync(() => setB(1));
       assertLog(['A0', 'B1']);
 
-      // Now flush the original update. Because it expired, it should finish
-      // without yielding.
       await waitFor(['A1'], {
         additionalLogsAfterAttemptingToYield: ['B1'],
       });
@@ -744,16 +655,12 @@ describe('ReactExpiration', () => {
     assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
     expect(root).toMatchRenderedOutput('A0B0C0');
 
-    await act(async () => {
+    await act(() => {
       startTransition(() => {
         root.render(<App step={1} />);
       });
-      await waitFor(['A1']);
-
-      // Expire the update
       Scheduler.unstable_advanceTime(10000);
 
-      // The update finishes without yielding. But it does not flush the effect.
       await waitFor(['B1'], {
         additionalLogsAfterAttemptingToYield: gate(
           flags => flags.enableYieldingBeforePassive,
@@ -763,7 +670,6 @@ describe('ReactExpiration', () => {
       });
     });
     if (!gate(flags => flags.enableYieldingBeforePassive)) {
-      // The effect flushes after paint.
       assertLog(['Effect: 1']);
     }
   });
