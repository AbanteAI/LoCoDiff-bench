
index 21d2ee830..c3daf9631 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmpfx69mzrk_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpdcb75igy_actual.txt	
@@ -290,7 +290,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +305,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -442,11 +440,8 @@ describe('ReactExpiration', () => {
     function App() {
       const [highPri, setHighPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () =>
+        ReactNoop.flushSync(() => setHighPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
@@ -542,7 +537,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +558,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -665,6 +660,8 @@ describe('ReactExpiration', () => {
       await resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
+      // But the update doesn't expire, because it was IO bound. So we can
+      // partially rendering without finishing.
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
@@ -731,22 +728,40 @@ describe('ReactExpiration', () => {
       return (
         <>
           <Text text={'A' + step} />
-          <Text text={'B' + step} />
-          <Text text={'C' + step} />
-        </>
+        </> /* Render B and C outside the tree of the text. */
       );
     }
 
+    function B({step}) {
+      return <Text text={'B' + step} />;
+    }
+
+    function C({step}) {
+      return <Text text={'C' + step} />;
+    }
+
     const root = ReactNoop.createRoot();
     await act(() => {
-      root.render(<App step={0} />);
+      root.render(
+        <>
+          <App step={0} />
+          <B step={0} />
+          <C step={0} />
+        />,
+      );
     });
     assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
     expect(root).toMatchRenderedOutput('A0B0C0');
 
     await act(async () => {
       startTransition(() => {
-        root.render(<App step={1} />);
+        root.render(
+          <>
+            <App step={1} />
+            <B step={1} />
+            <C step={1} />
+          />,
+        );
       });
       await waitFor(['A1']);
 
