
index 21d2ee830..566c0039c 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmp43euyt6x_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpnjmo57z0_actual.txt	
@@ -221,7 +221,6 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -290,7 +289,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +304,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -361,6 +358,7 @@ describe('ReactExpiration', () => {
         </>
       );
     }
+
     React.startTransition(() => {
       root.render(<App />);
     });
@@ -425,7 +423,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
@@ -542,7 +539,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +560,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
