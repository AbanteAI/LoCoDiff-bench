
index 21d2ee830..aa1e85b2d 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmpo80zl02c_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmpat65_ehl_actual.txt	
@@ -221,7 +221,6 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -290,7 +289,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +304,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -332,10 +329,7 @@ describe('ReactExpiration', () => {
       );
     }
 
-    React.startTransition(() => {
-      root.render(<App />);
-    });
-
+    root.render(<App />);
     await waitFor(['A']);
     await waitFor(['B']);
     await waitFor(['C']);
@@ -361,9 +355,8 @@ describe('ReactExpiration', () => {
         </>
       );
     }
-    React.startTransition(() => {
-      root.render(<App />);
-    });
+
+    root.render(<App />);
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -425,7 +418,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
@@ -440,17 +432,13 @@ describe('ReactExpiration', () => {
     let updateSyncPri;
     let updateNormalPri;
     function App() {
-      const [highPri, setHighPri] = useState(0);
+      const [syncPri, setSyncPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
-          <Text text={'Sync pri: ' + highPri} />
+          <Text text={'Sync pri: ' + syncPri} />
           {', '}
           <Text text={'Normal pri: ' + normalPri} />
         </>
@@ -542,7 +530,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +551,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -575,6 +563,7 @@ describe('ReactExpiration', () => {
     expect(root).toMatchRenderedOutput('Sync pri: 2, Idle pri: 2');
   });
 
+  // @gate experimental
   it('when multiple lanes expire, we can finish the in-progress one without including the others', async () => {
     let setA;
     let setB;
@@ -607,8 +596,6 @@ describe('ReactExpiration', () => {
       startTransition(() => {
         setB(1);
       });
-      await waitFor(['B0']);
-
       // Expire both the transitions
       Scheduler.unstable_advanceTime(10000);
       // Both transitions have expired, but since they aren't related
@@ -641,7 +628,7 @@ describe('ReactExpiration', () => {
     }
 
     const root = ReactNoop.createRoot();
-    await act(async () => {
+    await act(() => {
       await resolveText('A0');
       root.render(<App step={0} />);
     });
@@ -654,10 +641,9 @@ describe('ReactExpiration', () => {
       });
       await waitForAll([
         'Suspend! [A1]',
+        'Loading...',
 
         ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
-        'Loading...',
       ]);
 
       // Lots of time elapses before the promise resolves
@@ -665,6 +651,8 @@ describe('ReactExpiration', () => {
       await resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
+      // But the update doesn't expire, because it was IO bound. So we can
+      // partially rendering without finishing.
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
@@ -679,6 +667,7 @@ describe('ReactExpiration', () => {
     });
   });
 
+  // @gate experimental
   it('flushSync should not affect expired work', async () => {
     let setA;
     let setB;
@@ -723,6 +712,7 @@ describe('ReactExpiration', () => {
     });
   });
 
+  // @gate experimental
   it('passive effects of expired update flush after paint', async () => {
     function App({step}) {
       useEffect(() => {
