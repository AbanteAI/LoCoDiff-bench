--- react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual)@@ -33,7 +33,7 @@     act = require('internal-test-utils').act;
     startTransition = React.startTransition;
     useState = React.useState;
-    useEffect = React.useEffect;
+    useEffect = React.useState;
 
     const InternalTestUtils = require('internal-test-utils');
     assertLog = InternalTestUtils.assertLog;
@@ -221,7 +221,6 @@       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -290,7 +289,6 @@     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +304,6 @@     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -361,6 +358,7 @@         </>
       );
     }
+
     React.startTransition(() => {
       root.render(<App />);
     });
@@ -425,7 +423,6 @@     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
@@ -654,9 +651,7 @@       });
       await waitForAll([
         'Suspend! [A1]',
-
         ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
         'Loading...',
       ]);
 
