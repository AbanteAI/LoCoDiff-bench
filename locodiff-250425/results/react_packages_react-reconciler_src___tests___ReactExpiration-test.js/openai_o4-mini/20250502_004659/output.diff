--- react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual)@@ -121,7 +121,6 @@       ReactNoop.render(<Text text="Step 2" />);
     });
     await waitFor(['Step 1']);
-
     expect(ReactNoop).toMatchRenderedOutput('Step 1');
 
     // Nothing has expired yet because time hasn't advanced.
@@ -161,10 +160,7 @@ 
     // First, show what happens for updates in two separate events.
     // Schedule an update.
-    React.startTransition(() => {
-      ReactNoop.render(<TextClass text="A" />);
-    });
-    // Advance the timer.
+    ReactNoop.render(<TextClass text="A" />);
     Scheduler.unstable_advanceTime(2000);
     // Partially flush the first update, then interrupt it.
     await waitFor(['A [render]']);
@@ -184,7 +180,7 @@     // between the two updates.
     ReactNoop.render(<TextClass text="A" />);
     Scheduler.unstable_advanceTime(2000);
-    assertLog([]);
+    await waitFor([]);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
     // Schedule another update.
     ReactNoop.render(<TextClass text="B" />);
@@ -218,11 +214,7 @@ 
       // First, show what happens for updates in two separate events.
       // Schedule an update.
-      React.startTransition(() => {
-        ReactNoop.render(<TextClass text="A" />);
-      });
-
-      // Advance the timer.
+      ReactNoop.render(<TextClass text="A" />);
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
       await waitFor(['A [render]']);
@@ -242,7 +234,7 @@       // between the two updates.
       ReactNoop.render(<TextClass text="A" />);
       Scheduler.unstable_advanceTime(2000);
-      assertLog([]);
+      await waitFor([]);
       expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
 
       // Perform some synchronous work. The scheduler must assume we're inside
@@ -264,13 +256,19 @@       state = {text: store.text};
       componentDidMount() {
         subscribers.push(this);
-        Scheduler.log(`${this.state.text} [${this.props.label}] [commit]`);
+        Scheduler.log(
+          `${this.state.text} [${this.props.label}] [commit]`,
+        );
       }
       componentDidUpdate() {
-        Scheduler.log(`${this.state.text} [${this.props.label}] [commit]`);
+        Scheduler.log(
+          `${this.state.text} [${this.props.label}] [commit]`,
+        );
       }
       render() {
-        Scheduler.log(`${this.state.text} [${this.props.label}] [render]`);
+        Scheduler.log(
+          `${this.state.text} [${this.props.label}] [render]`,
+        );
         return <span prop={this.state.text} />;
       }
     }
@@ -287,26 +285,18 @@     }
 
     // Initial mount
-    React.startTransition(() => {
-      ReactNoop.render(<App />);
-    });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
       'initial [C] [render]',
       'initial [D] [render]',
-      'initial [A] [commit]',
-      'initial [B] [commit]',
-      'initial [C] [commit]',
-      'initial [D] [commit]',
     ]);
+    expect(ReactNoop.createRoot().render(<App />)).toMatchRenderedOutput(null);
 
     // Partial update
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -332,9 +322,7 @@       );
     }
 
-    React.startTransition(() => {
-      root.render(<App />);
-    });
+    root.render(<App />);
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -361,9 +349,8 @@         </>
       );
     }
-    React.startTransition(() => {
-      root.render(<App />);
-    });
+
+    root.render(<App />);
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -379,21 +366,10 @@     // Tests an implementation detail where expiration times are computed using
     // bitwise operations.
 
-    jest.resetModules();
     Scheduler = require('scheduler');
-
-    const InternalTestUtils = require('internal-test-utils');
-    waitFor = InternalTestUtils.waitFor;
-    assertLog = InternalTestUtils.assertLog;
-    unstable_waitForExpired = InternalTestUtils.unstable_waitForExpired;
-
-    // Before importing the renderer, advance the current time by a number
-    // larger than the maximum allowed for bitwise operations.
     const maxSigned31BitInt = 1073741823;
     Scheduler.unstable_advanceTime(maxSigned31BitInt * 100);
 
-    // Now import the renderer. On module initialization, it will read the
-    // current time.
     ReactNoop = require('react-noop-renderer');
     React = require('react');
 
@@ -405,7 +381,6 @@ 
     // The update should not have expired yet.
     await unstable_waitForExpired([]);
-
     expect(ReactNoop).toMatchRenderedOutput('Step 1');
 
     // Advance the time some more to expire the update.
@@ -419,19 +394,16 @@     // The bug wasn't caught by other tests because we use virtual times that
     // default to 0, and most tests don't advance time.
 
-    // Before scheduling an update, advance the current time.
     Scheduler.unstable_advanceTime(10000);
 
-    React.startTransition(() => {
-      ReactNoop.render('Hi');
-    });
-
+    ReactNoop.render('Hi');
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
-    // Advancing by ~5 seconds should be sufficient to expire the update. (I
-    // used a slightly larger number to allow for possible rounding.)
+    // Advancing by ~5 seconds should be sufficient to expire the update.
     Scheduler.unstable_advanceTime(6000);
+
+    ReactNoop.render('Hi');
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput('Hi');
   });
@@ -440,17 +412,13 @@     let updateSyncPri;
     let updateNormalPri;
     function App() {
-      const [highPri, setHighPri] = useState(0);
+      const [syncPri, setSyncPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
-          <Text text={'Sync pri: ' + highPri} />
+          <Text text={'Sync pri: ' + syncPri} />
           {', '}
           <Text text={'Normal pri: ' + normalPri} />
         </>
@@ -458,7 +426,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['Sync pri: 0', 'Normal pri: 0']);
@@ -466,27 +434,26 @@ 
     // First demonstrate what happens when there's no starvation
     await act(async () => {
-      React.startTransition(() => {
+      startTransition(() => {
         updateNormalPri();
       });
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
+
       assertLog(['Sync pri: 1', 'Normal pri: 0']);
 
       // The remaining work hasn't expired, so the render phase is time sliced.
       // In other words, we can flush just the first child without flushing
       // the rest.
-      //
-      // Yield right after first child.
-      await waitFor(['Sync pri: 1']);
-      // Now do the rest.
+      Scheduler.unstable_flushNumberOfYields(1);
+      assertLog(['Sync pri: 1']);
       await waitForAll(['Normal pri: 1']);
     });
     expect(root).toMatchRenderedOutput('Sync pri: 1, Normal pri: 1');
 
     // Do the same thing, but starve the first update
     await act(async () => {
-      React.startTransition(() => {
+      startTransition(() => {
         updateNormalPri();
       });
       await waitFor(['Sync pri: 1']);
@@ -502,9 +469,8 @@ 
       // The remaining work _has_ expired, so the render phase is _not_ time
       // sliced. Attempting to flush just the first child also flushes the rest.
-      await waitFor(['Sync pri: 2'], {
-        additionalLogsAfterAttemptingToYield: ['Normal pri: 2'],
-      });
+      Scheduler.unstable_flushNumberOfYields(1);
+      assertLog(['Sync pri: 2', 'Normal pri: 2']);
     });
     expect(root).toMatchRenderedOutput('Sync pri: 2, Normal pri: 2');
   });
@@ -514,7 +480,7 @@     let updateIdlePri;
     function App() {
       const [syncPri, setSyncPri] = useState(0);
-      const [highPri, setIdlePri] = useState(0);
+      const [idlePri, setIdlePri] = useState(0);
       updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateIdlePri = () =>
         ReactNoop.idleUpdates(() => {
@@ -524,13 +490,13 @@         <>
           <Text text={'Sync pri: ' + syncPri} />
           {', '}
-          <Text text={'Idle pri: ' + highPri} />
+          <Text text={'Idle pri: ' + idlePri} />
         </>
       );
     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['Sync pri: 0', 'Idle pri: 0']);
@@ -542,7 +508,6 @@       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +529,7 @@ 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -593,7 +559,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['A0', 'B0', 'C']);
@@ -607,7 +573,6 @@       startTransition(() => {
         setB(1);
       });
-      await waitFor(['B0']);
 
       // Expire both the transitions
       Scheduler.unstable_advanceTime(10000);
@@ -628,15 +593,13 @@   });
 
   it('updates do not expire while they are IO-bound', async () => {
-    const {Suspense} = React;
-
     function App({step}) {
       return (
-        <Suspense fallback={<Text text="Loading..." />}>
+        <React.Suspense fallback={<Text text="Loading..." />}>
           <AsyncText text={'A' + step} />
           <Text text="B" />
           <Text text="C" />
-        </Suspense>
+        </React.Suspense>
       );
     }
 
@@ -649,22 +612,18 @@     expect(root).toMatchRenderedOutput('A0BC');
 
     await act(async () => {
-      React.startTransition(() => {
+      startTransition(() => {
         root.render(<App step={1} />);
       });
-      await waitForAll([
-        'Suspend! [A1]',
-
-        ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
-        'Loading...',
-      ]);
+      await waitForAll(['Suspend! [A1]', 'Loading...']);
 
       // Lots of time elapses before the promise resolves
       Scheduler.unstable_advanceTime(10000);
       await resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
+      // But the update doesn't expire, because it was IO bound. So we can
+      // partially rendering without finishing.
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
@@ -676,6 +635,7 @@       await waitFor([], {
         additionalLogsAfterAttemptingToYield: ['B', 'C'],
       });
+      expect(root).toMatchRenderedOutput('A1BC');
     });
   });
 
@@ -701,25 +661,24 @@     });
     assertLog(['A0', 'B0']);
 
-    await act(async () => {
+    await act(() => {
       startTransition(() => {
         setA(1);
       });
-      await waitFor(['A1']);
-
-      // Expire the in-progress update
-      Scheduler.unstable_advanceTime(10000);
-
-      ReactNoop.flushSync(() => {
-        setB(1);
-      });
-      assertLog(['A0', 'B1']);
-
-      // Now flush the original update. Because it expired, it should finish
-      // without yielding.
-      await waitFor(['A1'], {
-        additionalLogsAfterAttemptingToYield: ['B1'],
-      });
+    });
+    await waitFor(['A1']);
+
+    // Expire the in-progress update
+    Scheduler.unstable_advanceTime(10000);
+    ReactNoop.flushSync(() => {
+      setB(1);
+    });
+    assertLog(['A0', 'B1']);
+
+    // Now flush the original update. Because it expired, it should finish
+    // without yielding.
+    await waitFor(['A1'], {
+      additionalLogsAfterAttemptingToYield: ['B1'],
     });
   });
 
@@ -738,7 +697,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App step={0} />);
     });
     assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
@@ -767,4 +726,39 @@       assertLog(['Effect: 1']);
     }
   });
+
+  it('schedules prerender after something suspends', async () => {
+    function App({step}) {
+      return (
+        <React.Suspense fallback={<Text text="Loading..." />}>
+          <AsyncText text={'A' + step} />
+          <Text text="B" />
+          <Text text="C" />
+        </React.Suspense>
+      );
+    }
+
+    const root = ReactNoop.createRoot();
+    await act(async () => {
+      root.render(<App step={0} />);
+    });
+    assertLog(['A0', 'B', 'C']);
+    expect(root).toMatchRenderedOutput('A0BC');
+
+    await act(async () => {
+      startTransition(() => {
+        root.render(<App step={1} />);
+      });
+      await waitForAll([
+        'Suspend! [A1]',
+        'Loading...',
+
+        ...(gate('enableSiblingPrerendering')
+          ? ['B', 'C']
+          : []),
+
+        'Loading...',
+      ]);
+    });
+  });
 });