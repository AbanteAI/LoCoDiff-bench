--- react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual)@@ -4,7 +4,6 @@  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * @jest-environment node
  */
 
 'use strict';
@@ -26,7 +25,6 @@ describe('ReactExpiration', () => {
   beforeEach(() => {
     jest.resetModules();
-
     React = require('react');
     ReactNoop = require('react-noop-renderer');
     Scheduler = require('scheduler');
@@ -161,9 +159,7 @@ 
     // First, show what happens for updates in two separate events.
     // Schedule an update.
-    React.startTransition(() => {
-      ReactNoop.render(<TextClass text="A" />);
-    });
+    ReactNoop.render(<TextClass text="A" />);
     // Advance the timer.
     Scheduler.unstable_advanceTime(2000);
     // Partially flush the first update, then interrupt it.
@@ -218,10 +214,7 @@ 
       // First, show what happens for updates in two separate events.
       // Schedule an update.
-      React.startTransition(() => {
-        ReactNoop.render(<TextClass text="A" />);
-      });
-
+      ReactNoop.render(<TextClass text="A" />);
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -290,23 +283,17 @@     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
       'initial [C] [render]',
       'initial [D] [render]',
-      'initial [A] [commit]',
-      'initial [B] [commit]',
-      'initial [C] [commit]',
-      'initial [D] [commit]',
     ]);
 
     // Partial update
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -332,9 +319,7 @@       );
     }
 
-    React.startTransition(() => {
-      root.render(<App />);
-    });
+    root.render(<App />);
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -361,9 +346,8 @@         </>
       );
     }
-    React.startTransition(() => {
-      root.render(<App />);
-    });
+
+    root.render(<App />);
 
     await waitFor(['A']);
     await waitFor(['B']);
@@ -381,7 +365,6 @@ 
     jest.resetModules();
     Scheduler = require('scheduler');
-
     const InternalTestUtils = require('internal-test-utils');
     waitFor = InternalTestUtils.waitFor;
     assertLog = InternalTestUtils.assertLog;
@@ -405,7 +388,6 @@ 
     // The update should not have expired yet.
     await unstable_waitForExpired([]);
-
     expect(ReactNoop).toMatchRenderedOutput('Step 1');
 
     // Advance the time some more to expire the update.
@@ -425,13 +407,16 @@     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
-    // Advancing by ~5 seconds should be sufficient to expire the update. (I
-    // used a slightly larger number to allow for possible rounding.)
+    // Advancing by ~5 seconds should be sufficient to expire the update.
+    // (I used a slightly larger number to allow for possible rounding.)
     Scheduler.unstable_advanceTime(6000);
+
+    React.startTransition(() => {
+      ReactNoop.render('Hi');
+    });
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput('Hi');
   });
@@ -440,17 +425,13 @@     let updateSyncPri;
     let updateNormalPri;
     function App() {
-      const [highPri, setHighPri] = useState(0);
+      const [syncPri, setSyncPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
-          <Text text={'Sync pri: ' + highPri} />
+          <Text text={'Sync pri: ' + syncPri} />
           {', '}
           <Text text={'Normal pri: ' + normalPri} />
         </>
@@ -458,7 +439,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['Sync pri: 0', 'Normal pri: 0']);
@@ -471,12 +452,14 @@       });
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
+
+      expect(Scheduler).toHaveYielded([]);
       assertLog(['Sync pri: 1', 'Normal pri: 0']);
 
       // The remaining work hasn't expired, so the render phase is time sliced.
       // In other words, we can flush just the first child without flushing
       // the rest.
-      //
+      Scheduler.unstable_flushNumberOfYields(1);
       // Yield right after first child.
       await waitFor(['Sync pri: 1']);
       // Now do the rest.
@@ -497,11 +480,13 @@       // starvation of normal priority updates.)
       Scheduler.unstable_advanceTime(10000);
 
+      // So when we get a sync update, we shouldn't interrupt
       updateSyncPri();
       assertLog(['Sync pri: 2', 'Normal pri: 1']);
 
       // The remaining work _has_ expired, so the render phase is _not_ time
       // sliced. Attempting to flush just the first child also flushes the rest.
+      Scheduler.unstable_flushNumberOfYields(1);
       await waitFor(['Sync pri: 2'], {
         additionalLogsAfterAttemptingToYield: ['Normal pri: 2'],
       });
@@ -514,7 +499,7 @@     let updateIdlePri;
     function App() {
       const [syncPri, setSyncPri] = useState(0);
-      const [highPri, setIdlePri] = useState(0);
+      const [idlePri, setIdlePri] = useState(0);
       updateSyncPri = () => ReactNoop.flushSync(() => setSyncPri(n => n + 1));
       updateIdlePri = () =>
         ReactNoop.idleUpdates(() => {
@@ -524,13 +509,13 @@         <>
           <Text text={'Sync pri: ' + syncPri} />
           {', '}
-          <Text text={'Idle pri: ' + highPri} />
+          <Text text={'Idle pri: ' + idlePri} />
         </>
       );
     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['Sync pri: 0', 'Idle pri: 0']);
@@ -542,7 +527,6 @@       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +548,7 @@ 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -593,7 +578,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['A0', 'B0', 'C']);
@@ -607,7 +592,6 @@       startTransition(() => {
         setB(1);
       });
-      await waitFor(['B0']);
 
       // Expire both the transitions
       Scheduler.unstable_advanceTime(10000);
@@ -652,19 +636,15 @@       React.startTransition(() => {
         root.render(<App step={1} />);
       });
-      await waitForAll([
-        'Suspend! [A1]',
-
-        ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
-        'Loading...',
-      ]);
+      await waitForAll(['Suspend! [A1]', 'Loading...']);
 
       // Lots of time elapses before the promise resolves
       Scheduler.unstable_advanceTime(10000);
       await resolveText('A1');
       assertLog(['Promise resolved [A1]']);
 
+      // But the update doesn't expire, because it was IO bound. So we can
+      // partially rendering without finishing.
       await waitFor(['A1']);
       expect(root).toMatchRenderedOutput('A0BC');
 
@@ -677,6 +657,7 @@         additionalLogsAfterAttemptingToYield: ['B', 'C'],
       });
     });
+    expect(root).toMatchRenderedOutput('A1BC');
   });
 
   it('flushSync should not affect expired work', async () => {
@@ -696,7 +677,7 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App />);
     });
     assertLog(['A0', 'B0']);
@@ -721,6 +702,7 @@         additionalLogsAfterAttemptingToYield: ['B1'],
       });
     });
+    expect(root).toMatchRenderedOutput('A1B1');
   });
 
   it('passive effects of expired update flush after paint', async () => {
@@ -738,29 +720,29 @@     }
 
     const root = ReactNoop.createRoot();
-    await act(() => {
+    await act(async () => {
       root.render(<App step={0} />);
     });
     assertLog(['A0', 'B0', 'C0', 'Effect: 0']);
     expect(root).toMatchRenderedOutput('A0B0C0');
 
-    await act(async () => {
+    await act(() => {
       startTransition(() => {
         root.render(<App step={1} />);
       });
-      await waitFor(['A1']);
-
-      // Expire the update
-      Scheduler.unstable_advanceTime(10000);
-
-      // The update finishes without yielding. But it does not flush the effect.
-      await waitFor(['B1'], {
-        additionalLogsAfterAttemptingToYield: gate(
-          flags => flags.enableYieldingBeforePassive,
-        )
-          ? ['C1', 'Effect: 1']
-          : ['C1'],
-      });
+    });
+    await waitFor(['A1']);
+
+    // Expire the update
+    Scheduler.unstable_advanceTime(10000);
+
+    // The update finishes without yielding. But it does not flush the effect.
+    await waitFor(['B1'], {
+      additionalLogsAfterAttemptingToYield: gate(
+        flags => flags.enableYieldingBeforePassive,
+      )
+        ? ['C1', 'Effect: 1']
+        : ['C1'],
     });
     if (!gate(flags => flags.enableYieldingBeforePassive)) {
       // The effect flushes after paint.
