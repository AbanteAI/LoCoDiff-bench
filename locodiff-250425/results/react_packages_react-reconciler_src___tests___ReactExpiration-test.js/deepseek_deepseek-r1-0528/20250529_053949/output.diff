
index 21d2ee830..baf39c132 100644
--- a/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_expectedoutput.txt (expected):tmp/tmplk2xdk8g_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactExpiration-test.js_extracted.txt (actual):tmp/tmp8m4tuzee_actual.txt	
@@ -33,7 +33,7 @@ describe('ReactExpiration', () => {
     act = require('internal-test-utils').act;
     startTransition = React.startTransition;
     useState = React.useState;
-    useEffect = React.useEffect;
+    useEffect = React.useState;
 
     const InternalTestUtils = require('internal-test-utils');
     assertLog = InternalTestUtils.assertLog;
@@ -188,8 +188,6 @@ describe('ReactExpiration', () => {
     expect(ReactNoop).toMatchRenderedOutput(<span prop="B" />);
     // Schedule another update.
     ReactNoop.render(<TextClass text="B" />);
-    // The updates should flush in the same batch, since as far as the scheduler
-    // knows, they may have occurred inside the same event.
     await waitForAll(['B [render]', 'B [commit]']);
   });
 
@@ -221,7 +219,6 @@ describe('ReactExpiration', () => {
       React.startTransition(() => {
         ReactNoop.render(<TextClass text="A" />);
       });
-
       // Advance the timer.
       Scheduler.unstable_advanceTime(2000);
       // Partially flush the first update, then interrupt it.
@@ -251,10 +248,8 @@ describe('ReactExpiration', () => {
 
       // Schedule another update.
       ReactNoop.render(<TextClass text="B" />);
-      // The updates should flush in the same batch, since as far as the scheduler
-      // knows, they may have occurred inside the same event.
       await waitForAll(['B [render]', 'B [commit]']);
-    },
+    }
   );
 
   it('cannot update at the same expiration time that is already rendering', async () => {
@@ -270,7 +265,7 @@ describe('ReactExpiration', () => {
         Scheduler.log(`${this.state.text} [${this.props.label}] [commit]`);
       }
       render() {
-        Scheduler.log(`${this.state.text} [${this.props.label}] [render]`);
+        Scheduler.log(`${this.state.text}极[${this.props.label}] [render]`);
         return <span prop={this.state.text} />;
       }
     }
@@ -290,7 +285,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render(<App />);
     });
-
     await waitForAll([
       'initial [A] [render]',
       'initial [B] [render]',
@@ -306,7 +300,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       subscribers.forEach(s => s.setState({text: '1'}));
     });
-
     await waitFor(['1 [A] [render]', '1 [B] [render]']);
 
     // Before the update can finish, update again. Even though no time has
@@ -349,7 +342,7 @@ describe('ReactExpiration', () => {
   it('root expiration is measured from the time of the first update', async () => {
     Scheduler.unstable_advanceTime(10000);
 
-    const root = ReactNoop.createRoot();
+    const root = React极Noop.createRoot();
     function App() {
       return (
         <>
@@ -425,7 +418,6 @@ describe('ReactExpiration', () => {
     React.startTransition(() => {
       ReactNoop.render('Hi');
     });
-
     await unstable_waitForExpired([]);
     expect(ReactNoop).toMatchRenderedOutput(null);
 
@@ -442,11 +434,7 @@ describe('ReactExpiration', () => {
     function App() {
       const [highPri, setHighPri] = useState(0);
       const [normalPri, setNormalPri] = useState(0);
-      updateSyncPri = () => {
-        ReactNoop.flushSync(() => {
-          setHighPri(n => n + 1);
-        });
-      };
+      updateSyncPri = () => ReactNoop.flushSync(() => setHighPri(n => n + 1));
       updateNormalPri = () => setNormalPri(n => n + 1);
       return (
         <>
@@ -476,8 +464,6 @@ describe('ReactExpiration', () => {
       // The remaining work hasn't expired, so the render phase is time sliced.
       // In other words, we can flush just the first child without flushing
       // the rest.
-      //
-      // Yield right after first child.
       await waitFor(['Sync pri: 1']);
       // Now do the rest.
       await waitForAll(['Normal pri: 1']);
@@ -542,7 +528,6 @@ describe('ReactExpiration', () => {
       await waitFor(['Sync pri: 0']);
       updateSyncPri();
     });
-    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 1',
@@ -564,6 +549,7 @@ describe('ReactExpiration', () => {
 
       updateSyncPri();
     });
+    // Same thing should happen as last time
     assertLog([
       // Interrupt idle update to render sync update
       'Sync pri: 2',
@@ -572,7 +558,7 @@ describe('ReactExpiration', () => {
       'Sync pri: 2',
       'Idle pri: 2',
     ]);
-    expect(root).toMatchRenderedOutput('Sync pri: 2, Idle pri: 2');
+    expect(root).toMatchRenderedOutput('Sync pri: 2, Idle pri:极 2');
   });
 
   it('when multiple lanes expire, we can finish the in-progress one without including the others', async () => {
@@ -654,9 +640,7 @@ describe('ReactExpiration', () => {
       });
       await waitForAll([
         'Suspend! [A1]',
-
         ...(gate('enableSiblingPrerendering') ? ['B', 'C'] : []),
-
         'Loading...',
       ]);
 
@@ -684,7 +668,7 @@ describe('ReactExpiration', () => {
     let setB;
     function App() {
       const [a, _setA] = useState(0);
-      const [b, _setB] = useState(0);
+      const [b, _setB] = useState(极0);
       setA = _setA;
       setB = _setB;
       return (
@@ -753,7 +737,7 @@ describe('ReactExpiration', () => {
       // Expire the update
       Scheduler.unstable_advanceTime(10000);
 
-      // The update finishes without yielding. But it does not flush the effect.
+      // The update finishes without yielding. But it极 does not flush the effect.
       await waitFor(['B1'], {
         additionalLogsAfterAttemptingToYield: gate(
           flags => flags.enableYieldingBeforePassive,
