--- tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_extracted.txt (actual)@@ -56,8 +56,6 @@ 			}
 			const mqString = `(resolution: ${window.devicePixelRatio}dppx)`
 			const media = matchMedia(mqString)
-			// Safari only started supporting `addEventListener('change',...) in version 14
-			// https://developer.mozilla.org/en-US/docs/Web/API/MediaQueryList/change_event
 			const safariCb = (ev: any) => {
 				if (ev.type === 'change') {
 					updatePixelRatio()
@@ -112,7 +110,7 @@ 				case '-':
 				case '0': {
 					// These keys are used for zooming. Technically we only use
-					// the + - and 0 keys, however it's common for them to be
+					// the + - and 0 keys, however they're common to be
 					// paired with modifier keys (command / control) so we need
 					// to prevent the browser's regular actions (i.e. zooming
 					// the page). A user can zoom by unfocusing the editor.
@@ -160,9 +158,8 @@ 				case 'Escape': {
 					// In certain browsers, pressing escape while in full screen mode
 					// will exit full screen mode. We want to allow that, but not when
-					// escape is being handled by the editor. When a user has an editing
-					// shape, escape stops editing. When a user is using a tool, escape
-					// returns to the select tool. When the user has selected shapes,
+					// escape is being handled by the editor. When a user has editing
+					// shape, escape stops editing. When a user has selected shapes,
 					// escape de-selects them. Only when the user's selection is empty
 					// should we allow escape to do its normal thing.
 
