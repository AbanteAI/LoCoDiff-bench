
index 0e1ff323..6ad95b0f 100644
--- a/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_expectedoutput.txt (expected):tmp/tmp8p2qf74w_expected.txt	
+++ b/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_extracted.txt (actual):tmp/tmp1row6_rf_actual.txt	
@@ -47,7 +47,6 @@ export function useDocumentEvents() {
 
 	useEffect(() => {
 		if (typeof window === 'undefined' || !('matchMedia' in window)) return
-
 		// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_extracted.txt (actual): (() => void) | null = null
 		const updatePixelRatio = () => {
@@ -91,11 +90,12 @@ export function useDocumentEvents() {
 		if (!isAppFocused) return
 
 		const handleKeyDown = (e: KeyboardEvent) => {
+			if (activeElementShouldCaptureKeys()) return
+
 			if (
 				e.altKey &&
 				// todo: When should we allow the alt key to be used? Perhaps states should declare which keys matter to them?
-				(editor.isIn('zoom') || !editor.getPath().endsWith('.idle')) &&
-				!areShortcutsDisabled(editor)
+				(editor.isIn('zoom') || !editor.getPath().endsWith('.idle'))
 			) {
 				// On windows the alt key opens the menu bar.
 				// We want to prevent that if the user is doing something else,
@@ -105,6 +105,7 @@ export function useDocumentEvents() {
 
 			if ((e as any).isKilled) return
 			;(e as any).isKilled = true
+
 			const hasSelectedShapes = !!editor.getSelectedShapeIds().length
 
 			switch (e.key) {
@@ -218,7 +219,13 @@ export function useDocumentEvents() {
 				return
 			}
 
+			// Use the , key to send pointer events
 			if (e.key === ',') {
+				// this was moved to useKeyBoardShortcuts; it's possible
+				// that the comma key is pressed when the container is not
+				// focused, for example when the user has just interacted
+				// with the toolbar. We need to handle it on the window
+				// (ofc ensuring it's a correct time for a shortcut)
 				return
 			}
 
@@ -274,7 +281,6 @@ export function useDocumentEvents() {
 		container.addEventListener('touchstart', handleTouchStart, { passive: false })
 
 		container.addEventListener('wheel', handleWheel, { passive: false })
-
 		document.addEventListener('gesturestart', preventDefault)
 		document.addEventListener('gesturechange', preventDefault)
 		document.addEventListener('gestureend', preventDefault)
@@ -297,6 +303,7 @@ export function useDocumentEvents() {
 	}, [editor, container, isAppFocused, isEditing])
 }
 
+
 function areShortcutsDisabled(editor: Editor) {
 	return editor.menus.hasOpenMenus() || activeElementShouldCaptureKeys()
 }
\ No newline at end of file
