
index 0e1ff323..2756cd48 100644
--- a/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_expectedoutput.txt (expected):tmp/tmptyzyzid1_expected.txt	
+++ b/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_extracted.txt (actual):tmp/tmpkz9fppc5_actual.txt	
@@ -2,7 +2,7 @@ import { useValue } from '@tldraw/state-react'
 import { useEffect } from 'react'
 import { Editor } from '../editor/Editor'
 import { TLKeyboardEventInfo } from '../editor/types/event-types'
-import { activeElementShouldCaptureKeys, preventDefault, stopEventPropagation } from '../utils/dom'
+import { preventDefault, stopEventPropagation } from '../utils/dom'
 import { isAccelKey } from '../utils/keyboard'
 import { useContainer } from './useContainer'
 import { useEditor } from './useEditor'
@@ -56,8 +56,6 @@ export function useDocumentEvents() {
 			}
 			const mqString = `(resolution: ${window.devicePixelRatio}dppx)`
 			const media = matchMedia(mqString)
-			// Safari only started supporting `addEventListener('change',...) in version 14
-			// https://developer.mozilla.org/en-US/docs/Web/tldraw_packages_editor_src_lib_hooks_useDocumentEvents.ts_extracted.txt (actual): any) => {
 				if (ev.type === 'change') {
 					updatePixelRatio()
@@ -111,25 +109,9 @@ export function useDocumentEvents() {
 				case '=':
 				case '-':
 				case '0': {
-					// These keys are used for zooming. Technically we only use
-					// the + - and 0 keys, however it's common for them to be
-					// paired with modifier keys (command / control) so we need
-					// to prevent the browser's regular actions (i.e. zooming
-					// the page). A user can zoom by unfocusing the editor.
-					if (e.metaKey || e.ctrlKey) {
-						preventDefault(e)
-						return
-					}
-					break
-				}
-				case 'Tab': {
 					if (areShortcutsDisabled(editor)) {
 						return
 					}
-					// isEditing here sounds like it's about text editing
-					// but more specifically, this is so you can tab into an
-					// embed that's being 'edited'. In our world,
-					// editing an embed, means it's interactive.
 					if (hasSelectedShapes && !isEditing) {
 						// This is used in tandem with shape navigation.
 						preventDefault(e)
@@ -150,28 +132,18 @@ export function useDocumentEvents() {
 					break
 				}
 				case ',': {
-					// this was moved to useKeyBoardShortcuts; it's possible
-					// that the comma key is pressed when the container is not
-					// focused, for example when the user has just interacted
-					// with the toolbar. We need to handle it on the window
-					// (ofc ensuring it's a correct time for a shortcut)
-					return
+					if (areShortcutsDisabled(editor)) return
+					break
 				}
 				case 'Escape': {
-					// In certain browsers, pressing escape while in full screen mode
-					// will exit full screen mode. We want to allow that, but not when
-					// escape is being handled by the editor. When a user has an editing
-					// shape, escape stops editing. When a user is using a tool, escape
-					// returns to the select tool. When the user has selected shapes,
-					// escape de-selects them. Only when the user's selection is empty
-					// should we allow escape to do its normal thing.
+					if (areShortcutsDisabled(editor)) return
 
 					if (editor.getEditingShape() || editor.getSelectedShapeIds().length > 0) {
 						preventDefault(e)
 					}
 
 					// Don't do anything if we open menus open
-					if (editor.menus.getOpenMenus().length > 0) return
+					if (editor.menus.hasOpenMenus()) return
 
 					if (editor.inputs.keys.has('Escape')) {
 						// noop
@@ -202,7 +174,7 @@ export function useDocumentEvents() {
 				code: e.code,
 				shiftKey: e.shiftKey,
 				altKey: e.altKey,
-				ctrlKey: e.metaKey || e.ctrlKey,
+				ctrlKey: e.ctrlKey,
 				metaKey: e.metaKey,
 				accelKey: isAccelKey(e),
 			}
@@ -229,7 +201,7 @@ export function useDocumentEvents() {
 				code: e.code,
 				shiftKey: e.shiftKey,
 				altKey: e.altKey,
-				ctrlKey: e.metaKey || e.ctrlKey,
+				ctrlKey: e.ctrlKey,
 				metaKey: e.metaKey,
 				accelKey: isAccelKey(e),
 			}
@@ -248,7 +220,6 @@ export function useDocumentEvents() {
 				// if the touch area overlaps with the screen edges
 				// it's likely to trigger the navigation. We prevent the
 				// touchstart event in that case.
-				// todo: make this relative to the actual window, not the editor's screen bounds
 				if (
 					touchXPosition - touchXRadius < 10 ||
 					touchXPosition + touchXRadius > editor.getViewportScreenBounds().width - 10
@@ -275,9 +246,9 @@ export function useDocumentEvents() {
 
 		container.addEventListener('wheel', handleWheel, { passive: false })
 
-		document.addEventListener('gesturestart', preventDefault)
-		document.addEventListener('gesturechange', preventDefault)
-		document.addEventListener('gestureend', preventDefault)
+		container.addEventListener('gesturestart', preventDefault)
+		container.addEventListener('gesturechange', preventDefault)
+		container.addEventListener('gestureend', preventDefault)
 
 		container.addEventListener('keydown', handleKeyDown)
 		container.addEventListener('keyup', handleKeyUp)
@@ -287,9 +258,9 @@ export function useDocumentEvents() {
 
 			container.removeEventListener('wheel', handleWheel)
 
-			document.removeEventListener('gesturestart', preventDefault)
-			document.removeEventListener('gesturechange', preventDefault)
-			document.removeEventListener('gestureend', preventDefault)
+			container.removeEventListener('gesturestart', preventDefault)
+			container.removeEventListener('gesturechange', preventDefault)
+			container.removeEventListener('gestureend', preventDefault)
 
 			container.removeEventListener('keydown', handleKeyDown)
 			container.removeEventListener('keyup', handleKeyUp)
