Here's a summary of the final state of the `useDocumentEvents.ts` file after all the commits:

```typescript
import { useValue } from '@tldraw/state-react'
import { useEffect } from 'react'
import { Editor } from '../editor/Editor'
import { TLKeyboardEventInfo } from '../editor/types/event-types'
import { activeElementShouldCaptureKeys, preventDefault, stopEventPropagation } from '../utils/dom'
import { isAccelKey } from '../utils/keyboard'
import { useContainer } from './useContainer'
import { useEditor } from './useEditor'

export function useDocumentEvents() {
  const editor = useEditor()
  const container = useContainer()

  const isEditing = useValue('isEditing', () => editor.getEditingShapeId(), [editor])
  const isAppFocused = useValue('isFocused', () => editor.getIsFocused(), [editor])

  // Prevent default drag and drop behavior on container
  useEffect(() => {
    // ... (drag and drop prevention logic)
  }, [container])

  // Update device pixel ratio
  useEffect(() => {
    // ... (device pixel ratio update logic)
  }, [editor])

  useEffect(() => {
    if (!isAppFocused) return

    const handleKeyDown = (e: KeyboardEvent) => {
      // ... (key down event handling logic)
    }

    const handleKeyUp = (e: KeyboardEvent) => {
      // ... (key up event handling logic)
    }

    const handleTouchStart = (e: TouchEvent) => {
      // ... (touch start event handling logic)
    }

    const handleWheel = (e: WheelEvent) => {
      // ... (wheel event handling logic)
    }

    // Add event listeners
    container.addEventListener('touchstart', handleTouchStart, { passive: false })
    container.addEventListener('wheel', handleWheel, { passive: false })
    document.addEventListener('gesturestart', preventDefault)
    document.addEventListener('gesturechange', preventDefault)
    document.addEventListener('gestureend', preventDefault)
    container.addEventListener('keydown', handleKeyDown)
    container.addEventListener('keyup', handleKeyUp)

    // Cleanup function
    return () => {
      // ... (remove event listeners)
    }
  }, [editor, container, isAppFocused, isEditing])
}

function areShortcutsDisabled(editor: Editor) {
  return editor.menus.hasOpenMenus() || activeElementShouldCaptureKeys()
}
```

Key changes and features:
1. Handles drag and drop events to prevent default browser behavior.
2. Updates device pixel ratio when it changes.
3. Manages keyboard events for various editor functionalities.
4. Handles touch and wheel events.
5. Prevents certain default behaviors (e.g., gestures).
6. Implements logic for keyboard navigation of shapes.
7. Manages focus and editing states.
8. Disables shortcuts when menus are open or when certain elements are focused.

The file has evolved to handle various input events and editor states, improving accessibility and user interaction with the editor.