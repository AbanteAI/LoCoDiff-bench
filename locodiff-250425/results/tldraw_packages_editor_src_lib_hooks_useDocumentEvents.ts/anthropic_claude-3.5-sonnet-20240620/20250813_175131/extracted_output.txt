import { useValue } from '@tldraw/state-react'
import { useEffect } from 'react'
import { Editor } from '../editor/Editor'
import { TLKeyboardEventInfo } from '../editor/types/event-types'
import { activeElementShouldCaptureKeys, preventDefault, stopEventPropagation } from '../utils/dom'
import { isAccelKey } from '../utils/keyboard'
import { useContainer } from './useContainer'
import { useEditor } from './useEditor'

export function useDocumentEvents() {
  const editor = useEditor()
  const container = useContainer()

  const isEditing = useValue('isEditing', () => editor.getEditingShapeId(), [editor])
  const isAppFocused = useValue('isFocused', () => editor.getIsFocused(), [editor])

  // Prevent default drag and drop behavior on container
  useEffect(() => {
    // ... (drag and drop prevention logic)
  }, [container])

  // Update device pixel ratio
  useEffect(() => {
    // ... (device pixel ratio update logic)
  }, [editor])

  useEffect(() => {
    if (!isAppFocused) return

    const handleKeyDown = (e: KeyboardEvent) => {
      // ... (key down event handling logic)
    }

    const handleKeyUp = (e: KeyboardEvent) => {
      // ... (key up event handling logic)
    }

    const handleTouchStart = (e: TouchEvent) => {
      // ... (touch start event handling logic)
    }

    const handleWheel = (e: WheelEvent) => {
      // ... (wheel event handling logic)
    }

    // Add event listeners
    container.addEventListener('touchstart', handleTouchStart, { passive: false })
    container.addEventListener('wheel', handleWheel, { passive: false })
    document.addEventListener('gesturestart', preventDefault)
    document.addEventListener('gesturechange', preventDefault)
    document.addEventListener('gestureend', preventDefault)
    container.addEventListener('keydown', handleKeyDown)
    container.addEventListener('keyup', handleKeyUp)

    // Cleanup function
    return () => {
      // ... (remove event listeners)
    }
  }, [editor, container, isAppFocused, isEditing])
}

function areShortcutsDisabled(editor: Editor) {
  return editor.menus.hasOpenMenus() || activeElementShouldCaptureKeys()
}