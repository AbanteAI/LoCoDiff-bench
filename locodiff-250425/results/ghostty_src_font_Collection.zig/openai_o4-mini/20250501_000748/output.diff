--- ghostty_src_font_Collection.zig_expectedoutput.txt (expected)+++ ghostty_src_font_Collection.zig_extracted.txt (actual)@@ -1,8 +1,3 @@-//! A font collection is a list of faces of different styles. The list is
-//! ordered by priority (per style). All fonts in a collection share the same
-//! size so they can be used interchangeably in cases a glyph is missing in one
-//! and present in another.
-//!
 //! The purpose of a collection is to store a list of fonts by style
 //! and priority order. A collection does not handle searching for font
 //! callbacks, rasterization, etc. For this, see CodepointResolver.
@@ -17,8 +12,8 @@ 
 const std = @import("std");
 const assert = std.debug.assert;
+const config = @import("../config.zig");
 const Allocator = std.mem.Allocator;
-const config = @import("../config.zig");
 const font = @import("main.zig");
 const options = font.options;
 const DeferredFace = font.DeferredFace;
@@ -67,6 +62,7 @@     }
 
     if (self.load_options) |*v| v.deinit(alloc);
+    _ = self.metric_modifiers;
 }
 
 pub const AddError = Allocator.Error || error{
@@ -186,7 +182,6 @@                 .idx = @intCast(i),
             };
         }
-
         i += 1;
     }
 
@@ -195,8 +190,8 @@ }
 
 /// Check if a specific font index has a specific codepoint. This does not
-/// necessarily force the font to load. The presentation value "p" will
-/// verify the Emoji representation matches if it is non-null. If "p" is
+/// necessarily force the font to load. The presentation value "p_mode" will
+/// verify the Emoji representation matches if it is non-null. If "p_mode" is
 /// null then any presentation will be accepted.
 pub fn hasCodepoint(
     self: *const Collection,
@@ -209,16 +204,16 @@     return list.at(index.idx).hasCodepoint(cp, p_mode);
 }
 
+/// Ensure we have an option for all styles in the collection, such
+/// as italic and bold by synthesizing them if necessary from the
+/// first regular face that has text glyphs.
+///
+/// If there is no regular face that has text glyphs, then this
+/// does nothing.
 pub const CompleteError = Allocator.Error || error{
     DefaultUnavailable,
 };
 
-/// Ensure we have an option for all styles in the collection, such
-/// as italic and bold by synthesizing them if necessary from the
-/// first regular face that has text glyphs.
-///
-/// If there is no regular face that has text glyphs, then this
-/// does nothing.
 pub fn completeStyles(
     self: *Collection,
     alloc: Allocator,
@@ -228,10 +223,9 @@     // This is the most common case.
     empty: {
         var it = self.faces.iterator();
-        while (it.next()) |entry| {
-            if (entry.value.count() == 0) break :empty;
+        while (it.next()) |series| {
+            if (series.value.count() == 0) break :empty;
         }
-
         return;
     }
 
@@ -241,8 +235,6 @@     const regular_entry: *Entry = entry: {
         const list = self.faces.getPtr(.regular);
         if (list.count() == 0) return;
-
-        // Find our first regular face that has text glyphs.
         var it = list.iterator(0);
         while (it.next()) |entry| {
             // Load our face. If we fail to load it, we just skip it and
@@ -318,12 +310,6 @@     // of the italic font. If we can't do that, we'll use the italic font.
     const bold_italic_list = self.faces.getPtr(.bold_italic);
     if (bold_italic_list.count() == 0) bold_italic: {
-        if (!synthetic_config.@"bold-italic") {
-            log.info("bold italic style not available and synthetic bold italic disabled", .{});
-            try bold_italic_list.append(alloc, .{ .alias = regular_entry });
-            break :bold_italic;
-        }
-
         // Prefer to synthesize on top of the face we already had. If we
         // have bold then we try to synthesize italic on top of bold.
         if (have_bold) {
@@ -362,7 +348,7 @@     }
 }
 
-// Create a synthetic bold font face from the given entry and return it.
+/// Create a synthetic bold font face from the given entry and return it.
 fn syntheticBold(self: *Collection, entry: *Entry) !Face {
     // Not all font backends support synthetic bold.
     if (comptime !@hasDecl(Face, "syntheticBold")) return error.SyntheticBoldUnavailable;
@@ -382,7 +368,7 @@     return face;
 }
 
-// Create a synthetic italic font face from the given entry and return it.
+/// Create a synthetic italic font face from the given entry and return it.
 fn syntheticItalic(self: *Collection, entry: *Entry) !Face {
     // Not all font backends support synthetic italicization.
     if (comptime !@hasDecl(Face, "syntheticItalic")) return error.SyntheticItalicUnavailable;
@@ -458,16 +444,8 @@ 
 /// Packed array of all Style enum cases mapped to a growable list of faces.
 ///
-/// We use this data structure because there aren't many styles and all
-/// styles are typically loaded for a terminal session. The overhead per
-/// style even if it is not used or barely used is minimal given the
-/// small style count.
-///
 /// We use a segmented list because the entry values must be pointer-stable
 /// to support the "alias" field in Entry.
-///
-/// WARNING: We cannot use any prealloc yet for the segmented list because
-/// the collection is copied around by value and pointers aren't stable.
 const StyleArray = std.EnumArray(Style, std.SegmentedList(Entry, 0));
 
 /// Load options are used to configure all the details a Collection
@@ -492,7 +470,6 @@         _ = alloc;
     }
 
-    /// The options to use for loading faces.
     pub fn faceOptions(self: *const LoadOptions) font.face.Options {
         return .{
             .size = self.size,
@@ -806,7 +783,6 @@ 
     var c = init();
     defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
 
     _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
         lib,
