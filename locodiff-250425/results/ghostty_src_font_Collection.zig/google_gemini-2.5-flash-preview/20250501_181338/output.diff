--- ghostty_src_font_Collection.zig_expectedoutput.txt (expected)+++ ghostty_src_font_Collection.zig_extracted.txt (actual)@@ -106,12 +106,17 @@     return .{ .style = style, .idx = @intCast(idx) };
 }
 
+pub const GetFaceError = error{
+    SpecialHasNoFace,
+    DeferredLoadingUnavailable,
+} || Face.LoadError;
+
 /// Return the Face represented by a given Index. The returned pointer
 /// is only valid as long as this collection is not modified.
 ///
 /// This will initialize the face if it is deferred and not yet loaded,
 /// which can fail.
-pub fn getFace(self: *Collection, index: Index) !*Face {
+pub fn getFace(self: *Collection, index: Index) GetFaceError!*Face {
     if (index.special() != null) return error.SpecialHasNoFace;
     const list = self.faces.getPtr(index.style);
     const item: *Entry = item: {
@@ -135,7 +140,7 @@ /// Get the face from an entry.
 ///
 /// This entry must not be an alias.
-fn getFaceFromEntry(self: *Collection, entry: *Entry) !*Face {
+fn getFaceFromEntry(self: *Collection, entry: *Entry) GetFaceError!*Face {
     assert(entry.* != .alias);
 
     return switch (entry.*) {
@@ -195,9 +200,9 @@ }
 
 /// Check if a specific font index has a specific codepoint. This does not
-/// necessarily force the font to load. The presentation value "p" will
-/// verify the Emoji representation matches if it is non-null. If "p" is
-/// null then any presentation will be accepted.
+/// necessarily force the font to load. The presentation value "p_mode" will
+/// verify the Emoji representation matches if it is non-null. If "p_mode" is
+/// .any then any presentation will be accepted.
 pub fn hasCodepoint(
     self: *const Collection,
     index: Index,
@@ -211,7 +216,9 @@ 
 pub const CompleteError = Allocator.Error || error{
     DefaultUnavailable,
-};
+    SyntheticBoldUnavailable,
+    SyntheticItalicUnavailable,
+} || GetFaceError;
 
 /// Ensure we have an option for all styles in the collection, such
 /// as italic and bold by synthesizing them if necessary from the
@@ -402,12 +409,16 @@     return face;
 }
 
+pub const SetSizeError = error{
+    DeferredLoadingUnavailable,
+} || Face.SetSizeError || UpdateMetricsError;
+
 /// Update the size of all faces in the collection. This will
 /// also update the size in the load options for future deferred
 /// face loading.
 ///
 /// This requires load options to be set.
-pub fn setSize(self: *Collection, size: DesiredSize) !void {
+pub fn setSize(self: *Collection, size: DesiredSize) SetSizeError!void {
     // Get a pointer to our options so we can modify the size.
     const opts = if (self.load_options) |*v|
         v
@@ -436,9 +447,7 @@     try self.updateMetrics();
 }
 
-const UpdateMetricsError = font.Face.GetMetricsError || error{
-    CannotLoadPrimaryFont,
-};
+pub const UpdateMetricsError = font.Face.GetMetricsError || GetFaceError;
 
 /// Update the cell metrics for this collection, based on
 /// the primary font and the modifiers in `metric_modifiers`.
@@ -841,9 +850,9 @@         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
+    try std.testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
     try c.setSize(.{ .points = 24 });
-    try testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
+    try std.testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
 }
 
 test hasCodepoint {
@@ -932,7 +941,7 @@         .underline_position = 17,
         .underline_thickness = 1,
         .strikethrough_position = 10,
-        .strikethrough_thickness = 1,
+        .strikethickness = 1,
         .overline_position = 0,
         .overline_thickness = 1,
         .box_thickness = 1,
@@ -948,7 +957,7 @@         .underline_position = 34,
         .underline_thickness = 2,
         .strikethrough_position = 19,
-        .strikethrough_thickness = 2,
+        .strikethickness = 2,
         .overline_position = 0,
         .overline_thickness = 2,
         .box_thickness = 2,
