--- ghostty_src_font_Collection.zig_expectedoutput.txt (expected)+++ ghostty_src_font_Collection.zig_extracted.txt (actual)@@ -276,8 +276,7 @@     // If we can't create a synthetic italic face, we'll just use the regular
     // face for italic.
     const italic_list = self.faces.getPtr(.italic);
-    const have_italic = italic_list.count() > 0;
-    if (!have_italic) italic: {
+    if (italic_list.count() == 0) italic: {
         if (!synthetic_config.italic) {
             log.info("italic style not available and synthetic italic disabled", .{});
             try italic_list.append(alloc, .{ .alias = regular_entry });
@@ -296,8 +295,7 @@ 
     // If we don't have bold, use the regular font.
     const bold_list = self.faces.getPtr(.bold);
-    const have_bold = bold_list.count() > 0;
-    if (!have_bold) bold: {
+    if (bold_list.count() == 0) bold: {
         if (!synthetic_config.bold) {
             log.info("bold style not available and synthetic bold disabled", .{});
             try bold_list.append(alloc, .{ .alias = regular_entry });
@@ -314,8 +312,7 @@         try bold_list.append(alloc, .{ .loaded = synthetic });
     }
 
-    // If we don't have bold italic, we attempt to synthesize a bold variant
-    // of the italic font. If we can't do that, we'll use the italic font.
+    // If we don't have bold italic, use the regular italic font.
     const bold_italic_list = self.faces.getPtr(.bold_italic);
     if (bold_italic_list.count() == 0) bold_italic: {
         if (!synthetic_config.@"bold-italic") {
@@ -549,7 +546,7 @@         }
     }
 
-    /// True if the entry is deferred.
+    /// True if this entry is deferred.
     fn isDeferred(self: Entry) bool {
         return switch (self) {
             .deferred, .fallback_deferred => true,
@@ -819,139 +816,4 @@     try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) == null);
     try c.completeStyles(alloc, .{});
     try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
-}
-
-test setSize {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
-    try c.setSize(.{ .points = 24 });
-    try testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
-}
-
-test hasCodepoint {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(!c.hasCodepoint(idx, 'ðŸ¥¸', .{ .any = {} }));
-}
-
-test "hasCodepoint emoji default graphical" {
-    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testEmoji = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testEmoji,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(c.hasCodepoint(idx, 'ðŸ¥¸', .{ .any = {} }));
-    // TODO(fontmem): test explicit/implicit
-}
-
-test "metrics" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.inconsolata;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try c.updateMetrics();
-
-    try std.testing.expectEqual(font.Metrics{
-        .cell_width = 8,
-        // The cell height is 17 px because the calculation is
-        //
-        //  ascender - descender + gap
-        //
-        // which, for inconsolata is
-        //
-        //  859 - -190 + 0
-        //
-        // font units, at 1000 units per em that works out to 1.049 em,
-        // and 1em should be the point size * dpi scale, so 12 * (96/72)
-        // which is 16, and 16 * 1.049 = 16.784, which finally is rounded
-        // to 17.
-        .cell_height = 17,
-        .cell_baseline = 3,
-        .underline_position = 17,
-        .underline_thickness = 1,
-        .strikethrough_position = 10,
-        .strikethrough_thickness = 1,
-        .overline_position = 0,
-        .overline_thickness = 1,
-        .box_thickness = 1,
-        .cursor_height = 17,
-    }, c.metrics);
-
-    // Resize should change metrics
-    try c.setSize(.{ .points = 24, .xdpi = 96, .ydpi = 96 });
-    try std.testing.expectEqual(font.Metrics{
-        .cell_width = 16,
-        .cell_height = 34,
-        .cell_baseline = 6,
-        .underline_position = 34,
-        .underline_thickness = 2,
-        .strikethrough_position = 19,
-        .strikethrough_thickness = 2,
-        .overline_position = 0,
-        .overline_thickness = 2,
-        .box_thickness = 2,
-        .cursor_height = 34,
-    }, c.metrics);
-}+    try testing.expect(c.getIndex('A