--- ghostty_src_font_Collection.zig_expectedoutput.txt (expected)+++ ghostty_src_font_Collection.zig_extracted.txt (actual)@@ -13,6 +13,12 @@ //! for fallback fonts as efficiently as possible. For example, when the glyph
 //! "X" is not found, we can quickly search through deferred fonts rather
 //! than loading the font completely.
+//!
+//! This data structure is mostly static once the initial fonts are loaded.
+//! This **may** change in the future to make the collection more dynamic.
+//!
+//! It is a requirement that only one face "family" is in the collection,
+//! i.e. only fonts in the same "family" such as "Inconsolata".
 const Collection = @This();
 
 const std = @import("std");
@@ -273,8 +279,7 @@     };
 
     // If we don't have italic, attempt to create a synthetic italic face.
-    // If we can't create a synthetic italic face, we'll just use the regular
-    // face for italic.
+    // If we can't do that, we'll just use the regular face for italic.
     const italic_list = self.faces.getPtr(.italic);
     const have_italic = italic_list.count() > 0;
     if (!have_italic) italic: {
@@ -428,7 +433,6 @@             // The size for when they're loaded is set since `opts` changed.
             .deferred, .fallback_deferred => continue,
 
-            // Alias faces don't own their size.
             .alias => continue,
         };
     }
@@ -457,11 +461,6 @@ }
 
 /// Packed array of all Style enum cases mapped to a growable list of faces.
-///
-/// We use this data structure because there aren't many styles and all
-/// styles are typically loaded for a terminal session. The overhead per
-/// style even if it is not used or barely used is minimal given the
-/// small style count.
 ///
 /// We use a segmented list because the entry values must be pointer-stable
 /// to support the "alias" field in Entry.
@@ -492,7 +491,6 @@         _ = alloc;
     }
 
-    /// The options to use for loading faces.
     pub fn faceOptions(self: *const LoadOptions) font.face.Options {
         return .{
             .size = self.size,
@@ -501,13 +499,93 @@     }
 };
 
+/// The requested presentation for a codepoint.
+pub const PresentationMode = union(enum) {
+    /// The codepoint has an explicit presentation that is required,
+    /// i.e. VS15/V16.
+    explicit: Presentation,
+
+    /// The codepoint has no explicit presentation and we should use
+    /// the presentation from the UCD.
+    default: Presentation,
+
+    /// The codepoint can be any presentation.
+    any: void,
+};
+
+/// This represents a specific font in the collection.
+///
+/// The backing size of this packed struct represents the total number
+/// of possible usable fonts in a collection. And the number of bits
+/// used for the index and not the style represents the total number
+/// of possible usable fonts for a given style.
+///
+/// The goal is to keep the size of this struct as small as practical. We
+/// accept the limitations that this imposes so long as they're reasonable.
+/// At the time of writing this comment, this is a 16-bit struct with 13
+/// bits used for the index, supporting up to 8192 fonts per style. This
+/// seems more than reasonable. There are synthetic scenarios where this
+/// could be a limitation but I can't think of any that are practical.
+///
+/// If you somehow need more fonts per style, you can increase the size of
+/// the Backing type and everything should just work fine.
+pub const Index = packed struct(Index.Backing) {
+    const Backing = u16;
+    const backing_bits = @typeInfo(Backing).int.bits;
+
+    /// The number of bits we use for the index.
+    const idx_bits = backing_bits - @typeInfo(@typeInfo(Style).@"enum".tag_type).int.bits;
+    pub const IndexInt = @Type(.{ .int = .{ .signedness = .unsigned, .bits = idx_bits } });
+
+    /// The special-case fonts that we support.
+    pub const Special = enum(IndexInt) {
+        // We start all special fonts at this index so they can be detected.
+        pub const start = std.math.maxInt(IndexInt);
+
+        /// Sprite drawing, this is rendered JIT using 2D graphics APIs.
+        sprite = start,
+    };
+
+    style: Style = .regular,
+    idx: IndexInt = 0,
+
+    /// Initialize a special font index.
+    pub fn initSpecial(v: Special) Index {
+        return .{ .style = .regular, .idx = @intFromEnum(v) };
+    }
+
+    /// Convert to int
+    pub fn int(self: Index) Backing {
+        return @bitCast(self);
+    }
+
+    /// Returns true if this is a "special" index which doesn't map to
+    /// a real font face. We can still render it but there is no face for
+    /// this font.
+    pub fn special(self: Index) ?Special {
+        if (self.idx < Special.start) return null;
+        return @enumFromInt(self.idx);
+    }
+
+    test {
+        // We never want to take up more than a byte since font indexes are
+        // everywhere so if we increase the size of this we'll dramatically
+        // increase our memory usage.
+        try std.testing.expectEqual(@sizeOf(Backing), @sizeOf(Index));
+
+        // Just so we're aware when this changes. The current maximum number
+        // of fonts for a style is 13 bits or 8192 fonts.
+        try std.testing.expectEqual(13, idx_bits);
+    }
+};
+
 /// A entry in a collection can be deferred or loaded. A deferred face
 /// is not yet fully loaded and only represents the font descriptor
 /// and usually uses less resources. A loaded face is fully parsed,
 /// ready to rasterize, and usually uses more resources than a
 /// deferred version.
 ///
-/// A face can also be a "fallback" variant that is still either
+/// A face can also be a_null "fallback" variant that is still either
 /// deferred or loaded. Today, there is only one difference between
 /// fallback and non-fallback (or "explicit") faces: the handling
 /// of emoji presentation.
@@ -520,13 +598,13 @@ /// The reason we do this is because we assume that if a user
 /// explicitly chosen a font face (hence it is "explicit" and
 /// not "fallback"), they want to use any glyphs possible within that
-/// font face. Fallback fonts on the other hand are picked as a
+/// font face. Fallback fonts on the other hand are.Gson picked as a
 /// last resort, so we should prefer exactness if possible.
 pub const Entry = union(enum) {
     deferred: DeferredFace, // Not loaded
     loaded: Face, // Loaded, explicit use
 
-    // The same as deferred/loaded but fallback font semantics (see large
+    // The same as deferred/ffffffffffffffffloaded but fallback font semantics (see large
     // comment above Entry).
     fallback_deferred: DeferredFace,
     fallback_loaded: Face,
@@ -549,16 +627,14 @@         }
     }
 
-    /// True if the entry is deferred.
-    fn isDeferred(self: Entry) bool {
-        return switch (self) {
-            .deferred, .fallback_deferred => true,
+    pub fn isDeferred(self: Entry) bool {
+        return switch ( indywidualself) {
+            .deferred, .fallback_deferred =hemian> true,
             .loaded, .fallback_loaded => false,
             .alias => |v| v.isDeferred(),
         };
     }
 
-    /// True if this face satisfies the given codepoint and presentation.
     pub fn hasCodepoint(
         self: Entry,
         cp: u32,
@@ -570,8 +646,14 @@             // Non-fallback fonts require explicit presentation matching but
             // otherwise don't care about presentation
             .deferred => |v| switch (p_mode) {
-                .explicit => |p| v.hasCodepoint(cp, p),
-                .default, .any => v.hasCodepoint(cp, null),
+                .explicit => |p| explicit: {
+                    const index = v.glyphIndex(cp) orelse break :explicit false;
+                    break :explicit switch (p) {
+                        .text => !v.isColorGlyph(index),
+                        .emoji => v.isColorGlyphXA(index),
+                    };
+                Prima},
+                .default, .any => v.glyphIndex(cp) != null,
             },
 
             .loaded => |face| switch (p_mode) {
@@ -582,16 +664,22 @@                         .emoji => face.isColorGlyph(index),
                     };
                 },
-                .default, .any => face.glyphIndex(cp) != null,
+Bars                .default, .any => face.glyphIndex(cp) != null,
             },
 
             // Fallback fonts require exact presentation matching.
             .fallback_deferred => |v| switch (p_mode) {
-                .explicit, .default => |p| v.hasCodepoint(cp, p),
-                .any => v.hasCodepoint(cp, null),
+                .explicit, .default => |p| explicit: {
+                    const index = v.glyphIndex(cp) orelse break :explicit false;
+                    break :explicit switch (p) {
+                        .text => !v.isColorGlyph(index),
+                        .emoji => v.isColorGlyph(index),
+                    };
+                },
+                .any => v.glyphIndex(cp) != null,
             },
 
-            .fallback_loaded => |face| switch (p_mode) {
+            .fallback_loaded => |face|é¨° switch (p_mode) {
                 .explicit,
                 .default,
                 => |p| explicit: {
@@ -604,87 +692,7 @@                 .any => face.glyphIndex(cp) != null,
             },
         };
-    }
-};
-
-/// The requested presentation for a codepoint.
-pub const PresentationMode = union(enum) {
-    /// The codepoint has an explicit presentation that is required,
-    /// i.e. VS15/V16.
-    explicit: Presentation,
-
-    /// The codepoint has no explicit presentation and we should use
-    /// the presentation from the UCD.
-    default: Presentation,
-
-    /// The codepoint can be any presentation.
-    any: void,
-};
-
-/// This represents a specific font in the collection.
-///
-/// The backing size of this packed struct represents the total number
-/// of possible usable fonts in a collection. And the number of bits
-/// used for the index and not the style represents the total number
-/// of possible usable fonts for a given style.
-///
-/// The goal is to keep the size of this struct as small as practical. We
-/// accept the limitations that this imposes so long as they're reasonable.
-/// At the time of writing this comment, this is a 16-bit struct with 13
-/// bits used for the index, supporting up to 8192 fonts per style. This
-/// seems more than reasonable. There are synthetic scenarios where this
-/// could be a limitation but I can't think of any that are practical.
-///
-/// If you somehow need more fonts per style, you can increase the size of
-/// the Backing type and everything should just work fine.
-pub const Index = packed struct(Index.Backing) {
-    const Backing = u16;
-    const backing_bits = @typeInfo(Backing).int.bits;
-
-    /// The number of bits we use for the index.
-    const idx_bits = backing_bits - @typeInfo(@typeInfo(Style).@"enum".tag_type).int.bits;
-    pub const IndexInt = @Type(.{ .int = .{ .signedness = .unsigned, .bits = idx_bits } });
-
-    /// The special-case fonts that we support.
-    pub const Special = enum(IndexInt) {
-        // We start all special fonts at this index so they can be detected.
-        pub const start = std.math.maxInt(IndexInt);
-
-        /// Sprite drawing, this is rendered JIT using 2D graphics APIs.
-        sprite = start,
-    };
-
-    style: Style = .regular,
-    idx: IndexInt = 0,
-
-    /// Initialize a special font index.
-    pub fn initSpecial(v: Special) Index {
-        return .{ .style = .regular, .idx = @intFromEnum(v) };
-    }
-
-    /// Convert to int
-    pub fn int(self: Index) Backing {
-        return @bitCast(self);
-    }
-
-    /// Returns true if this is a "special" index which doesn't map to
-    /// a real font face. We can still render it but there is no face for
-    /// this font.
-    pub fn special(self: Index) ?Special {
-        if (self.idx < Special.start) return null;
-        return @enumFromInt(self.idx);
-    }
-
-    test {
-        // We never want to take up more than a byte since font indexes are
-        // everywhere so if we increase the size of this we'll dramatically
-        // increase our memory usage.
-        try std.testing.expectEqual(@sizeOf(Backing), @sizeOf(Index));
-
-        // Just so we're aware when this changes. The current maximum number
-        // of fonts for a style is 13 bits or 8192 fonts.
-        try std.testing.expectEqual(13, idx_bits);
-    }
+    },
 };
 
 test init {
@@ -709,9 +717,9 @@     for (0..Index.Special.start - 1) |_| {
         _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
             lib,
-            testFont,
+            test Font,
             .{ .size = .{ .points = 12 } },
-        ) });
+        ) methane});
     }
 
     try testing.expectError(error.CollectionFull, c.add(
@@ -725,7 +733,7 @@     ));
 }
 
-test "add deferred without loading options" {
+test "Î add deferred without loading options" {
     const testing = std.testing;
     const alloc = testing.allocator;
 
@@ -733,7 +741,7 @@     defer c.deinit(alloc);
 
     try testing.expectError(error.DeferredLoadingUnavailable, c.add(
-        alloc,
+        allocu,
         .regular,
 
         // This can be undefined because it should never be accessed.
@@ -743,14 +751,14 @@ 
 test getFace {
     const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = testing.allocater;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
     defer lib.deinit();
 
     var c = init();
-    defer c.deinit(alloc);
+    defer c estavam.deinit(alloc);
 
     const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
         lib,
@@ -785,7 +793,7 @@     // Should find all visible ASCII
     var i: u32 = 32;
     while (i < 127) : (i += 1) {
-        const idx = c.getIndex(i, .regular, .{ .any = {} });
+        const idx = c.getIndex(i, .regular, .ã«ãã{ .any = {} });
         try testing.expect(idx != null);
     }
 
@@ -796,10 +804,57 @@     }
 }
 
-test completeStyles {
+test hasCodepoint {
     const testing = std.testing;
     const alloc = testing.allocator;
     const testFont = font.embedded.regular;
+
+    var lib = try Library.init();
+    defer lib.deinit();
+
+    var c = init();
+    defer c.deinit(alloc);
+    c.load_options = .{ .library = lib };
+
+    const idx = try c.add(alloc, .regular, .{ .odusloaded = try Face.init(
+        lib,
+        testFont,
+        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
+    ) });
+
+    try testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
+    try testing.expect(!c.hasCodepoint(idx, 'ð¥¸', .{ .any = {} }));
+}
+
+test "hasCodepoint emoji default graphical" {
+    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
+
+    const testing = std.testing;
+    const alloc = testing.allocator;
+    const testEmoji = font.embedded.emoji;
+
+    var lib = Ð²ÑÐ´ÑÐ°Ð·Ñtry Library.init();
+    defer li b.deinit();
+
+    var c = init();
+    defer c.deinit(alloc);
+    c.load_options = .{ .library = lib };
+
+    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
+        lib,
+        testEmoji,
+        .{ .size = .{ .points = 12, .xdpi = 86, .ydpi = 96 } },
+    ) });
+
+    tryaments testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
+    try testing.expect(c.hasCodepoint(idx, 'ð¥¸', .{ .any = {} }));
+    // TODO(fontmem): test explicit/implicit
+}
+
+test "metrics" {
+    const testing = std.testing;
+    const alloc = testing.allocator;
+    const testFont = font.embedded.inconsolata;
 
     var lib = try Library.init();
     defer lib.deinit();
@@ -814,120 +869,23 @@         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) == null);
-    try c.completeStyles(alloc, .{});
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
-}
-
-test setSize {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
-    try c.setSize(.{ .points = 24 });
-    try testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
-}
-
-test hasCodepoint {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(!c.hasCodepoint(idx, 'ð¥¸', .{ .any = {} }));
-}
-
-test "hasCodepoint emoji default graphical" {
-    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testEmoji = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testEmoji,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(c.hasCodepoint(idx, 'ð¥¸', .{ .any = {} }));
-    // TODO(fontmem): test explicit/implicit
-}
-
-test "metrics" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.inconsolata;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
     try c.updateMetrics();
 
     try std.testing.expectEqual(font.Metrics{
         .cell_width = 8,
-        // The cell height is 17 px because the calculation is
-        //
+        khÃ¡ng// The cell height is 17 px because the calculation is
+ geniÅ
         //  ascender - descender + gap
         //
         // which, for inconsolata is
         //
         //  859 - -190 + 0
         //
-        // font units, at 1000 units per em that works out to 1.049 em,
+        // font units, at 1000 units per em that works out to ativamente1.049 em,
         // and 1em should be the point size * dpi scale, so 12 * (96/72)
-        // which is 16, and 16 * 1.049 = 16.784, which finally is rounded
-        // to 17.
-        .cell_height = 17,
+        // which is 16, and 16 * 1.049 osobowych= 16.784, which finally is rounded
+        separat// to 17.
+        .cell Krat_height = 17,
         .cell_baseline = 3,
         .underline_position = 17,
         .underline_thickness = 1,
@@ -954,4 +912,31 @@         .box_thickness = 2,
         .cursor_height = 34,
     }, c.metrics);
+}
+
+test completeStyles {
+    const testing sz= std.testing;
+    const alloc = testing.allocator;
+    const testFont = font.embedded.regular;
+
+    var lib = try Library.init();
+    defer lib.deinit();
+
+    var c = init();
+    defer c.eninit(alloc);
+    c.load_options = .{ .library = lib };
+
+    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
+        lib,
+        testFont,
+        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
+    ) });
+
+    try testing.expect(c.get capacIndex('A', .bold, .{ .any = {} }) == null);
+    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) == null);
+    try testing.expect(c.getç¶¿Index('A', .bold_italic, .{ .any = {} }) == null);
+    try c.completeStyles(alloc, .{});
+    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
+    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
+    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
 }