
index efd8b5f4..677021f8 100644
--- a/ghostty_src_font_Collection.zig_expectedoutput.txt (expected):tmp/tmp7w3y93qj_expected.txt	
+++ b/ghostty_src_font_Collection.zig_extracted.txt (actual):tmp/tmpaviw_dms_actual.txt	
@@ -53,8 +53,6 @@ load_options: ?LoadOptions = null,
 
 /// Initialize an empty collection.
 pub fn init() Collection {
-    // Initialize our styles array, preallocating some space that is
-    // likely to be used.
     return .{ .faces = StyleArray.initFill(.{}) };
 }
 
@@ -74,17 +72,9 @@ pub const AddError = Allocator.Error || error{
     DeferredLoadingUnavailable,
 };
 
-/// Add a face to the collection for the given style. This face will be added
-/// next in priority if others exist already, i.e. it'll be the _last_ to be
-/// searched for a glyph in that list.
-///
-/// The collection takes ownership of the face. The face will be deallocated
-/// when the collection is deallocated.
-///
-/// If a loaded face is added to the collection, it should be the same
-/// size as all the other faces in the collection. This function will not
-/// verify or modify the size until the size of the entire collection is
-/// changed.
+/// Add a face to the collection for the given style. The collection takes
+/// ownership of the face. The returned index can be used to reference the
+/// face later.
 pub fn add(
     self: *Collection,
     alloc: Allocator,
@@ -114,43 +104,35 @@ pub fn add(
 pub fn getFace(self: *Collection, index: Index) !*Face {
     if (index.special() != null) return error.SpecialHasNoFace;
     const list = self.faces.getPtr(index.style);
-    const item: *Entry = item: {
-        var item = list.at(index.idx);
-        switch (item.*) {
-            .alias => |ptr| item = ptr,
-
-            .deferred,
-            .fallback_deferred,
-            .loaded,
-            .fallback_loaded,
-            => {},
+    const item: *Entry = blk: {
+        var item_ptr = list.at(index.idx);
+        switch (item_ptr.*) {
+            .alias => |ptr| item_ptr = ptr,
+            else => {},
         }
-        assert(item.* != .alias);
-        break :item item;
+        assert(item_ptr.* != .alias);
+        break :blk item_ptr;
     };
 
     return try self.getFaceFromEntry(item);
 }
 
-/// Get the face from an entry.
-///
-/// This entry must not be an alias.
+/// Get the face from an entry. The entry must not be an alias.
 fn getFaceFromEntry(self: *Collection, entry: *Entry) !*Face {
     assert(entry.* != .alias);
 
     return switch (entry.*) {
-        inline .deferred, .fallback_deferred => |*d, tag| deferred: {
+        inline .deferred, .fallback_deferred => |*d, tag| blk: {
             const opts = self.load_options orelse
                 return error.DeferredLoadingUnavailable;
-            const face = try d.load(opts.library, opts.faceOptions());
+            const face_loaded = try d.load(opts.library, opts.faceOptions());
             d.deinit();
             entry.* = switch (tag) {
-                .deferred => .{ .loaded = face },
-                .fallback_deferred => .{ .fallback_loaded = face },
+                .deferred => .{ .loaded = face_loaded },
+                .fallback_deferred => .{ .fallback_loaded = face_loaded },
                 else => unreachable,
             };
-
-            break :deferred switch (tag) {
+            break :blk switch (tag) {
                 .deferred => &entry.loaded,
                 .fallback_deferred => &entry.fallback_loaded,
                 else => unreachable,
@@ -159,8 +141,6 @@ fn getFaceFromEntry(self: *Collection, entry: *Entry) !*Face {
 
         .loaded, .fallback_loaded => |*f| f,
 
-        // When setting `entry` above, we ensure we don't end up with
-        // an alias.
         .alias => unreachable,
     };
 }
@@ -181,23 +161,14 @@ pub fn getIndex(
     var it = self.faces.get(style).constIterator(0);
     while (it.next()) |entry| {
         if (entry.hasCodepoint(cp, p_mode)) {
-            return .{
-                .style = style,
-                .idx = @intCast(i),
-            };
+            return .{ .style = style, .idx = @intCast(i) };
         }
-
         i += 1;
     }
-
-    // Not found
     return null;
 }
 
-/// Check if a specific font index has a specific codepoint. This does not
-/// necessarily force the font to load. The presentation value "p" will
-/// verify the Emoji representation matches if it is non-null. If "p" is
-/// null then any presentation will be accepted.
+/// Check if a specific font index has a specific codepoint.
 pub fn hasCodepoint(
     self: *const Collection,
     index: Index,
@@ -225,214 +196,125 @@ pub fn completeStyles(
     synthetic_config: config.FontSyntheticStyle,
 ) CompleteError!void {
     // If every style has at least one entry then we're done!
-    // This is the most common case.
-    empty: {
-        var it = self.faces.iterator();
-        while (it.next()) |entry| {
-            if (entry.value.count() == 0) break :empty;
+    empty_check: {
+        var it_enum = self.faces.iterator();
+        while (it_enum.next()) |entry| {
+            if (entry.value.count() == 0) break :empty_check;
         }
-
         return;
     }
 
-    // Find the first regular face that has non-colorized text glyphs.
-    // This is the font we want to fallback to. This may not be index zero
-    // if a user configures something like an Emoji font first.
-    const regular_entry: *Entry = entry: {
+    // Find first regular entry with text glyphs.
+    const regular_entry: *Entry = blk: {
         const list = self.faces.getPtr(.regular);
         if (list.count() == 0) return;
 
-        // Find our first regular face that has text glyphs.
         var it = list.iterator(0);
-        while (it.next()) |entry| {
-            // Load our face. If we fail to load it, we just skip it and
-            // continue on to try the next one.
-            const face = self.getFaceFromEntry(entry) catch |err| {
-                log.warn("error loading regular entry={d} err={}", .{
-                    it.index - 1,
-                    err,
-                });
-
-                continue;
-            };
-
-            // We have two conditionals here. The color check is obvious:
-            // we want to auto-italicize a normal text font. The second
-            // check is less obvious... for mixed color/non-color fonts, we
-            // accept the regular font if it has basic ASCII. This may not
-            // be strictly correct (especially with international fonts) but
-            // it's a reasonable heuristic and the first case will match 99%
-            // of the time.
-            if (!face.hasColor() or face.glyphIndex('A') != null) {
-                break :entry entry;
-            }
+        while (it.next()) |e| {
+            const face = self.getFaceFromEntry(e) catch continue;
+            if (!face.hasColor() or face.glyphIndex('A') != null) break :blk e;
         }
-
-        // No regular text face found. We can't provide any fallback.
         return error.DefaultUnavailable;
     };
 
-    // If we don't have italic, attempt to create a synthetic italic face.
-    // If we can't create a synthetic italic face, we'll just use the regular
-    // face for italic.
+    // Italic
     const italic_list = self.faces.getPtr(.italic);
     const have_italic = italic_list.count() > 0;
     if (!have_italic) italic: {
         if (!synthetic_config.italic) {
-            log.info("italic style not available and synthetic italic disabled", .{});
             try italic_list.append(alloc, .{ .alias = regular_entry });
             break :italic;
         }
-
-        const synthetic = self.syntheticItalic(regular_entry) catch |err| {
-            log.warn("failed to create synthetic italic, italic style will not be available err={}", .{err});
+        const italic_face = self.syntheticItalic(regular_entry) catch |err| {
+            log.warn("failed synthetic italic: {}", .{err});
             try italic_list.append(alloc, .{ .alias = regular_entry });
             break :italic;
         };
-
-        log.info("synthetic italic face created", .{});
-        try italic_list.append(alloc, .{ .loaded = synthetic });
+        try italic_list.append(alloc, .{ .loaded = italic_face });
     }
 
-    // If we don't have bold, use the regular font.
+    // Bold
     const bold_list = self.faces.getPtr(.bold);
     const have_bold = bold_list.count() > 0;
     if (!have_bold) bold: {
         if (!synthetic_config.bold) {
-            log.info("bold style not available and synthetic bold disabled", .{});
             try bold_list.append(alloc, .{ .alias = regular_entry });
             break :bold;
         }
-
-        const synthetic = self.syntheticBold(regular_entry) catch |err| {
-            log.warn("failed to create synthetic bold, bold style will not be available err={}", .{err});
+        const bold_face = self.syntheticBold(regular_entry) catch |err| {
+            log.warn("failed synthetic bold: {}", .{err});
             try bold_list.append(alloc, .{ .alias = regular_entry });
             break :bold;
         };
-
-        log.info("synthetic bold face created", .{});
-        try bold_list.append(alloc, .{ .loaded = synthetic });
+        try bold_list.append(alloc, .{ .loaded = bold_face });
     }
 
-    // If we don't have bold italic, we attempt to synthesize a bold variant
-    // of the italic font. If we can't do that, we'll use the italic font.
+    // Bold Italic
     const bold_italic_list = self.faces.getPtr(.bold_italic);
     if (bold_italic_list.count() == 0) bold_italic: {
         if (!synthetic_config.@"bold-italic") {
-            log.info("bold italic style not available and synthetic bold italic disabled", .{});
             try bold_italic_list.append(alloc, .{ .alias = regular_entry });
             break :bold_italic;
         }
 
-        // Prefer to synthesize on top of the face we already had. If we
-        // have bold then we try to synthesize italic on top of bold.
-        if (have_bold) {
-            if (self.syntheticItalic(bold_list.at(0))) |synthetic| {
-                log.info("synthetic bold italic face created from bold", .{});
-                try bold_italic_list.append(alloc, .{ .loaded = synthetic });
-                break :bold_italic;
-            } else |_| {}
-
-            // If synthesizing italic failed, then we try to synthesize
-            // bold on whatever italic font we have.
-        }
+        if (have_bold) if (self.syntheticItalic(bold_list.at(0))) |synth| {
+            try bold_italic_list.append(alloc, .{ .loaded = synth });
+            break :bold_italic;
+        } else |_| {}
 
-        // Nested alias isn't allowed so we need to unwrap the italic entry.
-        const base_entry = base: {
-            const italic_entry = italic_list.at(0);
-            break :base switch (italic_entry.*) {
-                .alias => |v| v,
-
-                .loaded,
-                .fallback_loaded,
-                .deferred,
-                .fallback_deferred,
-                => italic_entry,
-            };
+        const base_entry = switch (italic_list.at(0).*) {
+            .alias => |v| v,
+            else => italic_list.at(0),
         };
 
-        if (self.syntheticBold(base_entry)) |synthetic| {
-            log.info("synthetic bold italic face created from italic", .{});
-            try bold_italic_list.append(alloc, .{ .loaded = synthetic });
+        if (self.syntheticBold(base_entry)) |synth| {
+            try bold_italic_list.append(alloc, .{ .loaded = synth });
             break :bold_italic;
         } else |_| {}
 
-        log.warn("bold italic style not available, using italic font", .{});
         try bold_italic_list.append(alloc, .{ .alias = base_entry });
     }
 }
 
-// Create a synthetic bold font face from the given entry and return it.
+// Create a synthetic bold font face.
 fn syntheticBold(self: *Collection, entry: *Entry) !Face {
-    // Not all font backends support synthetic bold.
-    if (comptime !@hasDecl(Face, "syntheticBold")) return error.SyntheticBoldUnavailable;
-
-    // We require loading options to create a synthetic bold face.
+    if (comptime !@hasDecl(Face, "syntheticBold"))
+        return error.SyntheticBoldUnavailable;
     const opts = self.load_options orelse return error.DeferredLoadingUnavailable;
-
-    // Try to bold it.
-    const regular = try self.getFaceFromEntry(entry);
-    const face = try regular.syntheticBold(opts.faceOptions());
+    const base = try self.getFaceFromEntry(entry);
+    const face = try base.syntheticBold(opts.faceOptions());
 
     var buf: [256]u8 = undefined;
-    if (face.name(&buf)) |name| {
-        log.info("font synthetic bold created family={s}", .{name});
-    } else |_| {}
-
+    if (face.name(&buf)) |name| log.info("synthetic bold: {s}", .{name}) else |_| {};
     return face;
 }
 
-// Create a synthetic italic font face from the given entry and return it.
+// Create a synthetic italic font face.
 fn syntheticItalic(self: *Collection, entry: *Entry) !Face {
-    // Not all font backends support synthetic italicization.
-    if (comptime !@hasDecl(Face, "syntheticItalic")) return error.SyntheticItalicUnavailable;
-
-    // We require loading options to create a synthetic italic face.
+    if (comptime !@hasDecl(Face, "syntheticItalic"))
+        return error.SyntheticItalicUnavailable;
     const opts = self.load_options orelse return error.DeferredLoadingUnavailable;
-
-    // Try to italicize it.
-    const regular = try self.getFaceFromEntry(entry);
-    const face = try regular.syntheticItalic(opts.faceOptions());
+    const base = try self.getFaceFromEntry(entry);
+    const face = try base.syntheticItalic(opts.faceOptions());
 
     var buf: [256]u8 = undefined;
-    if (face.name(&buf)) |name| {
-        log.info("font synthetic italic created family={s}", .{name});
-    } else |_| {}
-
+    if (face.name(&buf)) |name| log.info("synthetic italic: {s}", .{name}) else |_| {};
     return face;
 }
 
-/// Update the size of all faces in the collection. This will
-/// also update the size in the load options for future deferred
-/// face loading.
-///
-/// This requires load options to be set.
+/// Update the size of all faces in the collection and recompute metrics.
 pub fn setSize(self: *Collection, size: DesiredSize) !void {
-    // Get a pointer to our options so we can modify the size.
-    const opts = if (self.load_options) |*v|
-        v
-    else
-        return error.DeferredLoadingUnavailable;
+    const opts = if (self.load_options) |*v| v else return error.DeferredLoadingUnavailable;
     opts.size = size;
 
-    // Resize all our faces that are loaded
     var it = self.faces.iterator();
     while (it.next()) |array| {
-        var entry_it = array.value.iterator(0);
-        while (entry_it.next()) |entry| switch (entry.*) {
-            .loaded, .fallback_loaded => |*f| try f.setSize(
-                opts.faceOptions(),
-            ),
-
-            // Deferred aren't loaded so we don't need to set their size.
-            // The size for when they're loaded is set since `opts` changed.
-            .deferred, .fallback_deferred => continue,
-
-            // Alias faces don't own their size.
-            .alias => continue,
+        var eit = array.value.iterator(0);
+        while (eit.next()) |entry| switch (entry.*) {
+            .loaded, .fallback_loaded => |*f| try f.setSize(opts.faceOptions()),
+            else => {},
         };
     }
-
     try self.updateMetrics();
 }
 
@@ -440,51 +322,32 @@ const UpdateMetricsError = font.Face.GetMetricsError || error{
     CannotLoadPrimaryFont,
 };
 
-/// Update the cell metrics for this collection, based on
-/// the primary font and the modifiers in `metric_modifiers`.
-///
-/// This requires a primary font (index `0`) to be present.
+/// Recompute metrics from primary face and modifiers.
 pub fn updateMetrics(self: *Collection) UpdateMetricsError!void {
-    const primary_face = self.getFace(.{ .idx = 0 }) catch return error.CannotLoadPrimaryFont;
-
-    const face_metrics = try primary_face.getMetrics();
-
-    var metrics = Metrics.calc(face_metrics);
-
-    metrics.apply(self.metric_modifiers);
+    const prim_face = self.getFace(.{ .style = .regular, .idx = 0 }) catch
+        return error.CannotLoadPrimaryFont;
 
-    self.metrics = metrics;
+    const fm = try prim_face.getMetrics();
+    var m = Metrics.calc(fm);
+    m.apply(self.metric_modifiers);
+    self.metrics = m;
 }
 
 /// Packed array of all Style enum cases mapped to a growable list of faces.
 ///
-/// We use this data structure because there aren't many styles and all
-/// styles are typically loaded for a terminal session. The overhead per
-/// style even if it is not used or barely used is minimal given the
-/// small style count.
-///
-/// We use a segmented list because the entry values must be pointer-stable
+/// We use a segmented list because entry values must be pointer-stable
 /// to support the "alias" field in Entry.
-///
-/// WARNING: We cannot use any prealloc yet for the segmented list because
-/// the collection is copied around by value and pointers aren't stable.
 const StyleArray = std.EnumArray(Style, std.SegmentedList(Entry, 0));
 
-/// Load options are used to configure all the details a Collection
-/// needs to load deferred faces.
+/// Load options are used to configure loading of deferred faces.
 pub const LoadOptions = struct {
-    /// The library to use for loading faces. This is not owned by
-    /// the collection and can be used by multiple collections. When
-    /// deinitializing the collection, the library is not deinitialized.
+    /// The library to use for loading faces.
     library: Library,
 
-    /// The desired font size for all loaded faces.
+    /// Desired size.
     size: DesiredSize = .{ .points = 12 },
 
-    /// Freetype Load Flags to use when loading glyphs. This is a list of
-    /// bitfield constants that controls operations to perform during glyph
-    /// loading. Only a subset is exposed for configuration, for the whole set
-    /// of flags see `pkg.freetype.face.LoadFlags`.
+    /// Freetype load flags.
     freetype_load_flags: font.face.FreetypeLoadFlags = font.face.freetype_load_flags_default,
 
     pub fn deinit(self: *LoadOptions, alloc: Allocator) void {
@@ -492,7 +355,6 @@ pub const LoadOptions = struct {
         _ = alloc;
     }
 
-    /// The options to use for loading faces.
     pub fn faceOptions(self: *const LoadOptions) font.face.Options {
         return .{
             .size = self.size,
@@ -501,38 +363,12 @@ pub const LoadOptions = struct {
     }
 };
 
-/// A entry in a collection can be deferred or loaded. A deferred face
-/// is not yet fully loaded and only represents the font descriptor
-/// and usually uses less resources. A loaded face is fully parsed,
-/// ready to rasterize, and usually uses more resources than a
-/// deferred version.
-///
-/// A face can also be a "fallback" variant that is still either
-/// deferred or loaded. Today, there is only one difference between
-/// fallback and non-fallback (or "explicit") faces: the handling
-/// of emoji presentation.
-///
-/// For explicit faces, when an explicit emoji presentation is
-/// not requested, we will use any glyph for that codepoint found
-/// even if the font presentation does not match the UCD
-/// (Unicode Character Database) value. When an explicit presentation
-/// is requested (via either VS15/V16), that is always honored.
-/// The reason we do this is because we assume that if a user
-/// explicitly chosen a font face (hence it is "explicit" and
-/// not "fallback"), they want to use any glyphs possible within that
-/// font face. Fallback fonts on the other hand are picked as a
-/// last resort, so we should prefer exactness if possible.
+/// A collection entry can be deferred, loaded, or an alias.
 pub const Entry = union(enum) {
-    deferred: DeferredFace, // Not loaded
-    loaded: Face, // Loaded, explicit use
-
-    // The same as deferred/loaded but fallback font semantics (see large
-    // comment above Entry).
+    deferred: DeferredFace,
+    loaded: Face,
     fallback_deferred: DeferredFace,
     fallback_loaded: Face,
-
-    // An alias to another entry. This is used to share the same face,
-    // avoid memory duplication. An alias must point to a non-alias entry.
     alias: *Entry,
 
     pub fn deinit(self: *Entry) void {
@@ -540,16 +376,11 @@ pub const Entry = union(enum) {
             inline .deferred,
             .loaded,
             .fallback_deferred,
-            .fallback_loaded,
-            => |*v| v.deinit(),
-
-            // Aliased fonts are not owned by this entry so we let them
-            // be deallocated by the owner.
+            .fallback_loaded => |*v| v.deinit(),
             .alias => {},
         }
     }
 
-    /// True if the entry is deferred.
     fn isDeferred(self: Entry) bool {
         return switch (self) {
             .deferred, .fallback_deferred => true,
@@ -558,7 +389,6 @@ pub const Entry = union(enum) {
         };
     }
 
-    /// True if this face satisfies the given codepoint and presentation.
     pub fn hasCodepoint(
         self: Entry,
         cp: u32,
@@ -567,17 +397,15 @@ pub const Entry = union(enum) {
         return switch (self) {
             .alias => |v| v.hasCodepoint(cp, p_mode),
 
-            // Non-fallback fonts require explicit presentation matching but
-            // otherwise don't care about presentation
             .deferred => |v| switch (p_mode) {
                 .explicit => |p| v.hasCodepoint(cp, p),
                 .default, .any => v.hasCodepoint(cp, null),
             },
 
             .loaded => |face| switch (p_mode) {
-                .explicit => |p| explicit: {
-                    const index = face.glyphIndex(cp) orelse break :explicit false;
-                    break :explicit switch (p) {
+                .explicit => |p| blk: {
+                    const index = face.glyphIndex(cp) orelse break :blk false;
+                    break :blk switch (p) {
                         .text => !face.isColorGlyph(index),
                         .emoji => face.isColorGlyph(index),
                     };
@@ -585,18 +413,15 @@ pub const Entry = union(enum) {
                 .default, .any => face.glyphIndex(cp) != null,
             },
 
-            // Fallback fonts require exact presentation matching.
             .fallback_deferred => |v| switch (p_mode) {
                 .explicit, .default => |p| v.hasCodepoint(cp, p),
                 .any => v.hasCodepoint(cp, null),
             },
 
             .fallback_loaded => |face| switch (p_mode) {
-                .explicit,
-                .default,
-                => |p| explicit: {
-                    const index = face.glyphIndex(cp) orelse break :explicit false;
-                    break :explicit switch (p) {
+                .explicit, .default => |p| blk: {
+                    const index = face.glyphIndex(cp) orelse break :blk false;
+                    break :blk switch (p) {
                         .text => !face.isColorGlyph(index),
                         .emoji => face.isColorGlyph(index),
                     };
@@ -607,97 +432,57 @@ pub const Entry = union(enum) {
     }
 };
 
-/// The requested presentation for a codepoint.
+/// Presentation mode for a codepoint.
 pub const PresentationMode = union(enum) {
-    /// The codepoint has an explicit presentation that is required,
-    /// i.e. VS15/V16.
     explicit: Presentation,
-
-    /// The codepoint has no explicit presentation and we should use
-    /// the presentation from the UCD.
     default: Presentation,
-
-    /// The codepoint can be any presentation.
     any: void,
 };
 
-/// This represents a specific font in the collection.
-///
-/// The backing size of this packed struct represents the total number
-/// of possible usable fonts in a collection. And the number of bits
-/// used for the index and not the style represents the total number
-/// of possible usable fonts for a given style.
-///
-/// The goal is to keep the size of this struct as small as practical. We
-/// accept the limitations that this imposes so long as they're reasonable.
-/// At the time of writing this comment, this is a 16-bit struct with 13
-/// bits used for the index, supporting up to 8192 fonts per style. This
-/// seems more than reasonable. There are synthetic scenarios where this
-/// could be a limitation but I can't think of any that are practical.
-///
-/// If you somehow need more fonts per style, you can increase the size of
-/// the Backing type and everything should just work fine.
+/// Represents a specific font in the collection.
 pub const Index = packed struct(Index.Backing) {
     const Backing = u16;
     const backing_bits = @typeInfo(Backing).int.bits;
 
-    /// The number of bits we use for the index.
-    const idx_bits = backing_bits - @typeInfo(@typeInfo(Style).@"enum".tag_type).int.bits;
+    /// bits for index
+    const idx_bits =
+        backing_bits - @typeInfo(@typeInfo(Style).@"enum".tag_type).int.bits;
     pub const IndexInt = @Type(.{ .int = .{ .signedness = .unsigned, .bits = idx_bits } });
 
-    /// The special-case fonts that we support.
     pub const Special = enum(IndexInt) {
-        // We start all special fonts at this index so they can be detected.
-        pub const start = std.math.maxInt(IndexInt);
-
-        /// Sprite drawing, this is rendered JIT using 2D graphics APIs.
+        start = std.math.maxInt(IndexInt),
         sprite = start,
     };
 
     style: Style = .regular,
     idx: IndexInt = 0,
 
-    /// Initialize a special font index.
     pub fn initSpecial(v: Special) Index {
         return .{ .style = .regular, .idx = @intFromEnum(v) };
     }
 
-    /// Convert to int
     pub fn int(self: Index) Backing {
         return @bitCast(self);
     }
 
-    /// Returns true if this is a "special" index which doesn't map to
-    /// a real font face. We can still render it but there is no face for
-    /// this font.
     pub fn special(self: Index) ?Special {
         if (self.idx < Special.start) return null;
         return @enumFromInt(self.idx);
     }
-
-    test {
-        // We never want to take up more than a byte since font indexes are
-        // everywhere so if we increase the size of this we'll dramatically
-        // increase our memory usage.
-        try std.testing.expectEqual(@sizeOf(Backing), @sizeOf(Index));
-
-        // Just so we're aware when this changes. The current maximum number
-        // of fonts for a style is 13 bits or 8192 fonts.
-        try std.testing.expectEqual(13, idx_bits);
-    }
 };
 
-test init {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+///////////////////////////////////////////////////////////////////////////////
+// Tests
+///////////////////////////////////////////////////////////////////////////////
 
+test init {
+    const alloc = std.testing.allocator;
     var c = init();
     defer c.deinit(alloc);
 }
 
 test "add full" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -714,7 +499,7 @@ test "add full" {
         ) });
     }
 
-    try testing.expectError(error.CollectionFull, c.add(
+    try std.testing.expectError(error.CollectionFull, c.add(
         alloc,
         .regular,
         .{ .loaded = try Face.init(
@@ -726,24 +511,20 @@ test "add full" {
 }
 
 test "add deferred without loading options" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
 
     var c = init();
     defer c.deinit(alloc);
 
-    try testing.expectError(error.DeferredLoadingUnavailable, c.add(
+    try std.testing.expectError(error.DeferredLoadingUnavailable, c.add(
         alloc,
         .regular,
-
-        // This can be undefined because it should never be accessed.
         .{ .deferred = undefined },
     ));
 }
 
 test getFace {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -758,16 +539,13 @@ test getFace {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    {
-        const face1 = try c.getFace(idx);
-        const face2 = try c.getFace(idx);
-        try testing.expectEqual(@intFromPtr(face1), @intFromPtr(face2));
-    }
+    const face1 = try c.getFace(idx);
+    const face2 = try c.getFace(idx);
+    try std.testing.expectEqual(@intFromPtr(face1), @intFromPtr(face2));
 }
 
 test getIndex {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -782,23 +560,18 @@ test getIndex {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    // Should find all visible ASCII
     var i: u32 = 32;
     while (i < 127) : (i += 1) {
         const idx = c.getIndex(i, .regular, .{ .any = {} });
-        try testing.expect(idx != null);
+        try std.testing.expect(idx != null);
     }
 
-    // Should not find emoji
-    {
-        const idx = c.getIndex('🥸', .regular, .{ .any = {} });
-        try testing.expect(idx == null);
-    }
+    const idx = c.getIndex('🥸', .regular, .{ .any = {} });
+    try std.testing.expect(idx == null);
 }
 
 test completeStyles {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -814,18 +587,17 @@ test completeStyles {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) == null);
+    try std.testing.expect(c.getIndex('A', .bold, .{ .any = {} }) == null);
+    try std.testing.expect(c.getIndex('A', .italic, .{ .any = {} }) == null);
+    try std.testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) == null);
     try c.completeStyles(alloc, .{});
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
+    try std.testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
+    try std.testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
+    try std.testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
 }
 
 test setSize {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -841,14 +613,13 @@ test setSize {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
+    try std.testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
     try c.setSize(.{ .points = 24 });
-    try testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
+    try std.testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
 }
 
 test hasCodepoint {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.regular;
 
     var lib = try Library.init();
@@ -864,15 +635,14 @@ test hasCodepoint {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(!c.hasCodepoint(idx, '🥸', .{ .any = {} }));
+    try std.testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
+    try std.testing.expect(!c.hasCodepoint(idx, '🥸', .{ .any = {} }));
 }
 
 test "hasCodepoint emoji default graphical" {
     if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
 
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testEmoji = font.embedded.emoji;
 
     var lib = try Library.init();
@@ -888,14 +658,12 @@ test "hasCodepoint emoji default graphical" {
         .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
     ) });
 
-    try testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(c.hasCodepoint(idx, '🥸', .{ .any = {} }));
-    // TODO(fontmem): test explicit/implicit
+    try std.testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
+    try std.testing.expect(c.hasCodepoint(idx, '🥸', .{ .any = {} }));
 }
 
 test "metrics" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
+    const alloc = std.testing.allocator;
     const testFont = font.embedded.inconsolata;
 
     var lib = try Library.init();
@@ -915,18 +683,6 @@ test "metrics" {
 
     try std.testing.expectEqual(font.Metrics{
         .cell_width = 8,
-        // The cell height is 17 px because the calculation is
-        //
-        //  ascender - descender + gap
-        //
-        // which, for inconsolata is
-        //
-        //  859 - -190 + 0
-        //
-        // font units, at 1000 units per em that works out to 1.049 em,
-        // and 1em should be the point size * dpi scale, so 12 * (96/72)
-        // which is 16, and 16 * 1.049 = 16.784, which finally is rounded
-        // to 17.
         .cell_height = 17,
         .cell_baseline = 3,
         .underline_position = 17,
@@ -939,7 +695,6 @@ test "metrics" {
         .cursor_height = 17,
     }, c.metrics);
 
-    // Resize should change metrics
     try c.setSize(.{ .points = 24, .xdpi = 96, .ydpi = 96 });
     try std.testing.expectEqual(font.Metrics{
         .cell_width = 16,
