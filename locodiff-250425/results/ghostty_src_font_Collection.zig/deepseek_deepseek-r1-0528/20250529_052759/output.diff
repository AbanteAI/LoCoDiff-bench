
index efd8b5f4f..4b95db965 100644
--- a/ghostty_src_font_Collection.zig_expectedoutput.txt (expected):tmp/tmpkgix92mv_expected.txt	
+++ b/ghostty_src_font_Collection.zig_extracted.txt (actual):tmp/tmp_8681um5_actual.txt	
@@ -550,7 +550,7 @@ pub const Entry = union(enum) {
     }
 
     /// True if the entry is deferred.
-    fn isDeferred(self: Entry) bool {
+    pub fn isDeferred(self: Entry) bool {
         return switch (self) {
             .deferred, .fallback_deferred => true,
             .loaded, .fallback_loaded => false,
@@ -752,206 +752,4 @@ test getFace {
     var c = init();
     defer c.deinit(alloc);
 
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    {
-        const face1 = try c.getFace(idx);
-        const face2 = try c.getFace(idx);
-        try testing.expectEqual(@intFromPtr(face1), @intFromPtr(face2));
-    }
-}
-
-test getIndex {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    // Should find all visible ASCII
-    var i: u32 = 32;
-    while (i < 127) : (i += 1) {
-        const idx = c.getIndex(i, .regular, .{ .any = {} });
-        try testing.expect(idx != null);
-    }
-
-    // Should not find emoji
-    {
-        const idx = c.getIndex('ðŸ¥¸', .regular, .{ .any = {} });
-        try testing.expect(idx == null);
-    }
-}
-
-test completeStyles {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) == null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) == null);
-    try c.completeStyles(alloc, .{});
-    try testing.expect(c.getIndex('A', .bold, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .italic, .{ .any = {} }) != null);
-    try testing.expect(c.getIndex('A', .bold_italic, .{ .any = {} }) != null);
-}
-
-test setSize {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expectEqual(@as(u32, 12), c.load_options.?.size.points);
-    try c.setSize(.{ .points = 24 });
-    try testing.expectEqual(@as(u32, 24), c.load_options.?.size.points);
-}
-
-test hasCodepoint {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.regular;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(!c.hasCodepoint(idx, 'ðŸ¥¸', .{ .any = {} }));
-}
-
-test "hasCodepoint emoji default graphical" {
-    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testEmoji = font.embedded.emoji;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    const idx = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testEmoji,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try testing.expect(!c.hasCodepoint(idx, 'A', .{ .any = {} }));
-    try testing.expect(c.hasCodepoint(idx, 'ðŸ¥¸', .{ .any = {} }));
-    // TODO(fontmem): test explicit/implicit
-}
-
-test "metrics" {
-    const testing = std.testing;
-    const alloc = testing.allocator;
-    const testFont = font.embedded.inconsolata;
-
-    var lib = try Library.init();
-    defer lib.deinit();
-
-    var c = init();
-    defer c.deinit(alloc);
-    c.load_options = .{ .library = lib };
-
-    _ = try c.add(alloc, .regular, .{ .loaded = try Face.init(
-        lib,
-        testFont,
-        .{ .size = .{ .points = 12, .xdpi = 96, .ydpi = 96 } },
-    ) });
-
-    try c.updateMetrics();
-
-    try std.testing.expectEqual(font.Metrics{
-        .cell_width = 8,
-        // The cell height is 17 px because the calculation is
-        //
-        //  ascender - descender + gap
-        //
-        // which, for inconsolata is
-        //
-        //  859 - -190 + 0
-        //
-        // font units, at 1000 units per em that works out to 1.049 em,
-        // and 1em should be the point size * dpi scale, so 12 * (96/72)
-        // which is 16, and 16 * 1.049 = 16.784, which finally is rounded
-        // to 17.
-        .cell_height = 17,
-        .cell_baseline = 3,
-        .underline_position = 17,
-        .underline_thickness = 1,
-        .strikethrough_position = 10,
-        .strikethrough_thickness = 1,
-        .overline_position = 0,
-        .overline_thickness = 1,
-        .box_thickness = 1,
-        .cursor_height = 17,
-    }, c.metrics);
-
-    // Resize should change metrics
-    try c.setSize(.{ .points = 24, .xdpi = 96, .ydpi = 96 });
-    try std.testing.expectEqual(font.Metrics{
-        .cell_width = 16,
-        .cell_height = 34,
-        .cell_baseline = 6,
-        .underline_position = 34,
-        .underline_thickness = 2,
-        .strikethrough_position = 19,
-        .strikethrough_thickness = 2,
-        .overline_position = 0,
-        .overline_thickness = 2,
-        .box_thickness = 2,
-        .cursor_height = 34,
-    }, c.metrics);
-}
\ No newline at end of file
+    const idx = try c.add(
\ No newline at end of file
