
index 36481d117..948b76fce 100644
--- a/aider_benchmark_problem_stats.py_expectedoutput.txt (expected):tmp/tmpb3y4263u_expected.txt	
+++ b/aider_benchmark_problem_stats.py_extracted.txt (actual):tmp/tmpxs4dc95w_actual.txt	
@@ -83,9 +83,10 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
             parse_errors_by_model[model] = set(model_parse_errors)
             # Calculate pass rate for sorting when using custom dirs
             if dirs is not None:
-                pass_rate = sum(
-                    1 for r in results if r.get("tests_outcomes", []) and r["tests_outcomes"][-1]
-                ) / len(results)
+                pass_rate = (
+                    sum(1 for r in results if r.get("tests_outcomes", []) and r["tests_outcomes"][-1])
+                    / len(results)
+                )
             else:
                 # Use existing pass rate from leaderboard
                 pass_rate = next(
@@ -105,11 +106,10 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     if topn:
         valid_entries = valid_entries[:topn]
 
-    # Get all exercise names from a complete run
+    # Get all unique exercise names from all results
     all_exercises = set()
     exercise_solutions = defaultdict(list)
 
-    # Get all unique exercise names from all results
     all_exercises = set()
     for (dirname, model), results, _ in valid_entries:
         if results:
