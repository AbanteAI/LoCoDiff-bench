
index 36481d117..21d6b7d3c 100644
--- a/aider_benchmark_problem_stats.py_expectedoutput.txt (expected):tmp/tmpw5sud6dj_expected.txt	
+++ b/aider_benchmark_problem_stats.py_extracted.txt (actual):tmp/tmp5km_jiok_actual.txt	
@@ -109,8 +109,6 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     all_exercises = set()
     exercise_solutions = defaultdict(list)
 
-    # Get all unique exercise names from all results
-    all_exercises = set()
     for (dirname, model), results, _ in valid_entries:
         if results:
             for result in results:
@@ -150,13 +148,13 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
         if exercise not in exercise_solutions:
             exercise_solutions[exercise] = []
 
-    # Create list of (language, exercise) pairs with solution stats
+    # Sort all exercises by solve rate, then by exercise name
     exercise_stats = []
     total_models = len(valid_entries)
 
     for testcase in all_exercises:
         # Language is already in the testcase string
-        lang = testcase.split("/")[0]  # First part is the language
+        lang = testcase.split("/")[1]  # First part is the language
         models = exercise_solutions[testcase]
         num_solved = len(models)
         percent = (num_solved / total_models) * 100
