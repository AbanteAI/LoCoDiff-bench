--- aider_benchmark_problem_stats.py_expectedoutput.txt (expected)+++ aider_benchmark_problem_stats.py_extracted.txt (actual)@@ -5,13 +5,10 @@ import shutil
 from collections import defaultdict
 from pathlib import Path
-
 import yaml
-
 from aider.dump import dump  # noqa
 
 HARD_SET_NUM = 3  # Number of models that defines the hard set threshold
-
 
 def get_dirs_from_leaderboard():
     # Load the leaderboard data
@@ -19,11 +16,9 @@         leaderboard = yaml.safe_load(f)
     return [(entry["dirname"], entry["model"]) for entry in leaderboard]
 
-
 def load_results(dirname):
     """Load all result files from a benchmark directory"""
     dirname = Path(dirname)
-
     benchmark_dir = dirname
     if not benchmark_dir.exists():
         benchmark_dir = Path("tmp.benchmarks") / dirname
@@ -35,16 +30,15 @@ 
     # Look in language subdirectories under exercises/practice
     for fname in benchmark_dir.glob("*/exercises/practice/*/.aider.results.json"):
-        error = False
         try:
             results = json.loads(fname.read_text())
+            error = False
             error = "testcase" not in results
             if not error:
                 # Add language info to results
                 lang = fname.parts[-5]  # Get language from path
                 results["language"] = lang
                 all_results.append(results)
-
         except json.JSONDecodeError:
             error = True
 
@@ -58,7 +52,6 @@ 
     return all_results, parse_errors
 
-
 def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     PARSE_ERROR_M = 4  # Threshold for number of parse errors to DQ an exercise
 
@@ -74,17 +67,17 @@     parse_errors_by_model = {}  # Track which exercises had parse errors for each model
 
     dump(dir_entries)
-
     for dirname, model in dir_entries:
         results_data = load_results(dirname)
-
         if results_data:
             results, model_parse_errors = results_data
             parse_errors_by_model[model] = set(model_parse_errors)
             # Calculate pass rate for sorting when using custom dirs
             if dirs is not None:
                 pass_rate = sum(
-                    1 for r in results if r.get("tests_outcomes", []) and r["tests_outcomes"][-1]
+                    1
+                    for r in results
+                    if r.get("tests_outcomes", []) and r["tests_outcomes"][-1]
                 ) / len(results)
             else:
                 # Use existing pass rate from leaderboard
@@ -105,25 +98,24 @@     if topn:
         valid_entries = valid_entries[:topn]
 
-    # Get all exercise names from a complete run
-    all_exercises = set()
-    exercise_solutions = defaultdict(list)
-
     # Get all unique exercise names from all results
     all_exercises = set()
     for (dirname, model), results, _ in valid_entries:
         if results:
             for result in results:
                 try:
-                    all_exercises.add(result["testcase"] + "/" + result["language"])
+                    all_exercises.add(
+                        result["testcase"] + "/" + result["language"]
+                    )
                 except KeyError:
                     print(f"Warning: Missing testcase in {dirname}", json.dumps(result, indent=4))
 
+    # Track which models solved each exercise
+    exercise_solutions = defaultdict(list)
     for (dirname, model), results, _ in valid_entries:
         if not results:
             print(f"Could not load results for {dirname}")
             continue
-
         for result in results:
             testcase = result.get("testcase")
             if not testcase:
@@ -131,40 +123,26 @@             lang = result.get("language")
             if not lang:
                 continue
-
             testcase = f"{testcase}/{lang}"
             # Consider it solved if the last test attempt passed
             tests_outcomes = result.get("tests_outcomes", [])
             if tests_outcomes and tests_outcomes[-1]:
                 exercise_solutions[testcase].append(model)
 
-    # Calculate never solved exercises
-    never_solved = len(all_exercises - set(exercise_solutions.keys()))
-
-    # Print per-exercise statistics
-    print("\nExercise Solution Statistics:")
-    print("-" * 40)
-
-    # Add exercises that were never solved
-    for exercise in all_exercises:
-        if exercise not in exercise_solutions:
-            exercise_solutions[exercise] = []
-
     # Create list of (language, exercise) pairs with solution stats
     exercise_stats = []
     total_models = len(valid_entries)
-
     for testcase in all_exercises:
         # Language is already in the testcase string
-        lang = testcase.split("/")[0]  # First part is the language
+        lang = testcase.split("/")[0]
         models = exercise_solutions[testcase]
         num_solved = len(models)
         percent = (num_solved / total_models) * 100
-        testcase = testcase.replace("exercises/", "")  # Remove the exercises/ prefix
+        cleaned = testcase.replace("exercises/", "")  # Remove the exercises/ prefix
         # Remove duplicate language prefix (e.g. javascript/javascript/ -> javascript/)
-        if testcase.startswith(f"{lang}/{lang}/"):
-            testcase = testcase[len(lang) + 1 :]
-        exercise_stats.append((lang, testcase, num_solved, percent))
+        if cleaned.startswith(f"{lang}/{lang}/"):
+            cleaned = cleaned[len(lang) + 1 :]
+        exercise_stats.append((lang, cleaned, num_solved, percent))
 
     # Sort all exercises by solve rate, then by exercise name
     exercise_stats.sort(
@@ -179,22 +157,20 @@     for i, (lang, testcase, num_solved, percent) in enumerate(exercise_stats, 1):
         print(f"{i:>3}. {testcase:<{max_name_len}} : {num_solved:>3} solved ({percent:>5.1f}%)")
 
+    # Summary
     print("\nSummary:")
     solved_at_least_once = len([ex for ex, models in exercise_solutions.items() if models])
-    solved_by_none = never_solved
+    solved_by_none = len(all_exercises - set(exercise_solutions.keys()))
     solved_by_all = len(
         [ex for ex, models in exercise_solutions.items() if len(models) == total_models]
     )
-
     print(f"Total exercises solved at least once: {solved_at_least_once}")
     print(f"Never solved by any model: {solved_by_none}")
     if solved_by_none > 0:
         print("\nExercises never solved by any model:")
         unsolved = [ex for ex, models in exercise_solutions.items() if not models]
         for ex in sorted(unsolved):
-            # Split into language and exercise parts
             lang, exercise = ex.split("/")
-            # Reconstruct path in desired format
             formatted_path = f"{lang}/exercises/practice/{exercise}"
             print(f"  {formatted_path}")
     print(f"\nSolved by all models: {solved_by_all}")
@@ -216,7 +192,7 @@     for i, count in enumerate(counts):
         cumsum += count
         print(f"{i:>6d}  {count:>9d}  {cumsum:>10d}  {revcumsum:>12d}")
-        revcumsum -= count  # Decrement the reverse cumulative sum
+        revcumsum -= count
 
     # Count parse errors per exercise
     parse_error_counts = defaultdict(int)
@@ -237,7 +213,7 @@         for ex in sorted(disqualified_exercises):
             print(f"  {ex} ({parse_error_counts[ex]} parse errors)")
 
-    # Collect the hard set (exercises solved by HARD_SET_NUM or fewer models)
+    # Hard Set Analysis (exercises solved by ≤ HARD_SET_NUM models)
     print(f"\nHard Set Analysis (exercises solved by ≤{HARD_SET_NUM} models):")
     print("-" * 60)
     hard_set = {
@@ -251,7 +227,6 @@     lang_totals = defaultdict(int)
     lang_unsolved = defaultdict(int)
     lang_hard_set = defaultdict(int)
-
     for exercise in all_exercises:
         lang = exercise.split("/")[1]  # Get language from path
         lang_totals[lang] += 1
@@ -337,7 +312,6 @@         print(f"\nCopied {total_copied} hard set problems:")
         for lang in sorted(copied_by_lang):
             print(f"  {lang}: {copied_by_lang[lang]}")
-
 
 if __name__ == "__main__":
     parser = argparse.ArgumentParser()
