
index 36481d117..54cf2141f 100644
--- a/aider_benchmark_problem_stats.py_expectedoutput.txt (expected):tmp/tmpnyhupu7k_expected.txt	
+++ b/aider_benchmark_problem_stats.py_extracted.txt (actual):tmp/tmpfk7uci5w_actual.txt	
@@ -117,7 +117,10 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
                 try:
                     all_exercises.add(result["testcase"] + "/" + result["language"])
                 except KeyError:
-                    print(f"Warning: Missing testcase in {dirname}", json.dumps(result, indent=4))
+                    print(
+                        f"Warning: Missing testcase in {dirname}",
+                        json.dumps(result, indent=4),
+                    )
 
     for (dirname, model), results, _ in valid_entries:
         if not results:
@@ -177,7 +180,9 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     # Print all exercises sorted by solve rate
     print("\nAll Exercises (sorted by solve rate):")
     for i, (lang, testcase, num_solved, percent) in enumerate(exercise_stats, 1):
-        print(f"{i:>3}. {testcase:<{max_name_len}} : {num_solved:>3} solved ({percent:>5.1f}%)")
+        print(
+            f"{i:>3}. {testcase:<{max_name_len}} : {num_solved:>3} solved ({percent:>5.1f}%)"
+        )
 
     print("\nSummary:")
     solved_at_least_once = len([ex for ex, models in exercise_solutions.items() if models])
@@ -203,7 +208,7 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
         f" {len(all_exercises) - solved_by_none - solved_by_all} (some)"
     )
 
-    # Distribution table of how many models solved each exercise
+    # Distribution of solutions
     print("\nDistribution of solutions:")
     print("Models  Exercises  Cumulative  RevCumulative")
     print("-" * 50)
