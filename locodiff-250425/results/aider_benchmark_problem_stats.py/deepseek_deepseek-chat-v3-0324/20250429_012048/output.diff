
index 36481d11..68b24ccb 100644
--- a/aider_benchmark_problem_stats.py_expectedoutput.txt (expected):tmp/tmp7wix4jlt_expected.txt	
+++ b/aider_benchmark_problem_stats.py_extracted.txt (actual):tmp/tmpgz0cklw8_actual.txt	
@@ -105,7 +105,7 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     if topn:
         valid_entries = valid_entries[:topn]
 
-    # Get all exercise names from a complete run
+    # Get all unique exercise names from all results
     all_exercises = set()
     exercise_solutions = defaultdict(list)
 
@@ -141,22 +141,13 @@ def analyze_exercise_solutions(dirs=None, topn=None, copy_hard_set=False):
     # Calculate never solved exercises
     never_solved = len(all_exercises - set(exercise_solutions.keys()))
 
-    # Print per-exercise statistics
-    print("\nExercise Solution Statistics:")
-    print("-" * 40)
-
-    # Add exercises that were never solved
-    for exercise in all_exercises:
-        if exercise not in exercise_solutions:
-            exercise_solutions[exercise] = []
-
     # Create list of (language, exercise) pairs with solution stats
     exercise_stats = []
     total_models = len(valid_entries)
 
     for testcase in all_exercises:
         # Language is already in the testcase string
-        lang = testcase.split("/")[0]  # First part is the language
+        lang = testcase.split("/")[1]  # First part is the language
         models = exercise_solutions[testcase]
         num_solved = len(models)
         percent = (num_solved / total_models) * 100
