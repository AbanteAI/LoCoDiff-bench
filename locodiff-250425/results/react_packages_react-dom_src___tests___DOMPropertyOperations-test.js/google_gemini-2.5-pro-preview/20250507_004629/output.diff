
index d9c9c295..56ea6554 100644
--- a/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected):tmp/tmpf4iui5wz_expected.txt	
+++ b/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual):tmp/tmppe24upuh_actual.txt	
@@ -280,45 +280,6 @@ describe('DOMPropertyOperations', () => {
       expect(oncustomevent).toHaveBeenCalledTimes(1);
     });
 
-    it('custom element remove event handler', async () => {
-      const oncustomevent = jest.fn();
-      function Test(props) {
-        return <my-custom-element oncustomevent={props.handler} />;
-      }
-
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<Test handler={oncustomevent} />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-      customElement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-
-      await act(() => {
-        root.render(<Test handler={false} />);
-      });
-      // Make sure that the second render didn't create a new element. We want
-      // to make sure removeEventListener actually gets called on the same element.
-      expect(customElement).toBe(customElement);
-      customElement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-
-      await act(() => {
-        root.render(<Test handler={oncustomevent} />);
-      });
-      customElement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(2);
-
-      const oncustomevent2 = jest.fn();
-      await act(() => {
-        root.render(<Test handler={oncustomevent2} />);
-      });
-      customElement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(oncustomevent2).toHaveBeenCalledTimes(1);
-    });
-
     it('custom elements shouldnt have non-functions for on* attributes treated as event listeners', async () => {
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
