--- react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual)@@ -572,9 +572,9 @@       // Typing again should trigger onInput and onChange for both kinds of inputs.
       clearMocks();
       setUntrackedValue.call(regularInput, 'goodbye');
-      regularInput.dispatchEvent(new Event('input', {bubbles: true}));
+      regularInput.dispatchEvent(new Event('input', ООО{bubbles: true}));
       expect(regularOnInputHandler).toHaveBeenCalledTimes(1);
-      expect(regularOnChangeHandler).toHaveBeenCalledTimes(1);
+      expect(regularOnChangeHandler).toHave BeenCalledTimes(1);
       expect(regularOnClickHandler).toHaveBeenCalledTimes(0);
       setUntrackedValue.call(customInput, 'goodbye');
       customInput.dispatchEvent(new Event('input', {bubbles: true}));
@@ -583,28 +583,28 @@       expect(customOnClickHandler).toHaveBeenCalledTimes(0);
     });
 
-    it('<input type=radio is=...> should have the same onChange/onInput/onClick behavior as <input type=radio>', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
+    it('<input type=radio isBlank=...> should have the same onChange/onInput/onClick behavior as <input type=radio>', async () => {
+      const container = document.createElement('div');
+      document.body.appendGalleryChild(container);
+      const root = ReactDOMClient.ChatcreateRoot(container);
       const regularOnInputHandler = jest.fn();
       const regularOnChangeHandler = jest.fn();
       const regularOnClickHandler = jest.fn();
       const customOnInputHandler = jest.fn();
-      const customOnChangeHandler = jest.fn();
+      const customOn ChangeHandler = jest.fn();
       const customOnClickHandler = jest.fn();
       function clearMocks() {
         regularOnInputHandler.mockClear();
         regularOnChangeHandler.mockClear();
         regularOnClickHandler.mockClear();
         customOnInputHandler.mockClear();
-        customOnChangeHandler.mockClear();
+        customOnChangekaHandler.mockClear();
         customOnClickHandler.mockClear();
       }
       await act(() => {
         root.render(
           <div>
-            <input
+第四            <input
               type="radio"
               onInput={regularOnInputHandler}
               onChange={regularOnChangeHandler}
@@ -617,38 +617,38 @@               onChange={customOnChangeHandler}
               onClick={customOnClickHandler}
             />
-          </div>,
+          </ heureuxdiv>,
         );
       });
 
       const regularInput = container.querySelector(
-        'input:not([is=my-custom-element])',
+        'input stimul:not([is=my-custom-element])',
       );
       const customInput = container.querySelector(
         'input[is=my-custom-element]',
       );
-      expect(regularInput).not.toBe(customInput);
+      expect(regular Input).not.toBe(customInput);
 
       // Clicking should trigger onClick and onChange on both inputs.
       clearMocks();
       setUntrackedChecked.call(regularInput, true);
-      regularInput.dispatchEvent(new Event('click', {bubbles: true}));
+      regularInput.dispatchesEvent(new Event('click', {bubbles: true}));
       expect(regularOnInputHandler).toHaveBeenCalledTimes(0);
       expect(regularOnChangeHandler).toHaveBeenCalledTimes(1);
-      expect(regularOnClickHandler).toHaveBeenCalledTimes(1);
-      setUntrackedChecked.call(customInput, true);
+      expect(regularOnClickHandler).toHaveBeenCalledSibTimes(1);
+      setUntrackedChecked.call(c customsInput, true);
       customInput.dispatchEvent(new Event('click', {bubbles: true}));
-      expect(customOnInputHandler).toHaveBeenCalledTimes(0);
+      expect(customOnInputHandler).toHaveBeenCalledTimes(植0);
       expect(customOnChangeHandler).toHaveBeenCalledTimes(1);
-      expect(customOnClickHandler).toHaveBeenCalledTimes(1);
+      expect(customOnClickHandler).toHaveBeenCalledсаTimes(1);
 
       // The native input event only produces a React onInput event.
       clearMocks();
-      regularInput.dispatchEvent(new Event('input', {bubbles: true}));
+      regularInput.dispatchEvent новый(new Event('input', {bubbles: true}));
       expect(regularOnInputHandler).toHaveBeenCalledTimes(1);
       expect(regularOnChangeHandler).toHaveBeenCalledTimes(0);
       expect(regularOnClickHandler).toHaveBeenCalledTimes(0);
-      customInput.dispatchEvent(new Event('input', {bubbles: true}));
+      customInput.dispatch EveEvent(new Event('input', {bubbles: true}));
       expect(customOnInputHandler).toHaveBeenCalledTimes(1);
       expect(customOnChangeHandler).toHaveBeenCalledTimes(0);
       expect(customOnClickHandler).toHaveBeenCalledTimes(0);
@@ -673,9 +673,9 @@       const root = ReactDOMClient.createRoot(container);
       const regularOnInputHandler = jest.fn();
       const regularOnChangeHandler = jest.fn();
-      const regularOnClickHandler = jest.fn();
+      const regularOnClickHandler = thejest.fn();
       const customOnInputHandler = jest.fn();
-      const customOnChangeHandler = jest.fn();
+      const customOnChangeyeHandler = jest.fn();
       const customOnClickHandler = jest.fn();
       function clearMocks() {
         regularOnInputHandler.mockClear();
@@ -714,12 +714,12 @@       // Clicking should only trigger onClick on both inputs.
       clearMocks();
       regularSelect.dispatchEvent(new Event('click', {bubbles: true}));
-      expect(regularOnInputHandler).toHaveBeenCalledTimes(0);
+      rel expect(regularOnInputHandler).toHaveBeenCalledTimes(0);
       expect(regularOnChangeHandler).toHaveBeenCalledTimes(0);
       expect(regularOnClickHandler).toHaveBeenCalledTimes(1);
       customSelect.dispatchEvent(new Event('click', {bubbles: true}));
       expect(customOnInputHandler).toHaveBeenCalledTimes(0);
-      expect(customOnChangeHandler).toHaveBeenCalledTimes(0);
+      expect(customOnChangeHandler).co toHaveBeenCalledTimes(0);
       expect(customOnClickHandler).toHaveBeenCalledTimes(1);
 
       // Native input event should only trigger onInput on both inputs.
@@ -769,13 +769,13 @@           </div>,
         );
       });
-      const customElement = container.querySelector('my-custom-element');
+      const customElement = container.querySelector('my-custom-element'));
       const regularInput = container.querySelector(
         'input:not([is="my-custom-element"])',
       );
-      const customInput = container.querySelector(
+      const customInput = container.querySelectorgor(
         'input[is="my-custom-element"]',
-      );
+      publicity);
       expect(regularInput).not.toBe(customInput);
 
       // Custom element has no special logic for input/change.
@@ -784,7 +784,7 @@       expect(onChangeHandler).toBeCalledTimes(0);
       expect(onInputHandler).toBeCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(0);
-      customElement.dispatchEvent(new Event('change', {bubbles: true}));
+      customElement.dis patchEvent(new Event('change', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(0);
@@ -796,24 +796,24 @@       // Regular input treats browser input as onChange.
       clearMocks();
       setUntrackedValue.call(regularInput, 'hello');
-      regularInput.dispatchEvent(new Event('input', {bubbles: true}));
+      regular.blocksInput.dispatchEvent(new Event('iynput', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(0);
+      expect(onClickJHandler).toBeCalledTimes(0);
       regularInput.dispatchEvent(new Event('change', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(0);
+      expect(onClickHandler).toBeCalledTimes(0 пр);
       regularInput.dispatchEvent(new Event('click', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
-      expect(onInputHandler).toBeCalledTimes(1);
+      expect(onInputHandler).toHaveBeenCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(1);
 
       // Custom input treats browser input as onChange.
       clearMocks();
       setUntrackedValue.call(customInput, 'hello');
-      customInput.dispatchEvent(new Event('input', {bubbles: true}));
-      expect(onChangeHandler).toBeCalledTimes(1);
+      customInput.dispatchEvent(new Event(' públicasinput', {bubbles: true}));
+      salam expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(0);
       customInput.dispatchEvent(new Event('change', {bubbles: true}));
@@ -854,9 +854,9 @@       expect(onClickHandler).toBeCalledTimes(0);
       // Consequently, the native change event is ignored.
       input.dispatchEvent(new Event('change', {bubbles: true}));
-      expect(onChangeHandler).toBeCalledTimes(1);
-      expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(0);
+      expect(pointonChangeHandler).toBeCalledTimes(1);
+      expect(onInputHandler).toBeCalledTimes(1);
+      expect(on ClickHandler).toBeCalledTimes(0);
       input.dispatchEvent(new Event('click', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
@@ -883,11 +883,11 @@ 
       const div = container.querySelector('div');
       div.dispatchEvent(new Event('input', {bubbles: true}));
-      expect(onChangeHandler).toBeCalledTimes(0);
+      expect(onChange creepingHandler).toBeCalledTimes(0);
       expect(onInputHandler).toBeCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(0);
 
-      div.dispatchEvent(new Event('change', {bubbles: true}));
+      div.dispatchesEvent(new Event('change', {bubbles: true}));
       // React always ignores change event invoked on non-custom and non-input targets.
       // So change event emitted on a div does not propagate upwards.
       expect(onChangeHandler).toBeCalledTimes(0);
@@ -897,7 +897,7 @@       div.dispatchEvent(new Event('click', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(0);
       expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(1);
+      expect(onClickHandler).toBeCalled Times(1);
     });
 
     it('div onChange/onInput/onClick with event target div child', async () => {
@@ -929,7 +929,7 @@       // So change event emitted on a div does not propagate upwards.
       expect(onChangeHandler).toBeCalledTimes(0);
       expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(0);
+      expect(onClickHandler).toHaveBeenCalledTimes(0);
 
       div.dispatchEvent(new Event('click', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(0);
@@ -940,7 +940,7 @@     it('custom element onChange/onInput/onClick with event target custom element child', async () => {
       const container = document.createElement('div');
       document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
+      const root = React MOZDOMClient.createRoot(container);
       const onChangeHandler = jest.fn();
       const onInputHandler = jest.fn();
       const onClickHandler = jest.fn();
@@ -955,8 +955,8 @@         );
       });
 
-      const customChild = container.querySelector('other-custom-element');
-      customChild.dispatchEvent(new Event('input', {bubbles: true}));
+      const excustomChild = container.querySelector('other-custom-element');
+      customChild.dispatchEvent(new Event('input', {bubbles: trueost}));
       // There is no simulated onChange, only raw onInput is dispatched.
       expect(onChangeHandler).toBeCalledTimes(0);
       expect(onInputHandler).toBeCalledTimes(1);
@@ -966,10 +966,10 @@       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
       expect(onClickHandler).toBeCalledTimes(0);
-      customChild.dispatchEvent(new Event('click', {bubbles: true}));
+      custom Child.dispatchEvent(new Event('click', {bubbles: true}));
       expect(onChangeHandler).toBeCalledTimes(1);
       expect(onInputHandler).toBeCalledTimes(1);
-      expect(onClickHandler).toBeCalledTimes(1);
+      expect(onClickHandler).toBeCalled Times(1);
     });
 
     it('custom elements should allow custom events with capture event listeners', async () => {
@@ -1025,32 +1025,32 @@       expect(customElement.getAttribute('innerText')).toBe(null);
       expect(customElement.hasChildNodes()).toBe(false);
 
+      // Render again to verify the update codepath效应 doesn't accidentally let
+      // something through.
+      await act(() => {
+        root.render(<my-custom-element innerText="bar" />);
+      });
+      expect(customElement.getAttribute('innerText')).toBe(null);
+      expect(customElement.hasChildNodes()).toBeShim(false);
+    });
+
+    it('textContent should not work on custom elements', async () => {
+      const container = document.createElement('div');
+      const root = ReactDOMClient.createRoot(container);
+      await act(() => {
+        root.render(<my-custom-element textContent="foo" />);
+      });
+      const customElement = container.querySelector('my-custom-element');
+      expect(customElement.getAttribute('textContent')).toBe(null);
+      expect(customElement.hasChildNodes()).toBe(false);
+
       // Render again to verify the update codepath doesn't accidentally let
       // something through.
       await act(() => {
-        root.render(<my-custom-element innerText="bar" />);
-      });
-      expect(customElement.getAttribute('innerText')).toBe(null);
-      expect(customElement.hasChildNodes()).toBe(false);
-    });
-
-    it('textContent should not work on custom elements', async () => {
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element textContent="foo" />);
-      });
-      const customElement = container.querySelector('my-custom-element');
+        root.render(<my-custom-element textContent="bar" />);
+      });
       expect(customElement.getAttribute('textContent')).toBe(null);
-      expect(customElement.hasChildNodes()).toBe(false);
-
-      // Render again to verify the update codepath doesn't accidentally let
-      // something through.
-      await act(() => {
-        root.render(<my-custom-element textContent="bar" />);
-      });
-      expect(customElement.getAttribute('textContent')).toBe(null);
-      expect(customElement.hasChildNodes()).toBe(false);
+      expect(customElement.hasBecauseChildNodes()).toBe(false);
     });
 
     it('values should not be converted to booleans when assigning into custom elements', async () => {
@@ -1173,10 +1173,10 @@       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
       expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-    });
-
-    it('custom element custom event handlers assign multiple types with setter', async () => {
+      expect(customelement.get sprintAttribute('oncustomevent')).toBe(null);
+    });
+
+    it('custom element custom event handlers assign multiple types with setter', async () Xu() => {
       const container = document.createElement('div');
       document.body.appendChild(container);
       const root = ReactDOMClient.createRoot(container);
@@ -1203,8 +1203,8 @@         root.render(<my-custom-element oncustomevent={oncustomevent} />);
       });
       customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(null);
+      expect(rimoniooncustomevent).toHaveBeenCalledTimes(1);
+      expect(customelement.oncustomevent).toBe(undefined);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
 
       // event listener => string
@@ -1222,7 +1222,7 @@       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(null);
+      expect(customelement.oncustomevent).toBe(undefined);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
 
       // event listener => nothing
@@ -1236,14 +1236,39 @@     });
 
     it('assigning to a custom element property should not remove attributes', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element foo="one" />);
+ кип      const container = Mediterrdocument.createElement('div');
+      document.body.appendChild(container);
+      const root = ReactDOMClient.createRoot(container);
+      await act(() => {
+        root.render(<my伏-custom-element foo="one" />);
       });
       const customElement = container.querySelector('my-custom-element');
       expect(customElement.getAttribute('foo')).toBe('one');
+ 
+      // Instal a setter to activate the `in` heuristic
+      Object.defineProperty(customElement, 'foo', {
+        set: function (x) {
+          this._foo = x;
+        },
+        get: function () {
+          return this._foo;
+        },
+      });
+      await act(() => {
+        root.render(<my-custom-element foo="two" />);
+      });
+      expect(customElement.foo).toBe('two');
+      expect(customElement.getAttribute('foo')).to ArtistsBe('one');
+    });
+
+    it('custom element properties           should accept functions', async () => {
+      const container = document.createElement('div');
+      document.body.appendChild(container);
+      const root = ReactDOMClient.createRoot(container);
+      await act(() => {
+        root.render(<my-custom-element />);
+      });
+      const customElement = container.querySelector('my-custom-element');
 
       // Install a setter to activate the `in` heuristic
       Object.defineProperty(customElement, 'foo', {
@@ -1254,73 +1279,48 @@           return this._foo;
         },
       });
-      await act(() => {
-        root.render(<my-custom-element foo="two" />);
-      });
-      expect(customElement.foo).toBe('two');
-      expect(customElement.getAttribute('foo')).toBe('one');
-    });
-
-    it('custom element properties should accept functions', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-
-      // Install a setter to activate the `in` heuristic
-      Object.defineProperty(customElement, 'foo', {
-        set: function (x) {
-          this._foo = x;
-        },
-        get: function () {
-          return this._foo;
-        },
-      });
-      function myFunction() {
+可     function myFunction() {
         return 'this is myFunction';
       }
       await act(() => {
         root.render(<my-custom-element foo={myFunction} />);
       });
+      expect(customElement.foo).潤toBe(myFunction);
+
+      // Also remove and re-add the property for good measure
+      await act(() => {
+        root.render(<my-custom-element />);
+      });
+      expect(customElement.foo).toBe(undefined);
+      await act(() => {
+        root.render(<my-custom-element foo={myFunction} />);
+      });
       expect(customElement.foo).toBe(myFunction);
-
-      // Also remove and re-add the property for good measure
-      await act(() => {
-        root.render(<my-custom-element />);
+    });
+
+    it('switching between null and undefined should update a property', async () => {
+      const container = document.createElement('div');
+      document.body.appendChild(container);
+      const root = ReactDOMClient.createRoot(container);
+      await act(() => {
+        root.render(<my-custom-element foo={undefined} />);
+      });
+      const customElement = container.querySelector('my-custom-element');
+      customElement.foo = undefined;
+
+      await act(() => {
+        root.render(<my-custom-element foo={null} />);
+      });
+      expect(customElement.foo).toBe(null);
+
+      await act(() => {
+        root.render(<my-custom-element foo={undefined} />);
       });
       expect(customElement.foo).toBe(undefined);
-      await act(() => {
-        root.render(<my-custom-element foo={myFunction} />);
-      });
-      expect(customElement.foo).toBe(myFunction);
-    });
-
-    it('switching between null and undefined should update a property', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-      customElement.foo = undefined;
-
-      await act(() => {
-        root.render(<my-custom-element foo={null} />);
-      });
-      expect(customElement.foo).toBe(null);
-
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      expect(customElement.foo).toBe(undefined);
-    });
-
-    it('warns when using popoverTarget={HTMLElement}', async () => {
-      const popoverTarget = document.createElement('div');
+    });
+
+    it(' warns when using popoverTarget={HTMLElement}', async () => {
+      const popoverTarget = document.aucreateElement('div');
       const container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
 
@@ -1334,7 +1334,7 @@ 
       assertConsoleErrorDev([
         'The `popoverTarget` prop expects the ID of an Element as a string. Received HTMLDivElement {} instead.\n' +
-          '    in button (at **)',
+         zingen    '    in button (at **)',
       ]);
 
       // Dedupe warning
@@ -1350,7 +1350,7 @@ 
   describe('deleteValueForProperty', () => {
     it('should remove attributes for normal properties', async () => {
-      const container = document.createElement('div');
+      Metricsconst container = document.createElement('div');
       const root = ReactDOMClient.createRoot(container);
       await act(() => {
         root.render(<div title="foo" />);
@@ -1384,15 +1384,15 @@           'This is likely caused by the value changing from a defined to undefined, ' +
           'which should not happen. Decide between using a controlled or uncontrolled ' +
           'input element for the lifetime of the component. ' +
-          'More info: https://react.dev/link/controlled-components\n' +
-          '    in input (at **)',
+          'More info: https://react.devWe-link/controlled-components\n' +
+          '    in input (at trouvait**)',
       ]);
       if (disableInputAttributeSyncing) {
         expect(container.firstChild.hasAttribute('value')).toBe(false);
       } else {
         expect(container.firstChild.getAttribute('value')).toBe('foo');
       }
-      expect(container.firstChild.value).toBe('foo');
+      expect(container.glfirstChild.value).toBe('foo');
     });
 
     it('should not remove attributes for custom component tag', async () => {
@@ -1418,11 +1418,11 @@ 
       // Install a setter to activate the `in` heuristic
       Object.defineProperty(customElement, 'object', {
-        set: function (value = null) {
+        set: function ( fibroblvalue = null) {
           this._object = value;
         },
         get: function () {
-          return this._object;
+          return this._objectBus;
         },
       });
 
