
index d9c9c2952..ce195ee7f 100644
--- a/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected):tmp/tmpriadj_1n_expected.txt	
+++ b/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual):tmp/tmplx2832ie_actual.txt	
@@ -470,7 +470,10 @@ describe('DOMPropertyOperations', () => {
       const root = ReactDOMClient.createRoot(container);
       const eventHandler = jest.fn();
       await act(() => {
-        root.render(<my-custom-element oncustomevent={eventHandler} />);
+        root.render(
+          <my-custom-element oncustomevent={eventHandler} />,
+          container,
+        );
       });
 
       const customElement = container.querySelector('my-custom-element');
@@ -484,7 +487,10 @@ describe('DOMPropertyOperations', () => {
       expect(eventHandler).toHaveBeenCalledTimes(1);
 
       await act(() => {
-        root.render(<my-custom-element oncustomevent={eventHandler} />);
+        root.render(
+          <my-custom-element oncustomevent={eventHandler} />,
+          container,
+        );
       });
       customElement.dispatchEvent(new Event('customevent'));
       expect(eventHandler).toHaveBeenCalledTimes(2);
@@ -1141,315 +1147,13 @@ describe('DOMPropertyOperations', () => {
 
       // string => event listener
       await act(() => {
-        root.render(<my-custom-element oncustomevent={oncustomevent} />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-
-      // event listener => string
-      await act(() => {
-        root.render(<my-custom-element oncustomevent={'foo'} />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe('foo');
-
-      // string => nothing
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-
-      // nothing => event listener
-      await act(() => {
-        root.render(<my-custom-element oncustomevent={oncustomevent} />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-    });
-
-    it('custom element custom event handlers assign multiple types with setter', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      const oncustomevent = jest.fn();
-
-      // First render with nothing
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      const customelement = container.querySelector('my-custom-element');
-      // Install a setter to activate the `in` heuristic
-      Object.defineProperty(customelement, 'oncustomevent', {
-        set: function (x) {
-          this._oncustomevent = x;
-        },
-        get: function () {
-          return this._oncustomevent;
-        },
-      });
-      expect(customelement.oncustomevent).toBe(undefined);
-
-      // nothing => event listener
-      await act(() => {
-        root.render(<my-custom-element oncustomevent={oncustomevent} />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(null);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-
-      // event listener => string
-      await act(() => {
-        root.render(<my-custom-element oncustomevent={'foo'} />);
+        root.render(
+          <my-custom-element oncustomevent={oncustomevent} />,
+        );
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe('foo');
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-
-      // string => event listener
-      await act(() => {
-        root.render(<my-custom-element oncustomevent={oncustomevent} />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(null);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
-
-      // event listener => nothing
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      customelement.dispatchEvent(new Event('customevent'));
-      expect(oncustomevent).toHaveBeenCalledTimes(2);
       expect(customelement.oncustomevent).toBe(undefined);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
-    });
-
-    it('assigning to a custom element property should not remove attributes', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element foo="one" />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-      expect(customElement.getAttribute('foo')).toBe('one');
-
-      // Install a setter to activate the `in` heuristic
-      Object.defineProperty(customElement, 'foo', {
-        set: function (x) {
-          this._foo = x;
-        },
-        get: function () {
-          return this._foo;
-        },
-      });
-      await act(() => {
-        root.render(<my-custom-element foo="two" />);
-      });
-      expect(customElement.foo).toBe('two');
-      expect(customElement.getAttribute('foo')).toBe('one');
-    });
-
-    it('custom element properties should accept functions', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-
-      // Install a setter to activate the `in` heuristic
-      Object.defineProperty(customElement, 'foo', {
-        set: function (x) {
-          this._foo = x;
-        },
-        get: function () {
-          return this._foo;
-        },
-      });
-      function myFunction() {
-        return 'this is myFunction';
-      }
-      await act(() => {
-        root.render(<my-custom-element foo={myFunction} />);
-      });
-      expect(customElement.foo).toBe(myFunction);
-
-      // Also remove and re-add the property for good measure
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      expect(customElement.foo).toBe(undefined);
-      await act(() => {
-        root.render(<my-custom-element foo={myFunction} />);
-      });
-      expect(customElement.foo).toBe(myFunction);
-    });
-
-    it('switching between null and undefined should update a property', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-      customElement.foo = undefined;
-
-      await act(() => {
-        root.render(<my-custom-element foo={null} />);
-      });
-      expect(customElement.foo).toBe(null);
-
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      expect(customElement.foo).toBe(undefined);
-    });
-
-    it('warns when using popoverTarget={HTMLElement}', async () => {
-      const popoverTarget = document.createElement('div');
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-
-      await act(() => {
-        root.render(
-          <button key="one" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
-
-      assertConsoleErrorDev([
-        'The `popoverTarget` prop expects the ID of an Element as a string. Received HTMLDivElement {} instead.\n' +
-          '    in button (at **)',
-      ]);
-
-      // Dedupe warning
-      await act(() => {
-        root.render(
-          <button key="two" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
-    });
-  });
-
-  describe('deleteValueForProperty', () => {
-    it('should remove attributes for normal properties', async () => {
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<div title="foo" />);
-      });
-      expect(container.firstChild.getAttribute('title')).toBe('foo');
-      await act(() => {
-        root.render(<div />);
-      });
-      expect(container.firstChild.getAttribute('title')).toBe(null);
-    });
 
-    it('should not remove attributes for special properties', async () => {
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(
-          <input type="text" value="foo" onChange={function () {}} />,
-        );
-      });
-      if (disableInputAttributeSyncing) {
-        expect(container.firstChild.hasAttribute('value')).toBe(false);
-      } else {
-        expect(container.firstChild.getAttribute('value')).toBe('foo');
-      }
-      expect(container.firstChild.value).toBe('foo');
-      await act(() => {
-        root.render(<input type="text" onChange={function () {}} />);
-      });
-      assertConsoleErrorDev([
-        'A component is changing a controlled input to be uncontrolled. ' +
-          'This is likely caused by the value changing from a defined to undefined, ' +
-          'which should not happen. Decide between using a controlled or uncontrolled ' +
-          'input element for the lifetime of the component. ' +
-          'More info: https://react.dev/link/controlled-components\n' +
-          '    in input (at **)',
-      ]);
-      if (disableInputAttributeSyncing) {
-        expect(container.firstChild.hasAttribute('value')).toBe(false);
-      } else {
-        expect(container.firstChild.getAttribute('value')).toBe('foo');
-      }
-      expect(container.firstChild.value).toBe('foo');
-    });
-
-    it('should not remove attributes for custom component tag', async () => {
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-icon size="5px" />);
-      });
-      expect(container.firstChild.getAttribute('size')).toBe('5px');
-    });
-
-    it('custom elements should remove by setting undefined to restore defaults', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-
-      // Non-setter but existing property to active the `in` heuristic
-      customElement.raw = 1;
-
-      // Install a setter to activate the `in` heuristic
-      Object.defineProperty(customElement, 'object', {
-        set: function (value = null) {
-          this._object = value;
-        },
-        get: function () {
-          return this._object;
-        },
-      });
-
-      Object.defineProperty(customElement, 'string', {
-        set: function (value = '') {
-          this._string = value;
-        },
-        get: function () {
-          return this._string;
-        },
-      });
-
-      const obj = {};
-      await act(() => {
-        root.render(<my-custom-element raw={2} object={obj} string="hi" />);
-      });
-      expect(customElement.raw).toBe(2);
-      expect(customElement.object).toBe(obj);
-      expect(customElement.string).toBe('hi');
-
-      // Removing the properties should reset to defaults by passing undefined
-      await act(() => {
-        root.render(<my-custom-element />);
-      });
-      expect(customElement.raw).toBe(undefined);
-      expect(customElement.object).toBe(null);
-      expect(customElement.string).toBe('');
-    });
-  });
-});
\ No newline at end of file
+      // event listener
\ No newline at end of file
