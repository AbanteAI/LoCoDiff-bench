
index d9c9c295..bf392351 100644
--- a/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected):tmp/tmp0sxramf7_expected.txt	
+++ b/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual):tmp/tmp6ew8g1kb_actual.txt	
@@ -402,7 +402,7 @@ describe('DOMPropertyOperations', () => {
       await act(() => {
         root.render(<my-custom-element onChange={eventHandler} />);
       });
-      customElement.dispatchEvent(new Event('change', {bubbles: true}));
+      customElement.dispatchEvent(new Event('change', {bubbles: true}});
       expectedHandlerCallCount++;
       expect(eventHandler).toHaveBeenCalledTimes(expectedHandlerCallCount);
     });
@@ -456,12 +456,12 @@ describe('DOMPropertyOperations', () => {
       const customElement = container.querySelector('my-custom-element');
 
       customElement.dispatchEvent(new Event('input', {bubbles: true}));
-      expect(inputEventHandler).toHaveBeenCalledTimes(1);
-      expect(changeEventHandler).toHaveBeenCalledTimes(0);
+      expect(inputEventHandler).toBeCalledTimes(1);
+      expect(changeEventHandler).toBeCalledTimes(0);
 
       customElement.dispatchEvent(new Event('change', {bubbles: true}));
-      expect(inputEventHandler).toHaveBeenCalledTimes(1);
-      expect(changeEventHandler).toHaveBeenCalledTimes(1);
+      expect(inputEventHandler).toBeCalledTimes(1);
+      expect(changeEventHandler).toBeCalledTimes(1);
     });
 
     it('custom elements should be able to remove and re-add custom event listeners', async () => {
@@ -1154,8 +1154,8 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe('foo');
+      expect(customElement.oncustomevent).toBe(undefined);
+      expect(customElement.getAttribute('oncustomevent')).toBe('foo');
 
       // string => nothing
       await act(() => {
@@ -1163,8 +1163,8 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
+      expect(customElement.oncustomevent).toBe(undefined);
+      expect(customElement.getAttribute('oncustomevent')).toBe(null);
 
       // nothing => event listener
       await act(() => {
@@ -1172,8 +1172,8 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(undefined);
-      expect(customelement.getAttribute('oncustomevent')).toBe(null);
+      expect(customElement.oncustomevent).toBe(undefined);
+      expect(customElement.getAttribute('oncustomevent')).toBe(null);
     });
 
     it('custom element custom event handlers assign multiple types with setter', async () => {
@@ -1204,7 +1204,7 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(1);
-      expect(customelement.oncustomevent).toBe(null);
+      expect(customelement.oncustomevent).toBe(undefined);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
 
       // event listener => string
@@ -1222,7 +1222,7 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(null);
+      expect(customelement.oncustomevent).toBe(undefined);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
 
       // event listener => nothing
