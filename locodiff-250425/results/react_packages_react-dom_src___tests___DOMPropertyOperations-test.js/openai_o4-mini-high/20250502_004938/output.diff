--- react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected)+++ react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual)@@ -3,8 +3,6 @@  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
- * @emails react-core
  */
 
 'use strict';
@@ -1231,7 +1229,7 @@       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(undefined);
+      expect(customelement.oncustomevent).toBe(null);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
     });
 
@@ -1296,55 +1294,6 @@         root.render(<my-custom-element foo={myFunction} />);
       });
       expect(customElement.foo).toBe(myFunction);
-    });
-
-    it('switching between null and undefined should update a property', async () => {
-      const container = document.createElement('div');
-      document.body.appendChild(container);
-      const root = ReactDOMClient.createRoot(container);
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      const customElement = container.querySelector('my-custom-element');
-      customElement.foo = undefined;
-
-      await act(() => {
-        root.render(<my-custom-element foo={null} />);
-      });
-      expect(customElement.foo).toBe(null);
-
-      await act(() => {
-        root.render(<my-custom-element foo={undefined} />);
-      });
-      expect(customElement.foo).toBe(undefined);
-    });
-
-    it('warns when using popoverTarget={HTMLElement}', async () => {
-      const popoverTarget = document.createElement('div');
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-
-      await act(() => {
-        root.render(
-          <button key="one" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
-
-      assertConsoleErrorDev([
-        'The `popoverTarget` prop expects the ID of an Element as a string. Received HTMLDivElement {} instead.\n' +
-          '    in button (at **)',
-      ]);
-
-      // Dedupe warning
-      await act(() => {
-        root.render(
-          <button key="two" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
     });
   });
 
@@ -1413,7 +1362,7 @@       });
       const customElement = container.querySelector('my-custom-element');
 
-      // Non-setter but existing property to active the `in` heuristic
+      // Non-setter but existing property to activate the `in` heuristic
       customElement.raw = 1;
 
       // Install a setter to activate the `in` heuristic
@@ -1451,5 +1400,33 @@       expect(customElement.object).toBe(null);
       expect(customElement.string).toBe('');
     });
+
+    it('warns when using popoverTarget={HTMLElement}', async () => {
+      const popoverTarget = document.createElement('div');
+      const container = document.createElement('div');
+      const root = ReactDOMClient.createRoot(container);
+
+      await act(() => {
+        root.render(
+          <button key="one" popoverTarget={popoverTarget}>
+            Toggle popover
+          </button>,
+        );
+      });
+
+      assertConsoleErrorDev([
+        'The `popoverTarget` prop expects the ID of an Element as a string. Received HTMLDivElement {} instead.\n' +
+          '    in button (at **)',
+      ]);
+
+      // Dedupe warning
+      await act(() => {
+        root.render(
+          <button key="two" popoverTarget={popoverTarget}>
+            Toggle popover
+          </button>,
+        );
+      });
+    });
   });
 });