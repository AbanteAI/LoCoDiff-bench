
index d9c9c2952..66c719785 100644
--- a/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_expectedoutput.txt (expected):tmp/tmpviazw40e_expected.txt	
+++ b/react_packages_react-dom_src___tests___DOMPropertyOperations-test.js_extracted.txt (actual):tmp/tmpkg71ptid_actual.txt	
@@ -1231,7 +1231,7 @@ describe('DOMPropertyOperations', () => {
       });
       customelement.dispatchEvent(new Event('customevent'));
       expect(oncustomevent).toHaveBeenCalledTimes(2);
-      expect(customelement.oncustomevent).toBe(undefined);
+      expect(customelement.oncustomevent).toBe(null);
       expect(customelement.getAttribute('oncustomevent')).toBe(null);
     });
 
@@ -1291,7 +1291,7 @@ describe('DOMPropertyOperations', () => {
       await act(() => {
         root.render(<my-custom-element />);
       });
-      expect(customElement.foo).toBe(undefined);
+      expect(customElement.foo).toBe(null);
       await act(() => {
         root.render(<my-custom-element foo={myFunction} />);
       });
@@ -1318,34 +1318,6 @@ describe('DOMPropertyOperations', () => {
       });
       expect(customElement.foo).toBe(undefined);
     });
-
-    it('warns when using popoverTarget={HTMLElement}', async () => {
-      const popoverTarget = document.createElement('div');
-      const container = document.createElement('div');
-      const root = ReactDOMClient.createRoot(container);
-
-      await act(() => {
-        root.render(
-          <button key="one" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
-
-      assertConsoleErrorDev([
-        'The `popoverTarget` prop expects the ID of an Element as a string. Received HTMLDivElement {} instead.\n' +
-          '    in button (at **)',
-      ]);
-
-      // Dedupe warning
-      await act(() => {
-        root.render(
-          <button key="two" popoverTarget={popoverTarget}>
-            Toggle popover
-          </button>,
-        );
-      });
-    });
   });
 
   describe('deleteValueForProperty', () => {
