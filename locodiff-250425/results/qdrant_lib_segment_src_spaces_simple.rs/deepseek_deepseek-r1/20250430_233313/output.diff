--- qdrant_lib_segment_src_spaces_simple.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_spaces_simple.rs_extracted.txt (actual)@@ -165,7 +165,6 @@     }
 }
 
-/// Equivalent to DotProductMetric with normalization of the vectors in preprocessing.
 impl Metric<VectorElementType> for CosineMetric {
     fn distance() -> Distance {
         Distance::Cosine
@@ -240,6 +239,7 @@ 
 #[cfg(test)]
 mod tests {
+    use rand::rngs::ThreadRng;
     use rand::Rng;
 
     use super::*;
@@ -250,25 +250,21 @@         assert_eq!(res, vec![0.0, 0.0, 0.0, 0.0]);
     }
 
-    /// If we preprocess a vector multiple times, we expect the same result.
-    /// Renormalization should not produce something different.
     #[test]
     fn test_cosine_stable_preprocessing() {
         const DIM: usize = 1500;
         const ATTEMPTS: usize = 100;
 
-        let mut rng = rand::rng();
+        let mut rng = ThreadRng::default();
 
         for attempt in 0..ATTEMPTS {
-            let range = rng.random_range(-2.5..=0.0)..=rng.random_range(0.0..2.5);
-            let vector: Vec<_> = (0..DIM).map(|_| rng.random_range(range.clone())).collect();
-
-            // Preprocess and re-preprocess
+            let range = rng.gen_range(-2.5..=0.0)..=rng.gen_range(0.0..2.5);
+            let vector: Vec<_> = (0..DIM).map(|_| rng.gen_range(range.clone())).collect();
+
             let preprocess1 = <CosineMetric as Metric<VectorElementType>>::preprocess(vector);
             let preprocess2: DenseVector =
                 <CosineMetric as Metric<VectorElementType>>::preprocess(preprocess1.clone());
 
-            // All following preprocess attempts must be the same
             assert_eq!(
                 preprocess1, preprocess2,
                 "renormalization is not stable (vector #{attempt})"
