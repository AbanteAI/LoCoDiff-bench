
index 6667b18e..5367115a 100644
--- a/qdrant_lib_segment_src_spaces_simple.rs_expectedoutput.txt (expected):tmp/tmpb2hxzczb_expected.txt	
+++ b/qdrant_lib_segment_src_spaces_simple.rs_extracted.txt (actual):tmp/tmpin_i7dnt_actual.txt	
@@ -1,15 +1,15 @@
 use common::types::ScoreType;
 
-use super::metric::{Metric, MetricPostProcessing};
+use super::metric::Metric;
 #[cfg(target_arch = "x86_64")]
 use super::simple_avx::*;
 #[cfg(all(target_arch = "aarch64", target_feature = "neon"))]
 use super::simple_neon::*;
 #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
 use super::simple_sse::*;
-use super::tools::is_length_zero_or_normalized;
 use crate::data_types::vectors::{DenseVector, VectorElementType};
 use crate::types::Distance;
+use super::tools::is_length_zero_or_normalized;
 
 #[cfg(target_arch = "x86_64")]
 pub(crate) const MIN_DIM_SIZE_AVX: usize = 32;
@@ -33,7 +33,7 @@ pub struct EuclidMetric;
 #[derive(Clone)]
 pub struct ManhattanMetric;
 
-impl Metric<VectorElementType> for EuclidMetric {
+impl Metric for EuclidMetric {
     fn distance() -> Distance {
         Distance::Euclid
     }
@@ -69,15 +69,13 @@ impl Metric<VectorElementType> for EuclidMetric {
     fn preprocess(vector: DenseVector) -> DenseVector {
         vector
     }
-}
 
-impl MetricPostProcessing for EuclidMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score.abs().sqrt()
     }
 }
 
-impl Metric<VectorElementType> for ManhattanMetric {
+impl Metric for ManhattanMetric {
     fn distance() -> Distance {
         Distance::Manhattan
     }
@@ -113,15 +111,13 @@ impl Metric<VectorElementType> for ManhattanMetric {
     fn preprocess(vector: DenseVector) -> DenseVector {
         vector
     }
-}
 
-impl MetricPostProcessing for ManhattanMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score.abs()
     }
 }
 
-impl Metric<VectorElementType> for DotProductMetric {
+impl Metric for DotProductMetric {
     fn distance() -> Distance {
         Distance::Dot
     }
@@ -157,16 +153,14 @@ impl Metric<VectorElementType> for DotProductMetric {
     fn preprocess(vector: DenseVector) -> DenseVector {
         vector
     }
-}
 
-impl MetricPostProcessing for DotProductMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score
     }
 }
 
 /// Equivalent to DotProductMetric with normalization of the vectors in preprocessing.
-impl Metric<VectorElementType> for CosineMetric {
+impl Metric for CosineMetric {
     fn distance() -> Distance {
         Distance::Cosine
     }
@@ -176,36 +170,9 @@ impl Metric<VectorElementType> for CosineMetric {
     }
 
     fn preprocess(vector: DenseVector) -> DenseVector {
-        #[cfg(target_arch = "x86_64")]
-        {
-            if is_x86_feature_detected!("avx")
-                && is_x86_feature_detected!("fma")
-                && vector.len() >= MIN_DIM_SIZE_AVX
-            {
-                return unsafe { cosine_preprocess_avx(vector) };
-            }
-        }
-
-        #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
-        {
-            if is_x86_feature_detected!("sse") && vector.len() >= MIN_DIM_SIZE_SIMD {
-                return unsafe { cosine_preprocess_sse(vector) };
-            }
-        }
-
-        #[cfg(all(target_arch = "aarch64", target_feature = "neon"))]
-        {
-            if std::arch::is_aarch64_feature_detected!("neon") && vector.len() >= MIN_DIM_SIZE_SIMD
-            {
-                return unsafe { cosine_preprocess_neon(vector) };
-            }
-        }
-
         cosine_preprocess(vector)
     }
-}
 
-impl MetricPostProcessing for CosineMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score
     }
@@ -226,11 +193,11 @@ pub fn manhattan_similarity(v1: &[VectorElementType], v2: &[VectorElementType])
 }
 
 pub fn cosine_preprocess(vector: DenseVector) -> DenseVector {
-    let mut length: f32 = vector.iter().map(|x| x * x).sum();
+    let length: f32 = vector.iter().map(|x| x * x).sum();
     if is_length_zero_or_normalized(length) {
         return vector;
     }
-    length = length.sqrt();
+    let length = length.sqrt();
     vector.iter().map(|x| x / length).collect()
 }
 
@@ -240,7 +207,7 @@ pub fn dot_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> Sco
 
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
+    use rand;
 
     use super::*;
 
