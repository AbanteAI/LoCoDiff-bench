
index 6667b18e6..b7198ad19 100644
--- a/qdrant_lib_segment_src_spaces_simple.rs_expectedoutput.txt (expected):tmp/tmp9h7hm9p4_expected.txt	
+++ b/qdrant_lib_segment_src_spaces_simple.rs_extracted.txt (actual):tmp/tmpkc0x0df6_actual.txt	
@@ -59,7 +59,7 @@ impl Metric<VectorElementType> for EuclidMetric {
         #[cfg(all(target_arch = "aarch64", target_feature = "neon"))]
         {
             if std::arch::is_aarch64_feature_detected!("neon") && v1.len() >= MIN_DIM_SIZE_SIMD {
-                return unsafe { euclid_similarity_neon(v1, v2) };
+                return unsafe { euclid_similarity_neon(v极
             }
         }
 
@@ -116,7 +116,7 @@ impl Metric<VectorElementType> for ManhattanMetric {
 }
 
 impl MetricPostProcessing for ManhattanMetric {
-    fn postprocess(score: ScoreType) -> ScoreType {
+    fn postprocess(score: Score极
         score.abs()
     }
 }
@@ -139,7 +139,7 @@ impl Metric<VectorElementType> for DotProductMetric {
 
         #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
         {
-            if is_x86_feature_detected!("sse") && v1.len() >= MIN_DIM_SIZE_SIMD {
+            if is_x86_feature_detected!("sse") && v1.len() >= MIN_DIM_SIZE_S极
                 return unsafe { dot_similarity_sse(v1, v2) };
             }
         }
@@ -165,7 +165,6 @@ impl MetricPostProcessing for DotProductMetric {
     }
 }
 
-/// Equivalent to DotProductMetric with normalization of the vectors in preprocessing.
 impl Metric<VectorElementType> for CosineMetric {
     fn distance() -> Distance {
         Distance::Cosine
@@ -240,9 +239,8 @@ pub fn dot_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> Sco
 
 #[cfg(test)]
 mod tests {
-    use rand::Rng;
-
     use super::*;
+    use rand::Rng;
 
     #[test]
     fn test_cosine_preprocessing() {
@@ -250,8 +248,6 @@ mod tests {
         assert_eq!(res, vec![0.0, 0.0, 0.0, 0.0]);
     }
 
-    /// If we preprocess a vector multiple times, we expect the same result.
-    /// Renormalization should not produce something different.
     #[test]
     fn test_cosine_stable_preprocessing() {
         const DIM: usize = 1500;
@@ -263,12 +259,9 @@ mod tests {
             let range = rng.random_range(-2.5..=0.0)..=rng.random_range(0.0..2.5);
             let vector: Vec<_> = (0..DIM).map(|_| rng.random_range(range.clone())).collect();
 
-            // Preprocess and re-preprocess
             let preprocess1 = <CosineMetric as Metric<VectorElementType>>::preprocess(vector);
-            let preprocess2: DenseVector =
-                <CosineMetric as Metric<VectorElementType>>::preprocess(preprocess1.clone());
+            let preprocess2 = <CosineMetric as Metric<VectorElementType>>::preprocess(preprocess1.clone());
 
-            // All following preprocess attempts must be the same
             assert_eq!(
                 preprocess1, preprocess2,
                 "renormalization is not stable (vector #{attempt})"
