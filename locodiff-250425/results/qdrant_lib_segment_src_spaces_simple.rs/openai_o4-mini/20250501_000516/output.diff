--- qdrant_lib_segment_src_spaces_simple.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_spaces_simple.rs_extracted.txt (actual)@@ -17,7 +17,7 @@ #[cfg(any(
     target_arch = "x86",
     target_arch = "x86_64",
-    all(target_arch = "aarch64", target_feature = "neon")
+    all(target_arch = "aarch64", target_feature = "neon"),
 ))]
 pub(crate) const MIN_DIM_SIZE_SIMD: usize = 16;
 
@@ -70,7 +70,6 @@         vector
     }
 }
-
 impl MetricPostProcessing for EuclidMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score.abs().sqrt()
@@ -114,7 +113,6 @@         vector
     }
 }
-
 impl MetricPostProcessing for ManhattanMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score.abs()
@@ -158,7 +156,6 @@         vector
     }
 }
-
 impl MetricPostProcessing for DotProductMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score
@@ -195,8 +192,7 @@ 
         #[cfg(all(target_arch = "aarch64", target_feature = "neon"))]
         {
-            if std::arch::is_aarch64_feature_detected!("neon") && vector.len() >= MIN_DIM_SIZE_SIMD
-            {
+            if std::arch::is_aarch64_feature_detected!("neon") && vector.len() >= MIN_DIM_SIZE_SIMD {
                 return unsafe { cosine_preprocess_neon(vector) };
             }
         }
@@ -204,7 +200,6 @@         cosine_preprocess(vector)
     }
 }
-
 impl MetricPostProcessing for CosineMetric {
     fn postprocess(score: ScoreType) -> ScoreType {
         score
@@ -225,6 +220,10 @@         .sum::<ScoreType>()
 }
 
+pub fn dot_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> ScoreType {
+    v1.iter().zip(v2).map(|(a, b)| a * b).sum()
+}
+
 pub fn cosine_preprocess(vector: DenseVector) -> DenseVector {
     let mut length: f32 = vector.iter().map(|x| x * x).sum();
     if is_length_zero_or_normalized(length) {
@@ -234,10 +233,6 @@     vector.iter().map(|x| x / length).collect()
 }
 
-pub fn dot_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> ScoreType {
-    v1.iter().zip(v2).map(|(a, b)| a * b).sum()
-}
-
 #[cfg(test)]
 mod tests {
     use rand::Rng;
@@ -246,7 +241,8 @@ 
     #[test]
     fn test_cosine_preprocessing() {
-        let res = <CosineMetric as Metric<VectorElementType>>::preprocess(vec![0.0, 0.0, 0.0, 0.0]);
+        let res =
+            <CosineMetric as Metric<VectorElementType>>::preprocess(vec![0.0, 0.0, 0.0, 0.0]);
         assert_eq!(res, vec![0.0, 0.0, 0.0, 0.0]);
     }
 
@@ -264,7 +260,8 @@             let vector: Vec<_> = (0..DIM).map(|_| rng.random_range(range.clone())).collect();
 
             // Preprocess and re-preprocess
-            let preprocess1 = <CosineMetric as Metric<VectorElementType>>::preprocess(vector);
+            let preprocess1 =
+                <CosineMetric as Metric<VectorElementType>>::preprocess(vector);
             let preprocess2: DenseVector =
                 <CosineMetric as Metric<VectorElementType>>::preprocess(preprocess1.clone());
 
