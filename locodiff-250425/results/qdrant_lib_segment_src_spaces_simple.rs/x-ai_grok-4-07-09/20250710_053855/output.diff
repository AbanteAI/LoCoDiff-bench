
index 6667b18e6..a0d42baea 100644
--- a/qdrant_lib_segment_src_spaces_simple.rs_expectedoutput.txt (expected):tmp/tmpg6jysd1f_expected.txt	
+++ b/qdrant_lib_segment_src_spaces_simple.rs_extracted.txt (actual):tmp/tmpme2zobtu_actual.txt	
@@ -182,22 +182,21 @@ impl Metric<VectorElementType> for CosineMetric {
                 && is_x86_feature_detected!("fma")
                 && vector.len() >= MIN_DIM_SIZE_AVX
             {
-                return unsafe { cosine_preprocess_avx(vector) };
+                return unsafe { cosine_preprocess_avx(&vector) };
             }
         }
 
         #[cfg(any(target_arch = "x86", target_arch = "x86_64"))]
         {
             if is_x86_feature_detected!("sse") && vector.len() >= MIN_DIM_SIZE_SIMD {
-                return unsafe { cosine_preprocess_sse(vector) };
+                return unsafe { cosine_preprocess_sse(&vector) };
             }
         }
 
         #[cfg(all(target_arch = "aarch64", target_feature = "neon"))]
         {
-            if std::arch::is_aarch64_feature_detected!("neon") && vector.len() >= MIN_DIM_SIZE_SIMD
-            {
-                return unsafe { cosine_preprocess_neon(vector) };
+            if std::arch::is_aarch64_feature_detected!("neon") && vector.len() >= MIN_DIM_SIZE_SIMD {
+                return unsafe { cosine_preprocess_neon(&vector) };
             }
         }
 
@@ -214,14 +213,14 @@ impl MetricPostProcessing for CosineMetric {
 pub fn euclid_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> ScoreType {
     -v1.iter()
         .zip(v2)
-        .map(|(a, b)| (a - b).powi(2))
+        .map(|(&a, &b)| (a - b).powi(2))
         .sum::<ScoreType>()
 }
 
 pub fn manhattan_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> ScoreType {
     -v1.iter()
         .zip(v2)
-        .map(|(a, b)| (a - b).abs())
+        .map(|(&a, &b)| (a - b).abs())
         .sum::<ScoreType>()
 }
 
@@ -235,7 +234,7 @@ pub fn cosine_preprocess(vector: DenseVector) -> DenseVector {
 }
 
 pub fn dot_similarity(v1: &[VectorElementType], v2: &[VectorElementType]) -> ScoreType {
-    v1.iter().zip(v2).map(|(a, b)| a * b).sum()
+    v1.iter().zip(v2).map(|(&a, &b)| a * b).sum()
 }
 
 #[cfg(test)]
