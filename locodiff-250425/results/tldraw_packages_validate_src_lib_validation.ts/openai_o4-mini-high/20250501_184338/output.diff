--- tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected)+++ tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual)@@ -1,7 +1,7 @@ import {
+	MakeUndefinedOptional,
 	IndexKey,
 	JsonValue,
-	MakeUndefinedOptional,
 	STRUCTURED_CLONE_OBJECT_PROTOTYPE,
 	exhaustiveSwitchError,
 	getOwnProperty,
@@ -11,6 +11,7 @@ 
 /** @public */
 export type ValidatorFn<T> = (value: unknown) => T
+
 /** @public */
 export type ValidatorUsingKnownGoodVersionFn<In, Out = In> = (
 	knownGoodValue: In,
@@ -120,10 +121,6 @@ 		readonly validateUsingKnownGoodVersionFn?: ValidatorUsingKnownGoodVersionFn<T>
 	) {}
 
-	/**
-	 * Asserts that the passed value is of the correct type and returns it. The returned value is
-	 * guaranteed to be referentially equal to the passed value.
-	 */
 	validate(value: unknown): T {
 		const validated = this.validationFn(value)
 		if (process.env.NODE_ENV !== 'production' && !Object.is(value, validated)) {
@@ -136,11 +133,9 @@ 		if (Object.is(knownGoodValue, newValue)) {
 			return knownGoodValue as T
 		}
-
 		if (this.validateUsingKnownGoodVersionFn) {
 			return this.validateUsingKnownGoodVersionFn(knownGoodValue, newValue)
 		}
-
 		return this.validate(newValue)
 	}
 
@@ -179,9 +174,11 @@ 			(value) => {
 				return otherValidationFn(this.validate(value))
 			},
-
 			(knownGoodValue, newValue) => {
-				const validated = this.validateUsingKnownGoodVersion(knownGoodValue as any, newValue)
+				const validated = this.validateUsingKnownGoodVersion(
+					knownGoodValue as any,
+					newValue
+				)
 				if (Object.is(knownGoodValue, validated)) {
 					return knownGoodValue
 				}
@@ -205,7 +202,10 @@ 	 */
 	check(name: string, checkFn: (value: T) => void): Validator<T>
 	check(checkFn: (value: T) => void): Validator<T>
-	check(nameOrCheckFn: string | ((value: T) => void), checkFn?: (value: T) => void): Validator<T> {
+	check(
+		nameOrCheckFn: string | ((value: T) => void),
+		checkFn?: (value: T) => void
+	): Validator<T> {
 		if (typeof nameOrCheckFn === 'string') {
 			return this.refine((value) => {
 				prefixError(`(check ${nameOrCheckFn})`, () => checkFn!(value))
@@ -242,7 +242,6 @@ 						prefixError(i, () => itemValidator.validate(item))
 						continue
 					}
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(knownGoodValue[i], item)) {
 						continue
 					}
@@ -253,7 +252,6 @@ 						isDifferent = true
 					}
 				}
-
 				return isDifferent ? (newValue as T[]) : knownGoodValue
 			}
 		)
@@ -289,13 +287,11 @@ 				if (typeof object !== 'object' || object === null) {
 					throw new ValidationError(`Expected object, got ${typeToString(object)}`)
 				}
-
 				for (const [key, validator] of Object.entries(config)) {
 					prefixError(key, () => {
 						;(validator as Validatable<unknown>).validate(getOwnProperty(object, key))
 					})
 				}
-
 				if (!shouldAllowUnknownProperties) {
 					for (const key of Object.keys(object)) {
 						if (!hasOwnProperty(config, key)) {
@@ -303,20 +299,16 @@ 						}
 					}
 				}
-
 				return object as Shape
 			},
 			(knownGoodValue, newValue) => {
 				if (typeof newValue !== 'object' || newValue === null) {
 					throw new ValidationError(`Expected object, got ${typeToString(newValue)}`)
 				}
-
 				let isDifferent = false
-
 				for (const [key, validator] of Object.entries(config)) {
 					const prev = getOwnProperty(knownGoodValue, key)
 					const next = getOwnProperty(newValue, key)
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(prev, next)) {
 						continue
 					}
@@ -332,7 +324,6 @@ 						isDifferent = true
 					}
 				}
-
 				if (!shouldAllowUnknownProperties) {
 					for (const key of Object.keys(newValue)) {
 						if (!hasOwnProperty(config, key)) {
@@ -340,14 +331,12 @@ 						}
 					}
 				}
-
 				for (const key of Object.keys(knownGoodValue)) {
 					if (!hasOwnProperty(newValue, key)) {
 						isDifferent = true
 						break
 					}
 				}
-
 				return isDifferent ? (newValue as Shape) : knownGoodValue
 			}
 		)
@@ -380,13 +369,13 @@ 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
 		validate(input: any): { readonly [K in Key]: Variant }
 	}
 }
+
 /** @public */
 export class UnionValidator<
 	Key extends string,
@@ -402,28 +391,24 @@ 		super(
 			(input) => {
 				this.expectObject(input)
-
 				const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(input)
 				if (matchingSchema === undefined) {
 					return this.unknownValueValidation(input, variant)
 				}
-
 				return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(input))
 			},
 			(prevValue, newValue) => {
 				this.expectObject(newValue)
 				this.expectObject(prevValue)
-
 				const { matchingSchema, variant } = this.getMatchingSchemaAndVariant(newValue)
 				if (matchingSchema === undefined) {
 					return this.unknownValueValidation(newValue, variant)
 				}
-
 				if (getOwnProperty(prevValue, key) !== getOwnProperty(newValue, key)) {
-					// the type has changed so bail out and do a regular validation
-					return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(newValue))
-				}
-
+					return prefixError(`(${key} = ${variant})`, () =>
+						matchingSchema.validate(newValue)
+					)
+				}
 				return prefixError(`(${key} = ${variant})`, () => {
 					if (matchingSchema.validateUsingKnownGoodVersion) {
 						return matchingSchema.validateUsingKnownGoodVersion(prevValue, newValue)
@@ -451,10 +436,13 @@ 				`Expected a string for key "${this.key}", got ${typeToString(variant)}`
 			)
 		} else if (this.useNumberKeys && !Number.isFinite(Number(variant))) {
-			throw new ValidationError(`Expected a number for key "${this.key}", got "${variant as any}"`)
-		}
-
-		const matchingSchema = hasOwnProperty(this.config, variant) ? this.config[variant] : undefined
+			throw new ValidationError(
+				`Expected a number for key "${this.key}", got "${variant as any}"`
+			)
+		}
+		const matchingSchema = hasOwnProperty(this.config, variant)
+			? this.config[variant]
+			: undefined
 		return { matchingSchema, variant }
 	}
 
@@ -476,23 +464,19 @@ 				if (typeof object !== 'object' || object === null) {
 					throw new ValidationError(`Expected object, got ${typeToString(object)}`)
 				}
-
 				for (const [key, value] of Object.entries(object)) {
 					prefixError(key, () => {
 						keyValidator.validate(key)
 						valueValidator.validate(value)
 					})
 				}
-
 				return object as Record<Key, Value>
 			},
 			(knownGoodValue, newValue) => {
 				if (typeof newValue !== 'object' || newValue === null) {
 					throw new ValidationError(`Expected object, got ${typeToString(newValue)}`)
 				}
-
 				let isDifferent = false
-
 				for (const [key, value] of Object.entries(newValue)) {
 					if (!hasOwnProperty(knownGoodValue, key)) {
 						isDifferent = true
@@ -504,7 +488,6 @@ 					}
 					const prev = getOwnProperty(knownGoodValue, key)
 					const next = value
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(prev, next)) {
 						continue
 					}
@@ -519,14 +502,12 @@ 						isDifferent = true
 					}
 				}
-
 				for (const key of Object.keys(knownGoodValue)) {
 					if (!hasOwnProperty(newValue, key)) {
 						isDifferent = true
 						break
 					}
 				}
-
 				return isDifferent ? (newValue as Record<Key, Value>) : knownGoodValue
 			}
 		)
@@ -578,7 +559,7 @@ 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +567,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +583,7 @@ 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +591,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -630,6 +611,7 @@  * @public
  */
 export const bigint = typeofValidator<bigint>('bigint')
+
 /**
  * Validates that a value matches another that was passed in.
  *
@@ -678,121 +660,6 @@ 	}
 	return value as Record<string, unknown>
 })
-
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
-
-function isPlainObject(value: unknown): value is Record<string, unknown> {
-	return (
-		typeof value === 'object' &&
-		value !== null &&
-		(Object.getPrototypeOf(value) === Object.prototype ||
-			Object.getPrototypeOf(value) === null ||
-			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
-	)
-}
-
-function isValidJson(value: any): value is JsonValue {
-	if (
-		value === null ||
-		typeof value === 'number' ||
-		typeof value === 'string' ||
-		typeof value === 'boolean'
-	) {
-		return true
-	}
-
-	if (Array.isArray(value)) {
-		return value.every(isValidJson)
-	}
-
-	if (isPlainObject(value)) {
-		return Object.values(value).every(isValidJson)
-	}
-
-	return false
-}
-
-/**
- * Validate that a value is valid JSON.
- *
- * @public
- */
-export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
-	(value): JsonValue => {
-		if (isValidJson(value)) {
-			return value as JsonValue
-		}
-
-		throw new ValidationError(`Expected json serializable value, got ${typeof value}`)
-	},
-	(knownGoodValue, newValue) => {
-		if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
-			let isDifferent = knownGoodValue.length !== newValue.length
-			for (let i = 0; i < newValue.length; i++) {
-				if (i >= knownGoodValue.length) {
-					isDifferent = true
-					jsonValue.validate(newValue[i])
-					continue
-				}
-				const prev = knownGoodValue[i]
-				const next = newValue[i]
-				if (Object.is(prev, next)) {
-					continue
-				}
-				const checked = jsonValue.validateUsingKnownGoodVersion!(prev, next)
-				if (!Object.is(checked, prev)) {
-					isDifferent = true
-				}
-			}
-			return isDifferent ? (newValue as JsonValue) : knownGoodValue
-		} else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
-			let isDifferent = false
-			for (const key of Object.keys(newValue)) {
-				if (!hasOwnProperty(knownGoodValue, key)) {
-					isDifferent = true
-					jsonValue.validate(newValue[key])
-					continue
-				}
-				const prev = knownGoodValue[key]
-				const next = newValue[key]
-				if (Object.is(prev, next)) {
-					continue
-				}
-				const checked = jsonValue.validateUsingKnownGoodVersion!(prev!, next)
-				if (!Object.is(checked, prev)) {
-					isDifferent = true
-				}
-			}
-			for (const key of Object.keys(knownGoodValue)) {
-				if (!hasOwnProperty(newValue, key)) {
-					isDifferent = true
-					break
-				}
-			}
-			return isDifferent ? (newValue as JsonValue) : knownGoodValue
-		} else {
-			return jsonValue.validate(newValue)
-		}
-	}
-)
-
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function jsonDict(): DictValidator<string, JsonValue> {
-	return dict(string, jsonValue)
-}
 
 /**
  * Validation that an option is a dict with particular keys and values.
@@ -827,7 +694,7 @@ 	return new UnionValidator(
 		key,
 		config,
-		(_unknownValue, unknownVariant) => {
+		(unknownValue, unknownVariant) => {
 			throw new ValidationError(
 				`Expected one of ${Object.keys(config)
 					.map((key) => JSON.stringify(key))
@@ -891,46 +758,25 @@ export function setEnum<T>(values: ReadonlySet<T>): Validator<T> {
 	return new Validator((value) => {
 		if (!values.has(value as T)) {
-			const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
+			const valuesString = Array.from(values, (v) => JSON.stringify(v)).join(' or ')
 			throw new ValidationError(`Expected ${valuesString}, got ${value}`)
 		}
 		return value as T
 	})
 }
 
-/** @public */
 export function optional<T>(validator: Validatable<T>): Validator<T | undefined> {
-	return new Validator(
-		(value) => {
-			if (value === undefined) return undefined
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (knownGoodValue === undefined && newValue === undefined) return undefined
-			if (newValue === undefined) return undefined
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== undefined) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
-}
-
-/** @public */
+	return new Validator((value) => {
+		if (value === undefined) return undefined
+		return validator.validate(value)
+	})
+}
+
 export function nullable<T>(validator: Validatable<T>): Validator<T | null> {
-	return new Validator(
-		(value) => {
-			if (value === null) return null
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (newValue === null) return null
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
+	return new Validator((value) => {
+		if (value === null) return null
+		return validator.validate(value)
+	})
 }
 
 /** @public */
@@ -938,100 +784,4 @@ 	...values: Values
 ): Validator<Values[number]> {
 	return setEnum(new Set(values))
-}
-
-function parseUrl(str: string) {
-	try {
-		return new URL(str)
-	} catch {
-		if (str.startsWith('/') || str.startsWith('./')) {
-			try {
-				return new URL(str, 'http://example.com')
-			} catch {
-				throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`)
-			}
-		}
-		throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`)
-	}
-}
-
-const validLinkProtocols = new Set(['http:', 'https:', 'mailto:'])
-
-/**
- * Validates that a value is a url safe to use as a link.
- *
- * @public
- */
-export const linkUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-// N.B. asset: is a reference to the local indexedDB object store.
-const validSrcProtocols = new Set(['http:', 'https:', 'data:', 'asset:'])
-
-/**
- * Validates that a valid is a url safe to load as an asset.
- *
- * @public
- */
-export const srcUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-/**
- * Validates an http(s) url
- *
- * @public
- */
-export const httpUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!url.protocol.toLowerCase().match(/^https?:$/)) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-/**
- * Validates that a value is an IndexKey.
- * @public
- */
-export const indexKey = string.refine<IndexKey>((key) => {
-	try {
-		validateIndexKey(key)
-		return key
-	} catch {
-		throw new ValidationError(`Expected an index key, got ${JSON.stringify(key)}`)
-	}
-})
-
-/**
- * Validate a value against one of two types.
- *
- * @public
- */
-export function or<T1, T2>(v1: Validatable<T1>, v2: Validatable<T2>): Validator<T1 | T2> {
-	return new Validator((value) => {
-		try {
-			return v1.validate(value)
-		} catch {
-			return v2.validate(value)
-		}
-	})
 }