
index 7746ea03..1c1f1ac9 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmps4atfib9_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpnv4ukk5t_actual.txt	
@@ -391,7 +391,7 @@ export type UnionValidatorConfig<Key extends string, Config> = {
 export class UnionValidator<
 	Key extends string,
 	Config extends UnionValidatorConfig<Key, Config>,
-	UnknownValue = never,
+	UnknownValue = never
 > extends Validator<TypeOf<Config[keyof Config]> | UnknownValue> {
 	constructor(
 		private readonly key: Key,
@@ -578,7 +578,7 @@ export const number = typeofValidator<number>('number').check((number) => {
 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +586,7 @@ export const positiveNumber = number.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +602,7 @@ export const integer = number.check((value) => {
 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +610,7 @@ export const positiveInteger = integer.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
