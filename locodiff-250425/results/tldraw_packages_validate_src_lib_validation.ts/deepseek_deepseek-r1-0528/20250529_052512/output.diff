
index 7746ea033..b47b85f98 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmpzg72ymxm_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpjbcgn72y_actual.txt	
@@ -11,11 +11,6 @@ import {
 
 /** @public */
 export type ValidatorFn<T> = (value: unknown) => T
-/** @public */
-export type ValidatorUsingKnownGoodVersionFn<In, Out = In> = (
-	knownGoodValue: In,
-	value: unknown
-) => Out
 
 /** @public */
 export interface Validatable<T> {
@@ -371,16 +366,17 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	 * })
 	 * ```
 	 */
-	extend<Extension extends Record<string, unknown>>(extension: {
-		readonly [K in keyof Extension]: Validatable<Extension[K]>
-	}): ObjectValidator<Shape & Extension> {
+	extend<Extension extends Record<string, unknown>>(
+		extension: {
+			readonly [K in keyof Extension]: Validatable<Extension[K]>
+		}
+	): ObjectValidator<Shape & Extension> {
 		return new ObjectValidator({ ...this.config, ...extension }) as any as ObjectValidator<
 			Shape & Extension
 		>
 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
@@ -578,7 +574,7 @@ export const number = typeofValidator<number>('number').check((number) => {
 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +582,7 @@ export const positiveNumber = number.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +598,7 @@ export const integer = number.check((value) => {
 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +606,7 @@ export const positiveInteger = integer.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -679,17 +675,6 @@ export const unknownObject = new Validator<Record<string, unknown>>((value) => {
 	return value as Record<string, unknown>
 })
 
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
-
 function isPlainObject(value: unknown): value is Record<string, unknown> {
 	return (
 		typeof value === 'object' &&
@@ -1034,4 +1019,15 @@ export function or<T1, T2>(v1: Validatable<T1>, v2: Validatable<T2>): Validator<
 			return v2.validate(value)
 		}
 	})
+}
+
+/**
+ * Validate an object has a particular shape.
+ *
+ * @public
+ */
+export function object<Shape extends object>(config: {
+	readonly [K in keyof Shape]: Validatable<Shape[K]>
+}): ObjectValidator<MakeUndefinedOptional<Shape>> {
+	return new ObjectValidator(config) as any
 }
\ No newline at end of file
