
index 7746ea03..48bf5669 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmph__c37pi_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpg740mymc_actual.txt	
@@ -380,7 +380,6 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
@@ -578,7 +577,7 @@ export const number = typeofValidator<number>('number').check((number) => {
 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +585,7 @@ export const positiveNumber = number.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +601,7 @@ export const integer = number.check((value) => {
 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +609,7 @@ export const positiveInteger = integer.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -679,6 +678,16 @@ export const unknownObject = new Validator<Record<string, unknown>>((value) => {
 	return value as Record<string, unknown>
 })
 
+function isPlainObject(value: unknown): value is Record<string, unknown> {
+	return (
+		typeof value === 'object' &&
+		value !== null &&
+		(Object.getPrototypeOf(value) === Object.prototype ||
+			Object.getPrototypeOf(value) === null ||
+			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
+	)
+}
+
 /**
  * Validate an object has a particular shape.
  *
@@ -690,16 +699,6 @@ export function object<Shape extends object>(config: {
 	return new ObjectValidator(config) as any
 }
 
-function isPlainObject(value: unknown): value is Record<string, unknown> {
-	return (
-		typeof value === 'object' &&
-		value !== null &&
-		(Object.getPrototypeOf(value) === Object.prototype ||
-			Object.getPrototypeOf(value) === null ||
-			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
-	)
-}
-
 function isValidJson(value: any): value is JsonValue {
 	if (
 		value === null ||
