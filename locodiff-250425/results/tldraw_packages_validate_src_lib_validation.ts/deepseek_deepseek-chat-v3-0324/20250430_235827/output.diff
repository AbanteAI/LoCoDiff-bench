--- tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected)+++ tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual)@@ -380,7 +380,6 @@ 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
@@ -578,7 +577,7 @@ 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +585,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +601,7 @@ 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +609,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -678,17 +677,6 @@ 	}
 	return value as Record<string, unknown>
 })
-
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
 
 function isPlainObject(value: unknown): value is Record<string, unknown> {
 	return (
@@ -698,6 +686,17 @@ 			Object.getPrototypeOf(value) === null ||
 			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
 	)
+}
+
+/**
+ * Validate an object has a particular shape.
+ *
+ * @public
+ */
+export function object<Shape extends object>(config: {
+	readonly [K in keyof Shape]: Validatable<Shape[K]>
+}): ObjectValidator<MakeUndefinedOptional<Shape>> {
+	return new ObjectValidator(config) as any
 }
 
 function isValidJson(value: any): value is JsonValue {
