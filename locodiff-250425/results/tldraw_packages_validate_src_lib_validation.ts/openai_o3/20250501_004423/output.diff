--- tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected)+++ tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual)@@ -74,7 +74,7 @@ 			.split('\n')
 			.map((line, i) => (i === 0 ? line : `  ${line}`))
 			.join('\n')
-		super(path ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage)
+		super(formattedPath ? `At ${formattedPath}: ${indentedMessage}` : indentedMessage)
 	}
 }
 
@@ -534,12 +534,20 @@ }
 
 function typeofValidator<T>(type: string): Validator<T> {
-	return new Validator((value) => {
-		if (typeof value !== type) {
-			throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`)
-		}
-		return value as T
-	})
+	return new Validator(
+		(value) => {
+			if (typeof value !== type) {
+				throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`)
+			}
+			return value as T
+		},
+		(prevValue, newValue) => {
+			if (typeof newValue !== type) {
+				throw new ValidationError(`Expected ${type}, got ${typeToString(newValue)}`)
+			}
+			return Object.is(prevValue, newValue) ? prevValue : (newValue as T)
+		}
+	)
 }
 
 /**
@@ -578,7 +586,7 @@ 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +594,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +610,7 @@ 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +618,7 @@ 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -642,12 +650,15 @@  * @public
  */
 export function literal<T extends string | number | boolean>(expectedValue: T): Validator<T> {
-	return new Validator((actualValue) => {
-		if (actualValue !== expectedValue) {
-			throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`)
-		}
-		return expectedValue
-	})
+	return new Validator(
+		(actualValue) => {
+			if (actualValue !== expectedValue) {
+				throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`)
+			}
+			return expectedValue
+		},
+		(prevValue) => prevValue // if it passed once it'll always pass
+	)
 }
 
 /**
@@ -849,7 +860,7 @@ 	return new UnionValidator(
 		key,
 		config,
-		(unknownValue, unknownVariant) => {
+		(_unknownValue, unknownVariant) => {
 			throw new ValidationError(
 				`Expected one of ${Object.keys(config)
 					.map((key) => JSON.stringify(key))
@@ -889,13 +900,22 @@ 
 /** @public */
 export function setEnum<T>(values: ReadonlySet<T>): Validator<T> {
-	return new Validator((value) => {
-		if (!values.has(value as T)) {
-			const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
-			throw new ValidationError(`Expected ${valuesString}, got ${value}`)
-		}
-		return value as T
-	})
+	return new Validator(
+		(value) => {
+			if (!values.has(value as T)) {
+				const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
+				throw new ValidationError(`Expected ${valuesString}, got ${value}`)
+			}
+			return value as T
+		},
+		(prevValue, newValue) => {
+			if (!values.has(newValue as T)) {
+				const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
+				throw new ValidationError(`Expected ${valuesString}, got ${newValue}`)
+			}
+			return Object.is(prevValue, newValue) ? prevValue : (newValue as T)
+		}
+	)
 }
 
 /** @public */
