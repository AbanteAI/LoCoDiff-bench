
index 7746ea033..534acfb40 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmp9c9cey6c_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpj6d823cj_actual.txt	
@@ -1,4 +1,5 @@
 import {
+	Expand,
 	IndexKey,
 	JsonValue,
 	MakeUndefinedOptional,
@@ -132,6 +133,15 @@ export class Validator<T> implements Validatable<T> {
 		return validated
 	}
 
+	/**
+	 * This is a performance optimizing version of validate that can use a previous
+	 * version of the value to avoid revalidating every part of the new value if
+	 * any part of it has not changed since the last validation.
+	 *
+	 * If the value has not changed but is not referentially equal, the function
+	 * should return the previous value.
+	 * @returns
+	 */
 	validateUsingKnownGoodVersion(knownGoodValue: T, newValue: unknown): T {
 		if (Object.is(knownGoodValue, newValue)) {
 			return knownGoodValue as T
@@ -380,7 +390,6 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
@@ -578,7 +587,7 @@ export const number = typeofValidator<number>('number').check((number) => {
 	}
 })
 /**
- * Fails if value \< 0
+ * Fails if value < 0
  *
  * @public
  */
@@ -586,7 +595,7 @@ export const positiveNumber = number.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
 })
 /**
- * Fails if value \<= 0
+ * Fails if value <= 0
  *
  * @public
  */
@@ -602,7 +611,7 @@ export const integer = number.check((value) => {
 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
- * Fails if value \< 0 and is not an integer
+ * Fails if value < 0 and is not an integer
  *
  * @public
  */
@@ -610,7 +619,7 @@ export const positiveInteger = integer.check((value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
- * Fails if value \<= 0 and is not an integer
+ * Fails if value <= 0 and is not an integer
  *
  * @public
  */
@@ -679,17 +688,6 @@ export const unknownObject = new Validator<Record<string, unknown>>((value) => {
 	return value as Record<string, unknown>
 })
 
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
-
 function isPlainObject(value: unknown): value is Record<string, unknown> {
 	return (
 		typeof value === 'object' &&
@@ -794,6 +792,17 @@ export function jsonDict(): DictValidator<string, JsonValue> {
 	return dict(string, jsonValue)
 }
 
+/**
+ * Validate an object has a particular shape.
+ *
+ * @public
+ */
+export function object<Shape extends object>(config: {
+	readonly [K in keyof Shape]: Validatable<Shape[K]>
+}): ObjectValidator<MakeUndefinedOptional<Shape>> {
+	return new ObjectValidator(config) as any
+}
+
 /**
  * Validation that an option is a dict with particular keys and values.
  *
@@ -849,7 +858,7 @@ export function numberUnion<Key extends string, Config extends UnionValidatorCon
 	return new UnionValidator(
 		key,
 		config,
-		(unknownValue, unknownVariant) => {
+		(_unknownValue, unknownVariant) => {
 			throw new ValidationError(
 				`Expected one of ${Object.keys(config)
 					.map((key) => JSON.stringify(key))
