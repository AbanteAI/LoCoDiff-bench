
index 7746ea03..059e6187 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmpqnxpr32d_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpj_m10b1r_actual.txt	
@@ -11,11 +11,6 @@ import {
 
 /** @public */
 export type ValidatorFn<T> = (value: unknown) => T
-/** @public */
-export type ValidatorUsingKnownGoodVersionFn<In, Out = In> = (
-	knownGoodValue: In,
-	value: unknown
-) => Out
 
 /** @public */
 export interface Validatable<T> {
@@ -51,7 +46,6 @@ function formatPath(path: ReadonlyArray<number | string>): string | null {
 			formattedPath += `.${item}`
 		}
 	}
-
 	// N.B. We don't want id's in the path because they make grouping in Sentry tough.
 	formattedPath = formattedPath.replace(/id = [^,]+, /, '').replace(/id = [^)]+/, '')
 
@@ -117,7 +111,7 @@ export type TypeOf<V extends Validatable<any>> = V extends Validatable<infer T>
 export class Validator<T> implements Validatable<T> {
 	constructor(
 		readonly validationFn: ValidatorFn<T>,
-		readonly validateUsingKnownGoodVersionFn?: ValidatorUsingKnownGoodVersionFn<T>
+		readonly validateUsingKnownGoodVersionFn?: (knownGoodValue: T, value: unknown) => T
 	) {}
 
 	/**
@@ -132,19 +126,9 @@ export class Validator<T> implements Validatable<T> {
 		return validated
 	}
 
-	validateUsingKnownGoodVersion(knownGoodValue: T, newValue: unknown): T {
-		if (Object.is(knownGoodValue, newValue)) {
-			return knownGoodValue as T
-		}
-
-		if (this.validateUsingKnownGoodVersionFn) {
-			return this.validateUsingKnownGoodVersionFn(knownGoodValue, newValue)
-		}
-
-		return this.validate(newValue)
-	}
-
-	/** Checks that the passed value is of the correct type. */
+	/**
+	 * Checks that the passed value is of the correct type.
+	 */
 	isValid(value: unknown): value is T {
 		try {
 			this.validate(value)
@@ -155,16 +139,14 @@ export class Validator<T> implements Validatable<T> {
 	}
 
 	/**
-	 * Returns a new validator that also accepts null or undefined. The resulting value will always be
-	 * null.
+	 * Returns a new validator that also accepts null. The resulting value will always be null or the validated type.
 	 */
 	nullable(): Validator<T | null> {
 		return nullable(this)
 	}
 
 	/**
-	 * Returns a new validator that also accepts null or undefined. The resulting value will always be
-	 * null.
+	 * Returns a new validator that also accepts undefined. The resulting value will always be undefined or the validated type.
 	 */
 	optional(): Validator<T | undefined> {
 		return optional(this)
@@ -179,9 +161,10 @@ export class Validator<T> implements Validatable<T> {
 			(value) => {
 				return otherValidationFn(this.validate(value))
 			},
-
 			(knownGoodValue, newValue) => {
-				const validated = this.validateUsingKnownGoodVersion(knownGoodValue as any, newValue)
+				const validated = this.validateUsingKnownGoodVersion
+					? this.validateUsingKnownGoodVersion(knownGoodValue as any, newValue)
+					: this.validate(newValue)
 				if (Object.is(knownGoodValue, validated)) {
 					return knownGoodValue
 				}
@@ -197,9 +180,9 @@ export class Validator<T> implements Validatable<T> {
 	 *
 	 * ```ts
 	 * const numberLessThan10Validator = T.number.check((value) => {
-	 * 	if (value >= 10) {
-	 * 		throw new ValidationError(`Expected number less than 10, got ${value}`)
-	 * 	}
+	 *   if (value >= 10) {
+	 *     throw new ValidationError(`Expected number less than 10, got ${value}`)
+	 *   }
 	 * })
 	 * ```
 	 */
@@ -242,7 +225,6 @@ export class ArrayOfValidator<T> extends Validator<T[]> {
 						prefixError(i, () => itemValidator.validate(item))
 						continue
 					}
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(knownGoodValue[i], item)) {
 						continue
 					}
@@ -253,13 +235,12 @@ export class ArrayOfValidator<T> extends Validator<T[]> {
 						isDifferent = true
 					}
 				}
-
 				return isDifferent ? (newValue as T[]) : knownGoodValue
 			}
 		)
 	}
 
-	nonEmpty() {
+	nonEmpty(): Validator<T[]> {
 		return this.check((value) => {
 			if (value.length === 0) {
 				throw new ValidationError('Expected a non-empty array')
@@ -267,7 +248,7 @@ export class ArrayOfValidator<T> extends Validator<T[]> {
 		})
 	}
 
-	lengthGreaterThan1() {
+	lengthGreaterThan1(): Validator<T[]> {
 		return this.check((value) => {
 			if (value.length <= 1) {
 				throw new ValidationError('Expected an array with length greater than 1')
@@ -279,9 +260,7 @@ export class ArrayOfValidator<T> extends Validator<T[]> {
 /** @public */
 export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	constructor(
-		public readonly config: {
-			readonly [K in keyof Shape]: Validatable<Shape[K]>
-		},
+		public readonly config: { readonly [K in keyof Shape]: Validatable<Shape[K]> },
 		private readonly shouldAllowUnknownProperties = false
 	) {
 		super(
@@ -316,12 +295,11 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 				for (const [key, validator] of Object.entries(config)) {
 					const prev = getOwnProperty(knownGoodValue, key)
 					const next = getOwnProperty(newValue, key)
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(prev, next)) {
 						continue
 					}
+					const validatable = validator as Validatable<unknown>
 					const checked = prefixError(key, () => {
-						const validatable = validator as Validatable<unknown>
 						if (validatable.validateUsingKnownGoodVersion) {
 							return validatable.validateUsingKnownGoodVersion(prev, next)
 						} else {
@@ -353,24 +331,10 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 		)
 	}
 
-	allowUnknownProperties() {
+	allowUnknownProperties(): ObjectValidator<Shape> {
 		return new ObjectValidator(this.config, true)
 	}
 
-	/**
-	 * Extend an object validator by adding additional properties.
-	 *
-	 * @example
-	 *
-	 * ```ts
-	 * const animalValidator = T.object({
-	 * 	name: T.string,
-	 * })
-	 * const catValidator = animalValidator.extend({
-	 * 	meowVolume: T.number,
-	 * })
-	 * ```
-	 */
 	extend<Extension extends Record<string, unknown>>(extension: {
 		readonly [K in keyof Extension]: Validatable<Extension[K]>
 	}): ObjectValidator<Shape & Extension> {
@@ -380,13 +344,13 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	}
 }
 
-// pass this into itself e.g. Config extends UnionObjectSchemaConfig<Key, Config>
 /** @public */
 export type UnionValidatorConfig<Key extends string, Config> = {
 	readonly [Variant in keyof Config]: Validatable<any> & {
 		validate(input: any): { readonly [K in Key]: Variant }
 	}
 }
+
 /** @public */
 export class UnionValidator<
 	Key extends string,
@@ -420,7 +384,6 @@ export class UnionValidator<
 				}
 
 				if (getOwnProperty(prevValue, key) !== getOwnProperty(newValue, key)) {
-					// the type has changed so bail out and do a regular validation
 					return prefixError(`(${key} = ${variant})`, () => matchingSchema.validate(newValue))
 				}
 
@@ -465,6 +428,46 @@ export class UnionValidator<
 	}
 }
 
+/** @public */
+export function union<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
+	key: Key,
+	config: Config
+): UnionValidator<Key, Config> {
+	return new UnionValidator(
+		key,
+		config,
+		(_unknownValue, unknownVariant) => {
+			throw new ValidationError(
+				`Expected one of ${Object.keys(config)
+					.map((k) => JSON.stringify(k))
+					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
+				[key]
+			)
+		},
+		false
+	)
+}
+
+/** @internal */
+export function numberUnion<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
+	key: Key,
+	config: Config
+): UnionValidator<Key, Config> {
+	return new UnionValidator(
+		key,
+		config,
+		(_unknownValue, unknownVariant) => {
+			throw new ValidationError(
+				`Expected one of ${Object.keys(config)
+					.map((k) => JSON.stringify(k))
+					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
+				[key]
+			)
+		},
+		true
+	)
+}
+
 /** @public */
 export class DictValidator<Key extends string, Value> extends Validator<Record<Key, Value>> {
 	constructor(
@@ -504,7 +507,6 @@ export class DictValidator<Key extends string, Value> extends Validator<Record<K
 					}
 					const prev = getOwnProperty(knownGoodValue, key)
 					const next = value
-					// sneaky quick check here to avoid the prefix + validator overhead
 					if (Object.is(prev, next)) {
 						continue
 					}
@@ -533,173 +535,42 @@ export class DictValidator<Key extends string, Value> extends Validator<Record<K
 	}
 }
 
-function typeofValidator<T>(type: string): Validator<T> {
-	return new Validator((value) => {
-		if (typeof value !== type) {
-			throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`)
-		}
-		return value as T
-	})
-}
-
-/**
- * Validation that accepts any value. Useful as a starting point for building your own custom
- * validations.
- *
- * @public
- */
-export const unknown = new Validator((value) => value)
-/**
- * Validation that accepts any value. Generally this should be avoided, but you can use it as an
- * escape hatch if you want to work without validations for e.g. a prototype.
- *
- * @public
- */
-export const any = new Validator((value): any => value)
-
-/**
- * Validates that a value is a string.
- *
- * @public
- */
-export const string = typeofValidator<string>('string')
-
-/**
- * Validates that a value is a finite non-NaN number.
- *
- * @public
- */
-export const number = typeofValidator<number>('number').check((number) => {
-	if (Number.isNaN(number)) {
-		throw new ValidationError('Expected a number, got NaN')
-	}
-	if (!Number.isFinite(number)) {
-		throw new ValidationError(`Expected a finite number, got ${number}`)
-	}
-})
-/**
- * Fails if value \< 0
- *
- * @public
- */
-export const positiveNumber = number.check((value) => {
-	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
-})
-/**
- * Fails if value \<= 0
- *
- * @public
- */
-export const nonZeroNumber = number.check((value) => {
-	if (value <= 0) throw new ValidationError(`Expected a non-zero positive number, got ${value}`)
-})
-/**
- * Fails if number is not an integer
- *
- * @public
- */
-export const integer = number.check((value) => {
-	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
-})
-/**
- * Fails if value \< 0 and is not an integer
- *
- * @public
- */
-export const positiveInteger = integer.check((value) => {
-	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
-})
-/**
- * Fails if value \<= 0 and is not an integer
- *
- * @public
- */
-export const nonZeroInteger = integer.check((value) => {
-	if (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`)
-})
-
 /**
- * Validates that a value is boolean.
- *
- * @public
- */
-export const boolean = typeofValidator<boolean>('boolean')
-/**
- * Validates that a value is a bigint.
- *
- * @public
- */
-export const bigint = typeofValidator<bigint>('bigint')
-/**
- * Validates that a value matches another that was passed in.
- *
- * @example
- *
- * ```ts
- * const trueValidator = T.literal(true)
- * ```
+ * Validate an object has a particular shape.
  *
  * @public
  */
-export function literal<T extends string | number | boolean>(expectedValue: T): Validator<T> {
-	return new Validator((actualValue) => {
-		if (actualValue !== expectedValue) {
-			throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`)
-		}
-		return expectedValue
-	})
+export function object<Shape extends object>(
+	config: { readonly [K in keyof Shape]: Validatable<Shape[K]> }
+): ObjectValidator<MakeUndefinedOptional<Shape>> {
+	return new ObjectValidator(config) as any
 }
 
-/**
- * Validates that a value is an array. To check the contents of the array, use T.arrayOf.
- *
- * @public
- */
-export const array = new Validator<unknown[]>((value) => {
-	if (!Array.isArray(value)) {
-		throw new ValidationError(`Expected an array, got ${typeToString(value)}`)
-	}
-	return value
-})
+function isPlainObject(value: unknown): value is Record<string, unknown> {
+	return (
+		typeof value === 'object' &&
+		value !== null &&
+		(Object.getPrototypeOf(value) === Object.prototype ||
+			Object.getPrototypeOf(value) === null ||
+			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
+	)
+}
 
 /**
- * Validates that a value is an array whose contents matches the passed-in validator.
- *
  * @public
  */
-export function arrayOf<T>(itemValidator: Validatable<T>): ArrayOfValidator<T> {
-	return new ArrayOfValidator(itemValidator)
-}
-
-/** @public */
 export const unknownObject = new Validator<Record<string, unknown>>((value) => {
-	if (typeof value !== 'object' || value === null) {
+	if (!isPlainObject(value)) {
 		throw new ValidationError(`Expected object, got ${typeToString(value)}`)
 	}
 	return value as Record<string, unknown>
 })
 
 /**
- * Validate an object has a particular shape.
+ * Validate that a value is valid JSON.
  *
  * @public
  */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
-
-function isPlainObject(value: unknown): value is Record<string, unknown> {
-	return (
-		typeof value === 'object' &&
-		value !== null &&
-		(Object.getPrototypeOf(value) === Object.prototype ||
-			Object.getPrototypeOf(value) === null ||
-			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
-	)
-}
-
 function isValidJson(value: any): value is JsonValue {
 	if (
 		value === null ||
@@ -721,17 +592,12 @@ function isValidJson(value: any): value is JsonValue {
 	return false
 }
 
-/**
- * Validate that a value is valid JSON.
- *
- * @public
- */
+/** @public */
 export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
 	(value): JsonValue => {
 		if (isValidJson(value)) {
 			return value as JsonValue
 		}
-
 		throw new ValidationError(`Expected json serializable value, got ${typeof value}`)
 	},
 	(knownGoodValue, newValue) => {
@@ -786,7 +652,7 @@ export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
 )
 
 /**
- * Validate an object has a particular shape.
+ * Validate an object has a particular shape and keys of type string to JsonValue.
  *
  * @public
  */
@@ -794,73 +660,6 @@ export function jsonDict(): DictValidator<string, JsonValue> {
 	return dict(string, jsonValue)
 }
 
-/**
- * Validation that an option is a dict with particular keys and values.
- *
- * @public
- */
-export function dict<Key extends string, Value>(
-	keyValidator: Validatable<Key>,
-	valueValidator: Validatable<Value>
-): DictValidator<Key, Value> {
-	return new DictValidator(keyValidator, valueValidator)
-}
-
-/**
- * Validate a union of several object types. Each object must have a property matching `key` which
- * should be a unique string.
- *
- * @example
- *
- * ```ts
- * const catValidator = T.object({ kind: T.literal('cat'), meow: T.boolean })
- * const dogValidator = T.object({ kind: T.literal('dog'), bark: T.boolean })
- * const animalValidator = T.union('kind', { cat: catValidator, dog: dogValidator })
- * ```
- *
- * @public
- */
-export function union<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
-	key: Key,
-	config: Config
-): UnionValidator<Key, Config> {
-	return new UnionValidator(
-		key,
-		config,
-		(_unknownValue, unknownVariant) => {
-			throw new ValidationError(
-				`Expected one of ${Object.keys(config)
-					.map((key) => JSON.stringify(key))
-					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
-				[key]
-			)
-		},
-		false
-	)
-}
-
-/**
- * @internal
- */
-export function numberUnion<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
-	key: Key,
-	config: Config
-): UnionValidator<Key, Config> {
-	return new UnionValidator(
-		key,
-		config,
-		(unknownValue, unknownVariant) => {
-			throw new ValidationError(
-				`Expected one of ${Object.keys(config)
-					.map((key) => JSON.stringify(key))
-					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
-				[key]
-			)
-		},
-		true
-	)
-}
-
 /**
  * A named object with an ID. Errors will be reported as being part of the object with the given
  * name.
@@ -891,7 +690,7 @@ export function model<T extends { readonly id: string }>(
 export function setEnum<T>(values: ReadonlySet<T>): Validator<T> {
 	return new Validator((value) => {
 		if (!values.has(value as T)) {
-			const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
+			const valuesString = Array.from(values, (v) => JSON.stringify(v)).join(' or ')
 			throw new ValidationError(`Expected ${valuesString}, got ${value}`)
 		}
 		return value as T
@@ -940,7 +739,138 @@ export function literalEnum<const Values extends readonly unknown[]>(
 	return setEnum(new Set(values))
 }
 
-function parseUrl(str: string) {
+/** @public */
+export const unknown = new Validator((value) => value)
+/** @public */
+export const any = new Validator((value): any => value)
+
+/**
+ * Validates that a value is a string.
+ *
+ * @public
+ */
+export const string = typeofValidator<string>('string')
+
+/**
+ * Validates that a value is a finite non-NaN number.
+ *
+ * @public
+ */
+export const number = typeofValidator<number>('number').check((n) => {
+	if (Number.isNaN(n)) {
+		throw new ValidationError('Expected a number, got NaN')
+	}
+	if (!Number.isFinite(n)) {
+		throw new ValidationError(`Expected a finite number, got ${n}`)
+	}
+})
+
+/**
+ * Fails if value < 0
+ *
+ * @public
+ */
+export const positiveNumber = number.check((value) => {
+	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
+})
+
+/**
+ * Fails if value <= 0
+ *
+ * @public
+ */
+export const nonZeroNumber = number.check((value) => {
+	if (value <= 0) throw new ValidationError(`Expected a non-zero positive number, got ${value}`)
+})
+
+/**
+ * Fails if number is not an integer
+ *
+ * @public
+ */
+export const integer = number.check((value) => {
+	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
+})
+
+/**
+ * Fails if value < 0 and is not an integer
+ *
+ * @public
+ */
+export const positiveInteger = integer.check((value) => {
+	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
+})
+
+/**
+ * Fails if value <= 0 and is not an integer
+ *
+ * @public
+ */
+export const nonZeroInteger = integer.check((value) => {
+	if (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`)
+})
+
+/**
+ * Validates that a value is boolean.
+ *
+ * @public
+ */
+export const boolean = typeofValidator<boolean>('boolean')
+
+/**
+ * Validates that a value is a bigint.
+ *
+ * @public
+ */
+export const bigint = typeofValidator<bigint>('bigint')
+
+/**
+ * Validates that a value matches another that was passed in.
+ *
+ * @example
+ *
+ * ```ts
+ * const trueValidator = T.literal(true)
+ * ```
+ *
+ * @public
+ */
+export function literal<T extends string | number | boolean>(expectedValue: T): Validator<T> {
+	return new Validator((actualValue) => {
+		if (actualValue !== expectedValue) {
+			throw new ValidationError(`Expected ${expectedValue}, got ${JSON.stringify(actualValue)}`)
+		}
+		return expectedValue
+	})
+}
+
+/**
+ * Validates that a value is an array. To check the contents of the array, use T.arrayOf.
+ *
+ * @public
+ */
+export const array = new Validator<unknown[]>((value) => {
+	if (!Array.isArray(value)) {
+		throw new ValidationError(`Expected an array, got ${typeToString(value)}`)
+	}
+	return value
+})
+
+/**
+ * Validates that a value is an array whose contents matches the passed-in validator.
+ *
+ * @public
+ */
+export function arrayOf<T>(itemValidator: Validatable<T>): ArrayOfValidator<T> {
+	return new ArrayOfValidator(itemValidator)
+}
+
+/**
+ * Validates that a value is valid for use as a link (http, https, mailto).
+ *
+ * @public
+ */
+function parseUrl(str: string): URL {
 	try {
 		return new URL(str)
 	} catch {
@@ -955,8 +885,6 @@ function parseUrl(str: string) {
 	}
 }
 
-const validLinkProtocols = new Set(['http:', 'https:', 'mailto:'])
-
 /**
  * Validates that a value is a url safe to use as a link.
  *
@@ -965,17 +893,13 @@ const validLinkProtocols = new Set(['http:', 'https:', 'mailto:'])
 export const linkUrl = string.check((value) => {
 	if (value === '') return
 	const url = parseUrl(value)
-
-	if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
+	if (!new Set(['http:', 'https:', 'mailto:']).has(url.protocol.toLowerCase())) {
 		throw new ValidationError(
 			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
 		)
 	}
 })
 
-// N.B. asset: is a reference to the local indexedDB object store.
-const validSrcProtocols = new Set(['http:', 'https:', 'data:', 'asset:'])
-
 /**
  * Validates that a valid is a url safe to load as an asset.
  *
@@ -984,8 +908,7 @@ const validSrcProtocols = new Set(['http:', 'https:', 'data:', 'asset:'])
 export const srcUrl = string.check((value) => {
 	if (value === '') return
 	const url = parseUrl(value)
-
-	if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
+	if (!new Set(['http:', 'https:', 'data:', 'asset:']).has(url.protocol.toLowerCase())) {
 		throw new ValidationError(
 			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
 		)
@@ -1000,7 +923,6 @@ export const srcUrl = string.check((value) => {
 export const httpUrl = string.check((value) => {
 	if (value === '') return
 	const url = parseUrl(value)
-
 	if (!url.protocol.toLowerCase().match(/^https?:$/)) {
 		throw new ValidationError(
 			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
@@ -1034,4 +956,14 @@ export function or<T1, T2>(v1: Validatable<T1>, v2: Validatable<T2>): Validator<
 			return v2.validate(value)
 		}
 	})
+}
+
+// Helper for typeofValidator
+function typeofValidator<T>(type: string): Validator<T> {
+	return new Validator((value) => {
+		if (typeof value !== type) {
+			throw new ValidationError(`Expected ${type}, got ${typeToString(value)}`)
+		}
+		return value as T
+	})
 }
\ No newline at end of file
