
index 7746ea033..4ddc318cf 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmp5_hoo77r_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmpe582_i8k_actual.txt	
@@ -816,222 +816,4 @@ export function dict<Key extends string, Value>(
  * const catValidator = T.object({ kind: T.literal('cat'), meow: T.boolean })
  * const dogValidator = T.object({ kind: T.literal('dog'), bark: T.boolean })
  * const animalValidator = T.union('kind', { cat: catValidator, dog: dogValidator })
- * ```
- *
- * @public
- */
-export function union<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
-	key: Key,
-	config: Config
-): UnionValidator<Key, Config> {
-	return new UnionValidator(
-		key,
-		config,
-		(_unknownValue, unknownVariant) => {
-			throw new ValidationError(
-				`Expected one of ${Object.keys(config)
-					.map((key) => JSON.stringify(key))
-					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
-				[key]
-			)
-		},
-		false
-	)
-}
-
-/**
- * @internal
- */
-export function numberUnion<Key extends string, Config extends UnionValidatorConfig<Key, Config>>(
-	key: Key,
-	config: Config
-): UnionValidator<Key, Config> {
-	return new UnionValidator(
-		key,
-		config,
-		(unknownValue, unknownVariant) => {
-			throw new ValidationError(
-				`Expected one of ${Object.keys(config)
-					.map((key) => JSON.stringify(key))
-					.join(' or ')}, got ${JSON.stringify(unknownVariant)}`,
-				[key]
-			)
-		},
-		true
-	)
-}
-
-/**
- * A named object with an ID. Errors will be reported as being part of the object with the given
- * name.
- *
- * @public
- */
-export function model<T extends { readonly id: string }>(
-	name: string,
-	validator: Validatable<T>
-): Validator<T> {
-	return new Validator(
-		(value) => {
-			return prefixError(name, () => validator.validate(value))
-		},
-		(prevValue, newValue) => {
-			return prefixError(name, () => {
-				if (validator.validateUsingKnownGoodVersion) {
-					return validator.validateUsingKnownGoodVersion(prevValue, newValue)
-				} else {
-					return validator.validate(newValue)
-				}
-			})
-		}
-	)
-}
-
-/** @public */
-export function setEnum<T>(values: ReadonlySet<T>): Validator<T> {
-	return new Validator((value) => {
-		if (!values.has(value as T)) {
-			const valuesString = Array.from(values, (value) => JSON.stringify(value)).join(' or ')
-			throw new ValidationError(`Expected ${valuesString}, got ${value}`)
-		}
-		return value as T
-	})
-}
-
-/** @public */
-export function optional<T>(validator: Validatable<T>): Validator<T | undefined> {
-	return new Validator(
-		(value) => {
-			if (value === undefined) return undefined
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (knownGoodValue === undefined && newValue === undefined) return undefined
-			if (newValue === undefined) return undefined
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== undefined) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
-}
-
-/** @public */
-export function nullable<T>(validator: Validatable<T>): Validator<T | null> {
-	return new Validator(
-		(value) => {
-			if (value === null) return null
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (newValue === null) return null
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
-}
-
-/** @public */
-export function literalEnum<const Values extends readonly unknown[]>(
-	...values: Values
-): Validator<Values[number]> {
-	return setEnum(new Set(values))
-}
-
-function parseUrl(str: string) {
-	try {
-		return new URL(str)
-	} catch {
-		if (str.startsWith('/') || str.startsWith('./')) {
-			try {
-				return new URL(str, 'http://example.com')
-			} catch {
-				throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`)
-			}
-		}
-		throw new ValidationError(`Expected a valid url, got ${JSON.stringify(str)}`)
-	}
-}
-
-const validLinkProtocols = new Set(['http:', 'https:', 'mailto:'])
-
-/**
- * Validates that a value is a url safe to use as a link.
- *
- * @public
- */
-export const linkUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!validLinkProtocols.has(url.protocol.toLowerCase())) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-// N.B. asset: is a reference to the local indexedDB object store.
-const validSrcProtocols = new Set(['http:', 'https:', 'data:', 'asset:'])
-
-/**
- * Validates that a valid is a url safe to load as an asset.
- *
- * @public
- */
-export const srcUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!validSrcProtocols.has(url.protocol.toLowerCase())) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-/**
- * Validates an http(s) url
- *
- * @public
- */
-export const httpUrl = string.check((value) => {
-	if (value === '') return
-	const url = parseUrl(value)
-
-	if (!url.protocol.toLowerCase().match(/^https?:$/)) {
-		throw new ValidationError(
-			`Expected a valid url, got ${JSON.stringify(value)} (invalid protocol)`
-		)
-	}
-})
-
-/**
- * Validates that a value is an IndexKey.
- * @public
- */
-export const indexKey = string.refine<IndexKey>((key) => {
-	try {
-		validateIndexKey(key)
-		return key
-	} catch {
-		throw new ValidationError(`Expected an index key, got ${JSON.stringify(key)}`)
-	}
-})
-
-/**
- * Validate a value against one of two types.
- *
- * @public
- */
-export function or<T1, T2>(v1: Validatable<T1>, v2: Validatable<T2>): Validator<T1 | T2> {
-	return new Validator((value) => {
-		try {
-			return v1.validate(value)
-		} catch {
-			return v2.validate(value)
-		}
-	})
-}
\ No newline at end of file
+ *
\ No newline at end of file
