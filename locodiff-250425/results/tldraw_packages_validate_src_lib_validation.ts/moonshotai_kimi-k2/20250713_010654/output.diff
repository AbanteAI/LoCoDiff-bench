
index 7746ea033..1072c51a3 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmpnzdu0azy_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmp_9_3al32_actual.txt	
@@ -690,110 +690,6 @@ export function object<Shape extends object>(config: {
 	return new ObjectValidator(config) as any
 }
 
-function isPlainObject(value: unknown): value is Record<string, unknown> {
-	return (
-		typeof value === 'object' &&
-		value !== null &&
-		(Object.getPrototypeOf(value) === Object.prototype ||
-			Object.getPrototypeOf(value) === null ||
-			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
-	)
-}
-
-function isValidJson(value: any): value is JsonValue {
-	if (
-		value === null ||
-		typeof value === 'number' ||
-		typeof value === 'string' ||
-		typeof value === 'boolean'
-	) {
-		return true
-	}
-
-	if (Array.isArray(value)) {
-		return value.every(isValidJson)
-	}
-
-	if (isPlainObject(value)) {
-		return Object.values(value).every(isValidJson)
-	}
-
-	return false
-}
-
-/**
- * Validate that a value is valid JSON.
- *
- * @public
- */
-export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
-	(value): JsonValue => {
-		if (isValidJson(value)) {
-			return value as JsonValue
-		}
-
-		throw new ValidationError(`Expected json serializable value, got ${typeof value}`)
-	},
-	(knownGoodValue, newValue) => {
-		if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
-			let isDifferent = knownGoodValue.length !== newValue.length
-			for (let i = 0; i < newValue.length; i++) {
-				if (i >= knownGoodValue.length) {
-					isDifferent = true
-					jsonValue.validate(newValue[i])
-					continue
-				}
-				const prev = knownGoodValue[i]
-				const next = newValue[i]
-				if (Object.is(prev, next)) {
-					continue
-				}
-				const checked = jsonValue.validateUsingKnownGoodVersion!(prev, next)
-				if (!Object.is(checked, prev)) {
-					isDifferent = true
-				}
-			}
-			return isDifferent ? (newValue as JsonValue) : knownGoodValue
-		} else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
-			let isDifferent = false
-			for (const key of Object.keys(newValue)) {
-				if (!hasOwnProperty(knownGoodValue, key)) {
-					isDifferent = true
-					jsonValue.validate(newValue[key])
-					continue
-				}
-				const prev = knownGoodValue[key]
-				const next = newValue[key]
-				if (Object.is(prev, next)) {
-					continue
-				}
-				const checked = jsonValue.validateUsingKnownGoodVersion!(prev!, next)
-				if (!Object.is(checked, prev)) {
-					isDifferent = true
-				}
-			}
-			for (const key of Object.keys(knownGoodValue)) {
-				if (!hasOwnProperty(newValue, key)) {
-					isDifferent = true
-					break
-				}
-			}
-			return isDifferent ? (newValue as JsonValue) : knownGoodValue
-		} else {
-			return jsonValue.validate(newValue)
-		}
-	}
-)
-
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function jsonDict(): DictValidator<string, JsonValue> {
-	return dict(string, jsonValue)
-}
-
 /**
  * Validation that an option is a dict with particular keys and values.
  *
@@ -849,7 +745,7 @@ export function numberUnion<Key extends string, Config extends UnionValidatorCon
 	return new UnionValidator(
 		key,
 		config,
-		(unknownValue, unknownVariant) => {
+		(_unknownValue, unknownVariant) => {
 			throw new ValidationError(
 				`Expected one of ${Object.keys(config)
 					.map((key) => JSON.stringify(key))
@@ -898,48 +794,6 @@ export function setEnum<T>(values: ReadonlySet<T>): Validator<T> {
 	})
 }
 
-/** @public */
-export function optional<T>(validator: Validatable<T>): Validator<T | undefined> {
-	return new Validator(
-		(value) => {
-			if (value === undefined) return undefined
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (knownGoodValue === undefined && newValue === undefined) return undefined
-			if (newValue === undefined) return undefined
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== undefined) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
-}
-
-/** @public */
-export function nullable<T>(validator: Validatable<T>): Validator<T | null> {
-	return new Validator(
-		(value) => {
-			if (value === null) return null
-			return validator.validate(value)
-		},
-		(knownGoodValue, newValue) => {
-			if (newValue === null) return null
-			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
-				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
-			}
-			return validator.validate(newValue)
-		}
-	)
-}
-
-/** @public */
-export function literalEnum<const Values extends readonly unknown[]>(
-	...values: Values
-): Validator<Values[number]> {
-	return setEnum(new Set(values))
-}
-
 function parseUrl(str: string) {
 	try {
 		return new URL(str)
@@ -1008,6 +862,157 @@ export const httpUrl = string.check((value) => {
 	}
 })
 
+function isPlainObject(value: unknown): value is Record<string, unknown> {
+	return (
+		typeof value === 'object' &&
+		value !== null &&
+		(Object.getPrototypeOf(value) === Object.prototype ||
+			Object.getPrototypeOf(value) === null ||
+			Object.getPrototypeOf(value) === STRUCTURED_CLONE_OBJECT_PROTOTYPE)
+	)
+}
+
+function isValidJson(value: any): value is JsonValue {
+	if (
+		value === null ||
+		typeof value === 'number' ||
+		typeof value === 'string' ||
+		typeof value === 'boolean'
+	) {
+		return true
+	}
+
+	if (Array.isArray(value)) {
+		return value.every(isValidJson)
+	}
+
+	if (isPlainObject(value)) {
+		return Object.values(value).every(isValidJson)
+	}
+
+	return false
+}
+
+/**
+ * Validate that a value is valid JSON.
+ *
+ * @public */
+export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
+	(value): JsonValue => {
+		if (isValidJson(value)) {
+			return value as JsonValue
+		}
+
+		throw new ValidationError(`Expected json serializable value, got ${typeof value}`)
+	},
+	(knownGoodValue, newValue) => {
+		if (Array.isArray(knownGoodValue) && Array.isArray(newValue)) {
+			let isDifferent = knownGoodValue.length !== newValue.length
+			for (let i = 0; i < newValue.length; i++) {
+				if (i >= knownGoodValue.length) {
+					isDifferent = true
+					jsonValue.validate(newValue[i])
+					continue
+				}
+				const prev = knownGoodValue[i]
+				const next = newValue[i]
+				if (Object.is(prev, next)) {
+					continue
+				}
+				const checked = jsonValue.validateUsingKnownGoodVersion!(prev, next)
+				if (!Object.is(checked, prev)) {
+					isDifferent = true
+				}
+			}
+			return isDifferent ? (newValue as JsonValue) : knownGoodValue
+		} else if (isPlainObject(knownGoodValue) && isPlainObject(newValue)) {
+			let isDifferent = false
+			for (const key of Object.keys(newValue)) {
+				if (!hasOwnProperty(knownGoodValue, key)) {
+					isDifferent = true
+					jsonValue.validate(newValue[key])
+					continue
+				}
+				const prev = knownGoodValue[key]
+				const next = newValue[key]
+				if (Object.is(prev, next)) {
+					continue
+				}
+				const checked = jsonValue.validateUsingKnownGoodVersion!(prev!, next)
+				if (!Object.is(checked, prev)) {
+					isDifferent = true
+				}
+			}
+			for (const key of Object.keys(knownGoodValue)) {
+				if (!hasOwnProperty(newValue, key)) {
+					isDifferent = true
+					break
+				}
+			}
+			return isDifferent ? (newValue as JsonValue) : knownGoodValue
+		} else {
+			return jsonValue.validate(newValue)
+		}
+	}
+)
+
+/**
+ * Validate an object has a particular shape.
+ *
+ * @public
+ */
+export function jsonDict(): DictValidator<string, JsonValue> {
+	return dict(string, jsonValue)
+}
+
+/** @public */
+export function optional<T>(validator: Validatable<T>): Validator<T | undefined> {
+	return new Validator(
+		(value) => {
+			if (value === undefined) return undefined
+			return validator.validate(value)
+		},
+		(knownGoodValue, newValue) => {
+			if (knownGoodValue === undefined && newValue === undefined) return undefined
+			if (newValue === undefined) return undefined
+			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== undefined) {
+				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
+			}
+			return validator.validate(newValue)
+		}
+	)
+}
+
+/** @public */
+export function nullable<T>(validator: Validatable<T>): Validator<T | null> {
+	return new Validator(
+		(value) => {
+			if (value === null) return null
+			return validator.validate(value)
+		},
+		(knownGoodValue, newValue) => {
+			if (newValue === null) return null
+			if (validator.validateUsingKnownGoodVersion && knownGoodValue !== null) {
+				return validator.validateUsingKnownGoodVersion(knownGoodValue as T, newValue)
+			}
+			return validator.validate(newValue)
+		}
+	)
+}
+
+/** @public */
+export function literalEnum<const Values extends readonly unknown[]>(
+	...values: Values
+): Validator<Values[number]> {
+	return setEnum(new Set(values))
+}
+
+const LAZY = Symbol('lazy')
+
+type LazyValidator<T> = Validatable<T> & {
+	[typeof LAZY]: () => Validatable<T>
+}
+
 /**
  * Validates that a value is an IndexKey.
  * @public
