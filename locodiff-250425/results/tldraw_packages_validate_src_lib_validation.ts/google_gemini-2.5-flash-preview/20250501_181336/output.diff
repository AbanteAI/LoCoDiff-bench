
index 7746ea03..910c29f7 100644
--- a/tldraw_packages_validate_src_lib_validation.ts_expectedoutput.txt (expected):tmp/tmp95mk303q_expected.txt	
+++ b/tldraw_packages_validate_src_lib_validation.ts_extracted.txt (actual):tmp/tmp4a_sqxv9_actual.txt	
@@ -53,7 +53,7 @@ function formatPath(path: ReadonlyArray<number | string>): string | null {
 	}
 
 	// N.B. We don't want id's in the path because they make grouping in Sentry tough.
-	formattedPath = formattedPath.replace(/id = [^,]+, /, '').replace(/id = [^)]+/, '')
+	formattedPath = formattedPath.replace(/id = [^,)]+(?:, )?/, '')
 
 	if (formattedPath.startsWith('.')) {
 		return formattedPath.slice(1)
@@ -183,7 +183,7 @@ export class Validator<T> implements Validatable<T> {
 			(knownGoodValue, newValue) => {
 				const validated = this.validateUsingKnownGoodVersion(knownGoodValue as any, newValue)
 				if (Object.is(knownGoodValue, validated)) {
-					return knownGoodValue
+					return knownGoodValue as any
 				}
 				return otherValidationFn(validated)
 			}
@@ -196,7 +196,7 @@ export class Validator<T> implements Validatable<T> {
 	 * @example
 	 *
 	 * ```ts
-	 * const numberLessThan10Validator = T.number.check((value) => {
+	 * const numberLessThan10Validator = T.number.check('less than 10', (value) => {
 	 * 	if (value >= 10) {
 	 * 		throw new ValidationError(`Expected number less than 10, got ${value}`)
 	 * 	}
@@ -259,16 +259,16 @@ export class ArrayOfValidator<T> extends Validator<T[]> {
 		)
 	}
 
-	nonEmpty() {
-		return this.check((value) => {
+	nonEmpty(): Validator<T[]> {
+		return this.check('non-empty', (value) => {
 			if (value.length === 0) {
 				throw new ValidationError('Expected a non-empty array')
 			}
 		})
 	}
 
-	lengthGreaterThan1() {
-		return this.check((value) => {
+	lengthGreaterThan1(): Validator<T[]> {
+		return this.check('length greater than 1', (value) => {
 			if (value.length <= 1) {
 				throw new ValidationError('Expected an array with length greater than 1')
 			}
@@ -353,8 +353,8 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 		)
 	}
 
-	allowUnknownProperties() {
-		return new ObjectValidator(this.config, true)
+	allowUnknownProperties(): ObjectValidator<Shape> {
+		return new ObjectValidator(this.config, true) as any
 	}
 
 	/**
@@ -373,10 +373,8 @@ export class ObjectValidator<Shape extends object> extends Validator<Shape> {
 	 */
 	extend<Extension extends Record<string, unknown>>(extension: {
 		readonly [K in keyof Extension]: Validatable<Extension[K]>
-	}): ObjectValidator<Shape & Extension> {
-		return new ObjectValidator({ ...this.config, ...extension }) as any as ObjectValidator<
-			Shape & Extension
-		>
+	}): ObjectValidator<MakeUndefinedOptional<Shape & Extension>> {
+		return new ObjectValidator({ ...this.config, ...extension }) as any
 	}
 }
 
@@ -569,7 +567,7 @@ export const string = typeofValidator<string>('string')
  *
  * @public
  */
-export const number = typeofValidator<number>('number').check((number) => {
+export const number = typeofValidator<number>('number').check('a finite number', (number) => {
 	if (Number.isNaN(number)) {
 		throw new ValidationError('Expected a number, got NaN')
 	}
@@ -582,15 +580,18 @@ export const number = typeofValidator<number>('number').check((number) => {
  *
  * @public
  */
-export const positiveNumber = number.check((value) => {
-	if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
-})
+export const positiveNumber: Validator<number> = number.check(
+	'a positive number',
+	(value) => {
+		if (value < 0) throw new ValidationError(`Expected a positive number, got ${value}`)
+	}
+)
 /**
  * Fails if value \<= 0
  *
  * @public
  */
-export const nonZeroNumber = number.check((value) => {
+export const nonZeroNumber: Validator<number> = number.check('a non-zero number', (value) => {
 	if (value <= 0) throw new ValidationError(`Expected a non-zero positive number, got ${value}`)
 })
 /**
@@ -598,7 +599,7 @@ export const nonZeroNumber = number.check((value) => {
  *
  * @public
  */
-export const integer = number.check((value) => {
+export const integer: Validator<number> = number.check('an integer', (value) => {
 	if (!Number.isInteger(value)) throw new ValidationError(`Expected an integer, got ${value}`)
 })
 /**
@@ -606,7 +607,7 @@ export const integer = number.check((value) => {
  *
  * @public
  */
-export const positiveInteger = integer.check((value) => {
+export const positiveInteger: Validator<number> = integer.check('a positive integer', (value) => {
 	if (value < 0) throw new ValidationError(`Expected a positive integer, got ${value}`)
 })
 /**
@@ -614,9 +615,12 @@ export const positiveInteger = integer.check((value) => {
  *
  * @public
  */
-export const nonZeroInteger = integer.check((value) => {
-	if (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`)
-})
+export const nonZeroInteger: Validator<number> = integer.check(
+	'a non-zero integer',
+	(value) => {
+		if (value <= 0) throw new ValidationError(`Expected a non-zero positive integer, got ${value}`)
+	}
+)
 
 /**
  * Validates that a value is boolean.
@@ -679,17 +683,6 @@ export const unknownObject = new Validator<Record<string, unknown>>((value) => {
 	return value as Record<string, unknown>
 })
 
-/**
- * Validate an object has a particular shape.
- *
- * @public
- */
-export function object<Shape extends object>(config: {
-	readonly [K in keyof Shape]: Validatable<Shape[K]>
-}): ObjectValidator<MakeUndefinedOptional<Shape>> {
-	return new ObjectValidator(config) as any
-}
-
 function isPlainObject(value: unknown): value is Record<string, unknown> {
 	return (
 		typeof value === 'object' &&
@@ -790,8 +783,10 @@ export const jsonValue: Validator<JsonValue> = new Validator<JsonValue>(
  *
  * @public
  */
-export function jsonDict(): DictValidator<string, JsonValue> {
-	return dict(string, jsonValue)
+export function object<Shape extends object>(config: {
+	readonly [K in keyof Shape]: Validatable<Shape[K]>
+}): ObjectValidator<MakeUndefinedOptional<Shape>> {
+	return new ObjectValidator(config) as any
 }
 
 /**
@@ -849,7 +844,7 @@ export function numberUnion<Key extends string, Config extends UnionValidatorCon
 	return new UnionValidator(
 		key,
 		config,
-		(unknownValue, unknownVariant) => {
+		(_unknownValue, unknownVariant) => {
 			throw new ValidationError(
 				`Expected one of ${Object.keys(config)
 					.map((key) => JSON.stringify(key))
@@ -962,7 +957,7 @@ const validLinkProtocols = new Set(['http:', 'https:', 'mailto:'])
  *
  * @public
  */
-export const linkUrl = string.check((value) => {
+export const linkUrl = string.check('a valid link url', (value) => {
 	if (value === '') return
 	const url = parseUrl(value)
 
@@ -981,7 +976,7 @@ const validSrcProtocols = new Set(['http:', 'https:', 'data:', 'asset:'])
  *
  * @public
  */
-export const srcUrl = string.check((value) => {
+export const srcUrl = string.check('a valid src url', (value) => {
 	if (value === '') return
 	const url = parseUrl(value)
 
@@ -997,7 +992,7 @@ export const srcUrl = string.check((value) => {
  *
  * @public
  */
-export const httpUrl = string.check((value) => {
+export const httpUrl = string.check('a valid http url', (value) => {
 	if (value === '') return
 	const url = parseUrl(value)
 
@@ -1012,7 +1007,7 @@ export const httpUrl = string.check((value) => {
  * Validates that a value is an IndexKey.
  * @public
  */
-export const indexKey = string.refine<IndexKey>((key) => {
+export const indexKey = string.refine<IndexKey>('an index key', (key) => {
 	try {
 		validateIndexKey(key)
 		return key
