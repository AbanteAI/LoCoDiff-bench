```javascript
/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
@@ -14,8 +14,6 @@ import type Agent from '../../agent';
 
 import {isReactNativeEnvironment} from 'react-devtools-shared/src/backend/utils';
 
-const OUTLINE_COLOR = '#f0f0f0';
-
 // Note these colors are in sync with DevTools Profiler chart colors.
 const COLORS = [
   '#37afa9',
@@ -34,11 +32,14 @@ let canvas: HTMLCanvasElement | null = null;
 
 function drawNative(nodeToData: Map<HostInstance, Data>, agent: Agent) {
   const nodesToDraw = [];
-  iterateNodes(nodeToData, (_, color, node) => {
+  iterateNodes(nodeToData, ({color, node}) => {
     nodesToDraw.push({node, color});
   });
 
   agent.emit('drawTraceUpdates', nodesToDraw);
+
+  const mergedNodes = groupAndSortNodes(nodeToData);
+  agent.emit('drawGroupedTraceUpdatesWithNames', mergedNodes);
 }
 
 function drawWeb(nodeToData: Map<HostInstance, Data>) {
@@ -46,15 +47,15 @@ function drawWeb(nodeToData: Map<HostInstance, Data>) {
     initialize();
   }
 
+  const dpr = window.devicePixelRatio || 1;
   const canvasFlow: HTMLCanvasElement = ((canvas: any): HTMLCanvasElement);
-  canvasFlow.width = window.innerWidth;
-  canvasFlow.height = window.innerHeight;
+  canvasFlow.width = window.innerWidth * dpr;
+  canvasFlow.height = window.innerHeight * dpr;
+  canvasFlow.style.width = `${window.innerWidth}px`;
+  canvasFlow.style.height = `${window.innerHeight}px`;
 
   const context = canvasFlow.getContext('2d');
-  context.clearRect(0, 0, canvasFlow.width, canvasFlow.height);
-  iterateNodes(nodeToData, (rect, color) => {
-    if (rect !== null) {
-      drawBorder(context, rect, color);
-    }
-  });
+  context.scale(dpr, dpr);
+
+  context.clearRect(0, 0, canvasFlow.width / dpr, canvasFlow.height / dpr);
+
+  const mergedNodes = groupAndSortNodes(nodeToData);
+
+  mergedNodes.forEach(group => {
+    drawGroupBorders(context, group);
+    drawGroupLabel(context, group);
+  });
 }
 
 type GroupItem = {
@@ -68,7 +69,7 @@
 
 export function groupAndSortNodes(
   nodeToData: Map<HostInstance, Data>,
-): Array<Array<GroupItem>> {
+): Array<Array<GroupItem>> {
   const positionGroups: Map<string, Array<GroupItem>> = new Map();
 
   iterateNodes(nodeToData, ({rect, color, displayName, count}) => {
@@ -89,12 +90,14 @@
   context: CanvasRenderingContext2D,
   group: Array<GroupItem>,
 ) {
+  context.lineWidth = 1;
   group.forEach(({color, rect}) => {
     context.beginPath();
     context.strokeStyle = color;
     context.rect(rect.left, rect.top, rect.width - 1, rect.height - 1);
     context.stroke();
   });
+  context.strokeStyle = 'transparent';
 }
 
 function drawGroupLabel(
@@ -110,7 +113,7 @@
     .join(', ');
 
   if (mergedName) {
-    drawLabel(context, group[0].rect, mergedName, group[0].color);
+    drawLabel(context, group[0].rect, mergedName, '#000000'); // Display label with black text for readability
   }
 }
 
@@ -128,10 +131,11 @@
 
 function iterateNodes(
   nodeToData: Map<HostInstance, Data>,
-  execute: (rect: Rect | null, color: string, node: HostInstance) => void,
+  execute: (data: DataWithColorAndNode) => void,
 ) {
-  nodeToData.forEach(({count, rect}, node) => {
-    const colorIndex = Math.min(COLORS.length - 1, count - 1);
+  nodeToData.forEach((data, node) => {
+    // count is 1-based, so we subtract 1 to get a 0-based index
+    const colorIndex = Math.min(COLORS.length - 1, data.count - 1);
     const color = COLORS[colorIndex];
     execute({
       color,
@@ -144,28 +148,17 @@
   });
 }
 
-function drawBorder(
+function drawLabel(
   context: CanvasRenderingContext2D,
   rect: Rect,
+  // The text to draw on the label
   text: string,
+  // The fill color for the label background
   color: string,
 ): void {
-  const {height, left, top, width} = rect;
-
-  // outline
-  context.lineWidth = 1;
-  context.strokeStyle = OUTLINE_COLOR;
-
-  context.strokeRect(left - 1, top - 1, width + 2, height + 2);
-
-  // inset
-  context.lineWidth = 1;
-  context.strokeStyle = OUTLINE_COLOR;
-  context.strokeRect(left + 1, top + 1, width - 1, height - 1);
-  context.strokeStyle = color;
-
-  context.setLineDash([0]);
-
-  // border
-  context.lineWidth = 1;
-  context.strokeRect(left, top, width - 1, height - 1);
-
-  context.setLineDash([0]);
+  const {left, top} = rect;
+  context.font = '10px monospace';
+  context.textBaseline = 'middle';
+  context.textAlign = 'center';
+
+  const padding = 2;
+  const textHeight = 14;
+
+  const metrics = context.measureText(text);
+  const backgroundWidth = metrics.width + padding * 2;
+  const backgroundHeight = textHeight;
+  const labelX = left;
+  const labelY = top - backgroundHeight;
+
+  context.fillStyle = color;
+  context.fillRect(labelX, labelY, backgroundWidth, backgroundHeight);
+
+  context.fillStyle = '#000000';
+  context.fillText(
+    text,
+    labelX + backgroundWidth / 2,
+    labelY + backgroundHeight / 2,
+  );
 }
 
 function destroyNative(agent: Agent) {
   agent.emit('disableTraceUpdates');
 }
 
 function destroyWeb() {
   if (canvas !== null) {
     if (canvas.parentNode != null) {
       canvas.parentNode.removeChild(canvas);
+    }
+    if (canvas.parentNode != null) {
+      canvas.parentNode.removeChild(canvas);
     }
     canvas = null;
   }
@@ -177,6 +170,7 @@ function initialize(): void {
   canvas = window.document.createElement('canvas');
   canvas.style.cssText = `
     xx-background-color: red;
+    xx-font-family: monospace;
     xx-opacity: 0.5;
     bottom: 0;
     left: 0;
```