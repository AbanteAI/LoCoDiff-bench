
index fb2bf25aa..aa6c217c3 100644
--- a/react_packages_react-devtools-shared_src_backend_views_TraceUpdates_canvas.js_expectedoutput.txt (expected):tmp/tmpiuxnbya__expected.txt	
+++ b/react_packages_react-devtools-shared_src_backend_views_TraceUpdates_canvas.js_extracted.txt (actual):tmp/tmpbhekashi_actual.txt	
@@ -56,7 +56,6 @@ function drawWeb(nodeToData: Map<HostInstance, Data>) {
 
   const context = canvasFlow.getContext('2d');
   context.scale(dpr, dpr);
-
   context.clearRect(0, 0, canvasFlow.width / dpr, canvasFlow.height / dpr);
 
   const mergedNodes = groupAndSortNodes(nodeToData);
@@ -67,6 +66,13 @@ function drawWeb(nodeToData: Map<HostInstance, Data>) {
   });
 }
 
+export function draw(nodeToData: Map<HostInstance, Data>, agent: Agent): void {
+  return isReactNativeEnvironment()
+    ? drawNative(nodeToData, agent)
+    : drawWeb(nodeToData);
+}
+
+// Types for grouping
 type GroupItem = {
   rect: Rect,
   color: string,
@@ -123,37 +129,6 @@ function drawGroupLabel(
   }
 }
 
-export function draw(nodeToData: Map<HostInstance, Data>, agent: Agent): void {
-  return isReactNativeEnvironment()
-    ? drawNative(nodeToData, agent)
-    : drawWeb(nodeToData);
-}
-
-type DataWithColorAndNode = {
-  ...Data,
-  color: string,
-  node: HostInstance,
-};
-
-function iterateNodes(
-  nodeToData: Map<HostInstance, Data>,
-  execute: (data: DataWithColorAndNode) => void,
-) {
-  nodeToData.forEach((data, node) => {
-    const colorIndex = Math.min(COLORS.length - 1, data.count - 1);
-    const color = COLORS[colorIndex];
-    execute({
-      color,
-      node,
-      count: data.count,
-      displayName: data.displayName,
-      expirationTime: data.expirationTime,
-      lastMeasuredAt: data.lastMeasuredAt,
-      rect: data.rect,
-    });
-  });
-}
-
 function drawLabel(
   context: CanvasRenderingContext2D,
   rect: Rect,
@@ -185,6 +160,31 @@ function drawLabel(
   );
 }
 
+type DataWithColorAndNode = {
+  ...Data,
+  color: string,
+  node: HostInstance,
+};
+
+function iterateNodes(
+  nodeToData: Map<HostInstance, Data>,
+  execute: (data: DataWithColorAndNode) => void,
+) {
+  nodeToData.forEach((data, node) => {
+    const colorIndex = Math.min(COLORS.length - 1, data.count - 1);
+    const color = COLORS[colorIndex];
+    execute({
+      color,
+      node,
+      count: data.count,
+      displayName: data.displayName,
+      expirationTime: data.expirationTime,
+      lastMeasuredAt: data.lastMeasuredAt,
+      rect: data.rect,
+    });
+  });
+}
+
 function destroyNative(agent: Agent) {
   agent.emit('disableTraceUpdates');
 }
