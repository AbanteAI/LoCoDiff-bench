
index bcb21745..363ea761 100644
--- a/aider_aider_analytics.py_expectedoutput.txt (expected):tmp/tmpwja76rva_expected.txt	
+++ b/aider_aider_analytics.py_extracted.txt (actual):tmp/tmpf89ac6eu_actual.txt	
@@ -1,8 +1,8 @@
+import time
+import uuid
 import json
 import platform
 import sys
-import time
-import uuid
 from pathlib import Path
 
 from mixpanel import MixpanelException
@@ -47,7 +47,6 @@ def is_uuid_in_percentage(uuid_str, percent):
     # Using first 6 hex digits
     if percent == 0:
         return False
-
     threshold = compute_hex_threshold(percent)
     return uuid_str[:6] <= threshold
 
@@ -76,33 +75,21 @@ class Analytics:
 
         if self.permanently_disable or permanently_disable or not self.asked_opt_in:
             self.disable(permanently_disable)
-
-    def enable(self):
-        if not self.user_id:
-            self.disable(False)
-            return
-
-        if self.permanently_disable:
-            self.disable(True)
             return
 
-        if not self.asked_opt_in:
-            self.disable(False)
-            return
-
-        # self.mp = Mixpanel(mixpanel_project_token)
-        self.ph = Posthog(
-            project_api_key=posthog_project_api_key,
-            host=posthog_host,
-            on_error=self.posthog_error,
-            enable_exception_autocapture=True,
-            super_properties=self.get_system_info(),  # Add system info to all events
-        )
+        if self.user_id and not self.permanently_disable:
+            # self.mp = Mixpanel(mixpanel_project_token)
+            self.ph = Posthog(
+                project_api_key=posthog_project_api_key,
+                host=posthog_host,
+                on_error=self.posthog_error,
+                enable_exception_autocapture=True,
+                super_properties=self.get_system_info(),
+            )
 
     def disable(self, permanently):
         self.mp = None
         self.ph = None
-
         if permanently:
             self.asked_opt_in = True
             self.permanently_disable = True
@@ -120,10 +107,6 @@ class Analytics:
             return True
 
         assert args_analytics is None, args_analytics
-
-        if not self.user_id:
-            return False
-
         return is_uuid_in_percentage(self.user_id, PERCENT)
 
     def get_data_file_path(self):
@@ -132,7 +115,6 @@ class Analytics:
             data_file.parent.mkdir(parents=True, exist_ok=True)
             return data_file
         except OSError:
-            # If we can't create/access the directory, just disable analytics
             self.disable(permanently=False)
             return None
 
@@ -140,7 +122,6 @@ class Analytics:
         self.load_data()
         if self.user_id:
             return
-
         self.user_id = str(uuid.uuid4())
         self.save_data()
 
@@ -148,7 +129,6 @@ class Analytics:
         data_file = self.get_data_file_path()
         if not data_file:
             return
-
         if data_file.exists():
             try:
                 data = json.loads(data_file.read_text())
@@ -162,17 +142,14 @@ class Analytics:
         data_file = self.get_data_file_path()
         if not data_file:
             return
-
         data = dict(
             uuid=self.user_id,
             permanently_disable=self.permanently_disable,
             asked_opt_in=self.asked_opt_in,
         )
-
         try:
             data_file.write_text(json.dumps(data, indent=4))
         except OSError:
-            # If we can't write the file, just disable analytics
             self.disable(permanently=False)
 
     def get_system_info(self):
@@ -187,7 +164,6 @@ class Analytics:
     def _redact_model_name(self, model):
         if not model:
             return None
-
         info = model_info_manager.get_model_from_cached_json_db(model.name)
         if info:
             return model.name
@@ -195,19 +171,11 @@ class Analytics:
             return model.name.split("/")[0] + "/REDACTED"
         return None
 
-    def posthog_error(self):
-        """disable posthog if we get an error"""
-        print("X" * 100)
-        # https://github.com/PostHog/posthog-python/blob/aider_aider_analytics.py_extracted.txt (actual)://github.com/Aider-AI/aider/issues/2532
-        self.ph = None
-
     def event(self, event_name, main_model=None, **kwargs):
         if not self.mp and not self.ph and not self.logfile:
             return
 
         properties = {}
-
         if main_model:
             properties["main_model"] = self._redact_model_name(main_model)
             properties["weak_model"] = self._redact_model_name(main_model.weak_model)
@@ -232,19 +200,22 @@ class Analytics:
             self.ph.capture(self.user_id, event_name, dict(properties))
 
         if self.logfile:
-            log_entry = {
-                "event": event_name,
-                "properties": properties,
-                "user_id": self.user_id,
-                "time": int(time.time()),
-            }
             try:
+                log_entry = {
+                    "event": event_name,
+                    "properties": properties,
+                    "user_id": self.user_id,
+                    "time": int(time.time()),
+                }
                 with open(self.logfile, "a") as f:
                     json.dump(log_entry, f)
                     f.write("\n")
             except OSError:
                 pass  # Ignore OS errors when writing to logfile
 
-
-if __name__ == "__main__":
-    dump(compute_hex_threshold(PERCENT))
\ No newline at end of file
+    def posthog_error(self):
+        """disable posthog if we get an error"""
+        print("X" * 100)
+        # https://github.com/PostHog/posthog-python/blob/aider_aider_analytics.py_extracted.txt (actual)://github.com/Aider-AI/aider/issues/2532
+        self.ph = None
\ No newline at end of file
