--- qdrant_lib_collection_src_shards_replica_set_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_shards_replica_set_mod.rs_extracted.txt (actual)@@ -1,4 +1,4 @@-pub mod clock_set;
+mod clock_set;
 mod execute_read_operation;
 mod locally_disabled_peers;
 mod read_ops;
@@ -32,6 +32,7 @@ use crate::common::collection_size_stats::CollectionSizeStats;
 use crate::common::snapshots_manager::SnapshotStorageManager;
 use crate::config::CollectionConfigInternal;
+use crate::operations::point_ops::{self};
 use crate::operations::shared_storage_config::SharedStorageConfig;
 use crate::operations::types::{CollectionError, CollectionResult, UpdateResult, UpdateStatus};
 use crate::operations::{CollectionUpdateOperations, point_ops};
@@ -242,7 +243,7 @@         shared_storage_config: Arc<SharedStorageConfig>,
         payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
         channel_service: ChannelService,
-        on_peer_failure: ChangePeerFromState,
+        on_peer failure: ChangePeerFromState,
         abort_shard_transfer: AbortShardTransfer,
         this_peer_id: PeerId,
         update_runtime: Handle,
@@ -348,8 +349,8 @@             // TODO: move to collection config
             locally_disabled_peers: Default::default(),
             shard_path: shard_path.to_path_buf(),
+            abort_shard_transfer_cb: abort_shard_transfer,
             notify_peer_failure_cb: on_peer_failure,
-            abort_shard_transfer_cb: abort_shard_transfer,
             channel_service,
             collection_id,
             collection_config,
@@ -464,7 +465,7 @@     ) -> CollectionResult<()> {
         self.wait_for(
             move |replica_set_state| {
-                replica_set_state.get_peer_state(replica_set_state.this_peer_id) == Some(state)
+                replica_set_state.get_peer_state(replica_set_state.this_peer_id) == Some(&state)
             },
             timeout,
         )
@@ -485,7 +486,7 @@         timeout: Duration,
     ) -> CollectionResult<()> {
         self.wait_for(
-            move |replica_set_state| replica_set_state.get_peer_state(peer_id) == Some(state),
+            move |replica_set_state| replica_set_state.get_peer_state(peer_id) == Some(&state),
             timeout,
         )
         .await
@@ -845,14 +846,14 @@             .notify_elapsed()
             .collect();
 
-        for (failed_peer_id, from_state) in peers_to_notify {
-            self.notify_peer_failure(failed_peer_id, from_state);
-
-            for transfer in get_shard_transfers(self.shard_id, failed_peer_id) {
+        for (failed_peer, from_state) in peers_to_notify {
+            self.notify_peer_failure(failed_peer, from_state);
+
+            for transfer in get_shard_transfers(self.shard_id, failed_peer) {
                 self.abort_shard_transfer(
                     transfer,
                     &format!(
-                        "{failed_peer_id}/{}:{} replica failed",
+                        "{failed_peer}/{}:{} replica failed",
                         self.collection_id, self.shard_id,
                     ),
                 );
@@ -1105,7 +1106,7 @@         let Some(shard) = shard.as_ref() else {
             return false;
         };
-        shard.trigger_optimizers();
+        shard.trigger_optimizers().await;
         true
     }
 
