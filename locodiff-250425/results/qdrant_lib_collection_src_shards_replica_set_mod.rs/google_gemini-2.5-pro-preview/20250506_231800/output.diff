
index 1a8af404..0a6899d0 100644
--- a/qdrant_lib_collection_src_shards_replica_set_mod.rs_expectedoutput.txt (expected):tmp/tmpg2jc_3ar_expected.txt	
+++ b/qdrant_lib_collection_src_shards_replica_set_mod.rs_extracted.txt (actual):tmp/tmp6emfsg4w_actual.txt	
@@ -1,4 +1,4 @@
-pub mod clock_set;
+mod clock_set;
 mod execute_read_operation;
 mod locally_disabled_peers;
 mod read_ops;
@@ -23,18 +23,19 @@ use serde::{Deserialize, Serialize};
 use tokio::runtime::Handle;
 use tokio::sync::{Mutex, RwLock};
 
-use super::CollectionId;
-use super::local_shard::LocalShard;
 use super::local_shard::clock_map::RecoveryPoint;
+use super::local_shard::LocalShard;
 use super::remote_shard::RemoteShard;
 use super::transfer::ShardTransfer;
+use super::CollectionId;
 use crate::collection::payload_index_schema::PayloadIndexSchema;
 use crate::common::collection_size_stats::CollectionSizeStats;
 use crate::common::snapshots_manager::SnapshotStorageManager;
 use crate::config::CollectionConfigInternal;
+use crate::operations::point_ops::{self};
 use crate::operations::shared_storage_config::SharedStorageConfig;
 use crate::operations::types::{CollectionError, CollectionResult, UpdateResult, UpdateStatus};
-use crate::operations::{CollectionUpdateOperations, point_ops};
+use crate::operations::CollectionUpdateOperations;
 use crate::optimizers_builder::OptimizersConfig;
 use crate::save_on_disk::SaveOnDisk;
 use crate::shards::channel_service::ChannelService;
@@ -103,7 +104,7 @@ pub struct ShardReplicaSet {
     collection_id: CollectionId,
     collection_config: Arc<RwLock<CollectionConfigInternal>>,
     optimizers_config: OptimizersConfig,
-    pub(crate) shared_storage_config: Arc<SharedStorageConfig>,
+    pub(crate)shared_storage_config: Arc<SharedStorageConfig>,
     payload_index_schema: Arc<SaveOnDisk<PayloadIndexSchema>>,
     update_runtime: Handle,
     search_runtime: Handle,
@@ -208,8 +209,8 @@ impl ShardReplicaSet {
             replica_state: replica_state.into(),
             locally_disabled_peers: Default::default(),
             shard_path,
-            abort_shard_transfer_cb: abort_shard_transfer,
             notify_peer_failure_cb: on_peer_failure,
+            abort_shard_transfer_cb: abort_shard_transfer,
             channel_service,
             collection_id,
             collection_config,
@@ -255,8 +256,8 @@ impl ShardReplicaSet {
         if replica_state.read().this_peer_id != this_peer_id {
             replica_state
                 .write(|rs| {
-                    let this_peer_id = rs.this_peer_id;
-                    let local_state = rs.remove_peer_state(this_peer_id);
+                    let old_this_peer_id = rs.this_peer_id;
+                    let local_state = rs.remove_peer_state(old_this_peer_id);
                     if let Some(state) = local_state {
                         rs.set_peer_state(this_peer_id, state);
                     }
@@ -649,7 +650,7 @@ impl ShardReplicaSet {
         state: ReplicaState,
     ) -> CollectionResult<()> {
         if peer_id == self.this_peer_id() {
-            self.set_replica_state(peer_id, state)?;
+            self.set_replica_state(peer_id, state).await?;
         } else {
             // Create remote shard if necessary
             self.add_remote(peer_id, state).await?;
@@ -657,7 +658,11 @@ impl ShardReplicaSet {
         Ok(())
     }
 
-    pub fn set_replica_state(&self, peer_id: PeerId, state: ReplicaState) -> CollectionResult<()> {
+    pub async fn set_replica_state(
+        &self,
+        peer_id: PeerId,
+        state: ReplicaState,
+    ) -> CollectionResult<()> {
         log::debug!(
             "Changing local shard {}:{} state from {:?} to {state:?}",
             self.collection_id,
@@ -775,9 +780,8 @@ impl ShardReplicaSet {
         let read_local = self.local.read().await;
         if let Some(shard) = &*read_local {
             shard.on_optimizer_config_update().await
-        } else {
-            Ok(())
         }
+        Ok(())
     }
 
     /// Apply shard's strict mode configuration update
@@ -867,7 +871,7 @@ impl ShardReplicaSet {
 
         let Some(remote) = remotes.iter().find(|remote| remote.peer_id == peer_id) else {
             return Err(CollectionError::NotFound {
-                what: format!("{}/{}:{} shard", peer_id, self.collection_id, self.shard_id),
+                what: format!("{peer_id}/{}:{}:{} shard", self.collection_id, self.shard_id),
             });
         };
 
@@ -1059,9 +1063,10 @@ impl ShardReplicaSet {
 
     fn abort_shard_transfer(&self, transfer: ShardTransfer, reason: &str) {
         log::debug!(
-            "Abort {}:{} / {} -> {} shard transfer",
+            "Abort {}:{}:{} / {} -> {} shard transfer",
             self.collection_id,
             transfer.shard_id,
+            transfer.key.map_or_else(String::new, |k| k.to_string()),
             transfer.from,
             transfer.to,
         );
