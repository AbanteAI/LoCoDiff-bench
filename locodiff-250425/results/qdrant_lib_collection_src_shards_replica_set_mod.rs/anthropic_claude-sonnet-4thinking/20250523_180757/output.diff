
index 1a8af4043..bad857a07 100644
--- a/qdrant_lib_collection_src_shards_replica_set_mod.rs_expectedoutput.txt (expected):tmp/tmpm0sp1x8c_expected.txt	
+++ b/qdrant_lib_collection_src_shards_replica_set_mod.rs_extracted.txt (actual):tmp/tmpqp3v35js_actual.txt	
@@ -1,4 +1,4 @@
-pub mod clock_set;
+mod clock_set;
 mod execute_read_operation;
 mod locally_disabled_peers;
 mod read_ops;
@@ -438,14 +438,6 @@ impl ShardReplicaSet {
             .collect()
     }
 
-    /// Wait for a local shard to be initialized.
-    ///
-    /// Uses a blocking thread internally.
-    pub async fn wait_for_local(&self, timeout: Duration) -> CollectionResult<()> {
-        self.wait_for(|replica_set_state| replica_set_state.is_local, timeout)
-            .await
-    }
-
     pub fn wait_for_state_condition_sync<F>(&self, check: F, timeout: Duration) -> bool
     where
         F: Fn(&ReplicaSetState) -> bool,
@@ -454,6 +446,14 @@ impl ShardReplicaSet {
         replica_state.wait_for(check, timeout)
     }
 
+    /// Wait for a local shard to be initialized.
+    ///
+    /// Uses a blocking thread internally.
+    pub async fn wait_for_local(&self, timeout: Duration) -> CollectionResult<()> {
+        self.wait_for(|replica_set_state| replica_set_state.is_local, timeout)
+            .await
+    }
+
     /// Wait for a local shard to get into `state`
     ///
     /// Uses a blocking thread internally.
@@ -862,20 +862,6 @@ impl ShardReplicaSet {
         Ok(())
     }
 
-    pub(crate) async fn health_check(&self, peer_id: PeerId) -> CollectionResult<()> {
-        let remotes = self.remotes.read().await;
-
-        let Some(remote) = remotes.iter().find(|remote| remote.peer_id == peer_id) else {
-            return Err(CollectionError::NotFound {
-                what: format!("{}/{}:{} shard", peer_id, self.collection_id, self.shard_id),
-            });
-        };
-
-        remote.health_check().await?;
-
-        Ok(())
-    }
-
     pub async fn delete_local_points(
         &self,
         filter: Filter,
@@ -1018,7 +1004,7 @@ impl ShardReplicaSet {
             .active_or_resharding_peers()
             .filter(|id| id != &peer_id);
 
-        let mut locally_disabled_peers_guard = self.locally_disabled_peers.upgradable_read();
+        let locally_disabled_peers_guard = self.locally_disabled_peers.upgradable_read();
 
         // Prevent disabling last peer in consensus
         {
@@ -1069,6 +1055,20 @@ impl ShardReplicaSet {
         self.abort_shard_transfer_cb.deref()(transfer, reason)
     }
 
+    pub(crate) async fn health_check(&self, peer_id: PeerId) -> CollectionResult<()> {
+        let remotes = self.remotes.read().await;
+
+        let Some(remote) = remotes.iter().find(|remote| remote.peer_id == peer_id) else {
+            return Err(CollectionError::NotFound {
+                what: format!("{}/{}:{} shard", peer_id, self.collection_id, self.shard_id),
+            });
+        };
+
+        remote.health_check().await?;
+
+        Ok(())
+    }
+
     /// Get shard recovery point for WAL.
     pub(crate) async fn shard_recovery_point(&self) -> CollectionResult<RecoveryPoint> {
         let local_shard = self.local.read().await;
