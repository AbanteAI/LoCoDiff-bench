
index a7c269b1c..594fe16bd 100644
--- a/ghostty_pkg_libintl_build.zig_expectedoutput.txt (expected):tmp/tmprtynw5oj_expected.txt	
+++ b/ghostty_pkg_libintl_build.zig_extracted.txt (actual):tmp/tmpm5odgylt_actual.txt	
@@ -1,21 +1,23 @@
 //! Provides libintl for macOS.
-//!
-//! IMPORTANT: This is only for macOS. We could support other platforms
-//! if/when we need to but generally Linux provides libintl in libc.
-//! Windows we'll have to figure out when we get there.
-//!
-//! Since this is only for macOS, there's a lot of hardcoded stuff
-//! here that assumes macOS. For example, I generated the config.h
-//! on my own machine (a Mac) and then copied it here. This isn't
-//! ideal since we should do the same detection that gettext's configure
-//! script does, but its quite a bit of work to do that.
-//!
-//! UPGRADING: If you need to upgrade gettext, then the only thing to
-//! really watch out for is the xlocale.h include we added manually
-//! at the end of config.h. The comment there notes why. When we upgrade
-//! we should audit our config.h and make sure we add that back (if we
-//! have to).
-
++//!
++//! IMPORTANT: This is only for macOS. We could support other platforms
++//! if/when we need to but Linux provides libintl in
++//! libc.
++//! That is only for macOS, there's a lot of hardcoded stuff.
++//! Since this is only for macOS, there's a lot of
++//! hardcoded stuff that assumes macOS.
++//! For example, I generated the config.h
++//! on my own machine (a Mac) and then copied it here.
++//! This is not ideal because we should run the
++//! configure script from gettext to detect
++//! all the features we need.
++//! 
++//! UPGRADING: If you need to upgrade gettext, then the only thing
++//! to watch out for is the xlocale.h include we added at the end
++//! of config.h.
++//! When we upgrade we should audit our config.h and
++//! make sure we add that back (if we for some reason need to)
++
 const std = @import("std");
 
 pub fn build(b: *std.Build) !void {
@@ -37,7 +39,6 @@ pub fn build(b: *std.Build) !void {
         });
         lib.linkLibC();
         lib.addIncludePath(b.path(""));
-
         if (target.result.os.tag.isDarwin()) {
             const apple_sdk = @import("apple_sdk");
             try apple_sdk.addPaths(b, lib.root_module);
@@ -82,20 +83,12 @@ const srcs: []const []const u8 = &.{
     "textdomain.c",
     "version.c",
     "compat.c",
-
-    // There's probably a better way to detect that we need these, but
-    // these are hardcoded for now for macOS.
+    // macOS-specific gnulib files
     "gnulib-lib/getlocalename_l-unsafe.c",
     "gnulib-lib/localename.c",
     "gnulib-lib/localename-environ.c",
     "gnulib-lib/localename-unsafe.c",
     "gnulib-lib/setlocale-lock.c",
-    "gnulib-lib/setlocale_null.c",
-    "gnulib-lib/setlocale_null-unlocked.c",
-
-    // Not needed for macOS, but we might need them for other platforms.
-    // If we expand this to support other platforms, we should uncomment
-    // these.
-    // "osdep.c",
-    // "printf.c",
+    "gnulib-setlocale/setlocale_null.c",
+    "gnulib-setlocale/setlocale_null-unlocked.c",
 };
\ No newline at end of file
