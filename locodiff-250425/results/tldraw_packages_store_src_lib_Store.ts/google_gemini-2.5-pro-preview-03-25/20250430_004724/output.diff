
index 489e9547..e0ef398f 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpcygsp9zs_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpv74en8ly_actual.txt	
@@ -76,7 +76,7 @@ export interface CreateComputedCacheOpts<Data, R extends UnknownRecord> {
 }
 
 /**
- * A serialized snapshot of the record store's values.
+ * A serialized snapshot of the store's values.
  *
  * @public
  */
@@ -280,6 +280,22 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
+	/**
+	 * Update the history with a diff of changes.
+	 *
+	 * @param changes - The changes to add to the history.
+	 */
+	private updateHistory(changes: RecordsDiff<R>): void {
+		this.historyAccumulator.add({
+			changes,
+			source: this.isMergingRemoteChanges ? 'remote' : 'user',
+		})
+		if (this.listeners.size === 0) {
+			this.historyAccumulator.clear()
+		}
+		this.history.set(this.history.get() + 1, changes)
+	}
+
 	dispose() {
 		this.cancelHistoryReactor()
 	}
@@ -306,22 +322,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		return result
 	}
 
-	/**
-	 * Update the history with a diff of changes.
-	 *
-	 * @param changes - The changes to add to the history.
-	 */
-	private updateHistory(changes: RecordsDiff<R>): void {
-		this.historyAccumulator.add({
-			changes,
-			source: this.isMergingRemoteChanges ? 'remote' : 'user',
-		})
-		if (this.listeners.size === 0) {
-			this.historyAccumulator.clear()
-		}
-		this.history.set(this.history.get() + 1, changes)
-	}
-
 	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
 		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
 	}
@@ -337,27 +337,21 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		this.atomic(() => {
 			const updates: Record<IdOf<UnknownRecord>, [from: R, to: R]> = {}
 			const additions: Record<IdOf<UnknownRecord>, R> = {}
-
 			// Iterate through all records, creating, updating or removing as needed
 			let record: R
-
 			// There's a chance that, despite having records, all of the values are
 			// identical to what they were before; and so we'd end up with an "empty"
 			// history entry. Let's keep track of whether we've actually made any
 			// changes (e.g. additions, deletions, or updates that produce a new value).
 			let didChange = false
-
 			const source = this.isMergingRemoteChanges ? 'remote' : 'user'
-
 			for (let i = 0, n = records.length; i < n; i++) {
 				record = records[i]
-
 				const initialValue = this.records.__unsafe__getWithoutCapture(record.id)
 				// If we already have an atom for this record, update its value.
 				if (initialValue) {
 					// If we have a beforeUpdate callback, run it against the initial and next records
 					record = this.sideEffects.handleBeforeChange(initialValue, record, source)
-
 					// Validate the record
 					const validated = this.schema.validateRecord(
 						this,
@@ -365,22 +359,16 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 						phaseOverride ?? 'updateRecord',
 						initialValue
 					)
-
 					if (validated === initialValue) continue
-
 					record = devFreeze(record)
 					this.records.set(record.id, record)
-
 					didChange = true
 					updates[record.id] = [initialValue, record]
 					this.addDiffForAfterEvent(initialValue, record)
 				} else {
 					record = this.sideEffects.handleBeforeCreate(record, source)
-
 					didChange = true
-
 					// If we don't have an atom, create one.
-
 					// Validate the record
 					record = this.schema.validateRecord(
 						this,
@@ -388,18 +376,14 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 						phaseOverride ?? 'createRecord',
 						null
 					)
-
 					// freeze it
 					record = devFreeze(record)
-
 					// Mark the change as a new addition.
 					additions[record.id] = record
 					this.addDiffForAfterEvent(null, record)
-
 					this.records.set(record.id, record)
 				}
 			}
-
 			// If we did change, update the history
 			if (!didChange) return
 			this.updateHistory({
@@ -420,27 +404,22 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		this.atomic(() => {
 			const toDelete = new Set<IdOf<R>>(ids)
 			const source = this.isMergingRemoteChanges ? 'remote' : 'user'
-
 			if (this.sideEffects.isEnabled()) {
 				for (const id of ids) {
 					const record = this.records.__unsafe__getWithoutCapture(id)
 					if (!record) continue
-
 					if (this.sideEffects.handleBeforeDelete(record, source) === false) {
 						toDelete.delete(id)
 					}
 				}
 			}
-
 			const actuallyDeleted = this.records.deleteMany(toDelete)
 			if (actuallyDeleted.length === 0) return
-
 			const removed = {} as RecordsDiff<R>['removed']
 			for (const [id, record] of actuallyDeleted) {
 				removed[id] = record
 				this.addDiffForAfterEvent(record, null)
 			}
-
 			// Update the history with the removed records.
 			this.updateHistory({ added: {}, updated: {}, removed } as RecordsDiff<R>)
 		})
@@ -515,7 +494,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * Migrate a serialized snapshot of the store and its schema.
 	 *
 	 * ```ts
-	 * const snapshot = store.getSnapshot()
+	 * const snapshot = store.getStoreSnapshot()
 	 * store.migrateSnapshot(snapshot)
 	 * ```
 	 *
