
index 489e9547..bd6cea10 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmp_tyufm3o_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpmcqpccdm_actual.txt	
@@ -246,6 +246,10 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
+	dispose() {
+		this.cancelHistoryReactor()
+	}
+
 	public _flushHistory() {
 		// If we have accumulated history, flush it and update listeners
 		if (this.historyAccumulator.hasChanges()) {
@@ -280,10 +284,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
@@ -908,6 +908,40 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
+class HistoryAccumulator<T extends UnknownRecord> {
+	private _history: HistoryEntry<T>[] = []
+
+	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
+
+	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
+		this._interceptors.add(fn)
+		return () => {
+			this._interceptors.delete(fn)
+		}
+	}
+
+	add(entry: HistoryEntry<T>) {
+		this._history.push(entry)
+		for (const interceptor of this._interceptors) {
+			interceptor(entry)
+		}
+	}
+
+	flush() {
+		const history = squashHistoryEntries(this._history)
+		this._history = []
+		return history
+	}
+
+	clear() {
+		this._history = []
+	}
+
+	hasChanges() {
+		return this._history.length > 0
+	}
+}
+
 /**
  * Collect all history entries by their adjacent sources.
  * For example, [user, user, remote, remote, user] would result in [user, remote, user],
@@ -945,40 +979,6 @@ function squashHistoryEntries<T extends UnknownRecord>(
 	)
 }
 
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
-}
-
 /** @public */
 export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
 /** @public */
