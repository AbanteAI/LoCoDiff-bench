
index 489e95479..e5697516e 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpwvuh7dxb_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpfdc1k4sz_actual.txt	
@@ -56,12 +56,11 @@ export interface HistoryEntry<R extends UnknownRecord = UnknownRecord> {
 /**
  * A function that will be called when the history changes.
  *
- * @public
- */
+ * @public */
 export type StoreListener<R extends UnknownRecord> = (entry: HistoryEntry<R>) => void
 
 /**
- * A record store is a collection of records of different types.
+ * A store of records.
  *
  * @public
  */
@@ -111,6 +110,15 @@ export interface StoreError {
 /** @internal */
 export type StoreRecord<S extends Store<any>> = S extends Store<infer R> ? R : never
 
+/**
+ * Store-level "operation end" event
+ *
+ * @public
+ */
+export interface StoreOperationCompleteHandler {
+	(source: ChangeSource): void
+}
+
 /**
  * A store of records.
  *
@@ -246,40 +254,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	public _flushHistory() {
-		// If we have accumulated history, flush it and update listeners
-		if (this.historyAccumulator.hasChanges()) {
-			const entries = this.historyAccumulator.flush()
-			for (const { changes, source } of entries) {
-				let instanceChanges = null as null | RecordsDiff<R>
-				let documentChanges = null as null | RecordsDiff<R>
-				let presenceChanges = null as null | RecordsDiff<R>
-				for (const { onHistory, filters } of this.listeners) {
-					if (filters.source !== 'all' && filters.source !== source) {
-						continue
-					}
-					if (filters.scope !== 'all') {
-						if (filters.scope === 'document') {
-							documentChanges ??= this.filterChangesByScope(changes, 'document')
-							if (!documentChanges) continue
-							onHistory({ changes: documentChanges, source })
-						} else if (filters.scope === 'session') {
-							instanceChanges ??= this.filterChangesByScope(changes, 'session')
-							if (!instanceChanges) continue
-							onHistory({ changes: instanceChanges, source })
-						} else {
-							presenceChanges ??= this.filterChangesByScope(changes, 'presence')
-							if (!presenceChanges) continue
-							onHistory({ changes: presenceChanges, source })
-						}
-					} else {
-						onHistory({ changes, source })
-					}
-				}
-			}
-		}
-	}
-
 	dispose() {
 		this.cancelHistoryReactor()
 	}
@@ -515,8 +489,8 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * Migrate a serialized snapshot of the store and its schema.
 	 *
 	 * ```ts
-	 * const snapshot = store.getSnapshot()
-	 * store.migrateSnapshot(snapshot)
+	 * const snapshot = store.getStoreSnapshot()
+	 * store.migrateStoreSnapshot(snapshot)
 	 * ```
 	 *
 	 * @param snapshot - The snapshot to load.
@@ -744,6 +718,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * signal for the underlying record. Return a signal (usually a computed) for the cached value.
 	 * For simple derivations, use {@link Store.createComputedCache}. This function is useful if you
 	 * need more precise control over intermediate values.
+	 * @public
 	 */
 	createCache<Result, Record extends R = R>(
 		create: (id: IdOf<Record>, recordSignal: Signal<R>) => Signal<Result>
@@ -908,43 +883,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
 class HistoryAccumulator<T extends UnknownRecord> {
 	private _history: HistoryEntry<T>[] = []
 
@@ -979,6 +917,34 @@ class HistoryAccumulator<T extends UnknownRecord> {
 	}
 }
 
+function squashHistoryEntries<T extends UnknownRecord>(
+	entries: HistoryEntry<T>[]
+): HistoryEntry<T>[] {
+	if (entries.length === 0) return []
+
+	const chunked: HistoryEntry<T>[][] = []
+	let chunk: HistoryEntry<T>[] = [entries[0]]
+	let entry: HistoryEntry<T>
+
+	for (let i = 1, n = entries.length; i < n; i++) {
+		entry = entries[i]
+		if (chunk[0].source !== entry.source) {
+			chunked.push(chunk)
+			chunk = []
+		}
+		chunk.push(entry)
+	}
+	// Push the last chunk
+	chunked.push(chunk)
+
+	return devFreeze(
+		chunked.map((chunk) => ({
+			source: chunk[0].source,
+			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
+		}))
+	)
+}
+
 /** @public */
 export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
 /** @public */
