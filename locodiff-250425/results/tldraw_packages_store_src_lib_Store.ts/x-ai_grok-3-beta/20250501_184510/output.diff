
index 489e9547..1bf33cea 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpvcj6ts5e_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpt_j_3ze0_actual.txt	
@@ -4,13 +4,13 @@ import {
 	assert,
 	filterEntries,
 	getOwnProperty,
+	isEqual,
 	objectMapEntries,
 	objectMapKeys,
 	objectMapValues,
 	throttleToNextFrame,
 	uniqueId,
 } from '@tldraw/utils'
-import isEqual from 'lodash.isequal'
 import { AtomMap } from './AtomMap'
 import { IdOf, RecordId, UnknownRecord } from './BaseRecord'
 import { RecordScope } from './RecordType'
@@ -280,8 +280,24 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
+	/**
+	 * Update the history with a diff of changes.
+	 *
+	 * @param changes - The changes to add to the history.
+	 */
+	private updateHistory(changes: RecordsDiff<R>): void {
+		this.historyAccumulator.add({
+			changes,
+			source: this.isMergingRemoteChanges ? 'remote' : 'user',
+		})
+		if (this.listeners.size === 0) {
+			this.historyAccumulator.clear()
+		}
+		this.history.set(this.history.get() + 1, changes)
+	}
+
+	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
+		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
 	}
 
 	/**
@@ -306,24 +322,8 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		return result
 	}
 
-	/**
-	 * Update the history with a diff of changes.
-	 *
-	 * @param changes - The changes to add to the history.
-	 */
-	private updateHistory(changes: RecordsDiff<R>): void {
-		this.historyAccumulator.add({
-			changes,
-			source: this.isMergingRemoteChanges ? 'remote' : 'user',
-		})
-		if (this.listeners.size === 0) {
-			this.historyAccumulator.clear()
-		}
-		this.history.set(this.history.get() + 1, changes)
-	}
-
-	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
-		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
+	dispose() {
+		this.cancelHistoryReactor()
 	}
 
 	/**
@@ -671,10 +671,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 			return fn()
 		}
 
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
 		try {
 			this.atomic(fn, true, true)
 		} finally {
@@ -908,6 +904,40 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
+class HistoryAccumulator<T extends UnknownRecord> {
+	private _history: HistoryEntry<T>[] = []
+
+	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
+
+	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
+		this._interceptors.add(fn)
+		return () => {
+			this._interceptors.delete(fn)
+		}
+	}
+
+	add(entry: HistoryEntry<T>) {
+		this._history.push(entry)
+		for (const interceptor of this._interceptors) {
+			interceptor(entry)
+		}
+	}
+
+	flush() {
+		const history = squashHistoryEntries(this._history)
+		this._history = []
+		return history
+	}
+
+	clear() {
+		this._history = []
+	}
+
+	hasChanges() {
+		return this._history.length > 0
+	}
+}
+
 /**
  * Collect all history entries by their adjacent sources.
  * For example, [user, user, remote, remote, user] would result in [user, remote, user],
@@ -945,40 +975,6 @@ function squashHistoryEntries<T extends UnknownRecord>(
 	)
 }
 
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
-}
-
 /** @public */
 export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
 /** @public */
