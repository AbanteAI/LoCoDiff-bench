--- tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected)+++ tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual)@@ -4,13 +4,13 @@ 	assert,
 	filterEntries,
 	getOwnProperty,
+	isEqual,
 	objectMapEntries,
 	objectMapKeys,
 	objectMapValues,
 	throttleToNextFrame,
 	uniqueId,
 } from '@tldraw/utils'
-import isEqual from 'lodash.isequal'
 import { AtomMap } from './AtomMap'
 import { IdOf, RecordId, UnknownRecord } from './BaseRecord'
 import { RecordScope } from './RecordType'
@@ -280,32 +280,6 @@ 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
-	/**
-	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
-	 * @param change - the records diff
-	 * @param scope - the records scope
-	 * @returns
-	 */
-	filterChangesByScope(change: RecordsDiff<R>, scope: RecordScope) {
-		const result = {
-			added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
-			updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
-			removed: filterEntries(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName)),
-		}
-		if (
-			Object.keys(result.added).length === 0 &&
-			Object.keys(result.updated).length === 0 &&
-			Object.keys(result.removed).length === 0
-		) {
-			return null
-		}
-		return result
-	}
-
 	/**
 	 * Update the history with a diff of changes.
 	 *
@@ -324,6 +298,32 @@ 
 	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
 		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
+	}
+
+	/**
+	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
+	 * @param change - the records diff
+	 * @param scope - the records scope
+	 * @returns
+	 */
+	filterChangesByScope(change: RecordsDiff<R>, scope: RecordScope) {
+		const result = {
+			added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
+			updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
+			removed: filterEntries(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName)),
+		}
+		if (
+			Object.keys(result.added).length === 0 &&
+			Object.keys(result.updated).length === 0 &&
+			Object.keys(result.removed).length === 0
+		) {
+			return null
+		}
+		return result
+	}
+
+	dispose() {
+		this.cancelHistoryReactor()
 	}
 
 	/**
@@ -669,10 +669,6 @@ 	mergeRemoteChanges(fn: () => void) {
 		if (this.isMergingRemoteChanges) {
 			return fn()
-		}
-
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
 		}
 
 		try {
@@ -908,6 +904,40 @@ 	}
 }
 
+class HistoryAccumulator<T extends UnknownRecord> {
+	private _history: HistoryEntry<T>[] = []
+
+	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
+
+	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
+		this._interceptors.add(fn)
+		return () => {
+			this._interceptors.delete(fn)
+		}
+	}
+
+	add(entry: HistoryEntry<T>) {
+		this._history.push(entry)
+		for (const interceptor of this._interceptors) {
+			interceptor(entry)
+		}
+	}
+
+	flush() {
+		const history = squashHistoryEntries(this._history)
+		this._history = []
+		return history
+	}
+
+	clear() {
+		this._history = []
+	}
+
+	hasChanges() {
+		return this._history.length > 0
+	}
+}
+
 /**
  * Collect all history entries by their adjacent sources.
  * For example, [user, user, remote, remote, user] would result in [user, remote, user],
@@ -943,40 +973,6 @@ 			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
 		}))
 	)
-}
-
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
 }
 
 /** @public */
