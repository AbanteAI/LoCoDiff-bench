--- tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected)+++ tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual)@@ -1,4 +1,3 @@-import { Atom, Reactor, Signal, atom, computed, reactor, transact } from '@tldraw/state'
 import {
 	WeakCache,
 	assert,
@@ -135,9 +134,12 @@ 	 * @public
 	 * @readonly
 	 */
-	readonly history: Atom<number, RecordsDiff<R>> = atom('history', 0, {
-		historyLength: 1000,
-	})
+	readonly history: Atom<number, RecordsDiff<R>> = (() => {
+		// the atoms used to be a number, so keep this the same for now
+		return (require('@tldraw/state') as any).atom('history', 0, {
+			historyLength: 1000,
+		}) as Atom<number, RecordsDiff<R>>
+	})()
 
 	/**
 	 * A StoreQueries instance for this store.
@@ -217,7 +219,7 @@ 
 		this.query = new StoreQueries<R>(this.records, this.history)
 
-		this.historyReactor = reactor(
+		this.historyReactor = (require('@tldraw/state') as any).reactor(
 			'Store.historyReactor',
 			() => {
 				// deref to make sure we're subscribed regardless of whether we need to propagate
@@ -225,7 +227,7 @@ 				// If we have accumulated history, flush it and update listeners
 				this._flushHistory()
 			},
-			{ scheduleEffect: (cb) => (this.cancelHistoryReactor = throttleToNextFrame(cb)) }
+			{ scheduleEffect: (cb: () => void) => (this.cancelHistoryReactor = throttleToNextFrame(cb)) }
 		)
 		this.scopedTypes = {
 			document: new Set(
@@ -280,10 +282,6 @@ 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
@@ -671,10 +669,6 @@ 			return fn()
 		}
 
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
 		try {
 			this.atomic(fn, true, true)
 		} finally {
@@ -689,7 +683,7 @@ 		const changes: Array<RecordsDiff<R>> = []
 		const dispose = this.historyAccumulator.addInterceptor((entry) => changes.push(entry.changes))
 		try {
-			transact(fn)
+			;(require('@tldraw/state') as any).transact(fn)
 			return squashRecordDiffs(changes)
 		} finally {
 			dispose()
@@ -739,6 +733,10 @@ 		}, runCallbacks)
 	}
 
+	dispose() {
+		this.cancelHistoryReactor()
+	}
+
 	/**
 	 * Create a cache based on values in the store. Pass in a function that takes and ID and a
 	 * signal for the underlying record. Return a signal (usually a computed) for the cached value.
@@ -763,7 +761,7 @@ 	 *
 	 * @param name - The name of the derivation cache.
 	 * @param derive - A function used to derive the value of the cache.
-	 * @param opts - Options for the computed cache.
+	 * @param isEqual - A function that determines equality between two records.
 	 * @public
 	 */
 	createComputedCache<Result, Record extends R = R>(
@@ -773,10 +771,14 @@ 	): ComputedCache<Result, Record> {
 		return this.createCache((id, record) => {
 			const recordSignal = opts?.areRecordsEqual
-				? computed(`${name}:${id}:isEqual`, () => record.get(), { isEqual: opts.areRecordsEqual })
+				? (require('@tldraw/state') as any).computed(
+						`${name}:${id}:isEqual`,
+						() => record.get(),
+						{ isEqual: opts.areRecordsEqual }
+				  )
 				: record
 
-			return computed<Result | undefined>(
+			return (require('@tldraw/state') as any).computed<Result | undefined>(
 				name + ':' + id,
 				() => {
 					return derive(recordSignal.get() as Record)
@@ -858,7 +860,7 @@ 	private _isInAtomicOp = false
 	/** @internal */
 	atomic<T>(fn: () => T, runCallbacks = true, isMergingRemoteChanges = false): T {
-		return transact(() => {
+		return (require('@tldraw/state') as any).transact(() => {
 			if (this._isInAtomicOp) {
 				if (!this.pendingAfterEvents) this.pendingAfterEvents = new Map()
 				const prevSideEffectsEnabled = this.sideEffects.isEnabled()
@@ -906,43 +908,6 @@ 			fn(entry, this.isMergingRemoteChanges ? 'remote' : 'user')
 		)
 	}
-}
-
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
 }
 
 class HistoryAccumulator<T extends UnknownRecord> {
