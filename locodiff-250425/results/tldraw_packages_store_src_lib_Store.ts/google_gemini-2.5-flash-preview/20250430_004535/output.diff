
index 489e9547..41280b51 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpz0mgxbwf_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmp1fzlyix4_actual.txt	
@@ -246,40 +246,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	public _flushHistory() {
-		// If we have accumulated history, flush it and update listeners
-		if (this.historyAccumulator.hasChanges()) {
-			const entries = this.historyAccumulator.flush()
-			for (const { changes, source } of entries) {
-				let instanceChanges = null as null | RecordsDiff<R>
-				let documentChanges = null as null | RecordsDiff<R>
-				let presenceChanges = null as null | RecordsDiff<R>
-				for (const { onHistory, filters } of this.listeners) {
-					if (filters.source !== 'all' && filters.source !== source) {
-						continue
-					}
-					if (filters.scope !== 'all') {
-						if (filters.scope === 'document') {
-							documentChanges ??= this.filterChangesByScope(changes, 'document')
-							if (!documentChanges) continue
-							onHistory({ changes: documentChanges, source })
-						} else if (filters.scope === 'session') {
-							instanceChanges ??= this.filterChangesByScope(changes, 'session')
-							if (!instanceChanges) continue
-							onHistory({ changes: instanceChanges, source })
-						} else {
-							presenceChanges ??= this.filterChangesByScope(changes, 'presence')
-							if (!presenceChanges) continue
-							onHistory({ changes: presenceChanges, source })
-						}
-					} else {
-						onHistory({ changes, source })
-					}
-				}
-			}
-		}
-	}
-
 	dispose() {
 		this.cancelHistoryReactor()
 	}
@@ -368,7 +334,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 
 					if (validated === initialValue) continue
 
-					record = devFreeze(record)
+					record = devFreeze(record) as R
 					this.records.set(record.id, record)
 
 					didChange = true
@@ -390,7 +356,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 					)
 
 					// freeze it
-					record = devFreeze(record)
+					record = devFreeze(record) as R
 
 					// Mark the change as a new addition.
 					additions[record.id] = record
@@ -515,7 +481,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * Migrate a serialized snapshot of the store and its schema.
 	 *
 	 * ```ts
-	 * const snapshot = store.getSnapshot()
+	 * const snapshot = store.getStoreSnapshot()
 	 * store.migrateSnapshot(snapshot)
 	 * ```
 	 *
@@ -908,77 +874,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
-}
-
 /** @public */
 export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
 /** @public */
