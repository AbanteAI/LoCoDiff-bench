--- tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected)+++ tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual)@@ -1,97 +1,74 @@-import { Atom, Reactor, Signal, atom, computed, reactor, transact } from '@tldraw/state'
 import {
-	WeakCache,
-	assert,
-	filterEntries,
-	getOwnProperty,
 	objectMapEntries,
+	objectMapFromEntries,
 	objectMapKeys,
 	objectMapValues,
-	throttleToNextFrame,
-	uniqueId,
+	throttledRaf,
 } from '@tldraw/utils'
-import isEqual from 'lodash.isequal'
-import { AtomMap } from './AtomMap'
+import { Atom, Computed, Reactor, atom, computed, reactor, transact } from 'signia'
 import { IdOf, RecordId, UnknownRecord } from './BaseRecord'
-import { RecordScope } from './RecordType'
-import { RecordsDiff, squashRecordDiffs } from './RecordsDiff'
+import { Cache } from './Cache'
+import { RecordType } from './RecordType'
 import { StoreQueries } from './StoreQueries'
 import { SerializedSchema, StoreSchema } from './StoreSchema'
-import { StoreSideEffects } from './StoreSideEffects'
 import { devFreeze } from './devFreeze'
 
+type RecFromId<K extends RecordId<UnknownRecord>> = K extends RecordId<infer R> ? R : never
+
+/**
+ * A diff describing the changes to a record.
+ *
+ * @public
+ */
+export type RecordsDiff<R extends UnknownRecord> = {
+	added: Record<IdOf<R>, R>
+	updated: Record<IdOf<R>, [from: R, to: R]>
+	removed: Record<IdOf<R>, R>
+}
+
+/**
+ * A diff describing the changes to a collection.
+ *
+ * @public
+ */
+export type CollectionDiff<T> = { added?: Set<T>; removed?: Set<T> }
+
+/**
+ * An entry containing changes that originated either by user actions or remote changes.
+ *
+ * @public
+ */
+export type HistoryEntry<R extends UnknownRecord = UnknownRecord> = {
+	changes: RecordsDiff<R>
+	source: 'user' | 'remote'
+}
+
+/**
+ * A function that will be called when the history changes.
+ *
+ * @public
+ */
+export type StoreListener<R extends UnknownRecord> = (entry: HistoryEntry<R>) => void
+
+/**
+ * A record store is a collection of records of different types.
+ *
+ * @public
+ */
+export type ComputedCache<Data, R extends UnknownRecord> = {
+	get(id: IdOf<R>): Data | undefined
+}
+
+/**
+ * A serialized snapshot of the record store's values.
+ *
+ * @public
+ */
+export type StoreSnapshot<R extends UnknownRecord> = Record<IdOf<R>, R>
+
 /** @public */
-export type RecordFromId<K extends RecordId<UnknownRecord>> =
-	K extends RecordId<infer R> ? R : never
-
-/**
- * A diff describing the changes to a collection.
- *
- * @public
- */
-export interface CollectionDiff<T> {
-	added?: Set<T>
-	removed?: Set<T>
-}
-
-/** @public */
-export type ChangeSource = 'user' | 'remote'
-
-/** @public */
-export interface StoreListenerFilters {
-	source: ChangeSource | 'all'
-	scope: RecordScope | 'all'
-}
-
-/**
- * An entry containing changes that originated either by user actions or remote changes.
- *
- * @public
- */
-export interface HistoryEntry<R extends UnknownRecord = UnknownRecord> {
-	changes: RecordsDiff<R>
-	source: ChangeSource
-}
-
-/**
- * A function that will be called when the history changes.
- *
- * @public
- */
-export type StoreListener<R extends UnknownRecord> = (entry: HistoryEntry<R>) => void
-
-/**
- * A record store is a collection of records of different types.
- *
- * @public
- */
-export interface ComputedCache<Data, R extends UnknownRecord> {
-	get(id: IdOf<R>): Data | undefined
-}
-
-/** @public */
-export interface CreateComputedCacheOpts<Data, R extends UnknownRecord> {
-	areRecordsEqual?(a: R, b: R): boolean
-	areResultsEqual?(a: Data, b: Data): boolean
-}
-
-/**
- * A serialized snapshot of the record store's values.
- *
- * @public
- */
-export type SerializedStore<R extends UnknownRecord> = Record<IdOf<R>, R>
-
-/** @public */
-export interface StoreSnapshot<R extends UnknownRecord> {
-	store: SerializedStore<R>
-	schema: SerializedSchema
-}
-
-/** @public */
-export interface StoreValidator<R extends UnknownRecord> {
-	validate(record: unknown): R
-	validateUsingKnownGoodVersion?(knownGoodVersion: R, record: unknown): R
+export type StoreValidator<R extends UnknownRecord> = {
+	validate: (record: unknown) => R
 }
 
 /** @public */
@@ -100,7 +77,7 @@ }
 
 /** @public */
-export interface StoreError {
+export type StoreError = {
 	error: Error
 	phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests'
 	recordBefore?: unknown
@@ -118,16 +95,12 @@  */
 export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	/**
-	 * The random id of the store.
-	 */
-	public readonly id: string
-	/**
-	 * An AtomMap containing the stores records.
+	 * An atom containing the store's atoms.
 	 *
 	 * @internal
 	 * @readonly
 	 */
-	private readonly records: AtomMap<IdOf<R>, R>
+	private readonly atoms = atom('store_atoms', {} as Record<IdOf<R>, Atom<R>>)
 
 	/**
 	 * An atom containing the store's history.
@@ -145,14 +118,14 @@ 	 * @public
 	 * @readonly
 	 */
-	readonly query: StoreQueries<R>
+	readonly query = new StoreQueries<R>(this.atoms, this.history)
 
 	/**
 	 * A set containing listeners that have been added to this store.
 	 *
 	 * @internal
 	 */
-	private listeners = new Set<{ onHistory: StoreListener<R>; filters: StoreListenerFilters }>()
+	private listeners = new Set<StoreListener<R>>()
 
 	/**
 	 * An array of history entries that have not yet been flushed.
@@ -169,27 +142,13 @@ 	 */
 	private historyReactor: Reactor
 
-	/**
-	 * Function to dispose of any in-flight timeouts.
-	 *
-	 * @internal
-	 */
-	private cancelHistoryReactor(): void {
-		/* noop */
-	}
-
 	readonly schema: StoreSchema<R, Props>
 
 	readonly props: Props
 
-	public readonly scopedTypes: { readonly [K in RecordScope]: ReadonlySet<R['typeName']> }
-
-	public readonly sideEffects = new StoreSideEffects<R>(this)
-
 	constructor(config: {
-		id?: string
 		/** The store's initial data. */
-		initialData?: SerializedStore<R>
+		initialData?: StoreSnapshot<R>
 		/**
 		 * A map of validators for each record type. A record's validator will be called when the record
 		 * is created or updated. It should throw an error if the record is invalid.
@@ -197,53 +156,32 @@ 		schema: StoreSchema<R, Props>
 		props: Props
 	}) {
-		const { initialData, schema, id } = config
-
-		this.id = id ?? uniqueId()
+		const { initialData, schema } = config
+
 		this.schema = schema
 		this.props = config.props
 
 		if (initialData) {
-			this.records = new AtomMap(
-				'store',
-				objectMapEntries(initialData).map(([id, record]) => [
-					id,
-					devFreeze(this.schema.validateRecord(this, record, 'initialize', null)),
-				])
+			this.atoms.set(
+				objectMapFromEntries(
+					objectMapEntries(initialData).map(([id, record]) => [
+						id,
+						atom('atom:' + id, this.schema.validateRecord(this, record, 'initialize', null)),
+					])
+				)
 			)
-		} else {
-			this.records = new AtomMap('store')
 		}
-
-		this.query = new StoreQueries<R>(this.records, this.history)
 
 		this.historyReactor = reactor(
 			'Store.historyReactor',
 			() => {
 				// deref to make sure we're subscribed regardless of whether we need to propagate
-				this.history.get()
+				this.history.value
 				// If we have accumulated history, flush it and update listeners
 				this._flushHistory()
 			},
-			{ scheduleEffect: (cb) => (this.cancelHistoryReactor = throttleToNextFrame(cb)) }
+			{ scheduleEffect: (cb) => throttledRaf(cb) }
 		)
-		this.scopedTypes = {
-			document: new Set(
-				objectMapValues(this.schema.types)
-					.filter((t) => t.scope === 'document')
-					.map((t) => t.typeName)
-			),
-			session: new Set(
-				objectMapValues(this.schema.types)
-					.filter((t) => t.scope === 'session')
-					.map((t) => t.typeName)
-			),
-			presence: new Set(
-				objectMapValues(this.schema.types)
-					.filter((t) => t.scope === 'presence')
-					.map((t) => t.typeName)
-			),
-		}
 	}
 
 	public _flushHistory() {
@@ -251,59 +189,9 @@ 		if (this.historyAccumulator.hasChanges()) {
 			const entries = this.historyAccumulator.flush()
 			for (const { changes, source } of entries) {
-				let instanceChanges = null as null | RecordsDiff<R>
-				let documentChanges = null as null | RecordsDiff<R>
-				let presenceChanges = null as null | RecordsDiff<R>
-				for (const { onHistory, filters } of this.listeners) {
-					if (filters.source !== 'all' && filters.source !== source) {
-						continue
-					}
-					if (filters.scope !== 'all') {
-						if (filters.scope === 'document') {
-							documentChanges ??= this.filterChangesByScope(changes, 'document')
-							if (!documentChanges) continue
-							onHistory({ changes: documentChanges, source })
-						} else if (filters.scope === 'session') {
-							instanceChanges ??= this.filterChangesByScope(changes, 'session')
-							if (!instanceChanges) continue
-							onHistory({ changes: instanceChanges, source })
-						} else {
-							presenceChanges ??= this.filterChangesByScope(changes, 'presence')
-							if (!presenceChanges) continue
-							onHistory({ changes: presenceChanges, source })
-						}
-					} else {
-						onHistory({ changes, source })
-					}
-				}
+				this.listeners.forEach((l) => l({ changes, source }))
 			}
 		}
-	}
-
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
-	/**
-	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
-	 * @param change - the records diff
-	 * @param scope - the records scope
-	 * @returns
-	 */
-	filterChangesByScope(change: RecordsDiff<R>, scope: RecordScope) {
-		const result = {
-			added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
-			updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
-			removed: filterEntries(change.removed, (_, r) => this.scopedTypes[scope].has(r.typeName)),
-		}
-		if (
-			Object.keys(result.added).length === 0 &&
-			Object.keys(result.updated).length === 0 &&
-			Object.keys(result.removed).length === 0
-		) {
-			return null
-		}
-		return result
 	}
 
 	/**
@@ -319,7 +207,7 @@ 		if (this.listeners.size === 0) {
 			this.historyAccumulator.clear()
 		}
-		this.history.set(this.history.get() + 1, changes)
+		this.history.set(this.history.value + 1, changes)
 	}
 
 	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
@@ -327,16 +215,51 @@ 	}
 
 	/**
+	 * A callback fired after a record is created. Use this to perform related updates to other
+	 * records in the store.
+	 *
+	 * @param record - The record to be created
+	 */
+	onAfterCreate?: (record: R) => void
+
+	/**
+	 * A callback fired after each record's change.
+	 *
+	 * @param prev - The previous value, if any.
+	 * @param next - The next value.
+	 */
+	onAfterChange?: (prev: R, next: R) => void
+
+	/**
+	 * A callback fired before a record is deleted.
+	 *
+	 * @param prev - The record that will be deleted.
+	 */
+	onBeforeDelete?: (prev: R) => void
+
+	/**
+	 * A callback fired after a record is deleted.
+	 *
+	 * @param prev - The record that will be deleted.
+	 */
+	onAfterDelete?: (prev: R) => void
+
+	// used to avoid running callbacks when rolling back changes in sync client
+	private _runCallbacks = true
+
+	/**
 	 * Add some records to the store. It's an error if they already exist.
 	 *
 	 * @param records - The records to add.
-	 * @param phaseOverride - The phase override.
-	 * @public
-	 */
-	put(records: R[], phaseOverride?: 'initialize'): void {
-		this.atomic(() => {
+	 * @public
+	 */
+	put = (records: R[], phaseOverride?: 'initialize'): void => {
+		transact(() => {
 			const updates: Record<IdOf<UnknownRecord>, [from: R, to: R]> = {}
 			const additions: Record<IdOf<UnknownRecord>, R> = {}
+
+			const currentMap = this.atoms.__unsafe__getWithoutCapture()
+			let map = null as null | Record<IdOf<UnknownRecord>, Atom<R>>
 
 			// Iterate through all records, creating, updating or removing as needed
 			let record: R
@@ -347,36 +270,35 @@ 			// changes (e.g. additions, deletions, or updates that produce a new value).
 			let didChange = false
 
-			const source = this.isMergingRemoteChanges ? 'remote' : 'user'
-
 			for (let i = 0, n = records.length; i < n; i++) {
 				record = records[i]
 
-				const initialValue = this.records.__unsafe__getWithoutCapture(record.id)
-				// If we already have an atom for this record, update its value.
-				if (initialValue) {
-					// If we have a beforeUpdate callback, run it against the initial and next records
-					record = this.sideEffects.handleBeforeChange(initialValue, record, source)
+				const recordAtom = (map ?? currentMap)[record.id as IdOf<R>]
+
+				if (recordAtom) {
+					// If we already have an atom for this record, update its value.
+
+					const initialValue = recordAtom.__unsafe__getWithoutCapture()
 
 					// Validate the record
-					const validated = this.schema.validateRecord(
+					record = this.schema.validateRecord(
 						this,
 						record,
 						phaseOverride ?? 'updateRecord',
 						initialValue
 					)
 
-					if (validated === initialValue) continue
-
-					record = devFreeze(record)
-					this.records.set(record.id, record)
-
-					didChange = true
-					updates[record.id] = [initialValue, record]
-					this.addDiffForAfterEvent(initialValue, record)
+					recordAtom.set(devFreeze(record))
+
+					// need to deref atom in case nextValue is not identical but is .equals?
+					const finalValue = recordAtom.__unsafe__getWithoutCapture()
+
+					// If the value has changed, assign it to updates.
+					if (initialValue !== finalValue) {
+						didChange = true
+						updates[record.id] = [initialValue, finalValue]
+					}
 				} else {
-					record = this.sideEffects.handleBeforeCreate(record, source)
-
 					didChange = true
 
 					// If we don't have an atom, create one.
@@ -389,15 +311,20 @@ 						null
 					)
 
-					// freeze it
-					record = devFreeze(record)
-
 					// Mark the change as a new addition.
 					additions[record.id] = record
-					this.addDiffForAfterEvent(null, record)
-
-					this.records.set(record.id, record)
+
+					// Assign the atom to the map under the record's id.
+					if (!map) {
+						map = { ...currentMap }
+					}
+					map[record.id] = atom('atom:' + record.id, record)
 				}
+			}
+
+			// Set the map of atoms to the store.
+			if (map) {
+				this.atoms.set(map)
 			}
 
 			// If we did change, update the history
@@ -407,6 +334,22 @@ 				updated: updates,
 				removed: {} as Record<IdOf<R>, R>,
 			})
+
+			const { onAfterCreate, onAfterChange } = this
+
+			if (onAfterCreate && this._runCallbacks) {
+				// Run the onAfterChange callback for addition.
+				Object.values(additions).forEach((record) => {
+					onAfterCreate(record)
+				})
+			}
+
+			if (onAfterChange && this._runCallbacks) {
+				// Run the onAfterChange callback for update.
+				Object.values(updates).forEach(([from, to]) => {
+					onAfterChange(from, to)
+				})
+			}
 		})
 	}
 
@@ -416,33 +359,44 @@ 	 * @param ids - The ids of the records to remove.
 	 * @public
 	 */
-	remove(ids: IdOf<R>[]): void {
-		this.atomic(() => {
-			const toDelete = new Set<IdOf<R>>(ids)
-			const source = this.isMergingRemoteChanges ? 'remote' : 'user'
-
-			if (this.sideEffects.isEnabled()) {
+	remove = (ids: IdOf<R>[]): void => {
+		transact(() => {
+			if (this.onBeforeDelete && this._runCallbacks) {
 				for (const id of ids) {
-					const record = this.records.__unsafe__getWithoutCapture(id)
-					if (!record) continue
-
-					if (this.sideEffects.handleBeforeDelete(record, source) === false) {
-						toDelete.delete(id)
-					}
+					const atom = this.atoms.__unsafe__getWithoutCapture()[id]
+					if (!atom) continue
+
+					this.onBeforeDelete(atom.value)
 				}
 			}
 
-			const actuallyDeleted = this.records.deleteMany(toDelete)
-			if (actuallyDeleted.length === 0) return
-
-			const removed = {} as RecordsDiff<R>['removed']
-			for (const [id, record] of actuallyDeleted) {
-				removed[id] = record
-				this.addDiffForAfterEvent(record, null)
-			}
-
+			let removed = undefined as undefined | RecordsDiff<R>['removed']
+
+			// For each map in our atoms, remove the ids that we are removing.
+			this.atoms.update((atoms) => {
+				let result: typeof atoms | undefined = undefined
+
+				for (const id of ids) {
+					if (!(id in atoms)) continue
+					if (!result) result = { ...atoms }
+					if (!removed) removed = {} as Record<IdOf<R>, R>
+					delete result[id]
+					removed[id] = atoms[id].value
+				}
+
+				return result ?? atoms
+			})
+
+			if (!removed) return
 			// Update the history with the removed records.
 			this.updateHistory({ added: {}, updated: {}, removed } as RecordsDiff<R>)
+
+			// If we have an onAfterChange, run it for each removed record.
+			if (this.onAfterDelete && this._runCallbacks) {
+				for (let i = 0, n = ids.length; i < n; i++) {
+					this.onAfterDelete(removed[ids[i]])
+				}
+			}
 		})
 	}
 
@@ -452,8 +406,8 @@ 	 * @param id - The id of the record to get.
 	 * @public
 	 */
-	get<K extends IdOf<R>>(id: K): RecordFromId<K> | undefined {
-		return this.records.get(id) as RecordFromId<K> | undefined
+	get = <K extends IdOf<R>>(id: K): RecFromId<K> | undefined => {
+		return this.atoms.value[id]?.value as any
 	}
 
 	/**
@@ -462,560 +416,72 @@ 	 * @param id - The id of the record to get.
 	 * @public
 	 */
-	unsafeGetWithoutCapture<K extends IdOf<R>>(id: K): RecordFromId<K> | undefined {
-		return this.records.__unsafe__getWithoutCapture(id) as RecordFromId<K> | undefined
-	}
-
-	/**
-	 * Creates a JSON payload from the record store.
-	 *
-	 * @param scope - The scope of records to serialize. Defaults to 'document'.
+	unsafeGetWithoutCapture = <K extends IdOf<R>>(id: K): RecFromId<K> | undefined => {
+		return this.atoms.value[id]?.__unsafe__getWithoutCapture() as any
+	}
+
+	/**
+	 * Opposite of `deserialize`. Creates a JSON payload from the record store.
+	 *
+	 * @param filter - A function to filter structs that do not satisfy the predicate.
 	 * @returns The record store snapshot as a JSON payload.
 	 */
-	serialize(scope: RecordScope | 'all' = 'document'): SerializedStore<R> {
-		const result = {} as SerializedStore<R>
-		for (const [id, record] of this.records) {
-			if (scope === 'all' || this.scopedTypes[scope].has(record.typeName)) {
-				result[id as IdOf<R>] = record
-			}
+	serialize = (filter?: (record: R) => boolean): StoreSnapshot<R> => {
+		const result = {} as StoreSnapshot<R>
+		for (const [id, atom] of objectMapEntries(this.atoms.value)) {
+			const record = atom.value
+			if (typeof filter === 'function' && !filter(record)) continue
+			result[id as IdOf<R>] = record
 		}
 		return result
 	}
 
 	/**
+	 * The same as `serialize`, but only serializes records with a scope of `document`.
+	 * @returns The record store snapshot as a JSON payload.
+	 */
+	serializeDocumentState = (): StoreSnapshot<R> => {
+		return this.serialize((r) => {
+			const type = this.schema.types[r.typeName as R['typeName']] as RecordType<any, any>
+			return type.scope === 'document'
+		})
+	}
+
+	/**
+	 * Opposite of `serialize`. Replace the store's current records with records as defined by a
+	 * simple JSON structure into the stores.
+	 *
+	 * @param snapshot - The JSON snapshot to deserialize.
+	 * @public
+	 */
+	deserialize = (snapshot: StoreSnapshot<R>): void => {
+		transact(() => {
+			this.clear()
+			this.put(Object.values(snapshot))
+		})
+	}
+
+	/**
 	 * Get a serialized snapshot of the store and its schema.
 	 *
 	 * ```ts
-	 * const snapshot = store.getStoreSnapshot()
-	 * store.loadStoreSnapshot(snapshot)
+	 * const snapshot = store.getSnapshot()
+	 * store.loadSnapshot(snapshot)
 	 * ```
 	 *
-	 * @param scope - The scope of records to serialize. Defaults to 'document'.
-	 *
-	 * @public
-	 */
-	getStoreSnapshot(scope: RecordScope | 'all' = 'document'): StoreSnapshot<R> {
+	 * @public
+	 */
+	getSnapshot() {
 		return {
-			store: this.serialize(scope),
+			store: this.serializeDocumentState(),
 			schema: this.schema.serialize(),
 		}
 	}
 
 	/**
-	 * @deprecated use `getSnapshot` from the 'tldraw' package instead.
-	 */
-	getSnapshot(scope: RecordScope | 'all' = 'document') {
-		console.warn(
-			'[tldraw] `Store.getSnapshot` is deprecated and will be removed in a future release. Use `getSnapshot` from the `tldraw` package instead.'
-		)
-		return this.getStoreSnapshot(scope)
-	}
-
-	/**
-	 * Migrate a serialized snapshot of the store and its schema.
+	 * Load a serialized snapshot.
 	 *
 	 * ```ts
 	 * const snapshot = store.getSnapshot()
-	 * store.migrateSnapshot(snapshot)
-	 * ```
-	 *
-	 * @param snapshot - The snapshot to load.
-	 * @public
-	 */
-	migrateSnapshot(snapshot: StoreSnapshot<R>): StoreSnapshot<R> {
-		const migrationResult = this.schema.migrateStoreSnapshot(snapshot)
-
-		if (migrationResult.type === 'error') {
-			throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`)
-		}
-
-		return {
-			store: migrationResult.value,
-			schema: this.schema.serialize(),
-		}
-	}
-
-	/**
-	 * Load a serialized snapshot.
-	 *
-	 * ```ts
-	 * const snapshot = store.getStoreSnapshot()
-	 * store.loadStoreSnapshot(snapshot)
-	 * ```
-	 *
-	 * @param snapshot - The snapshot to load.
-	 * @public
-	 */
-	loadStoreSnapshot(snapshot: StoreSnapshot<R>): void {
-		const migrationResult = this.schema.migrateStoreSnapshot(snapshot)
-
-		if (migrationResult.type === 'error') {
-			throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`)
-		}
-
-		const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-		try {
-			this.sideEffects.setIsEnabled(false)
-			this.atomic(() => {
-				this.clear()
-				this.put(Object.values(migrationResult.value))
-				this.ensureStoreIsUsable()
-			})
-		} finally {
-			this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-		}
-	}
-
-	/**
-	 * @public
-	 * @deprecated use `loadSnapshot` from the 'tldraw' package instead.
-	 */
-	loadSnapshot(snapshot: StoreSnapshot<R>) {
-		console.warn(
-			"[tldraw] `Store.loadSnapshot` is deprecated and will be removed in a future release. Use `loadSnapshot` from the 'tldraw' package instead."
-		)
-		this.loadStoreSnapshot(snapshot)
-	}
-
-	/**
-	 * Get an array of all values in the store.
-	 *
-	 * @returns An array of all values in the store.
-	 * @public
-	 */
-	allRecords(): R[] {
-		return Array.from(this.records.values())
-	}
-
-	/**
-	 * Removes all records from the store.
-	 *
-	 * @public
-	 */
-	clear(): void {
-		this.remove(Array.from(this.records.keys()))
-	}
-
-	/**
-	 * Update a record. To update multiple records at once, use the `update` method of the
-	 * `TypedStore` class.
-	 *
-	 * @param id - The id of the record to update.
-	 * @param updater - A function that updates the record.
-	 */
-	update<K extends IdOf<R>>(id: K, updater: (record: RecordFromId<K>) => RecordFromId<K>) {
-		const existing = this.unsafeGetWithoutCapture(id)
-		if (!existing) {
-			console.error(`Record ${id} not found. This is probably an error`)
-			return
-		}
-
-		this.put([updater(existing) as any])
-	}
-
-	/**
-	 * Get whether the record store has a id.
-	 *
-	 * @param id - The id of the record to check.
-	 * @public
-	 */
-	has<K extends IdOf<R>>(id: K): boolean {
-		return this.records.has(id)
-	}
-
-	/**
-	 * Add a new listener to the store.
-	 *
-	 * @param onHistory - The listener to call when the store updates.
-	 * @param filters - Filters to apply to the listener.
-	 * @returns A function to remove the listener.
-	 */
-	listen(onHistory: StoreListener<R>, filters?: Partial<StoreListenerFilters>) {
-		// flush history so that this listener's history starts from exactly now
-		this._flushHistory()
-
-		const listener = {
-			onHistory,
-			filters: {
-				source: filters?.source ?? 'all',
-				scope: filters?.scope ?? 'all',
-			},
-		}
-
-		if (!this.historyReactor.scheduler.isActivelyListening) {
-			this.historyReactor.start()
-			this.historyReactor.scheduler.execute()
-		}
-
-		this.listeners.add(listener)
-
-		return () => {
-			this.listeners.delete(listener)
-
-			if (this.listeners.size === 0) {
-				this.historyReactor.stop()
-			}
-		}
-	}
-
-	private isMergingRemoteChanges = false
-
-	/**
-	 * Merge changes from a remote source
-	 *
-	 * @param fn - A function that merges the external changes.
-	 * @public
-	 */
-	mergeRemoteChanges(fn: () => void) {
-		if (this.isMergingRemoteChanges) {
-			return fn()
-		}
-
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
-		try {
-			this.atomic(fn, true, true)
-		} finally {
-			this.ensureStoreIsUsable()
-		}
-	}
-
-	/**
-	 * Run `fn` and return a {@link RecordsDiff} of the changes that occurred as a result.
-	 */
-	extractingChanges(fn: () => void): RecordsDiff<R> {
-		const changes: Array<RecordsDiff<R>> = []
-		const dispose = this.historyAccumulator.addInterceptor((entry) => changes.push(entry.changes))
-		try {
-			transact(fn)
-			return squashRecordDiffs(changes)
-		} finally {
-			dispose()
-		}
-	}
-
-	applyDiff(
-		diff: RecordsDiff<R>,
-		{
-			runCallbacks = true,
-			ignoreEphemeralKeys = false,
-		}: { runCallbacks?: boolean; ignoreEphemeralKeys?: boolean } = {}
-	) {
-		this.atomic(() => {
-			const toPut = objectMapValues(diff.added)
-
-			for (const [_from, to] of objectMapValues(diff.updated)) {
-				const type = this.schema.getType(to.typeName)
-				if (ignoreEphemeralKeys && type.ephemeralKeySet.size) {
-					const existing = this.get(to.id)
-					if (!existing) {
-						toPut.push(to)
-						continue
-					}
-					let changed: R | null = null
-					for (const [key, value] of Object.entries(to)) {
-						if (type.ephemeralKeySet.has(key) || Object.is(value, getOwnProperty(existing, key))) {
-							continue
-						}
-
-						if (!changed) changed = { ...existing } as R
-						;(changed as any)[key] = value
-					}
-					if (changed) toPut.push(changed)
-				} else {
-					toPut.push(to)
-				}
-			}
-
-			const toRemove = objectMapKeys(diff.removed)
-			if (toPut.length) {
-				this.put(toPut)
-			}
-			if (toRemove.length) {
-				this.remove(toRemove)
-			}
-		}, runCallbacks)
-	}
-
-	/**
-	 * Create a cache based on values in the store. Pass in a function that takes and ID and a
-	 * signal for the underlying record. Return a signal (usually a computed) for the cached value.
-	 * For simple derivations, use {@link Store.createComputedCache}. This function is useful if you
-	 * need more precise control over intermediate values.
-	 */
-	createCache<Result, Record extends R = R>(
-		create: (id: IdOf<Record>, recordSignal: Signal<R>) => Signal<Result>
-	) {
-		const cache = new WeakCache<Atom<any>, Signal<Result>>()
-		return {
-			get: (id: IdOf<Record>) => {
-				const atom = this.records.getAtom(id)
-				if (!atom) return undefined
-				return cache.get(atom, () => create(id, atom as Signal<R>)).get()
-			},
-		}
-	}
-
-	/**
-	 * Create a computed cache.
-	 *
-	 * @param name - The name of the derivation cache.
-	 * @param derive - A function used to derive the value of the cache.
-	 * @param opts - Options for the computed cache.
-	 * @public
-	 */
-	createComputedCache<Result, Record extends R = R>(
-		name: string,
-		derive: (record: Record) => Result | undefined,
-		opts?: CreateComputedCacheOpts<Result, Record>
-	): ComputedCache<Result, Record> {
-		return this.createCache((id, record) => {
-			const recordSignal = opts?.areRecordsEqual
-				? computed(`${name}:${id}:isEqual`, () => record.get(), { isEqual: opts.areRecordsEqual })
-				: record
-
-			return computed<Result | undefined>(
-				name + ':' + id,
-				() => {
-					return derive(recordSignal.get() as Record)
-				},
-				{
-					isEqual: opts?.areResultsEqual,
-				}
-			)
-		})
-	}
-
-	private _integrityChecker?: () => void | undefined
-
-	/** @internal */
-	ensureStoreIsUsable() {
-		this.atomic(() => {
-			this._integrityChecker ??= this.schema.createIntegrityChecker(this)
-			this._integrityChecker?.()
-		})
-	}
-
-	private _isPossiblyCorrupted = false
-	/** @internal */
-	markAsPossiblyCorrupted() {
-		this._isPossiblyCorrupted = true
-	}
-	/** @internal */
-	isPossiblyCorrupted() {
-		return this._isPossiblyCorrupted
-	}
-
-	private pendingAfterEvents: Map<IdOf<R>, { before: R | null; after: R | null }> | null = null
-	private addDiffForAfterEvent(before: R | null, after: R | null) {
-		assert(this.pendingAfterEvents, 'must be in event operation')
-		if (before === after) return
-		if (before && after) assert(before.id === after.id)
-		if (!before && !after) return
-		const id = (before || after)!.id
-		const existing = this.pendingAfterEvents.get(id)
-		if (existing) {
-			existing.after = after
-		} else {
-			this.pendingAfterEvents.set(id, { before, after })
-		}
-	}
-	private flushAtomicCallbacks(isMergingRemoteChanges: boolean) {
-		let updateDepth = 0
-		let source: ChangeSource = isMergingRemoteChanges ? 'remote' : 'user'
-		while (this.pendingAfterEvents) {
-			const events = this.pendingAfterEvents
-			this.pendingAfterEvents = null
-
-			if (!this.sideEffects.isEnabled()) continue
-
-			updateDepth++
-			if (updateDepth > 100) {
-				throw new Error('Maximum store update depth exceeded, bailing out')
-			}
-
-			for (const { before, after } of events.values()) {
-				if (before && after && before !== after && !isEqual(before, after)) {
-					this.sideEffects.handleAfterChange(before, after, source)
-				} else if (before && !after) {
-					this.sideEffects.handleAfterDelete(before, source)
-				} else if (!before && after) {
-					this.sideEffects.handleAfterCreate(after, source)
-				}
-			}
-
-			if (!this.pendingAfterEvents) {
-				this.sideEffects.handleOperationComplete(source)
-			} else {
-				// if the side effects triggered by a remote operation resulted in more effects,
-				// those extra effects should not be marked as originating remotely.
-				source = 'user'
-			}
-		}
-	}
-	private _isInAtomicOp = false
-	/** @internal */
-	atomic<T>(fn: () => T, runCallbacks = true, isMergingRemoteChanges = false): T {
-		return transact(() => {
-			if (this._isInAtomicOp) {
-				if (!this.pendingAfterEvents) this.pendingAfterEvents = new Map()
-				const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-				assert(!isMergingRemoteChanges, 'cannot call mergeRemoteChanges while in atomic operation')
-				try {
-					// if we are in an atomic context with side effects ON allow switching before* callbacks OFF.
-					// but don't allow switching them ON if they had been marked OFF before.
-					if (prevSideEffectsEnabled && !runCallbacks) {
-						this.sideEffects.setIsEnabled(false)
-					}
-					return fn()
-				} finally {
-					this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-				}
-			}
-
-			this.pendingAfterEvents = new Map()
-			const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-			this.sideEffects.setIsEnabled(runCallbacks ?? prevSideEffectsEnabled)
-			this._isInAtomicOp = true
-
-			if (isMergingRemoteChanges) {
-				this.isMergingRemoteChanges = true
-			}
-
-			try {
-				const result = fn()
-				this.isMergingRemoteChanges = false
-
-				this.flushAtomicCallbacks(isMergingRemoteChanges)
-
-				return result
-			} finally {
-				this.pendingAfterEvents = null
-				this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-				this._isInAtomicOp = false
-				this.isMergingRemoteChanges = false
-			}
-		})
-	}
-
-	/** @internal */
-	addHistoryInterceptor(fn: (entry: HistoryEntry<R>, source: ChangeSource) => void) {
-		return this.historyAccumulator.addInterceptor((entry) =>
-			fn(entry, this.isMergingRemoteChanges ? 'remote' : 'user')
-		)
-	}
-}
-
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
-}
-
-/** @public */
-export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
-/** @public */
-export type StoreObjectRecordType<Context extends StoreObject<any>> =
-	Context extends Store<infer R> ? R : Context extends { store: Store<infer R> } ? R : never
-
-/**
- * Free version of {@link Store.createComputedCache}.
- *
- * @example
- * ```ts
- * const myCache = createComputedCache('myCache', (editor: Editor, shape: TLShape) => {
- *     return editor.getSomethingExpensive(shape)
- * })
- *
- * myCache.get(editor, shape.id)
- * ```
- *
- * @public
- */
-export function createComputedCache<
-	Context extends StoreObject<any>,
-	Result,
-	Record extends StoreObjectRecordType<Context> = StoreObjectRecordType<Context>,
->(
-	name: string,
-	derive: (context: Context, record: Record) => Result | undefined,
-	opts?: CreateComputedCacheOpts<Result, Record>
-) {
-	const cache = new WeakCache<Context, ComputedCache<Result, Record>>()
-	return {
-		get(context: Context, id: IdOf<Record>) {
-			const computedCache = cache.get(context, () => {
-				const store = (context instanceof Store ? context : context.store) as Store<Record>
-				return store.createComputedCache(name, (record) => derive(context, record), opts)
-			})
-			return computedCache.get(id)
-		},
-	}
-}+	 * store.loadSnapshot(snapshot)
+	 *