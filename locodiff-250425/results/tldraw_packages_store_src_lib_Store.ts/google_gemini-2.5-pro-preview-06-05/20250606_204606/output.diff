
index 489e95479..83ae62bef 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmprvt81k5j_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpw4ci5d2j_actual.txt	
@@ -280,6 +280,22 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
+	/**
+	 * Update the history with a diff of changes.
+	 *
+	 * @param changes - The changes to add to the history.
+	 */
+	private updateHistory(changes: RecordsDiff<R>): void {
+		this.historyAccumulator.add({
+			changes,
+			source: this.isMergingRemoteChanges ? 'remote' : 'user',
+		})
+		if (this.listeners.size === 0) {
+			this.historyAccumulator.clear()
+		}
+		this.history.set(this.history.get() + 1, changes)
+	}
+
 	dispose() {
 		this.cancelHistoryReactor()
 	}
@@ -306,22 +322,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		return result
 	}
 
-	/**
-	 * Update the history with a diff of changes.
-	 *
-	 * @param changes - The changes to add to the history.
-	 */
-	private updateHistory(changes: RecordsDiff<R>): void {
-		this.historyAccumulator.add({
-			changes,
-			source: this.isMergingRemoteChanges ? 'remote' : 'user',
-		})
-		if (this.listeners.size === 0) {
-			this.historyAccumulator.clear()
-		}
-		this.history.set(this.history.get() + 1, changes)
-	}
-
 	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
 		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
 	}
@@ -467,7 +467,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 
 	/**
-	 * Creates a JSON payload from the record store.
+	 * Opposite of `deserialize`. Creates a JSON payload from the record store.
 	 *
 	 * @param scope - The scope of records to serialize. Defaults to 'document'.
 	 * @returns The record store snapshot as a JSON payload.
