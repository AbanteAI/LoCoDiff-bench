
index 489e95479..faab8c737 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmp93hpbm_2_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpsz7zq3x0_actual.txt	
@@ -21,14 +21,9 @@ import { StoreSideEffects } from './StoreSideEffects'
 import { devFreeze } from './devFreeze'
 
 /** @public */
-export type RecordFromId<K extends RecordId<UnknownRecord>> =
-	K extends RecordId<infer R> ? R : never
+export type RecordFromId<K extends RecordId<UnknownRecord>> = K extends RecordId<infer R> ? R : never
 
-/**
- * A diff describing the changes to a collection.
- *
- * @public
- */
+/** @public */
 export interface CollectionDiff<T> {
 	added?: Set<T>
 	removed?: Set<T>
@@ -280,10 +275,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
@@ -572,7 +563,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 */
 	loadSnapshot(snapshot: StoreSnapshot<R>) {
 		console.warn(
-			"[tldraw] `Store.loadSnapshot` is deprecated and will be removed in a future release. Use `loadSnapshot` from the 'tldraw' package instead."
+			"[tldraw] `Store.loadSnapshot` is deprecated and will be removed in a future release. Use `loadSnapshot` from the 'tldraw` package instead."
 		)
 		this.loadStoreSnapshot(snapshot)
 	}
@@ -671,15 +662,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 			return fn()
 		}
 
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
-		try {
-			this.atomic(fn, true, true)
-		} finally {
-			this.ensureStoreIsUsable()
-		}
+		this.atomic(fn, true, true)
 	}
 
 	/**
@@ -908,6 +891,64 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
+/**
+ * Squash a collection of diffs into a single diff.
+ *
+ * @param diffs - An array of diffs to squash.
+ * @returns A single diff that represents the squashed diffs.
+ * @public
+ */
+export function squashRecordDiffs<T extends UnknownRecord>(
+	diffs: RecordsDiff<T>[]
+): RecordsDiff<T> {
+	const result = { added: {}, removed: {}, updated: {} } as RecordsDiff<T>
+
+	for (const diff of diffs) {
+		for (const [id, value] of objectMapEntries(diff.added)) {
+			if (result.removed[id]) {
+				const original = result.removed[id]
+				delete result.removed[id]
+				if (original !== value) {
+					result.updated[id] = [original, value]
+				}
+			} else {
+				result.added[id] = value
+			}
+		}
+
+		for (const [id, [_from, to]] of objectMapEntries(diff.updated)) {
+			if (result.added[id]) {
+				result.added[id] = to
+				delete result.updated[id]
+				delete result.removed[id]
+				continue
+			}
+			if (result.updated[id]) {
+				result.updated[id] = [result.updated[id][0], to]
+				delete result.removed[id]
+				continue
+			}
+
+			result.updated[id] = diff.updated[id]
+			delete result.removed[id]
+		}
+
+		for (const [id, value] of objectMapEntries(diff.removed)) {
+			// the same record was added in this diff sequence, just drop it
+			if (result.added[id]) {
+				delete result.added[id]
+			} else if (result.updated[id]) {
+				result.removed[id] = result.updated[id][0]
+				delete result.updated[id]
+			} else {
+				result.removed[id] = value
+			}
+		}
+	}
+
+	return result
+}
+
 /**
  * Collect all history entries by their adjacent sources.
  * For example, [user, user, remote, remote, user] would result in [user, remote, user],
@@ -945,6 +986,15 @@ function squashHistoryEntries<T extends UnknownRecord>(
 	)
 }
 
+/** @public */
+export function reverseRecordsDiff(diff: RecordsDiff<any>) {
+	const result: RecordsDiff<any> = { added: diff.removed, removed: diff.added, updated: {} }
+	for (const [from, to] of Object.values(diff.updated)) {
+		result.updated[from.id] = [to, from]
+	}
+	return result
+}
+
 class HistoryAccumulator<T extends UnknownRecord> {
 	private _history: HistoryEntry<T>[] = []
 
