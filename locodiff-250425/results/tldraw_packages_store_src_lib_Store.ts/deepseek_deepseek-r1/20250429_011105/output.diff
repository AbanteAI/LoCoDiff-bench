
index 489e9547..6fd21a67 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpmf7p7thg_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmpgodn327c_actual.txt	
@@ -10,7 +10,6 @@ import {
 	throttleToNextFrame,
 	uniqueId,
 } from '@tldraw/utils'
-import isEqual from 'lodash.isequal'
 import { AtomMap } from './AtomMap'
 import { IdOf, RecordId, UnknownRecord } from './BaseRecord'
 import { RecordScope } from './RecordType'
@@ -21,14 +20,12 @@ import { StoreSideEffects } from './StoreSideEffects'
 import { devFreeze } from './devFreeze'
 
 /** @public */
-export type RecordFromId<K extends RecordId<UnknownRecord>> =
-	K extends RecordId<infer R> ? R : never
+export type RecordFromId<K extends RecordId<UnknownRecord>> = K extends RecordId<infer R> ? R : never
 
 /**
  * A diff describing the changes to a collection.
  *
- * @public
- */
+ * @public */
 export interface CollectionDiff<T> {
 	added?: Set<T>
 	removed?: Set<T>
@@ -46,8 +43,7 @@ export interface StoreListenerFilters {
 /**
  * An entry containing changes that originated either by user actions or remote changes.
  *
- * @public
- */
+ * @public */
 export interface HistoryEntry<R extends UnknownRecord = UnknownRecord> {
 	changes: RecordsDiff<R>
 	source: ChangeSource
@@ -56,15 +52,13 @@ export interface HistoryEntry<R extends UnknownRecord = UnknownRecord> {
 /**
  * A function that will be called when the history changes.
  *
- * @public
- */
+ * @public */
 export type StoreListener<R extends UnknownRecord> = (entry: HistoryEntry<R>) => void
 
 /**
  * A record store is a collection of records of different types.
  *
- * @public
- */
+ * @public */
 export interface ComputedCache<Data, R extends UnknownRecord> {
 	get(id: IdOf<R>): Data | undefined
 }
@@ -78,8 +72,7 @@ export interface CreateComputedCacheOpts<Data, R extends UnknownRecord> {
 /**
  * A serialized snapshot of the record store's values.
  *
- * @public
- */
+ * @public */
 export type SerializedStore<R extends UnknownRecord> = Record<IdOf<R>, R>
 
 /** @public */
@@ -114,8 +107,7 @@ export type StoreRecord<S extends Store<any>> = S extends Store<infer R> ? R : n
 /**
  * A store of records.
  *
- * @public
- */
+ * @public */
 export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	/**
 	 * The random id of the store.
@@ -174,7 +166,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 *
 	 * @internal
 	 */
-	private cancelHistoryReactor(): void {
+	private cancelHistoryReactor: () => void = () => {
 		/* noop */
 	}
 
@@ -227,6 +219,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 			},
 			{ scheduleEffect: (cb) => (this.cancelHistoryReactor = throttleToNextFrame(cb)) }
 		)
+
 		this.scopedTypes = {
 			document: new Set(
 				objectMapValues(this.schema.types)
@@ -246,6 +239,10 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
+	dispose() {
+		this.cancelHistoryReactor()
+	}
+
 	public _flushHistory() {
 		// If we have accumulated history, flush it and update listeners
 		if (this.historyAccumulator.hasChanges()) {
@@ -280,10 +277,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
@@ -671,10 +664,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 			return fn()
 		}
 
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
 		try {
 			this.atomic(fn, true, true)
 		} finally {
@@ -908,43 +897,6 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	}
 }
 
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
 class HistoryAccumulator<T extends UnknownRecord> {
 	private _history: HistoryEntry<T>[] = []
 
@@ -997,8 +949,7 @@ export type StoreObjectRecordType<Context extends StoreObject<any>> =
  * myCache.get(editor, shape.id)
  * ```
  *
- * @public
- */
+ * @public */
 export function createComputedCache<
 	Context extends StoreObject<any>,
 	Result,
