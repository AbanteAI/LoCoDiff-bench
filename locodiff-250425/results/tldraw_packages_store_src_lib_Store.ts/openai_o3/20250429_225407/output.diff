--- tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected)+++ tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual)@@ -1,4 +1,12 @@-import { Atom, Reactor, Signal, atom, computed, reactor, transact } from '@tldraw/state'
+import {
+	Atom,
+	Reactor,
+	Signal,
+	atom,
+	computed,
+	reactor,
+	transact,
+} from '@tldraw/state'
 import {
 	WeakCache,
 	assert,
@@ -21,8 +29,11 @@ import { devFreeze } from './devFreeze'
 
 /** @public */
-export type RecordFromId<K extends RecordId<UnknownRecord>> =
-	K extends RecordId<infer R> ? R : never
+export type RecordFromId<K extends RecordId<UnknownRecord>> = K extends RecordId<
+	infer R
+>
+	? R
+	: never
 
 /**
  * A diff describing the changes to a collection.
@@ -135,9 +146,7 @@ 	 * @public
 	 * @readonly
 	 */
-	readonly history: Atom<number, RecordsDiff<R>> = atom('history', 0, {
-		historyLength: 1000,
-	})
+	readonly history = atom('history', 0, { historyLength: 1000 })
 
 	/**
 	 * A StoreQueries instance for this store.
@@ -206,8 +215,8 @@ 		if (initialData) {
 			this.records = new AtomMap(
 				'store',
-				objectMapEntries(initialData).map(([id, record]) => [
-					id,
+				objectMapEntries(initialData).map(([key, record]) => [
+					key,
 					devFreeze(this.schema.validateRecord(this, record, 'initialize', null)),
 				])
 			)
@@ -280,10 +289,6 @@ 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
@@ -353,6 +358,7 @@ 				record = records[i]
 
 				const initialValue = this.records.__unsafe__getWithoutCapture(record.id)
+
 				// If we already have an atom for this record, update its value.
 				if (initialValue) {
 					// If we have a beforeUpdate callback, run it against the initial and next records
@@ -378,8 +384,6 @@ 					record = this.sideEffects.handleBeforeCreate(record, source)
 
 					didChange = true
-
-					// If we don't have an atom, create one.
 
 					// Validate the record
 					record = this.schema.validateRecord(
@@ -671,10 +675,6 @@ 			return fn()
 		}
 
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
 		try {
 			this.atomic(fn, true, true)
 		} finally {
@@ -682,9 +682,6 @@ 		}
 	}
 
-	/**
-	 * Run `fn` and return a {@link RecordsDiff} of the changes that occurred as a result.
-	 */
 	extractingChanges(fn: () => void): RecordsDiff<R> {
 		const changes: Array<RecordsDiff<R>> = []
 		const dispose = this.historyAccumulator.addInterceptor((entry) => changes.push(entry.changes))
@@ -716,7 +713,10 @@ 					}
 					let changed: R | null = null
 					for (const [key, value] of Object.entries(to)) {
-						if (type.ephemeralKeySet.has(key) || Object.is(value, getOwnProperty(existing, key))) {
+						if (
+							type.ephemeralKeySet.has(key) ||
+							Object.is(value, getOwnProperty(existing, key))
+						) {
 							continue
 						}
 
@@ -773,7 +773,9 @@ 	): ComputedCache<Result, Record> {
 		return this.createCache((id, record) => {
 			const recordSignal = opts?.areRecordsEqual
-				? computed(`${name}:${id}:isEqual`, () => record.get(), { isEqual: opts.areRecordsEqual })
+				? computed(`${name}:${id}:isEqual`, () => record.get(), {
+						isEqual: opts.areRecordsEqual,
+				  })
 				: record
 
 			return computed<Result | undefined>(
@@ -849,8 +851,7 @@ 			if (!this.pendingAfterEvents) {
 				this.sideEffects.handleOperationComplete(source)
 			} else {
-				// if the side effects triggered by a remote operation resulted in more effects,
-				// those extra effects should not be marked as originating remotely.
+				// any subsequent events are considered user-originated
 				source = 'user'
 			}
 		}
@@ -864,8 +865,8 @@ 				const prevSideEffectsEnabled = this.sideEffects.isEnabled()
 				assert(!isMergingRemoteChanges, 'cannot call mergeRemoteChanges while in atomic operation')
 				try {
-					// if we are in an atomic context with side effects ON allow switching before* callbacks OFF.
-					// but don't allow switching them ON if they had been marked OFF before.
+					// allow switching before* callbacks off inside nested atomic blocks,
+					// but don't allow switching them on if they were previously off
 					if (prevSideEffectsEnabled && !runCallbacks) {
 						this.sideEffects.setIsEnabled(false)
 					}
@@ -905,6 +906,10 @@ 		return this.historyAccumulator.addInterceptor((entry) =>
 			fn(entry, this.isMergingRemoteChanges ? 'remote' : 'user')
 		)
+	}
+
+	dispose() {
+		this.cancelHistoryReactor()
 	}
 }
 
