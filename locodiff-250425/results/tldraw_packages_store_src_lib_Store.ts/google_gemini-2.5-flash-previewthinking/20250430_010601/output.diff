--- tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected)+++ tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual)@@ -246,7 +246,11 @@ 		}
 	}
 
-	public _flushHistory() {
+	dispose(): void {
+		this.cancelHistoryReactor()
+	}
+
+	public _flushHistory(): void {
 		// If we have accumulated history, flush it and update listeners
 		if (this.historyAccumulator.hasChanges()) {
 			const entries = this.historyAccumulator.flush()
@@ -280,17 +284,13 @@ 		}
 	}
 
-	dispose() {
-		this.cancelHistoryReactor()
-	}
-
 	/**
 	 * Filters out non-document changes from a diff. Returns null if there are no changes left.
 	 * @param change - the records diff
 	 * @param scope - the records scope
 	 * @returns
 	 */
-	filterChangesByScope(change: RecordsDiff<R>, scope: RecordScope) {
+	filterChangesByScope(change: RecordsDiff<R>, scope: RecordScope): RecordsDiff<R> | null {
 		const result = {
 			added: filterEntries(change.added, (_, r) => this.scopedTypes[scope].has(r.typeName)),
 			updated: filterEntries(change.updated, (_, r) => this.scopedTypes[scope].has(r[1].typeName)),
@@ -322,8 +322,10 @@ 		this.history.set(this.history.get() + 1, changes)
 	}
 
-	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests') {
-		this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
+	validate(phase: 'initialize' | 'createRecord' | 'updateRecord' | 'tests'): void {
+		this.atomic(() => {
+			this.allRecords().forEach((record) => this.schema.validateRecord(this, record, phase, null))
+		})
 	}
 
 	/**
@@ -515,7 +517,7 @@ 	 * Migrate a serialized snapshot of the store and its schema.
 	 *
 	 * ```ts
-	 * const snapshot = store.getSnapshot()
+	 * const snapshot = store.getStoreSnapshot()
 	 * store.migrateSnapshot(snapshot)
 	 * ```
 	 *
@@ -666,13 +668,9 @@ 	 * @param fn - A function that merges the external changes.
 	 * @public
 	 */
-	mergeRemoteChanges(fn: () => void) {
+	mergeRemoteChanges(fn: () => void): void {
 		if (this.isMergingRemoteChanges) {
 			return fn()
-		}
-
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
 		}
 
 		try {
@@ -702,7 +700,7 @@ 			runCallbacks = true,
 			ignoreEphemeralKeys = false,
 		}: { runCallbacks?: boolean; ignoreEphemeralKeys?: boolean } = {}
-	) {
+	): void {
 		this.atomic(() => {
 			const toPut = objectMapValues(diff.added)
 
@@ -791,7 +789,7 @@ 	private _integrityChecker?: () => void | undefined
 
 	/** @internal */
-	ensureStoreIsUsable() {
+	ensureStoreIsUsable(): void {
 		this.atomic(() => {
 			this._integrityChecker ??= this.schema.createIntegrityChecker(this)
 			this._integrityChecker?.()
@@ -800,16 +798,17 @@ 
 	private _isPossiblyCorrupted = false
 	/** @internal */
-	markAsPossiblyCorrupted() {
+	markAsPossiblyCorrupted(): void {
 		this._isPossiblyCorrupted = true
 	}
 	/** @internal */
-	isPossiblyCorrupted() {
+	isPossiblyCorrupted(): boolean {
 		return this._isPossiblyCorrupted
 	}
 
+
 	private pendingAfterEvents: Map<IdOf<R>, { before: R | null; after: R | null }> | null = null
-	private addDiffForAfterEvent(before: R | null, after: R | null) {
+	private addDiffForAfterEvent(before: R | null, after: R | null): void {
 		assert(this.pendingAfterEvents, 'must be in event operation')
 		if (before === after) return
 		if (before && after) assert(before.id === after.id)
@@ -822,7 +821,7 @@ 			this.pendingAfterEvents.set(id, { before, after })
 		}
 	}
-	private flushAtomicCallbacks(isMergingRemoteChanges: boolean) {
+	private flushAtomicCallbacks(isMergingRemoteChanges: boolean): void {
 		let updateDepth = 0
 		let source: ChangeSource = isMergingRemoteChanges ? 'remote' : 'user'
 		while (this.pendingAfterEvents) {
@@ -905,77 +904,6 @@ 		return this.historyAccumulator.addInterceptor((entry) =>
 			fn(entry, this.isMergingRemoteChanges ? 'remote' : 'user')
 		)
-	}
-}
-
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
 	}
 }
 
