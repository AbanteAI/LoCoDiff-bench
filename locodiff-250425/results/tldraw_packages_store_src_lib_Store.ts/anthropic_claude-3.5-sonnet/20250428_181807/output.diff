
index 489e9547..330ff3f0 100644
--- a/tldraw_packages_store_src_lib_Store.ts_expectedoutput.txt (expected):tmp/tmpjqm6iin5_expected.txt	
+++ b/tldraw_packages_store_src_lib_Store.ts_extracted.txt (actual):tmp/tmp2zmsjs60_actual.txt	
@@ -121,6 +121,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * The random id of the store.
 	 */
 	public readonly id: string
+
 	/**
 	 * An AtomMap containing the stores records.
 	 *
@@ -384,7 +385,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 					// Validate the record
 					record = this.schema.validateRecord(
 						this,
-						record as R,
+						record,
 						phaseOverride ?? 'createRecord',
 						null
 					)
@@ -516,7 +517,7 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 *
 	 * ```ts
 	 * const snapshot = store.getSnapshot()
-	 * store.migrateSnapshot(snapshot)
+	 * store.loadSnapshot(snapshot)
 	 * ```
 	 *
 	 * @param snapshot - The snapshot to load.
@@ -541,481 +542,4 @@ export class Store<R extends UnknownRecord = UnknownRecord, Props = unknown> {
 	 * ```ts
 	 * const snapshot = store.getStoreSnapshot()
 	 * store.loadStoreSnapshot(snapshot)
-	 * ```
-	 *
-	 * @param snapshot - The snapshot to load.
-	 * @public
-	 */
-	loadStoreSnapshot(snapshot: StoreSnapshot<R>): void {
-		const migrationResult = this.schema.migrateStoreSnapshot(snapshot)
-
-		if (migrationResult.type === 'error') {
-			throw new Error(`Failed to migrate snapshot: ${migrationResult.reason}`)
-		}
-
-		const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-		try {
-			this.sideEffects.setIsEnabled(false)
-			this.atomic(() => {
-				this.clear()
-				this.put(Object.values(migrationResult.value))
-				this.ensureStoreIsUsable()
-			})
-		} finally {
-			this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-		}
-	}
-
-	/**
-	 * @public
-	 * @deprecated use `loadSnapshot` from the 'tldraw' package instead.
-	 */
-	loadSnapshot(snapshot: StoreSnapshot<R>) {
-		console.warn(
-			"[tldraw] `Store.loadSnapshot` is deprecated and will be removed in a future release. Use `loadSnapshot` from the 'tldraw' package instead."
-		)
-		this.loadStoreSnapshot(snapshot)
-	}
-
-	/**
-	 * Get an array of all values in the store.
-	 *
-	 * @returns An array of all values in the store.
-	 * @public
-	 */
-	allRecords(): R[] {
-		return Array.from(this.records.values())
-	}
-
-	/**
-	 * Removes all records from the store.
-	 *
-	 * @public
-	 */
-	clear(): void {
-		this.remove(Array.from(this.records.keys()))
-	}
-
-	/**
-	 * Update a record. To update multiple records at once, use the `update` method of the
-	 * `TypedStore` class.
-	 *
-	 * @param id - The id of the record to update.
-	 * @param updater - A function that updates the record.
-	 */
-	update<K extends IdOf<R>>(id: K, updater: (record: RecordFromId<K>) => RecordFromId<K>) {
-		const existing = this.unsafeGetWithoutCapture(id)
-		if (!existing) {
-			console.error(`Record ${id} not found. This is probably an error`)
-			return
-		}
-
-		this.put([updater(existing) as any])
-	}
-
-	/**
-	 * Get whether the record store has a id.
-	 *
-	 * @param id - The id of the record to check.
-	 * @public
-	 */
-	has<K extends IdOf<R>>(id: K): boolean {
-		return this.records.has(id)
-	}
-
-	/**
-	 * Add a new listener to the store.
-	 *
-	 * @param onHistory - The listener to call when the store updates.
-	 * @param filters - Filters to apply to the listener.
-	 * @returns A function to remove the listener.
-	 */
-	listen(onHistory: StoreListener<R>, filters?: Partial<StoreListenerFilters>) {
-		// flush history so that this listener's history starts from exactly now
-		this._flushHistory()
-
-		const listener = {
-			onHistory,
-			filters: {
-				source: filters?.source ?? 'all',
-				scope: filters?.scope ?? 'all',
-			},
-		}
-
-		if (!this.historyReactor.scheduler.isActivelyListening) {
-			this.historyReactor.start()
-			this.historyReactor.scheduler.execute()
-		}
-
-		this.listeners.add(listener)
-
-		return () => {
-			this.listeners.delete(listener)
-
-			if (this.listeners.size === 0) {
-				this.historyReactor.stop()
-			}
-		}
-	}
-
-	private isMergingRemoteChanges = false
-
-	/**
-	 * Merge changes from a remote source
-	 *
-	 * @param fn - A function that merges the external changes.
-	 * @public
-	 */
-	mergeRemoteChanges(fn: () => void) {
-		if (this.isMergingRemoteChanges) {
-			return fn()
-		}
-
-		if (this._isInAtomicOp) {
-			throw new Error('Cannot merge remote changes while in atomic operation')
-		}
-
-		try {
-			this.atomic(fn, true, true)
-		} finally {
-			this.ensureStoreIsUsable()
-		}
-	}
-
-	/**
-	 * Run `fn` and return a {@link RecordsDiff} of the changes that occurred as a result.
-	 */
-	extractingChanges(fn: () => void): RecordsDiff<R> {
-		const changes: Array<RecordsDiff<R>> = []
-		const dispose = this.historyAccumulator.addInterceptor((entry) => changes.push(entry.changes))
-		try {
-			transact(fn)
-			return squashRecordDiffs(changes)
-		} finally {
-			dispose()
-		}
-	}
-
-	applyDiff(
-		diff: RecordsDiff<R>,
-		{
-			runCallbacks = true,
-			ignoreEphemeralKeys = false,
-		}: { runCallbacks?: boolean; ignoreEphemeralKeys?: boolean } = {}
-	) {
-		this.atomic(() => {
-			const toPut = objectMapValues(diff.added)
-
-			for (const [_from, to] of objectMapValues(diff.updated)) {
-				const type = this.schema.getType(to.typeName)
-				if (ignoreEphemeralKeys && type.ephemeralKeySet.size) {
-					const existing = this.get(to.id)
-					if (!existing) {
-						toPut.push(to)
-						continue
-					}
-					let changed: R | null = null
-					for (const [key, value] of Object.entries(to)) {
-						if (type.ephemeralKeySet.has(key) || Object.is(value, getOwnProperty(existing, key))) {
-							continue
-						}
-
-						if (!changed) changed = { ...existing } as R
-						;(changed as any)[key] = value
-					}
-					if (changed) toPut.push(changed)
-				} else {
-					toPut.push(to)
-				}
-			}
-
-			const toRemove = objectMapKeys(diff.removed)
-			if (toPut.length) {
-				this.put(toPut)
-			}
-			if (toRemove.length) {
-				this.remove(toRemove)
-			}
-		}, runCallbacks)
-	}
-
-	/**
-	 * Create a cache based on values in the store. Pass in a function that takes and ID and a
-	 * signal for the underlying record. Return a signal (usually a computed) for the cached value.
-	 * For simple derivations, use {@link Store.createComputedCache}. This function is useful if you
-	 * need more precise control over intermediate values.
-	 */
-	createCache<Result, Record extends R = R>(
-		create: (id: IdOf<Record>, recordSignal: Signal<R>) => Signal<Result>
-	) {
-		const cache = new WeakCache<Atom<any>, Signal<Result>>()
-		return {
-			get: (id: IdOf<Record>) => {
-				const atom = this.records.getAtom(id)
-				if (!atom) return undefined
-				return cache.get(atom, () => create(id, atom as Signal<R>)).get()
-			},
-		}
-	}
-
-	/**
-	 * Create a computed cache.
-	 *
-	 * @param name - The name of the derivation cache.
-	 * @param derive - A function used to derive the value of the cache.
-	 * @param opts - Options for the computed cache.
-	 * @public
-	 */
-	createComputedCache<Result, Record extends R = R>(
-		name: string,
-		derive: (record: Record) => Result | undefined,
-		opts?: CreateComputedCacheOpts<Result, Record>
-	): ComputedCache<Result, Record> {
-		return this.createCache((id, record) => {
-			const recordSignal = opts?.areRecordsEqual
-				? computed(`${name}:${id}:isEqual`, () => record.get(), { isEqual: opts.areRecordsEqual })
-				: record
-
-			return computed<Result | undefined>(
-				name + ':' + id,
-				() => {
-					return derive(recordSignal.get() as Record)
-				},
-				{
-					isEqual: opts?.areResultsEqual,
-				}
-			)
-		})
-	}
-
-	private _integrityChecker?: () => void | undefined
-
-	/** @internal */
-	ensureStoreIsUsable() {
-		this.atomic(() => {
-			this._integrityChecker ??= this.schema.createIntegrityChecker(this)
-			this._integrityChecker?.()
-		})
-	}
-
-	private _isPossiblyCorrupted = false
-	/** @internal */
-	markAsPossiblyCorrupted() {
-		this._isPossiblyCorrupted = true
-	}
-	/** @internal */
-	isPossiblyCorrupted() {
-		return this._isPossiblyCorrupted
-	}
-
-	private pendingAfterEvents: Map<IdOf<R>, { before: R | null; after: R | null }> | null = null
-	private addDiffForAfterEvent(before: R | null, after: R | null) {
-		assert(this.pendingAfterEvents, 'must be in event operation')
-		if (before === after) return
-		if (before && after) assert(before.id === after.id)
-		if (!before && !after) return
-		const id = (before || after)!.id
-		const existing = this.pendingAfterEvents.get(id)
-		if (existing) {
-			existing.after = after
-		} else {
-			this.pendingAfterEvents.set(id, { before, after })
-		}
-	}
-	private flushAtomicCallbacks(isMergingRemoteChanges: boolean) {
-		let updateDepth = 0
-		let source: ChangeSource = isMergingRemoteChanges ? 'remote' : 'user'
-		while (this.pendingAfterEvents) {
-			const events = this.pendingAfterEvents
-			this.pendingAfterEvents = null
-
-			if (!this.sideEffects.isEnabled()) continue
-
-			updateDepth++
-			if (updateDepth > 100) {
-				throw new Error('Maximum store update depth exceeded, bailing out')
-			}
-
-			for (const { before, after } of events.values()) {
-				if (before && after && before !== after && !isEqual(before, after)) {
-					this.sideEffects.handleAfterChange(before, after, source)
-				} else if (before && !after) {
-					this.sideEffects.handleAfterDelete(before, source)
-				} else if (!before && after) {
-					this.sideEffects.handleAfterCreate(after, source)
-				}
-			}
-
-			if (!this.pendingAfterEvents) {
-				this.sideEffects.handleOperationComplete(source)
-			} else {
-				// if the side effects triggered by a remote operation resulted in more effects,
-				// those extra effects should not be marked as originating remotely.
-				source = 'user'
-			}
-		}
-	}
-	private _isInAtomicOp = false
-	/** @internal */
-	atomic<T>(fn: () => T, runCallbacks = true, isMergingRemoteChanges = false): T {
-		return transact(() => {
-			if (this._isInAtomicOp) {
-				if (!this.pendingAfterEvents) this.pendingAfterEvents = new Map()
-				const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-				assert(!isMergingRemoteChanges, 'cannot call mergeRemoteChanges while in atomic operation')
-				try {
-					// if we are in an atomic context with side effects ON allow switching before* callbacks OFF.
-					// but don't allow switching them ON if they had been marked OFF before.
-					if (prevSideEffectsEnabled && !runCallbacks) {
-						this.sideEffects.setIsEnabled(false)
-					}
-					return fn()
-				} finally {
-					this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-				}
-			}
-
-			this.pendingAfterEvents = new Map()
-			const prevSideEffectsEnabled = this.sideEffects.isEnabled()
-			this.sideEffects.setIsEnabled(runCallbacks ?? prevSideEffectsEnabled)
-			this._isInAtomicOp = true
-
-			if (isMergingRemoteChanges) {
-				this.isMergingRemoteChanges = true
-			}
-
-			try {
-				const result = fn()
-				this.isMergingRemoteChanges = false
-
-				this.flushAtomicCallbacks(isMergingRemoteChanges)
-
-				return result
-			} finally {
-				this.pendingAfterEvents = null
-				this.sideEffects.setIsEnabled(prevSideEffectsEnabled)
-				this._isInAtomicOp = false
-				this.isMergingRemoteChanges = false
-			}
-		})
-	}
-
-	/** @internal */
-	addHistoryInterceptor(fn: (entry: HistoryEntry<R>, source: ChangeSource) => void) {
-		return this.historyAccumulator.addInterceptor((entry) =>
-			fn(entry, this.isMergingRemoteChanges ? 'remote' : 'user')
-		)
-	}
-}
-
-/**
- * Collect all history entries by their adjacent sources.
- * For example, [user, user, remote, remote, user] would result in [user, remote, user],
- * with adjacent entries of the same source squashed into a single entry.
- *
- * @param entries - The array of history entries.
- * @returns A map of history entries by their sources.
- * @public
- */
-function squashHistoryEntries<T extends UnknownRecord>(
-	entries: HistoryEntry<T>[]
-): HistoryEntry<T>[] {
-	if (entries.length === 0) return []
-
-	const chunked: HistoryEntry<T>[][] = []
-	let chunk: HistoryEntry<T>[] = [entries[0]]
-	let entry: HistoryEntry<T>
-
-	for (let i = 1, n = entries.length; i < n; i++) {
-		entry = entries[i]
-		if (chunk[0].source !== entry.source) {
-			chunked.push(chunk)
-			chunk = []
-		}
-		chunk.push(entry)
-	}
-	// Push the last chunk
-	chunked.push(chunk)
-
-	return devFreeze(
-		chunked.map((chunk) => ({
-			source: chunk[0].source,
-			changes: squashRecordDiffs(chunk.map((e) => e.changes)),
-		}))
-	)
-}
-
-class HistoryAccumulator<T extends UnknownRecord> {
-	private _history: HistoryEntry<T>[] = []
-
-	private _interceptors: Set<(entry: HistoryEntry<T>) => void> = new Set()
-
-	addInterceptor(fn: (entry: HistoryEntry<T>) => void) {
-		this._interceptors.add(fn)
-		return () => {
-			this._interceptors.delete(fn)
-		}
-	}
-
-	add(entry: HistoryEntry<T>) {
-		this._history.push(entry)
-		for (const interceptor of this._interceptors) {
-			interceptor(entry)
-		}
-	}
-
-	flush() {
-		const history = squashHistoryEntries(this._history)
-		this._history = []
-		return history
-	}
-
-	clear() {
-		this._history = []
-	}
-
-	hasChanges() {
-		return this._history.length > 0
-	}
-}
-
-/** @public */
-export type StoreObject<R extends UnknownRecord> = Store<R> | { store: Store<R> }
-/** @public */
-export type StoreObjectRecordType<Context extends StoreObject<any>> =
-	Context extends Store<infer R> ? R : Context extends { store: Store<infer R> } ? R : never
-
-/**
- * Free version of {@link Store.createComputedCache}.
- *
- * @example
- * ```ts
- * const myCache = createComputedCache('myCache', (editor: Editor, shape: TLShape) => {
- *     return editor.getSomethingExpensive(shape)
- * })
- *
- * myCache.get(editor, shape.id)
- * ```
- *
- * @public
- */
-export function createComputedCache<
-	Context extends StoreObject<any>,
-	Result,
-	Record extends StoreObjectRecordType<Context> = StoreObjectRecordType<Context>,
->(
-	name: string,
-	derive: (context: Context, record: Record) => Result | undefined,
-	opts?: CreateComputedCacheOpts<Result, Record>
-) {
-	const cache = new WeakCache<Context, ComputedCache<Result, Record>>()
-	return {
-		get(context: Context, id: IdOf<Record>) {
-			const computedCache = cache.get(context, () => {
-				const store = (context instanceof Store ? context : context.store) as Store<Record>
-				return store.createComputedCache(name, (record) => derive(context, record), opts)
-			})
-			return computedCache.get(id)
-		},
-	}
-}
\ No newline at end of file
+	 *
\ No newline at end of file
