
index 0a4e2d762..d6265f81a 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmp_xu1ueqp_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpm9p1eoy3_actual.txt	
@@ -20,13 +20,8 @@ use serde_json::Value;
 use smol_str::SmolStr;
 use uuid::Uuid;
 
-use self::immutable_map_index::ImmutableMapIndex;
-use self::mutable_map_index::MutableMapIndex;
-use super::FieldIndexBuilderTrait;
-use super::facet_index::FacetIndex;
-use super::mmap_point_to_values::MmapValue;
-use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
+use crate::common::Flusher;
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
@@ -83,7 +78,11 @@ pub enum MapIndex<N: MapIndexKey + ?Sized> {
 }
 
 impl<N: MapIndexKey + ?Sized> MapIndex<N> {
-    pub fn new_memory(db: Arc<RwLock<DB>>, field_name: &str, is_appendable: bool) -> Self {
+    pub fn new_memory(
+        db: Arc<RwLock<DB>>,
+        field_name: &str,
+        is_appendable: bool,
+    ) -> Self {
         if is_appendable {
             MapIndex::Mutable(MutableMapIndex::new(db, field_name))
         } else {
@@ -122,13 +121,12 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
         check_fn: impl Fn(&N) -> bool,
     ) -> bool {
         match self {
             MapIndex::Mutable(index) => index.check_values_any(idx, check_fn),
             MapIndex::Immutable(index) => index.check_values_any(idx, check_fn),
-            MapIndex::Mmap(index) => index.check_values_any(idx, hw_counter, check_fn),
+            MapIndex::Mmap(index) => index.check_values_any(idx, &HardwareCounterCell::disposable(), check_fn),
         }
     }
 
@@ -155,7 +153,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_indexed_points(&self) -> usize {
+    pub fn get_indexed_points(&self) -> usize {
         match self {
             MapIndex::Mutable(index) => index.get_indexed_points(),
             MapIndex::Immutable(index) => index.get_indexed_points(),
@@ -163,7 +161,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_values_count(&self) -> usize {
+    pub fn get_values_count(&self) -> usize {
         match self {
             MapIndex::Mutable(index) => index.get_values_count(),
             MapIndex::Immutable(index) => index.get_values_count(),
@@ -187,7 +185,11 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_iterator(&self, value: &N, hw_counter: &HardwareCounterCell) -> IdRefIter<'_> {
+    fn get_iterator(
+        &self,
+        value: &N,
+        hw_counter: &HardwareCounterCell,
+    ) -> IdRefIter<'_> {
         match self {
             MapIndex::Mutable(index) => index.get_iterator(value),
             MapIndex::Immutable(index) => index.get_iterator(value),
@@ -226,39 +228,15 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         format!("{field}_map")
     }
 
-    fn flusher(&self) -> Flusher {
-        match self {
-            MapIndex::Mutable(index) => index.get_db_wrapper().flusher(),
-            MapIndex::Immutable(index) => index.get_db_wrapper().flusher(),
-            MapIndex::Mmap(index) => index.flusher(),
-        }
-    }
-
-    fn match_cardinality(
-        &self,
-        value: &N,
-        hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation {
-        let values_count = self.get_count_for_value(value, hw_counter).unwrap_or(0);
-
-        CardinalityEstimation::exact(values_count)
-    }
-
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
-        PayloadIndexTelemetry {
-            field_name: None,
-            points_count: self.get_indexed_points(),
-            points_values_count: self.get_values_count(),
-            histogram_bucket_size: None,
-            index_type: match self {
-                MapIndex::Mutable(_) => "mutable_map",
-                MapIndex::Immutable(_) => "immutable_map",
-                MapIndex::Mmap(_) => "mmap_map",
-            },
+        match self {
+            MapIndex::Mutable(index) => index.get_telemetry_data(),
+            MapIndex::Immutable(index) => index.get_telemetry_data(),
+            MapIndex::Mmap(index) => index.get_telemetry_data(),
         }
     }
 
-    pub fn encode_db_record(value: &N, idx: PointOffsetType) -> String {
+    pub fn encode_db_record(value: &N::Owned, idx: PointOffsetType) -> String {
         format!("{value}/{idx}")
     }
 
@@ -283,7 +261,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         self.values_count(idx) == 0
     }
 
-    fn clear(self) -> OperationResult<()> {
+    fn clear(&self) -> OperationResult<()> {
         match self {
             MapIndex::Mutable(index) => index.get_db_wrapper().recreate_column_family(),
             MapIndex::Immutable(index) => index.get_db_wrapper().recreate_column_family(),
@@ -291,7 +269,11 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
+    fn cleanup(self) -> OperationResult<()> {
+        self.clear()
+    }
+
+    pub fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
         match self {
             MapIndex::Mutable(index) => index.remove_point(id),
             MapIndex::Immutable(index) => index.remove_point(id),
@@ -302,14 +284,43 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
+    fn flusher(&self) -> Flusher {
         match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
+            MapIndex::Mutable(index) => index.get_db_wrapper().flusher(),
+            MapIndex::Immutable(index) => index.get_db_wrapper().flusher(),
+            MapIndex::Mmap(index) => index.flusher(),
         }
     }
 
+    fn is_on_disk(&self) -> bool {
+        match self {
+            MapIndex::Mutable(_) => false,
+            MapIndex::Immutable(_) => false,
+            MapIndex::Mmap(index) => index.is_on_disk(),
+        }
+    }
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    pub fn populate(&self) -> OperationResult<()> {
+        match self {
+            MapIndex::Mutable(_) => {}   // Not a mmap
+            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mmap(index) => index.populate()?,
+        }
+        Ok(())
+    }
+
+    /// Drop disk cache.
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        match self {
+            MapIndex::Mutable(_) => {}   // Not a mmap
+            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mmap(index) => index.clear_cache()?,
+        }
+        Ok(())
+    }
+
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -322,7 +333,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     fn except_cardinality<'a>(
         &'a self,
         excluded: impl Iterator<Item = &'a N>,
-        hw_counter: &HardwareCounterCell,
+        hw_counter: &'a HardwareCounterCell,
     ) -> CardinalityEstimation {
         // Minimal case: we exclude as many points as possible.
         // In this case, excluded points do not have any other values except excluded ones.
@@ -390,7 +401,8 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
 
         // Minimal amount of points, required to fit all unused values.
         // Cardinality can't be less than this value.
-        let min_not_excluded_by_values = non_excluded_values_count.div_ceil(max_values_per_point);
+        let min_not_excluded_by_values =
+            non_excluded_values_count.div_ceil(max_values_per_point);
 
         let min = min_not_excluded_by_values.max(
             self.get_indexed_points()
@@ -440,33 +452,12 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         )
     }
 
-    pub fn is_on_disk(&self) -> bool {
-        match self {
-            MapIndex::Mutable(_) => false,
-            MapIndex::Immutable(_) => false,
-            MapIndex::Mmap(index) => index.is_on_disk(),
-        }
-    }
-
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.populate()?,
-        }
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
+    fn files(&self) -> Vec<PathBuf> {
         match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.clear_cache()?,
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
         }
-        Ok(())
     }
 }
 
@@ -530,29 +521,22 @@ where
             flatten_values.extend(payload_values);
         }
         let flatten_values: Vec<N::Owned> = flatten_values.into_iter().map(Into::into).collect();
-
         if self.point_to_values.len() <= id as usize {
             self.point_to_values.resize_with(id as usize + 1, Vec::new);
         }
-
         self.point_to_values[id as usize].extend(flatten_values.clone());
-
         let mut hw_cell_wb = hw_counter
             .payload_index_io_write_counter()
             .write_back_counter();
-
         for value in flatten_values {
             let entry = self.values_to_points.entry(value);
-
             if let Entry::Vacant(e) = &entry {
                 let size = N::mmapped_size(N::as_referenced(e.key().borrow()));
                 hw_cell_wb.incr_delta(size);
             }
-
             hw_cell_wb.incr_delta(size_of_val(&id));
             entry.or_default().push(id);
         }
-
         Ok(())
     }
 
@@ -576,7 +560,7 @@ impl PayloadFieldIndex for MapIndex<str> {
     }
 
     fn cleanup(self) -> OperationResult<()> {
-        self.clear()
+        self.cleanup()
     }
 
     fn flusher(&self) -> Flusher {
@@ -676,9 +660,9 @@ impl PayloadFieldIndex for MapIndex<str> {
                 }
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(keywords) => {
-                    Some(self.except_cardinality(keywords.iter().map(|k| k.as_str()), hw_counter))
-                }
+                AnyVariants::Strings(keywords) => Some(
+                    self.except_cardinality(keywords.iter().map(|k| k.as_str()), hw_counter),
+                ),
                 AnyVariants::Integers(others) => {
                     if others.is_empty() {
                         Some(CardinalityEstimation::exact(0).with_primary_clause(
@@ -703,7 +687,7 @@ impl PayloadFieldIndex for MapIndex<str> {
                 .map(|value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
                             .unwrap_or(0),
                     )
                 })
@@ -726,7 +710,7 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
     }
 
     fn cleanup(self) -> OperationResult<()> {
-        self.clear()
+        self.cleanup()
     }
 
     fn flusher(&self) -> Flusher {
@@ -759,13 +743,13 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         .iter()
                         .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
                         .collect();
-
                     let uuids = uuids.ok()?;
-
                     Some(Box::new(
                         uuids
                             .into_iter()
-                            .flat_map(move |uuid| self.get_iterator(&uuid, hw_counter).copied())
+                            .flat_map(move |uuid| {
+                                self.get_iterator(&uuid, hw_counter).copied()
+                            })
                             .unique(),
                     ))
                 }
@@ -783,7 +767,6 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         .iter()
                         .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
                         .collect();
-
                     let excluded_uuids = uuids.ok()?;
                     let exclude_iter = self
                         .iter_values()
@@ -828,9 +811,7 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         .iter()
                         .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
                         .collect();
-
                     let uuids = uuids.ok()?;
-
                     let estimations = uuids
                         .into_iter()
                         .map(|uuid| self.match_cardinality(&uuid, hw_counter))
@@ -848,9 +829,11 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 }
                 AnyVariants::Integers(integers) => {
                     if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -862,16 +845,16 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         .iter()
                         .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
                         .collect();
-
                     let excluded_uuids = uuids.ok()?;
-
                     Some(self.except_cardinality(excluded_uuids.iter(), hw_counter))
                 }
                 AnyVariants::Integers(other) => {
                     if other.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -891,7 +874,7 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Only used in HNSW building so no measurement needed here.
                             .unwrap_or(0),
                     )
                 })
@@ -917,7 +900,7 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     }
 
     fn cleanup(self) -> OperationResult<()> {
-        self.clear()
+        self.cleanup()
     }
 
     fn flusher(&self) -> Flusher {
@@ -936,15 +919,15 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
                 ValueVariants::String(_) => None,
-                ValueVariants::Integer(integer) => {
-                    Some(Box::new(self.get_iterator(integer, hw_counter).copied()))
-                }
+                ValueVariants::Integer(integer) => Some(Box::new(
+                    self.get_iterator(integer, hw_counter).copied(),
+                )),
                 ValueVariants::Bool(_) => None,
             },
             Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
+                        Some(Box::new(iter::empty()))
                     } else {
                         None
                     }
@@ -952,7 +935,9 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 AnyVariants::Integers(integers) => Some(Box::new(
                     integers
                         .iter()
-                        .flat_map(move |integer| self.get_iterator(integer, hw_counter).copied())
+                        .flat_map(move |integer| {
+                            self.get_iterator(integer, hw_counter).copied()
+                        })
                         .unique(),
                 )),
             },
@@ -990,9 +975,11 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
             Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -1017,9 +1004,11 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(others) => {
                     if others.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -1111,11 +1100,12 @@ impl ValueIndexer for MapIndex<str> {
         }
     }
 
-    fn get_value(value: &Value) -> Option<String> {
+    fn get_values(value: &Value) -> Vec<Self::ValueType> {
         if let Value::String(keyword) = value {
-            return Some(keyword.to_owned());
+            vec![keyword.to_owned()]
+        } else {
+            vec![]
         }
-        None
     }
 
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
@@ -1143,11 +1133,12 @@ impl ValueIndexer for MapIndex<IntPayloadType> {
         }
     }
 
-    fn get_value(value: &Value) -> Option<IntPayloadType> {
+    fn get_values(value: &Value) -> Vec<Self::ValueType> {
         if let Value::Number(num) = value {
-            return num.as_i64();
+            num.as_i64().into_iter().collect()
+        } else {
+            vec![]
         }
-        None
     }
 
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
@@ -1175,8 +1166,10 @@ impl ValueIndexer for MapIndex<UuidIntType> {
         }
     }
 
-    fn get_value(value: &Value) -> Option<Self::ValueType> {
+    fn get_values(value: &Value) -> Vec<Self::ValueType> {
         Some(Uuid::parse_str(value.as_str()?).ok()?.as_u128())
+            .into_iter()
+            .collect()
     }
 
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
@@ -1215,7 +1208,6 @@ mod tests {
         <MapIndex<N> as ValueIndexer>::ValueType: Into<N::Owned>,
     {
         let hw_counter = HardwareCounterCell::new();
-
         match index_type {
             IndexType::Mutable | IndexType::Immutable => {
                 let mut builder =
@@ -1251,9 +1243,11 @@ mod tests {
         index_type: IndexType,
     ) -> MapIndex<N> {
         let mut index = match index_type {
-            IndexType::Mutable => {
-                MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, true)
-            }
+            IndexType::Mutable => MapIndex::<N>::new_memory(
+                open_db_with_existing_cf(path).unwrap(),
+                FIELD_NAME,
+                true,
+            ),
             IndexType::Immutable => MapIndex::<N>::new_memory(
                 open_db_with_existing_cf(path).unwrap(),
                 FIELD_NAME,
@@ -1272,7 +1266,6 @@ mod tests {
             let check_values: HashSet<&N> = values.iter().map(|v| v.borrow()).collect();
             assert_eq!(index_values, check_values);
         }
-
         index
     }
 
@@ -1281,11 +1274,8 @@ mod tests {
         let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
         let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
         builder.init().unwrap();
-
-        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
-
         let hw_counter = HardwareCounterCell::new();
-
+        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
         for (idx, values) in data.iter().enumerate().rev() {
             let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
             let values: Vec<_> = values.iter().collect();
@@ -1293,7 +1283,6 @@ mod tests {
                 .add_point(idx as PointOffsetType, &values, &hw_counter)
                 .unwrap();
         }
-
         let index = builder.finalize().unwrap();
         for (idx, values) in data.iter().enumerate().rev() {
             let res: Vec<_> = index
@@ -1321,10 +1310,7 @@ mod tests {
         let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
         save_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type, |v| (*v).into());
         let index = load_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type);
-
         let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
         assert!(
             !index
                 .except_cardinality(vec![].into_iter(), &hw_counter)
@@ -1364,10 +1350,7 @@ mod tests {
         let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
         save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
         let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
         let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
         assert!(
             !index
                 .except_cardinality(vec![].into_iter(), &hw_counter)
@@ -1385,10 +1368,7 @@ mod tests {
         let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
         save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
         let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
         let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is zero
         assert!(
             index
                 .except_cardinality(vec![].into_iter(), &hw_counter)
