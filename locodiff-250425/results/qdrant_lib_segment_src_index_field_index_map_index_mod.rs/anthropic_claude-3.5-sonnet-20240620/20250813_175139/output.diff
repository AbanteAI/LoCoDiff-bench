
index 0a4e2d762..c85ec7065 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmp7v1wbl8o_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpyr5aq4yf_actual.txt	
@@ -3,6 +3,7 @@ use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -302,14 +303,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -700,7 +693,7 @@ impl PayloadFieldIndex for MapIndex<str> {
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
         Box::new(
             self.iter_values()
-                .map(|value| {
+                .map(move |value| {
                     (
                         value,
                         self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
@@ -756,643 +749,4 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
             Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
                 AnyVariants::Strings(uuids_string) => {
                     let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let uuids = uuids.ok()?;
-
-                    Some(Box::new(
-                        uuids
-                            .into_iter()
-                            .flat_map(move |uuid| self.get_iterator(&uuid, hw_counter).copied())
-                            .unique(),
-                    ))
-                }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
-            },
-            Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let excluded_uuids = uuids.ok()?;
-                    let exclude_iter = self
-                        .iter_values()
-                        .filter(move |key| !excluded_uuids.contains(*key))
-                        .flat_map(move |key| self.get_iterator(key, hw_counter).copied())
-                        .unique();
-                    Some(Box::new(exclude_iter))
-                }
-                AnyVariants::Integers(other) => {
-                    if other.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
-            },
-            _ => None,
-        }
-    }
-
-    fn estimate_cardinality(
-        &self,
-        condition: &FieldCondition,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<CardinalityEstimation> {
-        match &condition.r#match {
-            Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(uuid_string) => {
-                    let uuid = Uuid::from_str(uuid_string).ok()?;
-                    let mut estimation = self.match_cardinality(&uuid.as_u128(), hw_counter);
-                    estimation
-                        .primary_clauses
-                        .push(PrimaryCondition::Condition(Box::new(condition.clone())));
-                    Some(estimation)
-                }
-                ValueVariants::Integer(_) => None,
-                ValueVariants::Bool(_) => None,
-            },
-            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let uuids = uuids.ok()?;
-
-                    let estimations = uuids
-                        .into_iter()
-                        .map(|uuid| self.match_cardinality(&uuid, hw_counter))
-                        .collect::<Vec<_>>();
-                    let estimation = if estimations.is_empty() {
-                        CardinalityEstimation::exact(0)
-                    } else {
-                        combine_should_estimations(&estimations, self.get_indexed_points())
-                    };
-                    Some(
-                        estimation.with_primary_clause(PrimaryCondition::Condition(Box::new(
-                            condition.clone(),
-                        ))),
-                    )
-                }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
-            },
-            Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let excluded_uuids = uuids.ok()?;
-
-                    Some(self.except_cardinality(excluded_uuids.iter(), hw_counter))
-                }
-                AnyVariants::Integers(other) => {
-                    if other.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
-            },
-            _ => None,
-        }
-    }
-
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        Box::new(
-            self.iter_values()
-                .map(move |value| {
-                    (
-                        value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
-                            .unwrap_or(0),
-                    )
-                })
-                .filter(move |(_value, count)| *count >= threshold)
-                .map(move |(value, count)| PayloadBlockCondition {
-                    condition: FieldCondition::new_match(
-                        key.clone(),
-                        Uuid::from_u128(*value).to_string().into(),
-                    ),
-                    cardinality: count,
-                }),
-        )
-    }
-}
-
-impl PayloadFieldIndex for MapIndex<IntPayloadType> {
-    fn count_indexed_points(&self) -> usize {
-        self.get_indexed_points()
-    }
-
-    fn load(&mut self) -> OperationResult<bool> {
-        self.load_from_db()
-    }
-
-    fn cleanup(self) -> OperationResult<()> {
-        self.clear()
-    }
-
-    fn flusher(&self) -> Flusher {
-        MapIndex::flusher(self)
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        self.files()
-    }
-
-    fn filter<'a>(
-        &'a self,
-        condition: &'a FieldCondition,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
-        match &condition.r#match {
-            Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(_) => None,
-                ValueVariants::Integer(integer) => {
-                    Some(Box::new(self.get_iterator(integer, hw_counter).copied()))
-                }
-                ValueVariants::Bool(_) => None,
-            },
-            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(keywords) => {
-                    if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
-                    } else {
-                        None
-                    }
-                }
-                AnyVariants::Integers(integers) => Some(Box::new(
-                    integers
-                        .iter()
-                        .flat_map(move |integer| self.get_iterator(integer, hw_counter).copied())
-                        .unique(),
-                )),
-            },
-            Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(other) => {
-                    if other.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
-                AnyVariants::Integers(integers) => Some(self.except_set(integers, hw_counter)),
-            },
-            _ => None,
-        }
-    }
-
-    fn estimate_cardinality(
-        &self,
-        condition: &FieldCondition,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<CardinalityEstimation> {
-        match &condition.r#match {
-            Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(_) => None,
-                ValueVariants::Integer(integer) => {
-                    let mut estimation = self.match_cardinality(integer, hw_counter);
-                    estimation
-                        .primary_clauses
-                        .push(PrimaryCondition::Condition(Box::new(condition.clone())));
-                    Some(estimation)
-                }
-                ValueVariants::Bool(_) => None,
-            },
-            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
-                AnyVariants::Strings(keywords) => {
-                    if keywords.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
-                AnyVariants::Integers(integers) => {
-                    let estimations = integers
-                        .iter()
-                        .map(|integer| self.match_cardinality(integer, hw_counter))
-                        .collect::<Vec<_>>();
-                    let estimation = if estimations.is_empty() {
-                        CardinalityEstimation::exact(0)
-                    } else {
-                        combine_should_estimations(&estimations, self.get_indexed_points())
-                    };
-                    Some(
-                        estimation.with_primary_clause(PrimaryCondition::Condition(Box::new(
-                            condition.clone(),
-                        ))),
-                    )
-                }
-            },
-            Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(others) => {
-                    if others.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
-                AnyVariants::Integers(integers) => {
-                    Some(self.except_cardinality(integers.iter(), hw_counter))
-                }
-            },
-            _ => None,
-        }
-    }
-
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        Box::new(
-            self.iter_values()
-                .map(move |value| {
-                    (
-                        value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Only used in HNSW building so no measurement needed here.
-                            .unwrap_or(0),
-                    )
-                })
-                .filter(move |(_value, count)| *count >= threshold)
-                .map(move |(value, count)| PayloadBlockCondition {
-                    condition: FieldCondition::new_match(key.clone(), (*value).into()),
-                    cardinality: count,
-                }),
-        )
-    }
-}
-
-impl<N> FacetIndex for MapIndex<N>
-where
-    N: MapIndexKey + ?Sized,
-    for<'a> N::Referenced<'a>: Into<FacetValueRef<'a>>,
-    for<'a> &'a N: Into<FacetValueRef<'a>>,
-{
-    fn get_point_values(
-        &self,
-        point_id: PointOffsetType,
-    ) -> impl Iterator<Item = FacetValueRef> + '_ {
-        MapIndex::get_values(self, point_id)
-            .into_iter()
-            .flatten()
-            .map(Into::into)
-    }
-
-    fn iter_values(&self) -> impl Iterator<Item = FacetValueRef<'_>> + '_ {
-        self.iter_values().map(Into::into)
-    }
-
-    fn iter_values_map<'a>(
-        &'a self,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> impl Iterator<Item = (FacetValueRef<'a>, IdIter<'a>)> + 'a {
-        self.iter_values_map(hw_counter)
-            .map(|(k, iter)| (k.into(), iter))
-    }
-
-    fn iter_counts_per_value(&self) -> impl Iterator<Item = FacetHit<FacetValueRef<'_>>> + '_ {
-        self.iter_counts_per_value().map(|(value, count)| FacetHit {
-            value: value.into(),
-            count,
-        })
-    }
-}
-
-impl ValueIndexer for MapIndex<str> {
-    type ValueType = String;
-
-    fn add_many(
-        &mut self,
-        id: PointOffsetType,
-        values: Vec<String>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.add_many_to_map(id, values, hw_counter),
-            MapIndex::Immutable(_) => Err(OperationError::service_error(
-                "Can't add values to immutable map index",
-            )),
-            MapIndex::Mmap(_) => Err(OperationError::service_error(
-                "Can't add values to mmap map index",
-            )),
-        }
-    }
-
-    fn get_value(value: &Value) -> Option<String> {
-        if let Value::String(keyword) = value {
-            return Some(keyword.to_owned());
-        }
-        None
-    }
-
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
-        self.remove_point(id)
-    }
-}
-
-impl ValueIndexer for MapIndex<IntPayloadType> {
-    type ValueType = IntPayloadType;
-
-    fn add_many(
-        &mut self,
-        id: PointOffsetType,
-        values: Vec<IntPayloadType>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.add_many_to_map(id, values, hw_counter),
-            MapIndex::Immutable(_) => Err(OperationError::service_error(
-                "Can't add values to immutable map index",
-            )),
-            MapIndex::Mmap(_) => Err(OperationError::service_error(
-                "Can't add values to mmap map index",
-            )),
-        }
-    }
-
-    fn get_value(value: &Value) -> Option<IntPayloadType> {
-        if let Value::Number(num) = value {
-            return num.as_i64();
-        }
-        None
-    }
-
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
-        self.remove_point(id)
-    }
-}
-
-impl ValueIndexer for MapIndex<UuidIntType> {
-    type ValueType = UuidIntType;
-
-    fn add_many(
-        &mut self,
-        id: PointOffsetType,
-        values: Vec<Self::ValueType>,
-        hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.add_many_to_map(id, values, hw_counter),
-            MapIndex::Immutable(_) => Err(OperationError::service_error(
-                "Can't add values to immutable map index",
-            )),
-            MapIndex::Mmap(_) => Err(OperationError::service_error(
-                "Can't add values to mmap map index",
-            )),
-        }
-    }
-
-    fn get_value(value: &Value) -> Option<Self::ValueType> {
-        Some(Uuid::parse_str(value.as_str()?).ok()?.as_u128())
-    }
-
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
-        self.remove_point(id)
-    }
-}
-
-#[cfg(test)]
-mod tests {
-    use std::collections::HashSet;
-    use std::path::Path;
-
-    use rstest::rstest;
-    use tempfile::Builder;
-
-    use super::*;
-    use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
-
-    const FIELD_NAME: &str = "test";
-
-    #[derive(Clone, Copy)]
-    enum IndexType {
-        Mutable,
-        Immutable,
-        Mmap,
-    }
-
-    fn save_map_index<N>(
-        data: &[Vec<N::Owned>],
-        path: &Path,
-        index_type: IndexType,
-        into_value: impl Fn(&N::Owned) -> Value,
-    ) where
-        N: MapIndexKey + ?Sized,
-        MapIndex<N>: PayloadFieldIndex + ValueIndexer,
-        <MapIndex<N> as ValueIndexer>::ValueType: Into<N::Owned>,
-    {
-        let hw_counter = HardwareCounterCell::new();
-
-        match index_type {
-            IndexType::Mutable | IndexType::Immutable => {
-                let mut builder =
-                    MapIndex::<N>::builder(open_db_with_existing_cf(path).unwrap(), FIELD_NAME);
-                builder.init().unwrap();
-                for (idx, values) in data.iter().enumerate() {
-                    let values: Vec<Value> = values.iter().map(&into_value).collect();
-                    let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
-                }
-                builder.finalize().unwrap();
-            }
-            IndexType::Mmap => {
-                let mut builder = MapIndex::<N>::mmap_builder(path, false);
-                builder.init().unwrap();
-                for (idx, values) in data.iter().enumerate() {
-                    let values: Vec<Value> = values.iter().map(&into_value).collect();
-                    let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
-                }
-                builder.finalize().unwrap();
-            }
-        }
-    }
-
-    fn load_map_index<N: MapIndexKey + ?Sized>(
-        data: &[Vec<N::Owned>],
-        path: &Path,
-        index_type: IndexType,
-    ) -> MapIndex<N> {
-        let mut index = match index_type {
-            IndexType::Mutable => {
-                MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, true)
-            }
-            IndexType::Immutable => MapIndex::<N>::new_memory(
-                open_db_with_existing_cf(path).unwrap(),
-                FIELD_NAME,
-                false,
-            ),
-            IndexType::Mmap => MapIndex::<N>::new_mmap(path, false).unwrap(),
-        };
-        index.load_from_db().unwrap();
-        for (idx, values) in data.iter().enumerate() {
-            let index_values: HashSet<N::Owned> = index
-                .get_values(idx as PointOffsetType)
-                .unwrap()
-                .map(|v| N::to_owned(N::from_referenced(&v)))
-                .collect();
-            let index_values: HashSet<&N> = index_values.iter().map(|v| v.borrow()).collect();
-            let check_values: HashSet<&N> = values.iter().map(|v| v.borrow()).collect();
-            assert_eq!(index_values, check_values);
-        }
-
-        index
-    }
-
-    #[test]
-    fn test_index_non_ascending_insertion() {
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
-        builder.init().unwrap();
-
-        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
-
-        let hw_counter = HardwareCounterCell::new();
-
-        for (idx, values) in data.iter().enumerate().rev() {
-            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
-            let values: Vec<_> = values.iter().collect();
-            builder
-                .add_point(idx as PointOffsetType, &values, &hw_counter)
-                .unwrap();
-        }
-
-        let index = builder.finalize().unwrap();
-        for (idx, values) in data.iter().enumerate().rev() {
-            let res: Vec<_> = index
-                .get_values(idx as u32)
-                .unwrap()
-                .map(|i| *i as i32)
-                .collect();
-            assert_eq!(res, *values);
-        }
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_int_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![1, 2, 3, 4, 5, 6],
-            vec![1, 2, 3, 4, 5, 6],
-            vec![13, 14, 15, 16, 17, 18],
-            vec![19, 20, 21, 22, 23, 24],
-            vec![25],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type, |v| (*v).into());
-        let index = load_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_string_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("PPMM"),
-                SmolStr::from("QQXX"),
-                SmolStr::from("YYBB"),
-            ],
-            vec![
-                SmolStr::from("FFMM"),
-                SmolStr::from("IICC"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![SmolStr::from("PPGG")],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_empty_index(#[case] index_type: IndexType) {
-        let data: Vec<Vec<SmolStr>> = vec![];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is zero
-        assert!(
-            index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-}
\ No newline at end of file
+                        .iter()
\ No newline at end of file
