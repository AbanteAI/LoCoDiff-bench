
index 0a4e2d762..47ef3dcff 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmp1p3ivz2y_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpxibdpgsr_actual.txt	
@@ -3,6 +3,7 @@ use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -22,11 +23,11 @@ use uuid::Uuid;
 
 use self::immutable_map_index::ImmutableMapIndex;
 use self::mutable_map_index::MutableMapIndex;
-use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
-use crate::common::Flusher;
+use super::FieldIndexBuilderTrait;
 use crate::common::operation_error::{OperationError, OperationResult};
+use crate::common::Flusher;
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
@@ -122,13 +123,13 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
+        _hw_counter: &HardwareCounterCell,
         check_fn: impl Fn(&N) -> bool,
     ) -> bool {
         match self {
             MapIndex::Mutable(index) => index.check_values_any(idx, check_fn),
             MapIndex::Immutable(index) => index.check_values_any(idx, check_fn),
-            MapIndex::Mmap(index) => index.check_values_any(idx, hw_counter, check_fn),
+            MapIndex::Mmap(index) => index.check_values_any(idx, _hw_counter, check_fn),
         }
     }
 
@@ -179,19 +180,19 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_count_for_value(&self, value: &N, hw_counter: &HardwareCounterCell) -> Option<usize> {
+    fn get_count_for_value(&self, value: &N, _hw_counter: &HardwareCounterCell) -> Option<usize> {
         match self {
             MapIndex::Mutable(index) => index.get_count_for_value(value),
             MapIndex::Immutable(index) => index.get_count_for_value(value),
-            MapIndex::Mmap(index) => index.get_count_for_value(value, hw_counter),
+            MapIndex::Mmap(index) => index.get_count_for_value(value, _hw_counter),
         }
     }
 
-    fn get_iterator(&self, value: &N, hw_counter: &HardwareCounterCell) -> IdRefIter<'_> {
+    fn get_iterator(&self, value: &N, _hw_counter: &HardwareCounterCell) -> IdRefIter<'_> {
         match self {
             MapIndex::Mutable(index) => index.get_iterator(value),
             MapIndex::Immutable(index) => index.get_iterator(value),
-            MapIndex::Mmap(index) => index.get_iterator(value, hw_counter),
+            MapIndex::Mmap(index) => index.get_iterator(value, _hw_counter),
         }
     }
 
@@ -302,14 +303,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -584,7 +577,11 @@ impl PayloadFieldIndex for MapIndex<str> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -703,7 +700,9 @@ impl PayloadFieldIndex for MapIndex<str> {
                 .map(|value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
+                        self
+                            // Payload_blocks only used in HNSW building, which is unmeasured.
+                            .get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -734,7 +733,11 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -891,7 +894,9 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
+                        self
+                            // payload_blocks only used in HNSW building, which is unmeasured.
+                            .get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -925,7 +930,11 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -944,7 +953,10 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
             Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
+                        Some(
+                            // empty iterator
+                            Box::new(vec![].into_iter()),
+                        )
                     } else {
                         None
                     }
@@ -1042,7 +1054,9 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Only used in HNSW building so no measurement needed here.
+                        self
+                            // Only used in HNSW building so no measurement needed here.
+                            .get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
