
index 0a4e2d76..d5655f0f 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmp3n81bxg__expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpd5wyr_k6_actual.txt	
@@ -302,12 +302,33 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
+    pub fn is_on_disk(&self) -> bool {
+        match self {
+            MapIndex::Mutable(_) => false,
+            MapIndex::Immutable(_) => false,
+            MapIndex::Mmap(index) => index.is_on_disk(),
+        }
+    }
+
+    /// Populate all pages in the mmap.
+    /// Block until all pages are populated.
+    pub fn populate(&self) -> OperationResult<()> {
         match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
+            MapIndex::Mutable(_) => {}   // Not a mmap
+            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mmap(index) => index.populate()?,
+        }
+        Ok(())
+    }
+
+    /// Drop disk cache.
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        match self {
+            MapIndex::Mutable(_) => {}   // Not a mmap
+            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mmap(index) => index.clear_cache()?,
         }
+        Ok(())
     }
 
     /// Estimates cardinality for `except` clause
@@ -439,35 +460,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
                 .unique(),
         )
     }
-
-    pub fn is_on_disk(&self) -> bool {
-        match self {
-            MapIndex::Mutable(_) => false,
-            MapIndex::Immutable(_) => false,
-            MapIndex::Mmap(index) => index.is_on_disk(),
-        }
-    }
-
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.populate()?,
-        }
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.clear_cache()?,
-        }
-        Ok(())
-    }
 }
 
 pub struct MapIndexBuilder<N: MapIndexKey + ?Sized>(MapIndex<N>);
@@ -549,7 +541,7 @@ where
                 hw_cell_wb.incr_delta(size);
             }
 
-            hw_cell_wb.incr_delta(size_of_val(&id));
+            hw_cell_wb.incr_delta(std::mem::size_of_val(&id));
             entry.or_default().push(id);
         }
 
@@ -1182,217 +1174,4 @@ impl ValueIndexer for MapIndex<UuidIntType> {
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
         self.remove_point(id)
     }
-}
-
-#[cfg(test)]
-mod tests {
-    use std::collections::HashSet;
-    use std::path::Path;
-
-    use rstest::rstest;
-    use tempfile::Builder;
-
-    use super::*;
-    use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
-
-    const FIELD_NAME: &str = "test";
-
-    #[derive(Clone, Copy)]
-    enum IndexType {
-        Mutable,
-        Immutable,
-        Mmap,
-    }
-
-    fn save_map_index<N>(
-        data: &[Vec<N::Owned>],
-        path: &Path,
-        index_type: IndexType,
-        into_value: impl Fn(&N::Owned) -> Value,
-    ) where
-        N: MapIndexKey + ?Sized,
-        MapIndex<N>: PayloadFieldIndex + ValueIndexer,
-        <MapIndex<N> as ValueIndexer>::ValueType: Into<N::Owned>,
-    {
-        let hw_counter = HardwareCounterCell::new();
-
-        match index_type {
-            IndexType::Mutable | IndexType::Immutable => {
-                let mut builder =
-                    MapIndex::<N>::builder(open_db_with_existing_cf(path).unwrap(), FIELD_NAME);
-                builder.init().unwrap();
-                for (idx, values) in data.iter().enumerate() {
-                    let values: Vec<Value> = values.iter().map(&into_value).collect();
-                    let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
-                }
-                builder.finalize().unwrap();
-            }
-            IndexType::Mmap => {
-                let mut builder = MapIndex::<N>::mmap_builder(path, false);
-                builder.init().unwrap();
-                for (idx, values) in data.iter().enumerate() {
-                    let values: Vec<Value> = values.iter().map(&into_value).collect();
-                    let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
-                }
-                builder.finalize().unwrap();
-            }
-        }
-    }
-
-    fn load_map_index<N: MapIndexKey + ?Sized>(
-        data: &[Vec<N::Owned>],
-        path: &Path,
-        index_type: IndexType,
-    ) -> MapIndex<N> {
-        let mut index = match index_type {
-            IndexType::Mutable => {
-                MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, true)
-            }
-            IndexType::Immutable => MapIndex::<N>::new_memory(
-                open_db_with_existing_cf(path).unwrap(),
-                FIELD_NAME,
-                false,
-            ),
-            IndexType::Mmap => MapIndex::<N>::new_mmap(path, false).unwrap(),
-        };
-        index.load_from_db().unwrap();
-        for (idx, values) in data.iter().enumerate() {
-            let index_values: HashSet<N::Owned> = index
-                .get_values(idx as PointOffsetType)
-                .unwrap()
-                .map(|v| N::to_owned(N::from_referenced(&v)))
-                .collect();
-            let index_values: HashSet<&N> = index_values.iter().map(|v| v.borrow()).collect();
-            let check_values: HashSet<&N> = values.iter().map(|v| v.borrow()).collect();
-            assert_eq!(index_values, check_values);
-        }
-
-        index
-    }
-
-    #[test]
-    fn test_index_non_ascending_insertion() {
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
-        builder.init().unwrap();
-
-        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
-
-        let hw_counter = HardwareCounterCell::new();
-
-        for (idx, values) in data.iter().enumerate().rev() {
-            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
-            let values: Vec<_> = values.iter().collect();
-            builder
-                .add_point(idx as PointOffsetType, &values, &hw_counter)
-                .unwrap();
-        }
-
-        let index = builder.finalize().unwrap();
-        for (idx, values) in data.iter().enumerate().rev() {
-            let res: Vec<_> = index
-                .get_values(idx as u32)
-                .unwrap()
-                .map(|i| *i as i32)
-                .collect();
-            assert_eq!(res, *values);
-        }
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_int_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![1, 2, 3, 4, 5, 6],
-            vec![1, 2, 3, 4, 5, 6],
-            vec![13, 14, 15, 16, 17, 18],
-            vec![19, 20, 21, 22, 23, 24],
-            vec![25],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type, |v| (*v).into());
-        let index = load_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_string_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("PPMM"),
-                SmolStr::from("QQXX"),
-                SmolStr::from("YYBB"),
-            ],
-            vec![
-                SmolStr::from("FFMM"),
-                SmolStr::from("IICC"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![SmolStr::from("PPGG")],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_empty_index(#[case] index_type: IndexType) {
-        let data: Vec<Vec<SmolStr>> = vec![];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is zero
-        assert!(
-            index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
 }
\ No newline at end of file
