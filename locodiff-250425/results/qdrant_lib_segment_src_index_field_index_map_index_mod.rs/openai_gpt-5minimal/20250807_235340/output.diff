
index 0a4e2d762..e6b5dfdfb 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmpvh_m35mv_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpakwy_29m_actual.txt	
@@ -3,6 +3,7 @@ use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -234,16 +235,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn match_cardinality(
-        &self,
-        value: &N,
-        hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation {
-        let values_count = self.get_count_for_value(value, hw_counter).unwrap_or(0);
-
-        CardinalityEstimation::exact(values_count)
-    }
-
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
         PayloadIndexTelemetry {
             field_name: None,
@@ -302,14 +293,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -584,7 +567,11 @@ impl PayloadFieldIndex for MapIndex<str> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -734,7 +721,11 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -925,7 +916,11 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     }
 
     fn files(&self) -> Vec<PathBuf> {
-        self.files()
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
     }
 
     fn filter<'a>(
@@ -941,10 +936,12 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 }
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
+            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
+                        Some(
+                            Box::new(vec![].into_iter()),
+                        )
                     } else {
                         None
                     }
