
index 0a4e2d762..921c52cce 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmp_4u339j__expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmp5c_fslm9_actual.txt	
@@ -1,8 +1,13 @@
+pub mod immutable_map_index;
+pub mod mmap_map_index;
+pub mod mutable_map_index;
+
 use std::borrow::Borrow;
 use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -25,8 +30,8 @@ use self::mutable_map_index::MutableMapIndex;
 use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
-use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
+use crate::common::Flusher;
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
@@ -39,10 +44,6 @@ use crate::types::{
     PayloadKeyType, UuidIntType, ValueVariants,
 };
 
-pub mod immutable_map_index;
-pub mod mmap_map_index;
-pub mod mutable_map_index;
-
 pub type IdRefIter<'a> = Box<dyn Iterator<Item = &'a PointOffsetType> + 'a>;
 pub type IdIter<'a> = Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
@@ -302,14 +303,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -1287,112 +1280,4 @@ mod tests {
         let hw_counter = HardwareCounterCell::new();
 
         for (idx, values) in data.iter().enumerate().rev() {
-            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
-            let values: Vec<_> = values.iter().collect();
-            builder
-                .add_point(idx as PointOffsetType, &values, &hw_counter)
-                .unwrap();
-        }
-
-        let index = builder.finalize().unwrap();
-        for (idx, values) in data.iter().enumerate().rev() {
-            let res: Vec<_> = index
-                .get_values(idx as u32)
-                .unwrap()
-                .map(|i| *i as i32)
-                .collect();
-            assert_eq!(res, *values);
-        }
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_int_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![1, 2, 3, 4, 5, 6],
-            vec![1, 2, 3, 4, 5, 6],
-            vec![13, 14, 15, 16, 17, 18],
-            vec![19, 20, 21, 22, 23, 24],
-            vec![25],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type, |v| (*v).into());
-        let index = load_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_string_disk_map_index(#[case] index_type: IndexType) {
-        let data = vec![
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("PPMM"),
-                SmolStr::from("QQXX"),
-                SmolStr::from("YYBB"),
-            ],
-            vec![
-                SmolStr::from("FFMM"),
-                SmolStr::from("IICC"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![SmolStr::from("PPGG")],
-        ];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
-        assert!(
-            !index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-
-    #[rstest]
-    #[case(IndexType::Mutable)]
-    #[case(IndexType::Immutable)]
-    #[case(IndexType::Mmap)]
-    fn test_empty_index(#[case] index_type: IndexType) {
-        let data: Vec<Vec<SmolStr>> = vec![];
-
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        save_map_index::<str>(&data, temp_dir.path(), index_type, |v| v.to_string().into());
-        let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
-
-        let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is zero
-        assert!(
-            index
-                .except_cardinality(vec![].into_iter(), &hw_counter)
-                .equals_min_exp_max(&CardinalityEstimation::exact(0)),
-        );
-    }
-}
\ No newline at end of file
+            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
\ No newline at end of file
