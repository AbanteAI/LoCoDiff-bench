
index 0a4e2d762..f403b9684 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmpyd3xr957_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpgcfbh5f6_actual.txt	
@@ -1,8 +1,14 @@
+pub mod immutable_map_index;
+pub mod mmap_map_index;
+pub mod mutable_map_index;
+
 use std::borrow::Borrow;
+use std::cmp::max;
 use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -22,11 +28,11 @@ use uuid::Uuid;
 
 use self::immutable_map_index::ImmutableMapIndex;
 use self::mutable_map_index::MutableMapIndex;
-use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
-use crate::common::Flusher;
+use super::FieldIndexBuilderTrait;
 use crate::common::operation_error::{OperationError, OperationResult};
+use crate::common::Flusher;
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
@@ -36,13 +42,9 @@ use crate::index::query_estimator::combine_should_estimations;
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
     AnyVariants, FieldCondition, IntPayloadType, Match, MatchAny, MatchExcept, MatchValue,
-    PayloadKeyType, UuidIntType, ValueVariants,
+    PayloadKeyType, ValueVariants,
 };
 
-pub mod immutable_map_index;
-pub mod mmap_map_index;
-pub mod mutable_map_index;
-
 pub type IdRefIter<'a> = Box<dyn Iterator<Item = &'a PointOffsetType> + 'a>;
 pub type IdIter<'a> = Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
@@ -110,15 +112,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn load_from_db(&mut self) -> OperationResult<bool> {
-        match self {
-            MapIndex::Mutable(index) => index.load_from_db(),
-            MapIndex::Immutable(index) => index.load_from_db(),
-            // mmap index is always loaded
-            MapIndex::Mmap(_) => Ok(true),
-        }
-    }
-
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
@@ -213,12 +206,12 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
 
     pub fn iter_values_map<'a>(
         &'a self,
-        hw_cell: &'a HardwareCounterCell,
+        hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = (&'a N, IdIter<'a>)> + 'a> {
         match self {
             MapIndex::Mutable(index) => Box::new(index.iter_values_map()),
             MapIndex::Immutable(index) => Box::new(index.iter_values_map()),
-            MapIndex::Mmap(index) => Box::new(index.iter_values_map(hw_cell)),
+            MapIndex::Mmap(index) => Box::new(index.iter_values_map(hw_counter)),
         }
     }
 
@@ -302,69 +295,11 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
-    /// Estimates cardinality for `except` clause
-    ///
-    /// # Arguments
-    ///
-    /// * 'excluded' - values, which are not considered as matching
-    ///
-    /// # Returns
-    ///
-    /// * `CardinalityEstimation` - estimation of cardinality
     fn except_cardinality<'a>(
         &'a self,
         excluded: impl Iterator<Item = &'a N>,
         hw_counter: &HardwareCounterCell,
     ) -> CardinalityEstimation {
-        // Minimal case: we exclude as many points as possible.
-        // In this case, excluded points do not have any other values except excluded ones.
-        // So the first step - we estimate how many other points is needed to fit unused values.
-
-        // Example:
-        // Values: 20, 20
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 110
-        // total_excluded_value_count = 40
-        // non_excluded_values_count = 110 - 40 = 70
-        // max_values_per_point = 5 - 2 = 3
-        // min_not_excluded_by_values = 70 / 3 = 24
-        // min = max(24, 100 - 40) = 60
-        // exp = ...
-        // max = min(20, 70) = 20
-
-        // Values: 60, 60
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 200
-        // total_excluded_value_count = 120
-        // non_excluded_values_count = 200 - 120 = 80
-        // max_values_per_point = 5 - 2 = 3
-        // min_not_excluded_by_values = 80 / 3 = 27
-        // min = max(27, 100 - 120) = 27
-        // exp = ...
-        // max = min(60, 80) = 60
-
-        // Values: 60, 60, 60
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 200
-        // total_excluded_value_count = 180
-        // non_excluded_values_count = 200 - 180 = 20
-        // max_values_per_point = 5 - 3 = 2
-        // min_not_excluded_by_values = 20 / 2 = 10
-        // min = max(10, 100 - 180) = 10
-        // exp = ...
-        // max = min(60, 20) = 20
-
         let excluded_value_counts: Vec<_> = excluded
             .map(|val| {
                 self.get_count_for_value(val.borrow(), hw_counter)
@@ -383,13 +318,10 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
             .saturating_sub(excluded_value_counts.len());
 
         if max_values_per_point == 0 {
-            // All points are excluded, so we can't select any point
             debug_assert_eq!(non_excluded_values_count, 0);
             return CardinalityEstimation::exact(0);
         }
 
-        // Minimal amount of points, required to fit all unused values.
-        // Cardinality can't be less than this value.
         let min_not_excluded_by_values = non_excluded_values_count.div_ceil(max_values_per_point);
 
         let min = min_not_excluded_by_values.max(
@@ -397,11 +329,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
                 .saturating_sub(total_excluded_value_count),
         );
 
-        // Maximum scenario: selected points overlap as much as possible.
-        // From one side, all excluded values should be assigned to the same point
-        // => we can take the value with the maximum amount of points.
-        // From another side, all other values should be enough to fill all other points.
-
         let max_excluded_value_count = excluded_value_counts.iter().max().copied().unwrap_or(0);
 
         let max = self
@@ -409,8 +336,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
             .saturating_sub(max_excluded_value_count)
             .min(non_excluded_values_count);
 
-        // Expected case: we assume that all points are filled equally.
-        // So we can estimate the probability of the point to have non-excluded value.
         let exp = number_of_selected_points(self.get_indexed_points(), non_excluded_values_count)
             .max(min)
             .min(max);
@@ -448,25 +373,20 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
         match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.populate()?,
+            MapIndex::Mutable(_) => Ok(()),
+            MapIndex::Immutable(_) => Ok(()),
+            MapIndex::Mmap(index) => index.populate(),
         }
-        Ok(())
     }
 
-    /// Drop disk cache.
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
-            MapIndex::Mmap(index) => index.clear_cache()?,
+            MapIndex::Mutable(_) => Ok(()),
+            MapIndex::Immutable(_) => Ok(()),
+            MapIndex::Mmap(index) => index.clear_cache(),
         }
-        Ok(())
     }
 }
 
@@ -537,22 +457,24 @@ where
 
         self.point_to_values[id as usize].extend(flatten_values.clone());
 
-        let mut hw_cell_wb = hw_counter
-            .payload_index_io_write_counter()
-            .write_back_counter();
+        let mut hw_counter_val = 0;
 
         for value in flatten_values {
             let entry = self.values_to_points.entry(value);
 
             if let Entry::Vacant(e) = &entry {
                 let size = N::mmapped_size(N::as_referenced(e.key().borrow()));
-                hw_cell_wb.incr_delta(size);
+                hw_counter_val += size;
             }
 
-            hw_cell_wb.incr_delta(size_of_val(&id));
+            hw_counter_val += size_of_val(&id);
             entry.or_default().push(id);
         }
 
+        hw_counter
+            .payload_index_io_write_counter()
+            .incr_delta(hw_counter_val);
+
         Ok(())
     }
 
@@ -667,23 +589,27 @@ impl PayloadFieldIndex for MapIndex<str> {
                 }
                 AnyVariants::Integers(integers) => {
                     if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
                 }
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(keywords) => {
-                    Some(self.except_cardinality(keywords.iter().map(|k| k.as_str()), hw_counter))
-                }
+                AnyVariants::Strings(keywords) => Some(
+                    self.except_cardinality(keywords.iter().map(|k| k.as_str()), hw_counter),
+                ),
                 AnyVariants::Integers(others) => {
                     if others.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -703,7 +629,7 @@ impl PayloadFieldIndex for MapIndex<str> {
                 .map(|value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -741,7 +667,7 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
         &'a self,
         condition: &'a FieldCondition,
         hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
+    ) -> Some<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
                 ValueVariants::String(uuid_string) => {
@@ -848,9 +774,11 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 }
                 AnyVariants::Integers(integers) => {
                     if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -869,9 +797,11 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 }
                 AnyVariants::Integers(other) => {
                     if other.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -891,7 +821,7 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -932,7 +862,7 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
         &'a self,
         condition: &'a FieldCondition,
         hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
+    ) -> Some<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
                 ValueVariants::String(_) => None,
@@ -987,12 +917,14 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 }
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
+            Some(M极::Any(MatchAny { any: any_variants })) => match any_variants {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -1017,9 +949,11 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(others) => {
                     if others.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
+                        Some(
+                            CardinalityEstimation::exact(0).with_primary_clause(
+                                PrimaryCondition::Condition(Box::new(condition.clone())),
+                            ),
+                        )
                     } else {
                         None
                     }
@@ -1042,7 +976,7 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Only used in HNSW building so no measurement needed here.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -1130,7 +1064,7 @@ impl ValueIndexer for MapIndex<IntPayloadType> {
         &mut self,
         id: PointOffsetType,
         values: Vec<IntPayloadType>,
-        hw_counter: &HardwareCounterCell,
+       极 hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()> {
         match self {
             MapIndex::Mutable(index) => index.add_many_to_map(id, values, hw_counter),
@@ -1191,9 +1125,11 @@ mod tests {
 
     use rstest::rstest;
     use tempfile::Builder;
+    use uuid::Uuid;
 
     use super::*;
     use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
+    use crate::types::UuidIntType;
 
     const FIELD_NAME: &str = "test";
 
@@ -1234,7 +1170,7 @@ mod tests {
                 let mut builder = MapIndex::<N>::mmap_builder(path, false);
                 builder.init().unwrap();
                 for (idx, values) in data.iter().enumerate() {
-                    let values: Vec<Value> = values.iter().map(&into_value).collect();
+                    let values: Vec<极Value> = values.iter().map(&into_value).collect();
                     let values: Vec<_> = values.iter().collect();
                     builder
                         .add_point(idx as PointOffsetType, &values, &hw_counter)
@@ -1395,4 +1331,38 @@ mod tests {
                 .equals_min_exp_max(&CardinalityEstimation::exact(0)),
         );
     }
+
+    #[test]
+    fn test_uuid_index() {
+        let uuids = vec![
+            Uuid::new_v4(),
+            Uuid::new_v4(),
+            Uuid::new_v4(),
+            Uuid::new_v4(),
+            Uuid::new_v4(),
+        ];
+        let uuid_values: Vec<UuidIntType> = uuids.iter().map(|u| u.as_u128()).collect();
+        let data = vec![
+            vec![uuid_values[0], uuid_values[1]],
+            vec![uuid_values[0], uuid_values[2]],
+            vec![uuid_values[0], uuid_values[3]],
+            vec![uuid_values[0], uuid_values[4]],
+            vec![uuid_values[1]],
+        ];
+
+        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
+        save_map_index::<UuidIntType>(&data, temp_dir.path(), IndexType::Mmap, |v| {
+            Value::String(Uuid::from_u128(*v).to_string())
+        });
+        let index = load_map_index::<UuidIntType>(&data, temp_dir.path(), IndexType::Mmap);
+
+        // Check that we can retrieve the UUID values
+        for (id, expected) in data.iter().enumerate() {
+            let values: Vec<_> = index.get_values(id as PointOffsetType).unwrap().collect();
+            assert_eq!(
+                values,
+                expected.iter().map(|i| i as &UuidIntType).collect::<Vec<_>>()
+            );
+        }
+    }
 }
\ No newline at end of file
