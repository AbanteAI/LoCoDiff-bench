
index 0a4e2d76..182f00d5 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmpljrndrfb_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpjebrchct_actual.txt	
@@ -122,13 +122,12 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
         check_fn: impl Fn(&N) -> bool,
     ) -> bool {
         match self {
             MapIndex::Mutable(index) => index.check_values_any(idx, check_fn),
             MapIndex::Immutable(index) => index.check_values_any(idx, check_fn),
-            MapIndex::Mmap(index) => index.check_values_any(idx, hw_counter, check_fn),
+            MapIndex::Mmap(index) => index.check_values_any(idx, &HardwareCounterCell::new(), check_fn),
         }
     }
 
@@ -283,33 +282,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         self.values_count(idx) == 0
     }
 
-    fn clear(self) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Immutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Mmap(index) => index.clear(),
-        }
-    }
-
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.remove_point(id),
-            MapIndex::Immutable(index) => index.remove_point(id),
-            MapIndex::Mmap(index) => {
-                index.remove_point(id);
-                Ok(())
-            }
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
     /// Estimates cardinality for `except` clause
     ///
     /// # Arguments
@@ -327,7 +299,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         // Minimal case: we exclude as many points as possible.
         // In this case, excluded points do not have any other values except excluded ones.
         // So the first step - we estimate how many other points is needed to fit unused values.
-
+        //
         // Example:
         // Values: 20, 20
         // Unique values: 5
@@ -340,7 +312,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         // min = max(24, 100 - 40) = 60
         // exp = ...
         // max = min(20, 70) = 20
-
+        //
         // Values: 60, 60
         // Unique values: 5
         // Total points: 100
@@ -352,7 +324,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         // min = max(27, 100 - 120) = 27
         // exp = ...
         // max = min(60, 80) = 60
-
+        //
         // Values: 60, 60, 60
         // Unique values: 5
         // Total points: 100
@@ -1193,9 +1165,6 @@ mod tests {
     use tempfile::Builder;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
-
-    const FIELD_NAME: &str = "test";
 
     #[derive(Clone, Copy)]
     enum IndexType {
@@ -1251,9 +1220,11 @@ mod tests {
         index_type: IndexType,
     ) -> MapIndex<N> {
         let mut index = match index_type {
-            IndexType::Mutable => {
-                MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, true)
-            }
+            IndexType::Mutable => MapIndex::<N>::new_memory(
+                open_db_with_existing_cf(path).unwrap(),
+                FIELD_NAME,
+                true,
+            ),
             IndexType::Immutable => MapIndex::<N>::new_memory(
                 open_db_with_existing_cf(path).unwrap(),
                 FIELD_NAME,
@@ -1276,34 +1247,7 @@ mod tests {
         index
     }
 
-    #[test]
-    fn test_index_non_ascending_insertion() {
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
-        builder.init().unwrap();
-
-        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
-
-        let hw_counter = HardwareCounterCell::new();
-
-        for (idx, values) in data.iter().enumerate().rev() {
-            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
-            let values: Vec<_> = values.iter().collect();
-            builder
-                .add_point(idx as PointOffsetType, &values, &hw_counter)
-                .unwrap();
-        }
-
-        let index = builder.finalize().unwrap();
-        for (idx, values) in data.iter().enumerate().rev() {
-            let res: Vec<_> = index
-                .get_values(idx as u32)
-                .unwrap()
-                .map(|i| *i as i32)
-                .collect();
-            assert_eq!(res, *values);
-        }
-    }
+    const FIELD_NAME: &str = "test";
 
     #[rstest]
     #[case(IndexType::Mutable)]
@@ -1395,4 +1339,33 @@ mod tests {
                 .equals_min_exp_max(&CardinalityEstimation::exact(0)),
         );
     }
+
+    #[test]
+    fn test_index_non_ascending_insertion() {
+        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
+        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
+        builder.init().unwrap();
+
+        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
+
+        let hw_counter = HardwareCounterCell::new();
+
+        for (idx, values) in data.iter().enumerate().rev() {
+            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
+            let values: Vec<_> = values.iter().collect();
+            builder
+                .add_point(idx as PointOffsetType, &values, &hw_counter)
+                .unwrap();
+        }
+
+        let index = builder.finalize().unwrap();
+        for (idx, values) in data.iter().enumerate().rev() {
+            let res: Vec<_> = index
+                .get_values(idx as u32)
+                .unwrap()
+                .map(|i| *i as i32)
+                .collect();
+            assert_eq!(res, *values);
+        }
+    }
 }
\ No newline at end of file
