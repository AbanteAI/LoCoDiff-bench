--- qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual)@@ -6,6 +6,7 @@ use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
+use std::mem::size_of_val;
 
 use ahash::HashMap;
 use common::counter::hardware_counter::HardwareCounterCell;
@@ -25,6 +26,7 @@ use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
+use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::data_types::facets::{FacetHit, FacetValueRef};
@@ -119,16 +121,11 @@         }
     }
 
-    pub fn check_values_any(
-        &self,
-        idx: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
-        check_fn: impl Fn(&N) -> bool,
-    ) -> bool {
+    pub fn check_values_any(&self, idx: PointOffsetType, check_fn: impl Fn(&N) -> bool) -> bool {
         match self {
             MapIndex::Mutable(index) => index.check_values_any(idx, check_fn),
             MapIndex::Immutable(index) => index.check_values_any(idx, check_fn),
-            MapIndex::Mmap(index) => index.check_values_any(idx, hw_counter, check_fn),
+            MapIndex::Mmap(index) => index.check_values_any(idx, &HardwareCounterCell::disposable(), check_fn),
         }
     }
 
@@ -302,23 +299,6 @@         }
     }
 
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
-    }
-
-    /// Estimates cardinality for `except` clause
-    ///
-    /// # Arguments
-    ///
-    /// * 'excluded' - values, which are not considered as matching
-    ///
-    /// # Returns
-    ///
-    /// * `CardinalityEstimation` - estimation of cardinality
     fn except_cardinality<'a>(
         &'a self,
         excluded: impl Iterator<Item = &'a N>,
@@ -440,6 +420,14 @@         )
     }
 
+    fn files(&self) -> Vec<PathBuf> {
+        match self {
+            MapIndex::Mutable(_) => Vec::new(),
+            MapIndex::Immutable(_) => Vec::new(),
+            MapIndex::Mmap(index) => index.files(),
+        }
+    }
+
     pub fn is_on_disk(&self) -> bool {
         match self {
             MapIndex::Mutable(_) => false,
@@ -616,6 +604,7 @@                         None
                     }
                 }
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(keywords) => Some(self.except_set(keywords, hw_counter)),
@@ -626,6 +615,7 @@                         None
                     }
                 }
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -674,6 +664,7 @@                         None
                     }
                 }
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(keywords) => {
@@ -688,6 +679,7 @@                         None
                     }
                 }
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -700,7 +692,7 @@     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
         Box::new(
             self.iter_values()
-                .map(|value| {
+                .map(move |value| {
                     (
                         value,
                         self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
@@ -714,6 +706,18 @@                 }),
         )
     }
+
+    fn is_on_disk(&self) -> bool {
+        self.is_on_disk()
+    }
+
+    fn populate(&self) -> OperationResult<()> {
+        self.populate()
+    }
+
+    fn clear_cache(&self) -> OperationResult<()> {
+        self.clear_cache()
+    }
 }
 
 impl PayloadFieldIndex for MapIndex<UuidIntType> {
@@ -769,13 +773,8 @@                             .unique(),
                     ))
                 }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
+                AnyVariants::Integers(_) => None,
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(uuids_string) => {
@@ -785,6 +784,7 @@                         .collect();
 
                     let excluded_uuids = uuids.ok()?;
+
                     let exclude_iter = self
                         .iter_values()
                         .filter(move |key| !excluded_uuids.contains(*key))
@@ -792,13 +792,8 @@                         .unique();
                     Some(Box::new(exclude_iter))
                 }
-                AnyVariants::Integers(other) => {
-                    if other.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
+                AnyVariants::Integers(_) => None,
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -846,15 +841,8 @@                         ))),
                     )
                 }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
+                AnyVariants::Integers(_) => None,
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(uuids_string) => {
@@ -867,15 +855,8 @@ 
                     Some(self.except_cardinality(excluded_uuids.iter(), hw_counter))
                 }
-                AnyVariants::Integers(other) => {
-                    if other.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
+                AnyVariants::Integers(_) => None,
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -905,6 +886,18 @@                 }),
         )
     }
+
+    fn is_on_disk(&self) -> bool {
+        self.is_on_disk()
+    }
+
+    fn populate(&self) -> OperationResult<()> {
+        self.populate()
+    }
+
+    fn clear_cache(&self) -> OperationResult<()> {
+        self.clear_cache()
+    }
 }
 
 impl PayloadFieldIndex for MapIndex<IntPayloadType> {
@@ -941,30 +934,20 @@                 }
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(keywords) => {
-                    if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
-                    } else {
-                        None
-                    }
-                }
+            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
+                AnyVariants::Strings(_) => None,
                 AnyVariants::Integers(integers) => Some(Box::new(
                     integers
                         .iter()
                         .flat_map(move |integer| self.get_iterator(integer, hw_counter).copied())
                         .unique(),
                 )),
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(other) => {
-                    if other.is_empty() {
-                        Some(Box::new(iter::empty()))
-                    } else {
-                        None
-                    }
-                }
+                AnyVariants::Strings(_) => None,
                 AnyVariants::Integers(integers) => Some(self.except_set(integers, hw_counter)),
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -1013,6 +996,7 @@                         ))),
                     )
                 }
+                AnyVariants::Booleans(_) => None,
             },
             Some(Match::Except(MatchExcept { except })) => match except {
                 AnyVariants::Strings(others) => {
@@ -1027,6 +1011,7 @@                 AnyVariants::Integers(integers) => {
                     Some(self.except_cardinality(integers.iter(), hw_counter))
                 }
+                AnyVariants::Booleans(_) => None,
             },
             _ => None,
         }
@@ -1052,6 +1037,18 @@                     cardinality: count,
                 }),
         )
+    }
+
+    fn is_on_disk(&self) -> bool {
+        self.is_on_disk()
+    }
+
+    fn populate(&self) -> OperationResult<()> {
+        self.populate()
+    }
+
+    fn clear_cache(&self) -> OperationResult<()> {
+        self.clear_cache()
     }
 }
 
