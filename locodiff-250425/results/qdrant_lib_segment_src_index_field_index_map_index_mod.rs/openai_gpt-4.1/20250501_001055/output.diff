--- qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual)@@ -3,6 +3,7 @@ use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -22,11 +23,11 @@ 
 use self::immutable_map_index::ImmutableMapIndex;
 use self::mutable_map_index::MutableMapIndex;
-use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
+use super::FieldIndexBuilderTrait;
+use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::Flusher;
-use crate::common::operation_error::{OperationError, OperationResult};
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
@@ -110,6 +111,14 @@         }
     }
 
+    fn get_db_wrapper(&self) -> &crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper {
+        match self {
+            MapIndex::Mutable(index) => index.get_db_wrapper(),
+            MapIndex::Immutable(index) => index.get_db_wrapper(),
+            MapIndex::Mmap(_) => panic!("No DB Wrapper for mmap index"),
+        }
+    }
+
     fn load_from_db(&mut self) -> OperationResult<bool> {
         match self {
             MapIndex::Mutable(index) => index.load_from_db(),
@@ -211,10 +220,10 @@         }
     }
 
-    pub fn iter_values_map<'a>(
-        &'a self,
-        hw_cell: &'a HardwareCounterCell,
-    ) -> Box<dyn Iterator<Item = (&'a N, IdIter<'a>)> + 'a> {
+    pub fn iter_values_map(
+        &self,
+        hw_cell: &'_ HardwareCounterCell,
+    ) -> Box<dyn Iterator<Item = (&N, IdIter<'_>)> + '_> {
         match self {
             MapIndex::Mutable(index) => Box::new(index.iter_values_map()),
             MapIndex::Immutable(index) => Box::new(index.iter_values_map()),
@@ -299,14 +308,6 @@                 index.remove_point(id);
                 Ok(())
             }
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
         }
     }
 
