
index 0a4e2d76..3173fb7c 100644
--- a/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected):tmp/tmph_dara2w_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual):tmp/tmpxjrotczx_actual.txt	
@@ -3,6 +3,7 @@ use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
 use std::hash::{BuildHasher, Hash};
 use std::iter;
+use std::mem::size_of_val;
 use std::path::{Path, PathBuf};
 use std::str::FromStr;
 use std::sync::Arc;
@@ -25,14 +26,13 @@ use self::mutable_map_index::MutableMapIndex;
 use super::FieldIndexBuilderTrait;
 use super::facet_index::FacetIndex;
 use super::mmap_point_to_values::MmapValue;
-use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
+use crate::common::Flusher;
 use crate::data_types::facets::{FacetHit, FacetValueRef};
 use crate::index::field_index::stat_tools::number_of_selected_points;
 use crate::index::field_index::{
     CardinalityEstimation, PayloadBlockCondition, PayloadFieldIndex, PrimaryCondition, ValueIndexer,
 };
-use crate::index::query_estimator::combine_should_estimations;
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
     AnyVariants, FieldCondition, IntPayloadType, Match, MatchAny, MatchExcept, MatchValue,
@@ -40,21 +40,19 @@ use crate::types::{
 };
 
 pub mod immutable_map_index;
-pub mod mmap_map_index;
 pub mod mutable_map_index;
+pub mod mmap_map_index;
 
 pub type IdRefIter<'a> = Box<dyn Iterator<Item = &'a PointOffsetType> + 'a>;
 pub type IdIter<'a> = Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
 pub trait MapIndexKey: Key + MmapValue + Eq + Display + Debug {
     type Owned: Borrow<Self> + Hash + Eq + Clone + FromStr + Default;
-
     fn to_owned(&self) -> Self::Owned;
 }
 
 impl MapIndexKey for str {
     type Owned = SmolStr;
-
     fn to_owned(&self) -> Self::Owned {
         SmolStr::from(self)
     }
@@ -62,7 +60,6 @@ impl MapIndexKey for str {
 
 impl MapIndexKey for IntPayloadType {
     type Owned = IntPayloadType;
-
     fn to_owned(&self) -> Self::Owned {
         *self
     }
@@ -70,7 +67,6 @@ impl MapIndexKey for IntPayloadType {
 
 impl MapIndexKey for UuidIntType {
     type Owned = UuidIntType;
-
     fn to_owned(&self) -> Self::Owned {
         *self
     }
@@ -92,9 +88,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     }
 
     pub fn new_mmap(path: &Path, is_on_disk: bool) -> OperationResult<Self> {
-        Ok(MapIndex::Mmap(Box::new(MmapMapIndex::load(
-            path, is_on_disk,
-        )?)))
+        Ok(MapIndex::Mmap(Box::new(MmapMapIndex::load(path, is_on_disk)?)))
     }
 
     pub fn builder(db: Arc<RwLock<DB>>, field_name: &str) -> MapIndexBuilder<N> {
@@ -110,11 +104,10 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn load_from_db(&mut self) -> OperationResult<bool> {
+    pub fn load_from_db(&mut self) -> OperationResult<bool> {
         match self {
             MapIndex::Mutable(index) => index.load_from_db(),
             MapIndex::Immutable(index) => index.load_from_db(),
-            // mmap index is always loaded
             MapIndex::Mmap(_) => Ok(true),
         }
     }
@@ -122,13 +115,12 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
     pub fn check_values_any(
         &self,
         idx: PointOffsetType,
-        hw_counter: &HardwareCounterCell,
         check_fn: impl Fn(&N) -> bool,
     ) -> bool {
         match self {
             MapIndex::Mutable(index) => index.check_values_any(idx, check_fn),
             MapIndex::Immutable(index) => index.check_values_any(idx, check_fn),
-            MapIndex::Mmap(index) => index.check_values_any(idx, hw_counter, check_fn),
+            MapIndex::Mmap(index) => index.check_values_any(idx, check_fn),
         }
     }
 
@@ -155,7 +147,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_indexed_points(&self) -> usize {
+    pub fn get_indexed_points(&self) -> usize {
         match self {
             MapIndex::Mutable(index) => index.get_indexed_points(),
             MapIndex::Immutable(index) => index.get_indexed_points(),
@@ -163,7 +155,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn get_values_count(&self) -> usize {
+    pub fn get_values_count(&self) -> usize {
         match self {
             MapIndex::Mutable(index) => index.get_values_count(),
             MapIndex::Immutable(index) => index.get_values_count(),
@@ -195,7 +187,7 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    pub fn iter_values(&self) -> Box<dyn Iterator<Item = &N> + '_> {
+    fn iter_values(&self) -> Box<dyn Iterator<Item = &N> + '_> {
         match self {
             MapIndex::Mutable(index) => index.iter_values(),
             MapIndex::Immutable(index) => index.iter_values(),
@@ -222,10 +214,6 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    pub fn storage_cf_name(field: &str) -> String {
-        format!("{field}_map")
-    }
-
     fn flusher(&self) -> Flusher {
         match self {
             MapIndex::Mutable(index) => index.get_db_wrapper().flusher(),
@@ -234,17 +222,11 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    fn match_cardinality(
-        &self,
-        value: &N,
-        hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation {
-        let values_count = self.get_count_for_value(value, hw_counter).unwrap_or(0);
-
-        CardinalityEstimation::exact(values_count)
+    pub fn storage_cf_name(field: &str) -> String {
+        format!("{field}_map")
     }
 
-    pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
+    pub fn payload_telemetry(&self) -> PayloadIndexTelemetry {
         PayloadIndexTelemetry {
             field_name: None,
             points_count: self.get_indexed_points(),
@@ -258,113 +240,20 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    pub fn encode_db_record(value: &N, idx: PointOffsetType) -> String {
-        format!("{value}/{idx}")
-    }
-
-    pub fn decode_db_record(s: &str) -> OperationResult<(N::Owned, PointOffsetType)> {
-        const DECODE_ERR: &str = "Index db parsing error: wrong data format";
-        let separator_pos = s
-            .rfind('/')
-            .ok_or_else(|| OperationError::service_error(DECODE_ERR))?;
-        if separator_pos == s.len() - 1 {
-            return Err(OperationError::service_error(DECODE_ERR));
-        }
-        let value_str = &s[..separator_pos];
-        let value =
-            N::Owned::from_str(value_str).map_err(|_| OperationError::service_error(DECODE_ERR))?;
-        let idx_str = &s[separator_pos + 1..];
-        let idx = PointOffsetType::from_str(idx_str)
-            .map_err(|_| OperationError::service_error(DECODE_ERR))?;
-        Ok((value, idx))
-    }
-
-    pub fn values_is_empty(&self, idx: PointOffsetType) -> bool {
-        self.values_count(idx) == 0
-    }
-
-    fn clear(self) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Immutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Mmap(index) => index.clear(),
-        }
-    }
-
-    fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
-        match self {
-            MapIndex::Mutable(index) => index.remove_point(id),
-            MapIndex::Immutable(index) => index.remove_point(id),
-            MapIndex::Mmap(index) => {
-                index.remove_point(id);
-                Ok(())
-            }
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
-        }
+    fn match_cardinality(
+        &self,
+        value: &N,
+        hw_counter: &HardwareCounterCell,
+    ) -> CardinalityEstimation {
+        let values_count = self.get_count_for_value(value, hw_counter).unwrap_or(0);
+        CardinalityEstimation::exact(values_count)
     }
 
-    /// Estimates cardinality for `except` clause
-    ///
-    /// # Arguments
-    ///
-    /// * 'excluded' - values, which are not considered as matching
-    ///
-    /// # Returns
-    ///
-    /// * `CardinalityEstimation` - estimation of cardinality
     fn except_cardinality<'a>(
         &'a self,
         excluded: impl Iterator<Item = &'a N>,
         hw_counter: &HardwareCounterCell,
     ) -> CardinalityEstimation {
-        // Minimal case: we exclude as many points as possible.
-        // In this case, excluded points do not have any other values except excluded ones.
-        // So the first step - we estimate how many other points is needed to fit unused values.
-
-        // Example:
-        // Values: 20, 20
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 110
-        // total_excluded_value_count = 40
-        // non_excluded_values_count = 110 - 40 = 70
-        // max_values_per_point = 5 - 2 = 3
-        // min_not_excluded_by_values = 70 / 3 = 24
-        // min = max(24, 100 - 40) = 60
-        // exp = ...
-        // max = min(20, 70) = 20
-
-        // Values: 60, 60
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 200
-        // total_excluded_value_count = 120
-        // non_excluded_values_count = 200 - 120 = 80
-        // max_values_per_point = 5 - 2 = 3
-        // min_not_excluded_by_values = 80 / 3 = 27
-        // min = max(27, 100 - 120) = 27
-        // exp = ...
-        // max = min(60, 80) = 60
-
-        // Values: 60, 60, 60
-        // Unique values: 5
-        // Total points: 100
-        // Total values: 200
-        // total_excluded_value_count = 180
-        // non_excluded_values_count = 200 - 180 = 20
-        // max_values_per_point = 5 - 3 = 2
-        // min_not_excluded_by_values = 20 / 2 = 10
-        // min = max(10, 100 - 180) = 10
-        // exp = ...
-        // max = min(60, 20) = 20
-
         let excluded_value_counts: Vec<_> = excluded
             .map(|val| {
                 self.get_count_for_value(val.borrow(), hw_counter)
@@ -372,49 +261,29 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
             })
             .collect();
         let total_excluded_value_count: usize = excluded_value_counts.iter().sum();
-
-        debug_assert!(total_excluded_value_count <= self.get_values_count());
-
         let non_excluded_values_count = self
             .get_values_count()
             .saturating_sub(total_excluded_value_count);
         let max_values_per_point = self
             .get_unique_values_count()
             .saturating_sub(excluded_value_counts.len());
-
         if max_values_per_point == 0 {
-            // All points are excluded, so we can't select any point
-            debug_assert_eq!(non_excluded_values_count, 0);
             return CardinalityEstimation::exact(0);
         }
-
-        // Minimal amount of points, required to fit all unused values.
-        // Cardinality can't be less than this value.
-        let min_not_excluded_by_values = non_excluded_values_count.div_ceil(max_values_per_point);
-
+        let min_not_excluded_by_values =
+            non_excluded_values_count.div_ceil(max_values_per_point);
         let min = min_not_excluded_by_values.max(
             self.get_indexed_points()
                 .saturating_sub(total_excluded_value_count),
         );
-
-        // Maximum scenario: selected points overlap as much as possible.
-        // From one side, all excluded values should be assigned to the same point
-        // => we can take the value with the maximum amount of points.
-        // From another side, all other values should be enough to fill all other points.
-
         let max_excluded_value_count = excluded_value_counts.iter().max().copied().unwrap_or(0);
-
         let max = self
             .get_indexed_points()
             .saturating_sub(max_excluded_value_count)
             .min(non_excluded_values_count);
-
-        // Expected case: we assume that all points are filled equally.
-        // So we can estimate the probability of the point to have non-excluded value.
         let exp = number_of_selected_points(self.get_indexed_points(), non_excluded_values_count)
             .max(min)
             .min(max);
-
         CardinalityEstimation {
             primary_clauses: vec![],
             min,
@@ -448,22 +317,19 @@ impl<N: MapIndexKey + ?Sized> MapIndex<N> {
         }
     }
 
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
         match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mutable(_) => {}
+            MapIndex::Immutable(_) => {}
             MapIndex::Mmap(index) => index.populate()?,
         }
         Ok(())
     }
 
-    /// Drop disk cache.
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
-            MapIndex::Mutable(_) => {}   // Not a mmap
-            MapIndex::Immutable(_) => {} // Not a mmap
+            MapIndex::Mutable(_) => {}
+            MapIndex::Immutable(_) => {}
             MapIndex::Mmap(index) => index.clear_cache()?,
         }
         Ok(())
@@ -479,11 +345,7 @@ where
     type FieldIndexType = MapIndex<N>;
 
     fn init(&mut self) -> OperationResult<()> {
-        match &mut self.0 {
-            MapIndex::Mutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Immutable(index) => index.get_db_wrapper().recreate_column_family(),
-            MapIndex::Mmap(_) => unreachable!(),
-        }
+        self.0.get_db_wrapper().recreate_column_family()
     }
 
     fn add_point(
@@ -530,11 +392,9 @@ where
             flatten_values.extend(payload_values);
         }
         let flatten_values: Vec<N::Owned> = flatten_values.into_iter().map(Into::into).collect();
-
         if self.point_to_values.len() <= id as usize {
             self.point_to_values.resize_with(id as usize + 1, Vec::new);
         }
-
         self.point_to_values[id as usize].extend(flatten_values.clone());
 
         let mut hw_cell_wb = hw_counter
@@ -700,10 +560,10 @@ impl PayloadFieldIndex for MapIndex<str> {
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
         Box::new(
             self.iter_values()
-                .map(|value| {
+                .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
@@ -716,7 +576,7 @@ impl PayloadFieldIndex for MapIndex<str> {
     }
 }
 
-impl PayloadFieldIndex for MapIndex<UuidIntType> {
+impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     fn count_indexed_points(&self) -> usize {
         self.get_indexed_points()
     }
@@ -744,61 +604,38 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
     ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(uuid_string) => {
-                    let uuid = Uuid::from_str(uuid_string).ok()?;
-                    Some(Box::new(
-                        self.get_iterator(&uuid.as_u128(), hw_counter).copied(),
-                    ))
+                ValueVariants::String(_) => None,
+                ValueVariants::Integer(integer) => {
+                    Some(Box::new(self.get_iterator(integer, hw_counter).copied()))
                 }
-                ValueVariants::Integer(_) => None,
                 ValueVariants::Bool(_) => None,
             },
             Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let uuids = uuids.ok()?;
-
-                    Some(Box::new(
-                        uuids
-                            .into_iter()
-                            .flat_map(move |uuid| self.get_iterator(&uuid, hw_counter).copied())
-                            .unique(),
-                    ))
-                }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(Box::new(iter::empty()))
+                AnyVariants::Strings(keywords) => {
+                    if keywords.is_empty() {
+                        Some(Box::new(vec![].into_iter()))
                     } else {
                         None
                     }
                 }
+                AnyVariants::Integers(integers) => Some(Box::new(
+                    integers
+                        .iter()
+                        .flat_map(move |integer| self.get_iterator(integer, hw_counter).copied())
+                        .unique(),
+                )),
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let excluded_uuids = uuids.ok()?;
-                    let exclude_iter = self
-                        .iter_values()
-                        .filter(move |key| !excluded_uuids.contains(*key))
-                        .flat_map(move |key| self.get_iterator(key, hw_counter).copied())
-                        .unique();
-                    Some(Box::new(exclude_iter))
-                }
-                AnyVariants::Integers(other) => {
+                AnyVariants::Strings(other) => {
                     if other.is_empty() {
                         Some(Box::new(iter::empty()))
                     } else {
                         None
                     }
                 }
+                AnyVariants::Integers(integers) => {
+                    Some(self.except_set(integers, hw_counter))
+                }
             },
             _ => None,
         }
@@ -811,29 +648,30 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
     ) -> Option<CardinalityEstimation> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(uuid_string) => {
-                    let uuid = Uuid::from_str(uuid_string).ok()?;
-                    let mut estimation = self.match_cardinality(&uuid.as_u128(), hw_counter);
+                ValueVariants::String(_) => None,
+                ValueVariants::Integer(integer) => {
+                    let mut estimation = self.match_cardinality(integer, hw_counter);
                     estimation
                         .primary_clauses
                         .push(PrimaryCondition::Condition(Box::new(condition.clone())));
                     Some(estimation)
                 }
-                ValueVariants::Integer(_) => None,
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
+            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
+                AnyVariants::Strings(keywords) => {
+                    if keywords.is_empty() {
+                        Some(CardinalityEstimation::exact(0).with_primary_clause(
+                            PrimaryCondition::Condition(Box::new(condition.clone())),
+                        ))
+                    } else {
+                        None
+                    }
+                }
+                AnyVariants::Integers(integers) => {
+                    let estimations = integers
                         .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let uuids = uuids.ok()?;
-
-                    let estimations = uuids
-                        .into_iter()
-                        .map(|uuid| self.match_cardinality(&uuid, hw_counter))
+                        .map(|integer| self.match_cardinality(integer, hw_counter))
                         .collect::<Vec<_>>();
                     let estimation = if estimations.is_empty() {
                         CardinalityEstimation::exact(0)
@@ -846,29 +684,10 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         ))),
                     )
                 }
-                AnyVariants::Integers(integers) => {
-                    if integers.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(uuids_string) => {
-                    let uuids: Result<IndexSet<u128>, _> = uuids_string
-                        .iter()
-                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
-                        .collect();
-
-                    let excluded_uuids = uuids.ok()?;
-
-                    Some(self.except_cardinality(excluded_uuids.iter(), hw_counter))
-                }
-                AnyVariants::Integers(other) => {
-                    if other.is_empty() {
+                AnyVariants::Strings(others) => {
+                    if others.is_empty() {
                         Some(CardinalityEstimation::exact(0).with_primary_clause(
                             PrimaryCondition::Condition(Box::new(condition.clone())),
                         ))
@@ -876,6 +695,9 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                         None
                     }
                 }
+                AnyVariants::Integers(integers) => {
+                    Some(self.except_cardinality(integers.iter(), hw_counter))
+                }
             },
             _ => None,
         }
@@ -891,23 +713,20 @@ impl PayloadFieldIndex for MapIndex<UuidIntType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // payload_blocks only used in HNSW building, which is unmeasured.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
                 .filter(move |(_value, count)| *count >= threshold)
                 .map(move |(value, count)| PayloadBlockCondition {
-                    condition: FieldCondition::new_match(
-                        key.clone(),
-                        Uuid::from_u128(*value).to_string().into(),
-                    ),
+                    condition: FieldCondition::new_match(key.clone(), (*value).into()),
                     cardinality: count,
                 }),
         )
     }
 }
 
-impl PayloadFieldIndex for MapIndex<IntPayloadType> {
+impl PayloadFieldIndex for MapIndex<UuidIntType> {
     fn count_indexed_points(&self) -> usize {
         self.get_indexed_points()
     }
@@ -935,36 +754,60 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(_) => None,
-                ValueVariants::Integer(integer) => {
-                    Some(Box::new(self.get_iterator(integer, hw_counter).copied()))
+                ValueVariants::String(uuid_string) => {
+                    let uuid = Uuid::from_str(uuid_string).ok()?;
+                    Some(Box::new(
+                        self.get_iterator(&uuid.as_u128(), hw_counter).copied(),
+                    ))
                 }
+                ValueVariants::Integer(_) => None,
                 ValueVariants::Bool(_) => None,
             },
             Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
-                AnyVariants::Strings(keywords) => {
-                    if keywords.is_empty() {
-                        Some(Box::new(vec![].into_iter()))
+                AnyVariants::Strings(uuids_string) => {
+                    let uuids: Result<IndexSet<u128>, _> = uuids_string
+                        .iter()
+                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
+                        .collect();
+                    let uuids = uuids.ok()?;
+                    Some(Box::new(
+                        uuids
+                            .into_iter()
+                            .flat_map(move |uuid| {
+                                self.get_iterator(&uuid, hw_counter).copied()
+                            })
+                            .unique(),
+                    ))
+                }
+                AnyVariants::Integers(integers) => {
+                    if integers.is_empty() {
+                        Some(Box::new(iter::empty()))
                     } else {
                         None
                     }
                 }
-                AnyVariants::Integers(integers) => Some(Box::new(
-                    integers
-                        .iter()
-                        .flat_map(move |integer| self.get_iterator(integer, hw_counter).copied())
-                        .unique(),
-                )),
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(other) => {
+                AnyVariants::Strings(uuids_string) => {
+                    let uuids: Result<IndexSet<u128>, _> = uuids_string
+                        .iter()
+                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
+                        .collect();
+                    let excluded_uuids = uuids.ok()?;
+                    let exclude_iter = self
+                        .iter_values()
+                        .filter(move |key| !excluded_uuids.contains(*key))
+                        .flat_map(move |key| self.get_iterator(key, hw_counter).copied())
+                        .unique();
+                    Some(Box::new(exclude_iter))
+                }
+                AnyVariants::Integers(other) => {
                     if other.is_empty() {
                         Some(Box::new(iter::empty()))
                     } else {
                         None
                     }
                 }
-                AnyVariants::Integers(integers) => Some(self.except_set(integers, hw_counter)),
             },
             _ => None,
         }
@@ -977,30 +820,27 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
     ) -> Option<CardinalityEstimation> {
         match &condition.r#match {
             Some(Match::Value(MatchValue { value })) => match value {
-                ValueVariants::String(_) => None,
-                ValueVariants::Integer(integer) => {
-                    let mut estimation = self.match_cardinality(integer, hw_counter);
+                ValueVariants::String(uuid_string) => {
+                    let uuid = Uuid::from_str(uuid_string).ok()?;
+                    let mut estimation = self.match_cardinality(&uuid.as_u128(), hw_counter);
                     estimation
                         .primary_clauses
                         .push(PrimaryCondition::Condition(Box::new(condition.clone())));
                     Some(estimation)
                 }
+                ValueVariants::Integer(_) => None,
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
-                AnyVariants::Strings(keywords) => {
-                    if keywords.is_empty() {
-                        Some(CardinalityEstimation::exact(0).with_primary_clause(
-                            PrimaryCondition::Condition(Box::new(condition.clone())),
-                        ))
-                    } else {
-                        None
-                    }
-                }
-                AnyVariants::Integers(integers) => {
-                    let estimations = integers
+            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
+                AnyVariants::Strings(uuids_string) => {
+                    let uuids: Result<IndexSet<u128>, _> = uuids_string
                         .iter()
-                        .map(|integer| self.match_cardinality(integer, hw_counter))
+                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
+                        .collect();
+                    let uuids = uuids.ok()?;
+                    let estimations = uuids
+                        .into_iter()
+                        .map(|uuid| self.match_cardinality(&uuid, hw_counter))
                         .collect::<Vec<_>>();
                     let estimation = if estimations.is_empty() {
                         CardinalityEstimation::exact(0)
@@ -1013,10 +853,27 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                         ))),
                     )
                 }
+                AnyVariants::Integers(integers) => {
+                    if integers.is_empty() {
+                        Some(CardinalityEstimation::exact(0).with_primary_clause(
+                            PrimaryCondition::Condition(Box::new(condition.clone())),
+                        ))
+                    } else {
+                        None
+                    }
+                }
             },
             Some(Match::Except(MatchExcept { except })) => match except {
-                AnyVariants::Strings(others) => {
-                    if others.is_empty() {
+                AnyVariants::Strings(uuids_string) => {
+                    let uuids: Result<IndexSet<u128>, _> = uuids_string
+                        .iter()
+                        .map(|uuid_string| Uuid::from_str(uuid_string).map(|x| x.as_u128()))
+                        .collect();
+                    let excluded_uuids = uuids.ok()?;
+                    Some(self.except_cardinality(excluded_uuids.iter(), hw_counter))
+                }
+                AnyVariants::Integers(other) => {
+                    if other.is_empty() {
                         Some(CardinalityEstimation::exact(0).with_primary_clause(
                             PrimaryCondition::Condition(Box::new(condition.clone())),
                         ))
@@ -1024,9 +881,6 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                         None
                     }
                 }
-                AnyVariants::Integers(integers) => {
-                    Some(self.except_cardinality(integers.iter(), hw_counter))
-                }
             },
             _ => None,
         }
@@ -1042,55 +896,22 @@ impl PayloadFieldIndex for MapIndex<IntPayloadType> {
                 .map(move |value| {
                     (
                         value,
-                        self.get_count_for_value(value, &HardwareCounterCell::disposable()) // Only used in HNSW building so no measurement needed here.
+                        self.get_count_for_value(value, &HardwareCounterCell::disposable())
                             .unwrap_or(0),
                     )
                 })
                 .filter(move |(_value, count)| *count >= threshold)
                 .map(move |(value, count)| PayloadBlockCondition {
-                    condition: FieldCondition::new_match(key.clone(), (*value).into()),
+                    condition: FieldCondition::new_match(
+                        key.clone(),
+                        Uuid::from_u128(*value).to_string().into(),
+                    ),
                     cardinality: count,
                 }),
         )
     }
 }
 
-impl<N> FacetIndex for MapIndex<N>
-where
-    N: MapIndexKey + ?Sized,
-    for<'a> N::Referenced<'a>: Into<FacetValueRef<'a>>,
-    for<'a> &'a N: Into<FacetValueRef<'a>>,
-{
-    fn get_point_values(
-        &self,
-        point_id: PointOffsetType,
-    ) -> impl Iterator<Item = FacetValueRef> + '_ {
-        MapIndex::get_values(self, point_id)
-            .into_iter()
-            .flatten()
-            .map(Into::into)
-    }
-
-    fn iter_values(&self) -> impl Iterator<Item = FacetValueRef<'_>> + '_ {
-        self.iter_values().map(Into::into)
-    }
-
-    fn iter_values_map<'a>(
-        &'a self,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> impl Iterator<Item = (FacetValueRef<'a>, IdIter<'a>)> + 'a {
-        self.iter_values_map(hw_counter)
-            .map(|(k, iter)| (k.into(), iter))
-    }
-
-    fn iter_counts_per_value(&self) -> impl Iterator<Item = FacetHit<FacetValueRef<'_>>> + '_ {
-        self.iter_counts_per_value().map(|(value, count)| FacetHit {
-            value: value.into(),
-            count,
-        })
-    }
-}
-
 impl ValueIndexer for MapIndex<str> {
     type ValueType = String;
 
@@ -1184,16 +1005,55 @@ impl ValueIndexer for MapIndex<UuidIntType> {
     }
 }
 
+impl<N> FacetIndex for MapIndex<N>
+where
+    N: MapIndexKey + ?Sized,
+    for<'a> N::Referenced<'a>: Into<FacetValueRef<'a>>,
+    for<'a> &'a N: Into<FacetValueRef<'a>>,
+{
+    fn get_point_values(
+        &self,
+        point_id: PointOffsetType,
+    ) -> impl Iterator<Item = FacetValueRef> + '_ {
+        MapIndex::get_values(self, point_id)
+            .into_iter()
+            .flatten()
+            .map(Into::into)
+    }
+
+    fn iter_values(&self) -> impl Iterator<Item = FacetValueRef<'_>> + '_ {
+        self.iter_values().map(Into::into)
+    }
+
+    fn iter_values_map<'a>(
+        &'a self,
+        hw_counter: &'a HardwareCounterCell,
+    ) -> impl Iterator<Item = (FacetValueRef<'a>, IdIter<'a>)> + 'a {
+        self.iter_values_map(hw_counter)
+            .map(|(k, iter)| (k.into(), iter))
+    }
+
+    fn iter_counts_per_value(&self) -> impl Iterator<Item = FacetHit<FacetValueRef<'_>>> + '_ {
+        self.iter_counts_per_value().map(|(value, count)| FacetHit {
+            value: value.into(),
+            count,
+        })
+    }
+}
+
 #[cfg(test)]
 mod tests {
     use std::collections::HashSet;
+    use std::fmt::Debug;
     use std::path::Path;
-
-    use rstest::rstest;
+    use std::str::FromStr;
     use tempfile::Builder;
+    use rstest::rstest;
+    use uuid::Uuid;
 
     use super::*;
     use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
+    use crate::counter::hardware_counter::HardwareCounterCell;
 
     const FIELD_NAME: &str = "test";
 
@@ -1215,7 +1075,6 @@ mod tests {
         <MapIndex<N> as ValueIndexer>::ValueType: Into<N::Owned>,
     {
         let hw_counter = HardwareCounterCell::new();
-
         match index_type {
             IndexType::Mutable | IndexType::Immutable => {
                 let mut builder =
@@ -1224,9 +1083,7 @@ mod tests {
                 for (idx, values) in data.iter().enumerate() {
                     let values: Vec<Value> = values.iter().map(&into_value).collect();
                     let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
+                    builder.add_point(idx as PointOffsetType, &values, &hw_counter).unwrap();
                 }
                 builder.finalize().unwrap();
             }
@@ -1236,29 +1093,30 @@ mod tests {
                 for (idx, values) in data.iter().enumerate() {
                     let values: Vec<Value> = values.iter().map(&into_value).collect();
                     let values: Vec<_> = values.iter().collect();
-                    builder
-                        .add_point(idx as PointOffsetType, &values, &hw_counter)
-                        .unwrap();
+                    builder.add_point(idx as PointOffsetType, &values, &hw_counter).unwrap();
                 }
                 builder.finalize().unwrap();
             }
         }
     }
 
-    fn load_map_index<N: MapIndexKey + ?Sized>(
+    fn load_map_index<N>(
         data: &[Vec<N::Owned>],
         path: &Path,
         index_type: IndexType,
-    ) -> MapIndex<N> {
+    ) -> MapIndex<N>
+    where
+        N: MapIndexKey + ?Sized,
+        MapIndex<N>: PayloadFieldIndex + ValueIndexer,
+        <MapIndex<N> as ValueIndexer>::ValueType: Into<N::Owned>,
+    {
         let mut index = match index_type {
             IndexType::Mutable => {
                 MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, true)
             }
-            IndexType::Immutable => MapIndex::<N>::new_memory(
-                open_db_with_existing_cf(path).unwrap(),
-                FIELD_NAME,
-                false,
-            ),
+            IndexType::Immutable => {
+                MapIndex::<N>::new_memory(open_db_with_existing_cf(path).unwrap(), FIELD_NAME, false)
+            }
             IndexType::Mmap => MapIndex::<N>::new_mmap(path, false).unwrap(),
         };
         index.load_from_db().unwrap();
@@ -1268,43 +1126,13 @@ mod tests {
                 .unwrap()
                 .map(|v| N::to_owned(N::from_referenced(&v)))
                 .collect();
-            let index_values: HashSet<&N> = index_values.iter().map(|v| v.borrow()).collect();
-            let check_values: HashSet<&N> = values.iter().map(|v| v.borrow()).collect();
+            let check_values: HashSet<N::Owned> =
+                values.iter().map(|v| v.clone()).collect();
             assert_eq!(index_values, check_values);
         }
-
         index
     }
 
-    #[test]
-    fn test_index_non_ascending_insertion() {
-        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
-        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
-        builder.init().unwrap();
-
-        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
-
-        let hw_counter = HardwareCounterCell::new();
-
-        for (idx, values) in data.iter().enumerate().rev() {
-            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
-            let values: Vec<_> = values.iter().collect();
-            builder
-                .add_point(idx as PointOffsetType, &values, &hw_counter)
-                .unwrap();
-        }
-
-        let index = builder.finalize().unwrap();
-        for (idx, values) in data.iter().enumerate().rev() {
-            let res: Vec<_> = index
-                .get_values(idx as u32)
-                .unwrap()
-                .map(|i| *i as i32)
-                .collect();
-            assert_eq!(res, *values);
-        }
-    }
-
     #[rstest]
     #[case(IndexType::Mutable)]
     #[case(IndexType::Immutable)]
@@ -1322,9 +1150,8 @@ mod tests {
         save_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type, |v| (*v).into());
         let index = load_map_index::<IntPayloadType>(&data, temp_dir.path(), index_type);
 
-        let hw_counter = HardwareCounterCell::new();
-
         // Ensure cardinality is non zero
+        let hw_counter = HardwareCounterCell::new();
         assert!(
             !index
                 .except_cardinality(vec![].into_iter(), &hw_counter)
@@ -1338,26 +1165,10 @@ mod tests {
     #[case(IndexType::Mmap)]
     fn test_string_disk_map_index(#[case] index_type: IndexType) {
         let data = vec![
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("PPMM"),
-                SmolStr::from("QQXX"),
-                SmolStr::from("YYBB"),
-            ],
-            vec![
-                SmolStr::from("FFMM"),
-                SmolStr::from("IICC"),
-                SmolStr::from("IIBB"),
-            ],
-            vec![
-                SmolStr::from("AABB"),
-                SmolStr::from("UUFF"),
-                SmolStr::from("IIBB"),
-            ],
+            vec![SmolStr::from("AABB"), SmolStr::from("UUFF"), SmolStr::from("IIBB")],
+            vec![SmolStr::from("PPMM"), SmolStr::from("QQXX"), SmolStr::from("YYBB")],
+            vec![SmolStr::from("FFMM"), SmolStr::from("IICC"), SmolStr::from("IIBB")],
+            vec![SmolStr::from("AABB"), SmolStr::from("UUFF"), SmolStr::from("IIBB")],
             vec![SmolStr::from("PPGG")],
         ];
 
@@ -1366,8 +1177,6 @@ mod tests {
         let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
 
         let hw_counter = HardwareCounterCell::new();
-
-        // Ensure cardinality is non zero
         assert!(
             !index
                 .except_cardinality(vec![].into_iter(), &hw_counter)
@@ -1387,7 +1196,6 @@ mod tests {
         let index = load_map_index::<str>(&data, temp_dir.path(), index_type);
 
         let hw_counter = HardwareCounterCell::new();
-
         // Ensure cardinality is zero
         assert!(
             index
@@ -1395,4 +1203,32 @@ mod tests {
                 .equals_min_exp_max(&CardinalityEstimation::exact(0)),
         );
     }
+
+    #[test]
+    fn test_index_non_ascending_insertion() {
+        let temp_dir = Builder::new().prefix("store_dir").tempdir().unwrap();
+        let mut builder = MapIndex::<IntPayloadType>::mmap_builder(temp_dir.path(), false);
+        builder.init().unwrap();
+
+        let data = [vec![1, 2, 3, 4, 5, 6], vec![25], vec![10, 11]];
+
+        let hw_counter = HardwareCounterCell::new();
+        for (idx, values) in data.iter().enumerate().rev() {
+            let values: Vec<Value> = values.iter().map(|i| (*i).into()).collect();
+            let values: Vec<_> = values.iter().collect();
+            builder
+                .add_point(idx as PointOffsetType, &values, &hw_counter)
+                .unwrap();
+        }
+
+        let index = builder.finalize().unwrap();
+        for (idx, values) in data.iter().enumerate().rev() {
+            let res: Vec<_> = index
+                .get_values(idx as PointOffsetType)
+                .unwrap()
+                .map(|i| *i as i32)
+                .collect();
+            assert_eq!(res, *values);
+        }
+    }
 }
\ No newline at end of file
