--- qdrant_lib_segment_src_index_field_index_map_index_mod.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_map_index_mod.rs_extracted.txt (actual)@@ -1,3 +1,7 @@+pub mod immutable_map_index;
+pub mod mmap_map_index;
+pub mod mutable_map_index;
+
 use std::borrow::Borrow;
 use std::collections::hash_map::Entry;
 use std::fmt::{Debug, Display};
@@ -39,10 +43,6 @@     PayloadKeyType, UuidIntType, ValueVariants,
 };
 
-pub mod immutable_map_index;
-pub mod mmap_map_index;
-pub mod mutable_map_index;
-
 pub type IdRefIter<'a> = Box<dyn Iterator<Item = &'a PointOffsetType> + 'a>;
 pub type IdIter<'a> = Box<dyn Iterator<Item = PointOffsetType> + 'a>;
 
@@ -138,10 +138,10 @@     ) -> Option<Box<dyn Iterator<Item = N::Referenced<'_>> + '_>> {
         match self {
             MapIndex::Mutable(index) => Some(Box::new(
-                index.get_values(idx)?.map(|v| N::as_referenced(v)),
+                index.get_values(idx)?.map(N::as_referenced),
             )),
             MapIndex::Immutable(index) => Some(Box::new(
-                index.get_values(idx)?.map(|v| N::as_referenced(v)),
+                index.get_values(idx)?.map(N::as_referenced),
             )),
             MapIndex::Mmap(index) => Some(Box::new(index.get_values(idx)?)),
         }
@@ -153,6 +153,10 @@             MapIndex::Immutable(index) => index.values_count(idx).unwrap_or_default(),
             MapIndex::Mmap(index) => index.values_count(idx).unwrap_or_default(),
         }
+    }
+
+    pub fn values_is_empty(&self, idx: PointOffsetType) -> bool {
+        self.values_count(idx) == 0
     }
 
     fn get_indexed_points(&self) -> usize {
@@ -279,10 +283,6 @@         Ok((value, idx))
     }
 
-    pub fn values_is_empty(&self, idx: PointOffsetType) -> bool {
-        self.values_count(idx) == 0
-    }
-
     fn clear(self) -> OperationResult<()> {
         match self {
             MapIndex::Mutable(index) => index.get_db_wrapper().recreate_column_family(),
@@ -299,14 +299,6 @@                 index.remove_point(id);
                 Ok(())
             }
-        }
-    }
-
-    fn files(&self) -> Vec<PathBuf> {
-        match self {
-            MapIndex::Mutable(_) => Vec::new(),
-            MapIndex::Immutable(_) => Vec::new(),
-            MapIndex::Mmap(index) => index.files(),
         }
     }
 
@@ -549,7 +541,7 @@                 hw_cell_wb.incr_delta(size);
             }
 
-            hw_cell_wb.incr_delta(size_of_val(&id));
+            hw_cell_wb.incr_delta(std::mem::size_of_val(&id));
             entry.or_default().push(id);
         }
 
@@ -660,9 +652,10 @@                         combine_should_estimations(&estimations, self.get_indexed_points())
                     };
                     Some(
-                        estimation.with_primary_clause(PrimaryCondition::Condition(Box::new(
-                            condition.clone(),
-                        ))),
+                        estimation
+                            .with_primary_clause(PrimaryCondition::Condition(Box::new(
+                                condition.clone(),
+                            ))),
                     )
                 }
                 AnyVariants::Integers(integers) => {
@@ -841,9 +834,10 @@                         combine_should_estimations(&estimations, self.get_indexed_points())
                     };
                     Some(
-                        estimation.with_primary_clause(PrimaryCondition::Condition(Box::new(
-                            condition.clone(),
-                        ))),
+                        estimation
+                            .with_primary_clause(PrimaryCondition::Condition(Box::new(
+                                condition.clone(),
+                            ))),
                     )
                 }
                 AnyVariants::Integers(integers) => {
@@ -933,7 +927,7 @@         condition: &'a FieldCondition,
         hw_counter: &'a HardwareCounterCell,
     ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
-        match &condition.r#match {
+        match &condition.r#if match {
             Some(Match::Value(MatchValue { value })) => match value {
                 ValueVariants::String(_) => None,
                 ValueVariants::Integer(integer) => {
@@ -987,7 +981,7 @@                 }
                 ValueVariants::Bool(_) => None,
             },
-            Some(Match::Any(MatchAny { any: any_variants })) => match any_variants {
+            Some(Match::Any(MatchAny { any: any_variant })) => match any_variant {
                 AnyVariants::Strings(keywords) => {
                     if keywords.is_empty() {
                         Some(CardinalityEstimation::exact(0).with_primary_clause(
@@ -1008,9 +1002,10 @@                         combine_should_estimations(&estimations, self.get_indexed_points())
                     };
                     Some(
-                        estimation.with_primary_clause(PrimaryCondition::Condition(Box::new(
-                            condition.clone(),
-                        ))),
+                        estimation
+                            .with_primary_clause(PrimaryCondition::Condition(Box::new(
+                                condition.clone(),
+                            ))),
                     )
                 }
             },
@@ -1036,7 +1031,7 @@         &self,
         threshold: usize,
         key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
+    ) -> Box<dyn IteratorItem = PayloadBlockCondition> + '_> {
         Box::new(
             self.iter_values()
                 .map(move |value| {
