
index 78b27a3ba..a8506cd30 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmp81dnvxnf_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmp_g6y12ln_actual.txt	
@@ -132,11 +132,9 @@ impl Points for PointsService {
     async fn update_vectors(
         &self,
         mut request: Request<UpdatePointVectors>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -159,7 +157,7 @@ impl Points for PointsService {
     async fn delete_vectors(
         &self,
         mut request: Request<DeletePointVectors>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -183,7 +181,7 @@ impl Points for PointsService {
     async fn set_payload(
         &self,
         mut request: Request<SetPayloadPoints>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -206,7 +204,7 @@ impl Points for PointsService {
     async fn overwrite_payload(
         &self,
         mut request: Request<SetPayloadPoints>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response(PointsOperationResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -229,7 +227,7 @@ impl Points for PointsService {
     async fn delete_payload(
         &self,
         mut request: Request<DeletePayloadPoints>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response(PointsOperationResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -252,7 +250,7 @@ impl Points for PointsService {
     async fn clear_payload(
         &self,
         mut request: Request<ClearPayloadPoints>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response(PointsOperationResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -275,7 +273,7 @@ impl Points for PointsService {
     async fn update_batch(
         &self,
         mut request: Request<UpdateBatchPoints>,
-    ) -> Result<Response<UpdateBatchResponse>, Status> {
+        ) -> Result<Response(UpdateBatchResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -299,10 +297,11 @@ impl Points for PointsService {
     async fn create_field_index(
         &self,
         mut request: Request<CreateFieldIndexCollection>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response(PointsOperationResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -321,7 +320,7 @@ impl Points for PointsService {
     async fn delete_field_index(
         &self,
         mut request: Request<DeleteFieldIndexCollection>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
+        ) -> Result<Response(PointsOperationResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -339,7 +338,7 @@ impl Points for PointsService {
     async fn search(
         &self,
         mut request: Request<SearchPoints>,
-    ) -> Result<Response<SearchResponse>, Status> {
+        ) -> Result<Response(SearchResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
 
@@ -361,7 +360,7 @@ impl Points for PointsService {
     async fn search_batch(
         &self,
         mut request: Request<SearchBatchPoints>,
-    ) -> Result<Response<SearchBatchResponse>, Status> {
+        ) -> Result<Response(SearchBatchResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -406,7 +405,7 @@ impl Points for PointsService {
     async fn search_groups(
         &self,
         mut request: Request<SearchPointGroups>,
-    ) -> Result<Response<SearchGroupsResponse>, Status> {
+        ) -> Result<Response(SearchGroupsResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -426,7 +425,7 @@ impl Points for PointsService {
     async fn scroll(
         &self,
         mut request: Request<ScrollPoints>,
-    ) -> Result<Response<ScrollResponse>, Status> {
+        ) -> Result<Response(ScrollResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -449,7 +448,7 @@ impl Points for PointsService {
     async fn recommend(
         &self,
         mut request: Request<RecommendPoints>,
-    ) -> Result<Response<RecommendResponse>, Status> {
+        ) -> Result<Response(RecommendResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -468,7 +467,7 @@ impl Points for PointsService {
     async fn recommend_batch(
         &self,
         mut request: Request<RecommendBatchPoints>,
-    ) -> Result<Response<RecommendBatchResponse>, Status> {
+        ) -> Result<Response(RecommendBatchResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let RecommendBatchPoints {
@@ -498,7 +497,7 @@ impl Points for PointsService {
     async fn recommend_groups(
         &self,
         mut request: Request<RecommendPointGroups>,
-    ) -> Result<Response<RecommendGroupsResponse>, Status> {
+        ) -> Result<Response(RecommendGroupsResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -518,7 +517,7 @@ impl Points for PointsService {
     async fn discover(
         &self,
         mut request: Request<DiscoverPoints>,
-    ) -> Result<Response<DiscoverResponse>, Status> {
+        ) -> Result<Response(DiscoverResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -538,7 +537,7 @@ impl Points for PointsService {
     async fn discover_batch(
         &self,
         mut request: Request<DiscoverBatchPoints>,
-    ) -> Result<Response<DiscoverBatchResponse>, Status> {
+        ) -> Result<Response(DiscoverBatchResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let DiscoverBatchPoints {
@@ -567,7 +566,7 @@ impl Points for PointsService {
     async fn count(
         &self,
         mut request: Request<CountPoints>,
-    ) -> Result<Response<CountResponse>, Status> {
+        ) -> Result<Response(CountResponse), Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
@@ -588,7 +587,7 @@ impl Points for PointsService {
     async fn query(
         &self,
         mut request: Request<QueryPoints>,
-    ) -> Result<Response<QueryResponse>, Status> {
+        ) -> Result<Response(QueryResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
@@ -610,8 +609,8 @@ impl Points for PointsService {
 
     async fn query_batch(
         &self,
-        mut request: Request<QueryBatchPoints>,
-    ) -> Result<Response<QueryBatchResponse>, Status> {
+        mut request: Request(QueryBatchPoints),
+        ) -> Result<Response(QueryBatchResponse), Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
@@ -642,8 +641,8 @@ impl Points for PointsService {
 
     async fn query_groups(
         &self,
-        mut request: Request<QueryPointGroups>,
-    ) -> Result<Response<QueryGroupsResponse>, Status> {
+        mut request: Request(QueryPointGroups),
+        ) -> Result<Response(QueryGroupsResponse), Status> {
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -664,7 +663,7 @@ impl Points for PointsService {
     async fn facet(
         &self,
         mut request: Request<FacetCounts>,
-    ) -> Result<Response<FacetResponse>, Status> {
+        ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let hw_metrics = self.get_request_collection_hw_usage_counter(
@@ -683,7 +682,7 @@ impl Points for PointsService {
     async fn search_matrix_pairs(
         &self,
         mut request: Request<SearchMatrixPoints>,
-    ) -> Result<Response<SearchMatrixPairsResponse>, Status> {
+        ) -> Result<Response<SearchMatrixPairsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let timing = Instant::now();
@@ -709,7 +708,7 @@ impl Points for PointsService {
     async fn search_matrix_offsets(
         &self,
         mut request: Request<SearchMatrixPoints>,
-    ) -> Result<Response<SearchMatrixOffsetsResponse>, Status> {
+        ) -> Result<Response<SearchMatrixOffsetsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let timing = Instant::now();
