--- qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected)+++ qdrant_src_tonic_api_points_api.rs_extracted.txt (actual)@@ -6,16 +6,18 @@     ClearPayloadPoints, CountPoints, CountResponse, CreateFieldIndexCollection,
     DeleteFieldIndexCollection, DeletePayloadPoints, DeletePointVectors, DeletePoints,
     DiscoverBatchPoints, DiscoverBatchResponse, DiscoverPoints, DiscoverResponse, FacetCounts,
-    FacetResponse, GetPoints, GetResponse, PointsOperationResponse, QueryBatchPoints,
-    QueryBatchResponse, QueryGroupsResponse, QueryPointGroups, QueryPoints, QueryResponse,
-    RecommendBatchPoints, RecommendBatchResponse, RecommendGroupsResponse, RecommendPointGroups,
-    RecommendPoints, RecommendResponse, ScrollPoints, ScrollResponse, SearchBatchPoints,
-    SearchBatchResponse, SearchGroupsResponse, SearchMatrixOffsets, SearchMatrixOffsetsResponse,
-    SearchMatrixPairs, SearchMatrixPairsResponse, SearchMatrixPoints, SearchPointGroups,
-    SearchPoints, SearchResponse, SetPayloadPoints, UpdateBatchPoints, UpdateBatchResponse,
-    UpdatePointVectors, UpsertPoints,
+    FacetResponse, GetPoints, GetResponse, HardwareUsage, PointsOperationResponse,
+    QueryBatchPoints, QueryBatchResponse, QueryGroupsResponse, QueryPointGroups, QueryPoints,
+    QueryResponse, RecommendBatchPoints, RecommendBatchResponse, RecommendGroupsResponse,
+    RecommendPointGroups, RecommendPoints, RecommendResponse, ScrollPoints, ScrollResponse,
+    SearchBatchPoints, SearchBatchResponse, SearchGroupsResponse, SearchMatrixOffsets,
+    SearchMatrixOffsetsResponse, SearchMatrixPairs, SearchMatrixPairsResponse, SearchMatrixPoints,
+    SearchPointGroups, SearchPoints, SearchResponse, SetPayloadPoints, UpdateBatchPoints,
+    UpdateBatchResponse, UpdatePointVectors, UpsertPoints,
 };
+
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
@@ -51,7 +53,6 @@         let counter = HwMeasurementAcc::new_with_metrics_drain(
             self.dispatcher.get_collection_hw_metrics(collection_name),
         );
-
         let waiting = wait != Some(false);
         RequestHwCounter::new(counter, self.service_config.hardware_reporting() && waiting)
     }
@@ -64,10 +65,8 @@         mut request: Request<UpsertPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -89,10 +88,8 @@         mut request: Request<DeletePoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -111,13 +108,11 @@ 
     async fn get(&self, mut request: Request<GetPoints>) -> Result<Response<GetResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
 
         let inner_request = request.into_inner();
-
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
         get(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -134,12 +129,8 @@         mut request: Request<UpdatePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -161,9 +152,7 @@         mut request: Request<DeletePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
+        let access = extract_access(&mut request);
         let hw_metrics = self.get_request_collection_hw_usage_counter(
             request.get_ref().collection_name.clone(),
             None,
@@ -185,9 +174,7 @@         mut request: Request<SetPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
+        let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -208,9 +195,7 @@         mut request: Request<SetPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
+        let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -231,9 +216,7 @@         mut request: Request<DeletePayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
+        let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -254,9 +237,7 @@         mut request: Request<ClearPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
+        let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -277,10 +258,8 @@         mut request: Request<UpdateBatchPoints>,
     ) -> Result<Response<UpdateBatchResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -301,7 +280,6 @@         mut request: Request<CreateFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
@@ -323,14 +301,17 @@         mut request: Request<DeleteFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
+        let access = extract_access(&mut request);
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
 
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -342,7 +323,6 @@     ) -> Result<Response<SearchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
@@ -363,29 +343,15 @@         mut request: Request<SearchBatchPoints>,
     ) -> Result<Response<SearchBatchResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
-        let SearchBatchPoints {
-            collection_name,
-            search_points,
-            read_consistency,
-            timeout,
-        } = request.into_inner();
-
-        let timeout = timeout.map(Duration::from_secs);
-
+        let access = extract_access(&mut request);
+        let collection_name = request.get_ref().collection_name.clone();
         let mut requests = Vec::new();
-
-        for mut search_point in search_points {
+        for mut search_point in request.into_inner().search_points {
             let shard_key = search_point.shard_key_selector.take();
-
             let shard_selector = convert_shard_selector_for_read(None, shard_key);
             let core_search_request = CoreSearchRequest::try_from(search_point)?;
-
             requests.push((core_search_request, shard_selector));
         }
-
         let hw_metrics =
             self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
@@ -393,9 +359,8 @@             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
             requests,
-            read_consistency,
-            access,
-            timeout,
+            request.get_ref().read_consistency,
+            access,
             hw_metrics,
         )
         .await?;
@@ -411,6 +376,7 @@         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
         let res = search_groups(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -428,22 +394,21 @@         mut request: Request<ScrollPoints>,
     ) -> Result<Response<ScrollResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
-        let inner_request = request.into_inner();
-
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
-
-        scroll(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            inner_request,
+        let access = extract_access(&mut request);
+        let inner = request.into_inner();
+        let collection_name = inner.collection_name.clone();
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
+        let response = scroll(
+            StrictModeCheckedTocProvider::new(&self.dispatcher),
+            inner,
             None,
             access,
             hw_metrics,
         )
-        .await
+        .await?;
+
+        Ok(Response::new(response))
     }
 
     async fn recommend(
@@ -454,6 +419,7 @@         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
         let res = recommend(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -477,7 +443,6 @@             read_consistency,
             timeout,
         } = request.into_inner();
-
         let hw_metrics =
             self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
@@ -522,8 +487,8 @@         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
-
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
         let res = discover(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -547,9 +512,9 @@             read_consistency,
             timeout,
         } = request.into_inner();
-
         let hw_metrics =
             self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+
         let res = discover_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
@@ -569,10 +534,11 @@         mut request: Request<CountPoints>,
     ) -> Result<Response<CountResponse>, Status> {
         validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+        let access = extract_access(&mut request);
+        let collection_name = request.get_ref().collection_name.clone();
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+
         let res = count(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -593,7 +559,8 @@         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
         let res = query(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -625,6 +592,7 @@         let timeout = timeout.map(Duration::from_secs);
         let hw_metrics =
             self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+
         let res = query_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
@@ -644,10 +612,12 @@         &self,
         mut request: Request<QueryPointGroups>,
     ) -> Result<Response<QueryGroupsResponse>, Status> {
+        validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
         let res = query_groups(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -661,16 +631,16 @@ 
         Ok(res)
     }
+
     async fn facet(
         &self,
         mut request: Request<FacetCounts>,
     ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-        let hw_metrics = self.get_request_collection_hw_usage_counter(
-            request.get_ref().collection_name.clone(),
-            None,
-        );
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None);
+
         facet(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -687,8 +657,8 @@         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let timing = Instant::now();
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None);
         let search_matrix_response = search_points_matrix(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -696,13 +666,11 @@             hw_metrics.get_counter(),
         )
         .await?;
-
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(pairs_response))
     }
 
@@ -713,8 +681,8 @@         validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let timing = Instant::now();
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None);
         let search_matrix_response = search_points_matrix(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -722,13 +690,11 @@             hw_metrics.get_counter(),
         )
         .await?;
-
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(offsets_response))
     }
 }