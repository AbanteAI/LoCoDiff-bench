--- qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected)+++ qdrant_src_tonic_api_points_api.rs_extracted.txt (actual)@@ -162,6 +162,8 @@     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
+        // Nothing to verify here.
+
         let access = extract_access(&mut request);
 
         let hw_metrics = self.get_request_collection_hw_usage_counter(
@@ -303,6 +305,7 @@         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -326,11 +329,16 @@ 
         let access = extract_access(&mut request);
 
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -623,8 +631,7 @@             timeout,
         } = request;
         let timeout = timeout.map(Duration::from_secs);
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
         let res = query_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
@@ -644,6 +651,7 @@         &self,
         mut request: Request<QueryPointGroups>,
     ) -> Result<Response<QueryGroupsResponse>, Status> {
+        validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
