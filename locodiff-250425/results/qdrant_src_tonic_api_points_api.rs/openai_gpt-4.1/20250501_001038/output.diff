
index 78b27a3b..b90ae295 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmpiw12uc40_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmprabson08_actual.txt	
@@ -16,6 +16,7 @@ use api::grpc::qdrant::{
     UpdatePointVectors, UpsertPoints,
 };
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
@@ -25,7 +26,6 @@ use super::query_common::*;
 use super::update_common::*;
 use super::validate;
 use crate::common::inference::extract_token;
-use crate::common::update::InternalUpdateParams;
 use crate::settings::ServiceConfig;
 use crate::tonic::auth::extract_access;
 use crate::tonic::verification::StrictModeCheckedTocProvider;
@@ -116,8 +116,8 @@ impl Points for PointsService {
 
         let inner_request = request.into_inner();
 
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
         get(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -134,7 +134,6 @@ impl Points for PointsService {
         mut request: Request<UpdatePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         // Nothing to verify here.
 
         let access = extract_access(&mut request);
@@ -277,7 +276,6 @@ impl Points for PointsService {
         mut request: Request<UpdateBatchPoints>,
     ) -> Result<Response<UpdateBatchResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -303,6 +301,7 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -326,11 +325,16 @@ impl Points for PointsService {
 
         let access = extract_access(&mut request);
 
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -342,7 +346,6 @@ impl Points for PointsService {
     ) -> Result<Response<SearchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
@@ -363,7 +366,6 @@ impl Points for PointsService {
         mut request: Request<SearchBatchPoints>,
     ) -> Result<Response<SearchBatchResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
 
         let SearchBatchPoints {
@@ -433,8 +435,8 @@ impl Points for PointsService {
 
         let inner_request = request.into_inner();
 
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
         scroll(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -696,13 +698,11 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(pairs_response))
     }
 
@@ -722,13 +722,11 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(offsets_response))
     }
 }
\ No newline at end of file
