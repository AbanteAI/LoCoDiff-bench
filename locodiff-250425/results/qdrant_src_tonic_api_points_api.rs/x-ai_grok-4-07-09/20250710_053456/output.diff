
index 78b27a3ba..7db098982 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmp6u4e6eqk_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmpgot6ga36_actual.txt	
@@ -16,6 +16,7 @@ use api::grpc::qdrant::{
     UpdatePointVectors, UpsertPoints,
 };
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
@@ -135,8 +136,6 @@ impl Points for PointsService {
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -164,10 +163,9 @@ impl Points for PointsService {
 
         let access = extract_access(&mut request);
 
-        let hw_metrics = self.get_request_collection_hw_usage_counter(
-            request.get_ref().collection_name.clone(),
-            None,
-        );
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
 
         delete_vectors(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -303,6 +301,7 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -326,11 +325,16 @@ impl Points for PointsService {
 
         let access = extract_access(&mut request);
 
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -341,21 +345,20 @@ impl Points for PointsService {
         mut request: Request<SearchPoints>,
     ) -> Result<Response<SearchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
 
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
-        let res = search(
+        search(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             None,
             access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn search_batch(
@@ -381,15 +384,15 @@ impl Points for PointsService {
             let shard_key = search_point.shard_key_selector.take();
 
             let shard_selector = convert_shard_selector_for_read(None, shard_key);
+
             let core_search_request = CoreSearchRequest::try_from(search_point)?;
 
             requests.push((core_search_request, shard_selector));
         }
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
-        let res = core_search_batch(
+        core_search_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
             requests,
@@ -398,9 +401,7 @@ impl Points for PointsService {
             timeout,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn search_groups(
@@ -408,19 +409,18 @@ impl Points for PointsService {
         mut request: Request<SearchPointGroups>,
     ) -> Result<Response<SearchGroupsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = search_groups(
+        search_groups(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             None,
             access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn scroll(
@@ -451,18 +451,17 @@ impl Points for PointsService {
         mut request: Request<RecommendPoints>,
     ) -> Result<Response<RecommendResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = recommend(
+        recommend(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn recommend_batch(
@@ -470,6 +469,7 @@ impl Points for PointsService {
         mut request: Request<RecommendBatchPoints>,
     ) -> Result<Response<RecommendBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let RecommendBatchPoints {
             collection_name,
@@ -478,21 +478,20 @@ impl Points for PointsService {
             timeout,
         } = request.into_inner();
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let timeout = timeout.map(Duration::from_secs);
+
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
-        let res = recommend_batch(
+        recommend_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
             recommend_points,
             read_consistency,
             access,
-            timeout.map(Duration::from_secs),
+            timeout,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn recommend_groups(
@@ -500,19 +499,18 @@ impl Points for PointsService {
         mut request: Request<RecommendPointGroups>,
     ) -> Result<Response<RecommendGroupsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
-        let res = recommend_groups(
+        recommend_groups(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn discover(
@@ -520,19 +518,18 @@ impl Points for PointsService {
         mut request: Request<DiscoverPoints>,
     ) -> Result<Response<DiscoverResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
 
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = discover(
+        discover(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn discover_batch(
@@ -540,6 +537,7 @@ impl Points for PointsService {
         mut request: Request<DiscoverBatchPoints>,
     ) -> Result<Response<DiscoverBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let DiscoverBatchPoints {
             collection_name,
@@ -548,20 +546,19 @@ impl Points for PointsService {
             timeout,
         } = request.into_inner();
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-        let res = discover_batch(
+        let timeout = timeout.map(Duration::from_secs);
+
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        discover_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
             discover_points,
             read_consistency,
             access,
-            timeout.map(Duration::from_secs),
+            timeout,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn count(
@@ -571,18 +568,17 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = count(
+        count(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             None,
-            &access,
+            access,
             hw_metrics,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn query(
@@ -590,12 +586,13 @@ impl Points for PointsService {
         mut request: Request<QueryPoints>,
     ) -> Result<Response<QueryResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
-        let res = query(
+        query(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             None,
@@ -603,9 +600,7 @@ impl Points for PointsService {
             hw_metrics,
             inference_token,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn query_batch(
@@ -613,6 +608,7 @@ impl Points for PointsService {
         mut request: Request<QueryBatchPoints>,
     ) -> Result<Response<QueryBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let request = request.into_inner();
@@ -622,10 +618,10 @@ impl Points for PointsService {
             read_consistency,
             timeout,
         } = request;
+
         let timeout = timeout.map(Duration::from_secs);
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-        let res = query_batch(
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        query_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
             query_points,
@@ -635,9 +631,7 @@ impl Points for PointsService {
             hw_metrics,
             inference_token,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
 
     async fn query_groups(
@@ -649,7 +643,7 @@ impl Points for PointsService {
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
-        let res = query_groups(
+        query_groups(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             None,
@@ -657,16 +651,17 @@ impl Points for PointsService {
             hw_metrics,
             inference_token,
         )
-        .await?;
-
-        Ok(res)
+        .await
     }
+
     async fn facet(
         &self,
         mut request: Request<FacetCounts>,
     ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
+
         let hw_metrics = self.get_request_collection_hw_usage_counter(
             request.get_ref().collection_name.clone(),
             None,
@@ -685,10 +680,15 @@ impl Points for PointsService {
         mut request: Request<SearchMatrixPoints>,
     ) -> Result<Response<SearchMatrixPairsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
+
         let timing = Instant::now();
+
         let collection_name = request.get_ref().collection_name.clone();
+
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
         let search_matrix_response = search_points_matrix(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -711,10 +711,15 @@ impl Points for PointsService {
         mut request: Request<SearchMatrixPoints>,
     ) -> Result<Response<SearchMatrixOffsetsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
+
         let timing = Instant::now();
+
         let collection_name = request.get_ref().collection_name.clone();
+
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
+
         let search_matrix_response = search_points_matrix(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
