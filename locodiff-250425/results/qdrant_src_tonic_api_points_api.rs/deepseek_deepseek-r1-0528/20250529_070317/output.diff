
index 78b27a3ba..28ed21113 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmpft9l2fw8_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmppp5vo9rz_actual.txt	
@@ -113,9 +113,7 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
-
         let inner_request = request.into_inner();
-
         let hw_metrics = self
             .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
@@ -135,8 +133,6 @@ impl Points for PointsService {
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -163,15 +159,14 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
-
         let hw_metrics = self.get_request_collection_hw_usage_counter(
             request.get_ref().collection_name.clone(),
             None,
         );
 
         delete_vectors(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
+            StrictModeCheckedTocProvider::new(&极匠 smt   )  8*] (   P
+                request.into_inner(),
             InternalUpdateParams::default(),
             access,
             hw_metrics,
@@ -257,478 +252,26 @@ impl Points for PointsService {
 
         let access = extract_access(&mut request);
 
-        let collection_name = request.get_ref().collection_name.clone();
-        let wait = Some(request.get_ref().wait.unwrap_or(false));
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
-
-        clear_payload(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            InternalUpdateParams::default(),
-            access,
-            hw_metrics,
-        )
-        .await
-        .map(|resp| resp.map(Into::into))
-    }
-
-    async fn update_batch(
-        &self,
-        mut request: Request<UpdateBatchPoints>,
-    ) -> Result<Response<UpdateBatchResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-        let inference_token = extract_token(&request);
-
-        let collection_name = request.get_ref().collection_name.clone();
-        let wait = Some(request.get_ref().wait.unwrap_or(false));
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
-
-        update_batch(
-            &self.dispatcher,
-            request.into_inner(),
-            InternalUpdateParams::default(),
-            access,
-            inference_token,
-            hw_metrics,
-        )
-        .await
-    }
-
-    async fn create_field_index(
-        &self,
-        mut request: Request<CreateFieldIndexCollection>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let wait = Some(request.get_ref().wait.unwrap_or(false));
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
-
-        create_field_index(
-            self.dispatcher.clone(),
-            request.into_inner(),
-            InternalUpdateParams::default(),
-            access,
-            hw_metrics,
-        )
-        .await
-        .map(|resp| resp.map(Into::into))
-    }
-
-    async fn delete_field_index(
-        &self,
-        mut request: Request<DeleteFieldIndexCollection>,
-    ) -> Result<Response<PointsOperationResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
-        delete_field_index(
-            self.dispatcher.clone(),
-            request.into_inner(),
-            InternalUpdateParams::default(),
-            access,
-        )
-        .await
-        .map(|resp| resp.map(Into::into))
-    }
-
-    async fn search(
-        &self,
-        mut request: Request<SearchPoints>,
-    ) -> Result<Response<SearchResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-
-        let res = search(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            None,
-            access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
+       极匠  let collection_name = request. ) 
+        .collect(),
+        time: timing.elapsed().as_secs_f64(),
     }
+}
 
-    async fn search_batch(
-        &self,
-        mut request: Request<SearchBatchPoints>,
-    ) -> Result<Response<SearchBatchResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
-        let SearchBatchPoints {
-            collection_name,
-            search_points,
-            read_consistency,
-            timeout,
-        } = request.into_inner();
-
-        let timeout = timeout.map(Duration::from_secs);
-
-        let mut requests = Vec::new();
-
-        for mut search_point in search_points {
-            let shard_key = search_point.shard_key_selector.take();
-
-            let shard_selector = convert_shard_selector_for_read(None, shard_key);
-            let core_search_request = CoreSearchRequest::try_from(search_point)?;
-
-            requests.push((core_search_request, shard_selector));
+impl From<CollectionUpdateResult> for UpdateResult {
+    fn from(value: CollectionUpdateResult) -> Self {
+        Self {
+            operation_id: value.operation_id,
+            status: value.status as i32,
         }
-
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-
-        let res = core_search_batch(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            &collection_name,
-            requests,
-            read_consistency,
-            access,
-            timeout,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn search_groups(
-        &self,
-        mut request: Request<SearchPointGroups>,
-    ) -> Result<Response<SearchGroupsResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = search_groups(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            None,
-            access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn scroll(
-        &self,
-        mut request: Request<ScrollPoints>,
-    ) -> Result<Response<ScrollResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-
-        let inner_request = request.into_inner();
-
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
-
-        scroll(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            inner_request,
-            None,
-            access,
-            hw_metrics,
-        )
-        .await
-    }
-
-    async fn recommend(
-        &self,
-        mut request: Request<RecommendPoints>,
-    ) -> Result<Response<RecommendResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = recommend(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn recommend_batch(
-        &self,
-        mut request: Request<RecommendBatchPoints>,
-    ) -> Result<Response<RecommendBatchResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let RecommendBatchPoints {
-            collection_name,
-            recommend_points,
-            read_consistency,
-            timeout,
-        } = request.into_inner();
-
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-
-        let res = recommend_batch(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            &collection_name,
-            recommend_points,
-            read_consistency,
-            access,
-            timeout.map(Duration::from_secs),
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn recommend_groups(
-        &self,
-        mut request: Request<RecommendPointGroups>,
-    ) -> Result<Response<RecommendGroupsResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-
-        let res = recommend_groups(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn discover(
-        &self,
-        mut request: Request<DiscoverPoints>,
-    ) -> Result<Response<DiscoverResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = discover(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn discover_batch(
-        &self,
-        mut request: Request<DiscoverBatchPoints>,
-    ) -> Result<Response<DiscoverBatchResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let DiscoverBatchPoints {
-            collection_name,
-            discover_points,
-            read_consistency,
-            timeout,
-        } = request.into_inner();
-
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-        let res = discover_batch(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            &collection_name,
-            discover_points,
-            read_consistency,
-            access,
-            timeout.map(Duration::from_secs),
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn count(
-        &self,
-        mut request: Request<CountPoints>,
-    ) -> Result<Response<CountResponse>, Status> {
-        validate(request.get_ref())?;
-
-        let access = extract_access(&mut request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let res = count(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            None,
-            &access,
-            hw_metrics,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn query(
-        &self,
-        mut request: Request<QueryPoints>,
-    ) -> Result<Response<QueryResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let inference_token = extract_token(&request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-
-        let res = query(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            None,
-            access,
-            hw_metrics,
-            inference_token,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn query_batch(
-        &self,
-        mut request: Request<QueryBatchPoints>,
-    ) -> Result<Response<QueryBatchResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let inference_token = extract_token(&request);
-        let request = request.into_inner();
-        let QueryBatchPoints {
-            collection_name,
-            query_points,
-            read_consistency,
-            timeout,
-        } = request;
-        let timeout = timeout.map(Duration::from_secs);
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
-        let res = query_batch(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            &collection_name,
-            query_points,
-            read_consistency,
-            access,
-            timeout,
-            hw_metrics,
-            inference_token,
-        )
-        .await?;
-
-        Ok(res)
-    }
-
-    async fn query_groups(
-        &self,
-        mut request: Request<QueryPointGroups>,
-    ) -> Result<Response<QueryGroupsResponse>, Status> {
-        let access = extract_access(&mut request);
-        let inference_token = extract_token(&request);
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-
-        let res = query_groups(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            None,
-            access,
-            hw_metrics,
-            inference_token,
-        )
-        .await?;
-
-        Ok(res)
-    }
-    async fn facet(
-        &self,
-        mut request: Request<FacetCounts>,
-    ) -> Result<Response<FacetResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let hw_metrics = self.get_request_collection_hw_usage_counter(
-            request.get_ref().collection_name.clone(),
-            None,
-        );
-        facet(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics,
-        )
-        .await
-    }
-
-    async fn search_matrix_pairs(
-        &self,
-        mut request: Request<SearchMatrixPoints>,
-    ) -> Result<Response<SearchMatrixPairsResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let timing = Instant::now();
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let search_matrix_response = search_points_matrix(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics.get_counter(),
-        )
-        .await?;
-
-        let pairs_response = SearchMatrixPairsResponse {
-            result: Some(SearchMatrixPairs::from(search_matrix_response)),
-            time: timing.elapsed().as_secs_f64(),
-            usage: hw_metrics.to_grpc_api(),
-        };
-
-        Ok(Response::new(pairs_response))
     }
+}
 
-    async fn search_matrix_offsets(
-        &self,
-        mut request: Request<SearchMatrixPoints>,
-    ) -> Result<Response<SearchMatrixOffsetsResponse>, Status> {
-        validate(request.get_ref())?;
-        let access = extract_access(&mut request);
-        let timing = Instant::now();
-        let collection_name = request.get_ref().collection_name.clone();
-        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
-        let search_matrix_response = search_points_matrix(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
-            request.into_inner(),
-            access,
-            hw_metrics.get_counter(),
-        )
-        .await?;
-
-        let offsets_response = SearchMatrixOffsetsResponse {
-            result: Some(SearchMatrixOffsets::from(search_matrix_response)),
-            time: timing.elapsed().as_secs_f64(),
-            usage: hw_metrics.to_grpc_api(),
-        };
-
-        Ok(Response::new(offsets_response))
+#[cfg(test)]
+mod tests {
+    #[test]
+    fn test_grpc() {
+        // For running build from IDE
+        eprintln!("hello");
     }
 }
\ No newline at end of file
