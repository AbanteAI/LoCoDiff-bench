
index 78b27a3ba..43b4c0cb5 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmp01rtxuxf_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmp3ytdqbj4_actual.txt	
@@ -1,7 +1,7 @@
 use std::sync::Arc;
 use std::time::{Duration, Instant};
 
-use api::grpc::qdrant::points_server::Points;
+use api::grpc::points_server::Points;
 use api::grpc::qdrant::{
     ClearPayloadPoints, CountPoints, CountResponse, CreateFieldIndexCollection,
     DeleteFieldIndexCollection, DeletePayloadPoints, DeletePointVectors, DeletePoints,
@@ -16,6 +16,7 @@ use api::grpc::qdrant::{
     UpdatePointVectors, UpsertPoints,
 };
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
@@ -61,7 +62,7 @@ impl PointsService {
 impl Points for PointsService {
     async fn upsert(
         &self,
-        mut request: Request<UpsertPoints>,
+        request: Request<UpsertPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -86,7 +87,7 @@ impl Points for PointsService {
 
     async fn delete(
         &self,
-        mut request: Request<DeletePoints>,
+        request: Request<DeletePoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -131,12 +132,10 @@ impl Points for PointsService {
 
     async fn update_vectors(
         &self,
-        mut request: Request<UpdatePointVectors>,
+        request: Request<UpdatePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -158,7 +157,7 @@ impl Points for PointsService {
 
     async fn delete_vectors(
         &self,
-        mut request: Request<DeletePointVectors>,
+        request: Request<DeletePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -182,7 +181,7 @@ impl Points for PointsService {
 
     async fn set_payload(
         &self,
-        mut request: Request<SetPayloadPoints>,
+        request: Request<SetPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -205,7 +204,7 @@ impl Points for PointsService {
 
     async fn overwrite_payload(
         &self,
-        mut request: Request<SetPayloadPoints>,
+        request: Request<SetPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -228,7 +227,7 @@ impl Points for PointsService {
 
     async fn delete_payload(
         &self,
-        mut request: Request<DeletePayloadPoints>,
+        request: Request<DeletePayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -251,7 +250,7 @@ impl Points for PointsService {
 
     async fn clear_payload(
         &self,
-        mut request: Request<ClearPayloadPoints>,
+        request: Request<ClearPayloadPoints>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -274,10 +273,9 @@ impl Points for PointsService {
 
     async fn update_batch(
         &self,
-        mut request: Request<UpdateBatchPoints>,
+        request: Request<UpdateBatchPoints>,
     ) -> Result<Response<UpdateBatchResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -298,11 +296,12 @@ impl Points for PointsService {
 
     async fn create_field_index(
         &self,
-        mut request: Request<CreateFieldIndexCollection>,
+        request: Request<CreateFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -320,7 +319,7 @@ impl Points for PointsService {
 
     async fn delete_field_index(
         &self,
-        mut request: Request<DeleteFieldIndexCollection>,
+        request: Request<DeleteFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -338,7 +337,7 @@ impl Points for PointsService {
 
     async fn search(
         &self,
-        mut request: Request<SearchPoints>,
+        request: Request<SearchPoints>,
     ) -> Result<Response<SearchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -360,7 +359,7 @@ impl Points for PointsService {
 
     async fn search_batch(
         &self,
-        mut request: Request<SearchBatchPoints>,
+        request: Request<SearchBatchPoints>,
     ) -> Result<Response<SearchBatchResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -373,9 +372,8 @@ impl Points for PointsService {
             timeout,
         } = request.into_inner();
 
-        let timeout = timeout.map(Duration::from_secs);
-
         let mut requests = Vec::new();
+        let timeout = timeout.map(Duration::from_secs);
 
         for mut search_point in search_points {
             let shard_key = search_point.shard_key_selector.take();
@@ -405,7 +403,7 @@ impl Points for PointsService {
 
     async fn search_groups(
         &self,
-        mut request: Request<SearchPointGroups>,
+        request: Request<SearchPointGroups>,
     ) -> Result<Response<SearchGroupsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -425,7 +423,7 @@ impl Points for PointsService {
 
     async fn scroll(
         &self,
-        mut request: Request<ScrollPoints>,
+        request: Request<ScrollPoints>,
     ) -> Result<Response<ScrollResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -448,7 +446,7 @@ impl Points for PointsService {
 
     async fn recommend(
         &self,
-        mut request: Request<RecommendPoints>,
+        request: Request<RecommendPoints>,
     ) -> Result<Response<RecommendResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -467,7 +465,7 @@ impl Points for PointsService {
 
     async fn recommend_batch(
         &self,
-        mut request: Request<RecommendBatchPoints>,
+        request: Request<RecommendBatchPoints>,
     ) -> Result<Response<RecommendBatchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -497,7 +495,7 @@ impl Points for PointsService {
 
     async fn recommend_groups(
         &self,
-        mut request: Request<RecommendPointGroups>,
+        request: Request<RecommendPointGroups>,
     ) -> Result<Response<RecommendGroupsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -517,7 +515,7 @@ impl Points for PointsService {
 
     async fn discover(
         &self,
-        mut request: Request<DiscoverPoints>,
+        request: Request<DiscoverPoints>,
     ) -> Result<Response<DiscoverResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -537,9 +535,10 @@ impl Points for PointsService {
 
     async fn discover_batch(
         &self,
-        mut request: Request<DiscoverBatchPoints>,
+        request: Request<DiscoverBatchPoints>,
     ) -> Result<Response<DiscoverBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let DiscoverBatchPoints {
             collection_name,
@@ -566,7 +565,7 @@ impl Points for PointsService {
 
     async fn count(
         &self,
-        mut request: Request<CountPoints>,
+        request: Request<CountPoints>,
     ) -> Result<Response<CountResponse>, Status> {
         validate(request.get_ref())?;
 
@@ -587,7 +586,7 @@ impl Points for PointsService {
 
     async fn query(
         &self,
-        mut request: Request<QueryPoints>,
+        request: Request<QueryPoints>,
     ) -> Result<Response<QueryResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -610,7 +609,7 @@ impl Points for PointsService {
 
     async fn query_batch(
         &self,
-        mut request: Request<QueryBatchPoints>,
+        request: Request<QueryBatchPoints>,
     ) -> Result<Response<QueryBatchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -642,7 +641,7 @@ impl Points for PointsService {
 
     async fn query_groups(
         &self,
-        mut request: Request<QueryPointGroups>,
+        request: Request<QueryPointGroups>,
     ) -> Result<Response<QueryGroupsResponse>, Status> {
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
@@ -663,7 +662,7 @@ impl Points for PointsService {
     }
     async fn facet(
         &self,
-        mut request: Request<FacetCounts>,
+        request: Request<FacetCounts>,
     ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -682,7 +681,7 @@ impl Points for PointsService {
 
     async fn search_matrix_pairs(
         &self,
-        mut request: Request<SearchMatrixPoints>,
+        request: Request<SearchMatrixPoints>,
     ) -> Result<Response<SearchMatrixPairsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -696,19 +695,17 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(pairs_response))
     }
 
     async fn search_matrix_offsets(
         &self,
-        mut request: Request<SearchMatrixPoints>,
+        request: Request<SearchMatrixPoints>,
     ) -> Result<Response<SearchMatrixOffsetsResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
@@ -722,13 +719,11 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(offsets_response))
     }
 }
\ No newline at end of file
