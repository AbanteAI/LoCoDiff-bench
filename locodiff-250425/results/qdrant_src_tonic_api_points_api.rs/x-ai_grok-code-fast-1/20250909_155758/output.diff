
index 78b27a3ba..3b702ccc1 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmp1t2t_yy3_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmp6o2sx3_9_actual.txt	
@@ -1,5 +1,10 @@
+// This is a comment to indicate the start of the response
+use tokio::spawn;
+use futures::future::join_all;
+
 use std::sync::Arc;
-use std::time::{Duration, Instant};
+use std::time::Duration;
+use std::time::Instant;
 
 use api::grpc::qdrant::points_server::Points;
 use api::grpc::qdrant::{
@@ -16,6 +21,7 @@ use api::grpc::qdrant::{
     UpdatePointVectors, UpsertPoints,
 };
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
@@ -136,6 +142,7 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         // Nothing to verify here.
+        let pass = new_unchecked_verification_pass();
 
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
@@ -145,7 +152,7 @@ impl Points for PointsService {
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
 
         update_vectors(
-            StrictModeCheckedTocProvider::new(&self.dispatcher),
+            self.dispatcher.toc(&access, &pass).clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
@@ -301,8 +308,9 @@ impl Points for PointsService {
         mut request: Request<CreateFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
+        
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -323,14 +331,18 @@ impl Points for PointsService {
         mut request: Request<DeleteFieldIndexCollection>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
 
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -373,8 +385,6 @@ impl Points for PointsService {
             timeout,
         } = request.into_inner();
 
-        let timeout = timeout.map(Duration::from_secs);
-
         let mut requests = Vec::new();
 
         for mut search_point in search_points {
@@ -395,7 +405,7 @@ impl Points for PointsService {
             requests,
             read_consistency,
             access,
-            timeout,
+            timeout.map(Duration::from_secs),
             hw_metrics,
         )
         .await?;
@@ -428,7 +438,6 @@ impl Points for PointsService {
         mut request: Request<ScrollPoints>,
     ) -> Result<Response<ScrollResponse>, Status> {
         validate(request.get_ref())?;
-
         let access = extract_access(&mut request);
 
         let inner_request = request.into_inner();
@@ -520,6 +529,7 @@ impl Points for PointsService {
         mut request: Request<DiscoverPoints>,
     ) -> Result<Response<DiscoverResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
 
@@ -540,7 +550,9 @@ impl Points for PointsService {
         mut request: Request<DiscoverBatchPoints>,
     ) -> Result<Response<DiscoverBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
+
         let DiscoverBatchPoints {
             collection_name,
             discover_points,
@@ -696,7 +708,6 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
@@ -722,7 +733,6 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
