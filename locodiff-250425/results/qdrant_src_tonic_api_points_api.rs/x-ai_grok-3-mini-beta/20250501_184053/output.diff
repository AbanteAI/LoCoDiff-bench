--- qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected)+++ qdrant_src_tonic_api_points_api.rs_extracted.txt (actual)@@ -1,7 +1,6 @@ use std::sync::Arc;
-use std::time::{Duration, Instant};
-
-use api::grpc::qdrant::points_server::Points;
+use std::time::Duration;
+
 use api::grpc::qdrant::{
     ClearPayloadPoints, CountPoints, CountResponse, CreateFieldIndexCollection,
     DeleteFieldIndexCollection, DeletePayloadPoints, DeletePointVectors, DeletePoints,
@@ -16,16 +15,18 @@     UpdatePointVectors, UpsertPoints,
 };
 use collection::operations::types::CoreSearchRequest;
+use collection::operations::verification::new_unchecked_verification_pass;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
 use storage::content_manager::toc::request_hw_counter::RequestHwCounter;
 use storage::dispatcher::Dispatcher;
 use tonic::{Request, Response, Status};
 
-use super::query_common::*;
-use super::update_common::*;
+use super::points_common::{
+    delete_vectors, discover, discover_batch, facet, query, query_batch, query_groups,
+    recommend_groups, scroll, search_groups, search_points_matrix, update_batch, update_vectors,
+};
 use super::validate;
 use crate::common::inference::extract_token;
-use crate::common::update::InternalUpdateParams;
 use crate::settings::ServiceConfig;
 use crate::tonic::auth::extract_access;
 use crate::tonic::verification::StrictModeCheckedTocProvider;
@@ -135,8 +136,6 @@     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -303,6 +302,7 @@         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -326,11 +326,16 @@ 
         let access = extract_access(&mut request);
 
+        let collection_name = request.get_ref().collection_name.clone();
+        let wait = Some(request.get_ref().wait.unwrap_or(false));
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -342,7 +347,6 @@     ) -> Result<Response<SearchResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
 
@@ -373,8 +377,6 @@             timeout,
         } = request.into_inner();
 
-        let timeout = timeout.map(Duration::from_secs);
-
         let mut requests = Vec::new();
 
         for mut search_point in search_points {
@@ -386,8 +388,7 @@             requests.push((core_search_request, shard_selector));
         }
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
         let res = core_search_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -397,8 +398,7 @@             access,
             timeout,
             hw_metrics,
-        )
-        .await?;
+        ).await?;
 
         Ok(res)
     }
@@ -470,6 +470,7 @@         mut request: Request<RecommendBatchPoints>,
     ) -> Result<Response<RecommendBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let RecommendBatchPoints {
             collection_name,
@@ -478,8 +479,7 @@             timeout,
         } = request.into_inner();
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
 
         let res = recommend_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -489,8 +489,7 @@             access,
             timeout.map(Duration::from_secs),
             hw_metrics,
-        )
-        .await?;
+        ).await?;
 
         Ok(res)
     }
@@ -500,6 +499,7 @@         mut request: Request<RecommendPointGroups>,
     ) -> Result<Response<RecommendGroupsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
@@ -520,6 +520,7 @@         mut request: Request<DiscoverPoints>,
     ) -> Result<Response<DiscoverResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
 
@@ -540,6 +541,7 @@         mut request: Request<DiscoverBatchPoints>,
     ) -> Result<Response<DiscoverBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let DiscoverBatchPoints {
             collection_name,
@@ -548,8 +550,7 @@             timeout,
         } = request.into_inner();
 
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
         let res = discover_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
@@ -623,8 +624,7 @@             timeout,
         } = request;
         let timeout = timeout.map(Duration::from_secs);
-        let hw_metrics =
-            self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
+        let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name.clone(), None);
         let res = query_batch(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             &collection_name,
@@ -667,10 +667,8 @@     ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-        let hw_metrics = self.get_request_collection_hw_usage_counter(
-            request.get_ref().collection_name.clone(),
-            None,
-        );
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None);
         facet(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -693,16 +691,14 @@             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
-            hw_metrics.get_counter(),
-        )
-        .await?;
-
+            hw_metrics,
+        )
+        .await?;
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(pairs_response))
     }
 
@@ -719,16 +715,14 @@             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
-            hw_metrics.get_counter(),
-        )
-        .await?;
-
+            hw_metrics,
+        )
+        .await?;
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(offsets_response))
     }
 }