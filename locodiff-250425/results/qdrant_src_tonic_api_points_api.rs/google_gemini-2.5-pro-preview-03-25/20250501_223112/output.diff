--- qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected)+++ qdrant_src_tonic_api_points_api.rs_extracted.txt (actual)@@ -52,6 +52,8 @@             self.dispatcher.get_collection_hw_metrics(collection_name),
         );
 
+        // HW usage reporting is only enabled when waiting for the response,
+        // otherwise, the request might finish before the HW usage is measured.
         let waiting = wait != Some(false);
         RequestHwCounter::new(counter, self.service_config.hardware_reporting() && waiting)
     }
@@ -135,8 +137,6 @@     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
 
-        // Nothing to verify here.
-
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
 
@@ -166,7 +166,7 @@ 
         let hw_metrics = self.get_request_collection_hw_usage_counter(
             request.get_ref().collection_name.clone(),
-            None,
+            None, // Delete operation HW metrics are not reported
         );
 
         delete_vectors(
@@ -303,6 +303,7 @@         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -326,11 +327,17 @@ 
         let access = extract_access(&mut request);
 
+        // Not reporting HW usage for delete_field_index, as it's not expected to be heavy.
+        let hw_metrics = self
+            .get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None)
+            .noop();
+
         delete_field_index(
             self.dispatcher.clone(),
             request.into_inner(),
             InternalUpdateParams::default(),
             access,
+            hw_metrics,
         )
         .await
         .map(|resp| resp.map(Into::into))
@@ -365,7 +372,6 @@         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
-
         let SearchBatchPoints {
             collection_name,
             search_points,
@@ -644,6 +650,7 @@         &self,
         mut request: Request<QueryPointGroups>,
     ) -> Result<Response<QueryGroupsResponse>, Status> {
+        validate(request.get_ref())?;
         let access = extract_access(&mut request);
         let inference_token = extract_token(&request);
         let collection_name = request.get_ref().collection_name.clone();
@@ -667,10 +674,8 @@     ) -> Result<Response<FacetResponse>, Status> {
         validate(request.get_ref())?;
         let access = extract_access(&mut request);
-        let hw_metrics = self.get_request_collection_hw_usage_counter(
-            request.get_ref().collection_name.clone(),
-            None,
-        );
+        let hw_metrics = self
+            .get_request_collection_hw_usage_counter(request.get_ref().collection_name.clone(), None);
         facet(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
@@ -693,7 +698,7 @@             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
-            hw_metrics.get_counter(),
+            hw_metrics.get_counter_ref(),
         )
         .await?;
 
@@ -719,7 +724,7 @@             StrictModeCheckedTocProvider::new(&self.dispatcher),
             request.into_inner(),
             access,
-            hw_metrics.get_counter(),
+            hw_metrics.get_counter_ref(),
         )
         .await?;
 
