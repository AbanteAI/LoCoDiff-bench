
index 78b27a3ba..a8427355b 100644
--- a/qdrant_src_tonic_api_points_api.rs_expectedoutput.txt (expected):tmp/tmpw6q9u92y_expected.txt	
+++ b/qdrant_src_tonic_api_points_api.rs_extracted.txt (actual):tmp/tmpcr2s8bg6_actual.txt	
@@ -116,8 +116,8 @@ impl Points for PointsService {
 
         let inner_request = request.into_inner();
 
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
         get(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -134,7 +134,6 @@ impl Points for PointsService {
         mut request: Request<UpdatePointVectors>,
     ) -> Result<Response<PointsOperationResponse>, Status> {
         validate(request.get_ref())?;
-
         // Nothing to verify here.
 
         let access = extract_access(&mut request);
@@ -303,6 +302,7 @@ impl Points for PointsService {
         validate(request.get_ref())?;
 
         let access = extract_access(&mut request);
+
         let collection_name = request.get_ref().collection_name.clone();
         let wait = Some(request.get_ref().wait.unwrap_or(false));
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, wait);
@@ -433,8 +433,8 @@ impl Points for PointsService {
 
         let inner_request = request.into_inner();
 
-        let hw_metrics = self
-            .get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
+        let hw_metrics =
+            self.get_request_collection_hw_usage_counter(inner_request.collection_name.clone(), None);
 
         scroll(
             StrictModeCheckedTocProvider::new(&self.dispatcher),
@@ -500,6 +500,7 @@ impl Points for PointsService {
         mut request: Request<RecommendPointGroups>,
     ) -> Result<Response<RecommendGroupsResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
         let hw_metrics = self.get_request_collection_hw_usage_counter(collection_name, None);
@@ -520,6 +521,7 @@ impl Points for PointsService {
         mut request: Request<DiscoverPoints>,
     ) -> Result<Response<DiscoverResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let collection_name = request.get_ref().collection_name.clone();
 
@@ -540,6 +542,7 @@ impl Points for PointsService {
         mut request: Request<DiscoverBatchPoints>,
     ) -> Result<Response<DiscoverBatchResponse>, Status> {
         validate(request.get_ref())?;
+
         let access = extract_access(&mut request);
         let DiscoverBatchPoints {
             collection_name,
@@ -696,13 +699,11 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let pairs_response = SearchMatrixPairsResponse {
             result: Some(SearchMatrixPairs::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(pairs_response))
     }
 
@@ -722,13 +723,11 @@ impl Points for PointsService {
             hw_metrics.get_counter(),
         )
         .await?;
-
         let offsets_response = SearchMatrixOffsetsResponse {
             result: Some(SearchMatrixOffsets::from(search_matrix_response)),
             time: timing.elapsed().as_secs_f64(),
             usage: hw_metrics.to_grpc_api(),
         };
-
         Ok(Response::new(offsets_response))
     }
 }
\ No newline at end of file
