--- ghostty_src_Command.zig_expectedoutput.txt (expected)+++ ghostty_src_Command.zig_extracted.txt (actual)@@ -3,17 +3,15 @@ //! didn't support the options necessary to spawn a shell attached to a pty.
 //!
 //! Consequently, I didn't implement a lot of features that std.process.Child
-//! supports because we didn't need them. Cross-platform subprocessing is not
+//! supports because we didn't need them. Cross-platform sub-processing is not
 //! a trivial thing to implement (I've done it in three separate languages now)
-//! so if we want to replatform onto std.process.Child I'd love to do that.
+//! so if we want to re-platform onto std.process.Child I'd love to do that.
 //! This was just the fastest way to get something built.
 //!
 //! Issues with std.process.Child:
-//!
 //!   * No pre_exec callback for logic after fork but before exec.
 //!   * posix_spawn is used for Mac, but doesn't support the necessary
 //!     features for tty setup.
-//!
 const Command = @This();
 
 const std = @import("std");
@@ -33,16 +31,15 @@ 
 const PreExecFn = fn (*Command) void;
 
-/// Path to the command to run. This doesn't have to be an absolute path,
-/// because use exec functions that search the PATH, if necessary.
-///
-/// This field is null-terminated to avoid a copy for the sake of
-/// adding a null terminator since POSIX systems are so common.
+/// Path to the command to run. This doesn't have to be an absolute path
+/// because we rely on exec* functions that will search $PATH if necessary.
+/// The slice is sentinel-terminated so we don't need to duplicate the
+/// string just to append a `0` before the exec call.
 path: [:0]const u8,
 
-/// Command-line arguments. It is the responsibility of the caller to set
-/// args[0] to the command. If args is empty then args[0] will automatically
-/// be set to equal path.
+/// Command-line arguments. `args[0]` should be the command itself. If
+/// `args` is empty then `args[0]` will automatically be set to `path`.
+/// Each argument is also sentinel-terminated to avoid extra allocations.
 args: []const [:0]const u8,
 
 /// Environment variables for the child process. If this is null, inherits
@@ -90,13 +87,10 @@ } else union(enum) {
     /// Exited by normal exit call, value is exit status
     Exited: u8,
-
     /// Exited by a signal, value is the signal
     Signal: u32,
-
     /// Exited by a stop signal, value is signal
     Stopped: u32,
-
     /// Unknown exit reason, value is the status from waitpid
     Unknown: u32,
 
@@ -117,9 +111,6 @@ /// After this is successful, self.pid is available.
 pub fn start(self: *Command, alloc: Allocator) !void {
     // Use an arena allocator for the temporary allocations we need in this func.
-    // IMPORTANT: do all allocation prior to the fork(). I believe it is undefined
-    // behavior if you malloc between fork and exec. The source of the Zig
-    // stdlib seems to verify this as well as Go.
     var arena_allocator = std.heap.ArenaAllocator.init(alloc);
     defer arena_allocator.deinit();
     const arena = arena_allocator.allocator();
@@ -143,16 +134,14 @@     else
         @compileError("missing env vars");
 
-    // Fork. If we have a cgroup specified on Linxu then we use clone
+    // Fork
     const pid: posix.pid_t = switch (builtin.os.tag) {
         .linux => if (self.linux_cgroup) |cgroup|
             try internal_os.cgroup.cloneInto(cgroup)
         else
             try posix.fork(),
-
         else => try posix.fork(),
     };
-
     if (pid != 0) {
         // Parent, return immediately.
         self.pid = @intCast(pid);
@@ -169,25 +158,16 @@     if (self.stderr) |f| setupFd(f.handle, posix.STDERR_FILENO) catch
         return error.ExecFailedInChild;
 
-    // Setup our working directory
-    if (self.cwd) |cwd| posix.chdir(cwd) catch {
-        // This can fail if we don't have permission to go to
-        // this directory or if due to race conditions it doesn't
-        // exist or any various other reasons. We don't want to
-        // crash the entire process if this fails so we ignore it.
-        // We don't log because that'll show up in the output.
-    };
-
-    // Restore any rlimits that were set by Ghostty. This might fail but
-    // any failures are ignored (its best effort).
+    // Setup our working directory. Ignore errors.
+    if (self.cwd) |cwd| posix.chdir(cwd) catch {};
+
+    // Restore any rlimits that were set by Ghostty. Best effort, ignore errors.
     global_state.rlimits.restore();
 
     // If the user requested a pre exec callback, call it now.
     if (self.pre_exec) |f| f(self);
 
-    // Finally, replace our process.
-    // Note: we must use the "p"-variant of exec here because we
-    // do not guarantee our command is looked up already in the path.
+    // Finally, replace our process. Use execvpe so PATH search happens.
     _ = posix.execvpeZ(self.path, argsZ, envp) catch null;
 
     // If we are executing this code, the exec failed. In that scenario,
@@ -199,9 +179,9 @@ fn startWindows(self: *Command, arena: Allocator) !void {
     const application_w = try std.unicode.utf8ToUtf16LeAllocZ(arena, self.path);
     const cwd_w = if (self.cwd) |cwd| try std.unicode.utf8ToUtf16LeAllocZ(arena, cwd) else null;
-    const command_line_w = if (self.args.len > 0) b: {
+    const command_line_w = if (self.args.len > 0) blk: {
         const command_line = try windowsCreateCommandLine(arena, self.args);
-        break :b try std.unicode.utf8ToUtf16LeAllocZ(arena, command_line);
+        break :blk try std.unicode.utf8ToUtf16LeAllocZ(arena, command_line);
     } else null;
     const env_w = if (self.env) |env_map| try createWindowsEnvBlock(arena, env_map) else null;
 
@@ -216,11 +196,9 @@     ) else null;
     defer if (null_fd) |fd| posix.close(fd);
 
-    // TODO: In the case of having FDs instead of pty, need to set up
-    // attributes such that the child process only inherits these handles,
-    // then set bInheritsHandles below.
-
-    const attribute_list, const stdin, const stdout, const stderr = if (self.pseudo_console) |pseudo_console| b: {
+    // TODO: In the case of having FDs instead of pty, need to set up attributes
+    // such that the child process only inherits these handles, then set bInheritsHandles below.
+    const attribute_list, const stdin, const stdout, const stderr = if (self.pseudo_console) |pseudo_console| blk: {
         var attribute_list_size: usize = undefined;
         _ = windows.exp.kernel32.InitializeProcThreadAttributeList(
             null,
@@ -247,12 +225,12 @@             null,
         ) == 0) return windows.unexpectedError(windows.kernel32.GetLastError());
 
-        break :b .{ attribute_list_buf.ptr, null, null, null };
-    } else b: {
-        const stdin = if (self.stdin) |f| f.handle else null_fd.?;
-        const stdout = if (self.stdout) |f| f.handle else null_fd.?;
-        const stderr = if (self.stderr) |f| f.handle else null_fd.?;
-        break :b .{ null, stdin, stdout, stderr };
+        break :blk .{ attribute_list_buf.ptr, null, null, null };
+    } else blk: {
+        const stdin_h = if (self.stdin) |f| f.handle else null_fd.?;
+        const stdout_h = if (self.stdout) |f| f.handle else null_fd.?;
+        const stderr_h = if (self.stderr) |f| f.handle else null_fd.?;
+        break :blk .{ null, stdin_h, stdout_h, stderr_h };
     };
 
     var startup_info_ex = windows.exp.STARTUPINFOEX{
@@ -339,19 +317,14 @@ 
 /// Wait for the command to exit and return information about how it exited.
 pub fn wait(self: Command, block: bool) !Exit {
-    if (comptime builtin.os.tag == .windows) {
-        // Block until the process exits. This returns immediately if the
-        // process already exited.
+    if (builtin.os.tag == .windows) {
+        // Block until the process exits. This returns immediately if the process already exited.
         const result = windows.kernel32.WaitForSingleObject(self.pid.?, windows.INFINITE);
-        if (result == windows.WAIT_FAILED) {
-            return windows.unexpectedError(windows.kernel32.GetLastError());
-        }
+        if (result == windows.WAIT_FAILED) return windows.unexpectedError(windows.kernel32.GetLastError());
 
         var exit_code: windows.DWORD = undefined;
         const has_code = windows.kernel32.GetExitCodeProcess(self.pid.?, &exit_code) != 0;
-        if (!has_code) {
-            return windows.unexpectedError(windows.kernel32.GetLastError());
-        }
+        if (!has_code) return windows.unexpectedError(windows.kernel32.GetLastError());
 
         return .{ .Exited = exit_code };
     }
@@ -389,7 +362,9 @@ pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
     // If the command already contains a slash, then we return it as-is
     // because it is assumed to be absolute or relative.
-    if (std.mem.indexOfScalar(u8, cmd, '/') != null) {
+    if (std.mem.indexOfScalar(u8, cmd, '/') != null or
+        (builtin.os.tag == .windows and std.mem.indexOfScalar(u8, cmd, '\\') != null))
+    {
         return try alloc.dupe(u8, cmd);
     }
 
@@ -492,16 +467,14 @@ // way to get it from the std package.
 fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
     // count bytes needed
-    const max_chars_needed = x: {
-        var max_chars_needed: usize = 4; // 4 for the final 4 null bytes
-        var it = env_map.iterator();
-        while (it.next()) |pair| {
-            // +1 for '='
-            // +1 for null byte
-            max_chars_needed += pair.key_ptr.len + pair.value_ptr.len + 2;
-        }
-        break :x max_chars_needed;
-    };
+    var max_chars_needed: usize = 4; // 4 for the final 4 null bytes
+    var it1 = env_map.iterator();
+    while (it1.next()) |pair| {
+        // +1 for '='
+        // +1 for null byte
+        max_chars_needed += pair.key_ptr.len + pair.value_ptr.len + 2;
+    }
+
     const result = try allocator.alloc(u16, max_chars_needed);
     errdefer allocator.free(result);
 
@@ -527,7 +500,7 @@ }
 
 /// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
+fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const [:0]const u8) ![:0]u8 {
     var buf = std.ArrayList(u8).init(allocator);
     defer buf.deinit();
 
@@ -593,6 +566,15 @@     }
 }
 
+fn createTestStdout(dir: std.fs.Dir) !File {
+    const file = try dir.createFile("stdout.txt", .{ .read = true });
+    if (builtin.os.tag == .windows) {
+        try windows.SetHandleInformation(file.handle, windows.HANDLE_FLAG_INHERIT, windows.HANDLE_FLAG_INHERIT);
+    }
+
+    return file;
+}
+
 test "Command: pre exec" {
     if (builtin.os.tag == .windows) return error.SkipZigTest;
     var cmd: Command = .{
@@ -614,19 +596,6 @@     try testing.expect(exit.Exited == 42);
 }
 
-fn createTestStdout(dir: std.fs.Dir) !File {
-    const file = try dir.createFile("stdout.txt", .{ .read = true });
-    if (builtin.os.tag == .windows) {
-        try windows.SetHandleInformation(
-            file.handle,
-            windows.HANDLE_FLAG_INHERIT,
-            windows.HANDLE_FLAG_INHERIT,
-        );
-    }
-
-    return file;
-}
-
 test "Command: redirect stdout to file" {
     var td = try TempDir.init();
     defer td.deinit();
@@ -734,12 +703,12 @@     }
 }
 
-// Test validate an execveZ failure correctly terminates when error.ExecFailedInChild is correctly handled
+// Test validate an execveZ failure correctly terminates when error.ExecFailedInChild is handled.
 //
-// Incorrectly handling an error.ExecFailedInChild results in a second copy of the test process running.
-// Duplicating the test process leads to weird behavior
-// zig build test will hang
-// test binary created via -Demit-test-exe will run 2 copies of the test suite
+// Incorrectly handling error.ExecFailedInChild results in a second copy of the test process running.
+// Duplicating the test process leads to weird behavior:
+//   * `zig build test` will hang.
+//   * A test binary created via `-Demit-test-exe` will run the test suite twice.
 test "Command: posix fork handles execveZ failure" {
     if (builtin.os.tag == .windows) {
         return error.SkipZigTest;
@@ -763,9 +732,7 @@     try testing.expect(exit.Exited == 1);
 }
 
-// If cmd.start fails with error.ExecFailedInChild it's the _child_ process that is running. If it does not
-// terminate in response to that error both the parent and child will continue as if they _are_ the test suite
-// process.
+// Helper used by tests to handle ExecFailedInChild gracefully.
 fn testingStart(self: *Command) !void {
     self.start(testing.allocator) catch |err| {
         if (err == error.ExecFailedInChild) {
