
index 5d3f329f4..a2d2944d4 100644
--- a/ghostty_src_Command.zig_expectedoutput.txt (expected):tmp/tmphnvk5xt__expected.txt	
+++ b/ghostty_src_Command.zig_extracted.txt (actual):tmp/tmpan3x144u_actual.txt	
@@ -60,29 +60,30 @@ stdin: ?File = null,
 stdout: ?File = null,
 stderr: ?File = null,
 
-/// If set, this will be executed /in the child process/ after fork but
-/// before exec. This is useful to setup some state in the child before the
-/// exec process takes over, such as signal handlers, setsid, setuid, etc.
-pre_exec: ?*const PreExecFn = null,
-
-linux_cgroup: LinuxCgroup = linux_cgroup_default,
-
 /// If set, then the process will be created attached to this pseudo console.
 /// `stdin`, `stdout`, and `stderr` will be ignored if set.
 pseudo_console: if (builtin.os.tag == .windows) ?windows.exp.HPCON else void =
     if (builtin.os.tag == .windows) null else {},
 
+/// LinuxCGroup type depends on our target OS
+pub const LinuxCgroup = if (builtin.os.tag == .linux) ?[]const u8 else void;
+pub const linux_cgroup_default = if (LinuxCgroup == void)
+    {}
+else
+    null;
+linux_cgroup: LinuxCgroup = linux_cgroup_default;
+
+/// If set, this will be executed /in the child process/ after fork but
+/// before exec. This is useful to setup some state in the child before the
+/// exec process takes over, such as signal handlers, setsid, setuid, etc.
+pre_exec: ?*const PreExecFn = null,
+
 /// User data that is sent to the callback. Set with setData and getData
 /// for a more user-friendly API.
 data: ?*anyopaque = null,
 
 /// Process ID is set after start is called.
-pid: ?posix.pid_t = null,
-
-/// LinuxCGroup type depends on our target OS
-pub const LinuxCgroup = if (builtin.os.tag == .linux) ?[]const u8 else void;
-pub const linux_cgroup_default = if (LinuxCgroup == void)
-{} else null;
+pid: ?posix.pid_t = null;
 
 /// The various methods a process may exit.
 pub const Exit = if (builtin.os.tag == .windows) union(enum) {
@@ -389,7 +390,7 @@ pub fn getData(self: Command, comptime DT: type) ?*DT {
 pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
     // If the command already contains a slash, then we return it as-is
     // because it is assumed to be absolute or relative.
-    if (std.mem.indexOfScalar(u8, cmd, '/') != null) {
+    if (std.mem.indexOfScalar(u8, cmd, '/')) |_| {
         return try alloc.dupe(u8, cmd);
     }
 
@@ -449,30 +450,11 @@ fn isExecutable(mode: std.fs.File.Mode) bool {
     return mode & 0o0111 != 0;
 }
 
-// `uname -n` is the *nix equivalent of `hostname.exe` on Windows
-test "expandPath: hostname" {
-    const executable = if (builtin.os.tag == .windows) "hostname.exe" else "uname";
-    const path = (try expandPath(testing.allocator, executable)).?;
-    defer testing.allocator.free(path);
-    try testing.expect(path.len > executable.len);
-}
-
-test "expandPath: does not exist" {
-    const path = try expandPath(testing.allocator, "thisreallyprobablydoesntexist123");
-    try testing.expect(path == null);
-}
-
-test "expandPath: slash" {
-    const path = (try expandPath(testing.allocator, "foo/env")).?;
-    defer testing.allocator.free(path);
-    try testing.expect(path.len == 7);
-}
-
 // Copied from Zig. This is a publicly exported function but there is no
 // way to get it from the std package.
-fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:null]?[*:0]u8 {
+fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:null]?[*:0]const u8 {
     const envp_count = env_map.count();
-    const envp_buf = try arena.allocSentinel(?[*:0]u8, envp_count, null);
+    const envp_buf = try arena.allocSentinel(?[*:0]const u8, envp_count, null);
 
     var it = env_map.iterator();
     var i: usize = 0;
@@ -488,8 +470,6 @@ fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:nu
     return envp_buf;
 }
 
-// Copied from Zig. This is a publicly exported function but there is no
-// way to get it from the std package.
 fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
     // count bytes needed
     const max_chars_needed = x: {
@@ -593,6 +573,19 @@ test "createNullDelimitedEnvMap" {
     }
 }
 
+fn createTestStdout(dir: std.fs.Dir) !File {
+    const file = try dir.createFile("stdout.txt", .{ .read = true });
+    if (builtin.os.tag == .windows) {
+        try windows.SetHandleInformation(
+            file.handle,
+            windows.HANDLE_FLAG_INHERIT,
+            windows.HANDLE_FLAG_INHERIT,
+        );
+    }
+
+    return file;
+}
+
 test "Command: pre exec" {
     if (builtin.os.tag == .windows) return error.SkipZigTest;
     var cmd: Command = .{
@@ -614,19 +607,6 @@ test "Command: pre exec" {
     try testing.expect(exit.Exited == 42);
 }
 
-fn createTestStdout(dir: std.fs.Dir) !File {
-    const file = try dir.createFile("stdout.txt", .{ .read = true });
-    if (builtin.os.tag == .windows) {
-        try windows.SetHandleInformation(
-            file.handle,
-            windows.HANDLE_FLAG_INHERIT,
-            windows.HANDLE_FLAG_INHERIT,
-        );
-    }
-
-    return file;
-}
-
 test "Command: redirect stdout to file" {
     var td = try TempDir.init();
     defer td.deinit();
@@ -682,7 +662,7 @@ test "Command: custom env vars" {
     try testing.expect(cmd.pid != null);
     const exit = try cmd.wait(true);
     try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 0);
+    try testing.expectEqual(@as(u32, 0), @as(u32, exit.Exited));
 
     // Read our stdout
     try stdout.seekTo(0);
@@ -718,7 +698,7 @@ test "Command: custom working directory" {
     try testing.expect(cmd.pid != null);
     const exit = try cmd.wait(true);
     try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 0);
+    try testing.expectEqual(@as(u32, 0), @as(u32, exit.Exited));
 
     // Read our stdout
     try stdout.seekTo(0);
@@ -734,6 +714,25 @@ test "Command: custom working directory" {
     }
 }
 
+// `uname -n` is the *nix equivalent of `hostname.exe` on Windows
+test "expandPath: hostname" {
+    const executable = if (builtin.os.tag == .windows) "hostname.exe" else "uname";
+    const path = (try expandPath(testing.allocator, executable)).?;
+    defer testing.allocator.free(path);
+    try testing.expect(path.len > executable.len);
+}
+
+test "expandPath: does not exist" {
+    const path = try expandPath(testing.allocator, "thisreallyprobablydoesntexist123");
+    try testing.expect(path == null);
+}
+
+test "expandPath: slash" {
+    const path = (try expandPath(testing.allocator, "foo/env")).?;
+    defer testing.allocator.free(path);
+    try testing.expect(path.len == 7);
+}
+
 // Test validate an execveZ failure correctly terminates when error.ExecFailedInChild is correctly handled
 //
 // Incorrectly handling an error.ExecFailedInChild results in a second copy of the test process running.
