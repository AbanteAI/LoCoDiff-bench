--- ghostty_src_Command.zig_expectedoutput.txt (expected)+++ ghostty_src_Command.zig_extracted.txt (actual)@@ -449,25 +449,6 @@     return mode & 0o0111 != 0;
 }
 
-// `uname -n` is the *nix equivalent of `hostname.exe` on Windows
-test "expandPath: hostname" {
-    const executable = if (builtin.os.tag == .windows) "hostname.exe" else "uname";
-    const path = (try expandPath(testing.allocator, executable)).?;
-    defer testing.allocator.free(path);
-    try testing.expect(path.len > executable.len);
-}
-
-test "expandPath: does not exist" {
-    const path = try expandPath(testing.allocator, "thisreallyprobablydoesntexist123");
-    try testing.expect(path == null);
-}
-
-test "expandPath: slash" {
-    const path = (try expandPath(testing.allocator, "foo/env")).?;
-    defer testing.allocator.free(path);
-    try testing.expect(path.len == 7);
-}
-
 // Copied from Zig. This is a publicly exported function but there is no
 // way to get it from the std package.
 fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:null]?[*:0]u8 {
@@ -527,7 +508,7 @@ }
 
 /// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
+fn windowsCreateCommandLine(allocator: Allocator, argv: []const []const u8) ![:0]u8 {
     var buf = std.ArrayList(u8).init(allocator);
     defer buf.deinit();
 
@@ -651,7 +632,7 @@ 
     // Read our stdout
     try stdout.seekTo(0);
-    const contents = try stdout.readToEndAlloc(testing.allocator, 1024 * 128);
+    const contents = try stdout.readToEndAlloc(testing.allocator, 4096);
     defer testing.allocator.free(contents);
     try testing.expect(contents.len > 0);
 }
@@ -711,67 +692,4 @@         .path = "/bin/sh",
         .args = &.{ "/bin/sh", "-c", "pwd" },
         .stdout = stdout,
-        .cwd = "/tmp",
-    };
-
-    try cmd.testingStart();
-    try testing.expect(cmd.pid != null);
-    const exit = try cmd.wait(true);
-    try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 0);
-
-    // Read our stdout
-    try stdout.seekTo(0);
-    const contents = try stdout.readToEndAlloc(testing.allocator, 4096);
-    defer testing.allocator.free(contents);
-
-    if (builtin.os.tag == .windows) {
-        try testing.expectEqualStrings("C:\\Windows\\System32\r\n", contents);
-    } else if (builtin.os.tag == .macos) {
-        try testing.expectEqualStrings("/private/tmp\n", contents);
-    } else {
-        try testing.expectEqualStrings("/tmp\n", contents);
-    }
-}
-
-// Test validate an execveZ failure correctly terminates when error.ExecFailedInChild is correctly handled
-//
-// Incorrectly handling an error.ExecFailedInChild results in a second copy of the test process running.
-// Duplicating the test process leads to weird behavior
-// zig build test will hang
-// test binary created via -Demit-test-exe will run 2 copies of the test suite
-test "Command: posix fork handles execveZ failure" {
-    if (builtin.os.tag == .windows) {
-        return error.SkipZigTest;
-    }
-    var td = try TempDir.init();
-    defer td.deinit();
-    var stdout = try createTestStdout(td.dir);
-    defer stdout.close();
-
-    var cmd: Command = .{
-        .path = "/not/a/binary",
-        .args = &.{ "/not/a/binary", "" },
-        .stdout = stdout,
-        .cwd = "/bin",
-    };
-
-    try cmd.testingStart();
-    try testing.expect(cmd.pid != null);
-    const exit = try cmd.wait(true);
-    try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 1);
-}
-
-// If cmd.start fails with error.ExecFailedInChild it's the _child_ process that is running. If it does not
-// terminate in response to that error both the parent and child will continue as if they _are_ the test suite
-// process.
-fn testingStart(self: *Command) !void {
-    self.start(testing.allocator) catch |err| {
-        if (err == error.ExecFailedInChild) {
-            // I am a child process, I must not get confused and continue running the rest of the test suite.
-            posix.exit(1);
-        }
-        return err;
-    };
-}+        .cw