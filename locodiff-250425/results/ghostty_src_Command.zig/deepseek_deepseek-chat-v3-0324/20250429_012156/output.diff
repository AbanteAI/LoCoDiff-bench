
index 5d3f329f..1b76bd77 100644
--- a/ghostty_src_Command.zig_expectedoutput.txt (expected):tmp/tmpyd4bivic_expected.txt	
+++ b/ghostty_src_Command.zig_extracted.txt (actual):tmp/tmpxgsqf67v_actual.txt	
@@ -143,7 +143,7 @@ fn startPosix(self: *Command, arena: Allocator) !void {
     else
         @compileError("missing env vars");
 
-    // Fork. If we have a cgroup specified on Linxu then we use clone
+    // Fork
     const pid: posix.pid_t = switch (builtin.os.tag) {
         .linux => if (self.linux_cgroup) |cgroup|
             try internal_os.cgroup.cloneInto(cgroup)
@@ -358,7 +358,7 @@ pub fn wait(self: Command, block: bool) !Exit {
 
     const res = if (block) posix.waitpid(self.pid.?, 0) else res: {
         // We specify NOHANG because its not our fault if the process we launch
-        // for the tty doesn't properly waitpid its children. We don't want
+        // for the tty doesn't propertoply waitpid its children. We don't want
         // to hang the terminal over it.
         // When NOHANG is specified, waitpid will return a pid of 0 if the process
         // doesn't have a status to report. When that happens, it is as though the
@@ -418,6 +418,9 @@ pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
         path_buf[path_len] = 0;
         const full_path = path_buf[0..path_len :0];
 
+        // Skip if this isn't an absolute path
+        if (!std.fs.path.isAbsolute(full_path)) continue;
+
         // Stat it
         const f = std.fs.cwd().openFile(
             full_path,
@@ -488,79 +491,6 @@ fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:nu
     return envp_buf;
 }
 
-// Copied from Zig. This is a publicly exported function but there is no
-// way to get it from the std package.
-fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
-    // count bytes needed
-    const max_chars_needed = x: {
-        var max_chars_needed: usize = 4; // 4 for the final 4 null bytes
-        var it = env_map.iterator();
-        while (it.next()) |pair| {
-            // +1 for '='
-            // +1 for null byte
-            max_chars_needed += pair.key_ptr.len + pair.value_ptr.len + 2;
-        }
-        break :x max_chars_needed;
-    };
-    const result = try allocator.alloc(u16, max_chars_needed);
-    errdefer allocator.free(result);
-
-    var it = env_map.iterator();
-    var i: usize = 0;
-    while (it.next()) |pair| {
-        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.key_ptr.*);
-        result[i] = '=';
-        i += 1;
-        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.value_ptr.*);
-        result[i] = 0;
-        i += 1;
-    }
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    return try allocator.realloc(result, i);
-}
-
-/// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
-    var buf = std.ArrayList(u8).init(allocator);
-    defer buf.deinit();
-
-    for (argv, 0..) |arg, arg_i| {
-        if (arg_i != 0) try buf.append(' ');
-        if (mem.indexOfAny(u8, arg, " \t\n\"") == null) {
-            try buf.appendSlice(arg);
-            continue;
-        }
-        try buf.append('"');
-        var backslash_count: usize = 0;
-        for (arg) |byte| {
-            switch (byte) {
-                '\\' => backslash_count += 1,
-                '"' => {
-                    try buf.appendNTimes('\\', backslash_count * 2 + 1);
-                    try buf.append('"');
-                    backslash_count = 0;
-                },
-                else => {
-                    try buf.appendNTimes('\\', backslash_count);
-                    try buf.append(byte);
-                    backslash_count = 0;
-                },
-            }
-        }
-        try buf.appendNTimes('\\', backslash_count * 2);
-        try buf.append('"');
-    }
-
-    return buf.toOwnedSliceSentinel(0);
-}
-
 test "createNullDelimitedEnvMap" {
     const allocator = testing.allocator;
     var envmap = EnvMap.init(allocator);
