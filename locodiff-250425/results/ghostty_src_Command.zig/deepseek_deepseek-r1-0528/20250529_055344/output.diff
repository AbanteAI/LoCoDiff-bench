
index 5d3f329f4..3dd2843b6 100644
--- a/ghostty_src_Command.zig_expectedoutput.txt (expected):tmp/tmp6a7ubal5_expected.txt	
+++ b/ghostty_src_Command.zig_extracted.txt (actual):tmp/tmpt8v7vqjv_actual.txt	
@@ -143,7 +143,7 @@ fn startPosix(self: *Command, arena: Allocator) !void {
     else
         @compileError("missing env vars");
 
-    // Fork. If we have a cgroup specified on Linxu then we use clone
+    // Fork
     const pid: posix.pid_t = switch (builtin.os.tag) {
         .linux => if (self.linux_cgroup) |cgroup|
             try internal_os.cgroup.cloneInto(cgroup)
@@ -340,8 +340,7 @@ fn setupFd(src: File.Handle, target: i32) !void {
 /// Wait for the command to exit and return information about how it exited.
 pub fn wait(self: Command, block: bool) !Exit {
     if (comptime builtin.os.tag == .windows) {
-        // Block until the process exits. This returns immediately if the
-        // process already exited.
+        // Block until the process exits. This returns immediately if the process already exited.
         const result = windows.kernel32.WaitForSingleObject(self.pid.?, windows.INFINITE);
         if (result == windows.WAIT_FAILED) {
             return windows.unexpectedError(windows.kernel32.GetLastError());
@@ -488,8 +487,38 @@ fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:nu
     return envp_buf;
 }
 
-// Copied from Zig. This is a publicly exported function but there is no
-// way to get it from the std package.
+test "createNullDelimitedEnvMap" {
+    const allocator = testing.allocator;
+    var envmap = EnvMap.init(allocator);
+    defer envmap.deinit();
+
+    try envmap.put("HOME", "/home/ifreund");
+    try envmap.put("WAYLAND_DISPLAY", "wayland-1");
+    try envmap.put("DISPLAY", ":1");
+    try envmap.put("DEBUGINFOD_URLS", " ");
+    try envmap.put("XCURSOR_SIZE", "24");
+
+    var arena = std.heap.ArenaAllocator.init(allocator);
+    defer arena.deinit();
+    const environ = try createNullDelimitedEnvMap(arena.allocator(), &envmap);
+
+    try testing.expectEqual(@as(usize, 5), environ.len);
+
+    inline for (.{
+        "HOME=/home/ifreund",
+        "WAYLAND_DISPLAY=wayland-1",
+        "DISPLAY=:1",
+        "DEBUGINFOD_URLS= ",
+        "XCURSOR_SIZE=24",
+    }) |target| {
+        for (environ) |variable| {
+            if (mem.eql(u8, mem.span(variable orelse continue), target)) break;
+        } else {
+            try testing.expect(false); // Environment variable not found
+        }
+    }
+}
+
 fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
     // count bytes needed
     const max_chars_needed = x: {
@@ -561,38 +590,6 @@ fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8)
     return buf.toOwnedSliceSentinel(0);
 }
 
-test "createNullDelimitedEnvMap" {
-    const allocator = testing.allocator;
-    var envmap = EnvMap.init(allocator);
-    defer envmap.deinit();
-
-    try envmap.put("HOME", "/home/ifreund");
-    try envmap.put("WAYLAND_DISPLAY", "wayland-1");
-    try envmap.put("DISPLAY", ":1");
-    try envmap.put("DEBUGINFOD_URLS", " ");
-    try envmap.put("XCURSOR_SIZE", "24");
-
-    var arena = std.heap.ArenaAllocator.init(allocator);
-    defer arena.deinit();
-    const environ = try createNullDelimitedEnvMap(arena.allocator(), &envmap);
-
-    try testing.expectEqual(@as(usize, 5), environ.len);
-
-    inline for (.{
-        "HOME=/home/ifreund",
-        "WAYLAND_DISPLAY=wayland-1",
-        "DISPLAY=:1",
-        "DEBUGINFOD_URLS= ",
-        "XCURSOR_SIZE=24",
-    }) |target| {
-        for (environ) |variable| {
-            if (mem.eql(u8, mem.span(variable orelse continue), target)) break;
-        } else {
-            try testing.expect(false); // Environment variable not found
-        }
-    }
-}
-
 test "Command: pre exec" {
     if (builtin.os.tag == .windows) return error.SkipZigTest;
     var cmd: Command = .{
