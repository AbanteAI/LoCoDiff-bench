--- ghostty_src_Command.zig_expectedoutput.txt (expected)+++ ghostty_src_Command.zig_extracted.txt (actual)@@ -369,7 +369,6 @@             if (res.pid != 0) break :res res;
         }
     };
-
     return Exit.init(res.status);
 }
 
@@ -389,7 +388,7 @@ pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
     // If the command already contains a slash, then we return it as-is
     // because it is assumed to be absolute or relative.
-    if (std.mem.indexOfScalar(u8, cmd, '/') != null) {
+    if (std.mem.indexOfScalar(u8, cmd, '/')) |idx| {
         return try alloc.dupe(u8, cmd);
     }
 
@@ -417,6 +416,10 @@         @memcpy(path_buf[search_path.len + 1 ..][0..cmd.len], cmd);
         path_buf[path_len] = 0;
         const full_path = path_buf[0..path_len :0];
+
+        // Skip if this isn't an absolute path
+        // (Allow rel paths so cwd can be something else)
+        // if (!std.fs.path.isAbsolute(full_path)) continue;
 
         // Stat it
         const f = std.fs.cwd().openFile(
@@ -527,7 +530,7 @@ }
 
 /// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
+fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const [:0]const u8) ![:0]u8 {
     var buf = std.ArrayList(u8).init(allocator);
     defer buf.deinit();
 
@@ -593,6 +596,19 @@     }
 }
 
+fn createTestStdout(dir: std.fs.Dir) !File {
+    const file = try dir.createFile("stdout.txt", .{ .read = true });
+    if (builtin.os.tag == .windows) {
+        try windows.SetHandleInformation(
+            file.handle,
+            windows.HANDLE_FLAG_INHERIT,
+            windows.HANDLE_FLAG_INHERIT,
+        );
+    }
+
+    return file;
+}
+
 test "Command: pre exec" {
     if (builtin.os.tag == .windows) return error.SkipZigTest;
     var cmd: Command = .{
@@ -614,19 +630,6 @@     try testing.expect(exit.Exited == 42);
 }
 
-fn createTestStdout(dir: std.fs.Dir) !File {
-    const file = try dir.createFile("stdout.txt", .{ .read = true });
-    if (builtin.os.tag == .windows) {
-        try windows.SetHandleInformation(
-            file.handle,
-            windows.HANDLE_FLAG_INHERIT,
-            windows.HANDLE_FLAG_INHERIT,
-        );
-    }
-
-    return file;
-}
-
 test "Command: redirect stdout to file" {
     var td = try TempDir.init();
     defer td.deinit();
