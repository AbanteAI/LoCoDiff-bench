--- ghostty_src_Command.zig_expectedoutput.txt (expected)+++ ghostty_src_Command.zig_extracted.txt (actual)@@ -113,6 +113,10 @@ };
 
 /// Start the subprocess. This returns immediately once the child is started.
+///
+/// Note that on POSIX systems, this will return 0 if the process was successfully
+/// forked. If the later execvpeZ call fails within the child, this will instead
+/// return error.ExecFailedInChild, which you should handle.
 ///
 /// After this is successful, self.pid is available.
 pub fn start(self: *Command, alloc: Allocator) !void {
@@ -389,7 +393,9 @@ pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
     // If the command already contains a slash, then we return it as-is
     // because it is assumed to be absolute or relative.
-    if (std.mem.indexOfScalar(u8, cmd, '/') != null) {
+    if (std.mem.indexOfScalar(u8, cmd, '/') != null or
+        comptime builtin.os.tag == .windows and std.mem.indexOfScalar(u8, cmd, '\\') != null)
+    {
         return try alloc.dupe(u8, cmd);
     }
 
@@ -488,8 +494,7 @@     return envp_buf;
 }
 
-// Copied from Zig. This is a publicly exported function but there is no
-// way to get it from the std package.
+// Copied from Zig. This function could be made public in child_process.zig instead.
 fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
     // count bytes needed
     const max_chars_needed = x: {
@@ -527,7 +532,7 @@ }
 
 /// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
+fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const [:0]const u8) ![:0]u8 {
     var buf = std.ArrayList(u8).init(allocator);
     defer buf.deinit();
 
@@ -539,7 +544,7 @@         }
         try buf.append('"');
         var backslash_count: usize = 0;
-        for (arg) |byte| {
+        for (arg.slice()) |byte| {
             switch (byte) {
                 '\\' => backslash_count += 1,
                 '"' => {
@@ -596,8 +601,8 @@ test "Command: pre exec" {
     if (builtin.os.tag == .windows) return error.SkipZigTest;
     var cmd: Command = .{
-        .path = "/bin/sh",
-        .args = &.{ "/bin/sh", "-v" },
+        .path = "/bin/sh".*,
+        .args = &.{ "/bin/sh".*, "-v".* },
         .pre_exec = (struct {
             fn do(_: *Command) void {
                 // This runs in the child, so we can exit and it won't
@@ -634,12 +639,12 @@     defer stdout.close();
 
     var cmd: Command = if (builtin.os.tag == .windows) .{
-        .path = "C:\\Windows\\System32\\whoami.exe",
-        .args = &.{"C:\\Windows\\System32\\whoami.exe"},
+        .path = "C:\\Windows\\System32\\whoami.exe".*,
+        .args = &.{"C:\\Windows\\System32\\whoami.exe".*},
         .stdout = stdout,
     } else .{
-        .path = "/bin/sh",
-        .args = &.{ "/bin/sh", "-c", "echo hello" },
+        .path = "/bin/sh".*,
+        .args = &.{ "/bin/sh".*, "-c".*, "echo hello".* },
         .stdout = stdout,
     };
 
@@ -667,13 +672,13 @@     try env.put("VALUE", "hello");
 
     var cmd: Command = if (builtin.os.tag == .windows) .{
-        .path = "C:\\Windows\\System32\\cmd.exe",
-        .args = &.{ "C:\\Windows\\System32\\cmd.exe", "/C", "echo %VALUE%" },
+        .path = "C:\\Windows\\System32\\cmd.exe".*,
+        .args = &.{ "C:\\Windows\\System32\\cmd.exe".*, "/C".*, "echo %VALUE%".* },
         .stdout = stdout,
         .env = &env,
     } else .{
-        .path = "/bin/sh",
-        .args = &.{ "/bin/sh", "-c", "echo $VALUE" },
+        .path = "/bin/sh".*,
+        .args = &.{ "/bin/sh".*, "-c".*, "echo $VALUE".* },
         .stdout = stdout,
         .env = &env,
     };
@@ -703,13 +708,13 @@     defer stdout.close();
 
     var cmd: Command = if (builtin.os.tag == .windows) .{
-        .path = "C:\\Windows\\System32\\cmd.exe",
-        .args = &.{ "C:\\Windows\\System32\\cmd.exe", "/C", "cd" },
+        .path = "C:\\Windows\\System32\\cmd.exe".*,
+        .args = &.{ "C:\\Windows\\System32\\cmd.exe".*, "/C".*, "cd".* },
         .stdout = stdout,
         .cwd = "C:\\Windows\\System32",
     } else .{
-        .path = "/bin/sh",
-        .args = &.{ "/bin/sh", "-c", "pwd" },
+        .path = "/bin/sh".*,
+        .args = &.{ "/bin/sh".*, "-c".*, "pwd".* },
         .stdout = stdout,
         .cwd = "/tmp",
     };
@@ -750,8 +755,8 @@     defer stdout.close();
 
     var cmd: Command = .{
-        .path = "/not/a/binary",
-        .args = &.{ "/not/a/binary", "" },
+        .path = "/not/a/binary".*,
+        .args = &.{ "/not/a/binary".*, "".* },
         .stdout = stdout,
         .cwd = "/bin",
     };
