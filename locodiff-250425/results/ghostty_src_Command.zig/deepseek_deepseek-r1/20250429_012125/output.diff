
index 5d3f329f..2e002df2 100644
--- a/ghostty_src_Command.zig_expectedoutput.txt (expected):tmp/tmpb1uxo9h9_expected.txt	
+++ b/ghostty_src_Command.zig_extracted.txt (actual):tmp/tmpbihxe1xb_actual.txt	
@@ -13,7 +13,6 @@
 //!   * No pre_exec callback for logic after fork but before exec.
 //!   * posix_spawn is used for Mac, but doesn't support the necessary
 //!     features for tty setup.
-//!
 const Command = @This();
 
 const std = @import("std");
@@ -143,7 +142,7 @@ fn startPosix(self: *Command, arena: Allocator) !void {
     else
         @compileError("missing env vars");
 
-    // Fork. If we have a cgroup specified on Linxu then we use clone
+    // Fork. If we have a cgroup specified on Linux then we use clone
     const pid: posix.pid_t = switch (builtin.os.tag) {
         .linux => if (self.linux_cgroup) |cgroup|
             try internal_os.cgroup.cloneInto(cgroup)
@@ -449,7 +448,6 @@ fn isExecutable(mode: std.fs.File.Mode) bool {
     return mode & 0o0111 != 0;
 }
 
-// `uname -n` is the *nix equivalent of `hostname.exe` on Windows
 test "expandPath: hostname" {
     const executable = if (builtin.os.tag == .windows) "hostname.exe" else "uname";
     const path = (try expandPath(testing.allocator, executable)).?;
@@ -488,79 +486,6 @@ fn createNullDelimitedEnvMap(arena: mem.Allocator, env_map: *const EnvMap) ![:nu
     return envp_buf;
 }
 
-// Copied from Zig. This is a publicly exported function but there is no
-// way to get it from the std package.
-fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
-    // count bytes needed
-    const max_chars_needed = x: {
-        var max_chars_needed: usize = 4; // 4 for the final 4 null bytes
-        var it = env_map.iterator();
-        while (it.next()) |pair| {
-            // +1 for '='
-            // +1 for null byte
-            max_chars_needed += pair.key_ptr.len + pair.value_ptr.len + 2;
-        }
-        break :x max_chars_needed;
-    };
-    const result = try allocator.alloc(u16, max_chars_needed);
-    errdefer allocator.free(result);
-
-    var it = env_map.iterator();
-    var i: usize = 0;
-    while (it.next()) |pair| {
-        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.key_ptr.*);
-        result[i] = '=';
-        i += 1;
-        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.value_ptr.*);
-        result[i] = 0;
-        i += 1;
-    }
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    result[i] = 0;
-    i += 1;
-    return try allocator.realloc(result, i);
-}
-
-/// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
-    var buf = std.ArrayList(u8).init(allocator);
-    defer buf.deinit();
-
-    for (argv, 0..) |arg, arg_i| {
-        if (arg_i != 0) try buf.append(' ');
-        if (mem.indexOfAny(u8, arg, " \t\n\"") == null) {
-            try buf.appendSlice(arg);
-            continue;
-        }
-        try buf.append('"');
-        var backslash_count: usize = 0;
-        for (arg) |byte| {
-            switch (byte) {
-                '\\' => backslash_count += 1,
-                '"' => {
-                    try buf.appendNTimes('\\', backslash_count * 2 + 1);
-                    try buf.append('"');
-                    backslash_count = 0;
-                },
-                else => {
-                    try buf.appendNTimes('\\', backslash_count);
-                    try buf.append(byte);
-                    backslash_count = 0;
-                },
-            }
-        }
-        try buf.appendNTimes('\\', backslash_count * 2);
-        try buf.append('"');
-    }
-
-    return buf.toOwnedSliceSentinel(0);
-}
-
 test "createNullDelimitedEnvMap" {
     const allocator = testing.allocator;
     var envmap = EnvMap.init(allocator);
@@ -599,11 +524,13 @@ test "Command: pre exec" {
         .path = "/bin/sh",
         .args = &.{ "/bin/sh", "-v" },
         .pre_exec = (struct {
-            fn do(_: *Command) void {
+            fn do_() void {}
+            pub const do = do_;
+            //fn do(_: *Command) void {
                 // This runs in the child, so we can exit and it won't
                 // kill the test runner.
-                posix.exit(42);
-            }
+                //posix.exit(42);
+            //}
         }).do,
     };
 
@@ -774,4 +701,77 @@ fn testingStart(self: *Command) !void {
         }
         return err;
     };
+}
+
+// Copied from Zig. This is a publicly exported function but there is no
+// way to get it from the std package.
+fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u16 {
+    // count bytes needed
+    const max_chars_needed = x: {
+        var max_chars_needed: usize = 4; // 4 for the final 4 null bytes
+        var it = env_map.iterator();
+        while (it.next()) |pair| {
+            // +1 for '='
+            // +1 for null byte
+            max_chars_needed += pair.key_ptr.len + pair.value_ptr.len + 2;
+        }
+        break :x max_chars_needed;
+    };
+    const result = try allocator.alloc(u16, max_chars_needed);
+    errdefer allocator.free(result);
+
+    var it = env_map.iterator();
+    var i: usize = 0;
+    while (it.next()) |pair| {
+        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.key_ptr.*);
+        result[i] = '=';
+        i += 1;
+        i += try std.unicode.utf8ToUtf16Le(result[i..], pair.value_ptr.*);
+        result[i] = 0;
+        i += 1;
+    }
+    result[i] = 0;
+    i += 1;
+    result[i] = 0;
+    i += 1;
+    result[i] = 0;
+    i += 1;
+    result[i] = 0;
+    i += 1;
+    return try allocator.realloc(result, i);
+}
+
+/// Copied from Zig. This function could be made public in child_process.zig instead.
+fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const [:0]const u8) ![:0]u8 {
+    var buf = std.ArrayList(u8).init(allocator);
+    defer buf.deinit();
+
+    for (argv, 0..) |arg, arg_i| {
+        if (arg_i != 0) try buf.append(' ');
+        if (mem.indexOfAny(u8, arg, " \t\n\"") == null) {
+            try buf.appendSlice(arg);
+            continue;
+        }
+        try buf.append('"');
+        var backslash_count: usize = 0;
+        for (arg) |byte| {
+            switch (byte) {
+                '\\' => backslash_count += 1,
+                '"' => {
+                    try buf.appendNTimes('\\', backslash_count * 2 + 1);
+                    try buf.append('"');
+                    backslash_count = 0;
+                },
+                else => {
+                    try buf.appendNTimes('\\', backslash_count);
+                    try buf.append(byte);
+                    backslash_count = 0;
+                },
+            }
+        }
+        try buf.appendNTimes('\\', backslash_count * 2);
+        try buf.append('"');
+    }
+
+    return buf.toOwnedSliceSentinel(0);
 }
\ No newline at end of file
