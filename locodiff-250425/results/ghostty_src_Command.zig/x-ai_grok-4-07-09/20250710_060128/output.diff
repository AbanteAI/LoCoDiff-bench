
index 5d3f329f4..35c844505 100644
--- a/ghostty_src_Command.zig_expectedoutput.txt (expected):tmp/tmph8qak4g5_expected.txt	
+++ b/ghostty_src_Command.zig_extracted.txt (actual):tmp/tmpt069pkpn_actual.txt	
@@ -14,6 +14,7 @@
 //!   * posix_spawn is used for Mac, but doesn't support the necessary
 //!     features for tty setup.
 //!
+
 const Command = @This();
 
 const std = @import("std");
@@ -79,10 +80,8 @@ data: ?*anyopaque = null,
 /// Process ID is set after start is called.
 pid: ?posix.pid_t = null,
 
-/// LinuxCGroup type depends on our target OS
 pub const LinuxCgroup = if (builtin.os.tag == .linux) ?[]const u8 else void;
-pub const linux_cgroup_default = if (LinuxCgroup == void)
-{} else null;
+pub const linux_cgroup_default = if (LinuxCgroup == void) {} else null;
 
 /// The various methods a process may exit.
 pub const Exit = if (builtin.os.tag == .windows) union(enum) {
@@ -143,7 +142,6 @@ fn startPosix(self: *Command, arena: Allocator) !void {
     else
         @compileError("missing env vars");
 
-    // Fork. If we have a cgroup specified on Linxu then we use clone
     const pid: posix.pid_t = switch (builtin.os.tag) {
         .linux => if (self.linux_cgroup) |cgroup|
             try internal_os.cgroup.cloneInto(cgroup)
@@ -339,7 +337,7 @@ fn setupFd(src: File.Handle, target: i32) !void {
 
 /// Wait for the command to exit and return information about how it exited.
 pub fn wait(self: Command, block: bool) !Exit {
-    if (comptime builtin.os.tag == .windows) {
+    if (builtin.os.tag == .windows) {
         // Block until the process exits. This returns immediately if the
         // process already exited.
         const result = windows.kernel32.WaitForSingleObject(self.pid.?, windows.INFINITE);
@@ -419,10 +417,7 @@ pub fn expandPath(alloc: Allocator, cmd: []const u8) !?[]u8 {
         const full_path = path_buf[0..path_len :0];
 
         // Stat it
-        const f = std.fs.cwd().openFile(
-            full_path,
-            .{},
-        ) catch |err| switch (err) {
+        const f = std.fs.cwd().openFile(full_path, .{}) catch |err| switch (err) {
             error.FileNotFound => continue,
             error.AccessDenied => {
                 // Accumulate this and return it later so we can try other
@@ -527,7 +522,7 @@ fn createWindowsEnvBlock(allocator: mem.Allocator, env_map: *const EnvMap) ![]u1
 }
 
 /// Copied from Zig. This function could be made public in child_process.zig instead.
-fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const []const u8) ![:0]u8 {
+fn windowsCreateCommandLine(allocator: mem.Allocator, argv: []const [:0]const u8) ![:0]u8 {
     var buf = std.ArrayList(u8).init(allocator);
     defer buf.deinit();
 
@@ -682,7 +677,7 @@ test "Command: custom env vars" {
     try testing.expect(cmd.pid != null);
     const exit = try cmd.wait(true);
     try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 0);
+    try testing.expectEqual(@as(u32, 0), @as(u32, exit.Exited));
 
     // Read our stdout
     try stdout.seekTo(0);
@@ -718,7 +713,7 @@ test "Command: custom working directory" {
     try testing.expect(cmd.pid != null);
     const exit = try cmd.wait(true);
     try testing.expect(exit == .Exited);
-    try testing.expect(exit.Exited == 0);
+    try testing.expectEqual(@as(u32, 0), @as(u32, exit.Exited));
 
     // Read our stdout
     try stdout.seekTo(0);
