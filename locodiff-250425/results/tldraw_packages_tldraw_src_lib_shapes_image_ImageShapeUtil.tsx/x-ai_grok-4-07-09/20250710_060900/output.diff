
index 2e4a3e7b2..0349d28d4 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmpr8c9odrg_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual):tmp/tmp59mz85cj_actual.txt	
@@ -89,14 +89,10 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		if (!shape.props.crop) return resized
 
 		const flipCropHorizontally =
-			// We used the flip horizontally feature
 			(mode === 'scale_shape' && scaleX === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipX !== resized.props.flipX)
 		const flipCropVertically =
-			// We used the flip vertically feature
 			(mode === 'scale_shape' && scaleY === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipY !== resized.props.flipY)
 
 		const { topLeft, bottomRight } = shape.props.crop
@@ -113,6 +109,36 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		return resized
 	}
 
+	override getInterpolatedProps(
+		startShape: TLImageShape,
+		endShape: TLImageShape,
+		t: number
+	): TLImageShapeProps {
+		function interpolateCrop(
+			startShape: TLImageShape,
+			endShape: TLImageShape
+		): TLImageShapeProps['crop'] {
+			if (startShape.props.crop === null && endShape.props.crop === null) return null
+
+			const startTL = startShape.props.crop?.topLeft || { x: 0, y: 0 }
+			const startBR = startShape.props.crop?.bottomRight || { x: 1, y: 1 }
+			const endTL = endShape.props.crop?.topLeft || { x: 0, y: 0 }
+			const endBR = endShape.props.crop?.bottomRight || { x: 1, y: 1 }
+
+			return {
+				topLeft: { x: lerp(startTL.x, endTL.x, t), y: lerp(startTL.y, endTL.y, t) },
+				bottomRight: { x: lerp(startBR.x, endBR.x, t), y: lerp(startBR.y, endBR.y, t) },
+			}
+		}
+
+		return {
+			...(t > 0.5 ? endShape.props : startShape.props),
+			w: lerp(startShape.props.w, endShape.props.w, t),
+			h: lerp(startShape.props.h, endShape.props.h, t),
+			crop: interpolateCrop(startShape, endShape),
+		}
+	}
+
 	component(shape: TLImageShape) {
 		return <ImageShape shape={shape} />
 	}
@@ -193,35 +219,6 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 
 		this.editor.updateShapes([partial])
 	}
-	override getInterpolatedProps(
-		startShape: TLImageShape,
-		endShape: TLImageShape,
-		t: number
-	): TLImageShapeProps {
-		function interpolateCrop(
-			startShape: TLImageShape,
-			endShape: TLImageShape
-		): TLImageShapeProps['crop'] {
-			if (startShape.props.crop === null && endShape.props.crop === null) return null
-
-			const startTL = startShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const startBR = startShape.props.crop?.bottomRight || { x: 1, y: 1 }
-			const endTL = endShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const endBR = endShape.props.crop?.bottomRight || { x: 1, y: 1 }
-
-			return {
-				topLeft: { x: lerp(startTL.x, endTL.x, t), y: lerp(startTL.y, endTL.y, t) },
-				bottomRight: { x: lerp(startBR.x, endBR.x, t), y: lerp(startBR.y, endBR.y, t) },
-			}
-		}
-
-		return {
-			...(t > 0.5 ? endShape.props : startShape.props),
-			w: lerp(startShape.props.w, endShape.props.w, t),
-			h: lerp(startShape.props.h, endShape.props.h, t),
-			crop: interpolateCrop(startShape, endShape),
-		}
-	}
 }
 
 const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape }) {
