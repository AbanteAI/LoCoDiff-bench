--- tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual)@@ -1,3 +1,4 @@+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Editor,
@@ -21,9 +22,7 @@ 	resizeBox,
 	structuredClone,
 	toDomPrecision,
-	useEditor,
 	useUniqueSafeId,
-	useValue,
 } from '@tldraw/editor'
 import classNames from 'classnames'
 import { memo, useEffect, useState } from 'react'
@@ -113,8 +112,158 @@ 		return resized
 	}
 
+	isAnimated(shape: TLImageShape) {
+		const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : undefined
+
+		if (!asset) return false
+
+		return (
+			('mimeType' in asset.props && MediaHelpers.isAnimatedImageType(asset?.props.mimeType)) ||
+			('isAnimated' in asset.props && asset.props.isAnimated)
+		)
+	}
+
 	component(shape: TLImageShape) {
-		return <ImageShape shape={shape} />
+		const isCropping = this.editor.getCroppingShapeId() === shape.id
+		const prefersReducedMotion = usePrefersReducedMotion()
+		const [staticFrameSrc, setStaticFrameSrc] = useState('')
+		const [loadedUrl, setLoadedUrl] = useState<null | string>(null)
+		const isSelected = shape.id === this.editor.getOnlySelectedShapeId()
+		const { asset, url } = useImageOrVideoAsset({
+			shapeId: shape.id,
+			assetId: shape.props.assetId,
+			width: shape.props.w,
+		})
+
+		useEffect(() => {
+			if (url && this.isAnimated(shape)) {
+				let cancelled = false
+
+				const image = Image()
+				image.onload = () => {
+					if (cancelled) return
+
+					const canvas = document.createElement('canvas')
+					canvas.width = image.width
+					canvas.height = image.height
+
+					const ctx = canvas.getContext('2d')
+					if (!ctx) return
+
+					ctx.drawImage(image, 0, 0)
+					setStaticFrameSrc(canvas.toDataURL())
+					setLoadedUrl(url)
+				}
+				image.crossOrigin = 'anonymous'
+				image.src = url
+
+				return () => {
+					cancelled = true
+				}
+			}
+		}, [this.editor, prefersReducedMotion, url, shape])
+
+		if (asset?.type === 'bookmark') {
+			throw Error("Bookmark assets can't be rendered as images")
+		}
+
+		const showCropPreview =
+			isSelected && isCropping && this.editor.isIn('select.crop')
+
+		// We only want to reduce motion for mimeTypes that have motion
+		const reduceMotion =
+			prefersReducedMotion &&
+			(asset?.props.mimeType?.includes('video') || this.isAnimated(shape))
+
+		const containerStyle = getCroppedContainerStyle(shape)
+
+		const nextSrc = url === loadedUrl ? null : url
+		const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl
+
+		// This logic path is for when it's broken/missing asset.
+		if (!url && !asset?.props.src) {
+			return (
+				<HTMLContainer
+					id={shape.id}
+					style={{
+						overflow: 'hidden',
+						width: shape.props.w,
+						height: shape.props.h,
+						color: 'var(--color-text-3)',
+						backgroundColor: 'var(--color-low)',
+						border: '1px solid var(--color-low-border)',
+					}}
+				>
+					<div
+						className={classNames('tl-image-container', asset && 'tl-image-container-loading')}
+						style={containerStyle}
+					>
+						{asset ? null : <BrokenAssetIcon />}
+					</div>
+					{'url' in shape.props && shape.props.url && (
+						<HyperlinkButton url={shape.props.url} />
+					)}
+				</HTMLContainer>
+			)
+		}
+
+		// We don't set crossOrigin for non-animated images because for Cloudflare we don't currently
+		// have that set up.
+		const crossOrigin = this.isAnimated(shape) ? 'anonymous' : undefined
+
+		return (
+			<>
+				{showCropPreview && loadedSrc && (
+					<div style={containerStyle}>
+						<img
+							className="tl-image"
+							style={{ ...getFlipStyle(shape), opacity: 0.1 }}
+							crossOrigin={crossOrigin}
+							src={loadedSrc}
+							referrerPolicy="strict-origin-when-cross-origin"
+							draggable={false}
+						/>
+					</div>
+				)}
+				<HTMLContainer
+					id={shape.id}
+					style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
+				>
+					<div className={classNames('tl-image-container')} style={containerStyle}>
+						{/* We have two images: the currently loaded image, and the next image that
+						we're waiting to load. we keep the loaded image mounted while we're waiting
+						for the next one by storing the loaded URL in state. We use `key` props with
+						the src of the image so that when the next image is ready, the previous one will
+						be unmounted and the next will be shown with the browser having to remount a
+						fresh image and decoded it again from the cache. */}
+						{loadedSrc && (
+							<img
+								key={loadedSrc}
+								className="tl-image"
+								style={getFlipStyle(shape)}
+								crossOrigin={crossOrigin}
+								src={loadedSrc}
+								referrerPolicy="strict-origin-when-cross-origin"
+								draggable={false}
+							/>
+						)}
+						{nextSrc && (
+							<img
+								key={nextSrc}
+								className="tl-image"
+								style={getFlipStyle(shape)}
+								crossOrigin={crossOrigin}
+								src={nextSrc}
+								referrerPolicy="strict-origin-when-cross-origin"
+								draggable={false}
+								onLoad={() => setLoadedUrl(nextSrc)}
+							/>
+						)}
+					</div>
+					{shape.props.url && <HyperlinkButton url={shape.props.url} />}
+				</HTMLContainer>
+			</>
+		)
 	}
 
 	indicator(shape: TLImageShape) {
@@ -193,6 +342,7 @@ 
 		this.editor.updateShapes([partial])
 	}
+
 	override getInterpolatedProps(
 		startShape: TLImageShape,
 		endShape: TLImageShape,
@@ -224,138 +374,30 @@ 	}
 }
 
-const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape }) {
-	const editor = useEditor()
-
-	const { w } = getUncroppedSize(shape.props, shape.props.crop)
-	const { asset, url } = useImageOrVideoAsset({
-		shapeId: shape.id,
-		assetId: shape.props.assetId,
-		width: w,
+function getFirstFrameOfAnimatedImage(url: string) {
+	let cancelled = false
+
+	const promise = new Promise<string>((resolve) => {
+		const image = Image()
+		image.onload = () => {
+			if (cancelled) return
+
+			const canvas = document.createElement('canvas')
+			canvas.width = image.width
+			canvas.height = image.height
+
+			const ctx = canvas.getContext('2d')
+			if (!ctx) return
+
+			ctx.drawImage(image, 0, 0)
+			resolve(canvas.toDataURL())
+		}
+		image.crossOrigin = 'anonymous'
+		image.src = url
 	})
 
-	const prefersReducedMotion = usePrefersReducedMotion()
-	const [staticFrameSrc, setStaticFrameSrc] = useState('')
-	const [loadedUrl, setLoadedUrl] = useState<null | string>(null)
-
-	const isAnimated = asset && getIsAnimated(editor, asset.id)
-
-	useEffect(() => {
-		if (url && isAnimated) {
-			const { promise, cancel } = getFirstFrameOfAnimatedImage(url)
-
-			promise.then((dataUrl) => {
-				setStaticFrameSrc(dataUrl)
-				setLoadedUrl(url)
-			})
-
-			return () => {
-				cancel()
-			}
-		}
-	}, [editor, isAnimated, prefersReducedMotion, url])
-
-	const showCropPreview = useValue(
-		'show crop preview',
-		() =>
-			shape.id === editor.getOnlySelectedShapeId() &&
-			editor.getCroppingShapeId() === shape.id &&
-			editor.isIn('select.crop'),
-		[editor, shape.id]
-	)
-
-	// We only want to reduce motion for mimeTypes that have motion
-	const reduceMotion =
-		prefersReducedMotion && (asset?.props.mimeType?.includes('video') || isAnimated)
-
-	const containerStyle = getCroppedContainerStyle(shape)
-
-	const nextSrc = url === loadedUrl ? null : url
-	const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl
-
-	// This logic path is for when it's broken/missing asset.
-	if (!url && !asset?.props.src) {
-		return (
-			<HTMLContainer
-				id={shape.id}
-				style={{
-					overflow: 'hidden',
-					width: shape.props.w,
-					height: shape.props.h,
-					color: 'var(--color-text-3)',
-					backgroundColor: 'var(--color-low)',
-					border: '1px solid var(--color-low-border)',
-				}}
-			>
-				<div
-					className={classNames('tl-image-container', asset && 'tl-image-container-loading')}
-					style={containerStyle}
-				>
-					{asset ? null : <BrokenAssetIcon />}
-				</div>
-				{'url' in shape.props && shape.props.url && <HyperlinkButton url={shape.props.url} />}
-			</HTMLContainer>
-		)
-	}
-
-	// We don't set crossOrigin for non-animated images because for Cloudflare we don't currently
-	// have that set up.
-	const crossOrigin = isAnimated ? 'anonymous' : undefined
-
-	return (
-		<>
-			{showCropPreview && loadedSrc && (
-				<div style={containerStyle}>
-					<img
-						className="tl-image"
-						style={{ ...getFlipStyle(shape), opacity: 0.1 }}
-						crossOrigin={crossOrigin}
-						src={loadedSrc}
-						referrerPolicy="strict-origin-when-cross-origin"
-						draggable={false}
-					/>
-				</div>
-			)}
-			<HTMLContainer
-				id={shape.id}
-				style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
-			>
-				<div className={classNames('tl-image-container')} style={containerStyle}>
-					{/* We have two images: the currently loaded image, and the next image that
-					we're waiting to load. we keep the loaded image mounted while we're waiting
-					for the next one by storing the loaded URL in state. We use `key` props with
-					the src of the image so that when the next image is ready, the previous one will
-					be unmounted and the next will be shown with the browser having to remount a
-					fresh image and decoded it again from the cache. */}
-					{loadedSrc && (
-						<img
-							key={loadedSrc}
-							className="tl-image"
-							style={getFlipStyle(shape)}
-							crossOrigin={crossOrigin}
-							src={loadedSrc}
-							referrerPolicy="strict-origin-when-cross-origin"
-							draggable={false}
-						/>
-					)}
-					{nextSrc && (
-						<img
-							key={nextSrc}
-							className="tl-image"
-							style={getFlipStyle(shape)}
-							crossOrigin={crossOrigin}
-							src={nextSrc}
-							referrerPolicy="strict-origin-when-cross-origin"
-							draggable={false}
-							onLoad={() => setLoadedUrl(nextSrc)}
-						/>
-					)}
-				</div>
-				{shape.props.url && <HyperlinkButton url={shape.props.url} />}
-			</HTMLContainer>
-		</>
-	)
-})
+	return { promise, cancel: () => (cancelled = true) }
+}
 
 function getIsAnimated(editor: Editor, assetId: TLAssetId) {
 	const asset = assetId ? editor.getAsset(assetId) : undefined
@@ -380,13 +422,11 @@ 	const crop = shape.props.crop
 	const topLeft = crop?.topLeft
 	if (!topLeft) {
-		return {
-			width: shape.props.w,
-			height: shape.props.h,
-		}
+		return
 	}
 
 	const { w, h } = getUncroppedSize(shape.props, crop)
+
 	const offsetX = -topLeft.x * w
 	const offsetY = -topLeft.y * h
 	return {
@@ -462,29 +502,4 @@ 			/>
 		)
 	}
-}
-
-function getFirstFrameOfAnimatedImage(url: string) {
-	let cancelled = false
-
-	const promise = new Promise<string>((resolve) => {
-		const image = Image()
-		image.onload = () => {
-			if (cancelled) return
-
-			const canvas = document.createElement('canvas')
-			canvas.width = image.width
-			canvas.height = image.height
-
-			const ctx = canvas.getContext('2d')
-			if (!ctx) return
-
-			ctx.drawImage(image, 0, 0)
-			resolve(canvas.toDataURL())
-		}
-		image.crossOrigin = 'anonymous'
-		image.src = url
-	})
-
-	return { promise, cancel: () => (cancelled = true) }
 }