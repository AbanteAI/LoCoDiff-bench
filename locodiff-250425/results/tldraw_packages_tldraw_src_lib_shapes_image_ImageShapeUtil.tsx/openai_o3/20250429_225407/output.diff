--- tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual)@@ -1,3 +1,4 @@+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Editor,
@@ -89,15 +90,9 @@ 		if (!shape.props.crop) return resized
 
 		const flipCropHorizontally =
-			// We used the flip horizontally feature
-			(mode === 'scale_shape' && scaleX === -1) ||
-			// We resized the shape past it's bounds, so it flipped
-			(mode === 'resize_bounds' && flipX !== resized.props.flipX)
+			(mode === 'scale_shape' && scaleX === -1) || (mode === 'resize_bounds' && flipX !== resized.props.flipX)
 		const flipCropVertically =
-			// We used the flip vertically feature
-			(mode === 'scale_shape' && scaleY === -1) ||
-			// We resized the shape past it's bounds, so it flipped
-			(mode === 'resize_bounds' && flipY !== resized.props.flipY)
+			(mode === 'scale_shape' && scaleY === -1) || (mode === 'resize_bounds' && flipY !== resized.props.flipY)
 
 		const { topLeft, bottomRight } = shape.props.crop
 		resized.props.crop = {
@@ -113,6 +108,17 @@ 		return resized
 	}
 
+	isAnimated(shape: TLImageShape) {
+		const asset = shape.props.assetId ? this.editor.getAsset(shape.props.assetId) : undefined
+
+		if (!asset) return false
+
+		return (
+			('mimeType' in asset.props && MediaHelpers.isAnimatedImageType(asset?.props.mimeType)) ||
+			('isAnimated' in asset.props && asset.props.isAnimated)
+		)
+	}
+
 	component(shape: TLImageShape) {
 		return <ImageShape shape={shape} />
 	}
@@ -131,7 +137,6 @@ 		if (!asset) return null
 
 		const { w } = getUncroppedSize(shape.props, shape.props.crop)
-
 		const src = await imageSvgExportCache.get(asset, async () => {
 			let src = await ctx.resolveAssetUrl(asset.id, w)
 			if (!src) return null
@@ -141,18 +146,15 @@ 				src.startsWith('/') ||
 				src.startsWith('./')
 			) {
-				// If it's a remote image, we need to fetch it and convert it to a data URI
 				src = (await getDataURIFromURL(src)) || ''
 			}
 
-			// If it's animated then we need to get the first frame
 			if (getIsAnimated(this.editor, asset.id)) {
 				const { promise } = getFirstFrameOfAnimatedImage(src)
 				src = await promise
 			}
 			return src
 		})
-
 		if (!src) return null
 
 		return <SvgImage shape={shape} src={src} />
@@ -171,7 +173,6 @@ 			bottomRight: { x: 1, y: 1 },
 		}
 
-		// The true asset dimensions
 		const { w, h } = getUncroppedSize(shape.props, crop)
 
 		const pointDelta = new Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation)
@@ -193,6 +194,7 @@ 
 		this.editor.updateShapes([partial])
 	}
+
 	override getInterpolatedProps(
 		startShape: TLImageShape,
 		endShape: TLImageShape,
@@ -264,7 +266,6 @@ 		[editor, shape.id]
 	)
 
-	// We only want to reduce motion for mimeTypes that have motion
 	const reduceMotion =
 		prefersReducedMotion && (asset?.props.mimeType?.includes('video') || isAnimated)
 
@@ -273,7 +274,6 @@ 	const nextSrc = url === loadedUrl ? null : url
 	const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl
 
-	// This logic path is for when it's broken/missing asset.
 	if (!url && !asset?.props.src) {
 		return (
 			<HTMLContainer
@@ -298,8 +298,6 @@ 		)
 	}
 
-	// We don't set crossOrigin for non-animated images because for Cloudflare we don't currently
-	// have that set up.
 	const crossOrigin = isAnimated ? 'anonymous' : undefined
 
 	return (
@@ -321,12 +319,6 @@ 				style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
 			>
 				<div className={classNames('tl-image-container')} style={containerStyle}>
-					{/* We have two images: the currently loaded image, and the next image that
-					we're waiting to load. we keep the loaded image mounted while we're waiting
-					for the next one by storing the loaded URL in state. We use `key` props with
-					the src of the image so that when the next image is ready, the previous one will
-					be unmounted and the next will be shown with the browser having to remount a
-					fresh image and decoded it again from the cache. */}
 					{loadedSrc && (
 						<img
 							key={loadedSrc}
@@ -407,7 +399,6 @@ 
 	return {
 		transform: `${translate} ${scale}`,
-		// in SVG, flipping around the center doesn't work so we use explicit width/height
 		transformOrigin: size ? '0 0' : 'center center',
 	}
 }
