
index 2e4a3e7b..2d4f362e 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmprctsawts_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual):tmp/tmpm36syjen_actual.txt	
@@ -1,3 +1,4 @@
+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Editor,
@@ -17,7 +18,6 @@ import {
 	fetch,
 	imageShapeMigrations,
 	imageShapeProps,
-	lerp,
 	resizeBox,
 	structuredClone,
 	toDomPrecision,
@@ -27,7 +27,6 @@ import {
 } from '@tldraw/editor'
 import classNames from 'classnames'
 import { memo, useEffect, useState } from 'react'
-
 import { BrokenAssetIcon } from '../shared/BrokenAssetIcon'
 import { HyperlinkButton } from '../shared/HyperlinkButton'
 import { getUncroppedSize } from '../shared/crop'
@@ -55,7 +54,7 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		return true
 	}
 
-	override getDefaultProps(): TLImageShape['props'] {
+	override getDefaultProps(): TLImageShapeProps {
 		return {
 			w: 100,
 			h: 100,
@@ -69,10 +68,6 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		}
 	}
 
-	override getAriaDescriptor(shape: TLImageShape) {
-		return shape.props.altText
-	}
-
 	override onResize(shape: TLImageShape, info: TLResizeInfo<TLImageShape>) {
 		let resized: TLImageShape = resizeBox(shape, info)
 		const { flipX, flipY } = info.initialShape.props
@@ -86,17 +81,16 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 				flipY: scaleY < 0 !== flipY,
 			},
 		}
-		if (!shape.props.crop) return resized
+
+		if (!shape.props.crop) {
+			return resized
+		}
 
 		const flipCropHorizontally =
-			// We used the flip horizontally feature
 			(mode === 'scale_shape' && scaleX === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipX !== resized.props.flipX)
 		const flipCropVertically =
-			// We used the flip vertically feature
 			(mode === 'scale_shape' && scaleY === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipY !== resized.props.flipY)
 
 		const { topLeft, bottomRight } = shape.props.crop
@@ -110,54 +104,51 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 				y: flipCropVertically ? 1 - topLeft.y : bottomRight.y,
 			},
 		}
-		return resized
-	}
 
-	component(shape: TLImageShape) {
-		return <ImageShape shape={shape} />
-	}
-
-	indicator(shape: TLImageShape) {
-		const isCropping = this.editor.getCroppingShapeId() === shape.id
-		if (isCropping) return null
-		return <rect width={toDomPrecision(shape.props.w)} height={toDomPrecision(shape.props.h)} />
+		return resized
 	}
 
 	override async toSvg(shape: TLImageShape, ctx: SvgExportContext) {
 		if (!shape.props.assetId) return null
 
 		const asset = this.editor.getAsset(shape.props.assetId)
-
 		if (!asset) return null
 
 		const { w } = getUncroppedSize(shape.props, shape.props.crop)
-
 		const src = await imageSvgExportCache.get(asset, async () => {
-			let src = await ctx.resolveAssetUrl(asset.id, w)
-			if (!src) return null
+			let url = await ctx.resolveAssetUrl(asset.id, w)
+			if (!url) return null
 			if (
-				src.startsWith('blob:') ||
-				src.startsWith('http') ||
-				src.startsWith('/') ||
-				src.startsWith('./')
+				url.startsWith('blob:') ||
+				url.startsWith('http') ||
+				url.startsWith('/') ||
+				url.startsWith('./')
 			) {
-				// If it's a remote image, we need to fetch it and convert it to a data URI
-				src = (await getDataURIFromURL(src)) || ''
+				url = (await getDataURIFromURL(url)) || ''
 			}
 
-			// If it's animated then we need to get the first frame
 			if (getIsAnimated(this.editor, asset.id)) {
-				const { promise } = getFirstFrameOfAnimatedImage(src)
-				src = await promise
+				const { promise } = getFirstFrameOfAnimatedImage(url)
+				url = await promise
 			}
-			return src
-		})
 
+			return url
+		})
 		if (!src) return null
 
 		return <SvgImage shape={shape} src={src} />
 	}
 
+	override getAriaDescriptor(shape: TLImageShape) {
+		return shape.props.altText
+	}
+
+	override indicator(shape: TLImageShape) {
+		const isCropping = this.editor.getCroppingShapeId() === shape.id
+		if (isCropping) return null
+		return <rect width={toDomPrecision(shape.props.w)} height={toDomPrecision(shape.props.h)} />
+	}
+
 	override onDoubleClickEdge(shape: TLImageShape) {
 		const props = shape.props
 		if (!props) return
@@ -171,9 +162,9 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 			bottomRight: { x: 1, y: 1 },
 		}
 
-		// The true asset dimensions
-		const { w, h } = getUncroppedSize(shape.props, crop)
-
+		const { w: uncroppedW, h: uncroppedH } = getUncroppedSize(props, props.crop)
+		const w = (1 / (crop.bottomRight.x - crop.topLeft.x)) * uncroppedW
+		const h = (1 / (crop.bottomRight.y - crop.topLeft.y)) * uncroppedH
 		const pointDelta = new Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation)
 
 		const partial: TLShapePartial<TLImageShape> = {
@@ -193,226 +184,9 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 
 		this.editor.updateShapes([partial])
 	}
-	override getInterpolatedProps(
-		startShape: TLImageShape,
-		endShape: TLImageShape,
-		t: number
-	): TLImageShapeProps {
-		function interpolateCrop(
-			startShape: TLImageShape,
-			endShape: TLImageShape
-		): TLImageShapeProps['crop'] {
-			if (startShape.props.crop === null && endShape.props.crop === null) return null
-
-			const startTL = startShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const startBR = startShape.props.crop?.bottomRight || { x: 1, y: 1 }
-			const endTL = endShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const endBR = endShape.props.crop?.bottomRight || { x: 1, y: 1 }
-
-			return {
-				topLeft: { x: lerp(startTL.x, endTL.x, t), y: lerp(startTL.y, endTL.y, t) },
-				bottomRight: { x: lerp(startBR.x, endBR.x, t), y: lerp(startBR.y, endBR.y, t) },
-			}
-		}
-
-		return {
-			...(t > 0.5 ? endShape.props : startShape.props),
-			w: lerp(startShape.props.w, endShape.props.w, t),
-			h: lerp(startShape.props.h, endShape.props.h, t),
-			crop: interpolateCrop(startShape, endShape),
-		}
-	}
 }
 
-const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape }) {
-	const editor = useEditor()
-
-	const { w } = getUncroppedSize(shape.props, shape.props.crop)
-	const { asset, url } = useImageOrVideoAsset({
-		shapeId: shape.id,
-		assetId: shape.props.assetId,
-		width: w,
-	})
-
-	const prefersReducedMotion = usePrefersReducedMotion()
-	const [staticFrameSrc, setStaticFrameSrc] = useState('')
-	const [loadedUrl, setLoadedUrl] = useState<null | string>(null)
-
-	const isAnimated = asset && getIsAnimated(editor, asset.id)
-
-	useEffect(() => {
-		if (url && isAnimated) {
-			const { promise, cancel } = getFirstFrameOfAnimatedImage(url)
-
-			promise.then((dataUrl) => {
-				setStaticFrameSrc(dataUrl)
-				setLoadedUrl(url)
-			})
-
-			return () => {
-				cancel()
-			}
-		}
-	}, [editor, isAnimated, prefersReducedMotion, url])
-
-	const showCropPreview = useValue(
-		'show crop preview',
-		() =>
-			shape.id === editor.getOnlySelectedShapeId() &&
-			editor.getCroppingShapeId() === shape.id &&
-			editor.isIn('select.crop'),
-		[editor, shape.id]
-	)
-
-	// We only want to reduce motion for mimeTypes that have motion
-	const reduceMotion =
-		prefersReducedMotion && (asset?.props.mimeType?.includes('video') || isAnimated)
-
-	const containerStyle = getCroppedContainerStyle(shape)
-
-	const nextSrc = url === loadedUrl ? null : url
-	const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl
-
-	// This logic path is for when it's broken/missing asset.
-	if (!url && !asset?.props.src) {
-		return (
-			<HTMLContainer
-				id={shape.id}
-				style={{
-					overflow: 'hidden',
-					width: shape.props.w,
-					height: shape.props.h,
-					color: 'var(--color-text-3)',
-					backgroundColor: 'var(--color-low)',
-					border: '1px solid var(--color-low-border)',
-				}}
-			>
-				<div
-					className={classNames('tl-image-container', asset && 'tl-image-container-loading')}
-					style={containerStyle}
-				>
-					{asset ? null : <BrokenAssetIcon />}
-				</div>
-				{'url' in shape.props && shape.props.url && <HyperlinkButton url={shape.props.url} />}
-			</HTMLContainer>
-		)
-	}
-
-	// We don't set crossOrigin for non-animated images because for Cloudflare we don't currently
-	// have that set up.
-	const crossOrigin = isAnimated ? 'anonymous' : undefined
-
-	return (
-		<>
-			{showCropPreview && loadedSrc && (
-				<div style={containerStyle}>
-					<img
-						className="tl-image"
-						style={{ ...getFlipStyle(shape), opacity: 0.1 }}
-						crossOrigin={crossOrigin}
-						src={loadedSrc}
-						referrerPolicy="strict-origin-when-cross-origin"
-						draggable={false}
-					/>
-				</div>
-			)}
-			<HTMLContainer
-				id={shape.id}
-				style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
-			>
-				<div className={classNames('tl-image-container')} style={containerStyle}>
-					{/* We have two images: the currently loaded image, and the next image that
-					we're waiting to load. we keep the loaded image mounted while we're waiting
-					for the next one by storing the loaded URL in state. We use `key` props with
-					the src of the image so that when the next image is ready, the previous one will
-					be unmounted and the next will be shown with the browser having to remount a
-					fresh image and decoded it again from the cache. */}
-					{loadedSrc && (
-						<img
-							key={loadedSrc}
-							className="tl-image"
-							style={getFlipStyle(shape)}
-							crossOrigin={crossOrigin}
-							src={loadedSrc}
-							referrerPolicy="strict-origin-when-cross-origin"
-							draggable={false}
-						/>
-					)}
-					{nextSrc && (
-						<img
-							key={nextSrc}
-							className="tl-image"
-							style={getFlipStyle(shape)}
-							crossOrigin={crossOrigin}
-							src={nextSrc}
-							referrerPolicy="strict-origin-when-cross-origin"
-							draggable={false}
-							onLoad={() => setLoadedUrl(nextSrc)}
-						/>
-					)}
-				</div>
-				{shape.props.url && <HyperlinkButton url={shape.props.url} />}
-			</HTMLContainer>
-		</>
-	)
-})
-
-function getIsAnimated(editor: Editor, assetId: TLAssetId) {
-	const asset = assetId ? editor.getAsset(assetId) : undefined
-
-	if (!asset) return false
-
-	return (
-		('mimeType' in asset.props && MediaHelpers.isAnimatedImageType(asset?.props.mimeType)) ||
-		('isAnimated' in asset.props && asset.props.isAnimated)
-	)
-}
-
-/**
- * When an image is cropped we need to translate the image to show the portion withing the cropped
- * area. We do this by translating the image by the negative of the top left corner of the crop
- * area.
- *
- * @param shape - Shape The image shape for which to get the container style
- * @returns - Styles to apply to the image container
- */
-function getCroppedContainerStyle(shape: TLImageShape) {
-	const crop = shape.props.crop
-	const topLeft = crop?.topLeft
-	if (!topLeft) {
-		return {
-			width: shape.props.w,
-			height: shape.props.h,
-		}
-	}
-
-	const { w, h } = getUncroppedSize(shape.props, crop)
-	const offsetX = -topLeft.x * w
-	const offsetY = -topLeft.y * h
-	return {
-		transform: `translate(${offsetX}px, ${offsetY}px)`,
-		width: w,
-		height: h,
-	}
-}
-
-function getFlipStyle(shape: TLImageShape, size?: { width: number; height: number }) {
-	const { flipX, flipY } = shape.props
-	if (!flipX && !flipY) return undefined
-
-	const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`
-	const translate = size
-		? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)`
-		: ''
-
-	return {
-		transform: `${translate} ${scale}`,
-		// in SVG, flipping around the center doesn't work so we use explicit width/height
-		transformOrigin: size ? '0 0' : 'center center',
-	}
-}
-
-function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
+const SvgImage = memo(function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
 	const cropClipId = useUniqueSafeId()
 	const containerStyle = getCroppedContainerStyle(shape)
 	const crop = shape.props.crop
@@ -435,7 +209,7 @@ function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
 			<>
 				<defs>
 					<clipPath id={cropClipId}>
-						<polygon points={points.map((p) => `${p.x},${p.y}`).join(' ')} />
+						<polygon points={points.map((p) => `${p.x},${p.y}`).join(',')} />
 					</clipPath>
 				</defs>
 				<g clipPath={`url(#${cropClipId})`}>
@@ -462,16 +236,23 @@ function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
 			/>
 		)
 	}
+})
+
+function getIsAnimated(editor: Editor, assetId: TLAssetId) {
+	const asset = assetId ? editor.getAsset(assetId) : undefined
+	if (!asset) return false
+	return (
+		('mimeType' in asset.props && MediaHelpers.isAnimatedImageType(asset.props.mimeType)) ||
+		('isAnimated' in asset.props && asset.props.isAnimated)
+	)
 }
 
 function getFirstFrameOfAnimatedImage(url: string) {
 	let cancelled = false
-
 	const promise = new Promise<string>((resolve) => {
 		const image = Image()
 		image.onload = () => {
 			if (cancelled) return
-
 			const canvas = document.createElement('canvas')
 			canvas.width = image.width
 			canvas.height = image.height
@@ -485,6 +266,39 @@ function getFirstFrameOfAnimatedImage(url: string) {
 		image.crossOrigin = 'anonymous'
 		image.src = url
 	})
-
 	return { promise, cancel: () => (cancelled = true) }
+}
+
+function getCroppedContainerStyle(shape: TLImageShape) {
+	const crop = shape.props.crop
+	const topLeft = crop?.topLeft
+	if (!topLeft) {
+		return { width: shape.props.w, height: shape.props.h }
+	}
+
+	const w = (1 / (crop.bottomRight.x - crop.topLeft.x)) * shape.props.w
+	const h = (1 / (crop.bottomRight.y - crop.topLeft.y)) * shape.props.h
+	const offsetX = -topLeft.x * w
+	const offsetY = -topLeft.y * h
+
+	return {
+		transform: `translate(${offsetX}px, ${offsetY}px)`,
+		width: w,
+		height: h,
+	}
+}
+
+function getFlipStyle(shape: TLImageShape, size?: { width: number; height: number }) {
+	const { flipX, flipY } = shape.props
+	if (!flipX && !flipY) return undefined
+
+	const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`
+	const translate = size
+		? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)`
+		: ''
+
+	return {
+		transform: `${translate} ${scale}`,
+		transformOrigin: size ? '0 0' : 'center center',
+	}
 }
\ No newline at end of file
