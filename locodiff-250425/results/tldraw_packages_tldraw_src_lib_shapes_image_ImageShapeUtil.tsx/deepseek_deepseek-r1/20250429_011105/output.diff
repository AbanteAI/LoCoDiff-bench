--- tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected)+++ tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual)@@ -1,3 +1,4 @@+/* eslint-disable react-hooks/rules-of-hooks */
 import {
 	BaseBoxShapeUtil,
 	Editor,
@@ -35,7 +36,7 @@ import { usePrefersReducedMotion } from '../shared/usePrefersReducedMotion'
 
 async function getDataURIFromURL(url: string): Promise<string> {
-	const response = await fetch(url)
+	const response = await fetch(url, { referrerPolicy: 'strict-origin-when-cross-origin' })
 	const blob = await response.blob()
 	return FileHelpers.blobToDataUrl(blob)
 }
@@ -89,14 +90,10 @@ 		if (!shape.props.crop) return resized
 
 		const flipCropHorizontally =
-			// We used the flip horizontally feature
 			(mode === 'scale_shape' && scaleX === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipX !== resized.props.flipX)
 		const flipCropVertically =
-			// We used the flip vertically feature
 			(mode === 'scale_shape' && scaleY === -1) ||
-			// We resized the shape past it's bounds, so it flipped
 			(mode === 'resize_bounds' && flipY !== resized.props.flipY)
 
 		const { topLeft, bottomRight } = shape.props.crop
@@ -113,10 +110,6 @@ 		return resized
 	}
 
-	component(shape: TLImageShape) {
-		return <ImageShape shape={shape} />
-	}
-
 	indicator(shape: TLImageShape) {
 		const isCropping = this.editor.getCroppingShapeId() === shape.id
 		if (isCropping) return null
@@ -141,11 +134,9 @@ 				src.startsWith('/') ||
 				src.startsWith('./')
 			) {
-				// If it's a remote image, we need to fetch it and convert it to a data URI
 				src = (await getDataURIFromURL(src)) || ''
 			}
 
-			// If it's animated then we need to get the first frame
 			if (getIsAnimated(this.editor, asset.id)) {
 				const { promise } = getFirstFrameOfAnimatedImage(src)
 				src = await promise
@@ -171,7 +162,6 @@ 			bottomRight: { x: 1, y: 1 },
 		}
 
-		// The true asset dimensions
 		const { w, h } = getUncroppedSize(shape.props, crop)
 
 		const pointDelta = new Vec(crop.topLeft.x * w, crop.topLeft.y * h).rot(shape.rotation)
@@ -193,6 +183,7 @@ 
 		this.editor.updateShapes([partial])
 	}
+
 	override getInterpolatedProps(
 		startShape: TLImageShape,
 		endShape: TLImageShape,
@@ -222,6 +213,10 @@ 			crop: interpolateCrop(startShape, endShape),
 		}
 	}
+
+	component(shape: TLImageShape) {
+		return <ImageShape shape={shape} />
+	}
 }
 
 const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape }) {
@@ -264,7 +259,6 @@ 		[editor, shape.id]
 	)
 
-	// We only want to reduce motion for mimeTypes that have motion
 	const reduceMotion =
 		prefersReducedMotion && (asset?.props.mimeType?.includes('video') || isAnimated)
 
@@ -273,7 +267,6 @@ 	const nextSrc = url === loadedUrl ? null : url
 	const loadedSrc = reduceMotion ? staticFrameSrc : loadedUrl
 
-	// This logic path is for when it's broken/missing asset.
 	if (!url && !asset?.props.src) {
 		return (
 			<HTMLContainer
@@ -298,8 +291,6 @@ 		)
 	}
 
-	// We don't set crossOrigin for non-animated images because for Cloudflare we don't currently
-	// have that set up.
 	const crossOrigin = isAnimated ? 'anonymous' : undefined
 
 	return (
@@ -321,12 +312,6 @@ 				style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
 			>
 				<div className={classNames('tl-image-container')} style={containerStyle}>
-					{/* We have two images: the currently loaded image, and the next image that
-					we're waiting to load. we keep the loaded image mounted while we're waiting
-					for the next one by storing the loaded URL in state. We use `key` props with
-					the src of the image so that when the next image is ready, the previous one will
-					be unmounted and the next will be shown with the browser having to remount a
-					fresh image and decoded it again from the cache. */}
 					{loadedSrc && (
 						<img
 							key={loadedSrc}
@@ -368,14 +353,6 @@ 	)
 }
 
-/**
- * When an image is cropped we need to translate the image to show the portion withing the cropped
- * area. We do this by translating the image by the negative of the top left corner of the crop
- * area.
- *
- * @param shape - Shape The image shape for which to get the container style
- * @returns - Styles to apply to the image container
- */
 function getCroppedContainerStyle(shape: TLImageShape) {
 	const crop = shape.props.crop
 	const topLeft = crop?.topLeft
@@ -401,13 +378,10 @@ 	if (!flipX && !flipY) return undefined
 
 	const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`
-	const translate = size
-		? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)`
-		: ''
+	const translate = size ? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)` : ''
 
 	return {
 		transform: `${translate} ${scale}`,
-		// in SVG, flipping around the center doesn't work so we use explicit width/height
 		transformOrigin: size ? '0 0' : 'center center',
 	}
 }
