
index 2e4a3e7b2..673a49c8d 100644
--- a/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_expectedoutput.txt (expected):tmp/tmp9o0o3qqv_expected.txt	
+++ b/tldraw_packages_tldraw_src_lib_shapes_image_ImageShapeUtil.tsx_extracted.txt (actual):tmp/tmpe3u9d3v2_actual.txt	
@@ -113,13 +113,37 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		return resized
 	}
 
-	component(shape: TLImageShape) {
-		return <ImageShape shape={shape} />
+	override getInterpolatedProps(
+		startShape: TLImageShape,
+		endShape: TLImageShape,
+		t: number
+	): TLImageShapeProps {
+		function interpolateCrop(
+			startShape: TLImageShape,
+			endShape: TLImageShape
+		): TLImageShapeProps['crop'] {
+			if (startShape.props.crop === null && endShape.props.crop === null) return null
+
+			const startTL = startShape.props.crop?.topLeft || { x: 0, y: 0 }
+			const startBR = startShape.props.crop?.bottomRight || { x: 1, y: 1 }
+			const endTL = endShape.props.crop?.topLeft || { x: 0, y: 0 }
+			const endBR = endShape.props.crop?.bottomRight || { x: 1, y: 1 }
+
+			return {
+				topLeft: { x: lerp(startTL.x, endTL.x, t), y: lerp(startTL.y, endTL.y, t) },
+				bottomRight: { x: lerp(startBR.x, endBR.x, t), y: lerp(startBR.y, endBR.y, t) },
+			}
+		}
+
+		return {
+			...(t > 0.5 ? endShape.props : startShape.props),
+			w: lerp(startShape.props.w, endShape.props.w, t),
+			h: lerp(startShape.props.h, endShape.props.h, t),
+			crop: interpolateCrop(startShape, endShape),
+		}
 	}
 
 	indicator(shape: TLImageShape) {
-		const isCropping = this.editor.getCroppingShapeId() === shape.id
-		if (isCropping) return null
 		return <rect width={toDomPrecision(shape.props.w)} height={toDomPrecision(shape.props.h)} />
 	}
 
@@ -131,7 +155,6 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 		if (!asset) return null
 
 		const { w } = getUncroppedSize(shape.props, shape.props.crop)
-
 		const src = await imageSvgExportCache.get(asset, async () => {
 			let src = await ctx.resolveAssetUrl(asset.id, w)
 			if (!src) return null
@@ -193,35 +216,6 @@ export class ImageShapeUtil extends BaseBoxShapeUtil<TLImageShape> {
 
 		this.editor.updateShapes([partial])
 	}
-	override getInterpolatedProps(
-		startShape: TLImageShape,
-		endShape: TLImageShape,
-		t: number
-	): TLImageShapeProps {
-		function interpolateCrop(
-			startShape: TLImageShape,
-			endShape: TLImageShape
-		): TLImageShapeProps['crop'] {
-			if (startShape.props.crop === null && endShape.props.crop === null) return null
-
-			const startTL = startShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const startBR = startShape.props.crop?.bottomRight || { x: 1, y: 1 }
-			const endTL = endShape.props.crop?.topLeft || { x: 0, y: 0 }
-			const endBR = endShape.props.crop?.bottomRight || { x: 1, y: 1 }
-
-			return {
-				topLeft: { x: lerp(startTL.x, endTL.x, t), y: lerp(startTL.y, endTL.y, t) },
-				bottomRight: { x: lerp(startBR.x, endBR.x, t), y: lerp(startBR.y, endBR.y, t) },
-			}
-		}
-
-		return {
-			...(t > 0.5 ? endShape.props : startShape.props),
-			w: lerp(startShape.props.w, endShape.props.w, t),
-			h: lerp(startShape.props.h, endShape.props.h, t),
-			crop: interpolateCrop(startShape, endShape),
-		}
-	}
 }
 
 const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape }) {
@@ -277,7 +271,6 @@ const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape })
 	if (!url && !asset?.props.src) {
 		return (
 			<HTMLContainer
-				id={shape.id}
 				style={{
 					overflow: 'hidden',
 					width: shape.props.w,
@@ -317,7 +310,6 @@ const ImageShape = memo(function ImageShape({ shape }: { shape: TLImageShape })
 				</div>
 			)}
 			<HTMLContainer
-				id={shape.id}
 				style={{ overflow: 'hidden', width: shape.props.w, height: shape.props.h }}
 			>
 				<div className={classNames('tl-image-container')} style={containerStyle}>
@@ -396,27 +388,10 @@ function getCroppedContainerStyle(shape: TLImageShape) {
 	}
 }
 
-function getFlipStyle(shape: TLImageShape, size?: { width: number; height: number }) {
-	const { flipX, flipY } = shape.props
-	if (!flipX && !flipY) return undefined
-
-	const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`
-	const translate = size
-		? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)`
-		: ''
-
-	return {
-		transform: `${translate} ${scale}`,
-		// in SVG, flipping around the center doesn't work so we use explicit width/height
-		transformOrigin: size ? '0 0' : 'center center',
-	}
-}
-
 function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
 	const cropClipId = useUniqueSafeId()
 	const containerStyle = getCroppedContainerStyle(shape)
 	const crop = shape.props.crop
-
 	if (containerStyle.transform && crop) {
 		const { transform: cropTransform, width, height } = containerStyle
 		const croppedWidth = (crop.bottomRight.x - crop.topLeft.x) * width
@@ -464,6 +439,22 @@ function SvgImage({ shape, src }: { shape: TLImageShape; src: string }) {
 	}
 }
 
+function getFlipStyle(shape: TLImageShape, size?: { width: number; height: number }) {
+	const { flipX, flipY } = shape.props
+	if (!flipX && !flipY) return undefined
+
+	const scale = `scale(${flipX ? -1 : 1}, ${flipY ? -1 : 1})`
+	const translate = size
+		? `translate(${flipX ? size.width : 0}px, ${flipY ? size.height : 0}px)`
+		: ''
+
+	return {
+		transform: `${translate} ${scale}`,
+		// in SVG, flipping around the center doesn't work so we use explicit width/height
+		transformOrigin: size ? '0 0' : 'center center',
+	}
+}
+
 function getFirstFrameOfAnimatedImage(url: string) {
 	let cancelled = false
 
