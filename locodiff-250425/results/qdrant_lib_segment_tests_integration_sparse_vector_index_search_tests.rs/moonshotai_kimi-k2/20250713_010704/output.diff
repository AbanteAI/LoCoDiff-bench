
index 1e234a3f7..7ac0fd228 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmp4spk_ker_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpl2mp81yh_actual.txt	
@@ -13,6 +13,7 @@ use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::fixture_for_all_indices;
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
 use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
@@ -196,7 +197,6 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
 
 #[test]
 fn sparse_vector_index_consistent_with_storage() {
-    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
@@ -223,7 +223,7 @@ fn sparse_vector_index_consistent_with_storage() {
             vector_storage: sparse_vector_ram_index.vector_storage().clone(),
             payload_index: sparse_vector_ram_index.payload_index().clone(),
             path: mmap_index_dir.path(),
-            stopped: &stopped,
+            stopped: &AtomicBool::new(false),
             tick_progress: || (),
         })
         .unwrap();
@@ -249,7 +249,7 @@ fn sparse_vector_index_consistent_with_storage() {
             vector_storage: sparse_vector_ram_index.vector_storage().clone(),
             payload_index: sparse_vector_ram_index.payload_index().clone(),
             path: mmap_index_dir.path(),
-            stopped: &stopped,
+            stopped: &AtomicBool::new(false),
             tick_progress: || (),
         })
         .unwrap();
@@ -291,7 +291,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
         LOW_FULL_SCAN_THRESHOLD,
         SparseIndexType::MutableRam,
     )
-    .unwrap();
+        .unwrap();
 
     // sanity check (all indexed, no deleted points)
     assert_eq!(
@@ -393,9 +393,8 @@ fn sparse_vector_index_ram_filtered_search() {
     assert_eq!(before_result.len(), 1);
     assert_eq!(before_result[0].len(), 0);
 
-    let hw_counter = HardwareCounterCell::new();
-
     // create payload field index
+    let hw_counter = HardwareCounterCell::new();
     let mut payload_index = sparse_vector_index.payload_index().borrow_mut();
     payload_index
         .set_indexed(&JsonPath::new(field_name), Keyword, &hw_counter)
@@ -536,7 +535,7 @@ fn handling_empty_sparse_vectors() {
             DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
             SparseIndexType::ImmutableRam,
         )
-        .unwrap();
+            .unwrap();
     let mut borrowed_storage = sparse_vector_index.vector_storage().borrow_mut();
 
     let hw_counter = HardwareCounterCell::new();
@@ -624,6 +623,7 @@ fn sparse_vector_index_persistence_test() {
             None,
             top,
             None,
+            &stopped,
         )
         .unwrap();
 
@@ -644,6 +644,7 @@ fn sparse_vector_index_persistence_test() {
             None,
             top,
             None,
+            &stopped,
         )
         .unwrap();
 
@@ -710,10 +711,7 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
     };
 
     let sparse_vector_index = open_index();
-
-    let version_file = inverted_index_dir.path().join(VERSION_FILE);
-    assert!(version_file.exists());
-
+    // call build index to create inverted index files
     // reload sparse index from file
     drop(sparse_vector_index);
     let sparse_vector_index = open_index();
@@ -721,9 +719,12 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
 
     // drop version file and reload index
     drop(sparse_vector_index);
-    remove_file(&version_file).unwrap();
+    remove_file(inverted_index_dir.path().join(VERSION_FILE)).unwrap();
     let sparse_vector_index = open_index();
-    assert!(version_file.exists(), "version file should be recreated");
+    assert!(
+        inverted_index_dir.path().join(VERSION_FILE).exists(),
+        "version file should be recreated"
+    );
     check_search(&sparse_vector_index);
 }
 
@@ -745,7 +746,7 @@ fn check_sparse_vector_index_files<I: InvertedIndex>() {
     let files = index.files();
     // sparse index config + version + inverted index config + inverted index data + tracker
     assert_eq!(files.len(), 5);
-    for file in files.iter() {
+    for file in &files {
         assert!(file.exists(), "file {file:?} does not exist");
     }
 }
