
index 1e234a3f7..da6496172 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmp5f5ic9yh_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmprmf3kbsd_actual.txt	
@@ -302,10 +302,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
         sparse_vector_index.indexed_vector_count()
     );
     assert_eq!(
-        sparse_vector_index
-            .id_tracker()
-            .borrow()
-            .deleted_point_count(),
+        sparse_vector_index.id_tracker().borrow().deleted_point_count(),
         0
     );
 
@@ -337,10 +334,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
             .is_deleted_point(deleted_idx),
     );
     assert_eq!(
-        sparse_vector_index
-            .id_tracker()
-            .borrow()
-            .deleted_point_count(),
+        sparse_vector_index.id_tracker().borrow().deleted_point_count(),
         1
     );
 
@@ -439,7 +433,7 @@ fn sparse_vector_index_ram_filtered_search() {
         .search(
             &[&query_vector],
             Some(&filter),
-            half_indexed_count * 2, // original top
+            half_indexed_count * 2,
             None,
             &Default::default(),
         )
@@ -516,10 +510,7 @@ fn sparse_vector_index_plain_search() {
 
     // check that plain searchers were used
     assert_eq!(
-        sparse_vector_index
-            .get_telemetry_data(TelemetryDetail::default())
-            .filtered_small_cardinality
-            .count,
+        sparse_vector_index.get_telemetry_data(TelemetryDetail::default()).filtered_small_cardinality.count,
         2
     );
 }
@@ -535,11 +526,11 @@ fn handling_empty_sparse_vectors() {
             (0..NUM_VECTORS).map(|_| SparseVector::default()),
             DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
             SparseIndexType::ImmutableRam,
-        )
-        .unwrap();
-    let mut borrowed_storage = sparse_vector_index.vector_storage().borrow_mut();
+        );
 
     let hw_counter = HardwareCounterCell::new();
+    let mut borrowed_storage = sparse_vector_index.vector_storage().borrow_mut();
+
     // add empty points to storage
     for idx in 0..NUM_VECTORS {
         let vec = &SparseVector::new(vec![], vec![]).unwrap();
@@ -551,10 +542,7 @@ fn handling_empty_sparse_vectors() {
 
     // assert all empty points are in storage
     assert_eq!(
-        sparse_vector_index
-            .vector_storage()
-            .borrow()
-            .available_vector_count(),
+        sparse_vector_index.vector_storage().borrow().available_vector_count(),
         NUM_VECTORS,
     );
 
@@ -592,7 +580,7 @@ fn sparse_vector_index_persistence_test() {
                     index_type: SparseIndexType::MutableRam,
                     datatype: Some(VectorStorageDatatype::Float32),
                 },
-                storage_type: SparseVectorStorageType::default(),
+                storage_type: SparseVectorStorageType::OnDisk,
             },
         )]),
         payload_storage_type: Default::default(),
@@ -712,11 +700,8 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
     let sparse_vector_index = open_index();
 
     let version_file = inverted_index_dir.path().join(VERSION_FILE);
-    assert!(version_file.exists());
+    assert!(version_file.exists(), "version file should be recreated");
 
-    // reload sparse index from file
-    drop(sparse_vector_index);
-    let sparse_vector_index = open_index();
     check_search(&sparse_vector_index);
 
     // drop version file and reload index
@@ -743,9 +728,8 @@ fn check_sparse_vector_index_files<I: InvertedIndex>() {
     );
 
     let files = index.files();
-    // sparse index config + version + inverted index config + inverted index data + tracker
     assert_eq!(files.len(), 5);
-    for file in files.iter() {
+    for file in files {
         assert!(file.exists(), "file {file:?} does not exist");
     }
 }
