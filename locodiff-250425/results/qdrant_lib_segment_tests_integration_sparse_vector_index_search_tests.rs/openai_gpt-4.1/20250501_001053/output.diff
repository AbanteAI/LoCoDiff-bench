--- qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual)@@ -1,4 +1,3 @@-use std::cmp::max;
 use std::collections::HashMap;
 use std::fs::remove_file;
 use std::sync::atomic::AtomicBool;
@@ -35,10 +34,10 @@ use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
-use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
 use sparse::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
 use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
@@ -88,7 +87,7 @@     for query in query_vectors {
         let maximum_number_of_results = sparse_vector_index.max_result_count(&query);
         // get all results minus 10 to force a bit of pruning
-        let top = max(1, maximum_number_of_results.saturating_sub(10));
+        let top = std::cmp::max(1, maximum_number_of_results.saturating_sub(10));
         let query_vector: QueryVector = query.clone().into();
         // with filter
         let index_results_filter = sparse_vector_index
@@ -102,15 +101,14 @@             .unwrap();
 
         // without filter
-        let index_results_no_filter = sparse_vector_index
-            .search(&[&query_vector], None, top, None, &Default::default())
-            .unwrap();
+        let index_results_no_filter =
+            sparse_vector_index.search(&[&query_vector], None, top, None, &Default::default())
+                .unwrap();
 
         assert_eq!(index_results_filter.len(), index_results_no_filter.len());
 
-        for (filter_result, no_filter_result) in index_results_filter
-            .iter()
-            .zip(index_results_no_filter.iter())
+        for (filter_result, no_filter_result) in
+            index_results_filter.iter().zip(index_results_no_filter.iter())
         {
             assert_eq!(
                 filter_result.len(),
@@ -135,18 +133,17 @@ }
 
 #[test]
+fn sparse_vector_index_fallback_plain_search() {
+    // very high full scan threshold to force fallback to plain search
+    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);
+}
+
+#[test]
 fn sparse_vector_index_ram_filter_search() {
     // very low full scan threshold to force usage of inverted index
     compare_sparse_vectors_search_with_without_filter(LOW_FULL_SCAN_THRESHOLD);
 }
 
-#[test]
-fn sparse_vector_index_fallback_plain_search() {
-    // very high full scan threshold to force fallback to plain search
-    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);
-}
-
-/// Checks that the sparse vector index is consistent with the underlying storage
 #[cfg(test)]
 fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &SparseVectorIndex<T>) {
     let borrowed_vector_storage = sparse_vector_index.vector_storage().borrow();
@@ -187,9 +184,9 @@         // check the vector can be found via search using large top
         let top = sparse_vector_index.max_result_count(vector);
         let query_vector: QueryVector = vector.to_owned().into();
-        let results = sparse_vector_index
-            .search(&[&query_vector], None, top, None, &Default::default())
-            .unwrap();
+        let results =
+            sparse_vector_index.search(&[&query_vector], None, top, None, &Default::default())
+                .unwrap();
         assert!(results[0].iter().any(|s| s.idx == id));
     }
 }
@@ -197,7 +194,7 @@ #[test]
 fn sparse_vector_index_consistent_with_storage() {
     let stopped = AtomicBool::new(false);
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_ram_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
@@ -281,7 +278,7 @@ #[test]
 fn sparse_vector_index_ram_deleted_points_search() {
     let top = 10;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -358,7 +355,7 @@ 
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -450,7 +447,7 @@ 
 #[test]
 fn sparse_vector_index_plain_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     // setup index
@@ -526,7 +523,7 @@ 
 #[test]
 fn handling_empty_sparse_vectors() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_index: SparseVectorIndex<InvertedIndexCompressedImmutableRam<f32>> =
@@ -564,21 +561,18 @@     let query_vector: QueryVector = random_sparse_vector(&mut rnd, MAX_SPARSE_DIM).into();
 
     // empty vectors are not searchable (recommend using scroll API to retrieve those)
-    let results = sparse_vector_index
-        .search(&[&query_vector], None, 10, None, &Default::default())
-        .unwrap();
+    let results =
+        sparse_vector_index.search(&[&query_vector], None, 10, None, &Default::default()).unwrap();
     assert_eq!(results.len(), 1);
     assert_eq!(results[0].len(), 0);
 }
 
 #[test]
 fn sparse_vector_index_persistence_test() {
-    let stopped = AtomicBool::new(false);
-
     let dim = 8;
     let num_vectors: u64 = 5_000;
     let top = 3;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
 
@@ -632,9 +626,7 @@     let path = segment.current_path.clone();
     drop(segment);
 
-    // persistence using rebuild of inverted index
-    // for appendable segment vector index has to be rebuilt
-    let segment = load_segment(&path, &stopped).unwrap().unwrap();
+    let segment = load_segment(&path, &AtomicBool::new(false)).unwrap().unwrap();
     let search_after_reload_result = segment
         .search(
             SPARSE_VECTOR_NAME,
@@ -690,25 +682,6 @@         .unwrap()
     };
 
-    let check_search = |sparse_vector_index: &SparseVectorIndex<TInvertedIndex>| {
-        // check that the loaded index performs the same search
-        let search_after_reload_result = sparse_vector_index
-            .search(&[query_vector], None, top, None, &Default::default())
-            .unwrap();
-        assert_eq!(search_after_reload_result[0].len(), top);
-        for (search_1, search_2) in search_result
-            .iter()
-            .zip(search_after_reload_result[0].iter())
-        {
-            let id_1 = segment
-                .id_tracker
-                .borrow_mut()
-                .internal_id(search_1.id)
-                .unwrap();
-            assert_eq!(id_1, search_2.idx);
-        }
-    };
-
     let sparse_vector_index = open_index();
 
     let version_file = inverted_index_dir.path().join(VERSION_FILE);
@@ -717,14 +690,46 @@     // reload sparse index from file
     drop(sparse_vector_index);
     let sparse_vector_index = open_index();
-    check_search(&sparse_vector_index);
+
+    // check search
+    let search_after_reload_result = sparse_vector_index
+        .search(&[query_vector], None, top, None, &Default::default())
+        .unwrap();
+    assert_eq!(search_after_reload_result[0].len(), top);
+    for (search_1, search_2) in search_result
+        .iter()
+        .zip(search_after_reload_result[0].iter())
+    {
+        let id_1 = segment
+            .id_tracker
+            .borrow_mut()
+            .internal_id(search_1.id)
+            .unwrap();
+        assert_eq!(id_1, search_2.idx);
+    }
 
     // drop version file and reload index
     drop(sparse_vector_index);
     remove_file(&version_file).unwrap();
     let sparse_vector_index = open_index();
     assert!(version_file.exists(), "version file should be recreated");
-    check_search(&sparse_vector_index);
+
+    // check search
+    let search_after_reload_result = sparse_vector_index
+        .search(&[query_vector], None, top, None, &Default::default())
+        .unwrap();
+    assert_eq!(search_after_reload_result[0].len(), top);
+    for (search_1, search_2) in search_result
+        .iter()
+        .zip(search_after_reload_result[0].iter())
+    {
+        let id_1 = segment
+            .id_tracker
+            .borrow_mut()
+            .internal_id(search_1.id)
+            .unwrap();
+        assert_eq!(id_1, search_2.idx);
+    }
 }
 
 #[test]
@@ -735,7 +740,7 @@ fn check_sparse_vector_index_files<I: InvertedIndex>() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let index = fixture_sparse_index::<I, _>(
-        &mut StdRng::seed_from_u64(42),
+        &mut StdRng::seed_from_u64(43),
         1,
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
