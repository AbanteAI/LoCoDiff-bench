
index 1e234a3f..1f95cb2f 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmp79vr90k1_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmp3ekz8p5s_actual.txt	
@@ -7,8 +7,8 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::{PointOffsetType, TelemetryDetail};
 use io::storage_version::VERSION_FILE;
 use itertools::Itertools;
-use rand::SeedableRng;
 use rand::rngs::StdRng;
+use rand::SeedableRng;
 use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
@@ -35,10 +35,10 @@ use segment::{fixture_for_all_indices, payload_json};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
-use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
 use sparse::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
 use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
@@ -63,13 +63,14 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        full_scan_threshold,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            full_scan_threshold,
+            data_dir.path(),
+        );
 
     // random query vectors
     let attempts = 1000;
@@ -134,18 +135,6 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
     }
 }
 
-#[test]
-fn sparse_vector_index_ram_filter_search() {
-    // very low full scan threshold to force usage of inverted index
-    compare_sparse_vectors_search_with_without_filter(LOW_FULL_SCAN_THRESHOLD);
-}
-
-#[test]
-fn sparse_vector_index_fallback_plain_search() {
-    // very high full scan threshold to force fallback to plain search
-    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);
-}
-
 /// Checks that the sparse vector index is consistent with the underlying storage
 #[cfg(test)]
 fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &SparseVectorIndex<T>) {
@@ -212,7 +201,6 @@ fn sparse_vector_index_consistent_with_storage() {
     check_index_storage_consistency(&sparse_vector_ram_index);
 
     let mmap_index_dir = Builder::new().prefix("mmap_index_dir").tempdir().unwrap();
-
     // create mmap sparse vector index
     let mut sparse_index_config = sparse_vector_ram_index.config();
     sparse_index_config.index_type = SparseIndexType::Mmap;
@@ -266,13 +254,14 @@ fn sparse_vector_index_consistent_with_storage() {
 #[test]
 fn sparse_vector_index_load_missing_mmap() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    let sparse_vector_index: OperationResult<SparseVectorIndex<InvertedIndexCompressedMmap<f32>>> =
-        fixture_sparse_index_from_iter(
-            data_dir.path(),
-            [].iter().cloned(),
-            10_000,
-            SparseIndexType::Mmap,
-        );
+    let sparse_vector_index: OperationResult<
+        SparseVectorIndex<InvertedIndexCompressedMmap<f32>>,
+    > = fixture_sparse_index_from_iter(
+        data_dir.path(),
+        [].iter().cloned(),
+        10_000,
+        SparseIndexType::Mmap,
+    );
     // absent configuration file for mmap are ignored
     // a new index is created
     assert!(sparse_vector_index.is_ok())
@@ -359,6 +348,8 @@ fn sparse_vector_index_ram_deleted_points_search() {
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
     let mut rnd = StdRng::seed_from_u64(42);
+    let field_name = "field";
+    let field_value = "important value";
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -372,8 +363,6 @@ fn sparse_vector_index_ram_filtered_search() {
     );
 
     // query index by payload
-    let field_name = "field";
-    let field_value = "important value";
     let filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
         JsonPath::new(field_name),
         field_value.to_owned().into(),
@@ -382,13 +371,7 @@ fn sparse_vector_index_ram_filtered_search() {
     // query all sparse dimension to get all points
     let query_vector: QueryVector = random_full_sparse_vector(&mut rnd, MAX_SPARSE_DIM).into();
     let before_result = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
     assert_eq!(before_result.len(), 1);
     assert_eq!(before_result[0].len(), 0);
@@ -418,7 +401,6 @@ fn sparse_vector_index_ram_filtered_search() {
     // add payload on the first half of the points
     let half_indexed_count = sparse_vector_index.indexed_vector_count() / 2;
     let payload = payload_json! {field_name: field_value};
-    let hw_counter = HardwareCounterCell::new();
     let mut payload_index = sparse_vector_index.payload_index().borrow_mut();
     for idx in 0..half_indexed_count {
         payload_index
@@ -475,13 +457,7 @@ fn sparse_vector_index_plain_search() {
 
     // empty when searching payload index directly
     let before_plain_results = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
 
     assert_eq!(before_plain_results.len(), 1);
@@ -624,6 +600,7 @@ fn sparse_vector_index_persistence_test() {
             None,
             top,
             None,
+            &stopped,
         )
         .unwrap();
 
@@ -632,26 +609,8 @@ fn sparse_vector_index_persistence_test() {
     let path = segment.current_path.clone();
     drop(segment);
 
-    // persistence using rebuild of inverted index
-    // for appendable segment vector index has to be rebuilt
-    let segment = load_segment(&path, &stopped).unwrap().unwrap();
-    let search_after_reload_result = segment
-        .search(
-            SPARSE_VECTOR_NAME,
-            &query_vector,
-            &Default::default(),
-            &Default::default(),
-            None,
-            top,
-            None,
-        )
-        .unwrap();
-
-    assert_eq!(search_after_reload_result.len(), top);
-    assert_eq!(search_result, search_after_reload_result);
-
     fixture_for_all_indices!(check_persistence::<_>(
-        &segment,
+        &load_segment(&path, &stopped).unwrap().unwrap(),
         &search_result,
         &query_vector,
         top
