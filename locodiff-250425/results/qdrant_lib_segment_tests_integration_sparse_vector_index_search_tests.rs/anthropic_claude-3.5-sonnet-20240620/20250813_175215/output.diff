
index 1e234a3f7..29aeb4bbb 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmpz3zsu_g0_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpdg78zjgg_actual.txt	
@@ -777,26 +777,4 @@ fn sparse_vector_test_large_index() {
         values: vec![0.0],
     }
     .into();
-    let mut named_vector = NamedVectors::default();
-    named_vector.insert(SPARSE_VECTOR_NAME.to_owned(), vector);
-    let idx = 0.into();
-    segment
-        .upsert_point(0 as SeqNumberType, idx, named_vector, &hw_counter)
-        .unwrap();
-
-    let borrowed_vector_index = segment.vector_data[SPARSE_VECTOR_NAME]
-        .vector_index
-        .borrow();
-    match &*borrowed_vector_index {
-        VectorIndexEnum::SparseRam(sparse_vector_index) => {
-            assert!(
-                sparse_vector_index
-                    .indices_tracker()
-                    .remap_index(DimId::MAX)
-                    .is_some(),
-            );
-            assert_eq!(sparse_vector_index.inverted_index().max_index().unwrap(), 0);
-        }
-        _ => panic!("unexpected vector index type"),
-    }
-}
\ No newline at end of file
+    let mut named_vector = Name
\ No newline at end of file
