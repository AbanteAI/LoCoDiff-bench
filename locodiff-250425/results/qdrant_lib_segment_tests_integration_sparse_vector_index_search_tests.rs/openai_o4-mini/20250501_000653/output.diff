
index 1e234a3f..1f429aff 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmplvf9ldr7_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpe3ky3yei_actual.txt	
@@ -1,3 +1,26 @@
+#![cfg(test)]
+#![allow(clippy::manual_let_else)]
+#![allow(clippy::enum_glob_use)]
+#![allow(clippy::filter_map_next)]
+#![allow(clippy::ref_as_ptr)]
+#![allow(clippy::ref_option_ref)]
+#![allow(clippy::manual_is_variant_and)]
+#![allow(clippy::flat_map_option)]
+#![allow(clippy::inefficient_to_string)]
+#![allow(clippy::implicit_clone)]
+#![allow(clippy::inconsistent_struct_constructor)]
+#![allow(clippy::unnecessary_wraps)]
+#![allow(clippy::needless_continue)]
+#![allow(clippy::unused_self)]
+#![allow(clippy::from_iter_instead_of_collect)]
+#![allow(clippy::uninlined_format_args)]
+#![allow(clippy::doc_link_with_quotes)]
+#![allow(clippy::needless_raw_string_hashes)]
+#![allow(clippy::used_underscore_binding)]
+#![allow(clippy::ptr_as_ptr)]
+#![allow(clippy::explicit_into_iter_loop)]
+#![allow(clippy::cast_lossless)]
+
 use std::cmp::max;
 use std::collections::HashMap;
 use std::fs::remove_file;
@@ -13,25 +36,21 @@ use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::{fixture_for_all_indices, payload_json};
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
+use segment::index::hnsw_index::num_rayon_threads;
 use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
-use segment::index::sparse_index::sparse_vector_index::{
-    SparseVectorIndex, SparseVectorIndexOpenArgs,
-};
+use segment::index::sparse_index::sparse_vector_index::{SparseVectorIndex, SparseVectorIndexOpenArgs};
 use segment::index::{PayloadIndex, VectorIndex, VectorIndexEnum};
-use segment::json_path::JsonPath;
 use segment::segment::Segment;
 use segment::segment_constructor::{build_segment, load_segment};
 use segment::types::PayloadFieldSchema::FieldType;
 use segment::types::PayloadSchemaType::Keyword;
-use segment::types::{
-    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, ScoredPoint,
-    SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName,
-    VectorStorageDatatype,
-};
+use segment::types::{Condition, FieldCondition, Filter, ScoredPoint, SegmentConfig, SeqNumberType,
+    SparseVectorDataConfig, SparseVectorStorageType, VectorName, VectorStorageDatatype,
+    DEFAULT_SPARSE_FULL_SCAN_THRESHOLD};
 use segment::vector_storage::VectorStorage;
-use segment::{fixture_for_all_indices, payload_json};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
@@ -55,6 +74,7 @@ const LOW_FULL_SCAN_THRESHOLD: usize = 1;
 /// Full scan threshold to force plain search
 const LARGE_FULL_SCAN_THRESHOLD: usize = 10 * NUM_VECTORS;
 
+/// Name of the sparse vector field in tests
 const SPARSE_VECTOR_NAME: &VectorName = "sparse_vector";
 
 /// Expects the filter to match ALL points in order to compare the results with/without filter
@@ -63,13 +83,16 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        full_scan_threshold,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            full_scan_threshold,
+            data_dir.path(),
+        );
+
+    let stopped = AtomicBool::new(false);
 
     // random query vectors
     let attempts = 1000;
@@ -79,7 +102,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
     // filter matches everything
     let filter = Filter::new_must_not(Condition::Field(FieldCondition::new_match(
-        JsonPath::new(STR_KEY),
+        STR_KEY,
         STR_KEY.to_owned().into(),
     )));
 
@@ -92,13 +115,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
         let query_vector: QueryVector = query.clone().into();
         // with filter
         let index_results_filter = sparse_vector_index
-            .search(
-                &[&query_vector],
-                Some(&filter),
-                top,
-                None,
-                &Default::default(),
-            )
+            .search(&[&query_vector], Some(&filter), top, None, &Default::default())
             .unwrap();
 
         // without filter
@@ -106,7 +123,10 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
             .search(&[&query_vector], None, top, None, &Default::default())
             .unwrap();
 
-        assert_eq!(index_results_filter.len(), index_results_no_filter.len());
+        assert_eq!(
+            index_results_filter.len(),
+            index_results_no_filter.len()
+        );
 
         for (filter_result, no_filter_result) in index_results_filter
             .iter()
@@ -136,18 +156,15 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
 #[test]
 fn sparse_vector_index_ram_filter_search() {
-    // very low full scan threshold to force usage of inverted index
     compare_sparse_vectors_search_with_without_filter(LOW_FULL_SCAN_THRESHOLD);
 }
 
 #[test]
 fn sparse_vector_index_fallback_plain_search() {
-    // very high full scan threshold to force fallback to plain search
-    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);
+    compare_sparse_vectors_search_with_without_filter(LARGE_FULL_SCAN_THRESHOLD);
 }
 
 /// Checks that the sparse vector index is consistent with the underlying storage
-#[cfg(test)]
 fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &SparseVectorIndex<T>) {
     let borrowed_vector_storage = sparse_vector_index.vector_storage().borrow();
     let point_count = borrowed_vector_storage.available_vector_count();
@@ -159,6 +176,7 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
         let remapped_vector = sparse_vector_index
             .indices_tracker()
             .remap_vector(vector.to_owned());
+
         // check posting lists are consistent with storage
         for (dim_id, dim_value) in remapped_vector
             .indices
@@ -177,13 +195,14 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
                     .tuple_windows()
                     .all(|(w0, w1)| w0.record_id < w1.record_id),
             );
-            // assert posted list contains record id
+            // assert posting list contains record id
             assert!(
                 posting_list
                     .into_std_iter()
                     .any(|e| e.record_id == id && e.weight == *dim_value),
             );
         }
+
         // check the vector can be found via search using large top
         let top = sparse_vector_index.max_result_count(vector);
         let query_vector: QueryVector = vector.to_owned().into();
@@ -196,21 +215,21 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
 
 #[test]
 fn sparse_vector_index_consistent_with_storage() {
-    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(42);
-
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    let sparse_vector_ram_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LOW_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_ram_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LOW_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+        );
 
     // check consistency with underlying RAM inverted index
     check_index_storage_consistency(&sparse_vector_ram_index);
 
+    let stopped = AtomicBool::new(false);
     let mmap_index_dir = Builder::new().prefix("mmap_index_dir").tempdir().unwrap();
 
     // create mmap sparse vector index
@@ -224,33 +243,6 @@ fn sparse_vector_index_consistent_with_storage() {
             payload_index: sparse_vector_ram_index.payload_index().clone(),
             path: mmap_index_dir.path(),
             stopped: &stopped,
-            tick_progress: || (),
-        })
-        .unwrap();
-
-    assert_eq!(
-        sparse_vector_mmap_index.indexed_vector_count(),
-        sparse_vector_ram_index.indexed_vector_count()
-    );
-
-    // check consistency with underlying mmap inverted index
-    check_index_storage_consistency(&sparse_vector_mmap_index);
-
-    // drop and reload index
-    drop(sparse_vector_mmap_index);
-
-    // load index from memmap file
-    let mut sparse_index_config = sparse_vector_ram_index.config();
-    sparse_index_config.index_type = SparseIndexType::Mmap;
-    let sparse_vector_mmap_index: SparseVectorIndex<InvertedIndexCompressedMmap<f32>> =
-        SparseVectorIndex::open(SparseVectorIndexOpenArgs {
-            config: sparse_index_config,
-            id_tracker: sparse_vector_ram_index.id_tracker().clone(),
-            vector_storage: sparse_vector_ram_index.vector_storage().clone(),
-            payload_index: sparse_vector_ram_index.payload_index().clone(),
-            path: mmap_index_dir.path(),
-            stopped: &stopped,
-            tick_progress: || (),
         })
         .unwrap();
 
@@ -266,13 +258,14 @@ fn sparse_vector_index_consistent_with_storage() {
 #[test]
 fn sparse_vector_index_load_missing_mmap() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    let sparse_vector_index: OperationResult<SparseVectorIndex<InvertedIndexCompressedMmap<f32>>> =
-        fixture_sparse_index_from_iter(
-            data_dir.path(),
-            [].iter().cloned(),
-            10_000,
-            SparseIndexType::Mmap,
-        );
+    let sparse_vector_index: OperationResult<
+        SparseVectorIndex<InvertedIndexCompressedMmap<f32>>,
+    > = fixture_sparse_index_from_iter(
+        data_dir.path(),
+        [].iter().cloned(),
+        10_000,
+        SparseIndexType::Mmap,
+    );
     // absent configuration file for mmap are ignored
     // a new index is created
     assert!(sparse_vector_index.is_ok())
@@ -284,7 +277,6 @@ fn sparse_vector_index_ram_deleted_points_search() {
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-
     let sparse_vector_index = fixture_sparse_index_from_iter::<InvertedIndexRam>(
         data_dir.path(),
         (0..NUM_VECTORS).map(|_| random_sparse_vector(&mut rnd, MAX_SPARSE_DIM)),
@@ -363,39 +355,35 @@ fn sparse_vector_index_ram_filtered_search() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
     // setup index
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LOW_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LOW_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+        );
 
     // query index by payload
+    let stopped = AtomicBool::new(false);
     let field_name = "field";
     let field_value = "important value";
+
     let filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
-        JsonPath::new(field_name),
+        field_name,
         field_value.to_owned().into(),
     )));
 
     // query all sparse dimension to get all points
     let query_vector: QueryVector = random_full_sparse_vector(&mut rnd, MAX_SPARSE_DIM).into();
     let before_result = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
     assert_eq!(before_result.len(), 1);
     assert_eq!(before_result[0].len(), 0);
 
-    let hw_counter = HardwareCounterCell::new();
-
     // create payload field index
+    let hw_counter = HardwareCounterCell::new();
     let mut payload_index = sparse_vector_index.payload_index().borrow_mut();
     payload_index
         .set_indexed(&JsonPath::new(field_name), Keyword, &hw_counter)
@@ -409,7 +397,6 @@ fn sparse_vector_index_ram_filtered_search() {
         *indexed_fields.get(&JsonPath::new(field_name)).unwrap(),
         FieldType(Keyword)
     );
-
     let field_indexes = &payload_index.field_indexes;
     let field_index = field_indexes.get(&JsonPath::new(field_name)).unwrap();
     assert_eq!(field_index[0].count_indexed_points(), 0);
@@ -417,7 +404,7 @@ fn sparse_vector_index_ram_filtered_search() {
 
     // add payload on the first half of the points
     let half_indexed_count = sparse_vector_index.indexed_vector_count() / 2;
-    let payload = payload_json! {field_name: field_value};
+    let payload = payload_json! { field_name: field_value };
     let hw_counter = HardwareCounterCell::new();
     let mut payload_index = sparse_vector_index.payload_index().borrow_mut();
     for idx in 0..half_indexed_count {
@@ -439,13 +426,13 @@ fn sparse_vector_index_ram_filtered_search() {
         .search(
             &[&query_vector],
             Some(&filter),
-            half_indexed_count * 2, // original top
+            half_indexed_count * 2,
             None,
             &Default::default(),
         )
         .unwrap();
     assert_eq!(after_result.len(), 1);
-    assert_eq!(after_result[0].len(), half_indexed_count); // expect half of the points
+    assert_eq!(after_result[0].len(), half_indexed_count);
 }
 
 #[test]
@@ -454,19 +441,20 @@ fn sparse_vector_index_plain_search() {
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     // setup index
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LARGE_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LARGE_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+        );
 
     // query index by payload
     let field_name = "field";
     let field_value = "important value";
     let filter = Filter::new_must(Condition::Field(FieldCondition::new_match(
-        JsonPath::new(field_name),
+        field_name,
         field_value.to_owned().into(),
     )));
 
@@ -475,20 +463,13 @@ fn sparse_vector_index_plain_search() {
 
     // empty when searching payload index directly
     let before_plain_results = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
 
     assert_eq!(before_plain_results.len(), 1);
     assert_eq!(before_plain_results[0].len(), 0);
 
-    let payload = payload_json! {field_name: field_value};
-
+    let payload = payload_json! { field_name: field_value };
     let hw_counter = HardwareCounterCell::new();
 
     // add payload to all points
@@ -500,15 +481,9 @@ fn sparse_vector_index_plain_search() {
     }
     drop(payload_index);
 
-    // same results when searching payload index directly
+    // plain search again
     let after_plain_results = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            NUM_VECTORS,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), NUM_VECTORS, None, &Default::default())
         .unwrap();
 
     assert_eq!(after_plain_results.len(), 1);
@@ -532,7 +507,7 @@ fn handling_empty_sparse_vectors() {
     let sparse_vector_index: SparseVectorIndex<InvertedIndexCompressedImmutableRam<f32>> =
         fixture_sparse_index_from_iter(
             data_dir.path(),
-            (0..NUM_VECTORS).map(|_| SparseVector::default()),
+            (0..NUM_VECTORS).map(|_| SparseVector::new(vec![], vec![]).unwrap()),
             DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
             SparseIndexType::ImmutableRam,
         )
@@ -551,10 +526,7 @@ fn handling_empty_sparse_vectors() {
 
     // assert all empty points are in storage
     assert_eq!(
-        sparse_vector_index
-            .vector_storage()
-            .borrow()
-            .available_vector_count(),
+        sparse_vector_index.vector_storage().borrow().available_vector_count(),
         NUM_VECTORS,
     );
 
@@ -573,8 +545,6 @@ fn handling_empty_sparse_vectors() {
 
 #[test]
 fn sparse_vector_index_persistence_test() {
-    let stopped = AtomicBool::new(false);
-
     let dim = 8;
     let num_vectors: u64 = 5_000;
     let top = 3;
@@ -585,7 +555,7 @@ fn sparse_vector_index_persistence_test() {
     let config = SegmentConfig {
         vector_data: Default::default(),
         sparse_vector_data: HashMap::from([(
-            SPARSE_VECTOR_NAME.to_owned(),
+            SPARSE_VECTOR_NAME.to_string(),
             SparseVectorDataConfig {
                 index: SparseIndexConfig {
                     full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
@@ -600,11 +570,10 @@ fn sparse_vector_index_persistence_test() {
     let mut segment = build_segment(dir.path(), &config, true).unwrap();
 
     let hw_counter = HardwareCounterCell::new();
-
     for n in 0..num_vectors {
         let vector: VectorInternal = random_sparse_vector(&mut rnd, dim).into();
         let mut named_vector = NamedVectors::default();
-        named_vector.insert(SPARSE_VECTOR_NAME.to_owned(), vector);
+        named_vector.insert(SPARSE_VECTOR_NAME.to_string(), vector);
         let idx = n.into();
         segment
             .upsert_point(n as SeqNumberType, idx, named_vector, &hw_counter)
@@ -624,6 +593,7 @@ fn sparse_vector_index_persistence_test() {
             None,
             top,
             None,
+            &Default::default(),
         )
         .unwrap();
 
@@ -634,7 +604,7 @@ fn sparse_vector_index_persistence_test() {
 
     // persistence using rebuild of inverted index
     // for appendable segment vector index has to be rebuilt
-    let segment = load_segment(&path, &stopped).unwrap().unwrap();
+    let segment = load_segment(&path).unwrap().unwrap();
     let search_after_reload_result = segment
         .search(
             SPARSE_VECTOR_NAME,
@@ -644,159 +614,96 @@ fn sparse_vector_index_persistence_test() {
             None,
             top,
             None,
+            &Default::default(),
         )
         .unwrap();
 
     assert_eq!(search_after_reload_result.len(), top);
     assert_eq!(search_result, search_after_reload_result);
 
-    fixture_for_all_indices!(check_persistence::<_>(
-        &segment,
-        &search_result,
-        &query_vector,
-        top
-    ));
-}
-
-fn check_persistence<TInvertedIndex: InvertedIndex>(
-    segment: &Segment,
-    search_result: &[ScoredPoint],
-    query_vector: &QueryVector,
-    top: usize,
-) {
-    let stopped = AtomicBool::new(false);
-
-    let inverted_index_dir = Builder::new()
-        .prefix("inverted_index_ram")
-        .tempdir()
-        .unwrap();
-
-    let open_index = || -> SparseVectorIndex<TInvertedIndex> {
-        SparseVectorIndex::open(SparseVectorIndexOpenArgs {
-            config: SparseIndexConfig {
-                full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
-                index_type: SparseIndexType::Mmap,
-                datatype: Some(VectorStorageDatatype::Float32),
-            },
-            id_tracker: segment.id_tracker.clone(),
-            vector_storage: segment.vector_data[SPARSE_VECTOR_NAME]
-                .vector_storage
-                .clone(),
-            payload_index: segment.payload_index.clone(),
-            path: inverted_index_dir.path(),
-            stopped: &stopped,
-            tick_progress: || (),
-        })
-        .unwrap()
-    };
+    fn check_persistence<TInvertedIndex: InvertedIndex>(segment: &Segment,
+        search_result: &[ScoredPoint],
+        query_vector: &QueryVector,
+        top: usize,
+    ) {
+        let stopped = AtomicBool::new(false);
+        let inverted_index_dir = Builder::new()
+            .prefix("inverted_index")
+            .tempdir()
+            .unwrap();
 
-    let check_search = |sparse_vector_index: &SparseVectorIndex<TInvertedIndex>| {
+        let open_index = || -> SparseVectorIndex<TInvertedIndex> {
+            SparseVectorIndex::open(SparseVectorIndexOpenArgs {
+                config: SparseIndexConfig {
+                    full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
+                    index_type: SparseIndexType::Mmap,
+                },
+                id_tracker: segment.id_tracker().clone(),
+                vector_storage: segment.vector_data[SPARSE_VECTOR_NAME]
+                    .vector_storage
+                    .clone(),
+                payload_index: segment.payload_index.clone(),
+                path: inverted_index_dir.path(),
+                stopped: &stopped,
+            })
+            .unwrap()
+        };
+
+        let sparse_vector_index = open_index();
+        let version_file = inverted_index_dir.path().join(VERSION_FILE);
+        assert!(version_file.exists());
+
+        // reload sparse index from file
+        drop(sparse_vector_index);
+        let sparse_vector_index = open_index();
         // check that the loaded index performs the same search
-        let search_after_reload_result = sparse_vector_index
+        let search_after_reload = sparse_vector_index
             .search(&[query_vector], None, top, None, &Default::default())
-            .unwrap();
-        assert_eq!(search_after_reload_result[0].len(), top);
-        for (search_1, search_2) in search_result
-            .iter()
-            .zip(search_after_reload_result[0].iter())
-        {
-            let id_1 = segment
-                .id_tracker
+            .unwrap()[0]
+            .clone();
+
+        assert_eq!(search_after_reload.len(), top);
+        for (orig, loaded) in search_result.iter().zip(search_after_reload) {
+            let id = segment
+                .id_tracker()
                 .borrow_mut()
-                .internal_id(search_1.id)
+                .internal_id(orig.id)
                 .unwrap();
-            assert_eq!(id_1, search_2.idx);
+            assert_eq!(id, loaded.idx);
         }
-    };
 
-    let sparse_vector_index = open_index();
-
-    let version_file = inverted_index_dir.path().join(VERSION_FILE);
-    assert!(version_file.exists());
-
-    // reload sparse index from file
-    drop(sparse_vector_index);
-    let sparse_vector_index = open_index();
-    check_search(&sparse_vector_index);
+        // drop version file and reload index
+        drop(sparse_vector_index);
+        remove_file(&version_file).unwrap();
+        let sparse_vector_index = open_index();
+        assert!(version_file.exists(), "version file should be recreated");
+        // final check
+        let search_after_reload = sparse_vector_index
+            .search(&[query_vector], None, top, None, &Default::default())
+            .unwrap()[0]
+            .clone();
+        assert_eq!(search_after_reload.len(), top);
+    }
 
-    // drop version file and reload index
-    drop(sparse_vector_index);
-    remove_file(&version_file).unwrap();
-    let sparse_vector_index = open_index();
-    assert!(version_file.exists(), "version file should be recreated");
-    check_search(&sparse_vector_index);
+    fixture_for_all_indices!(check_persistence::<_>(&segment, &search_result, &query_vector, top));
 }
 
 #[test]
 fn sparse_vector_index_files() {
     fixture_for_all_indices!(check_sparse_vector_index_files::<_>());
-}
-
-fn check_sparse_vector_index_files<I: InvertedIndex>() {
-    let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    let index = fixture_sparse_index::<I, _>(
-        &mut StdRng::seed_from_u64(42),
-        1,
-        MAX_SPARSE_DIM,
-        LOW_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
-
-    let files = index.files();
-    // sparse index config + version + inverted index config + inverted index data + tracker
-    assert_eq!(files.len(), 5);
-    for file in files.iter() {
-        assert!(file.exists(), "file {file:?} does not exist");
-    }
-}
-
-#[test]
-fn sparse_vector_test_large_index() {
-    let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
-    let config = SegmentConfig {
-        vector_data: Default::default(),
-        sparse_vector_data: HashMap::from([(
-            SPARSE_VECTOR_NAME.to_owned(),
-            SparseVectorDataConfig {
-                index: SparseIndexConfig {
-                    full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
-                    index_type: SparseIndexType::MutableRam,
-                    datatype: Some(VectorStorageDatatype::Float32),
-                },
-                storage_type: SparseVectorStorageType::OnDisk,
-            },
-        )]),
-        payload_storage_type: Default::default(),
-    };
-    let mut segment = build_segment(dir.path(), &config, true).unwrap();
-
-    let hw_counter = HardwareCounterCell::new();
 
-    let vector: VectorInternal = SparseVector {
-        indices: vec![DimId::MAX],
-        values: vec![0.0],
-    }
-    .into();
-    let mut named_vector = NamedVectors::default();
-    named_vector.insert(SPARSE_VECTOR_NAME.to_owned(), vector);
-    let idx = 0.into();
-    segment
-        .upsert_point(0 as SeqNumberType, idx, named_vector, &hw_counter)
-        .unwrap();
-
-    let borrowed_vector_index = segment.vector_data[SPARSE_VECTOR_NAME]
-        .vector_index
-        .borrow();
-    match &*borrowed_vector_index {
-        VectorIndexEnum::SparseRam(sparse_vector_index) => {
-            assert!(
-                sparse_vector_index
-                    .indices_tracker()
-                    .remap_index(DimId::MAX)
-                    .is_some(),
-            );
-            assert_eq!(sparse_vector_index.inverted_index().max_index().unwrap(), 0);
+    fn check_sparse_vector_index_files<I: InvertedIndex>() {
+        let index = fixture_sparse_index::<I, _>(
+            &mut StdRng::seed_from_u64(42),
+            1,
+            MAX_SPARSE_DIM,
+            LOW_FULL_SCAN_THRESHOLD,
+            Builder::new().prefix("data_dir").tempdir().unwrap().path(),
+        );
+        let files = index.files();
+        assert_eq!(files.len(), 5);
+        for file in files {
+            assert!(file.exists(), "file {file:?} does not exist");
         }
-        _ => panic!("unexpected vector index type"),
     }
 }
\ No newline at end of file
