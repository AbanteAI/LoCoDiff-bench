
index 1e234a3f..edd037df 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmp5usuth12_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpx2zycwth_actual.txt	
@@ -4,7 +4,7 @@ use std::fs::remove_file;
 use std::sync::atomic::AtomicBool;
 
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::types::{PointOffsetType, TelemetryDetail};
+use common::types::{PointOffsetType, TelemetryDetail}; 
 use io::storage_version::VERSION_FILE;
 use itertools::Itertools;
 use rand::SeedableRng;
@@ -13,12 +13,11 @@ use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::fixture_for_all_indices;
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
 use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
-use segment::index::sparse_index::sparse_vector_index::{
-    SparseVectorIndex, SparseVectorIndexOpenArgs,
-};
+use segment::index::sparse_index::sparse_vector_index::{SparseVectorIndex, SparseVectorIndexOpenArgs};
 use segment::index::{PayloadIndex, VectorIndex, VectorIndexEnum};
 use segment::json_path::JsonPath;
 use segment::segment::Segment;
@@ -27,7 +26,7 @@ use segment::types::PayloadFieldSchema::FieldType;
 use segment::types::PayloadSchemaType::Keyword;
 use segment::types::{
     Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, ScoredPoint,
-    SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName,
+    SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName, 
     VectorStorageDatatype,
 };
 use segment::vector_storage::VectorStorage;
@@ -42,7 +41,7 @@ use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
-/// Max dimension of sparse vectors used in tests
+/// Max dimension of sparse vectors used in tests 
 const MAX_SPARSE_DIM: usize = 4096;
 
 /// Number of vectors to index in tests
@@ -65,7 +64,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
     let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
         &mut rnd,
-        NUM_VECTORS,
+        NUM_VECTORS, 
         MAX_SPARSE_DIM,
         full_scan_threshold,
         data_dir.path(),
@@ -87,24 +86,19 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
     // expects the filter to have no effect on the results because the filter matches everything
     for query in query_vectors {
         let maximum_number_of_results = sparse_vector_index.max_result_count(&query);
-        // get all results minus 10 to force a bit of pruning
+        // get all results minus 10 to force a bit of pruning 
         let top = max(1, maximum_number_of_results.saturating_sub(10));
         let query_vector: QueryVector = query.clone().into();
+        
         // with filter
         let index_results_filter = sparse_vector_index
-            .search(
-                &[&query_vector],
-                Some(&filter),
-                top,
-                None,
-                &Default::default(),
-            )
+            .search(&[&query_vector], Some(&filter), top, None, &Default::default())
             .unwrap();
 
         // without filter
         let index_results_no_filter = sparse_vector_index
             .search(&[&query_vector], None, top, None, &Default::default())
-            .unwrap();
+            .unwrap();  
 
         assert_eq!(index_results_filter.len(), index_results_no_filter.len());
 
@@ -121,7 +115,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
             for (filter_result, no_filter_result) in filter_result
                 .iter()
                 .filter(|s| s.score != 0.0)
-                .zip(no_filter_result.iter().filter(|s| s.score != 0.0))
+                .zip(no_filter_result.iter().filter(|s| s.score != 0.0))  
             {
                 if filter_result.idx != no_filter_result.idx {
                     // we do not break ties when identical scores
@@ -143,7 +137,7 @@ fn sparse_vector_index_ram_filter_search() {
 #[test]
 fn sparse_vector_index_fallback_plain_search() {
     // very high full scan threshold to force fallback to plain search
-    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);
+    compare_sparse_vectors_search_with_without_filter(NUM_VECTORS + 1);  
 }
 
 /// Checks that the sparse vector index is consistent with the underlying storage
@@ -156,7 +150,7 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
         // assuming no deleted points
         let vector = borrowed_vector_storage.get_vector(id);
         let vector: &SparseVector = vector.as_vec_ref().try_into().unwrap();
-        let remapped_vector = sparse_vector_index
+        let remapped_vector = sparse_vector_index  
             .indices_tracker()
             .remap_vector(vector.to_owned());
         // check posting lists are consistent with storage
@@ -213,7 +207,7 @@ fn sparse_vector_index_consistent_with_storage() {
 
     let mmap_index_dir = Builder::new().prefix("mmap_index_dir").tempdir().unwrap();
 
-    // create mmap sparse vector index
+    // create mmap sparse vector index 
     let mut sparse_index_config = sparse_vector_ram_index.config();
     sparse_index_config.index_type = SparseIndexType::Mmap;
     let sparse_vector_mmap_index: SparseVectorIndex<InvertedIndexCompressedMmap<f32>> =
@@ -244,7 +238,7 @@ fn sparse_vector_index_consistent_with_storage() {
     sparse_index_config.index_type = SparseIndexType::Mmap;
     let sparse_vector_mmap_index: SparseVectorIndex<InvertedIndexCompressedMmap<f32>> =
         SparseVectorIndex::open(SparseVectorIndexOpenArgs {
-            config: sparse_index_config,
+            config: sparse_index_config, 
             id_tracker: sparse_vector_ram_index.id_tracker().clone(),
             vector_storage: sparse_vector_ram_index.vector_storage().clone(),
             payload_index: sparse_vector_ram_index.payload_index().clone(),
@@ -271,7 +265,7 @@ fn sparse_vector_index_load_missing_mmap() {
             data_dir.path(),
             [].iter().cloned(),
             10_000,
-            SparseIndexType::Mmap,
+            SparseIndexType::Mmap, 
         );
     // absent configuration file for mmap are ignored
     // a new index is created
@@ -293,10 +287,10 @@ fn sparse_vector_index_ram_deleted_points_search() {
     )
     .unwrap();
 
-    // sanity check (all indexed, no deleted points)
+    // sanity check (all indexed, no deleted points) 
     assert_eq!(
         sparse_vector_index
-            .id_tracker()
+            .id_tracker() 
             .borrow()
             .available_point_count(),
         sparse_vector_index.indexed_vector_count()
@@ -304,7 +298,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
     assert_eq!(
         sparse_vector_index
             .id_tracker()
-            .borrow()
+            .borrow() 
             .deleted_point_count(),
         0
     );
@@ -440,7 +434,7 @@ fn sparse_vector_index_ram_filtered_search() {
             &[&query_vector],
             Some(&filter),
             half_indexed_count * 2, // original top
-            None,
+            None, 
             &Default::default(),
         )
         .unwrap();
@@ -453,7 +447,7 @@ fn sparse_vector_index_plain_search() {
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    // setup index
+    // setup index 
     let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
         &mut rnd,
         NUM_VECTORS,
@@ -571,7 +565,7 @@ fn handling_empty_sparse_vectors() {
     assert_eq!(results[0].len(), 0);
 }
 
-#[test]
+#[test]  
 fn sparse_vector_index_persistence_test() {
     let stopped = AtomicBool::new(false);
 
@@ -617,7 +611,7 @@ fn sparse_vector_index_persistence_test() {
 
     let search_result = segment
         .search(
-            SPARSE_VECTOR_NAME,
+            SPARSE_VECTOR_NAME, 
             &query_vector,
             &Default::default(),
             &Default::default(),
@@ -650,12 +644,13 @@ fn sparse_vector_index_persistence_test() {
     assert_eq!(search_after_reload_result.len(), top);
     assert_eq!(search_result, search_after_reload_result);
 
-    fixture_for_all_indices!(check_persistence::<_>(
+    check_persistence::<InvertedIndexCompressedImmutableRam<f32>>(
         &segment,
         &search_result,
         &query_vector,
-        top
-    ));
+        top,
+    );
+    check_persistence::<InvertedIndexCompressedMmap<f32>>(&segment, &search_result, &query_vector, top);
 }
 
 fn check_persistence<TInvertedIndex: InvertedIndex>(
@@ -692,7 +687,7 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
 
     let check_search = |sparse_vector_index: &SparseVectorIndex<TInvertedIndex>| {
         // check that the loaded index performs the same search
-        let search_after_reload_result = sparse_vector_index
+        let search_after_reload_result = sparse_vector_index  
             .search(&[query_vector], None, top, None, &Default::default())
             .unwrap();
         assert_eq!(search_after_reload_result[0].len(), top);
@@ -703,7 +698,7 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
             let id_1 = segment
                 .id_tracker
                 .borrow_mut()
-                .internal_id(search_1.id)
+                .internal_id(search_1.id)  
                 .unwrap();
             assert_eq!(id_1, search_2.idx);
         }
@@ -737,7 +732,7 @@ fn check_sparse_vector_index_files<I: InvertedIndex>() {
     let index = fixture_sparse_index::<I, _>(
         &mut StdRng::seed_from_u64(42),
         1,
-        MAX_SPARSE_DIM,
+        MAX_SPARSE_DIM, 
         LOW_FULL_SCAN_THRESHOLD,
         data_dir.path(),
     );
@@ -768,35 +763,4 @@ fn sparse_vector_test_large_index() {
         )]),
         payload_storage_type: Default::default(),
     };
-    let mut segment = build_segment(dir.path(), &config, true).unwrap();
-
-    let hw_counter = HardwareCounterCell::new();
-
-    let vector: VectorInternal = SparseVector {
-        indices: vec![DimId::MAX],
-        values: vec![0.0],
-    }
-    .into();
-    let mut named_vector = NamedVectors::default();
-    named_vector.insert(SPARSE_VECTOR_NAME.to_owned(), vector);
-    let idx = 0.into();
-    segment
-        .upsert_point(0 as SeqNumberType, idx, named_vector, &hw_counter)
-        .unwrap();
-
-    let borrowed_vector_index = segment.vector_data[SPARSE_VECTOR_NAME]
-        .vector_index
-        .borrow();
-    match &*borrowed_vector_index {
-        VectorIndexEnum::SparseRam(sparse_vector_index) => {
-            assert!(
-                sparse_vector_index
-                    .indices_tracker()
-                    .remap_index(DimId::MAX)
-                    .is_some(),
-            );
-            assert_eq!(sparse_vector_index.inverted_index().max_index().unwrap(), 0);
-        }
-        _ => panic!("unexpected vector index type"),
-    }
-}
\ No newline at end of file
+    let mut segment = build_segment(dir.
\ No newline at end of file
