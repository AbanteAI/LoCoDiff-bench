
index 1e234a3f7..4ca252bf2 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmp8atzsf28_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpadx1ua0t_actual.txt	
@@ -7,8 +7,8 @@ use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::{PointOffsetType, TelemetryDetail};
 use io::storage_version::VERSION_FILE;
 use itertools::Itertools;
-use rand::SeedableRng;
 use rand::rngs::StdRng;
+use rand::SeedableRng;
 use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
@@ -26,19 +26,19 @@ use segment::segment_constructor::{build_segment, load_segment};
 use segment::types::PayloadFieldSchema::FieldType;
 use segment::types::PayloadSchemaType::Keyword;
 use segment::types::{
-    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, ScoredPoint,
-    SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName,
-    VectorStorageDatatype,
+    Condition, FieldCondition, Filter, ScoredPoint, SegmentConfig, SeqNumberType,
+    SparseVectorDataConfig, SparseVectorStorageType, VectorName, VectorStorageDatatype,
+    DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
 };
 use segment::vector_storage::VectorStorage;
-use segment::{fixture_for_all_indices, payload_json};
+use segment::{fixture_for_all_indices, payload_json, types};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
-use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
 use sparse::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
 use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
@@ -73,9 +73,9 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
 
     // random query vectors
     let attempts = 1000;
-    let query_vectors = (0..attempts)
+    let query_vectors: Vec<_> = (0..attempts)
         .map(|_| random_sparse_vector(&mut rnd, MAX_SPARSE_DIM))
-        .collect::<Vec<_>>();
+        .collect();
 
     // filter matches everything
     let filter = Filter::new_must_not(Condition::Field(FieldCondition::new_match(
@@ -197,7 +197,7 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
 #[test]
 fn sparse_vector_index_consistent_with_storage() {
     let stopped = AtomicBool::new(false);
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_ram_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
@@ -281,7 +281,7 @@ fn sparse_vector_index_load_missing_mmap() {
 #[test]
 fn sparse_vector_index_ram_deleted_points_search() {
     let top = 10;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -358,7 +358,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
 
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -450,7 +450,7 @@ fn sparse_vector_index_ram_filtered_search() {
 
 #[test]
 fn sparse_vector_index_plain_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     // setup index
@@ -526,7 +526,7 @@ fn sparse_vector_index_plain_search() {
 
 #[test]
 fn handling_empty_sparse_vectors() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_index: SparseVectorIndex<InvertedIndexCompressedImmutableRam<f32>> =
@@ -578,7 +578,7 @@ fn sparse_vector_index_persistence_test() {
     let dim = 8;
     let num_vectors: u64 = 5_000;
     let top = 3;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
 
@@ -586,7 +586,7 @@ fn sparse_vector_index_persistence_test() {
         vector_data: Default::default(),
         sparse_vector_data: HashMap::from([(
             SPARSE_VECTOR_NAME.to_owned(),
-            SparseVectorDataConfig {
+            types::SparseVectorDataConfig {
                 index: SparseIndexConfig {
                     full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
                     index_type: SparseIndexType::MutableRam,
@@ -735,7 +735,7 @@ fn sparse_vector_index_files() {
 fn check_sparse_vector_index_files<I: InvertedIndex>() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let index = fixture_sparse_index::<I, _>(
-        &mut StdRng::seed_from_u64(42),
+        &mut StdRng::seed_from_u64(43),
         1,
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
@@ -757,7 +757,7 @@ fn sparse_vector_test_large_index() {
         vector_data: Default::default(),
         sparse_vector_data: HashMap::from([(
             SPARSE_VECTOR_NAME.to_owned(),
-            SparseVectorDataConfig {
+            types::SparseVectorDataConfig {
                 index: SparseIndexConfig {
                     full_scan_threshold: Some(DEFAULT_SPARSE_FULL_SCAN_THRESHOLD),
                     index_type: SparseIndexType::MutableRam,
