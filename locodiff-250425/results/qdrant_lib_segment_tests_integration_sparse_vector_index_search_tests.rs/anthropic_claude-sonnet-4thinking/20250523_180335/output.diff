
index 1e234a3f7..f74ec9620 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmpznpm2exv_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmp9xri1e7q_actual.txt	
@@ -197,7 +197,7 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
 #[test]
 fn sparse_vector_index_consistent_with_storage() {
     let stopped = AtomicBool::new(false);
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_ram_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
@@ -281,7 +281,7 @@ fn sparse_vector_index_load_missing_mmap() {
 #[test]
 fn sparse_vector_index_ram_deleted_points_search() {
     let top = 10;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -358,7 +358,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
 
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -450,7 +450,7 @@ fn sparse_vector_index_ram_filtered_search() {
 
 #[test]
 fn sparse_vector_index_plain_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     // setup index
@@ -526,7 +526,7 @@ fn sparse_vector_index_plain_search() {
 
 #[test]
 fn handling_empty_sparse_vectors() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_index: SparseVectorIndex<InvertedIndexCompressedImmutableRam<f32>> =
@@ -578,7 +578,7 @@ fn sparse_vector_index_persistence_test() {
     let dim = 8;
     let num_vectors: u64 = 5_000;
     let top = 3;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
 
@@ -735,7 +735,7 @@ fn sparse_vector_index_files() {
 fn check_sparse_vector_index_files<I: InvertedIndex>() {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let index = fixture_sparse_index::<I, _>(
-        &mut StdRng::seed_from_u64(42),
+        &mut StdRng::seed_from_u64(43),
         1,
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
