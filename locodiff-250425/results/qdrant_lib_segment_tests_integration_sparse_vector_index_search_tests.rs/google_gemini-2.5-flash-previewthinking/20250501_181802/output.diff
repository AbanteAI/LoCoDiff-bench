
index 1e234a3f..ceac19d2 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmpe01oyucs_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpv0u42afb_actual.txt	
@@ -2,43 +2,46 @@ use std::cmp::max;
 use std::collections::HashMap;
 use std::fs::remove_file;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::{PointOffsetType, TelemetryDetail};
 use io::storage_version::VERSION_FILE;
 use itertools::Itertools;
-use rand::SeedableRng;
 use rand::rngs::StdRng;
+use rand::SeedableRng;
 use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::fixture_for_all_indices;
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
-use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
+use segment::index::sparse_index::sparse_index_config::{
+    SparseIndexConfig, SparseIndexType, VectorStorageDatatype,
+};
 use segment::index::sparse_index::sparse_vector_index::{
     SparseVectorIndex, SparseVectorIndexOpenArgs,
 };
 use segment::index::{PayloadIndex, VectorIndex, VectorIndexEnum};
 use segment::json_path::JsonPath;
+use segment::payload_json;
 use segment::segment::Segment;
 use segment::segment_constructor::{build_segment, load_segment};
 use segment::types::PayloadFieldSchema::FieldType;
 use segment::types::PayloadSchemaType::Keyword;
 use segment::types::{
-    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, ScoredPoint,
+    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, Payload, ScoredPoint,
     SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName,
-    VectorStorageDatatype,
 };
 use segment::vector_storage::VectorStorage;
-use segment::{fixture_for_all_indices, payload_json};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
-use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
 use sparse::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
 use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
@@ -59,6 +62,7 @@ const SPARSE_VECTOR_NAME: &VectorName = "sparse_vector";
 
 /// Expects the filter to match ALL points in order to compare the results with/without filter
 fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize) {
+    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
@@ -69,6 +73,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
         MAX_SPARSE_DIM,
         full_scan_threshold,
         data_dir.path(),
+        &stopped,
     );
 
     // random query vectors
@@ -92,13 +97,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
         let query_vector: QueryVector = query.clone().into();
         // with filter
         let index_results_filter = sparse_vector_index
-            .search(
-                &[&query_vector],
-                Some(&filter),
-                top,
-                None,
-                &Default::default(),
-            )
+            .search(&[&query_vector], Some(&filter), top, None, &Default::default())
             .unwrap();
 
         // without filter
@@ -106,22 +105,18 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
             .search(&[&query_vector], None, top, None, &Default::default())
             .unwrap();
 
-        assert_eq!(index_results_filter.len(), index_results_no_filter.len());
+        assert_eq!(
+            index_results_filter.len(),
+            index_results_no_filter.len(),
+            "query = {query:#?}, filter_result = {index_results_filter:#?} no_filter_result = {index_results_no_filter:#?}",
+        );
 
-        for (filter_result, no_filter_result) in index_results_filter
-            .iter()
-            .zip(index_results_no_filter.iter())
-        {
-            assert_eq!(
-                filter_result.len(),
-                no_filter_result.len(),
-                "query = {query:#?}, filter_result = {filter_result:#?} no_filter_result = {no_filter_result:#?}",
-            );
-            // skip zero scores because index skips non-overlapping points, but plain search does not
-            for (filter_result, no_filter_result) in filter_result
+        if !index_results_filter.is_empty() {
+            assert_eq!(index_results_filter.len(), top);
+            // compares results with and without filters
+            for (filter_result, no_filter_result) in index_results_filter
                 .iter()
-                .filter(|s| s.score != 0.0)
-                .zip(no_filter_result.iter().filter(|s| s.score != 0.0))
+                .zip(index_results_no_filter.iter())
             {
                 if filter_result.idx != no_filter_result.idx {
                     // we do not break ties when identical scores
@@ -206,6 +201,7 @@ fn sparse_vector_index_consistent_with_storage() {
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
         data_dir.path(),
+        &stopped,
     );
 
     // check consistency with underlying RAM inverted index
@@ -272,6 +268,7 @@ fn sparse_vector_index_load_missing_mmap() {
             [].iter().cloned(),
             10_000,
             SparseIndexType::Mmap,
+            &AtomicBool::new(false),
         );
     // absent configuration file for mmap are ignored
     // a new index is created
@@ -280,6 +277,7 @@ fn sparse_vector_index_load_missing_mmap() {
 
 #[test]
 fn sparse_vector_index_ram_deleted_points_search() {
+    let stopped = AtomicBool::new(false);
     let top = 10;
     let mut rnd = StdRng::seed_from_u64(42);
 
@@ -290,6 +288,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
         (0..NUM_VECTORS).map(|_| random_sparse_vector(&mut rnd, MAX_SPARSE_DIM)),
         LOW_FULL_SCAN_THRESHOLD,
         SparseIndexType::MutableRam,
+        &stopped,
     )
     .unwrap();
 
@@ -358,6 +357,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
 
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
+    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
@@ -369,6 +369,7 @@ fn sparse_vector_index_ram_filtered_search() {
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
         data_dir.path(),
+        &stopped,
     );
 
     // query index by payload
@@ -382,13 +383,7 @@ fn sparse_vector_index_ram_filtered_search() {
     // query all sparse dimension to get all points
     let query_vector: QueryVector = random_full_sparse_vector(&mut rnd, MAX_SPARSE_DIM).into();
     let before_result = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
     assert_eq!(before_result.len(), 1);
     assert_eq!(before_result[0].len(), 0);
@@ -450,6 +445,7 @@ fn sparse_vector_index_ram_filtered_search() {
 
 #[test]
 fn sparse_vector_index_plain_search() {
+    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
@@ -460,6 +456,7 @@ fn sparse_vector_index_plain_search() {
         MAX_SPARSE_DIM,
         LARGE_FULL_SCAN_THRESHOLD,
         data_dir.path(),
+        &stopped,
     );
 
     // query index by payload
@@ -472,16 +469,8 @@ fn sparse_vector_index_plain_search() {
 
     // query all sparse dimension to get all points
     let query_vector: QueryVector = random_full_sparse_vector(&mut rnd, MAX_SPARSE_DIM).into();
-
-    // empty when searching payload index directly
     let before_plain_results = sparse_vector_index
-        .search(
-            &[&query_vector],
-            Some(&filter),
-            10,
-            None,
-            &Default::default(),
-        )
+        .search(&[&query_vector], Some(&filter), 10, None, &Default::default())
         .unwrap();
 
     assert_eq!(before_plain_results.len(), 1);
@@ -526,6 +515,7 @@ fn sparse_vector_index_plain_search() {
 
 #[test]
 fn handling_empty_sparse_vectors() {
+    let stopped = AtomicBool::new(false);
     let mut rnd = StdRng::seed_from_u64(42);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
@@ -535,6 +525,7 @@ fn handling_empty_sparse_vectors() {
             (0..NUM_VECTORS).map(|_| SparseVector::default()),
             DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
             SparseIndexType::ImmutableRam,
+            &stopped,
         )
         .unwrap();
     let mut borrowed_storage = sparse_vector_index.vector_storage().borrow_mut();
@@ -733,6 +724,7 @@ fn sparse_vector_index_files() {
 }
 
 fn check_sparse_vector_index_files<I: InvertedIndex>() {
+    let stopped = AtomicBool::new(false);
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let index = fixture_sparse_index::<I, _>(
         &mut StdRng::seed_from_u64(42),
@@ -740,6 +732,7 @@ fn check_sparse_vector_index_files<I: InvertedIndex>() {
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
         data_dir.path(),
+        &stopped,
     );
 
     let files = index.files();
@@ -785,7 +778,7 @@ fn sparse_vector_test_large_index() {
         .unwrap();
 
     let borrowed_vector_index = segment.vector_data[SPARSE_VECTOR_NAME]
-        .vector_index
+        .vector_index()
         .borrow();
     match &*borrowed_vector_index {
         VectorIndexEnum::SparseRam(sparse_vector_index) => {
