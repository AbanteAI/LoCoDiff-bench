
index 1e234a3f..ea7494fe 100644
--- a/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected):tmp/tmpd695c_fl_expected.txt	
+++ b/qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual):tmp/tmpx2vw9rcg_actual.txt	
@@ -13,6 +13,7 @@ use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::fixture_for_all_indices;
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
 use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
@@ -31,7 +32,7 @@ use segment::types::{
     VectorStorageDatatype,
 };
 use segment::vector_storage::VectorStorage;
-use segment::{fixture_for_all_indices, payload_json};
+use segment::{payload_json, FixtureParameters};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
@@ -69,6 +70,7 @@ fn compare_sparse_vectors_search_with_without_filter(full_scan_threshold: usize)
         MAX_SPARSE_DIM,
         full_scan_threshold,
         data_dir.path(),
+        &FixtureParameters::default(),
     );
 
     // random query vectors
@@ -197,16 +199,18 @@ fn check_index_storage_consistency<T: InvertedIndex>(sparse_vector_index: &Spars
 #[test]
 fn sparse_vector_index_consistent_with_storage() {
     let stopped = AtomicBool::new(false);
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
-    let sparse_vector_ram_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LOW_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_ram_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LOW_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+            &FixtureParameters::default(),
+        );
 
     // check consistency with underlying RAM inverted index
     check_index_storage_consistency(&sparse_vector_ram_index);
@@ -272,6 +276,7 @@ fn sparse_vector_index_load_missing_mmap() {
             [].iter().cloned(),
             10_000,
             SparseIndexType::Mmap,
+            &FixtureParameters::default(),
         );
     // absent configuration file for mmap are ignored
     // a new index is created
@@ -281,7 +286,7 @@ fn sparse_vector_index_load_missing_mmap() {
 #[test]
 fn sparse_vector_index_ram_deleted_points_search() {
     let top = 10;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
@@ -290,6 +295,7 @@ fn sparse_vector_index_ram_deleted_points_search() {
         (0..NUM_VECTORS).map(|_| random_sparse_vector(&mut rnd, MAX_SPARSE_DIM)),
         LOW_FULL_SCAN_THRESHOLD,
         SparseIndexType::MutableRam,
+        &FixtureParameters::default(),
     )
     .unwrap();
 
@@ -358,18 +364,20 @@ fn sparse_vector_index_ram_deleted_points_search() {
 
 #[test]
 fn sparse_vector_index_ram_filtered_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
 
     // setup index
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LOW_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LOW_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+            &FixtureParameters::default(),
+        );
 
     // query index by payload
     let field_name = "field";
@@ -450,17 +458,19 @@ fn sparse_vector_index_ram_filtered_search() {
 
 #[test]
 fn sparse_vector_index_plain_search() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     // setup index
-    let sparse_vector_index = fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
-        &mut rnd,
-        NUM_VECTORS,
-        MAX_SPARSE_DIM,
-        LARGE_FULL_SCAN_THRESHOLD,
-        data_dir.path(),
-    );
+    let sparse_vector_index =
+        fixture_sparse_index::<InvertedIndexCompressedImmutableRam<f32>, _>(
+            &mut rnd,
+            NUM_VECTORS,
+            MAX_SPARSE_DIM,
+            LARGE_FULL_SCAN_THRESHOLD,
+            data_dir.path(),
+            &FixtureParameters::default(),
+        );
 
     // query index by payload
     let field_name = "field";
@@ -526,7 +536,7 @@ fn sparse_vector_index_plain_search() {
 
 #[test]
 fn handling_empty_sparse_vectors() {
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let sparse_vector_index: SparseVectorIndex<InvertedIndexCompressedImmutableRam<f32>> =
@@ -535,6 +545,7 @@ fn handling_empty_sparse_vectors() {
             (0..NUM_VECTORS).map(|_| SparseVector::default()),
             DEFAULT_SPARSE_FULL_SCAN_THRESHOLD,
             SparseIndexType::ImmutableRam,
+            &FixtureParameters::default(),
         )
         .unwrap();
     let mut borrowed_storage = sparse_vector_index.vector_storage().borrow_mut();
@@ -578,7 +589,7 @@ fn sparse_vector_index_persistence_test() {
     let dim = 8;
     let num_vectors: u64 = 5_000;
     let top = 3;
-    let mut rnd = StdRng::seed_from_u64(42);
+    let mut rnd = StdRng::seed_from_u64(43);
 
     let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
 
@@ -663,6 +674,7 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
     search_result: &[ScoredPoint],
     query_vector: &QueryVector,
     top: usize,
+    fixture_params: &FixtureParameters,
 ) {
     let stopped = AtomicBool::new(false);
 
@@ -686,6 +698,7 @@ fn check_persistence<TInvertedIndex: InvertedIndex>(
             path: inverted_index_dir.path(),
             stopped: &stopped,
             tick_progress: || (),
+            fixture_params,
         })
         .unwrap()
     };
@@ -732,14 +745,15 @@ fn sparse_vector_index_files() {
     fixture_for_all_indices!(check_sparse_vector_index_files::<_>());
 }
 
-fn check_sparse_vector_index_files<I: InvertedIndex>() {
+fn check_sparse_vector_index_files<I: InvertedIndex>(fixture_params: &FixtureParameters) {
     let data_dir = Builder::new().prefix("data_dir").tempdir().unwrap();
     let index = fixture_sparse_index::<I, _>(
-        &mut StdRng::seed_from_u64(42),
+        &mut StdRng::seed_from_u64(43),
         1,
         MAX_SPARSE_DIM,
         LOW_FULL_SCAN_THRESHOLD,
         data_dir.path(),
+        fixture_params,
     );
 
     let files = index.files();
