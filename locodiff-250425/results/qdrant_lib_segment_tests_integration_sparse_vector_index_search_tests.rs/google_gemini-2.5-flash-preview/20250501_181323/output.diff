--- qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_tests_integration_sparse_vector_index_search_tests.rs_extracted.txt (actual)@@ -1,21 +1,26 @@ use std::cmp::max;
 use std::collections::HashMap;
 use std::fs::remove_file;
-use std::sync::atomic::AtomicBool;
+use std::sync::atomic::{AtomicBool, Ordering};
+use std::sync::Arc;
 
 use common::counter::hardware_counter::HardwareCounterCell;
 use common::types::{PointOffsetType, TelemetryDetail};
 use io::storage_version::VERSION_FILE;
 use itertools::Itertools;
-use rand::SeedableRng;
 use rand::rngs::StdRng;
+use rand::{Rng, SeedableRng};
 use segment::common::operation_error::OperationResult;
 use segment::data_types::named_vectors::NamedVectors;
 use segment::data_types::vectors::{QueryVector, VectorInternal};
 use segment::entry::entry_point::SegmentEntry;
+use segment::fixture_for_all_indices;
 use segment::fixtures::payload_fixtures::STR_KEY;
 use segment::fixtures::sparse_fixtures::{fixture_sparse_index, fixture_sparse_index_from_iter};
-use segment::index::sparse_index::sparse_index_config::{SparseIndexConfig, SparseIndexType};
+use segment::index::hnsw_index::num_rayon_threads;
+use segment::index::sparse_index::sparse_index_config::{
+    SparseIndexConfig, SparseIndexType, SparseVectorIndexDatatype,
+};
 use segment::index::sparse_index::sparse_vector_index::{
     SparseVectorIndex, SparseVectorIndexOpenArgs,
 };
@@ -26,19 +31,19 @@ use segment::types::PayloadFieldSchema::FieldType;
 use segment::types::PayloadSchemaType::Keyword;
 use segment::types::{
-    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, ScoredPoint,
+    Condition, DEFAULT_SPARSE_FULL_SCAN_THRESHOLD, FieldCondition, Filter, Payload, ScoredPoint,
     SegmentConfig, SeqNumberType, SparseVectorDataConfig, SparseVectorStorageType, VectorName,
     VectorStorageDatatype,
 };
 use segment::vector_storage::VectorStorage;
-use segment::{fixture_for_all_indices, payload_json};
+use segment::{payload_json};
 use sparse::common::sparse_vector::SparseVector;
 use sparse::common::sparse_vector_fixture::{random_full_sparse_vector, random_sparse_vector};
 use sparse::common::types::DimId;
-use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::inverted_index::inverted_index_compressed_immutable_ram::InvertedIndexCompressedImmutableRam;
 use sparse::index::inverted_index::inverted_index_compressed_mmap::InvertedIndexCompressedMmap;
 use sparse::index::inverted_index::inverted_index_ram::InvertedIndexRam;
+use sparse::index::inverted_index::InvertedIndex;
 use sparse::index::posting_list_common::PostingListIter as _;
 use tempfile::Builder;
 
@@ -85,6 +90,7 @@ 
     // compares results with and without filters
     // expects the filter to have no effect on the results because the filter matches everything
+    let stopped = AtomicBool::new(false);
     for query in query_vectors {
         let maximum_number_of_results = sparse_vector_index.max_result_count(&query);
         // get all results minus 10 to force a bit of pruning
@@ -324,10 +330,11 @@         .borrow_mut()
         .external_id(deleted_idx)
         .unwrap();
+    let hw_counter = HardwareCounterCell::new();
     sparse_vector_index
         .id_tracker()
         .borrow_mut()
-        .drop(deleted_external)
+        .drop(deleted_external, deleted_idx, &hw_counter)
         .unwrap();
 
     assert!(
@@ -702,7 +709,7 @@         {
             let id_1 = segment
                 .id_tracker
-                .borrow_mut()
+                .borrow()
                 .internal_id(search_1.id)
                 .unwrap();
             assert_eq!(id_1, search_2.idx);
@@ -795,7 +802,14 @@                     .remap_index(DimId::MAX)
                     .is_some(),
             );
-            assert_eq!(sparse_vector_index.inverted_index().max_index().unwrap(), 0);
+            let hw_counter = HardwareCounterCell::disposable();
+            assert_eq!(
+                sparse_vector_index
+                    .inverted_index()
+                    .max_index(&hw_counter)
+                    .unwrap(),
+                0
+            );
         }
         _ => panic!("unexpected vector index type"),
     }
