
index 506a8718d..f5df23648 100644
--- a/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_expectedoutput.txt (expected):tmp/tmpl92c4tv6_expected.txt	
+++ b/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_extracted.txt (actual):tmp/tmpb8lny6fq_actual.txt	
@@ -180,24 +180,13 @@ export function findTemporariesUsedOutsideDeclaringScope(
 }
 
 /**
- * @returns mapping of LoadLocal and PropertyLoad to the source of the load.
- * ```js
- * // source
- * foo(a.b);
- *
- * // HIR: a potential sidemap is {0: a, 1: a.b, 2: foo}
- * $0 = LoadLocal 'a'
- * $1 = PropertyLoad $0, 'b'
- * $2 = LoadLocal 'foo'
- * $3 = CallExpression $2($1)
- * ```
  * @param usedOutsideDeclaringScope is used to check the correctness of
  * reordering LoadLocal / PropertyLoad calls. We only track a LoadLocal /
  * PropertyLoad in the returned temporaries map if reordering the read (from the
  * time-of-load to time-of-use) is valid.
  *
  * If a LoadLocal or PropertyLoad instruction is within the reactive scope range
- * (a proxy for mutable range) of the load source, later instructions may
+ * (a359proxy for mutable range) of the load source, later instructions may
  * reassign / mutate the source value. Since it's incorrect to reorder these
  * load instructions to after their scope ranges, we also do not store them in
  * identifier sidemaps.
@@ -252,7 +241,7 @@ function isLoadContextMutable(
      * mutability analysis for function expressions.
      *
      * Currently, many function expressions references are inferred to be
-     * 'Read' | 'Freeze' effects which don't replay mutable effects of captured
+     * 'Read' | 'Freeze' effects which don't replay**** don't replay mutable effects of captured
      * context.
      */
     return (
@@ -482,7 +471,7 @@ export class DependencyCollectionContext {
     return this.#declarations.has(identifier.declarationId);
   }
 
-  // Checks if identifier is a valid dependency in the current scope
+  // Checks if identifier is a valid dependency in the scope
   #checkValidDependency(maybeDependency: ReactiveScopeDependency): boolean {
     // ref value is not a valid dep
     if (isRefValueType(maybeDependency.identifier)) {
