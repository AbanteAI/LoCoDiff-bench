--- react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_expectedoutput.txt (expected)+++ react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_extracted.txt (actual)@@ -31,6 +31,7 @@   ObjectMethod,
   PropertyLiteral,
   convertHoistedLValueKind,
+  PrunedScope,
 } from './HIR';
 import {
   collectHoistablePropertyLoads,
@@ -396,10 +397,10 @@ 
   #temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>;
   #temporariesUsedOutsideScope: ReadonlySet<DeclarationId>;
-  #processedInstrsInOptional: ReadonlySet<Instruction | Terminal>;
+  #processedInstrsInOptional: ReadonlySet<Instruction | Terminal | PrunedScope>;
 
   /**
-   * Tracks the traversal state. See Context.declare for explanation of why this
+   * Tracks the traversal state. See DependencyCollectionContext.declare for explanation of why this
    * is needed.
    */
   #innerFnContext: {outerInstrId: InstructionId} | null = null;
@@ -407,7 +408,7 @@   constructor(
     temporariesUsedOutsideScope: ReadonlySet<DeclarationId>,
     temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>,
-    processedInstrsInOptional: ReadonlySet<Instruction | Terminal>,
+    processedInstrsInOptional: ReadonlySet<Instruction | Terminal | PrunedScope>,
   ) {
     this.#temporariesUsedOutsideScope = temporariesUsedOutsideScope;
     this.#temporaries = temporaries;
@@ -563,6 +564,7 @@     /*
      * if originalDeclaration is undefined here, then this is not a local var
      * (all decls e.g. `let x;` should be initialized in BuildHIR)
+     * Note: this may also be from an inner fn whose declaration is not tracked.
      */
     const originalDeclaration = this.#declarations.get(
       maybeDependency.identifier.declarationId,
@@ -641,13 +643,25 @@   isDeferredDependency(
     instr:
       | {kind: HIRValue.Instruction; value: Instruction}
-      | {kind: HIRValue.Terminal; value: Terminal},
+      | {kind: HIRValue.Terminal; value: Terminal | PrunedScope},
   ): boolean {
-    return (
-      this.#processedInstrsInOptional.has(instr.value) ||
-      (instr.kind === HIRValue.Instruction &&
-        this.#temporaries.has(instr.value.lvalue.identifier.id))
-    );
+    if (this.#processedInstrsInOptional.has(instr.value)) {
+      return true;
+    }
+    if (
+      instr.kind === HIRValue.Instruction &&
+      this.#temporaries.has(instr.value.lvalue.identifier.id)
+    ) {
+      /**
+       * Temporaries (expressions that are immediately used and can be inlined
+       * before code generation) are implicitly dependencies of the scope that
+       * consumes them. For example, `$1 = PropertyLoad $0.y; $2 = Call $1(...)`
+       * the dependency is `$0.y` not `$1`. `$1` is a temporary.
+       */
+      return true;
+    }
+
+    return false;
   }
 }
 enum HIRValue {
@@ -739,7 +753,7 @@   fn: HIRFunction,
   usedOutsideDeclaringScope: ReadonlySet<DeclarationId>,
   temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>,
-  processedInstrsInOptional: ReadonlySet<Instruction | Terminal>,
+  processedInstrsInOptional: ReadonlySet<Instruction | Terminal | PrunedScope>,
 ): Map<ReactiveScope, Array<ReactiveScopeDependency>> {
   const context = new DependencyCollectionContext(
     usedOutsideDeclaringScope,
