
index 506a8718..fa6b90fd 100644
--- a/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_expectedoutput.txt (expected):tmp/tmphvygsw9__expected.txt	
+++ b/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_extracted.txt (actual):tmp/tmpia8lo98k_actual.txt	
@@ -36,6 +36,7 @@ import {
   collectHoistablePropertyLoads,
   keyByScopeId,
 } from './CollectHoistablePropertyLoads';
+import {collectOptionalChainSidemap} from './CollectOptionalChainDependencies';
 import {
   ScopeBlockTraversal,
   eachInstructionOperand,
@@ -47,12 +48,14 @@ import {Stack, empty} from '../Utils/Stack';
 import {CompilerError} from '../CompilerError';
 import {Iterable_some} from '../Utils/utils';
 import {ReactiveScopeDependencyTreeHIR} from './DeriveMinimalDependenciesHIR';
-import {collectOptionalChainSidemap} from './CollectOptionalChainDependencies';
 
 export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
   const usedOutsideDeclaringScope =
     findTemporariesUsedOutsideDeclaringScope(fn);
-  const temporaries = collectTemporariesSidemap(fn, usedOutsideDeclaringScope);
+  const temporaries = collectTemporariesSidemap(
+    fn,
+    usedOutsideDeclaringScope,
+  );
   const {
     temporariesReadInOptional,
     processedInstrsInOptional,
@@ -71,36 +74,25 @@ export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
     processedInstrsInOptional,
   );
 
-  /**
-   * Derive the minimal set of hoistable dependencies for each scope.
-   */
   for (const [scope, deps] of scopeDeps) {
     if (deps.length === 0) {
       continue;
     }
 
-    /**
-     * Step 1: Find hoistable accesses, given the basic block in which the scope
-     * begins.
-     */
     const hoistables = hoistablePropertyLoads.get(scope.id);
     CompilerError.invariant(hoistables != null, {
       reason: '[PropagateScopeDependencies] Scope not found in tracked blocks',
       loc: GeneratedSource,
     });
-    /**
-     * Step 2: Calculate hoistable dependencies.
-     */
+
     const tree = new ReactiveScopeDependencyTreeHIR(
       [...hoistables.assumedNonNullObjects].map(o => o.fullPath),
     );
+
     for (const dep of deps) {
       tree.addDependency({...dep});
     }
 
-    /**
-     * Step 3: Reduce dependencies to a minimal set.
-     */
     const candidates = tree.deriveMinimalDependencies();
     for (const candidateDep of candidates) {
       if (
@@ -111,8 +103,9 @@ export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
               candidateDep.identifier.declarationId &&
             areEqualPaths(existingDep.path, candidateDep.path),
         )
-      )
+      ) {
         scope.dependencies.add(candidateDep);
+      }
     }
   }
 }
@@ -120,10 +113,6 @@ export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
 export function findTemporariesUsedOutsideDeclaringScope(
   fn: HIRFunction,
 ): ReadonlySet<DeclarationId> {
-  /*
-   * tracks all relevant LoadLocal and PropertyLoad lvalues
-   * and the scope where they are defined
-   */
   const declarations = new Map<DeclarationId, ScopeId>();
   const prunedScopes = new Set<ScopeId>();
   const scopeTraversal = new ScopeBlockTraversal();
@@ -136,7 +125,6 @@ export function findTemporariesUsedOutsideDeclaringScope(
       !scopeTraversal.isScopeActive(declaringScope) &&
       !prunedScopes.has(declaringScope)
     ) {
-      // Declaring scope is not active === used outside declaring scope
       usedOutsideDeclaringScope.add(place.identifier.declarationId);
     }
   }
@@ -179,60 +167,11 @@ export function findTemporariesUsedOutsideDeclaringScope(
   return usedOutsideDeclaringScope;
 }
 
-/**
- * @returns mapping of LoadLocal and PropertyLoad to the source of the load.
- * ```js
- * // source
- * foo(a.b);
- *
- * // HIR: a potential sidemap is {0: a, 1: a.b, 2: foo}
- * $0 = LoadLocal 'a'
- * $1 = PropertyLoad $0, 'b'
- * $2 = LoadLocal 'foo'
- * $3 = CallExpression $2($1)
- * ```
- * @param usedOutsideDeclaringScope is used to check the correctness of
- * reordering LoadLocal / PropertyLoad calls. We only track a LoadLocal /
- * PropertyLoad in the returned temporaries map if reordering the read (from the
- * time-of-load to time-of-use) is valid.
- *
- * If a LoadLocal or PropertyLoad instruction is within the reactive scope range
- * (a proxy for mutable range) of the load source, later instructions may
- * reassign / mutate the source value. Since it's incorrect to reorder these
- * load instructions to after their scope ranges, we also do not store them in
- * identifier sidemaps.
- *
- * Take this example (from fixture
- * `evaluation-order-mutate-call-after-dependency-load`)
- * ```js
- * // source
- * function useFoo(arg) {
- *   const arr = [1, 2, 3, ...arg];
- *   return [
- *     arr.length,
- *     arr.push(0)
- *   ];
- * }
- *
- * // IR pseudocode
- * scope @0 {
- *   $0 = arr = ArrayExpression [1, 2, 3, ...arg]
- *   $1 = arr.length
- *   $2 = arr.push(0)
- * }
- * scope @1 {
- *   $3 = ArrayExpression [$1, $2]
- * }
- * ```
- * Here, it's invalid for scope@1 to take `arr.length` as a dependency instead
- * of $1, as the evaluation of `arr.length` changes between instructions $1 and
- * $3. We do not track $1 -> arr.length in this case.
- */
 export function collectTemporariesSidemap(
   fn: HIRFunction,
   usedOutsideDeclaringScope: ReadonlySet<DeclarationId>,
 ): ReadonlyMap<IdentifierId, ReactiveScopeDependency> {
-  const temporaries = new Map();
+  const temporaries = new Map<IdentifierId, ReactiveScopeDependency>();
   collectTemporariesSidemapImpl(
     fn,
     usedOutsideDeclaringScope,
@@ -242,33 +181,6 @@ export function collectTemporariesSidemap(
   return temporaries;
 }
 
-function isLoadContextMutable(
-  instrValue: InstructionValue,
-  id: InstructionId,
-): instrValue is LoadContext {
-  if (instrValue.kind === 'LoadContext') {
-    /**
-     * Not all context variables currently have scopes due to limitations of
-     * mutability analysis for function expressions.
-     *
-     * Currently, many function expressions references are inferred to be
-     * 'Read' | 'Freeze' effects which don't replay mutable effects of captured
-     * context.
-     */
-    return (
-      instrValue.place.identifier.scope != null &&
-      id >= instrValue.place.identifier.scope.range.end
-    );
-  }
-  return false;
-}
-/**
- * Recursive collect a sidemap of all `LoadLocal` and `PropertyLoads` with a
- * function and all nested functions.
- *
- * Note that IdentifierIds are currently unique, so we can use a single
- * Map<IdentifierId, ...> across all nested functions.
- */
 function collectTemporariesSidemapImpl(
   fn: HIRFunction,
   usedOutsideDeclaringScope: ReadonlySet<DeclarationId>,
@@ -288,12 +200,6 @@ function collectTemporariesSidemapImpl(
           innerFnContext == null ||
           temporaries.has(value.object.identifier.id)
         ) {
-          /**
-           * All dependencies of a inner / nested function must have a base
-           * identifier from the outermost component / hook. This is because the
-           * compiler cannot break an inner function into multiple granular
-           * scopes.
-           */
           const property = getProperty(
             value.object,
             value.property,
@@ -340,31 +246,7 @@ function getProperty(
   optional: boolean,
   temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>,
 ): ReactiveScopeDependency {
-  /*
-   * (1) Get the base object either from the temporary sidemap (e.g. a LoadLocal)
-   * or a deep copy of an existing property dependency.
-   *  Example 1:
-   *    $0 = LoadLocal x
-   *    $1 = PropertyLoad $0.y
-   *  getProperty($0, ...) -> resolvedObject = x, resolvedDependency = null
-   *
-   *  Example 2:
-   *    $0 = LoadLocal x
-   *    $1 = PropertyLoad $0.y
-   *    $2 = PropertyLoad $1.z
-   *  getProperty($1, ...) -> resolvedObject = null, resolvedDependency = x.y
-   *
-   *  Example 3:
-   *    $0 = Call(...)
-   *    $1 = PropertyLoad $0.y
-   *  getProperty($0, ...) -> resolvedObject = null, resolvedDependency = null
-   */
   const resolvedDependency = temporaries.get(object.identifier.id);
-
-  /**
-   * (2) Push the last PropertyLoad
-   * TODO(mofeiZ): understand optional chaining
-   */
   let property: ReactiveScopeDependency;
   if (resolvedDependency == null) {
     property = {
@@ -380,6 +262,19 @@ function getProperty(
   return property;
 }
 
+function isLoadContextMutable(
+  instrValue: InstructionValue,
+  id: InstructionId,
+): instrValue is LoadContext {
+  if (instrValue.kind === 'LoadContext') {
+    return (
+      instrValue.place.identifier.scope != null &&
+      id >= instrValue.place.identifier.scope.range.end
+    );
+  }
+  return false;
+}
+
 type Decl = {
   id: InstructionId;
   scope: Stack<ReactiveScope>;
@@ -388,20 +283,12 @@ type Decl = {
 export class DependencyCollectionContext {
   #declarations: Map<DeclarationId, Decl> = new Map();
   #reassignments: Map<Identifier, Decl> = new Map();
-
   #scopes: Stack<ReactiveScope> = empty();
-  // Reactive dependencies used in the current reactive scope.
   #dependencies: Stack<Array<ReactiveScopeDependency>> = empty();
   deps: Map<ReactiveScope, Array<ReactiveScopeDependency>> = new Map();
-
   #temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>;
   #temporariesUsedOutsideScope: ReadonlySet<DeclarationId>;
   #processedInstrsInOptional: ReadonlySet<Instruction | Terminal>;
-
-  /**
-   * Tracks the traversal state. See Context.declare for explanation of why this
-   * is needed.
-   */
   #innerFnContext: {outerInstrId: InstructionId} | null = null;
 
   constructor(
@@ -415,29 +302,20 @@ export class DependencyCollectionContext {
   }
 
   enterScope(scope: ReactiveScope): void {
-    // Set context for new scope
     this.#dependencies = this.#dependencies.push([]);
     this.#scopes = this.#scopes.push(scope);
   }
 
   exitScope(scope: ReactiveScope, pruned: boolean): void {
-    // Save dependencies we collected from the exiting scope
     const scopedDependencies = this.#dependencies.value;
     CompilerError.invariant(scopedDependencies != null, {
       reason: '[PropagateScopeDeps]: Unexpected scope mismatch',
       loc: scope.loc,
     });
 
-    // Restore context of previous scope
     this.#scopes = this.#scopes.pop();
     this.#dependencies = this.#dependencies.pop();
 
-    /*
-     * Collect dependencies we recorded for the exiting scope and propagate
-     * them upward using the same rules as normal dependency collection.
-     * Child scopes may have dependencies on values created within the outer
-     * scope, which necessarily cannot be dependencies of the outer scope.
-     */
     for (const dep of scopedDependencies) {
       if (this.#checkValidDependency(dep)) {
         this.#dependencies.value?.push(dep);
@@ -455,22 +333,6 @@ export class DependencyCollectionContext {
     );
   }
 
-  /*
-   * Records where a value was declared, and optionally, the scope where the
-   * value originated from. This is later used to determine if a dependency
-   * should be added to a scope; if the current scope we are visiting is the
-   * same scope where the value originates, it can't be a dependency on itself.
-   *
-   * Note that we do not track declarations or reassignments within inner
-   * functions for the following reasons:
-   *   - inner functions cannot be split by scope boundaries and are guaranteed
-   *     to consume their own declarations
-   *   - reassignments within inner functions are tracked as context variables,
-   *     which already have extended mutable ranges to account for reassignments
-   *   - *most importantly* it's currently simply incorrect to compare inner
-   *     function instruction ids (tracked by `decl`) with outer ones (as stored
-   *     by root identifier mutable ranges).
-   */
   declare(identifier: Identifier, decl: Decl): void {
     if (this.#innerFnContext != null) return;
     if (!this.#declarations.has(identifier.declarationId)) {
@@ -478,30 +340,25 @@ export class DependencyCollectionContext {
     }
     this.#reassignments.set(identifier, decl);
   }
+
   hasDeclared(identifier: Identifier): boolean {
     return this.#declarations.has(identifier.declarationId);
   }
 
-  // Checks if identifier is a valid dependency in the current scope
   #checkValidDependency(maybeDependency: ReactiveScopeDependency): boolean {
-    // ref value is not a valid dep
     if (isRefValueType(maybeDependency.identifier)) {
       return false;
     }
 
-    /*
-     * object methods are not deps because they will be codegen'ed back in to
-     * the object literal.
-     */
-    if (isObjectMethodType(maybeDependency.identifier)) {
-      return false;
+    if (isUseRefType(maybeDependency.identifier) &&
+        maybeDependency.path.at(0)?.property === 'current') {
+      maybeDependency = {
+        identifier: maybeDependency.identifier,
+        path: [],
+      };
     }
 
     const identifier = maybeDependency.identifier;
-    /*
-     * If this operand is used in a scope, has a dynamic value, and was defined
-     * before this scope, then its a dependency of the scope.
-     */
     const currentDeclaration =
       this.#reassignments.get(identifier) ??
       this.#declarations.get(identifier.declarationId);
@@ -525,10 +382,6 @@ export class DependencyCollectionContext {
   }
 
   visitOperand(place: Place): void {
-    /*
-     * if this operand is a temporary created for a property load, try to resolve it to
-     * the expanded Place. Fall back to using the operand as-is.
-     */
     this.visitDependency(
       this.#temporaries.get(place.identifier.id) ?? {
         identifier: place.identifier,
@@ -552,18 +405,6 @@ export class DependencyCollectionContext {
   }
 
   visitDependency(maybeDependency: ReactiveScopeDependency): void {
-    /*
-     * Any value used after its originally defining scope has concluded must be added as an
-     * output of its defining scope. Regardless of whether its a const or not,
-     * some later code needs access to the value. If the current
-     * scope we are visiting is the same scope where the value originates, it can't be a dependency
-     * on itself.
-     */
-
-    /*
-     * if originalDeclaration is undefined here, then this is not a local var
-     * (all decls e.g. `let x;` should be initialized in BuildHIR)
-     */
     const originalDeclaration = this.#declarations.get(
       maybeDependency.identifier.declarationId,
     );
@@ -589,25 +430,11 @@ export class DependencyCollectionContext {
       });
     }
 
-    // ref.current access is not a valid dep
-    if (
-      isUseRefType(maybeDependency.identifier) &&
-      maybeDependency.path.at(0)?.property === 'current'
-    ) {
-      maybeDependency = {
-        identifier: maybeDependency.identifier,
-        path: [],
-      };
-    }
     if (this.#checkValidDependency(maybeDependency)) {
       this.#dependencies.value!.push(maybeDependency);
     }
   }
 
-  /*
-   * Record a variable that is declared in some other scope and that is being reassigned in the
-   * current one as a {@link ReactiveScope.reassignments}
-   */
   visitReassignment(place: Place): void {
     const currentScope = this.currentScope.value;
     if (
@@ -622,6 +449,7 @@ export class DependencyCollectionContext {
       currentScope.reassignments.add(place.identifier);
     }
   }
+
   enterInnerFn<T>(
     innerFn: TInstruction<FunctionExpression> | TInstruction<ObjectMethod>,
     cb: () => T,
@@ -633,11 +461,6 @@ export class DependencyCollectionContext {
     return result;
   }
 
-  /**
-   * Skip dependencies that are subexpressions of other dependencies. e.g. if a
-   * dependency is tracked in the temporaries sidemap, it can be added at
-   * site-of-use
-   */
   isDeferredDependency(
     instr:
       | {kind: HIRValue.Instruction; value: Instruction}
@@ -650,6 +473,7 @@ export class DependencyCollectionContext {
     );
   }
 }
+
 enum HIRValue {
   Instruction = 1,
   Terminal,
@@ -676,21 +500,10 @@ export function handleInstruction(
     if (value.lvalue.kind === InstructionKind.Reassign) {
       context.visitReassignment(value.lvalue.place);
     }
-    context.declare(value.lvalue.place.identifier, {
-      id,
-      scope: context.currentScope,
-    });
-  } else if (value.kind === 'DeclareLocal' || value.kind === 'DeclareContext') {
-    /*
-     * Some variables may be declared and never initialized. We need to retain
-     * (and hoist) these declarations if they are included in a reactive scope.
-     * One approach is to simply add all `DeclareLocal`s as scope declarations.
-     *
-     * Context variables with hoisted declarations only become live after their
-     * first assignment. We only declare real DeclareLocal / DeclareContext
-     * instructions (not hoisted ones) to avoid generating dependencies on
-     * hoisted declarations.
-     */
+  } else if (
+    value.kind === 'DeclareLocal' ||
+    value.kind === 'DeclareContext'
+  ) {
     if (convertHoistedLValueKind(value.lvalue.kind) === null) {
       context.declare(value.lvalue.place.identifier, {
         id,
@@ -709,12 +522,6 @@ export function handleInstruction(
       });
     }
   } else if (value.kind === 'StoreContext') {
-    /**
-     * Some StoreContext variables have hoisted declarations. If we're storing
-     * to a context variable that hasn't yet been declared, the StoreContext is
-     * the declaration.
-     * (see corresponding logic in PruneHoistedContext)
-     */
     if (
       !context.hasDeclared(value.lvalue.place.identifier) ||
       value.lvalue.kind !== InstructionKind.Reassign
@@ -724,7 +531,6 @@ export function handleInstruction(
         scope: context.currentScope,
       });
     }
-
     for (const operand of eachInstructionValueOperand(value)) {
       context.visitOperand(operand);
     }
@@ -735,7 +541,7 @@ export function handleInstruction(
   }
 }
 
-function collectDependencies(
+export function collectDependencies(
   fn: HIRFunction,
   usedOutsideDeclaringScope: ReadonlySet<DeclarationId>,
   temporaries: ReadonlyMap<IdentifierId, ReactiveScopeDependency>,
@@ -772,15 +578,18 @@ function collectDependencies(
       } else if (scopeBlockInfo?.kind === 'end') {
         context.exitScope(scopeBlockInfo.scope, scopeBlockInfo.pruned);
       }
-      // Record referenced optional chains in phis
+
       for (const phi of block.phis) {
         for (const operand of phi.operands) {
-          const maybeOptionalChain = temporaries.get(operand[1].identifier.id);
+          const maybeOptionalChain = temporaries.get(
+            operand[1].identifier.id,
+          );
           if (maybeOptionalChain) {
             context.visitDependency(maybeOptionalChain);
           }
         }
       }
+
       for (const instr of block.instructions) {
         if (
           instr.value.kind === 'FunctionExpression' ||
@@ -790,18 +599,9 @@ function collectDependencies(
             id: instr.id,
             scope: context.currentScope,
           });
-          /**
-           * Recursively visit the inner function to extract dependencies there
-           */
-          const innerFn = instr.value.loweredFunc.func;
-          context.enterInnerFn(
-            instr as
-              | TInstruction<FunctionExpression>
-              | TInstruction<ObjectMethod>,
-            () => {
-              handleFunction(innerFn);
-            },
-          );
+          context.enterInnerFn(instr as any, () => {
+            handleFunction(instr.value.loweredFunc.func);
+          });
         } else {
           handleInstruction(instr, context);
         }
