
index 506a8718..08f80f66 100644
--- a/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_expectedoutput.txt (expected):tmp/tmpnukund5c_expected.txt	
+++ b/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_extracted.txt (actual):tmp/tmpj4bbn5gy_actual.txt	
@@ -179,55 +179,6 @@ export function findTemporariesUsedOutsideDeclaringScope(
   return usedOutsideDeclaringScope;
 }
 
-/**
- * @returns mapping of LoadLocal and PropertyLoad to the source of the load.
- * ```js
- * // source
- * foo(a.b);
- *
- * // HIR: a potential sidemap is {0: a, 1: a.b, 2: foo}
- * $0 = LoadLocal 'a'
- * $1 = PropertyLoad $0, 'b'
- * $2 = LoadLocal 'foo'
- * $3 = CallExpression $2($1)
- * ```
- * @param usedOutsideDeclaringScope is used to check the correctness of
- * reordering LoadLocal / PropertyLoad calls. We only track a LoadLocal /
- * PropertyLoad in the returned temporaries map if reordering the read (from the
- * time-of-load to time-of-use) is valid.
- *
- * If a LoadLocal or PropertyLoad instruction is within the reactive scope range
- * (a proxy for mutable range) of the load source, later instructions may
- * reassign / mutate the source value. Since it's incorrect to reorder these
- * load instructions to after their scope ranges, we also do not store them in
- * identifier sidemaps.
- *
- * Take this example (from fixture
- * `evaluation-order-mutate-call-after-dependency-load`)
- * ```js
- * // source
- * function useFoo(arg) {
- *   const arr = [1, 2, 3, ...arg];
- *   return [
- *     arr.length,
- *     arr.push(0)
- *   ];
- * }
- *
- * // IR pseudocode
- * scope @0 {
- *   $0 = arr = ArrayExpression [1, 2, 3, ...arg]
- *   $1 = arr.length
- *   $2 = arr.push(0)
- * }
- * scope @1 {
- *   $3 = ArrayExpression [$1, $2]
- * }
- * ```
- * Here, it's invalid for scope@1 to take `arr.length` as a dependency instead
- * of $1, as the evaluation of `arr.length` changes between instructions $1 and
- * $3. We do not track $1 -> arr.length in this case.
- */
 export function collectTemporariesSidemap(
   fn: HIRFunction,
   usedOutsideDeclaringScope: ReadonlySet<DeclarationId>,
@@ -262,6 +213,7 @@ function isLoadContextMutable(
   }
   return false;
 }
+
 /**
  * Recursive collect a sidemap of all `LoadLocal` and `PropertyLoads` with a
  * function and all nested functions.
@@ -456,10 +408,10 @@ export class DependencyCollectionContext {
   }
 
   /*
-   * Records where a value was declared, and optionally, the scope where the
-   * value originated from. This is later used to determine if a dependency
-   * should be added to a scope; if the current scope we are visiting is the
-   * same scope where the value originates, it can't be a dependency on itself.
+   * Records where a value was declared, and optionally, the scope where the value originated from.
+   * This is later used to determine if a dependency should be added to a scope; if the current
+   * scope we are visiting is the same scope where the value originates, it can't be a dependency
+   * on itself.
    *
    * Note that we do not track declarations or reassignments within inner
    * functions for the following reasons:
@@ -775,7 +727,9 @@ function collectDependencies(
       // Record referenced optional chains in phis
       for (const phi of block.phis) {
         for (const operand of phi.operands) {
-          const maybeOptionalChain = temporaries.get(operand[1].identifier.id);
+          const maybeOptionalChain = temporaries.get(
+            operand[1].identifier.id,
+          );
           if (maybeOptionalChain) {
             context.visitDependency(maybeOptionalChain);
           }
