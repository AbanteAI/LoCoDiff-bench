
index 506a8718d..40b96655c 100644
--- a/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_expectedoutput.txt (expected):tmp/tmp3_xmr_nm_expected.txt	
+++ b/react_compiler_packages_babel-plugin-react-compiler_src_HIR_PropagateScopeDependenciesHIR.ts_extracted.txt (actual):tmp/tmpir8kgszc_actual.txt	
@@ -80,8 +80,8 @@ export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
     }
 
     /**
-     * Step 1: Find hoistable accesses, given the basic block in which the scope
-     * begins.
+     * Step 1: Find hoistable accesses, given the basic block in
+     * which the scope begins.
      */
     const hoistables = hoistablePropertyLoads.get(scope.id);
     CompilerError.invariant(hoistables != null, {
@@ -374,7 +374,10 @@ function getProperty(
   } else {
     property = {
       identifier: resolvedDependency.identifier,
-      path: [...resolvedDependency.path, {property: propertyName, optional}],
+      path: [
+        ...resolvedDependency.path,
+        {property: propertyName, optional},
+      ],
     };
   }
   return property;
@@ -456,10 +459,10 @@ export class DependencyCollectionContext {
   }
 
   /*
-   * Records where a value was declared, and optionally, the scope where the
-   * value originated from. This is later used to determine if a dependency
-   * should be added to a scope; if the current scope we are visiting is the
-   * same scope where the value originates, it can't be a dependency on itself.
+   * Records where a value was declared, and optionally, the scope where the value originated from.
+   * This is later used to determine if a dependency should be added to a scope; if the current
+   * scope we are visiting is the same scope where the value originates, it can't be a dependency
+   * on itself.
    *
    * Note that we do not track declarations or reassignments within inner
    * functions for the following reasons:
@@ -589,16 +592,6 @@ export class DependencyCollectionContext {
       });
     }
 
-    // ref.current access is not a valid dep
-    if (
-      isUseRefType(maybeDependency.identifier) &&
-      maybeDependency.path.at(0)?.property === 'current'
-    ) {
-      maybeDependency = {
-        identifier: maybeDependency.identifier,
-        path: [],
-      };
-    }
     if (this.#checkValidDependency(maybeDependency)) {
       this.#dependencies.value!.push(maybeDependency);
     }
@@ -733,6 +726,11 @@ export function handleInstruction(
       context.visitOperand(operand);
     }
   }
+
+  context.declare(lvalue.identifier, {
+    id,
+    scope: context.currentScope,
+  });
 }
 
 function collectDependencies(
