/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
+ */
+
+import {
+  ScopeId,
+  HIRFunction,
+  Place,
+  Instruction,
+  ReactiveScopeDependency,
+  Identifier,
+  ReactiveScope,
+  isObjectMethodType,
+  isRefValueType,
+  isUseRefType,
+  makeInstructionId,
+  InstructionId,
+  InstructionKind,
+  GeneratedSource,
+  DeclarationId,
+  areEqualPaths,
+  IdentifierId,
+  Terminal,
+  InstructionValue,
+  LoadContext,
+  TInstruction,
+  FunctionExpression,
+  ObjectMethod,
+  PropertyLiteral,
+  convertHoistedLValueKind,
+} from './HIR';
+import {
+  collectHoistablePropertyLoads,
+  keyByScopeId,
+} from './CollectHoistablePropertyLoads';
 import {
-  ScopeId,
-  HIRFunction,
-  Place,
-  Instruction,
-  ReactiveScopeDependency,
-  Identifier,
-  ReactiveScope,
-  isObjectMethodType,
-  isRefValueType,
-  isUseRefType,
-  makeInstructionId,
-  InstructionId,
-  InstructionKind,
-  GeneratedSource,
-  DeclarationId,
-  areEqualPaths,
-  IdentifierId,
-} from './HIR';
-import {
   BlockInfo,
-  collectHoistablePropertyLoads,
-} from './CollectHoistablePropertyLoads';
+  ScopeBlockTraversal,
+  eachInstructionOperand,
+  eachInstructionValueOperand,
+  eachPatternOperand,
+  eachTerminalOperand,
+} from './visitors';
+import {Stack, empty} from '../Utils/Stack';
+import {CompilerError} from '../CompilerError';
+import {Iterable_some} from '../Utils/utils';
+import {ReactiveScopeDependencyTreeHIR} from './DeriveMinimalDependenciesHIR';
+import {collectOptionalChainSidemap} from './CollectOptionalChainDependencies';
 
 export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
   const usedOutsideDeclaringScope =
@@ -116,7 +123,7 @@ export function propagateScopeDependenciesHIR(fn: HIRFunction): void {
   }
 }
 
-function findTemporariesUsedOutsideDeclaringScope(
+export function findTemporariesUsedOutsideDeclaringScope(
   fn: HIRFunction,
 ): ReadonlySet<DeclarationId> {
   /*
@@ -246,12 +253,18 @@ function isLoadContextMutable(
   id: InstructionId,
 ): instrValue is LoadContext {
   if (instrValue.kind === 'LoadContext') {
-    CompilerError.invariant(instrValue.place.identifier.scope != null, {
-      reason:
-        '[PropagateScopeDependencies] Expected all context variables to be assigned a scope',
-      loc: instrValue.loc,
-    });
-    return id >= instrValue.place.identifier.scope.range.end;
+    /**
+     * Not all context variables currently have scopes due to limitations of
+     * mutability analysis for function expressions.
+     *
+     * Currently, many function expressions references are inferred to be
+     * 'Read' | 'Freeze' effects which don't replay mutable effects of captured
+     * context.
+     */
+    return (
+      instrValue.place.identifier.scope != null &&
+      id >= instrValue.place.identifier.scope.range.end
+    );
   }
   return false;
 }
@@ -471,6 +484,9 @@ export class DependencyCollectionContext {
     }
     this.#reassignments.set(identifier, decl);
   }
+  hasDeclared(identifier: Identifier): boolean {
+    return this.#declarations.has(identifier.declarationId);
+  }
 
   // Checks if identifier is a valid dependency in the current scope
   #checkValidDependency(maybeDependency: ReactiveScopeDependency): boolean {
@@ -672,21 +688,21 @@ export function handleInstruction(
     });
   } else if (value.kind === 'DeclareLocal' || value.kind === 'DeclareContext') {
     /*
-     * Some variables may be declared and never initialized. We need
-     * to retain (and hoist) these declarations if they are included
-     * in a reactive scope. One approach is to simply add all `DeclareLocal`s
-     * as scope declarations.
+     * Some variables may be declared and never initialized. We need to retain
+     * (and hoist) these declarations if they are included in a reactive scope.
+     * One approach is to simply add all `DeclareLocal`s as scope declarations.
+     *
+     * Context variables with hoisted declarations only become live after their
+     * first assignment. We only declare real DeclareLocal / DeclareContext
+     * instructions (not hoisted ones) to avoid generating dependencies on
+     * hoisted declarations.
      */
-
-    /*
-     * We add context variable declarations here, not at `StoreContext`, since
-     * context Store / Loads are modeled as reads and mutates to the underlying
-     * variable reference (instead of through intermediate / inlined temporaries)
-     */
-    if (convertHoistedLValueKind(value.lvalue.kind) === null) {
       context.declare(value.lvalue.place.identifier, {
         id,
         scope: context.currentScope,
+      });
+    }
+
+    if (convertHoistedLValueKind(value.lvalue.kind) === null) {
       context.declare(value.lvalue.place.identifier, {
         id,
         scope: context.currentScope,
@@ -708,6 +718,26 @@ export function handleInstruction(
       context.visitOperand(operand);
     }
   } else if (value.kind === 'StoreContext') {
+    /**
+     * Some StoreContext variables have hoisted declarations. If we're storing
+     * to a context variable that hasn't yet been declared, the StoreContext is
+     * the declaration.
+     * (see corresponding logic in PruneHoistedContext)
+     */
+    if (
+      !context.hasDeclared(value.lvalue.place.identifier) ||
+      value.lvalue.kind !== InstructionKind.Reassign
+    ) {
+      context.declare(value.lvalue.place.identifier, {
+        id,
+        scope: context.currentScope,
+      });
+    }
+
+    for (const operand of eachInstructionValueOperand(value)) {
+      context.visitOperand(operand);
+    }
+  } else {
     /**
      * Some StoreContext variables have hoisted declarations. If we're storing
      * to a context variable that hasn't yet been declared, the StoreContext is