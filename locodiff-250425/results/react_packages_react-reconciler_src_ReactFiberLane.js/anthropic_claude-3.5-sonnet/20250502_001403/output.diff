
index 54a872a6..e67071cc 100644
--- a/react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected):tmp/tmpxjm81a3u_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual):tmp/tmpiybawp1a_actual.txt	
@@ -51,8 +51,7 @@ export const InputContinuousLane: Lane = /*             */ 0b0000000000000000000
 export const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000010000;
 export const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000100000;
 
-export const SyncUpdateLanes: Lane =
-  SyncLane | InputContinuousLane | DefaultLane;
+export const SyncUpdateLanes: Lane = SyncLane | InputContinuousLane | DefaultLane;
 
 export const GestureLane: Lane = /*                     */ 0b0000000000000000000000001000000;
 
@@ -75,15 +74,15 @@ const TransitionLane14: Lane = /*                       */ 0b0000000001000000000
 
 const RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;
 const RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;
-const RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;
-const RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;
-const RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;
+const RetryLane2: Lane = /*                             */ 0b0000001000000000000000000000000;
+const RetryLane3: Lane = /*                             */ 0b0000010000000000000000000000000;
+const RetryLane4: Lane = /*                             */ 0b0000100000000000000000000000000;
 
 export const SomeRetryLane: Lane = RetryLane1;
 
 export const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;
 
-const NonIdleLanes: Lanes = /*                          */ 0b0000111111111111111111111111111;
+const NonIdleLanes = /*                                 */ 0b0000111111111111111111111111111;
 
 export const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;
 export const IdleLane: Lane = /*                        */ 0b0010000000000000000000000000000;
@@ -153,16 +152,10 @@ export function getLabelForLane(lane: Lane): string | void {
   }
 }
 
-export const NoTimestamp = -1;
-
 let nextTransitionLane: Lane = TransitionLane1;
 let nextRetryLane: Lane = RetryLane1;
 
 function getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {
-  const pendingSyncLanes = lanes & SyncUpdateLanes;
-  if (pendingSyncLanes !== 0) {
-    return pendingSyncLanes;
-  }
   switch (getHighestPriorityLane(lanes)) {
     case SyncHydrationLane:
       return SyncHydrationLane;
@@ -240,19 +233,6 @@ export function getNextLanes(
   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
 
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition â€” only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
-
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
   const nonIdlePendingLanes = pendingLanes & NonIdleLanes;
@@ -338,6 +318,50 @@ export function getNextLanes(
     }
   }
 
+  if ((nextLanes & InputContinuousLane) !== NoLanes) {
+    // When updates are sync by default, we entangle continuous priority updates
+    // and default updates, so they render in the same batch. The only reason
+    // they use separate lanes is because continuous updates should interrupt
+    // transitions, but default updates should not.
+    nextLanes |= pendingLanes & DefaultLane;
+  }
+
+  // Check for entangled lanes and add them to the batch.
+  //
+  // A lane is said to be entangled with another when it's not allowed to render
+  // in a batch that does not also include the other lane. Typically we do this
+  // when multiple updates have the same source, and we only want to respond to
+  // the most recent event from that source.
+  //
+  // Note that we apply entanglements *after* checking for partial work above.
+  // This means that if a lane is entangled during an interleaved event while
+  // it's already rendering, we won't interrupt it. This is intentional, since
+  // entanglement is usually "best effort": we'll try our best to render the
+  // lanes in the same batch, but it's not worth throwing out partially
+  // completed work in order to do it.
+  // TODO: Reconsider this. The counter-argument is that the partial work
+  // represents an intermediate state, which we don't want to show to the user.
+  // And by spending extra time finishing it, we're increasing the amount of
+  // time it takes to show the final state, which is what they are actually
+  // waiting for.
+  //
+  // For those exceptions where entanglement is semantically important,
+  // we should ensure that there is no partial work at the
+  // time we apply the entanglement.
+  const entangledLanes = root.entangledLanes;
+  if (entangledLanes !== NoLanes) {
+    const entanglements = root.entanglements;
+    let lanes = nextLanes & entangledLanes;
+    while (lanes > 0) {
+      const index = pickArbitraryLaneIndex(lanes);
+      const lane = 1 << index;
+
+      nextLanes |= entanglements[index];
+
+      lanes &= ~lane;
+    }
+  }
+
   return nextLanes;
 }
 
@@ -434,10 +458,6 @@ export function getEntangledLanes(root: FiberRoot, renderLanes: Lanes): Lanes {
   // And by spending extra time finishing it, we're increasing the amount of
   // time it takes to show the final state, which is what they are actually
   // waiting for.
-  //
-  // For those exceptions where entanglement is semantically important,
-  // we should ensure that there is no partial work at the
-  // time we apply the entanglement.
   const allEntangledLanes = root.entangledLanes;
   if (allEntangledLanes !== NoLanes) {
     const entanglements = root.entanglements;
@@ -455,70 +475,6 @@ export function getEntangledLanes(root: FiberRoot, renderLanes: Lanes): Lanes {
   return entangledLanes;
 }
 
-function computeExpirationTime(lane: Lane, currentTime: number) {
-  switch (lane) {
-    case SyncHydrationLane:
-    case SyncLane:
-    case InputContinuousHydrationLane:
-    case InputContinuousLane:
-    case GestureLane:
-      // User interactions should expire slightly more quickly.
-      //
-      // NOTE: This is set to the corresponding constant as in Scheduler.js.
-      // When we made it larger, a product metric in www regressed, suggesting
-      // there's a user interaction that's being starved by a series of
-      // synchronous updates. If that theory is correct, the proper solution is
-      // to fix the starvation. However, this scenario supports the idea that
-      // expiration times are an important safeguard when starvation
-      // does happen.
-      return currentTime + syncLaneExpirationMs;
-    case DefaultHydrationLane:
-    case DefaultLane:
-    case TransitionHydrationLane:
-    case TransitionLane1:
-    case TransitionLane2:
-    case TransitionLane3:
-    case TransitionLane4:
-    case TransitionLane5:
-    case TransitionLane6:
-    case TransitionLane7:
-    case TransitionLane8:
-    case TransitionLane9:
-    case TransitionLane10:
-    case TransitionLane11:
-    case TransitionLane12:
-    case TransitionLane13:
-    case TransitionLane14:
-      return currentTime + transitionLaneExpirationMs;
-    case RetryLane1:
-    case RetryLane2:
-    case RetryLane3:
-    case RetryLane4:
-      // TODO: Retries should be allowed to expire if they are CPU bound for
-      // too long, but when I made this change it caused a spike in browser
-      // crashes. There must be some other underlying bug; not super urgent but
-      // ideally should figure out why and fix it. Unfortunately we don't have
-      // a repro for the crashes, only detected via production metrics.
-      return enableRetryLaneExpiration
-        ? currentTime + retryLaneExpirationMs
-        : NoTimestamp;
-    case SelectiveHydrationLane:
-    case IdleHydrationLane:
-    case IdleLane:
-    case OffscreenLane:
-    case DeferredLane:
-      // Anything idle priority or lower should never expire.
-      return NoTimestamp;
-    default:
-      if (__DEV__) {
-        console.error(
-          'Should have found matching lanes. This is a bug in React.',
-        );
-      }
-      return NoTimestamp;
-  }
-}
-
 export function markStarvedLanesAsExpired(
   root: FiberRoot,
   currentTime: number,
@@ -535,7 +491,6 @@ export function markStarvedLanesAsExpired(
   // Iterate through the pending lanes and check if we've reached their
   // expiration time. If so, we'll assume the update is being starved and mark
   // it as expired to force it to finish.
-  // TODO: We should be able to replace this with upgradePendingLanesToSync
   //
   // We exclude retry lanes because those must always be time sliced, in order
   // to unwrap uncached promises.
@@ -568,166 +523,6 @@ export function markStarvedLanesAsExpired(
   }
 }
 
-// This returns the highest priority pending lanes regardless of whether they
-// are suspended.
-export function getHighestPriorityPendingLanes(root: FiberRoot): Lanes {
-  return getHighestPriorityLanes(root.pendingLanes);
-}
-
-export function getLanesToRetrySynchronouslyOnError(
-  root: FiberRoot,
-  originallyAttemptedLanes: Lanes,
-): Lanes {
-  if (root.errorRecoveryDisabledLanes & originallyAttemptedLanes) {
-    // The error recovery mechanism is disabled until these lanes are cleared.
-    return NoLanes;
-  }
-
-  const everythingButOffscreen = root.pendingLanes & ~OffscreenLane;
-  if (everythingButOffscreen !== NoLanes) {
-    return everythingButOffscreen;
-  }
-  if (everythingButOffscreen & OffscreenLane) {
-    return OffscreenLane;
-  }
-  return NoLanes;
-}
-
-export function includesSyncLane(lanes: Lanes): boolean {
-  return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;
-}
-
-export function isSyncLane(lanes: Lanes): boolean {
-  return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;
-}
-
-export function includesNonIdleWork(lanes: Lanes): boolean {
-  return (lanes & NonIdleLanes) !== NoLanes;
-}
-export function includesOnlyRetries(lanes: Lanes): boolean {
-  return (lanes & RetryLanes) === lanes;
-}
-export function includesOnlyNonUrgentLanes(lanes: Lanes): boolean {
-  // TODO: Should hydration lanes be included here? This function is only
-  // used in `updateDeferredValueImpl`.
-  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
-  return (lanes & UrgentLanes) === NoLanes;
-}
-export function includesOnlyTransitions(lanes: Lanes): boolean {
-  return (lanes & TransitionLanes) === lanes;
-}
-
-export function includesTransitionLane(lanes: Lanes): boolean {
-  return (lanes & TransitionLanes) !== NoLanes;
-}
-
-export function includesOnlyHydrationLanes(lanes: Lanes): boolean {
-  return (lanes & HydrationLanes) === lanes;
-}
-
-export function includesOnlyOffscreenLanes(lanes: Lanes): boolean {
-  return (lanes & OffscreenLane) === lanes;
-}
-
-export function includesOnlyHydrationOrOffscreenLanes(lanes: Lanes): boolean {
-  return (lanes & (HydrationLanes | OffscreenLane)) === lanes;
-}
-
-export function includesOnlyViewTransitionEligibleLanes(lanes: Lanes): boolean {
-  return (lanes & (TransitionLanes | RetryLanes | IdleLane)) === lanes;
-}
-
-export function includesOnlySuspenseyCommitEligibleLanes(
-  lanes: Lanes,
-): boolean {
-  return (
-    (lanes & (TransitionLanes | RetryLanes | IdleLane | GestureLane)) === lanes
-  );
-}
-
-export function includesBlockingLane(lanes: Lanes): boolean {
-  const SyncDefaultLanes =
-    InputContinuousHydrationLane |
-    InputContinuousLane |
-    DefaultHydrationLane |
-    DefaultLane |
-    GestureLane;
-  return (lanes & SyncDefaultLanes) !== NoLanes;
-}
-
-export function includesExpiredLane(root: FiberRoot, lanes: Lanes): boolean {
-  // This is a separate check from includesBlockingLane because a lane can
-  // expire after a render has already started.
-  return (lanes & root.expiredLanes) !== NoLanes;
-}
-
-export function isBlockingLane(lane: Lane): boolean {
-  const SyncDefaultLanes =
-    InputContinuousHydrationLane |
-    InputContinuousLane |
-    DefaultHydrationLane |
-    DefaultLane;
-  return (lane & SyncDefaultLanes) !== NoLanes;
-}
-
-export function isTransitionLane(lane: Lane): boolean {
-  return (lane & TransitionLanes) !== NoLanes;
-}
-
-export function isGestureRender(lanes: Lanes): boolean {
-  // This should render only the one lane.
-  return lanes === GestureLane;
-}
-
-export function claimNextTransitionLane(): Lane {
-  // Cycle through the lanes, assigning each new transition to the next lane.
-  // In most cases, this means every transition gets its own lane, until we
-  // run out of lanes and cycle back to the beginning.
-  const lane = nextTransitionLane;
-  nextTransitionLane <<= 1;
-  if ((nextTransitionLane & TransitionLanes) === NoLanes) {
-    nextTransitionLane = TransitionLane1;
-  }
-  return lane;
-}
-
-export function claimNextRetryLane(): Lane {
-  const lane = nextRetryLane;
-  nextRetryLane <<= 1;
-  if ((nextRetryLane & RetryLanes) === NoLanes) {
-    nextRetryLane = RetryLane1;
-  }
-  return lane;
-}
-
-export function getHighestPriorityLane(lanes: Lanes): Lane {
-  return lanes & -lanes;
-}
-
-function getLanesOfEqualOrHigherPriority(lanes: Lane | Lanes): Lanes {
-  // Create a mask with all bits to the right or same as the highest bit.
-  // So if lanes is 0b100, the result would be 0b111.
-  // If lanes is 0b101, the result would be 0b111.
-  const lowestPriorityLaneIndex = 31 - clz32(lanes);
-  return (1 << (lowestPriorityLaneIndex + 1)) - 1;
-}
-
-export function pickArbitraryLane(lanes: Lanes): Lane {
-  // This wrapper function gets inlined. Only exists so to communicate that it
-  // doesn't matter which bit is selected; you can pick any bit without
-  // affecting the algorithms where its used. Here I'm using
-  // getHighestPriorityLane because it requires the fewest operations.
-  return getHighestPriorityLane(lanes);
-}
-
-function pickArbitraryLaneIndex(lanes: Lanes) {
-  return 31 - clz32(lanes);
-}
-
-function laneToIndex(lane: Lane) {
-  return pickArbitraryLaneIndex(lane);
-}
-
 export function includesSomeLane(a: Lanes | Lane, b: Lanes | Lane): boolean {
   return (a & b) !== NoLanes;
 }
@@ -748,8 +543,6 @@ export function intersectLanes(a: Lanes | Lane, b: Lanes | Lane): Lanes {
   return a & b;
 }
 
-// Seems redundant, but it changes the type from a single lane (used for
-// updates) to a group of lanes (used for flushing work).
 export function laneToLanes(lane: Lane): Lanes {
   return lane;
 }
@@ -857,7 +650,6 @@ export function markRootFinished(
   root.entangledLanes &= remainingLanes;
 
   root.errorRecoveryDisabledLanes &= remainingLanes;
-  root.shellSuspendCounter = 0;
 
   const entanglements = root.entanglements;
   const expirationTimes = root.expirationTimes;
@@ -909,329 +701,4 @@ export function markRootFinished(
   // to render them again.
   //
   // But since we know they're still suspended, we can skip straight to the
-  // "prerender" mode (i.e. don't skip over siblings after something
-  // suspended) instead of the regular mode (i.e. unwind and skip the siblings
-  // as soon as something suspends to unblock the rest of the update).
-  if (
-    enableSiblingPrerendering &&
-    suspendedRetryLanes !== NoLanes &&
-    // Note that we only do this if there were no updates since we started
-    // rendering. This mirrors the logic in markRootUpdated â€” whenever we
-    // receive an update, we reset all the suspended and pinged lanes.
-    updatedLanes === NoLanes &&
-    !(disableLegacyMode && root.tag === LegacyRoot)
-  ) {
-    // We also need to avoid marking a retry lane as suspended if it was already
-    // pending before this render. We can't say these are now suspended if they
-    // weren't included in our attempt.
-    const freshlySpawnedRetryLanes =
-      suspendedRetryLanes &
-      // Remove any retry lane that was already pending before our just-finished
-      // attempt, and also wasn't included in that attempt.
-      ~(previouslyPendingLanes & ~finishedLanes);
-    root.suspendedLanes |= freshlySpawnedRetryLanes;
-  }
-}
-
-function markSpawnedDeferredLane(
-  root: FiberRoot,
-  spawnedLane: Lane,
-  entangledLanes: Lanes,
-) {
-  // This render spawned a deferred task. Mark it as pending.
-  root.pendingLanes |= spawnedLane;
-  root.suspendedLanes &= ~spawnedLane;
-
-  // Entangle the spawned lane with the DeferredLane bit so that we know it
-  // was the result of another render. This lets us avoid a useDeferredValue
-  // waterfall â€” only the first level will defer.
-  const spawnedLaneIndex = laneToIndex(spawnedLane);
-  root.entangledLanes |= spawnedLane;
-  root.entanglements[spawnedLaneIndex] |=
-    DeferredLane |
-    // If the parent render task suspended, we must also entangle those lanes
-    // with the spawned task, so that the deferred task includes all the same
-    // updates that the parent task did. We can exclude any lane that is not
-    // used for updates (e.g. Offscreen).
-    (entangledLanes & UpdateLanes);
-}
-
-export function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {
-  // In addition to entangling each of the given lanes with each other, we also
-  // have to consider _transitive_ entanglements. For each lane that is already
-  // entangled with *any* of the given lanes, that lane is now transitively
-  // entangled with *all* the given lanes.
-  //
-  // Translated: If C is entangled with A, then entangling A with B also
-  // entangles C with B.
-  //
-  // If this is hard to grasp, it might help to intentionally break this
-  // function and look at the tests that fail in ReactTransition-test.js. Try
-  // commenting out one of the conditions below.
-
-  const rootEntangledLanes = (root.entangledLanes |= entangledLanes);
-  const entanglements = root.entanglements;
-  let lanes = rootEntangledLanes;
-  while (lanes) {
-    const index = pickArbitraryLaneIndex(lanes);
-    const lane = 1 << index;
-    if (
-      // Is this one of the newly entangled lanes?
-      (lane & entangledLanes) |
-      // Is this lane transitively entangled with the newly entangled lanes?
-      (entanglements[index] & entangledLanes)
-    ) {
-      entanglements[index] |= entangledLanes;
-    }
-    lanes &= ~lane;
-  }
-}
-
-export function upgradePendingLanesToSync(
-  root: FiberRoot,
-  lanesToUpgrade: Lanes,
-) {
-  // Same as upgradePendingLaneToSync but accepts multiple lanes, so it's a
-  // bit slower.
-  root.pendingLanes |= SyncLane;
-  root.entangledLanes |= SyncLane;
-  let lanes = lanesToUpgrade;
-  while (lanes) {
-    const index = pickArbitraryLaneIndex(lanes);
-    const lane = 1 << index;
-    root.entanglements[SyncLaneIndex] |= lane;
-    lanes &= ~lane;
-  }
-}
-
-export function markHiddenUpdate(
-  root: FiberRoot,
-  update: ConcurrentUpdate,
-  lane: Lane,
-) {
-  const index = laneToIndex(lane);
-  const hiddenUpdates = root.hiddenUpdates;
-  const hiddenUpdatesForLane = hiddenUpdates[index];
-  if (hiddenUpdatesForLane === null) {
-    hiddenUpdates[index] = [update];
-  } else {
-    hiddenUpdatesForLane.push(update);
-  }
-  update.lane = lane | OffscreenLane;
-}
-
-export function getBumpedLaneForHydration(
-  root: FiberRoot,
-  renderLanes: Lanes,
-): Lane {
-  const renderLane = getHighestPriorityLane(renderLanes);
-  const bumpedLane =
-    (renderLane & SyncUpdateLanes) !== NoLane
-      ? // Unify sync lanes. We don't do this inside getBumpedLaneForHydrationByLane
-        // because that causes things to flush synchronously when they shouldn't.
-        // TODO: This is not coherent but that's beacuse the unification is not coherent.
-        // We need to get merge these into an actual single lane.
-        SyncHydrationLane
-      : getBumpedLaneForHydrationByLane(renderLane);
-  // Check if the lane we chose is suspended. If so, that indicates that we
-  // already attempted and failed to hydrate at that level. Also check if we're
-  // already rendering that lane, which is rare but could happen.
-  // TODO: This should move into the caller to decide whether giving up is valid.
-  if ((bumpedLane & (root.suspendedLanes | renderLanes)) !== NoLane) {
-    // Give up trying to hydrate and fall back to client render.
-    return NoLane;
-  }
-  return bumpedLane;
-}
-
-export function getBumpedLaneForHydrationByLane(lane: Lane): Lane {
-  switch (lane) {
-    case SyncLane:
-      lane = SyncHydrationLane;
-      break;
-    case InputContinuousLane:
-      lane = InputContinuousHydrationLane;
-      break;
-    case DefaultLane:
-      lane = DefaultHydrationLane;
-      break;
-    case TransitionLane1:
-    case TransitionLane2:
-    case TransitionLane3:
-    case TransitionLane4:
-    case TransitionLane5:
-    case TransitionLane6:
-    case TransitionLane7:
-    case TransitionLane8:
-    case TransitionLane9:
-    case TransitionLane10:
-    case TransitionLane11:
-    case TransitionLane12:
-    case TransitionLane13:
-    case TransitionLane14:
-    case RetryLane1:
-    case RetryLane2:
-    case RetryLane3:
-    case RetryLane4:
-      lane = TransitionHydrationLane;
-      break;
-    case IdleLane:
-      lane = IdleHydrationLane;
-      break;
-    default:
-      // Everything else is already either a hydration lane, or shouldn't
-      // be retried at a hydration lane.
-      lane = NoLane;
-      break;
-  }
-  return lane;
-}
-
-export function addFiberToLanesMap(
-  root: FiberRoot,
-  fiber: Fiber,
-  lanes: Lanes | Lane,
-) {
-  if (!enableUpdaterTracking) {
-    return;
-  }
-  if (!isDevToolsPresent) {
-    return;
-  }
-  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
-  while (lanes > 0) {
-    const index = laneToIndex(lanes);
-    const lane = 1 << index;
-
-    const updaters = pendingUpdatersLaneMap[index];
-    updaters.add(fiber);
-
-    lanes &= ~lane;
-  }
-}
-
-export function movePendingFibersToMemoized(root: FiberRoot, lanes: Lanes) {
-  if (!enableUpdaterTracking) {
-    return;
-  }
-  if (!isDevToolsPresent) {
-    return;
-  }
-  const pendingUpdatersLaneMap = root.pendingUpdatersLaneMap;
-  const memoizedUpdaters = root.memoizedUpdaters;
-  while (lanes > 0) {
-    const index = laneToIndex(lanes);
-    const lane = 1 << index;
-
-    const updaters = pendingUpdatersLaneMap[index];
-    if (updaters.size > 0) {
-      updaters.forEach(fiber => {
-        const alternate = fiber.alternate;
-        if (alternate === null || !memoizedUpdaters.has(alternate)) {
-          memoizedUpdaters.add(fiber);
-        }
-      });
-      updaters.clear();
-    }
-
-    lanes &= ~lane;
-  }
-}
-
-export function addTransitionToLanesMap(
-  root: FiberRoot,
-  transition: Transition,
-  lane: Lane,
-) {
-  if (enableTransitionTracing) {
-    const transitionLanesMap = root.transitionLanes;
-    const index = laneToIndex(lane);
-    let transitions = transitionLanesMap[index];
-    if (transitions === null) {
-      transitions = new Set();
-    }
-    transitions.add(transition);
-
-    transitionLanesMap[index] = transitions;
-  }
-}
-
-export function getTransitionsForLanes(
-  root: FiberRoot,
-  lanes: Lane | Lanes,
-): Array<Transition> | null {
-  if (!enableTransitionTracing) {
-    return null;
-  }
-
-  const transitionsForLanes = [];
-  while (lanes > 0) {
-    const index = laneToIndex(lanes);
-    const lane = 1 << index;
-    const transitions = root.transitionLanes[index];
-    if (transitions !== null) {
-      transitions.forEach(transition => {
-        transitionsForLanes.push(transition);
-      });
-    }
-
-    lanes &= ~lane;
-  }
-
-  if (transitionsForLanes.length === 0) {
-    return null;
-  }
-
-  return transitionsForLanes;
-}
-
-export function clearTransitionsForLanes(root: FiberRoot, lanes: Lane | Lanes) {
-  if (!enableTransitionTracing) {
-    return;
-  }
-
-  while (lanes > 0) {
-    const index = laneToIndex(lanes);
-    const lane = 1 << index;
-
-    const transitions = root.transitionLanes[index];
-    if (transitions !== null) {
-      root.transitionLanes[index] = null;
-    }
-
-    lanes &= ~lane;
-  }
-}
-
-// Used to name the Performance Track
-export function getGroupNameOfHighestPriorityLane(lanes: Lanes): string {
-  if (
-    lanes &
-    (SyncHydrationLane |
-      SyncLane |
-      InputContinuousHydrationLane |
-      InputContinuousLane |
-      DefaultHydrationLane |
-      DefaultLane |
-      GestureLane)
-  ) {
-    return 'Blocking';
-  }
-  if (lanes & (TransitionHydrationLane | TransitionLanes)) {
-    return 'Transition';
-  }
-  if (lanes & RetryLanes) {
-    return 'Suspense';
-  }
-  if (
-    lanes &
-    (SelectiveHydrationLane |
-      IdleHydrationLane |
-      IdleLane |
-      OffscreenLane |
-      DeferredLane)
-  ) {
-    return 'Idle';
-  }
-  return 'Other';
-}
\ No newline at end of file
+  // "prerender" mode (i.e. don't skip
\ No newline at end of file
