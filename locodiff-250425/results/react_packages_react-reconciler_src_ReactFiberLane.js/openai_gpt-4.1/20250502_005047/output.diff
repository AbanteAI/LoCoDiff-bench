--- react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual)@@ -22,12 +22,12 @@   enableRetryLaneExpiration,
   enableSchedulingProfiler,
   enableTransitionTracing,
+  enableSiblingPrerendering,
   enableUpdaterTracking,
   syncLaneExpirationMs,
   transitionLaneExpirationMs,
   retryLaneExpirationMs,
   disableLegacyMode,
-  enableSiblingPrerendering,
 } from 'shared/ReactFeatureFlags';
 import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
@@ -125,6 +125,9 @@     }
     if (lane & DefaultLane) {
       return 'Default';
+    }
+    if (lane & GestureLane) {
+      return 'Gesture';
     }
     if (lane & TransitionHydrationLane) {
       return 'TransitionHydration';
@@ -239,19 +242,6 @@   const suspendedLanes = root.suspendedLanes;
   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
-
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition â€” only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
 
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
@@ -535,7 +525,6 @@   // Iterate through the pending lanes and check if we've reached their
   // expiration time. If so, we'll assume the update is being starved and mark
   // it as expired to force it to finish.
-  // TODO: We should be able to replace this with upgradePendingLanesToSync
   //
   // We exclude retry lanes because those must always be time sliced, in order
   // to unwrap uncached promises.
@@ -570,7 +559,7 @@ 
 // This returns the highest priority pending lanes regardless of whether they
 // are suspended.
-export function getHighestPriorityPendingLanes(root: FiberRoot): Lanes {
+export function getHighestPriorityPendingLanes(root: FiberRoot) {
   return getHighestPriorityLanes(root.pendingLanes);
 }
 
@@ -853,11 +842,9 @@   root.warmLanes = NoLanes;
 
   root.expiredLanes &= remainingLanes;
-
   root.entangledLanes &= remainingLanes;
 
   root.errorRecoveryDisabledLanes &= remainingLanes;
-  root.shellSuspendCounter = 0;
 
   const entanglements = root.entanglements;
   const expirationTimes = root.expirationTimes;
