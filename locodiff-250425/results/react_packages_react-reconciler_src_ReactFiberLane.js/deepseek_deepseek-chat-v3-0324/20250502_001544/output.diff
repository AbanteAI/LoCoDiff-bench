--- react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual)@@ -21,13 +21,13 @@ import {
   enableRetryLaneExpiration,
   enableSchedulingProfiler,
+  enableSiblingPrerendering,
   enableTransitionTracing,
   enableUpdaterTracking,
+  disableLegacyMode,
+  retryLaneExpirationMs,
   syncLaneExpirationMs,
   transitionLaneExpirationMs,
-  retryLaneExpirationMs,
-  disableLegacyMode,
-  enableSiblingPrerendering,
 } from 'shared/ReactFeatureFlags';
 import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
@@ -43,7 +43,6 @@ 
 export const SyncHydrationLane: Lane = /*               */ 0b0000000000000000000000000000001;
 export const SyncLane: Lane = /*                        */ 0b0000000000000000000000000000010;
-export const SyncLaneIndex: number = 1;
 
 export const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000100;
 export const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000001000;
@@ -125,6 +124,9 @@     }
     if (lane & DefaultLane) {
       return 'Default';
+    }
+    if (lane & GestureLane) {
+      return 'Gesture';
     }
     if (lane & TransitionHydrationLane) {
       return 'TransitionHydration';
@@ -240,19 +242,6 @@   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
 
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition â€” only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
-
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
   const nonIdlePendingLanes = pendingLanes & NonIdleLanes;
@@ -390,21 +379,6 @@   return NoLanes;
 }
 
-export function checkIfRootIsPrerendering(
-  root: FiberRoot,
-  renderLanes: Lanes,
-): boolean {
-  const pendingLanes = root.pendingLanes;
-  const suspendedLanes = root.suspendedLanes;
-  const pingedLanes = root.pingedLanes;
-  // Remove lanes that are suspended (but not pinged)
-  const unblockedLanes = pendingLanes & ~(suspendedLanes & ~pingedLanes);
-
-  // If there are no unsuspended or pinged lanes, that implies that we're
-  // performing a prerender.
-  return (unblockedLanes & renderLanes) === 0;
-}
-
 export function getEntangledLanes(root: FiberRoot, renderLanes: Lanes): Lanes {
   let entangledLanes = renderLanes;
 
@@ -413,7 +387,7 @@     // and default updates, so they render in the same batch. The only reason
     // they use separate lanes is because continuous updates should interrupt
     // transitions, but default updates should not.
-    entangledLanes |= entangledLanes & DefaultLane;
+    entangledLanes |= pendingLanes & DefaultLane;
   }
 
   // Check for entangled lanes and add them to the batch.
@@ -464,12 +438,12 @@     case GestureLane:
       // User interactions should expire slightly more quickly.
       //
-      // NOTE: This is set to the corresponding constant as in Scheduler.js.
-      // When we made it larger, a product metric in www regressed, suggesting
-      // there's a user interaction that's being starved by a series of
-      // synchronous updates. If that theory is correct, the proper solution is
-      // to fix the starvation. However, this scenario supports the idea that
-      // expiration times are an important safeguard when starvation
+      // NOTE: This is set to the corresponding constant as in Scheduler.js. When
+      // we made it larger, a product metric in www regressed, suggesting there's
+      // a user interaction that's being starved by a series of synchronous
+      // updates. If that theory is correct, the proper solution is to fix the
+      // starvation. However, this scenario supports the idea that expiration
+      // times are an important safeguard when starvation
       // does happen.
       return currentTime + syncLaneExpirationMs;
     case DefaultHydrationLane:
@@ -535,7 +509,6 @@   // Iterate through the pending lanes and check if we've reached their
   // expiration time. If so, we'll assume the update is being starved and mark
   // it as expired to force it to finish.
-  // TODO: We should be able to replace this with upgradePendingLanesToSync
   //
   // We exclude retry lanes because those must always be time sliced, in order
   // to unwrap uncached promises.
@@ -983,23 +956,6 @@     ) {
       entanglements[index] |= entangledLanes;
     }
-    lanes &= ~lane;
-  }
-}
-
-export function upgradePendingLanesToSync(
-  root: FiberRoot,
-  lanesToUpgrade: Lanes,
-) {
-  // Same as upgradePendingLaneToSync but accepts multiple lanes, so it's a
-  // bit slower.
-  root.pendingLanes |= SyncLane;
-  root.entangledLanes |= SyncLane;
-  let lanes = lanesToUpgrade;
-  while (lanes) {
-    const index = pickArbitraryLaneIndex(lanes);
-    const lane = 1 << index;
-    root.entanglements[SyncLaneIndex] |= lane;
     lanes &= ~lane;
   }
 }
@@ -1220,7 +1176,7 @@   if (lanes & (TransitionHydrationLane | TransitionLanes)) {
     return 'Transition';
   }
-  if (lanes & RetryLanes) {
+  if (lanes & (RetryLane1 | RetryLane2 | RetryLane3 | RetryLane4)) {
     return 'Suspense';
   }
   if (
