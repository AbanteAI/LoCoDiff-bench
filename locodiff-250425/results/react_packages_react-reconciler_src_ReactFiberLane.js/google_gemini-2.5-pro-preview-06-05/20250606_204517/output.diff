
index 54a872a6e..2602177ee 100644
--- a/react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected):tmp/tmpew0wliz9_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual):tmp/tmp5gvzgjgr_actual.txt	
@@ -21,13 +21,13 @@ export type LaneMap<T> = Array<T>;
 import {
   enableRetryLaneExpiration,
   enableSchedulingProfiler,
+  enableSiblingPrerendering,
   enableTransitionTracing,
   enableUpdaterTracking,
   syncLaneExpirationMs,
   transitionLaneExpirationMs,
   retryLaneExpirationMs,
   disableLegacyMode,
-  enableSiblingPrerendering,
 } from 'shared/ReactFeatureFlags';
 import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
@@ -126,6 +126,9 @@ export function getLabelForLane(lane: Lane): string | void {
     if (lane & DefaultLane) {
       return 'Default';
     }
+    if (lane & GestureLane) {
+      return 'Gesture';
+    }
     if (lane & TransitionHydrationLane) {
       return 'TransitionHydration';
     }
@@ -240,19 +243,6 @@ export function getNextLanes(
   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
 
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition — only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
-
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
   const nonIdlePendingLanes = pendingLanes & NonIdleLanes;
@@ -946,7 +936,6 @@ function markSpawnedDeferredLane(
   // was the result of another render. This lets us avoid a useDeferredValue
   // waterfall — only the first level will defer.
   const spawnedLaneIndex = laneToIndex(spawnedLane);
-  root.entangledLanes |= spawnedLane;
   root.entanglements[spawnedLaneIndex] |=
     DeferredLane |
     // If the parent render task suspended, we must also entangle those lanes
