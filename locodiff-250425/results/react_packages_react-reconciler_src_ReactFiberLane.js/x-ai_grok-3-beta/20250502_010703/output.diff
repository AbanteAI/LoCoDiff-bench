
index 54a872a6..0477dce2 100644
--- a/react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected):tmp/tmpvlosgyfj_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual):tmp/tmpdmnkzqsl_actual.txt	
@@ -11,13 +11,6 @@ import type {Fiber, FiberRoot} from './ReactInternalTypes';
 import type {Transition} from 'react/src/ReactStartTransition';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 
-// TODO: Ideally these types would be opaque but that doesn't work well with
-// our reconciler fork infra, since these leak into non-reconciler packages.
-
-export type Lanes = number;
-export type Lane = number;
-export type LaneMap<T> = Array<T>;
-
 import {
   enableRetryLaneExpiration,
   enableSchedulingProfiler,
@@ -33,6 +26,13 @@ import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
 import {LegacyRoot} from './ReactRootTags';
 
+// TODO: Ideally these types would be opaque but that doesn't work well with
+// our reconciler fork infra, since these leak into non-reconciler packages.
+
+export type Lanes = number;
+export type Lane = number;
+export type LaneMap<T> = Array<T>;
+
 // Lane values below should be kept in sync with getLabelForLane(), used by react-devtools-timeline.
 // If those values are changed that package should be rebuilt and redeployed.
 
@@ -56,22 +56,22 @@ export const SyncUpdateLanes: Lane =
 
 export const GestureLane: Lane = /*                     */ 0b0000000000000000000000001000000;
 
-const TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000010000000;
-const TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111100000000;
-const TransitionLane1: Lane = /*                        */ 0b0000000000000000000000100000000;
-const TransitionLane2: Lane = /*                        */ 0b0000000000000000000001000000000;
-const TransitionLane3: Lane = /*                        */ 0b0000000000000000000010000000000;
-const TransitionLane4: Lane = /*                        */ 0b0000000000000000000100000000000;
-const TransitionLane5: Lane = /*                        */ 0b0000000000000000001000000000000;
-const TransitionLane6: Lane = /*                        */ 0b0000000000000000010000000000000;
-const TransitionLane7: Lane = /*                        */ 0b0000000000000000100000000000000;
-const TransitionLane8: Lane = /*                        */ 0b0000000000000001000000000000000;
-const TransitionLane9: Lane = /*                        */ 0b0000000000000010000000000000000;
-const TransitionLane10: Lane = /*                       */ 0b0000000000000100000000000000000;
-const TransitionLane11: Lane = /*                       */ 0b0000000000001000000000000000000;
-const TransitionLane12: Lane = /*                       */ 0b0000000000010000000000000000000;
-const TransitionLane13: Lane = /*                       */ 0b0000000000100000000000000000000;
-const TransitionLane14: Lane = /*                       */ 0b0000000001000000000000000000000;
+export const TransitionHydrationLane: Lane = /*          */ 0b0000000000000000000000010000000;
+export const TransitionLanes: Lanes = /*                */ 0b0000000001111111111111100000000;
+export const TransitionLane1: Lane = /*                 */ 0b0000000000000000000000100000000;
+export const TransitionLane2: Lane = /*                 */ 0b0000000000000000000001000000000;
+export const TransitionLane3: Lane = /*                 */ 0b0000000000000000000010000000000;
+export const TransitionLane4: Lane = /*                 */ 0b0000000000000000000100000000000;
+export const TransitionLane5: Lane = /*                 */ 0b0000000000000000001000000000000;
+export const TransitionLane6: Lane = /*                 */ 0b0000000000000000010000000000000;
+export const TransitionLane7: Lane = /*                 */ 0b0000000000000000100000000000000;
+export const TransitionLane8: Lane = /*                 */ 0b0000000000000001000000000000000;
+export const TransitionLane9: Lane = /*                 */ 0b0000000000000010000000000000000;
+export const TransitionLane10: Lane = /*                */ 0b0000000000000100000000000000000;
+export const TransitionLane11: Lane = /*                */ 0b0000000000001000000000000000000;
+export const TransitionLane12: Lane = /*                */ 0b0000000000010000000000000000000;
+export const TransitionLane13: Lane = /*                */ 0b0000000000100000000000000000000;
+export const TransitionLane14: Lane = /*                */ 0b0000000001000000000000000000000;
 
 const RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;
 const RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;
@@ -96,6 +96,7 @@ export const DeferredLane: Lane = /*                    */ 0b1000000000000000000
 export const UpdateLanes: Lanes =
   SyncLane | InputContinuousLane | DefaultLane | TransitionLanes;
 
+// Any lane that represents hydration.
 export const HydrationLanes =
   SyncHydrationLane |
   InputContinuousHydrationLane |
@@ -158,7 +159,7 @@ export const NoTimestamp = -1;
 let nextTransitionLane: Lane = TransitionLane1;
 let nextRetryLane: Lane = RetryLane1;
 
-function getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {
+export function getHighestPriorityLanes(lanes: Lanes | Lane): Lanes {
   const pendingSyncLanes = lanes & SyncUpdateLanes;
   if (pendingSyncLanes !== 0) {
     return pendingSyncLanes;
@@ -240,19 +241,6 @@ export function getNextLanes(
   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
 
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition â€” only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
-
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
   const nonIdlePendingLanes = pendingLanes & NonIdleLanes;
@@ -283,7 +271,6 @@ export function getNextLanes(
     // TODO: Idle isn't really used anywhere, and the thinking around
     // speculative rendering has evolved since this was implemented. Consider
     // removing until we've thought about this again.
-
     // First check for fresh updates.
     const unblockedLanes = pendingLanes & ~suspendedLanes;
     if (unblockedLanes !== NoLanes) {
@@ -305,7 +292,6 @@ export function getNextLanes(
       }
     }
   }
-
   if (nextLanes === NoLanes) {
     // This should only be reachable if we're suspended
     // TODO: Consider warning in this path if a fallback timer is not scheduled.
@@ -526,7 +512,6 @@ export function markStarvedLanesAsExpired(
   // TODO: This gets called every time we yield. We can optimize by storing
   // the earliest expiration time on the root. Then use that to quickly bail out
   // of this function.
-
   const pendingLanes = root.pendingLanes;
   const suspendedLanes = root.suspendedLanes;
   const pingedLanes = root.pingedLanes;
@@ -666,7 +651,8 @@ export function isBlockingLane(lane: Lane): boolean {
     InputContinuousHydrationLane |
     InputContinuousLane |
     DefaultHydrationLane |
-    DefaultLane;
+    DefaultLane |
+    GestureLane;
   return (lane & SyncDefaultLanes) !== NoLanes;
 }
 
