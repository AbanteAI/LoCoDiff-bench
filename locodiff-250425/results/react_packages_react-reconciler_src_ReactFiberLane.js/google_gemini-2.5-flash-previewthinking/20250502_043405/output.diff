--- react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual)@@ -21,13 +21,13 @@ import {
   enableRetryLaneExpiration,
   enableSchedulingProfiler,
+  enableSiblingPrerendering,
   enableTransitionTracing,
   enableUpdaterTracking,
   syncLaneExpirationMs,
   transitionLaneExpirationMs,
   retryLaneExpirationMs,
   disableLegacyMode,
-  enableSiblingPrerendering,
 } from 'shared/ReactFeatureFlags';
 import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
@@ -48,53 +48,53 @@ export const InputContinuousHydrationLane: Lane = /*    */ 0b0000000000000000000000000000100;
 export const InputContinuousLane: Lane = /*             */ 0b0000000000000000000000000001000;
 
-export const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000010000;
-export const DefaultLane: Lane = /*                     */ 0b0000000000000000000000000100000;
+export const DefaultHydrationLane: Lane = /*            */ 0b0000000000000000000000000100000;
+export const DefaultLane: Lane = /*                     */ 0b0000000000000000000000001000000;
 
 export const SyncUpdateLanes: Lane =
   SyncLane | InputContinuousLane | DefaultLane;
 
-export const GestureLane: Lane = /*                     */ 0b0000000000000000000000001000000;
-
-const TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000000010000000;
-const TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111100000000;
-const TransitionLane1: Lane = /*                        */ 0b0000000000000000000000100000000;
-const TransitionLane2: Lane = /*                        */ 0b0000000000000000000001000000000;
-const TransitionLane3: Lane = /*                        */ 0b0000000000000000000010000000000;
-const TransitionLane4: Lane = /*                        */ 0b0000000000000000000100000000000;
-const TransitionLane5: Lane = /*                        */ 0b0000000000000000001000000000000;
-const TransitionLane6: Lane = /*                        */ 0b0000000000000000010000000000000;
-const TransitionLane7: Lane = /*                        */ 0b0000000000000000100000000000000;
-const TransitionLane8: Lane = /*                        */ 0b0000000000000001000000000000000;
-const TransitionLane9: Lane = /*                        */ 0b0000000000000010000000000000000;
-const TransitionLane10: Lane = /*                       */ 0b0000000000000100000000000000000;
-const TransitionLane11: Lane = /*                       */ 0b0000000000001000000000000000000;
-const TransitionLane12: Lane = /*                       */ 0b0000000000010000000000000000000;
-const TransitionLane13: Lane = /*                       */ 0b0000000000100000000000000000000;
-const TransitionLane14: Lane = /*                       */ 0b0000000001000000000000000000000;
+export const GestureLane: Lane = /*                     */ 0b0000000000000000000000100000000;
+
+const TransitionHydrationLane: Lane = /*                */ 0b0000000000000000000001000000000;
+const TransitionLanes: Lanes = /*                       */ 0b0000000001111111111111000000000;
+const TransitionLane1: Lane = /*                        */ 0b0000000000000000000010000000000;
+const TransitionLane2: Lane = /*                        */ 0b0000000000000000000100000000000;
+const TransitionLane3: Lane = /*                        */ 0b0000000000000000001000000000000;
+const TransitionLane4: Lane = /*                        */ 0b0000000000000000010000000000000;
+const TransitionLane5: Lane = /*                        */ 0b0000000000000000100000000000000;
+const TransitionLane6: Lane = /*                        */ 0b0000000000000001000000000000000;
+const TransitionLane7: Lane = /*                        */ 0b0000000000000010000000000000000;
+const TransitionLane8: Lane = /*                        */ 0b0000000000000100000000000000000;
+const TransitionLane9: Lane = /*                        */ 0b0000000000001000000000000000000;
+const TransitionLane10: Lane = /*                       */ 0b0000000000010000000000000000000;
+const TransitionLane11: Lane = /*                       */ 0b0000000000100000000000000000000;
+const TransitionLane12: Lane = /*                       */ 0b0000000001000000000000000000000;
+const TransitionLane13: Lane = /*                       */ 0b0000000010000000000000000000000;
 
 const RetryLanes: Lanes = /*                            */ 0b0000011110000000000000000000000;
-const RetryLane1: Lane = /*                             */ 0b0000000010000000000000000000000;
-const RetryLane2: Lane = /*                             */ 0b0000000100000000000000000000000;
-const RetryLane3: Lane = /*                             */ 0b0000001000000000000000000000000;
-const RetryLane4: Lane = /*                             */ 0b0000010000000000000000000000000;
+const RetryLane1: Lane = /*                             */ 0b0000000100000000000000000000000;
+const RetryLane2: Lane = /*                             */ 0b0000001000000000000000000000000;
+const RetryLane3: Lane = /*                             */ 0b0000010000000000000000000000000;
+const RetryLane4: Lane = /*                             */ 0b0000100000000000000000000000000;
 
 export const SomeRetryLane: Lane = RetryLane1;
 
-export const SelectiveHydrationLane: Lane = /*          */ 0b0000100000000000000000000000000;
-
-const NonIdleLanes: Lanes = /*                          */ 0b0000111111111111111111111111111;
-
-export const IdleHydrationLane: Lane = /*               */ 0b0001000000000000000000000000000;
-export const IdleLane: Lane = /*                        */ 0b0010000000000000000000000000000;
-
-export const OffscreenLane: Lane = /*                   */ 0b0100000000000000000000000000000;
+export const SelectiveHydrationLane: Lane = /*          */ 0b0010000000000000000000000000000;
+
+const NonIdleLanes: Lanes = /*                          */ 0b0011111111111111111111111111111;
+
+export const IdleHydrationLane: Lane = /*               */ 0b0100000000000000000000000000000;
+export const IdleLane: Lane = /*                        */ 0b1000000000000000000000000000000;
+
+export const OffscreenLane: Lane = /*                   */ 0b1000000000000000000000000000000;
 export const DeferredLane: Lane = /*                    */ 0b1000000000000000000000000000000;
+
 
 // Any lane that might schedule an update. This is used to detect infinite
 // update loops, so it doesn't include hydration lanes or retries.
 export const UpdateLanes: Lanes =
-  SyncLane | InputContinuousLane | DefaultLane | TransitionLanes;
+  SyncLane | InputContinuousLane | DefaultLane | TransitionLanes | GestureLane;
 
 export const HydrationLanes =
   SyncHydrationLane |
@@ -126,6 +126,9 @@     if (lane & DefaultLane) {
       return 'Default';
     }
+    if (lane & GestureLane) {
+      return 'Gesture';
+    }
     if (lane & TransitionHydrationLane) {
       return 'TransitionHydration';
     }
@@ -152,8 +155,6 @@     }
   }
 }
-
-export const NoTimestamp = -1;
 
 let nextTransitionLane: Lane = TransitionLane1;
 let nextRetryLane: Lane = RetryLane1;
@@ -223,6 +224,10 @@   }
 }
 
+export function getHighestPriorityLane(lanes: Lanes): Lane {
+  return lanes & -lanes;
+}
+
 export function getNextLanes(
   root: FiberRoot,
   wipLanes: Lanes,
@@ -252,6 +257,15 @@   // a brief amount of time (i.e. below the "Just Noticeable Difference"
   // threshold).
   //
+  // TODO: finishedLanes is also set when a Suspensey resource, like CSS or
+  // images, suspends during the commit phase. (We could detect that here by
+  // checking for root.cancelPendingCommit.) These are also expected to resolve
+  // quickly, because of preloading, but theoretically they could block forever
+  // like in a normal "suspend indefinitely" scenario. In the future, we should
+  // consider only blocking for up to some time limit before discarding the
+  // commit in favor of prerendering. If we do discard a pending commit, then
+  // the commit phase callback should act as a ping to try the original
+  // render again.
 
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
@@ -341,6 +355,22 @@   return nextLanes;
 }
 
+export function checkIfRootIsPrerendering(
+  root: FiberRoot,
+  renderLanes: Lanes,
+): boolean {
+  const pendingLanes = root.pendingLanes;
+  const suspendedLanes = root.suspendedLanes;
+  const pingedLanes = root.pingedLanes;
+  // Remove lanes that are suspended (but not pinged)
+  const unblockedLanes = pendingLanes & ~(suspendedLanes & ~pingedLanes);
+
+  // If there are no unsuspended or pinged lanes, that implies that we're
+  // performing a prerender.
+  return (unblockedLanes & renderLanes) === 0;
+}
+
+
 export function getNextLanesToFlushSync(
   root: FiberRoot,
   extraLanesToForceSync: Lane | Lanes,
@@ -388,21 +418,6 @@   }
 
   return NoLanes;
-}
-
-export function checkIfRootIsPrerendering(
-  root: FiberRoot,
-  renderLanes: Lanes,
-): boolean {
-  const pendingLanes = root.pendingLanes;
-  const suspendedLanes = root.suspendedLanes;
-  const pingedLanes = root.pingedLanes;
-  // Remove lanes that are suspended (but not pinged)
-  const unblockedLanes = pendingLanes & ~(suspendedLanes & ~pingedLanes);
-
-  // If there are no unsuspended or pinged lanes, that implies that we're
-  // performing a prerender.
-  return (unblockedLanes & renderLanes) === 0;
 }
 
 export function getEntangledLanes(root: FiberRoot, renderLanes: Lanes): Lanes {
@@ -455,7 +470,8 @@   return entangledLanes;
 }
 
-function computeExpirationTime(lane: Lane, currentTime: number) {
+export function computeExpirationTime(lane: Lane, currentTime: number) {
+  // TODO: Expiration heuristic is constant per lane, so could use a map.
   switch (lane) {
     case SyncHydrationLane:
     case SyncLane:
@@ -601,6 +617,7 @@   return (lanes & (SyncLane | SyncHydrationLane)) !== NoLanes;
 }
 
+
 export function includesNonIdleWork(lanes: Lanes): boolean {
   return (lanes & NonIdleLanes) !== NoLanes;
 }
@@ -634,7 +651,7 @@ }
 
 export function includesOnlyViewTransitionEligibleLanes(lanes: Lanes): boolean {
-  return (lanes & (TransitionLanes | RetryLanes | IdleLane)) === lanes;
+  return (lanes & (TransitionLanes | RetryLanes | IdleLane | GestureLane)) === lanes;
 }
 
 export function includesOnlySuspenseyCommitEligibleLanes(
@@ -644,6 +661,7 @@     (lanes & (TransitionLanes | RetryLanes | IdleLane | GestureLane)) === lanes
   );
 }
+
 
 export function includesBlockingLane(lanes: Lanes): boolean {
   const SyncDefaultLanes =
@@ -666,9 +684,11 @@     InputContinuousHydrationLane |
     InputContinuousLane |
     DefaultHydrationLane |
-    DefaultLane;
-  return (lane & SyncDefaultLanes) !== NoLanes;
-}
+    DefaultLane |
+    GestureLane;
+  return (lane & SyncDefaultLanes) !== NoLane;
+}
+
 
 export function isTransitionLane(lane: Lane): boolean {
   return (lane & TransitionLanes) !== NoLanes;
@@ -676,6 +696,7 @@ 
 export function isGestureRender(lanes: Lanes): boolean {
   // This should render only the one lane.
+  // TODO: Batch gesture updates?
   return lanes === GestureLane;
 }
 
@@ -700,9 +721,6 @@   return lane;
 }
 
-export function getHighestPriorityLane(lanes: Lanes): Lane {
-  return lanes & -lanes;
-}
 
 function getLanesOfEqualOrHigherPriority(lanes: Lane | Lanes): Lanes {
   // Create a mask with all bits to the right or same as the highest bit.
@@ -784,7 +802,10 @@   // We don't do this if the incoming update is idle, because we never process
   // idle updates until after all the regular updates have finished; there's no
   // way it could unblock a transition.
-  if (updateLane !== IdleLane) {
+  // We also don't do this for gesture lanes, because they don't suspend and
+  // are only ever used in one-off renders that clear the pending lane at the
+  // start.
+  if (updateLane !== IdleLane && updateLane !== GestureLane) {
     root.suspendedLanes = NoLanes;
     root.pingedLanes = NoLanes;
     root.warmLanes = NoLanes;
@@ -853,6 +874,7 @@   root.warmLanes = NoLanes;
 
   root.expiredLanes &= remainingLanes;
+  root.mutableReadLanes &= remainingLanes;
 
   root.entangledLanes &= remainingLanes;
 
@@ -931,6 +953,12 @@       ~(previouslyPendingLanes & ~finishedLanes);
     root.suspendedLanes |= freshlySpawnedRetryLanes;
   }
+
+  // Check if any of the lanes finished have transition tracing markers backing
+  // them.
+  if (enableTransitionTracing) {
+    clearTransitionsForLanes(root, finishedLanes);
+  }
 }
 
 function markSpawnedDeferredLane(
@@ -955,6 +983,7 @@     // used for updates (e.g. Offscreen).
     (entangledLanes & UpdateLanes);
 }
+
 
 export function markRootEntangled(root: FiberRoot, entangledLanes: Lanes) {
   // In addition to entangling each of the given lanes with each other, we also
@@ -1019,6 +1048,7 @@   }
   update.lane = lane | OffscreenLane;
 }
+
 
 export function getBumpedLaneForHydration(
   root: FiberRoot,
@@ -1087,6 +1117,7 @@   return lane;
 }
 
+
 export function addFiberToLanesMap(
   root: FiberRoot,
   fiber: Fiber,
@@ -1171,7 +1202,11 @@     const transitions = root.transitionLanes[index];
     if (transitions !== null) {
       transitions.forEach(transition => {
-        transitionsForLanes.push(transition);
+        // check if the transition has a name, if so, add it to the transitionsForLanes array
+        // This is used to avoid logging unnamed transitions in the timeline
+        if (transition.name != null) {
+          transitionsForLanes.push(transition);
+        }
       });
     }
 
