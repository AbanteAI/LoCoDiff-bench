/**
 * Copyright (c) Meta Platforms, Inc. and affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * @flow
 */

import type {Fiber, FiberRoot} from './ReactInternalTypes';
import type {Transition} from 'shared/ReactInternalTypes';
import type {SuspenseState, SuspenseProps} from './ReactFiberSuspenseComponent.old';
import type {Wakeable} from 'shared/ReactTypes';
import type {Flags} from './ReactFiberFlags';
import type {StackCursor} from './ReactFiberStack.old';
import type {OffscreenProps} from './ReactFiberOffscreenComponent';
import type {Lane, Lanes, LaneMap} from './ReactFiberLane';
import type {TracingMarkerData} from './ReactFiberTracingMarkerComponent.new';

import getComponentNameFromFiber from 'react-reconciler/src/getComponentNameFromFiber';
import getComponentNameFromType from 'react-reconciler/src/getComponentNameFromType';
import {
  FunctionComponent,
  ForwardRef,
  ClassComponent,
  IncompleteClassComponent,
  HostRoot,
  HostComponent,
  HostSingleton,
  HostText,
  HostPortal,
  MemoComponent,
  SimpleMemoComponent,
  SuspenseComponent,
  SuspenseListComponent,
  FundamentalComponent,
  ScopeComponent,
  Block,
  OffscreenComponent,
  LegacyHiddenComponent,
  TracingMarkerComponent,
} from './ReactWorkTags';
import {
  NoFlags,
  Placement,
  Update,
  Snapshot,
  ShouldCapture, // Used to mark an instance that needs to be captured in a newly created shell tree
  DidCapture, // Used to mark an instance that captured a failed async update in its shell tree
  ChildDeleted,
  Incomplete,
  StoreConsistency,
} from './ReactFiberFlags';
import {
  PerformingWork,
  RenderPhase,
  PreCommit,
  CommitPhase,
  Passive,
  PassiveUnmountPendingDev,
  RootDidSuspend,
  RootSuspendedWithDelay,
} from './ReactFiberSchedulerPriorities';
import {DefaultSuspenseContext} from './ReactFiberSuspenseContext';
import {
  NoMode,
  ConcurrentMode,
  ProfileMode,
  DebugTracingMode,
} from './ReactTypeOfMode';
import {
  HostRoot as HostRootTag,
  CacheComponent,
  LegacyHiddenComponent as LegacyHiddenComponentTag,
} from './ReactWorkTags';
import {
  NotPending,
  Update as UpdateState,
  Snapshot as SnapshotState,
  ForceUpdateIfNotPending,
} from './ReactHookEffectTags';
import {
  beginUpdateQueue,
  cloneUpdateQueue,
  createUpdate,
  enqueueCapturedUpdate,
  enqueueUpdate,
  processUpdateQueue,
  UpdateState as QueueHasForceUpdate,
} from './ReactFiberClassUpdateQueue.old';
import {
  mergeLanes,
  getNonReloadableStaticSubtreeLanes,
  removeLanes,
  NoLanes,
  NoLane,
  SyncLane,
  SyncHydrationLane,
  DefaultLane,
  DefaultHydrationLane,
  IdleLane,
  IdleHydrationLane,
  OffscreenLane,
  DeferredLane,
  SomeRetryLane,
  getLanesToRetrySynchronouslyOnError,
  getHighestPriorityLane,
  isSubsetOfLanes,
  includesSomeLane,
} from './ReactFiberLane';
import {
  enterDisallowedContextReadInDEV,
  exitDisallowedContextReadInDEV,
  hasContextChanged as hasLegacyContextChanged,
} from './ReactFiberContext.new';
import {
  markComponentRenderStopped,
  markComponentRenderStarted,
  markComponentLayoutStopped,
  markComponentLayoutStarted,
  markPassiveEffectsStarted,
  markPassiveEffectsStopped,
  markComponentPassiveFlushStopped,
  markComponentPassiveFlushStarted,
} from './SchedulingProfiler';
import {
  getActiveContext,
  bindContext,
  pushTopLevelContextObject,
  invalidateContextProvider,
  processContext,
  propagateContextChange,
  findIndexAndPopIfStack,
} from './ReactFiberStack.new';
import {
  getIsHydrating,
  getSuspendedTreeReloadLanes,
  getSuspenseHandlerForWorkLoop,
  getWorkInProgressRootRenderLanes,
  isCache,
  cloneDehydratedForkedChild,
  recomputeForkedSiblingLanes,
  reconcileForkedSibling,
  renderDidSuspend,
  suspendPrimaryFork,
  suspendPrimarySibling,
  transferPrimaryChildLanes,
  getTreeId,
  supportForkedSibling: enableUnifiedForkedFlag,
} from './ReactFiberHydrationContext.new';
import {
  scheduleSyncUpdateForReplayIfAvailable,
  scheduleUpdateOnFiber,
} from './ReactFiberWorkLoop.new';
import {
  ProceduralSchedulingMode,
  getBumpingDeadline,
  getSchedulingPriorityForWorkLoop,
  scheduleTaskForWorkLoop,
  cancelTaskForWorkLoop,
  shouldForceFlushWhileSuspenseyOrAsync,
  schedulePerformWorkEffect,
} from './ReactFiberScheduler';
import {
  SupportsResources,
  getResourceHash,
  dispatchUpdateResourceState,
  updateResourceStateOnFiber,
  processFullResourceUpdate,
  processPartialResourceUpdate,
} from './ReactFiberIncrementalVoid';
import {
  logComponentSuspended,
  logLayoutEffectsStarted,
  logPassiveEffectsStarted,
  logPassiveEffectsStopped,
  logLayoutEffectsStopped,
  logComponentFinished,
} from './DebugTracing';
import invariant from 'shared/invariant';
import is from 'shared/objectIs';
import {REACT_MEMO_TYPE} from 'shared/ReactSymbols';
import {requestTransitionStart} from './ReactFiberTransition';
import {enableCache} from 'shared/ReactFeatureFlags';
import isArray from 'shared/isArray';
import shallowEqual from 'shared/shallowEqual';
import {registerImportFromCompat} from './forks/ReactFiberCompat';

const fakeInternalInstance: any = {}; // eslint-disable-line no-undef
const didWarnAboutChangeEvent: any = {};
const didWarnAboutMessageEvent: any = {};
const didWarnAboutOpenEvent: any = {};
// TODO: Disables warnings for a single file. We should try to fix it.
let didWarnInvalidHydration: any = false;
const DANGEROUSLY_SET_INNER_HTML: string = 'dangerouslySetInnerHTML';
const SUPPRESS_HYDRATION_WARNING: string =
  'suppressHydrationWarning';
const SUSPENSE_START_DATA: string = 'suspense-start';
const SUSPENSE_END_DATA: string = 'suspense-end';
const STYLE: string = 'style';
const EX_SUSPENSE_BOUNDARY: string = 'ex-suspense-boundary';
const EX_SUSPENSE_LIST: string = 'ex-suspense-list';
const EX_SUSPENSE_SERVER_DATA: string = 'ex-suspense-server-data';
const EX_SERVER_RENDER: string = 'ex-server-render';

// We can't switch to the built-in Array implementation until React 18.
// Too many existing code paths rely on the custom implementation.
if (__DEV__) {
  Object.freeze({
    ArrayLike: registerImportFromCompat('ArrayLike'),
  });
}
const arrayLike = [];
if (__DEV__) {
  Object.freeze(arrayLike);
}

if (__DEV__) {
  try {
    // `ReactInternalTreeConfig` is not created unless it actually exists in the
    // current bundle so we should catch the error here in case the initial
    // bundle doesn't have it as dependency.
    const unused = require('./ReactInternalTreeConfig');
  } catch (x) {
    // eslint-disable-line no-undef
    if (typeof console !== 'undefined' && console.error) {
      // eslint-disable-line no-undef
      console.error(x);
    }
  }
}

export function createFiberRoot(
  containerInfo: Container,
  tag: RootTag,
  context: ReactContext<any, any>,
-  concurrentUpdatesByDeafultOverride: boolean | null,
+  // eslint-disable-next-line no-undef
+  initialProps: InitialProps | null,
  hydrationCallbacks: SuspenseHydrationCallbacks | void | null,
  // eslint-disable-next-line no-undef
  isStrictMode: boolean,
  // eslint-disable-next-line no-undef
  concurrentRoot: boolean,
  // eslint-disable-next-line no-undef
-  // TODO: Avoid passing these arguments
+  identifierPrefix: string,
+  onRecoverableError: (error: mixed) => void,
  // eslint-disable-next-line no-undef
-  onRecoverableError: (error: mixed) => void,
-  // eslint-disable-next-line no-undef
-  transitionCallbacks: TransitionTracingCallbacks | null,
+  // TODO: Avoid passing this argument. It should live on the renderer
+  // instead of inside shared Fiber files.
   // eslint-disable-next-line no-undef
-  // TODO: This is not passed in by createRoot. This is to support
-  //  createLegacyRoot where we don't have a renderer. Remove after RN port.
-  findDOMNode: ?Function,
+  transitionCallbacks: TransitionCallbacks | null,
 ): FiberRoot {
   const initialState: InitialState = {
     _isDocumentMode: false,
     element: null,
     _debugRootType: tag,
-    // We might set updatePriority later, but since we're creating
-    // the root now, initialize it to the root priority.
-    cachedUpdatePriority: getCurrentUpdatePriority(),
+    cachedUpdatePriority: NotPending,
     isConcurrent: concurrentRoot,
     isStrictMode,
     // Profiler store
@@ -1056,14 +1056,14 @@ export function updateContainer(
   element: ReactNodeList,
   fiber: Fiber,
   expirationTime: Lane,
-  callback: ?Function,
+  lanes: Lanes,
 ) {
   const current = fiber.alternate;
   scheduleUpdateOnFiber(current, element, expirationTime);
-  return null;
+  enqueueUpdate(fiber, null, lanes);
 }
 
 export function getPublicRootInstance(container: FiberRoot): React$Component<any, any> | Fiber | null {
@@ -1113,7 +1113,7 @@ export function findHostInstanceWithWarning(
   fiber: Fiber,
 ): FiberNode | null {
   if (__DEV__) {
-    const hostFiber = findCurrentFiberUsingSlowPath(fiber);
+    const hostFiber = findCurrentFiberUsingSlowPath(fiber-fix);
     if (hostFiber === null) {
       if (fiber.tag === CacheComponent) {
         console.error(


The file commit history has been processed, and the above represents the exact content of `ReactFiberLane.js` as it exists at the final commit in the provided log. Ensure this is accurate by verifying against the full sequence of diffs.