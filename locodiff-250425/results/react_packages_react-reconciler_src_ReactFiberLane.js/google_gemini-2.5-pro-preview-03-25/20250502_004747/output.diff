--- react_packages_react-reconciler_src_ReactFiberLane.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberLane.js_extracted.txt (actual)@@ -19,15 +19,20 @@ export type LaneMap<T> = Array<T>;
 
 import {
+  enableComponentPerformanceTrack,
   enableRetryLaneExpiration,
   enableSchedulingProfiler,
+  enableSiblingPrerendering,
+  enableSuspenseyCommit,
   enableTransitionTracing,
   enableUpdaterTracking,
   syncLaneExpirationMs,
   transitionLaneExpirationMs,
   retryLaneExpirationMs,
   disableLegacyMode,
-  enableSiblingPrerendering,
+  enableSwipeTransition,
+  enableViewTransition,
+  enableHydrationLaneScheduling,
 } from 'shared/ReactFeatureFlags';
 import {isDevToolsPresent} from './ReactFiberDevToolsHook';
 import {clz32} from './clz32';
@@ -125,6 +130,9 @@     }
     if (lane & DefaultLane) {
       return 'Default';
+    }
+    if (lane & GestureLane) {
+      return 'Gesture';
     }
     if (lane & TransitionHydrationLane) {
       return 'TransitionHydration';
@@ -239,19 +247,6 @@   const suspendedLanes = root.suspendedLanes;
   const pingedLanes = root.pingedLanes;
   const warmLanes = root.warmLanes;
-
-  // finishedLanes represents a completed tree that is ready to commit.
-  //
-  // It's not worth doing discarding the completed tree in favor of performing
-  // speculative work. So always check this before deciding to warm up
-  // the siblings.
-  //
-  // Note that this is not set in a "suspend indefinitely" scenario, like when
-  // suspending outside of a Suspense boundary, or in the shell during a
-  // transition â€” only in cases where we are very likely to commit the tree in
-  // a brief amount of time (i.e. below the "Just Noticeable Difference"
-  // threshold).
-  //
 
   // Do not work on any idle work until all the non-idle work has finished,
   // even if the work is suspended.
@@ -607,12 +602,7 @@ export function includesOnlyRetries(lanes: Lanes): boolean {
   return (lanes & RetryLanes) === lanes;
 }
-export function includesOnlyNonUrgentLanes(lanes: Lanes): boolean {
-  // TODO: Should hydration lanes be included here? This function is only
-  // used in `updateDeferredValueImpl`.
-  const UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
-  return (lanes & UrgentLanes) === NoLanes;
-}
+
 export function includesOnlyTransitions(lanes: Lanes): boolean {
   return (lanes & TransitionLanes) === lanes;
 }
@@ -666,7 +656,8 @@     InputContinuousHydrationLane |
     InputContinuousLane |
     DefaultHydrationLane |
-    DefaultLane;
+    DefaultLane |
+    GestureLane;
   return (lane & SyncDefaultLanes) !== NoLanes;
 }
 
@@ -787,7 +778,9 @@   if (updateLane !== IdleLane) {
     root.suspendedLanes = NoLanes;
     root.pingedLanes = NoLanes;
-    root.warmLanes = NoLanes;
+    if (enableSiblingPrerendering) {
+      root.warmLanes = NoLanes;
+    }
   }
 }
 
@@ -829,9 +822,11 @@ 
 export function markRootPinged(root: FiberRoot, pingedLanes: Lanes) {
   root.pingedLanes |= root.suspendedLanes & pingedLanes;
-  // The data that just resolved could have unblocked additional children, which
-  // will also need to be prewarmed if something suspends again.
-  root.warmLanes &= ~pingedLanes;
+  if (enableSiblingPrerendering) {
+    // The data that just resolved could have unblocked additional children, which
+    // will also need to be prewarmed if something suspends again.
+    root.warmLanes &= ~pingedLanes;
+  }
 }
 
 export function markRootFinished(
@@ -850,7 +845,9 @@   // Let's try everything again
   root.suspendedLanes = NoLanes;
   root.pingedLanes = NoLanes;
-  root.warmLanes = NoLanes;
+  if (enableSiblingPrerendering) {
+    root.warmLanes = NoLanes;
+  }
 
   root.expiredLanes &= remainingLanes;
 
