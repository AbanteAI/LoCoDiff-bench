
index 37fc273c..f602c5ba 100644
--- a/aider_scripts_blame.py_expectedoutput.txt (expected):tmp/tmpxg2obxuv_expected.txt	
+++ b/aider_scripts_blame.py_extracted.txt (actual):tmp/tmp8tmif4ib_actual.txt	
@@ -1,22 +1,18 @@
 #!/usr/bin/env python3
 
 import argparse
-import os
 import subprocess
 import sys
 from collections import defaultdict
 from datetime import datetime
 from operator import itemgetter
-
 import semver
 import yaml
 from tqdm import tqdm
 
 website_files = [
-    "aider/website/index.html",
     "aider/website/share/index.md",
     "aider/website/_includes/head_custom.html",
-    "aider/website/_includes/home.css",
     "aider/website/docs/leaderboards/index.md",
 ]
 
@@ -34,15 +30,13 @@ def blame(start_tag, end_tag=None):
 
     revision = end_tag if end_tag else "HEAD"
     files = run(["git", "ls-tree", "-r", "--name-only", revision]).strip().split("\n")
-    test_files = [f for f in files if f.startswith("tests/fixtures/languages/") and "/test." in f]
     files = [
         f
         for f in files
         if f.endswith((".js", ".py", ".scm", ".sh", "Dockerfile", "Gemfile"))
         or (f.startswith(".github/aider_scripts_blame.py_extracted.txt (actual):
     tags = get_all_tags_since(start_tag)
-    # tags += ['HEAD']
+    tags += ["HEAD"]
 
     results = []
     for i in tqdm(range(len(tags) - 1), desc="Processing tags"):
@@ -129,14 +123,6 @@ def process_all_tags_since(start_tag):
     return results
 
 
-def get_latest_version_tag():
-    all_tags = run(["git", "tag", "--sort=-v:refname"]).strip().split("\n")
-    for tag in all_tags:
-        if semver.Version.is_valid(tag[1:]) and tag.endswith(".0"):
-            return tag
-    return None
-
-
 def main():
     parser = argparse.ArgumentParser(description="Get aider/non-aider blame stats")
     parser.add_argument("start_tag", nargs="?", help="The tag to start from (optional)")
@@ -149,9 +135,7 @@ def main():
             " successive tags"
         ),
     )
-    parser.add_argument(
-        "--output", help="Output file to save the YAML results", type=str, default=None
-    )
+    parser.add_argument("--output", help="Output file to save the YAML results", type=str, default=None)
     args = parser.parse_args()
 
     if not args.start_tag:
@@ -161,31 +145,8 @@ def main():
             return
 
     if args.all_since:
-        new_results = process_all_tags_since(args.start_tag)
-
-        # If output file exists, read and update it
-        existing_results = []
-        if args.output and os.path.exists(args.output):
-            with open(args.output, "r") as f:
-                existing_results = yaml.safe_load(f) or []
-
-        # Create a map of start_tag->end_tag to result for existing entries
-        existing_map = {(r["start_tag"], r["end_tag"]): i for i, r in enumerate(existing_results)}
-
-        # Update or append new results
-        for new_result in new_results:
-            key = (new_result["start_tag"], new_result["end_tag"])
-            if key in existing_map:
-                # Replace existing entry
-                existing_results[existing_map[key]] = new_result
-            else:
-                # Append new entry
-                existing_results.append(new_result)
-
-        # Sort results by start_tag
-        existing_results.sort(key=lambda x: semver.Version.parse(x["start_tag"][1:]))
-
-        yaml_output = yaml.dump(existing_results, sort_keys=True)
+        results = process_all_tags_since(args.start_tag)
+        yaml_output = yaml.dump(results, sort_keys=True)
     else:
         all_file_counts, grand_total, total_lines, aider_total, aider_percentage, end_date = blame(
             args.start_tag, args.end_tag
@@ -212,7 +173,7 @@ def main():
             f.write(yaml_output)
     else:
         print(yaml_output)
-
+        
     if not args.all_since:
         print(f"- Aider wrote {round(aider_percentage)}% of the code in this release.")
 
