
index 37fc273c..d1e01230 100644
--- a/aider_scripts_blame.py_expectedoutput.txt (expected):tmp/tmpk364cdd4_expected.txt	
+++ b/aider_scripts_blame.py_extracted.txt (actual):tmp/tmpvd_ycmy2_actual.txt	
@@ -80,7 +80,6 @@ def get_all_commit_hashes_between_tags(start_tag, end_tag=None):
 
 
 def run(cmd):
-    # Get all commit hashes since the specified tag
     result = subprocess.run(cmd, capture_output=True, text=True, check=True)
     return result.stdout
 
@@ -101,7 +100,7 @@ hash_len = len("44e6fefc2")
 
 def process_all_tags_since(start_tag):
     tags = get_all_tags_since(start_tag)
-    # tags += ['HEAD']
+    tags += ["HEAD"]
 
     results = []
     for i in tqdm(range(len(tags) - 1), desc="Processing tags"):
@@ -149,9 +148,7 @@ def main():
             " successive tags"
         ),
     )
-    parser.add_argument(
-        "--output", help="Output file to save the YAML results", type=str, default=None
-    )
+    parser.add_argument("--output", help="Output file to save the YAML results", type=str, default=None)
     args = parser.parse_args()
 
     if not args.start_tag:
@@ -163,28 +160,21 @@ def main():
     if args.all_since:
         new_results = process_all_tags_since(args.start_tag)
 
-        # If output file exists, read and update it
         existing_results = []
         if args.output and os.path.exists(args.output):
             with open(args.output, "r") as f:
                 existing_results = yaml.safe_load(f) or []
 
-        # Create a map of start_tag->end_tag to result for existing entries
         existing_map = {(r["start_tag"], r["end_tag"]): i for i, r in enumerate(existing_results)}
 
-        # Update or append new results
         for new_result in new_results:
             key = (new_result["start_tag"], new_result["end_tag"])
             if key in existing_map:
-                # Replace existing entry
                 existing_results[existing_map[key]] = new_result
             else:
-                # Append new entry
                 existing_results.append(new_result)
 
-        # Sort results by start_tag
         existing_results.sort(key=lambda x: semver.Version.parse(x["start_tag"][1:]))
-
         yaml_output = yaml.dump(existing_results, sort_keys=True)
     else:
         all_file_counts, grand_total, total_lines, aider_total, aider_percentage, end_date = blame(
@@ -224,10 +214,10 @@ def get_counts_for_file(start_tag, end_tag, authors, fname):
                 [
                     "git",
                     "blame",
-                    "-M100",  # Detect moved lines within a file with 100% similarity
-                    "-C100",  # Detect moves across files with 100% similarity
-                    "-C",  # Increase detection effort
-                    "-C",  # Increase detection effort even more
+                    "-M100",
+                    "-C100",
+                    "-C",
+                    "-C",
                     "--abbrev=9",
                     f"{start_tag}..{end_tag}",
                     "--",
@@ -239,10 +229,10 @@ def get_counts_for_file(start_tag, end_tag, authors, fname):
                 [
                     "git",
                     "blame",
-                    "-M100",  # Detect moved lines within a file with 100% similarity
-                    "-C100",  # Detect moves across files with 100% similarity
-                    "-C",  # Increase detection effort
-                    "-C",  # Increase detection effort even more
+                    "-M100",
+                    "-C100",
+                    "-C",
+                    "-C",
                     "--abbrev=9",
                     f"{start_tag}..HEAD",
                     "--",
@@ -263,17 +253,15 @@ def get_counts_for_file(start_tag, end_tag, authors, fname):
         return dict(line_counts)
     except subprocess.CalledProcessError as e:
         if "no such path" in str(e).lower():
-            # File doesn't exist in this revision range, which is okay
             return None
         else:
-            # Some other error occurred
             print(f"Warning: Unable to blame file {fname}. Error: {e}", file=sys.stderr)
             return None
 
 
 def get_all_tags_since(start_tag):
     all_tags = run(["git", "tag", "--sort=v:refname"]).strip().split("\n")
-    start_version = semver.Version.parse(start_tag[1:])  # Remove 'v' prefix
+    start_version = semver.Version.parse(start_tag[1:])
     filtered_tags = [
         tag
         for tag in all_tags
