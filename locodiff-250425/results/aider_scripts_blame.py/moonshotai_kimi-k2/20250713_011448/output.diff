
index 37fc273c9..8d3c9926a 100644
--- a/aider_scripts_blame.py_expectedoutput.txt (expected):tmp/tmpk8nacphd_expected.txt	
+++ b/aider_scripts_blame.py_extracted.txt (actual):tmp/tmpetjix6qt_actual.txt	
@@ -3,7 +3,6 @@
 import argparse
 import os
 import subprocess
-import sys
 from collections import defaultdict
 from datetime import datetime
 from operator import itemgetter
@@ -34,13 +33,22 @@ def blame(start_tag, end_tag=None):
 
     revision = end_tag if end_tag else "HEAD"
     files = run(["git", "ls-tree", "-r", "--name-only", revision]).strip().split("\n")
+    files = [
+        f
+        for f in files
+        if f.endswith((".js", ".py", ".scm", ".sh", "Dockerfile", "Gemfile"))
+        or (f.startswith(".github/aider_scripts_blame.py_extracted.txt (actual):
     return results
 
 
-def get_latest_version_tag():
-    all_tags = run(["git", "tag", "--sort=-v:refname"]).strip().split("\n")
-    for tag in all_tags:
-        if semver.Version.is_valid(tag[1:]) and tag.endswith(".0"):
-            return tag
-    return None
-
-
 def main():
     parser = argparse.ArgumentParser(description="Get aider/non-aider blame stats")
     parser.add_argument("start_tag", nargs="?", help="The tag to start from (optional)")
@@ -149,9 +149,7 @@ def main():
             " successive tags"
         ),
     )
-    parser.add_argument(
-        "--output", help="Output file to save the YAML results", type=str, default=None
-    )
+    parser.add_argument("--output", help="Output file to save the YAML results", type=str, default=None)
     args = parser.parse_args()
 
     if not args.start_tag:
@@ -282,6 +280,14 @@ def get_all_tags_since(start_tag):
     return [tag for tag in filtered_tags if tag.endswith(".0")]
 
 
+def get_latest_version_tag():
+    all_tags = run(["git", "tag", "--sort=-v:refname"]).strip().split("\n")
+    for tag in all_tags:
+        if semver.Version.is_valid(tag[1:]) and tag.endswith(".0"):
+            return tag
+    return None
+
+
 def get_tag_date(tag):
     date_str = run(["git", "log", "-1", "--format=%ai", tag]).strip()
     return datetime.strptime(date_str, "%Y-%m-%d %H:%M:%S %z")
