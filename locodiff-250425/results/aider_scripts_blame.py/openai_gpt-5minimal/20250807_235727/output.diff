
index 37fc273c9..7841f7d0a 100644
--- a/aider_scripts_blame.py_expectedoutput.txt (expected):tmp/tmpjoqbaoe1_expected.txt	
+++ b/aider_scripts_blame.py_extracted.txt (actual):tmp/tmpv3_5i9j3_actual.txt	
@@ -20,11 +20,6 @@ website_files = [
     "aider/website/docs/leaderboards/index.md",
 ]
 
-exclude_files = [
-    "aider/website/install.ps1",
-    "aider/website/install.sh",
-]
-
 
 def blame(start_tag, end_tag=None):
     commits = get_all_commit_hashes_between_tags(start_tag, end_tag)
@@ -98,6 +93,11 @@ def get_commit_authors(commits):
 
 hash_len = len("44e6fefc2")
 
+exclude_files = [
+    "aider/website/install.ps1",
+    "aider/website/install.sh",
+]
+
 
 def process_all_tags_since(start_tag):
     tags = get_all_tags_since(start_tag)
@@ -111,9 +111,10 @@ def process_all_tags_since(start_tag):
         )
         results.append(
             {
-                "start_tag": start_tag,
-                "end_tag": end_tag,
+                "aider_percentage": round(aider_percentage, 2),
+                "aider_total": aider_total,
                 "end_date": end_date.strftime("%Y-%m-%d"),
+                "end_tag": end_tag,
                 "file_counts": all_file_counts,
                 "grand_total": {
                     author: count
@@ -121,9 +122,8 @@ def process_all_tags_since(start_tag):
                         grand_total.items(), key=itemgetter(1), reverse=True
                     )
                 },
+                "start_tag": start_tag,
                 "total_lines": total_lines,
-                "aider_total": aider_total,
-                "aider_percentage": round(aider_percentage, 2),
             }
         )
     return results
@@ -192,17 +192,17 @@ def main():
         )
 
         result = {
-            "start_tag": args.start_tag,
-            "end_tag": args.end_tag or "HEAD",
+            "aider_percentage": round(aider_percentage, 2),
+            "aider_total": aider_total,
             "end_date": end_date.strftime("%Y-%m-%d"),
+            "end_tag": args.end_tag or "HEAD",
             "file_counts": all_file_counts,
             "grand_total": {
                 author: count
                 for author, count in sorted(grand_total.items(), key=itemgetter(1), reverse=True)
             },
+            "start_tag": args.start_tag,
             "total_lines": total_lines,
-            "aider_total": aider_total,
-            "aider_percentage": round(aider_percentage, 2),
         }
 
         yaml_output = yaml.dump(result, sort_keys=True)
