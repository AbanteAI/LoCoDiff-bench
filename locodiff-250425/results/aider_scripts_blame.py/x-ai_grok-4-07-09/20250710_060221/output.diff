
index 37fc273c9..a4a30974f 100644
--- a/aider_scripts_blame.py_expectedoutput.txt (expected):tmp/tmp33rb4_2r_expected.txt	
+++ b/aider_scripts_blame.py_extracted.txt (actual):tmp/tmpg7in3im4_actual.txt	
@@ -80,7 +80,6 @@ def get_all_commit_hashes_between_tags(start_tag, end_tag=None):
 
 
 def run(cmd):
-    # Get all commit hashes since the specified tag
     result = subprocess.run(cmd, capture_output=True, text=True, check=True)
     return result.stdout
 
@@ -111,9 +110,10 @@ def process_all_tags_since(start_tag):
         )
         results.append(
             {
-                "start_tag": start_tag,
-                "end_tag": end_tag,
+                "aider_lines": aider_total,
+                "aider_percentage": round(aider_percentage, 2),
                 "end_date": end_date.strftime("%Y-%m-%d"),
+                "end_tag": end_tag,
                 "file_counts": all_file_counts,
                 "grand_total": {
                     author: count
@@ -121,9 +121,8 @@ def process_all_tags_since(start_tag):
                         grand_total.items(), key=itemgetter(1), reverse=True
                     )
                 },
+                "start_tag": start_tag,
                 "total_lines": total_lines,
-                "aider_total": aider_total,
-                "aider_percentage": round(aider_percentage, 2),
             }
         )
     return results
@@ -149,9 +148,7 @@ def main():
             " successive tags"
         ),
     )
-    parser.add_argument(
-        "--output", help="Output file to save the YAML results", type=str, default=None
-    )
+    parser.add_argument("--output", help="Output file to save the YAML results", type=str, default=None)
     args = parser.parse_args()
 
     if not args.start_tag:
@@ -192,17 +189,17 @@ def main():
         )
 
         result = {
-            "start_tag": args.start_tag,
-            "end_tag": args.end_tag or "HEAD",
+            "aider_percentage": round(aider_percentage, 2),
+            "aider_total": aider_total,
             "end_date": end_date.strftime("%Y-%m-%d"),
+            "end_tag": args.end_tag or "HEAD",
             "file_counts": all_file_counts,
             "grand_total": {
                 author: count
                 for author, count in sorted(grand_total.items(), key=itemgetter(1), reverse=True)
             },
+            "start_tag": args.start_tag,
             "total_lines": total_lines,
-            "aider_total": aider_total,
-            "aider_percentage": round(aider_percentage, 2),
         }
 
         yaml_output = yaml.dump(result, sort_keys=True)
