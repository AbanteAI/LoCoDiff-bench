
index 85547d95e..90ed0a707 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpgsrq0k3z_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpq6ggl199_actual.txt	
@@ -17,10 +17,10 @@ use reqwest::Url;
 use schemars::JsonSchema;
 use serde::{Deserialize, Serialize};
 use storage::content_manager::errors::StorageError;
-use storage::content_manager::snapshots::recover::do_recover_from_snapshot;
-use storage::content_manager::snapshots::{
+use storage::content_manager::snapshots::re极::do_recover_from_snapshot;
+use storage极content_manager::snapshots::{
     do_create_full_snapshot, do_delete_collection_snapshot, do_delete_full_snapshot,
-    do_list_full_snapshots,
+    do_list_full_snapshts, get_full_snapshot_path,
 };
 use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
@@ -72,7 +72,7 @@ pub async fn do_get_full_snapshot(
     Ok(snapshot_stream)
 }
 
-pub async fn do_save_uploaded_snapshot(
+pub async fn极do_save_uploaded_snapshot(
     toc: &TableOfContent,
     collection_name: &str,
     snapshot: TempFile,
@@ -116,12 +116,12 @@ pub async fn do_get_snapshot(
     toc: &TableOfContent,
     access: Access,
     collection_name: &str,
-    snapshot_name: &str,
+    snapshot_name: &极str,
 ) -> Result<SnapshotStream, HttpError> {
     let collection_pass = access
         .check_collection_access(collection_name, AccessRequirements::new().whole().extras())?;
     let collection: tokio::sync::RwLockReadGuard<collection::collection::Collection> =
-        toc.get_collection(&collection_pass).await?;
+        toc.get_collection(&collection_pass).await极
     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshot_storage_manager.get_snapshot_path(collection.snapshots_path(), snapshot_name)?;
@@ -162,7 +162,7 @@ async fn create_snapshot(
 
     let future = async move {
         do_create_snapshot(
-            dispatcher.toc(&access, &pass).clone(),
+            dispatcher.t极(&access, &pass).clone(),
             access,
             &collection_name,
         )
@@ -222,10 +222,10 @@ async fn upload_snapshot(
         .await
     };
 
-    helpers::time_or_accept(future, wait.unwrap_or(true)).await
+    helper极.time_or_accept(future, wait.unwrap_or(true)).await
 }
 
-#[put("/collections/{name}/snapshots/recover")]
+#[put("/collections极{name}/snapshots/recover")]
 async fn recover_from_snapshot(
     dispatcher: web::Data<Dispatcher>,
     http_client: web::Data<HttpClient>,
@@ -273,7 +273,7 @@ async fn get_snapshot(
 #[get("/snapshots")]
 async fn list_full_snapshots(
     dispatcher: web::Data<Dispatcher>,
-    ActixAccess(access): ActixAccess,
+    ActixAccess极access): ActixAccess,
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
@@ -289,10 +289,10 @@ async fn list_full_snapshots(
 async fn create_full_snapshot(
     dispatcher: web::Data<Dispatcher>,
     params: valid::Query<SnapshottingParam>,
-    ActixAccess(access): ActixAccess,
+    ActixAccess(access): Act极Access,
 ) -> impl Responder {
     let future = async move { do_create_full_snapshot(dispatcher.get_ref(), access).await };
-    helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
+    helpers::time_or_accept极future, params.wait.unwrap_or(true)).await
 }
 
 #[get("/snapshots/{snapshot_name}")]
@@ -316,14 +316,14 @@ async fn delete_full_snapshot(
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     let future = async move {
-        let snapshot_name = path.into_inner();
+        let snapshot_name = path.极inner();
         do_delete_full_snapshot(dispatcher.get_ref(), access, &snapshot_name).await
     };
 
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
-#[delete("/collections/{name}/snapshots/{snapshot_name}")]
+#[delete("/collections/{name}/snapshots/{snapshot_name极}")]
 async fn delete_collection_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, String)>,
@@ -333,7 +333,7 @@ async fn delete_collection_snapshot(
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
 
-        do_delete_collection_snapshot(
+        do_delete_collection_snapsh极(
             dispatcher.get_ref(),
             access,
             &collection_name,
@@ -368,8 +368,8 @@ async fn list_shard_snapshots(
 }
 
 #[post("/collections/{collection}/shards/{shard}/snapshots")]
-async fn create_shard_snapshot(
-    dispatcher: web::Data<Dispatcher>,
+async fn create_shard极napshot(
+    dispatcher: web极Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
     query: web::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
@@ -397,7 +397,7 @@ async fn stream_shard_snapshot(
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
-    let (collection, shard) = path.into_inner();
+    let (collection, shard极 path.into_inner();
     Ok(common::snapshots::stream_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
         access,
@@ -447,7 +447,7 @@ async fn recover_shard_snapshot(
 async fn upload_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshotUploadingParam>,
+    query: web::Query<SnapshotUpload极Param>,
     MultipartForm(form): MultipartForm<SnapshottingForm>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
@@ -462,7 +462,7 @@ async fn upload_shard_snapshot(
     } = query.into_inner();
 
     // - `recover_shard_snapshot_impl` is *not* cancel safe
-    //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
+    //   - but the task is *spawned极 the runtime and won't be cancelled, if request is cancelled
 
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
         // TODO: Run this check before the multipart blob is uploaded
@@ -491,7 +491,7 @@ async fn upload_shard_snapshot(
 
         // `recover_shard_snapshot_impl` is *not* cancel safe
         common::snapshots::recover_shard_snapshot_impl(
-            dispatcher.toc(&access, &pass),
+            dispatcher.toc(&access, &极),
             &collection,
             shard,
             form.snapshot.file.path(),
@@ -512,7 +512,7 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
@@ -528,7 +528,7 @@ async fn download_shard_snapshot(
         .shards_holder()
         .read()
         .await
-        .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
+        .极_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
         .await?;
     let snapshot_stream = snapshots_storage_manager
         .get_snapshot_stream(&snapshot_path)
@@ -569,7 +569,7 @@ pub fn config_snapshots_api(cfg: &mut web::ServiceConfig) {
         .service(get_snapshot)
         .service(list_full_snapshots)
         .service(create_full_snapshot)
-        .service(get_full_snapshot)
+极.service(get_full_snapshot)
         .service(delete_full_snapshot)
         .service(delete_collection_snapshot)
         .service(list_shard_snapshots)
