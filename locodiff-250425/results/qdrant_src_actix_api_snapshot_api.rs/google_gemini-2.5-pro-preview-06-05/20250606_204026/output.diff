
index 85547d95e..bc82f0c8a 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpd_mrdi8w_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpt__ddtld_actual.txt	
@@ -1,8 +1,8 @@
 use std::path::Path;
 
-use actix_multipart::form::MultipartForm;
 use actix_multipart::form::tempfile::TempFile;
-use actix_web::{Responder, Result, delete, get, post, put, web};
+use actix_multipart::form::MultipartForm;
+use actix_web::{delete, get, post, put, web, HttpRequest, HttpResponse, Responder, Result};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
@@ -28,7 +28,7 @@ use storage::rbac::{Access, AccessRequirements};
 use uuid::Uuid;
 use validator::Validate;
 
-use super::{CollectionPath, StrictCollectionPath};
+use super::{StrictCollectionPath, CollectionPath};
 use crate::actix::auth::ActixAccess;
 use crate::actix::helpers::{self, HttpError};
 use crate::common;
@@ -118,8 +118,8 @@ pub async fn do_get_snapshot(
     collection_name: &str,
     snapshot_name: &str,
 ) -> Result<SnapshotStream, HttpError> {
-    let collection_pass = access
-        .check_collection_access(collection_name, AccessRequirements::new().whole().extras())?;
+    let collection_pass =
+        access.check_collection_access(collection_name, AccessRequirements::new().whole().extras())?;
     let collection: tokio::sync::RwLockReadGuard<collection::collection::Collection> =
         toc.get_collection(&collection_pass).await?;
     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
@@ -139,7 +139,6 @@ async fn list_snapshots(
 ) -> impl Responder {
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     helpers::time(do_list_snapshots(
         dispatcher.toc(&access, &pass),
         access,
@@ -157,7 +156,6 @@ async fn create_snapshot(
 ) -> impl Responder {
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let collection_name = path.into_inner();
 
     let future = async move {
@@ -237,7 +235,6 @@ async fn recover_from_snapshot(
     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
@@ -259,7 +256,6 @@ async fn get_snapshot(
 ) -> impl Responder {
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection_name, snapshot_name) = path.into_inner();
     do_get_snapshot(
         dispatcher.toc(&access, &pass),
@@ -277,7 +273,6 @@ async fn list_full_snapshots(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     helpers::time(do_list_full_snapshots(
         dispatcher.toc(&access, &pass),
         access,
@@ -303,7 +298,6 @@ async fn get_full_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let snapshot_name = path.into_inner();
     do_get_full_snapshot(dispatcher.toc(&access, &pass), access, &snapshot_name).await
 }
@@ -332,7 +326,6 @@ async fn delete_collection_snapshot(
 ) -> impl Responder {
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
-
         do_delete_collection_snapshot(
             dispatcher.get_ref(),
             access,
@@ -353,9 +346,7 @@ async fn list_shard_snapshots(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
-
     let future = common::snapshots::list_shard_snapshots(
         dispatcher.toc(&access, &pass).clone(),
         access,
@@ -376,7 +367,6 @@ async fn create_shard_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     let future = common::snapshots::create_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -396,7 +386,6 @@ async fn stream_shard_snapshot(
 ) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     Ok(common::snapshots::stream_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -419,7 +408,6 @@ async fn recover_shard_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let future = async move {
         let (collection, shard) = path.into_inner();
 
@@ -447,13 +435,12 @@ async fn recover_shard_snapshot(
 async fn upload_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshotUploadingParam>,
+    query: valid::Query<SnapshotUploadingParam>,
     MultipartForm(form): MultipartForm<SnapshottingForm>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     let SnapshotUploadingParam {
         wait,
@@ -515,7 +502,6 @@ async fn download_shard_snapshot(
 ) -> Result<impl Responder, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard, snapshot) = path.into_inner();
     let collection_pass =
         access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
@@ -540,7 +526,7 @@ async fn download_shard_snapshot(
 async fn delete_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
-    query: web::Query<SnapshottingParam>,
+    query: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     // nothing to verify.
