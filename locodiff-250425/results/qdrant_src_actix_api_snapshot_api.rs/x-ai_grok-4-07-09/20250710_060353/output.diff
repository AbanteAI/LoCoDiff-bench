
index 85547d95e..633ef82d2 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpkit_vgtr_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmp62u62n36_actual.txt	
@@ -7,9 +7,7 @@ use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
 use collection::common::snapshot_stream::SnapshotStream;
-use collection::operations::snapshot_ops::{
-    ShardSnapshotRecover, SnapshotPriority, SnapshotRecover,
-};
+use collection::operations::snapshot_ops::{ShardSnapshotRecover, SnapshotPriority, SnapshotRecover};
 use collection::operations::verification::new_unchecked_verification_pass;
 use collection::shards::shard::ShardId;
 use futures::{FutureExt as _, TryFutureExt as _};
@@ -18,10 +16,7 @@ use schemars::JsonSchema;
 use serde::{Deserialize, Serialize};
 use storage::content_manager::errors::StorageError;
 use storage::content_manager::snapshots::recover::do_recover_from_snapshot;
-use storage::content_manager::snapshots::{
-    do_create_full_snapshot, do_delete_collection_snapshot, do_delete_full_snapshot,
-    do_list_full_snapshots,
-};
+use storage::content_manager::snapshots::{do_create_full_snapshot, do_delete_collection_snapshot, do_delete_full_snapshot, do_list_full_snapshots};
 use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
 use storage::rbac::{Access, AccessRequirements};
@@ -181,8 +176,6 @@ async fn upload_snapshot(
     params: valid::Query<SnapshotUploadingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    let wait = params.wait;
-
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
 
@@ -198,9 +191,12 @@ async fn upload_snapshot(
             }
         }
 
-        let snapshot_location =
-            do_save_uploaded_snapshot(dispatcher.toc(&access, &pass), &collection.name, snapshot)
-                .await?;
+        let snapshot_location = do_save_uploaded_snapshot(
+            dispatcher.toc(&access, &pass),
+            &collection.name,
+            snapshot,
+        )
+        .await?;
 
         // Snapshot is a local file, we do not need an API key for that
         let http_client = http_client.client(None)?;
@@ -222,14 +218,14 @@ async fn upload_snapshot(
         .await
     };
 
-    helpers::time_or_accept(future, wait.unwrap_or(true)).await
+    helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
 #[put("/collections/{name}/snapshots/recover")]
 async fn recover_from_snapshot(
     dispatcher: web::Data<Dispatcher>,
     http_client: web::Data<HttpClient>,
-    collection: valid::Path<CollectionPath>,
+    collection: valid::Path<StrictCollectionPath>,
     request: valid::Json<SnapshotRecover>,
     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
@@ -317,6 +313,7 @@ async fn delete_full_snapshot(
 ) -> impl Responder {
     let future = async move {
         let snapshot_name = path.into_inner();
+
         do_delete_full_snapshot(dispatcher.get_ref(), access, &snapshot_name).await
     };
 
@@ -461,9 +458,6 @@ async fn upload_shard_snapshot(
         checksum,
     } = query.into_inner();
 
-    // - `recover_shard_snapshot_impl` is *not* cancel safe
-    //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
-
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
         // TODO: Run this check before the multipart blob is uploaded
         let collection_pass = access
@@ -484,7 +478,7 @@ async fn upload_shard_snapshot(
                 .await?;
             collection.assert_shard_exists(shard).await?;
 
-            Result::<_, StorageError>::Ok(collection)
+            Ok(collection)
         };
 
         let collection = cancel::future::cancel_on_token(cancel.clone(), future).await??;
@@ -501,8 +495,8 @@ async fn upload_shard_snapshot(
         .await?;
 
         Ok(())
-    })
-    .map(|x| x.map_err(Into::into).and_then(|x| x));
+    }
+    .map(|x| x.map_err(Into::into).and_then(|x| x)));
 
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
 }
@@ -512,13 +506,13 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     let (collection, shard, snapshot) = path.into_inner();
-    let collection_pass =
-        access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
+    let collection_pass = access
+        .check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
     let collection = dispatcher
         .toc(&access, &pass)
         .get_collection(&collection_pass)
