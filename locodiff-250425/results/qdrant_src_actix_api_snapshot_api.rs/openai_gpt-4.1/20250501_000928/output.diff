
index 85547d95..fbb0a4a9 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpkkru7t20_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpvey2rqk3_actual.txt	
@@ -237,7 +237,6 @@ async fn recover_from_snapshot(
     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
@@ -332,7 +331,6 @@ async fn delete_collection_snapshot(
 ) -> impl Responder {
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
-
         do_delete_collection_snapshot(
             dispatcher.get_ref(),
             access,
@@ -465,7 +463,7 @@ async fn upload_shard_snapshot(
     //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
 
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
-        // TODO: Run this check before the multipart blob is uploaded
+        // nothing to verify.
         let collection_pass = access
             .check_global_access(AccessRequirements::new().manage())?
             .issue_pass(&collection);
@@ -496,13 +494,13 @@ async fn upload_shard_snapshot(
             shard,
             form.snapshot.file.path(),
             priority.unwrap_or_default(),
+            checksum,
             cancel,
         )
         .await?;
 
         Ok(())
-    })
-    .map(|x| x.map_err(Into::into).and_then(|x| x));
+    });
 
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
 }
@@ -512,7 +510,7 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
