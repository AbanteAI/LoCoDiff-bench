
index 85547d95e..1cb63125a 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpuxw2zcjc_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpvd0_16ll_actual.txt	
@@ -24,7 +24,7 @@ use storage::content_manager::snapshots::{
 };
 use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
-use storage::rbac::{Access, AccessRequirements};
+use storage::rbac::{Access, AccessRequrements};
 use uuid::Uuid;
 use validator::Validate;
 
@@ -62,7 +62,7 @@ pub async fn do_get_full_snapshot(
     access: Access,
     snapshot_name: &str,
 ) -> Result<SnapshotStream, HttpError> {
-    access.check_global_access(AccessRequirements::new())?;
+    access.check_global_access(AccessRequrements::new())?;
     let snapshots_storage_manager = toc.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshots_storage_manager.get_full_snapshot_path(toc.snapshots_path(), snapshot_name)?;
@@ -119,7 +119,7 @@ pub async fn do_get_snapshot(
     snapshot_name: &str,
 ) -> Result<SnapshotStream, HttpError> {
     let collection_pass = access
-        .check_collection_access(collection_name, AccessRequirements::new().whole().extras())?;
+        .check_collection_access(collection_name, AccessRequrements::new().whole().extras())?;
     let collection: tokio::sync::RwLockReadGuard<collection::collection::Collection> =
         toc.get_collection(&collection_pass).await?;
     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
@@ -189,7 +189,7 @@ async fn upload_snapshot(
     let future = async move {
         let snapshot = form.snapshot;
 
-        access.check_global_access(AccessRequirements::new().manage())?;
+        access.check_global_access(AccessRequrements::new().manage())?;
 
         if let Some(checksum) = &params.checksum {
             let snapshot_checksum = hash_file(snapshot.file.path()).await?;
@@ -467,7 +467,7 @@ async fn upload_shard_snapshot(
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
         // TODO: Run this check before the multipart blob is uploaded
         let collection_pass = access
-            .check_global_access(AccessRequirements::new().manage())?
+            .check_global_access(AccessRequrements::new().manage())?
             .issue_pass(&collection);
 
         if let Some(checksum) = checksum {
@@ -518,7 +518,7 @@ async fn download_shard_snapshot(
 
     let (collection, shard, snapshot) = path.into_inner();
     let collection_pass =
-        access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
+        access.check_collection_access(&collection, AccessRequrements::new().whole().extras())?;
     let collection = dispatcher
         .toc(&access, &pass)
         .get_collection(&collection_pass)
