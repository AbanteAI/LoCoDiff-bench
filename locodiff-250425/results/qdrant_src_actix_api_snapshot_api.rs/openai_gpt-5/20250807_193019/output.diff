
index 85547d95e..eaa539958 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpgce6kgjs_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpbaa167ot_actual.txt	
@@ -7,9 +7,7 @@ use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
 use collection::common::snapshot_stream::SnapshotStream;
-use collection::operations::snapshot_ops::{
-    ShardSnapshotRecover, SnapshotPriority, SnapshotRecover,
-};
+use collection::operations::snapshot_ops::{ShardSnapshotRecover, SnapshotPriority, SnapshotRecover};
 use collection::operations::verification::new_unchecked_verification_pass;
 use collection::shards::shard::ShardId;
 use futures::{FutureExt as _, TryFutureExt as _};
@@ -436,7 +434,7 @@ async fn recover_shard_snapshot(
         )
         .await?;
 
-        Ok(true)
+        Ok::<_, HttpError>(true)
     };
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
@@ -512,7 +510,7 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
@@ -554,7 +552,6 @@ async fn delete_shard_snapshot(
         shard,
         snapshot,
     )
-    .map_ok(|_| true)
     .map_err(Into::into);
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
