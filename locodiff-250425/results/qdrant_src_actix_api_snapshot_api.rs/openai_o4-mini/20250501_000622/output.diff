
index 85547d95..33a9119e 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmpm3go7_9k_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmptvdfnkm0_actual.txt	
@@ -1,15 +1,13 @@
 use std::path::Path;
 
-use actix_multipart::form::MultipartForm;
 use actix_multipart::form::tempfile::TempFile;
+use actix_multipart::form::MultipartForm;
 use actix_web::{Responder, Result, delete, get, post, put, web};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
 use collection::common::snapshot_stream::SnapshotStream;
-use collection::operations::snapshot_ops::{
-    ShardSnapshotRecover, SnapshotPriority, SnapshotRecover,
-};
+use collection::operations::snapshot_ops::{ShardSnapshotRecover, SnapshotPriority, SnapshotRecover};
 use collection::operations::verification::new_unchecked_verification_pass;
 use collection::shards::shard::ShardId;
 use futures::{FutureExt as _, TryFutureExt as _};
@@ -20,7 +18,6 @@ use storage::content_manager::errors::StorageError;
 use storage::content_manager::snapshots::recover::do_recover_from_snapshot;
 use storage::content_manager::snapshots::{
     do_create_full_snapshot, do_delete_collection_snapshot, do_delete_full_snapshot,
-    do_list_full_snapshots,
 };
 use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
@@ -35,28 +32,21 @@ use crate::common;
 use crate::common::collections::*;
 use crate::common::http_client::HttpClient;
 
-#[derive(Deserialize, Serialize, JsonSchema, Validate)]
+#[derive(Deserialize, Serialize, JsonSchema)]
 pub struct SnapshotUploadingParam {
     pub wait: Option<bool>,
     pub priority: Option<SnapshotPriority>,
-
     /// Optional SHA256 checksum to verify snapshot integrity before recovery.
     #[serde(default)]
     #[validate(custom(function = "::common::validation::validate_sha256_hash"))]
     pub checksum: Option<String>,
 }
 
-#[derive(Deserialize, Serialize, JsonSchema, Validate)]
-pub struct SnapshottingParam {
-    pub wait: Option<bool>,
-}
-
 #[derive(MultipartForm)]
 pub struct SnapshottingForm {
     snapshot: TempFile,
 }
 
-// Actix specific code
 pub async fn do_get_full_snapshot(
     toc: &TableOfContent,
     access: Access,
@@ -66,9 +56,7 @@ pub async fn do_get_full_snapshot(
     let snapshots_storage_manager = toc.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshots_storage_manager.get_full_snapshot_path(toc.snapshots_path(), snapshot_name)?;
-    let snapshot_stream = snapshots_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
+    let snapshot_stream = snapshots_storage_manager.get_snapshot_stream(&snapshot_path).await?;
     Ok(snapshot_stream)
 }
 
@@ -94,7 +82,6 @@ pub async fn do_save_uploaded_snapshot(
         log::debug!("Creating missing collection snapshots directory for {collection_name}");
         toc.create_snapshots_path(collection_name).await?;
     }
-
     let path = collection_snapshot_path.join(filename);
 
     move_file(snapshot.file.path(), &path).await?;
@@ -111,7 +98,6 @@ pub async fn do_save_uploaded_snapshot(
     Ok(snapshot_location)
 }
 
-// Actix specific code
 pub async fn do_get_snapshot(
     toc: &TableOfContent,
     access: Access,
@@ -125,9 +111,7 @@ pub async fn do_get_snapshot(
     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshot_storage_manager.get_snapshot_path(collection.snapshots_path(), snapshot_name)?;
-    let snapshot_stream = snapshot_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
+    let snapshot_stream = snapshot_storage_manager.get_snapshot_stream(&snapshot_path).await?;
     Ok(snapshot_stream)
 }
 
@@ -139,7 +123,6 @@ async fn list_snapshots(
 ) -> impl Responder {
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     helpers::time(do_list_snapshots(
         dispatcher.toc(&access, &pass),
         access,
@@ -155,20 +138,10 @@ async fn create_snapshot(
     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
     let collection_name = path.into_inner();
-
     let future = async move {
-        do_create_snapshot(
-            dispatcher.toc(&access, &pass).clone(),
-            access,
-            &collection_name,
-        )
-        .await
+        do_create_snapshot(dispatcher.toc(&access).clone(), access, &collection_name).await
     };
-
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
@@ -182,10 +155,7 @@ async fn upload_snapshot(
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     let wait = params.wait;
-
-    // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let future = async move {
         let snapshot = form.snapshot;
 
@@ -198,11 +168,13 @@ async fn upload_snapshot(
             }
         }
 
-        let snapshot_location =
-            do_save_uploaded_snapshot(dispatcher.toc(&access, &pass), &collection.name, snapshot)
-                .await?;
+        let snapshot_location = do_save_uploaded_snapshot(
+            dispatcher.toc(&access, &pass),
+            &collection.name,
+            snapshot,
+        )
+        .await?;
 
-        // Snapshot is a local file, we do not need an API key for that
         let http_client = http_client.client(None)?;
 
         let snapshot_recover = SnapshotRecover {
@@ -221,7 +193,6 @@ async fn upload_snapshot(
         )
         .await
     };
-
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
 }
 
@@ -237,7 +208,6 @@ async fn recover_from_snapshot(
     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
@@ -247,7 +217,6 @@ async fn recover_from_snapshot(
         )
         .await
     };
-
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
@@ -259,7 +228,6 @@ async fn get_snapshot(
 ) -> impl Responder {
     // Nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection_name, snapshot_name) = path.into_inner();
     do_get_snapshot(
         dispatcher.toc(&access, &pass),
@@ -277,7 +245,6 @@ async fn list_full_snapshots(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     helpers::time(do_list_full_snapshots(
         dispatcher.toc(&access, &pass),
         access,
@@ -303,7 +270,6 @@ async fn get_full_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let snapshot_name = path.into_inner();
     do_get_full_snapshot(dispatcher.toc(&access, &pass), access, &snapshot_name).await
 }
@@ -319,7 +285,6 @@ async fn delete_full_snapshot(
         let snapshot_name = path.into_inner();
         do_delete_full_snapshot(dispatcher.get_ref(), access, &snapshot_name).await
     };
-
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
@@ -332,7 +297,6 @@ async fn delete_collection_snapshot(
 ) -> impl Responder {
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
-
         do_delete_collection_snapshot(
             dispatcher.get_ref(),
             access,
@@ -341,7 +305,6 @@ async fn delete_collection_snapshot(
         )
         .await
     };
-
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
 
@@ -353,9 +316,7 @@ async fn list_shard_snapshots(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
-
     let future = common::snapshots::list_shard_snapshots(
         dispatcher.toc(&access, &pass).clone(),
         access,
@@ -363,7 +324,6 @@ async fn list_shard_snapshots(
         shard,
     )
     .map_err(Into::into);
-
     helpers::time(future).await
 }
 
@@ -376,7 +336,6 @@ async fn create_shard_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     let future = common::snapshots::create_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -384,7 +343,6 @@ async fn create_shard_snapshot(
         collection,
         shard,
     );
-
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
 
@@ -396,7 +354,6 @@ async fn stream_shard_snapshot(
 ) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     Ok(common::snapshots::stream_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -407,7 +364,6 @@ async fn stream_shard_snapshot(
     .await?)
 }
 
-// TODO: `PUT` (same as `recover_from_snapshot`) or `POST`!?
 #[put("/collections/{collection}/shards/{shard}/snapshots/recover")]
 async fn recover_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
@@ -417,17 +373,13 @@ async fn recover_shard_snapshot(
     web::Json(request): web::Json<ShardSnapshotRecover>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let future = async move {
-        let (collection, shard) = path.into_inner();
-
         common::snapshots::recover_shard_snapshot(
             dispatcher.toc(&access, &pass).clone(),
             access,
-            collection,
-            shard,
+            path.into_inner().0,
+            path.into_inner().1,
             request.location,
             request.priority.unwrap_or_default(),
             request.checksum,
@@ -435,14 +387,11 @@ async fn recover_shard_snapshot(
             request.api_key,
         )
         .await?;
-
-        Ok(true)
+        Ok(())
     };
-
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
 
-// TODO: `POST` (same as `upload_snapshot`) or `PUT`!?
 #[post("/collections/{collection}/shards/{shard}/snapshots/upload")]
 async fn upload_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
@@ -453,7 +402,6 @@ async fn upload_shard_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard) = path.into_inner();
     let SnapshotUploadingParam {
         wait,
@@ -461,35 +409,28 @@ async fn upload_shard_snapshot(
         checksum,
     } = query.into_inner();
 
-    // - `recover_shard_snapshot_impl` is *not* cancel safe
-    //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
-
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
-        // TODO: Run this check before the multipart blob is uploaded
-        let collection_pass = access
-            .check_global_access(AccessRequirements::new().manage())?
-            .issue_pass(&collection);
-
         if let Some(checksum) = checksum {
             let snapshot_checksum = hash_file(form.snapshot.file.path()).await?;
             if !hashes_equal(snapshot_checksum.as_str(), checksum.as_str()) {
-                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum));
+                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum).into());
             }
         }
 
-        let future = async {
+        let multipass = access
+            .check_global_access(AccessRequirements::new().manage())?
+            .issue_pass(&collection);
+
+        let future_inner = async {
             let collection = dispatcher
                 .toc(&access, &pass)
-                .get_collection(&collection_pass)
+                .get_collection(&multipass)
                 .await?;
             collection.assert_shard_exists(shard).await?;
-
-            Result::<_, StorageError>::Ok(collection)
+            Ok::<_, StorageError>(collection)
         };
+        let collection = cancel::future::cancel_on_token(cancel.clone(), future_inner).await??;
 
-        let collection = cancel::future::cancel_on_token(cancel.clone(), future).await??;
-
-        // `recover_shard_snapshot_impl` is *not* cancel safe
         common::snapshots::recover_shard_snapshot_impl(
             dispatcher.toc(&access, &pass),
             &collection,
@@ -499,8 +440,7 @@ async fn upload_shard_snapshot(
             cancel,
         )
         .await?;
-
-        Ok(())
+        Ok::<_, StorageError>(())
     })
     .map(|x| x.map_err(Into::into).and_then(|x| x));
 
@@ -512,13 +452,12 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard, snapshot) = path.into_inner();
-    let collection_pass =
-        access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
+    let collection_pass = access
+        .check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
     let collection = dispatcher
         .toc(&access, &pass)
         .get_collection(&collection_pass)
@@ -530,9 +469,7 @@ async fn download_shard_snapshot(
         .await
         .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
         .await?;
-    let snapshot_stream = snapshots_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
+    let snapshot_stream = snapshots_storage_manager.get_snapshot_stream(&snapshot_path).await?;
     Ok(snapshot_stream)
 }
 
@@ -545,14 +482,12 @@ async fn delete_shard_snapshot(
 ) -> impl Responder {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
-
     let (collection, shard, snapshot) = path.into_inner();
     let future = common::snapshots::delete_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
         access,
         collection,
         shard,
-        snapshot,
     )
     .map_ok(|_| true)
     .map_err(Into::into);
