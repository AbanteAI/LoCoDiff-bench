--- qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected)+++ qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual)@@ -1,8 +1,8 @@ use std::path::Path;
 
+use actix_multipart::form::tempfile::TempFile;
 use actix_multipart::form::MultipartForm;
-use actix_multipart::form::tempfile::TempFile;
-use actix_web::{Responder, Result, delete, get, post, put, web};
+use actix_web::{delete, get, post, put, web, HttpRequest, Responder, Result};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
@@ -44,6 +44,7 @@     #[serde(default)]
     #[validate(custom(function = "::common::validation::validate_sha256_hash"))]
     pub checksum: Option<String>,
+    pub api_key: Option<String>,
 }
 
 #[derive(Deserialize, Serialize, JsonSchema, Validate)]
@@ -66,9 +67,8 @@     let snapshots_storage_manager = toc.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshots_storage_manager.get_full_snapshot_path(toc.snapshots_path(), snapshot_name)?;
-    let snapshot_stream = snapshots_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
+    let snapshot_stream =
+        snapshots_storage_manager.get_snapshot_stream(&snapshot_path).await?;
     Ok(snapshot_stream)
 }
 
@@ -101,12 +101,8 @@ 
     let absolute_path = path.canonicalize()?;
 
-    let snapshot_location = Url::from_file_path(&absolute_path).map_err(|_| {
-        StorageError::service_error(format!(
-            "Failed to convert path to URL: {}",
-            absolute_path.display()
-        ))
-    })?;
+    let snapshot_location = Url::from_file_path(&absolute_path)
+        .map_err(|_| StorageError::service_error(format!("Failed to convert path to URL: {}", absolute_path.display())))?;
 
     Ok(snapshot_location)
 }
@@ -125,9 +121,8 @@     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
     let snapshot_path =
         snapshot_storage_manager.get_snapshot_path(collection.snapshots_path(), snapshot_name)?;
-    let snapshot_stream = snapshot_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
+    let snapshot_stream =
+        snapshot_storage_manager.get_snapshot_stream(&snapshot_path).await?;
     Ok(snapshot_stream)
 }
 
@@ -137,15 +132,13 @@     path: web::Path<String>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     helpers::time(do_list_snapshots(
         dispatcher.toc(&access, &pass),
         access,
         &path,
-    ))
-    .await
+    )).await
 }
 
 #[post("/collections/{name}/snapshots")]
@@ -155,18 +148,13 @@     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     let collection_name = path.into_inner();
 
     let future = async move {
-        do_create_snapshot(
-            dispatcher.toc(&access, &pass).clone(),
-            access,
-            &collection_name,
-        )
-        .await
+        do_create_snapshot(dispatcher.toc(&access, &pass).clone(), access, &collection_name)
+            .await
     };
 
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
@@ -183,7 +171,6 @@ ) -> impl Responder {
     let wait = params.wait;
 
-    // Nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     let future = async move {
@@ -218,8 +205,7 @@             snapshot_recover,
             access,
             http_client,
-        )
-        .await
+        ).await
     };
 
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
@@ -229,7 +215,7 @@ async fn recover_from_snapshot(
     dispatcher: web::Data<Dispatcher>,
     http_client: web::Data<HttpClient>,
-    collection: valid::Path<CollectionPath>,
+    collection: valid::Path<StrictCollectionPath>,
     request: valid::Json<SnapshotRecover>,
     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
@@ -237,15 +223,13 @@     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
             snapshot_recover,
             access,
             http_client,
-        )
-        .await
+        ).await
     };
 
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
@@ -257,7 +241,6 @@     path: web::Path<(String, String)>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     let (collection_name, snapshot_name) = path.into_inner();
@@ -266,8 +249,7 @@         access,
         &collection_name,
         &snapshot_name,
-    )
-    .await
+    ).await
 }
 
 #[get("/snapshots")]
@@ -275,14 +257,12 @@     dispatcher: web::Data<Dispatcher>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
     helpers::time(do_list_full_snapshots(
         dispatcher.toc(&access, &pass),
         access,
-    ))
-    .await
+    )).await
 }
 
 #[post("/snapshots")]
@@ -291,6 +271,7 @@     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
+    let pass = new_unchecked_verification_pass();
     let future = async move { do_create_full_snapshot(dispatcher.get_ref(), access).await };
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
 }
@@ -301,9 +282,7 @@     path: web::Path<String>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    let pass = new_unchecked_verification_pass();
     let snapshot_name = path.into_inner();
     do_get_full_snapshot(dispatcher.toc(&access, &pass), access, &snapshot_name).await
 }
@@ -332,14 +311,12 @@ ) -> impl Responder {
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
-
         do_delete_collection_snapshot(
             dispatcher.get_ref(),
             access,
             &collection_name,
             &snapshot_name,
-        )
-        .await
+        ).await
     };
 
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
@@ -351,9 +328,7 @@     path: web::Path<(String, ShardId)>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    let pass = new_unchecked_verification_pass();
     let (collection, shard) = path.into_inner();
 
     let future = common::snapshots::list_shard_snapshots(
@@ -361,8 +336,7 @@         access,
         collection,
         shard,
-    )
-    .map_err(Into::into);
+    ).map_err(Into::into);
 
     helpers::time(future).await
 }
@@ -371,12 +345,10 @@ async fn create_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshottingParam>,
-    ActixAccess(access): ActixAccess,
-) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    query: valid::Query<SnapshottingParam>,
+    ActixAccess(access): ActixAccess,
+) -> impl Responder {
+    let pass = new_unchecked_verification_pass();
     let (collection, shard) = path.into_inner();
     let future = common::snapshots::create_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -384,7 +356,6 @@         collection,
         shard,
     );
-
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
 
@@ -394,17 +365,14 @@     path: web::Path<(String, ShardId)>,
     ActixAccess(access): ActixAccess,
 ) -> Result<SnapshotStream, HttpError> {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    let pass = new_unchecked_verification_pass();
     let (collection, shard) = path.into_inner();
     Ok(common::snapshots::stream_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
         access,
         collection,
         shard,
-    )
-    .await?)
+    )?)
 }
 
 // TODO: `PUT` (same as `recover_from_snapshot`) or `POST`!?
@@ -413,16 +381,12 @@     dispatcher: web::Data<Dispatcher>,
     http_client: web::Data<HttpClient>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshottingParam>,
+    query: valid::Query<SnapshottingParam>,
     web::Json(request): web::Json<ShardSnapshotRecover>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
     let future = async move {
         let (collection, shard) = path.into_inner();
-
         common::snapshots::recover_shard_snapshot(
             dispatcher.toc(&access, &pass).clone(),
             access,
@@ -433,12 +397,8 @@             request.checksum,
             http_client.as_ref().clone(),
             request.api_key,
-        )
-        .await?;
-
-        Ok(true)
+        ).await
     };
-
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
 
@@ -447,28 +407,21 @@ async fn upload_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshotUploadingParam>,
+    query: valid::Query<SnapshotUploadingParam>,
     MultipartForm(form): MultipartForm<SnapshottingForm>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    let pass = new_unchecked_verification_pass();
     let (collection, shard) = path.into_inner();
     let SnapshotUploadingParam {
         wait,
         priority,
         checksum,
+        api_key,
     } = query.into_inner();
 
-    // - `recover_shard_snapshot_impl` is *not* cancel safe
-    //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
-
     let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
-        // TODO: Run this check before the multipart blob is uploaded
-        let collection_pass = access
-            .check_global_access(AccessRequirements::new().manage())?
-            .issue_pass(&collection);
+        access.check_global_access(AccessRequirements::new().manage())?;
 
         if let Some(checksum) = checksum {
             let snapshot_checksum = hash_file(form.snapshot.file.path()).await?;
@@ -477,32 +430,23 @@             }
         }
 
-        let future = async {
-            let collection = dispatcher
-                .toc(&access, &pass)
-                .get_collection(&collection_pass)
-                .await?;
-            collection.assert_shard_exists(shard).await?;
-
-            Result::<_, StorageError>::Ok(collection)
-        };
-
-        let collection = cancel::future::cancel_on_token(cancel.clone(), future).await??;
-
-        // `recover_shard_snapshot_impl` is *not* cancel safe
+        let collection_pass = access.issue_pass(&collection);
+        let collection = dispatcher
+            .toc(&access, &pass)
+            .get_collection(&collection_pass)
+            .await?;
+        collection.assert_shard_exists(shard).await?;
+
         common::snapshots::recover_shard_snapshot_impl(
             dispatcher.toc(&access, &pass),
             &collection,
             shard,
             form.snapshot.file.path(),
             priority.unwrap_or_default(),
+            api_key,
             cancel,
-        )
-        .await?;
-
-        Ok(())
-    })
-    .map(|x| x.map_err(Into::into).and_then(|x| x));
+        ).await
+    });
 
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
 }
@@ -512,10 +456,8 @@     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+) -> Result<SnapshotStream, HttpError> {
+    let pass = new_unchecked_verification_pass();
     let (collection, shard, snapshot) = path.into_inner();
     let collection_pass =
         access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
@@ -524,12 +466,9 @@         .get_collection(&collection_pass)
         .await?;
     let snapshots_storage_manager = collection.get_snapshots_storage_manager()?;
-    let snapshot_path = collection
-        .shards_holder()
-        .read()
-        .await
-        .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
-        .await?;
+    let snapshot_path =
+        collection.shards_holder().get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
+            .await?;
     let snapshot_stream = snapshots_storage_manager
         .get_snapshot_stream(&snapshot_path)
         .await?;
@@ -540,12 +479,10 @@ async fn delete_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
-    query: web::Query<SnapshottingParam>,
-    ActixAccess(access): ActixAccess,
-) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
+    query: valid::Query<SnapshottingParam>,
+    ActixAccess(access): ActixAccess,
+) -> impl Responder {
+    let pass = new_unchecked_verification_pass();
     let (collection, shard, snapshot) = path.into_inner();
     let future = common::snapshots::delete_shard_snapshot(
         dispatcher.toc(&access, &pass).clone(),
@@ -553,9 +490,7 @@         collection,
         shard,
         snapshot,
-    )
-    .map_ok(|_| true)
-    .map_err(Into::into);
+    );
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
