--- qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected)+++ qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual)@@ -1,7 +1,7 @@ use std::path::Path;
 
+use actix_multipart::form::tempfile::TempFile;
 use actix_multipart::form::MultipartForm;
-use actix_multipart::form::tempfile::TempFile;
 use actix_web::{Responder, Result, delete, get, post, put, web};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
@@ -94,20 +94,15 @@         log::debug!("Creating missing collection snapshots directory for {collection_name}");
         toc.create_snapshots_path(collection_name).await?;
     }
-
     let path = collection_snapshot_path.join(filename);
-
     move_file(snapshot.file.path(), &path).await?;
-
     let absolute_path = path.canonicalize()?;
-
     let snapshot_location = Url::from_file_path(&absolute_path).map_err(|_| {
         StorageError::service_error(format!(
             "Failed to convert path to URL: {}",
             absolute_path.display()
         ))
     })?;
-
     Ok(snapshot_location)
 }
 
@@ -198,9 +193,12 @@             }
         }
 
-        let snapshot_location =
-            do_save_uploaded_snapshot(dispatcher.toc(&access, &pass), &collection.name, snapshot)
-                .await?;
+        let snapshot_location = do_save_uploaded_snapshot(
+            dispatcher.toc(&access, &pass),
+            &collection.name,
+            snapshot,
+        )
+        .await?;
 
         // Snapshot is a local file, we do not need an API key for that
         let http_client = http_client.client(None)?;
@@ -253,6 +251,7 @@ 
 #[get("/collections/{name}/snapshots/{snapshot_name}")]
 async fn get_snapshot(
+    req: HttpRequest,
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, String)>,
     ActixAccess(access): ActixAccess,
@@ -297,6 +296,7 @@ 
 #[get("/snapshots/{snapshot_name}")]
 async fn get_full_snapshot(
+    req: HttpRequest,
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<String>,
     ActixAccess(access): ActixAccess,
@@ -371,7 +371,7 @@ async fn create_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshottingParam>,
+    query: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     // nothing to verify.
@@ -413,7 +413,7 @@     dispatcher: web::Data<Dispatcher>,
     http_client: web::Data<HttpClient>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshottingParam>,
+    query: valid::Query<SnapshottingParam>,
     web::Json(request): web::Json<ShardSnapshotRecover>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
@@ -434,9 +434,7 @@             http_client.as_ref().clone(),
             request.api_key,
         )
-        .await?;
-
-        Ok(true)
+        .await
     };
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
@@ -447,7 +445,7 @@ async fn upload_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshotUploadingParam>,
+    query: valid::Query<SnapshotUploadingParam>,
     MultipartForm(form): MultipartForm<SnapshottingForm>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
@@ -496,6 +494,8 @@             shard,
             form.snapshot.file.path(),
             priority.unwrap_or_default(),
+            None, // Checksum already verified
+            None, // Local operation
             cancel,
         )
         .await?;
@@ -512,7 +512,7 @@     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
@@ -528,8 +528,7 @@         .shards_holder()
         .read()
         .await
-        .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
-        .await?;
+        .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)?;
     let snapshot_stream = snapshots_storage_manager
         .get_snapshot_stream(&snapshot_path)
         .await?;
@@ -540,7 +539,7 @@ async fn delete_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
-    query: web::Query<SnapshottingParam>,
+    query: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
     // nothing to verify.
@@ -553,9 +552,7 @@         collection,
         shard,
         snapshot,
-    )
-    .map_ok(|_| true)
-    .map_err(Into::into);
+    );
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
 }
