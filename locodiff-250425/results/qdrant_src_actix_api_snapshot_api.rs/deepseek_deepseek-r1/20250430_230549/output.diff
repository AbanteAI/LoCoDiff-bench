
index 85547d95..420fc989 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmp1ud9x1nb_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmpz_3obqf6_actual.txt	
@@ -1,8 +1,8 @@
 use std::path::Path;
 
-use actix_multipart::form::MultipartForm;
 use actix_multipart::form::tempfile::TempFile;
-use actix_web::{Responder, Result, delete, get, post, put, web};
+use actix_multipart::form::MultipartForm;
+use actix_web::{delete, get, post, put, web, Responder, Result};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
@@ -20,7 +20,7 @@ use storage::content_manager::errors::StorageError;
 use storage::content_manager::snapshots::recover::do_recover_from_snapshot;
 use storage::content_manager::snapshots::{
     do_create_full_snapshot, do_delete_collection_snapshot, do_delete_full_snapshot,
-    do_list_full_snapshots,
+    do_list_full_snapshots, get_full_snapshot_path,
 };
 use storage::content_manager::toc::TableOfContent;
 use storage::dispatcher::Dispatcher;
@@ -407,7 +407,6 @@ async fn stream_shard_snapshot(
     .await?)
 }
 
-// TODO: `PUT` (same as `recover_from_snapshot`) or `POST`!?
 #[put("/collections/{collection}/shards/{shard}/snapshots/recover")]
 async fn recover_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
@@ -439,144 +438,4 @@ async fn recover_shard_snapshot(
         Ok(true)
     };
 
-    helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
-}
-
-// TODO: `POST` (same as `upload_snapshot`) or `PUT`!?
-#[post("/collections/{collection}/shards/{shard}/snapshots/upload")]
-async fn upload_shard_snapshot(
-    dispatcher: web::Data<Dispatcher>,
-    path: web::Path<(String, ShardId)>,
-    query: web::Query<SnapshotUploadingParam>,
-    MultipartForm(form): MultipartForm<SnapshottingForm>,
-    ActixAccess(access): ActixAccess,
-) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
-    let (collection, shard) = path.into_inner();
-    let SnapshotUploadingParam {
-        wait,
-        priority,
-        checksum,
-    } = query.into_inner();
-
-    // - `recover_shard_snapshot_impl` is *not* cancel safe
-    //   - but the task is *spawned* on the runtime and won't be cancelled, if request is cancelled
-
-    let future = cancel::future::spawn_cancel_on_drop(move |cancel| async move {
-        // TODO: Run this check before the multipart blob is uploaded
-        let collection_pass = access
-            .check_global_access(AccessRequirements::new().manage())?
-            .issue_pass(&collection);
-
-        if let Some(checksum) = checksum {
-            let snapshot_checksum = hash_file(form.snapshot.file.path()).await?;
-            if !hashes_equal(snapshot_checksum.as_str(), checksum.as_str()) {
-                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum));
-            }
-        }
-
-        let future = async {
-            let collection = dispatcher
-                .toc(&access, &pass)
-                .get_collection(&collection_pass)
-                .await?;
-            collection.assert_shard_exists(shard).await?;
-
-            Result::<_, StorageError>::Ok(collection)
-        };
-
-        let collection = cancel::future::cancel_on_token(cancel.clone(), future).await??;
-
-        // `recover_shard_snapshot_impl` is *not* cancel safe
-        common::snapshots::recover_shard_snapshot_impl(
-            dispatcher.toc(&access, &pass),
-            &collection,
-            shard,
-            form.snapshot.file.path(),
-            priority.unwrap_or_default(),
-            cancel,
-        )
-        .await?;
-
-        Ok(())
-    })
-    .map(|x| x.map_err(Into::into).and_then(|x| x));
-
-    helpers::time_or_accept(future, wait.unwrap_or(true)).await
-}
-
-#[get("/collections/{collection}/shards/{shard}/snapshots/{snapshot}")]
-async fn download_shard_snapshot(
-    dispatcher: web::Data<Dispatcher>,
-    path: web::Path<(String, ShardId, String)>,
-    ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
-    let (collection, shard, snapshot) = path.into_inner();
-    let collection_pass =
-        access.check_collection_access(&collection, AccessRequirements::new().whole().extras())?;
-    let collection = dispatcher
-        .toc(&access, &pass)
-        .get_collection(&collection_pass)
-        .await?;
-    let snapshots_storage_manager = collection.get_snapshots_storage_manager()?;
-    let snapshot_path = collection
-        .shards_holder()
-        .read()
-        .await
-        .get_shard_snapshot_path(collection.snapshots_path(), shard, &snapshot)
-        .await?;
-    let snapshot_stream = snapshots_storage_manager
-        .get_snapshot_stream(&snapshot_path)
-        .await?;
-    Ok(snapshot_stream)
-}
-
-#[delete("/collections/{collection}/shards/{shard}/snapshots/{snapshot}")]
-async fn delete_shard_snapshot(
-    dispatcher: web::Data<Dispatcher>,
-    path: web::Path<(String, ShardId, String)>,
-    query: web::Query<SnapshottingParam>,
-    ActixAccess(access): ActixAccess,
-) -> impl Responder {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
-    let (collection, shard, snapshot) = path.into_inner();
-    let future = common::snapshots::delete_shard_snapshot(
-        dispatcher.toc(&access, &pass).clone(),
-        access,
-        collection,
-        shard,
-        snapshot,
-    )
-    .map_ok(|_| true)
-    .map_err(Into::into);
-
-    helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
-}
-
-// Configure services
-pub fn config_snapshots_api(cfg: &mut web::ServiceConfig) {
-    cfg.service(list_snapshots)
-        .service(create_snapshot)
-        .service(upload_snapshot)
-        .service(recover_from_snapshot)
-        .service(get_snapshot)
-        .service(list_full_snapshots)
-        .service(create_full_snapshot)
-        .service(get_full_snapshot)
-        .service(delete_full_snapshot)
-        .service(delete_collection_snapshot)
-        .service(list_shard_snapshots)
-        .service(create_shard_snapshot)
-        .service(stream_shard_snapshot)
-        .service(recover_shard_snapshot)
-        .service(upload_shard_snapshot)
-        .service(download_shard_snapshot)
-        .service(delete_shard_snapshot);
-}
\ No newline at end of file
+    helpers::time_or_accept(future, query.wait.unwrap_or(true)).awa
\ No newline at end of file
