--- qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected)+++ qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual)@@ -2,7 +2,7 @@ 
 use actix_multipart::form::MultipartForm;
 use actix_multipart::form::tempfile::TempFile;
-use actix_web::{Responder, Result, delete, get, post, put, web};
+use actix_web::{delete, get, post, put, web, Responder, Result};
 use actix_web_validator as valid;
 use collection::common::file_utils::move_file;
 use collection::common::sha_256::{hash_file, hashes_equal};
@@ -82,11 +82,7 @@         // Sanitize the file name:
         // - only take the top level path (no directories such as ../)
         // - require the file name to be valid UTF-8
-        .and_then(|x| {
-            Path::new(&x)
-                .file_name()
-                .map(|filename| filename.to_owned())
-        })
+        .and_then(|x| Path::new(&x).file_name().map(|filename| filename.to_owned()))
         .and_then(|x| x.to_str().map(|x| x.to_owned()))
         .unwrap_or_else(|| Uuid::new_v4().to_string());
     let collection_snapshot_path = toc.snapshots_path_for_collection(collection_name);
@@ -194,7 +190,7 @@         if let Some(checksum) = &params.checksum {
             let snapshot_checksum = hash_file(snapshot.file.path()).await?;
             if !hashes_equal(snapshot_checksum.as_str(), checksum.as_str()) {
-                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum));
+                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum).into());
             }
         }
 
@@ -237,7 +233,6 @@     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
@@ -332,7 +327,6 @@ ) -> impl Responder {
     let future = async move {
         let (collection_name, snapshot_name) = path.into_inner();
-
         do_delete_collection_snapshot(
             dispatcher.get_ref(),
             access,
@@ -356,13 +350,9 @@ 
     let (collection, shard) = path.into_inner();
 
-    let future = common::snapshots::list_shard_snapshots(
-        dispatcher.toc(&access, &pass).clone(),
-        access,
-        collection,
-        shard,
-    )
-    .map_err(Into::into);
+    let future =
+        common::snapshots::list_shard_snapshots(dispatcher.toc(&access, &pass).clone(), access, collection, shard)
+            .map_err(Into::into);
 
     helpers::time(future).await
 }
@@ -378,33 +368,10 @@     let pass = new_unchecked_verification_pass();
 
     let (collection, shard) = path.into_inner();
-    let future = common::snapshots::create_shard_snapshot(
-        dispatcher.toc(&access, &pass).clone(),
-        access,
-        collection,
-        shard,
-    );
+    let future =
+        common::snapshots::create_shard_snapshot(dispatcher.toc(&access, &pass).clone(), access, collection, shard);
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
-}
-
-#[get("/collections/{collection}/shards/{shard}/snapshot")]
-async fn stream_shard_snapshot(
-    dispatcher: web::Data<Dispatcher>,
-    path: web::Path<(String, ShardId)>,
-    ActixAccess(access): ActixAccess,
-) -> Result<SnapshotStream, HttpError> {
-    // nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
-    let (collection, shard) = path.into_inner();
-    Ok(common::snapshots::stream_shard_snapshot(
-        dispatcher.toc(&access, &pass).clone(),
-        access,
-        collection,
-        shard,
-    )
-    .await?)
 }
 
 // TODO: `PUT` (same as `recover_from_snapshot`) or `POST`!?
@@ -436,7 +403,7 @@         )
         .await?;
 
-        Ok(true)
+        Result::<_, HttpError>::Ok(())
     };
 
     helpers::time_or_accept(future, query.wait.unwrap_or(true)).await
@@ -473,7 +440,7 @@         if let Some(checksum) = checksum {
             let snapshot_checksum = hash_file(form.snapshot.file.path()).await?;
             if !hashes_equal(snapshot_checksum.as_str(), checksum.as_str()) {
-                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum));
+                return Err(StorageError::checksum_mismatch(snapshot_checksum, checksum).into());
             }
         }
 
@@ -487,7 +454,8 @@             Result::<_, StorageError>::Ok(collection)
         };
 
-        let collection = cancel::future::cancel_on_token(cancel.clone(), future).await??;
+        let collection =
+            cancel::future::cancel_on_token(cancel.clone(), future).await??;
 
         // `recover_shard_snapshot_impl` is *not* cancel safe
         common::snapshots::recover_shard_snapshot_impl(
@@ -500,19 +468,35 @@         )
         .await?;
 
-        Ok(())
+        Ok::<_, HttpError>(())
     })
     .map(|x| x.map_err(Into::into).and_then(|x| x));
 
     helpers::time_or_accept(future, wait.unwrap_or(true)).await
 }
 
+#[get("/collections/{collection}/shards/{shard}/snapshot")]
+async fn stream_shard_snapshot(
+    dispatcher: web::Data<Dispatcher>,
+    path: web::Path<(String, ShardId)>,
+    ActixAccess(access): ActixAccess,
+) -> Result<SnapshotStream, HttpError> {
+    // nothing to verify.
+    let pass = new_unchecked_verification_pass();
+
+    let (collection, shard) = path.into_inner();
+    Ok(
+        common::snapshots::stream_shard_snapshot(dispatcher.toc(&access, &pass).clone(), access, collection, shard)
+            .await?,
+    )
+}
+
 #[get("/collections/{collection}/shards/{shard}/snapshots/{snapshot}")]
 async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
