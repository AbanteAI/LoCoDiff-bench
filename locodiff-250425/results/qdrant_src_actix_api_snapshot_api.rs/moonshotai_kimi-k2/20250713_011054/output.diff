
index 85547d95e..4fd1b6c02 100644
--- a/qdrant_src_actix_api_snapshot_api.rs_expectedoutput.txt (expected):tmp/tmp99prqjsw_expected.txt	
+++ b/qdrant_src_actix_api_snapshot_api.rs_extracted.txt (actual):tmp/tmp83f9oxrt_actual.txt	
@@ -79,15 +79,10 @@ pub async fn do_save_uploaded_snapshot(
 ) -> Result<Url, StorageError> {
     let filename = snapshot
         .file_name
-        // Sanitize the file name:
-        // - only take the top level path (no directories such as ../)
-        // - require the file name to be valid UTF-8
-        .and_then(|x| {
-            Path::new(&x)
-                .file_name()
-                .map(|filename| filename.to_owned())
-        })
-        .and_then(|x| x.to_str().map(|x| x.to_owned()))
+        .as_ref()
+        .and_then(|x| Path::new(x).file_name())
+        .and_then(|x| x.to_str())
+        .map(|x| x.to_owned())
         .unwrap_or_else(|| Uuid::new_v4().to_string());
     let collection_snapshot_path = toc.snapshots_path_for_collection(collection_name);
     if !collection_snapshot_path.exists() {
@@ -123,8 +118,8 @@ pub async fn do_get_snapshot(
     let collection: tokio::sync::RwLockReadGuard<collection::collection::Collection> =
         toc.get_collection(&collection_pass).await?;
     let snapshot_storage_manager = collection.get_snapshots_storage_manager()?;
-    let snapshot_path =
-        snapshot_storage_manager.get_snapshot_path(collection.snapshots_path(), snapshot_name)?;
+    let snapshot_path = snapshot_storage_manager
+        .get_snapshot_path(collection.snapshots_path(), snapshot_name)?;
     let snapshot_stream = snapshot_storage_manager
         .get_snapshot_stream(&snapshot_path)
         .await?;
@@ -137,15 +132,7 @@ async fn list_snapshots(
     path: web::Path<String>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
-    helpers::time(do_list_snapshots(
-        dispatcher.toc(&access, &pass),
-        access,
-        &path,
-    ))
-    .await
+    helpers::time(do_list_snapshots(dispatcher.toc(&access), access, &path)).await
 }
 
 #[post("/collections/{name}/snapshots")]
@@ -155,18 +142,10 @@ async fn create_snapshot(
     params: valid::Query<SnapshottingParam>,
     ActixAccess(access): ActixAccess,
 ) -> impl Responder {
-    // Nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
     let collection_name = path.into_inner();
 
     let future = async move {
-        do_create_snapshot(
-            dispatcher.toc(&access, &pass).clone(),
-            access,
-            &collection_name,
-        )
-        .await
+        do_create_snapshot(dispatcher.toc(&access), access, &collection_name).await
     };
 
     helpers::time_or_accept(future, params.wait.unwrap_or(true)).await
@@ -183,9 +162,6 @@ async fn upload_snapshot(
 ) -> impl Responder {
     let wait = params.wait;
 
-    // Nothing to verify.
-    let pass = new_unchecked_verification_pass();
-
     let future = async move {
         let snapshot = form.snapshot;
 
@@ -199,8 +175,7 @@ async fn upload_snapshot(
         }
 
         let snapshot_location =
-            do_save_uploaded_snapshot(dispatcher.toc(&access, &pass), &collection.name, snapshot)
-                .await?;
+            do_save_uploaded_snapshot(dispatcher.toc(&access), &collection.name, snapshot).await?;
 
         // Snapshot is a local file, we do not need an API key for that
         let http_client = http_client.client(None)?;
@@ -237,7 +212,6 @@ async fn recover_from_snapshot(
     let future = async move {
         let snapshot_recover = request.into_inner();
         let http_client = http_client.client(snapshot_recover.api_key.as_deref())?;
-
         do_recover_from_snapshot(
             dispatcher.get_ref(),
             &collection.name,
@@ -262,7 +236,7 @@ async fn get_snapshot(
 
     let (collection_name, snapshot_name) = path.into_inner();
     do_get_snapshot(
-        dispatcher.toc(&access, &pass),
+        dispatcher.toc(&access),
         access,
         &collection_name,
         &snapshot_name,
@@ -279,7 +253,7 @@ async fn list_full_snapshots(
     let pass = new_unchecked_verification_pass();
 
     helpers::time(do_list_full_snapshots(
-        dispatcher.toc(&access, &pass),
+        dispatcher.toc(&access),
         access,
     ))
     .await
@@ -305,7 +279,7 @@ async fn get_full_snapshot(
     let pass = new_unchecked_verification_pass();
 
     let snapshot_name = path.into_inner();
-    do_get_full_snapshot(dispatcher.toc(&access, &pass), access, &snapshot_name).await
+    do_get_full_snapshot(dispatcher.toc(&access), access, &snapshot_name).await
 }
 
 #[delete("/snapshots/{snapshot_name}")]
@@ -357,7 +331,7 @@ async fn list_shard_snapshots(
     let (collection, shard) = path.into_inner();
 
     let future = common::snapshots::list_shard_snapshots(
-        dispatcher.toc(&access, &pass).clone(),
+        dispatcher.toc(&access).clone(),
         access,
         collection,
         shard,
@@ -379,7 +353,7 @@ async fn create_shard_snapshot(
 
     let (collection, shard) = path.into_inner();
     let future = common::snapshots::create_shard_snapshot(
-        dispatcher.toc(&access, &pass).clone(),
+        dispatcher.toc(&access).clone(),
         access,
         collection,
         shard,
@@ -512,7 +486,7 @@ async fn download_shard_snapshot(
     dispatcher: web::Data<Dispatcher>,
     path: web::Path<(String, ShardId, String)>,
     ActixAccess(access): ActixAccess,
-) -> Result<impl Responder, HttpError> {
+) -> Result<SnapshotStream, HttpError> {
     // nothing to verify.
     let pass = new_unchecked_verification_pass();
 
