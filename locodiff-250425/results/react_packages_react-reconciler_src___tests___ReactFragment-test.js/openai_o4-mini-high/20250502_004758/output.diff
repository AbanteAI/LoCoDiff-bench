--- react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual)@@ -17,10 +17,8 @@ describe('ReactFragment', () => {
   beforeEach(function () {
     jest.resetModules();
-
     React = require('react');
     ReactNoop = require('react-noop-renderer');
-
     const InternalTestUtils = require('internal-test-utils');
     waitForAll = InternalTestUtils.waitForAll;
     assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
@@ -88,7 +86,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -133,7 +130,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -174,7 +170,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -229,7 +224,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -272,7 +266,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -313,7 +306,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -360,7 +352,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -399,7 +390,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -438,7 +428,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -479,7 +468,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -516,7 +504,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -557,7 +544,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -569,10 +555,10 @@           <Stateful />
         </React.Fragment>
       ) : (
-        <React.Fragment key="b">
+        <>
           <Stateful />
           <span>World</span>
-        </React.Fragment>
+        </>
       );
     }
 
@@ -604,7 +590,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -645,7 +630,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -707,14 +691,13 @@     );
   });
 
-  it('should not preserve state when switching to a keyed fragment to an array', async () => {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should not preserve state when switching to a keyed fragment to an array', async function () {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -723,11 +706,9 @@     function Foo({condition}) {
       return condition ? (
         <div>
-          {
-            <React.Fragment key="foo">
-              <Stateful />
-            </React.Fragment>
-          }
+          <React.Fragment key="foo">
+            <Stateful />
+          </React.Fragment>
           <span />
         </div>
       ) : (
@@ -743,6 +724,7 @@ 
     ReactNoop.render(<Foo condition={false} />);
     await waitForAll([]);
+    // The key warning gets deduped because it's in the same component.
     assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
         '\n' +
@@ -753,23 +735,17 @@     ]);
 
     expect(ops).toEqual([]);
+
+    ReactNoop.render(<Foo condition={true} />);
+    await waitForAll([]);
+
+    expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <div>Hello</div>
         <span />
       </div>,
     );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <div>Hello</div>
-        <span />
-      </div>,
-    );
   });
 
   it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async function () {
@@ -783,7 +759,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -832,7 +807,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -881,7 +855,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -922,7 +895,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -931,13 +903,13 @@     function Foo({condition}) {
       return condition
         ? [
-            <span />,
+            <span key="1" />,
             <>
               <Stateful />
             </>,
           ]
         : [
-            <span />,
+            <span key="1" />,
             <>
               <Stateful />
             </>,
@@ -946,6 +918,22 @@ 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
+
+    ReactNoop.render(<Foo condition={false} />);
+    await waitForAll([]);
+
+    expect(ops).toEqual(['Update Stateful']);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <>
+        <span />
+        <div>Hello</div>
+      </>,
+    );
+
+    ReactNoop.render(<Foo condition={true} />);
+    await waitForAll([]);
+
+    // The key warning gets deduped because it's in the same component.
     assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
         '\n' +
@@ -956,29 +944,13 @@         '    in Foo (at **)',
     ]);
 
-    ReactNoop.render(<Foo condition={false} />);
-    // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
+    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
         <span />
         <div>Hello</div>
       </>,
     );
-
-    ReactNoop.render(<Foo condition={true} />);
-    // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <span />
-        <div>Hello</div>
-      </>,
-    );
   });
 
   it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
@@ -988,7 +960,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
