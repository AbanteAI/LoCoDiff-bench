--- react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual)@@ -7,6 +7,7 @@  * @emails react-core
  * @jest-environment node
  */
+
 'use strict';
 
 let React;
@@ -26,38 +27,35 @@     assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
-  it('should render a single child via noop renderer', async () => {
-    const element = (
-      <>
-        <span>foo</span>
-      </>
-    );
-
+  // Helpers
+
+  async function renderAndAwait(element) {
     ReactNoop.render(element);
     await waitForAll([]);
-
+  }
+
+  // Tests
+
+  it('should render a single child via noop renderer', async () => {
+    await renderAndAwait(
+      <>
+        <span>foo</span>
+      </>,
+    );
     expect(ReactNoop).toMatchRenderedOutput(<span>foo</span>);
   });
 
   it('should render zero children via noop renderer', async () => {
-    const element = <React.Fragment />;
-
-    ReactNoop.render(element);
-    await waitForAll([]);
-
+    await renderAndAwait(<React.Fragment />);
     expect(ReactNoop).toMatchRenderedOutput(null);
   });
 
   it('should render multiple children via noop renderer', async () => {
-    const element = (
+    await renderAndAwait(
       <>
         hello <span>world</span>
-      </>
-    );
-
-    ReactNoop.render(element);
-    await waitForAll([]);
-
+      </>,
+    );
     expect(ReactNoop).toMatchRenderedOutput(
       <>
         hello <span>world</span>
@@ -66,13 +64,9 @@   });
 
   it('should render an iterable via noop renderer', async () => {
-    const element = (
-      <>{new Set([<span key="a">hi</span>, <span key="b">bye</span>])}</>
-    );
-
-    ReactNoop.render(element);
-    await waitForAll([]);
-
+    await renderAndAwait(
+      <>{new Set([<span key="a">hi</span>, <span key="b">bye</span>])}</>,
+    );
     expect(ReactNoop).toMatchRenderedOutput(
       <>
         <span>hi</span>
@@ -81,14 +75,13 @@     );
   });
 
-  it('should preserve state of children with 1 level nesting', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should preserve state of children with 1 level nesting', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -105,12 +98,8 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -119,21 +108,18 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should preserve state between top-level fragments', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should preserve state between top-level fragments', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -151,30 +137,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should preserve state of children nested at same level', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should preserve state of children nested at same level', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -201,12 +180,8 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -215,21 +190,18 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state in non-top-level fragment nesting', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should not preserve state in non-top-level fragment nesting', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -249,30 +221,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state of children if nested 2 levels without siblings', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state of children if nested 2 levels without siblings', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -290,30 +255,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state of children if nested 2 levels with siblings', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state of children if nested 2 levels with siblings', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -332,12 +290,8 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -346,21 +300,18 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state between array nested in fragment and fragment', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should preserve state between array nested in fragment and fragment', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -376,30 +327,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should preserve state between top level fragment and array', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should preserve state between top level fragment and array', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -415,30 +359,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state between array nested in fragment and double nested fragment', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should not preserve state between array nested in fragment and double nested fragment', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -456,67 +393,49 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state between array nested in fragment and double nested array', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <>{[<Stateful key="a" />]}</>
-      ) : (
-        [[<Stateful key="a" />]]
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state between double nested fragment and double nested array', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state between array nested in fragment and double nested array', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
+      render() {
+        return <div>Hello</div>;
+      }
+    }
+
+    function Foo({condition}) {
+      return condition ? <>{[<Stateful key="a" />]}</> : [[<Stateful key="a" />]];
+    }
+
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should preserve state between double nested fragment and double nested array', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -534,30 +453,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state of children when the keys are different', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+  it('should not preserve state of children when the keys are different', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -576,12 +488,8 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -590,21 +498,18 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state between unkeyed and keyed fragment', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state between unkeyed and keyed fragment', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -622,30 +527,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state with reordering in multiple levels', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should preserve state with reordering in multiple levels', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -675,12 +573,8 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
@@ -692,9 +586,7 @@       </div>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
@@ -714,7 +606,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -723,11 +614,7 @@     function Foo({condition}) {
       return condition ? (
         <div>
-          {
-            <React.Fragment key="foo">
-              <Stateful />
-            </React.Fragment>
-          }
+          {<React.Fragment key="foo">{<Stateful />}</React.Fragment>}
           <span />
         </div>
       ) : (
@@ -738,9 +625,7 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     ReactNoop.render(<Foo condition={false} />);
     await waitForAll([]);
     assertConsoleErrorDev([
@@ -760,9 +645,7 @@       </div>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
@@ -772,7 +655,7 @@     );
   });
 
-  it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async function () {
+  it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -783,7 +666,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -805,23 +687,17 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async function () {
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -832,7 +708,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -854,23 +729,17 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state when switching a nested keyed array to a passthrough component', async function () {
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should not preserve state when switching a nested keyed array to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -881,7 +750,6 @@       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -899,30 +767,23 @@       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state when it does not change positions', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
+    await renderAndAwait(<Foo condition={true} />);
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+  });
+
+  it('should preserve state when it does not change positions', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
@@ -931,35 +792,22 @@     function Foo({condition}) {
       return condition
         ? [
-            <span />,
+            <span key="x" />,
             <>
               <Stateful />
             </>,
           ]
         : [
-            <span />,
+            <span key="x" />,
             <>
               <Stateful />
             </>,
           ];
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
-
-    ReactNoop.render(<Foo condition={false} />);
+    await renderAndAwait(<Foo condition={true} />);
     // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -968,10 +816,8 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={true} />);
     // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -981,20 +827,19 @@     );
   });
 
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    const lazyChild = React.lazy(async () => ({
+  it('should preserve state of children when adding a fragment wrapped in Lazy', async () => {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
+      render() {
+        return <div>Hello</div>;
+      }
+    }
+
+    const LazyChild = React.lazy(async () => ({
       default: (
         <>
           <Stateful key="a" />
@@ -1004,15 +849,11 @@     }));
 
     function Foo({condition}) {
-      return condition ? <Stateful key="a" /> : lazyChild;
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
+      return condition ? <Stateful key="a" /> : LazyChild;
+    }
+
+    await renderAndAwait(<Foo condition={true} />);
+    await renderAndAwait(<Foo condition={false} />);
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
@@ -1021,9 +862,7 @@       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
+    await renderAndAwait(<Foo condition={true} />);
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
