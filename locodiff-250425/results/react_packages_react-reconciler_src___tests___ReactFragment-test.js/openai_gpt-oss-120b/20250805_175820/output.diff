
index 285cd8047..77415bc1f 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmp1_g11qp7_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmphb4l8oit_actual.txt	
@@ -5,7 +5,6 @@
  * LICENSE file in the root directory of this source tree.
  *
  * @emails react-core
- * @jest-environment node
  */
 'use strict';
 
@@ -40,7 +39,7 @@ describe('ReactFragment', () => {
   });
 
   it('should render zero children via noop renderer', async () => {
-    const element = <React.Fragment />;
+    const element = <></>;
 
     ReactNoop.render(element);
     await waitForAll([]);
@@ -67,7 +66,9 @@ describe('ReactFragment', () => {
 
   it('should render an iterable via noop renderer', async () => {
     const element = (
-      <>{new Set([<span key="a">hi</span>, <span key="b">bye</span>])}</>
+      <>
+        {new Set([<span key="a">hi</span>, <span key="b">bye</span>])}
+      </>
     );
 
     ReactNoop.render(element);
@@ -94,7 +95,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <Stateful key="a" />
       ) : (
@@ -139,7 +140,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
           <Stateful />
@@ -180,7 +181,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
           <>
@@ -235,16 +236,14 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
-          <>
-            <Stateful key="a" />
-          </>
+          <Stateful />
         </>
       ) : (
         <>
-          <Stateful key="a" />
+          <Stateful />
         </>
       );
     }
@@ -278,7 +277,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <Stateful key="a" />
       ) : (
@@ -319,7 +318,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <Stateful key="a" />
       ) : (
@@ -366,14 +365,14 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
           <Stateful key="a" />
         </>
       ) : (
         <>{[<Stateful key="a" />]}</>
-      );
+        );
     }
 
     ReactNoop.render(<Foo condition={true} />);
@@ -392,7 +391,7 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should preserve state between top level fragment and array', async function () {
+  it('should preserve state between top-level fragment and array', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
@@ -405,9 +404,9 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
-        [<Stateful key="a" />]
+        <>{[<Stateful key="a" />]}</>
       ) : (
         <>
           <Stateful key="a" />
@@ -444,16 +443,13 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>{[<Stateful key="a" />]}</>
       ) : (
         <>
-          <>
-            <Stateful key="a" />
-          </>
-        </>
-      );
+          <><Stateful key="a" /></>
+        );
     }
 
     ReactNoop.render(<Foo condition={true} />);
@@ -485,12 +481,12 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>{[<Stateful key="a" />]}</>
       ) : (
         [[<Stateful key="a" />]]
-      );
+        );
     }
 
     ReactNoop.render(<Foo condition={true} />);
@@ -522,16 +518,14 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
-          <>
-            <Stateful key="a" />
-          </>
+          <Stateful key="a" />
         </>
       ) : (
         [[<Stateful key="a" />]]
-      );
+        );
     }
 
     ReactNoop.render(<Foo condition={true} />);
@@ -563,16 +557,16 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
-        <React.Fragment key="a">
+        <>
           <Stateful />
-        </React.Fragment>
+        </>
       ) : (
-        <React.Fragment key="b">
+        <>
           <Stateful />
           <span>World</span>
-        </React.Fragment>
+        </>
       );
     }
 
@@ -610,11 +604,11 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
-        <React.Fragment key="a">
+        <>
           <Stateful />
-        </React.Fragment>
+        </>
       ) : (
         <>
           <Stateful />
@@ -651,14 +645,12 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <div>
           <React.Fragment key="c">
             <span>foo</span>
-            <div key="b">
-              <Stateful key="a" />
-            </div>
+            <div key="b"><Stateful key="a" /></div>
           </React.Fragment>
           <span>boop</span>
         </div>
@@ -666,9 +658,7 @@ describe('ReactFragment', () => {
         <div>
           <span>beep</span>
           <React.Fragment key="c">
-            <div key="b">
-              <Stateful key="a" />
-            </div>
+            <div key="b"><Stateful key="a" /></div>
             <span>bar</span>
           </React.Fragment>
         </div>
@@ -707,7 +697,7 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should not preserve state when switching to a keyed fragment to an array', async () => {
+  it('should not preserve state when switching to a keyed fragment to an array', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
@@ -720,14 +710,10 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <div>
-          {
-            <React.Fragment key="foo">
-              <Stateful />
-            </React.Fragment>
-          }
+          <React.Fragment key="foo"><Stateful /></React.Fragment>
           <span />
         </div>
       ) : (
@@ -741,25 +727,14 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
+    await assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
         '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
+        'Check the render method of `div`. It was passed a child from Foo. ' +
         'See https://react.dev/link/warning-keys for more information.\n' +
         '    in Foo (at **)',
     ]);
 
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <div>Hello</div>
-        <span />
-      </div>,
-    );
-
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
@@ -775,7 +750,7 @@ describe('ReactFragment', () => {
   it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async function () {
     const ops = [];
 
-    function Passthrough({children}) {
+    function Passthrough({ children }) {
       return children;
     }
 
@@ -789,18 +764,16 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
-          <>
+          <Passthrough>
             <Stateful />
-          </>
+          </Passthrough>
         </>
       ) : (
         <>
-          <Passthrough>
-            <Stateful />
-          </Passthrough>
+          <Stateful />
         </>
       );
     }
@@ -824,7 +797,7 @@ describe('ReactFragment', () => {
   it('should not preserve state when switching a nested keyed fragment to a passthrough component', async function () {
     const ops = [];
 
-    function Passthrough({children}) {
+    function Passthrough({ children }) {
       return children;
     }
 
@@ -838,7 +811,7 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
         <>
           <React.Fragment key="a">
@@ -857,7 +830,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    ReactNoop.render(<Foo condition={false} />);
+    ReactNoop.render(<Condition condition={false} />);
     await waitForAll([]);
 
     expect(ops).toEqual([]);
@@ -873,7 +846,7 @@ describe('ReactFragment', () => {
   it('should not preserve state when switching a nested keyed array to a passthrough component', async function () {
     const ops = [];
 
-    function Passthrough({children}) {
+    function Passthrough({ children }) {
       return children;
     }
 
@@ -887,28 +860,28 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? (
-        <>{[<Stateful key="a" />]}</>
-      ) : (
         <>
-          <Passthrough>
-            <Stateful />
-          </Passthrough>
+          {[<Stateful key="a" />]}
         </>
+      ) : (
+        <Passthrough>
+          <Stateful />
+        </Passthrough>
       );
     }
 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    ReactNoop.render(<Foo condition={false} />);
+    ReactNoop.render(<Condition condition={false} />);
     await waitForAll([]);
 
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
+    ReactNoop.render(<Condition condition={true} />);
     await waitForAll([]);
 
     expect(ops).toEqual([]);
@@ -928,34 +901,24 @@ describe('ReactFragment', () => {
       }
     }
 
-    function Foo({condition}) {
-      return condition
-        ? [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ]
-        : [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ];
+    function Foo({ condition }) {
+      return condition ? (
+        <>
+          <span />
+          <React.Fragment>
+            <Stateful />
+          </React.Fragment>
+        </>
+      ) : (
+        [
+          <span />,
+          <Fragment>
+            <Stateful />
+          </Fragment>,
+        ]
+      );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
-
     ReactNoop.render(<Foo condition={false} />);
     // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
@@ -973,7 +936,7 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoout).toMatchRenderedOutput(
       <>
         <span />
         <div>Hello</div>
@@ -981,7 +944,7 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
+  it('should preserve state when adding a fragment wrapped in Lazy', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
@@ -1003,14 +966,14 @@ describe('ReactFragment', () => {
       ),
     }));
 
-    function Foo({condition}) {
+    function Foo({ condition }) {
       return condition ? <Stateful key="a" /> : lazyChild;
     }
 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    ReactNoop.render(<Foo condition={false} />);
+    ReactNoop.render(<Condition condition={false} />);
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful']);
@@ -1021,10 +984,11 @@ describe('ReactFragment', () => {
       </>,
     );
 
-    ReactNoop.render(<Foo condition={true} />);
+    ReactNoop.render(<Condition condition={true} />);
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
-});
\ No newline at end of file
+});
+</article>
\ No newline at end of file
