
index 285cd8047..920ea7e64 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmpbopqf2rj_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmpoo478us9_actual.txt	
@@ -12,7 +12,6 @@
 let React;
 let ReactNoop;
 let waitForAll;
-let assertConsoleErrorDev;
 
 describe('ReactFragment', () => {
   beforeEach(function () {
@@ -23,7 +22,6 @@ describe('ReactFragment', () => {
 
     const InternalTestUtils = require('internal-test-utils');
     waitForAll = InternalTestUtils.waitForAll;
-    assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
   it('should render a single child via noop renderer', async () => {
@@ -742,15 +740,9 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in Foo (at **)',
-    ]);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Each child in a list should have a unique "key" prop.',
+    );
 
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
@@ -945,16 +937,8 @@ describe('ReactFragment', () => {
     }
 
     ReactNoop.render(<Foo condition={true} />);
+    // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
 
     ReactNoop.render(<Foo condition={false} />);
     // The key warning gets deduped because it's in the same component.
@@ -980,51 +964,4 @@ describe('ReactFragment', () => {
       </>,
     );
   });
-
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    const lazyChild = React.lazy(async () => ({
-      default: (
-        <>
-          <Stateful key="a" />
-          <div key="b">World</div>
-        </>
-      ),
-    }));
-
-    function Foo({condition}) {
-      return condition ? <Stateful key="a" /> : lazyChild;
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <div>Hello</div>
-        <div>World</div>
-      </>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
 });
\ No newline at end of file
