
index 285cd804..104397be 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmp15cvin3x_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmpvypkjdda_actual.txt	
@@ -616,9 +616,9 @@ describe('ReactFragment', () => {
           <Stateful />
         </React.Fragment>
       ) : (
-        <>
+        <React.Fragment>
           <Stateful />
-        </>
+        </React.Fragment>
       );
     }
 
@@ -708,6 +708,7 @@ describe('ReactFragment', () => {
   });
 
   it('should not preserve state when switching to a keyed fragment to an array', async () => {
+    spyOnDev(console, 'error');
     const ops = [];
 
     class Stateful extends React.Component {
@@ -744,12 +745,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={false} />);
     await waitForAll([]);
     assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in Foo (at **)',
+      'Each child in a list should have a unique "key" prop.',
     ]);
 
     expect(ops).toEqual([]);
@@ -959,6 +955,15 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={false} />);
     // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
+    assertConsoleErrorDev([
+      'Each child in a list should have a unique "key" prop.\n' +
+        '\n' +
+        'Check the top-level render call using <Foo>. ' +
+        'It was passed a child from Foo. ' +
+        'See https://react.dev/link/warning-keys for more information.\n' +
+        '    in span (at **)\n' +
+        '    in Foo (at **)',
+    ]);
 
     expect(ops).toEqual(['Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
@@ -971,6 +976,15 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
+    assertConsoleErrorDev([
+      'Each child in a list should have a unique "key" prop.\n' +
+        '\n' +
+        'Check the top-level render call using <Foo>. ' +
+        'It was passed a child from Foo. ' +
+        'See https://react.dev/link/warning-keys for more information.\n' +
+        '    in span (at **)\n' +
+        '    in Foo (at **)',
+    ]);
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(
