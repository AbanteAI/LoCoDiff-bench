
index 285cd8047..493fdab0c 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmpnbklc9ow_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmpwovfqqbx_actual.txt	
@@ -502,529 +502,4 @@ describe('ReactFragment', () => {
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state between double nested fragment and double nested array', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <>
-          <>
-            <Stateful key="a" />
-          </>
-        </>
-      ) : (
-        [[<Stateful key="a" />]]
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state of children when the keys are different', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <React.Fragment key="a">
-          <Stateful />
-        </React.Fragment>
-      ) : (
-        <React.Fragment key="b">
-          <Stateful />
-          <span>World</span>
-        </React.Fragment>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <div>Hello</div>
-        <span>World</span>
-      </>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state between unkeyed and keyed fragment', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <React.Fragment key="a">
-          <Stateful />
-        </React.Fragment>
-      ) : (
-        <>
-          <Stateful />
-        </>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state with reordering in multiple levels', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <div>
-          <React.Fragment key="c">
-            <span>foo</span>
-            <div key="b">
-              <Stateful key="a" />
-            </div>
-          </React.Fragment>
-          <span>boop</span>
-        </div>
-      ) : (
-        <div>
-          <span>beep</span>
-          <React.Fragment key="c">
-            <div key="b">
-              <Stateful key="a" />
-            </div>
-            <span>bar</span>
-          </React.Fragment>
-        </div>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <span>beep</span>
-        <div>
-          <div>Hello</div>
-        </div>
-        <span>bar</span>
-      </div>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <span>foo</span>
-        <div>
-          <div>Hello</div>
-        </div>
-        <span>boop</span>
-      </div>,
-    );
-  });
-
-  it('should not preserve state when switching to a keyed fragment to an array', async () => {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <div>
-          {
-            <React.Fragment key="foo">
-              <Stateful />
-            </React.Fragment>
-          }
-          <span />
-        </div>
-      ) : (
-        <div>
-          {[<Stateful />]}
-          <span />
-        </div>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in Foo (at **)',
-    ]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <div>Hello</div>
-        <span />
-      </div>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <div>Hello</div>
-        <span />
-      </div>,
-    );
-  });
-
-  it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async function () {
-    const ops = [];
-
-    function Passthrough({children}) {
-      return children;
-    }
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <>
-          <>
-            <Stateful />
-          </>
-        </>
-      ) : (
-        <>
-          <Passthrough>
-            <Stateful />
-          </Passthrough>
-        </>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async function () {
-    const ops = [];
-
-    function Passthrough({children}) {
-      return children;
-    }
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <>
-          <React.Fragment key="a">
-            <Stateful />
-          </React.Fragment>
-        </>
-      ) : (
-        <>
-          <Passthrough>
-            <Stateful />
-          </Passthrough>
-        </>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should not preserve state when switching a nested keyed array to a passthrough component', async function () {
-    const ops = [];
-
-    function Passthrough({children}) {
-      return children;
-    }
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition ? (
-        <>{[<Stateful key="a" />]}</>
-      ) : (
-        <>
-          <Passthrough>
-            <Stateful />
-          </Passthrough>
-        </>
-      );
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-
-  it('should preserve state when it does not change positions', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    function Foo({condition}) {
-      return condition
-        ? [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ]
-        : [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ];
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <span />
-        <div>Hello</div>
-      </>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    // The key warning gets deduped because it's in the same component.
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <span />
-        <div>Hello</div>
-      </>,
-    );
-  });
-
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
-    const ops = [];
-
-    class Stateful extends React.Component {
-      componentDidUpdate() {
-        ops.push('Update Stateful');
-      }
-
-      render() {
-        return <div>Hello</div>;
-      }
-    }
-
-    const lazyChild = React.lazy(async () => ({
-      default: (
-        <>
-          <Stateful key="a" />
-          <div key="b">World</div>
-        </>
-      ),
-    }));
-
-    function Foo({condition}) {
-      return condition ? <Stateful key="a" /> : lazyChild;
-    }
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <>
-        <div>Hello</div>
-        <div>World</div>
-      </>,
-    );
-
-    ReactNoop.render(<Foo condition={true} />);
-    await waitForAll([]);
-
-    expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
-  });
-});
\ No newline at end of file
+    ReactNoop.render(<Foo condition={true} />
\ No newline at end of file
