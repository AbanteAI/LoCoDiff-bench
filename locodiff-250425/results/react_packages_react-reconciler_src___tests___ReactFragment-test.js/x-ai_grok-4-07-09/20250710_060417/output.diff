
index 285cd8047..37264bcd7 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmp3qua9ejp_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmps5bmh7rs_actual.txt	
@@ -7,6 +7,7 @@
  * @emails react-core
  * @jest-environment node
  */
+
 'use strict';
 
 let React;
@@ -583,6 +584,7 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     expect(ops).toEqual([]);
+
     expect(ReactNoop).toMatchRenderedOutput(
       <>
         <div>Hello</div>
@@ -616,9 +618,9 @@ describe('ReactFragment', () => {
           <Stateful />
         </React.Fragment>
       ) : (
-        <>
+        <React.Fragment>
           <Stateful />
-        </>
+        </React.Fragment>
       );
     }
 
@@ -742,15 +744,9 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in Foo (at **)',
-    ]);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Each child in a list should have a unique "key" prop.',
+    );
 
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
@@ -772,7 +768,7 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async function () {
+  it('should not preserve state when switching a nested unkeyed fragment to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -821,7 +817,7 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async function () {
+  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -870,7 +866,7 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state when switching a nested keyed array to a passthrough component', async function () {
+  it('should not preserve state when switching a nested keyed array to a passthrough component', async () => {
     const ops = [];
 
     function Passthrough({children}) {
@@ -915,7 +911,7 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should preserve state when it does not change positions', async function () {
+  it('should preserve state when it does not change positions', async () => {
     const ops = [];
 
     class Stateful extends React.Component {
@@ -935,6 +931,7 @@ describe('ReactFragment', () => {
             <>
               <Stateful />
             </>,
+
           ]
         : [
             <span />,
@@ -947,7 +944,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
     assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
+      'Each child o√π in a list should have a unique "key" prop.\n' +
         '\n' +
         'Check the top-level render call using <Foo>. ' +
         'It was passed a child from Foo. ' +
@@ -981,11 +978,12 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
+  it('should preserve state of children when adding a fragment wrapped in Lazy', async () => {
     const ops = [];
 
     class Stateful extends React.Component {
-      componentDidUpdate() {
+
+componentDidUpdate() {
         ops.push('Update Stateful');
       }
 
@@ -1003,7 +1001,7 @@ describe('ReactFragment', () => {
       ),
     }));
 
-    function Foo({condition}) {
+    function Foo({condition} ) {
       return condition ? <Stateful key="a" /> : lazyChild;
     }
 
@@ -1026,5 +1024,6 @@ describe('ReactFragment', () => {
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+
   });
 });
\ No newline at end of file
