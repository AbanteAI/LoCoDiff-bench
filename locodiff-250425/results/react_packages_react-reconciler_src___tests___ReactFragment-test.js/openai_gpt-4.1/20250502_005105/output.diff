
index 285cd804..63c96d02 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmpnbu_7_wh_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmpnmccjzj6_actual.txt	
@@ -7,7 +7,6 @@
  * @emails react-core
  * @jest-environment node
  */
-'use strict';
 
 let React;
 let ReactNoop;
@@ -616,9 +615,9 @@ describe('ReactFragment', () => {
           <Stateful />
         </React.Fragment>
       ) : (
-        <>
+        <React.Fragment>
           <Stateful />
-        </>
+        </React.Fragment>
       );
     }
 
@@ -932,29 +931,20 @@ describe('ReactFragment', () => {
       return condition
         ? [
             <span />,
-            <>
+            <React.Fragment>
               <Stateful />
-            </>,
+            </React.Fragment>,
           ]
         : [
             <span />,
-            <>
+            <React.Fragment>
               <Stateful />
-            </>,
+            </React.Fragment>,
           ];
     }
 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
 
     ReactNoop.render(<Foo condition={false} />);
     // The key warning gets deduped because it's in the same component.
@@ -981,6 +971,37 @@ describe('ReactFragment', () => {
     );
   });
 
+  it('should not preserve state and warn if list fragment/array missing keys (DEV)', async function () {
+    const ops = [];
+
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
+
+      render() {
+        return <div>Hello</div>;
+      }
+    }
+
+    function Foo({condition}) {
+      // this is where the missing key comes from
+      return condition
+        ? [<span />, <React.Fragment><Stateful /></React.Fragment>]
+        : [<span />, <React.Fragment><Stateful /></React.Fragment>];
+    }
+
+    ReactNoop.render(<Foo condition={true} />);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Each child in a list should have a unique "key" prop.',
+    );
+
+    ReactNoop.render(<Foo condition={true} />);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Each child in a list should have a unique "key" prop.',
+    );
+  });
+
   it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
     const ops = [];
 
