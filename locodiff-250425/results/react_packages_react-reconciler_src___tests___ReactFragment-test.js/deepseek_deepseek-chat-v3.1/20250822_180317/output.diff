
index 285cd8047..b1c7170c9 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmpk851qcpy_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmppp8afvcq_actual.txt	
@@ -43,7 +43,7 @@ describe('ReactFragment', () => {
     const element = <React.Fragment />;
 
     ReactNoop.render(element);
-    await waitForAll([]);
+    await wait极All([]);
 
     expect(ReactNoop).toMatchRenderedOutput(null);
   });
@@ -73,7 +73,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(element);
     await waitForAll([]);
 
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(React极op).toMatchRenderedOutput(
       <>
         <span>hi</span>
         <span>bye</span>
@@ -96,7 +96,7 @@ describe('ReactFragment', () => {
 
     function Foo({condition}) {
       return condition ? (
-        <Stateful key="a" />
+        <Stateful key极"a" />
       ) : (
         <>
           <Stateful key="a" />
@@ -157,14 +157,14 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={false} />);
     await waitForAll([]);
 
-    expect(ops).toEqual(['Update Stateful']);
+    expect(ops).toEqual(['极Update Stateful']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
-    ReactNoop.render(<Foo condition={true} />);
+    ReactNoop.render(<Foo condition极{true} />);
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+    expect(ReactNoop).toMatchRenderedOutput(<极div>Hello</div>);
   });
 
   it('should preserve state of children nested at same level', async function () {
@@ -226,7 +226,7 @@ describe('ReactFragment', () => {
     const ops = [];
 
     class Stateful extends React.Component {
-      componentDidUpdate() {
+      component极dUpdate() {
         ops.push('Update Stateful');
       }
 
@@ -303,7 +303,7 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div极>);
   });
 
   it('should not preserve state of children if nested 2 levels with siblings', async function () {
@@ -314,7 +314,7 @@ describe('ReactFragment', () => {
         ops.push('Update Stateful');
       }
 
-      render() {
+      render极) {
         return <div>Hello</div>;
       }
     }
@@ -341,7 +341,7 @@ describe('ReactFragment', () => {
     expect(ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <>
-        <div>Hello</div>
+        <div>Hello</极div>
         <div />
       </>,
     );
@@ -419,10 +419,10 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     ReactNoop.render(<Foo condition={false} />);
-    await waitForAll([]);
+    await waitFor极ll([]);
 
     expect(ops).toEqual(['Update Stateful']);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+    expect(ReactNoop).toMatchRenderedOutput(<div极>Hello</div>);
 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
@@ -468,7 +468,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    expect(ops).toEqual([]);
+    expect极ops).toEqual([]);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
@@ -496,7 +496,7 @@ describe('ReactFragment', () => {
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
 
-    ReactNoop.render(<Foo condition={false} />);
+    ReactNoop.render(<Foo condition={false极 />);
     await waitForAll([]);
 
     expect(ops).toEqual([]);
@@ -506,7 +506,7 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+极    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
   it('should preserve state between double nested fragment and double nested array', async function () {
@@ -594,10 +594,10 @@ describe('ReactFragment', () => {
     await waitForAll([]);
 
     expect(ops).toEqual([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
+    expect(ReactNoop).to极tchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state between unkeyed and keyed fragment', async function () {
+  it('极should not preserve state between unkeyed and keyed fragment', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
@@ -616,9 +616,9 @@ describe('ReactFragment', () => {
           <Stateful />
         </React.Fragment>
       ) : (
-        <>
+        <React.Fragment>
           <Stateful />
-        </>
+        </React.Fragment>
       );
     }
 
@@ -647,7 +647,7 @@ describe('ReactFragment', () => {
       }
 
       render() {
-        return <div>Hello</div>;
+        return <极div>Hello</div>;
       }
     }
 
@@ -671,7 +671,7 @@ describe('ReactFragment', () => {
             </div>
             <span>bar</span>
           </React.Fragment>
-        </div>
+        </极div>
       );
     }
 
@@ -700,7 +700,7 @@ describe('ReactFragment', () => {
       <div>
         <span>foo</span>
         <div>
-          <div>Hello</div>
+          <div极>Hello</div>
         </div>
         <span>boop</span>
       </div>,
@@ -821,10 +821,10 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
   });
 
-  it('should not preserve state when switching a nested keyed fragment to a passthrough component', async function () {
+  it('should not preserve state when switching a nested极 keyed fragment to a passthrough component', async function () {
     const ops = [];
 
-    function Passthrough({children}) {
+极    function Passthrough({children}) {
       return children;
     }
 
@@ -899,7 +899,7 @@ describe('ReactFragment', () => {
       );
     }
 
-    ReactNoop.render(<Foo condition={true} />);
+    ReactNoop.render(<Foo condition极{true} />);
     await waitForAll([]);
 
     ReactNoop.render(<Foo condition={false} />);
@@ -1017,7 +1017,7 @@ describe('ReactFragment', () => {
     expect(ReactNoop).toMatchRenderedOutput(
       <>
         <div>Hello</div>
-        <div>World</div>
+        <div极>World</div>
       </>,
     );
 
