
index 285cd804..59da6566 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmp9qfsl06e_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmp90xsva9r_actual.txt	
@@ -17,10 +17,8 @@ let assertConsoleErrorDev;
 describe('ReactFragment', () => {
   beforeEach(function () {
     jest.resetModules();
-
     React = require('react');
     ReactNoop = require('react-noop-renderer');
-
     const InternalTestUtils = require('internal-test-utils');
     waitForAll = InternalTestUtils.waitForAll;
     assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
@@ -32,7 +30,6 @@ describe('ReactFragment', () => {
         <span>foo</span>
       </>
     );
-
     ReactNoop.render(element);
     await waitForAll([]);
 
@@ -41,7 +38,6 @@ describe('ReactFragment', () => {
 
   it('should render zero children via noop renderer', async () => {
     const element = <React.Fragment />;
-
     ReactNoop.render(element);
     await waitForAll([]);
 
@@ -54,7 +50,6 @@ describe('ReactFragment', () => {
         hello <span>world</span>
       </>
     );
-
     ReactNoop.render(element);
     await waitForAll([]);
 
@@ -69,7 +64,6 @@ describe('ReactFragment', () => {
     const element = (
       <>{new Set([<span key="a">hi</span>, <span key="b">bye</span>])}</>
     );
-
     ReactNoop.render(element);
     await waitForAll([]);
 
@@ -88,7 +82,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -133,7 +126,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -174,7 +166,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -229,7 +220,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -272,7 +262,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -313,7 +302,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -360,7 +348,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -399,7 +386,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -438,7 +424,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -477,9 +462,8 @@ describe('ReactFragment', () => {
 
     class Stateful extends React.Component {
       componentDidUpdate() {
-        ops.push('Update Stateful');
+        ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -516,7 +500,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -557,7 +540,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -604,7 +586,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -616,9 +597,9 @@ describe('ReactFragment', () => {
           <Stateful />
         </React.Fragment>
       ) : (
-        <>
+        <React.Fragment>
           <Stateful />
-        </>
+        </React.Fragment>
       );
     }
 
@@ -645,7 +626,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -707,14 +687,13 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should not preserve state when switching to a keyed fragment to an array', async () => {
+  it('should not preserve state when switching to a keyed fragment to an array', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -723,18 +702,11 @@ describe('ReactFragment', () => {
     function Foo({condition}) {
       return condition ? (
         <div>
-          {
-            <React.Fragment key="foo">
-              <Stateful />
-            </React.Fragment>
-          }
+          {<React.Fragment key="foo"><Stateful /></React.Fragment>}
           <span />
         </div>
       ) : (
-        <div>
-          {[<Stateful />]}
-          <span />
-        </div>
+        <div>{[<Stateful />]}<span /></div>
       );
     }
 
@@ -743,6 +715,7 @@ describe('ReactFragment', () => {
 
     ReactNoop.render(<Foo condition={false} />);
     await waitForAll([]);
+
     assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
         '\n' +
@@ -783,7 +756,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -832,7 +804,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -881,7 +852,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -922,7 +892,6 @@ describe('ReactFragment', () => {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
-
       render() {
         return <div>Hello</div>;
       }
@@ -930,34 +899,14 @@ describe('ReactFragment', () => {
 
     function Foo({condition}) {
       return condition
-        ? [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ]
-        : [
-            <span />,
-            <>
-              <Stateful />
-            </>,
-          ];
+        ? [<span key="1" />, <><Stateful /></>]
+        : [<span key="1" />, <><Stateful /></>];
     }
 
     ReactNoop.render(<Foo condition={true} />);
     await waitForAll([]);
-    assertConsoleErrorDev([
-      'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
-    ]);
 
     ReactNoop.render(<Foo condition={false} />);
-    // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful']);
@@ -969,7 +918,6 @@ describe('ReactFragment', () => {
     );
 
     ReactNoop.render(<Foo condition={true} />);
-    // The key warning gets deduped because it's in the same component.
     await waitForAll([]);
 
     expect(ops).toEqual(['Update Stateful', 'Update Stateful']);
@@ -981,14 +929,71 @@ describe('ReactFragment', () => {
     );
   });
 
-  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
+  it('should not preserve state when switching to a keyed fragment to an array', async function () {
     const ops = [];
 
     class Stateful extends React.Component {
       componentDidUpdate() {
         ops.push('Update Stateful');
       }
+      render() {
+        return <div>Hello</div>;
+      }
+    }
+
+    function Foo({condition}) {
+      return condition ? (
+        <div>
+          <React.Fragment key="foo"><Stateful /></React.Fragment>
+          <span />
+        </div>
+      ) : (
+        <div>{[<Stateful />]}<span /></div>
+      );
+    }
+
+    ReactNoop.render(<Foo condition={true} />);
+    await waitForAll([]);
+
+    ReactNoop.render(<Foo condition={false} />);
+    await waitForAll([]);
+    assertConsoleErrorDev([
+      'Each child in a list should have a unique "key" prop.\n' +
+        '\n' +
+        'Check the render method of `div`. ' +
+        'It was passed a child from Foo. ' +
+        'See https://react.dev/link/warning-keys for more information.\n' +
+        '    in Foo (at **)',
+    ]);
+
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <div>
+        <div>Hello</div>
+        <span />
+      </div>,
+    );
+
+    ReactNoop.render(<Foo condition={true} />);
+    await waitForAll([]);
+
+    expect(ops).toEqual([]);
+    expect(ReactNoop).toMatchRenderedOutput(
+      <div>
+        <div>Hello</div>
+        <span />
+      </div>,
+    );
+  });
+  
+  // Regression tests for lazy top-level fragment semantics
+  it('should preserve state of children when adding a fragment wrapped in Lazy', async function () {
+    const ops = [];
 
+    class Stateful extends React.Component {
+      componentDidUpdate() {
+        ops.push('Update Stateful');
+      }
       render() {
         return <div>Hello</div>;
       }
