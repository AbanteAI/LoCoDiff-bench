
index 285cd8047..28b0a82fd 100644
--- a/react_packages_react-reconciler_src___tests___ReactFragment-test.js_expectedoutput.txt (expected):tmp/tmpfl561xy7_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactFragment-test.js_extracted.txt (actual):tmp/tmpzti8itlz_actual.txt	
@@ -26,6 +26,21 @@ describe('ReactFragment', () => {
     assertConsoleErrorDev = InternalTestUtils.assertConsoleErrorDev;
   });
 
+  function div(...children) {
+    children = children.map(c =>
+      typeof c === 'string' ? {text: c, hidden: false} : c,
+    );
+    return {type: 'div', children, prop: undefined, hidden: false};
+  }
+
+  function span(prop) {
+    return {type: 'span', children: [], prop, hidden: false};
+  }
+
+  function text(t) {
+    return {text: t, hidden: false};
+  }
+
   it('should render a single child via noop renderer', async () => {
     const element = (
       <>
@@ -745,11 +760,11 @@ describe('ReactFragment', () => {
     await waitForAll([]);
     assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the render method of `div`. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in Foo (at **)',
+      '\n' +
+      'Check the render method of `div`. ' +
+      'It was passed a child from Foo. ' +
+      'See https://react.dev/link/warning-keys for more information.\n' +
+      '    in Foo (at **)',
     ]);
 
     expect(ops).toEqual([]);
@@ -948,12 +963,12 @@ describe('ReactFragment', () => {
     await waitForAll([]);
     assertConsoleErrorDev([
       'Each child in a list should have a unique "key" prop.\n' +
-        '\n' +
-        'Check the top-level render call using <Foo>. ' +
-        'It was passed a child from Foo. ' +
-        'See https://react.dev/link/warning-keys for more information.\n' +
-        '    in span (at **)\n' +
-        '    in Foo (at **)',
+      '\n' +
+      'Check the top-level render call using <Foo>. ' +
+      'It was passed a child from Foo. ' +
+      'See https://react.dev/link/warning-keys for more information.\n' +
+      '    in span (at **)\n' +
+      '    in Foo (at **)',
     ]);
 
     ReactNoop.render(<Foo condition={false} />);
