
index 8024290fa..672da7c15 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmp6cn4a4ax_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmpca4yftlj_actual.txt	
@@ -519,7 +519,48 @@ export function readContext<T>(context: ReactContext<T>): T {
       );
     }
   }
-  return readContextForConsumer(currentlyRenderingFiber, context);
+
+  const value = isPrimaryRenderer
+    ? context._currentValue
+    : context._currentValue2;
+
+  if (lastContextDependency === null) {
+    if (currentlyRenderingFiber === null) {
+      throw new Error(
+        'Context can only be read while React is rendering. ' +
+          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
+          'In function components, you can read it directly in the function body, but not ' +
+          'inside Hooks like useReducer() or useMemo().',
+      );
+    }
+
+    // This is the first dependency for this component. Create a new list.
+    const contextItem = {
+      context: ((context: any): ReactContext<mixed>),
+      memoizedValue: value,
+      next: null,
+    };
+    lastContextDependency = contextItem;
+    currentlyRenderingFiber.dependencies = __DEV__
+      ? {
+          lanes: NoLanes,
+          firstContext: contextItem,
+          _debugThenableState: null,
+        }
+      : {
+          lanes: NoLanes,
+          firstContext: contextItem,
+        };
+    currentlyRenderingFiber.flags |= NeedsPropagation;
+  } else {
+    // Append a new context item.
+    lastContextDependency = lastContextDependency.next = {
+      context: ((context: any): ReactContext<mixed>),
+      memoizedValue: value,
+      next: null,
+    };
+  }
+  return value;
 }
 
 export function readContextDuringReconciliation<T>(
