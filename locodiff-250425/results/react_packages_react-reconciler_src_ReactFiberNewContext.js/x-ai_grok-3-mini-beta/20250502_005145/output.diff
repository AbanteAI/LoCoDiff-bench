
index 8024290f..ebca8b03 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmpvymy4mc0_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmpksgj_o0p_actual.txt	
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) Meta Platforms, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -12,13 +12,13 @@ import type {
   Fiber,
   ContextDependency,
   Dependencies,
+  TransitionStatus,
 } from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
 import type {Lanes} from './ReactFiberLane';
-import type {TransitionStatus} from './ReactFiberConfig';
 import type {Hook} from './ReactFiberHooks';
 
-import {isPrimaryRenderer, HostTransitionContext} from './ReactFiberConfig';
+import {isPrimaryRenderer} from './ReactFiberConfig';
 import {createCursor, push, pop} from './ReactFiberStack';
 import {ContextProvider, DehydratedFragment} from './ReactWorkTags';
 import {NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';
@@ -34,6 +34,12 @@ import {getHostTransitionProvider} from './ReactFiberHostContext';
 
 const valueCursor: StackCursor<mixed> = createCursor(null);
 
+let rendererSigil;
+if (__DEV__) {
+  // Use this to detect multiple renderers using the same context
+  rendererSigil = {};
+}
+
 let rendererCursorDEV: StackCursor<Object | null>;
 if (__DEV__) {
   rendererCursorDEV = createCursor(null);
@@ -43,12 +49,6 @@ if (__DEV__) {
   renderer2CursorDEV = createCursor(null);
 }
 
-let rendererSigil;
-if (__DEV__) {
-  // Use this to detect multiple renderers using the same context
-  rendererSigil = {};
-}
-
 let currentlyRenderingFiber: Fiber | null = null;
 let lastContextDependency: ContextDependency<mixed> | null = null;
 
@@ -194,9 +194,6 @@ export function propagateContextChange<T>(
   context: ReactContext<T>,
   renderLanes: Lanes,
 ): void {
-  // TODO: This path is only used by Cache components. Update
-  // lazilyPropagateParentContextChanges to look for Cache components so they
-  // can take advantage of lazy propagation.
   const forcePropagateEntireTree = true;
   propagateContextChanges(
     workInProgress,
@@ -221,16 +218,13 @@ function propagateContextChanges<T>(
     let nextFiber;
 
     // Visit this fiber.
-    const list = fiber.dependencies;
-    if (list !== null) {
+    const dependencies = fiber.dependencies;
+    if (dependencies !== null) {
       nextFiber = fiber.child;
 
-      let dep = list.firstContext;
-      findChangedDep: while (dep !== null) {
-        // Assigning these to constants to help Flow
-        const dependency = dep;
-        const consumer = fiber;
-        findContext: for (let i = 0; i < contexts.length; i++) {
+      let dependency = dependencies.firstContext;
+      while (dependency !== null) {
+        findChangedDep: for (let i = 0; i < contexts.length; i++) {
           const context: ReactContext<T> = contexts[i];
           // Check if the context matches.
           if (dependency.context === context) {
@@ -243,13 +237,13 @@ function propagateContextChanges<T>(
             // could add back a dirty flag as an optimization to avoid double
             // checking, but until we have selectors it's not really worth
             // the trouble.
-            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);
-            const alternate = consumer.alternate;
+            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
+            const alternate = fiber.alternate;
             if (alternate !== null) {
               alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
             }
             scheduleContextWorkOnParentPath(
-              consumer.return,
+              fiber.return,
               renderLanes,
               workInProgress,
             );
@@ -267,7 +261,7 @@ function propagateContextChanges<T>(
             break findChangedDep;
           }
         }
-        dep = dependency.next;
+        dependency = dependency.next;
       }
     } else if (fiber.tag === DehydratedFragment) {
       // If a dehydrated suspense boundary is in this subtree, we don't know
@@ -400,14 +394,23 @@ function propagateParentContextChanges(
         const newValue = newProps.value;
 
         const oldValue = oldProps.value;
-
-        if (!is(newValue, oldValue)) {
-          if (contexts !== null) {
-            contexts.push(context);
-          } else {
-            contexts = [context];
+        if (enableRenderableContext) {
+          if (newValue === oldValue) {
+            // No change. If the context matches, we can continue up the tree.
+            continue;
+          }
+        } else {
+          if (is(newValue, oldValue)) {
+            // No change. If the context matches, we can continue up the tree.
+            continue;
           }
         }
+
+        if (contexts !== null) {
+          contexts.push(context);
+        } else {
+          contexts = [context];
+        }
       }
     } else if (parent === getHostTransitionProvider()) {
       // During a host transition, a host component can act like a context
@@ -519,7 +522,53 @@ export function readContext<T>(context: ReactContext<T>): T {
       );
     }
   }
-  return readContextForConsumer(currentlyRenderingFiber, context);
+
+  if (!(enableLazyContextPropagation && enableContextProfiling)) {
+    return readContextForConsumer(currentlyRenderingFiber, context);
+  }
+
+  const value = isPrimaryRenderer
+    ? context._currentValue
+    : context._currentValue2;
+
+  // We have an observedBits version of this API for performance, but it's the
+  // same code as the normal oneâ€”we just always do the full comparison in DEV.
+  const contextItem = {
+    context: ((context: any): ReactContext<mixed>),
+    memoizedValue: value,
+    next: null,
+    select: ((identity: any): (context: mixed) => mixed) => identity,
+    lastSelectedValue: value,
+  };
+
+  if (lastContextDependency === null) {
+    if (currentlyRenderingFiber === null) {
+      throw new Error(
+        'Context can only be read while React is rendering. ' +
+          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
+          'In function components, you can read it directly in the function body, but not ' +
+          'inside Hooks like useReducer() or useMemo().',
+      );
+    }
+
+    // This is the first dependency for this component. Create a new list.
+    lastContextDependency = contextItem;
+    currentlyRenderingFiber.dependencies = __DEV__
+      ? {
+          lanes: NoLanes,
+          firstContext: contextItem,
+          _debugThenableState: null,
+        }
+      : {
+          lanes: NoLanes,
+          firstContext: contextItem,
+        };
+    currentlyRenderingFiber.flags |= NeedsPropagation;
+  } else {
+    // Append a new context item.
+    lastContextDependency = lastContextDependency.next = contextItem;
+  }
+  return value;
 }
 
 export function readContextDuringReconciliation<T>(
@@ -533,6 +582,53 @@ export function readContextDuringReconciliation<T>(
   return readContextForConsumer(consumer, context);
 }
 
+function readContextForConsumer_withSelect<C>(
+  consumer: Fiber | null,
+  context: ReactContext<C>,
+  select: C => Array<mixed>,
+): C {
+  const value = isPrimaryRenderer
+    ? context._currentValue
+    : context._currentValue2;
+
+  const contextItem = {
+    context: ((context: any): ReactContext<mixed>),
+    memoizedValue: value,
+    next: null,
+    select: ((select: any): (context: mixed) => Array<mixed>),
+    lastSelectedValue: select(value),
+  };
+
+  if (lastContextDependency === null) {
+    if (consumer === null) {
+      throw new Error(
+        'Context can only be read while React is rendering. ' +
+          'In classes, you can read it in the render method or getDerivedStateFromProps. ' +
+          'In function components, you can read it directly in the function body, but not ' +
+          'inside Hooks like useReducer() or useMemo().',
+      );
+    }
+
+    // This is the first dependency for this component. Create a new list.
+    lastContextDependency = contextItem;
+    consumer.dependencies = __DEV__
+      ? {
+          lanes: NoLanes,
+          firstContext: contextItem,
+          _debugThenableState: null,
+        }
+      : {
+          lanes: NoLanes,
+          firstContext: contextItem,
+        };
+    consumer.flags |= NeedsPropagation;
+  } else {
+    // Append a new context item.
+    lastContextDependency = lastContextDependency.next = contextItem;
+  }
+  return value;
+}
+
 function readContextForConsumer<T>(
   consumer: Fiber | null,
   context: ReactContext<T>,
