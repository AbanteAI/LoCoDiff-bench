--- react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual)@@ -11,7 +11,7 @@ import type {
   Fiber,
   ContextDependency,
-  Dependencies,
+  dependencies,
 } from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
 import type {Lanes} from './ReactFiberLane';
@@ -34,14 +34,15 @@ 
 const valueCursor: StackCursor<mixed> = createCursor(null);
 
-let rendererCursorDEV: StackCursor<Object | null>;
+let rendererCursorDEV: stackCursor<Object | null>;
 if (__DEV__) {
   rendererCursorDEV = createCursor(null);
 }
-let renderer2CursorDEV: StackCursor<Object | null>;
+let renderer2CursorDEV: stackCursor<Object | null>;
 if (__DEV__) {
   renderer2CursorDEV = createCursor(null);
 }
+
 
 let rendererSigil;
 if (__DEV__) {
@@ -51,6 +52,7 @@ 
 let currentlyRenderingFiber: Fiber | null = null;
 let lastContextDependency: ContextDependency<mixed> | null = null;
+
 
 let isDisallowedContextReadInDEV: boolean = false;
 
@@ -59,6 +61,7 @@   // cannot be called outside the render phase.
   currentlyRenderingFiber = null;
   lastContextDependency = null;
+
   if (__DEV__) {
     isDisallowedContextReadInDEV = false;
   }
@@ -129,14 +132,18 @@   const currentValue = valueCursor.current;
 
   if (isPrimaryRenderer) {
-    context._currentValue = currentValue;
+
+      context._currentValue = currentValue;
+
     if (__DEV__) {
       const currentRenderer = rendererCursorDEV.current;
       pop(rendererCursorDEV, providerFiber);
       context._currentRenderer = currentRenderer;
     }
   } else {
-    context._currentValue2 = currentValue;
+
+      context._currentValue2 = currentValue;
+
     if (__DEV__) {
       const currentRenderer2 = renderer2CursorDEV.current;
       pop(renderer2CursorDEV, providerFiber);
@@ -269,6 +276,9 @@         }
         dep = dependency.next;
       }
+    } else if (fiber.tag === ContextProvider) {
+      // Don't scan deeper if this is a matching provider
+      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
     } else if (fiber.tag === DehydratedFragment) {
       // If a dehydrated suspense boundary is in this subtree, we don't know
       // if it will have any context consumers in it. The best we can do is
@@ -389,6 +399,7 @@ 
       const oldProps = currentParent.memoizedProps;
       if (oldProps !== null) {
+
         let context: ReactContext<any>;
         if (enableRenderableContext) {
           context = parent.type;
@@ -492,12 +503,14 @@   return false;
 }
 
+
 export function prepareToReadContext(
   workInProgress: Fiber,
   renderLanes: Lanes,
 ): void {
   currentlyRenderingFiber = workInProgress;
   lastContextDependency = null;
+
 
   const dependencies = workInProgress.dependencies;
   if (dependencies !== null) {
@@ -505,6 +518,7 @@     dependencies.firstContext = null;
   }
 }
+
 
 export function readContext<T>(context: ReactContext<T>): T {
   if (__DEV__) {
@@ -533,6 +547,7 @@   return readContextForConsumer(consumer, context);
 }
 
+
 function readContextForConsumer<T>(
   consumer: Fiber | null,
   context: ReactContext<T>,
