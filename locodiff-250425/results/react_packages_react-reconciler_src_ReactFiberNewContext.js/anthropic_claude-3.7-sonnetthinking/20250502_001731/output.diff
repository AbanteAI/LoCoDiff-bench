
index 8024290f..6e88162b 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmpmrqlgqby_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmph2kc0rwq_actual.txt	
@@ -225,11 +225,8 @@ function propagateContextChanges<T>(
     if (list !== null) {
       nextFiber = fiber.child;
 
-      let dep = list.firstContext;
-      findChangedDep: while (dep !== null) {
-        // Assigning these to constants to help Flow
-        const dependency = dep;
-        const consumer = fiber;
+      let dependency = list.firstContext;
+      while (dependency !== null) {
         findContext: for (let i = 0; i < contexts.length; i++) {
           const context: ReactContext<T> = contexts[i];
           // Check if the context matches.
@@ -243,13 +240,13 @@ function propagateContextChanges<T>(
             // could add back a dirty flag as an optimization to avoid double
             // checking, but until we have selectors it's not really worth
             // the trouble.
-            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);
-            const alternate = consumer.alternate;
+            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
+            const alternate = fiber.alternate;
             if (alternate !== null) {
               alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
             }
             scheduleContextWorkOnParentPath(
-              consumer.return,
+              fiber.return,
               renderLanes,
               workInProgress,
             );
@@ -264,10 +261,10 @@ function propagateContextChanges<T>(
 
             // Since we already found a match, we can stop traversing the
             // dependency list.
-            break findChangedDep;
+            break findContext;
           }
         }
-        dep = dependency.next;
+        dependency = dependency.next;
       }
     } else if (fiber.tag === DehydratedFragment) {
       // If a dehydrated suspense boundary is in this subtree, we don't know
