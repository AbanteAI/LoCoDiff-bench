
index 8024290fa..2a4eae0a9 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmp1dt71rwf_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmp9hk0p9or_actual.txt	
@@ -15,8 +15,6 @@ import type {
 } from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
 import type {Lanes} from './ReactFiberLane';
-import type {TransitionStatus} from './ReactFiberConfig';
-import type {Hook} from './ReactFiberHooks';
 
 import {isPrimaryRenderer, HostTransitionContext} from './ReactFiberConfig';
 import {createCursor, push, pop} from './ReactFiberStack';
@@ -235,14 +233,6 @@ function propagateContextChanges<T>(
           // Check if the context matches.
           if (dependency.context === context) {
             // Match! Schedule an update on this fiber.
-
-            // In the lazy implementation, don't mark a dirty flag on the
-            // dependency itself. Not all changes are propagated, so we can't
-            // rely on the propagation function alone to determine whether
-            // something has changed; the consumer will check. In the future, we
-            // could add back a dirty flag as an optimization to avoid double
-            // checking, but until we have selectors it's not really worth
-            // the trouble.
             consumer.lanes = mergeLanes(consumer.lanes, renderLanes);
             const alternate = consumer.alternate;
             if (alternate !== null) {
@@ -519,6 +509,7 @@ export function readContext<T>(context: ReactContext<T>): T {
       );
     }
   }
+
   return readContextForConsumer(currentlyRenderingFiber, context);
 }
 
