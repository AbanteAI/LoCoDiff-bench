
index 8024290f..a958fbf8 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmpp_l9erb2_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmpezcn7_r1_actual.txt	
@@ -15,8 +15,6 @@ import type {
 } from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
 import type {Lanes} from './ReactFiberLane';
-import type {TransitionStatus} from './ReactFiberConfig';
-import type {Hook} from './ReactFiberHooks';
 
 import {isPrimaryRenderer, HostTransitionContext} from './ReactFiberConfig';
 import {createCursor, push, pop} from './ReactFiberStack';
@@ -29,20 +27,13 @@ import {
 } from './ReactFiberFlags';
 
 import is from 'shared/objectIs';
+import {createUpdate, ForceUpdate} from './ReactFiberClassUpdateQueue';
+import {markWorkInProgressReceivedUpdate} from './ReactFiberBeginWork';
 import {enableRenderableContext} from 'shared/ReactFeatureFlags';
 import {getHostTransitionProvider} from './ReactFiberHostContext';
 
 const valueCursor: StackCursor<mixed> = createCursor(null);
 
-let rendererCursorDEV: StackCursor<Object | null>;
-if (__DEV__) {
-  rendererCursorDEV = createCursor(null);
-}
-let renderer2CursorDEV: StackCursor<Object | null>;
-if (__DEV__) {
-  renderer2CursorDEV = createCursor(null);
-}
-
 let rendererSigil;
 if (__DEV__) {
   // Use this to detect multiple renderers using the same context
@@ -86,8 +77,6 @@ export function pushProvider<T>(
 
     context._currentValue = nextValue;
     if (__DEV__) {
-      push(rendererCursorDEV, context._currentRenderer, providerFiber);
-
       if (
         context._currentRenderer !== undefined &&
         context._currentRenderer !== null &&
@@ -105,8 +94,6 @@ export function pushProvider<T>(
 
     context._currentValue2 = nextValue;
     if (__DEV__) {
-      push(renderer2CursorDEV, context._currentRenderer2, providerFiber);
-
       if (
         context._currentRenderer2 !== undefined &&
         context._currentRenderer2 !== null &&
@@ -127,7 +114,7 @@ export function popProvider(
   providerFiber: Fiber,
 ): void {
   const currentValue = valueCursor.current;
-
+  pop(valueCursor, providerFiber);
   if (isPrimaryRenderer) {
     context._currentValue = currentValue;
     if (__DEV__) {
@@ -143,8 +130,6 @@ export function popProvider(
       context._currentRenderer2 = currentRenderer2;
     }
   }
-
-  pop(valueCursor, providerFiber);
 }
 
 export function scheduleContextWorkOnParentPath(
@@ -166,14 +151,8 @@ export function scheduleContextWorkOnParentPath(
       !isSubsetOfLanes(alternate.childLanes, renderLanes)
     ) {
       alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes);
-    } else {
-      // Neither alternate was updated.
-      // Normally, this would mean that the rest of the
-      // ancestor path already has sufficient priority.
-      // However, this is not necessarily true inside offscreen
-      // or fallback trees because childLanes may be inconsistent
-      // with the surroundings. This is why we continue the loop.
     }
+
     if (node === propagationRoot) {
       break;
     }
@@ -227,24 +206,36 @@ function propagateContextChanges<T>(
 
       let dep = list.firstContext;
       findChangedDep: while (dep !== null) {
-        // Assigning these to constants to help Flow
         const dependency = dep;
         const consumer = fiber;
-        findContext: for (let i = 0; i < contexts.length; i++) {
+        for (let i = 0; i < contexts.length; i++) {
           const context: ReactContext<T> = contexts[i];
-          // Check if the context matches.
           if (dependency.context === context) {
             // Match! Schedule an update on this fiber.
 
-            // In the lazy implementation, don't mark a dirty flag on the
-            // dependency itself. Not all changes are propagated, so we can't
-            // rely on the propagation function alone to determine whether
-            // something has changed; the consumer will check. In the future, we
-            // could add back a dirty flag as an optimization to avoid double
-            // checking, but until we have selectors it's not really worth
-            // the trouble.
-            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);
-            const alternate = consumer.alternate;
+            if (fiber.tag === ClassComponent) {
+              const lane = pickArbitraryLane(renderLanes);
+              const update = createUpdate(lane);
+              update.tag = ForceUpdate;
+
+              // Inlined `enqueueUpdate`
+              const updateQueue = fiber.updateQueue;
+              if (updateQueue !== null) {
+                const sharedQueue: SharedQueue<any> = (updateQueue: any)
+                  .shared;
+                const pending = sharedQueue.pending;
+                if (pending === null) {
+                  update.next = update;
+                } else {
+                  update.next = pending.next;
+                  pending.next = update;
+                }
+                sharedQueue.pending = update;
+              }
+            }
+
+            fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
+            const alternate = fiber.alternate;
             if (alternate !== null) {
               alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
             }
@@ -255,41 +246,35 @@ function propagateContextChanges<T>(
             );
 
             if (!forcePropagateEntireTree) {
-              // During lazy propagation, when we find a match, we can defer
-              // propagating changes to the children, because we're going to
-              // visit them during render. We should continue propagating the
-              // siblings, though
               nextFiber = null;
             }
 
-            // Since we already found a match, we can stop traversing the
-            // dependency list.
+            list.lanes = mergeLanes(list.lanes, renderLanes);
+
             break findChangedDep;
           }
         }
         dep = dependency.next;
       }
+    } else if (fiber.tag === ContextProvider) {
+      nextFiber =
+        fiber.type === workInProgress.type ? null : fiber.child;
     } else if (fiber.tag === DehydratedFragment) {
-      // If a dehydrated suspense boundary is in this subtree, we don't know
-      // if it will have any context consumers in it. The best we can do is
-      // mark it as having updates.
       const parentSuspense = fiber.return;
-
       if (parentSuspense === null) {
         throw new Error(
           'We just came from a parent so we must have had a parent. This is a bug in React.',
         );
       }
 
-      parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes);
+      parentSuspense.lanes = mergeLanes(
+        parentSuspense.lanes,
+        renderLanes,
+      );
       const alternate = parentSuspense.alternate;
       if (alternate !== null) {
         alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
       }
-      // This is intentionally passing this fiber as the parent
-      // because we want to schedule this fiber as having work
-      // on its children. We'll use the childLanes on
-      // this fiber to indicate that a context has changed.
       scheduleContextWorkOnParentPath(
         parentSuspense,
         renderLanes,
@@ -297,30 +282,24 @@ function propagateContextChanges<T>(
       );
       nextFiber = null;
     } else {
-      // Traverse down.
       nextFiber = fiber.child;
     }
 
     if (nextFiber !== null) {
-      // Set the return pointer of the child to the work-in-progress fiber.
       nextFiber.return = fiber;
     } else {
-      // No child. Traverse to next sibling.
       nextFiber = fiber;
       while (nextFiber !== null) {
         if (nextFiber === workInProgress) {
-          // We're back to the root of this subtree. Exit.
           nextFiber = null;
           break;
         }
         const sibling = nextFiber.sibling;
         if (sibling !== null) {
-          // Set the return pointer of the sibling to the work-in-progress fiber.
           sibling.return = nextFiber.return;
           nextFiber = sibling;
           break;
         }
-        // No more siblings. Traverse up.
         nextFiber = nextFiber.return;
       }
     }
@@ -342,10 +321,6 @@ export function lazilyPropagateParentContextChanges(
   );
 }
 
-// Used for propagating a deferred tree (Suspense, Offscreen). We must propagate
-// to the entire subtree, because we won't revisit it until after the current
-// render has completed, at which point we'll have lost track of which providers
-// have changed.
 export function propagateParentContextChangesToDeferredTree(
   current: Fiber,
   workInProgress: Fiber,
@@ -366,8 +341,6 @@ function propagateParentContextChanges(
   renderLanes: Lanes,
   forcePropagateEntireTree: boolean,
 ) {
-  // Collect all the parent providers that changed. Since this is usually small
-  // number, we use an Array instead of Set.
   let contexts = null;
   let parent: null | Fiber = workInProgress;
   let isInsidePropagationBailout = false;
@@ -382,11 +355,9 @@ function propagateParentContextChanges(
 
     if (parent.tag === ContextProvider) {
       const currentParent = parent.alternate;
-
       if (currentParent === null) {
         throw new Error('Should have a current fiber. This is a bug in React.');
       }
-
       const oldProps = currentParent.memoizedProps;
       if (oldProps !== null) {
         let context: ReactContext<any>;
@@ -395,10 +366,8 @@ function propagateParentContextChanges(
         } else {
           context = parent.type._context;
         }
-
         const newProps = parent.pendingProps;
         const newValue = newProps.value;
-
         const oldValue = oldProps.value;
 
         if (!is(newValue, oldValue)) {
@@ -410,21 +379,15 @@ function propagateParentContextChanges(
         }
       }
     } else if (parent === getHostTransitionProvider()) {
-      // During a host transition, a host component can act like a context
-      // provider. E.g. in React DOM, this would be a <form />.
       const currentParent = parent.alternate;
       if (currentParent === null) {
         throw new Error('Should have a current fiber. This is a bug in React.');
       }
+      const oldStateHook = currentParent.memoizedState;
+      const oldState = oldStateHook.memoizedState;
+      const newStateHook = parent.memoizedState;
+      const newState = newStateHook.memoizedState;
 
-      const oldStateHook: Hook = currentParent.memoizedState;
-      const oldState: TransitionStatus = oldStateHook.memoizedState;
-
-      const newStateHook: Hook = parent.memoizedState;
-      const newState: TransitionStatus = newStateHook.memoizedState;
-
-      // This uses regular equality instead of Object.is because we assume that
-      // host transition state doesn't include NaN as a valid type.
       if (oldState !== newState) {
         if (contexts !== null) {
           contexts.push(HostTransitionContext);
@@ -437,8 +400,6 @@ function propagateParentContextChanges(
   }
 
   if (contexts !== null) {
-    // If there were any changed providers, search through the children and
-    // propagate their changes.
     propagateContextChanges(
       workInProgress,
       contexts,
@@ -447,36 +408,12 @@ function propagateParentContextChanges(
     );
   }
 
-  // This is an optimization so that we only propagate once per subtree. If a
-  // deeply nested child bails out, and it calls this propagation function, it
-  // uses this flag to know that the remaining ancestor providers have already
-  // been propagated.
-  //
-  // NOTE: This optimization is only necessary because we sometimes enter the
-  // begin phase of nodes that don't have any work scheduled on them —
-  // specifically, the siblings of a node that _does_ have scheduled work. The
-  // siblings will bail out and call this function again, even though we already
-  // propagated content changes to it and its subtree. So we use this flag to
-  // mark that the parent providers already propagated.
-  //
-  // Unfortunately, though, we need to ignore this flag when we're inside a
-  // tree whose context propagation was deferred — that's what the
-  // `NeedsPropagation` flag is for.
-  //
-  // If we could instead bail out before entering the siblings' begin phase,
-  // then we could remove both `DidPropagateContext` and `NeedsPropagation`.
-  // Consider this as part of the next refactor to the fiber tree structure.
   workInProgress.flags |= DidPropagateContext;
 }
 
 export function checkIfContextChanged(
   currentDependencies: Dependencies,
 ): boolean {
-  // Iterate over the current dependencies to see if something changed. This
-  // only gets called if props and state has already bailed out, so it's a
-  // relatively uncommon path, except at the root of a changed subtree.
-  // Alternatively, we could move these comparisons into `readContext`, but
-  // that's a much hotter path, so I think this is an appropriate trade off.
   let dependency = currentDependencies.firstContext;
   while (dependency !== null) {
     const context = dependency.context;
@@ -501,15 +438,18 @@ export function prepareToReadContext(
 
   const dependencies = workInProgress.dependencies;
   if (dependencies !== null) {
-    // Reset the work-in-progress list
-    dependencies.firstContext = null;
+    const firstContext = dependencies.firstContext;
+    if (firstContext !== null) {
+      if (isSubsetOfLanes(dependencies.lanes, renderLanes)) {
+        markWorkInProgressReceivedUpdate();
+      }
+      dependencies.firstContext = null;
+    }
   }
 }
 
 export function readContext<T>(context: ReactContext<T>): T {
   if (__DEV__) {
-    // This warning would fire if you read context inside a Hook like useMemo.
-    // Unlike the class check below, it's not enforced in production for perf.
     if (isDisallowedContextReadInDEV) {
       console.error(
         'Context can only be read while React is rendering. ' +
@@ -557,7 +497,6 @@ function readContextForConsumer<T>(
       );
     }
 
-    // This is the first dependency for this component. Create a new list.
     lastContextDependency = contextItem;
     consumer.dependencies = __DEV__
       ? {
@@ -571,7 +510,6 @@ function readContextForConsumer<T>(
         };
     consumer.flags |= NeedsPropagation;
   } else {
-    // Append a new context item.
     lastContextDependency = lastContextDependency.next = contextItem;
   }
   return value;
