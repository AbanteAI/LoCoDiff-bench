
index 8024290f..d1efb44a 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmpwm3w5a5j_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmp6nwv6czg_actual.txt	
@@ -1,5 +1,5 @@
 /**
- * Copyright (c) Meta Platforms, Inc. and affiliates.
+ * Copyright (c) Facebook, Inc. and its affiliates.
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
@@ -10,7 +10,7 @@
 import type {ReactContext} from 'shared/ReactTypes';
 import type {
   Fiber,
-  ContextDependency,
+  ContextDependency, 
   Dependencies,
 } from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
@@ -76,11 +76,9 @@ export function exitDisallowedContextReadInDEV(): void {
   }
 }
 
-export function pushProvider<T>(
-  providerFiber: Fiber,
-  context: ReactContext<T>,
-  nextValue: T,
-): void {
+export function pushProvider<T>(providerFiber: Fiber, nextValue: T): void {
+  const context: ReactContext<T> = providerFiber.type._context;
+
   if (isPrimaryRenderer) {
     push(valueCursor, context._currentValue, providerFiber);
 
@@ -152,7 +150,8 @@ export function scheduleContextWorkOnParentPath(
   renderLanes: Lanes,
   propagationRoot: Fiber,
 ) {
-  // Update the child lanes of all the ancestors, including the alternates.
+  // Update the child lanes of all the ancestors, including
+  // the alternates.
   let node = parent;
   while (node !== null) {
     const alternate = node.alternate;
@@ -225,50 +224,35 @@ function propagateContextChanges<T>(
     if (list !== null) {
       nextFiber = fiber.child;
 
-      let dep = list.firstContext;
-      findChangedDep: while (dep !== null) {
-        // Assigning these to constants to help Flow
-        const dependency = dep;
-        const consumer = fiber;
-        findContext: for (let i = 0; i < contexts.length; i++) {
-          const context: ReactContext<T> = contexts[i];
-          // Check if the context matches.
-          if (dependency.context === context) {
-            // Match! Schedule an update on this fiber.
-
-            // In the lazy implementation, don't mark a dirty flag on the
-            // dependency itself. Not all changes are propagated, so we can't
-            // rely on the propagation function alone to determine whether
-            // something has changed; the consumer will check. In the future, we
-            // could add back a dirty flag as an optimization to avoid double
-            // checking, but until we have selectors it's not really worth
-            // the trouble.
-            consumer.lanes = mergeLanes(consumer.lanes, renderLanes);
-            const alternate = consumer.alternate;
-            if (alternate !== null) {
-              alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
-            }
-            scheduleContextWorkOnParentPath(
-              consumer.return,
-              renderLanes,
-              workInProgress,
-            );
-
-            if (!forcePropagateEntireTree) {
-              // During lazy propagation, when we find a match, we can defer
-              // propagating changes to the children, because we're going to
-              // visit them during render. We should continue propagating the
-              // siblings, though
-              nextFiber = null;
-            }
-
-            // Since we already found a match, we can stop traversing the
-            // dependency list.
-            break findChangedDep;
+      let dependency = list.firstContext;
+      while (dependency !== null) {
+        // Check if the context matches.
+        if (dependency.context === context) {
+          // Match! Schedule an update on this fiber.
+
+          fiber.lanes = mergeLanes(fiber.lanes, renderLanes);
+          const alternate = fiber.alternate;
+          if (alternate !== null) {
+            alternate.lanes = mergeLanes(alternate.lanes, renderLanes);
           }
+          scheduleContextWorkOnParentPath(
+            fiber.return,
+            renderLanes,
+            workInProgress,
+          );
+
+          // Mark the expiration time on the list, too.
+          list.expirationTime = renderLanes;
+
+          // Since we already found a match, we can stop traversing the
+          // dependency list.
+          break;
         }
-        dep = dependency.next;
+        dependency = dependency.next;
       }
+    } else if (fiber.tag === ContextProvider) {
+      // Don't scan deeper if this is a matching provider
+      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
     } else if (fiber.tag === DehydratedFragment) {
       // If a dehydrated suspense boundary is in this subtree, we don't know
       // if it will have any context consumers in it. The best we can do is
@@ -295,7 +279,7 @@ function propagateContextChanges<T>(
         renderLanes,
         workInProgress,
       );
-      nextFiber = null;
+      nextFiber = fiber.sibling;
     } else {
       // Traverse down.
       nextFiber = fiber.child;
@@ -537,7 +521,7 @@ function readContextForConsumer<T>(
   consumer: Fiber | null,
   context: ReactContext<T>,
 ): T {
-  const value = isPrimaryRenderer
+  const value = isPrimaryRenderer 
     ? context._currentValue
     : context._currentValue2;
 
@@ -559,14 +543,14 @@ function readContextForConsumer<T>(
 
     // This is the first dependency for this component. Create a new list.
     lastContextDependency = contextItem;
-    consumer.dependencies = __DEV__
+    consumer.dependencies = __DEV__ 
       ? {
           lanes: NoLanes,
           firstContext: contextItem,
           _debugThenableState: null,
         }
       : {
-          lanes: NoLanes,
+          lanes: NoLanes, 
           firstContext: contextItem,
         };
     consumer.flags |= NeedsPropagation;
