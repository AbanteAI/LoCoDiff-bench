
index 8024290f..1e956761 100644
--- a/react_packages_react-reconciler_src_ReactFiberNewContext.js_expectedoutput.txt (expected):tmp/tmpmwcqa_bz_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactFiberNewContext.js_extracted.txt (actual):tmp/tmpfhz90wtl_actual.txt	
@@ -8,11 +8,7 @@
  */
 
 import type {ReactContext} from 'shared/ReactTypes';
-import type {
-  Fiber,
-  ContextDependency,
-  Dependencies,
-} from './ReactInternalTypes';
+import type {Fiber, ContextDependency, Dependencies} from './ReactInternalTypes';
 import type {StackCursor} from './ReactFiberStack';
 import type {Lanes} from './ReactFiberLane';
 import type {TransitionStatus} from './ReactFiberConfig';
@@ -22,11 +18,7 @@ import {isPrimaryRenderer, HostTransitionContext} from './ReactFiberConfig';
 import {createCursor, push, pop} from './ReactFiberStack';
 import {ContextProvider, DehydratedFragment} from './ReactWorkTags';
 import {NoLanes, isSubsetOfLanes, mergeLanes} from './ReactFiberLane';
-import {
-  NoFlags,
-  DidPropagateContext,
-  NeedsPropagation,
-} from './ReactFiberFlags';
+import {NoFlags, DidPropagateContext, NeedsPropagation} from './ReactFiberFlags';
 
 import is from 'shared/objectIs';
 import {enableRenderableContext} from 'shared/ReactFeatureFlags';
@@ -198,12 +190,7 @@ export function propagateContextChange<T>(
   // lazilyPropagateParentContextChanges to look for Cache components so they
   // can take advantage of lazy propagation.
   const forcePropagateEntireTree = true;
-  propagateContextChanges(
-    workInProgress,
-    [context],
-    renderLanes,
-    forcePropagateEntireTree,
-  );
+  propagateContextChanges(workInProgress, [context], renderLanes, forcePropagateEntireTree);
 }
 
 function propagateContextChanges<T>(
@@ -230,9 +217,10 @@ function propagateContextChanges<T>(
         // Assigning these to constants to help Flow
         const dependency = dep;
         const consumer = fiber;
-        findContext: for (let i = 0; i < contexts.length; i++) {
+        for (let i = 0; i < contexts.length; i++) {
           const context: ReactContext<T> = contexts[i];
           // Check if the context matches.
+          // TODO: Compare selected values to bail out early.
           if (dependency.context === context) {
             // Match! Schedule an update on this fiber.
 
@@ -269,6 +257,9 @@ function propagateContextChanges<T>(
         }
         dep = dependency.next;
       }
+    } else if (fiber.tag === ContextProvider) {
+      // Don't scan deeper if this is a matching provider
+      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
     } else if (fiber.tag === DehydratedFragment) {
       // If a dehydrated suspense boundary is in this subtree, we don't know
       // if it will have any context consumers in it. The best we can do is
@@ -439,12 +430,7 @@ function propagateParentContextChanges(
   if (contexts !== null) {
     // If there were any changed providers, search through the children and
     // propagate their changes.
-    propagateContextChanges(
-      workInProgress,
-      contexts,
-      renderLanes,
-      forcePropagateEntireTree,
-    );
+    propagateContextChanges(workInProgress, contexts, renderLanes, forcePropagateEntireTree);
   }
 
   // This is an optimization so that we only propagate once per subtree. If a
