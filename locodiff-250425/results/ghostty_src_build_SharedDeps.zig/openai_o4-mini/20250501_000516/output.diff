--- ghostty_src_build_SharedDeps.zig_expectedoutput.txt (expected)+++ ghostty_src_build_SharedDeps.zig_extracted.txt (actual)@@ -8,8 +8,6 @@ const GhosttyFrameData = @import("GhosttyFrameData.zig");
 const DistResource = @import("GhosttyDist.zig").Resource;
 
-const gresource = @import("../apprt/gtk/gresource.zig");
-
 config: *const Config,
 
 options: *std.Build.Step.Options,
@@ -36,7 +34,6 @@     return result;
 }
 
-/// Retarget our dependencies for another build target. Modifies in-place.
 pub fn retarget(
     self: *const SharedDeps,
     b: *std.Build,
@@ -47,13 +44,11 @@     return result;
 }
 
-/// Change the exe entrypoint.
 pub fn changeEntrypoint(
     self: *const SharedDeps,
     b: *std.Build,
     entrypoint: Config.ExeEntrypoint,
 ) !SharedDeps {
-    // Change our config
     const config = try b.allocator.create(Config);
     config.* = self.config.*;
     config.exe_entrypoint = entrypoint;
@@ -91,14 +86,9 @@     step: *std.Build.Step.Compile,
 ) !LazyPathList {
     const b = step.step.owner;
-
-    // We could use our config.target/optimize fields here but its more
-    // correct to always match our step.
     const target = step.root_module.resolved_target.?;
     const optimize = step.root_module.optimize.?;
 
-    // We maintain a list of our static libraries and return it so that
-    // we can build a single fat static library for the final app.
     var static_libs = LazyPathList.init(b.allocator);
     errdefer static_libs.deinit();
 
@@ -106,32 +96,26 @@     step.root_module.addOptions("build_options", self.options);
 
     // Freetype
-    _ = b.systemIntegrationOption("freetype", .{}); // Shows it in help
+    _ = b.systemIntegrationOption("freetype", .{});
     if (self.config.font_backend.hasFreetype()) {
         if (b.lazyDependency("freetype", .{
             .target = target,
             .optimize = optimize,
             .@"enable-libpng" = true,
         })) |freetype_dep| {
-            step.root_module.addImport(
-                "freetype",
-                freetype_dep.module("freetype"),
-            );
-
+            step.root_module.addImport("freetype", freetype_dep.module("freetype"));
             if (b.systemIntegrationOption("freetype", .{})) {
                 step.linkSystemLibrary2("bzip2", dynamic_link_opts);
                 step.linkSystemLibrary2("freetype2", dynamic_link_opts);
             } else {
                 step.linkLibrary(freetype_dep.artifact("freetype"));
-                try static_libs.append(
-                    freetype_dep.artifact("freetype").getEmittedBin(),
-                );
+                try static_libs.append(freetype_dep.artifact("freetype").getEmittedBin());
             }
         }
     }
 
     // Harfbuzz
-    _ = b.systemIntegrationOption("harfbuzz", .{}); // Shows it in help
+    _ = b.systemIntegrationOption("harfbuzz", .{});
     if (self.config.font_backend.hasHarfbuzz()) {
         if (b.lazyDependency("harfbuzz", .{
             .target = target,
@@ -139,70 +123,52 @@             .@"enable-freetype" = true,
             .@"enable-coretext" = self.config.font_backend.hasCoretext(),
         })) |harfbuzz_dep| {
-            step.root_module.addImport(
-                "harfbuzz",
-                harfbuzz_dep.module("harfbuzz"),
-            );
+            step.root_module.addImport("harfbuzz", harfbuzz_dep.module("harfbuzz"));
             if (b.systemIntegrationOption("harfbuzz", .{})) {
                 step.linkSystemLibrary2("harfbuzz", dynamic_link_opts);
             } else {
                 step.linkLibrary(harfbuzz_dep.artifact("harfbuzz"));
-                try static_libs.append(
-                    harfbuzz_dep.artifact("harfbuzz").getEmittedBin(),
-                );
+                try static_libs.append(harfbuzz_dep.artifact("harfbuzz").getEmittedBin());
             }
         }
     }
 
     // Fontconfig
-    _ = b.systemIntegrationOption("fontconfig", .{}); // Shows it in help
+    _ = b.systemIntegrationOption("fontconfig", .{});
     if (self.config.font_backend.hasFontconfig()) {
         if (b.lazyDependency("fontconfig", .{
             .target = target,
             .optimize = optimize,
         })) |fontconfig_dep| {
-            step.root_module.addImport(
-                "fontconfig",
-                fontconfig_dep.module("fontconfig"),
-            );
-
+            step.root_module.addImport("fontconfig", fontconfig_dep.module("fontconfig"));
             if (b.systemIntegrationOption("fontconfig", .{})) {
                 step.linkSystemLibrary2("fontconfig", dynamic_link_opts);
             } else {
                 step.linkLibrary(fontconfig_dep.artifact("fontconfig"));
-                try static_libs.append(
-                    fontconfig_dep.artifact("fontconfig").getEmittedBin(),
-                );
+                try static_libs.append(fontconfig_dep.artifact("fontconfig").getEmittedBin());
             }
         }
     }
 
-    // Libpng - Ghostty doesn't actually use this directly, its only used
-    // through dependencies, so we only need to add it to our static
-    // libs list if we're not using system integration. The dependencies
-    // will handle linking it.
+    // Libpng
     if (!b.systemIntegrationOption("libpng", .{})) {
         if (b.lazyDependency("libpng", .{
             .target = target,
             .optimize = optimize,
         })) |libpng_dep| {
             step.linkLibrary(libpng_dep.artifact("png"));
-            try static_libs.append(
-                libpng_dep.artifact("png").getEmittedBin(),
-            );
-        }
-    }
-
-    // Zlib - same as libpng, only used through dependencies.
+            try static_libs.append(libpng_dep.artifact("png").getEmittedBin());
+        }
+    }
+
+    // Zlib
     if (!b.systemIntegrationOption("zlib", .{})) {
         if (b.lazyDependency("zlib", .{
             .target = target,
             .optimize = optimize,
         })) |zlib_dep| {
             step.linkLibrary(zlib_dep.artifact("z"));
-            try static_libs.append(
-                zlib_dep.artifact("z").getEmittedBin(),
-            );
+            try static_libs.append(zlib_dep.artifact("z").getEmittedBin());
         }
     }
 
@@ -211,17 +177,12 @@         .target = target,
         .optimize = optimize,
     })) |oniguruma_dep| {
-        step.root_module.addImport(
-            "oniguruma",
-            oniguruma_dep.module("oniguruma"),
-        );
+        step.root_module.addImport("oniguruma", oniguruma_dep.module("oniguruma"));
         if (b.systemIntegrationOption("oniguruma", .{})) {
             step.linkSystemLibrary2("oniguruma", dynamic_link_opts);
         } else {
             step.linkLibrary(oniguruma_dep.artifact("oniguruma"));
-            try static_libs.append(
-                oniguruma_dep.artifact("oniguruma").getEmittedBin(),
-            );
+            try static_libs.append(oniguruma_dep.artifact("oniguruma").getEmittedBin());
         }
     }
 
@@ -233,15 +194,10 @@         step.root_module.addImport("glslang", glslang_dep.module("glslang"));
         if (b.systemIntegrationOption("glslang", .{})) {
             step.linkSystemLibrary2("glslang", dynamic_link_opts);
-            step.linkSystemLibrary2(
-                "glslang-default-resource-limits",
-                dynamic_link_opts,
-            );
+            step.linkSystemLibrary2("glslang-default-resource-limits", dynamic_link_opts);
         } else {
             step.linkLibrary(glslang_dep.artifact("glslang"));
-            try static_libs.append(
-                glslang_dep.artifact("glslang").getEmittedBin(),
-            );
+            try static_libs.append(glslang_dep.artifact("glslang").getEmittedBin());
         }
     }
 
@@ -250,17 +206,12 @@         .target = target,
         .optimize = optimize,
     })) |spirv_cross_dep| {
-        step.root_module.addImport(
-            "spirv_cross",
-            spirv_cross_dep.module("spirv_cross"),
-        );
+        step.root_module.addImport("spirv_cross", spirv_cross_dep.module("spirv_cross"));
         if (b.systemIntegrationOption("spirv-cross", .{})) {
             step.linkSystemLibrary2("spirv-cross", dynamic_link_opts);
         } else {
             step.linkLibrary(spirv_cross_dep.artifact("spirv_cross"));
-            try static_libs.append(
-                spirv_cross_dep.artifact("spirv_cross").getEmittedBin(),
-            );
+            try static_libs.append(spirv_cross_dep.artifact("spirv_cross").getEmittedBin());
         }
     }
 
@@ -273,9 +224,7 @@             .optimize = optimize,
         })) |simdutf_dep| {
             step.linkLibrary(simdutf_dep.artifact("simdutf"));
-            try static_libs.append(
-                simdutf_dep.artifact("simdutf").getEmittedBin(),
-            );
+            try static_libs.append(simdutf_dep.artifact("simdutf").getEmittedBin());
         }
     }
 
@@ -286,45 +235,30 @@             .optimize = optimize,
             .backend = .breakpad,
         })) |sentry_dep| {
-            step.root_module.addImport(
-                "sentry",
-                sentry_dep.module("sentry"),
-            );
+            step.root_module.addImport("sentry", sentry_dep.module("sentry"));
             step.linkLibrary(sentry_dep.artifact("sentry"));
-            try static_libs.append(
-                sentry_dep.artifact("sentry").getEmittedBin(),
-            );
-
-            // We also need to include breakpad in the static libs.
+            try static_libs.append(sentry_dep.artifact("sentry").getEmittedBin());
             if (sentry_dep.builder.lazyDependency("breakpad", .{
                 .target = target,
                 .optimize = optimize,
             })) |breakpad_dep| {
-                try static_libs.append(
-                    breakpad_dep.artifact("breakpad").getEmittedBin(),
-                );
+                try static_libs.append(breakpad_dep.artifact("breakpad").getEmittedBin());
             }
         }
     }
 
-    // Wasm we do manually since it is such a different build.
+    // Wasm
     if (step.rootModuleTarget().cpu.arch == .wasm32) {
         if (b.lazyDependency("zig_js", .{
             .target = target,
             .optimize = optimize,
         })) |js_dep| {
-            step.root_module.addImport(
-                "zig-js",
-                js_dep.module("zig-js"),
-            );
-        }
-
+            step.root_module.addImport("zig-js", js_dep.module("zig-js"));
+        }
         return static_libs;
     }
 
-    // On Linux, we need to add a couple common library paths that aren't
-    // on the standard search list. i.e. GTK is often in /usr/lib/x86_64-linux-gnu
-    // on x86_64.
+    // Linux library path
     if (step.rootModuleTarget().os.tag == .linux) {
         const triple = try step.rootModuleTarget().linuxTriple(b.allocator);
         const path = b.fmt("/usr/lib/{s}", .{triple});
@@ -345,19 +279,12 @@     step.linkLibCpp();
     step.addIncludePath(b.path("src"));
     {
-        // From hwy/detect_targets.h
         const HWY_AVX3_SPR: c_int = 1 << 4;
         const HWY_AVX3_ZEN4: c_int = 1 << 6;
         const HWY_AVX3_DL: c_int = 1 << 7;
         const HWY_AVX3: c_int = 1 << 8;
-
-        // Zig 0.13 bug: https://github.com/ziglang/zig/issues/20414
-        // To workaround this we just disable AVX512 support completely.
-        // The performance difference between AVX2 and AVX512 is not
-        // significant for our use case and AVX512 is very rare on consumer
-        // hardware anyways.
-        const HWY_DISABLED_TARGETS: c_int = HWY_AVX3_SPR | HWY_AVX3_ZEN4 | HWY_AVX3_DL | HWY_AVX3;
-
+        const HWY_DISABLED_TARGETS: c_int =
+            HWY_AVX3_SPR | HWY_AVX3_ZEN4 | HWY_AVX3_DL | HWY_AVX3;
         step.addCSourceFiles(.{
             .files = &.{
                 "src/simd/base64.cpp",
@@ -371,23 +298,24 @@         });
     }
 
-    // We always require the system SDK so that our system headers are available.
-    // This makes things like `os/log.h` available for cross-compiling.
+    // Apple SDK
     if (step.rootModuleTarget().os.tag.isDarwin()) {
         try @import("apple_sdk").addPaths(b, step.root_module);
-
-        const metallib = self.metallib.?;
+        const metallib = self.metallib.*;
         metallib.output.addStepDependencies(&step.step);
         step.root_module.addAnonymousImport("ghostty_metallib", .{
             .root_source_file = metallib.output,
         });
     }
 
-    // Other dependencies, mostly pure Zig
+    // Pure Zig modules
     if (b.lazyDependency("opengl", .{})) |dep| {
         step.root_module.addImport("opengl", dep.module("opengl"));
     }
-    if (b.lazyDependency("vaxis", .{})) |dep| {
+    if (b.lazyDependency("vaxis", .{
+        .target = target,
+        .optimize = optimize,
+    })) |dep| {
         step.root_module.addImport("vaxis", dep.module("vaxis"));
     }
     if (b.lazyDependency("wuffs", .{
@@ -429,44 +357,25 @@             .target = target,
             .optimize = optimize,
         })) |objc_dep| {
-            step.root_module.addImport(
-                "objc",
-                objc_dep.module("objc"),
-            );
-        }
-
+            step.root_module.addImport("objc", objc_dep.module("objc"));
+        }
         if (b.lazyDependency("macos", .{
             .target = target,
             .optimize = optimize,
         })) |macos_dep| {
-            step.root_module.addImport(
-                "macos",
-                macos_dep.module("macos"),
-            );
-            step.linkLibrary(
-                macos_dep.artifact("macos"),
-            );
-            try static_libs.append(
-                macos_dep.artifact("macos").getEmittedBin(),
-            );
-        }
-
+            step.root_module.addImport("macos", macos_dep.module("macos"));
+            step.linkLibrary(macos_dep.artifact("macos"));
+            try static_libs.append(macos_dep.artifact("macos").getEmittedBin());
+        }
         if (self.config.renderer == .opengl) {
             step.linkFramework("OpenGL");
         }
-
-        // Apple platforms do not include libc libintl so we bundle it.
-        // This is LGPL but since our source code is open source we are
-        // in compliance with the LGPL since end users can modify this
-        // build script to replace the bundled libintl with their own.
         if (b.lazyDependency("libintl", .{
             .target = target,
             .optimize = optimize,
         })) |libintl_dep| {
             step.linkLibrary(libintl_dep.artifact("intl"));
-            try static_libs.append(
-                libintl_dep.artifact("intl").getEmittedBin(),
-            );
+            try static_libs.append(libintl_dep.artifact("intl").getEmittedBin());
         }
     }
 
@@ -489,7 +398,7 @@         try static_libs.append(highway_dep.artifact("highway").getEmittedBin());
     }
 
-    // utfcpp - This is used as a dependency on our hand-written C++ code
+    // utfcpp
     if (b.lazyDependency("utfcpp", .{
         .target = target,
         .optimize = optimize,
@@ -513,17 +422,12 @@ 
         switch (self.config.app_runtime) {
             .none => {},
-
             .glfw => if (b.lazyDependency("glfw", .{
                 .target = target,
                 .optimize = optimize,
             })) |glfw_dep| {
-                step.root_module.addImport(
-                    "glfw",
-                    glfw_dep.module("glfw"),
-                );
+                step.root_module.addImport("glfw", glfw_dep.module("glfw"));
             },
-
             .gtk => try self.addGTK(step),
         }
     }
@@ -535,9 +439,15 @@     return static_libs;
 }
 
-/// Setup the dependencies for the GTK apprt build. The GTK apprt
-/// is particularly involved compared to others so we pull this out
-/// into a dedicated function.
+// For dynamic linking, we prefer dynamic linking and to search by
+// mode first. Mode first will search all paths for a dynamic library
+// before falling back to static.
+const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
+    .preferred_link_mode = .dynamic,
+    .search_strategy = .mode_first,
+};
+
+/// Setup the dependencies for the GTK apprt build.
 fn addGTK(
     self: *const SharedDeps,
     step: *std.Build.Step.Compile,
@@ -558,7 +468,6 @@             .{ "glib", "glib2" },
             .{ "gobject", "gobject2" },
             .{ "gtk", "gtk4" },
-            .{ "xlib", "xlib2" },
         };
         inline for (gobject_imports) |import| {
             const name, const module = import;
@@ -572,33 +481,19 @@     if (self.config.x11) {
         step.linkSystemLibrary2("X11", dynamic_link_opts);
         if (gobject_) |gobject| {
-            step.root_module.addImport(
-                "gdk_x11",
-                gobject.module("gdkx114"),
-            );
-        }
-    }
-
+            step.root_module.addImport("gdk_x11", gobject.module("gdkx114"));
+        }
+    }
+
+    // Wayland protocol support
     if (self.config.wayland) wayland: {
-        // These need to be all be called to note that we need them.
         const wayland_dep_ = b.lazyDependency("wayland", .{});
-        const wayland_protocols_dep_ = b.lazyDependency(
-            "wayland_protocols",
-            .{},
-        );
-        const plasma_wayland_protocols_dep_ = b.lazyDependency(
-            "plasma_wayland_protocols",
-            .{},
-        );
-
-        // Unwrap or return, there are no more dependencies below.
+        const wayland_protocols_dep_ = b.lazyDependency("wayland_protocols", .{});
+        const plasma_wayland_protocols_dep_ = b.lazyDependency("plasma_wayland_protocols", .{});
         const wayland_dep = wayland_dep_ orelse break :wayland;
         const wayland_protocols_dep = wayland_protocols_dep_ orelse break :wayland;
         const plasma_wayland_protocols_dep = plasma_wayland_protocols_dep_ orelse break :wayland;
 
-        // Note that zig_wayland cannot be lazy because lazy dependencies
-        // can't be imported since they don't exist and imports are
-        // resolved at compile time of the build.
         const zig_wayland_dep = b.dependency("zig_wayland", .{});
         const Scanner = @import("zig_wayland").Scanner;
         const scanner = Scanner.create(zig_wayland_dep.builder, .{
@@ -606,16 +501,10 @@             .wayland_protocols = wayland_protocols_dep.path(""),
         });
 
-        // FIXME: replace with `zxdg_decoration_v1` once GTK merges https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/6398
-        scanner.addCustomProtocol(
-            plasma_wayland_protocols_dep.path("src/protocols/blur.xml"),
-        );
-        scanner.addCustomProtocol(
-            plasma_wayland_protocols_dep.path("src/protocols/server-decoration.xml"),
-        );
-        scanner.addCustomProtocol(
-            plasma_wayland_protocols_dep.path("src/protocols/slide.xml"),
-        );
+        // FIXME: replace with `zxdg_decoration_v1` once GTK merges upstream MR
+        scanner.addCustomProtocol(plasma_wayland_protocols_dep.path("src/protocols/blur.xml"));
+        scanner.addCustomProtocol(plasma_wayland_protocols_dep.path("src/protocols/server-decoration.xml"));
+        scanner.addCustomProtocol(plasma_wayland_protocols_dep.path("src/protocols/slide.xml"));
 
         scanner.generate("wl_compositor", 1);
         scanner.generate("org_kde_kwin_blur_manager", 1);
@@ -625,35 +514,22 @@         step.root_module.addImport("wayland", b.createModule(.{
             .root_source_file = scanner.result,
         }));
-        if (gobject_) |gobject| step.root_module.addImport(
-            "gdk_wayland",
-            gobject.module("gdkwayland4"),
-        );
+        if (gobject_) |gobject| {
+            step.root_module.addImport("gdk_wayland", gobject.module("gdkwayland4"));
+        }
 
         if (b.lazyDependency("gtk4_layer_shell", .{
             .target = target,
             .optimize = optimize,
         })) |gtk4_layer_shell| {
             const layer_shell_module = gtk4_layer_shell.module("gtk4-layer-shell");
-            if (gobject_) |gobject| layer_shell_module.addImport(
-                "gtk",
-                gobject.module("gtk4"),
-            );
-            step.root_module.addImport(
-                "gtk4-layer-shell",
-                layer_shell_module,
-            );
-
-            // IMPORTANT: gtk4-layer-shell must be linked BEFORE
-            // wayland-client, as it relies on shimming libwayland's APIs.
+            if (gobject_) |gobject| {
+                layer_shell_module.addImport("gtk", gobject.module("gtk4"));
+            }
+            step.root_module.addImport("gtk4-layer-shell", layer_shell_module);
             if (b.systemIntegrationOption("gtk4-layer-shell", .{})) {
-                step.linkSystemLibrary2(
-                    "gtk4-layer-shell-0",
-                    dynamic_link_opts,
-                );
+                step.linkSystemLibrary2("gtk4-layer-shell-0", dynamic_link_opts);
             } else {
-                // gtk4-layer-shell *must* be dynamically linked,
-                // so we don't add it as a static library
                 step.linkLibrary(gtk4_layer_shell.artifact("gtk4-layer-shell"));
             }
         }
@@ -661,36 +537,29 @@         step.linkSystemLibrary2("wayland-client", dynamic_link_opts);
     }
 
+    // GResource and Blueprint UI support
     {
-        // For our actual build, we validate our GTK builder files if we can.
-        {
-            const gtk_builder_check = b.addExecutable(.{
-                .name = "gtk_builder_check",
-                .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
-                .target = b.graph.host,
-            });
-            gtk_builder_check.root_module.addOptions("build_options", self.options);
-            if (gobject_) |gobject| {
-                gtk_builder_check.root_module.addImport(
-                    "gtk",
-                    gobject.module("gtk4"),
-                );
-                gtk_builder_check.root_module.addImport(
-                    "adw",
-                    gobject.module("adw1"),
-                );
-            }
-
-            for (gresource.dependencies) |pathname| {
-                const extension = std.fs.path.extension(pathname);
-                if (!std.mem.eql(u8, extension, ".ui")) continue;
-                const check = b.addRunArtifact(gtk_builder_check);
-                check.addFileArg(b.path(pathname));
-                step.step.dependOn(&check.step);
-            }
-        }
-
-        // Get our gresource c/h files and add them to our build.
+        const gtk_builder_check = b.addExecutable(.{
+            .name = "gtk_builder_check",
+            .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
+            .target = b.graph.host,
+        });
+        gtk_builder_check.root_module.addOptions("build_options", self.options);
+        if (gobject_) |gobject| {
+            gtk_builder_check.root_module.addImport("gtk", gobject.module("gtk4"));
+            gtk_builder_check.root_module.addImport("adw", gobject.module("adw1"));
+        }
+        for (gresource.dependencies) |pathname| {
+            const extension = std.fs.path.extension(pathname);
+            if (!std.mem.eql(u8, extension, ".ui")) continue;
+            const check = b.addRunArtifact(gtk_builder_check);
+            check.addFileArg(b.path(pathname));
+            step.step.dependOn(&check.step);
+        }
+    }
+
+    // Add the generated or distributed resources
+    {
         const dist = gtkDistResources(b);
         step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
         step.addIncludePath(dist.resources_h.path(b).dirname());
@@ -743,7 +612,6 @@                     blueprint_file.name,
                 },
             )));
-
             xml_run.addFileArg(ui_file);
         }
 
@@ -771,21 +639,7 @@     generate_h.addFileArg(gresource_xml);
 
     return .{
-        .resources_c = .{
-            .dist = "src/apprt/gtk/ghostty_resources.c",
-            .generated = resources_c,
-        },
-        .resources_h = .{
-            .dist = "src/apprt/gtk/ghostty_resources.h",
-            .generated = resources_h,
-        },
+        .resources_c = .{ .dist = "src/apprt/gtk/ghostty_resources.c", .generated = resources_c },
+        .resources_h = .{ .dist = "src/apprt/gtk/ghostty_resources.h", .generated = resources_h },
     };
-}
-
-// For dynamic linking, we prefer dynamic linking and to search by
-// mode first. Mode first will search all paths for a dynamic library
-// before falling back to static.
-const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
-    .preferred_link_mode = .dynamic,
-    .search_strategy = .mode_first,
-};+}