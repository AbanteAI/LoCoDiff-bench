
index 8fd602fbd..1c25a66b7 100644
--- a/ghostty_src_build_SharedDeps.zig_expectedoutput.txt (expected):tmp/tmpvcy1q7bm_expected.txt	
+++ b/ghostty_src_build_SharedDeps.zig_extracted.txt (actual):tmp/tmpx2nebw0k_actual.txt	
@@ -1,6 +1,7 @@
 const SharedDeps = @This();
 
 const std = @import("std");
+const Scanner = @import("zig_wayland").Scanner;
 const Config = @import("Config.zig");
 const HelpStrings = @import("HelpStrings.zig");
 const MetallibStep = @import("MetallibStep.zig");
@@ -661,40 +662,38 @@ fn addGTK(
         step.linkSystemLibrary2("wayland-client", dynamic_link_opts);
     }
 
+    // For our actual build, we validate our GTK builder files if we can.
     {
-        // For our actual build, we validate our GTK builder files if we can.
-        {
-            const gtk_builder_check = b.addExecutable(.{
-                .name = "gtk_builder_check",
-                .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
-                .target = b.graph.host,
-            });
-            gtk_builder_check.root_module.addOptions("build_options", self.options);
-            if (gobject_) |gobject| {
-                gtk_builder_check.root_module.addImport(
-                    "gtk",
-                    gobject.module("gtk4"),
-                );
-                gtk_builder_check.root_module.addImport(
-                    "adw",
-                    gobject.module("adw1"),
-                );
-            }
-
-            for (gresource.dependencies) |pathname| {
-                const extension = std.fs.path.extension(pathname);
-                if (!std.mem.eql(u8, extension, ".ui")) continue;
-                const check = b.addRunArtifact(gtk_builder_check);
-                check.addFileArg(b.path(pathname));
-                step.step.dependOn(&check.step);
-            }
+        const gtk_builder_check = b.addExecutable(.{
+            .name = "gtk_builder_check",
+            .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
+            .target = b.graph.host,
+        });
+        gtk_builder_check.root_module.addOptions("build_options", self.options);
+        if (gobject_) |gobject| {
+            gtk_builder_check.root_module.addImport(
+                "gtk",
+                gobject.module("gtk4"),
+            );
+            gtk_builder_check.root_module.addImport(
+                "adw",
+                gobject.module("adw1"),
+            );
         }
 
-        // Get our gresource c/h files and add them to our build.
-        const dist = gtkDistResources(b);
-        step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
-        step.addIncludePath(dist.resources_h.path(b).dirname());
+        for (gresource.dependencies) |pathname| {
+            const extension = std.fs.path.extension(pathname);
+            if (!std.mem.eql(u8, extension, ".ui")) continue;
+            const check = b.addRunArtifact(gtk_builder_check);
+            check.addFileArg(b.path(pathname));
+            step.step.dependOn(&check.step);
+        }
     }
+
+    // Get our gresource c/h files and add them to our build.
+    const dist = gtkDistResources(b);
+    step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
+    step.addIncludePath(dist.resources_h.path(b).dirname());
 }
 
 /// Creates the resources that can be prebuilt for our dist build.
