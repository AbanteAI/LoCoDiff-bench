
index 8fd602fb..df05973d 100644
--- a/ghostty_src_build_SharedDeps.zig_expectedoutput.txt (expected):tmp/tmphz69gbfp_expected.txt	
+++ b/ghostty_src_build_SharedDeps.zig_extracted.txt (actual):tmp/tmpsxqey_5v_actual.txt	
@@ -36,7 +36,6 @@ pub fn init(b: *std.Build, cfg: *const Config) !SharedDeps {
     return result;
 }
 
-/// Retarget our dependencies for another build target. Modifies in-place.
 pub fn retarget(
     self: *const SharedDeps,
     b: *std.Build,
@@ -177,10 +176,7 @@ pub fn add(
         }
     }
 
-    // Libpng - Ghostty doesn't actually use this directly, its only used
-    // through dependencies, so we only need to add it to our static
-    // libs list if we're not using system integration. The dependencies
-    // will handle linking it.
+    // Libpng
     if (!b.systemIntegrationOption("libpng", .{})) {
         if (b.lazyDependency("libpng", .{
             .target = target,
@@ -376,7 +372,7 @@ pub fn add(
     if (step.rootModuleTarget().os.tag.isDarwin()) {
         try @import("apple_sdk").addPaths(b, step.root_module);
 
-        const metallib = self.metallib.?;
+        const metallib = self.metallib.*;
         metallib.output.addStepDependencies(&step.step);
         step.root_module.addAnonymousImport("ghostty_metallib", .{
             .root_source_file = metallib.output,
@@ -423,81 +419,6 @@ pub fn add(
         step.root_module.addImport("zf", dep.module("zf"));
     }
 
-    // Mac Stuff
-    if (step.rootModuleTarget().os.tag.isDarwin()) {
-        if (b.lazyDependency("zig_objc", .{
-            .target = target,
-            .optimize = optimize,
-        })) |objc_dep| {
-            step.root_module.addImport(
-                "objc",
-                objc_dep.module("objc"),
-            );
-        }
-
-        if (b.lazyDependency("macos", .{
-            .target = target,
-            .optimize = optimize,
-        })) |macos_dep| {
-            step.root_module.addImport(
-                "macos",
-                macos_dep.module("macos"),
-            );
-            step.linkLibrary(
-                macos_dep.artifact("macos"),
-            );
-            try static_libs.append(
-                macos_dep.artifact("macos").getEmittedBin(),
-            );
-        }
-
-        if (self.config.renderer == .opengl) {
-            step.linkFramework("OpenGL");
-        }
-
-        // Apple platforms do not include libc libintl so we bundle it.
-        // This is LGPL but since our source code is open source we are
-        // in compliance with the LGPL since end users can modify this
-        // build script to replace the bundled libintl with their own.
-        if (b.lazyDependency("libintl", .{
-            .target = target,
-            .optimize = optimize,
-        })) |libintl_dep| {
-            step.linkLibrary(libintl_dep.artifact("intl"));
-            try static_libs.append(
-                libintl_dep.artifact("intl").getEmittedBin(),
-            );
-        }
-    }
-
-    // cimgui
-    if (b.lazyDependency("cimgui", .{
-        .target = target,
-        .optimize = optimize,
-    })) |cimgui_dep| {
-        step.root_module.addImport("cimgui", cimgui_dep.module("cimgui"));
-        step.linkLibrary(cimgui_dep.artifact("cimgui"));
-        try static_libs.append(cimgui_dep.artifact("cimgui").getEmittedBin());
-    }
-
-    // Highway
-    if (b.lazyDependency("highway", .{
-        .target = target,
-        .optimize = optimize,
-    })) |highway_dep| {
-        step.linkLibrary(highway_dep.artifact("highway"));
-        try static_libs.append(highway_dep.artifact("highway").getEmittedBin());
-    }
-
-    // utfcpp - This is used as a dependency on our hand-written C++ code
-    if (b.lazyDependency("utfcpp", .{
-        .target = target,
-        .optimize = optimize,
-    })) |utfcpp_dep| {
-        step.linkLibrary(utfcpp_dep.artifact("utfcpp"));
-        try static_libs.append(utfcpp_dep.artifact("utfcpp").getEmittedBin());
-    }
-
     // If we're building an exe then we have additional dependencies.
     if (step.kind != .lib) {
         // We always statically compile glad
@@ -518,10 +439,7 @@ pub fn add(
                 .target = target,
                 .optimize = optimize,
             })) |glfw_dep| {
-                step.root_module.addImport(
-                    "glfw",
-                    glfw_dep.module("glfw"),
-                );
+                step.root_module.addImport("glfw", glfw_dep.module("glfw"));
             },
 
             .gtk => try self.addGTK(step),
@@ -535,6 +453,11 @@ pub fn add(
     return static_libs;
 }
 
+const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
+    .preferred_link_mode = .dynamic,
+    .search_strategy = .mode_first,
+};
+
 /// Setup the dependencies for the GTK apprt build. The GTK apprt
 /// is particularly involved compared to others so we pull this out
 /// into a dedicated function.
@@ -543,8 +466,8 @@ fn addGTK(
     step: *std.Build.Step.Compile,
 ) !void {
     const b = step.step.owner;
-    const target = step.root_module.resolved_target.?;
-    const optimize = step.root_module.optimize.?;
+    const target = step.root_module.resolved_target.?;  
+    const optimize = step.root_module.optimize.?;  
 
     const gobject_ = b.lazyDependency("gobject", .{
         .target = target,
@@ -580,25 +503,14 @@ fn addGTK(
     }
 
     if (self.config.wayland) wayland: {
-        // These need to be all be called to note that we need them.
         const wayland_dep_ = b.lazyDependency("wayland", .{});
-        const wayland_protocols_dep_ = b.lazyDependency(
-            "wayland_protocols",
-            .{},
-        );
-        const plasma_wayland_protocols_dep_ = b.lazyDependency(
-            "plasma_wayland_protocols",
-            .{},
-        );
+        const wayland_protocols_dep_ = b.lazyDependency("wayland_protocols", .{});
+        const plasma_wayland_protocols_dep_ = b.lazyDependency("plasma_wayland_protocols", .{});
 
-        // Unwrap or return, there are no more dependencies below.
         const wayland_dep = wayland_dep_ orelse break :wayland;
         const wayland_protocols_dep = wayland_protocols_dep_ orelse break :wayland;
         const plasma_wayland_protocols_dep = plasma_wayland_protocols_dep_ orelse break :wayland;
 
-        // Note that zig_wayland cannot be lazy because lazy dependencies
-        // can't be imported since they don't exist and imports are
-        // resolved at compile time of the build.
         const zig_wayland_dep = b.dependency("zig_wayland", .{});
         const Scanner = @import("zig_wayland").Scanner;
         const scanner = Scanner.create(zig_wayland_dep.builder, .{
@@ -606,7 +518,6 @@ fn addGTK(
             .wayland_protocols = wayland_protocols_dep.path(""),
         });
 
-        // FIXME: replace with `zxdg_decoration_v1` once GTK merges https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/6398
         scanner.addCustomProtocol(
             plasma_wayland_protocols_dep.path("src/protocols/blur.xml"),
         );
@@ -626,8 +537,7 @@ fn addGTK(
             .root_source_file = scanner.result,
         }));
         if (gobject_) |gobject| step.root_module.addImport(
-            "gdk_wayland",
-            gobject.module("gdkwayland4"),
+            "gdk_wayland", gobject.module("gdkwayland4"),
         );
 
         if (b.lazyDependency("gtk4_layer_shell", .{
@@ -636,24 +546,19 @@ fn addGTK(
         })) |gtk4_layer_shell| {
             const layer_shell_module = gtk4_layer_shell.module("gtk4-layer-shell");
             if (gobject_) |gobject| layer_shell_module.addImport(
-                "gtk",
-                gobject.module("gtk4"),
+                "gtk", gobject.module("gtk4"),
             );
             step.root_module.addImport(
-                "gtk4-layer-shell",
-                layer_shell_module,
+                "gtk4-layer-shell", layer_shell_module,
             );
 
             // IMPORTANT: gtk4-layer-shell must be linked BEFORE
             // wayland-client, as it relies on shimming libwayland's APIs.
             if (b.systemIntegrationOption("gtk4-layer-shell", .{})) {
                 step.linkSystemLibrary2(
-                    "gtk4-layer-shell-0",
-                    dynamic_link_opts,
+                    "gtk4-layer-shell-0", dynamic_link_opts,
                 );
             } else {
-                // gtk4-layer-shell *must* be dynamically linked,
-                // so we don't add it as a static library
                 step.linkLibrary(gtk4_layer_shell.artifact("gtk4-layer-shell"));
             }
         }
@@ -662,6 +567,52 @@ fn addGTK(
     }
 
     {
+        const gresource = @import("../apprt/gtk/gresource.zig");
+
+        const gresource_xml = gresource_xml: {
+            const generate_gresource_xml = b.addExecutable(.{
+                .name = "generate_gresource_xml",
+                .root_source_file = b.path("src/apprt/gtk/gresource.zig"),
+                .target = b.graph.host,
+            });
+
+            const generate = b.addRunArtifact(generate_gresource_xml);
+
+            const gtk_blueprint_compiler = b.addExecutable(.{
+                .name = "gtk_blueprint_compiler",
+                .root_source_file = b.path("src/apprt/gtk/blueprint_compiler.zig"),
+                .target = b.graph.host,
+            });
+            gtk_blueprint_compiler.linkSystemLibrary2("gtk4", dynamic_link_opts);
+            gtk_blueprint_compiler.linkSystemLibrary2("libadwaita-1", dynamic_link_opts);
+            gtk_blueprint_compiler.linkLibC();
+
+            for (gresource.blueprint_files) |blueprint_file| {
+                const blueprint_compiler = b.addRunArtifact(gtk_blueprint_compiler);
+                blueprint_compiler.addArgs(&.{
+                    b.fmt("{d}", .{blueprint_file.major}),
+                    b.fmt("{d}", .{blueprint_file.minor}),
+                });
+                const ui_file = blueprint_compiler.addOutputFileArg(b.fmt(
+                    "{d}.{d}/{s}.ui", .{
+                        blueprint_file.major,
+                        blueprint_file.minor,
+                        blueprint_file.name,
+                    },
+                ));
+                blueprint_compiler.addFileArg(b.path(b.fmt(
+                    "src/apprt/gtk/ui/{d}.{d}/{s}.blp", .{
+                        blueprint_file.major,
+                        blueprint_file.minor,
+                        blueprint_file.name,
+                    },
+                )));
+                generate.addFileArg(ui_file);
+            }
+
+            break :gresource_xml generate.captureStdOut();
+        };
+
         // For our actual build, we validate our GTK builder files if we can.
         {
             const gtk_builder_check = b.addExecutable(.{
@@ -672,12 +623,10 @@ fn addGTK(
             gtk_builder_check.root_module.addOptions("build_options", self.options);
             if (gobject_) |gobject| {
                 gtk_builder_check.root_module.addImport(
-                    "gtk",
-                    gobject.module("gtk4"),
+                    "gtk", gobject.module("gtk4"),
                 );
                 gtk_builder_check.root_module.addImport(
-                    "adw",
-                    gobject.module("adw1"),
+                    "adw", gobject.module("adw1"),
                 );
             }
 
@@ -710,6 +659,7 @@ pub fn gtkDistResources(
             .root_source_file = b.path("src/apprt/gtk/gresource.zig"),
             .target = b.graph.host,
         });
+
         const xml_run = b.addRunArtifact(xml_exe);
 
         const blueprint_exe = b.addExecutable(.{
@@ -728,16 +678,14 @@ pub fn gtkDistResources(
                 b.fmt("{d}", .{blueprint_file.minor}),
             });
             const ui_file = blueprint_run.addOutputFileArg(b.fmt(
-                "{d}.{d}/{s}.ui",
-                .{
+                "{d}.{d}/{s}.ui", .{
                     blueprint_file.major,
                     blueprint_file.minor,
                     blueprint_file.name,
                 },
             ));
             blueprint_run.addFileArg(b.path(b.fmt(
-                "src/apprt/gtk/ui/{d}.{d}/{s}.blp",
-                .{
+                "src/apprt/gtk/ui/{d}.{d}/{s}.blp", .{
                     blueprint_file.major,
                     blueprint_file.minor,
                     blueprint_file.name,
@@ -780,12 +728,4 @@ pub fn gtkDistResources(
             .generated = resources_h,
         },
     };
-}
-
-// For dynamic linking, we prefer dynamic linking and to search by
-// mode first. Mode first will search all paths for a dynamic library
-// before falling back to static.
-const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
-    .preferred_link_mode = .dynamic,
-    .search_strategy = .mode_first,
-};
\ No newline at end of file
+}
\ No newline at end of file
