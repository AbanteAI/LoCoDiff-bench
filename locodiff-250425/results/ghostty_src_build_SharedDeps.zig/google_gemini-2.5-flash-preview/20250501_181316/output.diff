--- ghostty_src_build_SharedDeps.zig_expectedoutput.txt (expected)+++ ghostty_src_build_SharedDeps.zig_extracted.txt (actual)@@ -669,123 +669,4 @@                 .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
                 .target = b.graph.host,
             });
-            gtk_builder_check.root_module.addOptions("build_options", self.options);
-            if (gobject_) |gobject| {
-                gtk_builder_check.root_module.addImport(
-                    "gtk",
-                    gobject.module("gtk4"),
-                );
-                gtk_builder_check.root_module.addImport(
-                    "adw",
-                    gobject.module("adw1"),
-                );
-            }
-
-            for (gresource.dependencies) |pathname| {
-                const extension = std.fs.path.extension(pathname);
-                if (!std.mem.eql(u8, extension, ".ui")) continue;
-                const check = b.addRunArtifact(gtk_builder_check);
-                check.addFileArg(b.path(pathname));
-                step.step.dependOn(&check.step);
-            }
-        }
-
-        // Get our gresource c/h files and add them to our build.
-        const dist = gtkDistResources(b);
-        step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
-        step.addIncludePath(dist.resources_h.path(b).dirname());
-    }
-}
-
-/// Creates the resources that can be prebuilt for our dist build.
-pub fn gtkDistResources(
-    b: *std.Build,
-) struct {
-    resources_c: DistResource,
-    resources_h: DistResource,
-} {
-    const gresource_xml = gresource_xml: {
-        const xml_exe = b.addExecutable(.{
-            .name = "generate_gresource_xml",
-            .root_source_file = b.path("src/apprt/gtk/gresource.zig"),
-            .target = b.graph.host,
-        });
-        const xml_run = b.addRunArtifact(xml_exe);
-
-        const blueprint_exe = b.addExecutable(.{
-            .name = "gtk_blueprint_compiler",
-            .root_source_file = b.path("src/apprt/gtk/blueprint_compiler.zig"),
-            .target = b.graph.host,
-        });
-        blueprint_exe.linkLibC();
-        blueprint_exe.linkSystemLibrary2("gtk4", dynamic_link_opts);
-        blueprint_exe.linkSystemLibrary2("libadwaita-1", dynamic_link_opts);
-
-        for (gresource.blueprint_files) |blueprint_file| {
-            const blueprint_run = b.addRunArtifact(blueprint_exe);
-            blueprint_run.addArgs(&.{
-                b.fmt("{d}", .{blueprint_file.major}),
-                b.fmt("{d}", .{blueprint_file.minor}),
-            });
-            const ui_file = blueprint_run.addOutputFileArg(b.fmt(
-                "{d}.{d}/{s}.ui",
-                .{
-                    blueprint_file.major,
-                    blueprint_file.minor,
-                    blueprint_file.name,
-                },
-            ));
-            blueprint_run.addFileArg(b.path(b.fmt(
-                "src/apprt/gtk/ui/{d}.{d}/{s}.blp",
-                .{
-                    blueprint_file.major,
-                    blueprint_file.minor,
-                    blueprint_file.name,
-                },
-            )));
-
-            xml_run.addFileArg(ui_file);
-        }
-
-        break :gresource_xml xml_run.captureStdOut();
-    };
-
-    const generate_c = b.addSystemCommand(&.{
-        "glib-compile-resources",
-        "--c-name",
-        "ghostty",
-        "--generate-source",
-        "--target",
-    });
-    const resources_c = generate_c.addOutputFileArg("ghostty_resources.c");
-    generate_c.addFileArg(gresource_xml);
-
-    const generate_h = b.addSystemCommand(&.{
-        "glib-compile-resources",
-        "--c-name",
-        "ghostty",
-        "--generate-header",
-        "--target",
-    });
-    const resources_h = generate_h.addOutputFileArg("ghostty_resources.h");
-    generate_h.addFileArg(gresource_xml);
-
-    return .{
-        .resources_c = .{
-            .dist = "src/apprt/gtk/ghostty_resources.c",
-            .generated = resources_c,
-        },
-        .resources_h = .{
-            .dist = "src/apprt/gtk/ghostty_resources.h",
-            .generated = resources_h,
-        },
-    };
-}
-
-// For dynamic linking, we prefer dynamic linking and to search by
-// mode first. Mode first will search all paths for a dynamic library
-// before falling back to static.
-const dynamic_link_opts: std.Build.Module.LinkSystemLibraryOptions = .{
-    .preferred_link_mode = .dynamic,
-    .search_strategy = .mode_first,
-};+            gtk_builder_check.root_module.addOptions("build_options", self.