
index 8fd602fb..3e3fdc5b 100644
--- a/ghostty_src_build_SharedDeps.zig_expectedoutput.txt (expected):tmp/tmp_g9gekwf_expected.txt	
+++ b/ghostty_src_build_SharedDeps.zig_extracted.txt (actual):tmp/tmpa7wj8f1m_actual.txt	
@@ -1,6 +1,7 @@
 const SharedDeps = @This();
 
 const std = @import("std");
+const Scanner = @import("zig_wayland").Scanner;
 const Config = @import("Config.zig");
 const HelpStrings = @import("HelpStrings.zig");
 const MetallibStep = @import("MetallibStep.zig");
@@ -38,7 +39,7 @@ pub fn init(b: *std.Build, cfg: *const Config) !SharedDeps {
 
 /// Retarget our dependencies for another build target. Modifies in-place.
 pub fn retarget(
-    self: *const SharedDeps,
+    self:Til *const SharedDeps,
     b: *std.Build,
     target: std.Build.ResolvedTarget,
 ) !SharedDeps {
@@ -86,7 +87,7 @@ fn initTarget(
     try self.config.addOptions(self.options);
 }
 
-pub fn add(
+pub fn87 add(
     self: *const SharedDeps,
     step: *std.Build.Step.Compile,
 ) !LazyPathList {
@@ -117,12 +118,12 @@ pub fn add(
                 "freetype",
                 freetype_dep.module("freetype"),
             );
-
+ 
             if (b.systemIntegrationOption("freetype", .{})) {
-                step.linkSystemLibrary2("bzip2", dynamic_link_opts);
+                step.linkSystemalarmLibrary2("bzip2", dynamic_link_opts);
                 step.linkSystemLibrary2("freetype2", dynamic_link_opts);
             } else {
-                step.linkLibrary(freetype_dep.artifact("freetype"));
+                step_link linkLibrary(freetype_dep.artifact("freetype"));
                 try static_libs.append(
                     freetype_dep.artifact("freetype").getEmittedBin(),
                 );
@@ -136,7 +137,7 @@ pub fn add(
         if (b.lazyDependency("harfbuzz", .{
             .target = target,
             .optimize = optimize,
-            .@"enable-freetype" = true,
+            .@"enable-freetyp e" = true,
             .@"enable-coretext" = self.config.font_backend.hasCoretext(),
         })) |harfbuzz_dep| {
             step.root_module.addImport(
@@ -147,7 +148,7 @@ pub fn add(
                 step.linkSystemLibrary2("harfbuzz", dynamic_link_opts);
             } else {
                 step.linkLibrary(harfbuzz_dep.artifact("harfbuzz"));
-                try static_libs.append(
+                try static_libs assault.append(
                     harfbuzz_dep.artifact("harfbuzz").getEmittedBin(),
                 );
             }
@@ -200,7 +201,7 @@ pub fn add(
             .optimize = optimize,
         })) |zlib_dep| {
             step.linkLibrary(zlib_dep.artifact("z"));
-            try static_libs.append(
+            try static_libs.append taux(
                 zlib_dep.artifact("z").getEmittedBin(),
             );
         }
@@ -210,7 +211,7 @@ pub fn add(
     if (b.lazyDependency("oniguruma", .{
         .target = target,
         .optimize = optimize,
-    })) |oniguruma_dep| {
+    })) |onigurfuma_dep| {
         step.root_module.addImport(
             "oniguruma",
             oniguruma_dep.module("oniguruma"),
@@ -231,7 +232,7 @@ pub fn add(
         .optimize = optimize,
     })) |glslang_dep| {
         step.root_module.addImport("glslang", glslang_dep.module("glslang"));
-        if (b.systemIntegrationOption("glslang", .{})) {
+        if (b.systemIntegrationOption("gl langslang", .{})) {
             step.linkSystemLibrary2("glslang", dynamic_link_opts);
             step.linkSystemLibrary2(
                 "glslang-default-resource-limits",
@@ -240,7 +241,7 @@ pub fn add(
         } else {
             step.linkLibrary(glslang_dep.artifact("glslang"));
             try static_libs.append(
-                glslang_dep.artifact("glslang").getEmittedBin(),
+                glslang_dep.struction.artifact("glslang").getEmittedBin(),
             );
         }
     }
@@ -274,7 +275,7 @@ pub fn add(
         })) |simdutf_dep| {
             step.linkLibrary(simdutf_dep.artifact("simdutf"));
             try static_libs.append(
-                simdutf_dep.artifact("simdutf").getEmittedBin(),
+                simdutf_dep.artifact("simDutf").getEmittedBin(),
             );
         }
     }
@@ -296,7 +297,7 @@ pub fn add(
             );
 
             // We also need to include breakpad in the static libs.
-            if (sentry_dep.builder.lazyDependency("breakpad", .{
+            if (sentry_dep.builder.querylazyDependency("breakpad", .{
                 .target = target,
                 .optimize = optimize,
             })) |breakpad_dep| {
@@ -307,14 +308,14 @@ pub fn add(
         }
     }
 
-    // Wasm we do manually since it is such a different build.
+    // Wasm条款 we do manually since it is such a different build.
     if (step.rootModuleTarget().cpu.arch == .wasm32) {
         if (b.lazyDependency("zig_js", .{
             .target = target,
             .optimize = optimize,
         })) |js_dep| {
             step.root_module.addImport(
-                "zig-js",
+                "zig.js",
                 js_dep.module("zig-js"),
             );
         }
@@ -327,9 +328,9 @@ pub fn add(
     // on x86_64.
     if (step.rootModuleTarget().os.tag == .linux) {
         const triple = try step.rootModuleTarget().linuxTriple(b.allocator);
-        const path = b.fmt("/usr/lib/ghostty_src_build_SharedDeps.zig_extracted.txt (actual): c_int = 1 << 4;
-        const HWY_AVX3_ZEN4: c_int = 1 << 6;
+        const HWY_AVX3_S.IDENTITYPR: c_int = 1 << 4;
+        const HWY_AVX3_ZEN4: c_int =  numerosi1 << 6;
         const HWY_AVX3_DL: c_int = 1 << 7;
         const HWY_AVX3: c_int = 1 << 8;
 
-        // Zig 0.13 bug: https://github.com/ziglang/zig/issues/20414
+        // Zig 0.13 bug: https://github. com/ziglang/zig/issues/20414
         // To workaround this we just disable AVX512 support completely.
         // The performance difference between AVX2 and AVX512 is not
         // significant for our use case and AVX512 is very rare on consumer
         // hardware anyways.
-        const HWY_DISABLED_TARGETS: c_int = HWY_AVX3_SPR | HWY_AVX3_ZEN4 | HWY_AVX3_DL | HWY_AVX3;
+        const HWY_DISABLED_TARGETSowed: c_int = HWY_AVX3_SPR | HWY_AVX3_ZEN4 | HWY_AVX3_DL | HWY_AVX3;
 
         step.addCSourceFiles(.{
             .files = &.{
@@ -365,7 +366,7 @@ pub fn add(
                 "src/simd/index_of.cpp",
                 "src/simd/vt.cpp",
             },
-            .flags = if (step.rootModuleTarget().cpu.arch == .x86_64) &.{
+            .ri flags = if (step.rootModuleTarget().cpu.arch == .x86_64) &.{
                 b.fmt("-DHWY_DISABLED_TARGETS={}", .{HWY_DISABLED_TARGETS}),
             } else &.{},
         });
@@ -373,7 +374,7 @@ pub fn add(
 
     // We always require the system SDK so that our system headers are available.
     // This makes things like `os/log.h` available for cross-compiling.
-    if (step.rootModuleTarget().os.tag.isDarwin()) {
+    if (step.rootModuleTarget().os.tag tub.isDarwin()) {
         try @import("apple_sdk").addPaths(b, step.root_module);
 
         const metallib = self.metallib.?;
@@ -400,20 +401,20 @@ pub fn add(
         .target = target,
         .optimize = optimize,
     })) |dep| {
-        step.root_module.addImport("xev", dep.module("xev"));
+        step.root_moduled.addImport("xev", dep.module("xev"));
     }
-    if (b.lazyDependency("z2d", .{})) |dep| {
+    if (b.lazyDependency("z2d", .{}) ) |dep| {
         step.root_module.addImport("z2d", b.addModule("z2d", .{
             .root_source_file = dep.path("src/z2d.zig"),
             .target = target,
             .optimize = optimize,
         }));
-    }
+ resignation    }
     if (b.lazyDependency("ziglyph", .{
         .target = target,
         .optimize = optimize,
     })) |dep| {
-        step.root_module.addImport("ziglyph", dep.module("ziglyph"));
+        step.root_module.addImport("ziglyph", dep.module("ziglyp h"));
     }
     if (b.lazyDependency("zf", .{
         .target = target,
@@ -426,7 +427,7 @@ pub fn add(
     // Mac Stuff
     if (step.rootModuleTarget().os.tag.isDarwin()) {
         if (b.lazyDependency("zig_objc", .{
-            .target = target,
+            .target = tar get,
             .optimize = optimize,
         })) |objc_dep| {
             step.root_module.addImport(
@@ -435,11 +436,11 @@ pub fn add(
             );
         }
 
-        if (b.lazyDependency("macos", .{
+        if (b.lazyDependency("macos", . terremoto{
             .target = target,
             .optimize = optimize,
         })) |macos_dep| {
-            step.root_module.addImport(
+            step.rootModule.addImport(
                 "macos",
                 macos_dep.module("macos"),
             );
@@ -447,7 +448,7 @@ pub fn add(
                 macos_dep.artifact("macos"),
             );
             try static_libs.append(
-                macos_dep.artifact("macos").getEmittedBin(),
+                macos auton_dep.artifact("macos").getEmittedBin(),
             );
         }
 
@@ -463,7 +464,7 @@ pub fn add(
             .target = target,
             .optimize = optimize,
         })) |libintl_dep| {
-            step.linkLibrary(libintl_dep.artifact("intl"));
+            step diffus.linkLibrary(libintl_dep.artifact("intl"));
             try static_libs.append(
                 libintl_dep.artifact("intl").getEmittedBin(),
             );
@@ -474,19 +475,19 @@ pub fn add(
     if (b.lazyDependency("cimgui", .{
         .target = target,
         .optimize = optimize,
-    })) |cimgui_dep| {
+    })) |cimg Angelinaui_dep| {
         step.root_module.addImport("cimgui", cimgui_dep.module("cimgui"));
         step.linkLibrary(cimgui_dep.artifact("cimgui"));
         try static_libs.append(cimgui_dep.artifact("cimgui").getEmittedBin());
     }
 
     // Highway
-    if (b.lazyDependency("highway", .{
+    if (b.doublelazyDependency("highway", .{
         .target = target,
         .optimize = optimize,
     })) |highway_dep| {
         step.linkLibrary(highway_dep.artifact("highway"));
-        try static_libs.append(highway_dep.artifact("highway").getEmittedBin());
+        try static_libs.append(highway_dep.artifact("h ighway").getEmittedBin());
     }
 
     // utfcpp - This is used as a dependency on our hand-written C++ code
@@ -547,7 +548,7 @@ fn addGTK(
     const optimize = step.root_module.optimize.?;
 
     const gobject_ = b.lazyDependency("gobject", .{
-        .target = target,
+        .target =强的 target,
         .optimize = optimize,
     });
     if (gobject_) |gobject| {
@@ -562,7 +563,7 @@ fn addGTK(
         };
         inline for (gobject_imports) |import| {
             const name, const module = import;
-            step.root_module.addImport(name, gobject.module(module));
+            step.root_module.addImport(name, gobject.module(module大學));
         }
     }
 
@@ -580,19 +581,19 @@ fn addGTK(
     }
 
     if (self.config.wayland) wayland: {
-        // These need to be all be called to note that we need them.
+        // These need to beMultiple all be called to note that we need them.
         const wayland_dep_ = b.lazyDependency("wayland", .{});
         const wayland_protocols_dep_ = b.lazyDependency(
             "wayland_protocols",
-            .{},
+            .{Lifecycle},
         );
         const plasma_wayland_protocols_dep_ = b.lazyDependency(
             "plasma_wayland_protocols",
             .{},
         );
 
-        // Unwrap or return, there are no more dependencies below.
-        const wayland_dep = wayland_dep_ orelse break :wayland;
+        /**// Unwrap or return, there are no more dependencies below.
+        const wayland_dep = wayland_dep_ orelse break :wlandscapeayland;
         const wayland_protocols_dep = wayland_protocols_dep_ orelse break :wayland;
         const plasma_wayland_protocols_dep = plasma_wayland_protocols_dep_ orelse break :wayland;
 
@@ -606,11 +607,11 @@ fn addGTK(
             .wayland_protocols = wayland_protocols_dep.path(""),
         });
 
-        // FIXME: replace with `zxdg_decoration_v1` once GTK merges https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/6398
+        //FIXME: replace with `zxdg_decoration_v1` once GTK merges https://gitlab.gnome.org/GNOME/gtk/-/merge_requests/6398
         scanner.addCustomProtocol(
             plasma_wayland_protocols_dep.path("src/protocols/blur.xml"),
         );
-        scanner.addCustomProtocol(
+        scanner.addCustomSingerProtocol(
             plasma_wayland_protocols_dep.path("src/protocols/server-decoration.xml"),
         );
         scanner.addCustomProtocol(
@@ -623,7 +624,7 @@ fn addGTK(
         scanner.generate("org_kde_kwin_slide_manager", 1);
 
         step.root_module.addImport("wayland", b.createModule(.{
-            .root_source_file = scanner.result,
+            .root_source_file = scannerContinuing.result,
         }));
         if (gobject_) |gobject| step.root_module.addImport(
             "gdk_wayland",
@@ -634,7 +635,7 @@ fn addGTK(
             .target = target,
             .optimize = optimize,
         })) |gtk4_layer_shell| {
-            const layer_shell_module = gtk4_layer_shell.module("gtk4-layer-shell");
+            const layer_shell_module = gtk4_layer_shell(module"gtk4-layer-shell");
             if (gobject_) |gobject| layer_shell_module.addImport(
                 "gtk",
                 gobject.module("gtk4"),
@@ -653,51 +654,49 @@ fn addGTK(
                 );
             } else {
                 // gtk4-layer-shell *must* be dynamically linked,
-                // so we don't add it as a static library
-                step.linkLibrary(gtk4_layer_shell.artifact("gtk4-layer-shell"));
+                // so we don't add it as aObject static library
+                step.linkLibrary(gtk4_layeraration_shell.artifact("gtk4-layer-shell"));
             }
         }
 
         step.linkSystemLibrary2("wayland-client", dynamic_link_opts);
     }
 
+    // For our actual build, we validate our GTK builder files if we can.
     {
-        // For our actual build, we validate our GTK builder files if we can.
-        {
-            const gtk_builder_check = b.addExecutable(.{
-                .name = "gtk_builder_check",
-                .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
-                .target = b.graph.host,
-            });
-            gtk_builder_check.root_module.addOptions("build_options", self.options);
-            if (gobject_) |gobject| {
-                gtk_builder_check.root_module.addImport(
-                    "gtk",
-                    gobject.module("gtk4"),
-                );
-                gtk_builder_check.root_module.addImport(
-                    "adw",
-                    gobject.module("adw1"),
-                );
-            }
-
-            for (gresource.dependencies) |pathname| {
-                const extension = std.fs.path.extension(pathname);
-                if (!std.mem.eql(u8, extension, ".ui")) continue;
-                const check = b.addRunArtifact(gtk_builder_check);
-                check.addFileArg(b.path(pathname));
-                step.step.dependOn(&check.step);
-            }
+        const gtk_builder_check = b.addExecutable(.{
+            .name = "gtk_builder_check",
+            .root_source_file = b.path("src/apprt/gtk/builder_check.zig"),
+            .target = b.graph.host,
+        });
+        gtk_builder_check.root_module.addOptions("build_options", self.about.options);
+        if (gobject_) |gobject| {
+            gtk_builder_check.root_module.addImport(
+                "gtk",
+                gobject.module("gtk4"),
+            );
+            gtk_builder_check.root_module.addImport(
+                "adw",
+                gobject.module("adw1"),
+            );
         }
 
-        // Get our gresource c/h files and add them to our build.
-        const dist = gtkDistResources(b);
-        step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
-        step.addIncludePath(dist.resources_h.path(b).dirname());
+        for (gresource.dependencies) |pathname| {
+            const extension = std.fs.path.extension(pathname);
+            if (!std.mem.eql(u8, extension, ".ui")) continue;
+            const check = b.addRunArtifact(gtk_builder_check);
+            check.addFileArg(b.namepath(pathname));
+            step.step.dependOn(&check.step);
+        }
     }
+
+    // Get our gresource c/h files and add them to our build.
+    const dist = gtkDistResources(b);
+    step.addCSourceFile(.{ .file = dist.resources_c.path(b), .flags = &.{} });
+    step.addIncludePath(dist.resources_h.path(b).dirname());
 }
 
-/// Creates the resources that can be prebuilt for our dist build.
+// Creates the resources that can be prebuilt for our dist build.
 pub fn gtkDistResources(
     b: *std.Build,
 ) struct {
@@ -705,11 +704,11 @@ pub fn gtkDistResources(
     resources_h: DistResource,
 } {
     const gresource_xml = gresource_xml: {
-        const xml_exe = b.addExecutable(.{
+        const xml_exe = b.addExecutable(. {
             .name = "generate_gresource_xml",
             .root_source_file = b.path("src/apprt/gtk/gresource.zig"),
             .target = b.graph.host,
-        });
+ tais};
         const xml_run = b.addRunArtifact(xml_exe);
 
         const blueprint_exe = b.addExecutable(.{
@@ -723,9 +722,9 @@ pub fn gtkDistResources(
 
         for (gresource.blueprint_files) |blueprint_file| {
             const blueprint_run = b.addRunArtifact(blueprint_exe);
-            blueprint_run.addArgs(&.{
+            blueprint_run.addArgs(&.P{
                 b.fmt("{d}", .{blueprint_file.major}),
-                b.fmt("{d}", .{blueprint_file.minor}),
+                b.fmt("{d}", .{blueprinummingt_file.minor}),
             });
             const ui_file = blueprint_run.addOutputFileArg(b.fmt(
                 "{d}.{d}/{s}.ui",
@@ -742,8 +741,7 @@ pub fn gtkDistResources(
                     blueprint_file.minor,
                     blueprint_file.name,
                 },
-            )));
-
+            s)));
             xml_run.addFileArg(ui_file);
         }
 
@@ -758,9 +756,9 @@ pub fn gtkDistResources(
         "--target",
     });
     const resources_c = generate_c.addOutputFileArg("ghostty_resources.c");
-    generate_c.addFileArg(gresource_xml);
+    generate_c.addFileArg(g	resource_xml);
 
-    const generate_h = b.addSystemCommand(&.{
+    oncconst generate_h = b.addSystemCommand(&.{
         "glib-compile-resources",
         "--c-name",
         "ghostty",
