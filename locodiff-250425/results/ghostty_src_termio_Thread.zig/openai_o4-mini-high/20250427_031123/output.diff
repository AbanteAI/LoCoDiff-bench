--- ghostty_src_termio_Thread.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_Thread.zig_extracted.txt (actual)@@ -36,52 +36,55 @@ /// if the running program hasn't already.
 const sync_reset_ms = 1000;
 
-/// Allocator used for some state
-alloc: std.mem.Allocator,
+alloc: std.mem.Allocator;
 
 /// The main event loop for the thread. The user data of this loop
 /// is always the allocator used to create the loop. This is a convenience
 /// so that users of the loop always have an allocator.
-loop: xev.Loop,
+loop: xev.Loop;
 
 /// The completion to use for the wakeup async handle that is present
 /// on the termio.Writer.
-wakeup_c: xev.Completion = .{},
+wakeup_c: xev.Completion = .{};
 
 /// This can be used to stop the thread on the next loop iteration.
-stop: xev.Async,
-stop_c: xev.Completion = .{},
+stop: xev.Async;
+stop_c: xev.Completion = .{};
 
 /// This is used to coalesce resize events.
-coalesce: xev.Timer,
-coalesce_c: xev.Completion = .{},
-coalesce_cancel_c: xev.Completion = .{},
-coalesce_data: Coalesce = .{},
+coalesce: xev.Timer;
+coalesce_c: xev.Completion = .{};
+coalesce_cancel_c: xev.Completion = .{};
+coalesce_data: Coalesce = .{};
 
 /// This timer is used to reset synchronized output modes so that
 /// the terminal doesn't freeze with a bad actor.
-sync_reset: xev.Timer,
-sync_reset_c: xev.Completion = .{},
-sync_reset_cancel_c: xev.Completion = .{},
+sync_reset: xev.Timer;
+sync_reset_c: xev.Completion = .{};
+sync_reset_cancel_c: xev.Completion = .{};
+
+/// The main termio state.
+termio: *termio.Termio;
 
 flags: packed struct {
     /// This is set to true only when an abnormal exit is detected. It
     /// tells our mailbox system to drain and ignore all messages.
-    drain: bool = false,
+    drain: bool = false;
 
     /// True if linefeed mode is enabled. This is duplicated here so that the
     /// write thread doesn't need to grab a lock to check this on every write.
-    linefeed_mode: bool = false,
+    linefeed_mode: bool = false;
 
     /// This is true when the inspector is active.
     has_inspector: bool = false,
-} = .{},
+} = .{};
 
 /// Initialize the thread. This does not START the thread. This only sets
 /// up all the internal state necessary prior to starting the thread. It
 /// is up to the caller to start the thread with the threadMain entrypoint.
 pub fn init(
     alloc: Allocator,
+    io: *termio.Termio,
 ) !Thread {
     // Create our event loop.
     var loop = try xev.Loop.init(.{});
@@ -105,6 +108,7 @@         .stop = stop_h,
         .coalesce = coalesce_h,
         .sync_reset = sync_reset_h,
+        .termio = io,
     };
 }
 
@@ -133,9 +137,9 @@         // the error to the surface thread and let the apprt deal with it
         // in some way but this works for now. Without this, the user would
         // just see a blank terminal window.
-        io.renderer_state.mutex.lock();
-        defer io.renderer_state.mutex.unlock();
-        const t = io.renderer_state.terminal;
+        self.termio.renderer_state.mutex.lock();
+        defer self.termio.renderer_state.mutex.unlock();
+        const t = self.termio.renderer_state.terminal;
 
         // Hide the cursor
         t.modes.set(.cursor_visible, false);
@@ -199,6 +203,12 @@     }
 }
 
+const CallbackData = struct {
+    self: *Thread,
+    io: *termio.Termio,
+    data: termio.Termio.ThreadData = undefined,
+};
+
 fn threadMain_(self: *Thread, io: *termio.Termio) !void {
     defer log.debug("IO thread exited", .{});
 
@@ -237,19 +247,11 @@     try self.loop.run(.until_done);
 }
 
-/// This is the data passed to xev callbacks on the thread.
-const CallbackData = struct {
-    self: *Thread,
-    io: *termio.Termio,
-    data: termio.Termio.ThreadData = undefined,
-};
-
 /// Drain the mailbox, handling all the messages in our terminal implementation.
 fn drainMailbox(
     self: *Thread,
     cb: *CallbackData,
 ) !void {
-    // We assert when starting the thread that this is the state
     const mailbox = cb.io.mailbox.spsc.queue;
     const io = cb.io;
     const data = &cb.data;
@@ -275,147 +277,29 @@                 defer config.alloc.destroy(config.ptr);
                 try io.changeConfig(data, config.ptr);
             },
-            .inspector => |v| self.flags.has_inspector = v,
-            .resize => |v| self.handleResize(cb, v),
+            .focused => |v| try io.focusGained(data, v),
+            .resize => |v| self.handleResize(&cb, v),
             .size_report => |v| try io.sizeReport(data, v),
             .clear_screen => |v| try io.clearScreen(data, v.history),
             .scroll_viewport => |v| try io.scrollViewport(v),
             .jump_to_prompt => |v| try io.jumpToPrompt(v),
-            .start_synchronized_output => self.startSynchronizedOutput(cb),
+            .start_synchronized_output => self.startSynchronizedOutput(),
             .linefeed_mode => |v| self.flags.linefeed_mode = v,
             .child_exited_abnormally => |v| try io.childExitedAbnormally(v.exit_code, v.runtime_ms),
-            .focused => |v| try io.focusGained(data, v),
-            .write_small => |v| try io.queueWrite(
-                data,
-                v.data[0..v.len],
-                self.flags.linefeed_mode,
-            ),
-            .write_stable => |v| try io.queueWrite(
-                data,
-                v,
-                self.flags.linefeed_mode,
-            ),
+            .write_small => |v| try io.queueWrite(data, v.data[0..v.len], self.flags.linefeed_mode),
+            .write_stable => |v| try io.queueWrite(data, v, self.flags.linefeed_mode),
             .write_alloc => |v| {
                 defer v.alloc.free(v.data);
-                try io.queueWrite(
-                    data,
-                    v.data,
-                    self.flags.linefeed_mode,
-                );
+                try io.queueWrite(data, v.data, self.flags.linefeed_mode);
             },
         }
     }
 
-    // Trigger a redraw after we've drained so we don't waste cyces
+    // Trigger a redraw after we've drained so we don't waste cycles
     // messaging a redraw.
     if (redraw) {
         try io.renderer_wakeup.notify();
     }
 }
 
-fn startSynchronizedOutput(self: *Thread, cb: *CallbackData) void {
-    self.sync_reset.reset(
-        &self.loop,
-        &self.sync_reset_c,
-        &self.sync_reset_cancel_c,
-        sync_reset_ms,
-        CallbackData,
-        cb,
-        syncResetCallback,
-    );
-}
-
-fn handleResize(self: *Thread, cb: *CallbackData, resize: renderer.Size) void {
-    self.coalesce_data.resize = resize;
-
-    // If the timer is already active we just return. In the future we want
-    // to reset the timer up to a maximum wait time but for now this ensures
-    // relatively smooth resizing.
-    if (self.coalesce_c.state() == .active) return;
-
-    self.coalesce.reset(
-        &self.loop,
-        &self.coalesce_c,
-        &self.coalesce_cancel_c,
-        Coalesce.min_ms,
-        CallbackData,
-        cb,
-        coalesceCallback,
-    );
-}
-
-fn syncResetCallback(
-    cb_: ?*CallbackData,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Timer.RunError!void,
-) xev.CallbackAction {
-    _ = r catch |err| switch (err) {
-        error.Canceled => {},
-        else => {
-            log.warn("error during sync reset callback err={}", .{err});
-            return .disarm;
-        },
-    };
-
-    const cb = cb_ orelse return .disarm;
-    cb.io.resetSynchronizedOutput();
-    return .disarm;
-}
-
-fn coalesceCallback(
-    cb_: ?*CallbackData,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Timer.RunError!void,
-) xev.CallbackAction {
-    _ = r catch |err| switch (err) {
-        error.Canceled => {},
-        else => {
-            log.warn("error during coalesce callback err={}", .{err});
-            return .disarm;
-        },
-    };
-
-    const cb = cb_ orelse return .disarm;
-
-    if (cb.self.coalesce_data.resize) |v| {
-        cb.self.coalesce_data.resize = null;
-        cb.io.resize(&cb.data, v) catch |err| {
-            log.warn("error during resize err={}", .{err});
-        };
-    }
-
-    return .disarm;
-}
-
-fn wakeupCallback(
-    cb_: ?*CallbackData,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Async.WaitError!void,
-) xev.CallbackAction {
-    _ = r catch |err| {
-        log.err("error in wakeup err={}", .{err});
-        return .rearm;
-    };
-
-    // When we wake up, we check the mailbox. Mailbox producers should
-    // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
-    cb.self.drainMailbox(cb) catch |err|
-        log.err("error draining mailbox err={}", .{err});
-
-    return .rearm;
-}
-
-fn stopCallback(
-    cb_: ?*CallbackData,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Async.WaitError!void,
-) xev.CallbackAction {
-    _ = r catch unreachable;
-    cb_.?.self.loop.stop();
-    return .disarm;
-}+fn startSynchronized