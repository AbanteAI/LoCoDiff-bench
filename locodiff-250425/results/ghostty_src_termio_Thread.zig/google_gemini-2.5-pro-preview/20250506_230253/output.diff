
index 312ad8ce..cd91ff3d 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmplcyb98v4_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmpumu1wt00_actual.txt	
@@ -193,8 +193,8 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
         log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
         defer log.debug("io thread fully exiting after abnormal failure", .{});
         self.flags.drain = true;
-        self.loop.run(.until_done) catch |err| {
-            log.err("failed to start xev loop for draining err={}", .{err});
+        self.loop.run(.until_done) catch |err_run| {
+            log.err("failed to start xev loop for draining err={}", .{err_run});
         };
     }
 }
@@ -250,13 +250,13 @@ fn drainMailbox(
     cb: *CallbackData,
 ) !void {
     // We assert when starting the thread that this is the state
-    const mailbox = cb.io.mailbox.spsc.queue;
+    const mailbox_queue = cb.io.mailbox.spsc.queue;
     const io = cb.io;
     const data = &cb.data;
 
     // If we're draining, we just drain the mailbox and return.
     if (self.flags.drain) {
-        while (mailbox.pop()) |_| {}
+        while (mailbox_queue.pop()) |_| {}
         return;
     }
 
@@ -264,7 +264,7 @@ fn drainMailbox(
     // expectation is that all our message handlers will be non-blocking
     // ENOUGH to not mess up throughput on producers.
     var redraw: bool = false;
-    while (mailbox.pop()) |message| {
+    while (mailbox_queue.pop()) |message| {
         // If we have a message we always redraw
         redraw = true;
 
