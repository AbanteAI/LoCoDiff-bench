
index 312ad8cef..da822c648 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmpqg67mbyz_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmpc4vud0pb_actual.txt	
@@ -1,5 +1,5 @@
 //! Represents the "writer" thread for terminal IO. The reader side is
-//! handled by the Termio struct itself and dependent on the underlying
+//! handled by the Termio struct and dependent on the underlying
 //! implementation (i.e. if its a pty, manual, etc.).
 //!
 //! The writer thread does handle writing bytes to the pty but also handles
@@ -23,6 +23,11 @@ const BlockingQueue = @import("../datastruct/main.zig").BlockingQueue;
 const Allocator = std.mem.Allocator;
 const log = std.log.scoped(.io_thread);
 
+/// The type used for sending messages to the IO thread. For now this is
+/// hardcoded with a capacity. We can make this a comptime parameter in
+/// the future if we want it configurable.
+pub const Mailbox = BlockingQueue(termio.Message, 64);
+
 /// This stores the information that is coalesced.
 const Coalesce = struct {
     /// The number of milliseconds to coalesce certain messages like resize for.
@@ -44,8 +49,7 @@ alloc: std.mem.Allocator,
 /// so that users of the loop always have an allocator.
 loop: xev.Loop,
 
-/// The completion to use for the wakeup async handle that is present
-/// on the termio.Writer.
+/// This can be used to wake up the thread.
 wakeup_c: xev.Completion = .{},
 
 /// This can be used to stop the thread on the next loop iteration.
@@ -212,7 +216,6 @@ fn threadMain_(self: *Thread, io: *termio.Termio) !void {
     // Get the mailbox. This must be an SPSC mailbox for threading.
     const mailbox = switch (io.mailbox) {
         .spsc => |*v| v,
-        // else => return error.TermioUnsupportedMailbox,
     };
 
     // This is the data sent to xev callbacks. We want a pointer to both
@@ -400,9 +403,10 @@ fn wakeupCallback(
         return .rearm;
     };
 
+    const cb = cb_ orelse return .rearm;
+
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
     cb.self.drainMailbox(cb) catch |err|
         log.err("error draining mailbox err={}", .{err});
 
