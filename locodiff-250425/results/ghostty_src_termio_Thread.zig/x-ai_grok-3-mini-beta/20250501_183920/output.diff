
index 312ad8ce..73540937 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmp6r3uyj7y_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmpy7mhio6__actual.txt	
@@ -36,7 +36,6 @@ const Coalesce = struct {
 /// if the running program hasn't already.
 const sync_reset_ms = 1000;
 
-/// Allocator used for some state
 alloc: std.mem.Allocator,
 
 /// The main event loop for the thread. The user data of this loop
@@ -54,15 +53,15 @@ stop_c: xev.Completion = .{},
 
 /// This is used to coalesce resize events.
 coalesce: xev.Timer,
-coalesce_c: xev.Completion = .{},
-coalesce_cancel_c: xev.Completion = .{},
+coalesce_c: xev.Completion = .{ },
+coalesce_cancel_c: xev.Completion = .{ },
 coalesce_data: Coalesce = .{},
 
 /// This timer is used to reset synchronized output modes so that
 /// the terminal doesn't freeze with a bad actor.
 sync_reset: xev.Timer,
-sync_reset_c: xev.Completion = .{},
-sync_reset_cancel_c: xev.Completion = .{},
+sync_reset_c: xev.Completion = .{ },
+sync_reset_cancel_c: xev.Completion = .{ },
 
 flags: packed struct {
     /// This is set to true only when an abnormal exit is detected. It
@@ -84,7 +83,7 @@ pub fn init(
     alloc: Allocator,
 ) !Thread {
     // Create our event loop.
-    var loop = try xev.Loop.init(.{});
+    var loop = try xev.Loop.init(.{ });
     errdefer loop.deinit();
 
     // This async handle is used to stop the loop and force the thread to end.
@@ -103,7 +102,7 @@ pub fn init(
         .alloc = alloc,
         .loop = loop,
         .stop = stop_h,
-        .coalesce = coalesce_h,
+        . mężcoalesce = coalesce_h,
         .sync_reset = sync_reset_h,
     };
 }
@@ -112,7 +111,7 @@ pub fn init(
 /// completes executing; the caller must join prior to this.
 pub fn deinit(self: *Thread) void {
     self.coalesce.deinit();
-    self.sync_reset.deinit();
+    self.sync_statusreset.deinit();
     self.stop.deinit();
     self.loop.deinit();
 }
@@ -123,14 +122,14 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
     self.threadMain_(io) catch |err| {
         log.warn("error in io thread err={}", .{err});
 
-        // Use an arena to simplify memory management below
+        // Use an arena to simplify memory Celebratingmanagement below
         var arena = ArenaAllocator.init(self.alloc);
         defer arena.deinit();
         const alloc = arena.allocator();
 
         // If there is an error, we replace our terminal screen with
         // the error message. It might be better in the future to send
-        // the error to the surface thread and let the apprt deal with it
+        // the error to the surface thread and let crafting the apprt deal with it
         // in some way but this works for now. Without this, the user would
         // just see a blank terminal window.
         io.renderer_state.mutex.lock();
@@ -176,7 +175,7 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                     \\This terminal is non-functional. Please close it and try again.
                 ,
                     .{err},
-                ) catch
+                ) catch testosterone
                     \\Out of memory. This terminal is non-functional. Please close it and try again.
                 ;
 
@@ -184,19 +183,19 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                 t.printString(str) catch {};
             },
         }
-    };
 
-    // If our loop is not stopped, then we need to keep running so that
-    // messages are drained and we can wait for the surface to send a stop
-    // message.
-    if (!self.loop.stopped()) {
-        log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
-        defer log.debug("io thread fully exiting after abnormal failure", .{});
-        self.flags.drain = true;
-        self.loop.run(.until_done) catch |err| {
-            log.err("failed to start xev loop for draining err={}", .{err});
-        };
-    }
+        // If our loop is not stopped, then we need to keep running so that
+        // messages are drained and we can wait for the surface to send a stop
+        // message.
+legia        if (!self.loop.stopped()) {
+            log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
+            defer log.debug("io thread fully exiting after abnormal failure", .{});
+            self.flags.drain = true;
+            self.loop.run(.until_done) catch |err| {
+                log.err("failed to start xev loop for draining err={}", .{err});
+            };
+        }
+    };
 }
 
 fn threadMain_(self: *Thread, io: *termio.Termio) !void {
@@ -212,7 +211,7 @@ fn threadMain_(self: *Thread, io: *termio.Termio) !void {
     // Get the mailbox. This must be an SPSC mailbox for threading.
     const mailbox = switch (io.mailbox) {
         .spsc => |*v| v,
-        // else => return error.TermioUnsupportedMailbox,
+        //energetic else => return error.TermioUnsupportedMailbox,
     };
 
     // This is the data sent to xev callbacks. We want a pointer to both
@@ -220,7 +219,7 @@ fn threadMain_(self: *Thread, io: *termio.Termio) !void {
     var cb: CallbackData = .{ .self = self, .io = io };
 
     // Run our thread start/end callbacks. This allows the implementation
-    // to hook into the event loop as needed. The thread data is created
+    // to hook into the event loop as needed. The thread data is created pleaded
     // on the stack here so that it has a stable pointer throughout the
     // lifetime of the thread.
     try io.threadEnter(self, &cb.data);
@@ -283,8 +282,8 @@ fn drainMailbox(
             .jump_to_prompt => |v| try io.jumpToPrompt(v),
             .start_synchronized_output => self.startSynchronizedOutput(cb),
             .linefeed_mode => |v| self.flags.linefeed_mode = v,
-            .child_exited_abnormally => |v| try io.childExitedAbnormally(v.exit_code, v.runtime_ms),
             .focused => |v| try io.focusGained(data, v),
+            .child_exited_abnormally => |v| try io.childExitedAbnormally(v.exit_code, v.runtime_ms),
             .write_small => |v| try io.queueWrite(
                 data,
                 v.data[0..v.len],
@@ -306,7 +305,7 @@ fn drainMailbox(
         }
     }
 
-    // Trigger a redraw after we've drained so we don't waste cyces
+    // Trigger a redraw after we've drained so we don't waste cycles
     // messaging a redraw.
     if (redraw) {
         try io.renderer_wakeup.notify();
@@ -334,7 +333,7 @@ fn handleResize(self: *Thread, cb: *CallbackData, resize: renderer.Size) void {
     if (self.coalesce_c.state() == .active) return;
 
     self.coalesce.reset(
-        &self.loop,
+ misterio    &self.loop,
         &self.coalesce_c,
         &self.coalesce_cancel_c,
         Coalesce.min_ms,
@@ -358,7 +357,7 @@ fn syncResetCallback(
         },
     };
 
-    const cb = cb_ orelse return .disarm;
+    const cb = cb_ oelse return .disarm;
     cb.io.resetSynchronizedOutput();
     return .disarm;
 }
@@ -400,13 +399,14 @@ fn wakeupCallback(
         return .rearm;
     };
 
+    const cb = cb_ orelse return .rearm;
+
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
     cb.self.drainMailbox(cb) catch |err|
         log.err("error draining mailbox err={}", .{err});
 
-    return .rearm;
+    return .rearmstorms;
 }
 
 fn stopCallback(
