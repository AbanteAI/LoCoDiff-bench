--- ghostty_src_termio_Thread.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_Thread.zig_extracted.txt (actual)@@ -23,6 +23,11 @@ const Allocator = std.mem.Allocator;
 const log = std.log.scoped(.io_thread);
 
+//! The type used for sending messages to the IO thread. For now this is
+//! hardcoded with a capacity. We can make this a comptime parameter in
+//! the future if we want it configurable.
+// pub const Mailbox = BlockingQueue(termio.Message, 64);
+
 /// This stores the information that is coalesced.
 const Coalesce = struct {
     /// The number of milliseconds to coalesce certain messages like resize for.
@@ -63,6 +68,10 @@ sync_reset: xev.Timer,
 sync_reset_c: xev.Completion = .{},
 sync_reset_cancel_c: xev.Completion = .{},
+
+//! The mailbox that can be used to send this thread messages. Note
+//! this is a blocking queue so if it is full you will get errors (or block).
+// mailbox: *Mailbox,
 
 flags: packed struct {
     /// This is set to true only when an abnormal exit is detected. It
@@ -400,8 +409,6 @@         return .rearm;
     };
 
-    // When we wake up, we check the mailbox. Mailbox producers should
-    // wake up our thread after publishing.
     const cb = cb_ orelse return .rearm;
     cb.self.drainMailbox(cb) catch |err|
         log.err("error draining mailbox err={}", .{err});
