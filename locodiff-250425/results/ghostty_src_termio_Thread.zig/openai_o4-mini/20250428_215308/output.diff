
index 312ad8ce..33ac862f 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmpgxuk0gew_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmpiew35ti3_actual.txt	
@@ -28,7 +28,6 @@ const Coalesce = struct {
     /// The number of milliseconds to coalesce certain messages like resize for.
     /// Not all message types are coalesced.
     const min_ms = 25;
-
     resize: ?renderer.Size = null,
 };
 
@@ -36,12 +35,9 @@ const Coalesce = struct {
 /// if the running program hasn't already.
 const sync_reset_ms = 1000;
 
-/// Allocator used for some state
 alloc: std.mem.Allocator,
 
-/// The main event loop for the thread. The user data of this loop
-/// is always the allocator used to create the loop. This is a convenience
-/// so that users of the loop always have an allocator.
+/// The event loop for the thread.
 loop: xev.Loop,
 
 /// The completion to use for the wakeup async handle that is present
@@ -56,7 +52,7 @@ stop_c: xev.Completion = .{},
 coalesce: xev.Timer,
 coalesce_c: xev.Completion = .{},
 coalesce_cancel_c: xev.Completion = .{},
-coalesce_data: Coalesce = .{},
+coalesce_data: Coalesce = .{}, 
 
 /// This timer is used to reset synchronized output modes so that
 /// the terminal doesn't freeze with a bad actor.
@@ -75,27 +71,21 @@ flags: packed struct {
 
     /// This is true when the inspector is active.
     has_inspector: bool = false,
-} = .{},
+} = .{};
 
-/// Initialize the thread. This does not START the thread. This only sets
-/// up all the internal state necessary prior to starting the thread. It
-/// is up to the caller to start the thread with the threadMain entrypoint.
 pub fn init(
     alloc: Allocator,
+    t: *termio.Termio,
 ) !Thread {
-    // Create our event loop.
     var loop = try xev.Loop.init(.{});
     errdefer loop.deinit();
 
-    // This async handle is used to stop the loop and force the thread to end.
     var stop_h = try xev.Async.init();
     errdefer stop_h.deinit();
 
-    // This timer is used to coalesce resize events.
     var coalesce_h = try xev.Timer.init();
     errdefer coalesce_h.deinit();
 
-    // This timer is used to reset synchronized output modes.
     var sync_reset_h = try xev.Timer.init();
     errdefer sync_reset_h.deinit();
 
@@ -108,8 +98,6 @@ pub fn init(
     };
 }
 
-/// Clean up the thread. This is only safe to call once the thread
-/// completes executing; the caller must join prior to this.
 pub fn deinit(self: *Thread) void {
     self.coalesce.deinit();
     self.sync_reset.deinit();
@@ -119,7 +107,6 @@ pub fn deinit(self: *Thread) void {
 
 /// The main entrypoint for the thread.
 pub fn threadMain(self: *Thread, io: *termio.Termio) void {
-    // Call child function so we can use errors...
     self.threadMain_(io) catch |err| {
         log.warn("error in io thread err={}", .{err});
 
@@ -128,11 +115,6 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
         defer arena.deinit();
         const alloc = arena.allocator();
 
-        // If there is an error, we replace our terminal screen with
-        // the error message. It might be better in the future to send
-        // the error to the surface thread and let the apprt deal with it
-        // in some way but this works for now. Without this, the user would
-        // just see a blank terminal window.
         io.renderer_state.mutex.lock();
         defer io.renderer_state.mutex.unlock();
         const t = io.renderer_state.terminal;
@@ -140,12 +122,7 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
         // Hide the cursor
         t.modes.set(.cursor_visible, false);
 
-        // This is weird but just ensures that no matter what our underlying
-        // implementation we have the errors below. For example, Windows doesn't
-        // have "OpenptyFailed".
-        const Err = @TypeOf(err) || error{
-            OpenptyFailed,
-        };
+        const Err = @TypeOf(err) || error{ OpenptyFailed };
 
         switch (@as(Err, @errorCast(err))) {
             error.OpenptyFailed => {
@@ -159,11 +136,9 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                     \\
                     \\Please free up some pty devices and try again.
                 ;
-
                 t.eraseDisplay(.complete, false);
                 t.printString(str) catch {};
             },
-
             else => {
                 const str = std.fmt.allocPrint(
                     alloc,
@@ -179,16 +154,12 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                 ) catch
                     \\Out of memory. This terminal is non-functional. Please close it and try again.
                 ;
-
                 t.eraseDisplay(.complete, false);
                 t.printString(str) catch {};
             },
         }
     };
 
-    // If our loop is not stopped, then we need to keep running so that
-    // messages are drained and we can wait for the surface to send a stop
-    // message.
     if (!self.loop.stopped()) {
         log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
         defer log.debug("io thread fully exiting after abnormal failure", .{});
@@ -215,99 +186,65 @@ fn threadMain_(self: *Thread, io: *termio.Termio) !void {
         // else => return error.TermioUnsupportedMailbox,
     };
 
-    // This is the data sent to xev callbacks. We want a pointer to both
-    // ourselves and the thread data so we can thread that through (pun intended).
+    // This is the data passed to xev callbacks.
     var cb: CallbackData = .{ .self = self, .io = io };
 
-    // Run our thread start/end callbacks. This allows the implementation
-    // to hook into the event loop as needed. The thread data is created
-    // on the stack here so that it has a stable pointer throughout the
-    // lifetime of the thread.
     try io.threadEnter(self, &cb.data);
     defer cb.data.deinit();
     defer io.threadExit(&cb.data);
 
-    // Start the async handlers.
     mailbox.wakeup.wait(&self.loop, &self.wakeup_c, CallbackData, &cb, wakeupCallback);
     self.stop.wait(&self.loop, &self.stop_c, CallbackData, &cb, stopCallback);
 
-    // Run
     log.debug("starting IO thread", .{});
-    defer log.debug("starting IO thread shutdown", .{});
     try self.loop.run(.until_done);
 }
 
-/// This is the data passed to xev callbacks on the thread.
 const CallbackData = struct {
     self: *Thread,
     io: *termio.Termio,
     data: termio.Termio.ThreadData = undefined,
 };
 
-/// Drain the mailbox, handling all the messages in our terminal implementation.
-fn drainMailbox(
-    self: *Thread,
-    cb: *CallbackData,
-) !void {
-    // We assert when starting the thread that this is the state
+fn drainMailbox(self: *Thread, cb: *CallbackData) !void {
     const mailbox = cb.io.mailbox.spsc.queue;
     const io = cb.io;
     const data = &cb.data;
 
-    // If we're draining, we just drain the mailbox and return.
     if (self.flags.drain) {
         while (mailbox.pop()) |_| {}
         return;
     }
 
-    // This holds the mailbox lock for the duration of the drain. The
-    // expectation is that all our message handlers will be non-blocking
-    // ENOUGH to not mess up throughput on producers.
     var redraw: bool = false;
     while (mailbox.pop()) |message| {
-        // If we have a message we always redraw
         redraw = true;
-
         log.debug("mailbox message={}", .{message});
         switch (message) {
-            .crash => @panic("crash request, crashing intentionally"),
+            .size_report => |v| try io.sizeReport(data, v),
+            .focused => |v| try io.focusGained(data, v),
             .change_config => |config| {
                 defer config.alloc.destroy(config.ptr);
                 try io.changeConfig(data, config.ptr);
             },
             .inspector => |v| self.flags.has_inspector = v,
             .resize => |v| self.handleResize(cb, v),
-            .size_report => |v| try io.sizeReport(data, v),
             .clear_screen => |v| try io.clearScreen(data, v.history),
             .scroll_viewport => |v| try io.scrollViewport(v),
             .jump_to_prompt => |v| try io.jumpToPrompt(v),
             .start_synchronized_output => self.startSynchronizedOutput(cb),
             .linefeed_mode => |v| self.flags.linefeed_mode = v,
             .child_exited_abnormally => |v| try io.childExitedAbnormally(v.exit_code, v.runtime_ms),
-            .focused => |v| try io.focusGained(data, v),
-            .write_small => |v| try io.queueWrite(
-                data,
-                v.data[0..v.len],
-                self.flags.linefeed_mode,
-            ),
-            .write_stable => |v| try io.queueWrite(
-                data,
-                v,
-                self.flags.linefeed_mode,
-            ),
+            .crash => @panic("crash request, crashing intentionally"),
+            .write_small => |v| try io.queueWrite(data, v.data[0..v.len], self.flags.linefeed_mode),
+            .write_stable => |v| try io.queueWrite(data, v, self.flags.linefeed_mode),
             .write_alloc => |v| {
                 defer v.alloc.free(v.data);
-                try io.queueWrite(
-                    data,
-                    v.data,
-                    self.flags.linefeed_mode,
-                );
+                try io.queueWrite(data, v.data, self.flags.linefeed_mode);
             },
         }
     }
 
-    // Trigger a redraw after we've drained so we don't waste cyces
-    // messaging a redraw.
     if (redraw) {
         try io.renderer_wakeup.notify();
     }
@@ -327,12 +264,7 @@ fn startSynchronizedOutput(self: *Thread, cb: *CallbackData) void {
 
 fn handleResize(self: *Thread, cb: *CallbackData, resize: renderer.Size) void {
     self.coalesce_data.resize = resize;
-
-    // If the timer is already active we just return. In the future we want
-    // to reset the timer up to a maximum wait time but for now this ensures
-    // relatively smooth resizing.
     if (self.coalesce_c.state() == .active) return;
-
     self.coalesce.reset(
         &self.loop,
         &self.coalesce_c,
@@ -378,14 +310,12 @@ fn coalesceCallback(
     };
 
     const cb = cb_ orelse return .disarm;
-
     if (cb.self.coalesce_data.resize) |v| {
         cb.self.coalesce_data.resize = null;
         cb.io.resize(&cb.data, v) catch |err| {
             log.warn("error during resize err={}", .{err});
         };
     }
-
     return .disarm;
 }
 
@@ -400,10 +330,7 @@ fn wakeupCallback(
         return .rearm;
     };
 
-    // When we wake up, we check the mailbox. Mailbox producers should
-    // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
-    cb.self.drainMailbox(cb) catch |err|
+    cb_.?.self.drainMailbox(cb_) catch |err|
         log.err("error draining mailbox err={}", .{err});
 
     return .rearm;
