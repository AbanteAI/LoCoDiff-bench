
index 312ad8cef..5aa5542a3 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmpzbhiijj9_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmp4sp0wx4f_actual.txt	
@@ -51,6 +51,7 @@ wakeup_c: xev.Completion = .{},
 /// This can be used to stop the thread on the next loop iteration.
 stop: xev.Async,
 stop_c: xev.Completion = .{},
+stop_cancel_c: xev.Completion = .{},
 
 /// This is used to coalesce resize events.
 coalesce: xev.Timer,
@@ -152,7 +153,7 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                 const str =
                     \\Your system cannot allocate any more pty devices.
                     \\
-                    \\Ghostty requires a pty device to launch a new terminal.
+                    \Ghostty requires a pty device to launch a new terminal.
                     \\This error is usually due to having too many terminal
                     \\windows open or having another program that is using too
                     \\many pty devices.
@@ -284,7 +285,6 @@ fn drainMailbox(
             .start_synchronized_output => self.startSynchronizedOutput(cb),
             .linefeed_mode => |v| self.flags.linefeed_mode = v,
             .child_exited_abnormally => |v| try io.childExitedAbnormally(v.exit_code, v.runtime_ms),
-            .focused => |v| try io.focusGained(data, v),
             .write_small => |v| try io.queueWrite(
                 data,
                 v.data[0..v.len],
@@ -303,6 +303,7 @@ fn drainMailbox(
                     self.flags.linefeed_mode,
                 );
             },
+            .focused => |v| try io.focusGained(data, v),
         }
     }
 
@@ -390,7 +391,7 @@ fn coalesceCallback(
 }
 
 fn wakeupCallback(
-    cb_: ?*CallbackData,
+    _: ?*CallbackData,
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Async.WaitError!void,
@@ -402,9 +403,9 @@ fn wakeupCallback(
 
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
-    cb.self.drainMailbox(cb) catch |err|
-        log.err("error draining mailbox err={}", .{err});
+    // const cb = cb_ orelse return .rearm;
+    // cb.self.drainMailbox(cb) catch |err|
+    //     log.err("error draining mailbox err={}", .{err});
 
     return .rearm;
 }
