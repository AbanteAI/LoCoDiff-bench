
index 312ad8cef..cac68a122 100644
--- a/ghostty_src_termio_Thread.zig_expectedoutput.txt (expected):tmp/tmpvdfyvgu6_expected.txt	
+++ b/ghostty_src_termio_Thread.zig_extracted.txt (actual):tmp/tmpgidabvum_actual.txt	
@@ -56,7 +56,6 @@ stop_c: xev.Completion = .{},
 coalesce: xev.Timer,
 coalesce_c: xev.Completion = .{},
 coalesce_cancel_c: xev.Completion = .{},
-coalesce_data: Coalesce = .{},
 
 /// This timer is used to reset synchronized output modes so that
 /// the terminal doesn't freeze with a bad actor.
@@ -184,31 +183,24 @@ pub fn threadMain(self: *Thread, io: *termio.Termio) void {
                 t.printString(str) catch {};
             },
         }
-    };
 
-    // If our loop is not stopped, then we need to keep running so that
-    // messages are drained and we can wait for the surface to send a stop
-    // message.
-    if (!self.loop.stopped()) {
-        log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
-        defer log.debug("io thread fully exiting after abnormal failure", .{});
-        self.flags.drain = true;
-        self.loop.run(.until_done) catch |err| {
-            log.err("failed to start xev loop for draining err={}", .{err});
-        };
-    }
+        // If our loop is not stopped, then we need to keep running so that
+        // messages are drained and we can wait for the surface to send a stop
+        // message.
+        if (!self.loop.stopped()) {
+            log.warn("abrupt io thread exit detected, starting xev to drain mailbox", .{});
+            defer log.debug("io thread fully exiting after abnormal failure", .{});
+            self.flags.drain = true;
+            self.loop.run(.until_done) catch |err| {
+                log.err("failed to start xev loop for draining err={}", .{err});
+            };
+        }
+    };
 }
 
 fn threadMain_(self: *Thread, io: *termio.Termio) !void {
     defer log.debug("IO thread exited", .{});
 
-    // Setup our crash metadata
-    crash.sentry.thread_state = .{
-        .type = .io,
-        .surface = io.surface_mailbox.surface,
-    };
-    defer crash.sentry.thread_state = null;
-
     // Get the mailbox. This must be an SPSC mailbox for threading.
     const mailbox = switch (io.mailbox) {
         .spsc => |*v| v,
@@ -400,9 +392,10 @@ fn wakeupCallback(
         return .rearm;
     };
 
+    const cb = cb_ orelse return .rearm;
+
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
-    const cb = cb_ orelse return .rearm;
     cb.self.drainMailbox(cb) catch |err|
         log.err("error draining mailbox err={}", .{err});
 
