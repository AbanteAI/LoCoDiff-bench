
index 01d9cdcb..f8744038 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmpjj7o9tg__expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmpkzy9jgrt_actual.txt	
@@ -87,7 +87,6 @@ def offer_openrouter_oauth(io, analytics):
     Returns:
         True if authentication was successful, False otherwise.
     """
-    # No API keys found - Offer OpenRouter OAuth
     io.tool_output("OpenRouter provides free and paid access to many LLMs.")
     # Use confirm_ask which handles non-interactive cases
     if io.confirm_ask(
@@ -106,7 +105,6 @@ def offer_openrouter_oauth(io, analytics):
 
         # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
         # Error messages are handled within start_openrouter_oauth_flow
-        analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
         # Fall through to the final error message
 
@@ -153,11 +151,9 @@ def select_default_model(args, io, analytics):
 def find_available_port(start_port=8484, end_port=8584):
     for port in range(start_port, end_port + 1):
         try:
-            # Check if the port is available by trying to bind to it
             with socketserver.TCPServer(("localhost", port), None):
                 return port
         except OSError:
-            # Port is likely already in use
             continue
     return None
 
@@ -184,7 +180,7 @@ def exchange_code_for_key(code, code_verifier, io):
             },
             timeout=30,  # Add a timeout
         )
-        response.raise_for_status()  # Raise exception for bad status codes (4xx or 5xx)
+        response.raise_for_status()
         data = response.json()
         api_key = data.get("key")
         if not api_key:
@@ -242,63 +238,47 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"<p>Aider has received the authentication code. "
                         b"You can close this browser tab.</p></body></html>"
                     )
-                    # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
-                    # Redirect to aider website if 'code' is missing (e.g., user visited manually)
-                    self.send_response(302)  # Found (temporary redirect)
+                    self.send_response(302)
                     self.send_header("Location", urls.website)
                     self.end_headers()
-                    # No need to set server_error, just redirect.
-                    # Do NOT shut down the server here; wait for timeout or success.
             else:
-                # Redirect anything else (e.g., favicon.ico) to the main website as well
                 self.send_response(302)
                 self.send_header("Location", urls.website)
                 self.end_headers()
                 self.wfile.write(b"Not Found")
 
         def log_message(self, format, *args):
-            # Suppress server logging to keep terminal clean
             pass
 
     def run_server():
         nonlocal server_error
         try:
             with socketserver.TCPServer(("localhost", port), OAuthCallbackHandler) as httpd:
-                io.tool_output(f"Temporary server listening on {callback_url}", log_only=True)
-                server_started.set()  # Signal that the server is ready
-                # Wait until shutdown is requested or timeout occurs (handled by main thread)
+                server_started.set()
                 while not shutdown_server.is_set():
-                    httpd.handle_request()  # Handle one request at a time
-                    # Add a small sleep to prevent busy-waiting if needed,
-                    # though handle_request should block appropriately.
-                    time.sleep(0.1)
-                io.tool_output("Shutting down temporary server.", log_only=True)
+                    httpd.handle_request()
         except Exception as e:
             server_error = f"Failed to start or run temporary server: {e}"
-            server_started.set()  # Signal even if failed, error will be checked
-            shutdown_server.set()  # Ensure shutdown logic proceeds
+            server_started.set()
+            shutdown_server.set()
 
     server_thread = threading.Thread(target=run_server, daemon=True)
     server_thread.start()
 
-    # Wait briefly for the server to start, or for an error
     if not server_started.wait(timeout=5):
         io.tool_error("Temporary authentication server failed to start in time.")
-        shutdown_server.set()  # Ensure thread exits if it eventually starts
+        shutdown_server.set()
         server_thread.join(timeout=1)
         return None
 
-    # Check if server failed during startup
     if server_error:
         io.tool_error(server_error)
-        shutdown_server.set()  # Ensure thread exits
+        shutdown_server.set()
         server_thread.join(timeout=1)
         return None
 
-    # Generate codes and URL
     code_verifier, code_challenge = generate_pkce_codes()
     auth_url_base = "https://openrouter.ai/auth"
     auth_params = {
@@ -321,22 +301,19 @@ def start_openrouter_oauth_flow(io, analytics):
     except Exception:
         pass
 
-    # Wait for the callback to set the auth_code or for timeout/error
     interrupted = False
     try:
-        shutdown_server.wait(timeout=MINUTES * 60)  # Convert minutes to seconds
+        shutdown_server.wait(timeout=MINUTES * 60)
     except KeyboardInterrupt:
         io.tool_warning("\nOAuth flow interrupted.")
         analytics.event("oauth_flow_failed", provider="openrouter", reason="user_interrupt")
         interrupted = True
-        # Ensure the server thread is signaled to shut down
         shutdown_server.set()
 
-    # Join the server thread to ensure it's cleaned up
     server_thread.join(timeout=1)
 
     if interrupted:
-        return None  # Return None if interrupted by user
+        return None
 
     if server_error:
         io.tool_error(f"Authentication failed: {server_error}")
@@ -351,14 +328,11 @@ def start_openrouter_oauth_flow(io, analytics):
     io.tool_output("Completing authentication...")
     analytics.event("oauth_flow_code_received", provider="openrouter")
 
-    # Exchange code for key
     api_key = exchange_code_for_key(auth_code, code_verifier, io)
 
     if api_key:
-        # Set env var for the current session immediately
         os.environ["OPENROUTER_API_KEY"] = api_key
 
-        # Save the key to the oauth-keys.env file
         try:
             config_dir = os.path.expanduser("~/.aider")
             os.makedirs(config_dir, exist_ok=True)
@@ -374,55 +348,9 @@ def start_openrouter_oauth_flow(io, analytics):
         except Exception as e:
             io.tool_error(f"Successfully obtained key, but failed to save it to file: {e}")
             io.tool_warning("Set OPENROUTER_API_KEY environment variable for this session only.")
-            # Still return the key for the current session even if saving failed
             analytics.event("oauth_flow_save_failed", provider="openrouter", reason=str(e))
             return api_key
     else:
         io.tool_error("Authentication with OpenRouter failed.")
         analytics.event("oauth_flow_failed", provider="openrouter", reason="code_exchange_failed")
-        return None
-
-
-# Dummy Analytics class for testing
-class DummyAnalytics:
-    def event(self, *args, **kwargs):
-        # print(f"Analytics Event: {args} {kwargs}") # Optional: print events
-        pass
-
-
-def main():
-    """Main function to test the OpenRouter OAuth flow."""
-    print("Starting OpenRouter OAuth flow test...")
-
-    # Use a real IO object for interaction
-    io = InputOutput(
-        pretty=True,
-        yes=False,
-        input_history_file=None,
-        chat_history_file=None,
-        tool_output_color="BLUE",
-        tool_error_color="RED",
-    )
-    # Use a dummy analytics object
-    analytics = DummyAnalytics()
-
-    # Ensure OPENROUTER_API_KEY is not set, to trigger the flow naturally
-    # (though start_openrouter_oauth_flow doesn't check this itself)
-    if "OPENROUTER_API_KEY" in os.environ:
-        print("Warning: OPENROUTER_API_KEY is already set in environment.")
-        # del os.environ["OPENROUTER_API_KEY"] # Optionally unset it for testing
-
-    api_key = start_openrouter_oauth_flow(io, analytics)
-
-    if api_key:
-        print("\nOAuth flow completed successfully!")
-        print(f"Obtained API Key (first 5 chars): {api_key[:5]}...")
-        # Be careful printing the key, even partially
-    else:
-        print("\nOAuth flow failed or was cancelled.")
-
-    print("\nOpenRouter OAuth flow test finished.")
-
-
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+        return None
\ No newline at end of file
