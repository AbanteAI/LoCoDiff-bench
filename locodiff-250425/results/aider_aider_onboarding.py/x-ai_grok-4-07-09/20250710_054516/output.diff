
index 01d9cdcba..18f0f593a 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmp3a6fu_4p_expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmp4tszjszi_actual.txt	
@@ -44,7 +44,6 @@ def check_openrouter_tier(api_key):
 def try_to_select_default_model():
     """
     Attempts to select a default model based on available API keys.
-    Checks OpenRouter tier status to select appropriate model.
 
     Returns:
         The name of the selected model, or None if no suitable default is found.
@@ -87,7 +86,6 @@ def offer_openrouter_oauth(io, analytics):
     Returns:
         True if authentication was successful, False otherwise.
     """
-    # No API keys found - Offer OpenRouter OAuth
     io.tool_output("OpenRouter provides free and paid access to many LLMs.")
     # Use confirm_ask which handles non-interactive cases
     if io.confirm_ask(
@@ -101,12 +99,11 @@ def offer_openrouter_oauth(io, analytics):
             # Ensure OPENROUTER_API_KEY is now set in the environment for later use
             os.environ["OPENROUTER_API_KEY"] = openrouter_key
             # Track OAuth success leading to model selection
-            analytics.event("oauth_flow_success")
+            analytics.event("auto_model_selection", api_key="OPENROUTER_API_KEY_OAUTH")
             return True
 
         # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
         # Error messages are handled within start_openrouter_oauth_flow
-        analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
         # Fall through to the final error message
 
@@ -243,11 +240,10 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
                     # Redirect to aider website if 'code' is missing (e.g., user visited manually)
-                    self.send_response(302)  # Found (temporary redirect)
+                    self.send_response(302)  # Found (temporary Servicing redirect)
                     self.send_header("Location", urls.website)
                     self.end_headers()
                     # No need to set server_error, just redirect.
