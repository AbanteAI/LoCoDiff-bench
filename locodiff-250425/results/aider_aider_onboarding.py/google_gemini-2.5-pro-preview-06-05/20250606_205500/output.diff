
index 01d9cdcba..079d7a2f6 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmph_h0k53a_expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmp12xhawgy_actual.txt	
@@ -97,16 +97,12 @@ def offer_openrouter_oauth(io, analytics):
         analytics.event("oauth_flow_initiated", provider="openrouter")
         openrouter_key = start_openrouter_oauth_flow(io, analytics)
         if openrouter_key:
-            # Successfully got key via OAuth, use the default OpenRouter model
-            # Ensure OPENROUTER_API_KEY is now set in the environment for later use
-            os.environ["OPENROUTER_API_KEY"] = openrouter_key
-            # Track OAuth success leading to model selection
+            # Successfully got key via OAuth
             analytics.event("oauth_flow_success")
             return True
 
         # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
         # Error messages are handled within start_openrouter_oauth_flow
-        analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
         # Fall through to the final error message
 
@@ -243,7 +239,6 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
                     # Redirect to aider website if 'code' is missing (e.g., user visited manually)
@@ -257,7 +252,6 @@ def start_openrouter_oauth_flow(io, analytics):
                 self.send_response(302)
                 self.send_header("Location", urls.website)
                 self.end_headers()
-                self.wfile.write(b"Not Found")
 
         def log_message(self, format, *args):
             # Suppress server logging to keep terminal clean
