--- aider_aider_onboarding.py_expectedoutput.txt (expected)+++ aider_aider_onboarding.py_extracted.txt (actual)@@ -67,7 +67,6 @@         ("GEMINI_API_KEY", "gemini/gemini-2.5-pro-exp-03-25"),
         ("VERTEXAI_PROJECT", "vertex_ai/gemini-2.5-pro-exp-03-25"),
     ]
-
     for env_key, model_name in model_key_pairs:
         api_key_value = os.environ.get(env_key)
         if api_key_value:
@@ -87,7 +86,6 @@     Returns:
         True if authentication was successful, False otherwise.
     """
-    # No API keys found - Offer OpenRouter OAuth
     io.tool_output("OpenRouter provides free and paid access to many LLMs.")
     # Use confirm_ask which handles non-interactive cases
     if io.confirm_ask(
@@ -97,18 +95,11 @@         analytics.event("oauth_flow_initiated", provider="openrouter")
         openrouter_key = start_openrouter_oauth_flow(io, analytics)
         if openrouter_key:
-            # Successfully got key via OAuth, use the default OpenRouter model
-            # Ensure OPENROUTER_API_KEY is now set in the environment for later use
-            os.environ["OPENROUTER_API_KEY"] = openrouter_key
-            # Track OAuth success leading to model selection
-            analytics.event("oauth_flow_success")
+            analytics.event("oauth_flow_success", provider="openrouter")
             return True
 
-        # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
-        # Error messages are handled within start_openrouter_oauth_flow
-        analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
-        # Fall through to the final error message
+        return False
 
     return False
 
@@ -138,7 +129,7 @@     no_model_msg = "No LLM model was specified and no API keys were provided."
     io.tool_warning(no_model_msg)
 
-    # Try OAuth if no model was detected
+    # Try OAuth if no model detected
     offer_openrouter_oauth(io, analytics)
 
     # Check again after potential OAuth success
@@ -149,7 +140,6 @@     io.offer_url(urls.models_and_keys, "Open documentation URL for more info?")
 
 
-# Helper function to find an available port
 def find_available_port(start_port=8484, end_port=8584):
     for port in range(start_port, end_port + 1):
         try:
@@ -162,7 +152,6 @@     return None
 
 
-# PKCE code generation
 def generate_pkce_codes():
     code_verifier = secrets.token_urlsafe(64)
     hasher = hashlib.sha256()
@@ -171,7 +160,6 @@     return code_verifier, code_challenge
 
 
-# Function to exchange the authorization code for an API key
 def exchange_code_for_key(code, code_verifier, io):
     try:
         response = requests.post(
@@ -210,7 +198,6 @@         return None
 
 
-# Function to start the OAuth flow
 def start_openrouter_oauth_flow(io, analytics):
     """Initiates the OpenRouter OAuth PKCE flow using a local server."""
 
@@ -243,7 +230,6 @@                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
                     # Redirect to aider website if 'code' is missing (e.g., user visited manually)
@@ -357,7 +343,6 @@     if api_key:
         # Set env var for the current session immediately
         os.environ["OPENROUTER_API_KEY"] = api_key
-
         # Save the key to the oauth-keys.env file
         try:
             config_dir = os.path.expanduser("~/.aider")
@@ -365,16 +350,13 @@             key_file = os.path.join(config_dir, "oauth-keys.env")
             with open(key_file, "a", encoding="utf-8") as f:
                 f.write(f'OPENROUTER_API_KEY="{api_key}"\n')
-
             io.tool_warning("Aider will load the OpenRouter key automatically in future sessions.")
             io.tool_output()
-
             analytics.event("oauth_flow_success", provider="openrouter")
             return api_key
         except Exception as e:
             io.tool_error(f"Successfully obtained key, but failed to save it to file: {e}")
             io.tool_warning("Set OPENROUTER_API_KEY environment variable for this session only.")
-            # Still return the key for the current session even if saving failed
             analytics.event("oauth_flow_save_failed", provider="openrouter", reason=str(e))
             return api_key
     else:
