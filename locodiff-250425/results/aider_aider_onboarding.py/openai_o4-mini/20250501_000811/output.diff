
index 01d9cdcb..78d5c85b 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmpk_dk5ybb_expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmpkl4de6h6_actual.txt	
@@ -87,7 +87,6 @@ def offer_openrouter_oauth(io, analytics):
     Returns:
         True if authentication was successful, False otherwise.
     """
-    # No API keys found - Offer OpenRouter OAuth
     io.tool_output("OpenRouter provides free and paid access to many LLMs.")
     # Use confirm_ask which handles non-interactive cases
     if io.confirm_ask(
@@ -100,15 +99,15 @@ def offer_openrouter_oauth(io, analytics):
             # Successfully got key via OAuth, use the default OpenRouter model
             # Ensure OPENROUTER_API_KEY is now set in the environment for later use
             os.environ["OPENROUTER_API_KEY"] = openrouter_key
-            # Track OAuth success leading to model selection
-            analytics.event("oauth_flow_success")
+            io.tool_warning("Aider will load the OpenRouter key automatically in future sessions.")
+            io.tool_output()
+            analytics.event("oauth_flow_success", provider="openrouter")
             return True
-
         # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
         # Error messages are handled within start_openrouter_oauth_flow
         analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
-        # Fall through to the final error message
+        return False
 
     return False
 
@@ -149,7 +148,6 @@ def select_default_model(args, io, analytics):
     io.offer_url(urls.models_and_keys, "Open documentation URL for more info?")
 
 
-# Helper function to find an available port
 def find_available_port(start_port=8484, end_port=8584):
     for port in range(start_port, end_port + 1):
         try:
@@ -162,7 +160,6 @@ def find_available_port(start_port=8484, end_port=8584):
     return None
 
 
-# PKCE code generation
 def generate_pkce_codes():
     code_verifier = secrets.token_urlsafe(64)
     hasher = hashlib.sha256()
@@ -171,7 +168,6 @@ def generate_pkce_codes():
     return code_verifier, code_challenge
 
 
-# Function to exchange the authorization code for an API key
 def exchange_code_for_key(code, code_verifier, io):
     try:
         response = requests.post(
@@ -210,7 +206,6 @@ def exchange_code_for_key(code, code_verifier, io):
         return None
 
 
-# Function to start the OAuth flow
 def start_openrouter_oauth_flow(io, analytics):
     """Initiates the OpenRouter OAuth PKCE flow using a local server."""
 
@@ -243,7 +238,6 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
                     # Redirect to aider website if 'code' is missing (e.g., user visited manually)
@@ -298,7 +292,6 @@ def start_openrouter_oauth_flow(io, analytics):
         server_thread.join(timeout=1)
         return None
 
-    # Generate codes and URL
     code_verifier, code_challenge = generate_pkce_codes()
     auth_url_base = "https://openrouter.ai/auth"
     auth_params = {
@@ -357,24 +350,19 @@ def start_openrouter_oauth_flow(io, analytics):
     if api_key:
         # Set env var for the current session immediately
         os.environ["OPENROUTER_API_KEY"] = api_key
-
-        # Save the key to the oauth-keys.env file
         try:
             config_dir = os.path.expanduser("~/.aider")
             os.makedirs(config_dir, exist_ok=True)
             key_file = os.path.join(config_dir, "oauth-keys.env")
             with open(key_file, "a", encoding="utf-8") as f:
                 f.write(f'OPENROUTER_API_KEY="{api_key}"\n')
-
             io.tool_warning("Aider will load the OpenRouter key automatically in future sessions.")
             io.tool_output()
-
             analytics.event("oauth_flow_success", provider="openrouter")
             return api_key
         except Exception as e:
             io.tool_error(f"Successfully obtained key, but failed to save it to file: {e}")
             io.tool_warning("Set OPENROUTER_API_KEY environment variable for this session only.")
-            # Still return the key for the current session even if saving failed
             analytics.event("oauth_flow_save_failed", provider="openrouter", reason=str(e))
             return api_key
     else:
