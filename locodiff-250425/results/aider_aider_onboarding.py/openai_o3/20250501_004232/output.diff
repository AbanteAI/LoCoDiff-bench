
index 01d9cdcb..43db2d1d 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmp1g9uuyfp_expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmp533ps9ck_actual.txt	
@@ -69,8 +69,7 @@ def try_to_select_default_model():
     ]
 
     for env_key, model_name in model_key_pairs:
-        api_key_value = os.environ.get(env_key)
-        if api_key_value:
+        if os.environ.get(env_key):
             return model_name
 
     return None
@@ -87,7 +86,6 @@ def offer_openrouter_oauth(io, analytics):
     Returns:
         True if authentication was successful, False otherwise.
     """
-    # No API keys found - Offer OpenRouter OAuth
     io.tool_output("OpenRouter provides free and paid access to many LLMs.")
     # Use confirm_ask which handles non-interactive cases
     if io.confirm_ask(
@@ -97,19 +95,14 @@ def offer_openrouter_oauth(io, analytics):
         analytics.event("oauth_flow_initiated", provider="openrouter")
         openrouter_key = start_openrouter_oauth_flow(io, analytics)
         if openrouter_key:
-            # Successfully got key via OAuth, use the default OpenRouter model
-            # Ensure OPENROUTER_API_KEY is now set in the environment for later use
+            # Successfully got key via OAuth, store for later use
             os.environ["OPENROUTER_API_KEY"] = openrouter_key
-            # Track OAuth success leading to model selection
-            analytics.event("oauth_flow_success")
+            analytics.event("oauth_flow_success", provider="openrouter")
             return True
 
-        # OAuth failed or was cancelled by user implicitly (e.g., closing browser)
-        # Error messages are handled within start_openrouter_oauth_flow
-        analytics.event("oauth_flow_failure")
+        # OAuth failed or was cancelled
+        analytics.event("oauth_flow_failure", provider="openrouter")
         io.tool_error("OpenRouter authentication did not complete successfully.")
-        # Fall through to the final error message
-
     return False
 
 
@@ -147,6 +140,7 @@ def select_default_model(args, io, analytics):
         return model
 
     io.offer_url(urls.models_and_keys, "Open documentation URL for more info?")
+    return None
 
 
 # Helper function to find an available port
@@ -243,23 +237,19 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
-                    # Redirect to aider website if 'code' is missing (e.g., user visited manually)
+                    # Redirect to aider website if 'code' is missing
                     self.send_response(302)  # Found (temporary redirect)
                     self.send_header("Location", urls.website)
                     self.end_headers()
-                    # No need to set server_error, just redirect.
-                    # Do NOT shut down the server here; wait for timeout or success.
             else:
                 # Redirect anything else (e.g., favicon.ico) to the main website as well
                 self.send_response(302)
                 self.send_header("Location", urls.website)
                 self.end_headers()
-                self.wfile.write(b"Not Found")
 
-        def log_message(self, format, *args):
+        def log_message(self, format, *args):  # noqa: D401, N802
             # Suppress server logging to keep terminal clean
             pass
 
@@ -267,7 +257,6 @@ def start_openrouter_oauth_flow(io, analytics):
         nonlocal server_error
         try:
             with socketserver.TCPServer(("localhost", port), OAuthCallbackHandler) as httpd:
-                io.tool_output(f"Temporary server listening on {callback_url}", log_only=True)
                 server_started.set()  # Signal that the server is ready
                 # Wait until shutdown is requested or timeout occurs (handled by main thread)
                 while not shutdown_server.is_set():
@@ -275,7 +264,6 @@ def start_openrouter_oauth_flow(io, analytics):
                     # Add a small sleep to prevent busy-waiting if needed,
                     # though handle_request should block appropriately.
                     time.sleep(0.1)
-                io.tool_output("Shutting down temporary server.", log_only=True)
         except Exception as e:
             server_error = f"Failed to start or run temporary server: {e}"
             server_started.set()  # Signal even if failed, error will be checked
@@ -343,7 +331,7 @@ def start_openrouter_oauth_flow(io, analytics):
         analytics.event("oauth_flow_failed", provider="openrouter", reason=server_error)
         return None
 
-    if not auth_code:
+    if not auth_code:  # Only show timeout if not interrupted
         io.tool_error("Authentication with OpenRouter failed.")
         analytics.event("oauth_flow_failed", provider="openrouter")
         return None
