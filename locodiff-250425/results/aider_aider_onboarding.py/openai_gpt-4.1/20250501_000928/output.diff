
index 01d9cdcb..1822b280 100644
--- a/aider_aider_onboarding.py_expectedoutput.txt (expected):tmp/tmp9dostp4n_expected.txt	
+++ b/aider_aider_onboarding.py_extracted.txt (actual):tmp/tmpx7ql0yvh_actual.txt	
@@ -97,9 +97,6 @@ def offer_openrouter_oauth(io, analytics):
         analytics.event("oauth_flow_initiated", provider="openrouter")
         openrouter_key = start_openrouter_oauth_flow(io, analytics)
         if openrouter_key:
-            # Successfully got key via OAuth, use the default OpenRouter model
-            # Ensure OPENROUTER_API_KEY is now set in the environment for later use
-            os.environ["OPENROUTER_API_KEY"] = openrouter_key
             # Track OAuth success leading to model selection
             analytics.event("oauth_flow_success")
             return True
@@ -109,7 +106,6 @@ def offer_openrouter_oauth(io, analytics):
         analytics.event("oauth_flow_failure")
         io.tool_error("OpenRouter authentication did not complete successfully.")
         # Fall through to the final error message
-
     return False
 
 
@@ -243,7 +239,6 @@ def start_openrouter_oauth_flow(io, analytics):
                         b"You can close this browser tab.</p></body></html>"
                     )
                     # Signal the main thread to shut down the server
-                    # Signal the main thread to shut down the server
                     shutdown_server.set()
                 else:
                     # Redirect to aider website if 'code' is missing (e.g., user visited manually)
@@ -380,49 +375,4 @@ def start_openrouter_oauth_flow(io, analytics):
     else:
         io.tool_error("Authentication with OpenRouter failed.")
         analytics.event("oauth_flow_failed", provider="openrouter", reason="code_exchange_failed")
-        return None
-
-
-# Dummy Analytics class for testing
-class DummyAnalytics:
-    def event(self, *args, **kwargs):
-        # print(f"Analytics Event: {args} {kwargs}") # Optional: print events
-        pass
-
-
-def main():
-    """Main function to test the OpenRouter OAuth flow."""
-    print("Starting OpenRouter OAuth flow test...")
-
-    # Use a real IO object for interaction
-    io = InputOutput(
-        pretty=True,
-        yes=False,
-        input_history_file=None,
-        chat_history_file=None,
-        tool_output_color="BLUE",
-        tool_error_color="RED",
-    )
-    # Use a dummy analytics object
-    analytics = DummyAnalytics()
-
-    # Ensure OPENROUTER_API_KEY is not set, to trigger the flow naturally
-    # (though start_openrouter_oauth_flow doesn't check this itself)
-    if "OPENROUTER_API_KEY" in os.environ:
-        print("Warning: OPENROUTER_API_KEY is already set in environment.")
-        # del os.environ["OPENROUTER_API_KEY"] # Optionally unset it for testing
-
-    api_key = start_openrouter_oauth_flow(io, analytics)
-
-    if api_key:
-        print("\nOAuth flow completed successfully!")
-        print(f"Obtained API Key (first 5 chars): {api_key[:5]}...")
-        # Be careful printing the key, even partially
-    else:
-        print("\nOAuth flow failed or was cancelled.")
-
-    print("\nOpenRouter OAuth flow test finished.")
-
-
-if __name__ == "__main__":
-    main()
\ No newline at end of file
+        return None
\ No newline at end of file
