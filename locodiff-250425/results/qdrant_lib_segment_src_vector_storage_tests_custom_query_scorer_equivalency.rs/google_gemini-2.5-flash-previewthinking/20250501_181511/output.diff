--- qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual)@@ -8,7 +8,7 @@ use itertools::Itertools;
 use rand::rngs::StdRng;
 use rand::seq::IteratorRandom;
-use rand::{Rng, SeedableRng};
+use rand::{rng, Rng, SeedableRng};
 use rstest::rstest;
 
 use super::utils::sampler;
@@ -25,6 +25,7 @@ use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_vector_storage_with_async_io;
 use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
+use crate::vector_storage::query::{ContextPair, ContextQuery, DiscoveryQuery, RecoQuery};
 use crate::vector_storage::tests::utils::score;
 use crate::vector_storage::vector_storage_base::VectorStorage;
 use crate::vector_storage::{VectorStorageEnum, new_raw_scorer_for_test};
@@ -32,6 +33,7 @@ const DIMS: usize = 128;
 const NUM_POINTS: usize = 600;
 const DISTANCE: Distance = Distance::Dot;
+const MAX_EXAMPLES: usize = 10;
 const SAMPLE_SIZE: usize = 100;
 const SEED: u64 = 42;
 
@@ -41,8 +43,6 @@ type Sampler<'a> = Box<dyn Iterator<Item = VectorElementType> + 'a>;
 
 type SamplerGenerator = Box<dyn for<'a> Fn(&'a mut StdRng) -> Sampler<'a>>;
-
-type WithQuantization = (QuantizationConfig, SamplerGenerator);
 
 fn random_query<R: Rng + ?Sized>(
     query_variant: &QueryVariant,
@@ -207,7 +207,7 @@         };
 
         let points =
-            (0..other_storage.total_vector_count() as _).choose_multiple(&mut rng, SAMPLE_SIZE);
+            (0..other_storage.total_vector_count() as PointOffsetType).choose_multiple(&mut rng, SAMPLE_SIZE);
 
         let raw_scores = score(&*raw_scorer, &points);
         let other_scores = score(&*other_scorer, &points);
@@ -228,15 +228,13 @@ 
             let raw_top: HashSet<_> = raw_scores
                 .iter()
-                .sorted()
-                .rev()
+                .sorted_by(|a, b| b.score.partial_cmp(&a.score).unwrap())
                 .take(top)
                 .map(|p| p.idx)
                 .collect();
             let other_top: HashSet<_> = other_scores
                 .iter()
-                .sorted()
-                .rev()
+                .sorted_by(|a, b| b.score.partial_cmp(&a.score).unwrap())
                 .take(top)
                 .map(|p| p.idx)
                 .collect();
@@ -251,6 +249,9 @@                 only {intersection} of {top} top results are shared",
             );
         }
+
+        raw_scorer.take_hardware_counter().discard_results();
+        other_scorer.take_hardware_counter().discard_results();
     }
 
     Ok(())
