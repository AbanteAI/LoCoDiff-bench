
index 06f94630..ef339c76 100644
--- a/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected):tmp/tmpgulbrd0m_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual):tmp/tmpaau2x2e__actual.txt	
@@ -1,4 +1,3 @@
-use std::collections::HashSet;
 use std::path::Path;
 use std::sync::atomic::AtomicBool;
 use std::{error, result};
@@ -21,7 +20,6 @@ use crate::types::{
     BinaryQuantizationConfig, Distance, ProductQuantizationConfig, QuantizationConfig,
     ScalarQuantizationConfig,
 };
-#[cfg(target_os = "linux")]
 use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_vector_storage_with_async_io;
 use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
@@ -177,6 +175,7 @@ fn scoring_equivalency(
     } else {
         None
     };
+    let quantized_vectors = quantized_vectors.as_ref().map(|q| q.borrow());
 
     let attempts = 50;
     for i in 0..attempts {
@@ -226,14 +225,14 @@ fn scoring_equivalency(
 
             let top = SAMPLE_SIZE / 10;
 
-            let raw_top: HashSet<_> = raw_scores
+            let raw_top: std::collections::HashSet<_> = raw_scores
                 .iter()
                 .sorted()
                 .rev()
                 .take(top)
                 .map(|p| p.idx)
                 .collect();
-            let other_top: HashSet<_> = other_scores
+            let other_top: std::collections::HashSet<_> = other_scores
                 .iter()
                 .sorted()
                 .rev()
