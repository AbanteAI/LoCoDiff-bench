
index 06f94630..631ebc95 100644
--- a/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected):tmp/tmpkhqbxrq__expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual):tmp/tmplb17xgfv_actual.txt	
@@ -22,7 +22,7 @@ use crate::types::{
     ScalarQuantizationConfig,
 };
 #[cfg(target_os = "linux")]
-use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_vector_storage_with_async_io;
+use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_dense_vector_storage_with_async_io;
 use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
 use crate::vector_storage::tests::utils::score;
@@ -39,21 +39,9 @@ type Result<T, E = Error> = result::Result<T, E>;
 type Error = Box<dyn error::Error>;
 
 type Sampler<'a> = Box<dyn Iterator<Item = VectorElementType> + 'a>;
-
 type SamplerGenerator = Box<dyn for<'a> Fn(&'a mut StdRng) -> Sampler<'a>>;
-
 type WithQuantization = (QuantizationConfig, SamplerGenerator);
 
-fn random_query<R: Rng + ?Sized>(
-    query_variant: &QueryVariant,
-    rng: &mut R,
-    gen_sampler: &dyn Fn(&mut R) -> Sampler,
-) -> QueryVector {
-    crate::fixtures::query_fixtures::random_query(query_variant, rng, |rng| {
-        gen_sampler(rng).take(DIMS).collect_vec().into()
-    })
-}
-
 fn ram_storage(dir: &Path) -> VectorStorageEnum {
     open_simple_dense_vector_storage(
         rocksdb_wrapper::open_db(dir, &[rocksdb_wrapper::DB_VECTOR_CF]).unwrap(),
@@ -66,8 +54,8 @@ fn ram_storage(dir: &Path) -> VectorStorageEnum {
 }
 
 #[cfg(target_os = "linux")]
-fn async_memmap_storage(dir: &std::path::Path) -> VectorStorageEnum {
-    open_memmap_vector_storage_with_async_io(dir, DIMS, DISTANCE, true).unwrap()
+fn async_memmap_storage(dir: &Path) -> VectorStorageEnum {
+    open_memmap_dense_vector_storage_with_async_io(dir, DIMS, DISTANCE, true).unwrap()
 }
 
 fn scalar_u8() -> WithQuantization {
@@ -79,7 +67,7 @@ fn scalar_u8() -> WithQuantization {
     .into();
 
     let sampler: SamplerGenerator = Box::new(|rng: &mut StdRng| {
-        Box::new(rng.sample_iter(rand_distr::Normal::new(0.0f32, 8.0).unwrap()))
+        Box::new(rng.sample_iter(rand_distr::Normal::new(0.0, 8.0).unwrap()))
     });
 
     (config, sampler)
@@ -116,7 +104,7 @@ fn binary() -> WithQuantization {
 
 fn scoring_equivalency(
     query_variant: QueryVariant,
-    other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
+    other_storage: impl FnOnce(&Path) -> VectorStorageEnum,
     with_quantization: Option<WithQuantization>,
 ) -> Result<()> {
     let (quant_config, quant_sampler) = with_quantization
@@ -124,7 +112,6 @@ fn scoring_equivalency(
         .unwrap_or_default();
 
     let raw_dir = tempfile::Builder::new().prefix("raw-storage").tempdir()?;
-
     let db = rocksdb_wrapper::open_db(raw_dir.path(), &[rocksdb_wrapper::DB_VECTOR_CF])?;
 
     let mut raw_storage = open_simple_dense_vector_storage(
@@ -136,25 +123,17 @@ fn scoring_equivalency(
     )?;
 
     let mut rng = StdRng::seed_from_u64(SEED);
-    let gen_sampler = quant_sampler.unwrap_or_else(|| Box::new(|rng| Box::new(sampler(rng))));
-
-    super::utils::insert_distributed_vectors(
-        DIMS,
-        &mut raw_storage,
-        NUM_POINTS,
-        &mut gen_sampler(&mut rng.clone()),
-    )?;
+    let mut sampler = if let Some(gen) = quant_sampler {
+        gen(&mut rng)
+    } else {
+        Box::new(sampler(rng.clone()))
+    };
 
+    super::utils::insert_distributed_vectors(DIMS, &mut raw_storage, NUM_POINTS, &mut sampler)?;
     let mut id_tracker = FixtureIdTracker::new(NUM_POINTS);
-    super::utils::delete_random_vectors(
-        &mut rng,
-        &mut raw_storage,
-        &mut id_tracker,
-        NUM_POINTS / 10,
-    )?;
+    super::utils::delete_random_vectors(&mut rng, &mut raw_storage, &mut id_tracker, NUM_POINTS / 10)?;
 
     let other_dir = tempfile::Builder::new().prefix("other-storage").tempdir()?;
-
     let mut other_storage = other_storage(other_dir.path());
 
     let mut iter = (0..NUM_POINTS).map(|i| {
@@ -180,12 +159,15 @@ fn scoring_equivalency(
 
     let attempts = 50;
     for i in 0..attempts {
-        let query = random_query(&query_variant, &mut rng, &gen_sampler);
+        let query = crate::fixtures::query_fixtures::random_query(&query_variant, &mut rng, |rng| {
+            sampler.take(DIMS).collect_vec().into()
+        });
 
         let raw_scorer = new_raw_scorer_for_test(
             query.clone(),
             &raw_storage,
             id_tracker.deleted_point_bitslice(),
+            HardwareCounterCell::new(),
         )
         .unwrap();
 
@@ -202,30 +184,24 @@ fn scoring_equivalency(
                 query.clone(),
                 &other_storage,
                 id_tracker.deleted_point_bitslice(),
+                HardwareCounterCell::new(),
             )
             .unwrap(),
         };
 
-        let points =
-            (0..other_storage.total_vector_count() as _).choose_multiple(&mut rng, SAMPLE_SIZE);
+        let points = (0..other_storage.total_vector_count() as _)
+            .choose_multiple(&mut rng, SAMPLE_SIZE);
 
         let raw_scores = score(&*raw_scorer, &points);
         let other_scores = score(&*other_scorer, &points);
 
-        // Compare scores
         if quantized_vectors.is_none() {
-            // both calculations are done on raw vectors, so score should be exactly the same
             assert_eq!(
                 raw_scores, other_scores,
                 "Scorer results are not equal, attempt: {i}, query: {query:?}"
             );
         } else {
-            // Quantization is used for the other storage, so score should be similar
-            // but not necessarily the exact same. Recommend query has a step function,
-            // so small differences in similarities can lead to very different scores
-
             let top = SAMPLE_SIZE / 10;
-
             let raw_top: HashSet<_> = raw_scores
                 .iter()
                 .sorted()
@@ -240,17 +216,19 @@ fn scoring_equivalency(
                 .take(top)
                 .map(|p| p.idx)
                 .collect();
-
             let intersection = raw_top.intersection(&other_top).count();
 
             assert!(
-                (intersection as f32 / top as f32) >= 0.7, // at least 70% of top 10% results should be shared
-                "Top results from scorers are not similar, attempt {i}:
-                top raw: {raw_top:?},
-                top other: {other_top:?}
-                only {intersection} of {top} top results are shared",
+                (intersection as f32 / top as f32) >= 0.7,
+                "Top results from scorers are not similar, attempt {i}:\n\
+                 top raw: {raw_top:?},\n\
+                 top other: {other_top:?}\n\
+                 only {intersection} of {top} top results are shared",
             );
         }
+
+        raw_scorer.take_hardware_counter().discard_results();
+        other_scorer.take_hardware_counter().discard_results();
     }
 
     Ok(())
@@ -265,7 +243,7 @@ fn compare_scoring_equivalency(
         QueryVariant::Context
     )]
     query_variant: QueryVariant,
-    #[values(ram_storage)] other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
+    #[values(ram_storage)] other_storage: impl FnOnce(&Path) -> VectorStorageEnum,
     #[values(None, Some(product_x4()), Some(scalar_u8()), Some(binary()))]
     quantization_config: Option<WithQuantization>,
 ) -> Result<()> {
@@ -282,7 +260,7 @@ fn async_compare_scoring_equivalency(
         QueryVariant::Context
     )]
     query_variant: QueryVariant,
-    #[values(async_memmap_storage)] other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
+    #[values(async_memmap_storage)] other_storage: impl FnOnce(&Path) -> VectorStorageEnum,
 ) -> Result<()> {
     scoring_equivalency(query_variant, other_storage, None)
 }
\ No newline at end of file
