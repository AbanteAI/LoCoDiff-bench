--- qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual)@@ -27,7 +27,7 @@ use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
 use crate::vector_storage::tests::utils::score;
 use crate::vector_storage::vector_storage_base::VectorStorage;
-use crate::vector_storage::{VectorStorageEnum, new_raw_scorer_for_test};
+use crate::vector_storage::{new_raw_scorer_for_test, VectorStorageEnum};
 
 const DIMS: usize = 128;
 const NUM_POINTS: usize = 600;
@@ -39,18 +39,16 @@ type Error = Box<dyn error::Error>;
 
 type Sampler<'a> = Box<dyn Iterator<Item = VectorElementType> + 'a>;
-
 type SamplerGenerator = Box<dyn for<'a> Fn(&'a mut StdRng) -> Sampler<'a>>;
-
 type WithQuantization = (QuantizationConfig, SamplerGenerator);
 
-fn random_query<R: Rng + ?Sized>(
+fn random_query(
     query_variant: &QueryVariant,
-    rng: &mut R,
-    gen_sampler: &dyn Fn(&mut R) -> Sampler,
+    rng: &mut StdRng,
+    gen_sampler: &SamplerGenerator,
 ) -> QueryVector {
-    crate::fixtures::query_fixtures::random_query(query_variant, rng, |rng| {
-        gen_sampler(rng).take(DIMS).collect_vec().into()
+    crate::fixtures::query_fixtures::random_query(query_variant, rng, |rng_std| {
+        gen_sampler(rng_std).take(DIMS).collect_vec().into()
     })
 }
 
@@ -154,7 +152,6 @@     )?;
 
     let other_dir = tempfile::Builder::new().prefix("other-storage").tempdir()?;
-
     let mut other_storage = other_storage(other_dir.path());
 
     let mut iter = (0..NUM_POINTS).map(|i| {
@@ -177,6 +174,7 @@     } else {
         None
     };
+    let quantized_vectors = quantized_vectors.as_ref().map(|q| q.borrow());
 
     let attempts = 50;
     for i in 0..attempts {
@@ -186,6 +184,7 @@             query.clone(),
             &raw_storage,
             id_tracker.deleted_point_bitslice(),
+            HardwareCounterCell::new(),
         )
         .unwrap();
 
@@ -202,6 +201,7 @@                 query.clone(),
                 &other_storage,
                 id_tracker.deleted_point_bitslice(),
+                HardwareCounterCell::new(),
             )
             .unwrap(),
         };
@@ -212,18 +212,12 @@         let raw_scores = score(&*raw_scorer, &points);
         let other_scores = score(&*other_scorer, &points);
 
-        // Compare scores
         if quantized_vectors.is_none() {
-            // both calculations are done on raw vectors, so score should be exactly the same
             assert_eq!(
                 raw_scores, other_scores,
                 "Scorer results are not equal, attempt: {i}, query: {query:?}"
             );
         } else {
-            // Quantization is used for the other storage, so score should be similar
-            // but not necessarily the exact same. Recommend query has a step function,
-            // so small differences in similarities can lead to very different scores
-
             let top = SAMPLE_SIZE / 10;
 
             let raw_top: HashSet<_> = raw_scores
@@ -244,7 +238,7 @@             let intersection = raw_top.intersection(&other_top).count();
 
             assert!(
-                (intersection as f32 / top as f32) >= 0.7, // at least 70% of top 10% results should be shared
+                (intersection as f32 / top as f32) >= 0.7,
                 "Top results from scorers are not similar, attempt {i}:
                 top raw: {raw_top:?},
                 top other: {other_top:?}
