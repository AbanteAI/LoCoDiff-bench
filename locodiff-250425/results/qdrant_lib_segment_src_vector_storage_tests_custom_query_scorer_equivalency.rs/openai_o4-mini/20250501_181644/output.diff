--- qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual)@@ -3,8 +3,8 @@ use std::sync::atomic::AtomicBool;
 use std::{error, result};
 
+use common::types::PointOffsetType;
 use common::counter::hardware_counter::HardwareCounterCell;
-use common::types::PointOffsetType;
 use itertools::Itertools;
 use rand::rngs::StdRng;
 use rand::seq::IteratorRandom;
@@ -21,7 +21,6 @@     BinaryQuantizationConfig, Distance, ProductQuantizationConfig, QuantizationConfig,
     ScalarQuantizationConfig,
 };
-#[cfg(target_os = "linux")]
 use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_vector_storage_with_async_io;
 use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
@@ -39,15 +38,13 @@ type Error = Box<dyn error::Error>;
 
 type Sampler<'a> = Box<dyn Iterator<Item = VectorElementType> + 'a>;
-
 type SamplerGenerator = Box<dyn for<'a> Fn(&'a mut StdRng) -> Sampler<'a>>;
-
 type WithQuantization = (QuantizationConfig, SamplerGenerator);
 
 fn random_query<R: Rng + ?Sized>(
     query_variant: &QueryVariant,
     rng: &mut R,
-    gen_sampler: &dyn Fn(&mut R) -> Sampler,
+    gen_sampler: &dyn Fn(&mut R) -> Sampler<'_>,
 ) -> QueryVector {
     crate::fixtures::query_fixtures::random_query(query_variant, rng, |rng| {
         gen_sampler(rng).take(DIMS).collect_vec().into()
@@ -117,14 +114,13 @@ fn scoring_equivalency(
     query_variant: QueryVariant,
     other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
-    with_quantization: Option<WithQuantization>,
+    quantization_config: Option<WithQuantization>,
 ) -> Result<()> {
-    let (quant_config, quant_sampler) = with_quantization
+    let (quant_config, quant_sampler) = quantization_config
         .map(|v| (Some(v.0), Some(v.1)))
         .unwrap_or_default();
 
     let raw_dir = tempfile::Builder::new().prefix("raw-storage").tempdir()?;
-
     let db = rocksdb_wrapper::open_db(raw_dir.path(), &[rocksdb_wrapper::DB_VECTOR_CF])?;
 
     let mut raw_storage = open_simple_dense_vector_storage(
@@ -136,7 +132,8 @@     )?;
 
     let mut rng = StdRng::seed_from_u64(SEED);
-    let gen_sampler = quant_sampler.unwrap_or_else(|| Box::new(|rng| Box::new(sampler(rng))));
+    let gen_sampler =
+        quant_sampler.unwrap_or_else(|| Box::new(|rng: &mut StdRng| Box::new(sampler(rng.clone()))));
 
     super::utils::insert_distributed_vectors(
         DIMS,
@@ -154,7 +151,6 @@     )?;
 
     let other_dir = tempfile::Builder::new().prefix("other-storage").tempdir()?;
-
     let mut other_storage = other_storage(other_dir.path());
 
     let mut iter = (0..NUM_POINTS).map(|i| {
@@ -177,6 +173,7 @@     } else {
         None
     };
+    let quantized_vectors = quantized_vectors.as_ref().map(|q| q.borrow());
 
     let attempts = 50;
     for i in 0..attempts {
@@ -186,6 +183,7 @@             query.clone(),
             &raw_storage,
             id_tracker.deleted_point_bitslice(),
+            HardwareCounterCell::new(),
         )
         .unwrap();
 
@@ -202,30 +200,24 @@                 query.clone(),
                 &other_storage,
                 id_tracker.deleted_point_bitslice(),
+                HardwareCounterCell::new(),
             )
             .unwrap(),
         };
 
-        let points =
-            (0..other_storage.total_vector_count() as _).choose_multiple(&mut rng, SAMPLE_SIZE);
+        let points = (0..other_storage.total_vector_count() as _)
+            .choose_multiple(&mut rng, SAMPLE_SIZE);
 
         let raw_scores = score(&*raw_scorer, &points);
         let other_scores = score(&*other_scorer, &points);
 
-        // Compare scores
         if quantized_vectors.is_none() {
-            // both calculations are done on raw vectors, so score should be exactly the same
             assert_eq!(
                 raw_scores, other_scores,
                 "Scorer results are not equal, attempt: {i}, query: {query:?}"
             );
         } else {
-            // Quantization is used for the other storage, so score should be similar
-            // but not necessarily the exact same. Recommend query has a step function,
-            // so small differences in similarities can lead to very different scores
-
             let top = SAMPLE_SIZE / 10;
-
             let raw_top: HashSet<_> = raw_scores
                 .iter()
                 .sorted()
@@ -240,11 +232,9 @@                 .take(top)
                 .map(|p| p.idx)
                 .collect();
-
             let intersection = raw_top.intersection(&other_top).count();
-
             assert!(
-                (intersection as f32 / top as f32) >= 0.7, // at least 70% of top 10% results should be shared
+                (intersection as f32 / top as f32) >= 0.7,
                 "Top results from scorers are not similar, attempt {i}:
                 top raw: {raw_top:?},
                 top other: {other_top:?}
@@ -265,7 +255,8 @@         QueryVariant::Context
     )]
     query_variant: QueryVariant,
-    #[values(ram_storage)] other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
+    #[values(ram_storage)]
+    other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
     #[values(None, Some(product_x4()), Some(scalar_u8()), Some(binary()))]
     quantization_config: Option<WithQuantization>,
 ) -> Result<()> {
@@ -282,7 +273,8 @@         QueryVariant::Context
     )]
     query_variant: QueryVariant,
-    #[values(async_memmap_storage)] other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
+    #[values(async_memmap_storage)]
+    other_storage: impl FnOnce(&std::path::Path) -> VectorStorageEnum,
 ) -> Result<()> {
     scoring_equivalency(query_variant, other_storage, None)
 }