--- qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual)@@ -61,8 +61,7 @@         DIMS,
         DISTANCE,
         &AtomicBool::new(false),
-    )
-    .unwrap()
+    ).unwrap()
 }
 
 #[cfg(target_os = "linux")]
@@ -75,8 +74,7 @@         r#type: crate::types::ScalarType::Int8,
         quantile: Some(0.5),
         always_ram: Some(true),
-    }
-    .into();
+    }.into();
 
     let sampler: SamplerGenerator = Box::new(|rng: &mut StdRng| {
         Box::new(rng.sample_iter(rand_distr::Normal::new(0.0f32, 8.0).unwrap()))
@@ -89,8 +87,7 @@     let config = ProductQuantizationConfig {
         compression: crate::types::CompressionRatio::X4,
         always_ram: Some(true),
-    }
-    .into();
+    }.into();
 
     let sampler: SamplerGenerator =
         Box::new(|rng: &mut StdRng| Box::new(rng.sample_iter(rand::distr::StandardUniform)));
@@ -101,8 +98,7 @@ fn binary() -> WithQuantization {
     let config = BinaryQuantizationConfig {
         always_ram: Some(true),
-    }
-    .into();
+    }.into();
 
     let sampler: SamplerGenerator = Box::new(|rng: &mut StdRng| {
         Box::new(
@@ -121,7 +117,7 @@ ) -> Result<()> {
     let (quant_config, quant_sampler) = with_quantization
         .map(|v| (Some(v.0), Some(v.1)))
-        .unwrap_or_default();
+        .unwrap_or((None, None));
 
     let raw_dir = tempfile::Builder::new().prefix("raw-storage").tempdir()?;
 
@@ -147,10 +143,11 @@ 
     let mut id_tracker = FixtureIdTracker::new(NUM_POINTS);
     super::utils::delete_random_vectors(
+        DIMS,
+        &mut raw_storage,
+        NUM_POINTS / 10,
+        &mut id_tracker,
         &mut rng,
-        &mut raw_storage,
-        &mut id_tracker,
-        NUM_POINTS / 10,
     )?;
 
     let other_dir = tempfile::Builder::new().prefix("other-storage").tempdir()?;
@@ -186,8 +183,8 @@             query.clone(),
             &raw_storage,
             id_tracker.deleted_point_bitslice(),
-        )
-        .unwrap();
+            HardwareCounterCell::new(),
+        ).unwrap();
 
         let other_scorer = match &quantized_vectors {
             Some(quantized_storage) => quantized_storage
@@ -202,15 +199,15 @@                 query.clone(),
                 &other_storage,
                 id_tracker.deleted_point_bitslice(),
-            )
-            .unwrap(),
+                HardwareCounterCell::new(),
+            ).unwrap(),
         };
 
         let points =
             (0..other_storage.total_vector_count() as _).choose_multiple(&mut rng, SAMPLE_SIZE);
 
-        let raw_scores = score(&*raw_scorer, &points);
-        let other_scores = score(&*other_scorer, &points);
+        let raw_scores = score(&raw_scorer, &points);
+        let other_scores = score(&other_scorer, &points);
 
         // Compare scores
         if quantized_vectors.is_none() {
