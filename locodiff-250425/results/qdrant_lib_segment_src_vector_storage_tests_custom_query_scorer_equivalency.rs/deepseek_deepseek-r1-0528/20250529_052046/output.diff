
index 06f94630e..af0ccb7a8 100644
--- a/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_expectedoutput.txt (expected):tmp/tmpsfga72p6_expected.txt	
+++ b/qdrant_lib_segment_src_vector_storage_tests_custom_query_scorer_equivalency.rs_extracted.txt (actual):tmp/tmplvr8fvoq_actual.txt	
@@ -8,7 +8,8 @@ use common::types::PointOffsetType;
 use itertools::Itertools;
 use rand::rngs::StdRng;
 use rand::seq::IteratorRandom;
-use rand::{Rng, SeedableRng};
+use rand::Rng;
+use rand::SeedableRng;
 use rstest::rstest;
 
 use super::utils::sampler;
@@ -25,9 +26,10 @@ use crate::types::{
 use crate::vector_storage::dense::memmap_dense_vector_storage::open_memmap_vector_storage_with_async_io;
 use crate::vector_storage::dense::simple_dense_vector_storage::open_simple_dense_vector_storage;
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
+use crate::vector_storage::query::{ContextPair, ContextQuery, DiscoveryQuery, RecoQuery};
 use crate::vector_storage::tests::utils::score;
 use crate::vector_storage::vector_storage_base::VectorStorage;
-use crate::vector_storage::{VectorStorageEnum, new_raw_scorer_for_test};
+use crate::vector_storage::{new_raw_scorer_for_test, VectorStorageEnum};
 
 const DIMS: usize = 128;
 const NUM_POINTS: usize = 600;
@@ -39,15 +41,14 @@ type Result<T, E = Error> = result::Result<T, E>;
 type Error = Box<dyn error::Error>;
 
 type Sampler<'a> = Box<dyn Iterator<Item = VectorElementType> + 'a>;
-
 type SamplerGenerator = Box<dyn for<'a> Fn(&'a mut StdRng) -> Sampler<'a>>;
 
 type WithQuantization = (QuantizationConfig, SamplerGenerator);
 
-fn random_query<R: Rng + ?Sized>(
+fn random_query(
     query_variant: &QueryVariant,
-    rng: &mut R,
-    gen_sampler: &dyn Fn(&mut R) -> Sampler,
+    rng: &mut StdRng,
+    gen_sampler: &dyn Fn(&mut StdRng) -> Sampler,
 ) -> QueryVector {
     crate::fixtures::query_fixtures::random_query(query_variant, rng, |rng| {
         gen_sampler(rng).take(DIMS).collect_vec().into()
@@ -66,8 +67,8 @@ fn ram_storage(dir: &Path) -> VectorStorageEnum {
 }
 
 #[cfg(target_os = "linux")]
-fn async_memmap_storage(dir: &std::path::Path) -> VectorStorageEnum {
-    open_memmap_vector_storage_with_async_io(dir, DIMS, DISTANCE, true).unwrap()
+fn async_memmap_storage(_dir: &std::path::Path) -> VectorStorageEnum {
+    unimplemented!()
 }
 
 fn scalar_u8() -> WithQuantization {
@@ -78,11 +79,11 @@ fn scalar_u8() -> WithQuantization {
     }
     .into();
 
-    let sampler: SamplerGenerator = Box::new(|rng: &mut StdRng| {
+    let sampler_gen = Box::new(|rng: &mut StdRng| {
         Box::new(rng.sample_iter(rand_distr::Normal::new(0.0f32, 8.0).unwrap()))
     });
 
-    (config, sampler)
+    (config, sampler_gen)
 }
 
 fn product_x4() -> WithQuantization {
@@ -92,10 +93,9 @@ fn product_x4() -> WithQuantization {
     }
     .into();
 
-    let sampler: SamplerGenerator =
-        Box::new(|rng: &mut StdRng| Box::new(rng.sample_iter(rand::distr::StandardUniform)));
+    let sampler_gen = Box::new(|rng: &mut StdRng| Box::new(rng.sample_iter(rand::distr::StandardUniform)));
 
-    (config, sampler)
+    (config, sampler_gen)
 }
 
 fn binary() -> WithQuantization {
@@ -104,14 +104,14 @@ fn binary() -> WithQuantization {
     }
     .into();
 
-    let sampler: SamplerGenerator = Box::new(|rng: &mut StdRng| {
+    let sampler_gen = Box::new(|rng: &mut StdRng| {
         Box::new(
             rng.sample_iter(rand::distr::Uniform::new_inclusive(-1.0, 1.0).unwrap())
                 .map(|x| f32::from(x as u8)),
         )
     });
 
-    (config, sampler)
+    (config, sampler_gen)
 }
 
 fn scoring_equivalency(
@@ -206,26 +206,20 @@ fn scoring_equivalency(
             .unwrap(),
         };
 
-        let points =
-            (0..other_storage.total_vector_count() as _).choose_multiple(&mut rng, SAMPLE_SIZE);
+        let points = (0..other_storage.total_vector_count() as u32)
+            .choose_multiple(&mut rng, SAMPLE_SIZE);
 
-        let raw_scores = score(&*raw_scorer, &points);
-        let other_scores = score(&*other_scorer, &points);
+        let raw_scores = score(&*raw_scorer, &points)?;
+        let other_scores = score(&*other_scorer, &points)?;
 
-        // Compare scores
         if quantized_vectors.is_none() {
-            // both calculations are done on raw vectors, so score should be exactly the same
             assert_eq!(
                 raw_scores, other_scores,
-                "Scorer results are not equal, attempt: {i}, query: {query:?}"
+                "Scorer results are not equal, attempt: {}, query: {:?}",
+                i, query
             );
         } else {
-            // Quantization is used for the other storage, so score should be similar
-            // but not necessarily the exact same. Recommend query has a step function,
-            // so small differences in similarities can lead to very different scores
-
             let top = SAMPLE_SIZE / 10;
-
             let raw_top: HashSet<_> = raw_scores
                 .iter()
                 .sorted()
@@ -242,9 +236,8 @@ fn scoring_equivalency(
                 .collect();
 
             let intersection = raw_top.intersection(&other_top).count();
-
             assert!(
-                (intersection as f32 / top as f32) >= 0.7, // at least 70% of top 10% results should be shared
+                (intersection as f32 / top as f32) >= 0.7,
                 "Top results from scorers are not similar, attempt {i}:
                 top raw: {raw_top:?},
                 top other: {other_top:?}
