
index 012de67c..f4b7dbad 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmpdjvnfwqk_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmp5chz1km5_actual.txt	
@@ -1,3 +1,5 @@
+// TODO: Remove when we release the next version and integrate the immutable id tracker
+#![allow(dead_code)]
 use std::fs::File;
 use std::io::{BufReader, BufWriter, Read, Write};
 use std::mem::{size_of, size_of_val};
@@ -13,17 +15,17 @@ use memory::mmap_ops::{create_and_ensure_length, open_write_mmap};
 use memory::mmap_type::{MmapBitSlice, MmapSlice};
 use uuid::Uuid;
 
-use crate::common::Flusher;
 use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::mmap_slice_buffered_update_wrapper::MmapSliceBufferedUpdateWrapper;
 use crate::common::operation_error::{OperationError, OperationResult};
-use crate::id_tracker::IdTracker;
+use crate::common::Flusher;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::compressed::external_to_internal::CompressedExternalToInternal;
 use crate::id_tracker::compressed::internal_to_external::CompressedInternalToExternal;
 use crate::id_tracker::compressed::versions_store::CompressedVersions;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
 use crate::id_tracker::point_mappings::FileEndianess;
+use crate::id_tracker::IdTracker;
 use crate::types::{ExtendedPointId, PointIdType, SeqNumberType};
 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
@@ -99,8 +101,6 @@ impl ImmutableIdTracker {
         for i in 0..len {
             let (internal_id, external_id) = Self::read_entry(&mut reader)?;
 
-            // Need to push this regardless of point deletion as the vecs index represents the internal id
-            // which would become wrong if we leave out entries.
             if internal_to_external.len() <= internal_id as usize {
                 internal_to_external.resize(internal_id as usize + 1, PointIdType::NumId(0));
             }
@@ -158,11 +158,11 @@ impl ImmutableIdTracker {
             }
             Some(ExternalIdType::Number) => {
                 let num = reader.read_u64::<FileEndianess>()?;
-                PointIdType::NumId(num)
+                ExtendedPointId::NumId(num)
             }
             Some(ExternalIdType::Uuid) => {
                 let uuid_u128 = reader.read_u128::<FileEndianess>()?;
-                PointIdType::Uuid(Uuid::from_u128_le(uuid_u128))
+                ExtendedPointId::Uuid(Uuid::from_u128_le(uuid_u128))
             }
         };
 
@@ -170,7 +170,7 @@ impl ImmutableIdTracker {
         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -178,7 +178,7 @@ impl ImmutableIdTracker {
     /// | Header (list length: u64) | List of entries |
     /// +---------------------------+-----------------+
     ///
-    /// A single list entry:
+    /// A single entry:
     /// +-----------------+-----------------------+------------------+
     /// | PointIdType: u8 | Number/UUID: u64/u128 | Internal ID: u32 |
     /// +-----------------+-----------------------+------------------+
@@ -310,12 +310,11 @@ impl ImmutableIdTracker {
 
         internal_to_version_wrapper[..internal_to_version.len()]
             .copy_from_slice(internal_to_version);
-        let internal_to_version = CompressedVersions::from_slice(&internal_to_version_wrapper);
 
-        debug_assert_eq!(internal_to_version.len(), mappings.total_point_count());
+        let internal_to_version =
+            CompressedVersions::from_slice(&internal_to_version_wrapper);
 
-        let internal_to_version_wrapper =
-            MmapSliceBufferedUpdateWrapper::new(internal_to_version_wrapper);
+        debug_assert_eq!(internal_to_version.len(), mappings.total_point_count());
 
         // Write mappings to disk.
         let file = File::create(Self::mappings_file_path(path))?;
@@ -323,7 +322,7 @@ impl ImmutableIdTracker {
         Self::store_mapping(&mappings, writer)?;
         file.sync_all()?;
 
-        deleted_wrapper.flusher()()?;
+        deleted_wrapper.flusher()?;
         internal_to_version_wrapper.flusher()()?;
 
         Ok(Self {
@@ -343,7 +342,7 @@ impl ImmutableIdTracker {
         base.join(VERSION_MAPPING_FILE_NAME)
     }
 
-    pub(crate) fn mappings_file_path(base: &Path) -> PathBuf {
+    fn mappings_file_path(base: &Path) -> PathBuf {
         base.join(MAPPINGS_FILE_NAME)
     }
 }
@@ -472,7 +471,7 @@ impl IdTracker for ImmutableIdTracker {
     fn cleanup_versions(&mut self) -> OperationResult<()> {
         let mut to_remove = Vec::new();
         for internal_id in self.iter_internal() {
-            if self.internal_version(internal_id).is_none() {
+            if !self.internal_to_version.has(internal_id) {
                 if let Some(external_id) = self.external_id(internal_id) {
                     to_remove.push(external_id);
                 } else {
@@ -504,8 +503,8 @@ pub(super) mod test {
     use std::collections::{HashMap, HashSet};
 
     use itertools::Itertools;
-    use rand::Rng;
     use rand::prelude::*;
+    use rand::Rng;
     use tempfile::Builder;
     use uuid::Uuid;
 
@@ -517,8 +516,6 @@ pub(super) mod test {
 
     #[test]
     fn test_iterator() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-
         let mut id_tracker = InMemoryIdTracker::new();
 
         id_tracker.set_link(200.into(), 0).unwrap();
@@ -532,6 +529,7 @@ pub(super) mod test {
         id_tracker.set_link(177.into(), 8).unwrap();
         id_tracker.set_link(118.into(), 9).unwrap();
 
+        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
         let id_tracker =
             ImmutableIdTracker::from_in_memory_tracker(id_tracker, dir.path()).unwrap();
 
@@ -560,6 +558,68 @@ pub(super) mod test {
         PointIdType::Uuid(Uuid::from_u128(971_u128)),
     ];
 
+    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
+        let mut id_tracker = InMemoryIdTracker::new();
+
+        for value in TEST_POINTS.iter() {
+            let internal_id = id_tracker.total_point_count() as PointOffsetType;
+            id_tracker.set_link(*value, internal_id).unwrap();
+            id_tracker
+                .set_internal_version(internal_id, DEFAULT_VERSION)
+                .unwrap()
+        }
+
+        id_tracker
+    }
+
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
+    }
+
+    #[test]
+    fn test_id_tracker_equal() {
+        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
+
+        let immutable_id_tracker_dir = Builder::new()
+            .prefix("storage_dir_immutable")
+            .tempdir()
+            .unwrap();
+        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
+
+        assert_eq!(
+            in_memory_id_tracker.available_point_count(),
+            immutable_id_tracker.available_point_count()
+        );
+        assert_eq!(
+            in_memory_id_tracker.total_point_count(),
+            immutable_id_tracker.total_point_count()
+        );
+
+        for (internal, external) in TEST_POINTS.iter().enumerate() {
+            let internal = internal as PointOffsetType;
+
+            assert_eq!(
+                in_memory_id_tracker.internal_id(*external),
+                immutable_id_tracker.internal_id(*external)
+            );
+
+            assert_eq!(
+                in_memory_id_tracker
+                    .internal_version(internal)
+                    .unwrap_or_default(),
+                immutable_id_tracker
+                    .internal_version(internal)
+                    .unwrap_or_default()
+            );
+
+            assert_eq!(
+                in_memory_id_tracker.external_id(internal),
+                immutable_id_tracker.external_id(internal)
+            );
+        }
+    }
+
     #[test]
     fn test_mixed_types_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -578,7 +638,7 @@ pub(super) mod test {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
         let (old_mappings, old_versions) = {
             let id_tracker = make_immutable_tracker(dir.path());
-            (id_tracker.mappings, id_tracker.internal_to_version)
+            (id_tracker.mappings.clone(), id_tracker.internal_to_version.clone())
         };
 
         let mut loaded_id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
@@ -616,6 +676,8 @@ pub(super) mod test {
             let mut custom_version = HashMap::new();
 
             for (index, point) in TEST_POINTS.iter().enumerate() {
+                let internal_id = index as PointOffsetType;
+
                 if index % 2 == 0 {
                     continue;
                 }
@@ -627,11 +689,11 @@ pub(super) mod test {
                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.gen();
                     id_tracker
-                        .set_internal_version(index as PointOffsetType, new_version)
+                        .set_internal_version(internal_id, new_version)
                         .unwrap();
-                    custom_version.insert(index as PointOffsetType, new_version);
+                    custom_version.insert(internal_id, new_version);
                 }
             }
 
@@ -666,21 +728,12 @@ pub(super) mod test {
 
             // Check that unmodified points still haven't changed.
             assert_eq!(
-                id_tracker.external_id(index as PointOffsetType),
+                id_tracker.external_id(internal_id),
                 Some(*point)
             );
         }
     }
 
-    #[test]
-    fn test_all_points_have_version() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let id_tracker = make_immutable_tracker(dir.path());
-        for i in id_tracker.iter_ids() {
-            assert!(id_tracker.internal_version(i).is_some());
-        }
-    }
-
     #[test]
     fn test_point_deletion_correctness() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -723,7 +776,7 @@ pub(super) mod test {
             id_tracker.drop(point_to_delete).unwrap();
             id_tracker.mapping_flusher()().unwrap();
             id_tracker.versions_flusher()().unwrap();
-            id_tracker.mappings
+            id_tracker.mappings.clone()
         };
 
         // Point should still be gone
@@ -733,19 +786,16 @@ pub(super) mod test {
         old_mappings
             .iter_internal_raw()
             .zip(id_tracker.mappings.iter_internal_raw())
-            .for_each(
-                |((old_internal, old_external), (new_internal, new_external))| {
-                    assert_eq!(old_internal, new_internal);
-                    assert_eq!(old_external, new_external);
-                },
-            );
+            .for_each(|((old_internal, old_external), (new_internal, new_external))| {
+                assert_eq!(old_internal, new_internal);
+                assert_eq!(old_external, new_external);
+            });
     }
 
-    /// Tests de/serializing of whole `PointMappings`.
+    /// Tests de/serializing of whole `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
         let mut buf = vec![];
 
         // Test different sized PointMappings, growing exponentially to also test large ones.
@@ -770,7 +820,7 @@ pub(super) mod test {
         }
     }
 
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
+    /// Verifies that de/serializing works properly for empty `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization_empty() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
@@ -816,68 +866,6 @@ pub(super) mod test {
 
     const DEFAULT_VERSION: SeqNumberType = 42;
 
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
-
-    #[test]
-    fn test_id_tracker_equal() {
-        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
-
-        let immutable_id_tracker_dir = Builder::new()
-            .prefix("storage_dir_immutable")
-            .tempdir()
-            .unwrap();
-        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
-
-        assert_eq!(
-            in_memory_id_tracker.available_point_count(),
-            immutable_id_tracker.available_point_count()
-        );
-        assert_eq!(
-            in_memory_id_tracker.total_point_count(),
-            immutable_id_tracker.total_point_count()
-        );
-
-        for (internal, external) in TEST_POINTS.iter().enumerate() {
-            let internal = internal as PointOffsetType;
-
-            assert_eq!(
-                in_memory_id_tracker.internal_id(*external),
-                immutable_id_tracker.internal_id(*external)
-            );
-
-            assert_eq!(
-                in_memory_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default(),
-                immutable_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default()
-            );
-
-            assert_eq!(
-                in_memory_id_tracker.external_id(internal),
-                immutable_id_tracker.external_id(internal)
-            );
-        }
-    }
-
     #[test]
     fn simple_id_tracker_vs_immutable_tracker_congruence() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -894,9 +882,9 @@ pub(super) mod test {
         for _ in 0..num_points {
             // Generate num id in range from 0 to 100
 
-            let point_id = PointIdType::NumId(rng.random_range(0..num_points as u64));
+            let point_id = PointIdType::NumId(rng.gen_range(0..num_points as u64));
 
-            let version = rng.random_range(0..1000);
+            let version = rng.gen_range(0..1000);
 
             let internal_id_mmap = id_tracker.total_point_count() as PointOffsetType;
             let internal_id_simple = simple_id_tracker.total_point_count() as PointOffsetType;
@@ -966,4 +954,13 @@ pub(super) mod test {
             );
         }
     }
+
+    #[test]
+    fn test_all_points_have_version() {
+        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
+        let id_tracker = make_immutable_tracker(dir.path());
+        for i in id_tracker.iter_ids() {
+            assert!(id_tracker.internal_version(i).is_some());
+        }
+    }
 }
\ No newline at end of file
