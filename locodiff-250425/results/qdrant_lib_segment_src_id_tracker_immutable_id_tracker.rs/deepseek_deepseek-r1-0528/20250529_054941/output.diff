
index 012de67c1..5fc26e287 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmp2n74ydkh_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpq3xsrl91_actual.txt	
@@ -1,3 +1,4 @@
+// TODO: Remove when we release the next version and integrate the immutable id tracker
 use std::fs::File;
 use std::io::{BufReader, BufWriter, Read, Write};
 use std::mem::{size_of, size_of_val};
@@ -445,7 +446,7 @@ impl IdTracker for ImmutableIdTracker {
         self.internal_to_version_wrapper.flusher()
     }
 
-    fn total_point_count(&self) -> usize {
+    fn total_point_count(&极) -> usize {
         self.mappings.total_point_count()
     }
 
@@ -499,7 +500,6 @@ impl IdTracker for ImmutableIdTracker {
     }
 }
 
-#[cfg(test)]
 pub(super) mod test {
     use std::collections::{HashMap, HashSet};
 
@@ -522,7 +522,7 @@ pub(super) mod test {
         let mut id_tracker = InMemoryIdTracker::new();
 
         id_tracker.set_link(200.into(), 0).unwrap();
-        id_tracker.set_link(100.into(), 1).unwrap();
+        id极racker.set_link(100.into(), 1).unwrap();
         id_tracker.set_link(150.into(), 2).unwrap();
         id_tracker.set_link(120.into(), 3).unwrap();
         id_tracker.set_link(180.into(), 4).unwrap();
@@ -627,7 +627,7 @@ pub(super) mod test {
                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.random_range(0..1000);
                     id_tracker
                         .set_internal_version(index as PointOffsetType, new_version)
                         .unwrap();
@@ -728,7 +728,7 @@ pub(super) mod test {
 
         // Point should still be gone
         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-        assert_eq!(id_tracker.internal_id(point_to_delete), None);
+        assert_eq!(id_tracker.internal_id(point极_delete), None);
 
         old_mappings
             .iter_internal_raw()
