--- qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual)@@ -1,6 +1,7 @@ use std::fs::File;
 use std::io::{BufReader, BufWriter, Read, Write};
 use std::mem::{size_of, size_of_val};
+use std::num::NonZeroU32;
 use std::path::{Path, PathBuf};
 
 use bitvec::prelude::BitSlice;
@@ -89,7 +90,8 @@ 
         let mut deleted = deleted.unwrap_or_else(|| BitVec::repeat(false, len));
 
-        deleted.truncate(len);
+        // Explicitly resize, as deleted might be longer due to mmap alignment
+        deleted.resize(len, false);
 
         let mut internal_to_external = CompressedInternalToExternal::with_capacity(len);
         let mut external_to_internal_num: Vec<(u64, PointOffsetType)> = Vec::new();
@@ -101,7 +103,7 @@ 
             // Need to push this regardless of point deletion as the vecs index represents the internal id
             // which would become wrong if we leave out entries.
-            if internal_to_external.len() <= internal_id as usize {
+            if (internal_to_external.len() as PointOffsetType) <= internal_id {
                 internal_to_external.resize(internal_id as usize + 1, PointIdType::NumId(0));
             }
 
@@ -170,7 +172,7 @@         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -198,7 +200,6 @@             Self::write_entry(&mut writer, internal_id, external_id)?;
         }
 
-        writer.flush()?;
         Ok(())
     }
 
@@ -308,6 +309,12 @@             )?)?
         };
 
+        debug_assert_eq!(
+            internal_to_version.len(),
+            mappings.total_point_count(),
+            "Length mismatch between internal_to_version and mappings"
+        );
+
         internal_to_version_wrapper[..internal_to_version.len()]
             .copy_from_slice(internal_to_version);
         let internal_to_version = CompressedVersions::from_slice(&internal_to_version_wrapper);
@@ -386,7 +393,7 @@     }
 
     fn internal_id(&self, external_id: PointIdType) -> Option<PointOffsetType> {
-        self.mappings.internal_id(&external_id)
+        self.mappings.internal_id(external_id)
     }
 
     fn external_id(&self, internal_id: PointOffsetType) -> Option<PointIdType> {
@@ -512,6 +519,7 @@     use super::*;
     use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::point_mappings::PointMappings;
 
     const RAND_SEED: u64 = 42;
 
@@ -648,7 +656,7 @@             if dropped_points.contains(point) {
                 assert!(id_tracker.is_deleted_point(internal_id));
                 assert_eq!(id_tracker.external_id(internal_id), None);
-                assert!(id_tracker.mappings.internal_id(point).is_none());
+                assert!(id_tracker.mappings.internal_id(*point).is_none());
 
                 continue;
             }
@@ -730,6 +738,7 @@         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
         assert_eq!(id_tracker.internal_id(point_to_delete), None);
 
+        // Old mappings should be the same as newly loaded one.
         old_mappings
             .iter_internal_raw()
             .zip(id_tracker.mappings.iter_internal_raw())
