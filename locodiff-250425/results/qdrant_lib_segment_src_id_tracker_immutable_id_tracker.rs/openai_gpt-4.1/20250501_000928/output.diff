--- qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual)@@ -17,13 +17,13 @@ use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::mmap_slice_buffered_update_wrapper::MmapSliceBufferedUpdateWrapper;
 use crate::common::operation_error::{OperationError, OperationResult};
-use crate::id_tracker::IdTracker;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::compressed::external_to_internal::CompressedExternalToInternal;
 use crate::id_tracker::compressed::internal_to_external::CompressedInternalToExternal;
 use crate::id_tracker::compressed::versions_store::CompressedVersions;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
 use crate::id_tracker::point_mappings::FileEndianess;
+use crate::id_tracker::IdTracker;
 use crate::types::{ExtendedPointId, PointIdType, SeqNumberType};
 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
@@ -88,7 +88,6 @@         let len = reader.read_u64::<FileEndianess>()? as usize;
 
         let mut deleted = deleted.unwrap_or_else(|| BitVec::repeat(false, len));
-
         deleted.truncate(len);
 
         let mut internal_to_external = CompressedInternalToExternal::with_capacity(len);
@@ -102,7 +101,8 @@             // Need to push this regardless of point deletion as the vecs index represents the internal id
             // which would become wrong if we leave out entries.
             if internal_to_external.len() <= internal_id as usize {
-                internal_to_external.resize(internal_id as usize + 1, PointIdType::NumId(0));
+                internal_to_external
+                    .resize(internal_id as usize + 1, PointIdType::NumId(0));
             }
 
             internal_to_external.set(internal_id, external_id);
@@ -170,7 +170,7 @@         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -563,7 +563,14 @@     #[test]
     fn test_mixed_types_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let id_tracker = make_immutable_tracker(dir.path());
+        let mut id_tracker = InMemoryIdTracker::new();
+
+        for (id, value) in TEST_POINTS.iter().enumerate() {
+            id_tracker.set_link(*value, id as PointOffsetType).unwrap();
+        }
+
+        let id_tracker =
+            ImmutableIdTracker::from_in_memory_tracker(id_tracker, dir.path()).unwrap();
 
         let sorted_from_tracker = id_tracker.iter_from(None).map(|(k, _)| k).collect_vec();
 
@@ -571,6 +578,26 @@         values.sort();
 
         assert_eq!(sorted_from_tracker, values);
+    }
+
+    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
+        const DEFAULT_VERSION: SeqNumberType = 42;
+        let mut id_tracker = InMemoryIdTracker::new();
+
+        for value in TEST_POINTS.iter() {
+            let internal_id = id_tracker.total_point_count() as PointOffsetType;
+            id_tracker.set_link(*value, internal_id).unwrap();
+            id_tracker
+                .set_internal_version(internal_id, DEFAULT_VERSION)
+                .unwrap()
+        }
+
+        id_tracker
+    }
+
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
     }
 
     #[test]
@@ -606,6 +633,7 @@     /// ID tracker.
     #[test]
     fn test_store_load_mutated() {
+        const DEFAULT_VERSION: SeqNumberType = 42;
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
 
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -627,7 +655,7 @@                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.random_range(0..1000);
                     id_tracker
                         .set_internal_version(index as PointOffsetType, new_version)
                         .unwrap();
@@ -814,29 +842,9 @@         }
     }
 
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
-
     #[test]
     fn test_id_tracker_equal() {
+        const DEFAULT_VERSION: SeqNumberType = 42;
         let in_memory_id_tracker = make_in_memory_tracker_from_memory();
 
         let immutable_id_tracker_dir = Builder::new()
