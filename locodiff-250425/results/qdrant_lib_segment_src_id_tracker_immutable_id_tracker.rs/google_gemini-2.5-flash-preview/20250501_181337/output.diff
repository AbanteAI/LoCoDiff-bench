--- qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual)@@ -28,7 +28,7 @@ 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
 pub const MAPPINGS_FILE_NAME: &str = "id_tracker.mappings";
-pub const VERSION_MAPPING_FILE_NAME: &str = "id_tracker.versions";
+pub const VERSION_MAPPING_FILE_name: &str = "id_tracker.versions";
 
 #[derive(Copy, Clone)]
 #[repr(u8)]
@@ -96,7 +96,7 @@         let mut external_to_internal_uuid: Vec<(Uuid, PointOffsetType)> = Vec::new();
 
         // Deserialize the list entries
-        for i in 0..len {
+        for _ in 0..len {
             let (internal_id, external_id) = Self::read_entry(&mut reader)?;
 
             // Need to push this regardless of point deletion as the vecs index represents the internal id
@@ -107,7 +107,7 @@ 
             internal_to_external.set(internal_id, external_id);
 
-            let point_deleted = deleted.get_bit(i).unwrap_or(false);
+            let point_deleted = deleted.get_bit(internal_id as usize).unwrap_or(false);
             if point_deleted {
                 continue;
             }
@@ -275,64 +275,64 @@ 
         debug_assert!(mappings.deleted().len() <= mappings.total_point_count());
 
-        let deleted_mmap = open_write_mmap(&deleted_filepath, AdviceSetting::Global, false)?;
-        let mut deleted_new = MmapBitSlice::try_from(deleted_mmap, 0)?;
-        deleted_new[..mappings.deleted().len()].copy_from_bitslice(mappings.deleted());
-
-        for i in mappings.deleted().len()..mappings.total_point_count() {
-            deleted_new.set(i, true);
-        }
-
-        let deleted_wrapper = MmapBitSliceBufferedUpdateWrapper::new(deleted_new);
-
-        // Create mmap file for internal-to-version list
-        let version_filepath = Self::version_mapping_file_path(path);
-
-        // Amount of points without version
-        let missing_version_count = mappings
-            .total_point_count()
-            .saturating_sub(internal_to_version.len());
-
-        let missing_versions_size = missing_version_count * size_of::<SeqNumberType>();
-        let internal_to_version_size = size_of_val(internal_to_version);
-        let min_size = internal_to_version_size + missing_versions_size;
-        {
-            let version_size = mmap_size::<SeqNumberType>(min_size);
-            create_and_ensure_length(&version_filepath, version_size)?;
-        }
-        let mut internal_to_version_wrapper = unsafe {
-            MmapSlice::try_from(open_write_mmap(
+        unsafe {
+            let deleted_mmap = open_write_mmap(&deleted_filepath, AdviceSetting::Global, false)?;
+            let mut deleted_new = MmapBitSlice::try_from(deleted_mmap, 0)?;
+            deleted_new[..mappings.deleted().len()].copy_from_bitslice(mappings.deleted());
+
+            for i in mappings.deleted().len()..mappings.total_point_count() {
+                deleted_new.set(i, true);
+            }
+
+            let deleted_wrapper = MmapBitSliceBufferedUpdateWrapper::new(deleted_new);
+
+            // Create mmap file for internal-to-version list
+            let version_filepath = Self::version_mapping_file_path(path);
+
+            // Amount of points without version
+            let missing_version_count = mappings
+                .total_point_count()
+                .saturating_sub(internal_to_version.len());
+
+            let missing_versions_size = missing_version_count * size_of::<SeqNumberType>();
+            let internal_to_version_size = size_of_val(internal_to_version);
+            let min_size = internal_to_version_size + missing_versions_size;
+            {
+                let version_size = mmap_size::<SeqNumberType>(min_size);
+                create_and_ensure_length(&version_filepath, version_size)?;
+            }
+            let mut internal_to_version_wrapper = MmapSlice::try_from(open_write_mmap(
                 &version_filepath,
                 AdviceSetting::Global,
                 false,
-            )?)?
-        };
-
-        internal_to_version_wrapper[..internal_to_version.len()]
-            .copy_from_slice(internal_to_version);
-        let internal_to_version = CompressedVersions::from_slice(&internal_to_version_wrapper);
-
-        debug_assert_eq!(internal_to_version.len(), mappings.total_point_count());
-
-        let internal_to_version_wrapper =
-            MmapSliceBufferedUpdateWrapper::new(internal_to_version_wrapper);
-
-        // Write mappings to disk.
-        let file = File::create(Self::mappings_file_path(path))?;
-        let writer = BufWriter::new(&file);
-        Self::store_mapping(&mappings, writer)?;
-        file.sync_all()?;
-
-        deleted_wrapper.flusher()()?;
-        internal_to_version_wrapper.flusher()()?;
-
-        Ok(Self {
-            path: path.to_path_buf(),
-            deleted_wrapper,
-            internal_to_version_wrapper,
-            internal_to_version,
-            mappings,
-        })
+            ))?;
+
+            internal_to_version_wrapper[..internal_to_version.len()]
+                .copy_from_slice(internal_to_version);
+            let internal_to_version = CompressedVersions::from_slice(&internal_to_version_wrapper);
+
+            debug_assert_eq!(internal_to_version.len(), mappings.total_point_count());
+
+            let internal_to_version_wrapper =
+                MmapSliceBufferedUpdateWrapper::new(internal_to_version_wrapper);
+
+            // Write mappings to disk.
+            let file = File::create(Self::mappings_file_path(path))?;
+            let writer = BufWriter::new(&file);
+            Self::store_mapping(&mappings, writer)?;
+            file.sync_all()?;
+
+            deleted_wrapper.flusher()()?;
+            internal_to_version_wrapper.flusher()()?;
+
+            Ok(Self {
+                path: path.to_path_buf(),
+                deleted_wrapper,
+                internal_to_version_wrapper,
+                internal_to_version,
+                mappings,
+            })
+        }
     }
 
     fn deleted_file_path(base: &Path) -> PathBuf {
@@ -340,7 +340,7 @@     }
 
     fn version_mapping_file_path(base: &Path) -> PathBuf {
-        base.join(VERSION_MAPPING_FILE_NAME)
+        base.join(VERSION_MAPPING_FILE_name)
     }
 
     pub(crate) fn mappings_file_path(base: &Path) -> PathBuf {
@@ -512,6 +512,8 @@     use super::*;
     use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
+    use crate::id_tracker::point_mappings::PointMappings;
+
 
     const RAND_SEED: u64 = 42;
 
@@ -560,50 +562,70 @@         PointIdType::Uuid(Uuid::from_u128(971_u128)),
     ];
 
+    const DEFAULT_VERSION: SeqNumberType = 42;
+
+    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
+        let mut id_tracker = InMemoryIdTracker::new();
+
+        for value in TEST_POINTS.iter() {
+            let internal_id = id_tracker.total_point_count() as PointOffsetType;
+            id_tracker.set_link(*value, internal_id).unwrap();
+            id_tracker
+                .set_internal_version(internal_id, DEFAULT_VERSION)
+                .unwrap()
+        }
+
+        id_tracker
+    }
+
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
+    }
+
     #[test]
-    fn test_mixed_types_iterator() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let id_tracker = make_immutable_tracker(dir.path());
-
-        let sorted_from_tracker = id_tracker.iter_from(None).map(|(k, _)| k).collect_vec();
-
-        let mut values = TEST_POINTS.to_vec();
-        values.sort();
-
-        assert_eq!(sorted_from_tracker, values);
-    }
-
-    #[test]
-    fn test_load_store() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let (old_mappings, old_versions) = {
-            let id_tracker = make_immutable_tracker(dir.path());
-            (id_tracker.mappings, id_tracker.internal_to_version)
-        };
-
-        let mut loaded_id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-
-        // We may extend the length of deleted bitvec as memory maps need to be aligned to
-        // a multiple of `usize-width`.
+    fn test_id_tracker_equal() {
+        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
+
+        let immutable_id_tracker_dir = Builder::new()
+            .prefix("storage_dir_immutable")
+            .tempdir()
+            .unwrap();
+        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
+
         assert_eq!(
-            old_versions.len(),
-            loaded_id_tracker.internal_to_version.len()
+            in_memory_id_tracker.available_point_count(),
+            immutable_id_tracker.available_point_count()
         );
-        for i in 0..old_versions.len() as u32 {
-            assert_eq!(
-                old_versions.get(i),
-                loaded_id_tracker.internal_to_version.get(i),
-                "Version mismatch at index {i}",
-            );
-        }
-
-        assert_eq!(old_mappings, loaded_id_tracker.mappings);
-
-        loaded_id_tracker.drop(PointIdType::NumId(180)).unwrap();
-    }
-
-    /// Mutates an ID tracker and stores it to disk. Tests whether loading results in the exact same
-    /// ID tracker.
+        assert_eq!(
+            in_memory_id_tracker.total_point_count(),
+            immutable_id_tracker.total_point_count()
+        );
+
+        for (internal, external) in TEST_POINTS.iter().enumerate() {
+            let internal = internal as PointOffsetType;
+
+            assert_eq!(
+                in_memory_id_tracker.internal_id(*external),
+                immutable_id_tracker.internal_id(*external)
+            );
+
+            assert_eq!(
+                in_memory_id_tracker
+                    .internal_version(internal)
+                    .unwrap_or_default(),
+                immutable_id_tracker
+                    .internal_version(internal)
+                    .unwrap_or_default()
+            );
+
+            assert_eq!(
+                in_memory_id_tracker.external_id(internal),
+                immutable_id_tracker.external_id(internal)
+            );
+        }
+    }
+
     #[test]
     fn test_store_load_mutated() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
@@ -730,6 +752,7 @@         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
         assert_eq!(id_tracker.internal_id(point_to_delete), None);
 
+        // Old mappings should be the same as newly loaded one.
         old_mappings
             .iter_internal_raw()
             .zip(id_tracker.mappings.iter_internal_raw())
@@ -766,7 +789,16 @@             let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
 
             assert_eq!(new_mappings.total_point_count(), size);
-            assert_eq!(mappings, new_mappings);
+            // Old mappings should be the same as newly loaded one.
+            mappings
+                .iter_internal_raw()
+                .zip(new_mappings.iter_internal_raw())
+                .for_each(
+                    |((old_internal, old_external), (new_internal, new_external))| {
+                        assert_eq!(old_internal, new_internal);
+                        assert_eq!(old_external, new_external);
+                    },
+                );
         }
     }
 
@@ -786,7 +818,16 @@         let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
 
         assert_eq!(new_mappings.total_point_count(), 0);
-        assert_eq!(mappings, new_mappings);
+        // Old mappings should be the same as newly loaded one.
+        mappings
+            .iter_internal_raw()
+            .zip(new_mappings.iter_internal_raw())
+            .for_each(
+                |((old_internal, old_external), (new_internal, new_external))| {
+                    assert_eq!(old_internal, new_internal);
+                    assert_eq!(old_external, new_external);
+                },
+            );
     }
 
     /// Tests de/serializing of only single ID mappings.
@@ -811,70 +852,6 @@ 
             assert_eq!(i as PointOffsetType, got_internal);
             assert_eq!(expected_external, got_external);
-        }
-    }
-
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
-
-    #[test]
-    fn test_id_tracker_equal() {
-        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
-
-        let immutable_id_tracker_dir = Builder::new()
-            .prefix("storage_dir_immutable")
-            .tempdir()
-            .unwrap();
-        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
-
-        assert_eq!(
-            in_memory_id_tracker.available_point_count(),
-            immutable_id_tracker.available_point_count()
-        );
-        assert_eq!(
-            in_memory_id_tracker.total_point_count(),
-            immutable_id_tracker.total_point_count()
-        );
-
-        for (internal, external) in TEST_POINTS.iter().enumerate() {
-            let internal = internal as PointOffsetType;
-
-            assert_eq!(
-                in_memory_id_tracker.internal_id(*external),
-                immutable_id_tracker.internal_id(*external)
-            );
-
-            assert_eq!(
-                in_memory_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default(),
-                immutable_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default()
-            );
-
-            assert_eq!(
-                in_memory_id_tracker.external_id(internal),
-                immutable_id_tracker.external_id(internal)
-            );
         }
     }
 
