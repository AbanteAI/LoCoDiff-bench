
index 012de67c1..1860658a8 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmp0oe756od_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpuais_gmf_actual.txt	
@@ -13,17 +13,17 @@ use memory::mmap_ops::{create_and_ensure_length, open_write_mmap};
 use memory::mmap_type::{MmapBitSlice, MmapSlice};
 use uuid::Uuid;
 
-use crate::common::Flusher;
 use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::mmap_slice_buffered_update_wrapper::MmapSliceBufferedUpdateWrapper;
 use crate::common::operation_error::{OperationError, OperationResult};
-use crate::id_tracker::IdTracker;
+use crate::common::Flusher;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::compressed::external_to_internal::CompressedExternalToInternal;
 use crate::id_tracker::compressed::internal_to_external::CompressedInternalToExternal;
 use crate::id_tracker::compressed::versions_store::CompressedVersions;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
 use crate::id_tracker::point_mappings::FileEndianess;
+use crate::id_tracker::IdTracker;
 use crate::types::{ExtendedPointId, PointIdType, SeqNumberType};
 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
@@ -292,7 +292,6 @@ impl ImmutableIdTracker {
         let missing_version_count = mappings
             .total_point_count()
             .saturating_sub(internal_to_version.len());
-
         let missing_versions_size = missing_version_count * size_of::<SeqNumberType>();
         let internal_to_version_size = size_of_val(internal_to_version);
         let min_size = internal_to_version_size + missing_versions_size;
@@ -323,8 +322,8 @@ impl ImmutableIdTracker {
         Self::store_mapping(&mappings, writer)?;
         file.sync_all()?;
 
-        deleted_wrapper.flusher()()?;
-        internal_to_version_wrapper.flusher()()?;
+        deleted_wrapper.flusher()?;
+        internal_to_version_wrapper.flusher()?;
 
         Ok(Self {
             path: path.to_path_buf(),
@@ -585,10 +584,7 @@ pub(super) mod test {
 
         // We may extend the length of deleted bitvec as memory maps need to be aligned to
         // a multiple of `usize-width`.
-        assert_eq!(
-            old_versions.len(),
-            loaded_id_tracker.internal_to_version.len()
-        );
+        assert_eq!(old_versions.len(), loaded_id_tracker.internal_to_version.len());
         for i in 0..old_versions.len() as u32 {
             assert_eq!(
                 old_versions.get(i),
@@ -627,7 +623,7 @@ pub(super) mod test {
                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.random_range(0..1000);
                     id_tracker
                         .set_internal_version(index as PointOffsetType, new_version)
                         .unwrap();
@@ -635,8 +631,8 @@ pub(super) mod test {
                 }
             }
 
-            id_tracker.mapping_flusher()().unwrap();
-            id_tracker.versions_flusher()().unwrap();
+            id_tracker.mapping_flusher()?;
+            id_tracker.versions_flusher()?;
 
             (dropped_points, custom_version)
         };
@@ -721,8 +717,8 @@ pub(super) mod test {
                 .expect("Point to delete exists.");
             assert!(!id_tracker.is_deleted_point(intetrnal_id));
             id_tracker.drop(point_to_delete).unwrap();
-            id_tracker.mapping_flusher()().unwrap();
-            id_tracker.versions_flusher()().unwrap();
+            id_tracker.mapping_flusher()?;
+            id_tracker.versions_flusher()?;
             id_tracker.mappings
         };
 
