--- qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual)@@ -17,13 +17,13 @@ use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::mmap_slice_buffered_update_wrapper::MmapSliceBufferedUpdateWrapper;
 use crate::common::operation_error::{OperationError, OperationResult};
-use crate::id_tracker::IdTracker;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::compressed::external_to_internal::CompressedExternalToInternal;
 use crate::id_tracker::compressed::internal_to_external::CompressedInternalToExternal;
 use crate::id_tracker::compressed::versions_store::CompressedVersions;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
 use crate::id_tracker::point_mappings::FileEndianess;
+use crate::id_tracker::IdTracker;
 use crate::types::{ExtendedPointId, PointIdType, SeqNumberType};
 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
@@ -244,7 +244,7 @@             true,
         )?;
         let internal_to_version_mapslice: MmapSlice<SeqNumberType> =
-            unsafe { MmapSlice::try_from(internal_to_version_map)? };
+            unsafe { MmapSlice::try_from(internal_to_version_map).map_err(Into::into)? };
         let internal_to_version = CompressedVersions::from_slice(&internal_to_version_mapslice);
         let internal_to_version_wrapper =
             MmapSliceBufferedUpdateWrapper::new(internal_to_version_mapslice);
@@ -275,8 +275,9 @@ 
         debug_assert!(mappings.deleted().len() <= mappings.total_point_count());
 
-        let deleted_mmap = open_write_mmap(&deleted_filepath, AdviceSetting::Global, false)?;
-        let mut deleted_new = MmapBitSlice::try_from(deleted_mmap, 0)?;
+        let deleted_mmap =
+            open_write_mmap(&deleted_filepath, AdviceSetting::Global, false).map_err(Into::into)?;
+        let mut deleted_new = MmapBitSlice::try_from(deleted_mmap, 0).map_err(Into::into)?;
         deleted_new[..mappings.deleted().len()].copy_from_bitslice(mappings.deleted());
 
         for i in mappings.deleted().len()..mappings.total_point_count() {
@@ -301,11 +302,8 @@             create_and_ensure_length(&version_filepath, version_size)?;
         }
         let mut internal_to_version_wrapper = unsafe {
-            MmapSlice::try_from(open_write_mmap(
-                &version_filepath,
-                AdviceSetting::Global,
-                false,
-            )?)?
+            MmapSlice::try_from(open_write_mmap(&version_filepath, AdviceSetting::Global, false).map_err(Into::into)?)
+                .map_err(Into::into)?
         };
 
         internal_to_version_wrapper[..internal_to_version.len()]
@@ -504,12 +502,12 @@     use std::collections::{HashMap, HashSet};
 
     use itertools::Itertools;
+    use rand::prelude::*;
     use rand::Rng;
-    use rand::prelude::*;
     use tempfile::Builder;
     use uuid::Uuid;
 
-    use super::*;
+    use parent::*;
     use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
 
@@ -560,6 +558,27 @@         PointIdType::Uuid(Uuid::from_u128(971_u128)),
     ];
 
+    const DEFAULT_VERSION: SeqNumberType = 42;
+
+    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
+        let mut id_tracker = InMemoryIdTracker::new();
+
+        for value in TEST_POINTS.iter() {
+            let internal_id = id_tracker.total_point_count() as PointOffsetType;
+            id_tracker.set_link(*value, internal_id).unwrap();
+            id_tracker
+                .set_internal_version(internal_id, DEFAULT_VERSION)
+                .unwrap()
+        }
+
+        id_tracker
+    }
+
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
+    }
+
     #[test]
     fn test_mixed_types_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -597,7 +616,15 @@             );
         }
 
-        assert_eq!(old_mappings, loaded_id_tracker.mappings);
+        old_mappings
+            .iter_internal_raw()
+            .zip(loaded_id_tracker.mappings.iter_internal_raw())
+            .for_each(
+                |((old_internal, old_external), (new_internal, new_external))| {
+                    assert_eq!(old_internal, new_internal);
+                    assert_eq!(old_external, new_external);
+                },
+            );
 
         loaded_id_tracker.drop(PointIdType::NumId(180)).unwrap();
     }
@@ -697,6 +724,7 @@         id_tracker.drop(point_to_delete).unwrap();
 
         let point_exists = id_tracker.internal_id(point_to_delete).is_some()
+            .is_none_or(|exists| exists)
             && id_tracker.iter_external().contains(&point_to_delete)
             && id_tracker.iter_from(None).any(|i| i.0 == point_to_delete);
 
@@ -730,6 +758,7 @@         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
         assert_eq!(id_tracker.internal_id(point_to_delete), None);
 
+        // Old mappings should be the same as newly loaded one.
         old_mappings
             .iter_internal_raw()
             .zip(id_tracker.mappings.iter_internal_raw())
@@ -766,7 +795,15 @@             let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
 
             assert_eq!(new_mappings.total_point_count(), size);
-            assert_eq!(mappings, new_mappings);
+            new_mappings
+                .iter_internal_raw()
+                .zip(mappings.iter_internal_raw())
+                .for_each(
+                    |((new_internal, new_external), (old_internal, old_external))| {
+                        assert_eq!(new_internal, old_internal);
+                        assert_eq!(new_external, old_external);
+                    },
+                );
         }
     }
 
@@ -786,7 +823,15 @@         let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
 
         assert_eq!(new_mappings.total_point_count(), 0);
-        assert_eq!(mappings, new_mappings);
+        new_mappings
+            .iter_internal_raw()
+            .zip(mappings.iter_internal_raw())
+            .for_each(
+                |((new_internal, new_external), (old_internal, old_external))| {
+                    assert_eq!(new_internal, old_internal);
+                    assert_eq!(new_external, old_external);
+                },
+            );
     }
 
     /// Tests de/serializing of only single ID mappings.
@@ -812,27 +857,6 @@             assert_eq!(i as PointOffsetType, got_internal);
             assert_eq!(expected_external, got_external);
         }
-    }
-
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
     }
 
     #[test]
