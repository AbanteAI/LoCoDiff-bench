
index 012de67c..84071e20 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmpgpos7x6p_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpap1d2ex7_actual.txt	
@@ -430,10 +430,6 @@ impl IdTracker for ImmutableIdTracker {
         self.iter_internal()
     }
 
-    fn iter_random(&self) -> Box<dyn Iterator<Item = (PointIdType, PointOffsetType)> + '_> {
-        self.mappings.iter_random()
-    }
-
     /// Creates a flusher function, that writes the deleted points bitvec to disk.
     fn mapping_flusher(&self) -> Flusher {
         // Only flush deletions because mappings are immutable
@@ -627,7 +623,7 @@ pub(super) mod test {
                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.random_range(0..1000);
                     id_tracker
                         .set_internal_version(index as PointOffsetType, new_version)
                         .unwrap();
@@ -755,215 +751,4 @@ pub(super) mod test {
 
             let size = 2usize.pow(size_exp);
 
-            let mappings = CompressedPointMappings::random(&mut rng, size as u32);
-
-            ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
-
-            // 16 is the min byte size of an entry. The exact number is not that important
-            // we just want to ensure that the written bytes correlate to the amount of entries.
-            assert!(buf.len() >= size * 16);
-
-            let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
-
-            assert_eq!(new_mappings.total_point_count(), size);
-            assert_eq!(mappings, new_mappings);
-        }
-    }
-
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
-    #[test]
-    fn test_point_mappings_de_serialization_empty() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-        let mappings = CompressedPointMappings::random(&mut rng, 0);
-
-        let mut buf = vec![];
-
-        ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
-
-        // We still have a header!
-        assert!(!buf.is_empty());
-
-        let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
-
-        assert_eq!(new_mappings.total_point_count(), 0);
-        assert_eq!(mappings, new_mappings);
-    }
-
-    /// Tests de/serializing of only single ID mappings.
-    #[test]
-    fn test_point_mappings_de_serialization_single() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        const SIZE: usize = 400_000;
-
-        let mappings = CompressedPointMappings::random(&mut rng, SIZE as u32);
-
-        for i in 0..SIZE {
-            let mut buf = vec![];
-
-            let internal_id = i as PointOffsetType;
-
-            let expected_external = mappings.external_id(internal_id).unwrap();
-
-            ImmutableIdTracker::write_entry(&mut buf, internal_id, expected_external).unwrap();
-
-            let (got_internal, got_external) = ImmutableIdTracker::read_entry(&*buf).unwrap();
-
-            assert_eq!(i as PointOffsetType, got_internal);
-            assert_eq!(expected_external, got_external);
-        }
-    }
-
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
-
-    #[test]
-    fn test_id_tracker_equal() {
-        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
-
-        let immutable_id_tracker_dir = Builder::new()
-            .prefix("storage_dir_immutable")
-            .tempdir()
-            .unwrap();
-        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
-
-        assert_eq!(
-            in_memory_id_tracker.available_point_count(),
-            immutable_id_tracker.available_point_count()
-        );
-        assert_eq!(
-            in_memory_id_tracker.total_point_count(),
-            immutable_id_tracker.total_point_count()
-        );
-
-        for (internal, external) in TEST_POINTS.iter().enumerate() {
-            let internal = internal as PointOffsetType;
-
-            assert_eq!(
-                in_memory_id_tracker.internal_id(*external),
-                immutable_id_tracker.internal_id(*external)
-            );
-
-            assert_eq!(
-                in_memory_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default(),
-                immutable_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default()
-            );
-
-            assert_eq!(
-                in_memory_id_tracker.external_id(internal),
-                immutable_id_tracker.external_id(internal)
-            );
-        }
-    }
-
-    #[test]
-    fn simple_id_tracker_vs_immutable_tracker_congruence() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let db = open_db(dir.path(), &[DB_VECTOR_CF]).unwrap();
-
-        let mut id_tracker = InMemoryIdTracker::new();
-        let mut simple_id_tracker = SimpleIdTracker::open(db).unwrap();
-
-        // Insert 100 random points into id_tracker
-
-        let num_points = 200;
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        for _ in 0..num_points {
-            // Generate num id in range from 0 to 100
-
-            let point_id = PointIdType::NumId(rng.random_range(0..num_points as u64));
-
-            let version = rng.random_range(0..1000);
-
-            let internal_id_mmap = id_tracker.total_point_count() as PointOffsetType;
-            let internal_id_simple = simple_id_tracker.total_point_count() as PointOffsetType;
-
-            assert_eq!(internal_id_mmap, internal_id_simple);
-
-            if id_tracker.internal_id(point_id).is_some() {
-                id_tracker.drop(point_id).unwrap();
-            }
-            id_tracker.set_link(point_id, internal_id_mmap).unwrap();
-            id_tracker
-                .set_internal_version(internal_id_mmap, version)
-                .unwrap();
-
-            if simple_id_tracker.internal_id(point_id).is_some() {
-                simple_id_tracker.drop(point_id).unwrap();
-            }
-            simple_id_tracker
-                .set_link(point_id, internal_id_simple)
-                .unwrap();
-            simple_id_tracker
-                .set_internal_version(internal_id_simple, version)
-                .unwrap();
-        }
-
-        let immutable_id_tracker =
-            ImmutableIdTracker::from_in_memory_tracker(id_tracker, dir.path()).unwrap();
-        drop(immutable_id_tracker);
-
-        let immutable_id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-
-        for (external_id, internal_id) in simple_id_tracker.iter_from(None) {
-            assert_eq!(
-                simple_id_tracker.internal_version(internal_id).unwrap(),
-                immutable_id_tracker.internal_version(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id),
-                immutable_id_tracker.external_id(internal_id)
-            );
-            assert_eq!(
-                external_id,
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id).unwrap(),
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-        }
-
-        for (external_id, internal_id) in immutable_id_tracker.iter_from(None) {
-            assert_eq!(
-                simple_id_tracker.internal_version(internal_id).unwrap(),
-                immutable_id_tracker.internal_version(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id),
-                immutable_id_tracker.external_id(internal_id)
-            );
-            assert_eq!(
-                external_id,
-                simple_id_tracker.external_id(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id).unwrap(),
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-        }
-    }
-}
\ No newline at end of file
+            let
\ No newline at end of file
