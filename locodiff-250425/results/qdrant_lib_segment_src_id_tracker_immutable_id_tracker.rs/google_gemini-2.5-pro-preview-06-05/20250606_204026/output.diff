
index 012de67c1..500c6e884 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmph576m08__expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpfwzk_lsc_actual.txt	
@@ -170,7 +170,7 @@ impl ImmutableIdTracker {
         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -504,13 +504,13 @@ pub(super) mod test {
     use std::collections::{HashMap, HashSet};
 
     use itertools::Itertools;
-    use rand::Rng;
     use rand::prelude::*;
+    use rand::Rng;
     use tempfile::Builder;
     use uuid::Uuid;
 
     use super::*;
-    use crate::common::rocksdb_wrapper::{DB_VECTOR_CF, open_db};
+    use crate::common::rocksdb_wrapper::{open_db, DB_VECTOR_CF};
     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
 
     const RAND_SEED: u64 = 42;
@@ -597,7 +597,15 @@ pub(super) mod test {
             );
         }
 
-        assert_eq!(old_mappings, loaded_id_tracker.mappings);
+        old_mappings
+            .iter_internal_raw()
+            .zip(loaded_id_tracker.mappings.iter_internal_raw())
+            .for_each(
+                |((old_internal, old_external), (new_internal, new_external))| {
+                    assert_eq!(old_internal, new_internal);
+                    assert_eq!(old_external, new_external);
+                },
+            );
 
         loaded_id_tracker.drop(PointIdType::NumId(180)).unwrap();
     }
@@ -741,7 +749,7 @@ pub(super) mod test {
             );
     }
 
-    /// Tests de/serializing of whole `PointMappings`.
+    /// Tests de/serializing of whole `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
@@ -770,7 +778,7 @@ pub(super) mod test {
         }
     }
 
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
+    /// Verifies that de/serializing works properly for empty `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization_empty() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
