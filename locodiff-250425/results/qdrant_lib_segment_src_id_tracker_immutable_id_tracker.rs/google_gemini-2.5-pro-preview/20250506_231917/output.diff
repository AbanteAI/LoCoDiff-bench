
index 012de67c..6c02eb47 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmp2itxi8v2_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpyps2xwrn_actual.txt	
@@ -170,7 +170,7 @@ impl ImmutableIdTracker {
         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -730,6 +730,7 @@ pub(super) mod test {
         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
         assert_eq!(id_tracker.internal_id(point_to_delete), None);
 
+        // Old mappings should be the same as newly loaded one.
         old_mappings
             .iter_internal_raw()
             .zip(id_tracker.mappings.iter_internal_raw())
@@ -741,14 +742,14 @@ pub(super) mod test {
             );
     }
 
-    /// Tests de/serializing of whole `PointMappings`.
+    /// Tests de/serializing of whole `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
 
         let mut buf = vec![];
 
-        // Test different sized PointMappings, growing exponentially to also test large ones.
+        // Test different sized CompressedPointMappings, growing exponentially to also test large ones.
         // This way we test up to 2^16 entries.
         for size_exp in (0..16u32).step_by(3) {
             buf.clear();
@@ -770,7 +771,7 @@ pub(super) mod test {
         }
     }
 
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
+    /// Verifies that de/serializing works properly for empty `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization_empty() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
