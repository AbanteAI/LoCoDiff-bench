
index 012de67c1..e29206755 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmpnwzmg9sk_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmpn0x13xlj_actual.txt	
@@ -170,7 +170,7 @@ impl ImmutableIdTracker {
         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -427,7 +427,7 @@ impl IdTracker for ImmutableIdTracker {
     }
 
     fn iter_ids(&self) -> Box<dyn Iterator<Item = PointOffsetType> + '_> {
-        self.iter_internal()
+        self.mappings.iter_internal()
     }
 
     fn iter_random(&self) -> Box<dyn Iterator<Item = (PointIdType, PointOffsetType)> + '_> {
@@ -560,6 +560,11 @@ pub(super) mod test {
         PointIdType::Uuid(Uuid::from_u128(971_u128)),
     ];
 
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
+    }
+
     #[test]
     fn test_mixed_types_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -602,220 +607,6 @@ pub(super) mod test {
         loaded_id_tracker.drop(PointIdType::NumId(180)).unwrap();
     }
 
-    /// Mutates an ID tracker and stores it to disk. Tests whether loading results in the exact same
-    /// ID tracker.
-    #[test]
-    fn test_store_load_mutated() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let (dropped_points, custom_version) = {
-            let mut id_tracker = make_immutable_tracker(dir.path());
-
-            let mut dropped_points = HashSet::new();
-            let mut custom_version = HashMap::new();
-
-            for (index, point) in TEST_POINTS.iter().enumerate() {
-                if index % 2 == 0 {
-                    continue;
-                }
-
-                if index % 3 == 0 {
-                    id_tracker.drop(*point).unwrap();
-                    dropped_points.insert(*point);
-                    continue;
-                }
-
-                if index % 5 == 0 {
-                    let new_version = rng.next_u64();
-                    id_tracker
-                        .set_internal_version(index as PointOffsetType, new_version)
-                        .unwrap();
-                    custom_version.insert(index as PointOffsetType, new_version);
-                }
-            }
-
-            id_tracker.mapping_flusher()().unwrap();
-            id_tracker.versions_flusher()().unwrap();
-
-            (dropped_points, custom_version)
-        };
-
-        let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-        for (index, point) in TEST_POINTS.iter().enumerate() {
-            let internal_id = index as PointOffsetType;
-
-            if dropped_points.contains(point) {
-                assert!(id_tracker.is_deleted_point(internal_id));
-                assert_eq!(id_tracker.external_id(internal_id), None);
-                assert!(id_tracker.mappings.internal_id(point).is_none());
-
-                continue;
-            }
-
-            // Check version
-            let expect_version = custom_version
-                .get(&internal_id)
-                .copied()
-                .unwrap_or(DEFAULT_VERSION);
-
-            assert_eq!(
-                id_tracker.internal_to_version.get(internal_id),
-                Some(expect_version)
-            );
-
-            // Check that unmodified points still haven't changed.
-            assert_eq!(
-                id_tracker.external_id(index as PointOffsetType),
-                Some(*point)
-            );
-        }
-    }
-
-    #[test]
-    fn test_all_points_have_version() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let id_tracker = make_immutable_tracker(dir.path());
-        for i in id_tracker.iter_ids() {
-            assert!(id_tracker.internal_version(i).is_some());
-        }
-    }
-
-    #[test]
-    fn test_point_deletion_correctness() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let mut id_tracker = make_immutable_tracker(dir.path());
-
-        let deleted_points = id_tracker.total_point_count() - id_tracker.available_point_count();
-
-        let point_to_delete = PointIdType::NumId(100);
-
-        assert!(id_tracker.iter_external().contains(&point_to_delete));
-
-        assert_eq!(id_tracker.internal_id(point_to_delete), Some(0));
-
-        id_tracker.drop(point_to_delete).unwrap();
-
-        let point_exists = id_tracker.internal_id(point_to_delete).is_some()
-            && id_tracker.iter_external().contains(&point_to_delete)
-            && id_tracker.iter_from(None).any(|i| i.0 == point_to_delete);
-
-        assert!(!point_exists);
-
-        let new_deleted_points =
-            id_tracker.total_point_count() - id_tracker.available_point_count();
-
-        assert_eq!(new_deleted_points, deleted_points + 1);
-    }
-
-    #[test]
-    fn test_point_deletion_persists_reload() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-
-        let point_to_delete = PointIdType::NumId(100);
-
-        let old_mappings = {
-            let mut id_tracker = make_immutable_tracker(dir.path());
-            let intetrnal_id = id_tracker
-                .internal_id(point_to_delete)
-                .expect("Point to delete exists.");
-            assert!(!id_tracker.is_deleted_point(intetrnal_id));
-            id_tracker.drop(point_to_delete).unwrap();
-            id_tracker.mapping_flusher()().unwrap();
-            id_tracker.versions_flusher()().unwrap();
-            id_tracker.mappings
-        };
-
-        // Point should still be gone
-        let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-        assert_eq!(id_tracker.internal_id(point_to_delete), None);
-
-        old_mappings
-            .iter_internal_raw()
-            .zip(id_tracker.mappings.iter_internal_raw())
-            .for_each(
-                |((old_internal, old_external), (new_internal, new_external))| {
-                    assert_eq!(old_internal, new_internal);
-                    assert_eq!(old_external, new_external);
-                },
-            );
-    }
-
-    /// Tests de/serializing of whole `PointMappings`.
-    #[test]
-    fn test_point_mappings_de_serialization() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        let mut buf = vec![];
-
-        // Test different sized PointMappings, growing exponentially to also test large ones.
-        // This way we test up to 2^16 entries.
-        for size_exp in (0..16u32).step_by(3) {
-            buf.clear();
-
-            let size = 2usize.pow(size_exp);
-
-            let mappings = CompressedPointMappings::random(&mut rng, size as u32);
-
-            ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
-
-            // 16 is the min byte size of an entry. The exact number is not that important
-            // we just want to ensure that the written bytes correlate to the amount of entries.
-            assert!(buf.len() >= size * 16);
-
-            let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
-
-            assert_eq!(new_mappings.total_point_count(), size);
-            assert_eq!(mappings, new_mappings);
-        }
-    }
-
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
-    #[test]
-    fn test_point_mappings_de_serialization_empty() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-        let mappings = CompressedPointMappings::random(&mut rng, 0);
-
-        let mut buf = vec![];
-
-        ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
-
-        // We still have a header!
-        assert!(!buf.is_empty());
-
-        let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
-
-        assert_eq!(new_mappings.total_point_count(), 0);
-        assert_eq!(mappings, new_mappings);
-    }
-
-    /// Tests de/serializing of only single ID mappings.
-    #[test]
-    fn test_point_mappings_de_serialization_single() {
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        const SIZE: usize = 400_000;
-
-        let mappings = CompressedPointMappings::random(&mut rng, SIZE as u32);
-
-        for i in 0..SIZE {
-            let mut buf = vec![];
-
-            let internal_id = i as PointOffsetType;
-
-            let expected_external = mappings.external_id(internal_id).unwrap();
-
-            ImmutableIdTracker::write_entry(&mut buf, internal_id, expected_external).unwrap();
-
-            let (got_internal, got_external) = ImmutableIdTracker::read_entry(&*buf).unwrap();
-
-            assert_eq!(i as PointOffsetType, got_internal);
-            assert_eq!(expected_external, got_external);
-        }
-    }
-
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
     fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
         let mut id_tracker = InMemoryIdTracker::new();
 
@@ -830,10 +621,7 @@ pub(super) mod test {
         id_tracker
     }
 
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
+    const DEFAULT_VERSION: SeqNumberType = 42;
 
     #[test]
     fn test_id_tracker_equal() {
@@ -953,7 +741,7 @@ pub(super) mod test {
                 immutable_id_tracker.internal_version(internal_id).unwrap()
             );
             assert_eq!(
-                simple_id_tracker.external_id(internal_id),
+                immutable_id_tracker.external_id(internal_id),
                 immutable_id_tracker.external_id(internal_id)
             );
             assert_eq!(
