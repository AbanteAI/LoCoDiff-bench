
index 012de67c1..91a80971a 100644
--- a/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected):tmp/tmpbrzog0r1_expected.txt	
+++ b/qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual):tmp/tmps37f25xm_actual.txt	
@@ -1,3 +1,4 @@
+use std::collections::{HashMap, HashSet};
 use std::fs::File;
 use std::io::{BufReader, BufWriter, Read, Write};
 use std::mem::{size_of, size_of_val};
@@ -583,8 +584,6 @@ pub(super) mod test {
 
         let mut loaded_id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
 
-        // We may extend the length of deleted bitvec as memory maps need to be aligned to
-        // a multiple of `usize-width`.
         assert_eq!(
             old_versions.len(),
             loaded_id_tracker.internal_to_version.len()
@@ -627,7 +626,7 @@ pub(super) mod test {
                 }
 
                 if index % 5 == 0 {
-                    let new_version = rng.next_u64();
+                    let new_version = rng.random_range(0..1000);
                     id_tracker
                         .set_internal_version(index as PointOffsetType, new_version)
                         .unwrap();
@@ -681,33 +680,6 @@ pub(super) mod test {
         }
     }
 
-    #[test]
-    fn test_point_deletion_correctness() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let mut id_tracker = make_immutable_tracker(dir.path());
-
-        let deleted_points = id_tracker.total_point_count() - id_tracker.available_point_count();
-
-        let point_to_delete = PointIdType::NumId(100);
-
-        assert!(id_tracker.iter_external().contains(&point_to_delete));
-
-        assert_eq!(id_tracker.internal_id(point_to_delete), Some(0));
-
-        id_tracker.drop(point_to_delete).unwrap();
-
-        let point_exists = id_tracker.internal_id(point_to_delete).is_some()
-            && id_tracker.iter_external().contains(&point_to_delete)
-            && id_tracker.iter_from(None).any(|i| i.0 == point_to_delete);
-
-        assert!(!point_exists);
-
-        let new_deleted_points =
-            id_tracker.total_point_count() - id_tracker.available_point_count();
-
-        assert_eq!(new_deleted_points, deleted_points + 1);
-    }
-
     #[test]
     fn test_point_deletion_persists_reload() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
