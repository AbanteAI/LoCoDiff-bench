--- qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_id_tracker_immutable_id_tracker.rs_extracted.txt (actual)@@ -17,13 +17,13 @@ use crate::common::mmap_bitslice_buffered_update_wrapper::MmapBitSliceBufferedUpdateWrapper;
 use crate::common::mmap_slice_buffered_update_wrapper::MmapSliceBufferedUpdateWrapper;
 use crate::common::operation_error::{OperationError, OperationResult};
-use crate::id_tracker::IdTracker;
 use crate::id_tracker::compressed::compressed_point_mappings::CompressedPointMappings;
 use crate::id_tracker::compressed::external_to_internal::CompressedExternalToInternal;
 use crate::id_tracker::compressed::internal_to_external::CompressedInternalToExternal;
 use crate::id_tracker::compressed::versions_store::CompressedVersions;
 use crate::id_tracker::in_memory_id_tracker::InMemoryIdTracker;
 use crate::id_tracker::point_mappings::FileEndianess;
+use crate::id_tracker::IdTracker;
 use crate::types::{ExtendedPointId, PointIdType, SeqNumberType};
 
 pub const DELETED_FILE_NAME: &str = "id_tracker.deleted";
@@ -74,7 +74,6 @@         let (internal_to_version, mappings) = in_memory_tracker.into_internal();
         let compressed_mappings = CompressedPointMappings::from_mappings(mappings);
         let id_tracker = Self::new(path, &internal_to_version, compressed_mappings)?;
-
         Ok(id_tracker)
     }
 
@@ -88,7 +87,6 @@         let len = reader.read_u64::<FileEndianess>()? as usize;
 
         let mut deleted = deleted.unwrap_or_else(|| BitVec::repeat(false, len));
-
         deleted.truncate(len);
 
         let mut internal_to_external = CompressedInternalToExternal::with_capacity(len);
@@ -99,12 +97,9 @@         for i in 0..len {
             let (internal_id, external_id) = Self::read_entry(&mut reader)?;
 
-            // Need to push this regardless of point deletion as the vecs index represents the internal id
-            // which would become wrong if we leave out entries.
             if internal_to_external.len() <= internal_id as usize {
                 internal_to_external.resize(internal_id as usize + 1, PointIdType::NumId(0));
             }
-
             internal_to_external.set(internal_id, external_id);
 
             let point_deleted = deleted.get_bit(i).unwrap_or(false);
@@ -123,9 +118,9 @@         }
 
         // Check that the file has been fully read.
-        #[cfg(debug_assertions)] // Only for dev builds
+        #[cfg(debug_assertions)]
         {
-            debug_assert_eq!(reader.bytes().map(Result::unwrap).count(), 0,);
+            debug_assert_eq!(reader.bytes().map(Result::unwrap).count(), 0);
         }
 
         let external_to_internal = CompressedExternalToInternal::from_vectors(
@@ -140,9 +135,9 @@         ))
     }
 
-    /// Loads a single entry from a reader. Expects the reader to be aligned so, that the next read
+    /// Loads a single entry from a reader. Expects the reader to be aligned so that the next read
     /// byte is the first byte of a new entry.
-    /// This function reads exact one entry which means after calling this function, the reader
+    /// This function reads exactly one entry which means after calling this function, the reader
     /// will be at the start of the next entry.
     pub(crate) fn read_entry<R: Read>(
         mut reader: R,
@@ -170,7 +165,7 @@         Ok((internal_id, external_id))
     }
 
-    /// Serializes the `PointMappings` into the given writer using the file format specified below.
+    /// Serializes the `CompressedPointMappings` into the given writer using the file format specified below.
     ///
     /// ## File format
     /// In general the format looks like this:
@@ -182,16 +177,13 @@     /// +-----------------+-----------------------+------------------+
     /// | PointIdType: u8 | Number/UUID: u64/u128 | Internal ID: u32 |
     /// +-----------------+-----------------------+------------------+
-    /// A single entry is thus either 1+8+4=13 or 1+16+4=21 bytes in size depending
-    /// on the PointIdType.
+    /// A single entry is thus either 1+8+4=13 or 1+16+4=21 bytes in size depending on the PointIdType.
     fn store_mapping<W: Write>(
         mappings: &CompressedPointMappings,
         mut writer: W,
     ) -> OperationResult<()> {
-        let number_of_entries = mappings.total_point_count();
-
         // Serialize the header (=length).
-        writer.write_u64::<FileEndianess>(number_of_entries as u64)?;
+        writer.write_u64::<FileEndianess>(mappings.total_point_count() as u64)?;
 
         // Serialize all entries
         for (internal_id, external_id) in mappings.iter_internal_raw() {
@@ -210,21 +202,17 @@         // Byte to distinguish between Number and UUID
         writer.write_u8(ExternalIdType::from_point_id(&external_id) as u8)?;
 
-        // Serializing External ID
         match external_id {
             PointIdType::NumId(num) => {
-                // The PointID's number
                 writer.write_u64::<FileEndianess>(num)?;
             }
             PointIdType::Uuid(uuid) => {
-                // The PointID's UUID
                 writer.write_u128::<FileEndianess>(uuid.to_u128_le())?;
             }
         }
 
         // Serializing Internal ID
         writer.write_u32::<FileEndianess>(internal_id)?;
-
         Ok(())
     }
 
@@ -273,8 +261,6 @@             create_and_ensure_length(&deleted_filepath, deleted_size)?;
         }
 
-        debug_assert!(mappings.deleted().len() <= mappings.total_point_count());
-
         let deleted_mmap = open_write_mmap(&deleted_filepath, AdviceSetting::Global, false)?;
         let mut deleted_new = MmapBitSlice::try_from(deleted_mmap, 0)?;
         deleted_new[..mappings.deleted().len()].copy_from_bitslice(mappings.deleted());
@@ -348,10 +334,9 @@     }
 }
 
-/// Returns the required mmap filesize for a given length of a slice of type `T`.
 fn mmap_size<T>(len: usize) -> usize {
     let item_width = size_of::<T>();
-    len.div_ceil(item_width) * item_width // Make it a multiple of usize-width.
+    len.div_ceil(item_width) * item_width
 }
 
 /// Returns the required mmap filesize for a `BitSlice`.
@@ -373,20 +358,18 @@             let has_version = self.internal_to_version.has(internal_id);
             debug_assert!(
                 has_version,
-                "Can't extend version list in immutable tracker",
+                "Can't extend version list in immutable tracker"
             );
             if has_version {
                 self.internal_to_version.set(internal_id, version);
-                self.internal_to_version_wrapper
-                    .set(internal_id as usize, version);
-            }
-        }
-
+                self.internal_to_version_wrapper.set(internal_id as usize, version);
+            }
+        }
         Ok(())
     }
 
     fn internal_id(&self, external_id: PointIdType) -> Option<PointOffsetType> {
-        self.mappings.internal_id(&external_id)
+        self.mappings.internal_id(external_id)
     }
 
     fn external_id(&self, internal_id: PointOffsetType) -> Option<PointIdType> {
@@ -407,7 +390,6 @@         if let Some(internal_id) = internal_id {
             self.deleted_wrapper.set(internal_id as usize, true);
         }
-
         Ok(())
     }
 
@@ -427,20 +409,17 @@     }
 
     fn iter_ids(&self) -> Box<dyn Iterator<Item = PointOffsetType> + '_> {
-        self.iter_internal()
+        self.mappings.iter_internal()
     }
 
     fn iter_random(&self) -> Box<dyn Iterator<Item = (PointIdType, PointOffsetType)> + '_> {
         self.mappings.iter_random()
     }
 
-    /// Creates a flusher function, that writes the deleted points bitvec to disk.
     fn mapping_flusher(&self) -> Flusher {
-        // Only flush deletions because mappings are immutable
         self.deleted_wrapper.flusher()
     }
 
-    /// Creates a flusher function, that writes the points versions to disk.
     fn versions_flusher(&self) -> Flusher {
         self.internal_to_version_wrapper.flusher()
     }
@@ -514,11 +493,11 @@     use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
 
     const RAND_SEED: u64 = 42;
+    const DEFAULT_VERSION: SeqNumberType = 42;
 
     #[test]
     fn test_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-
         let mut id_tracker = InMemoryIdTracker::new();
 
         id_tracker.set_link(200.into(), 0).unwrap();
@@ -560,6 +539,23 @@         PointIdType::Uuid(Uuid::from_u128(971_u128)),
     ];
 
+    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
+        let mut id_tracker = InMemoryIdTracker::new();
+        for value in TEST_POINTS.iter() {
+            let internal_id = id_tracker.total_point_count() as PointOffsetType;
+            id_tracker.set_link(*value, internal_id).unwrap();
+            id_tracker
+                .set_internal_version(internal_id, DEFAULT_VERSION)
+                .unwrap();
+        }
+        id_tracker
+    }
+
+    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
+        let id_tracker = make_in_memory_tracker_from_memory();
+        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
+    }
+
     #[test]
     fn test_mixed_types_iterator() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
@@ -585,11 +581,8 @@ 
         // We may extend the length of deleted bitvec as memory maps need to be aligned to
         // a multiple of `usize-width`.
-        assert_eq!(
-            old_versions.len(),
-            loaded_id_tracker.internal_to_version.len()
-        );
-        for i in 0..old_versions.len() as u32 {
+        assert_eq!(old_versions.len(), loaded_id_tracker.internal_to_version.len());
+        for i in 0..old_versions.len() {
             assert_eq!(
                 old_versions.get(i),
                 loaded_id_tracker.internal_to_version.get(i),
@@ -598,16 +591,11 @@         }
 
         assert_eq!(old_mappings, loaded_id_tracker.mappings);
-
-        loaded_id_tracker.drop(PointIdType::NumId(180)).unwrap();
-    }
-
-    /// Mutates an ID tracker and stores it to disk. Tests whether loading results in the exact same
-    /// ID tracker.
+    }
+
     #[test]
     fn test_store_load_mutated() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
         let (dropped_points, custom_version) = {
             let mut id_tracker = make_immutable_tracker(dir.path());
@@ -619,13 +607,11 @@                 if index % 2 == 0 {
                     continue;
                 }
-
                 if index % 3 == 0 {
                     id_tracker.drop(*point).unwrap();
                     dropped_points.insert(*point);
                     continue;
                 }
-
                 if index % 5 == 0 {
                     let new_version = rng.next_u64();
                     id_tracker
@@ -648,27 +634,20 @@             if dropped_points.contains(point) {
                 assert!(id_tracker.is_deleted_point(internal_id));
                 assert_eq!(id_tracker.external_id(internal_id), None);
-                assert!(id_tracker.mappings.internal_id(point).is_none());
-
+                assert!(id_tracker.mappings.internal_id(*point).is_none());
                 continue;
             }
 
             // Check version
-            let expect_version = custom_version
-                .get(&internal_id)
-                .copied()
-                .unwrap_or(DEFAULT_VERSION);
-
+            let expect_version =
+                custom_version.get(&internal_id).copied().unwrap_or(DEFAULT_VERSION);
             assert_eq!(
                 id_tracker.internal_to_version.get(internal_id),
                 Some(expect_version)
             );
 
-            // Check that unmodified points still haven't changed.
-            assert_eq!(
-                id_tracker.external_id(index as PointOffsetType),
-                Some(*point)
-            );
+            // Check mapping
+            assert_eq!(id_tracker.external_id(internal_id), Some(*point));
         }
     }
 
@@ -685,26 +664,29 @@     fn test_point_deletion_correctness() {
         let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
         let mut id_tracker = make_immutable_tracker(dir.path());
-
-        let deleted_points = id_tracker.total_point_count() - id_tracker.available_point_count();
+        assert_eq!(
+            id_tracker.total_point_count(),
+            id_tracker.available_point_count()
+        );
+
+        let deleted_points =
+            id_tracker.total_point_count() - id_tracker.available_point_count();
 
         let point_to_delete = PointIdType::NumId(100);
 
         assert!(id_tracker.iter_external().contains(&point_to_delete));
-
         assert_eq!(id_tracker.internal_id(point_to_delete), Some(0));
 
         id_tracker.drop(point_to_delete).unwrap();
 
-        let point_exists = id_tracker.internal_id(point_to_delete).is_some()
+        let exists = id_tracker.internal_id(point_to_delete).is_some()
             && id_tracker.iter_external().contains(&point_to_delete)
             && id_tracker.iter_from(None).any(|i| i.0 == point_to_delete);
 
-        assert!(!point_exists);
+        assert!(!exists);
 
         let new_deleted_points =
             id_tracker.total_point_count() - id_tracker.available_point_count();
-
         assert_eq!(new_deleted_points, deleted_points + 1);
     }
 
@@ -716,17 +698,16 @@ 
         let old_mappings = {
             let mut id_tracker = make_immutable_tracker(dir.path());
-            let intetrnal_id = id_tracker
+            let internal_id = id_tracker
                 .internal_id(point_to_delete)
                 .expect("Point to delete exists.");
-            assert!(!id_tracker.is_deleted_point(intetrnal_id));
+            assert!(!id_tracker.is_deleted_point(internal_id));
             id_tracker.drop(point_to_delete).unwrap();
             id_tracker.mapping_flusher()().unwrap();
             id_tracker.versions_flusher()().unwrap();
             id_tracker.mappings
         };
 
-        // Point should still be gone
         let id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
         assert_eq!(id_tracker.internal_id(point_to_delete), None);
 
@@ -741,18 +722,14 @@             );
     }
 
-    /// Tests de/serializing of whole `PointMappings`.
+    /// Tests de/serializing of whole `CompressedPointMappings`.
     #[test]
     fn test_point_mappings_de_serialization() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
         let mut buf = vec![];
 
-        // Test different sized PointMappings, growing exponentially to also test large ones.
-        // This way we test up to 2^16 entries.
-        for size_exp in (0..16u32).step_by(3) {
+        for size_exp in (0..23u32).step_by(3) {
             buf.clear();
-
             let size = 2usize.pow(size_exp);
 
             let mappings = CompressedPointMappings::random(&mut rng, size as u32);
@@ -760,7 +737,6 @@             ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
 
             // 16 is the min byte size of an entry. The exact number is not that important
-            // we just want to ensure that the written bytes correlate to the amount of entries.
             assert!(buf.len() >= size * 16);
 
             let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
@@ -770,39 +746,31 @@         }
     }
 
-    /// Verifies that de/serializing works properly for empty `PointMappings`.
     #[test]
     fn test_point_mappings_de_serialization_empty() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
         let mappings = CompressedPointMappings::random(&mut rng, 0);
 
         let mut buf = vec![];
-
         ImmutableIdTracker::store_mapping(&mappings, &mut buf).unwrap();
-
-        // We still have a header!
         assert!(!buf.is_empty());
 
         let new_mappings = ImmutableIdTracker::load_mapping(&*buf, None).unwrap();
-
         assert_eq!(new_mappings.total_point_count(), 0);
         assert_eq!(mappings, new_mappings);
     }
 
-    /// Tests de/serializing of only single ID mappings.
     #[test]
     fn test_point_mappings_de_serialization_single() {
         let mut rng = StdRng::seed_from_u64(RAND_SEED);
 
         const SIZE: usize = 400_000;
-
         let mappings = CompressedPointMappings::random(&mut rng, SIZE as u32);
 
         for i in 0..SIZE {
             let mut buf = vec![];
 
             let internal_id = i as PointOffsetType;
-
             let expected_external = mappings.external_id(internal_id).unwrap();
 
             ImmutableIdTracker::write_entry(&mut buf, internal_id, expected_external).unwrap();
@@ -813,157 +781,4 @@             assert_eq!(expected_external, got_external);
         }
     }
-
-    const DEFAULT_VERSION: SeqNumberType = 42;
-
-    fn make_in_memory_tracker_from_memory() -> InMemoryIdTracker {
-        let mut id_tracker = InMemoryIdTracker::new();
-
-        for value in TEST_POINTS.iter() {
-            let internal_id = id_tracker.total_point_count() as PointOffsetType;
-            id_tracker.set_link(*value, internal_id).unwrap();
-            id_tracker
-                .set_internal_version(internal_id, DEFAULT_VERSION)
-                .unwrap()
-        }
-
-        id_tracker
-    }
-
-    fn make_immutable_tracker(path: &Path) -> ImmutableIdTracker {
-        let id_tracker = make_in_memory_tracker_from_memory();
-        ImmutableIdTracker::from_in_memory_tracker(id_tracker, path).unwrap()
-    }
-
-    #[test]
-    fn test_id_tracker_equal() {
-        let in_memory_id_tracker = make_in_memory_tracker_from_memory();
-
-        let immutable_id_tracker_dir = Builder::new()
-            .prefix("storage_dir_immutable")
-            .tempdir()
-            .unwrap();
-        let immutable_id_tracker = make_immutable_tracker(immutable_id_tracker_dir.path());
-
-        assert_eq!(
-            in_memory_id_tracker.available_point_count(),
-            immutable_id_tracker.available_point_count()
-        );
-        assert_eq!(
-            in_memory_id_tracker.total_point_count(),
-            immutable_id_tracker.total_point_count()
-        );
-
-        for (internal, external) in TEST_POINTS.iter().enumerate() {
-            let internal = internal as PointOffsetType;
-
-            assert_eq!(
-                in_memory_id_tracker.internal_id(*external),
-                immutable_id_tracker.internal_id(*external)
-            );
-
-            assert_eq!(
-                in_memory_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default(),
-                immutable_id_tracker
-                    .internal_version(internal)
-                    .unwrap_or_default()
-            );
-
-            assert_eq!(
-                in_memory_id_tracker.external_id(internal),
-                immutable_id_tracker.external_id(internal)
-            );
-        }
-    }
-
-    #[test]
-    fn simple_id_tracker_vs_immutable_tracker_congruence() {
-        let dir = Builder::new().prefix("storage_dir").tempdir().unwrap();
-        let db = open_db(dir.path(), &[DB_VECTOR_CF]).unwrap();
-
-        let mut id_tracker = InMemoryIdTracker::new();
-        let mut simple_id_tracker = SimpleIdTracker::open(db).unwrap();
-
-        // Insert 100 random points into id_tracker
-
-        let num_points = 200;
-        let mut rng = StdRng::seed_from_u64(RAND_SEED);
-
-        for _ in 0..num_points {
-            // Generate num id in range from 0 to 100
-
-            let point_id = PointIdType::NumId(rng.random_range(0..num_points as u64));
-
-            let version = rng.random_range(0..1000);
-
-            let internal_id_mmap = id_tracker.total_point_count() as PointOffsetType;
-            let internal_id_simple = simple_id_tracker.total_point_count() as PointOffsetType;
-
-            assert_eq!(internal_id_mmap, internal_id_simple);
-
-            if id_tracker.internal_id(point_id).is_some() {
-                id_tracker.drop(point_id).unwrap();
-            }
-            id_tracker.set_link(point_id, internal_id_mmap).unwrap();
-            id_tracker
-                .set_internal_version(internal_id_mmap, version)
-                .unwrap();
-
-            if simple_id_tracker.internal_id(point_id).is_some() {
-                simple_id_tracker.drop(point_id).unwrap();
-            }
-            simple_id_tracker
-                .set_link(point_id, internal_id_simple)
-                .unwrap();
-            simple_id_tracker
-                .set_internal_version(internal_id_simple, version)
-                .unwrap();
-        }
-
-        let immutable_id_tracker =
-            ImmutableIdTracker::from_in_memory_tracker(id_tracker, dir.path()).unwrap();
-        drop(immutable_id_tracker);
-
-        let immutable_id_tracker = ImmutableIdTracker::open(dir.path()).unwrap();
-
-        for (external_id, internal_id) in simple_id_tracker.iter_from(None) {
-            assert_eq!(
-                simple_id_tracker.internal_version(internal_id).unwrap(),
-                immutable_id_tracker.internal_version(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id),
-                immutable_id_tracker.external_id(internal_id)
-            );
-            assert_eq!(
-                external_id,
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id).unwrap(),
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-        }
-
-        for (external_id, internal_id) in immutable_id_tracker.iter_from(None) {
-            assert_eq!(
-                simple_id_tracker.internal_version(internal_id).unwrap(),
-                immutable_id_tracker.internal_version(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id),
-                immutable_id_tracker.external_id(internal_id)
-            );
-            assert_eq!(
-                external_id,
-                simple_id_tracker.external_id(internal_id).unwrap()
-            );
-            assert_eq!(
-                simple_id_tracker.external_id(internal_id).unwrap(),
-                immutable_id_tracker.external_id(internal_id).unwrap()
-            );
-        }
-    }
 }