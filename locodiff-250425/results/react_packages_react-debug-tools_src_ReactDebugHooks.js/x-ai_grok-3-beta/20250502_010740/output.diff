
index 2048a82a..2db7a8ed 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpnafhaasa_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmpgxl40m4n_actual.txt	
@@ -26,12 +26,6 @@ import type {TransitionStatus} from 'react-reconciler/src/ReactFiberConfig';
 import ErrorStackParser from 'error-stack-parser';
 import assign from 'shared/assign';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
-import {
-  FunctionComponent,
-  SimpleMemoComponent,
-  ContextProvider,
-  ForwardRef,
-} from 'react-reconciler/src/ReactWorkTags';
 import {
   REACT_MEMO_CACHE_SENTINEL,
   REACT_CONTEXT_TYPE,
@@ -61,10 +55,17 @@ type Dispatch<A> = A => void;
 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
-type Hook = {
-  memoizedState: any,
-  next: Hook | null,
-};
+let currentFiber: null | Fiber = null;
+let currentHook: null | Hook = null;
+let currentContextDependency: null | ContextDependency<mixed> = null;
+
+function nextHook(): null | Hook {
+  const hook = currentHook;
+  if (hook !== null) {
+    currentHook = hook.next;
+  }
+  return hook;
+}
 
 function getPrimitiveStackCache(): Map<string, Array<any>> {
   // This initializes a cache of all primitive hooks so that the top
@@ -78,10 +79,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
       Dispatcher.useState(null);
       Dispatcher.useReducer((s: mixed, a: mixed) => s, null);
       Dispatcher.useRef(null);
-      if (typeof Dispatcher.useCacheRefresh === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.useCacheRefresh();
-      }
       Dispatcher.useLayoutEffect(() => {});
       Dispatcher.useInsertionEffect(() => {});
       Dispatcher.useEffect(() => {});
@@ -125,9 +122,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
           );
         } catch (x) {}
       }
-
-      Dispatcher.useId();
-
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
@@ -144,18 +138,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
   return primitiveStackCache;
 }
 
-let currentFiber: null | Fiber = null;
-let currentHook: null | Hook = null;
-let currentContextDependency: null | ContextDependency<mixed> = null;
-
-function nextHook(): null | Hook {
-  const hook = currentHook;
-  if (hook !== null) {
-    currentHook = hook.next;
-  }
-  return hook;
-}
-
 function readContext<T>(context: ReactContext<T>): T {
   if (currentFiber === null) {
     // Hook inspection without access to the Fiber tree
@@ -449,6 +431,34 @@ function useMemo<T>(
   return value;
 }
 
+function useMemoCache(size: number): Array<mixed> {
+  const fiber = currentFiber;
+  // Don't throw, in case this is called from getPrimitiveStackCache
+  if (fiber == null) {
+    return [];
+  }
+
+  const memoCache =
+    // $FlowFixMe[incompatible-use]: updateQueue is mixed
+    fiber.updateQueue != null ? fiber.updateQueue.memoCache : null;
+  if (memoCache == null) {
+    return [];
+  }
+
+  let data = memoCache.data[memoCache.index];
+  if (data === undefined) {
+    data = memoCache.data[memoCache.index] = new Array(size);
+    for (let i = 0; i < size; i++) {
+      data[i] = REACT_MEMO_CACHE_SENTINEL;
+    }
+  }
+
+  // We don't write anything to hookLog on purpose, so this hook remains invisible to users.
+
+  memoCache.index++;
+  return data;
+}
+
 function useSyncExternalStore<T>(
   subscribe: (() => void) => () => void,
   getSnapshot: () => T,
@@ -522,36 +532,6 @@ function useId(): string {
   return id;
 }
 
-// useMemoCache is an implementation detail of Forget's memoization
-// it should not be called directly in user-generated code
-function useMemoCache(size: number): Array<mixed> {
-  const fiber = currentFiber;
-  // Don't throw, in case this is called from getPrimitiveStackCache
-  if (fiber == null) {
-    return [];
-  }
-
-  const memoCache =
-    // $FlowFixMe[incompatible-use]: updateQueue is mixed
-    fiber.updateQueue != null ? fiber.updateQueue.memoCache : null;
-  if (memoCache == null) {
-    return [];
-  }
-
-  let data = memoCache.data[memoCache.index];
-  if (data === undefined) {
-    data = memoCache.data[memoCache.index] = new Array(size);
-    for (let i = 0; i < size; i++) {
-      data[i] = REACT_MEMO_CACHE_SENTINEL;
-    }
-  }
-
-  // We don't write anything to hookLog on purpose, so this hook remains invisible to users.
-
-  memoCache.index++;
-  return data;
-}
-
 function useOptimistic<S, A>(
   passthrough: S,
   reducer: ?(S, A) => S,
@@ -1281,8 +1261,6 @@ export function inspectHooksOfFiber(
   // Warm up the cache so that it doesn't consume the currentHook.
   getPrimitiveStackCache();
 
-  // Set up the current hook so that we can step through and read the
-  // current state from them.
   currentHook = (fiber.memoizedState: Hook);
   currentFiber = fiber;
 
