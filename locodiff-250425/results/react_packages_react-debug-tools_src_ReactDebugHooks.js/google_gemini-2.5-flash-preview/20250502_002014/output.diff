--- react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected)+++ react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual)@@ -10,7 +10,6 @@ import type {
   Awaited,
   ReactContext,
-  StartTransitionOptions,
   Usable,
   Thenable,
   ReactDebugInfo,
@@ -61,10 +60,17 @@ 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
-type Hook = {
-  memoizedState: any,
-  next: Hook | null,
-};
+let currentFiber: null | Fiber = null;
+let currentHook: null | Hook = null;
+let currentContextDependency: null | ContextDependency<mixed> = null;
+
+function nextHook(): null | Hook {
+  const hook = currentHook;
+  if (hook !== null) {
+    currentHook = hook.next;
+  }
+  return hook;
+}
 
 function getPrimitiveStackCache(): Map<string, Array<any>> {
   // This initializes a cache of all primitive hooks so that the top
@@ -78,10 +84,6 @@       Dispatcher.useState(null);
       Dispatcher.useReducer((s: mixed, a: mixed) => s, null);
       Dispatcher.useRef(null);
-      if (typeof Dispatcher.useCacheRefresh === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.useCacheRefresh();
-      }
       Dispatcher.useLayoutEffect(() => {});
       Dispatcher.useInsertionEffect(() => {});
       Dispatcher.useEffect(() => {});
@@ -104,56 +106,26 @@         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
-      Dispatcher.useId();
-
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
+
+      Dispatcher.useId();
     } finally {
       readHookLog = hookLog;
       hookLog = [];
     }
     for (let i = 0; i < readHookLog.length; i++) {
       const hook = readHookLog[i];
-      cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));
+      cache.set(hook.dispatcherHookName, ErrorStackParser.parse(hook.stackError));
     }
     primitiveStackCache = cache;
   }
   return primitiveStackCache;
 }
 
-let currentFiber: null | Fiber = null;
-let currentHook: null | Hook = null;
-let currentContextDependency: null | ContextDependency<mixed> = null;
-
-function nextHook(): null | Hook {
-  const hook = currentHook;
-  if (hook !== null) {
-    currentHook = hook.next;
-  }
-  return hook;
+function getCacheForType<T>(resourceType: () => T): T {
+  throw new Error('Not implemented.');
 }
 
 function readContext<T>(context: ReactContext<T>): T {
@@ -341,7 +313,7 @@ 
 function useLayoutEffect(
   create: () => (() => void) | void,
-  inputs: Array<mixed> | void | null,
+  deps: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -356,7 +328,7 @@ 
 function useInsertionEffect(
   create: () => mixed,
-  inputs: Array<mixed> | void | null,
+  deps: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -387,7 +359,7 @@ function useImperativeHandle<T>(
   ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,
   create: () => T,
-  inputs: Array<mixed> | void | null,
+  deps: Array<mixed> | void | null,
 ): void {
   nextHook();
   // We don't actually store the instance anywhere if there is no ref callback
@@ -419,7 +391,7 @@   });
 }
 
-function useCallback<T>(callback: T, inputs: Array<mixed> | void | null): T {
+function useCallback<T>(callback: T, deps: Array<mixed> | void | null): T {
   const hook = nextHook();
   hookLog.push({
     displayName: null,
@@ -432,10 +404,7 @@   return callback;
 }
 
-function useMemo<T>(
-  nextCreate: () => T,
-  inputs: Array<mixed> | void | null,
-): T {
+function useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T {
   const hook = nextHook();
   const value = hook !== null ? hook.memoizedState[0] : nextCreate();
   hookLog.push({
@@ -471,10 +440,7 @@   return value;
 }
 
-function useTransition(): [
-  boolean,
-  (callback: () => void, options?: StartTransitionOptions) => void,
-] {
+function useTransition(): [boolean, (callback: () => void) => void] {
   // useTransition() composes multiple hooks internally.
   // Advance the current hook index the same number of times
   // so that subsequent hooks have the right memoized state.
@@ -522,8 +488,6 @@   return id;
 }
 
-// useMemoCache is an implementation detail of Forget's memoization
-// it should not be called directly in user-generated code
 function useMemoCache(size: number): Array<mixed> {
   const fiber = currentFiber;
   // Don't throw, in case this is called from getPrimitiveStackCache
@@ -763,6 +727,7 @@   useReducer,
   useRef,
   useState,
+
   useDebugValue,
   useDeferredValue,
   useTransition,
@@ -887,7 +852,7 @@ 
 function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   const stackCache = getPrimitiveStackCache();
-  const primitiveStack = stackCache.get(hook.primitive);
+  const primitiveStack = stackCache.get(hook.dispatcherHookName);
   if (primitiveStack === undefined) {
     return -1;
   }
@@ -944,14 +909,21 @@   if (!functionName) {
     return '';
   }
-  let startIndex = functionName.lastIndexOf('[as ');
+  let startIndex = functionName.lastIndexOf('[');
 
   if (startIndex !== -1) {
-    // Workaround for sourcemaps in Jest and Chrome.
-    // In `node --enable-source-maps`, we don't see "Object.useHostTransitionStatus [as useFormStatus]" but "Object.useFormStatus"
-    // "Object.useHostTransitionStatus [as useFormStatus]" -> "useFormStatus"
-    return parseHookName(functionName.slice(startIndex + '[as '.length, -1));
-  }
+    // In Jest and Chrome, function name can be "Object.useHostTransitionStatus [as useFormStatus]"
+    // We should ignore whatever is after "[as" here.
+    // Example: "Object.useHostTransitionStatus [as useFormStatus]" -> "useFormStatus"
+    startIndex = functionName.lastIndexOf('[as ');
+    if (startIndex !== -1) {
+      return parseHookName(functionName.slice(startIndex + '[as '.length, -1));
+    }
+    // Otherwise, there is a prefix but not one we care about, e.g., packages/react-reconciler/src/ReactFiberCommitWork.js:2443
+    // So we don't gain anything from parsing it.
+    startIndex = -1;
+  }
+
   startIndex = functionName.lastIndexOf('.');
   if (startIndex === -1) {
     startIndex = 0;
@@ -1185,6 +1157,8 @@     renderFunction(props);
   } catch (error) {
     handleRenderFunctionError(error);
+    const rootStack = ErrorStackParser.parse(ancestorStackError);
+    return buildTree(rootStack, hookLog);
   } finally {
     readHookLog = hookLog;
     hookLog = [];
@@ -1226,17 +1200,20 @@   currentDispatcher: CurrentDispatcherRef,
 ): HooksTree {
   const previousDispatcher = currentDispatcher.H;
+  currentDispatcher.H = DispatcherProxy;
   let readHookLog;
-  currentDispatcher.H = DispatcherProxy;
   let ancestorStackError;
   try {
     ancestorStackError = new Error();
     renderFunction(props, ref);
   } catch (error) {
     handleRenderFunctionError(error);
+    const rootStack = ErrorStackParser.parse(ancestorStackError);
+    return buildTree(rootStack, hookLog);
   } finally {
     readHookLog = hookLog;
     hookLog = [];
+    // $FlowFixMe[incompatible-use] found when upgrading Flow
     currentDispatcher.H = previousDispatcher;
   }
   const rootStack = ErrorStackParser.parse(ancestorStackError);
