
index 2048a82a3..11ee48aa6 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpp0lh4thf_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmpmsll4rdi_actual.txt	
@@ -10,6 +10,7 @@
 import type {
   Awaited,
   ReactContext,
+  ReactProviderType,
   StartTransitionOptions,
   Usable,
   Thenable,
@@ -78,10 +79,7 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
       Dispatcher.useState(null);
       Dispatcher.useReducer((s: mixed, a: mixed) => s, null);
       Dispatcher.useRef(null);
-      if (typeof Dispatcher.useCacheRefresh === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.useCacheRefresh();
-      }
+      Dispatcher.useCacheRefresh();
       Dispatcher.useLayoutEffect(() => {});
       Dispatcher.useInsertionEffect(() => {});
       Dispatcher.useEffect(() => {});
@@ -104,30 +102,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
-      Dispatcher.useId();
-
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
@@ -162,12 +136,6 @@ function readContext<T>(context: ReactContext<T>): T {
     // e.g. when warming up the primitive stack cache or during `ReactDebugTools.inspectHooks()`.
     return context._currentValue;
   } else {
-    if (currentContextDependency === null) {
-      throw new Error(
-        'Context reads do not line up with context dependencies. This is a bug in React Debug Tools.',
-      );
-    }
-
     let value: T;
     // For now we don't expose readContext usage in the hooks debugging info.
     if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
@@ -188,13 +156,13 @@ function readContext<T>(context: ReactContext<T>): T {
 }
 
 const SuspenseException: mixed = new Error(
-  "Suspense Exception: This is not a real error! It's an implementation " +
+  'Suspense Exception: This is not a real error! It\'s an implementation ' +
     'detail of `use` to interrupt the current render. You must either ' +
     'rethrow it immediately, or move the `use` call outside of the ' +
     '`try/catch` block. Capturing without rethrowing will lead to ' +
     'unexpected behavior.\n\n' +
     'To handle async errors, wrap your component in an error boundary, or ' +
-    "call the promise's `.catch` method and pass the result to `use`.",
+    'call the promise\'s `.catch` method and pass the result to `use`.',
 );
 
 function use<T>(usable: Usable<T>): T {
@@ -276,7 +244,7 @@ function useState<S>(
       ? hook.memoizedState
       : typeof initialState === 'function'
         ? // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types
-          initialState()
+        initialState()
         : initialState;
   hookLog.push({
     displayName: null,
@@ -751,7 +719,6 @@ function useEffectEvent<Args, F: (...Array<Args>) => mixed>(callback: F): F {
 
 const Dispatcher: DispatcherType = {
   readContext,
-
   use,
   useCallback,
   useContext,
@@ -1008,8 +975,7 @@ function buildTree(
         // Compare the current level's stack to the new stack.
         while (commonSteps < stack.length && commonSteps < prevStack.length) {
           const stackSource = stack[stack.length - commonSteps - 1].source;
-          const prevSource =
-            prevStack[prevStack.length - commonSteps - 1].source;
+          const prevSource = prevStack[prevStack.length - commonSteps - 1].source;
           if (stackSource !== prevSource) {
             break;
           }
@@ -1040,7 +1006,6 @@ function buildTree(
             fileName: stackFrame.fileName,
           },
         };
-
         levelChildren.push(levelChild);
         stackOfChildren.push(levelChildren);
         levelChildren = children;
@@ -1067,7 +1032,7 @@ function buildTree(
     const levelChild: HooksNode = {
       id,
       isStateEditable,
-      name,
+      name: name,
       value: hook.value,
       subHooks: [],
       debugInfo: debugInfo,
@@ -1215,10 +1180,6 @@ function setupContexts(contextMap: Map<ReactContext<any>, any>, fiber: Fiber) {
   }
 }
 
-function restoreContexts(contextMap: Map<ReactContext<any>, any>) {
-  contextMap.forEach((value, context) => (context._currentValue = value));
-}
-
 function inspectHooksOfForwardRef<Props, Ref>(
   renderFunction: (Props, Ref) => React$Node,
   props: Props,
@@ -1277,7 +1238,6 @@ export function inspectHooksOfFiber(
       'Unknown Fiber. Needs to be a function component to inspect hooks.',
     );
   }
-
   // Warm up the cache so that it doesn't consume the currentHook.
   getPrimitiveStackCache();
 
@@ -1333,7 +1293,6 @@ export function inspectHooksOfFiber(
         currentDispatcher,
       );
     }
-
     return inspectHooks(type, props, currentDispatcher);
   } finally {
     currentFiber = null;
@@ -1342,4 +1301,8 @@ export function inspectHooksOfFiber(
 
     restoreContexts(contextMap);
   }
+}
+
+function restoreContexts(contextMap: Map<ReactContext<any>, any>) {
+  contextMap.forEach((value, context) => (context._currentValue = value));
 }
\ No newline at end of file
