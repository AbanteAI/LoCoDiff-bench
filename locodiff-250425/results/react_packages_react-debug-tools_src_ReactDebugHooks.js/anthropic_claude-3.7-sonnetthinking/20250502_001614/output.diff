
index 2048a82a..2a598b84 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpzbe1_yjt_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmpodz_q8os_actual.txt	
@@ -10,6 +10,7 @@
 import type {
   Awaited,
   ReactContext,
+  ReactProviderType,
   StartTransitionOptions,
   Usable,
   Thenable,
@@ -61,6 +62,10 @@ type Dispatch<A> = A => void;
 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
+let currentFiber: null | Fiber = null;
+let currentHook: null | Hook = null;
+let currentContextDependency: null | ContextDependency<mixed> = null;
+
 type Hook = {
   memoizedState: any,
   next: Hook | null,
@@ -144,10 +149,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
   return primitiveStackCache;
 }
 
-let currentFiber: null | Fiber = null;
-let currentHook: null | Hook = null;
-let currentContextDependency: null | ContextDependency<mixed> = null;
-
 function nextHook(): null | Hook {
   const hook = currentHook;
   if (hook !== null) {
@@ -922,17 +923,15 @@ function parseTrimmedStack(rootStack: any, hook: HookLogEntry) {
   const hookStack = ErrorStackParser.parse(hook.stackError);
   const rootIndex = findCommonAncestorIndex(rootStack, hookStack);
   const primitiveIndex = findPrimitiveIndex(hookStack, hook);
-  if (
+  if (primitiveIndex === -1) {
+    // Something went wrong. Give up.
+    return [null, null];
+  } else if (
     rootIndex === -1 ||
     primitiveIndex === -1 ||
     rootIndex - primitiveIndex < 2
   ) {
-    if (primitiveIndex === -1) {
-      // Something went wrong. Give up.
-      return [null, null];
-    } else {
-      return [hookStack[primitiveIndex - 1], null];
-    }
+    return [hookStack[primitiveIndex - 1], null];
   }
   return [
     hookStack[primitiveIndex - 1],
@@ -1024,7 +1023,7 @@ function buildTree(
       // The remaining part of the new stack are custom hooks. Push them
       // to the tree.
       for (let j = stack.length - commonSteps - 1; j >= 1; j--) {
-        const children: Array<HooksNode> = [];
+        const children = [];
         const stackFrame = stack[j];
         const levelChild: HooksNode = {
           id: null,
@@ -1099,11 +1098,6 @@ function buildTree(
   return rootChildren;
 }
 
-// Custom hooks support user-configurable labels (via the special useDebugValue() hook).
-// That hook adds user-provided values to the hooks tree,
-// but these values aren't intended to appear alongside of the other hooks.
-// Instead they should be attributed to their parent custom hook.
-// This method walks the tree and assigns debug values to their custom hook owners.
 function processDebugValues(
   hooksTree: HooksTree,
   parentHooksNode: HooksNode | null,
