--- react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected)+++ react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual)@@ -10,6 +10,7 @@ import type {
   Awaited,
   ReactContext,
+  ReactProviderType,
   StartTransitionOptions,
   Usable,
   Thenable,
@@ -27,16 +28,16 @@ import assign from 'shared/assign';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
 import {
+  REACT_CONTEXT_TYPE,
+  REACT_MEMO_CACHE_SENTINEL,
+} from 'shared/ReactSymbols';
+import hasOwnProperty from 'shared/hasOwnProperty';
+import {
   FunctionComponent,
   SimpleMemoComponent,
   ContextProvider,
   ForwardRef,
 } from 'react-reconciler/src/ReactWorkTags';
-import {
-  REACT_MEMO_CACHE_SENTINEL,
-  REACT_CONTEXT_TYPE,
-} from 'shared/ReactSymbols';
-import hasOwnProperty from 'shared/hasOwnProperty';
 
 type CurrentDispatcherRef = typeof ReactSharedInternals;
 
@@ -104,30 +105,6 @@         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
-      Dispatcher.useId();
-
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
@@ -158,8 +135,6 @@ 
 function readContext<T>(context: ReactContext<T>): T {
   if (currentFiber === null) {
-    // Hook inspection without access to the Fiber tree
-    // e.g. when warming up the primitive stack cache or during `ReactDebugTools.inspectHooks()`.
     return context._currentValue;
   } else {
     if (currentContextDependency === null) {
@@ -169,17 +144,10 @@     }
 
     let value: T;
-    // For now we don't expose readContext usage in the hooks debugging info.
     if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
       value = ((currentContextDependency.memoizedValue: any): T);
-
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
       currentContextDependency = currentContextDependency.next;
     } else {
-      // Before React 18, we did not have `memoizedValue` so we rely on `setupContexts` in those versions.
-      // Multiple reads of the same context were also only tracked as a single dependency.
-      // We just give up on advancing context dependencies and solely rely on `setupContexts`.
       value = context._currentValue;
     }
 
@@ -199,7 +167,6 @@ 
 function use<T>(usable: Usable<T>): T {
   if (usable !== null && typeof usable === 'object') {
-    // $FlowFixMe[method-unbinding]
     if (typeof usable.then === 'function') {
       const thenable: Thenable<any> = (usable: any);
       switch (thenable.status) {
@@ -221,8 +188,6 @@           throw rejectedError;
         }
       }
-      // If this was an uncached Promise we have to abandon this attempt
-      // but we can still emit anything up until this point.
       hookLog.push({
         displayName: null,
         primitive: 'Unresolved',
@@ -241,7 +206,7 @@         displayName: context.displayName || 'Context',
         primitive: 'Context (use)',
         stackError: new Error(),
-        value,
+        value: value,
         debugInfo: null,
         dispatcherHookName: 'Use',
       });
@@ -249,8 +214,6 @@       return value;
     }
   }
-
-  // eslint-disable-next-line react-internal/safe-string-coercion
   throw new Error('An unsupported type was passed to use(): ' + String(usable));
 }
 
@@ -390,10 +353,6 @@   inputs: Array<mixed> | void | null,
 ): void {
   nextHook();
-  // We don't actually store the instance anywhere if there is no ref callback
-  // and if there is a ref callback it might not store it but if it does we
-  // have no way of knowing where. So let's only enable introspection of the
-  // ref itself if it is using the object form.
   let instance: ?T = undefined;
   if (ref !== null && typeof ref === 'object') {
     instance = ref.current;
@@ -454,11 +413,7 @@   getSnapshot: () => T,
   getServerSnapshot?: () => T,
 ): T {
-  // useSyncExternalStore() composes multiple hooks internally.
-  // Advance the current hook index the same number of times
-  // so that subsequent hooks have the right memoized state.
-  nextHook(); // SyncExternalStore
-  nextHook(); // Effect
+  nextHook();
   const value = getSnapshot();
   hookLog.push({
     displayName: null,
@@ -475,11 +430,8 @@   boolean,
   (callback: () => void, options?: StartTransitionOptions) => void,
 ] {
-  // useTransition() composes multiple hooks internally.
-  // Advance the current hook index the same number of times
-  // so that subsequent hooks have the right memoized state.
   const stateHook = nextHook();
-  nextHook(); // Callback
+  nextHook();
 
   const isPending = stateHook !== null ? stateHook.memoizedState : false;
 
@@ -520,36 +472,6 @@     dispatcherHookName: 'Id',
   });
   return id;
-}
-
-// useMemoCache is an implementation detail of Forget's memoization
-// it should not be called directly in user-generated code
-function useMemoCache(size: number): Array<mixed> {
-  const fiber = currentFiber;
-  // Don't throw, in case this is called from getPrimitiveStackCache
-  if (fiber == null) {
-    return [];
-  }
-
-  const memoCache =
-    // $FlowFixMe[incompatible-use]: updateQueue is mixed
-    fiber.updateQueue != null ? fiber.updateQueue.memoCache : null;
-  if (memoCache == null) {
-    return [];
-  }
-
-  let data = memoCache.data[memoCache.index];
-  if (data === undefined) {
-    data = memoCache.data[memoCache.index] = new Array(size);
-    for (let i = 0; i < size; i++) {
-      data[i] = REACT_MEMO_CACHE_SENTINEL;
-    }
-  }
-
-  // We don't write anything to hookLog on purpose, so this hook remains invisible to users.
-
-  memoCache.index++;
-  return data;
 }
 
 function useOptimistic<S, A>(
@@ -579,9 +501,9 @@   initialState: Awaited<S>,
   permalink?: string,
 ): [Awaited<S>, (P) => void, boolean] {
-  const hook = nextHook(); // FormState
-  nextHook(); // PendingState
-  nextHook(); // ActionQueue
+  const hook = nextHook();
+  nextHook();
+  nextHook();
   const stackError = new Error();
   let value;
   let debugInfo = null;
@@ -592,7 +514,6 @@     if (
       typeof actionResult === 'object' &&
       actionResult !== null &&
-      // $FlowFixMe[method-unbinding]
       typeof actionResult.then === 'function'
     ) {
       const thenable: Thenable<Awaited<S>> = (actionResult: any);
@@ -609,8 +530,6 @@           break;
         }
         default:
-          // If this was an uncached Promise we have to abandon this attempt
-          // but we can still emit anything up until this point.
           error = SuspenseException;
           debugInfo =
             thenable._debugInfo === undefined ? null : thenable._debugInfo;
@@ -636,11 +555,7 @@     throw error;
   }
 
-  // value being a Thenable is equivalent to error being not null
-  // i.e. we only reach this point with Awaited<S>
   const state = ((value: any): Awaited<S>);
-
-  // TODO: support displaying pending value
   return [state, (payload: P) => {}, false];
 }
 
@@ -649,9 +564,9 @@   initialState: Awaited<S>,
   permalink?: string,
 ): [Awaited<S>, (P) => void, boolean] {
-  const hook = nextHook(); // FormState
-  nextHook(); // PendingState
-  nextHook(); // ActionQueue
+  const hook = nextHook();
+  nextHook();
+  nextHook();
   const stackError = new Error();
   let value;
   let debugInfo = null;
@@ -662,7 +577,6 @@     if (
       typeof actionResult === 'object' &&
       actionResult !== null &&
-      // $FlowFixMe[method-unbinding]
       typeof actionResult.then === 'function'
     ) {
       const thenable: Thenable<Awaited<S>> = (actionResult: any);
@@ -679,8 +593,6 @@           break;
         }
         default:
-          // If this was an uncached Promise we have to abandon this attempt
-          // but we can still emit anything up until this point.
           error = SuspenseException;
           debugInfo =
             thenable._debugInfo === undefined ? null : thenable._debugInfo;
@@ -706,21 +618,15 @@     throw error;
   }
 
-  // value being a Thenable is equivalent to error being not null
-  // i.e. we only reach this point with Awaited<S>
   const state = ((value: any): Awaited<S>);
-
-  // TODO: support displaying pending value
   return [state, (payload: P) => {}, false];
 }
 
 function useHostTransitionStatus(): TransitionStatus {
   const status = readContext<TransitionStatus>(
-    // $FlowFixMe[prop-missing] `readContext` only needs _currentValue
     ({
-      // $FlowFixMe[incompatible-cast] TODO: Incorrect bottom value without access to Fiber config.
       _currentValue: null,
-    }: ReactContext<TransitionStatus>),
+    }: any),
   );
 
   hookLog.push({
@@ -772,13 +678,33 @@   useFormState,
   useActionState,
   useOptimistic,
-  useMemoCache,
+  useMemoCache: function (size: number): Array<mixed> {
+    const fiber = currentFiber;
+    if (fiber == null) {
+      return [];
+    }
+
+    const memoCache =
+      fiber.updateQueue != null ? fiber.updateQueue.memoizedState : null;
+    if (memoCache == null) {
+      return [];
+    }
+
+    let data = memoCache.data[memoCache.index];
+    if (data === undefined) {
+      data = new Array(size);
+      for (let i = 0; i < size; i++) {
+        data[i] = REACT_MEMO_CACHE_SENTINEL;
+      }
+    }
+
+    memoCache.index++;
+    return data;
+  },
   useCacheRefresh,
   useEffectEvent,
 };
 
-// create a proxy to throw a custom error
-// in case future versions of React adds more hooks
 const DispatcherProxyHandler = {
   get(target: DispatcherType, prop: string) {
     if (target.hasOwnProperty(prop)) {
@@ -786,20 +712,12 @@       return target[prop];
     }
     const error = new Error('Missing method in Dispatcher: ' + prop);
-    // Note: This error name needs to stay in sync with react-devtools-shared
-    // TODO: refactor this if we ever combine the devtools and debug tools packages
     error.name = 'ReactDebugToolsUnsupportedHookError';
     throw error;
   },
 };
 
-// `Proxy` may not exist on some platforms
-const DispatcherProxy =
-  typeof Proxy === 'undefined'
-    ? Dispatcher
-    : new Proxy(Dispatcher, DispatcherProxyHandler);
-
-// Inspect
+const DispatcherProxy = new Proxy(Dispatcher, DispatcherProxyHandler);
 
 export type HookSource = {
   lineNumber: number | null,
@@ -819,33 +737,18 @@ };
 export type HooksTree = Array<HooksNode>;
 
-// Don't assume
-//
-// We can't assume that stack frames are nth steps away from anything.
-// E.g. we can't assume that the root call shares all frames with the stack
-// of a hook call. A simple way to demonstrate this is wrapping `new Error()`
-// in a wrapper constructor like a polyfill. That'll add an extra frame.
-// Similar things can happen with the call to the dispatcher. The top frame
-// may not be the primitive.
-//
-// We also can't assume that the last frame of the root call is the same
-// frame as the last frame of the hook call because long stack traces can be
-// truncated to a stack trace limit.
-
 let mostLikelyAncestorIndex = 0;
 
 function findSharedIndex(hookStack: any, rootStack: any, rootIndex: number) {
   const source = rootStack[rootIndex].source;
   hookSearch: for (let i = 0; i < hookStack.length; i++) {
     if (hookStack[i].source === source) {
-      // This looks like a match. Validate that the rest of both stack match up.
       for (
         let a = rootIndex + 1, b = i + 1;
         a < rootStack.length && b < hookStack.length;
         a++, b++
       ) {
         if (hookStack[b].source !== rootStack[a].source) {
-          // If not, give up and try a different match.
           continue hookSearch;
         }
       }
@@ -856,16 +759,10 @@ }
 
 function findCommonAncestorIndex(rootStack: any, hookStack: any) {
-  let rootIndex = findSharedIndex(
-    hookStack,
-    rootStack,
-    mostLikelyAncestorIndex,
-  );
+  let rootIndex = findSharedIndex(hookStack, rootStack, mostLikelyAncestorIndex);
   if (rootIndex !== -1) {
     return rootIndex;
   }
-  // If the most likely one wasn't a hit, try any other frame to see if it is shared.
-  // If that takes more than 5 frames, something probably went wrong.
   for (let i = 0; i < rootStack.length && i < 5; i++) {
     rootIndex = findSharedIndex(hookStack, rootStack, i);
     if (rootIndex !== -1) {
@@ -887,16 +784,12 @@ 
 function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   const stackCache = getPrimitiveStackCache();
-  const primitiveStack = stackCache.get(hook.primitive);
+  const primitiveStack = stackCache.get(hook.dispatcherHookName);
   if (primitiveStack === undefined) {
     return -1;
   }
   for (let i = 0; i < primitiveStack.length && i < hookStack.length; i++) {
-    // Note: there is no guarantee that we will find the top-most primitive frame in the stack
-    // For React Native (uses Hermes), these source fields will be identical and skipped
     if (primitiveStack[i].source !== hookStack[i].source) {
-      // If the next two frames are functions called `useX` then we assume that they're part of the
-      // wrappers that the React package or other packages adds around the dispatcher.
       if (
         i < hookStack.length - 1 &&
         isReactWrapper(hookStack[i].functionName, hook.dispatcherHookName)
@@ -909,7 +802,6 @@       ) {
         i++;
       }
-
       return i;
     }
   }
@@ -917,8 +809,6 @@ }
 
 function parseTrimmedStack(rootStack: any, hook: HookLogEntry) {
-  // Get the stack trace between the primitive hook function and
-  // the root function call. I.e. the stack frames of custom hooks.
   const hookStack = ErrorStackParser.parse(hook.stackError);
   const rootIndex = findCommonAncestorIndex(rootStack, hookStack);
   const primitiveIndex = findPrimitiveIndex(hookStack, hook);
@@ -928,7 +818,6 @@     rootIndex - primitiveIndex < 2
   ) {
     if (primitiveIndex === -1) {
-      // Something went wrong. Give up.
       return [null, null];
     } else {
       return [hookStack[primitiveIndex - 1], null];
@@ -941,45 +830,23 @@ }
 
 function parseHookName(functionName: void | string): string {
-  if (!functionName) {
-    return '';
-  }
-  let startIndex = functionName.lastIndexOf('[as ');
-
-  if (startIndex !== -1) {
-    // Workaround for sourcemaps in Jest and Chrome.
-    // In `node --enable-source-maps`, we don't see "Object.useHostTransitionStatus [as useFormStatus]" but "Object.useFormStatus"
-    // "Object.useHostTransitionStatus [as useFormStatus]" -> "useFormStatus"
-    return parseHookName(functionName.slice(startIndex + '[as '.length, -1));
-  }
-  startIndex = functionName.lastIndexOf('.');
-  if (startIndex === -1) {
-    startIndex = 0;
-  } else {
-    startIndex += 1;
-  }
-
-  if (functionName.slice(startIndex).startsWith('unstable_')) {
+  if (!functionName) return '';
+  let startIndex = functionName.lastIndexOf('.');
+  if (startIndex === -1) startIndex = 0; else startIndex += 1;
+  const substr = functionName.slice(startIndex);
+  if (substr.startsWith('unstable_')) {
     startIndex += 'unstable_'.length;
-  }
-
-  if (functionName.slice(startIndex).startsWith('experimental_')) {
+  } else if (substr.startsWith('experimental_')) {
     startIndex += 'experimental_'.length;
   }
-
-  if (functionName.slice(startIndex, startIndex + 3) === 'use') {
-    if (functionName.length - startIndex === 3) {
-      return 'Use';
-    }
+  if (functionName.slice(startIndex).startsWith('use')) {
     startIndex += 3;
+    return functionName.slice(startIndex);
   }
   return functionName.slice(startIndex);
 }
 
-function buildTree(
-  rootStack: any,
-  readHookLog: Array<HookLogEntry>,
-): HooksTree {
+function buildTree(rootStack: any, readHookLog: Array<HookLogEntry>): HooksTree {
   const rootChildren: Array<HooksNode> = [];
   let prevStack = null;
   let levelChildren = rootChildren;
@@ -994,35 +861,22 @@     if (displayName === null && primitiveFrame !== null) {
       displayName =
         parseHookName(primitiveFrame.functionName) ||
-        // Older versions of React do not have sourcemaps.
-        // In those versions there was always a 1:1 mapping between wrapper and dispatcher method.
         parseHookName(hook.dispatcherHookName);
     }
     if (stack !== null) {
-      // Note: The indices 0 <= n < length-1 will contain the names.
-      // The indices 1 <= n < length will contain the source locations.
-      // That's why we get the name from n - 1 and don't check the source
-      // of index 0.
       let commonSteps = 0;
       if (prevStack !== null) {
-        // Compare the current level's stack to the new stack.
         while (commonSteps < stack.length && commonSteps < prevStack.length) {
           const stackSource = stack[stack.length - commonSteps - 1].source;
-          const prevSource =
-            prevStack[prevStack.length - commonSteps - 1].source;
-          if (stackSource !== prevSource) {
-            break;
-          }
+          const prevSource = prevStack[prevStack.length - commonSteps - 1].source;
+          if (stackSource !== prevSource) break;
           commonSteps++;
         }
-        // Pop back the stack as many steps as were not common.
         for (let j = prevStack.length - 1; j > commonSteps; j--) {
           // $FlowFixMe[incompatible-type]
           levelChildren = stackOfChildren.pop();
         }
       }
-      // The remaining part of the new stack are custom hooks. Push them
-      // to the tree.
       for (let j = stack.length - commonSteps - 1; j >= 1; j--) {
         const children: Array<HooksNode> = [];
         const stackFrame = stack[j];
@@ -1040,7 +894,6 @@             fileName: stackFrame.fileName,
           },
         };
-
         levelChildren.push(levelChild);
         stackOfChildren.push(levelChildren);
         levelChildren = children;
@@ -1049,8 +902,6 @@     }
     const {primitive, debugInfo} = hook;
 
-    // For now, the "id" of stateful hooks is just the stateful hook index.
-    // Custom hooks have no ids, nor do non-stateful native hooks (e.g. Context, DebugValue).
     const id =
       primitive === 'Context' ||
       primitive === 'Context (use)' ||
@@ -1061,7 +912,6 @@         ? null
         : nativeHookID++;
 
-    // For the time being, only State and Reducer hooks support runtime overrides.
     const isStateEditable = primitive === 'Reducer' || primitive === 'State';
     const name = displayName || primitive;
     const levelChild: HooksNode = {
@@ -1093,23 +943,15 @@     levelChildren.push(levelChild);
   }
 
-  // Associate custom hook values (useDebugValue() hook entries) with the correct hooks.
   processDebugValues(rootChildren, null);
-
   return rootChildren;
 }
 
-// Custom hooks support user-configurable labels (via the special useDebugValue() hook).
-// That hook adds user-provided values to the hooks tree,
-// but these values aren't intended to appear alongside of the other hooks.
-// Instead they should be attributed to their parent custom hook.
-// This method walks the tree and assigns debug values to their custom hook owners.
 function processDebugValues(
   hooksTree: HooksTree,
   parentHooksNode: HooksNode | null,
 ): void {
   const debugValueHooksNodes: Array<HooksNode> = [];
-
   for (let i = 0; i < hooksTree.length; i++) {
     const hooksNode = hooksTree[i];
     if (hooksNode.name === 'DebugValue' && hooksNode.subHooks.length === 0) {
@@ -1121,9 +963,6 @@     }
   }
 
-  // Bubble debug value labels to their custom hook owner.
-  // If there is no parent hook, just ignore them for now.
-  // (We may warn about this in the future.)
   if (parentHooksNode !== null) {
     if (debugValueHooksNodes.length === 1) {
       parentHooksNode.value = debugValueHooksNodes[0].value;
@@ -1134,31 +973,15 @@ }
 
 function handleRenderFunctionError(error: any): void {
-  // original error might be any type.
-  if (error === SuspenseException) {
-    // An uncached Promise was used. We can't synchronously resolve the rest of
-    // the Hooks but we can at least show what ever we got so far.
-    return;
-  }
-  if (
-    error instanceof Error &&
-    error.name === 'ReactDebugToolsUnsupportedHookError'
-  ) {
+  if (error === SuspenseException) return;
+  if (error instanceof Error && error.name === 'ReactDebugToolsUnsupportedHookError') {
     throw error;
   }
-  // If the error is not caused by an unsupported feature, it means
-  // that the error is caused by user's code in renderFunction.
-  // In this case, we should wrap the original error inside a custom error
-  // so that devtools can give a clear message about it.
-  // $FlowFixMe[extra-arg]: Flow doesn't know about 2nd argument of Error constructor
   const wrapperError = new Error('Error rendering inspected component', {
     cause: error,
   });
-  // Note: This error name needs to stay in sync with react-devtools-shared
-  // TODO: refactor this if we ever combine the devtools and debug tools packages
   wrapperError.name = 'ReactDebugToolsRenderError';
-  // this stage-4 proposal is not supported by all environments yet.
-  // $FlowFixMe[prop-missing] Flow doesn't have this type yet.
+  // $FlowFixMe[prop-missing]
   wrapperError.cause = error;
   throw wrapperError;
 }
@@ -1168,8 +991,6 @@   props: Props,
   currentDispatcher: ?CurrentDispatcherRef,
 ): HooksTree {
-  // DevTools will pass the current renderer's injected dispatcher.
-  // Other apps might compile debug hooks as part of their app though.
   if (currentDispatcher == null) {
     currentDispatcher = ReactSharedInternals;
   }
@@ -1179,7 +1000,6 @@ 
   let readHookLog;
   let ancestorStackError;
-
   try {
     ancestorStackError = new Error();
     renderFunction(props);
@@ -1188,7 +1008,6 @@   } finally {
     readHookLog = hookLog;
     hookLog = [];
-    // $FlowFixMe[incompatible-use] found when upgrading Flow
     currentDispatcher.H = previousDispatcher;
   }
   const rootStack = ErrorStackParser.parse(ancestorStackError);
@@ -1201,13 +1020,10 @@     if (current.tag === ContextProvider) {
       let context: ReactContext<any> = current.type;
       if ((context: any)._context !== undefined) {
-        // Support inspection of pre-19+ providers.
         context = (context: any)._context;
       }
       if (!contextMap.has(context)) {
-        // Store the current value that we're going to restore later.
         contextMap.set(context, context._currentValue);
-        // Set the inner most provider value on the context.
         context._currentValue = current.memoizedProps.value;
       }
     }
@@ -1245,7 +1061,6 @@ 
 function resolveDefaultProps(Component: any, baseProps: any) {
   if (Component && Component.defaultProps) {
-    // Resolve default props. Taken from ReactElement
     const props = assign({}, baseProps);
     const defaultProps = Component.defaultProps;
     for (const propName in defaultProps) {
@@ -1262,8 +1077,6 @@   fiber: Fiber,
   currentDispatcher: ?CurrentDispatcherRef,
 ): HooksTree {
-  // DevTools will pass the current renderer's injected dispatcher.
-  // Other apps might compile debug hooks as part of their app though.
   if (currentDispatcher == null) {
     currentDispatcher = ReactSharedInternals;
   }
@@ -1278,16 +1091,12 @@     );
   }
 
-  // Warm up the cache so that it doesn't consume the currentHook.
   getPrimitiveStackCache();
 
-  // Set up the current hook so that we can step through and read the
-  // current state from them.
   currentHook = (fiber.memoizedState: Hook);
   currentFiber = fiber;
 
   if (hasOwnProperty.call(currentFiber, 'dependencies')) {
-    // $FlowFixMe[incompatible-use]: Flow thinks hasOwnProperty might have nulled `currentFiber`
     const dependencies = currentFiber.dependencies;
     currentContextDependency =
       dependencies !== null ? dependencies.firstContext : null;
@@ -1304,9 +1113,7 @@     currentContextDependency =
       contextDependencies !== null ? contextDependencies.first : null;
   } else {
-    throw new Error(
-      'Unsupported React version. This is a bug in React Debug Tools.',
-    );
+    throw new Error('Unsupported React version.');
   }
 
   const type = fiber.type;
@@ -1315,7 +1122,6 @@     props = resolveDefaultProps(type, props);
   }
 
-  // Only used for versions of React without memoized context value in context dependencies.
   const contextMap = new Map<ReactContext<any>, any>();
   try {
     if (
