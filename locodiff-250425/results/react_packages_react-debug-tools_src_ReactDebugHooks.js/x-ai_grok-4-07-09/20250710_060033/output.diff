
index 2048a82a3..18f162971 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpl51faerg_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmpmbd3dwob_actual.txt	
@@ -10,7 +10,6 @@
 import type {
   Awaited,
   ReactContext,
-  StartTransitionOptions,
   Usable,
   Thenable,
   ReactDebugInfo,
@@ -26,12 +25,6 @@ import type {TransitionStatus} from 'react-reconciler/src/ReactFiberConfig';
 import ErrorStackParser from 'error-stack-parser';
 import assign from 'shared/assign';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
-import {
-  FunctionComponent,
-  SimpleMemoComponent,
-  ContextProvider,
-  ForwardRef,
-} from 'react-reconciler/src/ReactWorkTags';
 import {
   REACT_MEMO_CACHE_SENTINEL,
   REACT_CONTEXT_TYPE,
@@ -61,10 +54,9 @@ type Dispatch<A> = A => void;
 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
-type Hook = {
-  memoizedState: any,
-  next: Hook | null,
-};
+let currentFiber: null | Fiber = null;
+let currentHook: null | Hook = null;
+let currentContextDependency: null | ContextDependency<mixed> = null;
 
 function getPrimitiveStackCache(): Map<string, Array<any>> {
   // This initializes a cache of all primitive hooks so that the top
@@ -88,22 +80,16 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
       Dispatcher.useImperativeHandle(undefined, () => null);
       Dispatcher.useDebugValue(null);
       Dispatcher.useCallback(() => {});
-      Dispatcher.useTransition();
-      Dispatcher.useSyncExternalStore(
-        () => () => {},
-        () => null,
-        () => null,
-      );
-      Dispatcher.useDeferredValue(null);
       Dispatcher.useMemo(() => null);
-      Dispatcher.useOptimistic(null, (s: mixed, a: mixed) => s);
-      Dispatcher.useFormState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useActionState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useHostTransitionStatus();
       if (typeof Dispatcher.useMemoCache === 'function') {
         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
+      Dispatcher.useOptimistic(null, (s: mixed, a: mixed) => s);
+      Dispatcher.useFormState((s: mixed, p: mixed) => s, null);
+      Dispatcher.useActionState((s: mixed, p: mixed) => s, null);
+      Dispatcher.useHostTransitionStatus();
+      Dispatcher.useEffectEvent((args: empty) => {});
       if (typeof Dispatcher.use === 'function') {
         // This type check is for Flow only.
         Dispatcher.use(
@@ -125,29 +111,20 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
           );
         } catch (x) {}
       }
-
-      Dispatcher.useId();
-
-      if (typeof Dispatcher.useEffectEvent === 'function') {
-        Dispatcher.useEffectEvent((args: empty) => {});
-      }
     } finally {
       readHookLog = hookLog;
       hookLog = [];
     }
     for (let i = 0; i < readHookLog.length; i++) {
       const hook = readHookLog[i];
-      cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));
+      cache.set(hook.dispatcherHookName, ErrorStackParser.parse(hook.stackError));
     }
     primitiveStackCache = cache;
   }
   return primitiveStackCache;
 }
 
-let currentFiber: null | Fiber = null;
 let currentHook: null | Hook = null;
-let currentContextDependency: null | ContextDependency<mixed> = null;
-
 function nextHook(): null | Hook {
   const hook = currentHook;
   if (hook !== null) {
@@ -171,10 +148,10 @@ function readContext<T>(context: ReactContext<T>): T {
     let value: T;
     // For now we don't expose readContext usage in the hooks debugging info.
     if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
+      // $FlowFixMe[incompatible-use]: Flow thinks `hasOwnProperty` mutates `currentContextDependency`
       value = ((currentContextDependency.memoizedValue: any): T);
 
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
+      // $FlowFixMe[incompatible-use]: Flow thinks `hasOwnProperty` mutates `currentContextDependency`
       currentContextDependency = currentContextDependency.next;
     } else {
       // Before React 18, we did not have `memoizedValue` so we rely on `setupContexts` in those versions.
@@ -238,7 +215,7 @@ function use<T>(usable: Usable<T>): T {
       const value = readContext(context);
 
       hookLog.push({
-        displayName: context.displayName || 'Context',
+        displayName: context.displayName || 'Context (use)',
         primitive: 'Context (use)',
         stackError: new Error(),
         value,
@@ -275,9 +252,9 @@ function useState<S>(
     hook !== null
       ? hook.memoizedState
       : typeof initialState === 'function'
-        ? // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types
-          initialState()
-        : initialState;
+      ? // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types
+        initialState()
+      : initialState;
   hookLog.push({
     displayName: null,
     primitive: 'State',
@@ -371,7 +348,7 @@ function useInsertionEffect(
 
 function useEffect(
   create: () => (() => void) | void,
-  deps: Array<mixed> | void | null,
+  inputs: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -769,12 +746,12 @@ const Dispatcher: DispatcherType = {
   useSyncExternalStore,
   useId,
   useHostTransitionStatus,
-  useFormState,
-  useActionState,
   useOptimistic,
   useMemoCache,
   useCacheRefresh,
   useEffectEvent,
+  useFormState,
+  useActionState,
 };
 
 // create a proxy to throw a custom error
@@ -817,6 +794,7 @@ export type HooksNode = {
   debugInfo: null | ReactDebugInfo,
   hookSource: null | HookSource,
 };
+
 export type HooksTree = Array<HooksNode>;
 
 // Don't assume
@@ -877,17 +855,12 @@ function findCommonAncestorIndex(rootStack: any, hookStack: any) {
 }
 
 function isReactWrapper(functionName: any, wrapperName: string) {
-  const hookName = parseHookName(functionName);
-  if (wrapperName === 'HostTransitionStatus') {
-    return hookName === wrapperName || hookName === 'FormStatus';
-  }
-
-  return hookName === wrapperName;
+  return parseHookName(functionName) === wrapperName;
 }
 
 function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   const stackCache = getPrimitiveStackCache();
-  const primitiveStack = stackCache.get(hook.primitive);
+  const primitiveStack = stackCache.get(hook.dispatcherHookName);
   if (primitiveStack === undefined) {
     return -1;
   }
@@ -902,12 +875,11 @@ function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
         isReactWrapper(hookStack[i].functionName, hook.dispatcherHookName)
       ) {
         i++;
-      }
-      if (
-        i < hookStack.length - 1 &&
-        isReactWrapper(hookStack[i].functionName, hook.dispatcherHookName)
-      ) {
-        i++;
+        // Guard against the dispatcher call being inlined.
+        // At this point we wouldn't be able to recover the actual React Hook name.
+        if (i < hookStack.length - 1) {
+          i++;
+        }
       }
 
       return i;
@@ -1016,8 +988,8 @@ function buildTree(
           commonSteps++;
         }
         // Pop back the stack as many steps as were not common.
+        // $FlowFixMe[incompatible-type]
         for (let j = prevStack.length - 1; j > commonSteps; j--) {
-          // $FlowFixMe[incompatible-type]
           levelChildren = stackOfChildren.pop();
         }
       }
@@ -1025,7 +997,6 @@ function buildTree(
       // to the tree.
       for (let j = stack.length - commonSteps - 1; j >= 1; j--) {
         const children: Array<HooksNode> = [];
-        const stackFrame = stack[j];
         const levelChild: HooksNode = {
           id: null,
           isStateEditable: false,
@@ -1034,10 +1005,10 @@ function buildTree(
           subHooks: children,
           debugInfo: null,
           hookSource: {
-            lineNumber: stackFrame.lineNumber,
-            columnNumber: stackFrame.columnNumber,
-            functionName: stackFrame.functionName,
-            fileName: stackFrame.fileName,
+            lineNumber: stack[j].lineNumber,
+            columnNumber: stack[j].columnNumber,
+            functionName: stack[j - 1].functionName,
+            fileName: stack[j].fileName,
           },
         };
 
@@ -1063,7 +1034,6 @@ function buildTree(
 
     // For the time being, only State and Reducer hooks support runtime overrides.
     const isStateEditable = primitive === 'Reducer' || primitive === 'State';
-    const name = displayName || primitive;
     const levelChild: HooksNode = {
       id,
       isStateEditable,
@@ -1281,6 +1251,9 @@ export function inspectHooksOfFiber(
   // Warm up the cache so that it doesn't consume the currentHook.
   getPrimitiveStackCache();
 
+  // Only used for versions of React without memoized context value in context dependencies.
+  const contextMap = new Map<ReactContext<any>, any>();
+
   // Set up the current hook so that we can step through and read the
   // current state from them.
   currentHook = (fiber.memoizedState: Hook);
@@ -1315,8 +1288,6 @@ export function inspectHooksOfFiber(
     props = resolveDefaultProps(type, props);
   }
 
-  // Only used for versions of React without memoized context value in context dependencies.
-  const contextMap = new Map<ReactContext<any>, any>();
   try {
     if (
       currentContextDependency !== null &&
