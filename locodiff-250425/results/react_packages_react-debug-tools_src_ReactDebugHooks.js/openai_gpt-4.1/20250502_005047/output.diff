
index 2048a82a..4bfc6221 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpgr2wjik9_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmpqw3lfskn_actual.txt	
@@ -61,11 +61,6 @@ type Dispatch<A> = A => void;
 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
-type Hook = {
-  memoizedState: any,
-  next: Hook | null,
-};
-
 function getPrimitiveStackCache(): Map<string, Array<any>> {
   // This initializes a cache of all primitive hooks so that the top
   // most stack frames added by calling the primitive hook can be removed.
@@ -104,30 +99,6 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
-      Dispatcher.useId();
-
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
@@ -148,6 +119,11 @@ let currentFiber: null | Fiber = null;
 let currentHook: null | Hook = null;
 let currentContextDependency: null | ContextDependency<mixed> = null;
 
+type Hook = {
+  memoizedState: any,
+  next: Hook | null,
+};
+
 function nextHook(): null | Hook {
   const hook = currentHook;
   if (hook !== null) {
@@ -271,6 +247,7 @@ function useState<S>(
   initialState: (() => S) | S,
 ): [S, Dispatch<BasicStateAction<S>>] {
   const hook = nextHook();
+  // prettier-ignore
   const state: S =
     hook !== null
       ? hook.memoizedState
@@ -340,7 +317,7 @@ function useCacheRefresh(): () => void {
 }
 
 function useLayoutEffect(
-  create: () => (() => void) | void,
+  create: () => mixed,
   inputs: Array<mixed> | void | null,
 ): void {
   nextHook();
@@ -834,7 +811,11 @@ export type HooksTree = Array<HooksNode>;
 
 let mostLikelyAncestorIndex = 0;
 
-function findSharedIndex(hookStack: any, rootStack: any, rootIndex: number) {
+function findSharedIndex(
+  hookStack: any,
+  rootStack: any,
+  rootIndex: number,
+): number {
   const source = rootStack[rootIndex].source;
   hookSearch: for (let i = 0; i < hookStack.length; i++) {
     if (hookStack[i].source === source) {
@@ -909,7 +890,6 @@ function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
       ) {
         i++;
       }
-
       return i;
     }
   }
@@ -1179,7 +1159,6 @@ export function inspectHooks<Props>(
 
   let readHookLog;
   let ancestorStackError;
-
   try {
     ancestorStackError = new Error();
     renderFunction(props);
@@ -1277,7 +1256,6 @@ export function inspectHooksOfFiber(
       'Unknown Fiber. Needs to be a function component to inspect hooks.',
     );
   }
-
   // Warm up the cache so that it doesn't consume the currentHook.
   getPrimitiveStackCache();
 
