
index 2048a82a3..712e1fec4 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmpb_c6pr3s_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmp539r1gzz_actual.txt	
@@ -26,17 +26,27 @@ import type {TransitionStatus} from 'react-reconciler/src/ReactFiberConfig';
 import ErrorStackParser from 'error-stack-parser';
 import assign from 'shared/assign';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
+import {
+  REACT_MEMO_CACHE_SENTINEL,
+  REACT_CONTEXT_TYPE,
+} from 'shared/ReactSymbols';
+import hasOwnProperty from 'shared/hasOwnProperty';
 import {
   FunctionComponent,
   SimpleMemoComponent,
   ContextProvider,
   ForwardRef,
 } from 'react-reconciler/src/ReactWorkTags';
-import {
-  REACT_MEMO_CACHE_SENTINEL,
-  REACT_CONTEXT_TYPE,
-} from 'shared/ReactSymbols';
-import hasOwnProperty from 'shared/hasOwnProperty';
+
+const SuspenseException: mixed = new Error(
+  "Suspense Exception: This is not a real error! It's an implementation " +
+    "detail of `use` to interrupt the current render. You must either " +
+    'rethrow it immediately, or move the `use` call outside of the ' +
+    '`try/catch` block. Capturing without rethrowing will lead to ' +
+    'unexpected behavior.\n\n' +
+    'To handle async errors, wrap your component in an error boundary, or ' +
+    "call the promise's `.catch` method and pass the result to `use`.",
+);
 
 type CurrentDispatcherRef = typeof ReactSharedInternals;
 
@@ -59,90 +69,12 @@ type BasicStateAction<S> = (S => S) | S;
 
 type Dispatch<A> = A => void;
 
-let primitiveStackCache: null | Map<string, Array<any>> = null;
-
 type Hook = {
   memoizedState: any,
   next: Hook | null,
 };
 
-function getPrimitiveStackCache(): Map<string, Array<any>> {
-  // This initializes a cache of all primitive hooks so that the top
-  // most stack frames added by calling the primitive hook can be removed.
-  if (primitiveStackCache === null) {
-    const cache = new Map<string, Array<any>>();
-    let readHookLog;
-    try {
-      // Use all hooks here to add them to the hook log.
-      Dispatcher.useContext(({_currentValue: null}: any));
-      Dispatcher.useState(null);
-      Dispatcher.useReducer((s: mixed, a: mixed) => s, null);
-      Dispatcher.useRef(null);
-      if (typeof Dispatcher.useCacheRefresh === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.useCacheRefresh();
-      }
-      Dispatcher.useLayoutEffect(() => {});
-      Dispatcher.useInsertionEffect(() => {});
-      Dispatcher.useEffect(() => {});
-      Dispatcher.useImperativeHandle(undefined, () => null);
-      Dispatcher.useDebugValue(null);
-      Dispatcher.useCallback(() => {});
-      Dispatcher.useTransition();
-      Dispatcher.useSyncExternalStore(
-        () => () => {},
-        () => null,
-        () => null,
-      );
-      Dispatcher.useDeferredValue(null);
-      Dispatcher.useMemo(() => null);
-      Dispatcher.useOptimistic(null, (s: mixed, a: mixed) => s);
-      Dispatcher.useFormState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useActionState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useHostTransitionStatus();
-      if (typeof Dispatcher.useMemoCache === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.useMemoCache(0);
-      }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
-      Dispatcher.useId();
-
-      if (typeof Dispatcher.useEffectEvent === 'function') {
-        Dispatcher.useEffectEvent((args: empty) => {});
-      }
-    } finally {
-      readHookLog = hookLog;
-      hookLog = [];
-    }
-    for (let i = 0; i < readHookLog.length; i++) {
-      const hook = readHookLog[i];
-      cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));
-    }
-    primitiveStackCache = cache;
-  }
-  return primitiveStackCache;
-}
+let primitiveStackCache: null | Map<string, Array<any>> = null;
 
 let currentFiber: null | Fiber = null;
 let currentHook: null | Hook = null;
@@ -157,46 +89,10 @@ function nextHook(): null | Hook {
 }
 
 function readContext<T>(context: ReactContext<T>): T {
-  if (currentFiber === null) {
-    // Hook inspection without access to the Fiber tree
-    // e.g. when warming up the primitive stack cache or during `ReactDebugTools.inspectHooks()`.
-    return context._currentValue;
-  } else {
-    if (currentContextDependency === null) {
-      throw new Error(
-        'Context reads do not line up with context dependencies. This is a bug in React Debug Tools.',
-      );
-    }
-
-    let value: T;
-    // For now we don't expose readContext usage in the hooks debugging info.
-    if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
-      value = ((currentContextDependency.memoizedValue: any): T);
-
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
-      currentContextDependency = currentContextDependency.next;
-    } else {
-      // Before React 18, we did not have `memoizedValue` so we rely on `setupContexts` in those versions.
-      // Multiple reads of the same context were also only tracked as a single dependency.
-      // We just give up on advancing context dependencies and solely rely on `setupContexts`.
-      value = context._currentValue;
-    }
-
-    return value;
-  }
+  // For now we don't expose readContext usage in the hooks debugging info.
+  return context._currentValue;
 }
 
-const SuspenseException: mixed = new Error(
-  "Suspense Exception: This is not a real error! It's an implementation " +
-    'detail of `use` to interrupt the current render. You must either ' +
-    'rethrow it immediately, or move the `use` call outside of the ' +
-    '`try/catch` block. Capturing without rethrowing will lead to ' +
-    'unexpected behavior.\n\n' +
-    'To handle async errors, wrap your component in an error boundary, or ' +
-    "call the promise's `.catch` method and pass the result to `use`.",
-);
-
 function use<T>(usable: Usable<T>): T {
   if (usable !== null && typeof usable === 'object') {
     // $FlowFixMe[method-unbinding]
@@ -206,7 +102,7 @@ function use<T>(usable: Usable<T>): T {
         case 'fulfilled': {
           const fulfilledValue: T = thenable.value;
           hookLog.push({
-            displayName: null,
+            displayName: thenable._debugInfo?.componentName ?? null,
             primitive: 'Promise',
             stackError: new Error(),
             value: fulfilledValue,
@@ -224,7 +120,7 @@ function use<T>(usable: Usable<T>): T {
       // If this was an uncached Promise we have to abandon this attempt
       // but we can still emit anything up until this point.
       hookLog.push({
-        displayName: null,
+        displayName: thenable._debugInfo?.componentName ?? null,
         primitive: 'Unresolved',
         stackError: new Error(),
         value: thenable,
@@ -241,7 +137,7 @@ function use<T>(usable: Usable<T>): T {
         displayName: context.displayName || 'Context',
         primitive: 'Context (use)',
         stackError: new Error(),
-        value,
+        value: value,
         debugInfo: null,
         dispatcherHookName: 'Use',
       });
@@ -275,9 +171,9 @@ function useState<S>(
     hook !== null
       ? hook.memoizedState
       : typeof initialState === 'function'
-        ? // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types
-          initialState()
-        : initialState;
+      ? // $FlowFixMe[incompatible-use]: Flow doesn't like mixed types
+        initialState()
+      : initialState;
   hookLog.push({
     displayName: null,
     primitive: 'State',
@@ -371,7 +267,7 @@ function useInsertionEffect(
 
 function useEffect(
   create: () => (() => void) | void,
-  deps: Array<mixed> | void | null,
+  inputs: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -496,16 +392,15 @@ function useTransition(): [
 
 function useDeferredValue<T>(value: T, initialValue?: T): T {
   const hook = nextHook();
-  const prevValue = hook !== null ? hook.memoizedState : value;
   hookLog.push({
     displayName: null,
     primitive: 'DeferredValue',
     stackError: new Error(),
-    value: prevValue,
+    value: hook !== null ? hook.memoizedState : value,
     debugInfo: null,
     dispatcherHookName: 'DeferredValue',
   });
-  return prevValue;
+  return value;
 }
 
 function useId(): string {
@@ -817,6 +712,7 @@ export type HooksNode = {
   debugInfo: null | ReactDebugInfo,
   hookSource: null | HookSource,
 };
+
 export type HooksTree = Array<HooksNode>;
 
 // Don't assume
@@ -887,7 +783,7 @@ function isReactWrapper(functionName: any, wrapperName: string) {
 
 function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   const stackCache = getPrimitiveStackCache();
-  const primitiveStack = stackCache.get(hook.primitive);
+  const primitiveStack = stackCache.get(hook.dispatcherHookName);
   if (primitiveStack === undefined) {
     return -1;
   }
@@ -916,36 +812,11 @@ function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   return -1;
 }
 
-function parseTrimmedStack(rootStack: any, hook: HookLogEntry) {
-  // Get the stack trace between the primitive hook function and
-  // the root function call. I.e. the stack frames of custom hooks.
-  const hookStack = ErrorStackParser.parse(hook.stackError);
-  const rootIndex = findCommonAncestorIndex(rootStack, hookStack);
-  const primitiveIndex = findPrimitiveIndex(hookStack, hook);
-  if (
-    rootIndex === -1 ||
-    primitiveIndex === -1 ||
-    rootIndex - primitiveIndex < 2
-  ) {
-    if (primitiveIndex === -1) {
-      // Something went wrong. Give up.
-      return [null, null];
-    } else {
-      return [hookStack[primitiveIndex - 1], null];
-    }
-  }
-  return [
-    hookStack[primitiveIndex - 1],
-    hookStack.slice(primitiveIndex, rootIndex - 1),
-  ];
-}
-
 function parseHookName(functionName: void | string): string {
   if (!functionName) {
     return '';
   }
   let startIndex = functionName.lastIndexOf('[as ');
-
   if (startIndex !== -1) {
     // Workaround for sourcemaps in Jest and Chrome.
     // In `node --enable-source-maps`, we don't see "Object.useHostTransitionStatus [as useFormStatus]" but "Object.useFormStatus"
@@ -976,6 +847,23 @@ function parseHookName(functionName: void | string): string {
   return functionName.slice(startIndex);
 }
 
+function parseTrimmedStack(rootStack: any, hook: HookLogEntry) {
+  // Get the stack trace between the primitive hook function and
+  // the root function call. I.e. the stack frames of custom hooks.
+  const hookStack = ErrorStackParser.parse(hook.stackError);
+  const rootIndex = findCommonAncestorIndex(rootStack, hookStack);
+  const primitiveIndex = findPrimitiveIndex(hookStack, hook);
+  if (primitiveIndex === -1) {
+    // Something went wrong. Give up.
+    return [hookStack[0], null];
+  }
+  if (rootIndex === -1 || rootIndex - primitiveIndex < 2) {
+    // We cannot form a stack with at least two frames (one primitive and one custom)
+    return [hookStack[primitiveIndex - 1], null];
+  }
+  return [hookStack[primitiveIndex - 1], hookStack.slice(primitiveIndex, rootIndex - 1)];
+}
+
 function buildTree(
   rootStack: any,
   readHookLog: Array<HookLogEntry>,
@@ -992,11 +880,17 @@ function buildTree(
     const stack = parseResult[1];
     let displayName = hook.displayName;
     if (displayName === null && primitiveFrame !== null) {
-      displayName =
-        parseHookName(primitiveFrame.functionName) ||
+      const frameFunctionName =
+        primitiveFrame.functionName != null
+          ? parseHookName(primitiveFrame.functionName)
+          : null;
+      if (frameFunctionName) {
+        displayName = frameFunctionName;
+      } else {
         // Older versions of React do not have sourcemaps.
         // In those versions there was always a 1:1 mapping between wrapper and dispatcher method.
-        parseHookName(hook.dispatcherHookName);
+        displayName = parseHookName(hook.dispatcherHookName);
+      }
     }
     if (stack !== null) {
       // Note: The indices 0 <= n < length-1 will contain the names.
@@ -1063,11 +957,10 @@ function buildTree(
 
     // For the time being, only State and Reducer hooks support runtime overrides.
     const isStateEditable = primitive === 'Reducer' || primitive === 'State';
-    const name = displayName || primitive;
     const levelChild: HooksNode = {
       id,
       isStateEditable,
-      name,
+      name: primitive,
       value: hook.value,
       subHooks: [],
       debugInfo: debugInfo,
@@ -1080,12 +973,19 @@ function buildTree(
       fileName: null,
       columnNumber: null,
     };
-    if (stack && stack.length >= 1) {
-      const stackFrame = stack[0];
-      hookSource.lineNumber = stackFrame.lineNumber;
-      hookSource.functionName = stackFrame.functionName;
-      hookSource.fileName = stackFrame.fileName;
-      hookSource.columnNumber = stackFrame.columnNumber;
+    if (primitiveFrame !== null) {
+      if (primitiveFrame.lineNumber != null) {
+        hookSource.lineNumber = primitiveFrame.lineNumber;
+      }
+      if (primitiveFrame.functionName != null) {
+        hookSource.functionName = primitiveFrame.functionName;
+      }
+      if (primitiveFrame.fileName != null) {
+        hookSource.fileName = primitiveFrame.fileName;
+      }
+      if (primitiveFrame.columnNumber != null) {
+        hookSource.columnNumber = primitiveFrame.columnNumber;
+      }
     }
 
     levelChild.hookSource = hookSource;
@@ -1099,11 +999,7 @@ function buildTree(
   return rootChildren;
 }
 
-// Custom hooks support user-configurable labels (via the special useDebugValue() hook).
-// That hook adds user-provided values to the hooks tree,
-// but these values aren't intended to appear alongside of the other hooks.
-// Instead they should be attributed to their parent custom hook.
-// This method walks the tree and assigns debug values to their custom hook owners.
+// Associate custom hook values (useDebugValue() hook entries) with the correct hooks.
 function processDebugValues(
   hooksTree: HooksTree,
   parentHooksNode: HooksNode | null,
@@ -1112,7 +1008,10 @@ function processDebugValues(
 
   for (let i = 0; i < hooksTree.length; i++) {
     const hooksNode = hooksTree[i];
-    if (hooksNode.name === 'DebugValue' && hooksNode.subHooks.length === 0) {
+    if (
+      hooksNode.name === 'DebugValue' &&
+      hooksNode.subHooks.length === 0
+    ) {
       hooksTree.splice(i, 1);
       i--;
       debugValueHooksNodes.push(hooksNode);
@@ -1134,12 +1033,12 @@ function processDebugValues(
 }
 
 function handleRenderFunctionError(error: any): void {
-  // original error might be any type.
   if (error === SuspenseException) {
     // An uncached Promise was used. We can't synchronously resolve the rest of
     // the Hooks but we can at least show what ever we got so far.
     return;
   }
+  // original error might be any type.
   if (
     error instanceof Error &&
     error.name === 'ReactDebugToolsUnsupportedHookError'
@@ -1188,14 +1087,16 @@ export function inspectHooks<Props>(
   } finally {
     readHookLog = hookLog;
     hookLog = [];
-    // $FlowFixMe[incompatible-use] found when upgrading Flow
     currentDispatcher.H = previousDispatcher;
   }
   const rootStack = ErrorStackParser.parse(ancestorStackError);
   return buildTree(rootStack, readHookLog);
 }
 
-function setupContexts(contextMap: Map<ReactContext<any>, any>, fiber: Fiber) {
+function setupContexts(
+  contextMap: Map<ReactContext<any>, any>,
+  fiber: Fiber,
+) {
   let current: null | Fiber = fiber;
   while (current) {
     if (current.tag === ContextProvider) {
@@ -1278,9 +1179,6 @@ export function inspectHooksOfFiber(
     );
   }
 
-  // Warm up the cache so that it doesn't consume the currentHook.
-  getPrimitiveStackCache();
-
   // Set up the current hook so that we can step through and read the
   // current state from them.
   currentHook = (fiber.memoizedState: Hook);
