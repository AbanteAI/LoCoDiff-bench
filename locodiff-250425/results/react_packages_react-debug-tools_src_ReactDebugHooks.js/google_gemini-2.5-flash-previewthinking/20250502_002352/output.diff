
index 2048a82a..e7a3f0b9 100644
--- a/react_packages_react-debug-tools_src_ReactDebugHooks.js_expectedoutput.txt (expected):tmp/tmph8757ur2_expected.txt	
+++ b/react_packages_react-debug-tools_src_ReactDebugHooks.js_extracted.txt (actual):tmp/tmphb3opecn_actual.txt	
@@ -9,8 +9,6 @@
 
 import type {
   Awaited,
-  ReactContext,
-  StartTransitionOptions,
   Usable,
   Thenable,
   ReactDebugInfo,
@@ -26,12 +24,6 @@ import type {TransitionStatus} from 'react-reconciler/src/ReactFiberConfig';
 import ErrorStackParser from 'error-stack-parser';
 import assign from 'shared/assign';
 import ReactSharedInternals from 'shared/ReactSharedInternals';
-import {
-  FunctionComponent,
-  SimpleMemoComponent,
-  ContextProvider,
-  ForwardRef,
-} from 'react-reconciler/src/ReactWorkTags';
 import {
   REACT_MEMO_CACHE_SENTINEL,
   REACT_CONTEXT_TYPE,
@@ -61,11 +53,6 @@ type Dispatch<A> = A => void;
 
 let primitiveStackCache: null | Map<string, Array<any>> = null;
 
-type Hook = {
-  memoizedState: any,
-  next: Hook | null,
-};
-
 function getPrimitiveStackCache(): Map<string, Array<any>> {
   // This initializes a cache of all primitive hooks so that the top
   // most stack frames added by calling the primitive hook can be removed.
@@ -96,48 +83,32 @@ function getPrimitiveStackCache(): Map<string, Array<any>> {
       );
       Dispatcher.useDeferredValue(null);
       Dispatcher.useMemo(() => null);
-      Dispatcher.useOptimistic(null, (s: mixed, a: mixed) => s);
-      Dispatcher.useFormState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useActionState((s: mixed, p: mixed) => s, null);
-      Dispatcher.useHostTransitionStatus();
       if (typeof Dispatcher.useMemoCache === 'function') {
         // This type check is for Flow only.
         Dispatcher.useMemoCache(0);
       }
-      if (typeof Dispatcher.use === 'function') {
-        // This type check is for Flow only.
-        Dispatcher.use(
-          ({
-            $$typeof: REACT_CONTEXT_TYPE,
-            _currentValue: null,
-          }: any),
-        );
-        Dispatcher.use({
-          then() {},
-          status: 'fulfilled',
-          value: null,
-        });
-        try {
-          Dispatcher.use(
-            ({
-              then() {},
-            }: any),
-          );
-        } catch (x) {}
-      }
-
+      Dispatcher.useOptimistic(null, (s: mixed, a: mixed) => s);
+      Dispatcher.useFormState((s: mixed, p: mixed) => s, null);
+      Dispatcher.useActionState((s: mixed, p: mixed) => s, null);
+      Dispatcher.useHostTransitionStatus();
       Dispatcher.useId();
 
+      if (typeof Dispatcher.useResourceEffect === 'function') {
+        Dispatcher.useResourceEffect(() => ({}), []);
+      }
       if (typeof Dispatcher.useEffectEvent === 'function') {
         Dispatcher.useEffectEvent((args: empty) => {});
       }
+      if (typeof Dispatcher.useSwipeTransition === 'function') {
+        Dispatcher.useSwipeTransition(null, null, null);
+      }
     } finally {
       readHookLog = hookLog;
       hookLog = [];
     }
     for (let i = 0; i < readHookLog.length; i++) {
       const hook = readHookLog[i];
-      cache.set(hook.primitive, ErrorStackParser.parse(hook.stackError));
+      cache.set(hook.dispatcherHookName, ErrorStackParser.parse(hook.stackError));
     }
     primitiveStackCache = cache;
   }
@@ -156,37 +127,6 @@ function nextHook(): null | Hook {
   return hook;
 }
 
-function readContext<T>(context: ReactContext<T>): T {
-  if (currentFiber === null) {
-    // Hook inspection without access to the Fiber tree
-    // e.g. when warming up the primitive stack cache or during `ReactDebugTools.inspectHooks()`.
-    return context._currentValue;
-  } else {
-    if (currentContextDependency === null) {
-      throw new Error(
-        'Context reads do not line up with context dependencies. This is a bug in React Debug Tools.',
-      );
-    }
-
-    let value: T;
-    // For now we don't expose readContext usage in the hooks debugging info.
-    if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
-      value = ((currentContextDependency.memoizedValue: any): T);
-
-      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
-      currentContextDependency = currentContextDependency.next;
-    } else {
-      // Before React 18, we did not have `memoizedValue` so we rely on `setupContexts` in those versions.
-      // Multiple reads of the same context were also only tracked as a single dependency.
-      // We just give up on advancing context dependencies and solely rely on `setupContexts`.
-      value = context._currentValue;
-    }
-
-    return value;
-  }
-}
-
 const SuspenseException: mixed = new Error(
   "Suspense Exception: This is not a real error! It's an implementation " +
     'detail of `use` to interrupt the current render. You must either ' +
@@ -254,6 +194,37 @@ function use<T>(usable: Usable<T>): T {
   throw new Error('An unsupported type was passed to use(): ' + String(usable));
 }
 
+function readContext<T>(context: ReactContext<T>): T {
+  if (currentFiber === null) {
+    // Hook inspection without access to the Fiber tree
+    // e.g. when warming up the primitive stack cache or during `ReactDebugTools.inspectHooks()`.
+    return context._currentValue;
+  } else {
+    if (currentContextDependency === null) {
+      throw new Error(
+        'Context reads do not line up with context dependencies. This is a bug in React Debug Tools.',
+      );
+    }
+
+    let value: T;
+    // For now we don't expose readContext usage in the hooks debugging info.
+    if (hasOwnProperty.call(currentContextDependency, 'memoizedValue')) {
+      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
+      value = ((currentContextDependency.memoizedValue: any): T);
+
+      // $FlowFixMe[incompatible-use] Flow thinks `hasOwnProperty` mutates `currentContextDependency`
+      currentContextDependency = currentContextDependency.next;
+    } else {
+      // Before React 18, we did not have `memoizedValue` so we rely on `setupContexts` in those versions.
+      // Multiple reads of the same context were also only tracked as a single dependency.
+      // We just give up on advancing context dependencies and solely rely on `setupContexts`.
+      value = context._currentValue;
+    }
+
+    return value;
+  }
+}
+
 function useContext<T>(context: ReactContext<T>): T {
   const value = readContext(context);
   hookLog.push({
@@ -341,7 +312,7 @@ function useCacheRefresh(): () => void {
 
 function useLayoutEffect(
   create: () => (() => void) | void,
-  inputs: Array<mixed> | void | null,
+  deps: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -356,7 +327,7 @@ function useLayoutEffect(
 
 function useInsertionEffect(
   create: () => mixed,
-  inputs: Array<mixed> | void | null,
+  deps: Array<mixed> | void | null,
 ): void {
   nextHook();
   hookLog.push({
@@ -471,10 +442,7 @@ function useSyncExternalStore<T>(
   return value;
 }
 
-function useTransition(): [
-  boolean,
-  (callback: () => void, options?: StartTransitionOptions) => void,
-] {
+function useTransition(): [boolean, (callback: () => void) => void] {
   // useTransition() composes multiple hooks internally.
   // Advance the current hook index the same number of times
   // so that subsequent hooks have the right memoized state.
@@ -887,7 +855,7 @@ function isReactWrapper(functionName: any, wrapperName: string) {
 
 function findPrimitiveIndex(hookStack: any, hook: HookLogEntry) {
   const stackCache = getPrimitiveStackCache();
-  const primitiveStack = stackCache.get(hook.primitive);
+  const primitiveStack = stackCache.get(hook.dispatcherHookName);
   if (primitiveStack === undefined) {
     return -1;
   }
@@ -995,7 +963,7 @@ function buildTree(
       displayName =
         parseHookName(primitiveFrame.functionName) ||
         // Older versions of React do not have sourcemaps.
-        // In those versions there was always a 1:1 mapping between wrapper and dispatcher method.
+        // In those versions there was always a 1:1 mapping between mapper and dispatcher method.
         parseHookName(hook.dispatcherHookName);
     }
     if (stack !== null) {
@@ -1057,7 +1025,9 @@ function buildTree(
       primitive === 'DebugValue' ||
       primitive === 'Promise' ||
       primitive === 'Unresolved' ||
-      primitive === 'HostTransitionStatus'
+      primitive === 'HostTransitionStatus' ||
+      primitive === 'EffectEvent' ||
+      primitive === 'ResourceEffect'
         ? null
         : nativeHookID++;
 
@@ -1080,12 +1050,11 @@ function buildTree(
       fileName: null,
       columnNumber: null,
     };
-    if (stack && stack.length >= 1) {
-      const stackFrame = stack[0];
-      hookSource.lineNumber = stackFrame.lineNumber;
-      hookSource.functionName = stackFrame.functionName;
-      hookSource.fileName = stackFrame.fileName;
-      hookSource.columnNumber = stackFrame.columnNumber;
+    if (primitiveFrame !== null) {
+      hookSource.lineNumber = primitiveFrame.lineNumber;
+      hookSource.functionName = primitiveFrame.functionName;
+      hookSource.fileName = primitiveFrame.fileName;
+      hookSource.columnNumber = primitiveFrame.columnNumber;
     }
 
     levelChild.hookSource = hookSource;
@@ -1226,8 +1195,8 @@ function inspectHooksOfForwardRef<Props, Ref>(
   currentDispatcher: CurrentDispatcherRef,
 ): HooksTree {
   const previousDispatcher = currentDispatcher.H;
-  let readHookLog;
   currentDispatcher.H = DispatcherProxy;
+  let readHookLog;
   let ancestorStackError;
   try {
     ancestorStackError = new Error();
@@ -1326,12 +1295,7 @@ export function inspectHooksOfFiber(
     }
 
     if (fiber.tag === ForwardRef) {
-      return inspectHooksOfForwardRef(
-        type.render,
-        props,
-        fiber.ref,
-        currentDispatcher,
-      );
+      return inspectHooksOfForwardRef(type.render, props, fiber.ref, currentDispatcher);
     }
 
     return inspectHooks(type, props, currentDispatcher);
