
index 4b0ef21f8..9196f4154 100644
--- a/aider_aider_run_cmd.py_expectedoutput.txt (expected):tmp/tmpow2ushjp_expected.txt	
+++ b/aider_aider_run_cmd.py_extracted.txt (actual):tmp/tmpxym0gmd8_actual.txt	
@@ -45,13 +45,11 @@ def run_cmd_subprocess(command, verbose=False, cwd=None, encoding=sys.stdout.enc
 
     try:
         shell = os.environ.get("SHELL", "/bin/sh")
-        parent_process = None
-
-        # Determine the appropriate shell
         if platform.system() == "Windows":
             parent_process = get_windows_parent_process_name()
             if parent_process == "powershell.exe":
                 command = f"powershell -Command {command}"
+            # else: use command as-is
 
         if verbose:
             print("Running command:", command)
@@ -67,7 +65,7 @@ def run_cmd_subprocess(command, verbose=False, cwd=None, encoding=sys.stdout.enc
             shell=True,
             encoding=encoding,
             errors="replace",
-            bufsize=0,  # Set bufsize to 0 for unbuffered output
+            bufsize=0,
             universal_newlines=True,
             cwd=cwd,
         )
@@ -77,8 +75,8 @@ def run_cmd_subprocess(command, verbose=False, cwd=None, encoding=sys.stdout.enc
             chunk = process.stdout.read(1)
             if not chunk:
                 break
-            print(chunk, end="", flush=True)  # Print the chunk in real-time
-            output.append(chunk)  # Store the chunk for later use
+            print(chunk, end="", flush=True)
+            output.append(chunk)
 
         process.wait()
         return process.returncode, "".join(output)
@@ -92,11 +90,10 @@ def run_cmd_pexpect(command, verbose=False, cwd=None):
 
     :param command: The command to run as a string.
     :param verbose: If True, print output in real-time.
+    :param cwd: Optional working directory.
     :return: A tuple containing (exit_status, output)
     """
-    if verbose:
-        print("Using run_cmd_pexpect:", command)
-
+    # No import pexpect needed (already imported)
     output = BytesIO()
 
     def output_callback(b):
@@ -107,8 +104,7 @@ def run_cmd_pexpect(command, verbose=False, cwd=None):
         # Use the SHELL environment variable, falling back to /bin/sh if not set
         shell = os.environ.get("SHELL", "/bin/sh")
         if verbose:
-            print("With shell:", shell)
-
+            print("Running pexpect.spawn with shell:", shell)
         if os.path.exists(shell):
             # Use the shell from SHELL environment variable
             if verbose:
@@ -122,11 +118,8 @@ def run_cmd_pexpect(command, verbose=False, cwd=None):
 
         # Transfer control to the user, capturing output
         child.interact(output_filter=output_callback)
-
-        # Wait for the command to finish and get the exit status
         child.close()
         return child.exitstatus, output.getvalue().decode("utf-8", errors="replace")
-
     except (pexpect.ExceptionPexpect, TypeError, ValueError) as e:
         error_msg = f"Error running command {command}: {e}"
         return 1, error_msg
\ No newline at end of file
