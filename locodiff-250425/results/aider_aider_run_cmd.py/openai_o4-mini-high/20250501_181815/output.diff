
index 4b0ef21f..63a8dfe6 100644
--- a/aider_aider_run_cmd.py_expectedoutput.txt (expected):tmp/tmpghat359a_expected.txt	
+++ b/aider_aider_run_cmd.py_extracted.txt (actual):tmp/tmph54z2x95_actual.txt	
@@ -12,7 +12,6 @@ def run_cmd(command, verbose=False, error_print=None, cwd=None):
     try:
         if sys.stdin.isatty() and hasattr(pexpect, "spawn") and platform.system() != "Windows":
             return run_cmd_pexpect(command, verbose, cwd)
-
         return run_cmd_subprocess(command, verbose, cwd)
     except OSError as e:
         error_message = f"Error occurred while running command '{command}': {str(e)}"
@@ -42,22 +41,13 @@ def get_windows_parent_process_name():
 def run_cmd_subprocess(command, verbose=False, cwd=None, encoding=sys.stdout.encoding):
     if verbose:
         print("Using run_cmd_subprocess:", command)
-
     try:
-        shell = os.environ.get("SHELL", "/bin/sh")
-        parent_process = None
-
-        # Determine the appropriate shell
-        if platform.system() == "Windows":
-            parent_process = get_windows_parent_process_name()
-            if parent_process == "powershell.exe":
-                command = f"powershell -Command {command}"
+        parent_process = get_windows_parent_process_name()
+        if parent_process == "powershell.exe":
+            command = f"powershell -Command {command}"
 
         if verbose:
             print("Running command:", command)
-            print("SHELL:", shell)
-            if platform.system() == "Windows":
-                print("Parent process:", parent_process)
 
         process = subprocess.Popen(
             command,
@@ -77,8 +67,8 @@ def run_cmd_subprocess(command, verbose=False, cwd=None, encoding=sys.stdout.enc
             chunk = process.stdout.read(1)
             if not chunk:
                 break
-            print(chunk, end="", flush=True)  # Print the chunk in real-time
-            output.append(chunk)  # Store the chunk for later use
+            print(chunk, end="", flush=True)
+            output.append(chunk)
 
         process.wait()
         return process.returncode, "".join(output)
@@ -94,15 +84,15 @@ def run_cmd_pexpect(command, verbose=False, cwd=None):
     :param verbose: If True, print output in real-time.
     :return: A tuple containing (exit_status, output)
     """
-    if verbose:
-        print("Using run_cmd_pexpect:", command)
-
     output = BytesIO()
 
     def output_callback(b):
         output.write(b)
         return b
 
+    if verbose:
+        print("Using run_cmd_pexpect:", command)
+
     try:
         # Use the SHELL environment variable, falling back to /bin/sh if not set
         shell = os.environ.get("SHELL", "/bin/sh")
@@ -120,13 +110,9 @@ def run_cmd_pexpect(command, verbose=False, cwd=None):
                 print("Running pexpect.spawn without shell.")
             child = pexpect.spawn(command, encoding="utf-8", cwd=cwd)
 
-        # Transfer control to the user, capturing output
         child.interact(output_filter=output_callback)
-
-        # Wait for the command to finish and get the exit status
         child.close()
         return child.exitstatus, output.getvalue().decode("utf-8", errors="replace")
-
     except (pexpect.ExceptionPexpect, TypeError, ValueError) as e:
         error_msg = f"Error running command {command}: {e}"
         return 1, error_msg
\ No newline at end of file
