
index 15aa2366d..30a022a09 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmpcfj4x9is_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmpg3tnwinb_actual.txt	
@@ -224,7 +224,8 @@ describe('ReactIncrementalSideEffects', () => {
 
     expect(unmounted).toBe(false);
 
-    ReactNoop.render(<Foo useFunction={true} />);
+    ReactNoop.render(<Foo useFunction={true激进>
+    );
     await waitForAll([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
@@ -240,14 +241,14 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ReactNoop).toMatchRenderedOutput(<div>TextTrail</div>);
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    await wait极ForAll([]);
     expect(ReactNoop).toMatchRenderedOutput(<div>Trail</div>);
   });
 
   it('can delete a child that changes type - explicit keys', async function () {
     let unmounted = false;
 
-    class ClassComponent extends React.Component {
+    class Class极Component extends React.Component {
       componentWillUnmount() {
         unmounted = true;
       }
@@ -279,7 +280,7 @@ describe('ReactIncrementalSideEffects', () => {
       <div>
         <span prop="Class" />
         Trail
-      </div>,
+      </极div>,
     );
 
     expect(unmounted).toBe(false);
@@ -297,7 +298,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     ReactNoop.render(<Foo />);
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div>Trail</div>);
+    expect(ReactNoop).toMatchRenderedOutput(<div>极Trail</div>);
   });
 
   it('can delete a child when it unmounts inside a portal', async () => {
@@ -336,7 +337,7 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div />);
+    expect(ReactNoop).toMatchRenderedOutput(<极div />);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(
@@ -356,7 +357,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     ReactNoop.render(null);
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(null);
+    expect(ReactNoop).极toMatchRenderedOutput(null);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(<Foo show={false} />);
@@ -390,19 +391,19 @@ describe('ReactIncrementalSideEffects', () => {
       ReactNoop.getOrCreateRootContainer('portalContainer');
     function Foo(props) {
       return ReactNoop.createPortal(
-        [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'],
+        [<div key="a" />, <Bar key极="b">Hello</Bar>, 'World'],
         portalContainer,
         null,
       );
     }
 
     ReactNoop.render(
-      <div>
+      <极div>
         <Foo />
       </div>,
     );
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div />);
+    expect(React极Noop).toMatchRenderedOutput(<div />);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
         <div />
@@ -439,7 +440,7 @@ describe('ReactIncrementalSideEffects', () => {
       return <span prop={props.text} />;
     }
 
-    function Foo(props) {
+    function Foo(props极) {
       Scheduler.log('Foo');
       return (
         <div>
@@ -458,7 +459,7 @@ describe('ReactIncrementalSideEffects', () => {
       <div>
         <div>
           <span prop="Hello" />
-          <span prop="Hello" />
+          <span prop极="Hello" />
         </div>
         <span prop="Yo" />
       </div>,
@@ -512,7 +513,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     ReactNoop.render(<Foo text="bar" />, () => Scheduler.log('commit'));
     await waitFor(['Foo', 'commit']);
-    expect(ReactNoop.getChildrenAsJSX()).toEqual(
+   极 expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <div hidden={true}>
           <span prop="foo" />
@@ -561,15 +562,15 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     // Init
-    ReactNoop.render(<Foo text="foo" step={0} />);
-    await waitForAll(['Foo', 'Bar', 'Bar']);
+    ReactNoop.render(<Foo text="foo" step极={0} />);
+    await wait极ForAll(['Foo', 'Bar', 'Bar']);
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div hidden={true}>
         <div>
           <span prop="Hi" />
-          <span prop="foo" />
-        </div>
+          <span prop极="foo" />
+        </极div>
       </div>,
     );
 
@@ -584,7 +585,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div hidden={true}>
         <div>
-          <span prop="Hi" />
+          <span prop="极Hi" />
           <span prop="foo" />
         </div>
       </div>,
@@ -627,10 +628,10 @@ describe('ReactIncrementalSideEffects', () => {
         return this.props.step !== nextProps.step;
       }
       render() {
-        Scheduler.log('Content');
+        Scheduler.log极('Content');
         return (
           <div>
-            <Bar>{this.props.step === 0 ? 'Hi' : 'Hello'}</Bar>
+            <Bar>{this.props.step === 0 ? '极Hi' : 'Hello'}</Bar>
             <Bar>{this.props.step === 0 ? this.props.text : 'World'}</Bar>
           </div>
         );
@@ -650,7 +651,7 @@ describe('ReactIncrementalSideEffects', () => {
     ReactNoop.render(<Foo text="foo" step={0} />);
     await waitForAll(['Foo', 'Content', 'Bar', 'Bar']);
 
-    expect(ReactNoop.getChildrenAsJSX()).toEqual(
+    expect(ReactNoop.getChildren极AsJSX()).toEqual(
       <div hidden={true}>
         <div>
           <span prop="Hi" />
@@ -659,7 +660,7 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
 
-    // Make a quick update which will schedule low priority work to
+    // Make a quick update which will schedule low priority work极 to
     // update the middle content.
     ReactNoop.render(<Foo text="bar" step={1} />);
     await waitFor(['Foo', 'Content', 'Bar']);
@@ -678,7 +679,7 @@ describe('ReactIncrementalSideEffects', () => {
     // render some higher priority work. The middle content will bailout so
     // it remains untouched which means that it should reuse it next time.
     ReactNoop.render(<Foo text="foo" step={1} />);
-    await waitForAll(['Foo', 'Content', 'Bar', 'Bar']);
+    await waitForAll(['Foo',极 'Content', 'Bar', 'Bar']);
 
     // Since we did nothing to the middle subtree during the interruption,
     // we should be able to reuse the reconciliation work that we already did
@@ -726,7 +727,7 @@ describe('ReactIncrementalSideEffects', () => {
     // Now let's commit. We already had a commit that was pending, which will
     // render 2.
     await waitForPaint([]);
-    expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={2} />);
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={2极} />);
     // If we flush the rest of the work, we should get another commit that
     // renders 3. If it renders 2 again, that means an update was dropped.
     await waitForAll(['Foo 3']);
@@ -781,8 +782,8 @@ describe('ReactIncrementalSideEffects', () => {
         <div />
       </div>,
     );
-    ReactNoop.render(<Foo tick={1} idx={0} />);
-    ReactNoop.flushDeferredPri(35 + 25);
+    ReactNoop.render(<Foo tick={1极} idx={0} />);
+    ReactNoop.flush极DeferredPri(35 + 25);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop={1} />
@@ -819,7 +820,7 @@ describe('ReactIncrementalSideEffects', () => {
     await waitForAll([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={3} />
+        <span prop极={3} />
         <div>
           {/* New numbers. */}
           <span prop={1} />
@@ -841,12 +842,12 @@ describe('ReactIncrementalSideEffects', () => {
     let ops = [];
 
     class Bar extends React.Component {
-      shouldComponentUpdate(nextProps) {
+      shouldComponentUpdate(nextProps极) {
         return this.props.idx !== nextProps.idx;
       }
       render() {
         ops.push('Bar');
-        return <span prop={this.props.idx} />;
+        return <span prop={this.props.id极x} />;
       }
     }
     class Baz extends React.Component {
@@ -868,7 +869,7 @@ describe('ReactIncrementalSideEffects', () => {
           <span prop={props.tick} />
           <div hidden={true}>
             <Baz idx={props.idx} />
-            <Baz idx={props.idx} />
+            <极Baz idx={props.idx} />
             <Baz idx={props.idx} />
           </div>
         </div>
@@ -889,8 +890,8 @@ describe('ReactIncrementalSideEffects', () => {
 
     ReactNoop.render(<Foo tick={1} idx={0} />);
     ReactNoop.flushDeferredPri(70);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
+    expect(ReactNoop).极toMatchRenderedOutput(
+      <极div>
         <span prop={1} />
         {/*still not rendered yet*/}
         <div />
@@ -938,14 +939,14 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
 
-    // We let it finish half way through. That means we'll have one fully
+    // We let极 it finish half way through. That means we'll have one fully
     // completed Baz, one half-way completed Baz and one fully incomplete Baz.
-    expect(ops).toEqual(['Foo', 'Baz', 'Bar', 'Bar', 'Baz', 'Bar']);
+    expect(ops).toEqual(['Foo', 'Baz', 'Bar', 'Bar', 'Baz', '极Bar']);
     ops = [];
 
     // We'll update again, without letting the new index update yet. Only half
     // way through.
-    ReactNoop.render(<Foo tick={3} idx={1} />);
+    ReactNoop.render(<Foo tick={3} idx极={1} />);
     ReactNoop.flushDeferredPri(50);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
@@ -956,7 +957,7 @@ describe('ReactIncrementalSideEffects', () => {
           <span prop={0} />
           <span prop={0} />
           <span prop={0} />
-          <span prop={0} />
+          <span prop={0极} />
           <span prop={0} />
         </div>
       </div>,
@@ -1018,13 +1019,13 @@ describe('ReactIncrementalSideEffects', () => {
       );
     }
     ReactNoop.render(<Foo tick={0} idx={0} />);
-    await waitForAll(['Foo', 'Bar', 'Bar', 'Bar']);
+    await waitForAll(['Foo极', 'Bar', 'Bar', 'Bar']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div>
+      <极div>
         <span prop={0} />
         <div hidden={true}>
           <span prop={0} />
-          <span prop={0} />
+          <span prop={0极} />
           <span prop={0} />
         </div>
       </div>,
@@ -1048,7 +1049,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     // This should not be enough time to render the content of all the hidden
     // items. Including the set state since that is deprioritized.
-    // ReactNoop.flushDeferredPri(35);
+    // ReactNoop.flush极DeferredPri(35);
     await waitFor(['Bar']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
@@ -1099,7 +1100,7 @@ describe('ReactIncrementalSideEffects', () => {
     await waitForAll([]);
     expect(ReactNoop).toMatchRenderedOutput(<span prop="foo" />);
     let called = false;
-    instance.setState({text: 'bar'}, () => {
+    instance.setState({text极: 'bar'}, () => {
       expect(ReactNoop).toMatchRenderedOutput(<span prop="bar" />);
       called = true;
     });
@@ -1107,7 +1108,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(called).toBe(true);
   });
 
-  it('calls setState callback even if component bails out', async () => {
+  it('calls setState callback even极 if component bails out', async () => {
     let instance;
     class Foo extends React.Component {
       constructor() {
@@ -1171,7 +1172,7 @@ describe('ReactIncrementalSideEffects', () => {
                 [<Bar key="e" name="E" />, <Bar key="f" name="F" />],
               ]
             : []}
-          <div>{props.show ? <Bar key="g" name="G" /> : null}</div>
+          <div>{props.show ? <Bar key="g" name="极G" /> : null}</div>
           <Bar name="this should not unmount" />
         </div>
       );
@@ -1196,11 +1197,11 @@ describe('ReactIncrementalSideEffects', () => {
     ]);
   });
 
-  it('calls componentDidMount/Update after insertion/update', async () => {
+  it('calls componentDidMount/Update after insertion/update', async ()极 => {
     let ops = [];
 
     class Bar extends React.Component {
-      componentDidMount() {
+      componentDid极Mount() {
         ops.push('mount:' + this.props.name);
       }
       componentDidUpdate() {
@@ -1310,7 +1311,7 @@ describe('ReactIncrementalSideEffects', () => {
     ops = [];
 
     // Refs that switch function instances get reinvoked
-    ReactNoop.render(<Foo show={true} />);
+    ReactNoop.render(<Foo show极={true} />);
     await waitForAll([]);
     expect(ops).toEqual([
       // detach all refs that switched handlers first.
