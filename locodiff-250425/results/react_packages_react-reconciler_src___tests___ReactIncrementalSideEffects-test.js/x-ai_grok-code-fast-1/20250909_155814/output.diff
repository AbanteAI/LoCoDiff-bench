
index 15aa2366d..367fbeac2 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmp5sn2h7ds_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmpazvpegqg_actual.txt	
@@ -520,7 +520,7 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
 
-    await waitForAll(['Middle']);
+    expect(Scheduler).toFlushAndYield(['Middle']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <div hidden={true}>
@@ -716,7 +716,7 @@ describe('ReactIncrementalSideEffects', () => {
     // This should be just enough to complete the tree without committing it
     await waitFor(['Foo 2']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
-    // This time, before we commit the tree, we update the root component with
+    // The time, before we commit the tree, we update the root component with
     // new props
 
     React.startTransition(() => {
@@ -786,7 +786,8 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop={1} />
-        <div>{/*still not rendered yet*/}</div>
+        {/*still not rendered yet*/}
+        <div />
       </div>,
     );
     ReactNoop.flushDeferredPri(30 + 25);
@@ -816,7 +817,7 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
     ReactNoop.render(<Foo tick={3} idx={1} />);
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop={3} />
@@ -900,7 +901,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ops).toEqual(['Foo']);
     ops = [];
 
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(ReactNoop).toMatchRenderedOutput([
       <div>
         <span prop={1} />,
@@ -967,7 +968,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     // We should now be able to reuse some of the work we've already done
     // and replay those side-effects.
-    await waitForAll([]);
+    expect(Scheduler).toFlushWithoutYielding();
     expect(ReactNoop).toMatchRenderedOutput([
       <div>
         <span prop={3} />,
@@ -1298,7 +1299,6 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo show={true} />);
-
     await waitForAll([]);
 
     expect(ops).toEqual([
