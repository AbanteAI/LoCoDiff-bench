--- react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual)@@ -4,7 +4,6 @@  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
  *
- * @emails react-core
  * @jest-environment node
  */
 
@@ -20,7 +19,6 @@ describe('ReactIncrementalSideEffects', () => {
   beforeEach(() => {
     jest.resetModules();
-
     React = require('react');
     ReactNoop = require('react-noop-renderer');
     Scheduler = require('scheduler');
@@ -464,12 +462,10 @@       </div>,
     );
 
-    React.startTransition(() => {
-      ReactNoop.render(<Foo text="World" />);
-    });
+    ReactNoop.render(<Foo text="World" />);
 
     // Flush some of the work without committing
-    await waitFor(['Foo', 'Bar']);
+    await waitFor([' Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <div>
@@ -504,9 +500,9 @@ 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
-        <div hidden={true}>
-          <span prop="foo" />
-        </div>
+        <LegacyHiddenDiv mode="hidden">
+          <Middle>foo</Middle>
+        </LegacyHiddenDiv>
       </div>,
     );
 
@@ -514,18 +510,18 @@     await waitFor(['Foo', 'commit']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
-        <div hidden={true}>
-          <span prop="foo" />
-        </div>
+        <LegacyHiddenDiv mode="hidden">
+          <Middle>foo</Middle>
+        </LegacyHiddenDiv>
       </div>,
     );
 
     await waitForAll(['Middle']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
-        <div hidden={true}>
-          <span prop="bar" />
-        </div>
+        <LegacyHiddenDiv mode="hidden">
+          <Middle>bar</Middle>
+        </LegacyHiddenDiv>
       </div>,
     );
   });
@@ -565,12 +561,12 @@     await waitForAll(['Foo', 'Bar', 'Bar']);
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hi" />
-          <span prop="foo" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hi</Bar>
+          <Bar>foo</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
 
     // Make a quick update which will schedule low priority work to
@@ -582,12 +578,12 @@ 
     // The tree remains unchanged.
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hi" />
-          <span prop="foo" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hi</Bar>
+          <Bar>foo</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
 
     // The first Bar has already completed its update but we'll interrupt it to
@@ -601,12 +597,12 @@     // without restarting. The side-effects should still be replayed.
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hello" />
-          <span prop="World" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hello</Bar>
+          <Bar>World</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
   });
 
@@ -651,12 +647,12 @@     await waitForAll(['Foo', 'Content', 'Bar', 'Bar']);
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hi" />
-          <span prop="foo" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hi</Bar>
+          <Bar>foo</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
 
     // Make a quick update which will schedule low priority work to
@@ -666,12 +662,12 @@ 
     // The tree remains unchanged.
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hi" />
-          <span prop="foo" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hi</Bar>
+          <Bar>foo</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
 
     // The first Bar has already completed its update but we'll interrupt it to
@@ -685,12 +681,12 @@     // without restarting. The side-effects should still be replayed.
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
-        <div>
-          <span prop="Hello" />
-          <span prop="World" />
-        </div>
-      </div>,
+      <LegacyHiddenDiv mode="hidden">
+        <div>
+          <Bar>Hello</Bar>
+          <Bar>World</Bar>
+        </div>
+      </LegacyHiddenDiv>,
     );
   });
 
@@ -733,7 +729,6 @@     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={3} />);
   });
 
-  // @gate enableLegacyHidden
   it('updates a child even though the old props is empty', async () => {
     function Foo(props) {
       return (
@@ -746,9 +741,9 @@     ReactNoop.render(<Foo />);
     await waitForAll([]);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div hidden={true}>
+      <LegacyHiddenDiv mode="hidden">
         <span prop={1} />
-      </div>,
+      </LegacyHiddenDiv>,
     );
   });
 
@@ -790,17 +785,17 @@       </div>,
     );
     ReactNoop.flushDeferredPri(30 + 25);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
-        <span prop={1} />
+    expect(ReactNoop).toMatchRenderedOutput([
+      <div>
+        <span prop={1} />,
         <div>
           {/* Now we had enough time to finish the spans. */}
-          <span prop={0} />
-          <span prop={1} />
+          <span prop={0} />,
+          <span prop={1} />,
         </div>
         ,
       </div>,
-    );
+    ]);
     const innerSpanA =
       ReactNoop.dangerouslyGetChildren()[0].children[1].children[1];
     ReactNoop.render(<Foo tick={2} idx={1} />);
@@ -986,7 +981,6 @@     expect(ops).toEqual(['Bar', 'Baz', 'Bar', 'Bar']);
   });
 
-  // @gate enableLegacyHidden
   it('deprioritizes setStates that happens within a deprioritized tree', async () => {
     const barInstances = [];
 
@@ -1022,11 +1016,11 @@     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={0} />
-        <div hidden={true}>
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-        </div>
+        <LegacyHiddenDiv mode="hidden">
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+        </LegacyHiddenDiv>
       </div>,
     );
 
@@ -1036,11 +1030,11 @@       <div>
         {/* Updated */}
         <span prop={1} />
-        <div hidden={true}>
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-        </div>
+        <LegacyHiddenDiv mode="hidden">
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+        </LegacyHiddenDiv>
       </div>,
     );
 
@@ -1048,18 +1042,17 @@ 
     // This should not be enough time to render the content of all the hidden
     // items. Including the set state since that is deprioritized.
-    // ReactNoop.flushDeferredPri(35);
     await waitFor(['Bar']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         {/* Updated */}
         <span prop={1} />
-        <div hidden={true}>
+        <LegacyHiddenDiv mode="hidden">
           {/* Still not updated */}
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-        </div>
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+          <Bar>0</Bar>
+        </LegacyHiddenDiv>
       </div>,
     );
 
@@ -1069,12 +1062,12 @@     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={1} />
-        <div hidden={true}>
+        <LegacyHiddenDiv mode="hidden">
           {/* Now we had enough time to finish the spans. */}
-          <span prop="X" />
-          <span prop={1} />
-          <span prop={1} />
-        </div>
+          <Bar>X</Bar>
+          <Bar>1</Bar>
+          <Bar>1</Bar>
+        </LegacyHiddenDiv>
       </div>,
     );
   });
@@ -1133,205 +1126,4 @@     await waitForAll([]);
     expect(called).toBe(true);
   });
-
-  // TODO: Test that callbacks are not lost if an update is preempted.
-
-  it('calls componentWillUnmount after a deletion, even if nested', async () => {
-    const ops = [];
-
-    class Bar extends React.Component {
-      componentWillUnmount() {
-        ops.push(this.props.name);
-      }
-      render() {
-        return <span />;
-      }
-    }
-
-    class Wrapper extends React.Component {
-      componentWillUnmount() {
-        ops.push('Wrapper');
-      }
-      render() {
-        return <Bar name={this.props.name} />;
-      }
-    }
-
-    function Foo(props) {
-      return (
-        <div>
-          {props.show
-            ? [
-                <Bar key="a" name="A" />,
-                <Wrapper key="b" name="B" />,
-                <div key="cd">
-                  <Bar name="C" />
-                  <Wrapper name="D" />,
-                </div>,
-                [<Bar key="e" name="E" />, <Bar key="f" name="F" />],
-              ]
-            : []}
-          <div>{props.show ? <Bar key="g" name="G" /> : null}</div>
-          <Bar name="this should not unmount" />
-        </div>
-      );
-    }
-
-    ReactNoop.render(<Foo show={true} />);
-    await waitForAll([]);
-    expect(ops).toEqual([]);
-
-    ReactNoop.render(<Foo show={false} />);
-    await waitForAll([]);
-    expect(ops).toEqual([
-      'A',
-      'Wrapper',
-      'B',
-      'C',
-      'Wrapper',
-      'D',
-      'E',
-      'F',
-      'G',
-    ]);
-  });
-
-  it('calls componentDidMount/Update after insertion/update', async () => {
-    let ops = [];
-
-    class Bar extends React.Component {
-      componentDidMount() {
-        ops.push('mount:' + this.props.name);
-      }
-      componentDidUpdate() {
-        ops.push('update:' + this.props.name);
-      }
-      render() {
-        return <span />;
-      }
-    }
-
-    class Wrapper extends React.Component {
-      componentDidMount() {
-        ops.push('mount:wrapper-' + this.props.name);
-      }
-      componentDidUpdate() {
-        ops.push('update:wrapper-' + this.props.name);
-      }
-      render() {
-        return <Bar name={this.props.name} />;
-      }
-    }
-
-    function Foo(props) {
-      return (
-        <div>
-          <Bar key="a" name="A" />
-          <Wrapper key="b" name="B" />
-          <div key="cd">
-            <Bar name="C" />
-            <Wrapper name="D" />
-          </div>
-          {[<Bar key="e" name="E" />, <Bar key="f" name="F" />]}
-          <div>
-            <Bar key="g" name="G" />
-          </div>
-        </div>
-      );
-    }
-
-    ReactNoop.render(<Foo />);
-    await waitForAll([]);
-    expect(ops).toEqual([
-      'mount:A',
-      'mount:B',
-      'mount:wrapper-B',
-      'mount:C',
-      'mount:D',
-      'mount:wrapper-D',
-      'mount:E',
-      'mount:F',
-      'mount:G',
-    ]);
-
-    ops = [];
-
-    ReactNoop.render(<Foo />);
-    await waitForAll([]);
-    expect(ops).toEqual([
-      'update:A',
-      'update:B',
-      'update:wrapper-B',
-      'update:C',
-      'update:D',
-      'update:wrapper-D',
-      'update:E',
-      'update:F',
-      'update:G',
-    ]);
-  });
-
-  it('invokes ref callbacks after insertion/update/unmount', async () => {
-    let classInstance = null;
-
-    let ops = [];
-
-    class ClassComponent extends React.Component {
-      render() {
-        classInstance = this;
-        return <span />;
-      }
-    }
-
-    function FunctionComponent(props) {
-      return <span />;
-    }
-
-    function Foo(props) {
-      return props.show ? (
-        <div>
-          <ClassComponent ref={n => ops.push(n)} />
-          <FunctionComponent ref={n => ops.push(n)} />
-          <div ref={n => ops.push(n)} />
-        </div>
-      ) : null;
-    }
-
-    ReactNoop.render(<Foo show={true} />);
-
-    await waitForAll([]);
-
-    expect(ops).toEqual([
-      classInstance,
-      // no call for function components
-      {type: 'div', children: [], prop: undefined, hidden: false},
-    ]);
-
-    ops = [];
-
-    // Refs that switch function instances get reinvoked
-    ReactNoop.render(<Foo show={true} />);
-    await waitForAll([]);
-    expect(ops).toEqual([
-      // detach all refs that switched handlers first.
-      null,
-      null,
-      // reattach as a separate phase
-      classInstance,
-      {type: 'div', children: [], prop: undefined, hidden: false},
-    ]);
-
-    ops = [];
-
-    ReactNoop.render(<Foo show={false} />);
-    await waitForAll([]);
-    expect(ops).toEqual([
-      // unmount
-      null,
-      null,
-    ]);
-  });
-
-  // TODO: Test that mounts, updates, refs, unmounts and deletions happen in the
-  // expected way for aborted and resumed render life-cycles.
 });