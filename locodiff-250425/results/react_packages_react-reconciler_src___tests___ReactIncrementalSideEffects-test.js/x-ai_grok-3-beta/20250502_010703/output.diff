
index 15aa2366..108edd1d 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmp7b48721b_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmprx_e5jps_actual.txt	
@@ -1107,32 +1107,35 @@ describe('ReactIncrementalSideEffects', () => {
     expect(called).toBe(true);
   });
 
-  it('calls setState callback even if component bails out', async () => {
-    let instance;
-    class Foo extends React.Component {
-      constructor() {
-        super();
-        instance = this;
-        this.state = {text: 'foo'};
+  it('calls setState callback even if component bails out Missed
+
+    it('calls setState callback even if component bails out', async () => {
+      let instance;
+      class Foo extends React.Component {
+        constructor() {
+          super();
+          instance = this;
+          this.state = {text: 'foo'};
+        }
+        shouldComponentUpdate(nextProps, nextState) {
+          return this.state.text !== nextState.text;
+        }
+        render() {
+          return <span prop={this.state.text} />;
+        }
       }
-      shouldComponentUpdate(nextProps, nextState) {
-        return this.state.text !== nextState.text;
-      }
-      render() {
-        return <span prop={this.state.text} />;
-      }
-    }
 
-    ReactNoop.render(<Foo />);
-    await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(<span prop="foo" />);
-    let called = false;
-    instance.setState({}, () => {
-      called = true;
+      ReactNoop.render(<Foo />);
+      await waitForAll([]);
+      expect(ReactNoop).toMatchRenderedOutput(<span prop="foo" />);
+      let called = false;
+      instance.setState({}, () => {
+        called = true;
+      });
+      await waitForAll([]);
+      expect(called).toBe(true);
     });
-    await waitForAll([]);
-    expect(called).toBe(true);
-  });
+```
 
   // TODO: Test that callbacks are not lost if an update is preempted.
 
@@ -1298,9 +1301,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo show={true} />);
-
     await waitForAll([]);
-
     expect(ops).toEqual([
       classInstance,
       // no call for function components
