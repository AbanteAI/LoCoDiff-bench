
index 15aa2366..a1497b04 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmpfudcg9tx_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmp1rxl3d23_actual.txt	
@@ -710,18 +710,26 @@ describe('ReactIncrementalSideEffects', () => {
     await waitForPaint([]);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
 
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      React.startTransition(() => {
+        ReactNoop.render(<Foo step={2} />);
+      });
+    } else {
       ReactNoop.render(<Foo step={2} />);
-    });
+    }
     // This should be just enough to complete the tree without committing it
     await waitFor(['Foo 2']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
     // This time, before we commit the tree, we update the root component with
     // new props
 
-    React.startTransition(() => {
+    if (gate(flags => flags.forceConcurrentByDefaultForTesting)) {
+      React.startTransition(() => {
+        ReactNoop.render(<Foo step={3} />);
+      });
+    } else {
       ReactNoop.render(<Foo step={3} />);
-    });
+    }
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
     // Now let's commit. We already had a commit that was pending, which will
     // render 2.
