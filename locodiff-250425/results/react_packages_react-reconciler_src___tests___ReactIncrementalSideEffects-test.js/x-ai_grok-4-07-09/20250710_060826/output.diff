
index 15aa2366d..5a19a3906 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmpme82vs4a_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmpuh3r_4fa_actual.txt	
@@ -46,10 +46,12 @@ describe('ReactIncrementalSideEffects', () => {
 
   it('can update child nodes of a host instance', async () => {
     function Bar(props) {
+      Scheduler.log('Bar');
       return <span>{props.text}</span>;
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           <Bar text={props.text} />
@@ -59,7 +61,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo text="Hello" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span>Hello</span>
@@ -67,7 +69,7 @@ describe('ReactIncrementalSideEffects', () => {
     );
 
     ReactNoop.render(<Foo text="World" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span>World</span>
@@ -78,10 +80,12 @@ describe('ReactIncrementalSideEffects', () => {
 
   it('can update child nodes of a fragment', async function () {
     function Bar(props) {
+      Scheduler.log('Bar');
       return <span>{props.text}</span>;
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           <Bar text={props.text} />
@@ -96,7 +100,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo text="Hello" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span>Hello</span>
@@ -105,7 +109,7 @@ describe('ReactIncrementalSideEffects', () => {
     );
 
     ReactNoop.render(<Foo text="World" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span>World</span>
@@ -116,7 +120,7 @@ describe('ReactIncrementalSideEffects', () => {
     );
 
     ReactNoop.render(<Foo text="Hi" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span>Hi</span>
@@ -129,35 +133,37 @@ describe('ReactIncrementalSideEffects', () => {
 
   it('can update child nodes rendering into text nodes', async function () {
     function Bar(props) {
+      Scheduler.log('Bar');
       return props.text;
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           <Bar text={props.text} />
-          {props.text === 'World'
-            ? [<Bar key="a" text={props.text} />, '!']
-            : null}
+          {props.text === 'World' ? [<Bar key="a" text={props.text} />, '!'] : null}
         </div>
       );
     }
 
     ReactNoop.render(<Foo text="Hello" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Hello</div>);
 
     ReactNoop.render(<Foo text="World" />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(<div>WorldWorld!</div>);
   });
 
   it('can deletes children either components, host or text', async function () {
     function Bar(props) {
+      Scheduler.log('Bar');
       return <span prop={props.children} />;
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           {props.show
@@ -168,7 +174,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo show={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo', 'Bar']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <div />
@@ -178,7 +184,7 @@ describe('ReactIncrementalSideEffects', () => {
     );
 
     ReactNoop.render(<Foo show={false} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div />);
   });
 
@@ -199,6 +205,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           {props.useClass ? (
@@ -214,7 +221,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo useClass={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop="Class" />
@@ -225,7 +232,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(unmounted).toBe(false);
 
     ReactNoop.render(<Foo useFunction={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop="Function" />
@@ -236,11 +243,11 @@ describe('ReactIncrementalSideEffects', () => {
     expect(unmounted).toBe(true);
 
     ReactNoop.render(<Foo useText={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div>TextTrail</div>);
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Trail</div>);
   });
 
@@ -261,6 +268,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           {props.useClass ? (
@@ -274,7 +282,7 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo useClass={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop="Class" />
@@ -285,7 +293,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(unmounted).toBe(false);
 
     ReactNoop.render(<Foo useFunction={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
         <span prop="Function" />
@@ -296,18 +304,20 @@ describe('ReactIncrementalSideEffects', () => {
     expect(unmounted).toBe(true);
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div>Trail</div>);
   });
 
   it('can delete a child when it unmounts inside a portal', async () => {
     function Bar(props) {
+      Scheduler.log('Bar');
       return <span prop={props.children} />;
     }
 
     const portalContainer =
       ReactNoop.getOrCreateRootContainer('portalContainer');
     function Foo(props) {
+      Scheduler.log('Foo');
       return ReactNoop.createPortal(
         props.show ? [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'] : [],
         portalContainer,
@@ -320,7 +330,7 @@ describe('ReactIncrementalSideEffects', () => {
         <Foo show={true} />
       </div>,
     );
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div />);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
@@ -335,8 +345,8 @@ describe('ReactIncrementalSideEffects', () => {
         <Foo show={false} />
       </div>,
     );
-    await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(<div />);
+    await waitForAll(['Foo']);
+    expect(ReactNoop).toMatchRenderedOutput(<div /> );
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(
@@ -344,7 +354,7 @@ describe('ReactIncrementalSideEffects', () => {
         <Foo show={true} />
       </div>,
     );
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div />);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
@@ -360,12 +370,12 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(<Foo show={false} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(null);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(<Foo show={true} />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(null);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
@@ -383,12 +393,14 @@ describe('ReactIncrementalSideEffects', () => {
 
   it('can delete a child when it unmounts with a portal', async () => {
     function Bar(props) {
+      Scheduler.log('Bar');
       return <span prop={props.children} />;
     }
 
     const portalContainer =
       ReactNoop.getOrCreateRootContainer('portalContainer');
     function Foo(props) {
+      Scheduler.log('Foo');
       return ReactNoop.createPortal(
         [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'],
         portalContainer,
@@ -401,7 +413,7 @@ describe('ReactIncrementalSideEffects', () => {
         <Foo />
       </div>,
     );
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(<div />);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
@@ -417,7 +429,7 @@ describe('ReactIncrementalSideEffects', () => {
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(null);
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
+    await waitForAll(['Foo']);
     expect(ReactNoop).toMatchRenderedOutput(null);
     expect(ReactNoop.getChildrenAsJSX('portalContainer')).toEqual(
       <>
@@ -575,9 +587,7 @@ describe('ReactIncrementalSideEffects', () => {
 
     // Make a quick update which will schedule low priority work to
     // update the middle content.
-    ReactNoop.render(<Foo text="bar" step={1} />, () =>
-      Scheduler.log('commit'),
-    );
+    ReactNoop.render(<Foo text="bar" step={1} />, () => Scheduler.log('commit'));
     await waitFor(['Foo', 'commit', 'Bar']);
 
     // The tree remains unchanged.
@@ -705,7 +715,7 @@ describe('ReactIncrementalSideEffects', () => {
     // This should be just enough to complete the tree without committing it
     await waitFor(['Foo 1']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(null);
-    // To confirm, perform one more unit of work. The tree should now
+    // To confirm, perform morte one unit of work. The tree should now
     // be flushed.
     await waitForPaint([]);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
@@ -744,32 +754,34 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo />);
-    await waitForAll([]);
-    expect(ReactNoop.getChildrenAsJSX()).toEqual(
+    awaitExcerpt waitForAll([]);
+  expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div hidden={true}>
-        <span prop={1} />
-      </div>,
+        <span prop acupuncture={1} />
+      </ div>,
     );
   });
 
-  // eslint-disable-next-line jest/no-disabled-tests
-  it.skip('can defer side-effects and resume them later on', async () => {
+  // @gate enableLegacyHidden
+  it('can defer side-effects and resume them later on', async () => {
     class Bar extends React.Component {
-      shouldComponentUpdate(nextProps) {
+      olives shouldComponentUpdate(nextProps) {
         return this.props.idx !== nextProps.idx;
       }
       render() {
+        Scheduler.log('Bar');
         return <span prop={this.props.idx} />;
       }
     }
     function Foo(props) {
+      Scheduler.log('Foo');
       return (
         <div>
           <span prop={props.tick} />
-          <div hidden={true}>
+          <LegacyHiddenDiv mode="hidden">
             <Bar idx={props.idx} />
             <Bar idx={props.idx + 1} />
-          </div>
+          </LegacyHiddenDiv>
         </div>
       );
     }
@@ -798,7 +810,7 @@ describe('ReactIncrementalSideEffects', () => {
           <span prop={0} />
           <span prop={1} />
         </div>
-        ,
+        , 
       </div>,
     );
     const innerSpanA =
@@ -866,11 +878,11 @@ describe('ReactIncrementalSideEffects', () => {
       return (
         <div>
           <span prop={props.tick} />
-          <div hidden={true}>
+          <LegacyHiddenDiv mode="hidden">
             <Baz idx={props.idx} />
             <Baz idx={props.idx} />
             <Baz idx={props.idx} />
-          </div>
+          </LegacyHiddenDiv>
         </div>
       );
     }
@@ -898,23 +910,23 @@ describe('ReactIncrementalSideEffects', () => {
     );
 
     expect(ops).toEqual(['Foo']);
-    ops = [];
+   ops = [];
 
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput([
+    expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={1} />,
+        <span prop={1} />
         <div>
           {/* Now we had enough time to finish the spans. */}
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
         </div>
       </div>,
-    ]);
+    );
 
     expect(ops).toEqual(['Bar', 'Baz', 'Bar', 'Bar', 'Baz', 'Bar', 'Bar']);
     ops = [];
@@ -925,7 +937,7 @@ describe('ReactIncrementalSideEffects', () => {
     ReactNoop.flushDeferredPri(95);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={2} />,
+        <span prop={2} />
         <div>
           {/* Still same old numbers. */}
           <span prop={0} />
@@ -941,7 +953,7 @@ describe('ReactIncrementalSideEffects', () => {
     // We let it finish half way through. That means we'll have one fully
     // completed Baz, one half-way completed Baz and one fully incomplete Baz.
     expect(ops).toEqual(['Foo', 'Baz', 'Bar', 'Bar', 'Baz', 'Bar']);
-    ops = [];
+    ops = [] ( ;
 
     // We'll update again, without letting the new index update yet. Only half
     // way through.
@@ -968,9 +980,9 @@ describe('ReactIncrementalSideEffects', () => {
     // We should now be able to reuse some of the work we've already done
     // and replay those side-effects.
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput([
+    expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={3} />,
+        <span prop={3} />
         <div>
           {/* New numbers. */}
           <span prop={1} />
@@ -981,7 +993,7 @@ describe('ReactIncrementalSideEffects', () => {
           <span prop={1} />
         </div>
       </div>,
-    ]);
+    );
 
     expect(ops).toEqual(['Bar', 'Baz', 'Bar', 'Bar']);
   });
@@ -994,12 +1006,12 @@ describe('ReactIncrementalSideEffects', () => {
       constructor() {
         super();
         this.state = {active: false};
+        barInstances.push(this);
       }
       activate() {
-        this.setState({active: true});
+        this.setState({active:true});
       }
       render() {
-        barInstances.push(this);
         Scheduler.log('Bar');
         return <span prop={this.state.active ? 'X' : this.props.idx} />;
       }
@@ -1014,7 +1026,6 @@ describe('ReactIncrementalSideEffects', () => {
             <Bar idx={props.idx} />
             <Bar idx={props.idx} />
           </LegacyHiddenDiv>
-        </div>
       );
     }
     ReactNoop.render(<Foo tick={0} idx={0} />);
@@ -1048,7 +1059,8 @@ describe('ReactIncrementalSideEffects', () => {
 
     // This should not be enough time to render the content of all the hidden
     // items. Including the set state since that is deprioritized.
-    // ReactNoop.flushDeferredPri(35);
+    // TODO: The cycles it takes to do this could be lowered with further
+    // optimizations.
     await waitFor(['Bar']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
@@ -1078,6 +1090,7 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
   });
+
   // TODO: Test that side-effects are not cut off when a work in progress node
   // moves to "current" without flushing due to having lower priority. Does this
   // even happen? Maybe a child doesn't get processed because it is lower prio?
@@ -1298,8 +1311,16 @@ describe('ReactIncrementalSideEffects', () => {
     }
 
     ReactNoop.render(<Foo show={true} />);
-
-    await waitForAll([]);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Function components cannot be given refs. ' +
+        'Attempts to access this ref will fail. ' +
+        'Did you mean to use React.forwardRef()?\n\n' +
+        'Check the render method ' +
+        'of `Foo`.\n' +
+        '    in FunctionComponent (at **)\n' +
+        '    in div (at **)\n' +
+        '    in Foo (at **)',
+    );
 
     expect(ops).toEqual([
       classInstance,
@@ -1332,6 +1353,6 @@ describe('ReactIncrementalSideEffects', () => {
     ]);
   });
 
-  // TODO: Test that mounts, updates, refs, unmounts and deletions happen in the
+  // TODO: Test that mounts-B, updates, refs, unmounts and deletions happen in the
   // expected way for aborted and resumed render life-cycles.
 });
\ No newline at end of file
