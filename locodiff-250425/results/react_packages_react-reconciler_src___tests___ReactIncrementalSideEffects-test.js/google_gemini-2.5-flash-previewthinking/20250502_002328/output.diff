
index 15aa2366..179ad8ca 100644
--- a/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected):tmp/tmpwg077r6b_expected.txt	
+++ b/react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual):tmp/tmpqev4gimx_actual.txt	
@@ -5,7 +5,6 @@
  * LICENSE file in the root directory of this source tree.
  *
  * @emails react-core
- * @jest-environment node
  */
 
 'use strict';
@@ -194,7 +193,7 @@ describe('ReactIncrementalSideEffects', () => {
       }
     }
 
-    function FunctionComponent(props) {
+    function FunctionalComponent(props) {
       return <span prop="Function" />;
     }
 
@@ -204,7 +203,7 @@ describe('ReactIncrementalSideEffects', () => {
           {props.useClass ? (
             <ClassComponent />
           ) : props.useFunction ? (
-            <FunctionComponent />
+            <FunctionalComponent />
           ) : props.useText ? (
             'Text'
           ) : null}
@@ -256,7 +255,7 @@ describe('ReactIncrementalSideEffects', () => {
       }
     }
 
-    function FunctionComponent(props) {
+    function FunctionalComponent(props) {
       return <span prop="Function" />;
     }
 
@@ -266,7 +265,7 @@ describe('ReactIncrementalSideEffects', () => {
           {props.useClass ? (
             <ClassComponent key="a" />
           ) : props.useFunction ? (
-            <FunctionComponent key="a" />
+            <FunctionalComponent key="a" />
           ) : null}
           Trail
         </div>
@@ -305,8 +304,9 @@ describe('ReactIncrementalSideEffects', () => {
       return <span prop={props.children} />;
     }
 
-    const portalContainer =
-      ReactNoop.getOrCreateRootContainer('portalContainer');
+    const portalContainer = ReactNoop.getOrCreateRootContainer(
+      'portalContainer',
+    );
     function Foo(props) {
       return ReactNoop.createPortal(
         props.show ? [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'] : [],
@@ -386,8 +386,9 @@ describe('ReactIncrementalSideEffects', () => {
       return <span prop={props.children} />;
     }
 
-    const portalContainer =
-      ReactNoop.getOrCreateRootContainer('portalContainer');
+    const portalContainer = ReactNoop.getOrCreateRootContainer(
+      'portalContainer',
+    );
     function Foo(props) {
       return ReactNoop.createPortal(
         [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'],
@@ -503,29 +504,23 @@ describe('ReactIncrementalSideEffects', () => {
     await waitForAll(['Foo', 'Middle']);
 
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div>
-        <div hidden={true}>
-          <span prop="foo" />
-        </div>
+      <div hidden={true}>
+        <span prop="foo" />
       </div>,
     );
 
     ReactNoop.render(<Foo text="bar" />, () => Scheduler.log('commit'));
     await waitFor(['Foo', 'commit']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div>
-        <div hidden={true}>
-          <span prop="foo" />
-        </div>
+      <div hidden={true}>
+        <span prop="foo" />
       </div>,
     );
 
     await waitForAll(['Middle']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
-      <div>
-        <div hidden={true}>
-          <span prop="bar" />
-        </div>
+      <div hidden={true}>
+        <span prop="bar" />
       </div>,
     );
   });
@@ -790,24 +785,23 @@ describe('ReactIncrementalSideEffects', () => {
       </div>,
     );
     ReactNoop.flushDeferredPri(30 + 25);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop).toMatchRenderedOutput([
       <div>
-        <span prop={1} />
+        <span prop={1} />,
         <div>
           {/* Now we had enough time to finish the spans. */}
-          <span prop={0} />
-          <span prop={1} />
+          <span prop={0} />,
+          <span prop={1} />,
         </div>
-        ,
       </div>,
-    );
+    ]);
     const innerSpanA =
       ReactNoop.dangerouslyGetChildren()[0].children[1].children[1];
     ReactNoop.render(<Foo tick={2} idx={1} />);
     ReactNoop.flushDeferredPri(30 + 25);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={2} />
+        <span prop={2} />,
         <div>
           {/* Still same old numbers. */}
           <span prop={0} />
@@ -906,12 +900,12 @@ describe('ReactIncrementalSideEffects', () => {
         <span prop={1} />,
         <div>
           {/* Now we had enough time to finish the spans. */}
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
-          <span prop={0} />,
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
+          <span prop={0} />
         </div>
       </div>,
     ]);
@@ -1037,6 +1031,7 @@ describe('ReactIncrementalSideEffects', () => {
         {/* Updated */}
         <span prop={1} />
         <div hidden={true}>
+          {/* Still not updated */}
           <span prop={0} />
           <span prop={0} />
           <span prop={0} />
@@ -1283,7 +1278,7 @@ describe('ReactIncrementalSideEffects', () => {
       }
     }
 
-    function FunctionComponent(props) {
+    function FunctionalComponent(props) {
       return <span />;
     }
 
@@ -1291,7 +1286,7 @@ describe('ReactIncrementalSideEffects', () => {
       return props.show ? (
         <div>
           <ClassComponent ref={n => ops.push(n)} />
-          <FunctionComponent ref={n => ops.push(n)} />
+          <FunctionalComponent ref={n => ops.push(n)} />
           <div ref={n => ops.push(n)} />
         </div>
       ) : null;
@@ -1299,7 +1294,16 @@ describe('ReactIncrementalSideEffects', () => {
 
     ReactNoop.render(<Foo show={true} />);
 
-    await waitForAll([]);
+    await expect(async () => await waitForAll([])).toErrorDev(
+      'Function components cannot be given refs. ' +
+        'Attempts to access this ref will fail. ' +
+        'Did you mean to use React.forwardRef()?\n\n' +
+        'Check the render method ' +
+        'of `Foo`.\n' +
+        '    in FunctionalComponent (at **)\n' +
+        '    in div (at **)\n' +
+        '    in Foo (at **)',
+    );
 
     expect(ops).toEqual([
       classInstance,
