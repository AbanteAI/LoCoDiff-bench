--- react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_expectedoutput.txt (expected)+++ react_packages_react-reconciler_src___tests___ReactIncrementalSideEffects-test.js_extracted.txt (actual)@@ -88,8 +88,8 @@           {props.text === 'World'
             ? [<Bar key="a" text={props.text} />, <div key="b" />]
             : props.text === 'Hi'
-              ? [<div key="b" />, <Bar key="a" text={props.text} />]
-              : null}
+            ? [<div key="b" />, <Bar key="a" text={props.text} />]
+            : null}
           <span prop="test" />
         </div>
       );
@@ -194,20 +194,18 @@       }
     }
 
-    function FunctionComponent(props) {
+    function FunctionalComponent(props) {
       return <span prop="Function" />;
     }
 
     function Foo(props) {
       return (
         <div>
-          {props.useClass ? (
-            <ClassComponent />
-          ) : props.useFunction ? (
-            <FunctionComponent />
-          ) : props.useText ? (
-            'Text'
-          ) : null}
+          {props.useClass
+            ? <ClassComponent />
+            : props.useFunction
+            ? <FunctionalComponent />
+            : props.useText ? 'Text' : null}
           Trail
         </div>
       );
@@ -256,18 +254,16 @@       }
     }
 
-    function FunctionComponent(props) {
+    function FunctionalComponent(props) {
       return <span prop="Function" />;
     }
 
     function Foo(props) {
       return (
         <div>
-          {props.useClass ? (
-            <ClassComponent key="a" />
-          ) : props.useFunction ? (
-            <FunctionComponent key="a" />
-          ) : null}
+          {props.useClass
+            ? <ClassComponent key="a" />
+            : props.useFunction ? <FunctionalComponent key="a" /> : null}
           Trail
         </div>
       );
@@ -305,8 +301,7 @@       return <span prop={props.children} />;
     }
 
-    const portalContainer =
-      ReactNoop.getOrCreateRootContainer('portalContainer');
+    const portalContainer = ReactNoop.getOrCreateRootContainer('portalContainer');
     function Foo(props) {
       return ReactNoop.createPortal(
         props.show ? [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'] : [],
@@ -386,9 +381,8 @@       return <span prop={props.children} />;
     }
 
-    const portalContainer =
-      ReactNoop.getOrCreateRootContainer('portalContainer');
-    function Foo(props) {
+    const portalContainer = ReactNoop.getOrCreateRootContainer('portalContainer');
+    function Foo() {
       return ReactNoop.createPortal(
         [<div key="a" />, <Bar key="b">Hello</Bar>, 'World'],
         portalContainer,
@@ -464,9 +458,7 @@       </div>,
     );
 
-    React.startTransition(() => {
-      ReactNoop.render(<Foo text="World" />);
-    });
+    ReactNoop.render(<Foo text="World" />);
 
     // Flush some of the work without committing
     await waitFor(['Foo', 'Bar']);
@@ -575,9 +567,7 @@ 
     // Make a quick update which will schedule low priority work to
     // update the middle content.
-    ReactNoop.render(<Foo text="bar" step={1} />, () =>
-      Scheduler.log('commit'),
-    );
+    ReactNoop.render(<Foo text="bar" step={1} />, () => Scheduler.log('commit'));
     await waitFor(['Foo', 'commit', 'Bar']);
 
     // The tree remains unchanged.
@@ -599,7 +589,6 @@     // Since we did nothing to the middle subtree during the interruption,
     // we should be able to reuse the reconciliation work that we already did
     // without restarting. The side-effects should still be replayed.
-
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div hidden={true}>
         <div>
@@ -683,7 +672,6 @@     // Since we did nothing to the middle subtree during the interruption,
     // we should be able to reuse the reconciliation work that we already did
     // without restarting. The side-effects should still be replayed.
-
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div hidden={true}>
         <div>
@@ -694,19 +682,20 @@     );
   });
 
+  // @gate enableLegacyHidden
   it('can update a completed tree before it has a chance to commit', async () => {
     function Foo(props) {
       Scheduler.log('Foo ' + props.step);
       return <span prop={props.step} />;
     }
+
     React.startTransition(() => {
       ReactNoop.render(<Foo step={1} />);
     });
     // This should be just enough to complete the tree without committing it
     await waitFor(['Foo 1']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(null);
-    // To confirm, perform one more unit of work. The tree should now
-    // be flushed.
+    // To confirm, perform one more unit of work. The tree should now be flushed.
     await waitForPaint([]);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
 
@@ -718,7 +707,6 @@     expect(ReactNoop.getChildrenAsJSX()).toEqual(<span prop={1} />);
     // This time, before we commit the tree, we update the root component with
     // new props
-
     React.startTransition(() => {
       ReactNoop.render(<Foo step={3} />);
     });
@@ -775,53 +763,49 @@     }
     ReactNoop.render(<Foo tick={0} idx={0} />);
     ReactNoop.flushDeferredPri(40 + 25);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={0} />
-        <div />
+        <div /*the spans are down-prioritized and not rendered yet*/ />
       </div>,
     );
     ReactNoop.render(<Foo tick={1} idx={0} />);
     ReactNoop.flushDeferredPri(35 + 25);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={1} />
-        <div>{/*still not rendered yet*/}</div>
+        <div /*still not rendered yet*/ />
       </div>,
     );
     ReactNoop.flushDeferredPri(30 + 25);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={1} />
         <div>
-          {/* Now we had enough time to finish the spans. */}
           <span prop={0} />
           <span prop={1} />
-        </div>
-        ,
+        </div>{','}
       </div>,
     );
     const innerSpanA =
       ReactNoop.dangerouslyGetChildren()[0].children[1].children[1];
     ReactNoop.render(<Foo tick={2} idx={1} />);
     ReactNoop.flushDeferredPri(30 + 25);
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
+      <div>
+        <span prop={2} />
+        <div>
+          <span prop={0} />
+          <span prop={1} />
+        </div>
+      </div>,
+    );
+    ReactNoop.render(<Foo tick={3} idx={1} />);
+    await waitForAll([]);
     expect(ReactNoop).toMatchRenderedOutput(
       <div>
-        <span prop={2} />
-        <div>
-          {/* Still same old numbers. */}
-          <span prop={0} />
-          <span prop={1} />
-        </div>
-      </div>,
-    );
-    ReactNoop.render(<Foo tick={3} idx={1} />);
-    await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput(
-      <div>
         <span prop={3} />
         <div>
-          {/* New numbers. */}
           <span prop={1} />
           <span prop={2} />
         </div>
@@ -830,9 +814,6 @@ 
     const innerSpanB =
       ReactNoop.dangerouslyGetChildren()[0].children[1].children[1];
-    // This should have been an update to an existing instance, not recreation.
-    // We verify that by ensuring that the child instance was the same as
-    // before.
     expect(innerSpanA).toBe(innerSpanB);
   });
 
@@ -876,7 +857,7 @@     }
     ReactNoop.render(<Foo tick={0} idx={0} />);
     ReactNoop.flushDeferredPri(65 + 5);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={0} />
         {/*the spans are down-prioritized and not rendered yet*/}
@@ -889,7 +870,7 @@ 
     ReactNoop.render(<Foo tick={1} idx={0} />);
     ReactNoop.flushDeferredPri(70);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={1} />
         {/*still not rendered yet*/}
@@ -901,7 +882,7 @@     ops = [];
 
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput([
+    expect(ReactNoop.getChildrenAsJSX()).toEqual([
       <div>
         <span prop={1} />,
         <div>
@@ -923,23 +904,21 @@     // way through.
     ReactNoop.render(<Foo tick={2} idx={1} />);
     ReactNoop.flushDeferredPri(95);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={2} />,
         <div>
           {/* Still same old numbers. */}
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-          <span prop={0} />
-        </div>
-      </div>,
-    );
-
-    // We let it finish half way through. That means we'll have one fully
-    // completed Baz, one half-way completed Baz and one fully incomplete Baz.
+          <span prop={0} />,
+          <span prop={0} />,
+          <span prop={0} />,
+          <span prop={0} />,
+          <span prop={0} />,
+          <span prop={0} />,
+        </div>
+      </div>,
+    );
+
     expect(ops).toEqual(['Foo', 'Baz', 'Bar', 'Bar', 'Baz', 'Bar']);
     ops = [];
 
@@ -947,7 +926,7 @@     // way through.
     ReactNoop.render(<Foo tick={3} idx={1} />);
     ReactNoop.flushDeferredPri(50);
-    expect(ReactNoop).toMatchRenderedOutput(
+    expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
         <span prop={3} />
         <div>
@@ -968,17 +947,17 @@     // We should now be able to reuse some of the work we've already done
     // and replay those side-effects.
     await waitForAll([]);
-    expect(ReactNoop).toMatchRenderedOutput([
+    expect(ReactNoop.getChildrenAsJSX()).toEqual([
       <div>
         <span prop={3} />,
         <div>
           {/* New numbers. */}
-          <span prop={1} />
-          <span prop={1} />
-          <span prop={1} />
-          <span prop={1} />
-          <span prop={1} />
-          <span prop={1} />
+          <span prop={1} />,
+          <span prop={1} />,
+          <span prop={1} />,
+          <span prop={1} />,
+          <span prop={1} />,
+          <span prop={1} />,
         </div>
       </div>,
     ]);
@@ -1009,11 +988,11 @@       return (
         <div>
           <span prop={props.tick} />
-          <LegacyHiddenDiv mode="hidden">
+          <div hidden={true}>
             <Bar idx={props.idx} />
             <Bar idx={props.idx} />
             <Bar idx={props.idx} />
-          </LegacyHiddenDiv>
+          </div>
         </div>
       );
     }
@@ -1048,7 +1027,6 @@ 
     // This should not be enough time to render the content of all the hidden
     // items. Including the set state since that is deprioritized.
-    // ReactNoop.flushDeferredPri(35);
     await waitFor(['Bar']);
     expect(ReactNoop.getChildrenAsJSX()).toEqual(
       <div>
@@ -1078,9 +1056,6 @@       </div>,
     );
   });
-  // TODO: Test that side-effects are not cut off when a work in progress node
-  // moves to "current" without flushing due to having lower priority. Does this
-  // even happen? Maybe a child doesn't get processed because it is lower prio?
 
   it('calls callback after update is flushed', async () => {
     let instance;
@@ -1133,8 +1108,6 @@     await waitForAll([]);
     expect(called).toBe(true);
   });
-
-  // TODO: Test that callbacks are not lost if an update is preempted.
 
   it('calls componentWillUnmount after a deletion, even if nested', async () => {
     const ops = [];
@@ -1298,9 +1271,7 @@     }
 
     ReactNoop.render(<Foo show={true} />);
-
-    await waitForAll([]);
-
+    await waitForAll([]);
     expect(ops).toEqual([
       classInstance,
       // no call for function components
