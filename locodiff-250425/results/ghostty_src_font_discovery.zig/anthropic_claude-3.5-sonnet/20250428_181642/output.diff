--- ghostty_src_font_discovery.zig_expectedoutput.txt (expected)+++ ghostty_src_font_discovery.zig_extracted.txt (actual)@@ -344,7 +344,11 @@ 
     /// Discover fonts from a descriptor. This returns an iterator that can
     /// be used to build up the deferred fonts.
-    pub fn discover(self: *const CoreText, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
+    pub fn discover(
+        self: *const CoreText,
+        alloc: Allocator,
+        desc: Descriptor,
+    ) !DiscoverIterator {
         _ = self;
 
         // Build our pattern that we'll search for
@@ -772,11 +776,8 @@ test "fontconfig" {
     if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
 
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
     var fc = Fontconfig.init();
-    var it = try fc.discover(alloc, .{ .family = "monospace", .size = 12 });
+    var it = try fc.discover(testing.allocator, .{ .family = "monospace", .size = 12 });
     defer it.deinit();
 }
 
@@ -784,7 +785,6 @@     if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
 
     const testing = std.testing;
-    const alloc = testing.allocator;
 
     var fc = Fontconfig.init();
     var it = try fc.discover(alloc, .{ .codepoint = 'A', .size = 12 });
@@ -815,25 +815,4 @@         count += 1;
     }
     try testing.expect(count > 0);
-}
-
-test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
-        return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var ct = CoreText.init();
-    defer ct.deinit();
-    var it = try ct.discover(alloc, .{ .codepoint = 'A', .size = 12 });
-    defer it.deinit();
-
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
-    const face = (try it.next()).?;
-    try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
-    try testing.expect(face.hasCodepoint('B', null));
 }