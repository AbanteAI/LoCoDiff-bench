
index 9e0324e4..57d3c26a 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmpbfz53de6_expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmpo4e3_rci_actual.txt	
@@ -344,7 +344,11 @@ pub const CoreText = struct {
 
     /// Discover fonts from a descriptor. This returns an iterator that can
     /// be used to build up the deferred fonts.
-    pub fn discover(self: *const CoreText, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
+    pub fn discover(
+        self: *const CoreText,
+        alloc: Allocator,
+        desc: Descriptor,
+    ) !DiscoverIterator {
         _ = self;
 
         // Build our pattern that we'll search for
@@ -392,6 +396,12 @@ pub const CoreText = struct {
         if (desc.codepoint >= 0x4E00 and
             desc.codepoint <= 0x9FFF)
         han: {
+            if (comptime options.backend.hasFreetype()) {
+                // If we have freetype, we can't use CoreText to find a font
+                // that supports a specific codepoint because we need to
+                // have a CoreText font to be able to do so.
+                break :han;
+            }
             const han = try self.discoverCodepoint(
                 collection,
                 desc,
@@ -419,6 +429,12 @@ pub const CoreText = struct {
         // matching font CoreText wants to use. See:
         // https://github.com/ghostty-org/ghostty/issues/2499
         if (it.list.len == 0 and desc.codepoint > 0) codepoint: {
+            if (comptime options.backend.hasFreetype()) {
+                // If we have freetype, we can't use CoreText to find a font
+                // that supports a specific codepoint because we need to
+                // have a CoreText font to be able to do so.
+                return null;
+            }
             const ct_desc = try self.discoverCodepoint(
                 collection,
                 desc,
@@ -448,13 +464,6 @@ pub const CoreText = struct {
     ) !?*macos.text.FontDescriptor {
         _ = self;
 
-        if (comptime options.backend.hasFreetype()) {
-            // If we have freetype, we can't use CoreText to find a font
-            // that supports a specific codepoint because we need to
-            // have a CoreText font to be able to do so.
-            return null;
-        }
-
         assert(desc.codepoint > 0);
 
         // Get our original font. This is dependent on the requested style
@@ -800,7 +809,7 @@ test "fontconfig codepoint" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +827,7 @@ test "coretext" {
 }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
