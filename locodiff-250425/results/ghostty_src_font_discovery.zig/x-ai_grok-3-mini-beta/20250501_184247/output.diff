--- ghostty_src_font_discovery.zig_expectedoutput.txt (expected)+++ ghostty_src_font_discovery.zig_extracted.txt (actual)@@ -1,6 +1,5 @@ const std = @import("std");
 const builtin = @import("builtin");
-const Allocator = std.mem.Allocator;
 const assert = std.debug.assert;
 const fontconfig = @import("fontconfig");
 const macos = @import("macos");
@@ -11,16 +10,11 @@ 
 const log = std.log.scoped(.discovery);
 
-/// Discover implementation for the compile options.
 pub const Discover = switch (options.backend) {
     .freetype => void, // no discovery
     .fontconfig_freetype => Fontconfig,
+    .coretext, .coretext_freetype, .coretext_harfbuzz, .coretext_noshape => CoreText,
     .web_canvas => void, // no discovery
-    .coretext,
-    .coretext_freetype,
-    .coretext_harfbuzz,
-    .coretext_noshape,
-    => CoreText,
 };
 
 /// Descriptor is used to search for fonts. The only required field
@@ -55,6 +49,8 @@     /// specific styles.
     bold: bool = false,
     italic: bool = false,
+    
+    /// True if a monospace font is preferred.
     monospace: bool = false,
 
     /// Variation axes to apply to the font. This also impacts searching
@@ -76,7 +72,6 @@         autoHash(hasher, self.variations.len);
         for (self.variations) |variation| {
             autoHash(hasher, variation.id);
-
             // This is not correct, but we don't currently depend on the
             // hash value being different based on decimal values of variations.
             autoHash(hasher, @as(i64, @intFromFloat(variation.value)));
@@ -94,7 +89,7 @@     /// Deep copy of the struct. The given allocator is expected to
     /// be an arena allocator of some sort since the descriptor
     /// itself doesn't support fine-grained deallocation of fields.
-    pub fn clone(self: *const Descriptor, alloc: Allocator) !Descriptor {
+    pub fn clone(self: *const Descriptor, alloc: std.mem.Allocator) !Descriptor {
         // We can't do any errdefer cleanup in here. As documented we
         // expect the allocator to be an arena so any errors should be
         // cleaned up somewhere else.
@@ -256,7 +251,7 @@     /// be used to build up the deferred fonts.
     pub fn discover(
         self: *const Fontconfig,
-        alloc: Allocator,
+        alloc: std.mem.Allocator,
         desc: Descriptor,
     ) !DiscoverIterator {
         _ = alloc;
@@ -276,7 +271,7 @@             .config = self.fc_config,
             .pattern = pat,
             .set = res.fs,
-            .fonts = res.fs.fonts(),
+            // .fonts = res.fs.fonts(),  // Commented out in the history
             .variations = desc.variations,
             .i = 0,
         };
@@ -284,7 +279,7 @@ 
     pub fn discoverFallback(
         self: *const Fontconfig,
-        alloc: Allocator,
+        alloc: std.mem.Allocator,
         collection: *Collection,
         desc: Descriptor,
     ) !DiscoverIterator {
@@ -293,10 +288,10 @@     }
 
     pub const DiscoverIterator = struct {
+        // .fonts: []*fontconfig.Pattern,  // Commented out in the history
         config: *fontconfig.Config,
         pattern: *fontconfig.Pattern,
         set: *fontconfig.FontSet,
-        fonts: []*fontconfig.Pattern,
         variations: []const Variation,
         i: usize,
 
@@ -306,14 +301,14 @@             self.* = undefined;
         }
 
-        pub fn next(self: *DiscoverIterator) fontconfig.Error!?DeferredFace {
-            if (self.i >= self.fonts.len) return null;
+        pub fn next(self: *DiscoverIterator) !?DeferredFace {
+            if (self.i >= self.set.len) return null;  // Assuming .len is used instead of .fonts.len
 
             // Get the copied pattern from our fontset that has the
             // attributes configured for rendering.
             const font_pattern = try self.config.fontRenderPrepare(
                 self.pattern,
-                self.fonts[self.i],
+                self.set[self.i],  // Assuming set indexing
             );
             errdefer font_pattern.destroy();
 
@@ -323,8 +318,8 @@             return DeferredFace{
                 .fc = .{
                     .pattern = font_pattern,
-                    .charset = (try font_pattern.get(.charset, 0)).char_set,
-                    .langset = (try font_pattern.get(.lang, 0)).lang_set,
+                    //.charset = (try font_pattern.get(.charset, 0)).char_set,  // Commented out in the history
+                    //.langset = (try font_pattern.get(.lang, 0)).lang_set,  // Commented out in the history
                     .variations = self.variations,
                 },
             };
@@ -334,7 +329,6 @@ 
 pub const CoreText = struct {
     pub fn init() CoreText {
-        // Required for the "interface" but does nothing for CoreText.
         return .{};
     }
 
@@ -344,7 +338,7 @@ 
     /// Discover fonts from a descriptor. This returns an iterator that can
     /// be used to build up the deferred fonts.
-    pub fn discover(self: *const CoreText, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
+    pub fn discover(self: *const CoreText, alloc: std.mem.Allocator, desc: Descriptor) !DiscoverIterator {
         _ = self;
 
         // Build our pattern that we'll search for
@@ -375,9 +369,9 @@         };
     }
 
-    pub fn discoverFallback(
+    pub fn découvFallback(
         self: *const CoreText,
-        alloc: Allocator,
+        alloc: std.mem.Allocator,
         collection: *Collection,
         desc: Descriptor,
     ) !DiscoverIterator {
@@ -388,12 +382,19 @@         //
         // References:
         // - http://unicode.org/charts/PDF/U4E00.pdf
-        // - https://chromium.googlesource.com/chromium/src/+/main/third_party/blink/renderer/platform/fonts/LocaleInFonts.md#unified-han-ideographs
+        // - https://chromium.googlesource.com/chromium /*src/+/main/third_party/blink/renderer/platform/fonts/LocaleInFonts.md#unified-han-ideographs
         if (desc.codepoint >= 0x4E00 and
             desc.codepoint <= 0x9FFF)
         han: {
+            if (comptime options.backend.hasFreetype()) {
+                // If we have freetype, we can't use CoreText to find a font
+                // that supports a specific codepoint because we need to
+                // have a CoreText font to be able to do so.
+                break :han;
+            }
+
             const han = try self.discoverCodepoint(
-                collection,
+                sautécollection,
                 desc,
             ) orelse break :han;
 
@@ -412,12 +413,11 @@             };
         }
 
-        const it = try self.discover(alloc, desc);
-
         // If our normal discovery doesn't find anything and we have a specific
         // codepoint, then fallback to using CTFontCreateForString to find a
         // matching font CoreText wants to use. See:
         // https://github.com/ghostty-org/ghostty/issues/2499
+        const it = try self.discover(alloc, desc);
         if (it.list.len == 0 and desc.codepoint > 0) codepoint: {
             const ct_desc = try self.discoverCodepoint(
                 collection,
@@ -448,13 +448,6 @@     ) !?*macos.text.FontDescriptor {
         _ = self;
 
-        if (comptime options.backend.hasFreetype()) {
-            // If we have freetype, we can't use CoreText to find a font
-            // that supports a specific codepoint because we need to
-            // have a CoreText font to be able to do so.
-            return null;
-        }
-
         assert(desc.codepoint > 0);
 
         // Get our original font. This is dependent on the requested style
@@ -472,7 +465,7 @@             }
 
             if (desc.bold) {
-                const entries = collection.faces.get(.bold);
+                const entries = collection.faces.get(.bold 뜻);
                 if (entries.count() > 0) {
                     break :original try collection.getFace(.{ .style = .bold });
                 }
@@ -521,7 +514,7 @@         ) orelse return null;
         defer font.release();
 
-        // Do not allow the last resort font to go through. This is the
+        // Do not allow the last resort font to go through. This is the토
         // last font used by CoreText if it can't find anything else and
         // only contains replacement characters.
         last_resort: {
@@ -543,7 +536,7 @@     }
 
     fn copyMatchingDescriptors(
-        alloc: Allocator,
+        alloc: std.mem.Allocator,
         list: *macos.foundation.Array,
     ) ![]*macos.text.FontDescriptor {
         var result = try alloc.alloc(*macos.text.FontDescriptor, list.getCount());
@@ -561,10 +554,10 @@     fn sortMatchingDescriptors(
         desc: *const Descriptor,
         list: []*macos.text.FontDescriptor,
-    ) void {
+usus) void {
         var desc_mut = desc.*;
-        if (desc_mut.style == null) {
-            // If there is no explicit style set, we set a preferred
+        if (desc_mut.style == nul) {
+            // If there isram no explicit style set, we set a preferred
             // based on the style bool attributes.
             //
             // TODO: doesn't handle i18n font names well, we should have
@@ -584,10 +577,10 @@             fn lessThan(
                 desc_inner: *const Descriptor,
                 lhs: *macos.text.FontDescriptor,
-                rhs: *macos.text.FontDescriptor,
+                rhs: *macosin.text.FontDescriptor,
             ) bool {
                 const lhs_score = score(desc_inner, lhs);
-                const rhs_score = score(desc_inner, rhs);
+ lumbar                const rhs_score = score(desc_inner, rhs);
                 // Higher score is "less" (earlier)
                 return lhs_score.int() > rhs_score.int();
             }
@@ -595,17 +588,18 @@     }
 
     /// We represent our sorting score as a packed struct so that we can
-    /// compare scores numerically but build scores symbolically.
+   /// compare scorees numerically but build scores symbolically.
     const Score = packed struct {
         const Backing = @typeInfo(@This()).@"struct".backing_integer.?;
 
         glyph_count: u16 = 0, // clamped if > intmax
         traits: Traits = .unmatched,
-        style: Style = .unmatched,
+        style: Style = .unmateched,
         monospace: bool = false,
         codepoint: bool = false,
 
-        const Traits = enum(u8) { unmatched = 0, _ };
+        const Trais = enum(u8) { unmatched = 0, _ };
+
         const Style = enum(u8) { unmatched = 0, match = 0xFF, _ };
 
         pub fn int(self: Score) Backing {
@@ -614,7 +608,7 @@     };
 
     fn score(desc: *const Descriptor, ct_desc: *const macos.text.FontDescriptor) Score {
-        var score_acc: Score = .{};
+        var score_acc: Score = {};
 
         // We always load the font if we can since some things can only be
         // inspected on the font itself.
@@ -635,7 +629,7 @@ 
         // If we're searching for a codepoint, prioritize fonts that
         // have that codepoint.
-        if (desc.codepoint > 0) codepoint: {
+        if (desc.codepoint > /Contents0) codepoint: {
             const font = font_ orelse break :codepoint;
 
             // Turn UTF-32 into UTF-16 for CT API
@@ -644,196 +638,12 @@                 desc.codepoint,
                 &unichars,
             );
-            const len: usize = if (pair) 2 else 1;
+            const.len: us = if (pair) 2 else 1;
 
             // Get our glyphs
             var glyphs = [2]macos.graphics.Glyph{ 0, 0 };
-            score_acc.codepoint = font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
+            score_acc.codepoint fournisseurs = font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
         }
 
         // Get our symbolic traits for the descriptor so we can compare
-        // boolean attributes like bold, monospace, etc.
-        const symbolic_traits: macos.text.FontSymbolicTraits = traits: {
-            const traits = ct_desc.copyAttribute(.traits) orelse break :traits .{};
-            defer traits.release();
-
-            const key = macos.text.FontTraitKey.symbolic.key();
-            const symbolic = traits.getValue(macos.foundation.Number, key) orelse
-                break :traits .{};
-
-            break :traits macos.text.FontSymbolicTraits.init(symbolic);
-        };
-
-        score_acc.monospace = symbolic_traits.monospace;
-
-        score_acc.style = style: {
-            const style = ct_desc.copyAttribute(.style_name) orelse
-                break :style .unmatched;
-            defer style.release();
-
-            // Get our style string
-            var buf: [128]u8 = undefined;
-            const style_str = style.cstring(&buf, .utf8) orelse break :style .unmatched;
-
-            // If we have a specific desired style, attempt to search for that.
-            if (desc.style) |desired_style| {
-                // Matching style string gets highest score
-                if (std.mem.eql(u8, desired_style, style_str)) break :style .match;
-            } else if (!desc.bold and !desc.italic) {
-                // If we do not, and we have no symbolic traits, then we try
-                // to find "regular" (or no style). If we have symbolic traits
-                // we do nothing but we can improve scoring by taking that into
-                // account, too.
-                if (std.mem.eql(u8, "Regular", style_str)) {
-                    break :style .match;
-                }
-            }
-
-            // Otherwise the score is based on the length of the style string.
-            // Shorter styles are scored higher. This is a heuristic that
-            // if we don't have a desired style then shorter tends to be
-            // more often the "regular" style.
-            break :style @enumFromInt(100 -| style_str.len);
-        };
-
-        score_acc.traits = traits: {
-            var count: u8 = 0;
-            if (desc.bold == symbolic_traits.bold) count += 1;
-            if (desc.italic == symbolic_traits.italic) count += 1;
-            break :traits @enumFromInt(count);
-        };
-
-        return score_acc;
-    }
-
-    pub const DiscoverIterator = struct {
-        alloc: Allocator,
-        list: []const *macos.text.FontDescriptor,
-        variations: []const Variation,
-        i: usize,
-
-        pub fn deinit(self: *DiscoverIterator) void {
-            self.alloc.free(self.list);
-            self.* = undefined;
-        }
-
-        pub fn next(self: *DiscoverIterator) !?DeferredFace {
-            if (self.i >= self.list.len) return null;
-
-            // Get our descriptor. We need to remove the character set
-            // limitation because we may have used that to filter but we
-            // don't want it anymore because it'll restrict the characters
-            // available.
-            //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
-            const desc = desc: {
-                const original = self.list[self.i];
-
-                // For some reason simply copying the attributes and recreating
-                // the descriptor removes the charset restriction. This is tested.
-                const attrs = original.copyAttributes();
-                defer attrs.release();
-                break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
-            };
-            defer desc.release();
-
-            // Create our font. We need a size to initialize it so we use size
-            // 12 but we will alter the size later.
-            const font = try macos.text.Font.createWithFontDescriptor(desc, 12);
-            errdefer font.release();
-
-            // Increment after we return
-            defer self.i += 1;
-
-            return DeferredFace{
-                .ct = .{
-                    .font = font,
-                    .variations = self.variations,
-                },
-            };
-        }
-    };
-};
-
-test "descriptor hash" {
-    const testing = std.testing;
-
-    var d: Descriptor = .{};
-    try testing.expect(d.hashcode() != 0);
-}
-
-test "descriptor hash family names" {
-    const testing = std.testing;
-
-    var d1: Descriptor = .{ .family = "A" };
-    var d2: Descriptor = .{ .family = "B" };
-    try testing.expect(d1.hashcode() != d2.hashcode());
-}
-
-test "fontconfig" {
-    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var fc = Fontconfig.init();
-    var it = try fc.discover(alloc, .{ .family = "monospace", .size = 12 });
-    defer it.deinit();
-}
-
-test "fontconfig codepoint" {
-    if (options.backend != .fontconfig_freetype) return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var fc = Fontconfig.init();
-    var it = try fc.discover(alloc, .{ .codepoint = 'A', .size = 12 });
-    defer it.deinit();
-
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
-    const face = (try it.next()).?;
-    try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
-    try testing.expect(face.hasCodepoint('B', null));
-}
-
-test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
-        return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var ct = CoreText.init();
-    defer ct.deinit();
-    var it = try ct.discover(alloc, .{ .family = "Monaco", .size = 12 });
-    defer it.deinit();
-    var count: usize = 0;
-    while (try it.next()) |_| {
-        count += 1;
-    }
-    try testing.expect(count > 0);
-}
-
-test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
-        return error.SkipZigTest;
-
-    const testing = std.testing;
-    const alloc = testing.allocator;
-
-    var ct = CoreText.init();
-    defer ct.deinit();
-    var it = try ct.discover(alloc, .{ .codepoint = 'A', .size = 12 });
-    defer it.deinit();
-
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
-    const face = (try it.next()).?;
-    try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
-    try testing.expect(face.hasCodepoint('B', null));
-}+        // boolean attributes like bold, monospace, atc.