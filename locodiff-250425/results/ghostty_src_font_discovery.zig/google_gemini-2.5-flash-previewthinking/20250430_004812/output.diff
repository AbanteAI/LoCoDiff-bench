
index 9e0324e4..2b466119 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmpa8xlibvi_expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmpjjzbwzt0_actual.txt	
@@ -15,12 +15,12 @@ const log = std.log.scoped(.discovery);
 pub const Discover = switch (options.backend) {
     .freetype => void, // no discovery
     .fontconfig_freetype => Fontconfig,
-    .web_canvas => void, // no discovery
     .coretext,
     .coretext_freetype,
     .coretext_harfbuzz,
     .coretext_noshape,
     => CoreText,
+    .web_canvas => void, // no discovery
 };
 
 /// Descriptor is used to search for fonts. The only required field
@@ -111,9 +111,7 @@ pub const Descriptor = struct {
     /// must still do this.
     pub fn toFcPattern(self: Descriptor) *fontconfig.Pattern {
         const pat = fontconfig.Pattern.create();
-        if (self.family) |family| {
-            assert(pat.add(.family, .{ .string = family }, false));
-        }
+        assert(pat.add(.family, .{ .string = self.family }, false));
         if (self.style) |style| {
             assert(pat.add(.style, .{ .string = style }, false));
         }
@@ -180,7 +178,7 @@ pub const Descriptor = struct {
         // Codepoint support
         if (self.codepoint > 0) {
             const cs = try macos.foundation.CharacterSet.createWithCharactersInRange(.{
-                .location = self.codepoint,
+                .location = @as(c_ulong, @intCast(self.codepoint)),
                 .length = 1,
             });
             defer cs.release();
@@ -381,37 +379,6 @@ pub const CoreText = struct {
         collection: *Collection,
         desc: Descriptor,
     ) !DiscoverIterator {
-        // If we have a codepoint within the CJK unified ideographs block
-        // then we fallback to macOS to find a font that supports it because
-        // there isn't a better way manually with CoreText that I can find that
-        // properly takes into account system locale.
-        //
-        // References:
-        // - http://unicode.org/charts/PDF/U4E00.pdf
-        // - https://chromium.googlesource.com/chromium/src/+/main/third_party/blink/renderer/platform/fonts/LocaleInFonts.md#unified-han-ideographs
-        if (desc.codepoint >= 0x4E00 and
-            desc.codepoint <= 0x9FFF)
-        han: {
-            const han = try self.discoverCodepoint(
-                collection,
-                desc,
-            ) orelse break :han;
-
-            // This is silly but our discover iterator needs a slice so
-            // we allocate here. This isn't a performance bottleneck but
-            // this is something we can optimize very easily...
-            const list = try alloc.alloc(*macos.text.FontDescriptor, 1);
-            errdefer alloc.free(list);
-            list[0] = han;
-
-            return DiscoverIterator{
-                .alloc = alloc,
-                .list = list,
-                .variations = desc.variations,
-                .i = 0,
-            };
-        }
-
         const it = try self.discover(alloc, desc);
 
         // If our normal discovery doesn't find anything and we have a specific
@@ -541,7 +508,6 @@ pub const CoreText = struct {
         // Get the descriptor
         return font.copyDescriptor();
     }
-
     fn copyMatchingDescriptors(
         alloc: Allocator,
         list: *macos.foundation.Array,
@@ -800,7 +766,7 @@ test "fontconfig codepoint" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +784,7 @@ test "coretext" {
 }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
