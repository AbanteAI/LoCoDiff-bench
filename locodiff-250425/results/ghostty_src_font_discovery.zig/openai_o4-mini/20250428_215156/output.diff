
index 9e0324e4..ca00b557 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmpwopv_z1x_expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmpysr9_4mz_actual.txt	
@@ -8,10 +8,8 @@ const options = @import("main.zig").options;
 const Collection = @import("main.zig").Collection;
 const DeferredFace = @import("main.zig").DeferredFace;
 const Variation = @import("main.zig").face.Variation;
-
 const log = std.log.scoped(.discovery);
 
-/// Discover implementation for the compile options.
 pub const Discover = switch (options.backend) {
     .freetype => void, // no discovery
     .fontconfig_freetype => Fontconfig,
@@ -23,9 +21,6 @@ pub const Discover = switch (options.backend) {
     => CoreText,
 };
 
-/// Descriptor is used to search for fonts. The only required field
-/// is "family". The rest are ignored unless they're set to a non-zero
-/// value.
 pub const Descriptor = struct {
     /// Font family to search for. This can be a fully qualified font
     /// name such as "Fira Code", "monospace", "serif", etc. Memory is
@@ -76,7 +71,6 @@ pub const Descriptor = struct {
         autoHash(hasher, self.variations.len);
         for (self.variations) |variation| {
             autoHash(hasher, variation.id);
-
             // This is not correct, but we don't currently depend on the
             // hash value being different based on decimal values of variations.
             autoHash(hasher, @as(i64, @intFromFloat(variation.value)));
@@ -125,7 +119,7 @@ pub const Descriptor = struct {
         }
         if (self.size > 0) assert(pat.add(
             .size,
-            .{ .integer = @intFromFloat(@round(self.size)) },
+            .{ .integer = @round(self.size) },
             false,
         ));
         if (self.bold) assert(pat.add(
@@ -138,7 +132,6 @@ pub const Descriptor = struct {
             .{ .integer = @intFromEnum(fontconfig.Slant.italic) },
             false,
         ));
-
         // For fontconfig, we always add monospace in the pattern. Since
         // fontconfig sorts by closeness to the pattern, this doesn't fully
         // exclude non-monospace but helps prefer it.
@@ -147,7 +140,6 @@ pub const Descriptor = struct {
             .{ .integer = @intFromEnum(fontconfig.Spacing.mono) },
             false,
         ));
-
         return pat;
     }
 
@@ -193,10 +185,7 @@ pub const Descriptor = struct {
         // Set our size attribute if set
         if (self.size > 0) {
             const size32: i32 = @intFromFloat(@round(self.size));
-            const size = try macos.foundation.Number.create(
-                .sint32,
-                &size32,
-            );
+            const size = try macos.foundation.Number.create(.sint32, &size32);
             defer size.release();
             attrs.setValue(
                 macos.text.FontAttribute.size.key(),
@@ -204,37 +193,6 @@ pub const Descriptor = struct {
             );
         }
 
-        // Build our traits. If we set any, then we store it in the attributes
-        // otherwise we do nothing. We determine this by setting up the packed
-        // struct, converting to an int, and checking if it is non-zero.
-        const traits: macos.text.FontSymbolicTraits = .{
-            .bold = self.bold,
-            .italic = self.italic,
-            .monospace = self.monospace,
-        };
-        const traits_cval: u32 = @bitCast(traits);
-        if (traits_cval > 0) {
-            // Setting traits is a pain. We have to create a nested dictionary
-            // of the symbolic traits value, and set that in our attributes.
-            const traits_num = try macos.foundation.Number.create(
-                .sint32,
-                @as(*const i32, @ptrCast(&traits_cval)),
-            );
-            defer traits_num.release();
-
-            const traits_dict = try macos.foundation.MutableDictionary.create(0);
-            defer traits_dict.release();
-            traits_dict.setValue(
-                macos.text.FontTraitKey.symbolic.key(),
-                traits_num,
-            );
-
-            attrs.setValue(
-                macos.text.FontAttribute.traits.key(),
-                traits_dict,
-            );
-        }
-
         return try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
     }
 };
@@ -243,7 +201,6 @@ pub const Fontconfig = struct {
     fc_config: *fontconfig.Config,
 
     pub fn init() Fontconfig {
-        // safe to call multiple times and concurrently
         _ = fontconfig.init();
         return .{ .fc_config = fontconfig.initLoadConfigAndFonts() };
     }
@@ -252,13 +209,7 @@ pub const Fontconfig = struct {
         self.fc_config.destroy();
     }
 
-    /// Discover fonts from a descriptor. This returns an iterator that can
-    /// be used to build up the deferred fonts.
-    pub fn discover(
-        self: *const Fontconfig,
-        alloc: Allocator,
-        desc: Descriptor,
-    ) !DiscoverIterator {
+    pub fn discover(self: *const Fontconfig, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
         _ = alloc;
 
         // Build our pattern that we'll search for
@@ -282,12 +233,7 @@ pub const Fontconfig = struct {
         };
     }
 
-    pub fn discoverFallback(
-        self: *const Fontconfig,
-        alloc: Allocator,
-        collection: *Collection,
-        desc: Descriptor,
-    ) !DiscoverIterator {
+    pub fn discoverFallback(self: *const Fontconfig, alloc: Allocator, collection: *Collection, desc: Descriptor) !DiscoverIterator {
         _ = collection;
         return try self.discover(alloc, desc);
     }
@@ -306,7 +252,7 @@ pub const Fontconfig = struct {
             self.* = undefined;
         }
 
-        pub fn next(self: *DiscoverIterator) fontconfig.Error!?DeferredFace {
+        pub fn next(self: *DiscoverIterator) !?DeferredFace {
             if (self.i >= self.fonts.len) return null;
 
             // Get the copied pattern from our fontset that has the
@@ -362,9 +308,11 @@ pub const CoreText = struct {
         const list = set.createMatchingFontDescriptors();
         defer list.release();
 
-        // Sort our descriptors
-        const zig_list = try copyMatchingDescriptors(alloc, list);
+        // Bring the list of descriptors into zig land
+        var zig_list = try copyMatchingDescriptors(alloc, list);
         errdefer alloc.free(zig_list);
+
+        // Sort our descriptors
         sortMatchingDescriptors(&desc, zig_list);
 
         return DiscoverIterator{
@@ -439,8 +387,6 @@ pub const CoreText = struct {
         return it;
     }
 
-    /// Discover a font for a specific codepoint using the CoreText
-    /// CTFontCreateForString API.
     fn discoverCodepoint(
         self: *const CoreText,
         collection: *Collection,
@@ -550,7 +496,6 @@ pub const CoreText = struct {
         errdefer alloc.free(result);
         for (0..result.len) |i| {
             result[i] = list.getValueAtIndex(macos.text.FontDescriptor, i);
-
             // We need to retain because once the list is freed it will
             // release all its members.
             result[i].retain();
@@ -613,7 +558,7 @@ pub const CoreText = struct {
         }
     };
 
-    fn score(desc: *const Descriptor, ct_desc: *const macos.text.FontDescriptor) Score {
+    fn score(desc: *const Descriptor, ct_desc: *macos.text.FontDescriptor) Score {
         var score_acc: Score = .{};
 
         // We always load the font if we can since some things can only be
@@ -651,8 +596,6 @@ pub const CoreText = struct {
             score_acc.codepoint = font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
         }
 
-        // Get our symbolic traits for the descriptor so we can compare
-        // boolean attributes like bold, monospace, etc.
         const symbolic_traits: macos.text.FontSymbolicTraits = traits: {
             const traits = ct_desc.copyAttribute(.traits) orelse break :traits .{};
             defer traits.release();
@@ -667,26 +610,17 @@ pub const CoreText = struct {
         score_acc.monospace = symbolic_traits.monospace;
 
         score_acc.style = style: {
-            const style = ct_desc.copyAttribute(.style_name) orelse
-                break :style .unmatched;
+            const style = ct_desc.copyAttribute(.style_name) orelse break :style .unmatched;
             defer style.release();
 
             // Get our style string
             var buf: [128]u8 = undefined;
             const style_str = style.cstring(&buf, .utf8) orelse break :style .unmatched;
 
-            // If we have a specific desired style, attempt to search for that.
             if (desc.style) |desired_style| {
-                // Matching style string gets highest score
                 if (std.mem.eql(u8, desired_style, style_str)) break :style .match;
             } else if (!desc.bold and !desc.italic) {
-                // If we do not, and we have no symbolic traits, then we try
-                // to find "regular" (or no style). If we have symbolic traits
-                // we do nothing but we can improve scoring by taking that into
-                // account, too.
-                if (std.mem.eql(u8, "Regular", style_str)) {
-                    break :style .match;
-                }
+                if (std.mem.eql(u8, "Regular", style_str)) break :style .match;
             }
 
             // Otherwise the score is based on the length of the style string.
@@ -720,28 +654,17 @@ pub const CoreText = struct {
         pub fn next(self: *DiscoverIterator) !?DeferredFace {
             if (self.i >= self.list.len) return null;
 
-            // Get our descriptor. We need to remove the character set
-            // limitation because we may have used that to filter but we
-            // don't want it anymore because it'll restrict the characters
-            // available.
-            //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
             const desc = desc: {
                 const original = self.list[self.i];
-
-                // For some reason simply copying the attributes and recreating
-                // the descriptor removes the charset restriction. This is tested.
                 const attrs = original.copyAttributes();
                 defer attrs.release();
                 break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
             };
             defer desc.release();
 
-            // Create our font. We need a size to initialize it so we use size
-            // 12 but we will alter the size later.
             const font = try macos.text.Font.createWithFontDescriptor(desc, 12);
             errdefer font.release();
 
-            // Increment after we return
             defer self.i += 1;
 
             return DeferredFace{
@@ -790,12 +713,8 @@ test "fontconfig codepoint" {
     var it = try fc.discover(alloc, .{ .codepoint = 'A', .size = 12 });
     defer it.deinit();
 
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
     const face = (try it.next()).?;
     try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
     try testing.expect(face.hasCodepoint('B', null));
 }
 
@@ -829,11 +748,7 @@ test "coretext codepoint" {
     var it = try ct.discover(alloc, .{ .codepoint = 'A', .size = 12 });
     defer it.deinit();
 
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
     const face = (try it.next()).?;
     try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
     try testing.expect(face.hasCodepoint('B', null));
 }
\ No newline at end of file
