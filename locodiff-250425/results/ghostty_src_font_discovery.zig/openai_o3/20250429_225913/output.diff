
index 9e0324e4..a92f16e2 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmp_3jbzdqz_expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmp3qi4ft_n_actual.txt	
@@ -95,10 +95,6 @@ pub const Descriptor = struct {
     /// be an arena allocator of some sort since the descriptor
     /// itself doesn't support fine-grained deallocation of fields.
     pub fn clone(self: *const Descriptor, alloc: Allocator) !Descriptor {
-        // We can't do any errdefer cleanup in here. As documented we
-        // expect the allocator to be an arena so any errors should be
-        // cleaned up somewhere else.
-
         var copy = self.*;
         copy.family = if (self.family) |src| try alloc.dupeZ(u8, src) else null;
         copy.style = if (self.style) |src| try alloc.dupeZ(u8, src) else null;
@@ -362,9 +358,11 @@ pub const CoreText = struct {
         const list = set.createMatchingFontDescriptors();
         defer list.release();
 
-        // Sort our descriptors
+        // Bring the list of descriptors in to zig land
         const zig_list = try copyMatchingDescriptors(alloc, list);
         errdefer alloc.free(zig_list);
+
+        // Sort our descriptors
         sortMatchingDescriptors(&desc, zig_list);
 
         return DiscoverIterator{
@@ -654,11 +652,11 @@ pub const CoreText = struct {
         // Get our symbolic traits for the descriptor so we can compare
         // boolean attributes like bold, monospace, etc.
         const symbolic_traits: macos.text.FontSymbolicTraits = traits: {
-            const traits = ct_desc.copyAttribute(.traits) orelse break :traits .{};
-            defer traits.release();
+            const traits_dict = ct_desc.copyAttribute(.traits) orelse break :traits .{};
+            defer traits_dict.release();
 
             const key = macos.text.FontTraitKey.symbolic.key();
-            const symbolic = traits.getValue(macos.foundation.Number, key) orelse
+            const symbolic = traits_dict.getValue(macos.foundation.Number, key) orelse
                 break :traits .{};
 
             break :traits macos.text.FontSymbolicTraits.init(symbolic);
@@ -667,13 +665,11 @@ pub const CoreText = struct {
         score_acc.monospace = symbolic_traits.monospace;
 
         score_acc.style = style: {
-            const style = ct_desc.copyAttribute(.style_name) orelse
+            const style_attr = ct_desc.copyAttribute(.style_name) orelse
                 break :style .unmatched;
-            defer style.release();
-
-            // Get our style string
+            defer style_attr.release();
             var buf: [128]u8 = undefined;
-            const style_str = style.cstring(&buf, .utf8) orelse break :style .unmatched;
+            const style_str = style_attr.cstring(&buf, .utf8) orelse break :style .unmatched;
 
             // If we have a specific desired style, attempt to search for that.
             if (desc.style) |desired_style| {
@@ -713,6 +709,7 @@ pub const CoreText = struct {
         i: usize,
 
         pub fn deinit(self: *DiscoverIterator) void {
+            for (self.list) |desc| desc.release();
             self.alloc.free(self.list);
             self.* = undefined;
         }
@@ -724,7 +721,6 @@ pub const CoreText = struct {
             // limitation because we may have used that to filter but we
             // don't want it anymore because it'll restrict the characters
             // available.
-            //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
             const desc = desc: {
                 const original = self.list[self.i];
 
@@ -732,7 +728,9 @@ pub const CoreText = struct {
                 // the descriptor removes the charset restriction. This is tested.
                 const attrs = original.copyAttributes();
                 defer attrs.release();
-                break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
+                break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(
+                    attrs,
+                ));
             };
             defer desc.release();
 
@@ -800,7 +798,10 @@ test "fontconfig codepoint" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and
+        options.backend != .coretext_freetype and
+        options.backend != .coretext_harfbuzz and
+        options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +819,10 @@ test "coretext" {
 }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and
+        options.backend != .coretext_freetype and
+        options.backend != .coretext_harfbuzz and
+        options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
