
index 9e0324e4..ffd60b40 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmphpzhrpc__expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmp33jlr_fg_actual.txt	
@@ -392,7 +392,7 @@ pub const CoreText = struct {
         if (desc.codepoint >= 0x4E00 and
             desc.codepoint <= 0x9FFF)
         han: {
-            const han = try self.discoverCodepoint(
+            const han_desc = try self.discoverCodepoint(
                 collection,
                 desc,
             ) orelse break :han;
@@ -402,7 +402,7 @@ pub const CoreText = struct {
             // this is something we can optimize very easily...
             const list = try alloc.alloc(*macos.text.FontDescriptor, 1);
             errdefer alloc.free(list);
-            list[0] = han;
+            list[0] = han_desc;
 
             return DiscoverIterator{
                 .alloc = alloc,
@@ -654,11 +654,11 @@ pub const CoreText = struct {
         // Get our symbolic traits for the descriptor so we can compare
         // boolean attributes like bold, monospace, etc.
         const symbolic_traits: macos.text.FontSymbolicTraits = traits: {
-            const traits = ct_desc.copyAttribute(.traits) orelse break :traits .{};
-            defer traits.release();
+            const traits_attr = ct_desc.copyAttribute(.traits) orelse break :traits .{};
+            defer traits_attr.release();
 
             const key = macos.text.FontTraitKey.symbolic.key();
-            const symbolic = traits.getValue(macos.foundation.Number, key) orelse
+            const symbolic = traits_attr.getValue(macos.foundation.Number, key) orelse
                 break :traits .{};
 
             break :traits macos.text.FontSymbolicTraits.init(symbolic);
@@ -667,13 +667,13 @@ pub const CoreText = struct {
         score_acc.monospace = symbolic_traits.monospace;
 
         score_acc.style = style: {
-            const style = ct_desc.copyAttribute(.style_name) orelse
+            const style_attr = ct_desc.copyAttribute(.style_name) orelse
                 break :style .unmatched;
-            defer style.release();
+            defer style_attr.release();
 
             // Get our style string
             var buf: [128]u8 = undefined;
-            const style_str = style.cstring(&buf, .utf8) orelse break :style .unmatched;
+            const style_str = style_attr.cstring(&buf, .utf8) orelse break :style .unmatched;
 
             // If we have a specific desired style, attempt to search for that.
             if (desc.style) |desired_style| {
@@ -725,7 +725,7 @@ pub const CoreText = struct {
             // don't want it anymore because it'll restrict the characters
             // available.
             //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
-            const desc = desc: {
+            const ct_desc = desc: {
                 const original = self.list[self.i];
 
                 // For some reason simply copying the attributes and recreating
@@ -734,11 +734,11 @@ pub const CoreText = struct {
                 defer attrs.release();
                 break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
             };
-            defer desc.release();
+            defer ct_desc.release();
 
             // Create our font. We need a size to initialize it so we use size
             // 12 but we will alter the size later.
-            const font = try macos.text.Font.createWithFontDescriptor(desc, 12);
+            const font = try macos.text.Font.createWithFontDescriptor(ct_desc, 12);
             errdefer font.release();
 
             // Increment after we return
