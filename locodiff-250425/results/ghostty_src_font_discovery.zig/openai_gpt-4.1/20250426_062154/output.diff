--- ghostty_src_font_discovery.zig_expectedoutput.txt (expected)+++ ghostty_src_font_discovery.zig_extracted.txt (actual)@@ -11,7 +11,6 @@ 
 const log = std.log.scoped(.discovery);
 
-/// Discover implementation for the compile options.
 pub const Discover = switch (options.backend) {
     .freetype => void, // no discovery
     .fontconfig_freetype => Fontconfig,
@@ -541,7 +540,6 @@         // Get the descriptor
         return font.copyDescriptor();
     }
-
     fn copyMatchingDescriptors(
         alloc: Allocator,
         list: *macos.foundation.Array,
@@ -603,7 +601,7 @@         traits: Traits = .unmatched,
         style: Style = .unmatched,
         monospace: bool = false,
-        codepoint: bool = false,
+        codepoint: bool = false;
 
         const Traits = enum(u8) { unmatched = 0, _ };
         const Style = enum(u8) { unmatched = 0, match = 0xFF, _ };
@@ -660,7 +658,6 @@             const key = macos.text.FontTraitKey.symbolic.key();
             const symbolic = traits.getValue(macos.foundation.Number, key) orelse
                 break :traits .{};
-
             break :traits macos.text.FontSymbolicTraits.init(symbolic);
         };
 
@@ -800,7 +797,7 @@ }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +815,7 @@ }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
