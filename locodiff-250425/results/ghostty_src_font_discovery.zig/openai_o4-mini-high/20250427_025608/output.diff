--- ghostty_src_font_discovery.zig_expectedoutput.txt (expected)+++ ghostty_src_font_discovery.zig_extracted.txt (actual)@@ -15,26 +15,19 @@ pub const Discover = switch (options.backend) {
     .freetype => void, // no discovery
     .fontconfig_freetype => Fontconfig,
+    .coretext, .coretext_freetype, .coretext_harfbuzz, .coretext_noshape, => CoreText,
     .web_canvas => void, // no discovery
-    .coretext,
-    .coretext_freetype,
-    .coretext_harfbuzz,
-    .coretext_noshape,
-    => CoreText,
 };
 
 /// Descriptor is used to search for fonts. The only required field
 /// is "family". The rest are ignored unless they're set to a non-zero
-/// value.
+/// or non-null value.
 pub const Descriptor = struct {
     /// Font family to search for. This can be a fully qualified font
     /// name such as "Fira Code", "monospace", "serif", etc. Memory is
     /// owned by the caller and should be freed when this descriptor
     /// is no longer in use. The discovery structs will never store the
     /// descriptor.
-    ///
-    /// On systems that use fontconfig (Linux), this can be a full
-    /// fontconfig pattern, such as "Fira Code-14:bold".
     family: ?[:0]const u8 = null,
 
     /// Specific font style to search for. This will filter the style
@@ -62,7 +55,8 @@     /// will be preferred, but not guaranteed.
     variations: []const Variation = &.{},
 
-    /// Hash the descriptor with the given hasher.
+    /// Returns a hash code that can be used to uniquely identify this
+    /// action.
     pub fn hash(self: Descriptor, hasher: anytype) void {
         const autoHash = std.hash.autoHash;
         const autoHashStrat = std.hash.autoHashStrat;
@@ -128,16 +122,8 @@             .{ .integer = @intFromFloat(@round(self.size)) },
             false,
         ));
-        if (self.bold) assert(pat.add(
-            .weight,
-            .{ .integer = @intFromEnum(fontconfig.Weight.bold) },
-            false,
-        ));
-        if (self.italic) assert(pat.add(
-            .slant,
-            .{ .integer = @intFromEnum(fontconfig.Slant.italic) },
-            false,
-        ));
+        if (self.bold) assert(pat.add(.weight, .{ .integer = @intFromEnum(fontconfig.Weight.bold) }, false));
+        if (self.italic) assert(pat.add(.slant, .{ .integer = @intFromEnum(fontconfig.Slant.italic) }, false));
 
         // For fontconfig, we always add monospace in the pattern. Since
         // fontconfig sorts by closeness to the pattern, this doesn't fully
@@ -204,37 +190,6 @@             );
         }
 
-        // Build our traits. If we set any, then we store it in the attributes
-        // otherwise we do nothing. We determine this by setting up the packed
-        // struct, converting to an int, and checking if it is non-zero.
-        const traits: macos.text.FontSymbolicTraits = .{
-            .bold = self.bold,
-            .italic = self.italic,
-            .monospace = self.monospace,
-        };
-        const traits_cval: u32 = @bitCast(traits);
-        if (traits_cval > 0) {
-            // Setting traits is a pain. We have to create a nested dictionary
-            // of the symbolic traits value, and set that in our attributes.
-            const traits_num = try macos.foundation.Number.create(
-                .sint32,
-                @as(*const i32, @ptrCast(&traits_cval)),
-            );
-            defer traits_num.release();
-
-            const traits_dict = try macos.foundation.MutableDictionary.create(0);
-            defer traits_dict.release();
-            traits_dict.setValue(
-                macos.text.FontTraitKey.symbolic.key(),
-                traits_num,
-            );
-
-            attrs.setValue(
-                macos.text.FontAttribute.traits.key(),
-                traits_dict,
-            );
-        }
-
         return try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
     }
 };
@@ -254,23 +209,20 @@ 
     /// Discover fonts from a descriptor. This returns an iterator that can
     /// be used to build up the deferred fonts.
-    pub fn discover(
-        self: *const Fontconfig,
-        alloc: Allocator,
-        desc: Descriptor,
-    ) !DiscoverIterator {
+    pub fn discover(self: *const Fontconfig, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
         _ = alloc;
 
         // Build our pattern that we'll search for
         const pat = desc.toFcPattern();
-        errdefer pat.destroy();
+        defer pat.destroy();
+
         assert(self.fc_config.substituteWithPat(pat, .pattern));
         pat.defaultSubstitute();
 
         // Search
         const res = self.fc_config.fontSort(pat, false, null);
         if (res.result != .match) return error.FontConfigFailed;
-        errdefer res.fs.destroy();
+        defer res.fs.destroy();
 
         return .{
             .config = self.fc_config,
@@ -306,18 +258,14 @@             self.* = undefined;
         }
 
-        pub fn next(self: *DiscoverIterator) fontconfig.Error!?DeferredFace {
+        pub fn next(self: *DiscoverIterator) !?DeferredFace {
             if (self.i >= self.fonts.len) return null;
 
-            // Get the copied pattern from our fontset that has the
-            // attributes configured for rendering.
             const font_pattern = try self.config.fontRenderPrepare(
                 self.pattern,
                 self.fonts[self.i],
             );
-            errdefer font_pattern.destroy();
-
-            // Increment after we return
+            defer font_pattern.destroy();
             defer self.i += 1;
 
             return DeferredFace{
@@ -325,8 +273,8 @@                     .pattern = font_pattern,
                     .charset = (try font_pattern.get(.charset, 0)).char_set,
                     .langset = (try font_pattern.get(.lang, 0)).lang_set,
-                    .variations = self.variations,
                 },
+                .variations = self.variations,
             };
         }
     };
@@ -362,9 +310,11 @@         const list = set.createMatchingFontDescriptors();
         defer list.release();
 
+        // Bring the list of descriptors in to zig land
+        var zig_list = try copyMatchingDescriptors(alloc, list);
+        defer alloc.free(zig_list);
+
         // Sort our descriptors
-        const zig_list = try copyMatchingDescriptors(alloc, list);
-        errdefer alloc.free(zig_list);
         sortMatchingDescriptors(&desc, zig_list);
 
         return DiscoverIterator{
@@ -381,43 +331,11 @@         collection: *Collection,
         desc: Descriptor,
     ) !DiscoverIterator {
-        // If we have a codepoint within the CJK unified ideographs block
-        // then we fallback to macOS to find a font that supports it because
-        // there isn't a better way manually with CoreText that I can find that
-        // properly takes into account system locale.
-        //
-        // References:
-        // - http://unicode.org/charts/PDF/U4E00.pdf
-        // - https://chromium.googlesource.com/chromium/src/+/main/third_party/blink/renderer/platform/fonts/LocaleInFonts.md#unified-han-ideographs
-        if (desc.codepoint >= 0x4E00 and
-            desc.codepoint <= 0x9FFF)
-        han: {
-            const han = try self.discoverCodepoint(
-                collection,
-                desc,
-            ) orelse break :han;
-
-            // This is silly but our discover iterator needs a slice so
-            // we allocate here. This isn't a performance bottleneck but
-            // this is something we can optimize very easily...
-            const list = try alloc.alloc(*macos.text.FontDescriptor, 1);
-            errdefer alloc.free(list);
-            list[0] = han;
-
-            return DiscoverIterator{
-                .alloc = alloc,
-                .list = list,
-                .variations = desc.variations,
-                .i = 0,
-            };
-        }
-
-        const it = try self.discover(alloc, desc);
-
         // If our normal discovery doesn't find anything and we have a specific
         // codepoint, then fallback to using CTFontCreateForString to find a
-        // matching font CoreText wants to use. See:
-        // https://github.com/ghostty-org/ghostty/issues/2499
+        // matching font CoreText wants to use.
+        const it = try self.discover(alloc, desc);
+
         if (it.list.len == 0 and desc.codepoint > 0) codepoint: {
             const ct_desc = try self.discoverCodepoint(
                 collection,
@@ -425,7 +343,7 @@             ) orelse break :codepoint;
 
             const list = try alloc.alloc(*macos.text.FontDescriptor, 1);
-            errdefer alloc.free(list);
+            defer alloc.free(list);
             list[0] = ct_desc;
 
             return DiscoverIterator{
@@ -461,8 +379,7 @@         // from the descriptor.
         const original = original: {
             // In all the styles below, we try to match it but if we don't
-            // we always fall back to some other option. The order matters
-            // here.
+            // we always fall back to some other option. The order matters here.
 
             if (desc.bold and desc.italic) {
                 const entries = collection.faces.get(.bold_italic);
@@ -547,12 +464,9 @@         list: *macos.foundation.Array,
     ) ![]*macos.text.FontDescriptor {
         var result = try alloc.alloc(*macos.text.FontDescriptor, list.getCount());
-        errdefer alloc.free(result);
+        defer alloc.free(result);
         for (0..result.len) |i| {
             result[i] = list.getValueAtIndex(macos.text.FontDescriptor, i);
-
-            // We need to retain because once the list is freed it will
-            // release all its members.
             result[i].retain();
         }
         return result;
@@ -564,12 +478,6 @@     ) void {
         var desc_mut = desc.*;
         if (desc_mut.style == null) {
-            // If there is no explicit style set, we set a preferred
-            // based on the style bool attributes.
-            //
-            // TODO: doesn't handle i18n font names well, we should have
-            // another mechanism that uses the weight attribute if it exists.
-            // Wait for this to be a real problem.
             desc_mut.style = if (desc_mut.bold and desc_mut.italic)
                 "Bold Italic"
             else if (desc_mut.bold)
@@ -588,7 +496,6 @@             ) bool {
                 const lhs_score = score(desc_inner, lhs);
                 const rhs_score = score(desc_inner, rhs);
-                // Higher score is "less" (earlier)
                 return lhs_score.int() > rhs_score.int();
             }
         }.lessThan);
@@ -606,7 +513,7 @@         codepoint: bool = false,
 
         const Traits = enum(u8) { unmatched = 0, _ };
-        const Style = enum(u8) { unmatched = 0, match = 0xFF, _ };
+        const Style = enum(u8) { unmatched = 0x00, match = 0xFF, _ };
 
         pub fn int(self: Score) Backing {
             return @bitCast(self);
@@ -624,7 +531,6 @@         ) catch null;
         defer if (font_) |font| font.release();
 
-        // If we have a font, prefer the font with more glyphs.
         if (font_) |font| {
             const Type = @TypeOf(score_acc.glyph_count);
             score_acc.glyph_count = std.math.cast(
@@ -638,15 +544,12 @@         if (desc.codepoint > 0) codepoint: {
             const font = font_ orelse break :codepoint;
 
-            // Turn UTF-32 into UTF-16 for CT API
             var unichars: [2]u16 = undefined;
             const pair = macos.foundation.stringGetSurrogatePairForLongCharacter(
                 desc.codepoint,
                 &unichars,
             );
             const len: usize = if (pair) 2 else 1;
-
-            // Get our glyphs
             var glyphs = [2]macos.graphics.Glyph{ 0, 0 };
             score_acc.codepoint = font.getGlyphsForCharacters(unichars[0..len], glyphs[0..len]);
         }
@@ -666,36 +569,30 @@ 
         score_acc.monospace = symbolic_traits.monospace;
 
+        // Style scoring
         score_acc.style = style: {
             const style = ct_desc.copyAttribute(.style_name) orelse
                 break :style .unmatched;
             defer style.release();
 
-            // Get our style string
             var buf: [128]u8 = undefined;
             const style_str = style.cstring(&buf, .utf8) orelse break :style .unmatched;
 
             // If we have a specific desired style, attempt to search for that.
             if (desc.style) |desired_style| {
-                // Matching style string gets highest score
                 if (std.mem.eql(u8, desired_style, style_str)) break :style .match;
             } else if (!desc.bold and !desc.italic) {
-                // If we do not, and we have no symbolic traits, then we try
-                // to find "regular" (or no style). If we have symbolic traits
-                // we do nothing but we can improve scoring by taking that into
-                // account, too.
                 if (std.mem.eql(u8, "Regular", style_str)) {
                     break :style .match;
                 }
             }
 
             // Otherwise the score is based on the length of the style string.
-            // Shorter styles are scored higher. This is a heuristic that
-            // if we don't have a desired style then shorter tends to be
-            // more often the "regular" style.
+            // Shorter styles are scored higher.
             break :style @enumFromInt(100 -| style_str.len);
         };
 
+        // Match traits
         score_acc.traits = traits: {
             var count: u8 = 0;
             if (desc.bold == symbolic_traits.bold) count += 1;
@@ -720,29 +617,11 @@         pub fn next(self: *DiscoverIterator) !?DeferredFace {
             if (self.i >= self.list.len) return null;
 
-            // Get our descriptor. We need to remove the character set
-            // limitation because we may have used that to filter but we
-            // don't want it anymore because it'll restrict the characters
-            // available.
-            //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
-            const desc = desc: {
-                const original = self.list[self.i];
-
-                // For some reason simply copying the attributes and recreating
-                // the descriptor removes the charset restriction. This is tested.
-                const attrs = original.copyAttributes();
-                defer attrs.release();
-                break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
-            };
-            defer desc.release();
-
-            // Create our font. We need a size to initialize it so we use size
-            // 12 but we will alter the size later.
-            const font = try macos.text.Font.createWithFontDescriptor(desc, 12);
+            const original = self.list[self.i];
+            defer self.i += 1;
+
+            const font = try macos.text.Font.createWithFontDescriptor(original, 12);
             errdefer font.release();
-
-            // Increment after we return
-            defer self.i += 1;
 
             return DeferredFace{
                 .ct = .{
@@ -790,18 +669,13 @@     var it = try fc.discover(alloc, .{ .codepoint = 'A', .size = 12 });
     defer it.deinit();
 
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
     const face = (try it.next()).?;
     try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
     try testing.expect(face.hasCodepoint('B', null));
 }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
-        return error.SkipZigTest;
+    if (options.backend != .coretext and options.backend != .coretext_freetype) return error.SkipZigTest;
 
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -818,8 +692,7 @@ }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
-        return error.SkipZigTest;
+    if (options.backend != .coretext and options.backend != .coretext_freetype) return error.SkipZigTest;
 
     const testing = std.testing;
     const alloc = testing.allocator;
@@ -829,11 +702,14 @@     var it = try ct.discover(alloc, .{ .codepoint = 'A', .size = 12 });
     defer it.deinit();
 
-    // The first result should have the codepoint. Later ones may not
-    // because fontconfig returns all fonts sorted.
     const face = (try it.next()).?;
     try testing.expect(face.hasCodepoint('A', null));
-
-    // Should have other codepoints too
     try testing.expect(face.hasCodepoint('B', null));
+}
+
+test "fontconfig descriptor hash" {
+    const testing = std.testing;
+
+    var d: Descriptor = .{};
+    try testing.expect(d.hashcode() != 0);
 }