--- ghostty_src_font_discovery.zig_expectedoutput.txt (expected)+++ ghostty_src_font_discovery.zig_extracted.txt (actual)@@ -541,7 +541,6 @@         // Get the descriptor
         return font.copyDescriptor();
     }
-
     fn copyMatchingDescriptors(
         alloc: Allocator,
         list: *macos.foundation.Array,
@@ -615,7 +614,6 @@ 
     fn score(desc: *const Descriptor, ct_desc: *const macos.text.FontDescriptor) Score {
         var score_acc: Score = .{};
-
         // We always load the font if we can since some things can only be
         // inspected on the font itself.
         const font_: ?*macos.text.Font = macos.text.Font.createWithFontDescriptor(
@@ -660,7 +658,6 @@             const key = macos.text.FontTraitKey.symbolic.key();
             const symbolic = traits.getValue(macos.foundation.Number, key) orelse
                 break :traits .{};
-
             break :traits macos.text.FontSymbolicTraits.init(symbolic);
         };
 
@@ -800,7 +797,7 @@ }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +815,7 @@ }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
