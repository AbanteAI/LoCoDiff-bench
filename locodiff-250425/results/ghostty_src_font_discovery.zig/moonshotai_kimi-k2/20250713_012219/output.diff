
index 9e0324e46..95a1e6178 100644
--- a/ghostty_src_font_discovery.zig_expectedoutput.txt (expected):tmp/tmpwu4rtk32_expected.txt	
+++ b/ghostty_src_font_discovery.zig_extracted.txt (actual):tmp/tmpsa70ro1x_actual.txt	
@@ -344,7 +344,11 @@ pub const CoreText = struct {
 
     /// Discover fonts from a descriptor. This returns an iterator that can
     /// be used to build up the deferred fonts.
-    pub fn discover(self: *const CoreText, alloc: Allocator, desc: Descriptor) !DiscoverIterator {
+    pub fn discover(
+        self: *const CoreText,
+        alloc: Allocator,
+        desc: Descriptor,
+    ) !DiscoverIterator {
         _ = self;
 
         // Build our pattern that we'll search for
@@ -720,11 +724,8 @@ pub const CoreText = struct {
         pub fn next(self: *DiscoverIterator) !?DeferredFace {
             if (self.i >= self.list.len) return null;
 
-            // Get our descriptor. We need to remove the character set
-            // limitation because we may have used that to filter but we
-            // don't want it anymore because it'll restrict the characters
-            // available.
-            //const desc = self.list.getValueAtIndex(macos.text.FontDescriptor, self.i);
+            // Create our font. We need a size to initialize it so we use size
+            // 12 but we will alter the size later.
             const desc = desc: {
                 const original = self.list[self.i];
 
@@ -732,12 +733,12 @@ pub const CoreText = struct {
                 // the descriptor removes the charset restriction. This is tested.
                 const attrs = original.copyAttributes();
                 defer attrs.release();
-                break :desc try macos.text.FontDescriptor.createWithAttributes(@ptrCast(attrs));
+                break :desc try macos.text.FontDescriptor.createWithAttributes(
+                    @ptrCast(attrs),
+                );
             };
             defer desc.release();
 
-            // Create our font. We need a size to initialize it so we use size
-            // 12 but we will alter the size later.
             const font = try macos.text.Font.createWithFontDescriptor(desc, 12);
             errdefer font.release();
 
@@ -800,7 +801,8 @@ test "fontconfig codepoint" {
 }
 
 test "coretext" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and
+        options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
@@ -818,7 +820,8 @@ test "coretext" {
 }
 
 test "coretext codepoint" {
-    if (options.backend != .coretext and options.backend != .coretext_freetype)
+    if (options.backend != .coretext and options.backend != .coretext_freetype and
+        options.backend != .coretext_harfbuzz and options.backend != .coretext_noshape)
         return error.SkipZigTest;
 
     const testing = std.testing;
