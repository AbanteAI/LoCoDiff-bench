
index 47f78e90..ec088d34 100644
--- a/qdrant_lib_segment_src_index_struct_payload_index.rs_expectedoutput.txt (expected):tmp/tmpr0_xi5db_expected.txt	
+++ b/qdrant_lib_segment_src_index_struct_payload_index.rs_extracted.txt (actual):tmp/tmp02et4b8b_actual.txt	
@@ -134,8 +134,8 @@ impl StructPayloadIndex {
         payload_schema: &PayloadFieldSchema,
     ) -> OperationResult<Vec<FieldIndex>> {
         let mut indexes = self
-            .selector(payload_schema)
-            .new_index(field, payload_schema)?;
+            .selector(&payload_schema)
+            .new_index(field, &payload_schema)?;
 
         let mut is_loaded = true;
         for ref mut index in indexes.iter_mut() {
@@ -222,7 +222,7 @@ impl StructPayloadIndex {
         let payload_storage = self.payload.borrow();
         let mut builders = self
             .selector(payload_schema)
-            .index_builder(field, payload_schema)?;
+            .index_builder(field, &payload_schema)?;
 
         for index in &mut builders {
             index.init()?;
@@ -245,6 +245,17 @@ impl StructPayloadIndex {
             .collect()
     }
 
+    fn build_and_save(
+        &mut self,
+        field: PayloadKeyTypeRef,
+        payload_schema: &PayloadFieldSchema,
+        hw_counter: &HardwareCounterCell,
+    ) -> OperationResult<()> {
+        let field_indexes = self.build_field_indexes(field, payload_schema, hw_counter)?;
+        self.field_indexes.insert(field.into(), field_indexes);
+        Ok(())
+    }
+
     /// Number of available points
     ///
     /// - excludes soft deleted points
@@ -269,7 +280,7 @@ impl StructPayloadIndex {
         StructFilterContext::new(optimized_filter)
     }
 
-    pub(super) fn condition_cardinality(
+    fn condition_cardinality(
         &self,
         condition: &Condition,
         nested_path: Option<&JsonPath>,
@@ -311,17 +322,6 @@ impl StructPayloadIndex {
                     max: num_ids,
                 }
             }
-            Condition::HasVector(has_vectors) => {
-                if let Some(vector_storage) = self.vector_storages.get(&has_vectors.has_vector) {
-                    let vector_storage = vector_storage.borrow();
-                    let vectors = vector_storage.available_vector_count();
-                    CardinalityEstimation::exact(vectors).with_primary_clause(
-                        PrimaryCondition::HasVector(has_vectors.has_vector.clone()),
-                    )
-                } else {
-                    CardinalityEstimation::exact(0)
-                }
-            }
             Condition::Field(field_condition) => self
                 .estimate_field_condition(field_condition, nested_path, hw_counter)
                 .unwrap_or_else(|| CardinalityEstimation::unknown(self.available_point_count())),
@@ -332,37 +332,6 @@ impl StructPayloadIndex {
         }
     }
 
-    pub fn get_telemetry_data(&self) -> Vec<PayloadIndexTelemetry> {
-        self.field_indexes
-            .iter()
-            .flat_map(|(name, field)| -> Vec<PayloadIndexTelemetry> {
-                field
-                    .iter()
-                    .map(|field| field.get_telemetry_data().set_name(name.to_string()))
-                    .collect()
-            })
-            .collect()
-    }
-
-    pub fn restore_database_snapshot(
-        snapshot_path: &Path,
-        segment_path: &Path,
-    ) -> OperationResult<()> {
-        crate::rocksdb_backup::restore(snapshot_path, &segment_path.join("payload_index"))
-    }
-
-    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
-        for (_, field_indexes) in self.field_indexes.iter_mut() {
-            for index in field_indexes {
-                index.remove_point(point_id)?;
-            }
-        }
-        Ok(())
-    }
-    pub fn config(&self) -> &PayloadConfig {
-        &self.config
-    }
-
     pub fn iter_filtered_points<'a>(
         &'a self,
         filter: &'a Filter,
@@ -388,14 +357,12 @@ impl StructPayloadIndex {
                 .primary_clauses
                 .iter()
                 .flat_map(move |clause| {
-                    self.query_field(clause, hw_counter).unwrap_or_else(|| {
-                        // index is not built
-                        Box::new(id_tracker.iter_ids().measure_hw_with_cell(
+                    self.query_field(clause, hw_counter)
+                        .unwrap_or_else(|| Box::new(id_tracker.iter_ids().measure_hw_with_cell(
                             hw_counter,
                             size_of::<PointOffsetType>(),
                             |i| i.cpu_counter(),
-                        ))
-                    })
+                        )))
                 })
                 .filter(move |&id| !visited_list.check_and_update_visited(id))
                 .filter(move |&i| struct_filtered_context.check(i));
@@ -514,6 +481,7 @@ impl PayloadIndex for StructPayloadIndex {
 
     fn drop_index(&mut self, field: PayloadKeyTypeRef) -> OperationResult<()> {
         self.config.indexed_fields.remove(field);
+
         let removed_indexes = self.field_indexes.remove(field);
 
         if let Some(indexes) = removed_indexes {
