
index 47f78e90..74306a2b 100644
--- a/qdrant_lib_segment_src_index_struct_payload_index.rs_expectedoutput.txt (expected):tmp/tmpqu1s47nr_expected.txt	
+++ b/qdrant_lib_segment_src_index_struct_payload_index.rs_extracted.txt (actual):tmp/tmpv_r7zwn5_actual.txt	
@@ -2,6 +2,7 @@ use std::collections::HashMap;
 use std::fs::create_dir_all;
 use std::path::{Path, PathBuf};
 use std::sync::Arc;
+use std::mem::size_of;
 
 use ahash::AHashSet;
 use atomic_refcell::AtomicRefCell;
@@ -17,7 +18,9 @@ use schemars::_serde_json::Value;
 
 use super::field_index::FieldIndexBuilderTrait as _;
 use super::field_index::facet_index::FacetIndexEnum;
-use super::field_index::index_selector::{IndexSelector, IndexSelectorMmap, IndexSelectorRocksDb};
+use super::field_index::index_selector::{
+    IndexSelector, IndexSelectorMmap, IndexSelectorRocksDb,
+};
 use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
@@ -351,18 +354,6 @@ impl StructPayloadIndex {
         crate::rocksdb_backup::restore(snapshot_path, &segment_path.join("payload_index"))
     }
 
-    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
-        for (_, field_indexes) in self.field_indexes.iter_mut() {
-            for index in field_indexes {
-                index.remove_point(point_id)?;
-            }
-        }
-        Ok(())
-    }
-    pub fn config(&self) -> &PayloadConfig {
-        &self.config
-    }
-
     pub fn iter_filtered_points<'a>(
         &'a self,
         filter: &'a Filter,
@@ -443,6 +434,19 @@ impl StructPayloadIndex {
             })
     }
 
+    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
+        for (_, field_indexes) in self.field_indexes.iter_mut() {
+            for index in field_indexes {
+                index.remove_point(point_id)?;
+            }
+        }
+        Ok(())
+    }
+    
+    pub fn config(&self) -> &PayloadConfig {
+        &self.config
+    }
+
     pub fn populate(&self) -> OperationResult<()> {
         for (_, field_indexes) in self.field_indexes.iter() {
             for index in field_indexes {
@@ -592,9 +596,13 @@ impl PayloadIndex for StructPayloadIndex {
             None => Box::new(vec![].into_iter()),
             Some(indexes) => {
                 let field_clone = field.to_owned();
-                Box::new(indexes.iter().flat_map(move |field_index| {
-                    field_index.payload_blocks(threshold, field_clone.clone())
-                }))
+                Box::new(
+                    indexes
+                        .iter()
+                        .flat_map(move |field_index| {
+                            field_index.payload_blocks(threshold, field_clone.clone())
+                        }),
+                )
             }
         }
     }
