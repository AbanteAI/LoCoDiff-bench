
index 47f78e903..5b18a423c 100644
--- a/qdrant_lib_segment_src_index_struct_payload_index.rs_expectedoutput.txt (expected):tmp/tmpeirz1xou_expected.txt	
+++ b/qdrant_lib_segment_src_index_struct_payload_index.rs_extracted.txt (actual):tmp/tmpozfiyw_g_actual.txt	
@@ -15,7 +15,6 @@ use parking_lot::RwLock;
 use rocksdb::DB;
 use schemars::_serde_json::Value;
 
-use super::field_index::FieldIndexBuilderTrait as _;
 use super::field_index::facet_index::FacetIndexEnum;
 use super::field_index::index_selector::{IndexSelector, IndexSelectorMmap, IndexSelectorRocksDb};
 use crate::common::Flusher;
@@ -23,7 +22,7 @@ use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
 use crate::common::utils::IndexesMap;
 use crate::id_tracker::IdTrackerSS;
-use crate::index::PayloadIndex;
+use crate::index::field_index::FieldIndexBuilderTrait as _;
 use crate::index::field_index::{
     CardinalityEstimation, FieldIndex, PayloadBlockCondition, PrimaryCondition,
 };
@@ -32,6 +31,7 @@ use crate::index::query_estimator::estimate_filter;
 use crate::index::query_optimization::payload_provider::PayloadProvider;
 use crate::index::struct_filter_context::StructFilterContext;
 use crate::index::visited_pool::VisitedPool;
+use crate::index::PayloadIndex;
 use crate::json_path::JsonPath;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::{FilterContext, PayloadStorage};
@@ -146,7 +146,6 @@ impl StructPayloadIndex {
         }
         if !is_loaded {
             debug!("Index for `{field}` was not loaded. Building...");
-            // todo(ivan): decide what to do with indexes, which were not loaded
             indexes = self.build_field_indexes(
                 field,
                 payload_schema,
@@ -338,7 +337,7 @@ impl StructPayloadIndex {
             .flat_map(|(name, field)| -> Vec<PayloadIndexTelemetry> {
                 field
                     .iter()
-                    .map(|field| field.get_telemetry_data().set_name(name.to_string()))
+                    .map(|field| field.get_telemetry_data().set_name(name.clone()))
                     .collect()
             })
             .collect()
@@ -359,6 +358,7 @@ impl StructPayloadIndex {
         }
         Ok(())
     }
+
     pub fn config(&self) -> &PayloadConfig {
         &self.config
     }
@@ -376,8 +376,9 @@ impl StructPayloadIndex {
             let full_scan_iterator = id_tracker.iter_ids();
 
             // Worst case: query expected to return few matches, but index can't be used
-            let matched_points =
-                full_scan_iterator.filter(move |i| struct_filtered_context.check(*i));
+            let matched_points = full_scan_iterator
+                .filter(move |i| struct_filtered_context.check(*i))
+                .measure_hw_with_cell(hw_counter, 0, |_| 0);
 
             Either::Left(matched_points)
         } else {
@@ -392,13 +393,14 @@ impl StructPayloadIndex {
                         // index is not built
                         Box::new(id_tracker.iter_ids().measure_hw_with_cell(
                             hw_counter,
-                            size_of::<PointOffsetType>(),
-                            |i| i.cpu_counter(),
+                            std::mem::size_of::<PointOffsetType>(),
+                            |_| 0,
                         ))
                     })
                 })
                 .filter(move |&id| !visited_list.check_and_update_visited(id))
-                .filter(move |&i| struct_filtered_context.check(i));
+                .filter(move |&i| struct_filtered_context.check(i))
+                .measure_hw_with_cell(hw_counter, 0, |_| 0);
 
             Either::Right(iter)
         }
@@ -592,9 +594,11 @@ impl PayloadIndex for StructPayloadIndex {
             None => Box::new(vec![].into_iter()),
             Some(indexes) => {
                 let field_clone = field.to_owned();
-                Box::new(indexes.iter().flat_map(move |field_index| {
-                    field_index.payload_blocks(threshold, field_clone.clone())
-                }))
+                Box::new(
+                    indexes
+                        .iter()
+                        .flat_map(move |field_index| field_index.payload_blocks(threshold, field_clone.clone())),
+                )
             }
         }
     }
