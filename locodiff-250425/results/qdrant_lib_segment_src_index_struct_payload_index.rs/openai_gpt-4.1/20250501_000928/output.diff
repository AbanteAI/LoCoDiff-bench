
index 47f78e90..c429ac90 100644
--- a/qdrant_lib_segment_src_index_struct_payload_index.rs_expectedoutput.txt (expected):tmp/tmpus5qolw6_expected.txt	
+++ b/qdrant_lib_segment_src_index_struct_payload_index.rs_extracted.txt (actual):tmp/tmpjx0k4xxm_actual.txt	
@@ -23,7 +23,6 @@ use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
 use crate::common::utils::IndexesMap;
 use crate::id_tracker::IdTrackerSS;
-use crate::index::PayloadIndex;
 use crate::index::field_index::{
     CardinalityEstimation, FieldIndex, PayloadBlockCondition, PrimaryCondition,
 };
@@ -32,14 +31,15 @@ use crate::index::query_estimator::estimate_filter;
 use crate::index::query_optimization::payload_provider::PayloadProvider;
 use crate::index::struct_filter_context::StructFilterContext;
 use crate::index::visited_pool::VisitedPool;
+use crate::index::PayloadIndex;
 use crate::json_path::JsonPath;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::{FilterContext, PayloadStorage};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
     Condition, FieldCondition, Filter, IsEmptyCondition, IsNullCondition, Payload,
-    PayloadContainer, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef, PayloadSchemaType,
-    VectorNameBuf, infer_collection_value_type, infer_value_type,
+    PayloadContainer, PayloadField, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef,
+    PayloadSchemaType, VectorNameBuf, infer_collection_value_type, infer_value_type,
 };
 use crate::vector_storage::{VectorStorage, VectorStorageEnum};
 
@@ -70,45 +70,7 @@ pub struct StructPayloadIndex {
 }
 
 impl StructPayloadIndex {
-    pub fn estimate_field_condition(
-        &self,
-        condition: &FieldCondition,
-        nested_path: Option<&JsonPath>,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<CardinalityEstimation> {
-        let full_path = JsonPath::extend_or_new(nested_path, &condition.key);
-        self.field_indexes.get(&full_path).and_then(|indexes| {
-            // rewrite condition with fullpath to enable cardinality estimation
-            let full_path_condition = FieldCondition {
-                key: full_path,
-                ..condition.clone()
-            };
-
-            indexes
-                .iter()
-                .find_map(|index| index.estimate_cardinality(&full_path_condition, hw_counter))
-        })
-    }
-
-    fn query_field<'a>(
-        &'a self,
-        condition: &'a PrimaryCondition,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
-        match condition {
-            PrimaryCondition::Condition(field_condition) => {
-                let field_key = &field_condition.key;
-                let field_indexes = self.field_indexes.get(field_key)?;
-                field_indexes
-                    .iter()
-                    .find_map(|field_index| field_index.filter(field_condition, hw_counter))
-            }
-            PrimaryCondition::Ids(ids) => Some(Box::new(ids.iter().copied())),
-            PrimaryCondition::HasVector(_) => None,
-        }
-    }
-
-    fn config_path(&self) -> PathBuf {
+    pub fn config_path(&self) -> PathBuf {
         PayloadConfig::get_config_path(&self.path)
     }
 
@@ -213,41 +175,44 @@ impl StructPayloadIndex {
         Ok(index)
     }
 
-    pub fn build_field_indexes(
+    pub fn estimate_field_condition(
         &self,
-        field: PayloadKeyTypeRef,
-        payload_schema: &PayloadFieldSchema,
+        condition: &FieldCondition,
+        nested_path: Option<&JsonPath>,
         hw_counter: &HardwareCounterCell,
-    ) -> OperationResult<Vec<FieldIndex>> {
-        let payload_storage = self.payload.borrow();
-        let mut builders = self
-            .selector(payload_schema)
-            .index_builder(field, payload_schema)?;
-
-        for index in &mut builders {
-            index.init()?;
-        }
+    ) -> Option<CardinalityEstimation> {
+        let full_path = JsonPath::extend_or_new(nested_path, &condition.key);
+        self.field_indexes.get(&full_path).and_then(|indexes| {
+            // rewrite condition with fullpath to enable cardinality estimation
+            let full_path_condition = FieldCondition {
+                key: full_path,
+                ..condition.clone()
+            };
 
-        payload_storage.iter(
-            |point_id, point_payload| {
-                let field_value = &point_payload.get_value(field);
-                for builder in builders.iter_mut() {
-                    builder.add_point(point_id, field_value, hw_counter)?;
-                }
-                Ok(true)
-            },
-            hw_counter,
-        )?;
+            indexes
+                .iter()
+                .find_map(|index| index.estimate_cardinality(&full_path_condition, hw_counter))
+        })
+    }
 
-        builders
-            .into_iter()
-            .map(|builder| builder.finalize())
-            .collect()
+    fn query_field<'a>(
+        &'a self,
+        condition: &'a PrimaryCondition,
+        hw_counter: &'a HardwareCounterCell,
+    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
+        match condition {
+            PrimaryCondition::Condition(field_condition) => {
+                let field_key = &field_condition.key;
+                let field_indexes = self.field_indexes.get(field_key)?;
+                field_indexes
+                    .iter()
+                    .find_map(|field_index| field_index.filter(field_condition, hw_counter))
+            }
+            PrimaryCondition::Ids(ids) => Some(Box::new(ids.iter().copied())),
+            PrimaryCondition::HasVector(_) => None,
+        }
     }
 
-    /// Number of available points
-    ///
-    /// - excludes soft deleted points
     pub fn available_point_count(&self) -> usize {
         self.id_tracker.borrow().available_point_count()
     }
@@ -269,7 +234,7 @@ impl StructPayloadIndex {
         StructFilterContext::new(optimized_filter)
     }
 
-    pub(super) fn condition_cardinality(
+    pub fn condition_cardinality(
         &self,
         condition: &Condition,
         nested_path: Option<&JsonPath>,
@@ -332,35 +297,17 @@ impl StructPayloadIndex {
         }
     }
 
-    pub fn get_telemetry_data(&self) -> Vec<PayloadIndexTelemetry> {
-        self.field_indexes
-            .iter()
-            .flat_map(|(name, field)| -> Vec<PayloadIndexTelemetry> {
-                field
-                    .iter()
-                    .map(|field| field.get_telemetry_data().set_name(name.to_string()))
-                    .collect()
-            })
-            .collect()
-    }
-
-    pub fn restore_database_snapshot(
-        snapshot_path: &Path,
-        segment_path: &Path,
-    ) -> OperationResult<()> {
-        crate::rocksdb_backup::restore(snapshot_path, &segment_path.join("payload_index"))
-    }
-
-    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
-        for (_, field_indexes) in self.field_indexes.iter_mut() {
-            for index in field_indexes {
-                index.remove_point(point_id)?;
-            }
-        }
-        Ok(())
-    }
-    pub fn config(&self) -> &PayloadConfig {
-        &self.config
+    pub fn estimate_nested_cardinality(
+        &self,
+        query: &Filter,
+        nested_path: &JsonPath,
+        hw_counter: &HardwareCounterCell,
+    ) -> CardinalityEstimation {
+        let available_points = self.available_point_count();
+        let estimator = |condition: &Condition| {
+            self.condition_cardinality(condition, Some(nested_path), hw_counter)
+        };
+        estimate_filter(&estimator, query, available_points)
     }
 
     pub fn iter_filtered_points<'a>(
@@ -368,7 +315,7 @@ impl StructPayloadIndex {
         filter: &'a Filter,
         id_tracker: &'a IdTrackerSS,
         query_cardinality: &'a CardinalityEstimation,
-        hw_counter: &'a HardwareCounterCell,
+        hw_counter: &HardwareCounterCell,
     ) -> impl Iterator<Item = PointOffsetType> + 'a {
         let struct_filtered_context = self.struct_filtered_context(filter, hw_counter);
 
@@ -392,7 +339,7 @@ impl StructPayloadIndex {
                         // index is not built
                         Box::new(id_tracker.iter_ids().measure_hw_with_cell(
                             hw_counter,
-                            size_of::<PointOffsetType>(),
+                            std::mem::size_of::<PointOffsetType>(),
                             |i| i.cpu_counter(),
                         ))
                     })
@@ -404,34 +351,16 @@ impl StructPayloadIndex {
         }
     }
 
-    /// Select which type of PayloadIndex to use for the field
-    fn selector(&self, payload_schema: &PayloadFieldSchema) -> IndexSelector {
-        let is_on_disk = payload_schema.is_on_disk();
-
-        match &self.storage_type {
-            StorageType::Appendable(db) => IndexSelector::RocksDb(IndexSelectorRocksDb {
-                db,
-                is_appendable: true,
-            }),
-            StorageType::NonAppendableRocksDb(db) => {
-                // legacy logic: we keep rocksdb, but load mmap indexes
-                if is_on_disk {
-                    IndexSelector::Mmap(IndexSelectorMmap {
-                        dir: &self.path,
-                        is_on_disk,
-                    })
-                } else {
-                    IndexSelector::RocksDb(IndexSelectorRocksDb {
-                        db,
-                        is_appendable: false,
-                    })
-                }
-            }
-            StorageType::NonAppendable => IndexSelector::Mmap(IndexSelectorMmap {
-                dir: &self.path,
-                is_on_disk,
-            }),
-        }
+    pub fn get_telemetry_data(&self) -> Vec<PayloadIndexTelemetry> {
+        self.field_indexes
+            .iter()
+            .flat_map(|(name, field)| -> Vec<PayloadIndexTelemetry> {
+                field
+                    .iter()
+                    .map(|field| field.get_telemetry_data().set_name(name.to_string()))
+                    .collect()
+            })
+            .collect()
     }
 
     pub fn get_facet_index(&self, key: &JsonPath) -> OperationResult<FacetIndexEnum> {
@@ -471,6 +400,18 @@ impl StructPayloadIndex {
         }
         Ok(())
     }
+
+    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
+        for (_, field_indexes) in self.field_indexes.iter_mut() {
+            for index in field_indexes {
+                index.remove_point(point_id)?;
+            }
+        }
+        Ok(())
+    }
+    pub fn config(&self) -> &PayloadConfig {
+        &self.config
+    }
 }
 
 impl PayloadIndex for StructPayloadIndex {
@@ -599,7 +540,7 @@ impl PayloadIndex for StructPayloadIndex {
         }
     }
 
-    fn overwrite_payload(
+    fn assign_all(
         &mut self,
         point_id: PointOffsetType,
         payload: &Payload,
@@ -609,6 +550,7 @@ impl PayloadIndex for StructPayloadIndex {
             .borrow_mut()
             .overwrite(point_id, payload, hw_counter)?;
 
+        // TODO(io_measurement): Maybe add measurements to index here too.
         for (field, field_index) in &mut self.field_indexes {
             let field_value = payload.get_value(field);
             if !field_value.is_empty() {
@@ -767,4 +709,11 @@ impl PayloadIndex for StructPayloadIndex {
         files.push(self.config_path());
         files
     }
+
+    fn restore_database_snapshot(
+        snapshot_path: &Path,
+        segment_path: &Path,
+    ) -> OperationResult<()> {
+        crate::rocksdb_backup::restore(snapshot_path, &segment_path.join("payload_index"))
+    }
 }
\ No newline at end of file
