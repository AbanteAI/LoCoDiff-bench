```rust
use std::collections::HashMap;
use std::fs::create_dir_all;
use std::path::{Path, PathBuf};
use std::sync::Arc;

use ahash::AHashSet;
use atomic_refcell::AtomicRefCell;
use common::counter::hardware_counter::HardwareCounterCell;
use common::counter::iterator_hw_measurement::HwMeasurementIteratorExt;
use common::flags::feature_flags;
use common::types::PointOffsetType;
use itertools::Either;
use log::debug;
use parking_lot::RwLock;
use rocksdb::DB;
use schemars::_serde_json::Value;

use crate::common::Flusher;
use crate::common::operation_error::{OperationError, OperationResult};
use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
use crate::common::utils::IndexesMap;
use crate::entry::entry_point::OperationError as _, OperationResult as _;
use crate::id_tracker::IdTrackerSS;
use crate::index::field_index::facet_index::FacetIndexEnum;
use crate::index::field_index::index_selector::{
    IndexSelector, IndexSelectorMmap, IndexSelectorOnDisk, IndexSelectorRocksDb,
};
use crate::index::field_index::{CardinalityEstimation, FieldIndex, PayloadBlockCondition, PrimaryCondition};
use crate::index::payload_config::PayloadConfig;
use crate::index::query_estimator::estimate_filter;
use crate::index::query_optimization::payload_provider::PayloadProvider;
use crate::index::struct_filter_context::StructFilterContext;
use crate::index::visited_pool::VisitedPool;
use crate::index::PayloadIndex;
use crate::json_path::JsonPath;
use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
use crate::payload_storage::{FilterContext, PayloadStorage};
use crate::telemetry::PayloadIndexTelemetry;
use crate::types::{
    infer_collection_value_type, infer_value_type, Condition, FieldCondition, Filter,
    IsEmptyCondition, IsNullCondition, Payload, PayloadContainer, PayloadFieldSchema,
    PayloadKeyType, PayloadKeyTypeRef, PayloadSchemaType, VectorNameBuf,
};
use crate::vector_storage::{VectorStorage, VectorStorageEnum};

#[derive(Debug)]
enum StorageType {
    Appendable(Arc<RwLock<DB>>),
    NonAppendableRocksDb(Arc<RwLock<DB>>),
    NonAppendable,
}

/// `PayloadIndex` implementation, which actually uses index structures for providing faster search
#[derive(Debug)]
pub struct StructPayloadIndex {
    /// Payload storage
    pub(super) payload: Arc<AtomicRefCell<PayloadStorageEnum>>,
    /// Used for `has_id` condition and estimating cardinality
    pub(super) id_tracker: Arc<AtomicRefCell<IdTrackerSS>>,
    /// Vector storages for each field, used for `has_vector` condition
    pub(super) vector_storages: HashMap<VectorNameBuf, Arc<AtomicRefCell<VectorStorageEnum>>>,
    /// Indexes, associated with fields
    pub field_indexes: IndexesMap,
    config: PayloadConfig,
    /// Root of index persistence dir
    path: PathBuf,
    /// Used to select unique point ids
    visited_pool: VisitedPool,
    storage_type: StorageType,
}

impl StructPayloadIndex {
    /// Load or create a StructPayloadIndex at `path`.
    pub fn open(
        payload: Arc<AtomicRefCell<PayloadStorageEnum>>,
        id_tracker: Arc<AtomicRefCell<IdTrackerSS>>,
        vector_storages: HashMap<VectorNameBuf, Arc<AtomicRefCell<VectorStorageEnum>>>,
        path: &Path,
        is_appendable: bool,
    ) -> OperationResult<Self> {
        create_dir_all(path)?;
        let config_path = PayloadConfig::get_config_path(path);
        let config = if config_path.exists() {
            PayloadConfig::load(&config_path)?
        } else {
            let mut new_config = PayloadConfig::default();
            if feature_flags().payload_index_skip_rocksdb && !is_appendable {
                new_config.skip_rocksdb = Some(true);
            }
            new_config
        };

        let skip_rocksdb = config.skip_rocksdb.unwrap_or(false);

        let storage_type = if is_appendable {
            let db = open_db_with_existing_cf(path)
                .map_err(|err| OperationError::service_error(format!("RocksDB open error: {err}")))?;
            StorageType::Appendable(db)
        } else if skip_rocksdb {
            StorageType::NonAppendable
        } else {
            let db = open_db_with_existing_cf(path)
                .map_err(|err| OperationError::service_error(format!("RocksDB open error: {err}")))?;
            StorageType::NonAppendableRocksDb(db)
        };

        let mut index = StructPayloadIndex {
            payload,
            id_tracker,
            vector_storages,
            field_indexes: Default::default(),
            config,
            path: path.to_owned(),
            visited_pool: Default::default(),
            storage_type,
        };

        if !index.config_path().exists() {
            index.save_config()?;
        }
        index.load_all_fields()?;
        Ok(index)
    }

    fn config_path(&self) -> PathBuf {
        PayloadConfig::get_config_path(&self.path)
    }

    fn save_config(&self) -> OperationResult<()> {
        let config_path = self.config_path();
        self.config.save(&config_path)
    }

    fn load_all_fields(&mut self) -> OperationResult<()> {
        let mut field_indexes: IndexesMap = Default::default();
        for (field, payload_schema) in &self.config.indexed_fields {
            let field_index = self.load_from_db(field, payload_schema)?;
            field_indexes.insert(field.clone(), field_index);
        }
        self.field_indexes = field_indexes;
        Ok(())
    }

    fn load_from_db(
        &self,
        field: PayloadKeyTypeRef,
        payload_schema: &PayloadFieldSchema,
    ) -> OperationResult<Vec<FieldIndex>> {
        // select index storage based on StorageType/appendable/skip flags
        let mut indexes = self.selector(payload_schema).new_index(field, payload_schema)?;
        let mut is_loaded = true;
        for index in &mut indexes {
            if !index.load()? {
                is_loaded = false;
                break;
            }
        }
        if !is_loaded {
            debug!("Index for `{field}` was not loaded. Building...");
            indexes = self.build_field_indexes(field, payload_schema, &HardwareCounterCell::disposable())?;
        }
        Ok(indexes)
    }

    pub fn build_field_indexes(
        &self,
        field: PayloadKeyTypeRef,
        payload_schema: &PayloadFieldSchema,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<Vec<FieldIndex>> {
        let payload_storage = self.payload.borrow();
        let mut builders = self.selector(payload_schema).index_builder(field, payload_schema)?;
        for b in &mut builders {
            b.init()?;
        }
        payload_storage.iter(|point_id, point_payload| {
            let field_value = &point_payload.get_value(field);
            for builder in &mut builders {
                builder.add_point(point_id, field_value, hw_counter)?;
            }
            Ok(true)
        }, hw_counter)?;
        builders.into_iter().map(|b| b.finalize()).collect()
    }

    fn selector(&self, payload_schema: &PayloadFieldSchema) -> IndexSelector {
        let is_on_disk = payload_schema.is_on_disk();
        match &self.storage_type {
            StorageType::Appendable(db) => IndexSelector::RocksDb(IndexSelectorRocksDb {
                db,
                is_appendable: true,
            }),
            StorageType::NonAppendableRocksDb(db) => {
                // legacy logic: keep RocksDb but load Mmap for on-disk
                if is_on_disk {
                    IndexSelector::Mmap(IndexSelectorMmap {
                        dir: &self.path,
                        is_on_disk,
                    })
                } else {
                    IndexSelector::RocksDb(IndexSelectorRocksDb {
                        db,
                        is_appendable: false,
                    })
                }
            }
            StorageType::NonAppendable => IndexSelector::Mmap(IndexSelectorMmap {
                dir: &self.path,
                is_on_disk,
            }),
        }
    }

    pub fn total_points(&self) -> usize {
        self.id_tracker.borrow().total_point_count()
    }

    pub fn available_point_count(&self) -> usize {
        self.id_tracker.borrow().available_point_count()
    }

    pub fn populate(&self) -> OperationResult<()> {
        for indexes in self.field_indexes.values() {
            for idx in indexes {
                idx.populate()?;
            }
        }
        Ok(())
    }

    pub fn clear_cache(&self) -> OperationResult<()> {
        for indexes in self.field_indexes.values() {
            for idx in indexes {
                idx.clear_cache()?;
            }
        }
        Ok(())
    }

    pub fn clear_cache_if_on_disk(&self) -> OperationResult<()> {
        for indexes in self.field_indexes.values() {
            for idx in indexes {
                if idx.is_on_disk() {
                    idx.clear_cache()?;
                }
            }
        }
        Ok(())
    }

    pub fn get_telemetry_data(&self) -> Vec<PayloadIndexTelemetry> {
        self.field_indexes
            .iter()
            .flat_map(|(name, field)| {
                field.iter().map(|idx| idx.get_telemetry_data().set_name(name.clone())).collect::<Vec<_>>()
            })
            .collect()
    }
}

impl PayloadIndex for StructPayloadIndex {
    fn indexed_fields(&self) -> HashMap<PayloadKeyType, PayloadFieldSchema> {
        self.config.indexed_fields.clone()
    }

    fn build_index(
        &self,
        field: PayloadKeyTypeRef,
        payload_schema: &PayloadFieldSchema,
    ) -> OperationResult<Option<Vec<FieldIndex>>> {
        if let Some(prev) = self.config.indexed_fields.get(field) {
            if prev == payload_schema {
                return Ok(None);
            }
        }
        let idxs = self.build_field_indexes(field, payload_schema, &HardwareCounterCell::disposable())?;
        Ok(Some(idxs))
    }

    fn apply_index(
        &mut self,
        field: PayloadKeyType,
        payload_schema: PayloadFieldSchema,
        field_index: Vec<FieldIndex>,
    ) -> OperationResult<()> {
        self.field_indexes.insert(field.clone(), field_index);
        self.config.indexed_fields.insert(field, payload_schema);
        self.save_config()?;
        Ok(())
    }

    fn estimate_cardinality(
        &self,
        query: &Filter,
        hw_counter: &HardwareCounterCell,
    ) -> CardinalityEstimation {
        let available = self.available_point_count();
        let estimator =
            |cond: &Condition| self.condition_cardinality(cond, None, hw_counter);
        estimate_filter(&estimator, query, available)
    }

    fn query_points(
        &self,
        query: &Filter,
        hw_counter: &HardwareCounterCell,
    ) -> Vec<PointOffsetType> {
        let qcard = self.estimate_cardinality(query, hw_counter);
        let idt = self.id_tracker.borrow();
        self.iter_filtered_points(query, &*idt, &qcard, hw_counter)
            .collect()
    }

    fn filter_context<'a>(
        &'a self,
        filter: &'a Filter,
        hw_counter: &HardwareCounterCell,
    ) -> Box<dyn FilterContext + 'a> {
        Box::new(self.struct_filtered_context(filter, hw_counter))
    }

    fn payload_blocks(&self, field: PayloadKeyTypeRef, threshold: usize) -> Box<dyn Iterator<Item=PayloadBlockCondition> + '_> {
        match self.field_indexes.get(field) {
            None => Box::new(std::iter::empty()),
            Some(idxs) => {
                let key = field.clone();
                Box::new(idxs.iter().flat_map(move |idx| idx.payload_blocks(threshold, key.clone())))
            }
        }
    }

    fn take_database_snapshot(&self, path: &Path) -> OperationResult<()> {
        match &self.storage_type {
            StorageType::Appendable(db) | StorageType::NonAppendableRocksDb(db) => {
                let guard = db.read();
                crate::rocksdb_backup::create(&guard, path)
            }
            StorageType::NonAppendable => Ok(()),
        }
    }

    fn files(&self) -> Vec<PathBuf> {
        let mut files = self.field_indexes
            .values()
            .flat_map(|idxs| idxs.iter().flat_map(|idx| idx.files()))
            .collect::<Vec<_>>();
        files.push(self.config_path());
        files
    }

    fn assign(
        &mut self,
        point_id: PointOffsetType,
        payload: &Payload,
        key: &Option<JsonPath>,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<()> {
        if let Some(k) = key {
            self.payload.borrow_mut().set_by_key(point_id, payload, k, hw_counter)?;
        } else {
            self.payload.borrow_mut().set(point_id, payload, hw_counter)?;
        };
        let updated = self.get_payload(point_id, hw_counter)?;
        for (fld, idxs) in &mut self.field_indexes {
            let vals = updated.get_value(fld);
            if !vals.is_empty() {
                for idx in idxs {
                    idx.add_point(point_id, &vals, hw_counter)?;
                }
            } else {
                for idx in idxs {
                    idx.remove_point(point_id)?;
                }
            }
        }
        Ok(())
    }

    fn overwrite_payload(
        &mut self,
        point_id: PointOffsetType,
        payload: &Payload,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<()> {
        self.payload.borrow_mut().overwrite(point_id, payload, hw_counter)?;
        for (fld, idxs) in &mut self.field_indexes {
            let vals = payload.get_value(fld);
            if !vals.is_empty() {
                for idx in idxs {
                    idx.add_point(point_id, &vals, hw_counter)?;
                }
            } else {
                for idx in idxs {
                    idx.remove_point(point_id)?;
                }
            }
        }
        Ok(())
    }

    fn get_payload(
        &self,
        point_id: PointOffsetType,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<Payload> {
        self.payload.borrow().get(point_id, hw_counter)
    }

    fn delete_payload(
        &mut self,
        point_id: PointOffsetType,
        key: PayloadKeyTypeRef,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<Vec<Value>> {
        if let Some(idxs) = self.field_indexes.get_mut(key) {
            for idx in idxs {
                idx.remove_point(point_id)?;
            }
        }
        self.payload.borrow_mut().delete(point_id, key, hw_counter)
    }

    fn clear_payload(
        &mut self,
        point_id: PointOffsetType,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<Option<Payload>> {
        for idxs in self.field_indexes.values_mut() {
            for idx in idxs {
                idx.remove_point(point_id)?;
            }
        }
        self.payload.borrow_mut().clear(point_id, hw_counter)
    }

    fn infer_payload_type(
        &self,
        key: PayloadKeyTypeRef,
        hw_counter: &HardwareCounterCell,
    ) -> OperationResult<Option<PayloadSchemaType>> {
        let mut schema = None;
        self.payload.borrow().iter(
            |_id, payload: &Payload| {
                let vals = payload.get_value(key);
                schema = match vals.as_slice() {
                    [] => None,
                    [single] => infer_value_type(single),
                    multiple => infer_collection_value_type(multiple.iter().copied()),
                };
                Ok(false)
            },
            hw_counter,
        )?;
        Ok(schema)
    }

    fn get_facet_index(&self, key: &JsonPath) -> OperationResult<FacetIndexEnum> {
        self.field_indexes
            .get(key)
            .and_then(|idxs| idxs.iter().find_map(|idx| idx.as_facet_index()))
            .ok_or_else(|| OperationError::MissingMapIndexForFacet {
                key: key.to_string(),
            })
    }

    fn estimate_nested_cardinality(
        &self,
        query: &Filter,
        nested_path: &JsonPath,
        hw_counter: &HardwareCounterCell,
    ) -> CardinalityEstimation {
        let available = self.available_point_count();
        let estimator =
            |cond: &Condition| self.condition_cardinality(cond, Some(nested_path), hw_counter);
        estimate_filter(&estimator, query, available)
    }

    fn struct_filtered_context<'a>(
        &'a self,
        filter: &'a Filter,
        hw_counter: &HardwareCounterCell,
    ) -> StructFilterContext<'a> {
        let payload_provider = PayloadProvider::new(self.payload.clone());
        let (opt_f, _) = self.optimize_filter(filter, payload_provider, self.available_point_count(), hw_counter);
        StructFilterContext::new(opt_f)
    }

    pub fn iter_filtered_points<'a>(
        &'a self,
        filter: &'a Filter,
        id_tracker: &'a IdTrackerSS,
        query_cardinality: &'a CardinalityEstimation,
        hw_counter: &HardwareCounterCell,
    ) -> impl Iterator<Item = PointOffsetType> + 'a {
        let struct_filtered_context = self.struct_filtered_context(filter, hw_counter);

        if query_cardinality.primary_clauses.is_empty() {
            let full_scan = id_tracker.iter_ids();
            Either::Left(full_scan.filter(move |i| struct_filtered_context.check(*i)))
        } else {
            let mut visited = self.visited_pool.get(id_tracker.total_point_count());
            let iter = query_cardinality
                .primary_clauses
                .iter()
                .flat_map(move |clause| {
                    self.query_field(clause, hw_counter)
                        .unwrap_or_else(|| {
                            id_tracker.iter_ids().measure_hw_with_cell(hw_counter, std::mem::size_of::<PointOffsetType>(), |c| c.cpu_counter())
                        })
                })
                .filter(move |&id| !visited.check_and_update_visited(id))
                .filter(move |&i| struct_filtered_context.check(i));
            Either::Right(iter)
        }
    }

    fn condition_cardinality(
        &self,
        condition: &Condition,
        nested_path: Option<&JsonPath>,
        hw_counter: &HardwareCounterCell,
    ) -> CardinalityEstimation {
        match condition {
            Condition::Filter(_) => panic!("Unexpected branching"),
            Condition::Nested(nested) => {
                let p = JsonPath::extend_or_new(nested_path, &nested.array_key());
                self.estimate_nested_cardinality(nested.filter(), &p, hw_counter)
            }
            Condition::IsEmpty(IsEmptyCondition { is_empty: field }) => {
                let available = self.available_point_count();
                let cond = FieldCondition::new_is_empty(field.key.clone());
                self.estimate_field_condition(&cond, nested_path, hw_counter)
                    .unwrap_or_else(|| CardinalityEstimation::unknown(available))
            }
            Condition::IsNull(IsNullCondition { is_null: field }) => {
                let available = self.available_point_count();
                let cond = FieldCondition::new_is_null(field.key.clone());
                self.estimate_field_condition(&cond, nested_path, hw_counter)
                    .unwrap_or_else(|| CardinalityEstimation::unknown(available))
            }
            Condition::HasId(has_id) => {
                let id_ref = self.id_tracker.borrow();
                let mapped: AHashSet<PointOffsetType> = has_id
                    .has_id
                    .iter()
                    .filter_map(|ext| id_ref.internal_id(*ext))
                    .collect();
                let n = mapped.len();
                CardinalityEstimation::exact(n)
                    .with_primary_clause(PrimaryCondition::Ids(mapped))
            }
            Condition::HasVector(hv) => {
                if let Some(vs) = self.vector_storages.get(&hv.has_vector) {
                    let count = vs.borrow().available_vector_count();
                    CardinalityEstimation::exact(count)
                        .with_primary_clause(PrimaryCondition::HasVector(hv.has_vector.clone()))
                } else {
                    CardinalityEstimation::exact(0)
                }
            }
            Condition::Field(fc) => {
                self.estimate_field_condition(fc, nested_path, hw_counter)
                    .unwrap_or_else(|| CardinalityEstimation::unknown(self.available_point_count()))
            }
            Condition::CustomIdChecker(cond) => {
                cond.estimate_cardinality(self.available_point_count())
            }
        }
    }

    fn estimate_field_condition(
        &self,
        condition: &FieldCondition,
        nested_path: Option<&JsonPath>,
        hw_counter: &HardwareCounterCell,
    ) -> Option<CardinalityEstimation> {
        let full = JsonPath::extend_or_new(nested_path, &condition.key);
        self.field_indexes.get(&full).and_then(|idxs| {
            let cond2 = FieldCondition { key: full.clone(), ..condition.clone() };
            idxs.iter()
                .find_map(|idx| idx.estimate_cardinality(&cond2, hw_counter))
        })
    }
}
```