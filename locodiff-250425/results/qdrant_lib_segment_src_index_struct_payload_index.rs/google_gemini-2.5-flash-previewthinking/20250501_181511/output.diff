
index 47f78e90..8afb0f35 100644
--- a/qdrant_lib_segment_src_index_struct_payload_index.rs_expectedoutput.txt (expected):tmp/tmpmp1u3m1d_expected.txt	
+++ b/qdrant_lib_segment_src_index_struct_payload_index.rs_extracted.txt (actual):tmp/tmpp33or24r_actual.txt	
@@ -17,7 +17,9 @@ use schemars::_serde_json::Value;
 
 use super::field_index::FieldIndexBuilderTrait as _;
 use super::field_index::facet_index::FacetIndexEnum;
-use super::field_index::index_selector::{IndexSelector, IndexSelectorMmap, IndexSelectorRocksDb};
+use super::field_index::index_selector::{
+    IndexSelector, IndexSelectorMmap, IndexSelectorRocksDb,
+};
 use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_wrapper::open_db_with_existing_cf;
@@ -27,7 +29,7 @@ use crate::index::PayloadIndex;
 use crate::index::field_index::{
     CardinalityEstimation, FieldIndex, PayloadBlockCondition, PrimaryCondition,
 };
-use crate::index::payload_config::PayloadConfig;
+use crate::index::payload_config::{PayloadConfig, PayloadFieldSchema};
 use crate::index::query_estimator::estimate_filter;
 use crate::index::query_optimization::payload_provider::PayloadProvider;
 use crate::index::struct_filter_context::StructFilterContext;
@@ -38,7 +40,7 @@ use crate::payload_storage::{FilterContext, PayloadStorage};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{
     Condition, FieldCondition, Filter, IsEmptyCondition, IsNullCondition, Payload,
-    PayloadContainer, PayloadFieldSchema, PayloadKeyType, PayloadKeyTypeRef, PayloadSchemaType,
+    PayloadContainer, PayloadField, PayloadKeyType, PayloadKeyTypeRef, PayloadSchemaType,
     VectorNameBuf, infer_collection_value_type, infer_value_type,
 };
 use crate::vector_storage::{VectorStorage, VectorStorageEnum};
@@ -70,44 +72,6 @@ pub struct StructPayloadIndex {
 }
 
 impl StructPayloadIndex {
-    pub fn estimate_field_condition(
-        &self,
-        condition: &FieldCondition,
-        nested_path: Option<&JsonPath>,
-        hw_counter: &HardwareCounterCell,
-    ) -> Option<CardinalityEstimation> {
-        let full_path = JsonPath::extend_or_new(nested_path, &condition.key);
-        self.field_indexes.get(&full_path).and_then(|indexes| {
-            // rewrite condition with fullpath to enable cardinality estimation
-            let full_path_condition = FieldCondition {
-                key: full_path,
-                ..condition.clone()
-            };
-
-            indexes
-                .iter()
-                .find_map(|index| index.estimate_cardinality(&full_path_condition, hw_counter))
-        })
-    }
-
-    fn query_field<'a>(
-        &'a self,
-        condition: &'a PrimaryCondition,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
-        match condition {
-            PrimaryCondition::Condition(field_condition) => {
-                let field_key = &field_condition.key;
-                let field_indexes = self.field_indexes.get(field_key)?;
-                field_indexes
-                    .iter()
-                    .find_map(|field_index| field_index.filter(field_condition, hw_counter))
-            }
-            PrimaryCondition::Ids(ids) => Some(Box::new(ids.iter().copied())),
-            PrimaryCondition::HasVector(_) => None,
-        }
-    }
-
     fn config_path(&self) -> PathBuf {
         PayloadConfig::get_config_path(&self.path)
     }
@@ -138,7 +102,7 @@ impl StructPayloadIndex {
             .new_index(field, payload_schema)?;
 
         let mut is_loaded = true;
-        for ref mut index in indexes.iter_mut() {
+        for index in indexes.iter_mut() {
             if !index.load()? {
                 is_loaded = false;
                 break;
@@ -224,8 +188,8 @@ impl StructPayloadIndex {
             .selector(payload_schema)
             .index_builder(field, payload_schema)?;
 
-        for index in &mut builders {
-            index.init()?;
+        for builder in &mut builders {
+            builder.init()?;
         }
 
         payload_storage.iter(
@@ -332,37 +296,6 @@ impl StructPayloadIndex {
         }
     }
 
-    pub fn get_telemetry_data(&self) -> Vec<PayloadIndexTelemetry> {
-        self.field_indexes
-            .iter()
-            .flat_map(|(name, field)| -> Vec<PayloadIndexTelemetry> {
-                field
-                    .iter()
-                    .map(|field| field.get_telemetry_data().set_name(name.to_string()))
-                    .collect()
-            })
-            .collect()
-    }
-
-    pub fn restore_database_snapshot(
-        snapshot_path: &Path,
-        segment_path: &Path,
-    ) -> OperationResult<()> {
-        crate::rocksdb_backup::restore(snapshot_path, &segment_path.join("payload_index"))
-    }
-
-    fn clear_index_for_point(&mut self, point_id: PointOffsetType) -> OperationResult<()> {
-        for (_, field_indexes) in self.field_indexes.iter_mut() {
-            for index in field_indexes {
-                index.remove_point(point_id)?;
-            }
-        }
-        Ok(())
-    }
-    pub fn config(&self) -> &PayloadConfig {
-        &self.config
-    }
-
     pub fn iter_filtered_points<'a>(
         &'a self,
         filter: &'a Filter,
@@ -388,14 +321,15 @@ impl StructPayloadIndex {
                 .primary_clauses
                 .iter()
                 .flat_map(move |clause| {
-                    self.query_field(clause, hw_counter).unwrap_or_else(|| {
-                        // index is not built
-                        Box::new(id_tracker.iter_ids().measure_hw_with_cell(
-                            hw_counter,
-                            size_of::<PointOffsetType>(),
-                            |i| i.cpu_counter(),
-                        ))
-                    })
+                    self.query_field(clause, hw_counter)
+                        .unwrap_or_else(|| {
+                            // index is not built
+                            Box::new(id_tracker.iter_ids().measure_hw_with_cell(
+                                hw_counter,
+                                size_of::<PointOffsetType>(),
+                                |i| i.cpu_counter(),
+                            ))
+                        })
                 })
                 .filter(move |&id| !visited_list.check_and_update_visited(id))
                 .filter(move |&i| struct_filtered_context.check(i));
@@ -434,7 +368,10 @@ impl StructPayloadIndex {
         }
     }
 
-    pub fn get_facet_index(&self, key: &JsonPath) -> OperationResult<FacetIndexEnum> {
+    pub fn get_facet_index(
+        &self,
+        key: &JsonPath,
+    ) -> OperationResult<FacetIndexEnum> {
         self.field_indexes
             .get(key)
             .and_then(|index| index.iter().find_map(|index| index.as_facet_index()))
@@ -471,6 +408,9 @@ impl StructPayloadIndex {
         }
         Ok(())
     }
+    pub fn config(&self) -> &PayloadConfig {
+        &self.config
+    }
 }
 
 impl PayloadIndex for StructPayloadIndex {
@@ -587,13 +527,14 @@ impl PayloadIndex for StructPayloadIndex {
         &self,
         field: PayloadKeyTypeRef,
         threshold: usize,
+        hw_counter: &HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
         match self.field_indexes.get(field) {
             None => Box::new(vec![].into_iter()),
             Some(indexes) => {
                 let field_clone = field.to_owned();
                 Box::new(indexes.iter().flat_map(move |field_index| {
-                    field_index.payload_blocks(threshold, field_clone.clone())
+                    field_index.payload_blocks(threshold, field_clone.clone(), hw_counter)
                 }))
             }
         }
@@ -609,6 +550,7 @@ impl PayloadIndex for StructPayloadIndex {
             .borrow_mut()
             .overwrite(point_id, payload, hw_counter)?;
 
+        // TODO(io_measurement): Maybe add measurements to index here too.
         for (field, field_index) in &mut self.field_indexes {
             let field_value = payload.get_value(field);
             if !field_value.is_empty() {
