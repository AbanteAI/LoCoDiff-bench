--- aider_aider_voice.py_expectedoutput.txt (expected)+++ aider_aider_voice.py_extracted.txt (actual)@@ -6,42 +6,34 @@ import warnings
 
 from prompt_toolkit.shortcuts import prompt
+from pydub import AudioSegment  # noqa
+from pydub.exceptions import CouldntDecodeError, CouldntEncodeError  # noqa
 
 from aider.llm import litellm
 
-from .dump import dump  # noqa: F401
-
-warnings.filterwarnings(
-    "ignore", message="Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work"
-)
+warnings.filterwarnings("ignore", message="Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work")
 warnings.filterwarnings("ignore", category=SyntaxWarning)
-
-
-from pydub import AudioSegment  # noqa
-from pydub.exceptions import CouldntDecodeError, CouldntEncodeError  # noqa
 
 try:
     import soundfile as sf
 except (OSError, ModuleNotFoundError):
     sf = None
 
+from .dump import dump  # noqa: F401
 
 class SoundDeviceError(Exception):
     pass
-
 
 class Voice:
     max_rms = 0
     min_rms = 1e5
     pct = 0
-
     threshold = 0.15
 
     def __init__(self, audio_format="wav", device_name=None):
         if sf is None:
             raise SoundDeviceError
         try:
-            print("Initializing sound device...")
             import sounddevice as sd
 
             self.sd = sd
@@ -67,7 +59,6 @@                 self.device_id = device_id
             else:
                 self.device_id = None
-
         except (OSError, ModuleNotFoundError):
             raise SoundDeviceError
         if audio_format not in ["wav", "mp3", "webm"]:
@@ -123,9 +114,7 @@         except (TypeError, ValueError):
             sample_rate = 16000  # fallback to 16kHz if unable to query device
         except self.sd.PortAudioError:
-            raise SoundDeviceError(
-                "No audio input device detected. Please check your audio settings and try again."
-            )
+            raise SoundDeviceError("No audio input device detected. Please check your audio settings and try again.")
 
         self.start_time = time.time()
 
@@ -146,7 +135,7 @@         # Check file size and offer to convert to mp3 if too large
         file_size = os.path.getsize(temp_wav)
         if file_size > 24.9 * 1024 * 1024 and self.audio_format == "wav":
-            print("\nWarning: {temp_wav} is too large, switching to mp3 format.")
+            print(f"\nWarning: {temp_wav} is too large, switching to mp3 format.")
             use_audio_format = "mp3"
 
         filename = temp_wav
@@ -159,10 +148,13 @@                 filename = new_filename
             except (CouldntDecodeError, CouldntEncodeError) as e:
                 print(f"Error converting audio: {e}")
+                filename = temp_wav  # fall back to original file
             except (OSError, FileNotFoundError) as e:
                 print(f"File system error during conversion: {e}")
+                filename = temp_wav  # fall back to original file
             except Exception as e:
                 print(f"Unexpected error during audio conversion: {e}")
+                filename = temp_wav  # fall back to original file
 
         with open(filename, "rb") as fh:
             try:
@@ -177,11 +169,4 @@             os.remove(filename)
 
         text = transcript.text
-        return text
-
-
-if __name__ == "__main__":
-    api_key = os.getenv("OPENAI_API_KEY")
-    if not api_key:
-        raise ValueError("Please set the OPENAI_API_KEY environment variable.")
-    print(Voice().record_and_transcribe())+        return text