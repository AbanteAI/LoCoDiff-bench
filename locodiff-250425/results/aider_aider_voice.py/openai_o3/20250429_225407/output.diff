--- aider_aider_voice.py_expectedoutput.txt (expected)+++ aider_aider_voice.py_extracted.txt (actual)@@ -8,14 +8,12 @@ from prompt_toolkit.shortcuts import prompt
 
 from aider.llm import litellm
-
 from .dump import dump  # noqa: F401
 
 warnings.filterwarnings(
     "ignore", message="Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work"
 )
 warnings.filterwarnings("ignore", category=SyntaxWarning)
-
 
 from pydub import AudioSegment  # noqa
 from pydub.exceptions import CouldntDecodeError, CouldntEncodeError  # noqa
@@ -37,7 +35,7 @@ 
     threshold = 0.15
 
-    def __init__(self, audio_format="wav", device_name=None):
+    def __init__(self, audio_format: str = "wav", device_name: str | None = None):
         if sf is None:
             raise SoundDeviceError
         try:
@@ -56,7 +54,9 @@                         device_id = i
                         break
                 if device_id is None:
-                    available_inputs = [d["name"] for d in devices if d["max_input_channels"] > 0]
+                    available_inputs = [
+                        d["name"] for d in devices if d["max_input_channels"] > 0
+                    ]
                     raise ValueError(
                         f"Device '{device_name}' not found. Available input devices:"
                         f" {available_inputs}"
@@ -74,7 +74,7 @@             raise ValueError(f"Unsupported audio format: {audio_format}")
         self.audio_format = audio_format
 
-    def callback(self, indata, frames, time, status):
+    def callback(self, indata, frames, time, status):  # noqa: D401
         """This is called (from a separate thread) for each audio block."""
         import numpy as np
 
@@ -110,7 +110,9 @@             return
         except SoundDeviceError as e:
             print(f"Error: {e}")
-            print("Please ensure you have a working audio input device connected and try again.")
+            print(
+                "Please ensure you have a working audio input device connected and try again."
+            )
             return
 
     def raw_record_and_transcribe(self, history, language):
@@ -119,7 +121,9 @@         temp_wav = tempfile.mktemp(suffix=".wav")
 
         try:
-            sample_rate = int(self.sd.query_devices(self.device_id, "input")["default_samplerate"])
+            sample_rate = int(
+                self.sd.query_devices(self.device_id, "input")["default_samplerate"]
+            )
         except (TypeError, ValueError):
             sample_rate = 16000  # fallback to 16kHz if unable to query device
         except self.sd.PortAudioError:
@@ -131,7 +135,10 @@ 
         try:
             with self.sd.InputStream(
-                samplerate=sample_rate, channels=1, callback=self.callback, device=self.device_id
+                samplerate=sample_rate,
+                channels=1,
+                callback=self.callback,
+                device=self.device_id,
             ):
                 prompt(self.get_prompt, refresh_interval=0.1)
         except self.sd.PortAudioError as err:
@@ -143,7 +150,7 @@ 
         use_audio_format = self.audio_format
 
-        # Check file size and offer to convert to mp3 if too large
+        # Check file size and switch to mp3 if too large
         file_size = os.path.getsize(temp_wav)
         if file_size > 24.9 * 1024 * 1024 and self.audio_format == "wav":
             print("\nWarning: {temp_wav} is too large, switching to mp3 format.")
@@ -157,6 +164,10 @@                 audio.export(new_filename, format=use_audio_format)
                 os.remove(temp_wav)
                 filename = new_filename
+                print(
+                    f"Converted to {use_audio_format}, new size:"
+                    f" {os.path.getsize(filename) / 1024 / 1024:.1f}MB"
+                )
             except (CouldntDecodeError, CouldntEncodeError) as e:
                 print(f"Error converting audio: {e}")
             except (OSError, FileNotFoundError) as e:
@@ -177,11 +188,4 @@             os.remove(filename)
 
         text = transcript.text
-        return text
-
-
-if __name__ == "__main__":
-    api_key = os.getenv("OPENAI_API_KEY")
-    if not api_key:
-        raise ValueError("Please set the OPENAI_API_KEY environment variable.")
-    print(Voice().record_and_transcribe())+        return text