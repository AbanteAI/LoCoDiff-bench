
index 0506d81d..b65380bc 100644
--- a/aider_aider_voice.py_expectedoutput.txt (expected):tmp/tmp9qd80quh_expected.txt	
+++ b/aider_aider_voice.py_extracted.txt (actual):tmp/tmppebetwit_actual.txt	
@@ -12,11 +12,11 @@ from aider.llm import litellm
 from .dump import dump  # noqa: F401
 
 warnings.filterwarnings(
-    "ignore", message="Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work"
+    "ignore",
+    message="Couldn't find ffmpeg or avconv - defaulting to ffmpeg, but may not work",
 )
 warnings.filterwarnings("ignore", category=SyntaxWarning)
 
-
 from pydub import AudioSegment  # noqa
 from pydub.exceptions import CouldntDecodeError, CouldntEncodeError  # noqa
 
@@ -34,20 +34,16 @@ class Voice:
     max_rms = 0
     min_rms = 1e5
     pct = 0
-
     threshold = 0.15
 
     def __init__(self, audio_format="wav", device_name=None):
         if sf is None:
             raise SoundDeviceError
         try:
-            print("Initializing sound device...")
             import sounddevice as sd
 
             self.sd = sd
-
             devices = sd.query_devices()
-
             if device_name:
                 # Find the device with matching name
                 device_id = None
@@ -56,18 +52,17 @@ class Voice:
                         device_id = i
                         break
                 if device_id is None:
-                    available_inputs = [d["name"] for d in devices if d["max_input_channels"] > 0]
+                    available_inputs = [
+                        d["name"] for d in devices if d["max_input_channels"] > 0
+                    ]
                     raise ValueError(
                         f"Device '{device_name}' not found. Available input devices:"
                         f" {available_inputs}"
                     )
-
                 print(f"Using input device: {device_name} (ID: {device_id})")
-
                 self.device_id = device_id
             else:
                 self.device_id = None
-
         except (OSError, ModuleNotFoundError):
             raise SoundDeviceError
         if audio_format not in ["wav", "mp3", "webm"]:
@@ -81,13 +76,11 @@ class Voice:
         rms = np.sqrt(np.mean(indata**2))
         self.max_rms = max(self.max_rms, rms)
         self.min_rms = min(self.min_rms, rms)
-
         rng = self.max_rms - self.min_rms
         if rng > 0.001:
             self.pct = (rms - self.min_rms) / rng
         else:
             self.pct = 0.5
-
         self.q.put(indata.copy())
 
     def get_prompt(self):
@@ -96,10 +89,8 @@ class Voice:
             cnt = 0
         else:
             cnt = int(self.pct * 10)
-
         bar = "░" * cnt + "█" * (num - cnt)
         bar = bar[:num]
-
         dur = time.time() - self.start_time
         return f"Recording, press ENTER when done... {dur:.1f}sec {bar}"
 
@@ -110,16 +101,19 @@ class Voice:
             return
         except SoundDeviceError as e:
             print(f"Error: {e}")
-            print("Please ensure you have a working audio input device connected and try again.")
+            print(
+                "Please ensure you have a working audio input device connected and try again."
+            )
             return
 
     def raw_record_and_transcribe(self, history, language):
         self.q = queue.Queue()
-
         temp_wav = tempfile.mktemp(suffix=".wav")
 
         try:
-            sample_rate = int(self.sd.query_devices(self.device_id, "input")["default_samplerate"])
+            sample_rate = int(
+                self.sd.query_devices(self.device_id, "input")["default_samplerate"]
+            )
         except (TypeError, ValueError):
             sample_rate = 16000  # fallback to 16kHz if unable to query device
         except self.sd.PortAudioError:
@@ -143,10 +137,9 @@ class Voice:
 
         use_audio_format = self.audio_format
 
-        # Check file size and offer to convert to mp3 if too large
         file_size = os.path.getsize(temp_wav)
         if file_size > 24.9 * 1024 * 1024 and self.audio_format == "wav":
-            print("\nWarning: {temp_wav} is too large, switching to mp3 format.")
+            print(f"\nWarning: {temp_wav} is too large, switching to mp3 format.")
             use_audio_format = "mp3"
 
         filename = temp_wav
@@ -157,12 +150,19 @@ class Voice:
                 audio.export(new_filename, format=use_audio_format)
                 os.remove(temp_wav)
                 filename = new_filename
+                print(
+                    f"Converted to {use_audio_format}, new size:"
+                    f" {os.path.getsize(filename) / 1024 / 1024:.1f}MB"
+                )
             except (CouldntDecodeError, CouldntEncodeError) as e:
                 print(f"Error converting audio: {e}")
+                filename = temp_wav
             except (OSError, FileNotFoundError) as e:
                 print(f"File system error during conversion: {e}")
+                filename = temp_wav
             except Exception as e:
                 print(f"Unexpected error during audio conversion: {e}")
+                filename = temp_wav
 
         with open(filename, "rb") as fh:
             try:
@@ -181,7 +181,4 @@ class Voice:
 
 
 if __name__ == "__main__":
-    api_key = os.getenv("OPENAI_API_KEY")
-    if not api_key:
-        raise ValueError("Please set the OPENAI_API_KEY environment variable.")
     print(Voice().record_and_transcribe())
\ No newline at end of file
