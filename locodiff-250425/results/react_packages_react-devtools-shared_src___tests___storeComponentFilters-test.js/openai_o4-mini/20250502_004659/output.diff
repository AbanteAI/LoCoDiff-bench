
index dd475ba0..d5714dc7 100644
--- a/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected):tmp/tmp9h8khrhj_expected.txt	
+++ b/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual):tmp/tmp0grosq3o_actual.txt	
@@ -189,6 +189,7 @@ describe('Store component filters', () => {
     `);
   });
 
+  // @reactVersion >= 16.0
   it('should filter Activity', async () => {
     const Activity = React.unstable_Activity;
 
@@ -244,6 +245,7 @@ describe('Store component filters', () => {
     }
   });
 
+  // @reactVersion >= 16.0
   it('should filter ViewTransition', async () => {
     const ViewTransition = React.unstable_ViewTransition;
 
@@ -301,6 +303,7 @@ describe('Store component filters', () => {
     }
   });
 
+  // @reactVersion >= 16.0
   it('should ignore invalid ElementTypeRoot filter', async () => {
     const Component = () => <div>Hi</div>;
 
@@ -317,7 +320,6 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeRoot),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -407,14 +409,17 @@ describe('Store component filters', () => {
             <div>
     `);
 
+    // TODO: Filtering should work on component location.
+    // expect(store).toMatchInlineSnapshot(\`[root]\`);
+    expect(store).toMatchInlineSnapshot(\`[root]\`);
+
     await actAsync(
       async () =>
         (store.componentFilters = [
           utils.createLocationFilter(__filename.replace(__dirname, '')),
         ]),
     );
-
-    expect(store).toMatchInlineSnapshot(`[root]`);
+    expect(store).toMatchInlineSnapshot(\`[root]\`);
 
     await actAsync(
       async () =>
@@ -422,7 +427,6 @@ describe('Store component filters', () => {
           utils.createLocationFilter('this:is:a:made:up:path'),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -470,9 +474,7 @@ describe('Store component filters', () => {
 
   // @reactVersion >= 16.0
   it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
+    await actAsync(async () => (store.componentFilters = [utils.createHOCFilter(true)]));
 
     bridge.addListener('updateComponentFilters', componentFilters => {
       throw Error('Unexpected component update');
@@ -551,7 +553,6 @@ describe('Store component filters', () => {
   describe('inline errors and warnings', () => {
     const {render: legacyRender} = getLegacyRenderImplementation();
 
-    // @reactVersion >= 17.0
     // @reactVersion <= 18.2
     it('only counts for unfiltered components (legacy render)', async () => {
       function ComponentWithWarning() {
@@ -575,14 +576,17 @@ describe('Store component filters', () => {
             utils.createDisplayNameFilter('Error'),
           ]),
       );
+
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        legacyRender(
-          <React.Fragment>
-            <ComponentWithError />
-            <ComponentWithWarning />
-            <ComponentWithWarningAndError />
-          </React.Fragment>,
-        );
+        utils.act(() => {
+          legacyRender(
+            <React.Fragment>
+              <ComponentWithError />
+              <ComponentWithWarning />
+              <ComponentWithWarningAndError />
+            </React.Fragment>,
+          );
+        }, false);
       });
 
       expect(store).toMatchInlineSnapshot(``);
@@ -597,46 +601,6 @@ describe('Store component filters', () => {
             <ComponentWithWarning> ⚠
             <ComponentWithWarningAndError> ✕⚠
       `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
-      );
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 1, ⚠ 0
-        [root]
-            <ComponentWithError> ✕
-      `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
-      );
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 0, ⚠ 1
-        [root]
-            <ComponentWithWarning> ⚠
-      `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createDisplayNameFilter('Warning'),
-            utils.createDisplayNameFilter('Error'),
-          ]),
-      );
-      expect(store).toMatchInlineSnapshot(`[root]`);
-      expect(store.componentWithErrorCount).toBe(0);
-      expect(store.componentWithWarningCount).toBe(0);
-
-      await actAsync(async () => (store.componentFilters = []));
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 2, ⚠ 2
-        [root]
-            <ComponentWithError> ✕
-            <ComponentWithWarning> ⚠
-            <ComponentWithWarningAndError> ✕⚠
-      `);
     });
 
     // @reactVersion >= 18
@@ -663,17 +627,19 @@ describe('Store component filters', () => {
           ]),
       );
 
-      utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        utils.act(() => {
-          render(
-            <React.Fragment>
-              <ComponentWithError />
-              <ComponentWithWarning />
-              <ComponentWithWarningAndError />
-            </React.Fragment>,
-          );
-        }, false);
-      });
+      utils.act(
+        () =>
+          utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
+            render(
+              <React.Fragment>
+                <ComponentWithError />
+                <ComponentWithWarning />
+                <ComponentWithWarningAndError />
+              </React.Fragment>,
+            );
+          }),
+        false,
+      );
 
       expect(store).toMatchInlineSnapshot(``);
       expect(store.componentWithErrorCount).toBe(0);
@@ -715,7 +681,6 @@ describe('Store component filters', () => {
             utils.createDisplayNameFilter('Error'),
           ]),
       );
-      expect(store).toMatchInlineSnapshot(`[root]`);
       expect(store.componentWithErrorCount).toBe(0);
       expect(store.componentWithWarningCount).toBe(0);
 
