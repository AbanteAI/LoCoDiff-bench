--- react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual)@@ -189,6 +189,7 @@     `);
   });
 
+  // @reactVersion >= 16.0
   it('should filter Activity', async () => {
     const Activity = React.unstable_Activity;
 
@@ -244,6 +245,7 @@     }
   });
 
+  // @reactVersion >= 16.0
   it('should filter ViewTransition', async () => {
     const ViewTransition = React.unstable_ViewTransition;
 
@@ -301,6 +303,7 @@     }
   });
 
+  // @reactVersion >= 16.0
   it('should ignore invalid ElementTypeRoot filter', async () => {
     const Component = () => <div>Hi</div>;
 
@@ -317,7 +320,6 @@           utils.createElementTypeFilter(Types.ElementTypeRoot),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -407,14 +409,17 @@             <div>
     `);
 
+    // TODO: Filtering should work on component location.
+    // expect(store).toMatchInlineSnapshot(\`[root]\`);
+    expect(store).toMatchInlineSnapshot(\`[root]\`);
+
     await actAsync(
       async () =>
         (store.componentFilters = [
           utils.createLocationFilter(__filename.replace(__dirname, '')),
         ]),
     );
-
-    expect(store).toMatchInlineSnapshot(`[root]`);
+    expect(store).toMatchInlineSnapshot(\`[root]\`);
 
     await actAsync(
       async () =>
@@ -422,7 +427,6 @@           utils.createLocationFilter('this:is:a:made:up:path'),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -470,9 +474,7 @@ 
   // @reactVersion >= 16.0
   it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
+    await actAsync(async () => (store.componentFilters = [utils.createHOCFilter(true)]));
 
     bridge.addListener('updateComponentFilters', componentFilters => {
       throw Error('Unexpected component update');
@@ -551,7 +553,6 @@   describe('inline errors and warnings', () => {
     const {render: legacyRender} = getLegacyRenderImplementation();
 
-    // @reactVersion >= 17.0
     // @reactVersion <= 18.2
     it('only counts for unfiltered components (legacy render)', async () => {
       function ComponentWithWarning() {
@@ -575,97 +576,10 @@             utils.createDisplayNameFilter('Error'),
           ]),
       );
-      utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        legacyRender(
-          <React.Fragment>
-            <ComponentWithError />
-            <ComponentWithWarning />
-            <ComponentWithWarningAndError />
-          </React.Fragment>,
-        );
-      });
-
-      expect(store).toMatchInlineSnapshot(``);
-      expect(store.componentWithErrorCount).toBe(0);
-      expect(store.componentWithWarningCount).toBe(0);
-
-      await actAsync(async () => (store.componentFilters = []));
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 2, ⚠ 2
-        [root]
-            <ComponentWithError> ✕
-            <ComponentWithWarning> ⚠
-            <ComponentWithWarningAndError> ✕⚠
-      `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
-      );
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 1, ⚠ 0
-        [root]
-            <ComponentWithError> ✕
-      `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
-      );
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 0, ⚠ 1
-        [root]
-            <ComponentWithWarning> ⚠
-      `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createDisplayNameFilter('Warning'),
-            utils.createDisplayNameFilter('Error'),
-          ]),
-      );
-      expect(store).toMatchInlineSnapshot(`[root]`);
-      expect(store.componentWithErrorCount).toBe(0);
-      expect(store.componentWithWarningCount).toBe(0);
-
-      await actAsync(async () => (store.componentFilters = []));
-      expect(store).toMatchInlineSnapshot(`
-        ✕ 2, ⚠ 2
-        [root]
-            <ComponentWithError> ✕
-            <ComponentWithWarning> ⚠
-            <ComponentWithWarningAndError> ✕⚠
-      `);
-    });
-
-    // @reactVersion >= 18
-    it('only counts for unfiltered components (createRoot)', async () => {
-      function ComponentWithWarning() {
-        console.warn('test-only: render warning');
-        return null;
-      }
-      function ComponentWithError() {
-        console.error('test-only: render error');
-        return null;
-      }
-      function ComponentWithWarningAndError() {
-        console.error('test-only: render error');
-        console.warn('test-only: render warning');
-        return null;
-      }
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createDisplayNameFilter('Warning'),
-            utils.createDisplayNameFilter('Error'),
-          ]),
-      );
 
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
         utils.act(() => {
-          render(
+          legacyRender(
             <React.Fragment>
               <ComponentWithError />
               <ComponentWithWarning />
@@ -687,6 +601,58 @@             <ComponentWithWarning> ⚠
             <ComponentWithWarningAndError> ✕⚠
       `);
+    });
+
+    // @reactVersion >= 18
+    it('only counts for unfiltered components (createRoot)', async () => {
+      function ComponentWithWarning() {
+        console.warn('test-only: render warning');
+        return null;
+      }
+      function ComponentWithError() {
+        console.error('test-only: render error');
+        return null;
+      }
+      function ComponentWithWarningAndError() {
+        console.error('test-only: render error');
+        console.warn('test-only: render warning');
+        return null;
+      }
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createDisplayNameFilter('Warning'),
+            utils.createDisplayNameFilter('Error'),
+          ]),
+      );
+
+      utils.act(
+        () =>
+          utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
+            render(
+              <React.Fragment>
+                <ComponentWithError />
+                <ComponentWithWarning />
+                <ComponentWithWarningAndError />
+              </React.Fragment>,
+            );
+          }),
+        false,
+      );
+
+      expect(store).toMatchInlineSnapshot(``);
+      expect(store.componentWithErrorCount).toBe(0);
+      expect(store.componentWithWarningCount).toBe(0);
+
+      await actAsync(async () => (store.componentFilters = []));
+      expect(store).toMatchInlineSnapshot(`
+        ✕ 2, ⚠ 2
+        [root]
+            <ComponentWithError> ✕
+            <ComponentWithWarning> ⚠
+            <ComponentWithWarningAndError> ✕⚠
+      `);
 
       await actAsync(
         async () =>
@@ -715,7 +681,6 @@             utils.createDisplayNameFilter('Error'),
           ]),
       );
-      expect(store).toMatchInlineSnapshot(`[root]`);
       expect(store.componentWithErrorCount).toBe(0);
       expect(store.componentWithWarningCount).toBe(0);
 
