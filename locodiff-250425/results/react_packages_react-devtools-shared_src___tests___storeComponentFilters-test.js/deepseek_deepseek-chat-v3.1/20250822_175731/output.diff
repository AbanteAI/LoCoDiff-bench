
index dd475ba0a..b3581c3ea 100644
--- a/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected):tmp/tmpg41aiuqd_expected.txt	
+++ b/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual):tmp/tmpsfhx36n9_actual.txt	
@@ -42,439 +42,7 @@ describe('Store component filters', () => {
   // @reactVersion >= 16.0
   it('should throw if filters are updated while profiling', async () => {
     await actAsync(async () => store.profilerStore.startProfiling());
-    expect(() => (store.componentFilters = [])).toThrow(
-      'Cannot modify filter preferences while profiling',
-    );
-  });
-
-  // @reactVersion >= 16.0
-  it('should support filtering by element type', async () => {
-    class ClassComponent extends React.Component<{children: React$Node}> {
-      render() {
-        return <div>{this.props.children}</div>;
-      }
-    }
-    const FunctionComponent = () => <div>Hi</div>;
-
-    await actAsync(async () =>
-      render(
-        <ClassComponent>
-          <FunctionComponent />
-        </ClassComponent>,
-      ),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ClassComponent>
-          ▾ <div>
-            ▾ <FunctionComponent>
-                <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeHostComponent),
-        ]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ClassComponent>
-            <FunctionComponent>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeClass),
-        ]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <div>
-          ▾ <FunctionComponent>
-              <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeClass),
-          utils.createElementTypeFilter(Types.ElementTypeFunction),
-        ]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <div>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeClass, false),
-          utils.createElementTypeFilter(Types.ElementTypeFunction, false),
-        ]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ClassComponent>
-          ▾ <div>
-            ▾ <FunctionComponent>
-                <div>
-    `);
-
-    await actAsync(async () => (store.componentFilters = []));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ClassComponent>
-          ▾ <div>
-            ▾ <FunctionComponent>
-                <div>
-    `);
-  });
-
-  // @reactVersion >= 16.0
-  it('should filter Suspense', async () => {
-    const Suspense = React.Suspense;
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Suspense>
-            <div>Visible</div>
-          </Suspense>
-          <Suspense>
-            <div>Hidden</div>
-          </Suspense>
-        </React.Fragment>,
-      ),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-  });
-
-  it('should filter Activity', async () => {
-    const Activity = React.unstable_Activity;
-
-    if (Activity != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <Activity mode="visible">
-              <div>Visible</div>
-            </Activity>
-            <Activity mode="hidden">
-              <div>Hidden</div>
-            </Activity>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-          <div>
-          <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-    }
-  });
-
-  it('should filter ViewTransition', async () => {
-    const ViewTransition = React.unstable_ViewTransition;
-
-    if (ViewTransition != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <ViewTransition>
-              <div>Visible</div>
-            </ViewTransition>
-            <ViewTransition>
-              <div>Hidden</div>
-            </ViewTransition>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-    }
-  });
-
-  it('should ignore invalid ElementTypeRoot filter', async () => {
-    const Component = () => <div>Hi</div>;
-
-    await actAsync(async () => render(<Component />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeRoot),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-  });
-
-  // @reactVersion >= 16.2
-  it('should filter by display name', async () => {
-    const Text = ({label}) => label;
-    const Foo = () => <Text label="foo" />;
-    const Bar = () => <Text label="bar" />;
-    const Baz = () => <Text label="baz" />;
-
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Foo />
-          <Bar />
-          <Baz />
-        </React.Fragment>,
-      ),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-          <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-          <Text>
-          <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('B.z')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-          <Text>
-    `);
-  });
-
-  // Disabled: filtering by path was removed, source is now determined lazily, including symbolication if applicable
-  // @reactVersion >= 16.0
-  // eslint-disable-next-line jest/no-disabled-tests
-  it.skip('should filter by path', async () => {
-    // This component should use props object in order to throw for component stack generation
-    // See ReactComponentStackFrame:155 or DevToolsComponentStackFrame:147
-    const Component = props => {
-      return <div>{props.message}</div>;
-    };
-
-    await actAsync(async () => render(<Component message="Hi" />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createLocationFilter(__filename.replace(__dirname, '')),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`[root]`);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createLocationFilter('this:is:a:made:up:path'),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-  });
-
-  // @reactVersion >= 16.0
-  it('should filter HOCs', async () => {
-    const Component = () => <div>Hi</div>;
-    const Foo = () => <Component />;
-    Foo.displayName = 'Foo(Component)';
-    const Bar = () => <Foo />;
-    Bar.displayName = 'Bar(Foo(Component))';
-
-    await actAsync(async () => render(<Bar />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component> [Bar][Foo]
-          ▾ <Component> [Foo]
-            ▾ <Component>
-                <div>
-    `);
-
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(false)]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component> [Bar][Foo]
-          ▾ <Component> [Foo]
-            ▾ <Component>
-                <div>
-    `);
-  });
-
-  // @reactVersion >= 16.0
-  it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
-
-    bridge.addListener('updateComponentFilters', componentFilters => {
+    expect(() => (store.componentFilters極) => {
       throw Error('Unexpected component update');
     });
 
@@ -487,7 +55,7 @@ describe('Store component filters', () => {
     );
     await actAsync(
       async () =>
-        (store.componentFilters = [
+        (极componentFilters = [
           utils.createHOCFilter(true),
           utils.createLocationFilter('abc', false),
         ]),
@@ -539,13 +107,7 @@ describe('Store component filters', () => {
             <Component>
     `);
 
-    await actAsync(async () => render(<Wrapper shouldSuspend={true} />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Wrapper>
-          ▾ <Loading>
-              <div>
-    `);
+    await actAsync(async () => render(<Wrapper shouldSuspend极
   });
 
   describe('inline errors and warnings', () => {
@@ -595,9 +157,7 @@ describe('Store component filters', () => {
         [root]
             <ComponentWithError> ✕
             <ComponentWithWarning> ⚠
-            <ComponentWithWarningAndError> ✕⚠
-      `);
-
+            <ComponentWithWarningAndError极
       await actAsync(
         async () =>
           (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
@@ -612,7 +172,7 @@ describe('Store component filters', () => {
         async () =>
           (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
       );
-      expect(store).toMatchInlineSnapshot(`
+      expect(store).极
         ✕ 0, ⚠ 1
         [root]
             <ComponentWithWarning> ⚠
@@ -631,8 +191,7 @@ describe('Store component filters', () => {
 
       await actAsync(async () => (store.componentFilters = []));
       expect(store).toMatchInlineSnapshot(`
-        ✕ 2, ⚠ 2
-        [root]
+        ✕ 极
             <ComponentWithError> ✕
             <ComponentWithWarning> ⚠
             <ComponentWithWarningAndError> ✕⚠
@@ -649,7 +208,7 @@ describe('Store component filters', () => {
         console.error('test-only: render error');
         return null;
       }
-      function ComponentWithWarningAndError() {
+      function ComponentWithWarningAnd极
         console.error('test-only: render error');
         console.warn('test-only: render warning');
         return null;
@@ -690,11 +249,9 @@ describe('Store component filters', () => {
 
       await actAsync(
         async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
-      );
+          (store.componentFilters = [极
       expect(store).toMatchInlineSnapshot(`
-        ✕ 1, ⚠ 0
-        [root]
+        ✕ 1, ⚠ 0极
             <ComponentWithError> ✕
       `);
 
