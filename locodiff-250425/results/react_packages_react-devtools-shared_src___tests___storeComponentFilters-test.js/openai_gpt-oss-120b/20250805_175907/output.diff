
index dd475ba0a..a57b7bfe9 100644
--- a/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected):tmp/tmpm667y6jg_expected.txt	
+++ b/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual):tmp/tmpbfar8j5k_actual.txt	
@@ -77,6 +77,7 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeHostComponent),
         ]),
     );
+
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <ClassComponent>
@@ -89,6 +90,7 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeClass),
         ]),
     );
+
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <div>
@@ -103,6 +105,7 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeFunction),
         ]),
     );
+
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <div>
@@ -116,6 +119,7 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeFunction, false),
         ]),
     );
+
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <ClassComponent>
@@ -135,172 +139,6 @@ describe('Store component filters', () => {
   });
 
   // @reactVersion >= 16.0
-  it('should filter Suspense', async () => {
-    const Suspense = React.Suspense;
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Suspense>
-            <div>Visible</div>
-          </Suspense>
-          <Suspense>
-            <div>Hidden</div>
-          </Suspense>
-        </React.Fragment>,
-      ),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-  });
-
-  it('should filter Activity', async () => {
-    const Activity = React.unstable_Activity;
-
-    if (Activity != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <Activity mode="visible">
-              <div>Visible</div>
-            </Activity>
-            <Activity mode="hidden">
-              <div>Hidden</div>
-            </Activity>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-          <div>
-          <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-    }
-  });
-
-  it('should filter ViewTransition', async () => {
-    const ViewTransition = React.unstable_ViewTransition;
-
-    if (ViewTransition != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <ViewTransition>
-              <div>Visible</div>
-            </ViewTransition>
-            <ViewTransition>
-              <div>Hidden</div>
-            </ViewTransition>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-    }
-  });
-
   it('should ignore invalid ElementTypeRoot filter', async () => {
     const Component = () => <div>Hi</div>;
 
@@ -317,7 +155,6 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeRoot),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -352,8 +189,7 @@ describe('Store component filters', () => {
     `);
 
     await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
+      async () => (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
     );
     expect(store).toMatchInlineSnapshot(`
       [root]
@@ -365,8 +201,7 @@ describe('Store component filters', () => {
     `);
 
     await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
+      async () => (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
     );
     expect(store).toMatchInlineSnapshot(`
       [root]
@@ -390,8 +225,8 @@ describe('Store component filters', () => {
     `);
   });
 
-  // Disabled: filtering by path was removed, source is now determined lazily, including symbolication if applicable
   // @reactVersion >= 16.0
+  // Disabled: filtering by path was removed, source is now determined lazily, including symbolication if applicable
   // eslint-disable-next-line jest/no-disabled-tests
   it.skip('should filter by path', async () => {
     // This component should use props object in order to throw for component stack generation
@@ -414,7 +249,13 @@ describe('Store component filters', () => {
         ]),
     );
 
-    expect(store).toMatchInlineSnapshot(`[root]`);
+    // TODO: Filtering should work on component location.
+    // expect(store).toMatchInlineSnapshot(\`[root]\`);
+    expect(store).toMatchInlineSnapshot(\`
+      [root]
+        ▾ <Component>
+            <div>
+    \`);
 
     await actAsync(
       async () =>
@@ -423,11 +264,7 @@ describe('Store component filters', () => {
         ]),
     );
 
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
+    expect(store).toMatchInlineSnapshot(\`[root]\`);
   });
 
   // @reactVersion >= 16.0
@@ -470,9 +307,7 @@ describe('Store component filters', () => {
 
   // @reactVersion >= 16.0
   it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
+    await actAsync(async () => (store.componentFilters = [utils.createHOCFilter(true)]));
 
     bridge.addListener('updateComponentFilters', componentFilters => {
       throw Error('Unexpected component update');
@@ -548,10 +383,200 @@ describe('Store component filters', () => {
     `);
   });
 
-  describe('inline errors and warnings', () => {
-    const {render: legacyRender} = getLegacyRenderImplementation();
+  // @reactVersion >= 16.0
+  it('should filter Suspense', async () => {
+    const Suspense = React.Suspense;
+    await actAsync(async () =>
+      render(
+        <React.Fragment>
+          <Suspense>
+            <div>Visible</div>
+          </Suspense>
+          <Suspense>
+            <div>Hidden</div>
+          </Suspense>
+        </React.Fragment>,
+      ),
+    );
 
-    // @reactVersion >= 17.0
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeActivity),
+        ]),
+    );
+
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+        ]),
+    );
+
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+  });
+
+  // @reactVersion >= 16.0
+  it('should filter Activity', async () => {
+    const Activity = React.unstable_Activity;
+
+    if (Activity != null) {
+      await actAsync(async () =>
+        render(
+          <React.Fragment>
+            <Activity mode="visible">
+              <div>Visible</div>
+            </Activity>
+            <Activity mode="hidden">
+              <div>Hidden</div>
+            </Activity>
+          </React.Fragment>,
+        ),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Activity>
+            <div>
+        ▾ <Activity>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+          <div>
+          <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Activity>
+            <div>
+        ▾ <Activity>
+            <div>
+    `);
+    }
+  });
+
+  // @reactVersion >= 16.0
+  it('should filter ViewTransition', async () => {
+    const ViewTransition = React.unstable_ViewTransition;
+
+    if (ViewTransition != null) {
+      await actAsync(async () =>
+        render(
+          <React.Fragment>
+            <ViewTransition>
+              <div>Visible</div>
+            </ViewTransition>
+            <ViewTransition>
+              <div>Hidden</div>
+            </ViewTransition>
+          </React.Fragment>,
+        ),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+    }
+  });
+
+  // @reactVersion >= 16.0
+  it('should ignore invalid ElementTypeRoot filter', async () => {
+    const Component = () => <div>Hi</div>;
+
+    await actAsync(async () => render(<Component />));
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeRoot),
+        ]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+  });
+
+  describe('inline errors and warnings', () => {
     // @reactVersion <= 18.2
     it('only counts for unfiltered components (legacy render)', async () => {
       function ComponentWithWarning() {
@@ -568,6 +593,8 @@ describe('Store component filters', () => {
         return null;
       }
 
+      const {render: legacyRender} = getLegacyRenderImplementation();
+
       await actAsync(
         async () =>
           (store.componentFilters = [
@@ -575,14 +602,17 @@ describe('Store component filters', () => {
             utils.createDisplayNameFilter('Error'),
           ]),
       );
+
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        legacyRender(
-          <React.Fragment>
-            <ComponentWithError />
-            <ComponentWithWarning />
-            <ComponentWithWarningAndError />
-          </React.Fragment>,
-        );
+        utils.act(() => {
+          legacyRender(
+            <React.Fragment>
+              <ComponentWithError />
+              <ComponentWithWarning />
+              <ComponentWithWarningAndError />
+            </React.Fragment>,
+          );
+        }, false);
       });
 
       expect(store).toMatchInlineSnapshot(``);
@@ -663,17 +693,19 @@ describe('Store component filters', () => {
           ]),
       );
 
-      utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        utils.act(() => {
-          render(
-            <React.Fragment>
-              <ComponentWithError />
-              <ComponentWithWarning />
-              <ComponentWithWarningAndError />
-            </React.Fragment>,
-          );
-        }, false);
-      });
+      utils.act(
+        () =>
+          utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
+            render(
+              <React.Fragment>
+                <ComponentWithError />
+                <ComponentWithWarning />
+                <ComponentWithWarningAndError />
+              </React.Fragment>,
+            );
+          }),
+        false,
+      );
 
       expect(store).toMatchInlineSnapshot(``);
       expect(store.componentWithErrorCount).toBe(0);
