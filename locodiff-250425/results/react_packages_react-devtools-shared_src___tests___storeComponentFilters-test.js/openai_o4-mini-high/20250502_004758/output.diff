--- react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual)@@ -317,76 +317,10 @@           utils.createElementTypeFilter(Types.ElementTypeRoot),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
             <div>
-    `);
-  });
-
-  // @reactVersion >= 16.2
-  it('should filter by display name', async () => {
-    const Text = ({label}) => label;
-    const Foo = () => <Text label="foo" />;
-    const Bar = () => <Text label="bar" />;
-    const Baz = () => <Text label="baz" />;
-
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Foo />
-          <Bar />
-          <Baz />
-        </React.Fragment>,
-      ),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-          <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-          <Text>
-          <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('B.z')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-          <Text>
     `);
   });
 
@@ -407,14 +341,25 @@             <div>
     `);
 
+    // TODO: Filtering should work on component location.
+    // expect(store).toMatchInlineSnapshot(`[root]`);
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+
     await actAsync(
       async () =>
         (store.componentFilters = [
           utils.createLocationFilter(__filename.replace(__dirname, '')),
         ]),
     );
-
-    expect(store).toMatchInlineSnapshot(`[root]`);
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
 
     await actAsync(
       async () =>
@@ -422,11 +367,72 @@           utils.createLocationFilter('this:is:a:made:up:path'),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
             <div>
+    `);
+  });
+
+  // @reactVersion >= 16.2
+  it('should filter by display name', async () => {
+    const Text = ({label}) => label;
+    const Foo = () => <Text label="foo" />;
+    const Bar = () => <Text label="bar" />;
+    const Baz = () => <Text label="baz" />;
+
+    await actAsync(async () =>
+      render(
+        <React.Fragment>
+          <Foo />
+          <Bar />
+          <Baz />
+        </React.Fragment>,
+      ),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+        ▾ <Bar>
+            <Text>
+        ▾ <Baz>
+            <Text>
+    `);
+
+    await actAsync(async () =>
+      (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+          <Text>
+        ▾ <Bar>
+            <Text>
+        ▾ <Baz>
+            <Text>
+    `);
+
+    await actAsync(async () =>
+      (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+          <Text>
+          <Text>
+    `);
+
+    await actAsync(async () =>
+      (store.componentFilters = [utils.createDisplayNameFilter('B.z')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+        ▾ <Bar>
+            <Text>
+          <Text>
     `);
   });
 
@@ -447,8 +453,8 @@                 <div>
     `);
 
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
+    await actAsync(async () =>
+      (store.componentFilters = [utils.createHOCFilter(true)]),
     );
     expect(store).toMatchInlineSnapshot(`
       [root]
@@ -456,8 +462,8 @@             <div>
     `);
 
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(false)]),
+    await actAsync(async () =>
+      (store.componentFilters = [utils.createHOCFilter(false)]),
     );
     expect(store).toMatchInlineSnapshot(`
       [root]
@@ -470,34 +476,29 @@ 
   // @reactVersion >= 16.0
   it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
+    await actAsync(async () => (store.componentFilters = [utils.createHOCFilter(true)]));
 
     bridge.addListener('updateComponentFilters', componentFilters => {
       throw Error('Unexpected component update');
     });
 
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(false),
-          utils.createHOCFilter(true),
-        ]),
-    );
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(true),
-          utils.createLocationFilter('abc', false),
-        ]),
-    );
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(true),
-          utils.createElementTypeFilter(Types.ElementTypeHostComponent, false),
-        ]),
+    await actAsync(async () =>
+      (store.componentFilters = [
+        utils.createHOCFilter(false),
+        utils.createHOCFilter(true),
+      ]),
+    );
+    await actAsync(async () =>
+      (store.componentFilters = [
+        utils.createHOCFilter(true),
+        utils.createLocationFilter('abc', false),
+      ]),
+    );
+    await actAsync(async () =>
+      (store.componentFilters = [
+        utils.createHOCFilter(true),
+        utils.createElementTypeFilter(Types.ElementTypeHostComponent, false),
+      ]),
     );
   });
 
@@ -520,9 +521,7 @@       </React.Suspense>
     );
 
-    store.componentFilters = [
-      utils.createElementTypeFilter(Types.ElementTypeSuspense),
-    ];
+    store.componentFilters = [utils.createElementTypeFilter(Types.ElementTypeSuspense)];
 
     await actAsync(async () => render(<Wrapper shouldSuspend={true} />));
     expect(store).toMatchInlineSnapshot(`
@@ -549,9 +548,6 @@   });
 
   describe('inline errors and warnings', () => {
-    const {render: legacyRender} = getLegacyRenderImplementation();
-
-    // @reactVersion >= 17.0
     // @reactVersion <= 18.2
     it('only counts for unfiltered components (legacy render)', async () => {
       function ComponentWithWarning() {
@@ -568,12 +564,13 @@         return null;
       }
 
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createDisplayNameFilter('Warning'),
-            utils.createDisplayNameFilter('Error'),
-          ]),
+      const {render: legacyRender} = getLegacyRenderImplementation();
+
+      await actAsync(async () =>
+        (store.componentFilters = [
+          utils.createDisplayNameFilter('Warning'),
+          utils.createDisplayNameFilter('Error'),
+        ]),
       );
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
         legacyRender(
@@ -599,8 +596,7 @@       `);
 
       await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
+        async () => (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
       );
       expect(store).toMatchInlineSnapshot(`
         ✕ 1, ⚠ 0
@@ -609,8 +605,7 @@       `);
 
       await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
+        async () => (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
       );
       expect(store).toMatchInlineSnapshot(`
         ✕ 0, ⚠ 1
@@ -663,17 +658,19 @@           ]),
       );
 
-      utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        utils.act(() => {
-          render(
-            <React.Fragment>
-              <ComponentWithError />
-              <ComponentWithWarning />
-              <ComponentWithWarningAndError />
-            </React.Fragment>,
-          );
-        }, false);
-      });
+      utils.act(
+        () =>
+          utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
+            render(
+              <React.Fragment>
+                <ComponentWithError />
+                <ComponentWithWarning />
+                <ComponentWithWarningAndError />
+              </React.Fragment>,
+            );
+          }),
+        false,
+      );
 
       expect(store).toMatchInlineSnapshot(``);
       expect(store.componentWithErrorCount).toBe(0);
@@ -689,8 +686,7 @@       `);
 
       await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
+        async () => (store.componentFilters = [utils.createDisplayNameFilter('Warning')]),
       );
       expect(store).toMatchInlineSnapshot(`
         ✕ 1, ⚠ 0
@@ -699,8 +695,7 @@       `);
 
       await actAsync(
-        async () =>
-          (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
+        async () => (store.componentFilters = [utils.createDisplayNameFilter('Error')]),
       );
       expect(store).toMatchInlineSnapshot(`
         ✕ 0, ⚠ 1
@@ -716,8 +711,6 @@           ]),
       );
       expect(store).toMatchInlineSnapshot(`[root]`);
-      expect(store.componentWithErrorCount).toBe(0);
-      expect(store.componentWithWarningCount).toBe(0);
 
       await actAsync(async () => (store.componentFilters = []));
       expect(store).toMatchInlineSnapshot(`
