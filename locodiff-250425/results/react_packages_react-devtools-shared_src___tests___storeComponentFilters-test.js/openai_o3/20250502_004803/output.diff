
index dd475ba0..483af870 100644
--- a/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected):tmp/tmp97myydko_expected.txt	
+++ b/react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual):tmp/tmpbj66et7i_actual.txt	
@@ -135,172 +135,6 @@ describe('Store component filters', () => {
   });
 
   // @reactVersion >= 16.0
-  it('should filter Suspense', async () => {
-    const Suspense = React.Suspense;
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Suspense>
-            <div>Visible</div>
-          </Suspense>
-          <Suspense>
-            <div>Hidden</div>
-          </Suspense>
-        </React.Fragment>,
-      ),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Suspense>
-            <div>
-        ▾ <Suspense>
-            <div>
-    `);
-  });
-
-  it('should filter Activity', async () => {
-    const Activity = React.unstable_Activity;
-
-    if (Activity != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <Activity mode="visible">
-              <div>Visible</div>
-            </Activity>
-            <Activity mode="hidden">
-              <div>Hidden</div>
-            </Activity>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-          <div>
-          <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Activity>
-            <div>
-        ▾ <Activity>
-            <div>
-    `);
-    }
-  });
-
-  it('should filter ViewTransition', async () => {
-    const ViewTransition = React.unstable_ViewTransition;
-
-    if (ViewTransition != null) {
-      await actAsync(async () =>
-        render(
-          <React.Fragment>
-            <ViewTransition>
-              <div>Visible</div>
-            </ViewTransition>
-            <ViewTransition>
-              <div>Hidden</div>
-            </ViewTransition>
-          </React.Fragment>,
-        ),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-
-      await actAsync(
-        async () =>
-          (store.componentFilters = [
-            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
-          ]),
-      );
-
-      expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <ViewTransition>
-            <div>
-        ▾ <ViewTransition>
-            <div>
-    `);
-    }
-  });
-
   it('should ignore invalid ElementTypeRoot filter', async () => {
     const Component = () => <div>Hi</div>;
 
@@ -317,7 +151,6 @@ describe('Store component filters', () => {
           utils.createElementTypeFilter(Types.ElementTypeRoot),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -422,7 +255,6 @@ describe('Store component filters', () => {
           utils.createLocationFilter('this:is:a:made:up:path'),
         ]),
     );
-
     expect(store).toMatchInlineSnapshot(`
       [root]
         ▾ <Component>
@@ -501,6 +333,173 @@ describe('Store component filters', () => {
     );
   });
 
+  // @reactVersion >= 16.0
+  it('should filter Suspense', async () => {
+    const Suspense = React.Suspense;
+    await actAsync(async () =>
+      render(
+        <React.Fragment>
+          <Suspense>
+            <div>Visible</div>
+          </Suspense>
+          <Suspense>
+            <div>Hidden</div>
+          </Suspense>
+        </React.Fragment>,
+      ),
+    );
+
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeActivity),
+        ]),
+    );
+
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+        ]),
+    );
+
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Suspense>
+            <div>
+        ▾ <Suspense>
+            <div>
+    `);
+  });
+
+  it('should filter Activity', async () => {
+    const Activity = React.unstable_Activity;
+
+    if (Activity != null) {
+      await actAsync(async () =>
+        render(
+          <React.Fragment>
+            <Activity mode="visible">
+              <div>Visible</div>
+            </Activity>
+            <Activity mode="hidden">
+              <div>Hidden</div>
+            </Activity>
+          </React.Fragment>,
+        ),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Activity>
+            <div>
+        ▾ <Activity>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+          <div>
+          <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Activity>
+            <div>
+        ▾ <Activity>
+            <div>
+    `);
+    }
+  });
+
+  it('should filter ViewTransition', async () => {
+    const ViewTransition = React.unstable_ViewTransition;
+
+    if (ViewTransition != null) {
+      await actAsync(async () =>
+        render(
+          <React.Fragment>
+            <ViewTransition>
+              <div>Visible</div>
+            </ViewTransition>
+            <ViewTransition>
+              <div>Hidden</div>
+            </ViewTransition>
+          </React.Fragment>,
+        ),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+
+      await actAsync(
+        async () =>
+          (store.componentFilters = [
+            utils.createElementTypeFilter(Types.ElementTypeActivity, false),
+          ]),
+      );
+
+      expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <ViewTransition>
+            <div>
+        ▾ <ViewTransition>
+            <div>
+    `);
+    }
+  });
+
   // @reactVersion >= 18.0
   it('should not break when Suspense nodes are filtered from the tree', async () => {
     const promise = new Promise(() => {});
@@ -575,14 +574,17 @@ describe('Store component filters', () => {
             utils.createDisplayNameFilter('Error'),
           ]),
       );
+
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        legacyRender(
-          <React.Fragment>
-            <ComponentWithError />
-            <ComponentWithWarning />
-            <ComponentWithWarningAndError />
-          </React.Fragment>,
-        );
+        utils.act(() => {
+          legacyRender(
+            <React.Fragment>
+              <ComponentWithError />
+              <ComponentWithWarning />
+              <ComponentWithWarningAndError />
+            </React.Fragment>,
+          );
+        }, false);
       });
 
       expect(store).toMatchInlineSnapshot(``);
