--- react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_expectedoutput.txt (expected)+++ react_packages_react-devtools-shared_src___tests___storeComponentFilters-test.js_extracted.txt (actual)@@ -132,6 +132,205 @@             ▾ <FunctionComponent>
                 <div>
     `);
+  });
+
+  // @reactVersion >= 16.0
+  it('should ignore invalid ElementTypeRoot filter', async () => {
+    const Component = () => <div>Hi</div>;
+
+    await actAsync(async () => render(<Component />));
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createElementTypeFilter(Types.ElementTypeRoot),
+        ]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+  });
+
+  // @reactVersion >= 16.2
+  it('should filter by display name', async () => {
+    const Text = ({label}) => label;
+    const Foo = () => <Text label="foo" />;
+    const Bar = () => <Text label="bar" />;
+    const Baz = () => <Text label="baz" />;
+
+    await actAsync(async () =>
+      render(
+        <React.Fragment>
+          <Foo />
+          <Bar />
+          <Baz />
+        </React.Fragment>,
+      ),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+        ▾ <Bar>
+            <Text>
+        ▾ <Baz>
+            <Text>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+          <Text>
+        ▾ <Bar>
+            <Text>
+        ▾ <Baz>
+            <Text>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+          <Text>
+          <Text>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [utils.createDisplayNameFilter('B.z')]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Foo>
+            <Text>
+        ▾ <Bar>
+            <Text>
+          <Text>
+    `);
+  });
+
+  // Disabled: filtering by path was removed, source is now determined lazily, including symbolication if applicable
+  // @reactVersion >= 16.0
+  // eslint-disable-next-line jest/no-disabled-tests
+  it.skip('should filter by path', async () => {
+    // This component should use props object in order to throw for component stack generation
+    // See ReactComponentStackFrame:155 or DevToolsComponentStackFrame:147
+    const Component = props => {
+      return <div>{props.message}</div>;
+    };
+
+    await actAsync(async () => render(<Component message="Hi" />));
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createLocationFilter(__filename.replace(__dirname, '')),
+        ]),
+    );
+
+    expect(store).toMatchInlineSnapshot(`[root]`);
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createLocationFilter('this:is:a:made:up:path'),
+        ]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+  });
+
+  // @reactVersion >= 16.0
+  it('should filter HOCs', async () => {
+    const Component = () => <div>Hi</div>;
+    const Foo = () => <Component />;
+    Foo.displayName = 'Foo(Component)';
+    const Bar = () => <Foo />;
+    Bar.displayName = 'Bar(Foo(Component))';
+
+    await actAsync(async () => render(<Bar />));
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component> [Bar][Foo]
+          ▾ <Component> [Foo]
+            ▾ <Component>
+                <div>
+    `);
+
+    await actAsync(
+      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component>
+            <div>
+    `);
+
+    await actAsync(
+      async () => (store.componentFilters = [utils.createHOCFilter(false)]),
+    );
+    expect(store).toMatchInlineSnapshot(`
+      [root]
+        ▾ <Component> [Bar][Foo]
+          ▾ <Component> [Foo]
+            ▾ <Component>
+                <div>
+    `);
+  });
+
+  // @reactVersion >= 16.0
+  it('should not send a bridge update if the set of enabled filters has not changed', async () => {
+    await actAsync(
+      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
+    );
+
+    bridge.addListener('updateComponentFilters', componentFilters => {
+      throw Error('Unexpected component update');
+    });
+
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createHOCFilter(false),
+          utils.createHOCFilter(true),
+        ]),
+    );
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createHOCFilter(true),
+          utils.createLocationFilter('abc', false),
+        ]),
+    );
+    await actAsync(
+      async () =>
+        (store.componentFilters = [
+          utils.createHOCFilter(true),
+          utils.createElementTypeFilter(Types.ElementTypeHostComponent, false),
+        ]),
+    );
   });
 
   // @reactVersion >= 16.0
@@ -299,206 +498,6 @@             <div>
     `);
     }
-  });
-
-  it('should ignore invalid ElementTypeRoot filter', async () => {
-    const Component = () => <div>Hi</div>;
-
-    await actAsync(async () => render(<Component />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createElementTypeFilter(Types.ElementTypeRoot),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-  });
-
-  // @reactVersion >= 16.2
-  it('should filter by display name', async () => {
-    const Text = ({label}) => label;
-    const Foo = () => <Text label="foo" />;
-    const Bar = () => <Text label="bar" />;
-    const Baz = () => <Text label="baz" />;
-
-    await actAsync(async () =>
-      render(
-        <React.Fragment>
-          <Foo />
-          <Bar />
-          <Baz />
-        </React.Fragment>,
-      ),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Foo')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-          <Text>
-        ▾ <Bar>
-            <Text>
-        ▾ <Baz>
-            <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('Ba')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-          <Text>
-          <Text>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [utils.createDisplayNameFilter('B.z')]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Foo>
-            <Text>
-        ▾ <Bar>
-            <Text>
-          <Text>
-    `);
-  });
-
-  // Disabled: filtering by path was removed, source is now determined lazily, including symbolication if applicable
-  // @reactVersion >= 16.0
-  // eslint-disable-next-line jest/no-disabled-tests
-  it.skip('should filter by path', async () => {
-    // This component should use props object in order to throw for component stack generation
-    // See ReactComponentStackFrame:155 or DevToolsComponentStackFrame:147
-    const Component = props => {
-      return <div>{props.message}</div>;
-    };
-
-    await actAsync(async () => render(<Component message="Hi" />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createLocationFilter(__filename.replace(__dirname, '')),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`[root]`);
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createLocationFilter('this:is:a:made:up:path'),
-        ]),
-    );
-
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-  });
-
-  // @reactVersion >= 16.0
-  it('should filter HOCs', async () => {
-    const Component = () => <div>Hi</div>;
-    const Foo = () => <Component />;
-    Foo.displayName = 'Foo(Component)';
-    const Bar = () => <Foo />;
-    Bar.displayName = 'Bar(Foo(Component))';
-
-    await actAsync(async () => render(<Bar />));
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component> [Bar][Foo]
-          ▾ <Component> [Foo]
-            ▾ <Component>
-                <div>
-    `);
-
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component>
-            <div>
-    `);
-
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(false)]),
-    );
-    expect(store).toMatchInlineSnapshot(`
-      [root]
-        ▾ <Component> [Bar][Foo]
-          ▾ <Component> [Foo]
-            ▾ <Component>
-                <div>
-    `);
-  });
-
-  // @reactVersion >= 16.0
-  it('should not send a bridge update if the set of enabled filters has not changed', async () => {
-    await actAsync(
-      async () => (store.componentFilters = [utils.createHOCFilter(true)]),
-    );
-
-    bridge.addListener('updateComponentFilters', componentFilters => {
-      throw Error('Unexpected component update');
-    });
-
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(false),
-          utils.createHOCFilter(true),
-        ]),
-    );
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(true),
-          utils.createLocationFilter('abc', false),
-        ]),
-    );
-    await actAsync(
-      async () =>
-        (store.componentFilters = [
-          utils.createHOCFilter(true),
-          utils.createElementTypeFilter(Types.ElementTypeHostComponent, false),
-        ]),
-    );
   });
 
   // @reactVersion >= 18.0
@@ -575,14 +574,17 @@             utils.createDisplayNameFilter('Error'),
           ]),
       );
+
       utils.withErrorsOrWarningsIgnored(['test-only:'], () => {
-        legacyRender(
-          <React.Fragment>
-            <ComponentWithError />
-            <ComponentWithWarning />
-            <ComponentWithWarningAndError />
-          </React.Fragment>,
-        );
+        utils.act(() => {
+          legacyRender(
+            <React.Fragment>
+              <ComponentWithError />
+              <ComponentWithWarning />
+              <ComponentWithWarningAndError />
+            </React.Fragment>,
+          );
+        }, false);
       });
 
       expect(store).toMatchInlineSnapshot(``);
