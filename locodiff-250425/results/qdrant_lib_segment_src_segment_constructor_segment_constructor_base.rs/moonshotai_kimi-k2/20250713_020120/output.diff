
index 5dbd9e9bd..4a902fe62 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmpht1d06ap_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmpfzodg9v9_actual.txt	
@@ -2,8 +2,8 @@ use std::collections::HashMap;
 use std::fs::File;
 use std::io::Read;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use atomic_refcell::AtomicRefCell;
 use common::budget::ResourcePermit;
@@ -127,14 +127,16 @@ pub(crate) fn open_vector_storage(
                         *multi_vec_config,
                         stopped,
                     ),
-                    VectorStorageDatatype::Float16 => open_simple_multi_dense_vector_storage_half(
-                        database.clone(),
-                        &db_column_name,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                        stopped,
-                    ),
+                    VectorStorageDatatype::Float16 => {
+                        open_simple_multi_dense_vector_storage_half(
+                            database.clone(),
+                            &db_column_name,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                            stopped,
+                        )
+                    }
                 }
             } else {
                 match storage_element_type {
@@ -167,14 +169,16 @@ pub(crate) fn open_vector_storage(
             if let Some(multi_vec_config) = &vector_config.multivector_config {
                 // there are no mmap multi vector storages, appendable only
                 match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
+                    VectorStorageDatatype::Float32 => {
+                        open_appendable_in_ram_multi_vector_storage(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                        )
+                    }
                     VectorStorageDatatype::Uint8 => {
-                        open_appendable_memmap_multi_vector_storage_byte(
+                        open_appendable_in_ram_multi_vector_storage_byte(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
@@ -182,7 +186,7 @@ pub(crate) fn open_vector_storage(
                         )
                     }
                     VectorStorageDatatype::Float16 => {
-                        open_appendable_memmap_multi_vector_storage_half(
+                        open_appendable_in_ram_multi_vector_storage_half(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
@@ -214,12 +218,14 @@ pub(crate) fn open_vector_storage(
         VectorStorageType::ChunkedMmap => {
             if let Some(multi_vec_config) = &vector_config.multivector_config {
                 match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
+                    VectorStorageDatatype::Float32 => {
+                        open_appendable_memmap_multi_vector_storage(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                        )
+                    }
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_memmap_multi_vector_storage_byte(
                             vector_storage_path,
@@ -260,12 +266,14 @@ pub(crate) fn open_vector_storage(
         VectorStorageType::InRamChunkedMmap => {
             if let Some(multi_vec_config) = &vector_config.multivector_config {
                 match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_in_ram_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
+                    VectorStorageDatatype::Float32 => {
+                        open_appendable_in_ram_multi_vector_storage(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                        )
+                    }
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_in_ram_multi_vector_storage_byte(
                             vector_storage_path,
@@ -667,8 +675,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_index,
                 vector_storage,
+                vector_index,
                 quantized_vectors,
             },
         );
@@ -718,7 +726,7 @@ fn create_segment(
     };
 
     Ok(Segment {
-        version,
+        version: SeqNumberType::default(),
         persisted_version: Arc::new(Mutex::new(version)),
         current_path: segment_path.to_owned(),
         id_tracker,
@@ -792,10 +800,6 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
     Ok(Some(segment))
 }
 
-pub fn new_segment_path(segments_path: &Path) -> PathBuf {
-    segments_path.join(Uuid::new_v4().to_string())
-}
-
 /// Build segment instance using given configuration.
 /// Builder will generate folder for the segment and store all segment information inside it.
 ///
@@ -829,6 +833,10 @@ pub fn build_segment(
     Ok(segment)
 }
 
+pub fn new_segment_path(segments_path: &Path) -> PathBuf {
+    segments_path.join(Uuid::new_v4().to_string())
+}
+
 /// Load v0.3.* segment data and migrate to current version
 #[allow(deprecated)]
 fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
