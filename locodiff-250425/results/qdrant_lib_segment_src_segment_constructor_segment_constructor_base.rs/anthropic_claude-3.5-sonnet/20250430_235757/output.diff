
index 5dbd9e9b..9111b0a8 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmpe3bafgle_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmpbke675x6_actual.txt	
@@ -119,22 +119,26 @@ pub(crate) fn open_vector_storage(
                         *multi_vec_config,
                         stopped,
                     ),
-                    VectorStorageDatatype::Uint8 => open_simple_multi_dense_vector_storage_byte(
-                        database.clone(),
-                        &db_column_name,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                        stopped,
-                    ),
-                    VectorStorageDatatype::Float16 => open_simple_multi_dense_vector_storage_half(
-                        database.clone(),
-                        &db_column_name,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                        stopped,
-                    ),
+                    VectorStorageDatatype::Uint8 => {
+                        open_simple_multi_dense_vector_storage_byte(
+                            database.clone(),
+                            &db_column_name,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                            stopped,
+                        )
+                    }
+                    VectorStorageDatatype::Float16 => {
+                        open_simple_multi_dense_vector_storage_half(
+                            database.clone(),
+                            &db_column_name,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                            stopped,
+                        )
+                    }
                 }
             } else {
                 match storage_element_type {
@@ -165,14 +169,15 @@ pub(crate) fn open_vector_storage(
         // Mmap on disk, not appendable
         VectorStorageType::Mmap => {
             if let Some(multi_vec_config) = &vector_config.multivector_config {
-                // there are no mmap multi vector storages, appendable only
                 match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
+                    VectorStorageDatatype::Float32 => {
+                        open_appendable_memmap_multi_vector_storage(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                        )
+                    }
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_memmap_multi_vector_storage_byte(
                             vector_storage_path,
@@ -214,12 +219,14 @@ pub(crate) fn open_vector_storage(
         VectorStorageType::ChunkedMmap => {
             if let Some(multi_vec_config) = &vector_config.multivector_config {
                 match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
+                    VectorStorageDatatype::Float32 => {
+                        open_appendable_memmap_multi_vector_storage(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                        )
+                    }
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_memmap_multi_vector_storage_byte(
                             vector_storage_path,
@@ -244,16 +251,20 @@ pub(crate) fn open_vector_storage(
                         vector_config.size,
                         vector_config.distance,
                     ),
-                    VectorStorageDatatype::Uint8 => open_appendable_memmap_vector_storage_byte(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
-                    VectorStorageDatatype::Float16 => open_appendable_memmap_vector_storage_half(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
+                    VectorStorageDatatype::Uint8 => {
+                        open_appendable_memmap_vector_storage_byte(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                        )
+                    }
+                    VectorStorageDatatype::Float16 => {
+                        open_appendable_memmap_vector_storage_half(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                        )
+                    }
                 }
             }
         }
@@ -581,8 +592,16 @@ fn create_segment(
         ))
     };
 
-    let mut vector_storages = HashMap::new();
+    let payload_index_path = get_payload_index_path(segment_path);
+    let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
+        payload_storage.clone(),
+        id_tracker.clone(),
+        vector_storages.clone(),
+        &payload_index_path,
+        appendable_flag,
+    )?);
 
+    let mut vector_storages = HashMap::new();
     for (vector_name, vector_config) in &config.vector_data {
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
 
@@ -613,15 +632,6 @@ fn create_segment(
         vector_storages.insert(vector_name.to_owned(), vector_storage);
     }
 
-    let payload_index_path = get_payload_index_path(segment_path);
-    let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
-        payload_storage.clone(),
-        id_tracker.clone(),
-        vector_storages.clone(),
-        &payload_index_path,
-        appendable_flag,
-    )?);
-
     let mut vector_data = HashMap::new();
     for (vector_name, vector_config) in &config.vector_data {
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
@@ -718,205 +728,4 @@ fn create_segment(
     };
 
     Ok(Segment {
-        version,
-        persisted_version: Arc::new(Mutex::new(version)),
-        current_path: segment_path.to_owned(),
-        id_tracker,
-        vector_data,
-        segment_type,
-        appendable_flag,
-        payload_index,
-        payload_storage,
-        segment_config: config.clone(),
-        error_status: None,
-        database,
-        flush_thread: Mutex::new(None),
-    })
-}
-
-pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option<Segment>> {
-    if path
-        .extension()
-        .and_then(|ext| ext.to_str())
-        .map(|ext| ext == "deleted")
-        .unwrap_or(false)
-    {
-        log::warn!("Segment is marked as deleted, skipping: {}", path.display());
-        // Skip deleted segments
-        return Ok(None);
-    }
-
-    let Some(stored_version) = SegmentVersion::load(path)? else {
-        // Assume segment was not properly saved.
-        // Server might have crashed before saving the segment fully.
-        log::warn!(
-            "Segment version file not found, skipping: {}",
-            path.display()
-        );
-        return Ok(None);
-    };
-
-    let app_version = SegmentVersion::current();
-
-    if stored_version != app_version {
-        info!("Migrating segment {stored_version} -> {app_version}");
-
-        if stored_version > app_version {
-            return Err(OperationError::service_error(format!(
-                "Data version {stored_version} is newer than application version {app_version}. \
-                Please upgrade the application. Compatibility is not guaranteed."
-            )));
-        }
-
-        if stored_version.major == 0 && stored_version.minor < 3 {
-            return Err(OperationError::service_error(format!(
-                "Segment version({stored_version}) is not compatible with current version({app_version})"
-            )));
-        }
-
-        if stored_version.major == 0 && stored_version.minor == 3 {
-            let segment_state = load_segment_state_v3(path)?;
-            Segment::save_state(&segment_state, path)?;
-        } else if stored_version.major == 0 && stored_version.minor <= 5 {
-            let segment_state = load_segment_state_v5(path)?;
-            Segment::save_state(&segment_state, path)?;
-        }
-
-        SegmentVersion::save(path)?
-    }
-
-    let segment_state = Segment::load_state(path)?;
-
-    let segment = create_segment(segment_state.version, path, &segment_state.config, stopped)?;
-
-    Ok(Some(segment))
-}
-
-pub fn new_segment_path(segments_path: &Path) -> PathBuf {
-    segments_path.join(Uuid::new_v4().to_string())
-}
-
-/// Build segment instance using given configuration.
-/// Builder will generate folder for the segment and store all segment information inside it.
-///
-/// # Arguments
-///
-/// * `segments_path` - Path to the segments directory. Segment folder will be created in this directory
-/// * `config` - Segment configuration
-/// * `ready` - Whether the segment is ready after building; will save segment version
-///
-/// To load a segment, saving the segment version is required. If `ready` is false, the version
-/// will not be stored. Then the segment is skipped on restart when trying to load it again. In
-/// that case, the segment version must be stored manually to make it ready.
-pub fn build_segment(
-    segments_path: &Path,
-    config: &SegmentConfig,
-    ready: bool,
-) -> OperationResult<Segment> {
-    let segment_path = new_segment_path(segments_path);
-
-    std::fs::create_dir_all(&segment_path)?;
-
-    let segment = create_segment(None, &segment_path, config, &AtomicBool::new(false))?;
-    segment.save_current_state()?;
-
-    // Version is the last file to save, as it will be used to check if segment was built correctly.
-    // If it is not saved, segment will be skipped.
-    if ready {
-        SegmentVersion::save(&segment_path)?;
-    }
-
-    Ok(segment)
-}
-
-/// Load v0.3.* segment data and migrate to current version
-#[allow(deprecated)]
-fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
-    use crate::compat::{SegmentConfigV5, StorageTypeV5, VectorDataConfigV5};
-
-    #[derive(Deserialize)]
-    #[serde(rename_all = "snake_case")]
-    #[deprecated]
-    pub struct SegmentStateV3 {
-        pub version: SeqNumberType,
-        pub config: SegmentConfigV3,
-    }
-
-    #[derive(Deserialize)]
-    #[serde(rename_all = "snake_case")]
-    #[deprecated]
-    pub struct SegmentConfigV3 {
-        /// Size of a vectors used
-        pub vector_size: usize,
-        /// Type of distance function used for measuring distance between vectors
-        pub distance: Distance,
-        /// Type of index used for search
-        pub index: Indexes,
-        /// Type of vector storage
-        pub storage_type: StorageTypeV5,
-        /// Defines payload storage type
-        #[serde(default)]
-        pub payload_storage_type: PayloadStorageType,
-    }
-
-    let path = segment_path.join(SEGMENT_STATE_FILE);
-
-    let mut contents = String::new();
-
-    let mut file = File::open(&path)?;
-    file.read_to_string(&mut contents)?;
-
-    serde_json::from_str::<SegmentStateV3>(&contents)
-        .map(|state| {
-            // Construct V5 version, then convert into current
-            let vector_data = VectorDataConfigV5 {
-                size: state.config.vector_size,
-                distance: state.config.distance,
-                hnsw_config: None,
-                quantization_config: None,
-                on_disk: None,
-            };
-            let segment_config = SegmentConfigV5 {
-                vector_data: HashMap::from([(DEFAULT_VECTOR_NAME.to_owned(), vector_data)]),
-                index: state.config.index,
-                storage_type: state.config.storage_type,
-                payload_storage_type: state.config.payload_storage_type,
-                quantization_config: None,
-            };
-
-            SegmentState {
-                version: Some(state.version),
-                config: segment_config.into(),
-            }
-        })
-        .map_err(|err| {
-            OperationError::service_error(format!(
-                "Failed to read segment {}. Error: {}",
-                path.to_str().unwrap(),
-                err
-            ))
-        })
-}
-
-/// Load v0.5.0 segment data and migrate to current version
-#[allow(deprecated)]
-fn load_segment_state_v5(segment_path: &Path) -> OperationResult<SegmentState> {
-    use crate::compat::SegmentStateV5;
-
-    let path = segment_path.join(SEGMENT_STATE_FILE);
-
-    let mut contents = String::new();
-
-    let mut file = File::open(&path)?;
-    file.read_to_string(&mut contents)?;
-
-    serde_json::from_str::<SegmentStateV5>(&contents)
-        .map(Into::into)
-        .map_err(|err| {
-            OperationError::service_error(format!(
-                "Failed to read segment {}. Error: {}",
-                path.to_str().unwrap(),
-                err
-            ))
-        })
-}
\ No newline at end of file
+        version
\ No newline at end of file
