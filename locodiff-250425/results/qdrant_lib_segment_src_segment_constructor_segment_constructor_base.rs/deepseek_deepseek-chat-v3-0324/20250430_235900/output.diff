
index 5dbd9e9b..7f09e006 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmp3c356m5q_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmp2jrg3z28_actual.txt	
@@ -127,14 +127,16 @@ pub(crate) fn open_vector_storage(
                         *multi_vec_config,
                         stopped,
                     ),
-                    VectorStorageDatatype::Float16 => open_simple_multi_dense_vector_storage_half(
-                        database.clone(),
-                        &db_column_name,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                        stopped,
-                    ),
+                    VectorStorageDatatype::Float16 => {
+                        open_simple_multi_dense_vector_storage_half(
+                            database.clone(),
+                            &db_column_name,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                            stopped,
+                        )
+                    }
                 }
             } else {
                 match storage_element_type {
@@ -229,7 +231,7 @@ pub(crate) fn open_vector_storage(
                         )
                     }
                     VectorStorageDatatype::Float16 => {
-                        open_appendable_memmap_multi_vector_storage_half(
+                        open_appendable_memmap_multi_vector_storage_halt(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
@@ -704,8 +706,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_storage,
                 vector_index,
+                vector_storage,
                 quantized_vectors: sp(None),
             },
         );
@@ -746,6 +748,16 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
         return Ok(None);
     }
 
+    if !SegmentVersion::check_exists(path) {
+        // Assume segment was not properly saved.
+        // Server might have crashed before saving the segment fully.
+        log::warn!(
+            "Segment version file not found, skipping: {}",
+            path.display()
+        );
+        return Ok(None);
+    }
+
     let Some(stored_version) = SegmentVersion::load(path)? else {
         // Assume segment was not properly saved.
         // Server might have crashed before saving the segment fully.
@@ -796,18 +808,6 @@ pub fn new_segment_path(segments_path: &Path) -> PathBuf {
     segments_path.join(Uuid::new_v4().to_string())
 }
 
-/// Build segment instance using given configuration.
-/// Builder will generate folder for the segment and store all segment information inside it.
-///
-/// # Arguments
-///
-/// * `segments_path` - Path to the segments directory. Segment folder will be created in this directory
-/// * `config` - Segment configuration
-/// * `ready` - Whether the segment is ready after building; will save segment version
-///
-/// To load a segment, saving the segment version is required. If `ready` is false, the version
-/// will not be stored. Then the segment is skipped on restart when trying to load it again. In
-/// that case, the segment version must be stored manually to make it ready.
 pub fn build_segment(
     segments_path: &Path,
     config: &SegmentConfig,
@@ -829,8 +829,6 @@ pub fn build_segment(
     Ok(segment)
 }
 
-/// Load v0.3.* segment data and migrate to current version
-#[allow(deprecated)]
 fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
     use crate::compat::{SegmentConfigV5, StorageTypeV5, VectorDataConfigV5};
 
@@ -868,7 +866,6 @@ fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
 
     serde_json::from_str::<SegmentStateV3>(&contents)
         .map(|state| {
-            // Construct V5 version, then convert into current
             let vector_data = VectorDataConfigV5 {
                 size: state.config.vector_size,
                 distance: state.config.distance,
@@ -898,8 +895,6 @@ fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
         })
 }
 
-/// Load v0.5.0 segment data and migrate to current version
-#[allow(deprecated)]
 fn load_segment_state_v5(segment_path: &Path) -> OperationResult<SegmentState> {
     use crate::compat::SegmentStateV5;
 
