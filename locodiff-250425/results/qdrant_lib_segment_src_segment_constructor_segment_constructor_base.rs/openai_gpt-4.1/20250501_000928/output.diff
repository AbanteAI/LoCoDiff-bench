
index 5dbd9e9b..6c35c61c 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmp1qyk426n_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmprfpnvceu_actual.txt	
@@ -7,7 +7,6 @@ use std::sync::atomic::AtomicBool;
 
 use atomic_refcell::AtomicRefCell;
 use common::budget::ResourcePermit;
-use common::flags::FeatureFlags;
 use io::storage_version::StorageVersion;
 use log::info;
 use parking_lot::{Mutex, RwLock};
@@ -26,7 +25,7 @@ use crate::index::VectorIndexEnum;
 use crate::index::hnsw_index::gpu::gpu_devices_manager::LockedGpuDevice;
 use crate::index::hnsw_index::hnsw::{HNSWIndex, HnswIndexOpenArgs};
 use crate::index::plain_vector_index::PlainVectorIndex;
-use crate::index::sparse_index::sparse_index_config::SparseIndexType;
+use crate::index::sparse_index::sparse_index_config::{SparseIndexType};
 use crate::index::sparse_index::sparse_vector_index::{
     self, SparseVectorIndex, SparseVectorIndexOpenArgs,
 };
@@ -360,12 +359,6 @@ pub(crate) fn create_rocksdb_id_tracker(
     SimpleIdTracker::open(database)
 }
 
-pub(crate) fn create_immutable_id_tracker(
-    segment_path: &Path,
-) -> OperationResult<ImmutableIdTracker> {
-    ImmutableIdTracker::open(segment_path)
-}
-
 pub(crate) fn get_payload_index_path(segment_path: &Path) -> PathBuf {
     segment_path.join(PAYLOAD_INDEX_PATH)
 }
@@ -530,6 +523,19 @@ fn create_segment(
     config: &SegmentConfig,
     stopped: &AtomicBool,
 ) -> OperationResult<Segment> {
+    if segment_path
+        .extension()
+        .and_then(|ext| ext.to_str())
+        .is_some_and(|ext| ext == "deleted")
+    {
+        log::warn!(
+            "Segment is marked as deleted, skipping: {}",
+            segment_path.display()
+        );
+        // Skip deleted segments
+        return Ok(None);
+    }
+
     let database = open_segment_db(segment_path, config)?;
     let payload_storage = sp(create_payload_storage(
         database.clone(),
@@ -543,8 +549,6 @@ fn create_segment(
         appendable_flag || !ImmutableIdTracker::mappings_file_path(segment_path).is_file();
 
     let id_tracker = if mutable_id_tracker {
-        // Determine whether we use the new (file based) or old (RocksDB) mutable ID tracker
-        // Decide based on the feature flag and state on disk
         let use_new_mutable_tracker = {
             // New ID tracker is enabled by default, but we still use the old tracker if we have
             // any mappings stored in RocksDB
@@ -587,13 +591,13 @@ fn create_segment(
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
 
         // Select suitable vector storage type based on configuration
-        let vector_storage = sp(open_vector_storage(
+        let vector_storage = Arc::new(AtomicRefCell::new(open_vector_storage(
             &database,
             vector_config,
             stopped,
             &vector_storage_path,
             vector_name,
-        )?);
+        )?));
 
         vector_storages.insert(vector_name.to_owned(), vector_storage);
     }
@@ -704,8 +708,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_storage,
                 vector_index,
+                vector_storage,
                 quantized_vectors: sp(None),
             },
         );
@@ -730,16 +734,51 @@ fn create_segment(
         segment_config: config.clone(),
         error_status: None,
         database,
-        flush_thread: Mutex::new(None),
     })
 }
 
+pub fn new_segment_path(segments_path: &Path) -> PathBuf {
+    segments_path.join(Uuid::new_v4().to_string())
+}
+
+/// Build segment instance using given configuration.
+/// Builder will generate folder for the segment and store all segment information inside it.
+///
+/// # Arguments
+///
+/// * `segments_path` - Path to the segments directory. Segment folder will be created in this directory
+/// * `config` - Segment configuration
+/// * `ready` - Whether the segment is ready after building; will save segment version
+///
+/// To load a segment, saving the segment version is required. If `ready` is false, the version
+/// will not be stored. Then the segment is skipped on restart when trying to load it again. In
+/// that case, the segment version must be stored manually to make it ready.
+pub fn build_segment(
+    segments_path: &Path,
+    config: &SegmentConfig,
+    ready: bool,
+) -> OperationResult<Segment> {
+    let segment_path = new_segment_path(segments_path);
+
+    std::fs::create_dir_all(&segment_path)?;
+
+    let segment = create_segment(None, &segment_path, config, &AtomicBool::new(false))?;
+    segment.save_current_state()?;
+
+    // Version is the last file to save, as it will be used to check if segment was built correctly.
+    // If it is not saved, segment will be skipped.
+    if ready {
+        SegmentVersion::save(&segment_path)?;
+    }
+
+    Ok(segment)
+}
+
 pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option<Segment>> {
     if path
         .extension()
         .and_then(|ext| ext.to_str())
-        .map(|ext| ext == "deleted")
-        .unwrap_or(false)
+        .is_some_and(|ext| ext == "deleted")
     {
         log::warn!("Segment is marked as deleted, skipping: {}", path.display());
         // Skip deleted segments
@@ -792,44 +831,6 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
     Ok(Some(segment))
 }
 
-pub fn new_segment_path(segments_path: &Path) -> PathBuf {
-    segments_path.join(Uuid::new_v4().to_string())
-}
-
-/// Build segment instance using given configuration.
-/// Builder will generate folder for the segment and store all segment information inside it.
-///
-/// # Arguments
-///
-/// * `segments_path` - Path to the segments directory. Segment folder will be created in this directory
-/// * `config` - Segment configuration
-/// * `ready` - Whether the segment is ready after building; will save segment version
-///
-/// To load a segment, saving the segment version is required. If `ready` is false, the version
-/// will not be stored. Then the segment is skipped on restart when trying to load it again. In
-/// that case, the segment version must be stored manually to make it ready.
-pub fn build_segment(
-    segments_path: &Path,
-    config: &SegmentConfig,
-    ready: bool,
-) -> OperationResult<Segment> {
-    let segment_path = new_segment_path(segments_path);
-
-    std::fs::create_dir_all(&segment_path)?;
-
-    let segment = create_segment(None, &segment_path, config, &AtomicBool::new(false))?;
-    segment.save_current_state()?;
-
-    // Version is the last file to save, as it will be used to check if segment was built correctly.
-    // If it is not saved, segment will be skipped.
-    if ready {
-        SegmentVersion::save(&segment_path)?;
-    }
-
-    Ok(segment)
-}
-
-/// Load v0.3.* segment data and migrate to current version
 #[allow(deprecated)]
 fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
     use crate::compat::{SegmentConfigV5, StorageTypeV5, VectorDataConfigV5};
@@ -898,7 +899,6 @@ fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
         })
 }
 
-/// Load v0.5.0 segment data and migrate to current version
 #[allow(deprecated)]
 fn load_segment_state_v5(segment_path: &Path) -> OperationResult<SegmentState> {
     use crate::compat::SegmentStateV5;
