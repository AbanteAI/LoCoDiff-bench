
index 5dbd9e9bd..9a144dfd0 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmp09arpwnv_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmp632sa943_actual.txt	
@@ -2,12 +2,11 @@ use std::collections::HashMap;
 use std::fs::File;
 use std::io::Read;
 use std::path::{Path, PathBuf};
-use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use atomic_refcell::AtomicRefCell;
 use common::budget::ResourcePermit;
-use common::flags::FeatureFlags;
 use io::storage_version::StorageVersion;
 use log::info;
 use parking_lot::{Mutex, RwLock};
@@ -15,8 +14,8 @@ use rocksdb::DB;
 use serde::Deserialize;
 use uuid::Uuid;
 
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
-use crate::common::rocksdb_wrapper::{DB_MAPPING_CF, DB_VECTOR_CF, open_db};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
+use crate::common::rocksdb_wrapper::{open_db, DB_MAPPING_CF, DB_VECTOR_CF};
 use crate::data_types::vectors::DEFAULT_VECTOR_NAME;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::mutable_id_tracker::MutableIdTracker;
@@ -35,11 +34,10 @@ use crate::payload_storage::mmap_payload_storage::MmapPayloadStorage;
 use crate::payload_storage::on_disk_payload_storage::OnDiskPayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
-use crate::segment::{SEGMENT_STATE_FILE, Segment, SegmentVersion, VectorData};
+use crate::segment::{Segment, SegmentVersion, VectorData, SEGMENT_STATE_FILE};
 use crate::types::{
     Distance, Indexes, PayloadStorageType, SegmentConfig, SegmentState, SegmentType, SeqNumberType,
-    SparseVectorStorageType, VectorDataConfig, VectorName, VectorStorageDatatype,
-    VectorStorageType,
+    SparseVectorStorageType, VectorDataConfig, VectorName, VectorStorageDatatype, VectorStorageType,
 };
 use crate::vector_storage::dense::appendable_dense_vector_storage::{
     open_appendable_in_ram_vector_storage, open_appendable_in_ram_vector_storage_byte,
@@ -53,16 +51,16 @@ use crate::vector_storage::dense::simple_dense_vector_storage::{
     open_simple_dense_byte_vector_storage, open_simple_dense_half_vector_storage,
     open_simple_dense_vector_storage,
 };
+use crate::vector_storage::dense::simple_multi_dense_vector_storage::{
+    open_simple_multi_dense_vector_storage, open_simple_multi_dense_vector_storage_byte,
+    open_simple_multi_dense_vector_storage_half,
+};
 use crate::vector_storage::multi_dense::appendable_mmap_multi_dense_vector_storage::{
     open_appendable_in_ram_multi_vector_storage, open_appendable_in_ram_multi_vector_storage_byte,
     open_appendable_in_ram_multi_vector_storage_half, open_appendable_memmap_multi_vector_storage,
     open_appendable_memmap_multi_vector_storage_byte,
     open_appendable_memmap_multi_vector_storage_half,
 };
-use crate::vector_storage::multi_dense::simple_multi_dense_vector_storage::{
-    open_simple_multi_dense_vector_storage, open_simple_multi_dense_vector_storage_byte,
-    open_simple_multi_dense_vector_storage_half,
-};
 use crate::vector_storage::quantized::quantized_vectors::QuantizedVectors;
 use crate::vector_storage::sparse::mmap_sparse_vector_storage::MmapSparseVectorStorage;
 use crate::vector_storage::sparse::simple_sparse_vector_storage::open_simple_sparse_vector_storage;
@@ -108,8 +106,7 @@ pub(crate) fn open_vector_storage(
         // In memory
         VectorStorageType::Memory => {
             let db_column_name = get_vector_name_with_prefix(DB_VECTOR_CF, vector_name);
-
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if let Some(multi_vec_config) = &vector_config.multivec_config {
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_simple_multi_dense_vector_storage(
                         database.clone(),
@@ -164,7 +161,7 @@ pub(crate) fn open_vector_storage(
         }
         // Mmap on disk, not appendable
         VectorStorageType::Mmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if let Some(multi_vec_config) = &vector_config.multivec_config {
                 // there are no mmap multi vector storages, appendable only
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
@@ -212,7 +209,7 @@ pub(crate) fn open_vector_storage(
         }
         // Chunked mmap on disk, appendable
         VectorStorageType::ChunkedMmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if let Some(multi_vec_config) = &vector_config.multivec_config {
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
                         vector_storage_path,
@@ -257,8 +254,9 @@ pub(crate) fn open_vector_storage(
                 }
             }
         }
+        // In RAM with mmap for persistence (appendable)
         VectorStorageType::InRamChunkedMmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if let Some(multi_vec_config) = &vector_config.multivec_config {
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_appendable_in_ram_multi_vector_storage(
                         vector_storage_path,
@@ -337,9 +335,9 @@ pub(crate) fn create_payload_storage(
     path: &Path,
 ) -> OperationResult<PayloadStorageEnum> {
     let payload_storage = match config.payload_storage_type {
-        PayloadStorageType::InMemory => {
-            PayloadStorageEnum::from(SimplePayloadStorage::open(database)?)
-        }
+        PayloadStorageType::InMemory => PayloadStorageEnum::from(SimplePayloadStorage::open(
+            database,
+        )?),
         PayloadStorageType::OnDisk => {
             PayloadStorageEnum::from(OnDiskPayloadStorage::open(database)?)
         }
@@ -350,7 +348,9 @@ pub(crate) fn create_payload_storage(
     Ok(payload_storage)
 }
 
-pub(crate) fn create_mutable_id_tracker(segment_path: &Path) -> OperationResult<MutableIdTracker> {
+pub(crate) fn create_mutable_id_tracker(
+    segment_path: &Path,
+) -> OperationResult<MutableIdTracker> {
     MutableIdTracker::open(segment_path)
 }
 
@@ -465,7 +465,7 @@ pub(crate) fn create_sparse_vector_index(
     ) {
         (_, a @ (VectorStorageDatatype::Float16 | VectorStorageDatatype::Uint8), false) => {
             Err(OperationError::ValidationError {
-                description: format!("{a:?} datatype is not supported"),
+                description: format!("{:?} datatype is not supported", a),
             })?
         }
 
@@ -543,27 +543,20 @@ fn create_segment(
         appendable_flag || !ImmutableIdTracker::mappings_file_path(segment_path).is_file();
 
     let id_tracker = if mutable_id_tracker {
-        // Determine whether we use the new (file based) or old (RocksDB) mutable ID tracker
-        // Decide based on the feature flag and state on disk
-        let use_new_mutable_tracker = {
-            // New ID tracker is enabled by default, but we still use the old tracker if we have
-            // any mappings stored in RocksDB
-            // TODO(1.15 or later): remove this check and use new mutable ID tracker unconditionally
-            let db = database.read();
-            match db.cf_handle(DB_MAPPING_CF) {
-                Some(cf_handle) => {
-                    let count = db
-                        .property_int_value_cf(cf_handle, rocksdb::properties::ESTIMATE_NUM_KEYS)
-                        .map_err(|err| {
-                            OperationError::service_error(format!(
-                                "Failed to get estimated number of keys from RocksDB: {err}"
-                            ))
-                        })?
-                        .unwrap_or_default();
-                    count == 0
-                }
-                None => true,
+        let db = database.read();
+        let use_new_mutable_tracker = match db.cf_handle(DB_MAPPING_CF) {
+            Some(cf_handle) => {
+                let count = db
+                    .property_int_value_cf(cf_handle, rocksdb::properties::ESTIMATE_NUM_KEYS)
+                    .map_err(|err| {
+                        OperationError::service_error(format!(
+                            "Failed to get estimated number of keys from RocksDB: {err}"
+                        ))
+                    })?
+                    .unwrap_or_default();
+                count == 0
             }
+            None => true,
         };
 
         if use_new_mutable_tracker {
@@ -581,6 +574,14 @@ fn create_segment(
         ))
     };
 
+    let payload_index_path = get_payload_index_path(segment_path);
+    let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
+        payload_storage.clone(),
+        id_tracker.clone(),
+        &payload_index_path,
+        appendable_flag,
+    )?);
+
     let mut vector_storages = HashMap::new();
 
     for (vector_name, vector_config) in &config.vector_data {
@@ -628,6 +629,7 @@ fn create_segment(
         let vector_storage = vector_storages.remove(vector_name).unwrap();
 
         let vector_index_path = get_vector_index_path(segment_path, vector_name);
+
         // Warn when number of points between ID tracker and storage differs
         let point_count = id_tracker.borrow().total_point_count();
         let vector_count = vector_storage.borrow().total_vector_count();
@@ -667,8 +669,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_index,
                 vector_storage,
+                vector_index,
                 quantized_vectors,
             },
         );
@@ -711,6 +713,13 @@ fn create_segment(
         );
     }
 
+    // Check if there are any vectors left in storage that weren't processed
+    if !vector_storages.is_empty() {
+        return Err(OperationError::service_error(
+            "Some vector storages were not assigned to any vector data",
+        ));
+    }
+
     let segment_type = if config.is_any_vector_indexed() {
         SegmentType::Indexed
     } else {
@@ -746,7 +755,7 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
         return Ok(None);
     }
 
-    let Some(stored_version) = SegmentVersion::load(path)? else {
+    if !SegmentVersion::check_exists(path) {
         // Assume segment was not properly saved.
         // Server might have crashed before saving the segment fully.
         log::warn!(
@@ -754,8 +763,9 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
             path.display()
         );
         return Ok(None);
-    };
+    }
 
+    let stored_version = SegmentVersion::load(path)?;
     let app_version = SegmentVersion::current();
 
     if stored_version != app_version {
