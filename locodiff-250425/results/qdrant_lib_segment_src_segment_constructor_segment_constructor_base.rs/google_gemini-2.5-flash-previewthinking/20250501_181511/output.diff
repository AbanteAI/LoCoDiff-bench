--- qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual)@@ -2,8 +2,8 @@ use std::fs::File;
 use std::io::Read;
 use std::path::{Path, PathBuf};
+use std::sync::atomic::AtomicBool;
 use std::sync::Arc;
-use std::sync::atomic::AtomicBool;
 
 use atomic_refcell::AtomicRefCell;
 use common::budget::ResourcePermit;
@@ -15,18 +15,19 @@ use serde::Deserialize;
 use uuid::Uuid;
 
-use crate::common::operation_error::{OperationError, OperationResult, check_process_stopped};
-use crate::common::rocksdb_wrapper::{DB_MAPPING_CF, DB_VECTOR_CF, open_db};
+use crate::common::operation_error::{check_process_stopped, OperationError, OperationResult};
+use crate::common::rocksdb_wrapper::{open_db, DB_MAPPING_CF, DB_VECTOR_CF};
 use crate::data_types::vectors::DEFAULT_VECTOR_NAME;
 use crate::id_tracker::immutable_id_tracker::ImmutableIdTracker;
 use crate::id_tracker::mutable_id_tracker::MutableIdTracker;
 use crate::id_tracker::simple_id_tracker::SimpleIdTracker;
 use crate::id_tracker::{IdTracker, IdTrackerEnum, IdTrackerSS};
 use crate::index::VectorIndexEnum;
+#[cfg(feature = "gpu")]
 use crate::index::hnsw_index::gpu::gpu_devices_manager::LockedGpuDevice;
 use crate::index::hnsw_index::hnsw::{HNSWIndex, HnswIndexOpenArgs};
 use crate::index::plain_vector_index::PlainVectorIndex;
-use crate::index::sparse_index::sparse_index_config::SparseIndexType;
+use crate::index::sparse_index::sparse_index_config::{SparseIndexType, SparseVectorIndexDatatype};
 use crate::index::sparse_index::sparse_vector_index::{
     self, SparseVectorIndex, SparseVectorIndexOpenArgs,
 };
@@ -35,11 +36,11 @@ use crate::payload_storage::on_disk_payload_storage::OnDiskPayloadStorage;
 use crate::payload_storage::payload_storage_enum::PayloadStorageEnum;
 use crate::payload_storage::simple_payload_storage::SimplePayloadStorage;
-use crate::segment::{SEGMENT_STATE_FILE, Segment, SegmentVersion, VectorData};
+use crate::segment::{Segment, SegmentVersion, VectorData, SEGMENT_STATE_FILE};
 use crate::types::{
     Distance, Indexes, PayloadStorageType, SegmentConfig, SegmentState, SegmentType, SeqNumberType,
-    SparseVectorStorageType, VectorDataConfig, VectorName, VectorStorageDatatype,
-    VectorStorageType,
+    SparseVectorDataConfig, SparseVectorStorageType, VectorDataConfig, VectorName,
+    VectorStorageDatatype, VectorStorageType,
 };
 use crate::vector_storage::dense::appendable_dense_vector_storage::{
     open_appendable_in_ram_vector_storage, open_appendable_in_ram_vector_storage_byte,
@@ -77,10 +78,10 @@ }
 
 fn get_vector_name_with_prefix(prefix: &str, vector_name: &VectorName) -> String {
-    if !vector_name.is_empty() {
+    if vector_name.is_empty() {
+        prefix.to_owned()
+    } else {
         format!("{prefix}-{vector_name}")
-    } else {
-        prefix.to_owned()
     }
 }
 
@@ -109,14 +110,14 @@         VectorStorageType::Memory => {
             let db_column_name = get_vector_name_with_prefix(DB_VECTOR_CF, vector_name);
 
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if let Some(multi_vec_config) = vector_config.multivector_config {
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_simple_multi_dense_vector_storage(
                         database.clone(),
                         &db_column_name,
                         vector_config.size,
                         vector_config.distance,
-                        *multi_vec_config,
+                        multi_vec_config,
                         stopped,
                     ),
                     VectorStorageDatatype::Uint8 => open_simple_multi_dense_vector_storage_byte(
@@ -124,7 +125,7 @@                         &db_column_name,
                         vector_config.size,
                         vector_config.distance,
-                        *multi_vec_config,
+                        multi_vec_config,
                         stopped,
                     ),
                     VectorStorageDatatype::Float16 => open_simple_multi_dense_vector_storage_half(
@@ -132,7 +133,7 @@                         &db_column_name,
                         vector_config.size,
                         vector_config.distance,
-                        *multi_vec_config,
+                        multi_vec_config,
                         stopped,
                     ),
                 }
@@ -164,21 +165,22 @@         }
         // Mmap on disk, not appendable
         VectorStorageType::Mmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if vector_config.multivector_config.is_some() {
                 // there are no mmap multi vector storages, appendable only
+                let multi_vec_config = vector_config.multivector_config.unwrap();
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
                         vector_storage_path,
                         vector_config.size,
                         vector_config.distance,
-                        *multi_vec_config,
+                        multi_vec_config,
                     ),
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_memmap_multi_vector_storage_byte(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
+                            multi_vec_config,
                         )
                     }
                     VectorStorageDatatype::Float16 => {
@@ -186,7 +188,7 @@                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
+                            multi_vec_config,
                         )
                     }
                 }
@@ -210,22 +212,70 @@                 }
             }
         }
+        VectorStorageType::InRamChunkedMmap => {
+            if vector_config.multivector_config.is_some() {
+                let multi_vec_config = vector_config.multivector_config.unwrap();
+                match storage_element_type {
+                    VectorStorageDatatype::Float32 => open_appendable_in_ram_multi_vector_storage(
+                        vector_storage_path,
+                        vector_config.size,
+                        vector_config.distance,
+                        multi_vec_config,
+                    ),
+                    VectorStorageDatatype::Uint8 => {
+                        open_appendable_in_ram_multi_vector_storage_byte(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            multi_vec_config,
+                        )
+                    }
+                    VectorStorageDatatype::Float16 => {
+                        open_appendable_in_ram_multi_vector_storage_half(
+                            vector_storage_path,
+                            vector_config.size,
+                            vector_config.distance,
+                            multi_vec_config,
+                        )
+                    }
+                }
+            } else {
+                match storage_element_type {
+                    VectorStorageDatatype::Float32 => open_appendable_in_ram_vector_storage(
+                        vector_storage_path,
+                        vector_config.size,
+                        vector_config.distance,
+                    ),
+                    VectorStorageDatatype::Uint8 => open_appendable_in_ram_vector_storage_byte(
+                        vector_storage_path,
+                        vector_config.size,
+                        vector_config.distance,
+                    ),
+                    VectorStorageDatatype::Float16 => open_appendable_in_ram_vector_storage_half(
+                        vector_storage_path,
+                        vector_config.size,
+                        vector_config.distance,
+                    ),
+                }
+            }
+        }
         // Chunked mmap on disk, appendable
         VectorStorageType::ChunkedMmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
+            if vector_config.multivector_config.is_some() {
+                let multi_vec_config = vector_config.multivector_config.unwrap();
                 match storage_element_type {
                     VectorStorageDatatype::Float32 => open_appendable_memmap_multi_vector_storage(
                         vector_storage_path,
                         vector_config.size,
                         vector_config.distance,
-                        *multi_vec_config,
+                        multi_vec_config,
                     ),
                     VectorStorageDatatype::Uint8 => {
                         open_appendable_memmap_multi_vector_storage_byte(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
+                            multi_vec_config,
                         )
                     }
                     VectorStorageDatatype::Float16 => {
@@ -233,7 +283,7 @@                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
+                            multi_vec_config,
                         )
                     }
                 }
@@ -249,57 +299,13 @@                         vector_config.size,
                         vector_config.distance,
                     ),
-                    VectorStorageDatatype::Float16 => open_appendable_memmap_vector_storage_half(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
-                }
-            }
-        }
-        VectorStorageType::InRamChunkedMmap => {
-            if let Some(multi_vec_config) = &vector_config.multivector_config {
-                match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_in_ram_multi_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                    ),
-                    VectorStorageDatatype::Uint8 => {
-                        open_appendable_in_ram_multi_vector_storage_byte(
+                    VectorStorageDatatype::Float16 => {
+                        open_appendable_memmap_vector_storage_half(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
                         )
                     }
-                    VectorStorageDatatype::Float16 => {
-                        open_appendable_in_ram_multi_vector_storage_half(
-                            vector_storage_path,
-                            vector_config.size,
-                            vector_config.distance,
-                            *multi_vec_config,
-                        )
-                    }
-                }
-            } else {
-                match storage_element_type {
-                    VectorStorageDatatype::Float32 => open_appendable_in_ram_vector_storage(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
-                    VectorStorageDatatype::Uint8 => open_appendable_in_ram_vector_storage_byte(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
-                    VectorStorageDatatype::Float16 => open_appendable_in_ram_vector_storage_half(
-                        vector_storage_path,
-                        vector_config.size,
-                        vector_config.distance,
-                    ),
                 }
             }
         }
@@ -383,6 +389,7 @@     /// Vector indices from other segments, used to speed up index building.
     /// May or may not contain the same vectors.
     pub old_indices: &'a [Arc<AtomicRefCell<VectorIndexEnum>>],
+    #[cfg(feature = "gpu")]
     pub gpu_device: Option<&'a LockedGpuDevice<'a>>,
     pub stopped: &'a AtomicBool,
     pub feature_flags: FeatureFlags,
@@ -449,15 +456,21 @@ }
 
 #[cfg(feature = "testing")]
-pub fn create_sparse_vector_index_test(
-    args: SparseVectorIndexOpenArgs<impl FnMut()>,
-) -> OperationResult<VectorIndexEnum> {
+pub fn create_sparse_vector_index_test<F>(
+    args: SparseVectorIndexOpenArgs<F>,
+) -> OperationResult<VectorIndexEnum>
+where
+    F: FnMut(),
+{
     create_sparse_vector_index(args)
 }
 
-pub(crate) fn create_sparse_vector_index(
-    args: SparseVectorIndexOpenArgs<impl FnMut()>,
-) -> OperationResult<VectorIndexEnum> {
+pub(crate) fn create_sparse_vector_index<F>(
+    args: SparseVectorIndexOpenArgs<F>,
+) -> OperationResult<VectorIndexEnum>
+where
+    F: FnMut(),
+{
     let vector_index = match (
         args.config.index_type,
         args.config.datatype.unwrap_or_default(),
@@ -531,11 +544,7 @@     stopped: &AtomicBool,
 ) -> OperationResult<Segment> {
     let database = open_segment_db(segment_path, config)?;
-    let payload_storage = sp(create_payload_storage(
-        database.clone(),
-        config,
-        segment_path,
-    )?);
+    let payload_storage = sp(create_payload_storage(database.clone(), config, segment_path)?);
 
     let appendable_flag = config.is_appendable();
 
@@ -545,35 +554,33 @@     let id_tracker = if mutable_id_tracker {
         // Determine whether we use the new (file based) or old (RocksDB) mutable ID tracker
         // Decide based on the feature flag and state on disk
-        let use_new_mutable_tracker = {
-            // New ID tracker is enabled by default, but we still use the old tracker if we have
-            // any mappings stored in RocksDB
-            // TODO(1.15 or later): remove this check and use new mutable ID tracker unconditionally
-            let db = database.read();
-            match db.cf_handle(DB_MAPPING_CF) {
-                Some(cf_handle) => {
-                    let count = db
-                        .property_int_value_cf(cf_handle, rocksdb::properties::ESTIMATE_NUM_KEYS)
-                        .map_err(|err| {
-                            OperationError::service_error(format!(
-                                "Failed to get estimated number of keys from RocksDB: {err}"
-                            ))
-                        })?
-                        .unwrap_or_default();
-                    count == 0
+        // New ID tracker is enabled by default, but we still use the old tracker if we have
+        // any mappings stored in RocksDB
+        // TODO(1.15 or later): remove this check and use new mutable ID tracker unconditionally
+        let db = database.read();
+        match db.cf_handle(DB_MAPPING_CF) {
+            Some(cf_handle) => {
+                let count = db
+                    .property_int_value_cf(cf_handle, rocksdb::properties::ESTIMATE_NUM_KEYS)
+                    .map_err(|err| {
+                        OperationError::service_error(format!(
+                            "Failed to get estimated number of keys from RocksDB: {err}"
+                        ))
+                    })?
+                    .unwrap_or_default();
+                if count == 0 {
+                    sp(IdTrackerEnum::MutableIdTracker(create_mutable_id_tracker(
+                        segment_path,
+                    )?))
+                } else {
+                    sp(IdTrackerEnum::RocksDbIdTracker(create_rocksdb_id_tracker(
+                        database.clone(),
+                    )?))
                 }
-                None => true,
             }
-        };
-
-        if use_new_mutable_tracker {
-            sp(IdTrackerEnum::MutableIdTracker(create_mutable_id_tracker(
+            None => sp(IdTrackerEnum::MutableIdTracker(create_mutable_id_tracker(
                 segment_path,
-            )?))
-        } else {
-            sp(IdTrackerEnum::RocksDbIdTracker(create_rocksdb_id_tracker(
-                database.clone(),
-            )?))
+            )?)),
         }
     } else {
         sp(IdTrackerEnum::ImmutableIdTracker(
@@ -581,8 +588,16 @@         ))
     };
 
+    let payload_index_path = get_payload_index_path(segment_path);
+    let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
+        payload_storage.clone(),
+        id_tracker.clone(),
+        vector_storages.clone(),
+        &payload_index_path,
+        appendable_flag,
+    )?);
+
     let mut vector_storages = HashMap::new();
-
     for (vector_name, vector_config) in &config.vector_data {
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
 
@@ -624,7 +639,6 @@ 
     let mut vector_data = HashMap::new();
     for (vector_name, vector_config) in &config.vector_data {
-        let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
         let vector_storage = vector_storages.remove(vector_name).unwrap();
 
         let vector_index_path = get_vector_index_path(segment_path, vector_name);
@@ -641,8 +655,10 @@         let quantized_vectors = sp(if config.quantization_config(vector_name).is_some() {
             let quantized_data_path = vector_storage_path;
             if QuantizedVectors::config_exists(&quantized_data_path) {
-                let quantized_vectors =
-                    QuantizedVectors::load(&vector_storage.borrow(), &quantized_data_path)?;
+                let quantized_vectors = QuantizedVectors::load(
+                    vector_storage.borrow().as_dense().unwrap(),
+                    &quantized_data_path,
+                )?;
                 Some(quantized_vectors)
             } else {
                 None
@@ -667,14 +683,14 @@         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
+                vector_storage,
                 vector_index,
-                vector_storage,
                 quantized_vectors,
             },
         );
     }
 
-    for (vector_name, sparse_vector_config) in &config.sparse_vector_data {
+    for (vector_name, sparse_vector_config) in config.sparse_vector_data.iter() {
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
         let vector_index_path = get_vector_index_path(segment_path, vector_name);
         let vector_storage = vector_storages.remove(vector_name).unwrap();
@@ -719,6 +735,7 @@ 
     Ok(Segment {
         version,
+        #[cfg(debug_assertions)]
         persisted_version: Arc::new(Mutex::new(version)),
         current_path: segment_path.to_owned(),
         id_tracker,
@@ -738,8 +755,7 @@     if path
         .extension()
         .and_then(|ext| ext.to_str())
-        .map(|ext| ext == "deleted")
-        .unwrap_or(false)
+        .map_or(false, |ext| ext == "deleted")
     {
         log::warn!("Segment is marked as deleted, skipping: {}", path.display());
         // Skip deleted segments
@@ -749,10 +765,7 @@     let Some(stored_version) = SegmentVersion::load(path)? else {
         // Assume segment was not properly saved.
         // Server might have crashed before saving the segment fully.
-        log::warn!(
-            "Segment version file not found, skipping: {}",
-            path.display()
-        );
+        log::warn!("Segment version file not found, skipping: {}", path.display());
         return Ok(None);
     };
 
@@ -768,19 +781,21 @@             )));
         }
 
+        // No migration for versions < 0.6 is needed as they are not loaded due to version check.
+        // But we still keep migration logic for older versions if we decide to skip versions in the future.
         if stored_version.major == 0 && stored_version.minor < 3 {
             return Err(OperationError::service_error(format!(
                 "Segment version({stored_version}) is not compatible with current version({app_version})"
             )));
         }
 
-        if stored_version.major == 0 && stored_version.minor == 3 {
-            let segment_state = load_segment_state_v3(path)?;
-            Segment::save_state(&segment_state, path)?;
-        } else if stored_version.major == 0 && stored_version.minor <= 5 {
+        // If version is 0.3 to 0.5, load with old struct and save with new.
+        if stored_version.major == 0 && stored_version.minor <= 5 {
             let segment_state = load_segment_state_v5(path)?;
             Segment::save_state(&segment_state, path)?;
         }
+        // If version is 0.6 to current-1, nothing needs to be done, as the format is the same.
+        // If any version migration is required, please add it here.
 
         SegmentVersion::save(path)?
     }
@@ -829,75 +844,6 @@     Ok(segment)
 }
 
-/// Load v0.3.* segment data and migrate to current version
-#[allow(deprecated)]
-fn load_segment_state_v3(segment_path: &Path) -> OperationResult<SegmentState> {
-    use crate::compat::{SegmentConfigV5, StorageTypeV5, VectorDataConfigV5};
-
-    #[derive(Deserialize)]
-    #[serde(rename_all = "snake_case")]
-    #[deprecated]
-    pub struct SegmentStateV3 {
-        pub version: SeqNumberType,
-        pub config: SegmentConfigV3,
-    }
-
-    #[derive(Deserialize)]
-    #[serde(rename_all = "snake_case")]
-    #[deprecated]
-    pub struct SegmentConfigV3 {
-        /// Size of a vectors used
-        pub vector_size: usize,
-        /// Type of distance function used for measuring distance between vectors
-        pub distance: Distance,
-        /// Type of index used for search
-        pub index: Indexes,
-        /// Type of vector storage
-        pub storage_type: StorageTypeV5,
-        /// Defines payload storage type
-        #[serde(default)]
-        pub payload_storage_type: PayloadStorageType,
-    }
-
-    let path = segment_path.join(SEGMENT_STATE_FILE);
-
-    let mut contents = String::new();
-
-    let mut file = File::open(&path)?;
-    file.read_to_string(&mut contents)?;
-
-    serde_json::from_str::<SegmentStateV3>(&contents)
-        .map(|state| {
-            // Construct V5 version, then convert into current
-            let vector_data = VectorDataConfigV5 {
-                size: state.config.vector_size,
-                distance: state.config.distance,
-                hnsw_config: None,
-                quantization_config: None,
-                on_disk: None,
-            };
-            let segment_config = SegmentConfigV5 {
-                vector_data: HashMap::from([(DEFAULT_VECTOR_NAME.to_owned(), vector_data)]),
-                index: state.config.index,
-                storage_type: state.config.storage_type,
-                payload_storage_type: state.config.payload_storage_type,
-                quantization_config: None,
-            };
-
-            SegmentState {
-                version: Some(state.version),
-                config: segment_config.into(),
-            }
-        })
-        .map_err(|err| {
-            OperationError::service_error(format!(
-                "Failed to read segment {}. Error: {}",
-                path.to_str().unwrap(),
-                err
-            ))
-        })
-}
-
 /// Load v0.5.0 segment data and migrate to current version
 #[allow(deprecated)]
 fn load_segment_state_v5(segment_path: &Path) -> OperationResult<SegmentState> {
