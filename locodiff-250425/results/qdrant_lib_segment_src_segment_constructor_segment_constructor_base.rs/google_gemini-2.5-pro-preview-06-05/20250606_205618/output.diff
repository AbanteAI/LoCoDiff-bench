
index 5dbd9e9bd..09b254121 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmpi1wdu79w_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmpv59r2uzt_actual.txt	
@@ -127,14 +127,16 @@ pub(crate) fn open_vector_storage(
                         *multi_vec_config,
                         stopped,
                     ),
-                    VectorStorageDatatype::Float16 => open_simple_multi_dense_vector_storage_half(
-                        database.clone(),
-                        &db_column_name,
-                        vector_config.size,
-                        vector_config.distance,
-                        *multi_vec_config,
-                        stopped,
-                    ),
+                    VectorStorageDatatype::Float16 => {
+                        open_simple_multi_dense_vector_storage_half(
+                            database.clone(),
+                            &db_column_name,
+                            vector_config.size,
+                            vector_config.distance,
+                            *multi_vec_config,
+                            stopped,
+                        )
+                    }
                 }
             } else {
                 match storage_element_type {
@@ -350,7 +352,9 @@ pub(crate) fn create_payload_storage(
     Ok(payload_storage)
 }
 
-pub(crate) fn create_mutable_id_tracker(segment_path: &Path) -> OperationResult<MutableIdTracker> {
+pub(crate) fn create_mutable_id_tracker(
+    segment_path: &Path,
+) -> OperationResult<MutableIdTracker> {
     MutableIdTracker::open(segment_path)
 }
 
@@ -582,7 +586,6 @@ fn create_segment(
     };
 
     let mut vector_storages = HashMap::new();
-
     for (vector_name, vector_config) in &config.vector_data {
         let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
 
@@ -624,7 +627,6 @@ fn create_segment(
 
     let mut vector_data = HashMap::new();
     for (vector_name, vector_config) in &config.vector_data {
-        let vector_storage_path = get_vector_storage_path(segment_path, vector_name);
         let vector_storage = vector_storages.remove(vector_name).unwrap();
 
         let vector_index_path = get_vector_index_path(segment_path, vector_name);
@@ -639,7 +641,7 @@ fn create_segment(
         }
 
         let quantized_vectors = sp(if config.quantization_config(vector_name).is_some() {
-            let quantized_data_path = vector_storage_path;
+            let quantized_data_path = get_vector_storage_path(segment_path, vector_name);
             if QuantizedVectors::config_exists(&quantized_data_path) {
                 let quantized_vectors =
                     QuantizedVectors::load(&vector_storage.borrow(), &quantized_data_path)?;
@@ -682,7 +684,7 @@ fn create_segment(
         // Warn when number of points between ID tracker and storage differs
         let point_count = id_tracker.borrow().total_point_count();
         let vector_count = vector_storage.borrow().total_vector_count();
-        if vector_count != point_count {
+        if vector_count > 0 && vector_count != point_count {
             log::debug!(
                 "Mismatch of point and vector counts ({point_count} != {vector_count}, storage: {})",
                 vector_storage_path.display(),
@@ -704,8 +706,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_storage,
                 vector_index,
+                vector_storage,
                 quantized_vectors: sp(None),
             },
         );
@@ -768,16 +770,16 @@ pub fn load_segment(path: &Path, stopped: &AtomicBool) -> OperationResult<Option
             )));
         }
 
-        if stored_version.major == 0 && stored_version.minor < 3 {
+        if stored_version.major() == 0 && stored_version.minor() < 3 {
             return Err(OperationError::service_error(format!(
                 "Segment version({stored_version}) is not compatible with current version({app_version})"
             )));
         }
 
-        if stored_version.major == 0 && stored_version.minor == 3 {
+        if stored_version.major() == 0 && stored_version.minor() == 3 {
             let segment_state = load_segment_state_v3(path)?;
             Segment::save_state(&segment_state, path)?;
-        } else if stored_version.major == 0 && stored_version.minor <= 5 {
+        } else if stored_version.major() == 0 && stored_version.minor() <= 5 {
             let segment_state = load_segment_state_v5(path)?;
             Segment::save_state(&segment_state, path)?;
         }
