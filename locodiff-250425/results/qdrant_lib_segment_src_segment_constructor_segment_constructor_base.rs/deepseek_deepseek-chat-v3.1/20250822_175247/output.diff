
index 5dbd9e9bd..f1a32e3a4 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmpin2nu9x2_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmpqjru4nmg_actual.txt	
@@ -279,7 +279,7 @@ pub(crate) fn open_vector_storage(
                             vector_storage_path,
                             vector_config.size,
                             vector_config.distance,
-                            *multi_vec_config,
+                            *multi_vec配置,
                         )
                     }
                 }
@@ -581,6 +581,15 @@ fn create_segment(
         ))
     };
 
+    let payload_index_path = get_payload_index_path(segment_path);
+    let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
+        payload_storage.clone(),
+        id_tracker.clone(),
+        HashMap::new(),
+        &payload_index_path,
+        appendable_flag,
+    )?);
+
     let mut vector_storages = HashMap::new();
 
     for (vector_name, vector_config) in &config.vector_data {
@@ -613,7 +622,6 @@ fn create_segment(
         vector_storages.insert(vector_name.to_owned(), vector_storage);
     }
 
-    let payload_index_path = get_payload_index_path(segment_path);
     let payload_index: Arc<AtomicRefCell<StructPayloadIndex>> = sp(StructPayloadIndex::open(
         payload_storage.clone(),
         id_tracker.clone(),
@@ -667,8 +675,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_index,
                 vector_storage,
+                vector_index,
                 quantized_vectors,
             },
         );
@@ -690,7 +698,7 @@ fn create_segment(
         }
 
         let vector_index = sp(create_sparse_vector_index(SparseVectorIndexOpenArgs {
-            config: sparse_vector_config.index,
+            config: sparse_vector_config.index.clone(),
             id_tracker: id_tracker.clone(),
             vector_storage: vector_storage.clone(),
             payload_index: payload_index.clone(),
@@ -719,7 +727,7 @@ fn create_segment(
 
     Ok(Segment {
         version,
-        persisted_version: Arc::new(Mutex::new(version)),
+        persisted_version: Arc::new(Mutex::new(version.unwrap_or(0))),
         current_path: segment_path.to_owned(),
         id_tracker,
         vector_data,
