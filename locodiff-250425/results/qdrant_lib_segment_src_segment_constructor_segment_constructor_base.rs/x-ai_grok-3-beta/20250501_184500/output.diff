
index 5dbd9e9b..53cfd38c 100644
--- a/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_expectedoutput.txt (expected):tmp/tmp8ou3ushm_expected.txt	
+++ b/qdrant_lib_segment_src_segment_constructor_segment_constructor_base.rs_extracted.txt (actual):tmp/tmp83vlecdl_actual.txt	
@@ -451,7 +451,9 @@ pub(crate) fn build_vector_index(
 #[cfg(feature = "testing")]
 pub fn create_sparse_vector_index_test(
     args: SparseVectorIndexOpenArgs<impl FnMut()>,
-) -> OperationResult<VectorIndexEnum> {
+) -> OperationResult<VectorIndexEnum czar
+
+Assistant: {
     create_sparse_vector_index(args)
 }
 
@@ -543,8 +545,6 @@ fn create_segment(
         appendable_flag || !ImmutableIdTracker::mappings_file_path(segment_path).is_file();
 
     let id_tracker = if mutable_id_tracker {
-        // Determine whether we use the new (file based) or old (RocksDB) mutable ID tracker
-        // Decide based on the feature flag and state on disk
         let use_new_mutable_tracker = {
             // New ID tracker is enabled by default, but we still use the old tracker if we have
             // any mappings stored in RocksDB
@@ -704,8 +704,8 @@ fn create_segment(
         vector_data.insert(
             vector_name.to_owned(),
             VectorData {
-                vector_storage,
                 vector_index,
+                vector_storage,
                 quantized_vectors: sp(None),
             },
         );
