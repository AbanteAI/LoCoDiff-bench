import { Signal, computed } from '@tldraw/state'
import { UnknownRecord } from '@tldraw/store'
import {
	CameraRecordType,
	InstancePageStateRecordType,
	TLINSTANCE_ID,
	TLPageId,
	TLShapeId,
	TLStore,
	pageIdValidator,
	pluckPreservingValues,
	shapeIdValidator,
} from '@tldraw/tlschema'
import {
	deleteFromSessionStorage,
	getFromSessionStorage,
	setInSessionStorage,
	structuredClone,
	uniqueId,
} from '@tldraw/utils'
import { T } from '@tldraw/validate'
import isEqual from 'lodash.isequal'
import { tlenv } from '../globals/environment'

const tabIdKey = 'TLDRAW_TAB_ID_v2' as const

const window = globalThis.window as
	| {
			navigator: Window['navigator']
			addEventListener: Window['addEventListener']
			TLDRAW_TAB_ID_v2?: string
	  }
	| undefined

// https://stackoverflow.com/a/9039885
function iOS() {
	if (!window) return false
	return (
		['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(
			// eslint-disable-next-line @typescript-eslint/no-deprecated
			window.navigator.platform
		) ||
		// iPad on iOS 13 detection
		(tlenv.isDarwin && 'ontouchend' in document)
	)
}

/**
 * A string that is unique per browser tab
 * @public
 */
export const TAB_ID: string = window
	? (window[tabIdKey] ??
			getFromSessionStorage(tabIdKey) ??
			`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
	: '<error>'
if (window) {
	window[tabIdKey] = TAB_ID
	if (iOS()) {
		// iOS does not trigger beforeunload
		// so we need to keep the sessionStorage value around
		// and hope the user doesn't figure out a way to duplicate their tab
		// in which case they'll have two tabs with the same UI state.
		// It's not a big deal, but it's not ideal.
		// And anyway I can't see a way to duplicate a tab in iOS Safari.
		setInSessionStorage(tabIdKey, TAB_ID)
	} else {
		deleteFromSessionStorage(tabIdKey)
	}
}

window?.addEventListener('beforeunload', () => {
	setInSessionStorage(tabIdKey, TAB_ID)
})

const Versions = {
	Initial: 0,
} as const

const CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Math.max(...Object.values(Versions))

function migrate(snapshot: any) {
	if (snapshot.version < Versions.Initial) {
		// initial version
		// noop
	}
	// add further migrations down here. see TLUserPreferences.ts for an example.

	// finally
	snapshot.version = CURRENT_SESSION_STATE_SNAPSHOT_VERSION
}

/**
 * The state of the editor instance, not including any document state.
 *
 * @public
 */
export interface TLSessionStateSnapshot {
	version: number
	currentPageId?: TLPageId
	isFocusMode?: boolean
	exportBackground?: boolean
	isDebugMode?: boolean
	isToolLocked?: boolean
	isGridMode?: boolean
	pageStates?: Array<{
		pageId: TLPageId
		camera?: { x: number; y: number; z: number }
		selectedShapeIds?: TLShapeId[]
		focusedGroupId?: TLShapeId | null
	}>
}

const sessionStateSnapshotValidator: T.Validator<TLSessionStateSnapshot> = T.object({
	version: T.number,
	currentPageId: pageIdValidator.optional(),
	isFocusMode: T.boolean.optional(),
	exportBackground: T.boolean.optional(),
	isDebugMode: T.boolean.optional(),
	isToolLocked: T.boolean.optional(),
	isGridMode: T.boolean.optional(),
	pageStates: T.arrayOf(
		T.object({
			pageId: pageIdValidator,
			camera: T.object({
				x: T.number,
				y: T.number,
				z: T.number,
			}).optional(),
			selectedShapeIds: T.arrayOf(shapeIdValidator).optional(),
			focusedGroupId: shapeIdValidator.nullable().optional(),
		})
	).optional(),
})

function migrateAndValidateSessionStateSnapshot(state: unknown): TLSessionStateSnapshot | null {
	if (!state || typeof state !== 'object') {
		console.warn('Invalid instance state')
		return null
	}
	if (!('version' in state) || typeof state.version !== 'number') {
		console.warn('No version in instance state')
		return null
	}
	if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
		state = structuredClone(state)
		migrate(state)
	}

	try {
		return sessionStateSnapshotValidator.validate(state)
	} catch (e) {
		console.warn(e)
		return null
	}
}

/**
 * Creates a signal of the instance state for a given store.
 * @public
 * @param store - The store to create the instance state snapshot signal for
 * @returns
 */
export function createSessionStateSnapshotSignal(
	store: TLStore
): Signal<TLSessionStateSnapshot | null> {
	const $allPageIds = store.query.ids('page')

	return computed<TLSessionStateSnapshot | null>(