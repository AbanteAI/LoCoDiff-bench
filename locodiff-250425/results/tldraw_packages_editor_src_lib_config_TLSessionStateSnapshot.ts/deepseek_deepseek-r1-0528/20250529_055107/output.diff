
index 1dbf9d1f4..80c0e78d4 100644
--- a/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected):tmp/tmprycn65_9_expected.txt	
+++ b/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual):tmp/tmp8sk7e2zj_actual.txt	
@@ -51,8 +51,8 @@ function iOS() {
  */
 export const TAB_ID: string = window
 	? (window[tabIdKey] ??
-		getFromSessionStorage(tabIdKey) ??
-		`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
+			getFromSessionStorage(tabIdKey) ??
+			`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
 	: '<error>'
 if (window) {
 	window[tabIdKey] = TAB_ID
@@ -166,163 +166,4 @@ export function createSessionStateSnapshotSignal(
 ): Signal<TLSessionStateSnapshot | null> {
 	const $allPageIds = store.query.ids('page')
 
-	return computed<TLSessionStateSnapshot | null>(
-		'sessionStateSnapshot',
-		() => {
-			const instanceState = store.get(TLINSTANCE_ID)
-			if (!instanceState) return null
-
-			const allPageIds = [...$allPageIds.get()]
-			return {
-				version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
-				currentPageId: instanceState.currentPageId,
-				exportBackground: instanceState.exportBackground,
-				isFocusMode: instanceState.isFocusMode,
-				isDebugMode: instanceState.isDebugMode,
-				isToolLocked: instanceState.isToolLocked,
-				isGridMode: instanceState.isGridMode,
-				pageStates: allPageIds.map((id) => {
-					const ps = store.get(InstancePageStateRecordType.createId(id))
-					const camera = store.get(CameraRecordType.createId(id))
-					return {
-						pageId: id,
-						camera: {
-							x: camera?.x ?? 0,
-							y: camera?.y ?? 0,
-							z: camera?.z ?? 1,
-						},
-						selectedShapeIds: ps?.selectedShapeIds ?? [],
-						focusedGroupId: ps?.focusedGroupId ?? null,
-					} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
-				}),
-			} satisfies TLSessionStateSnapshot
-		},
-		{ isEqual }
-	)
-}
-
-/**
- * Options for {@link loadSessionStateSnapshotIntoStore}
- * @public
- */
-export interface TLLoadSessionStateSnapshotOptions {
-	/**
-	 * By default, some session state flags like `isDebugMode` are not overwritten when loading a snapshot.
-	 * These are usually considered "sticky" by users while the document data is not.
-	 * If you want to overwrite these flags, set this to `true`.
-	 */
-	forceOverwrite?: boolean
-}
-
-/**
- * Loads a snapshot of the editor's instance state into the store of a new editor instance.
- *
- * @public
- * @param store - The store to load the instance state into
- * @param snapshot - The instance state snapshot to load
- * @returns
- */
-export function loadSessionStateSnapshotIntoStore(
-	store: TLStore,
-	snapshot: TLSessionStateSnapshot,
-	opts?: TLLoadSessionStateSnapshotOptions
-) {
-	const res = migrateAndValidateSessionStateSnapshot(snapshot)
-	if (!res) return
-
-	const preserved = pluckPreservingValues(store.get(TLINSTANCE_ID))
-	const primary = opts?.forceOverwrite ? res : preserved
-	const secondary = opts?.forceOverwrite ? preserved : res
-
-	const instanceState = store.schema.types.instance.create({
-		id: TLINSTANCE_ID,
-		...preserved,
-		// the integrity checker will ensure that the currentPageId is valid
-		currentPageId: res.currentPageId,
-		isDebugMode: primary?.isDebugMode ?? secondary?.isDebugMode,
-		isFocusMode: primary?.isFocusMode ?? secondary?.isFocusMode,
-		isToolLocked: primary?.isToolLocked ?? secondary?.isToolLocked,
-		isGridMode: primary?.isGridMode ?? secondary?.isGridMode,
-		exportBackground: primary?.exportBackground ?? secondary?.exportBackground,
-	})
-
-	store.atomic(() => {
-		for (const ps of res.pageStates ?? []) {
-			if (!store.has(ps.pageId)) continue
-			const cameraId = CameraRecordType.createId(ps.pageId)
-			const instancePageState = InstancePageStateRecordType.createId(ps.pageId)
-			const previousCamera = store.get(cameraId)
-			const previousInstanceState = store.get(instancePageState)
-			store.put([
-				CameraRecordType.create({
-					id: cameraId,
-					x: ps.camera?.x ?? previousCamera?.x,
-					y: ps.camera?.y ?? previousCamera?.y,
-					z: ps.camera?.z ?? previousCamera?.z,
-				}),
-				InstancePageStateRecordType.create({
-					id: instancePageState,
-					pageId: ps.pageId,
-					selectedShapeIds: ps.selectedShapeIds ?? previousInstanceState?.selectedShapeIds,
-					focusedGroupId: ps.focusedGroupId ?? previousInstanceState?.focusedGroupId,
-				}),
-			])
-		}
-
-		store.put([instanceState])
-		store.ensureStoreIsUsable()
-	})
-}
-
-/**
- * @internal
- */
-export function extractSessionStateFromLegacySnapshot(
-	store: Record<string, UnknownRecord>
-): TLSessionStateSnapshot | null {
-	const instanceRecords = []
-	for (const record of Object.values(store)) {
-		if (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {
-			instanceRecords.push(record)
-		}
-	}
-
-	// for scratch documents, we need to extract the most recently-used instance and it's associated page states
-	// but oops we don't have the concept of "most recently-used" so we'll just take the first one
-	const oldInstance = instanceRecords.filter(
-		(r) => r.typeName === 'instance' && r.id !== TLINSTANCE_ID
-	)[0] as any
-	if (!oldInstance) return null
-
-	const result: TLSessionStateSnapshot = {
-		version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
-		currentPageId: oldInstance.currentPageId,
-		exportBackground: !!oldInstance.exportBackground,
-		isFocusMode: !!oldInstance.isFocusMode,
-		isDebugMode: !!oldInstance.isDebugMode,
-		isToolLocked: !!oldInstance.isToolLocked,
-		isGridMode: false,
-		pageStates: instanceRecords
-			.filter((r: any) => r.typeName === 'instance_page_state' && r.instanceId === oldInstance.id)
-			.map((ps: any) => {
-				const camera = (store[ps.cameraId] as any) ?? { x: 0, y: 0, z: 1 }
-				return {
-					pageId: ps.pageId,
-					camera: {
-						x: camera.x,
-						y: camera.y,
-						z: camera.z,
-					},
-					selectedShapeIds: ps.selectedShapeIds,
-					focusedGroupId: ps.focusedGroupId,
-				} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
-			}),
-	}
-
-	try {
-		sessionStateSnapshotValidator.validate(result)
-		return result
-	} catch {
-		return null
-	}
-}
\ No newline at end of file
+	return computed<TLSessionStateSnapshot | null>(
\ No newline at end of file
