
index 1dbf9d1f..92a55dcb 100644
--- a/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected):tmp/tmpperzuweh_expected.txt	
+++ b/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual):tmp/tmp6oenbmqa_actual.txt	
@@ -79,17 +79,6 @@ const Versions = {
 
 const CURRENT_SESSION_STATE_SNAPSHOT_VERSION = Math.max(...Object.values(Versions))
 
-function migrate(snapshot: any) {
-	if (snapshot.version < Versions.Initial) {
-		// initial version
-		// noop
-	}
-	// add further migrations down here. see TLUserPreferences.ts for an example.
-
-	// finally
-	snapshot.version = CURRENT_SESSION_STATE_SNAPSHOT_VERSION
-}
-
 /**
  * The state of the editor instance, not including any document state.
  *
@@ -133,22 +122,32 @@ const sessionStateSnapshotValidator: T.Validator<TLSessionStateSnapshot> = T.obj
 	).optional(),
 })
 
+function migrate(snapshot: any) {
+	if (snapshot.version < Versions.Initial) {
+		// initial version
+		// noop
+	}
+	// add further migrations down here. see TLUserPreferences.ts for an example.
+
+	// finally
+	snapshot.version = CURRENT_SESSION_STATE_SNAPSHOT_VERSION
+}
+
 function migrateAndValidateSessionStateSnapshot(state: unknown): TLSessionStateSnapshot | null {
 	if (!state || typeof state !== 'object') {
 		console.warn('Invalid instance state')
 		return null
 	}
-	if (!('version' in state) || typeof state.version !== 'number') {
+	if (!('version' in state) || typeof (state as any).version !== 'number') {
 		console.warn('No version in instance state')
 		return null
 	}
-	if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
+	if ((state as any).version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
 		state = structuredClone(state)
 		migrate(state)
 	}
-
 	try {
-		return sessionStateSnapshotValidator.validate(state)
+		return sessionStateSnapshotValidator.validate(state as any)
 	} catch (e) {
 		console.warn(e)
 		return null
@@ -220,6 +219,7 @@ export interface TLLoadSessionStateSnapshotOptions {
  * @public
  * @param store - The store to load the instance state into
  * @param snapshot - The instance state snapshot to load
+ * @param opts - Options for loading the snapshot
  * @returns
  */
 export function loadSessionStateSnapshotIntoStore(
@@ -247,6 +247,13 @@ export function loadSessionStateSnapshotIntoStore(
 	})
 
 	store.atomic(() => {
+		store.remove(
+			store
+				.allRecords()
+				.filter((r) => r.typeName === 'instance_page_state' || r.typeName === 'camera')
+				.map((r) => r.id)
+		)
+		// replace them with new ones
 		for (const ps of res.pageStates ?? []) {
 			if (!store.has(ps.pageId)) continue
 			const cameraId = CameraRecordType.createId(ps.pageId)
@@ -268,9 +275,7 @@ export function loadSessionStateSnapshotIntoStore(
 				}),
 			])
 		}
-
 		store.put([instanceState])
-		store.ensureStoreIsUsable()
 	})
 }
 
