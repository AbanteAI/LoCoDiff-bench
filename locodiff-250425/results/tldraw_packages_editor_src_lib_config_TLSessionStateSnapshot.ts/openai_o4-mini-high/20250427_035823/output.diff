--- tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected)+++ tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual)@@ -14,6 +14,7 @@ import {
 	deleteFromSessionStorage,
 	getFromSessionStorage,
+	objectMapFromEntries,
 	setInSessionStorage,
 	structuredClone,
 	uniqueId,
@@ -27,6 +28,8 @@ const window = globalThis.window as
 	| {
 			navigator: Window['navigator']
+			localStorage: Window['localStorage']
+			sessionStorage: Window['sessionStorage']
 			addEventListener: Window['addEventListener']
 			TLDRAW_TAB_ID_v2?: string
 	  }
@@ -40,7 +43,6 @@ 			// eslint-disable-next-line @typescript-eslint/no-deprecated
 			window.navigator.platform
 		) ||
-		// iPad on iOS 13 detection
 		(tlenv.isDarwin && 'ontouchend' in document)
 	)
 }
@@ -51,8 +53,8 @@  */
 export const TAB_ID: string = window
 	? (window[tabIdKey] ??
-		getFromSessionStorage(tabIdKey) ??
-		`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
+			getFromSessionStorage(tabIdKey) ??
+			`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
 	: '<error>'
 if (window) {
 	window[tabIdKey] = TAB_ID
@@ -138,17 +140,17 @@ 		console.warn('Invalid instance state')
 		return null
 	}
-	if (!('version' in state) || typeof state.version !== 'number') {
+	if (!('version' in state) || typeof (state as any).version !== 'number') {
 		console.warn('No version in instance state')
 		return null
 	}
-	if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
+	if ((state as any).version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
 		state = structuredClone(state)
 		migrate(state)
 	}
 
 	try {
-		return sessionStateSnapshotValidator.validate(state)
+		return sessionStateSnapshotValidator.validate(state as any)
 	} catch (e) {
 		console.warn(e)
 		return null
@@ -220,6 +222,7 @@  * @public
  * @param store - The store to load the instance state into
  * @param snapshot - The instance state snapshot to load
+ * @param opts - Options for controlling which session state fields to overwrite
  * @returns
  */
 export function loadSessionStateSnapshotIntoStore(
@@ -238,7 +241,7 @@ 		id: TLINSTANCE_ID,
 		...preserved,
 		// the integrity checker will ensure that the currentPageId is valid
-		currentPageId: res.currentPageId,
+		currentPageId: primary?.currentPageId ?? secondary?.currentPageId,
 		isDebugMode: primary?.isDebugMode ?? secondary?.isDebugMode,
 		isFocusMode: primary?.isFocusMode ?? secondary?.isFocusMode,
 		isToolLocked: primary?.isToolLocked ?? secondary?.isToolLocked,
@@ -268,7 +271,6 @@ 				}),
 			])
 		}
-
 		store.put([instanceState])
 		store.ensureStoreIsUsable()
 	})
@@ -280,7 +282,7 @@ export function extractSessionStateFromLegacySnapshot(
 	store: Record<string, UnknownRecord>
 ): TLSessionStateSnapshot | null {
-	const instanceRecords = []
+	const instanceRecords: UnknownRecord[] = []
 	for (const record of Object.values(store)) {
 		if (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {
 			instanceRecords.push(record)
@@ -304,7 +306,7 @@ 		isGridMode: false,
 		pageStates: instanceRecords
 			.filter((r: any) => r.typeName === 'instance_page_state' && r.instanceId === oldInstance.id)
-			.map((ps: any) => {
+			.map((ps: any): NonNullable<TLSessionStateSnapshot['pageStates']>[0] => {
 				const camera = (store[ps.cameraId] as any) ?? { x: 0, y: 0, z: 1 }
 				return {
 					pageId: ps.pageId,
@@ -315,13 +317,12 @@ 					},
 					selectedShapeIds: ps.selectedShapeIds,
 					focusedGroupId: ps.focusedGroupId,
-				} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
+				}
 			}),
 	}
 
 	try {
-		sessionStateSnapshotValidator.validate(result)
-		return result
+		return sessionStateSnapshotValidator.validate(result)
 	} catch {
 		return null
 	}
