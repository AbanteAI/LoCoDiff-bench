
index 1dbf9d1f..9ad065ce 100644
--- a/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected):tmp/tmpy_otm8ex_expected.txt	
+++ b/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual):tmp/tmpd_ld23dp_actual.txt	
@@ -14,6 +14,7 @@ import {
 import {
 	deleteFromSessionStorage,
 	getFromSessionStorage,
+	objectMapFromEntries,
 	setInSessionStorage,
 	structuredClone,
 	uniqueId,
@@ -173,6 +174,7 @@ export function createSessionStateSnapshotSignal(
 			if (!instanceState) return null
 
 			const allPageIds = [...$allPageIds.get()]
+
 			return {
 				version: CURRENT_SESSION_STATE_SNAPSHOT_VERSION,
 				currentPageId: instanceState.currentPageId,
@@ -184,6 +186,7 @@ export function createSessionStateSnapshotSignal(
 				pageStates: allPageIds.map((id) => {
 					const ps = store.get(InstancePageStateRecordType.createId(id))
 					const camera = store.get(CameraRecordType.createId(id))
+
 					return {
 						pageId: id,
 						camera: {
@@ -193,7 +196,7 @@ export function createSessionStateSnapshotSignal(
 						},
 						selectedShapeIds: ps?.selectedShapeIds ?? [],
 						focusedGroupId: ps?.focusedGroupId ?? null,
-					} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
+					} satisfies NonNullable<TLSessionStateSnapshot['page states']>[0]
 				}),
 			} satisfies TLSessionStateSnapshot
 		},
@@ -220,6 +223,7 @@ export interface TLLoadSessionStateSnapshotOptions {
  * @public
  * @param store - The store to load the instance state into
  * @param snapshot - The instance state snapshot to load
+ * @param opts - Options for loading the snapshot
  * @returns
  */
 export function loadSessionStateSnapshotIntoStore(
@@ -247,6 +251,13 @@ export function loadSessionStateSnapshotIntoStore(
 	})
 
 	store.atomic(() => {
+		// remove all page states and cameras and the instance state
+		// const allPageStatesAndCameras = store
+		// 	.allRecords()
+		// 	.filter((r) => r.typeName === 'instance_page_state' || r.typeName === 'camera')
+		// store.remove(allPageStatesAndCameras.map((r) => r.id))
+
+		// replace them with new ones
 		for (const ps of res.pageStates ?? []) {
 			if (!store.has(ps.pageId)) continue
 			const cameraId = CameraRecordType.createId(ps.pageId)
@@ -315,7 +326,7 @@ export function extractSessionStateFromLegacySnapshot(
 					},
 					selectedShapeIds: ps.selectedShapeIds,
 					focusedGroupId: ps.focusedGroupId,
-				} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
+				} satisfies NonNullable<TLSessionStateSnapshot['page states']>[0]
 			}),
 	}
 
