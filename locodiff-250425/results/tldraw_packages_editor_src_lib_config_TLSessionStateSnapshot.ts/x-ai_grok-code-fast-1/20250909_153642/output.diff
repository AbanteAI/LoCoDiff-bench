
index 1dbf9d1f4..fa49de7b0 100644
--- a/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected):tmp/tmp1oq11ecr_expected.txt	
+++ b/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual):tmp/tmpkciqqmzb_actual.txt	
@@ -14,6 +14,7 @@ import {
 import {
 	deleteFromSessionStorage,
 	getFromSessionStorage,
+	objectMapFromEntries,
 	setInSessionStorage,
 	structuredClone,
 	uniqueId,
@@ -142,6 +143,7 @@ function migrateAndValidateSessionStateSnapshot(state: unknown): TLSessionStateS
 		console.warn('No version in instance state')
 		return null
 	}
+
 	if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
 		state = structuredClone(state)
 		migrate(state)
@@ -220,7 +222,7 @@ export interface TLLoadSessionStateSnapshotOptions {
  * @public
  * @param store - The store to load the instance state into
  * @param snapshot - The instance state snapshot to load
- * @returns
+ * @param opts - Options for loading the snapshot
  */
 export function loadSessionStateSnapshotIntoStore(
 	store: TLStore,
@@ -237,13 +239,12 @@ export function loadSessionStateSnapshotIntoStore(
 	const instanceState = store.schema.types.instance.create({
 		id: TLINSTANCE_ID,
 		...preserved,
-		// the integrity checker will ensure that the currentPageId is valid
 		currentPageId: res.currentPageId,
-		isDebugMode: primary?.isDebugMode ?? secondary?.isDebugMode,
-		isFocusMode: primary?.isFocusMode ?? secondary?.isFocusMode,
-		isToolLocked: primary?.isToolLocked ?? secondary?.isToolLocked,
-		isGridMode: primary?.isGridMode ?? secondary?.isGridMode,
-		exportBackground: primary?.exportBackground ?? secondary?.exportBackground,
+		isDebugMode: primary.isDebugMode ?? secondary.isDebugMode,
+		isFocusMode: primary.isFocusMode ?? secondary.isFocusMode,
+		isToolLocked: primary.isToolLocked ?? secondary.isToolLocked,
+		isGridMode: primary.isGridMode ?? secondary.isGridMode,
+		exportBackground: primary.exportBackground ?? secondary.exportBackground,
 	})
 
 	store.atomic(() => {
