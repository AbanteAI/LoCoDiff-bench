
index 1dbf9d1f..cf202f6d 100644
--- a/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_expectedoutput.txt (expected):tmp/tmp4ntzhtwk_expected.txt	
+++ b/tldraw_packages_editor_src_lib_config_TLSessionStateSnapshot.ts_extracted.txt (actual):tmp/tmpkpdq6uth_actual.txt	
@@ -51,8 +51,8 @@ function iOS() {
  */
 export const TAB_ID: string = window
 	? (window[tabIdKey] ??
-		getFromSessionStorage(tabIdKey) ??
-		`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
+			getFromSessionStorage(tabIdKey) ??
+			`TLDRAW_INSTANCE_STATE_V1_` + uniqueId())
 	: '<error>'
 if (window) {
 	window[tabIdKey] = TAB_ID
@@ -138,11 +138,13 @@ function migrateAndValidateSessionStateSnapshot(state: unknown): TLSessionStateS
 		console.warn('Invalid instance state')
 		return null
 	}
-	if (!('version' in state) || typeof state.version !== 'number') {
+	// eslint-disable-next-line @typescript-eslint/no-explicit-any
+	if (!('version' in state) || typeof (state as any).version !== 'number') {
 		console.warn('No version in instance state')
 		return null
 	}
-	if (state.version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
+	// eslint-disable-next-line @typescript-eslint/no-explicit-any
+	if ((state as any).version !== CURRENT_SESSION_STATE_SNAPSHOT_VERSION) {
 		state = structuredClone(state)
 		migrate(state)
 	}
@@ -193,7 +195,7 @@ export function createSessionStateSnapshotSignal(
 						},
 						selectedShapeIds: ps?.selectedShapeIds ?? [],
 						focusedGroupId: ps?.focusedGroupId ?? null,
-					} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
+					} as NonNullable<TLSessionStateSnapshot['pageStates']>[0]
 				}),
 			} satisfies TLSessionStateSnapshot
 		},
@@ -220,6 +222,7 @@ export interface TLLoadSessionStateSnapshotOptions {
  * @public
  * @param store - The store to load the instance state into
  * @param snapshot - The instance state snapshot to load
+ * @param opts - Additional options
  * @returns
  */
 export function loadSessionStateSnapshotIntoStore(
@@ -263,7 +266,8 @@ export function loadSessionStateSnapshotIntoStore(
 				InstancePageStateRecordType.create({
 					id: instancePageState,
 					pageId: ps.pageId,
-					selectedShapeIds: ps.selectedShapeIds ?? previousInstanceState?.selectedShapeIds,
+					selectedShapeIds:
+						ps.selectedShapeIds ?? previousInstanceState?.selectedShapeIds,
 					focusedGroupId: ps.focusedGroupId ?? previousInstanceState?.focusedGroupId,
 				}),
 			])
@@ -282,15 +286,17 @@ export function extractSessionStateFromLegacySnapshot(
 ): TLSessionStateSnapshot | null {
 	const instanceRecords = []
 	for (const record of Object.values(store)) {
-		if (record.typeName?.match(/^(instance.*|pointer|camera)$/)) {
+		// eslint-disable-next-line @typescript-eslint/no-explicit-any
+		if ((record as any).typeName?.match(/^(instance.*|pointer|camera)$/)) {
 			instanceRecords.push(record)
 		}
 	}
 
 	// for scratch documents, we need to extract the most recently-used instance and it's associated page states
 	// but oops we don't have the concept of "most recently-used" so we'll just take the first one
+	// eslint-disable-next-line @typescript-eslint/no-explicit-any
 	const oldInstance = instanceRecords.filter(
-		(r) => r.typeName === 'instance' && r.id !== TLINSTANCE_ID
+		(r: any) => (r as any).typeName === 'instance' && (r as any).id !== TLINSTANCE_ID
 	)[0] as any
 	if (!oldInstance) return null
 
@@ -303,19 +309,24 @@ export function extractSessionStateFromLegacySnapshot(
 		isToolLocked: !!oldInstance.isToolLocked,
 		isGridMode: false,
 		pageStates: instanceRecords
-			.filter((r: any) => r.typeName === 'instance_page_state' && r.instanceId === oldInstance.id)
+			.filter(
+				(r: any) =>
+					(r as any).typeName === 'instance_page_state' &&
+					(r as any).instanceId === oldInstance.id
+			)
 			.map((ps: any) => {
-				const camera = (store[ps.cameraId] as any) ?? { x: 0, y: 0, z: 1 }
+				// eslint-disable-next-line @typescript-eslint/no-explicit-any
+				const camera = (store[(ps as any).cameraId] as any) ?? { x: 0, y: 0, z: 1 }
 				return {
-					pageId: ps.pageId,
+					pageId: (ps as any).pageId,
 					camera: {
 						x: camera.x,
 						y: camera.y,
 						z: camera.z,
 					},
-					selectedShapeIds: ps.selectedShapeIds,
-					focusedGroupId: ps.focusedGroupId,
-				} satisfies NonNullable<TLSessionStateSnapshot['pageStates']>[0]
+					selectedShapeIds: (ps as any).selectedShapeIds,
+					focusedGroupId: (ps as any).focusedGroupId,
+				} as NonNullable<TLSessionStateSnapshot['pageStates']>[0]
 			}),
 	}
 
