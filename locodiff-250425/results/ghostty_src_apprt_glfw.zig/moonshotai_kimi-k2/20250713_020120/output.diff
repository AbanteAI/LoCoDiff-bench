
index afd17d617..4677972b8 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmpjln_78hw_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmpgatgiu17_actual.txt	
@@ -147,7 +147,6 @@ pub const App = struct {
 
     /// Wakeup the event loop. This should be able to be called from any thread.
     pub fn wakeup(self: *const App) void {
-        _ = self;
         glfw.postEmptyEvent();
     }
 
@@ -191,6 +190,14 @@ pub const App = struct {
                 ),
             },
 
+            .initial_position => switch (target) {
+                .app => {},
+                .surface => |surface| try surface.rt_surface.setInitialWindowPosition(
+                    value.x,
+                    value.y,
+                ),
+            },
+
             .toggle_fullscreen => self.toggleFullscreen(target),
 
             .open_config => try configpkg.edit.open(self.app.alloc),
@@ -223,8 +230,8 @@ pub const App = struct {
             .toggle_split_zoom,
             .present_terminal,
             .close_all_windows,
-            .close_window,
             .close_tab,
+            .close_window,
             .toggle_tab_overview,
             .toggle_window_decorations,
             .toggle_quick_terminal,
@@ -236,7 +243,6 @@ pub const App = struct {
             .render_inspector,
             .quit_timer,
             .secure_input,
-            .key_sequence,
             .desktop_notification,
             .mouse_over_link,
             .cell_size,
@@ -342,6 +348,26 @@ pub const App = struct {
         win.setMonitor(monitor, 0, 0, video_mode.getWidth(), video_mode.getHeight(), 0);
     }
 
+    /// Create a new window for the app.
+    fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
+        // Grab a surface allocation because we're going to need it.
+        var surface = try self.app.alloc.create(Surface);
+        errdefer self.app.alloc.destroy(surface);
+
+        // Create the surface -- because windows are surfaces for glfw.
+        try surface.init(self);
+        errdefer surface.deinit();
+
+        // If we have a parent, inherit some properties
+        if (self.config.@"window-inherit-font-size") {
+            if (parent_) |parent| {
+                try surface.core_surface.setFontSize(parent.font_size);
+            }
+        }
+
+        return surface;
+    }
+
     /// Create a new tab in the parent surface.
     fn newTab(self: *App, parent_: ?*CoreSurface) !void {
         if (comptime !darwin_enabled) {
@@ -381,25 +407,6 @@ pub const App = struct {
         };
     }
 
-    fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
-        // Grab a surface allocation because we're going to need it.
-        var surface = try self.app.alloc.create(Surface);
-        errdefer self.app.alloc.destroy(surface);
-
-        // Create the surface -- because windows are surfaces for glfw.
-        try surface.init(self);
-        errdefer surface.deinit();
-
-        // If we have a parent, inherit some properties
-        if (self.config.@"window-inherit-font-size") {
-            if (parent_) |parent| {
-                try surface.core_surface.setFontSize(parent.font_size);
-            }
-        }
-
-        return surface;
-    }
-
     /// Close the given surface.
     pub fn closeSurface(self: *App, surface: *Surface) void {
         surface.deinit();
@@ -420,20 +427,6 @@ pub const App = struct {
         // GLFW doesn't support the inspector
     }
 
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
-    }
-
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
 
@@ -468,6 +461,20 @@ pub const App = struct {
             self.* = undefined;
         }
     };
+
+    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
+        std.log.warn("glfw error={} message={s}", .{ code, desc });
+
+        // Workaround for: https://github.com/ocornut/imgui/issues/5908
+        // If we get an invalid value with "scancode" in the message we assume
+        // it is from the glfw key callback that imgui sets and we clear the
+        // error so that our future code doesn't crash.
+        if (code == glfw.ErrorCode.InvalidValue and
+            std.mem.indexOf(u8, desc, "scancode") != null)
+        {
+            _ = glfw.getError();
+        }
+    }
 };
 
 /// These are used to keep track of the original monitor values so that we can
@@ -545,7 +552,7 @@ pub const Surface = struct {
         if (builtin.mode == .Debug) {
             const monitor = win.getMonitor() orelse monitor: {
                 log.warn("window had null monitor, getting primary monitor", .{});
-                break :monitor glfw.Monitor.getPrimary().?;
+                break :monitor glfw.Monitor.getPrimary()?;
             };
             const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_size = monitor.getPhysicalSize();
@@ -677,10 +684,21 @@ pub const Surface = struct {
         self.app.app.alloc.destroy(self);
     }
 
+    /// Set the flag that notes this window should be closed for the next
+    /// iteration of the event loop.
+    pub fn setShouldClose(self: *Surface) void {
+        self.window.setShouldClose(true);
+    }
+
+    /// Returns true if the window is flagged to close.
+    pub fn shouldClose(self: *const Surface) bool {
+        return self.window.shouldClose();
+    }
+
     /// Set the initial window size. This is called exactly once at
     /// surface initialization time. This may be called before "self"
     /// is fully initialized.
-    fn setInitialWindowSize(self: *const Surface, width: u32, height: u32) !void {
+    pub fn setInitialWindowSize(self: *const Surface, width: u32, height: u32) !void {
         const monitor = self.window.getMonitor() orelse glfw.Monitor.getPrimary() orelse {
             log.warn("window is not on a monitor, not setting initial size", .{});
             return;
@@ -746,27 +764,51 @@ pub const Surface = struct {
         };
     }
 
-    /// Set the flag that notes this window should be closed for the next
-    /// iteration of the event loop.
-    pub fn setShouldClose(self: *Surface) void {
-        self.window.setShouldClose(true);
-    }
+    /// Start an async clipboard request.
+    pub fn clipboardRequest(
+        self: *Surface,
+        clipboard_type: apprt.Clipboard,
+        state: apprt.ClipboardRequest,
+    ) !void {
+        // GLFW can read clipboards immediately so just do that.
+        const str: [:0]const u8 = switch (clipboard_type) {
+            .standard => glfw.getClipboardString() orelse return glfw.mustGetErrorCode(),
+            .selection, .primary => selection: {
+                // Not supported except on Linux
+                if (comptime builtin.os.tag != .linux) break :selection "";
 
-    /// Returns true if the window is flagged to close.
-    pub fn shouldClose(self: *const Surface) bool {
-        return self.window.shouldClose();
+                const raw = glfwNative.getX11SelectionString() orelse
+                    return glfw.mustGetErrorCode();
+                break :selection std.mem.span(raw);
+            },
+        };
+
+        // Complete our request. We always allow unsafe because we don't
+        // want to deal with user confirmation in this runtime.
+        try self.core_surface.completeClipboardRequest(state, str, true);
     }
 
-    /// Set the title of the window.
-    fn setTitle(self: *Surface, slice: [:0]const u8) !void {
-        if (self.title_text) |t| self.core_surface.alloc.free(t);
-        self.title_text = try self.core_surface.alloc.dupeZ(u8, slice);
-        self.window.setTitle(self.title_text.?.ptr);
+    /// Set the clipboard.
+    pub fn setClipboardString(
+        self: *Surface,
+        val: [:0]const u8,
+        clipboard_type: apprt.Clipboard,
+        confirm: bool,
+    ) !void {
+        _ = confirm;
+        switch (clipboard_type) {
+            .standard => glfw.setClipboardString(val),
+            .selection, .primary => {
+                // Not supported except on Linux
+                if (comptime builtin.os.tag != .linux) return;
+                glfwNative.setX11SelectionString(val.ptr);
+            },
+        }
     }
 
-    /// Return the title of the window.
-    pub fn getTitle(self: *Surface) ?[:0]const u8 {
-        return self.title_text;
+    /// Set the visibility of the mouse cursor.
+    fn setMouseVisibility(self: *Surface, visible: bool) void {
+        self.window.setInputModeCursor(if (visible) .normal else .hidden);
     }
 
     /// Set the shape of the cursor.
@@ -806,63 +848,16 @@ pub const Surface = struct {
         self.cursor = new;
     }
 
-    /// Set the visibility of the mouse cursor.
-    fn setMouseVisibility(self: *Surface, visible: bool) void {
-        self.window.setInputModeCursor(if (visible) .normal else .hidden);
-    }
-
-    pub fn supportsClipboard(
-        self: *const Surface,
-        clipboard_type: apprt.Clipboard,
-    ) bool {
-        _ = self;
-        return switch (clipboard_type) {
-            .standard => true,
-            .selection, .primary => comptime builtin.os.tag == .linux,
-        };
-    }
-
-    /// Start an async clipboard request.
-    pub fn clipboardRequest(
-        self: *Surface,
-        clipboard_type: apprt.Clipboard,
-        state: apprt.ClipboardRequest,
-    ) !void {
-        // GLFW can read clipboards immediately so just do that.
-        const str: [:0]const u8 = switch (clipboard_type) {
-            .standard => glfw.getClipboardString() orelse return glfw.mustGetErrorCode(),
-            .selection, .primary => selection: {
-                // Not supported except on Linux
-                if (comptime builtin.os.tag != .linux) break :selection "";
-
-                const raw = glfwNative.getX11SelectionString() orelse
-                    return glfw.mustGetErrorCode();
-                break :selection std.mem.span(raw);
-            },
-        };
-
-        // Complete our request. We always allow unsafe because we don't
-        // want to deal with user confirmation in this runtime.
-        try self.core_surface.completeClipboardRequest(state, str, true);
+    /// Return the title of the window.
+    pub fn getTitle(self: *Surface) ?[:0]const u8 {
+        return self.title_text;
     }
 
-    /// Set the clipboard.
-    pub fn setClipboardString(
-        self: *const Surface,
-        val: [:0]const u8,
-        clipboard_type: apprt.Clipboard,
-        confirm: bool,
-    ) !void {
-        _ = confirm;
-        _ = self;
-        switch (clipboard_type) {
-            .standard => glfw.setClipboardString(val),
-            .selection, .primary => {
-                // Not supported except on Linux
-                if (comptime builtin.os.tag != .linux) return;
-                glfwNative.setX11SelectionString(val.ptr);
-            },
-        }
+    /// Set the title of the window.
+    fn setTitle(self: *Surface, slice: [:0]const u8) !void {
+        if (self.title_text) |t| self.core_surface.alloc.free(t);
+        self.title_text = try self.core_surface.alloc.dupeZ(u8, slice);
+        self.window.setTitle(self.title_text.?.ptr);
     }
 
     /// The cursor position from glfw directly is in screen coordinates but
@@ -887,28 +882,19 @@ pub const Surface = struct {
         };
     }
 
-    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
-        return try internal_os.getEnvMap(self.app.app.alloc);
-    }
-
-    fn sizeCallback(window: glfw.Window, width: i32, height: i32) void {
-        _ = width;
-        _ = height;
-
-        // Get the size. We are given a width/height but this is in screen
-        // coordinates and we want raw pixels. The core window uses the content
-        // scale to scale appropriately.
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        const size = core_win.rt_surface.getSize() catch |err| {
-            log.err("error querying window size for size callback err={}", .{err});
-            return;
+    pub fn supportsClipboard(
+        self: *const Surface,
+        clipboard_type: apprt.Clipboard,
+    ) bool {
+        _ = self;
+        return switch (clipboard_type) {
+            .standard => true,
+            .selection, .primary => comptime builtin.os.tag == .linux,
         };
+    }
 
-        // Call the primary callback.
-        core_win.sizeCallback(size) catch |err| {
-            log.err("error in size callback err={}", .{err});
-            return;
-        };
+    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
+        return try internal_os.getEnvMap(self.app.app.alloc);
     }
 
     fn charCallback(window: glfw.Window, codepoint: u21) void {
@@ -943,28 +929,27 @@ pub const Surface = struct {
 
     fn keyCallback(
         window: glfw.Window,
-        glfw_key: glfw.Key,
+        key_: glfw.Key,
         scancode: i32,
-        glfw_action: glfw.Action,
-        glfw_mods: glfw.Mods,
+        action: glfw.Action,
+        mods_: glfw.Mods,
     ) void {
         _ = scancode;
-
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert our glfw types into our input types
         const mods: input.Mods = .{
-            .shift = glfw_mods.shift,
-            .ctrl = glfw_mods.control,
-            .alt = glfw_mods.alt,
-            .super = glfw_mods.super,
+            .shift = mods_.shift,
+            .ctrl = mods_.control,
+            .alt = mods_.alt,
+            .super = mods_.super,
         };
-        const action: input.Action = switch (glfw_action) {
+        const action_enum: input.Action = switch (action) {
             .release => .release,
             .press => .press,
             .repeat => .repeat,
         };
-        const key: input.Key = switch (glfw_key) {
+        const key: input.Key = switch (key_) {
             .a => .a,
             .b => .b,
             .c => .c,
@@ -1090,6 +1075,17 @@ pub const Surface = struct {
             => .invalid,
         };
 
+        const key_event: input.KeyEvent = .{
+            .action = action_enum,
+            .key = key,
+            .physical_key = key,
+            .mods = mods,
+            .consumed_mods = .{},
+            .composing = false,
+            .utf8 = "",
+            .unshifted_codepoint = 0,
+        };
+
         // This is a hack for GLFW. We require our apprts to send both
         // the UTF8 encoding AND the keypress at the same time. Its critical
         // for things like ctrl sequences to work. However, GLFW doesn't
@@ -1103,17 +1099,8 @@ pub const Surface = struct {
                 break :utf8 &.{byte};
             },
         };
-
-        const key_event: input.KeyEvent = .{
-            .action = action,
-            .key = key,
-            .physical_key = key,
-            .mods = mods,
-            .consumed_mods = .{},
-            .composing = false,
-            .utf8 = utf8,
-            .unshifted_codepoint = if (utf8.len > 0) @intCast(utf8[0]) else 0,
-        };
+        key_event.utf8 = utf8;
+        key_event.unshifted_codepoint = if (utf8.len > 0) @intCast(utf8[0]) else 0;
 
         const effect = core_win.keyCallback(key_event) catch |err| {
             log.err("error in key callback err={}", .{err});
@@ -1213,6 +1200,7 @@ pub const Surface = struct {
             .six => .six,
             .seven => .seven,
             .eight => .eight,
+            else => unreachable,
         };
         const action: input.MouseButtonState = switch (glfw_action) {
             .press => .press,
@@ -1234,6 +1222,7 @@ pub const Surface = struct {
 
         for (paths) |path| {
             const path_slice = std.mem.span(path);
+            const writer = list.writer();
 
             // preallocate worst case of escaping every char + space
             list.ensureTotalCapacity(path_slice.len * 2 + 1) catch |err| {
@@ -1241,20 +1230,19 @@ pub const Surface = struct {
                 return;
             };
 
-            const writer = list.writer();
             for (path_slice) |c| {
                 if (std.mem.indexOfScalar(u8, "\\ ()[]{}<>\"'`!#$&;|*?\t", c)) |_| {
                     writer.print("\\{c}", .{c}) catch unreachable; //  memory preallocated
                 } else writer.writeByte(c) catch unreachable; // same here
             }
             writer.writeByte(' ') catch unreachable; // separate paths
+        }
 
-            surface.textCallback(list.items) catch |err| {
-                log.err("error in drop callback err={}", .{err});
-                return;
-            };
+        surface.textCallback(list.items) catch |err| {
+            log.err("error in drop callback err={}", .{err});
+            return;
+        };
 
-            list.clearRetainingCapacity(); // avoid unnecessary reallocations
-        }
+        list.clearRetainingCapacity(); // avoid unnecessary reallocations
     }
 };
\ No newline at end of file
