--- ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_glfw.zig_extracted.txt (actual)@@ -191,6 +191,8 @@                 ),
             },
 
+            .reload_config => try self.reloadConfig(target, value),
+
             .toggle_fullscreen => self.toggleFullscreen(target),
 
             .open_config => try configpkg.edit.open(self.app.alloc),
@@ -212,8 +214,6 @@                     .hidden => false,
                 }),
             },
-
-            .reload_config => try self.reloadConfig(target, value),
 
             // Unimplemented
             .new_split,
@@ -413,12 +413,40 @@         @panic("This should never be called for GLFW.");
     }
 
-    pub fn redrawInspector(self: *App, surface: *Surface) void {
+    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
-        _ = surface;
-
-        // GLFW doesn't support the inspector
-    }
+
+        // Not supported by glfw
+        return .unknown;
+    }
+
+    /// Mac-specific settings. This is only enabled when the target is
+    /// Mac and the artifact is a standalone exe. We don't target libs because
+    /// the embedded API doesn't do windowing.
+    const Darwin = struct {
+        tabbing_id: *macos.foundation.String,
+
+        pub fn init() !Darwin {
+            const NSWindow = objc.getClass("NSWindow").?;
+            NSWindow.msgSend(void, objc.sel("setAllowsAutomaticWindowTabbing:"), .{true});
+
+            // Our tabbing ID allows all of our windows to group together
+            const tabbing_id = try macos.foundation.String.createWithBytes(
+                "com.mitchellh.ghostty.window",
+                .utf8,
+                false,
+            );
+            errdefer tabbing_id.release();
+
+            // Setup our Mac settings
+            return .{ .tabbing_id = tabbing_id };
+        }
+
+        pub fn deinit(self: *Darwin) void {
+            self.tabbing_id.release();
+            self.* = undefined;
+        }
+    };
 
     fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
         std.log.warn("glfw error={} message={s}", .{ code, desc });
@@ -433,41 +461,6 @@             _ = glfw.getError();
         }
     }
-
-    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
-        _ = self;
-
-        // Not supported by glfw
-        return .unknown;
-    }
-
-    /// Mac-specific settings. This is only enabled when the target is
-    /// Mac and the artifact is a standalone exe. We don't target libs because
-    /// the embedded API doesn't do windowing.
-    const Darwin = struct {
-        tabbing_id: *macos.foundation.String,
-
-        pub fn init() !Darwin {
-            const NSWindow = objc.getClass("NSWindow").?;
-            NSWindow.msgSend(void, objc.sel("setAllowsAutomaticWindowTabbing:"), .{true});
-
-            // Our tabbing ID allows all of our windows to group together
-            const tabbing_id = try macos.foundation.String.createWithBytes(
-                "com.mitchellh.ghostty.window",
-                .utf8,
-                false,
-            );
-            errdefer tabbing_id.release();
-
-            // Setup our Mac settings
-            return .{ .tabbing_id = tabbing_id };
-        }
-
-        pub fn deinit(self: *Darwin) void {
-            self.tabbing_id.release();
-            self.* = undefined;
-        }
-    };
 };
 
 /// These are used to keep track of the original monitor values so that we can
@@ -547,8 +540,8 @@                 log.warn("window had null monitor, getting primary monitor", .{});
                 break :monitor glfw.Monitor.getPrimary().?;
             };
+            const physical_size = monitor.getPhysicalSize();
             const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
-            const physical_size = monitor.getPhysicalSize();
             const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4);
             const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4);
             log.debug("physical dpi x={} y={}", .{
@@ -619,7 +612,6 @@             app.app.alloc,
             &config,
             app.app,
-            app,
             self,
         );
         errdefer self.core_surface.deinit();
@@ -953,7 +945,7 @@         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert our glfw types into our input types
-        const mods: input.Mods = .{
+        const mods = .{
             .shift = glfw_mods.shift,
             .ctrl = glfw_mods.control,
             .alt = glfw_mods.alt,
@@ -1198,7 +1190,7 @@         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert glfw button to input button
-        const mods: input.Mods = .{
+        const mods = .{
             .shift = glfw_mods.shift,
             .ctrl = glfw_mods.control,
             .alt = glfw_mods.alt,
