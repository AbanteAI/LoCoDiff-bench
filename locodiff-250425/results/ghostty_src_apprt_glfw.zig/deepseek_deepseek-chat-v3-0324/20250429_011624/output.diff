
index afd17d61..2edcd2ec 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmpbe0jcckp_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmpdt17q0hn_actual.txt	
@@ -191,6 +191,8 @@ pub const App = struct {
                 ),
             },
 
+            .reload_config => try self.reloadConfig(target, value),
+
             .toggle_fullscreen => self.toggleFullscreen(target),
 
             .open_config => try configpkg.edit.open(self.app.alloc),
@@ -213,8 +215,6 @@ pub const App = struct {
                 }),
             },
 
-            .reload_config => try self.reloadConfig(target, value),
-
             // Unimplemented
             .new_split,
             .goto_split,
@@ -413,27 +413,6 @@ pub const App = struct {
         @panic("This should never be called for GLFW.");
     }
 
-    pub fn redrawInspector(self: *App, surface: *Surface) void {
-        _ = self;
-        _ = surface;
-
-        // GLFW doesn't support the inspector
-    }
-
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
-    }
-
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
 
@@ -468,6 +447,20 @@ pub const App = struct {
             self.* = undefined;
         }
     };
+
+    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
+        std.log.warn("glfw error={} message={s}", .{ code, desc });
+
+        // Workaround for: https://github.com/ocornut/imgui/issues/5908
+        // If we get an invalid value with "scancode" in the message we assume
+        // it is from the glfw key callback that imgui sets and we clear the
+        // error so that our future code doesn't crash.
+        if (code == glfw.ErrorCode.InvalidValue and
+            std.mem.indexOf(u8, desc, "scancode") != null)
+        {
+            _ = glfw.getError();
+        }
+    }
 };
 
 /// These are used to keep track of the original monitor values so that we can
@@ -547,8 +540,8 @@ pub const Surface = struct {
                 log.warn("window had null monitor, getting primary monitor", .{});
                 break :monitor glfw.Monitor.getPrimary().?;
             };
-            const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_size = monitor.getPhysicalSize();
+            const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4);
             const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4);
             log.debug("physical dpi x={} y={}", .{
@@ -619,7 +612,6 @@ pub const Surface = struct {
             app.app.alloc,
             &config,
             app.app,
-            app,
             self,
         );
         errdefer self.core_surface.deinit();
@@ -953,7 +945,7 @@ pub const Surface = struct {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert our glfw types into our input types
-        const mods: input.Mods = .{
+        const mods = .{
             .shift = glfw_mods.shift,
             .ctrl = glfw_mods.control,
             .alt = glfw_mods.alt,
@@ -1198,7 +1190,7 @@ pub const Surface = struct {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert glfw button to input button
-        const mods: input.Mods = .{
+        const mods = .{
             .shift = glfw_mods.shift,
             .ctrl = glfw_mods.control,
             .alt = glfw_mods.alt,
