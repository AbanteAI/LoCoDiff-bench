--- ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_glfw.zig_extracted.txt (actual)@@ -114,6 +114,7 @@ 
     pub fn terminate(self: *App) void {
         self.config.deinit();
+        if (darwin_enabled) self.darwin.deinit();
         glfw.terminate();
     }
 
@@ -420,6 +421,41 @@         // GLFW doesn't support the inspector
     }
 
+    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
+        _ = self;
+
+        // Not supported by glfw
+        return .unknown;
+    }
+
+    /// Mac-specific settings. This is only enabled when the target is
+    /// Mac and the artifact is a standalone exe. We don't target libs because
+    /// the embedded API doesn't do windowing.
+    const Darwin = struct {
+        tabbing_id: *macos.foundation.String,
+
+        pub fn init() !Darwin {
+            const NSWindow = objc.getClass("NSWindow").?;
+            NSWindow.msgSend(void, objc.sel("setAllowsAutomaticWindowTabbing:"), .{true});
+
+            // Our tabbing ID allows all of our windows to group together
+            const tabbing_id = try macos.foundation.String.createWithBytes(
+                "com.mitchellh.ghostty.window",
+                .utf8,
+                false,
+            );
+            errdefer tabbing_id.release();
+
+            // Setup our Mac settings
+            return .{ .tabbing_id = tabbing_id };
+        }
+
+        pub fn deinit(self: *Darwin) void {
+            self.tabbing_id.release();
+            self.* = undefined;
+        }
+    };
+
     fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
         std.log.warn("glfw error={} message={s}", .{ code, desc });
 
@@ -433,41 +469,6 @@             _ = glfw.getError();
         }
     }
-
-    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
-        _ = self;
-
-        // Not supported by glfw
-        return .unknown;
-    }
-
-    /// Mac-specific settings. This is only enabled when the target is
-    /// Mac and the artifact is a standalone exe. We don't target libs because
-    /// the embedded API doesn't do windowing.
-    const Darwin = struct {
-        tabbing_id: *macos.foundation.String,
-
-        pub fn init() !Darwin {
-            const NSWindow = objc.getClass("NSWindow").?;
-            NSWindow.msgSend(void, objc.sel("setAllowsAutomaticWindowTabbing:"), .{true});
-
-            // Our tabbing ID allows all of our windows to group together
-            const tabbing_id = try macos.foundation.String.createWithBytes(
-                "com.mitchellh.ghostty.window",
-                .utf8,
-                false,
-            );
-            errdefer tabbing_id.release();
-
-            // Setup our Mac settings
-            return .{ .tabbing_id = tabbing_id };
-        }
-
-        pub fn deinit(self: *Darwin) void {
-            self.tabbing_id.release();
-            self.* = undefined;
-        }
-    };
 };
 
 /// These are used to keep track of the original monitor values so that we can
@@ -536,8 +537,8 @@         // Setup our
         setInitialWindowPosition(
             win,
-            app.config.@"window-position-x",
-            app.config.@"window-position-y",
+            app.config.@"window-initial-position-x",
+            app.config.@"window-initial-position-y",
         );
 
         // Get our physical DPI - debug only because we don't have a use for
@@ -804,6 +805,12 @@ 
         if (self.cursor) |c| c.destroy();
         self.cursor = new;
+    }
+
+    pub fn mouseOverLink(self: *Surface, uri: ?[]const u8) void {
+        // We don't do anything in GLFW.
+        _ = self;
+        _ = uri;
     }
 
     /// Set the visibility of the mouse cursor.
