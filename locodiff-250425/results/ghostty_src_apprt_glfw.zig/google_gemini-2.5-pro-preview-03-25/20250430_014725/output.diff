
index afd17d61..95d4d38a 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmp_yycd413_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmpo5dzrbuw_actual.txt	
@@ -114,6 +114,7 @@ pub const App = struct {
 
     pub fn terminate(self: *App) void {
         self.config.deinit();
+        if (darwin_enabled) self.darwin.deinit();
         glfw.terminate();
     }
 
@@ -420,20 +421,6 @@ pub const App = struct {
         // GLFW doesn't support the inspector
     }
 
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
-    }
-
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
 
@@ -468,6 +455,20 @@ pub const App = struct {
             self.* = undefined;
         }
     };
+
+    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
+        std.log.warn("glfw error={} message={s}", .{ code, desc });
+
+        // Workaround for: https://github.com/ocornut/imgui/issues/5908
+        // If we get an invalid value with "scancode" in the message we assume
+        // it is from the glfw key callback that imgui sets and we clear the
+        // error so that our future code doesn't crash.
+        if (code == glfw.ErrorCode.InvalidValue and
+            std.mem.indexOf(u8, desc, "scancode") != null)
+        {
+            _ = glfw.getError();
+        }
+    }
 };
 
 /// These are used to keep track of the original monitor values so that we can
@@ -536,8 +537,8 @@ pub const Surface = struct {
         // Setup our
         setInitialWindowPosition(
             win,
-            app.config.@"window-position-x",
-            app.config.@"window-position-y",
+            app.config.@"window-initial-position-x",
+            app.config.@"window-initial-position-y",
         );
 
         // Get our physical DPI - debug only because we don't have a use for
@@ -806,6 +807,12 @@ pub const Surface = struct {
         self.cursor = new;
     }
 
+    pub fn mouseOverLink(self: *Surface, uri: ?[]const u8) void {
+        // We don't do anything in GLFW.
+        _ = self;
+        _ = uri;
+    }
+
     /// Set the visibility of the mouse cursor.
     fn setMouseVisibility(self: *Surface, visible: bool) void {
         self.window.setInputModeCursor(if (visible) .normal else .hidden);
