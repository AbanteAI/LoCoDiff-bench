--- ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_glfw.zig_extracted.txt (actual)@@ -18,9 +18,9 @@ const terminal = @import("../terminal/main.zig");
 const Renderer = renderer.Renderer;
 const apprt = @import("../apprt.zig");
+const configpkg = @import("../config.zig");
 const CoreApp = @import("../App.zig");
 const CoreSurface = @import("../Surface.zig");
-const configpkg = @import("../config.zig");
 const Config = @import("../config.zig").Config;
 
 // Get native API access on certain platforms so we can do more customization.
@@ -101,6 +101,7 @@         _ = core_app.mailbox.push(.{
             .new_window = .{},
         }, .{ .forever = {} });
+
 
         // We want the event loop to wake up instantly so we can process our tick.
         glfw.postEmptyEvent();
@@ -137,6 +138,8 @@             // If the tick caused us to quit, then we're done.
             if (self.quit or self.app.surfaces.items.len == 0) {
                 for (self.app.surfaces.items) |surface| {
+                    // The surface deinit removes itself from the list. We have to
+                    // copy the list each time or this will crash.
                     surface.close(false);
                 }
 
@@ -162,10 +165,14 @@         switch (action) {
             .quit => self.quit = true,
 
-            .new_window => _ = try self.newSurface(switch (target) {
-                .app => null,
-                .surface => |v| v,
-            }),
+            .new_window => {
+                var surface = try self.newSurface(switch (target) {
+                    .app => null,
+                    .surface => |v| v,
+                });
+
+                try surface.setInitialWindowPosition(self.config.@"window-initial-position-x", self.config.@"window-initial-position-y");
+            },
 
             .new_tab => try self.newTab(switch (target) {
                 .app => null,
@@ -181,14 +188,6 @@                     .width = value.max_width,
                     .height = value.max_height,
                 } else null),
-            },
-
-            .initial_size => switch (target) {
-                .app => {},
-                .surface => |surface| try surface.rt_surface.setInitialWindowSize(
-                    value.width,
-                    value.height,
-                ),
             },
 
             .toggle_fullscreen => self.toggleFullscreen(target),
@@ -257,11 +256,7 @@         return true;
     }
 
-    /// Reload the configuration. This should return the new configuration.
-    /// The old value can be freed immediately at this point assuming a
-    /// successful return.
-    ///
-    /// The returned pointer value is only valid for a stable self pointer.
+    /// Open the configuration in the system editor.
     fn reloadConfig(
         self: *App,
         target: apprt.action.Target,
@@ -402,8 +397,7 @@ 
     /// Close the given surface.
     pub fn closeSurface(self: *App, surface: *Surface) void {
-        surface.deinit();
-        self.app.alloc.destroy(surface);
+        surface.close(false);
     }
 
     pub fn redrawSurface(self: *App, surface: *Surface) void {
@@ -418,20 +412,6 @@         _ = surface;
 
         // GLFW doesn't support the inspector
-    }
-
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
     }
 
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
@@ -522,6 +502,7 @@     /// Initialize the surface into the given self pointer. This gives a
     /// stable pointer to the destination that can be used for callbacks.
     pub fn init(self: *Surface, app: *App) !void {
+
         // Create our window
         const win = glfw.Window.create(
             640,
@@ -536,8 +517,8 @@         // Setup our
         setInitialWindowPosition(
             win,
-            app.config.@"window-position-x",
-            app.config.@"window-position-y",
+            app.config.@"window-initial-position-x",
+            app.config.@"window-initial-position-y",
         );
 
         // Get our physical DPI - debug only because we don't have a use for
@@ -582,10 +563,10 @@         win.setMouseButtonCallback(mouseButtonCallback);
         win.setDropCallback(dropCallback);
 
-        const dimensions: MonitorDimensions = dimensions: {
+        const monitor_dims: MonitorDimensions = monitor_dims: {
             const pos = win.getPos();
             const size = win.getFramebufferSize();
-            break :dimensions .{
+            break :monitor_dims .{
                 .width = size.width,
                 .height = size.height,
                 .position_x = pos.x,
@@ -599,7 +580,7 @@             .window = win,
             .cursor = null,
             .core_surface = undefined,
-            .monitor_dims = dimensions,
+            .monitor_dims = monitor_dims,
         };
         errdefer self.* = undefined;
 
@@ -669,12 +650,18 @@         return self.window.getMonitor() != null;
     }
 
-    /// Close this surface.
-    pub fn close(self: *Surface, processActive: bool) void {
-        _ = processActive;
-        self.setShouldClose();
-        self.deinit();
-        self.app.app.alloc.destroy(self);
+    /// Returns the content scale for the created window.
+    pub fn getContentScale(self: *const Surface) !apprt.ContentScale {
+        const scale = self.window.getContentScale();
+        return apprt.ContentScale{ .x = scale.x_scale, .y = scale.y_scale };
+    }
+
+    /// Returns the size of the window in pixels. The pixel size may
+    /// not match screen coordinate size but we should be able to convert
+    /// back and forth using getContentScale.
+    pub fn getSize(self: *const Surface) !apprt.SurfaceSize {
+        const size = self.window.getFramebufferSize();
+        return apprt.SurfaceSize{ .width = size.width, .height = size.height };
     }
 
     /// Set the initial window size. This is called exactly once at
@@ -721,20 +708,6 @@         });
     }
 
-    /// Returns the content scale for the created window.
-    pub fn getContentScale(self: *const Surface) !apprt.ContentScale {
-        const scale = self.window.getContentScale();
-        return apprt.ContentScale{ .x = scale.x_scale, .y = scale.y_scale };
-    }
-
-    /// Returns the size of the window in pixels. The pixel size may
-    /// not match screen coordinate size but we should be able to convert
-    /// back and forth using getContentScale.
-    pub fn getSize(self: *const Surface) !apprt.SurfaceSize {
-        const size = self.window.getFramebufferSize();
-        return apprt.SurfaceSize{ .width = size.width, .height = size.height };
-    }
-
     /// Returns the cursor position in scaled pixels relative to the
     /// upper-left of the window.
     pub fn getCursorPos(self: *const Surface) !apprt.CursorPos {
@@ -806,9 +779,21 @@         self.cursor = new;
     }
 
+    fn mouseOverLink(self: *Surface, uri: ?[]const u8) void {
+        // We don't do anything in GLFW.
+        _ = self;
+        _ = uri;
+    }
+
     /// Set the visibility of the mouse cursor.
     fn setMouseVisibility(self: *Surface, visible: bool) void {
         self.window.setInputModeCursor(if (visible) .normal else .hidden);
+    }
+
+    fn updateRendererHealth(self: *const Surface, health: renderer.Health) void {
+        // We don't support this in GLFW.
+        _ = self;
+        _ = health;
     }
 
     pub fn supportsClipboard(
@@ -865,6 +850,16 @@         }
     }
 
+    fn setCellSize(self: *const Surface, width: u32, height: u32) !void {
+        _ = self;
+        _ = width;
+        _ = height;
+    }
+
+    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
+        return try internal_os.getEnvMap(self.app.app.alloc);
+    }
+
     /// The cursor position from glfw directly is in screen coordinates but
     /// all our interface works in pixels.
     fn cursorPosToPixels(self: *const Surface, pos: glfw.Window.CursorPos) !glfw.Window.CursorPos {
@@ -887,8 +882,12 @@         };
     }
 
-    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
-        return try internal_os.getEnvMap(self.app.app.alloc);
+    /// Close this surface.
+    pub fn close(self: *Surface, processActive: bool) void {
+        _ = processActive;
+        self.setShouldClose();
+        self.deinit();
+        self.app.app.alloc.destroy(self);
     }
 
     fn sizeCallback(window: glfw.Window, width: i32, height: i32) void {
@@ -1123,7 +1122,7 @@         // Surface closed.
         if (effect == .closed) return;
 
-        // If it wasn't consumed, we set it on our self so that charcallback
+        // If it wasn't ignored, we set it on our self so that charcallback
         // can make another attempt. Otherwise, we set null so the charcallback
         // is ignored.
         core_win.rt_surface.key_event = null;
@@ -1198,12 +1197,7 @@         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert glfw button to input button
-        const mods: input.Mods = .{
-            .shift = glfw_mods.shift,
-            .ctrl = glfw_mods.control,
-            .alt = glfw_mods.alt,
-            .super = glfw_mods.super,
-        };
+        const mods: input.Mods = @bitCast(glfw_mods);
         const button: input.MouseButton = switch (glfw_button) {
             .left => .left,
             .right => .right,
