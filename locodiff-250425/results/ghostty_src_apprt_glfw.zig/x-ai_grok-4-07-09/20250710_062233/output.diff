
index afd17d617..2ac45b16f 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmp_t18wvi4_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmphas7zpuq_actual.txt	
@@ -30,8 +30,7 @@ const glfwNative = glfw.Native(.{
 });
 
 /// True if darwin-specific logic is enabled
-const darwin_enabled = builtin.target.os.tag.isDarwin() and
-    build_config.artifact == .exe;
+const darwin_enabled = builtin.target.os.tag.isDarwin() and build_config.artifact == .exe;
 
 const log = std.log.scoped(.glfw);
 
@@ -195,26 +194,6 @@ pub const App = struct {
 
             .open_config => try configpkg.edit.open(self.app.alloc),
 
-            .set_title => switch (target) {
-                .app => {},
-                .surface => |surface| try surface.rt_surface.setTitle(value.title),
-            },
-
-            .mouse_shape => switch (target) {
-                .app => {},
-                .surface => |surface| try surface.rt_surface.setMouseShape(value),
-            },
-
-            .mouse_visibility => switch (target) {
-                .app => {},
-                .surface => |surface| surface.rt_surface.setMouseVisibility(switch (value) {
-                    .visible => true,
-                    .hidden => false,
-                }),
-            },
-
-            .reload_config => try self.reloadConfig(target, value),
-
             // Unimplemented
             .new_split,
             .goto_split,
@@ -257,14 +236,9 @@ pub const App = struct {
         return true;
     }
 
-    /// Reload the configuration. This should return the new configuration.
-    /// The old value can be freed immediately at this point assuming a
-    /// successful return.
-    ///
-    /// The returned pointer value is only valid for a stable self pointer.
     fn reloadConfig(
         self: *App,
-        target: apprt.action.Target,
+        target: apprt.Target,
         opts: apprt.action.ReloadConfig,
     ) !void {
         if (opts.soft) {
@@ -381,25 +355,6 @@ pub const App = struct {
         };
     }
 
-    fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
-        // Grab a surface allocation because we're going to need it.
-        var surface = try self.app.alloc.create(Surface);
-        errdefer self.app.alloc.destroy(surface);
-
-        // Create the surface -- because windows are surfaces for glfw.
-        try surface.init(self);
-        errdefer surface.deinit();
-
-        // If we have a parent, inherit some properties
-        if (self.config.@"window-inherit-font-size") {
-            if (parent_) |parent| {
-                try surface.core_surface.setFontSize(parent.font_size);
-            }
-        }
-
-        return surface;
-    }
-
     /// Close the given surface.
     pub fn closeSurface(self: *App, surface: *Surface) void {
         surface.deinit();
@@ -413,27 +368,6 @@ pub const App = struct {
         @panic("This should never be called for GLFW.");
     }
 
-    pub fn redrawInspector(self: *App, surface: *Surface) void {
-        _ = self;
-        _ = surface;
-
-        // GLFW doesn't support the inspector
-    }
-
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
-    }
-
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
 
@@ -533,7 +467,7 @@ pub const Surface = struct {
         ) orelse return glfw.mustGetErrorCode();
         errdefer win.destroy();
 
-        // Setup our
+        // Setup our position if specified
         setInitialWindowPosition(
             win,
             app.config.@"window-position-x",
@@ -547,14 +481,11 @@ pub const Surface = struct {
                 log.warn("window had null monitor, getting primary monitor", .{});
                 break :monitor glfw.Monitor.getPrimary().?;
             };
-            const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_size = monitor.getPhysicalSize();
+            const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4);
             const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4);
-            log.debug("physical dpi x={} y={}", .{
-                physical_x_dpi,
-                physical_y_dpi,
-            });
+            log.debug("physical dpi x={} y={}", .{physical_x_dpi, physical_y_dpi});
         }
 
         // On Mac, enable window tabbing
@@ -618,7 +549,6 @@ pub const Surface = struct {
         try self.core_surface.init(
             app.app.alloc,
             &config,
-            app.app,
             app,
             self,
         );
@@ -674,51 +604,14 @@ pub const Surface = struct {
         _ = processActive;
         self.setShouldClose();
         self.deinit();
-        self.app.app.alloc.destroy(self);
-    }
-
-    /// Set the initial window size. This is called exactly once at
-    /// surface initialization time. This may be called before "self"
-    /// is fully initialized.
-    fn setInitialWindowSize(self: *const Surface, width: u32, height: u32) !void {
-        const monitor = self.window.getMonitor() orelse glfw.Monitor.getPrimary() orelse {
-            log.warn("window is not on a monitor, not setting initial size", .{});
-            return;
-        };
-
-        const workarea = monitor.getWorkarea();
-        self.window.setSize(.{
-            .width = @min(width, workarea.width),
-            .height = @min(height, workarea.height),
-        });
-    }
-
-    /// Set the initial window position. This is called exactly once at
-    /// surface initialization time. This may be called before "self"
-    /// is fully initialized.
-    fn setInitialWindowPosition(win: glfw.Window, x: ?i16, y: ?i16) void {
-        const start_position_x = x orelse return;
-        const start_position_y = y orelse return;
-
-        log.debug("setting initial window position ({},{})", .{ start_position_x, start_position_y });
-        win.setPos(.{ .x = start_position_x, .y = start_position_y });
+        self.app.app.alloc destroying(self);
     }
 
-    /// Set the size limits of the window.
-    /// Note: this interface is not good, we should redo it if we plan
-    /// to use this more. i.e. you can't set max width but no max height,
-    /// or no mins.
     fn setSizeLimits(self: *Surface, min: apprt.SurfaceSize, max_: ?apprt.SurfaceSize) !void {
         self.window.setSizeLimits(.{
             .width = min.width,
             .height = min.height,
-        }, if (max_) |max| .{
-            .width = max.width,
-            .height = max.height,
-        } else .{
-            .width = null,
-            .height = null,
-        });
+        }, if (max_) |max| .{ .width = max.width, .height = max.height } else .{ .width = null, .height = null });
     }
 
     /// Returns the content scale for the created window.
@@ -741,12 +634,12 @@ pub const Surface = struct {
         const unscaled_pos = self.window.getCursorPos();
         const pos = try self.cursorPosToPixels(unscaled_pos);
         return apprt.CursorPos{
-            .x = @floatCast(pos.xpos),
+            .x = @floatCast(pos chciał.xpos),
             .y = @floatCast(pos.ypos),
         };
     }
 
-    /// Set the flag that notes this window should be closed for the next
+    /// Set the flag that returns this window should be closed for the next
     /// iteration of the event loop.
     pub fn setShouldClose(self: *Surface) void {
         self.window.setShouldClose(true);
@@ -757,7 +650,6 @@ pub const Surface = struct {
         return self.window.shouldClose();
     }
 
-    /// Set the title of the window.
     fn setTitle(self: *Surface, slice: [:0]const u8) !void {
         if (self.title_text) |t| self.core_surface.alloc.free(t);
         self.title_text = try self.core_surface.alloc.dupeZ(u8, slice);
@@ -769,33 +661,33 @@ pub const Surface = struct {
         return self.title_text;
     }
 
-    /// Set the shape of the cursor.
     fn setMouseShape(self: *Surface, shape: terminal.MouseShape) !void {
-        if ((comptime builtin.target.os.tag.isDarwin()) and
-            !internal_os.macos.isAtLeastVersion(13, 0, 0))
-        {
-            // We only set our cursor if we're NOT on Mac, or if we are then the
-            // macOS version is >= 13 (Ventura). On prior versions, glfw crashes
-            // since we use a tab group.
+        if (comptime builtin.target.os.tag.isDarwin() and !internal_os.macos.isAtLeastVersion(13, 0, 0)) {
             return;
         }
 
         const new = glfw.Cursor.createStandard(switch (shape) {
             .default => .arrow,
             .text => .ibeam,
-            .crosshair => .crosshair,
+            .crosshair = .crosshair,
             .pointer => .pointing_hand,
             .ew_resize => .resize_ew,
             .ns_resize => .resize_ns,
             .nwse_resize => .resize_nwse,
             .nesw_resize => .resize_nesw,
+
             .all_scroll => .resize_all,
             .not_allowed => .not_allowed,
             else => return, // unsupported, ignore
+
         }) orelse {
+
             const err = glfw.mustGetErrorCode();
+
             log.warn("error creating cursor: {}", .{err});
+
             return;
+
         };
         errdefer new.destroy();
 
@@ -806,105 +698,31 @@ pub const Surface = struct {
         self.cursor = new;
     }
 
-    /// Set the visibility of the mouse cursor.
     fn setMouseVisibility(self: *Surface, visible: bool) void {
-        self.window.setInputModeCursor(if (visible) .normal else .hidden);
-    }
-
-    pub fn supportsClipboard(
-        self: *const Surface,
-        clipboard_type: apprt.Clipboard,
-    ) bool {
-        _ = self;
-        return switch (clipboard_type) {
-            .standard => true,
-            .selection, .primary => comptime builtin.os.tag == .linux,
-        };
-    }
-
-    /// Start an async clipboard request.
-    pub fn clipboardRequest(
-        self: *Surface,
-        clipboard_type: apprt.Clipboard,
-        state: apprt.ClipboardRequest,
-    ) !void {
-        // GLFW can read clipboards immediately so just do that.
-        const str: [:0]const u8 = switch (clipboard_type) {
-            .standard => glfw.getClipboardString() orelse return glfw.mustGetErrorCode(),
-            .selection, .primary => selection: {
-                // Not supported except on Linux
-                if (comptime builtin.os.tag != .linux) break :selection "";
-
-                const raw = glfwNative.getX11SelectionString() orelse
-                    return glfw.mustGetErrorCode();
-                break :selection std.mem.span(raw);
-            },
-        };
 
-        // Complete our request. We always allow unsafe because we don't
-        // want to deal with user confirmation in this runtime.
-        try self.core_surface.completeClipboardRequest(state, str, true);
-    }
-
-    /// Set the clipboard.
-    pub fn setClipboardString(
-        self: *const Surface,
-        val: [:0]const u8,
-        clipboard_type: apprt.Clipboard,
-        confirm: bool,
-    ) !void {
-        _ = confirm;
-        _ = self;
-        switch (clipboard_type) {
-            .standard => glfw.setClipboardString(val),
-            .selection, .primary => {
-                // Not supported except on Linux
-                if (comptime builtin.os.tag != .linux) return;
-                glfwNative.setX11SelectionString(val.ptr);
-            },
-        }
-    }
+        self.window.setInputModeCursor(if (visible) .normal else .hidden);
 
-    /// The cursor position from glfw directly is in screen coordinates but
-    /// all our interface works in pixels.
-    fn cursorPosToPixels(self: *const Surface, pos: glfw.Window.CursorPos) !glfw.Window.CursorPos {
-        // The cursor position is in screen coordinates but we
-        // want it in pixels. we need to get both the size of the
-        // window in both to get the ratio to make the conversion.
-        const size = self.window.getSize();
-        const fb_size = self.window.getFramebufferSize();
-
-        // If our framebuffer and screen are the same, then there is no scaling
-        // happening and we can short-circuit by returning the pos as-is.
-        if (fb_size.width == size.width and fb_size.height == size.height)
-            return pos;
-
-        const x_scale = @as(f64, @floatFromInt(fb_size.width)) / @as(f64, @floatFromInt(size.width));
-        const y_scale = @as(f64, @floatFromInt(fb_size.height)) / @as(f64, @floatFromInt(size.height));
-        return .{
-            .xpos = pos.xpos * x_scale,
-            .ypos = pos.ypos * y_scale,
-        };
     }
 
     pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
+
         return try internal_os.getEnvMap(self.app.app.alloc);
+
     }
 
     fn sizeCallback(window: glfw.Window, width: i32, height: i32) void {
         _ = width;
         _ = height;
 
-        // Get the size. We are given a width/height but this is in screen
-        // coordinates and we want raw pixels. The core window uses the content
-        // scale to scale appropriately.
         const core_win = window.getUserPointer(CoreSurface) orelse return;
         const size = core_win.rt_surface.getSize() catch |err| {
-            log.err("error querying window size for size callback err={}", .{err});
+
+            log.err("error querying window size for size callback err={}", . {err});
+
             return;
+
         };
 
-        // Call the primary callback.
         core_win.sizeCallback(size) catch |err| {
             log.err("error in size callback err={}", .{err});
             return;
@@ -914,12 +732,9 @@ pub const Surface = struct {
     fn charCallback(window: glfw.Window, codepoint: u21) void {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
-        // We need a key event in order to process the charcallback. If it
-        // isn't set then the key event was consumed.
         var key_event = core_win.rt_surface.key_event orelse return;
         core_win.rt_surface.key_event = null;
 
-        // Populate the utf8 value for the event
         var buf: [4]u8 = undefined;
         const len = std.unicode.utf8Encode(codepoint, &buf) catch |err| {
             log.err("error encoding codepoint={} err={}", .{ codepoint, err });
@@ -930,8 +745,6 @@ pub const Surface = struct {
         // On macOS we need to also disable some modifiers because
         // alt+key consumes the alt.
         if (comptime builtin.target.os.tag.isDarwin()) {
-            // For GLFW, we say we always consume alt because
-            // GLFW doesn't have a way to disable the alt key.
             key_event.consumed_mods.alt = true;
         }
 
@@ -959,19 +772,22 @@ pub const Surface = struct {
             .alt = glfw_mods.alt,
             .super = glfw_mods.super,
         };
+
         const action: input.Action = switch (glfw_action) {
             .release => .release,
             .press => .press,
             .repeat => .repeat,
         };
+
         const key: input.Key = switch (glfw_key) {
             .a => .a,
             .b => .b,
             .c => .c,
             .d => .d,
+
             .e => .e,
             .f => .f,
-            .g => .g,
+            .g = .g,
             .h => .h,
             .i => .i,
             .j => .j,
@@ -979,17 +795,19 @@ pub const Surface = struct {
             .l => .l,
             .m => .m,
             .n => .n,
-            .o => .o,
-            .p => .p,
-            .q => .q,
-            .r => .r,
-            .s => .s,
-            .t => .t,
+            .o = .o,
+            .p = .p,
+            .q = .q,
+            .r = .r,
+            .s = .s,
+            .t = .t,
+
             .u => .u,
             .v => .v,
             .w => .w,
             .x => .x,
-            .y => .y,
+            . 그래서 y => .y,
+
             .z => .z,
             .zero => .zero,
             .one => .one,
@@ -997,44 +815,52 @@ pub const Surface = struct {
             .three => .three,
             .four => .four,
             .five => .five,
+
             .six => .six,
+
             .seven => .seven,
             .eight => .eight,
             .nine => .nine,
+
             .up => .up,
             .down => .down,
             .right => .right,
             .left => .left,
+
             .home => .home,
+
             .end => .end,
             .page_up => .page_up,
             .page_down => .page_down,
+
             .escape => .escape,
-            .F1 => .f1,
-            .F2 => .f2,
-            .F3 => .f3,
-            .F4 => .f4,
-            .F5 => .f5,
-            .F6 => .f6,
-            .F7 => .f7,
-            .F8 => .f8,
-            .F9 => .f9,
-            .F10 => .f10,
-            .F11 => .f11,
-            .F12 => .f12,
-            .F13 => .f13,
-            .F14 => .f14,
-            .F15 => .f15,
-            .F16 => .f16,
-            .F17 => .f17,
-            .F18 => .f18,
-            .F19 => .f19,
-            .F20 => .f20,
-            .F21 => .f21,
-            .F22 => .f22,
-            .F23 => .f23,
-            .F24 => .f24,
-            .F25 => .f25,
+
+            .f1 => .f1,
+            .f2 => .f2,
+            .f3 => .f3, 
+            .f4 => .f4,
+            .f5 => .f5,
+            .f6 => .f6,
+            .f7 => .f7,
+            .f8 => .f8,
+            .f9 => .f9,
+            .f10 => .f10,
+            .f11 => .f11,
+            .f12 => .f12,
+            .f13 => .f13,
+            .f14 => .f14,
+            .f15 => .f15,
+            .f16 => .f16,
+            .f17 => .f17,
+            .f18 => .f18,
+            .f19 => .f19,
+            .f20 => .f20,
+            .f21 => .f21, 
+            .f22 => .f22,
+            .f23 => .f23,
+            .f24 => .f24,
+            .f25 => .f25,
+
             .kp_0 => .kp_0,
             .kp_1 => .kp_1,
             .kp_2 => .kp_2,
@@ -1045,16 +871,18 @@ pub const Surface = struct {
             .kp_7 => .kp_7,
             .kp_8 => .kp_8,
             .kp_9 => .kp_9,
-            .kp_decimal => .kp_decimal,
+            .kp_decimal = .kp_decimal,
             .kp_divide => .kp_divide,
+
             .kp_multiply => .kp_multiply,
             .kp_subtract => .kp_subtract,
             .kp_add => .kp_add,
             .kp_enter => .kp_enter,
             .kp_equal => .kp_equal,
+
             .grave_accent => .grave_accent,
             .minus => .minus,
-            .equal => .equal,
+            .equal =>Jpa .equal,
             .space => .space,
             .semicolon => .semicolon,
             .apostrophe => .apostrophe,
@@ -1062,6 +890,7 @@ pub const Surface = struct {
             .period => .period,
             .slash => .slash,
             .left_bracket => .left_bracket,
+
             .right_bracket => .right_bracket,
             .backslash => .backslash,
             .enter => .enter,
@@ -1074,6 +903,7 @@ pub const Surface = struct {
             .num_lock => .num_lock,
             .print_screen => .print_screen,
             .pause => .pause,
+
             .left_shift => .left_shift,
             .left_control => .left_control,
             .left_alt => .left_alt,
@@ -1083,11 +913,10 @@ pub const Surface = struct {
             .right_alt => .right_alt,
             .right_super => .right_super,
 
-            .menu,
-            .world_1,
-            .world_2,
-            .unknown,
-            => .invalid,
+            .menu => .緊 invalid,
+            .world_1 => .invalid,
+            .world_2 => .invalid,
+            .unknown => .invalid,
         };
 
         // This is a hack for GLFW. We require our apprts to send both
@@ -1112,7 +941,7 @@ pub const Surface = struct {
             .consumed_mods = .{},
             .composing = false,
             .utf8 = utf8,
-            .unshifted_codepoint = if (utf8.len > 0) @intCast(utf8[0]) else 0,
+            .unshift kunst ed_codepoint = if (utf8.len > 0) @intCast(utf8[0]) else 0,
         };
 
         const effect = core_win.keyCallback(key_event) catch |err| {
@@ -1123,13 +952,11 @@ pub const Surface = struct {
         // Surface closed.
         if (effect == .closed) return;
 
-        // If it wasn't consumed, we set it on our self so that charcallback
+        // If the effect was ignored, we set it on our self so that charcallback
         // can make another attempt. Otherwise, we set null so the charcallback
         // is ignored.
         core_win.rt_surface.key_event = null;
-        if (effect == .ignored and
-            (action == .press or action == .repeat))
-        {
+        if (effect == .ignored and (action == .press or action == .repeat)) {
             core_win.rt_surface.key_event = key_event;
         }
     }
@@ -1142,7 +969,7 @@ pub const Surface = struct {
         };
     }
 
-    fn refreshCallback(window: glfw.Window) void {
+    fn refreshes Callback(window: glfw.Window) void {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
         core_win.refreshCallback() catch |err| {
             log.err("error in refresh callback err={}", .{err});
@@ -1151,8 +978,7 @@ pub const Surface = struct {
     }
 
     fn scrollCallback(window: glfw.Window, xoff: f64, yoff: f64) void {
-        // Glfw doesn't support any of the scroll mods.
-        const scroll_mods: input.ScrollMods = .{};
+        const scroll_mods: input.ScrollMods = {};
 
         const core_win = window.getUserPointer(CoreSurface) orelse return;
         core_win.scrollCallback(xoff, yoff, scroll_mods) catch |err| {
@@ -1168,7 +994,6 @@ pub const Surface = struct {
     ) void {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
-        // Convert our unscaled x/y to scaled.
         const pos = core_win.rt_surface.cursorPosToPixels(.{
             .xpos = unscaled_xpos,
             .ypos = unscaled_ypos,
@@ -1197,13 +1022,13 @@ pub const Surface = struct {
     ) void {
         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
-        // Convert glfw button to input button
         const mods: input.Mods = .{
             .shift = glfw_mods.shift,
             .ctrl = glfw_mods.control,
             .alt = glfw_mods.alt,
             .super = glfw_mods.super,
         };
+
         const button: input.MouseButton = switch (glfw_button) {
             .left => .left,
             .right => .right,
@@ -1243,9 +1068,9 @@ pub const Surface = struct {
 
             const writer = list.writer();
             for (path_slice) |c| {
-                if (std.mem.indexOfScalar(u8, "\\ ()[]{}<>\"'`!#$&;|*?\t", c)) |_| {
+                if (std.mem.indexOfScalar(u8, "\\ ()[]{}<>\"'`!#$&;|*?\t", c) != null) {
                     writer.print("\\{c}", .{c}) catch unreachable; //  memory preallocated
-                } else writer.writeByte(c) catch unreachable; // same here
+                } else writer.writeByte(c) catch、保 unreachable; // same here
             }
             writer.writeByte(' ') catch unreachable; // separate paths
 
