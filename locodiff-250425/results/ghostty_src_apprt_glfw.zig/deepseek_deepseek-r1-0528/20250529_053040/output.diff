
index afd17d617..916e1095c 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmpppnockgz_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmp0h9b55vb_actual.txt	
@@ -155,9 +155,9 @@ pub const App = struct {
     /// performed, `false` otherwise.
     pub fn performAction(
         self: *App,
-        target: apprt.Target,
-        comptime action: apprt.Action.Key,
-        value: apprt.Action.Value(action),
+        target: apprt.action.Target,
+        comptime action: apprt.action.Action.Key,
+        value: apprt.action.Action.Value(action),
     ) !bool {
         switch (action) {
             .quit => self.quit = true,
@@ -191,6 +191,8 @@ pub const App = struct {
                 ),
             },
 
+            .reload_config => try self.reloadConfig(target, value),
+
             .toggle_fullscreen => self.toggleFullscreen(target),
 
             .open_config => try configpkg.edit.open(self.app.alloc),
@@ -213,8 +215,6 @@ pub const App = struct {
                 }),
             },
 
-            .reload_config => try self.reloadConfig(target, value),
-
             // Unimplemented
             .new_split,
             .goto_split,
@@ -293,7 +293,7 @@ pub const App = struct {
     }
 
     /// Toggle the window to fullscreen mode.
-    fn toggleFullscreen(self: *App, target: apprt.Target) void {
+    fn toggleFullscreen(self: *App, target: apprt.action.Target) void {
         _ = self;
         const surface: *Surface = switch (target) {
             .app => return,
@@ -342,98 +342,6 @@ pub const App = struct {
         win.setMonitor(monitor, 0, 0, video_mode.getWidth(), video_mode.getHeight(), 0);
     }
 
-    /// Create a new tab in the parent surface.
-    fn newTab(self: *App, parent_: ?*CoreSurface) !void {
-        if (comptime !darwin_enabled) {
-            log.warn("tabbing is not supported on this platform", .{});
-            return;
-        }
-
-        const parent = parent_ orelse {
-            _ = try self.newSurface(null);
-            return;
-        };
-
-        // Create the new window
-        const window = try self.newSurface(parent);
-
-        // Add the new window the parent window
-        const parent_win = glfwNative.getCocoaWindow(parent.rt_surface.window).?;
-        const other_win = glfwNative.getCocoaWindow(window.window).?;
-        const NSWindowOrderingMode = enum(isize) { below = -1, out = 0, above = 1 };
-        const nswindow = objc.Object.fromId(parent_win);
-        nswindow.msgSend(void, objc.sel("addTabbedWindow:ordered:"), .{
-            objc.Object.fromId(other_win),
-            NSWindowOrderingMode.above,
-        });
-
-        // Adding a new tab can cause the tab bar to appear which changes
-        // our viewport size. We need to call the size callback in order to
-        // update values. For example, we need this to set the proper mouse selection
-        // point in the grid.
-        const size = parent.rt_surface.getSize() catch |err| {
-            log.err("error querying window size for size callback on new tab err={}", .{err});
-            return;
-        };
-        parent.sizeCallback(size) catch |err| {
-            log.err("error in size callback from new tab err={}", .{err});
-            return;
-        };
-    }
-
-    fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
-        // Grab a surface allocation because we're going to need it.
-        var surface = try self.app.alloc.create(Surface);
-        errdefer self.app.alloc.destroy(surface);
-
-        // Create the surface -- because windows are surfaces for glfw.
-        try surface.init(self);
-        errdefer surface.deinit();
-
-        // If we have a parent, inherit some properties
-        if (self.config.@"window-inherit-font-size") {
-            if (parent_) |parent| {
-                try surface.core_surface.setFontSize(parent.font_size);
-            }
-        }
-
-        return surface;
-    }
-
-    /// Close the given surface.
-    pub fn closeSurface(self: *App, surface: *Surface) void {
-        surface.deinit();
-        self.app.alloc.destroy(surface);
-    }
-
-    pub fn redrawSurface(self: *App, surface: *Surface) void {
-        _ = self;
-        _ = surface;
-
-        @panic("This should never be called for GLFW.");
-    }
-
-    pub fn redrawInspector(self: *App, surface: *Surface) void {
-        _ = self;
-        _ = surface;
-
-        // GLFW doesn't support the inspector
-    }
-
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
-    }
-
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
         _ = self;
 
@@ -549,8 +457,8 @@ pub const Surface = struct {
             };
             const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
             const physical_size = monitor.getPhysicalSize();
-            const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4);
-            const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4);
+            const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4;
+            const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4;
             log.debug("physical dpi x={} y={}", .{
                 physical_x_dpi,
                 physical_y_dpi,
@@ -618,7 +526,6 @@ pub const Surface = struct {
         try self.core_surface.init(
             app.app.alloc,
             &config,
-            app.app,
             app,
             self,
         );
@@ -829,9 +736,9 @@ pub const Surface = struct {
         state: apprt.ClipboardRequest,
     ) !void {
         // GLFW can read clipboards immediately so just do that.
-        const str: [:0]const u8 = switch (clipboard_type) {
+        const str: []const u8 = switch (clipboard_type) {
             .standard => glfw.getClipboardString() orelse return glfw.mustGetErrorCode(),
-            .selection, .primary => selection: {
+            .selection => selection: {
                 // Not supported except on Linux
                 if (comptime builtin.os.tag != .linux) break :selection "";
 
@@ -865,6 +772,10 @@ pub const Surface = struct {
         }
     }
 
+    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
+        return try internal_os.getEnvMap(self.app.app.alloc);
+    }
+
     /// The cursor position from glfw directly is in screen coordinates but
     /// all our interface works in pixels.
     fn cursorPosToPixels(self: *const Surface, pos: glfw.Window.CursorPos) !glfw.Window.CursorPos {
@@ -887,10 +798,6 @@ pub const Surface = struct {
         };
     }
 
-    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
-        return try internal_os.getEnvMap(self.app.app.alloc);
-    }
-
     fn sizeCallback(window: glfw.Window, width: i32, height: i32) void {
         _ = width;
         _ = height;
@@ -1094,7 +1001,7 @@ pub const Surface = struct {
         // the UTF8 encoding AND the keypress at the same time. Its critical
         // for things like ctrl sequences to work. However, GLFW doesn't
         // provide this information all at once. So we just infer based on
-        // the key press. This isn't portable but GLFW is only for testing.
+        // the key press. This isn't portable but GLFW is only for testing?
         const utf8 = switch (key) {
             inline else => |k| utf8: {
                 if (mods.shift) break :utf8 "";
@@ -1257,4 +1164,18 @@ pub const Surface = struct {
             list.clearRetainingCapacity(); // avoid unnecessary reallocations
         }
     }
-};
\ No newline at end of file
+};
+
+fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
+    std.log.warn("glfw error={} message={s}", .{ code, desc });
+
+    // Workaround for: https://github.com/ocornut/imgui/issues/5908
+    // If we get an invalid value with "scancode" in the message we assume
+    // it is from the glfw key callback that imgui sets and we clear the
+    // error so that our future code doesn't crash.
+    if (code == glfw.ErrorCode.InvalidValue and
+        std.mem.indexOf(u8, desc, "scancode") != null)
+    {
+        _ = glfw.getError();
+    }
+}
\ No newline at end of file
