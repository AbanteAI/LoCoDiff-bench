--- ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_glfw.zig_extracted.txt (actual)@@ -191,9 +191,9 @@                 ),
             },
 
-            .toggle_fullscreen => self.toggleFullscreen(target),
-
             .open_config => try configpkg.edit.open(self.app.alloc),
+
+            .reload_config => try self.reloadConfig(target, value),
 
             .set_title => switch (target) {
                 .app => {},
@@ -212,8 +212,6 @@                     .hidden => false,
                 }),
             },
-
-            .reload_config => try self.reloadConfig(target, value),
 
             // Unimplemented
             .new_split,
@@ -281,6 +279,17 @@         var config = try Config.load(self.app.alloc);
         errdefer config.deinit();
 
+        // If we had configuration errors, then log them.
+        if (!config._diagnostics.empty()) {
+            var buf = std.ArrayList(u8).init(self.app.alloc);
+            defer buf.deinit();
+            for (config._diagnostics.items()) |diag| {
+                try diag.write(buf.writer());
+                log.warn("configuration error: {s}", .{buf.items});
+                buf.clearRetainingCapacity();
+            }
+        }
+
         // Call into our app to update
         switch (target) {
             .app => try self.app.updateConfig(self, &config),
@@ -290,56 +299,6 @@         // Update the existing config, be sure to clean up the old one.
         self.config.deinit();
         self.config = config;
-    }
-
-    /// Toggle the window to fullscreen mode.
-    fn toggleFullscreen(self: *App, target: apprt.Target) void {
-        _ = self;
-        const surface: *Surface = switch (target) {
-            .app => return,
-            .surface => |v| v.rt_surface,
-        };
-        const win = surface.window;
-
-        if (surface.isFullscreen()) {
-            win.setMonitor(
-                null,
-                @intCast(surface.monitor_dims.position_x),
-                @intCast(surface.monitor_dims.position_y),
-                surface.monitor_dims.width,
-                surface.monitor_dims.height,
-                0,
-            );
-            return;
-        }
-
-        const monitor = win.getMonitor() orelse monitor: {
-            log.warn("window had null monitor, getting primary monitor", .{});
-            break :monitor glfw.Monitor.getPrimary() orelse {
-                log.warn("window could not get any monitor. will not perform action", .{});
-                return;
-            };
-        };
-
-        const video_mode = monitor.getVideoMode() orelse {
-            log.warn("failed to get video mode. will not perform action", .{});
-            return;
-        };
-
-        const position = win.getPos();
-        const size = surface.getSize() catch {
-            log.warn("failed to get window size. will not perform fullscreen action", .{});
-            return;
-        };
-
-        surface.monitor_dims = .{
-            .width = size.width,
-            .height = size.height,
-            .position_x = position.x,
-            .position_y = position.y,
-        };
-
-        win.setMonitor(monitor, 0, 0, video_mode.getWidth(), video_mode.getHeight(), 0);
     }
 
     /// Create a new tab in the parent surface.
@@ -402,8 +361,7 @@ 
     /// Close the given surface.
     pub fn closeSurface(self: *App, surface: *Surface) void {
-        surface.deinit();
-        self.app.alloc.destroy(surface);
+        surface.close(false);
     }
 
     pub fn redrawSurface(self: *App, surface: *Surface) void {
@@ -418,20 +376,6 @@         _ = surface;
 
         // GLFW doesn't support the inspector
-    }
-
-    fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
-        std.log.warn("glfw error={} message={s}", .{ code, desc });
-
-        // Workaround for: https://github.com/ocornut/imgui/issues/5908
-        // If we get an invalid value with "scancode" in the message we assume
-        // it is from the glfw key callback that imgui sets and we clear the
-        // error so that our future code doesn't crash.
-        if (code == glfw.ErrorCode.InvalidValue and
-            std.mem.indexOf(u8, desc, "scancode") != null)
-        {
-            _ = glfw.getError();
-        }
     }
 
     pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
@@ -536,8 +480,8 @@         // Setup our
         setInitialWindowPosition(
             win,
-            app.config.@"window-position-x",
-            app.config.@"window-position-y",
+            app.config.@"window-initial-position-x",
+            app.config.@"window-initial-position-y",
         );
 
         // Get our physical DPI - debug only because we don't have a use for
@@ -600,6 +544,7 @@             .cursor = null,
             .core_surface = undefined,
             .monitor_dims = dimensions,
+            .title_text = null,
         };
         errdefer self.* = undefined;
 
@@ -672,7 +617,7 @@     /// Close this surface.
     pub fn close(self: *Surface, processActive: bool) void {
         _ = processActive;
-        self.setShouldClose();
+        self.window.setShouldClose(true);
         self.deinit();
         self.app.app.alloc.destroy(self);
     }
@@ -702,6 +647,13 @@ 
         log.debug("setting initial window position ({},{})", .{ start_position_x, start_position_y });
         win.setPos(.{ .x = start_position_x, .y = start_position_y });
+    }
+
+    /// Set the cell size. Unused by GLFW.
+    pub fn setCellSize(self: *const Surface, width: u32, height: u32) !void {
+        _ = self;
+        _ = width;
+        _ = height;
     }
 
     /// Set the size limits of the window.
@@ -746,17 +698,6 @@         };
     }
 
-    /// Set the flag that notes this window should be closed for the next
-    /// iteration of the event loop.
-    pub fn setShouldClose(self: *Surface) void {
-        self.window.setShouldClose(true);
-    }
-
-    /// Returns true if the window is flagged to close.
-    pub fn shouldClose(self: *const Surface) bool {
-        return self.window.shouldClose();
-    }
-
     /// Set the title of the window.
     fn setTitle(self: *Surface, slice: [:0]const u8) !void {
         if (self.title_text) |t| self.core_surface.alloc.free(t);
@@ -806,9 +747,21 @@         self.cursor = new;
     }
 
+    pub fn mouseOverLink(self: *Surface, uri: ?[]const u8) void {
+        // We don't do anything in GLFW.
+        _ = self;
+        _ = uri;
+    }
+
     /// Set the visibility of the mouse cursor.
     fn setMouseVisibility(self: *Surface, visible: bool) void {
         self.window.setInputModeCursor(if (visible) .normal else .hidden);
+    }
+
+    pub fn updateRendererHealth(self: *const Surface, health: renderer.Health) void {
+        // We don't support this in GLFW.
+        _ = self;
+        _ = health;
     }
 
     pub fn supportsClipboard(
@@ -895,17 +848,18 @@         _ = width;
         _ = height;
 
+        const surface = window.getUserPointer(CoreSurface) orelse return;
+
         // Get the size. We are given a width/height but this is in screen
         // coordinates and we want raw pixels. The core window uses the content
         // scale to scale appropriately.
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        const size = core_win.rt_surface.getSize() catch |err| {
+        const size = surface.rt_surface.getSize() catch |err| {
             log.err("error querying window size for size callback err={}", .{err});
             return;
         };
 
         // Call the primary callback.
-        core_win.sizeCallback(size) catch |err| {
+        surface.sizeCallback(size) catch |err| {
             log.err("error in size callback err={}", .{err});
             return;
         };
