
index afd17d61..a8da840f 100644
--- a/ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected):tmp/tmpxko_8i1g_expected.txt	
+++ b/ghostty_src_apprt_glfw.zig_extracted.txt (actual):tmp/tmp_9ygta2p_actual.txt	
@@ -213,8 +213,6 @@ pub const App = struct {
                 }),
             },
 
-            .reload_config => try self.reloadConfig(target, value),
-
             // Unimplemented
             .new_split,
             .goto_split,
@@ -257,11 +255,6 @@ pub const App = struct {
         return true;
     }
 
-    /// Reload the configuration. This should return the new configuration.
-    /// The old value can be freed immediately at this point assuming a
-    /// successful return.
-    ///
-    /// The returned pointer value is only valid for a stable self pointer.
     fn reloadConfig(
         self: *App,
         target: apprt.action.Target,
@@ -381,25 +374,6 @@ pub const App = struct {
         };
     }
 
-    fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
-        // Grab a surface allocation because we're going to need it.
-        var surface = try self.app.alloc.create(Surface);
-        errdefer self.app.alloc.destroy(surface);
-
-        // Create the surface -- because windows are surfaces for glfw.
-        try surface.init(self);
-        errdefer surface.deinit();
-
-        // If we have a parent, inherit some properties
-        if (self.config.@"window-inherit-font-size") {
-            if (parent_) |parent| {
-                try surface.core_surface.setFontSize(parent.font_size);
-            }
-        }
-
-        return surface;
-    }
-
     /// Close the given surface.
     pub fn closeSurface(self: *App, surface: *Surface) void {
         surface.deinit();
@@ -503,12 +477,6 @@ pub const Surface = struct {
     /// A core surface
     core_surface: CoreSurface,
 
-    /// This is the key event that was processed in keyCallback. This is only
-    /// non-null if the event was NOT consumed in keyCallback. This lets us
-    /// know in charCallback whether we should populate it and call it again.
-    /// (GLFW guarantees that charCallback is called after keyCallback).
-    key_event: ?input.KeyEvent = null,
-
     /// The monitor dimensions so we can toggle fullscreen on and off.
     monitor_dims: MonitorDimensions,
 
@@ -517,6 +485,12 @@ pub const Surface = struct {
     /// surface.
     title_text: ?[:0]const u8 = null,
 
+    /// This is the key event that was processed in keyCallback. This is only
+    /// non-null if the event was NOT consumed. This lets us know if it should
+    /// be handled by the charCallback handler that gets called next.
+    /// (GLFW guarantees that charCallback is called after keyCallback).
+    key_event: ?input.KeyEvent = null,
+
     pub const Options = struct {};
 
     /// Initialize the surface into the given self pointer. This gives a
@@ -677,6 +651,17 @@ pub const Surface = struct {
         self.app.app.alloc.destroy(self);
     }
 
+    /// Set the initial window position. This is called exactly once at
+    /// surface initialization time. This may be called before "self"
+    /// is fully initialized.
+    fn setInitialWindowPosition(win: glfw.Window, x: ?i16, y: ?i16) void {
+        const start_position_x = x orelse return;
+        const start_position_y = y orelse return;
+
+        log.debug("setting initial window position ({},{})", .{ start_position_x, start_position_y });
+        win.setPos(.{ .x = start_position_x, .y = start_position_y });
+    }
+
     /// Set the initial window size. This is called exactly once at
     /// surface initialization time. This may be called before "self"
     /// is fully initialized.
@@ -693,17 +678,6 @@ pub const Surface = struct {
         });
     }
 
-    /// Set the initial window position. This is called exactly once at
-    /// surface initialization time. This may be called before "self"
-    /// is fully initialized.
-    fn setInitialWindowPosition(win: glfw.Window, x: ?i16, y: ?i16) void {
-        const start_position_x = x orelse return;
-        const start_position_y = y orelse return;
-
-        log.debug("setting initial window position ({},{})", .{ start_position_x, start_position_y });
-        win.setPos(.{ .x = start_position_x, .y = start_position_y });
-    }
-
     /// Set the size limits of the window.
     /// Note: this interface is not good, we should redo it if we plan
     /// to use this more. i.e. you can't set max width but no max height,
@@ -843,418 +817,4 @@ pub const Surface = struct {
 
         // Complete our request. We always allow unsafe because we don't
         // want to deal with user confirmation in this runtime.
-        try self.core_surface.completeClipboardRequest(state, str, true);
-    }
-
-    /// Set the clipboard.
-    pub fn setClipboardString(
-        self: *const Surface,
-        val: [:0]const u8,
-        clipboard_type: apprt.Clipboard,
-        confirm: bool,
-    ) !void {
-        _ = confirm;
-        _ = self;
-        switch (clipboard_type) {
-            .standard => glfw.setClipboardString(val),
-            .selection, .primary => {
-                // Not supported except on Linux
-                if (comptime builtin.os.tag != .linux) return;
-                glfwNative.setX11SelectionString(val.ptr);
-            },
-        }
-    }
-
-    /// The cursor position from glfw directly is in screen coordinates but
-    /// all our interface works in pixels.
-    fn cursorPosToPixels(self: *const Surface, pos: glfw.Window.CursorPos) !glfw.Window.CursorPos {
-        // The cursor position is in screen coordinates but we
-        // want it in pixels. we need to get both the size of the
-        // window in both to get the ratio to make the conversion.
-        const size = self.window.getSize();
-        const fb_size = self.window.getFramebufferSize();
-
-        // If our framebuffer and screen are the same, then there is no scaling
-        // happening and we can short-circuit by returning the pos as-is.
-        if (fb_size.width == size.width and fb_size.height == size.height)
-            return pos;
-
-        const x_scale = @as(f64, @floatFromInt(fb_size.width)) / @as(f64, @floatFromInt(size.width));
-        const y_scale = @as(f64, @floatFromInt(fb_size.height)) / @as(f64, @floatFromInt(size.height));
-        return .{
-            .xpos = pos.xpos * x_scale,
-            .ypos = pos.ypos * y_scale,
-        };
-    }
-
-    pub fn defaultTermioEnv(self: *Surface) !std.process.EnvMap {
-        return try internal_os.getEnvMap(self.app.app.alloc);
-    }
-
-    fn sizeCallback(window: glfw.Window, width: i32, height: i32) void {
-        _ = width;
-        _ = height;
-
-        // Get the size. We are given a width/height but this is in screen
-        // coordinates and we want raw pixels. The core window uses the content
-        // scale to scale appropriately.
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        const size = core_win.rt_surface.getSize() catch |err| {
-            log.err("error querying window size for size callback err={}", .{err});
-            return;
-        };
-
-        // Call the primary callback.
-        core_win.sizeCallback(size) catch |err| {
-            log.err("error in size callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn charCallback(window: glfw.Window, codepoint: u21) void {
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-
-        // We need a key event in order to process the charcallback. If it
-        // isn't set then the key event was consumed.
-        var key_event = core_win.rt_surface.key_event orelse return;
-        core_win.rt_surface.key_event = null;
-
-        // Populate the utf8 value for the event
-        var buf: [4]u8 = undefined;
-        const len = std.unicode.utf8Encode(codepoint, &buf) catch |err| {
-            log.err("error encoding codepoint={} err={}", .{ codepoint, err });
-            return;
-        };
-        key_event.utf8 = buf[0..len];
-
-        // On macOS we need to also disable some modifiers because
-        // alt+key consumes the alt.
-        if (comptime builtin.target.os.tag.isDarwin()) {
-            // For GLFW, we say we always consume alt because
-            // GLFW doesn't have a way to disable the alt key.
-            key_event.consumed_mods.alt = true;
-        }
-
-        _ = core_win.keyCallback(key_event) catch |err| {
-            log.err("error in key callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn keyCallback(
-        window: glfw.Window,
-        glfw_key: glfw.Key,
-        scancode: i32,
-        glfw_action: glfw.Action,
-        glfw_mods: glfw.Mods,
-    ) void {
-        _ = scancode;
-
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-
-        // Convert our glfw types into our input types
-        const mods: input.Mods = .{
-            .shift = glfw_mods.shift,
-            .ctrl = glfw_mods.control,
-            .alt = glfw_mods.alt,
-            .super = glfw_mods.super,
-        };
-        const action: input.Action = switch (glfw_action) {
-            .release => .release,
-            .press => .press,
-            .repeat => .repeat,
-        };
-        const key: input.Key = switch (glfw_key) {
-            .a => .a,
-            .b => .b,
-            .c => .c,
-            .d => .d,
-            .e => .e,
-            .f => .f,
-            .g => .g,
-            .h => .h,
-            .i => .i,
-            .j => .j,
-            .k => .k,
-            .l => .l,
-            .m => .m,
-            .n => .n,
-            .o => .o,
-            .p => .p,
-            .q => .q,
-            .r => .r,
-            .s => .s,
-            .t => .t,
-            .u => .u,
-            .v => .v,
-            .w => .w,
-            .x => .x,
-            .y => .y,
-            .z => .z,
-            .zero => .zero,
-            .one => .one,
-            .two => .two,
-            .three => .three,
-            .four => .four,
-            .five => .five,
-            .six => .six,
-            .seven => .seven,
-            .eight => .eight,
-            .nine => .nine,
-            .up => .up,
-            .down => .down,
-            .right => .right,
-            .left => .left,
-            .home => .home,
-            .end => .end,
-            .page_up => .page_up,
-            .page_down => .page_down,
-            .escape => .escape,
-            .F1 => .f1,
-            .F2 => .f2,
-            .F3 => .f3,
-            .F4 => .f4,
-            .F5 => .f5,
-            .F6 => .f6,
-            .F7 => .f7,
-            .F8 => .f8,
-            .F9 => .f9,
-            .F10 => .f10,
-            .F11 => .f11,
-            .F12 => .f12,
-            .F13 => .f13,
-            .F14 => .f14,
-            .F15 => .f15,
-            .F16 => .f16,
-            .F17 => .f17,
-            .F18 => .f18,
-            .F19 => .f19,
-            .F20 => .f20,
-            .F21 => .f21,
-            .F22 => .f22,
-            .F23 => .f23,
-            .F24 => .f24,
-            .F25 => .f25,
-            .kp_0 => .kp_0,
-            .kp_1 => .kp_1,
-            .kp_2 => .kp_2,
-            .kp_3 => .kp_3,
-            .kp_4 => .kp_4,
-            .kp_5 => .kp_5,
-            .kp_6 => .kp_6,
-            .kp_7 => .kp_7,
-            .kp_8 => .kp_8,
-            .kp_9 => .kp_9,
-            .kp_decimal => .kp_decimal,
-            .kp_divide => .kp_divide,
-            .kp_multiply => .kp_multiply,
-            .kp_subtract => .kp_subtract,
-            .kp_add => .kp_add,
-            .kp_enter => .kp_enter,
-            .kp_equal => .kp_equal,
-            .grave_accent => .grave_accent,
-            .minus => .minus,
-            .equal => .equal,
-            .space => .space,
-            .semicolon => .semicolon,
-            .apostrophe => .apostrophe,
-            .comma => .comma,
-            .period => .period,
-            .slash => .slash,
-            .left_bracket => .left_bracket,
-            .right_bracket => .right_bracket,
-            .backslash => .backslash,
-            .enter => .enter,
-            .tab => .tab,
-            .backspace => .backspace,
-            .insert => .insert,
-            .delete => .delete,
-            .caps_lock => .caps_lock,
-            .scroll_lock => .scroll_lock,
-            .num_lock => .num_lock,
-            .print_screen => .print_screen,
-            .pause => .pause,
-            .left_shift => .left_shift,
-            .left_control => .left_control,
-            .left_alt => .left_alt,
-            .left_super => .left_super,
-            .right_shift => .right_shift,
-            .right_control => .right_control,
-            .right_alt => .right_alt,
-            .right_super => .right_super,
-
-            .menu,
-            .world_1,
-            .world_2,
-            .unknown,
-            => .invalid,
-        };
-
-        // This is a hack for GLFW. We require our apprts to send both
-        // the UTF8 encoding AND the keypress at the same time. Its critical
-        // for things like ctrl sequences to work. However, GLFW doesn't
-        // provide this information all at once. So we just infer based on
-        // the key press. This isn't portable but GLFW is only for testing.
-        const utf8 = switch (key) {
-            inline else => |k| utf8: {
-                if (mods.shift) break :utf8 "";
-                const cp = k.codepoint() orelse break :utf8 "";
-                const byte = std.math.cast(u8, cp) orelse break :utf8 "";
-                break :utf8 &.{byte};
-            },
-        };
-
-        const key_event: input.KeyEvent = .{
-            .action = action,
-            .key = key,
-            .physical_key = key,
-            .mods = mods,
-            .consumed_mods = .{},
-            .composing = false,
-            .utf8 = utf8,
-            .unshifted_codepoint = if (utf8.len > 0) @intCast(utf8[0]) else 0,
-        };
-
-        const effect = core_win.keyCallback(key_event) catch |err| {
-            log.err("error in key callback err={}", .{err});
-            return;
-        };
-
-        // Surface closed.
-        if (effect == .closed) return;
-
-        // If it wasn't consumed, we set it on our self so that charcallback
-        // can make another attempt. Otherwise, we set null so the charcallback
-        // is ignored.
-        core_win.rt_surface.key_event = null;
-        if (effect == .ignored and
-            (action == .press or action == .repeat))
-        {
-            core_win.rt_surface.key_event = key_event;
-        }
-    }
-
-    fn focusCallback(window: glfw.Window, focused: bool) void {
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        core_win.focusCallback(focused) catch |err| {
-            log.err("error in focus callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn refreshCallback(window: glfw.Window) void {
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        core_win.refreshCallback() catch |err| {
-            log.err("error in refresh callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn scrollCallback(window: glfw.Window, xoff: f64, yoff: f64) void {
-        // Glfw doesn't support any of the scroll mods.
-        const scroll_mods: input.ScrollMods = .{};
-
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-        core_win.scrollCallback(xoff, yoff, scroll_mods) catch |err| {
-            log.err("error in scroll callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn cursorPosCallback(
-        window: glfw.Window,
-        unscaled_xpos: f64,
-        unscaled_ypos: f64,
-    ) void {
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-
-        // Convert our unscaled x/y to scaled.
-        const pos = core_win.rt_surface.cursorPosToPixels(.{
-            .xpos = unscaled_xpos,
-            .ypos = unscaled_ypos,
-        }) catch |err| {
-            log.err(
-                "error converting cursor pos to scaled pixels in cursor pos callback err={}",
-                .{err},
-            );
-            return;
-        };
-
-        core_win.cursorPosCallback(.{
-            .x = @floatCast(pos.xpos),
-            .y = @floatCast(pos.ypos),
-        }, null) catch |err| {
-            log.err("error in cursor pos callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn mouseButtonCallback(
-        window: glfw.Window,
-        glfw_button: glfw.MouseButton,
-        glfw_action: glfw.Action,
-        glfw_mods: glfw.Mods,
-    ) void {
-        const core_win = window.getUserPointer(CoreSurface) orelse return;
-
-        // Convert glfw button to input button
-        const mods: input.Mods = .{
-            .shift = glfw_mods.shift,
-            .ctrl = glfw_mods.control,
-            .alt = glfw_mods.alt,
-            .super = glfw_mods.super,
-        };
-        const button: input.MouseButton = switch (glfw_button) {
-            .left => .left,
-            .right => .right,
-            .middle => .middle,
-            .four => .four,
-            .five => .five,
-            .six => .six,
-            .seven => .seven,
-            .eight => .eight,
-        };
-        const action: input.MouseButtonState = switch (glfw_action) {
-            .press => .press,
-            .release => .release,
-            else => unreachable,
-        };
-
-        _ = core_win.mouseButtonCallback(action, button, mods) catch |err| {
-            log.err("error in scroll callback err={}", .{err});
-            return;
-        };
-    }
-
-    fn dropCallback(window: glfw.Window, paths: [][*:0]const u8) void {
-        const surface = window.getUserPointer(CoreSurface) orelse return;
-
-        var list = std.ArrayList(u8).init(surface.alloc);
-        defer list.deinit();
-
-        for (paths) |path| {
-            const path_slice = std.mem.span(path);
-
-            // preallocate worst case of escaping every char + space
-            list.ensureTotalCapacity(path_slice.len * 2 + 1) catch |err| {
-                log.err("error in drop callback err={}", .{err});
-                return;
-            };
-
-            const writer = list.writer();
-            for (path_slice) |c| {
-                if (std.mem.indexOfScalar(u8, "\\ ()[]{}<>\"'`!#$&;|*?\t", c)) |_| {
-                    writer.print("\\{c}", .{c}) catch unreachable; //  memory preallocated
-                } else writer.writeByte(c) catch unreachable; // same here
-            }
-            writer.writeByte(' ') catch unreachable; // separate paths
-
-            surface.textCallback(list.items) catch |err| {
-                log.err("error in drop callback err={}", .{err});
-                return;
-            };
-
-            list.clearRetainingCapacity(); // avoid unnecessary reallocations
-        }
-    }
-};
\ No newline at end of file
+        try self.core_surface.completeClipboardRequest(state
\ No newline at end of file
