--- ghostty_src_apprt_glfw.zig_expectedoutput.txt (expected)+++ ghostty_src_apprt_glfw.zig_extracted.txt (actual)@@ -342,45 +342,6 @@         win.setMonitor(monitor, 0, 0, video_mode.getWidth(), video_mode.getHeight(), 0);
     }
 
-    /// Create a new tab in the parent surface.
-    fn newTab(self: *App, parent_: ?*CoreSurface) !void {
-        if (comptime !darwin_enabled) {
-            log.warn("tabbing is not supported on this platform", .{});
-            return;
-        }
-
-        const parent = parent_ orelse {
-            _ = try self.newSurface(null);
-            return;
-        };
-
-        // Create the new window
-        const window = try self.newSurface(parent);
-
-        // Add the new window the parent window
-        const parent_win = glfwNative.getCocoaWindow(parent.rt_surface.window).?;
-        const other_win = glfwNative.getCocoaWindow(window.window).?;
-        const NSWindowOrderingMode = enum(isize) { below = -1, out = 0, above = 1 };
-        const nswindow = objc.Object.fromId(parent_win);
-        nswindow.msgSend(void, objc.sel("addTabbedWindow:ordered:"), .{
-            objc.Object.fromId(other_win),
-            NSWindowOrderingMode.above,
-        });
-
-        // Adding a new tab can cause the tab bar to appear which changes
-        // our viewport size. We need to call the size callback in order to
-        // update values. For example, we need this to set the proper mouse selection
-        // point in the grid.
-        const size = parent.rt_surface.getSize() catch |err| {
-            log.err("error querying window size for size callback on new tab err={}", .{err});
-            return;
-        };
-        parent.sizeCallback(size) catch |err| {
-            log.err("error in size callback from new tab err={}", .{err});
-            return;
-        };
-    }
-
     fn newSurface(self: *App, parent_: ?*CoreSurface) !*Surface {
         // Grab a surface allocation because we're going to need it.
         var surface = try self.app.alloc.create(Surface);
@@ -418,6 +379,13 @@         _ = surface;
 
         // GLFW doesn't support the inspector
+    }
+
+    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
+        _ = self;
+
+        // Not supported by glfw
+        return .unknown;
     }
 
     fn glfwErrorCallback(code: glfw.ErrorCode, desc: [:0]const u8) void {
@@ -432,13 +400,6 @@         {
             _ = glfw.getError();
         }
-    }
-
-    pub fn keyboardLayout(self: *const App) input.KeyboardLayout {
-        _ = self;
-
-        // Not supported by glfw
-        return .unknown;
     }
 
     /// Mac-specific settings. This is only enabled when the target is
@@ -547,8 +508,8 @@                 log.warn("window had null monitor, getting primary monitor", .{});
                 break :monitor glfw.Monitor.getPrimary().?;
             };
+            const physical_size = monitor.getPhysicalSize();
             const video_mode = monitor.getVideoMode() orelse return glfw.mustGetErrorCode();
-            const physical_size = monitor.getPhysicalSize();
             const physical_x_dpi = @as(f32, @floatFromInt(video_mode.getWidth())) / (@as(f32, @floatFromInt(physical_size.width_mm)) / 25.4);
             const physical_y_dpi = @as(f32, @floatFromInt(video_mode.getHeight())) / (@as(f32, @floatFromInt(physical_size.height_mm)) / 25.4);
             log.debug("physical dpi x={} y={}", .{
@@ -582,17 +543,10 @@         win.setMouseButtonCallback(mouseButtonCallback);
         win.setDropCallback(dropCallback);
 
-        const dimensions: MonitorDimensions = dimensions: {
-            const pos = win.getPos();
-            const size = win.getFramebufferSize();
-            break :dimensions .{
-                .width = size.width,
-                .height = size.height,
-                .position_x = pos.x,
-                .position_y = pos.y,
-            };
-        };
-
+        const pos = win.getPos();
+        const size = win.getFramebufferSize();
+
+        const dimensions = .{ .width = size.width, .height = size.height, .position_x = pos.x, .position_y = pos.y };
         // Build our result
         self.* = .{
             .app = app,
@@ -953,12 +907,7 @@         const core_win = window.getUserPointer(CoreSurface) orelse return;
 
         // Convert our glfw types into our input types
-        const mods: input.Mods = .{
-            .shift = glfw_mods.shift,
-            .ctrl = glfw_mods.control,
-            .alt = glfw_mods.alt,
-            .super = glfw_mods.super,
-        };
+        const mods: input.Mods = @bitCast(glfw_mods);
         const action: input.Action = switch (glfw_action) {
             .release => .release,
             .press => .press,
