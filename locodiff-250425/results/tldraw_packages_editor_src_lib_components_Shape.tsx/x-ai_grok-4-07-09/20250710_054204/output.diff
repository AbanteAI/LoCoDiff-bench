
index 2c7cd6150..8a24d4fb5 100644
--- a/tldraw_packages_editor_src_lib_components_Shape.tsx_expectedoutput.txt (expected):tmp/tmpwb_kyapa_expected.txt	
+++ b/tldraw_packages_editor_src_lib_components_Shape.tsx_extracted.txt (actual):tmp/tmpa62lcomm_actual.txt	
@@ -12,7 +12,7 @@ import { OptionalErrorBoundary } from './ErrorBoundary'
 /*
 This component renders shapes on the canvas. There are two stages: positioning
 and styling the shape's container using CSS, and then rendering the shape's 
-JSX using its shape util's render method. Rendering the "inside" of a shape is
+JSX using its shape util's component method. Rendering the "inside" of a shape is
 more expensive than positioning it or changing its color, so we use memo
 to wrap the inner shape and only re-render it when the shape's props change. 
 
@@ -99,11 +99,15 @@ export const Shape = memo(function Shape({
 				prev.width = width
 				prev.height = height
 			}
+
+			if (bounds.x !== prev.x || bounds.y !== prev.y) {
+				prev.x = bounds.x
+				prev.y = bounds.y
+			}
 		},
 		[editor]
 	)
 
-	// This stuff changes pretty infrequently, so we can change them together
 	useLayoutEffect(() => {
 		const container = containerRef.current
 		const bgContainer = bgContainerRef.current
@@ -121,7 +125,7 @@ export const Shape = memo(function Shape({
 		'set display',
 		() => {
 			const shape = editor.getShape(id)
-			if (!shape) return // probably the shape was just deleted
+			if (!shape) return
 
 			const culledShapes = editor.getCulledShapes()
 			const isCulled = culledShapes.has(id)
@@ -133,6 +137,7 @@ export const Shape = memo(function Shape({
 		},
 		[editor]
 	)
+
 	const annotateError = useCallback(
 		(error: any) => editor.annotateError(error, { origin: 'shape', willCrashApp: false }),
 		[editor]
@@ -177,10 +182,7 @@ export const InnerShape = memo(
 	function InnerShape<T extends TLShape>({ shape, util }: { shape: T; util: ShapeUtil<T> }) {
 		return useStateTracking(
 			'InnerShape:' + shape.type,
-			() =>
-				// always fetch the latest shape from the store even if the props/meta have not changed, to avoid
-				// calling the render method with stale data.
-				util.component(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
+			() => util.component(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
 			[util, shape.id]
 		)
 	},
@@ -200,10 +202,7 @@ export const InnerShapeBackground = memo(
 	}) {
 		return useStateTracking(
 			'InnerShape:' + shape.type,
-			() =>
-				// always fetch the latest shape from the store even if the props/meta have not changed, to avoid
-				// calling the render method with stale data.
-				util.backgroundComponent?.(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
+			() => util.backgroundComponent?.(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
 			[util, shape.id]
 		)
 	},
