
index 2c7cd6150..703f8db3d 100644
--- a/tldraw_packages_editor_src_lib_components_Shape.tsx_expectedoutput.txt (expected):tmp/tmpcxi43cqw_expected.txt	
+++ b/tldraw_packages_editor_src_lib_components_Shape.tsx_extracted.txt (actual):tmp/tmpoen4hfa3_actual.txt	
@@ -1,7 +1,7 @@
 import { react } from '@tldraw/state'
 import { useQuickReactor, useStateTracking } from '@tldraw/state-react'
 import { TLShape, TLShapeId } from '@tldraw/tlschema'
-import { memo, useCallback, useEffect, useLayoutEffect, useRef } from 'react'
+import { memo, useCallback, useEffect, useRef } from 'react'
 import { ShapeUtil } from '../editor/shapes/ShapeUtil'
 import { useEditor } from '../hooks/useEditor'
 import { useEditorComponents } from '../hooks/useEditorComponents'
@@ -54,8 +54,6 @@ export const Shape = memo(function Shape({
 		clipPath: 'none',
 		width: 0,
 		height: 0,
-		x: 0,
-		y: 0,
 		isCulled: false,
 	})
 
@@ -103,18 +101,18 @@ export const Shape = memo(function Shape({
 		[editor]
 	)
 
-	// This stuff changes pretty infrequently, so we can change them together
+	// Set the opacity and z-index of the container when they change
 	useLayoutEffect(() => {
 		const container = containerRef.current
 		const bgContainer = bgContainerRef.current
 
 		// Opacity
-		setStyleProperty(container, 'opacity', opacity)
-		setStyleProperty(bgContainer, 'opacity', opacity)
+		setStyleProperty(container, 'opacity', String(opacity))
+		setStyleProperty(bgContainer, 'opacity', String(opacity))
 
 		// Z-Index
-		setStyleProperty(container, 'z-index', index)
-		setStyleProperty(bgContainer, 'z-index', backgroundIndex)
+		setStyleProperty(container, 'z-index', String(index))
+		setStyleProperty(bgContainer, 'z-index', String(backgroundIndex))
 	}, [opacity, index, backgroundIndex])
 
 	useQuickReactor(
@@ -133,6 +131,7 @@ export const Shape = memo(function Shape({
 		},
 		[editor]
 	)
+
 	const annotateError = useCallback(
 		(error: any) => editor.annotateError(error, { origin: 'shape', willCrashApp: false }),
 		[editor]
