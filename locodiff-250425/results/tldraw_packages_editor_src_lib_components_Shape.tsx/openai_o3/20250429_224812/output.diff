
index 2c7cd615..d894426c 100644
--- a/tldraw_packages_editor_src_lib_components_Shape.tsx_expectedoutput.txt (expected):tmp/tmpo_7hd3gs_expected.txt	
+++ b/tldraw_packages_editor_src_lib_components_Shape.tsx_extracted.txt (actual):tmp/tmpssff4rip_actual.txt	
@@ -12,9 +12,9 @@ import { OptionalErrorBoundary } from './ErrorBoundary'
 /*
 This component renders shapes on the canvas. There are two stages: positioning
 and styling the shape's container using CSS, and then rendering the shape's 
-JSX using its shape util's render method. Rendering the "inside" of a shape is
-more expensive than positioning it or changing its color, so we use memo
-to wrap the inner shape and only re-render it when the shape's props change. 
+JSX using its shape util's component method. Rendering the "inside" of a shape
+is more expensive than positioning it or changing its color, so we use memo
+to wrap the inner shape and only re-render it when the shape's props change.
 
 The shape also receives props for its index and opacity. The index is used to
 determine the z-index of the shape, and the opacity is used to set the shape's
@@ -42,6 +42,7 @@ export const Shape = memo(function Shape({
 	const containerRef = useRef<HTMLDivElement>(null)
 	const bgContainerRef = useRef<HTMLDivElement>(null)
 
+	// Load any fonts required by the shape
 	useEffect(() => {
 		return react('load fonts', () => {
 			const fonts = editor.fonts.getShapeFontFaces(id)
@@ -59,11 +60,12 @@ export const Shape = memo(function Shape({
 		isCulled: false,
 	})
 
+	// Set transform, clip-path, size, etc.
 	useQuickReactor(
 		'set shape stuff',
 		() => {
 			const shape = editor.getShape(id)
-			if (!shape) return // probably the shape was just deleted
+			if (!shape) return
 
 			const prev = memoizedStuffRef.current
 
@@ -76,11 +78,7 @@ export const Shape = memo(function Shape({
 			}
 
 			// Page transform
-			const pageTransform = editor.getShapePageTransform(id)
-			const transform = Mat.toCssString(pageTransform)
-			const bounds = editor.getShapeGeometry(shape).bounds
-
-			// Update if the tranform has changed
+			const transform = Mat.toCssString(editor.getShapePageTransform(id))
 			if (transform !== prev.transform) {
 				setStyleProperty(containerRef.current, 'transform', transform)
 				setStyleProperty(bgContainerRef.current, 'transform', transform)
@@ -88,6 +86,7 @@ export const Shape = memo(function Shape({
 			}
 
 			// Width / Height
+			const bounds = editor.getShapeGeometry(shape).bounds
 			const width = Math.max(bounds.width, 1)
 			const height = Math.max(bounds.height, 1)
 
@@ -103,28 +102,31 @@ export const Shape = memo(function Shape({
 		[editor]
 	)
 
-	// This stuff changes pretty infrequently, so we can change them together
+	// Opacity & z-index â€” update together via layout effect
 	useLayoutEffect(() => {
 		const container = containerRef.current
 		const bgContainer = bgContainerRef.current
+		if (!container || !bgContainer) return
 
 		// Opacity
 		setStyleProperty(container, 'opacity', opacity)
 		setStyleProperty(bgContainer, 'opacity', opacity)
 
-		// Z-Index
+		// Z-index
 		setStyleProperty(container, 'z-index', index)
 		setStyleProperty(bgContainer, 'z-index', backgroundIndex)
 	}, [opacity, index, backgroundIndex])
 
+	// Display none if culled
 	useQuickReactor(
 		'set display',
 		() => {
 			const shape = editor.getShape(id)
-			if (!shape) return // probably the shape was just deleted
+			if (!shape) return
 
 			const culledShapes = editor.getCulledShapes()
 			const isCulled = culledShapes.has(id)
+
 			if (isCulled !== memoizedStuffRef.current.isCulled) {
 				setStyleProperty(containerRef.current, 'display', isCulled ? 'none' : 'block')
 				setStyleProperty(bgContainerRef.current, 'display', isCulled ? 'none' : 'block')
@@ -133,12 +135,13 @@ export const Shape = memo(function Shape({
 		},
 		[editor]
 	)
+
 	const annotateError = useCallback(
 		(error: any) => editor.annotateError(error, { origin: 'shape', willCrashApp: false }),
 		[editor]
 	)
 
-	if (!shape) return null
+	if (!editor.getShape(id)) return null
 
 	const isFilledShape = 'fill' in shape.props && shape.props.fill !== 'none'
 
@@ -177,10 +180,7 @@ export const InnerShape = memo(
 	function InnerShape<T extends TLShape>({ shape, util }: { shape: T; util: ShapeUtil<T> }) {
 		return useStateTracking(
 			'InnerShape:' + shape.type,
-			() =>
-				// always fetch the latest shape from the store even if the props/meta have not changed, to avoid
-				// calling the render method with stale data.
-				util.component(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
+			() => util.component(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
 			[util, shape.id]
 		)
 	},
@@ -201,9 +201,9 @@ export const InnerShapeBackground = memo(
 		return useStateTracking(
 			'InnerShape:' + shape.type,
 			() =>
-				// always fetch the latest shape from the store even if the props/meta have not changed, to avoid
-				// calling the render method with stale data.
-				util.backgroundComponent?.(util.editor.store.unsafeGetWithoutCapture(shape.id) as T),
+				util.backgroundComponent?.(
+					util.editor.store.unsafeGetWithoutCapture(shape.id) as T
+				),
 			[util, shape.id]
 		)
 	},
