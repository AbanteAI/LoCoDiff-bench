--- aider_tests_basic_test_exceptions.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_exceptions.py_extracted.txt (actual)@@ -1,18 +1,15 @@ from aider.exceptions import ExInfo, LiteLLMExceptions
-
 
 def test_litellm_exceptions_load():
     """Test that LiteLLMExceptions loads without errors"""
     ex = LiteLLMExceptions()
     assert len(ex.exceptions) > 0
 
-
 def test_exceptions_tuple():
     """Test that exceptions_tuple returns a non-empty tuple"""
     ex = LiteLLMExceptions()
     assert isinstance(ex.exceptions_tuple(), tuple)
     assert len(ex.exceptions_tuple()) > 0
-
 
 def test_get_ex_info():
     """Test get_ex_info returns correct ExInfo"""
@@ -41,17 +38,17 @@     assert ex_info.retry is None
     assert ex_info.description is None
 
-
 def test_rate_limit_error():
     """Test specific handling of RateLimitError"""
     ex = LiteLLMExceptions()
     from litellm import RateLimitError
 
-    rate_error = RateLimitError(message="Rate limit exceeded", llm_provider="openai", model="gpt-4")
+    rate_error = RateLimitError(
+        message="Rate limit exceeded", llm_provider="openai", model="gpt-4"
+    )
     ex_info = ex.get_ex_info(rate_error)
     assert ex_info.retry is True
     assert "rate limited" in ex_info.description.lower()
-
 
 def test_context_window_error():
     """Test specific handling of ContextWindowExceededError"""
@@ -63,7 +60,6 @@     )
     ex_info = ex.get_ex_info(ctx_error)
     assert ex_info.retry is False
-
 
 def test_openrouter_error():
     """Test specific handling of OpenRouter API errors"""
