--- qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_extracted.txt (actual)@@ -6,18 +6,16 @@ use common::types::PointOffsetType;
 use parking_lot::RwLock;
 use rocksdb::DB;
-use serde::{Deserialize, Serialize};
-use serde_json::Value;
 
 use super::immutable_text_index::ImmutableFullTextIndex;
 use super::inverted_index::{Document, InvertedIndex, ParsedQuery, TokenId};
 use super::mmap_text_index::{FullTextMmapIndexBuilder, MmapFullTextIndex};
 use super::mutable_text_index::MutableFullTextIndex;
 use super::tokenizers::Tokenizer;
-use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
 use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
+use crate::common::Flusher;
 use crate::data_types::index::TextIndexParams;
 use crate::index::field_index::{
     CardinalityEstimation, FieldIndexBuilderTrait, PayloadBlockCondition, PayloadFieldIndex,
@@ -125,18 +123,6 @@         }
     }
 
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        match self {
-            Self::Mutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Immutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Mmap(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-        }
-    }
-
     fn estimate_cardinality(
         &self,
         query: &ParsedQuery,
@@ -191,35 +177,30 @@         }
     }
 
-    pub(super) fn store_key(id: PointOffsetType) -> Vec<u8> {
-        bincode::serialize(&id).unwrap()
-    }
-
-    pub(super) fn restore_key(data: &[u8]) -> PointOffsetType {
-        bincode::deserialize(data).unwrap()
-    }
-
-    pub(super) fn serialize_document_tokens(tokens: BTreeSet<String>) -> OperationResult<Vec<u8>> {
-        #[derive(Serialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        let doc = StoredDocument { tokens };
-        serde_cbor::to_vec(&doc).map_err(|e| {
-            OperationError::service_error(format!("Failed to serialize document: {e}"))
-        })
-    }
-
-    pub(super) fn deserialize_document(data: &[u8]) -> OperationResult<BTreeSet<String>> {
-        #[derive(Deserialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        serde_cbor::from_slice::<StoredDocument>(data)
-            .map_err(|e| {
-                OperationError::service_error(format!("Failed to deserialize document: {e}"))
-            })
-            .map(|doc| doc.tokens)
+    pub fn is_on_disk(&self) -> bool {
+        match self {
+            FullTextIndex::Mutable(_) => false,
+            FullTextIndex::Immutable(_) => false,
+            FullTextIndex::Mmap(index) => index.is_on_disk(),
+        }
+    }
+
+    pub fn populate(&self) -> OperationResult<()> {
+        match self {
+            FullTextIndex::Mutable(_) => {}   // Not a mmap
+            FullTextIndex::Immutable(_) => {} // Not a mmap
+            FullTextIndex::Mmap(index) => index.populate()?,
+        }
+        Ok(())
+    }
+
+    pub fn clear_cache(&self) -> OperationResult<()> {
+        match self {
+            FullTextIndex::Mutable(_) => {}   // Not a mmap
+            FullTextIndex::Immutable(_) => {} // Not a mmap
+            FullTextIndex::Mmap(index) => index.clear_cache()?,
+        }
+        Ok(())
     }
 
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
@@ -265,35 +246,6 @@         let parsed_query = self.parse_query(query, hw_counter);
         self.filter(parsed_query, hw_counter)
     }
-
-    pub fn is_on_disk(&self) -> bool {
-        match self {
-            FullTextIndex::Mutable(_) => false,
-            FullTextIndex::Immutable(_) => false,
-            FullTextIndex::Mmap(index) => index.is_on_disk(),
-        }
-    }
-
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
-            FullTextIndex::Mmap(index) => index.populate()?,
-        }
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
-            FullTextIndex::Mmap(index) => index.clear_cache()?,
-        }
-        Ok(())
-    }
 }
 
 pub struct FullTextIndexBuilder(FullTextIndex);
@@ -421,6 +373,10 @@         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        self.payload_blocks(threshold, key)
+        match self {
+            Self::Mutable(index) => index.inverted_index.payload_blocks(threshold, key),
+            Self::Immutable(index) => index.inverted_index.payload_blocks(threshold, key),
+            Self::Mmap(index) => index.inverted_index.payload_blocks(threshold, key),
+        }
     }
 }