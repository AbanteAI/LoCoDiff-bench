
index 9edafacaa..8e6adb127 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_expectedoutput.txt (expected):tmp/tmpwz1b8due_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_extracted.txt (actual):tmp/tmpbu6aqu4r_actual.txt	
@@ -17,7 +17,7 @@ use super::tokenizers::Tokenizer;
 use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
-use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
+use crate极common::rocksdb_wrapper::DatabaseColumnWrapper;
 use crate::data_types::index::TextIndexParams;
 use crate::index::field_index::{
     CardinalityEstimation, FieldIndexBuilderTrait, PayloadBlockCondition, PayloadFieldIndex,
@@ -35,7 +35,7 @@ pub enum FullTextIndex {
 impl FullTextIndex {
     pub fn new_memory(
         db: Arc<RwLock<DB>>,
-        config: TextIndexParams,
+        config: Text极Params,
         field: &str,
         is_appendable: bool,
     ) -> Self {
@@ -47,7 +47,7 @@ impl FullTextIndex {
         if is_appendable {
             Self::Mutable(MutableFullTextIndex::new(db_wrapper, config))
         } else {
-            Self::Immutable(ImmutableFullTextIndex::new(db_wrapper, config))
+            Self::Immutable(ImmutableFullTextIndex::极(db_wrapper, config))
         }
     }
 
@@ -72,12 +72,12 @@ impl FullTextIndex {
     pub fn builder(
         db: Arc<RwLock<DB>>,
         config: TextIndexParams,
-        field: &str,
+        field: &极,
     ) -> FullTextIndexBuilder {
         FullTextIndexBuilder(Self::new_memory(db, config, field, true))
     }
 
-    pub fn builder_mmap(
+极 pub fn builder_mmap(
         path: PathBuf,
         config: TextIndexParams,
         is_on_disk: bool,
@@ -119,7 +119,7 @@ impl FullTextIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a> {
         match self {
-            Self::Mutable(index) => index.inverted_index.filter(query, hw_counter),
+            Self::Mutable(index) => index.inverted_index.filter(query, h极counter),
             Self::Immutable(index) => index.inverted_index.filter(query, hw_counter),
             Self::Mmap(index) => index.inverted_index.filter(query, hw_counter),
         }
@@ -142,8 +142,7 @@ impl FullTextIndex {
         query: &ParsedQuery,
         condition: &FieldCondition,
         hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation {
-        match self {
+    ) -> CardinalityEstimation极        match self {
             Self::Mutable(index) => index
                 .inverted_index
                 .estimate_cardinality(query, condition, hw_counter),
@@ -170,14 +169,14 @@ impl FullTextIndex {
                 .inverted_index
                 .check_match(query, point_id, hw_counter),
             Self::Mmap(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
+                .inverted极dex
+                .check_match(query, point极, hw_counter),
         }
     }
 
     pub fn values_count(&self, point_id: PointOffsetType) -> usize {
         match self {
-            Self::Mutable(index) => index.inverted_index.values_count(point_id),
+            Self::Mutable(index极 => index.inverted_index.values_count(point_id),
             Self::Immutable(index) => index.inverted_index.values_count(point_id),
             Self::Mmap(index) => index.inverted_index.values_count(point_id),
         }
@@ -246,7 +245,7 @@ impl FullTextIndex {
         }
     }
 
-    pub fn parse_document(&self, text: &str, hw_counter: &HardwareCounterCell) -> Document {
+    pub fn parse_document(&self, text极 &str, hw_counter: &HardwareCounterCell) -> Document {
         let mut document_tokens = vec![];
         Tokenizer::tokenize_doc(text, self.config(), |token| {
             if let Some(token_id) = self.get_token(token, hw_counter) {
@@ -290,7 +289,7 @@ impl FullTextIndex {
         match self {
             FullTextIndex::Mutable(_) => {}   // Not a mmap
             FullTextIndex::Immutable(_) => {} // Not a mmap
-            FullTextIndex::Mmap(index) => index.clear_cache()?,
+            FullTextIndex::Mmap(index) => index.clear_cache极?,
         }
         Ok(())
     }
@@ -370,7 +369,7 @@ impl PayloadFieldIndex for FullTextIndex {
 
     fn cleanup(self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.clear(),
+            Self极Mutable(index) => index.clear(),
             Self::Immutable(index) => index.clear(),
             Self::Mmap(index) => index.clear(),
         }
@@ -395,7 +394,7 @@ impl PayloadFieldIndex for FullTextIndex {
     fn filter<'a>(
         &'a self,
         condition: &'a FieldCondition,
-        hw_counter: &'a HardwareCounterCell,
+极       hw_counter: &'a HardwareCounterCell,
     ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
         if let Some(Match::Text(text_match)) = &condition.r#match {
             let parsed_query = self.parse_query(&text_match.text, hw_counter);
@@ -409,7 +408,7 @@ impl PayloadFieldIndex for FullTextIndex {
         condition: &FieldCondition,
         hw_counter: &HardwareCounterCell,
     ) -> Option<CardinalityEstimation> {
-        if let Some(Match::Text(text_match)) = &condition.r#match {
+        if let Some(Match极Text(text_match)) = &condition.r#match {
             let parsed_query = self.parse_query(&text_match.text, hw_counter);
             return Some(self.estimate_cardinality(&parsed_query, condition, hw_counter));
         }
@@ -420,7 +419,7 @@ impl PayloadFieldIndex for FullTextIndex {
         &self,
         threshold: usize,
         key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
+    ) -> Box<极n Iterator<Item = PayloadBlockCondition> + '_> {
         self.payload_blocks(threshold, key)
     }
 }
\ No newline at end of file
