--- qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_extracted.txt (actual)@@ -6,6 +6,7 @@ use common::types::PointOffsetType;
 use parking_lot::RwLock;
 use rocksdb::DB;
+
 use serde::{Deserialize, Serialize};
 use serde_json::Value;
 
@@ -125,18 +126,6 @@         }
     }
 
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        match self {
-            Self::Mutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Immutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Mmap(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-        }
-    }
-
     fn estimate_cardinality(
         &self,
         query: &ParsedQuery,
@@ -144,15 +133,15 @@         hw_counter: &HardwareCounterCell,
     ) -> CardinalityEstimation {
         match self {
-            Self::Mutable(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
-            Self::Immutable(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
-            Self::Mmap(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
+            Self::Mutable(index) => {
+                index.inverted_index.estimate_cardinality(query, condition, hw_counter)
+            }
+            Self::Immutable(index) => {
+                index.inverted_index.estimate_cardinality(query, condition, hw_counter)
+            }
+            Self::Mmap(index) => {
+                index.inverted_index.estimate_cardinality(query, condition, hw_counter)
+            }
         }
     }
 
@@ -163,63 +152,16 @@         hw_counter: &HardwareCounterCell,
     ) -> bool {
         match self {
-            Self::Mutable(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-            Self::Immutable(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-            Self::Mmap(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-        }
-    }
-
-    pub fn values_count(&self, point_id: PointOffsetType) -> usize {
-        match self {
-            Self::Mutable(index) => index.inverted_index.values_count(point_id),
-            Self::Immutable(index) => index.inverted_index.values_count(point_id),
-            Self::Mmap(index) => index.inverted_index.values_count(point_id),
-        }
-    }
-
-    pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
-        match self {
-            Self::Mutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Immutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Mmap(index) => index.inverted_index.values_is_empty(point_id),
-        }
-    }
-
-    pub(super) fn store_key(id: PointOffsetType) -> Vec<u8> {
-        bincode::serialize(&id).unwrap()
-    }
-
-    pub(super) fn restore_key(data: &[u8]) -> PointOffsetType {
-        bincode::deserialize(data).unwrap()
-    }
-
-    pub(super) fn serialize_document_tokens(tokens: BTreeSet<String>) -> OperationResult<Vec<u8>> {
-        #[derive(Serialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        let doc = StoredDocument { tokens };
-        serde_cbor::to_vec(&doc).map_err(|e| {
-            OperationError::service_error(format!("Failed to serialize document: {e}"))
-        })
-    }
-
-    pub(super) fn deserialize_document(data: &[u8]) -> OperationResult<BTreeSet<String>> {
-        #[derive(Deserialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        serde_cbor::from_slice::<StoredDocument>(data)
-            .map_err(|e| {
-                OperationError::service_error(format!("Failed to deserialize document: {e}"))
-            })
-            .map(|doc| doc.tokens)
+            Self::Mutable(index) => {
+                index.inverted_index.check_match(query, point_id, hw_counter)
+            }
+            Self::Immutable(index) => {
+                index.inverted_index.check_match(query, point_id, hw_counter)
+            }
+            Self::Mmap(index) => {
+                index.inverted_index.check_match(query, point_id, hw_counter)
+            }
+        }
     }
 
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
@@ -236,7 +178,11 @@         }
     }
 
-    pub fn parse_query(&self, text: &str, hw_counter: &HardwareCounterCell) -> ParsedQuery {
+    pub fn parse_query(
+        &self,
+        text: &str,
+        hw_counter: &HardwareCounterCell,
+    ) -> ParsedQuery {
         let mut tokens = HashSet::new();
         Tokenizer::tokenize_query(text, self.config(), |token| {
             tokens.insert(self.get_token(token, hw_counter));
@@ -246,7 +192,11 @@         }
     }
 
-    pub fn parse_document(&self, text: &str, hw_counter: &HardwareCounterCell) -> Document {
+    pub fn parse_document(
+        &self,
+        text: &str,
+        hw_counter: &HardwareCounterCell,
+    ) -> Document {
         let mut document_tokens = vec![];
         Tokenizer::tokenize_doc(text, self.config(), |token| {
             if let Some(token_id) = self.get_token(token, hw_counter) {
@@ -278,8 +228,8 @@     /// Block until all pages are populated.
     pub fn populate(&self) -> OperationResult<()> {
         match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
+            FullTextIndex::Mutable(_) => {}
+            FullTextIndex::Immutable(_) => {}
             FullTextIndex::Mmap(index) => index.populate()?,
         }
         Ok(())
@@ -288,11 +238,42 @@     /// Drop disk cache.
     pub fn clear_cache(&self) -> OperationResult<()> {
         match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
+            FullTextIndex::Mutable(_) => {}
+            FullTextIndex::Immutable(_) => {}
             FullTextIndex::Mmap(index) => index.clear_cache()?,
         }
         Ok(())
+    }
+
+    pub(super) fn store_key(id: PointOffsetType) -> Vec<u8> {
+        bincode::serialize(&id).unwrap()
+    }
+
+    pub(super) fn restore_key(data: &[u8]) -> PointOffsetType {
+        bincode::deserialize(data).unwrap()
+    }
+
+    pub(super) fn serialize_document_tokens(
+        tokens: BTreeSet<String>,
+    ) -> OperationResult<Vec<u8>> {
+        #[derive(Serialize)]
+        struct StoredDocument {
+            tokens: BTreeSet<String>,
+        }
+        let doc = StoredDocument { tokens };
+        serde_cbor::to_vec(&doc).map_err(OperationError::service_error)
+    }
+
+    pub(super) fn deserialize_document(
+        data: &[u8],
+    ) -> OperationResult<BTreeSet<String>> {
+        #[derive(Deserialize)]
+        struct StoredDocument {
+            tokens: BTreeSet<String>,
+        }
+        serde_cbor::from_slice::<StoredDocument>(data)
+            .map_err(OperationError::service_error)
+            .map(|doc| doc.tokens)
     }
 }
 
@@ -362,33 +343,33 @@ 
     fn load(&mut self) -> OperationResult<bool> {
         match self {
-            Self::Mutable(index) => index.load_from_db(),
-            Self::Immutable(index) => index.load_from_db(),
-            Self::Mmap(_index) => Ok(true), // mmap index is always loaded
+            FullTextIndex::Mutable(index) => index.load_from_db(),
+            FullTextIndex::Immutable(index) => index.load_from_db(),
+            FullTextIndex::Mmap(_) => Ok(true),
         }
     }
 
     fn cleanup(self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.clear(),
-            Self::Immutable(index) => index.clear(),
-            Self::Mmap(index) => index.clear(),
+            FullTextIndex::Mutable(index) => index.clear(),
+            FullTextIndex::Immutable(index) => index.clear(),
+            FullTextIndex::Mmap(index) => index.clear(),
         }
     }
 
     fn flusher(&self) -> Flusher {
         match self {
-            Self::Mutable(index) => index.db_wrapper.flusher(),
-            Self::Immutable(index) => index.db_wrapper.flusher(),
-            Self::Mmap(index) => index.flusher(),
+            FullTextIndex::Mutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Immutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Mmap(index) => index.flusher(),
         }
     }
 
     fn files(&self) -> Vec<PathBuf> {
         match self {
-            Self::Mutable(_) => vec![],
-            Self::Immutable(_) => vec![],
-            Self::Mmap(index) => index.files(),
+            FullTextIndex::Mutable(_) => vec![],
+            FullTextIndex::Immutable(_) => vec![],
+            FullTextIndex::Mmap(index) => index.files(),
         }
     }
 
