--- qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_expectedoutput.txt (expected)+++ qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_extracted.txt (actual)@@ -9,20 +9,17 @@ use serde::{Deserialize, Serialize};
 use serde_json::Value;
 
-use super::immutable_text_index::ImmutableFullTextIndex;
-use super::inverted_index::{Document, InvertedIndex, ParsedQuery, TokenId};
-use super::mmap_text_index::{FullTextMmapIndexBuilder, MmapFullTextIndex};
-use super::mutable_text_index::MutableFullTextIndex;
-use super::tokenizers::Tokenizer;
-use crate::common::Flusher;
 use crate::common::operation_error::{OperationError, OperationResult};
 use crate::common::rocksdb_buffered_delete_wrapper::DatabaseColumnScheduledDeleteWrapper;
 use crate::common::rocksdb_wrapper::DatabaseColumnWrapper;
+use crate::common::Flusher;
 use crate::data_types::index::TextIndexParams;
-use crate::index::field_index::{
-    CardinalityEstimation, FieldIndexBuilderTrait, PayloadBlockCondition, PayloadFieldIndex,
-    ValueIndexer,
-};
+use crate::index::field_index::full_text_index::inverted_index::{Document, InvertedIndex, ParsedQuery, TokenId};
+use crate::index::field_index::full_text_index::immutable_text_index::ImmutableFullTextIndex;
+use crate::index::field_index::full_text_index::mutable_text_index::MutableFullTextIndex;
+use crate::index::field_index::full_text_index::mmap_text_index::{FullTextMmapIndexBuilder, MmapFullTextIndex};
+use crate::index::field_index::full_text_index::tokenizers::Tokenizer;
+use crate::index::field_index::{CardinalityEstimation, FieldIndexBuilderTrait, PayloadBlockCondition, PayloadFieldIndex, ValueIndexer};
 use crate::telemetry::PayloadIndexTelemetry;
 use crate::types::{FieldCondition, Match, PayloadKeyType};
 
@@ -45,9 +42,9 @@             &store_cf_name,
         ));
         if is_appendable {
-            Self::Mutable(MutableFullTextIndex::new(db_wrapper, config))
+            FullTextIndex::Mutable(MutableFullTextIndex::new(db_wrapper, config))
         } else {
-            Self::Immutable(ImmutableFullTextIndex::new(db_wrapper, config))
+            FullTextIndex::Immutable(ImmutableFullTextIndex::new(db_wrapper, config))
         }
     }
 
@@ -56,16 +53,14 @@         config: TextIndexParams,
         is_on_disk: bool,
     ) -> OperationResult<Self> {
-        Ok(Self::Mmap(Box::new(MmapFullTextIndex::open(
-            path, config, is_on_disk,
-        )?)))
+        Ok(FullTextIndex::Mmap(Box::new(MmapFullTextIndex::open(path, config, is_on_disk)?)))
     }
 
     pub fn init(&mut self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.init(),
-            Self::Immutable(index) => index.init(),
-            Self::Mmap(_) => unreachable!("not applicable for mmap immutable index"),
+            FullTextIndex::Mutable(index) => index.init(),
+            FullTextIndex::Immutable(index) => index.init(),
+            FullTextIndex::Mmap(_) => unreachable!("not applicable for mmap immutable index"),
         }
     }
 
@@ -74,7 +69,7 @@         config: TextIndexParams,
         field: &str,
     ) -> FullTextIndexBuilder {
-        FullTextIndexBuilder(Self::new_memory(db, config, field, true))
+        FullTextIndexBuilder(FullTextIndex::new_memory(db, config, field, true))
     }
 
     pub fn builder_mmap(
@@ -91,25 +86,25 @@ 
     fn config(&self) -> &TextIndexParams {
         match self {
-            Self::Mutable(index) => &index.config,
-            Self::Immutable(index) => &index.config,
-            Self::Mmap(index) => &index.config,
+            FullTextIndex::Mutable(index) => &index.config,
+            FullTextIndex::Immutable(index) => &index.config,
+            FullTextIndex::Mmap(index) => &index.config,
         }
     }
 
     fn points_count(&self) -> usize {
         match self {
-            Self::Mutable(index) => index.inverted_index.points_count(),
-            Self::Immutable(index) => index.inverted_index.points_count(),
-            Self::Mmap(index) => index.inverted_index.points_count(),
+            FullTextIndex::Mutable(index) => index.inverted_index.points_count(),
+            FullTextIndex::Immutable(index) => index.inverted_index.points_count(),
+            FullTextIndex::Mmap(index) => index.inverted_index.points_count(),
         }
     }
 
     fn get_token(&self, token: &str, hw_counter: &HardwareCounterCell) -> Option<TokenId> {
         match self {
-            Self::Mutable(index) => index.inverted_index.get_token_id(token, hw_counter),
-            Self::Immutable(index) => index.inverted_index.get_token_id(token, hw_counter),
-            Self::Mmap(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Mutable(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Immutable(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Mmap(index) => index.inverted_index.get_token_id(token, hw_counter),
         }
     }
 
@@ -119,40 +114,9 @@         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a> {
         match self {
-            Self::Mutable(index) => index.inverted_index.filter(query, hw_counter),
-            Self::Immutable(index) => index.inverted_index.filter(query, hw_counter),
-            Self::Mmap(index) => index.inverted_index.filter(query, hw_counter),
-        }
-    }
-
-    fn payload_blocks(
-        &self,
-        threshold: usize,
-        key: PayloadKeyType,
-    ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        match self {
-            Self::Mutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Immutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Mmap(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-        }
-    }
-
-    fn estimate_cardinality(
-        &self,
-        query: &ParsedQuery,
-        condition: &FieldCondition,
-        hw_counter: &HardwareCounterCell,
-    ) -> CardinalityEstimation {
-        match self {
-            Self::Mutable(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
-            Self::Immutable(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
-            Self::Mmap(index) => index
-                .inverted_index
-                .estimate_cardinality(query, condition, hw_counter),
+            FullTextIndex::Mutable(index) => index.inverted_index.filter(query, hw_counter),
+            FullTextIndex::Immutable(index) => index.inverted_index.filter(query, hw_counter),
+            FullTextIndex::Mmap(index) => index.inverted_index.filter(query, hw_counter),
         }
     }
 
@@ -163,63 +127,56 @@         hw_counter: &HardwareCounterCell,
     ) -> bool {
         match self {
-            Self::Mutable(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-            Self::Immutable(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-            Self::Mmap(index) => index
-                .inverted_index
-                .check_match(query, point_id, hw_counter),
-        }
+            FullTextIndex::Mutable(index) => index.inverted_index.check_match(query, point_id, hw_counter),
+            FullTextIndex::Immutable(index) => index.inverted_index.check_match(query, point_id, hw_counter),
+            FullTextIndex::Mmap(index) => index.inverted_index.check_match(query, point_id, hw_counter),
+        }
+    }
+
+    pub fn parse_query(&self, text: &str, hw_counter: &HardwareCounterCell) -> ParsedQuery {
+        let mut tokens = HashSet::new();
+        Tokenizer::tokenize_query(text, self.config(), |token| {
+            tokens.insert(self.get_token(token, hw_counter));
+        });
+        ParsedQuery {
+            tokens: tokens.into_iter().collect(),
+        }
+    }
+
+    pub fn parse_document(&self, text: &str, hw_counter: &HardwareCounterCell) -> Document {
+        let mut document_tokens = vec![];
+        Tokenizer::tokenize_doc(text, self.config(), |token| {
+            if let Some(token_id) = self.get_token(token, hw_counter) {
+                document_tokens.push(token_id);
+            }
+        });
+        Document::new(document_tokens)
+    }
+
+    #[cfg(test)]
+    pub fn query<'a>(
+        &'a self,
+        query: &'a str,
+        hw_counter: &'a HardwareCounterCell,
+    ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a> {
+        let parsed_query = self.parse_query(query, hw_counter);
+        self.filter(parsed_query, hw_counter)
     }
 
     pub fn values_count(&self, point_id: PointOffsetType) -> usize {
         match self {
-            Self::Mutable(index) => index.inverted_index.values_count(point_id),
-            Self::Immutable(index) => index.inverted_index.values_count(point_id),
-            Self::Mmap(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Mutable(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Immutable(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Mmap(index) => index.inverted_index.values_count(point_id),
         }
     }
 
     pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
         match self {
-            Self::Mutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Immutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Mmap(index) => index.inverted_index.values_is_empty(point_id),
-        }
-    }
-
-    pub(super) fn store_key(id: PointOffsetType) -> Vec<u8> {
-        bincode::serialize(&id).unwrap()
-    }
-
-    pub(super) fn restore_key(data: &[u8]) -> PointOffsetType {
-        bincode::deserialize(data).unwrap()
-    }
-
-    pub(super) fn serialize_document_tokens(tokens: BTreeSet<String>) -> OperationResult<Vec<u8>> {
-        #[derive(Serialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        let doc = StoredDocument { tokens };
-        serde_cbor::to_vec(&doc).map_err(|e| {
-            OperationError::service_error(format!("Failed to serialize document: {e}"))
-        })
-    }
-
-    pub(super) fn deserialize_document(data: &[u8]) -> OperationResult<BTreeSet<String>> {
-        #[derive(Deserialize)]
-        struct StoredDocument {
-            tokens: BTreeSet<String>,
-        }
-        serde_cbor::from_slice::<StoredDocument>(data)
-            .map_err(|e| {
-                OperationError::service_error(format!("Failed to deserialize document: {e}"))
-            })
-            .map(|doc| doc.tokens)
+            FullTextIndex::Mutable(index) => index.inverted_index.values_is_empty(point_id),
+            FullTextIndex::Immutable(index) => index.inverted_index.values_is_empty(point_id),
+            FullTextIndex::Mmap(index) => index.inverted_index.values_is_empty(point_id),
+        }
     }
 
     pub fn get_telemetry_data(&self) -> PayloadIndexTelemetry {
@@ -236,63 +193,39 @@         }
     }
 
-    pub fn parse_query(&self, text: &str, hw_counter: &HardwareCounterCell) -> ParsedQuery {
-        let mut tokens = HashSet::new();
-        Tokenizer::tokenize_query(text, self.config(), |token| {
-            tokens.insert(self.get_token(token, hw_counter));
-        });
-        ParsedQuery {
-            tokens: tokens.into_iter().collect(),
-        }
-    }
-
-    pub fn parse_document(&self, text: &str, hw_counter: &HardwareCounterCell) -> Document {
-        let mut document_tokens = vec![];
-        Tokenizer::tokenize_doc(text, self.config(), |token| {
-            if let Some(token_id) = self.get_token(token, hw_counter) {
-                document_tokens.push(token_id);
-            }
-        });
-        Document::new(document_tokens)
-    }
-
-    #[cfg(test)]
-    pub fn query<'a>(
-        &'a self,
-        query: &'a str,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a> {
-        let parsed_query = self.parse_query(query, hw_counter);
-        self.filter(parsed_query, hw_counter)
-    }
-
-    pub fn is_on_disk(&self) -> bool {
-        match self {
-            FullTextIndex::Mutable(_) => false,
-            FullTextIndex::Immutable(_) => false,
-            FullTextIndex::Mmap(index) => index.is_on_disk(),
-        }
-    }
-
-    /// Populate all pages in the mmap.
-    /// Block until all pages are populated.
-    pub fn populate(&self) -> OperationResult<()> {
-        match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
-            FullTextIndex::Mmap(index) => index.populate()?,
-        }
-        Ok(())
-    }
-
-    /// Drop disk cache.
-    pub fn clear_cache(&self) -> OperationResult<()> {
-        match self {
-            FullTextIndex::Mutable(_) => {}   // Not a mmap
-            FullTextIndex::Immutable(_) => {} // Not a mmap
-            FullTextIndex::Mmap(index) => index.clear_cache()?,
-        }
-        Ok(())
+    pub fn store_key(id: PointOffsetType) -> Vec<u8> {
+        bincode::serialize(&id).unwrap()
+    }
+
+    pub fn restore_key(data: &[u8]) -> PointOffsetType {
+        bincode::deserialize(data).unwrap()
+    }
+
+    fn serialize_document_tokens(tokens: BTreeSet<String>) -> OperationResult<Vec<u8>> {
+        #[derive(Serialize)]
+        struct StoredDocument {
+            tokens: BTreeSet<String>,
+        }
+        let doc = StoredDocument { tokens };
+        serde_cbor::to_vec(&doc).map_err(|e| OperationError::service_error(format!("Failed to serialize document: {e}")))
+    }
+
+    pub(super) fn deserialize_document(data: &[u8]) -> OperationResult<BTreeSet<String>> {
+        #[derive(Deserialize)]
+        struct StoredDocument {
+            tokens: BTreeSet<String>,
+        }
+        serde_cbor::from_slice::<StoredDocument>(data)
+            .map_err(|e| OperationError::service_error(format!("Failed to deserialize document: {e}")))
+            .map(|doc| doc.tokens)
+    }
+
+    fn db_wrapper(&self) -> &DatabaseColumnScheduledDeleteWrapper {
+        match self {
+            FullTextIndex::Mutable(index) => &index.db_wrapper,
+            FullTextIndex::Immutable(index) => &index.db_wrapper,
+            FullTextIndex::Mmap(index) => &index.db_wrapper,
+        }
     }
 }
 
@@ -329,21 +262,18 @@         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.add_many(idx, values, hw_counter),
-            Self::Immutable(_) => Err(OperationError::service_error(
-                "Cannot add values to immutable text index",
-            )),
-            Self::Mmap(_) => Err(OperationError::service_error(
-                "Cannot add values to mmap text index",
-            )),
+            FullTextIndex::Mutable(index) => index.add_many(idx, values, hw_counter),
+            FullTextIndex::Immutable(_) => Err(OperationError::service_error("Cannot add values to immutable text index")),
+            FullTextIndex::Mmap(_) => Err(OperationError::service_error("Cannot add values to mmap text index")),
         }
     }
 
     fn get_value(value: &Value) -> Option<String> {
         if let Value::String(keyword) = value {
-            return Some(keyword.to_owned());
-        }
-        None
+            Some(keyword.clone())
+        } else {
+            None
+        }
     }
 
     fn remove_point(&mut self, id: PointOffsetType) -> OperationResult<()> {
@@ -362,41 +292,41 @@ 
     fn load(&mut self) -> OperationResult<bool> {
         match self {
-            Self::Mutable(index) => index.load_from_db(),
-            Self::Immutable(index) => index.load_from_db(),
-            Self::Mmap(_index) => Ok(true), // mmap index is always loaded
+            FullTextIndex::Mutable(index) => index.load_from_db(),
+            FullTextIndex::Immutable(index) => index.load_from_db(),
+            FullTextIndex::Mmap(_) => Ok(true),
         }
     }
 
     fn cleanup(self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.clear(),
-            Self::Immutable(index) => index.clear(),
-            Self::Mmap(index) => index.clear(),
+            FullTextIndex::Mutable(index) => index.clear(),
+            FullTextIndex::Immutable(index) => index.clear(),
+            FullTextIndex::Mmap(index) => index.clear(),
         }
     }
 
     fn flusher(&self) -> Flusher {
         match self {
-            Self::Mutable(index) => index.db_wrapper.flusher(),
-            Self::Immutable(index) => index.db_wrapper.flusher(),
-            Self::Mmap(index) => index.flusher(),
+            FullTextIndex::Mutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Immutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Mmap(index) => index.flusher(),
         }
     }
 
     fn files(&self) -> Vec<PathBuf> {
         match self {
-            Self::Mutable(_) => vec![],
-            Self::Immutable(_) => vec![],
-            Self::Mmap(index) => index.files(),
-        }
-    }
-
-    fn filter<'a>(
-        &'a self,
-        condition: &'a FieldCondition,
-        hw_counter: &'a HardwareCounterCell,
-    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + 'a>> {
+            FullTextIndex::Mutable(_) => vec![],
+            FullTextIndex::Immutable(_) => vec![],
+            FullTextIndex::Mmap(index) => index.files(),
+        }
+    }
+
+    fn filter(
+        &self,
+        condition: &FieldCondition,
+        hw_counter: &HardwareCounterCell,
+    ) -> Option<Box<dyn Iterator<Item = PointOffsetType> + '_>> {
         if let Some(Match::Text(text_match)) = &condition.r#match {
             let parsed_query = self.parse_query(&text_match.text, hw_counter);
             return Some(self.filter(parsed_query, hw_counter));
@@ -421,6 +351,10 @@         threshold: usize,
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
-        self.payload_blocks(threshold, key)
+        match self {
+            FullTextIndex::Mutable(index) => index.inverted_index.payload_blocks(threshold, key),
+            FullTextIndex::Immutable(index) => index.inverted_index.payload_blocks(threshold, key),
+            FullTextIndex::Mmap(index) => index.inverted_index.payload_blocks(threshold, key),
+        }
     }
 }