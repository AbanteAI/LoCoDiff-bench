
index 9edafacaa..5f085e16c 100644
--- a/qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_expectedoutput.txt (expected):tmp/tmp3u72iz9c_expected.txt	
+++ b/qdrant_lib_segment_src_index_field_index_full_text_index_text_index.rs_extracted.txt (actual):tmp/tmpzqbhbx8h_actual.txt	
@@ -63,9 +63,9 @@ impl FullTextIndex {
 
     pub fn init(&mut self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.init(),
-            Self::Immutable(index) => index.init(),
-            Self::Mmap(_) => unreachable!("not applicable for mmap immutable index"),
+            FullTextIndex::Mutable(index) => index.init(),
+            FullTextIndex::Immutable(index) => index.init(),
+            FullTextIndex::Mmap(_) => unreachable!("not applicable for mmap immutable index"),
         }
     }
 
@@ -91,25 +91,25 @@ impl FullTextIndex {
 
     fn config(&self) -> &TextIndexParams {
         match self {
-            Self::Mutable(index) => &index.config,
-            Self::Immutable(index) => &index.config,
-            Self::Mmap(index) => &index.config,
+            FullTextIndex::Mutable(index) => &index.config,
+            FullTextIndex::Immutable(index) => &index.config,
+            FullTextIndex::Mmap(index) => &index.config,
         }
     }
 
     fn points_count(&self) -> usize {
         match self {
-            Self::Mutable(index) => index.inverted_index.points_count(),
-            Self::Immutable(index) => index.inverted_index.points_count(),
-            Self::Mmap(index) => index.inverted_index.points_count(),
+            FullTextIndex::Mutable(index) => index.inverted_index.points_count(),
+            FullTextIndex::Immutable(index) => index.inverted_index.points_count(),
+            FullTextIndex::Mmap(index) => index.inverted_index.points_count(),
         }
     }
 
     fn get_token(&self, token: &str, hw_counter: &HardwareCounterCell) -> Option<TokenId> {
         match self {
-            Self::Mutable(index) => index.inverted_index.get_token_id(token, hw_counter),
-            Self::Immutable(index) => index.inverted_index.get_token_id(token, hw_counter),
-            Self::Mmap(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Mutable(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Immutable(index) => index.inverted_index.get_token_id(token, hw_counter),
+            FullTextIndex::Mmap(index) => index.inverted_index.get_token_id(token, hw_counter),
         }
     }
 
@@ -119,9 +119,9 @@ impl FullTextIndex {
         hw_counter: &'a HardwareCounterCell,
     ) -> Box<dyn Iterator<Item = PointOffsetType> + 'a> {
         match self {
-            Self::Mutable(index) => index.inverted_index.filter(query, hw_counter),
-            Self::Immutable(index) => index.inverted_index.filter(query, hw_counter),
-            Self::Mmap(index) => index.inverted_index.filter(query, hw_counter),
+            FullTextIndex::Mutable(index) => index.inverted_index.filter(query, hw_counter),
+            FullTextIndex::Immutable(index) => index.inverted_index.filter(query, hw_counter),
+            FullTextIndex::Mmap(index) => index.inverted_index.filter(query, hw_counter),
         }
     }
 
@@ -131,9 +131,13 @@ impl FullTextIndex {
         key: PayloadKeyType,
     ) -> Box<dyn Iterator<Item = PayloadBlockCondition> + '_> {
         match self {
-            Self::Mutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Immutable(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
-            Self::Mmap(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
+            FullTextIndex::Mutable(index) => {
+                Box::new(index.inverted_index.payload_blocks(threshold, key))
+            }
+            FullTextIndex::Immutable(index) => {
+                Box::new(index.inverted_index.payload_blocks(threshold, key))
+            }
+            FullTextIndex::Mmap(index) => Box::new(index.inverted_index.payload_blocks(threshold, key)),
         }
     }
 
@@ -144,13 +148,13 @@ impl FullTextIndex {
         hw_counter: &HardwareCounterCell,
     ) -> CardinalityEstimation {
         match self {
-            Self::Mutable(index) => index
+            FullTextIndex::Mutable(index) => index
                 .inverted_index
                 .estimate_cardinality(query, condition, hw_counter),
-            Self::Immutable(index) => index
+            FullTextIndex::Immutable(index) => index
                 .inverted_index
                 .estimate_cardinality(query, condition, hw_counter),
-            Self::Mmap(index) => index
+            FullTextIndex::Mmap(index) => index
                 .inverted_index
                 .estimate_cardinality(query, condition, hw_counter),
         }
@@ -163,13 +167,13 @@ impl FullTextIndex {
         hw_counter: &HardwareCounterCell,
     ) -> bool {
         match self {
-            Self::Mutable(index) => index
+            FullTextIndex::Mutable(index) => index
                 .inverted_index
                 .check_match(query, point_id, hw_counter),
-            Self::Immutable(index) => index
+            FullTextIndex::Immutable(index) => index
                 .inverted_index
                 .check_match(query, point_id, hw_counter),
-            Self::Mmap(index) => index
+            FullTextIndex::Mmap(index) => index
                 .inverted_index
                 .check_match(query, point_id, hw_counter),
         }
@@ -177,17 +181,17 @@ impl FullTextIndex {
 
     pub fn values_count(&self, point_id: PointOffsetType) -> usize {
         match self {
-            Self::Mutable(index) => index.inverted_index.values_count(point_id),
-            Self::Immutable(index) => index.inverted_index.values_count(point_id),
-            Self::Mmap(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Mutable(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Immutable(index) => index.inverted_index.values_count(point_id),
+            FullTextIndex::Mmap(index) => index.inverted_index.values_count(point_id),
         }
     }
 
     pub fn values_is_empty(&self, point_id: PointOffsetType) -> bool {
         match self {
-            Self::Mutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Immutable(index) => index.inverted_index.values_is_empty(point_id),
-            Self::Mmap(index) => index.inverted_index.values_is_empty(point_id),
+            FullTextIndex::Mutable(index) => index.inverted_index.values_is_empty(point_id),
+            FullTextIndex::Immutable(index) => index.inverted_index.values_is_empty(point_id),
+            FullTextIndex::Mmap(index) => index.inverted_index.values_is_empty(point_id),
         }
     }
 
@@ -329,11 +333,11 @@ impl ValueIndexer for FullTextIndex {
         hw_counter: &HardwareCounterCell,
     ) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.add_many(idx, values, hw_counter),
-            Self::Immutable(_) => Err(OperationError::service_error(
+            FullTextIndex::Mutable(index) => index.add_many(idx, values, hw_counter),
+            FullTextIndex::Immutable(_) => Err(OperationError::service_error(
                 "Cannot add values to immutable text index",
             )),
-            Self::Mmap(_) => Err(OperationError::service_error(
+            FullTextIndex::Mmap(_) => Err(OperationError::service_error(
                 "Cannot add values to mmap text index",
             )),
         }
@@ -362,33 +366,33 @@ impl PayloadFieldIndex for FullTextIndex {
 
     fn load(&mut self) -> OperationResult<bool> {
         match self {
-            Self::Mutable(index) => index.load_from_db(),
-            Self::Immutable(index) => index.load_from_db(),
-            Self::Mmap(_index) => Ok(true), // mmap index is always loaded
+            FullTextIndex::Mutable(index) => index.load_from_db(),
+            FullTextIndex::Immutable(index) => index.load_from_db(),
+            FullTextIndex::Mmap(_index) => Ok(true), // mmap index is always loaded
         }
     }
 
     fn cleanup(self) -> OperationResult<()> {
         match self {
-            Self::Mutable(index) => index.clear(),
-            Self::Immutable(index) => index.clear(),
-            Self::Mmap(index) => index.clear(),
+            FullTextIndex::Mutable(index) => index.clear(),
+            FullTextIndex::Immutable(index) => index.clear(),
+            FullTextIndex::Mmap(index) => index.clear(),
         }
     }
 
     fn flusher(&self) -> Flusher {
         match self {
-            Self::Mutable(index) => index.db_wrapper.flusher(),
-            Self::Immutable(index) => index.db_wrapper.flusher(),
-            Self::Mmap(index) => index.flusher(),
+            FullTextIndex::Mutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Immutable(index) => index.db_wrapper.flusher(),
+            FullTextIndex::Mmap(index) => index.flusher(),
         }
     }
 
     fn files(&self) -> Vec<PathBuf> {
         match self {
-            Self::Mutable(_) => vec![],
-            Self::Immutable(_) => vec![],
-            Self::Mmap(index) => index.files(),
+            FullTextIndex::Mutable(_) => vec![],
+            FullTextIndex::Immutable(_) => vec![],
+            FullTextIndex::Mmap(index) => index.files(),
         }
     }
 
