--- aider_tests_basic_test_io.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_io.py_extracted.txt (actual)@@ -3,26 +3,22 @@ from pathlib import Path
 from unittest.mock import MagicMock, patch
 
-from prompt_toolkit.completion import CompleteEvent
-from prompt_toolkit.document import Document
-
 from aider.dump import dump  # noqa: F401
 from aider.io import AutoCompleter, ConfirmGroup, InputOutput
 from aider.utils import ChdirTemporaryDirectory
-
 
 class TestInputOutput(unittest.TestCase):
     def test_line_endings_validation(self):
         # Test valid line endings
         for ending in ["platform", "lf", "crlf"]:
-            io = InputOutput(line_endings=ending)
+            io = InputOutput(line_endings=ending, fancy_input=False)
             self.assertEqual(
                 io.newline, None if ending == "platform" else "\n" if ending == "lf" else "\r\n"
             )
 
         # Test invalid line endings
         with self.assertRaises(ValueError) as cm:
-            io = InputOutput(line_endings="invalid")
+            io = InputOutput(line_endings="invalid", fancy_input=False)
         self.assertIn("Invalid line_endings value: invalid", str(cm.exception))
         # Check each valid option is in the error message
         self.assertIn("platform", str(cm.exception))
@@ -43,6 +39,7 @@             tool_warning_color="FFA500",
             assistant_output_color="0088ff",
             pretty=True,
+            fancy_input=False,
         )
 
         # Check that # was added to hex colors
@@ -52,13 +49,23 @@         self.assertEqual(io.assistant_output_color, "#0088ff")
 
         # Test with named colors (should be unchanged)
-        io = InputOutput(user_input_color="blue", tool_error_color="red", pretty=True)
+        io = InputOutput(
+            user_input_color="blue",
+            tool_error_color="red",
+            pretty=True,
+            fancy_input=False,
+        )
 
         self.assertEqual(io.user_input_color, "blue")
         self.assertEqual(io.tool_error_color, "red")
 
         # Test with pretty=False (should not modify colors)
-        io = InputOutput(user_input_color="00cc00", tool_error_color="FF2222", pretty=False)
+        io = InputOutput(
+            user_input_color="00cc00",
+            tool_error_color="FF2222",
+            pretty=False,
+            fancy_input=False,
+        )
 
         self.assertIsNone(io.user_input_color)
         self.assertIsNone(io.tool_error_color)
@@ -340,7 +347,6 @@         self.assertEqual(mock_input.call_count, 2)
         self.assertNotIn(("Do you want to proceed?", None), io.never_prompts)
 
-
 class TestInputOutputMultilineMode(unittest.TestCase):
     def setUp(self):
         self.io = InputOutput(fancy_input=True)
@@ -401,25 +407,6 @@         # Test prompt_ask()
         with self.assertRaises(KeyboardInterrupt):
             io.prompt_ask("Test prompt?")
-        self.assertTrue(io.multiline_mode)  # Should be restored
-
-    def test_multiline_mode_restored_after_normal_exit(self):
-        """Test that multiline mode is restored after normal exit"""
-        io = InputOutput(fancy_input=True)
-        io.prompt_session = MagicMock()
-
-        # Start in multiline mode
-        io.multiline_mode = True
-
-        # Mock prompt() to return normally
-        io.prompt_session.prompt.return_value = "y"
-
-        # Test confirm_ask()
-        io.confirm_ask("Test question?")
-        self.assertTrue(io.multiline_mode)  # Should be restored
-
-        # Test prompt_ask()
-        io.prompt_ask("Test prompt?")
         self.assertTrue(io.multiline_mode)  # Should be restored
 
     def test_ensure_hash_prefix(self):
@@ -438,8 +425,8 @@         self.assertEqual(ensure_hash_prefix("#000"), "#000")
         self.assertEqual(ensure_hash_prefix("#123456"), "#123456")
 
-        # Test invalid inputs (should return unchanged)
-        self.assertEqual(ensure_hash_prefix(""), "")
+        # Test invalidinputs (should return unchanged)
+        self лікар.assertEqual(ensure_hash_prefix(""), "")
         self.assertEqual(ensure_hash_prefix(None), None)
         self.assertEqual(ensure_hash_prefix("red"), "red")  # Named color
         self.assertEqual(ensure_hash_prefix("12345"), "12345")  # Wrong length
@@ -450,11 +437,10 @@     def test_tool_output_color_handling(self):
         """Test that tool_output correctly handles hex colors without # prefix"""
         from unittest.mock import patch
-
         from rich.text import Text
 
-        # Create IO with hex color without # for tool_output_color
-        io = InputOutput(tool_output_color="FFA500", pretty=True)
+        # Create IO with hex color without# for tooloutput_color
+        io = InputOutput(tool_output_color="FFA500", pretty=True, fancy=intinput=False)
 
         # Patch console.print to avoid actual printing
         with patch.object(io.console, "print") as mock_print:
@@ -470,7 +456,7 @@             self.assertIn("style", kwargs)
 
         # Test with other hex color
-        io = InputOutput(tool_output_color="00FF00", pretty=True)
+        io = InputOutput(tool_output_color="00FF00", pretty=True, fancy_input=False)
         with patch.object(io.console, "print") as mock_print:
             io.tool_output("Test message")
             mock_print.assert_called_once()
