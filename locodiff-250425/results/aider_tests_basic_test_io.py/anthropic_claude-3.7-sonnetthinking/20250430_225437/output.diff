
index 5eeb482a..0a544a6d 100644
--- a/aider_tests_basic_test_io.py_expectedoutput.txt (expected):tmp/tmpseoznusa_expected.txt	
+++ b/aider_tests_basic_test_io.py_extracted.txt (actual):tmp/tmpy5h0oya2_actual.txt	
@@ -359,29 +359,6 @@ class TestInputOutputMultilineMode(unittest.TestCase):
         self.io.toggle_multiline_mode()
         self.assertFalse(self.io.multiline_mode)
 
-    def test_tool_message_unicode_fallback(self):
-        """Test that Unicode messages are properly converted to ASCII with replacement"""
-        io = InputOutput(pretty=False, fancy_input=False)
-
-        # Create a message with invalid Unicode that can't be encoded in UTF-8
-        # Using a surrogate pair that's invalid in UTF-8
-        invalid_unicode = "Hello \ud800World"
-
-        # Mock console.print to capture the output
-        with patch.object(io.console, "print") as mock_print:
-            # First call will raise UnicodeEncodeError
-            mock_print.side_effect = [UnicodeEncodeError("utf-8", "", 0, 1, "invalid"), None]
-
-            io._tool_message(invalid_unicode)
-
-            # Verify that the message was converted to ASCII with replacement
-            self.assertEqual(mock_print.call_count, 2)
-            args, kwargs = mock_print.call_args
-            converted_message = args[0]
-
-            # The invalid Unicode should be replaced with '?'
-            self.assertEqual(converted_message, "Hello ?World")
-
     def test_multiline_mode_restored_after_interrupt(self):
         """Test that multiline mode is restored after KeyboardInterrupt"""
         io = InputOutput(fancy_input=True)
