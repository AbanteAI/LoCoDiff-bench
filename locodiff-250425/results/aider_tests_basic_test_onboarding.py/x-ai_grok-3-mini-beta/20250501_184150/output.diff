--- aider_tests_basic_test_onboarding.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_onboarding.py_extracted.txt (actual)@@ -18,13 +18,11 @@     try_to_select_default_model,
 )
 
-
 # Mock the Analytics class as it's used in some functions
 class DummyAnalytics:
     def event(self, *args, **kwargs):
         pass
 
-
 # Mock the InputOutput class
 class DummyIO:
     def tool_output(self, *args, **kwargs):
@@ -41,7 +39,6 @@ 
     def offer_url(self, *args, **kwargs):
         pass
-
 
 class TestOnboarding(unittest.TestCase):
     @patch("requests.get")
@@ -286,8 +283,6 @@             f"Error exchanging code for OpenRouter key: {req_exception}"
         )
 
-    # --- Tests for select_default_model ---
-
     @patch("aider.onboarding.try_to_select_default_model", return_value="gpt-4o")
     @patch("aider.onboarding.offer_openrouter_oauth")
     def test_select_default_model_already_specified(self, mock_offer_oauth, mock_try_select):
@@ -363,17 +358,8 @@         self.assertEqual(selected_model, "openrouter/google/gemini-2.5-pro-exp-03-25:free")
         self.assertEqual(mock_try_select.call_count, 2)  # Called before and after oauth
         mock_offer_oauth.assert_called_once_with(io_mock, analytics_mock)
-        # Only one warning is expected: "No LLM model..."
         self.assertEqual(io_mock.tool_warning.call_count, 1)
-        io_mock.tool_warning.assert_called_once_with(
-            "No LLM model was specified and no API keys were provided."
-        )
-        # The second call to try_select finds the model, so the *outer* function logs the usage.
-        # Note: The warning comes from the second call within select_default_model,
-        # not try_select itself.
-        # We verify the final state and model returned.
-
-    # --- Tests for offer_openrouter_oauth ---
+
     @patch("aider.onboarding.start_openrouter_oauth_flow", return_value="new_or_key")
     @patch.dict(os.environ, {}, clear=True)  # Ensure no key exists initially
     def test_offer_openrouter_oauth_confirm_yes_success(self, mock_start_oauth):
@@ -391,8 +377,6 @@         self.assertEqual(os.environ.get("OPENROUTER_API_KEY"), "new_or_key")
         analytics_mock.event.assert_any_call("oauth_flow_initiated", provider="openrouter")
         analytics_mock.event.assert_any_call("oauth_flow_success")
-        # Clean up env var
-        del os.environ["OPENROUTER_API_KEY"]
 
     @patch("aider.onboarding.start_openrouter_oauth_flow", return_value=None)  # OAuth fails
     @patch.dict(os.environ, {}, clear=True)
@@ -431,9 +415,6 @@         mock_start_oauth.assert_not_called()
         analytics_mock.event.assert_not_called()  # No OAuth events if declined
 
-    # --- More complex test for start_openrouter_oauth_flow (simplified) ---
-    # This test focuses on the successful path, mocking heavily
-
 
 if __name__ == "__main__":
     unittest.main()