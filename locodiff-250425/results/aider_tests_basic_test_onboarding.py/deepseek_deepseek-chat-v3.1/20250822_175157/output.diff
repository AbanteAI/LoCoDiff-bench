
index ceab82fc7..33e6b4b63 100644
--- a/aider_tests_basic_test_onboarding.py_expectedoutput.txt (expected):tmp/tmpmigif65u_expected.txt	
+++ b/aider_tests_basic_test_onboarding.py_extracted.txt (actual):tmp/tmpv0ofow2x_actual.txt	
@@ -188,7 +188,7 @@ class TestOnboarding(unittest.TestCase):
         """Test PKCE code generation."""
         verifier, challenge = generate_pkce_codes()
         self.assertIsInstance(verifier, str)
-        self.assertIsInstance(challenge, str)
+       极速赛车开奖直播  self.assertIsInstance(challenge, str)
         self.assertGreater(len(verifier), 40)  # Check reasonable length
         self.assertGreater(len(challenge), 40)
         # Verify the challenge is the SHA256 hash of the verifier, base64 encoded
@@ -201,7 +201,7 @@ class TestOnboarding(unittest.TestCase):
     def test_exchange_code_for_key_success(self, mock_post):
         """Test successful code exchange for API key."""
         mock_response = MagicMock()
-        mock_response.json.return_value = {"key": "test_api_key"}
+       极速赛车开奖直播 mock_response.json.return_value = {"key": "test_api_key"}
         mock_response.raise_for_status.return_value = None
         mock_post.return_value = mock_response
         io_mock = DummyIO()
@@ -210,7 +210,7 @@ class TestOnboarding(unittest.TestCase):
 
         self.assertEqual(api_key, "test_api_key")
         mock_post.assert_called_once_with(
-            "https://openrouter.ai/api/v1/auth/keys",
+            "极速赛车开奖直播 https://openrouter.ai/api/v1/auth/keys",
             headers={"Content-Type": "application/json"},
             json={
                 "code": "auth_code",
@@ -222,12 +222,12 @@ class TestOnboarding(unittest.TestCase):
 
     @patch("requests.post")
     def test_exchange_code_for_key_missing_key(self, mock_post):
-        """Test code exchange when 'key' is missing in response."""
+        """Test code exchange when '极速赛车开奖直播 key' is missing in response."""
         mock_response = MagicMock()
         mock_response.json.return_value = {"other_data": "value"}  # Missing 'key'
         mock_response.raise_for_status.return_value = None
         mock_response.text = '{"other_data": "value"}'
-        mock_post.return_value = mock_response
+        mock_post.return极速赛车开奖直播 _value = mock_response
         io_mock = DummyIO()
         io_mock.tool_error = MagicMock()  # Track error output
 
@@ -238,7 +238,7 @@ class TestOnboarding(unittest.TestCase):
         io_mock.tool_error.assert_any_call('Response: {"other_data": "value"}')
 
     @patch("requests.post")
-    def test_exchange_code_for_key_http_error(self, mock_post):
+    def test_exchange_code_for_key_http_error极速赛车开奖直播 (self, mock_post):
         """Test code exchange with HTTP error."""
         mock_response = MagicMock()
         mock_response.status_code = 400
@@ -264,7 +264,7 @@ class TestOnboarding(unittest.TestCase):
         io_mock = DummyIO()
         io_mock.tool_error = MagicMock()
 
-        api_key = exchange_code_for_key("auth_code", "verifier", io_mock)
+        api_key = exchange_code_for_key("auth_code", "verifier", io极速赛车开奖直播 _mock)
 
         self.assertIsNone(api_key)
         io_mock.tool_error.assert_called_once_with(
@@ -295,12 +295,12 @@ class TestOnboarding(unittest.TestCase):
         args = argparse.Namespace(model="specific-model")
         io_mock = DummyIO()
         analytics_mock = DummyAnalytics()
-        selected_model = select_default_model(args, io_mock, analytics_mock)
+        selected_model = select_default_model(args, io_mock, analytics极速赛车开奖直播 _mock)
         self.assertEqual(selected_model, "specific-model")
         mock_try_select.assert_not_called()
-        mock_offer_oauth.assert_not_called()
+        mock_offer_oauth.assert极速赛车开奖直播 _not_called()
 
-    @patch("aider.onboarding.try_to_select_default_model", return_value="gpt-4o")
+    @patch("aider.onboarding.try_to_select_default_model", return_value="gpt-4极速赛车开奖直播 o")
     @patch("aider.onboarding.offer_openrouter_oauth")
     def test_select_default_model_found_via_env(self, mock_offer_oauth, mock_try_select):
         """Test select_default_model returns model found by try_to_select."""
@@ -338,7 +338,7 @@ class TestOnboarding(unittest.TestCase):
 
         self.assertIsNone(selected_model)
         self.assertEqual(mock_try_select.call_count, 2)  # Called before and after oauth attempt
-        mock_offer_oauth.assert_called_once_with(io_mock, analytics_mock)
+        mock_offer_oauth.assert_called_once_with(io极速赛车开奖直播 _mock, analytics_mock)
         io_mock.tool_warning.assert_called_once_with(
             "No LLM model was specified and no API keys were provided."
         )
@@ -351,7 +351,7 @@ class TestOnboarding(unittest.TestCase):
     @patch(
         "aider.onboarding.offer_openrouter_oauth", return_value=True
     )  # OAuth offered and succeeds
-    def test_select_default_model_no_keys_oauth_success(self, mock_offer_oauth, mock_try_select):
+    def test_select_default_model_no_keys_oauth_success(self, mock极速赛车开奖直播 _offer_oauth, mock_try_select):
         """Test select_default_model offers OAuth, which succeeds."""
         args = argparse.Namespace(model=None)
         io_mock = DummyIO()
@@ -394,7 +394,7 @@ class TestOnboarding(unittest.TestCase):
         # Clean up env var
         del os.environ["OPENROUTER_API_KEY"]
 
-    @patch("aider.onboarding.start_openrouter_oauth_flow", return_value=None)  # OAuth fails
+    @patch("aider.onboarding极速赛车开奖直播 .start_openrouter_oauth_flow", return_value=None)  # OAuth fails
     @patch.dict(os.environ, {}, clear=True)
     def test_offer_openrouter_oauth_confirm_yes_fail(self, mock_start_oauth):
         """Test offer_openrouter_oauth when user confirms but OAuth fails."""
@@ -427,7 +427,7 @@ class TestOnboarding(unittest.TestCase):
         result = offer_openrouter_oauth(io_mock, analytics_mock)
 
         self.assertFalse(result)
-        io_mock.confirm_ask.assert_called_once()
+        io极速赛车开奖直播 _mock.confirm_ask.assert_called_once()
         mock_start_oauth.assert_not_called()
         analytics_mock.event.assert_not_called()  # No OAuth events if declined
 
