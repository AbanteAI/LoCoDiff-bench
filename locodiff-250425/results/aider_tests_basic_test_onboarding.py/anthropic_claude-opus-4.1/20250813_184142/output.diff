
index ceab82fc7..9e5ac565a 100644
--- a/aider_tests_basic_test_onboarding.py_expectedoutput.txt (expected):tmp/tmp16ardcpr_expected.txt	
+++ b/aider_tests_basic_test_onboarding.py_extracted.txt (actual):tmp/tmpwhpgd7me_actual.txt	
@@ -245,195 +245,4 @@ class TestOnboarding(unittest.TestCase):
         mock_response.reason = "Bad Request"
         mock_response.text = '{"error": "invalid_code"}'
         http_error = requests.exceptions.HTTPError(response=mock_response)
-        mock_post.side_effect = http_error
-        io_mock = DummyIO()
-        io_mock.tool_error = MagicMock()
-
-        api_key = exchange_code_for_key("auth_code", "verifier", io_mock)
-
-        self.assertIsNone(api_key)
-        io_mock.tool_error.assert_any_call(
-            "Error exchanging code for OpenRouter key: 400 Bad Request"
-        )
-        io_mock.tool_error.assert_any_call('Response: {"error": "invalid_code"}')
-
-    @patch("requests.post")
-    def test_exchange_code_for_key_timeout(self, mock_post):
-        """Test code exchange with timeout."""
-        mock_post.side_effect = requests.exceptions.Timeout("Timeout")
-        io_mock = DummyIO()
-        io_mock.tool_error = MagicMock()
-
-        api_key = exchange_code_for_key("auth_code", "verifier", io_mock)
-
-        self.assertIsNone(api_key)
-        io_mock.tool_error.assert_called_once_with(
-            "Error: Request to OpenRouter timed out during code exchange."
-        )
-
-    @patch("requests.post")
-    def test_exchange_code_for_key_request_exception(self, mock_post):
-        """Test code exchange with general request exception."""
-        req_exception = requests.exceptions.RequestException("Network Error")
-        mock_post.side_effect = req_exception
-        io_mock = DummyIO()
-        io_mock.tool_error = MagicMock()
-
-        api_key = exchange_code_for_key("auth_code", "verifier", io_mock)
-
-        self.assertIsNone(api_key)
-        io_mock.tool_error.assert_called_once_with(
-            f"Error exchanging code for OpenRouter key: {req_exception}"
-        )
-
-    # --- Tests for select_default_model ---
-
-    @patch("aider.onboarding.try_to_select_default_model", return_value="gpt-4o")
-    @patch("aider.onboarding.offer_openrouter_oauth")
-    def test_select_default_model_already_specified(self, mock_offer_oauth, mock_try_select):
-        """Test select_default_model returns args.model if provided."""
-        args = argparse.Namespace(model="specific-model")
-        io_mock = DummyIO()
-        analytics_mock = DummyAnalytics()
-        selected_model = select_default_model(args, io_mock, analytics_mock)
-        self.assertEqual(selected_model, "specific-model")
-        mock_try_select.assert_not_called()
-        mock_offer_oauth.assert_not_called()
-
-    @patch("aider.onboarding.try_to_select_default_model", return_value="gpt-4o")
-    @patch("aider.onboarding.offer_openrouter_oauth")
-    def test_select_default_model_found_via_env(self, mock_offer_oauth, mock_try_select):
-        """Test select_default_model returns model found by try_to_select."""
-        args = argparse.Namespace(model=None)  # No model specified
-        io_mock = DummyIO()
-        io_mock.tool_warning = MagicMock()  # Track warnings
-        analytics_mock = DummyAnalytics()
-        analytics_mock.event = MagicMock()  # Track events
-
-        selected_model = select_default_model(args, io_mock, analytics_mock)
-
-        self.assertEqual(selected_model, "gpt-4o")
-        mock_try_select.assert_called_once()
-        io_mock.tool_warning.assert_called_once_with(
-            "Using gpt-4o model with API key from environment."
-        )
-        analytics_mock.event.assert_called_once_with("auto_model_selection", model="gpt-4o")
-        mock_offer_oauth.assert_not_called()
-
-    @patch(
-        "aider.onboarding.try_to_select_default_model", side_effect=[None, None]
-    )  # Fails first, fails after oauth attempt
-    @patch(
-        "aider.onboarding.offer_openrouter_oauth", return_value=False
-    )  # OAuth offered but fails/declined
-    def test_select_default_model_no_keys_oauth_fail(self, mock_offer_oauth, mock_try_select):
-        """Test select_default_model offers OAuth when no keys, but OAuth fails."""
-        args = argparse.Namespace(model=None)
-        io_mock = DummyIO()
-        io_mock.tool_warning = MagicMock()
-        io_mock.offer_url = MagicMock()
-        analytics_mock = DummyAnalytics()
-
-        selected_model = select_default_model(args, io_mock, analytics_mock)
-
-        self.assertIsNone(selected_model)
-        self.assertEqual(mock_try_select.call_count, 2)  # Called before and after oauth attempt
-        mock_offer_oauth.assert_called_once_with(io_mock, analytics_mock)
-        io_mock.tool_warning.assert_called_once_with(
-            "No LLM model was specified and no API keys were provided."
-        )
-        io_mock.offer_url.assert_called_once()  # Should offer docs URL
-
-    @patch(
-        "aider.onboarding.try_to_select_default_model",
-        side_effect=[None, "openrouter/google/gemini-2.5-pro-exp-03-25:free"],
-    )  # Fails first, succeeds after oauth
-    @patch(
-        "aider.onboarding.offer_openrouter_oauth", return_value=True
-    )  # OAuth offered and succeeds
-    def test_select_default_model_no_keys_oauth_success(self, mock_offer_oauth, mock_try_select):
-        """Test select_default_model offers OAuth, which succeeds."""
-        args = argparse.Namespace(model=None)
-        io_mock = DummyIO()
-        io_mock.tool_warning = MagicMock()
-        analytics_mock = DummyAnalytics()
-
-        selected_model = select_default_model(args, io_mock, analytics_mock)
-
-        self.assertEqual(selected_model, "openrouter/google/gemini-2.5-pro-exp-03-25:free")
-        self.assertEqual(mock_try_select.call_count, 2)  # Called before and after oauth
-        mock_offer_oauth.assert_called_once_with(io_mock, analytics_mock)
-        # Only one warning is expected: "No LLM model..."
-        self.assertEqual(io_mock.tool_warning.call_count, 1)
-        io_mock.tool_warning.assert_called_once_with(
-            "No LLM model was specified and no API keys were provided."
-        )
-        # The second call to try_select finds the model, so the *outer* function logs the usage.
-        # Note: The warning comes from the second call within select_default_model,
-        # not try_select itself.
-        # We verify the final state and model returned.
-
-    # --- Tests for offer_openrouter_oauth ---
-    @patch("aider.onboarding.start_openrouter_oauth_flow", return_value="new_or_key")
-    @patch.dict(os.environ, {}, clear=True)  # Ensure no key exists initially
-    def test_offer_openrouter_oauth_confirm_yes_success(self, mock_start_oauth):
-        """Test offer_openrouter_oauth when user confirms and OAuth succeeds."""
-        io_mock = DummyIO()
-        io_mock.confirm_ask = MagicMock(return_value=True)  # User says yes
-        analytics_mock = DummyAnalytics()
-        analytics_mock.event = MagicMock()
-
-        result = offer_openrouter_oauth(io_mock, analytics_mock)
-
-        self.assertTrue(result)
-        io_mock.confirm_ask.assert_called_once()
-        mock_start_oauth.assert_called_once_with(io_mock, analytics_mock)
-        self.assertEqual(os.environ.get("OPENROUTER_API_KEY"), "new_or_key")
-        analytics_mock.event.assert_any_call("oauth_flow_initiated", provider="openrouter")
-        analytics_mock.event.assert_any_call("oauth_flow_success")
-        # Clean up env var
-        del os.environ["OPENROUTER_API_KEY"]
-
-    @patch("aider.onboarding.start_openrouter_oauth_flow", return_value=None)  # OAuth fails
-    @patch.dict(os.environ, {}, clear=True)
-    def test_offer_openrouter_oauth_confirm_yes_fail(self, mock_start_oauth):
-        """Test offer_openrouter_oauth when user confirms but OAuth fails."""
-        io_mock = DummyIO()
-        io_mock.confirm_ask = MagicMock(return_value=True)  # User says yes
-        io_mock.tool_error = MagicMock()
-        analytics_mock = DummyAnalytics()
-        analytics_mock.event = MagicMock()
-
-        result = offer_openrouter_oauth(io_mock, analytics_mock)
-
-        self.assertFalse(result)
-        io_mock.confirm_ask.assert_called_once()
-        mock_start_oauth.assert_called_once_with(io_mock, analytics_mock)
-        self.assertNotIn("OPENROUTER_API_KEY", os.environ)
-        io_mock.tool_error.assert_called_once_with(
-            "OpenRouter authentication did not complete successfully."
-        )
-        analytics_mock.event.assert_any_call("oauth_flow_initiated", provider="openrouter")
-        analytics_mock.event.assert_any_call("oauth_flow_failure")
-
-    @patch("aider.onboarding.start_openrouter_oauth_flow")
-    def test_offer_openrouter_oauth_confirm_no(self, mock_start_oauth):
-        """Test offer_openrouter_oauth when user declines."""
-        io_mock = DummyIO()
-        io_mock.confirm_ask = MagicMock(return_value=False)  # User says no
-        analytics_mock = DummyAnalytics()
-        analytics_mock.event = MagicMock()
-
-        result = offer_openrouter_oauth(io_mock, analytics_mock)
-
-        self.assertFalse(result)
-        io_mock.confirm_ask.assert_called_once()
-        mock_start_oauth.assert_not_called()
-        analytics_mock.event.assert_not_called()  # No OAuth events if declined
-
-    # --- More complex test for start_openrouter_oauth_flow (simplified) ---
-    # This test focuses on the successful path, mocking heavily
-
-
-if __name__ == "__main__":
-    unittest.main()
\ No newline at end of file
+        mock
\ No newline at end of file
