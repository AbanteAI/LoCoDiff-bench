--- aider_tests_basic_test_onboarding.py_expectedoutput.txt (expected)+++ aider_tests_basic_test_onboarding.py_extracted.txt (actual)@@ -163,7 +163,7 @@         mock_tcp_server.return_value.__enter__.return_value = None  # Allow context manager
         port = find_available_port(start_port=8484, end_port=8484)
         self.assertEqual(port, 8484)
-        mock_tcp_server.assert_called_once_with(("localhost", 8484), None)
+        mock_tcp_server.assert_called_once_with("localhost", 8484)
 
     @patch("socketserver.TCPServer")
     def test_find_available_port_in_use(self, mock_tcp_server):
@@ -174,8 +174,8 @@         port = find_available_port(start_port=8484, end_port=8485)
         self.assertEqual(port, 8485)
         self.assertEqual(mock_tcp_server.call_count, 2)
-        mock_tcp_server.assert_any_call(("localhost", 8484), None)
-        mock_tcp_server.assert_any_call(("localhost", 8485), None)
+        mock_tcp_server.assert_any_call("localhost", 8484)
+        mock_tcp_server.assert_any_call("localhost", 8485)
 
     @patch("socketserver.TCPServer", side_effect=OSError)
     def test_find_available_port_none_available(self, mock_tcp_server):
@@ -431,9 +431,6 @@         mock_start_oauth.assert_not_called()
         analytics_mock.event.assert_not_called()  # No OAuth events if declined
 
-    # --- More complex test for start_openrouter_oauth_flow (simplified) ---
-    # This test focuses on the successful path, mocking heavily
-
 
 if __name__ == "__main__":
     unittest.main()