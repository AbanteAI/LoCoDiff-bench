
index 2098a30e..f3ae6ae6 100644
--- a/aider_aider_utils.py_expectedoutput.txt (expected):tmp/tmp5d_et3b7_expected.txt	
+++ b/aider_aider_utils.py_extracted.txt (actual):tmp/tmp9gubzxlz_actual.txt	
@@ -1,18 +1,87 @@
 import itertools
 import os
 import platform
-import shlex
 import subprocess
 import sys
 import tempfile
 import time
+from io import BytesIO
 from pathlib import Path
+from typing import Optional
+
+import pexpect
 
 from aider.dump import dump  # noqa: F401
 
 IMAGE_EXTENSIONS = {".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff", ".webp", ".pdf"}
 
 
+def run_interactive_command(command):
+    import sys
+
+    if not sys.stdin.isatty():
+        return run_interactive_command_subprocess(command)
+
+    try:
+        import pexpect  # noqa: F401
+    except ImportError:
+        return run_interactive_command_subprocess(command)
+
+    return run_interactive_command_pexpect(command)
+
+
+def run_interactive_command_subprocess(command):
+    try:
+        result = subprocess.run(
+            command,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.STDOUT,
+            text=True,
+            shell=True,
+            encoding=sys.stdout.encoding,
+            errors="replace",
+        )
+        return result.returncode, result.stdout
+    except Exception as e:
+        return 1, str(e)
+
+
+def run_interactive_command_pexpect(command):
+    """
+    Run a shell command interactively using pexpect, capturing all output.
+
+    :param command: The command to run as a string.
+    :return: A tuple containing (exit_status, output)
+    """
+    output = BytesIO()
+
+    def output_callback(b):
+        output.write(b)
+        return b
+
+    try:
+        # Use the SHELL environment variable, falling back to /bin/sh if not set
+        shell = os.environ.get("SHELL", "/bin/sh")
+
+        if os.path.exists(shell):
+            # Use the shell from SHELL environment variable
+            child = pexpect.spawn(shell, args=["-c", command], encoding="utf-8")
+        else:
+            # Fall back to spawning the command directly
+            child = pexpect.spawn(command, encoding="utf-8")
+
+        # Transfer control to the user, capturing output
+        child.interact(output_filter=output_callback)
+
+        # Wait for the command to finish and get the exit status
+        child.close()
+        return child.exitstatus, output.getvalue().decode("utf-8", errors="replace")
+
+    except pexpect.ExceptionPexpect as e:
+        error_msg = f"Error running command: {e}"
+        return 1, error_msg
+
+
 class IgnorantTemporaryDirectory:
     def __init__(self):
         if sys.version_info >= (3, 10):
@@ -23,14 +92,14 @@ class IgnorantTemporaryDirectory:
     def __enter__(self):
         return self.temp_dir.__enter__()
 
-    def __exit__(self, exc_type, exc_val, exc_tb):
-        self.cleanup()
-
     def cleanup(self):
         try:
             self.temp_dir.cleanup()
-        except (OSError, PermissionError, RecursionError):
-            pass  # Ignore errors (Windows and potential recursion)
+        except (OSError, PermissionError, RuntimeError):
+            pass  # Ignore errors (Windows and potential other issues)
+
+    def __exit__(self, exc_type, exc_val, exc_tb):
+        self.cleanup()
 
     def __getattr__(self, item):
         return getattr(self.temp_dir, item)
@@ -99,13 +168,6 @@ def safe_abs_path(res):
     return str(res)
 
 
-def format_content(role, content):
-    formatted_lines = []
-    for line in content.splitlines():
-        formatted_lines.append(f"{role} {line}")
-    return "\n".join(formatted_lines)
-
-
 def format_messages(messages, title=None):
     output = []
     if title:
@@ -134,6 +196,13 @@ def format_messages(messages, title=None):
     return "\n".join(output)
 
 
+def format_content(role, content):
+    formatted_lines = []
+    for line in content.splitlines():
+        formatted_lines.append(f"{role} {line}")
+    return "\n".join(formatted_lines)
+
+
 def show_messages(messages, title=None, functions=None):
     formatted_output = format_messages(messages, title)
     print(formatted_output)
@@ -142,179 +211,6 @@ def show_messages(messages, title=None, functions=None):
         dump(functions)
 
 
-def split_chat_history_markdown(text, include_tool=False):
-    messages = []
-    user = []
-    assistant = []
-    tool = []
-    lines = text.splitlines(keepends=True)
-
-    def append_msg(role, lines):
-        lines = "".join(lines)
-        if lines.strip():
-            messages.append(dict(role=role, content=lines))
-
-    for line in lines:
-        if line.startswith("# "):
-            continue
-        if line.startswith("> "):
-            append_msg("assistant", assistant)
-            assistant = []
-            append_msg("user", user)
-            user = []
-            tool.append(line[2:])
-            continue
-        # if line.startswith("#### /"):
-        #    continue
-
-        if line.startswith("#### "):
-            append_msg("assistant", assistant)
-            assistant = []
-            append_msg("tool", tool)
-            tool = []
-
-            content = line[5:]
-            user.append(content)
-            continue
-
-        append_msg("user", user)
-        user = []
-        append_msg("tool", tool)
-        tool = []
-
-        assistant.append(line)
-
-    append_msg("assistant", assistant)
-    append_msg("user", user)
-
-    if not include_tool:
-        messages = [m for m in messages if m["role"] != "tool"]
-
-    return messages
-
-
-def get_pip_install(args):
-    cmd = [
-        sys.executable,
-        "-m",
-        "pip",
-        "install",
-        "--upgrade",
-        "--upgrade-strategy",
-        "only-if-needed",
-    ]
-    cmd += args
-    return cmd
-
-
-def run_install(cmd):
-    print()
-    print("Installing:", printable_shell_command(cmd))
-
-    try:
-        output = []
-        process = subprocess.Popen(
-            cmd,
-            stdout=subprocess.PIPE,
-            stderr=subprocess.STDOUT,
-            text=True,
-            bufsize=1,
-            universal_newlines=True,
-            encoding=sys.stdout.encoding,
-            errors="replace",
-        )
-        spinner = Spinner("Installing...")
-
-        while True:
-            char = process.stdout.read(1)
-            if not char:
-                break
-
-            output.append(char)
-            spinner.step()
-
-        spinner.end()
-        return_code = process.wait()
-        output = "".join(output)
-
-        if return_code == 0:
-            print("Installation complete.")
-            print()
-            return True, output
-
-    except subprocess.CalledProcessError as e:
-        print(f"\nError running pip install: {e}")
-
-    print("\nInstallation failed.\n")
-
-    return False, output
-
-
-class Spinner:
-    unicode_spinner = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
-    ascii_spinner = ["|", "/", "-", "\\"]
-
-    def __init__(self, text):
-        self.text = text
-        self.start_time = time.time()
-        self.last_update = 0
-        self.visible = False
-        self.is_tty = sys.stdout.isatty()
-        self.tested = False
-
-    def test_charset(self):
-        if self.tested:
-            return
-        self.tested = True
-        # Try unicode first, fall back to ascii if needed
-        try:
-            # Test if we can print unicode characters
-            print(self.unicode_spinner[0], end="", flush=True)
-            print("\r", end="", flush=True)
-            self.spinner_chars = itertools.cycle(self.unicode_spinner)
-        except UnicodeEncodeError:
-            self.spinner_chars = itertools.cycle(self.ascii_spinner)
-
-    def step(self):
-        if not self.is_tty:
-            return
-
-        current_time = time.time()
-        if not self.visible and current_time - self.start_time >= 0.5:
-            self.visible = True
-            self._step()
-        elif self.visible and current_time - self.last_update >= 0.1:
-            self._step()
-        self.last_update = current_time
-
-    def _step(self):
-        if not self.visible:
-            return
-
-        self.test_charset()
-        print(f"\r{self.text} {next(self.spinner_chars)}\r{self.text} ", end="", flush=True)
-
-    def end(self):
-        if self.visible and self.is_tty:
-            print("\r" + " " * (len(self.text) + 3))
-
-
-def find_common_root(abs_fnames):
-    try:
-        if len(abs_fnames) == 1:
-            return safe_abs_path(os.path.dirname(list(abs_fnames)[0]))
-        elif abs_fnames:
-            return safe_abs_path(os.path.commonpath(list(abs_fnames)))
-    except OSError:
-        pass
-
-    try:
-        return safe_abs_path(os.getcwd())
-    except FileNotFoundError:
-        # Fallback if cwd is deleted
-        return "."
-
-
 def format_tokens(count):
     if count < 1000:
         return f"{count}"
@@ -390,13 +286,5 @@ def printable_shell_command(cmd_list):
         return shlex.join(cmd_list)
 
 
-def main():
-    spinner = Spinner("Running spinner...")
-    for _ in range(40):  # 40 steps * 0.25 seconds = 10 seconds
-        time.sleep(0.25)
-        spinner.step()
-    spinner.end()
-
-
 if __name__ == "__main__":
     main()
\ No newline at end of file
