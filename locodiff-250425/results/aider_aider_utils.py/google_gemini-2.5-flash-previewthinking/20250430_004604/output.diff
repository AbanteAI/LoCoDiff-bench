
index 2098a30e..48c32f2f 100644
--- a/aider_aider_utils.py_expectedoutput.txt (expected):tmp/tmpd6_64xz2_expected.txt	
+++ b/aider_aider_utils.py_extracted.txt (actual):tmp/tmpav5zlk5v_actual.txt	
@@ -6,10 +6,78 @@ import subprocess
 import sys
 import tempfile
 import time
+from io import BytesIO
 from pathlib import Path
 
 from aider.dump import dump  # noqa: F401
 
+
+def run_cmd_subprocess(command):
+    try:
+        result = subprocess.run(
+            command,
+            stdout=subprocess.PIPE,
+            stderr=subprocess.STDOUT,
+            text=True,
+            shell=True,
+            encoding=sys.stdout.encoding,
+            errors="replace",
+        )
+        return result.returncode, result.stdout
+    except Exception as e:
+        return 1, str(e)
+
+
+def run_cmd_pexpect(command):
+    """
+    Run a shell command interactively using pexpect, capturing all output.
+
+    :param command: The command to run as a string.
+    :return: A tuple containing (exit_status, output)
+    """
+    import pexpect
+
+    output = BytesIO()
+
+    def output_callback(b):
+        output.write(b)
+        return b
+
+    try:
+        # Use the SHELL environment variable, falling back to /bin/sh if not set
+        shell = os.environ.get("SHELL", "/bin/sh")
+
+        if os.path.exists(shell):
+            # Use the shell from SHELL environment variable
+            child = pexpect.spawn(shell, args=["-c", command], encoding="utf-8")
+        else:
+            # Fall back to spawning the command directly
+            child = pexpect.spawn(command, encoding="utf-8")
+
+        # Transfer control to the user, capturing output
+        child.interact(output_filter=output_callback)
+
+        # Wait for the command to finish and get the exit status
+        child.close()
+        return child.exitstatus, output.getvalue().decode("utf-8", errors="replace")
+
+    except pexpect.ExceptionPexpect as e:
+        error_msg = f"Error running command: {e}"
+        return 1, error_msg
+
+
+def run_cmd(command):
+    if not sys.stdin.isatty():
+        return run_cmd_subprocess(command)
+
+    try:
+        import pexpect  # noqa: F401
+    except ImportError:
+        return run_cmd_subprocess(command)
+
+    return run_cmd_pexpect(command)
+
+
 IMAGE_EXTENSIONS = {".png", ".jpg", ".jpeg", ".gif", ".bmp", ".tiff", ".webp", ".pdf"}
 
 
@@ -32,9 +100,6 @@ class IgnorantTemporaryDirectory:
         except (OSError, PermissionError, RecursionError):
             pass  # Ignore errors (Windows and potential recursion)
 
-    def __getattr__(self, item):
-        return getattr(self.temp_dir, item)
-
 
 class ChdirTemporaryDirectory(IgnorantTemporaryDirectory):
     def __init__(self):
@@ -164,8 +229,6 @@ def split_chat_history_markdown(text, include_tool=False):
             user = []
             tool.append(line[2:])
             continue
-        # if line.startswith("#### /"):
-        #    continue
 
         if line.startswith("#### "):
             append_msg("assistant", assistant)
@@ -193,6 +256,41 @@ def split_chat_history_markdown(text, include_tool=False):
     return messages
 
 
+def find_common_root(abs_fnames):
+    try:
+        if len(abs_fnames) == 1:
+            return safe_abs_path(os.path.dirname(list(abs_fnames)[0]))
+        elif abs_fnames:
+            return safe_abs_path(os.path.commonpath(list(abs_fnames)))
+    except OSError:
+        pass
+
+    try:
+        return safe_abs_path(os.getcwd())
+    except FileNotFoundError:
+        # Fallback if cwd is deleted
+        return "."
+
+
+def format_tokens(count):
+    if count < 1000:
+        return f"{count}"
+    elif count < 10000:
+        return f"{count / 1000:.1f}k"
+    else:
+        return f"{round(count / 1000)}k"
+
+
+def touch_file(fname):
+    fname = Path(fname)
+    try:
+        fname.parent.mkdir(parents=True, exist_ok=True)
+        fname.touch()
+        return True
+    except OSError:
+        return False
+
+
 def get_pip_install(args):
     cmd = [
         sys.executable,
@@ -262,6 +360,8 @@ class Spinner:
         self.is_tty = sys.stdout.isatty()
         self.tested = False
 
+        self.test_charset()
+
     def test_charset(self):
         if self.tested:
             return
@@ -299,39 +399,20 @@ class Spinner:
             print("\r" + " " * (len(self.text) + 3))
 
 
-def find_common_root(abs_fnames):
-    try:
-        if len(abs_fnames) == 1:
-            return safe_abs_path(os.path.dirname(list(abs_fnames)[0]))
-        elif abs_fnames:
-            return safe_abs_path(os.path.commonpath(list(abs_fnames)))
-    except OSError:
-        pass
-
-    try:
-        return safe_abs_path(os.getcwd())
-    except FileNotFoundError:
-        # Fallback if cwd is deleted
-        return "."
+def printable_shell_command(cmd_list):
+    """
+    Convert a list of command arguments to a properly shell-escaped string.
 
+    Args:
+        cmd_list (list): List of command arguments.
 
-def format_tokens(count):
-    if count < 1000:
-        return f"{count}"
-    elif count < 10000:
-        return f"{count / 1000:.1f}k"
+    Returns:
+        str: Shell-escaped command string.
+    """
+    if platform.system() == "Windows":
+        return subprocess.list2cmdline(cmd_list)
     else:
-        return f"{round(count / 1000)}k"
-
-
-def touch_file(fname):
-    fname = Path(fname)
-    try:
-        fname.parent.mkdir(parents=True, exist_ok=True)
-        fname.touch()
-        return True
-    except OSError:
-        return False
+        return shlex.join(cmd_list)
 
 
 def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=False):
@@ -350,7 +431,7 @@ def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=Fal
     if self_update and platform.system() == "Windows":
         io.tool_output("Run this command to update:")
         print()
-        print(printable_shell_command(cmd))  # plain print so it doesn't line-wrap
+        print(printable_shell_command(cmd))
         return
 
     if not io.confirm_ask("Run pip install?", default="y", subject=printable_shell_command(cmd)):
@@ -374,22 +455,6 @@ def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=Fal
     print(printable_shell_command(cmd))
 
 
-def printable_shell_command(cmd_list):
-    """
-    Convert a list of command arguments to a properly shell-escaped string.
-
-    Args:
-        cmd_list (list): List of command arguments.
-
-    Returns:
-        str: Shell-escaped command string.
-    """
-    if platform.system() == "Windows":
-        return subprocess.list2cmdline(cmd_list)
-    else:
-        return shlex.join(cmd_list)
-
-
 def main():
     spinner = Spinner("Running spinner...")
     for _ in range(40):  # 40 steps * 0.25 seconds = 10 seconds
