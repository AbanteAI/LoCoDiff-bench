
index 2098a30e9..906721ab8 100644
--- a/aider_aider_utils.py_expectedoutput.txt (expected):tmp/tmpsdca7urt_expected.txt	
+++ b/aider_aider_utils.py_extracted.txt (actual):tmp/tmpmtcox8vh_actual.txt	
@@ -193,6 +193,41 @@ def split_chat_history_markdown(text, include_tool=False):
     return messages
 
 
+def find_common_root(abs_fnames):
+    try:
+        if len(abs_fnames) == 1:
+            return safe_abs_path(os.path.dirname(list(abs_fnames)[0]))
+        elif abs_fnames:
+            return safe_abs_path(os.path.commonpath(list(abs_fnames)))
+    except OSError:
+        pass
+
+    try:
+        return safe_abs_path(os.getcwd())
+    except FileNotFoundError:
+        # Fallback if cwd is deleted
+        return "."
+
+
+def format_tokens(count):
+    if count < 1000:
+        return f"{count}"
+    elif count < 10000:
+        return f"{count / 1000:.1f}k"
+    else:
+        return f"{round(count / 1000)}k"
+
+
+def touch_file(fname):
+    fname = Path(fname)
+    try:
+        fname.parent.mkdir(parents=True, exist_ok=True)
+        fname.touch()
+        return True
+    except OSError:
+        return False
+
+
 def get_pip_install(args):
     cmd = [
         sys.executable,
@@ -250,6 +285,46 @@ def run_install(cmd):
     return False, output
 
 
+def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=False):
+    if module:
+        try:
+            __import__(module)
+            return True
+        except (ImportError, ModuleNotFoundError, RuntimeError):
+            pass
+
+    cmd = get_pip_install(pip_install_cmd)
+
+    if prompt:
+        io.tool_warning(prompt)
+
+    if self_update and platform.system() == "Windows":
+        io.tool_output("Run this command to update:")
+        print()
+        print(printable_shell_command(cmd))  # plain print so it doesn't line-wrap
+        return
+
+    if not io.confirm_ask("Run pip install?", default="y", subject=printable_shell_command(cmd)):
+        return
+
+    success, output = run_install(cmd)
+    if success:
+        if not module:
+            return True
+        try:
+            __import__(module)
+            return True
+        except (ImportError, ModuleNotFoundError, RuntimeError) as err:
+            io.tool_error(str(err))
+            pass
+
+    io.tool_error(output)
+
+    print()
+    print("Install failed, try running this command manually:")
+    print(printable_shell_command(cmd))
+
+
 class Spinner:
     unicode_spinner = ["⠋", "⠙", "⠹", "⠸", "⠼", "⠴", "⠦", "⠧", "⠇", "⠏"]
     ascii_spinner = ["|", "/", "-", "\\"]
@@ -299,81 +374,6 @@ class Spinner:
             print("\r" + " " * (len(self.text) + 3))
 
 
-def find_common_root(abs_fnames):
-    try:
-        if len(abs_fnames) == 1:
-            return safe_abs_path(os.path.dirname(list(abs_fnames)[0]))
-        elif abs_fnames:
-            return safe_abs_path(os.path.commonpath(list(abs_fnames)))
-    except OSError:
-        pass
-
-    try:
-        return safe_abs_path(os.getcwd())
-    except FileNotFoundError:
-        # Fallback if cwd is deleted
-        return "."
-
-
-def format_tokens(count):
-    if count < 1000:
-        return f"{count}"
-    elif count < 10000:
-        return f"{count / 1000:.1f}k"
-    else:
-        return f"{round(count / 1000)}k"
-
-
-def touch_file(fname):
-    fname = Path(fname)
-    try:
-        fname.parent.mkdir(parents=True, exist_ok=True)
-        fname.touch()
-        return True
-    except OSError:
-        return False
-
-
-def check_pip_install_extra(io, module, prompt, pip_install_cmd, self_update=False):
-    if module:
-        try:
-            __import__(module)
-            return True
-        except (ImportError, ModuleNotFoundError, RuntimeError):
-            pass
-
-    cmd = get_pip_install(pip_install_cmd)
-
-    if prompt:
-        io.tool_warning(prompt)
-
-    if self_update and platform.system() == "Windows":
-        io.tool_output("Run this command to update:")
-        print()
-        print(printable_shell_command(cmd))  # plain print so it doesn't line-wrap
-        return
-
-    if not io.confirm_ask("Run pip install?", default="y", subject=printable_shell_command(cmd)):
-        return
-
-    success, output = run_install(cmd)
-    if success:
-        if not module:
-            return True
-        try:
-            __import__(module)
-            return True
-        except (ImportError, ModuleNotFoundError, RuntimeError) as err:
-            io.tool_error(str(err))
-            pass
-
-    io.tool_error(output)
-
-    print()
-    print("Install failed, try running this command manually:")
-    print(printable_shell_command(cmd))
-
-
 def printable_shell_command(cmd_list):
     """
     Convert a list of command arguments to a properly shell-escaped string.
