--- ghostty_src_renderer_Thread.zig_expectedoutput.txt (expected)+++ ghostty_src_renderer_Thread.zig_extracted.txt (actual)@@ -1,5 +1,3 @@-//! Represents the renderer thread logic. The renderer thread is able to
-//! be woken up to render.
 pub const Thread = @This();
 
 const std = @import("std");
@@ -17,20 +15,15 @@ const Allocator = std.mem.Allocator;
 const log = std.log.scoped(.renderer_thread);
 
+pub const Mailbox = BlockingQueue(rendererpkg.Message, 64);
+
 const DRAW_INTERVAL = 8; // 120 FPS
 const CURSOR_BLINK_INTERVAL = 600;
 
-/// The type used for sending messages to the IO thread. For now this is
-/// hardcoded with a capacity. We can make this a comptime parameter in
-/// the future if we want it configurable.
-pub const Mailbox = BlockingQueue(rendererpkg.Message, 64);
-
 /// Allocator used for some state
 alloc: std.mem.Allocator,
 
-/// The main event loop for the application. The user data of this loop
-/// is always the allocator used to create the loop. This is a convenience
-/// so that users of the loop always have an allocator.
+/// The main event loop for the thread.
 loop: xev.Loop,
 
 /// This can be used to wake up the renderer and force a render safely from
@@ -42,13 +35,12 @@ stop: xev.Async,
 stop_c: xev.Completion = .{},
 
-/// The timer used for rendering
+/// The timer used for rendering frame updates.
 render_h: xev.Timer,
 render_c: xev.Completion = .{},
 
 /// The timer used for draw calls. Draw calls don't update from the
-/// terminal state so they're much cheaper. They're used for animation
-/// and are paused when the terminal is not focused.
+/// terminal state so they're much cheaper.
 draw_h: xev.Timer,
 draw_c: xev.Completion = .{},
 draw_active: bool = false,
@@ -98,7 +90,7 @@     /// This is true when the view is focused. This defaults to true
     /// and it is up to the apprt to set the correct value.
     focused: bool = true,
-} = .{},
+} = .{};
 
 pub const DerivedConfig = struct {
     custom_shader_animation: configpkg.CustomShaderAnimation,
@@ -153,7 +145,7 @@     var mailbox = try Mailbox.create(alloc);
     errdefer mailbox.destroy(alloc);
 
-    return .{
+    return Thread{
         .alloc = alloc,
         .config = DerivedConfig.init(config),
         .loop = loop,
@@ -188,9 +180,7 @@ 
 /// The main entrypoint for the thread.
 pub fn threadMain(self: *Thread) void {
-    // Call child function so we can use errors...
     self.threadMain_() catch |err| {
-        // In the future, we should expose this on the thread struct.
         log.warn("error in renderer err={}", .{err});
     };
 }
@@ -213,9 +203,7 @@     if (has_loop) try self.renderer.loopEnter(self);
     defer if (has_loop) self.renderer.loopExit();
 
-    // Run our thread start/end callbacks. This is important because some
-    // renderers have to do per-thread setup. For example, OpenGL has to set
-    // some thread-local state since that is how it works.
+    // Run our thread start/end callbacks.
     try self.renderer.threadEnter(self.surface);
     defer self.renderer.threadExit();
 
@@ -242,7 +230,6 @@ 
     // Run
     log.debug("starting renderer thread", .{});
-    defer log.debug("starting renderer thread shutdown", .{});
     _ = try self.loop.run(.until_done);
 }
 
@@ -251,21 +238,11 @@     if (comptime !builtin.target.os.tag.isDarwin()) return;
 
     const class: internal_os.macos.QosClass = class: {
-        // If we aren't visible (our view is fully occluded) then we
-        // always drop our rendering priority down because it's just
-        // mostly wasted work.
-        //
-        // The renderer itself should be doing this as well (for example
-        // Metal will stop our DisplayLink) but this also helps with
-        // general forced updates and CPU usage i.e. a rebuild cells call.
+        // If we aren't visible then lower priority.
         if (!self.flags.visible) break :class .utility;
-
-        // If we're not focused, but we're visible, then we set a higher
-        // than default priority because framerates still matter but it isn't
-        // as important as when we're focused.
+        // If we're not focused then medium priority.
         if (!self.flags.focused) break :class .user_initiated;
-
-        // We are focused and visible, we are the definition of user interactive.
+        // Otherwise high priority.
         break :class .user_interactive;
     };
 
@@ -282,14 +259,12 @@     if (!self.renderer.hasAnimations()) return;
     if (self.config.custom_shader_animation == .false) return;
 
-    // Set our active state so it knows we're running. We set this before
-    // even checking the active state in case we have a pending shutdown.
     self.draw_active = true;
 
-    // If our draw timer is already active, then we don't have to do anything.
+    // If already active, do nothing.
     if (self.draw_c.state() == .active) return;
 
-    // Start the timer which loops
+    // Start the timer loop.
     self.draw_h.run(
         &self.loop,
         &self.draw_c,
@@ -301,8 +276,34 @@ }
 
 fn stopDrawTimer(self: *Thread) void {
-    // This will stop the draw on the next iteration.
     self.draw_active = false;
+}
+
+fn changeConfig(self: *Thread, config: *const DerivedConfig) !void {
+    self.config = config.*;
+}
+
+/// Trigger a draw. This will not update frame data or anything, it will
+/// just trigger a draw/paint.
+fn drawFrame(self: *Thread, now: bool) void {
+    // If we're invisible, do nothing.
+    if (!self.flags.visible) return;
+
+    // If renderer has vsync, only draw when forced.
+    if (!now and self.renderer.hasVsync()) return;
+
+    // If single-threaded GPU, notify app to redraw.
+    if (rendererpkg.Renderer == rendererpkg.OpenGL and
+        rendererpkg.OpenGL.single_threaded_draw)
+    {
+        _ = self.app_mailbox.push(
+            .{ .redraw_surface = self.surface },
+            .{ .instant = {} },
+        );
+    } else {
+        self.renderer.drawFrame(self.surface) catch |err|
+            log.warn("error drawing err={}", .{err});
+    }
 }
 
 /// Drain the mailbox.
@@ -313,51 +314,24 @@             .crash => @panic("crash request, crashing intentionally"),
 
             .visible => |v| visible: {
-                // If our state didn't change we do nothing.
                 if (self.flags.visible == v) break :visible;
 
-                // Set our visible state
                 self.flags.visible = v;
-
-                // Visibility affects our QoS class
                 self.setQosClass();
 
-                // If we became visible then we immediately trigger a draw.
-                // We don't need to update frame data because that should
-                // still be happening.
                 if (v) self.drawFrame(false);
-
-                // Notify the renderer so it can update any state.
                 self.renderer.setVisible(v);
-
-                // Note that we're explicitly today not stopping any
-                // cursor timers, draw timers, etc. These things have very
-                // little resource cost and properly maintaining their active
-                // state across different transitions is going to be bug-prone,
-                // so its easier to just let them keep firing and have them
-                // check the visible state themselves to control their behavior.
             },
 
             .focus => |v| focus: {
-                // If our state didn't change we do nothing.
                 if (self.flags.focused == v) break :focus;
 
-                // Set our state
                 self.flags.focused = v;
-
-                // Focus affects our QoS class
                 self.setQosClass();
 
-                // Set it on the renderer
                 try self.renderer.setFocus(v);
 
                 if (!v) {
-                    if (self.config.custom_shader_animation != .always) {
-                        // Stop the draw timer
-                        self.stopDrawTimer();
-                    }
-
-                    // If we're not focused, then we stop the cursor blink
                     if (self.cursor_c.state() == .active and
                         self.cursor_c_cancel.state() == .dead)
                     {
@@ -371,11 +345,8 @@                         );
                     }
                 } else {
-                    // Start the draw timer
                     self.startDrawTimer();
 
-                    // If we're focused, we immediately show the cursor again
-                    // and then restart the timer.
                     if (self.cursor_c.state() != .active) {
                         self.flags.cursor_blink_visible = true;
                         self.cursor_h.run(
@@ -433,8 +404,6 @@                 try self.changeConfig(config.thread);
                 try self.renderer.changeConfig(config.impl);
 
-                // Stop and start the draw timer to capture the new
-                // hasAnimations value.
                 self.stopDrawTimer();
                 self.startDrawTimer();
             },
@@ -447,35 +416,6 @@                 }
             },
         }
-    }
-}
-
-fn changeConfig(self: *Thread, config: *const DerivedConfig) !void {
-    self.config = config.*;
-}
-
-/// Trigger a draw. This will not update frame data or anything, it will
-/// just trigger a draw/paint.
-fn drawFrame(self: *Thread, now: bool) void {
-    // If we're invisible, we do not draw.
-    if (!self.flags.visible) return;
-
-    // If the renderer is managing a vsync on its own, we only draw
-    // when we're forced to via now.
-    if (!now and self.renderer.hasVsync()) return;
-
-    // If we're doing single-threaded GPU calls then we just wake up the
-    // app thread to redraw at this point.
-    if (rendererpkg.Renderer == rendererpkg.OpenGL and
-        rendererpkg.OpenGL.single_threaded_draw)
-    {
-        _ = self.app_mailbox.push(
-            .{ .redraw_surface = self.surface },
-            .{ .instant = {} },
-        );
-    } else {
-        self.renderer.drawFrame(self.surface) catch |err|
-            log.warn("error drawing err={}", .{err});
     }
 }
 
@@ -490,10 +430,8 @@         return .rearm;
     };
 
-    const t = self_.?;
-
-    // When we wake up, we check the mailbox. Mailbox producers should
-    // wake up our thread after publishing.
+    const t: *Thread = self_.?;
+
     t.drainMailbox() catch |err|
         log.err("error draining mailbox err={}", .{err});
 
@@ -501,23 +439,92 @@     _ = renderCallback(t, undefined, undefined, {});
 
     // The below is not used anymore but if we ever want to introduce
-    // a configuration to introduce a delay to coalesce renders, we can
-    // use this.
+    // a delay to coalesce renders, we can use this.
     //
     // // If the timer is already active then we don't have to do anything.
-    // if (t.render_c.state() == .active) return .rearm;
+    // // if (t.render_c.state() == .active) return .rearm;
+    // //
+    // // // Timer is not active, let's start it
+    // // t.render_h.run(
+    // //     &t.loop,
+    // //     &t.render_c,
+    // //     10,
+    // //     Thread,
+    // //     t,
+    // //     renderCallback,
+    // // );
     //
-    // // Timer is not active, let's start it
-    // t.render_h.run(
-    //     &t.loop,
-    //     &t.render_c,
-    //     10,
-    //     Thread,
-    //     t,
-    //     renderCallback,
-    // );
-
     return .rearm;
+}
+
+fn renderCallback(
+    self_: ?*Thread,
+    _: *xev.Loop,
+    _: *xev.Completion,
+    r: xev.Timer.RunError!void,
+) xev.CallbackAction {
+    _ = r catch unreachable;
+    const t: *Thread = self_ orelse {
+        log.warn("render callback fired without data set", .{});
+        return .disarm;
+    };
+
+    if (t.flags.has_inspector) {
+        _ = t.app_mailbox.push(.{ .redraw_inspector = t.surface }, .{ .instant = {} });
+    }
+
+    // Update our frame data
+    t.renderer.updateFrame(
+        t.surface,
+        t.state,
+        t.flags.cursor_blink_visible,
+        rendererpkg.OpenGL.single_threaded_draw,
+    ) catch |err|
+        log.warn("error rendering err={}", .{err});
+
+    if (rendererpkg.Renderer == rendererpkg.OpenGL and
+        rendererpkg.OpenGL.single_threaded_draw)
+    {
+        _ = t.app_mailbox.push(.{ .redraw_surface = t.surface }, .{ .instant = {} });
+        return .disarm;
+    }
+
+    // Draw immediately
+    t.renderer.drawFrame(t.surface) catch |err|
+        log.warn("error drawing err={}", .{err});
+
+    return .disarm;
+}
+
+fn drawCallback(
+    self_: ?*Thread,
+    _: *xev.Loop,
+    _: *xev.Completion,
+    r: xev.Timer.RunError!void,
+) xev.CallbackAction {
+    _ = r catch unreachable;
+    const t: *Thread = self_ orelse {
+        log.warn("render callback fired without data set", .{});
+        return .disarm;
+    };
+
+    if (rendererpkg.Renderer == rendererpkg.OpenGL and
+        rendererpkg.OpenGL.single_threaded_draw)
+    {
+        _ = t.app_mailbox.push(
+            .{ .redraw_surface = t.surface },
+            .{ .instant = {} },
+        );
+    } else {
+        t.renderer.drawFrame(t.surface) catch |err|
+            log.warn("error drawing err={}", .{err});
+    }
+
+    if (t.draw_active) {
+        t.draw_h.run(&t.loop, &t.draw_c, DRAW_INTERVAL, Thread, t, drawCallback);
+    }
+
+    return .disarm;
 }
 
 fn drawNowCallback(
@@ -531,67 +538,10 @@         return .rearm;
     };
 
-    // Draw immediately
-    const t = self_.?;
+    const t: *Thread = self_?;
     t.drawFrame(true);
 
     return .rearm;
-}
-
-fn drawCallback(
-    self_: ?*Thread,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Timer.RunError!void,
-) xev.CallbackAction {
-    _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
-        log.warn("render callback fired without data set", .{});
-        return .disarm;
-    };
-
-    // Draw
-    t.drawFrame(false);
-
-    // Only continue if we're still active
-    if (t.draw_active) {
-        t.draw_h.run(&t.loop, &t.draw_c, DRAW_INTERVAL, Thread, t, drawCallback);
-    }
-
-    return .disarm;
-}
-
-fn renderCallback(
-    self_: ?*Thread,
-    _: *xev.Loop,
-    _: *xev.Completion,
-    r: xev.Timer.RunError!void,
-) xev.CallbackAction {
-    _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
-        log.warn("render callback fired without data set", .{});
-        return .disarm;
-    };
-
-    // If we have an inspector, let the app know we want to rerender that.
-    if (t.flags.has_inspector) {
-        _ = t.app_mailbox.push(.{ .redraw_inspector = t.surface }, .{ .instant = {} });
-    }
-
-    // Update our frame data
-    t.renderer.updateFrame(
-        t.surface,
-        t.state,
-        t.flags.cursor_blink_visible,
-    ) catch |err|
-        log.warn("error rendering err={}", .{err});
-
-    // Draw
-    t.drawFrame(false);
-
-    return .disarm;
 }
 
 fn cursorTimerCallback(
@@ -601,9 +551,7 @@     r: xev.Timer.RunError!void,
 ) xev.CallbackAction {
     _ = r catch |err| switch (err) {
-        // This is sent when our timer is canceled. That's fine.
         error.Canceled => return .disarm,
-
         else => {
             log.warn("error in cursor timer callback err={}", .{err});
             unreachable;
@@ -611,7 +559,6 @@     };
 
     const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
         log.warn("render callback fired without data set", .{});
         return .disarm;
     };
@@ -638,8 +585,8 @@     };
 
     _ = r catch |err| switch (@as(CancelError, @errorCast(err))) {
-        error.Canceled => {}, // success
-        error.NotFound => {}, // completed before it could cancel
+        error.Canceled => {},
+        error.NotFound => {},
         else => {
             log.warn("error in cursor cancel callback err={}", .{err});
             unreachable;
@@ -648,12 +595,6 @@ 
     return .disarm;
 }
-
-// fn prepFrameCallback(h: *libuv.Prepare) void {
-//     _ = h;
-//
-//     tracy.frameMark();
-// }
 
 fn stopCallback(
     self_: ?*Thread,
