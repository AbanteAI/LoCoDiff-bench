
index 11175f62..4ea8af7a 100644
--- a/ghostty_src_renderer_Thread.zig_expectedoutput.txt (expected):tmp/tmpni7pasle_expected.txt	
+++ b/ghostty_src_renderer_Thread.zig_extracted.txt (actual):tmp/tmpjajczvj9_actual.txt	
@@ -490,7 +490,7 @@ fn wakeupCallback(
         return .rearm;
     };
 
-    const t = self_.?;
+    const t: *Thread = self_.?;
 
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
@@ -500,10 +500,6 @@ fn wakeupCallback(
     // Render immediately
     _ = renderCallback(t, undefined, undefined, {});
 
-    // The below is not used anymore but if we ever want to introduce
-    // a configuration to introduce a delay to coalesce renders, we can
-    // use this.
-    //
     // // If the timer is already active then we don't have to do anything.
     // if (t.render_c.state() == .active) return .rearm;
     //
@@ -532,7 +528,7 @@ fn drawNowCallback(
     };
 
     // Draw immediately
-    const t = self_.?;
+    const t: *Thread = self_.?;
     t.drawFrame(true);
 
     return .rearm;
@@ -545,11 +541,7 @@ fn drawCallback(
     r: xev.Timer.RunError!void,
 ) xev.CallbackAction {
     _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
-        log.warn("render callback fired without data set", .{});
-        return .disarm;
-    };
+    const t: *Thread = self_.?;
 
     // Draw
     t.drawFrame(false);
@@ -569,11 +561,7 @@ fn renderCallback(
     r: xev.Timer.RunError!void,
 ) xev.CallbackAction {
     _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
-        log.warn("render callback fired without data set", .{});
-        return .disarm;
-    };
+    const t: *Thread = self_.?;
 
     // If we have an inspector, let the app know we want to rerender that.
     if (t.flags.has_inspector) {
@@ -610,11 +598,7 @@ fn cursorTimerCallback(
         },
     };
 
-    const t: *Thread = self_ orelse {
-        // This shouldn't happen so we log it.
-        log.warn("render callback fired without data set", .{});
-        return .disarm;
-    };
+    const t: *Thread = self_.?;
 
     t.flags.cursor_blink_visible = !t.flags.cursor_blink_visible;
     t.wakeup.notify() catch {};
@@ -649,12 +633,6 @@ fn cursorCancelCallback(
     return .disarm;
 }
 
-// fn prepFrameCallback(h: *libuv.Prepare) void {
-//     _ = h;
-//
-//     tracy.frameMark();
-// }
-
 fn stopCallback(
     self_: ?*Thread,
     _: *xev.Loop,
