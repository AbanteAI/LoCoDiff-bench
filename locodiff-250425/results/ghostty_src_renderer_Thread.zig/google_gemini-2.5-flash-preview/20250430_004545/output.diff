
index 11175f62..a240e413 100644
--- a/ghostty_src_renderer_Thread.zig_expectedoutput.txt (expected):tmp/tmpoatw7yax_expected.txt	
+++ b/ghostty_src_renderer_Thread.zig_extracted.txt (actual):tmp/tmpb0_t2r59_actual.txt	
@@ -220,9 +220,9 @@ fn threadMain_(self: *Thread) !void {
     defer self.renderer.threadExit();
 
     // Start the async handlers
-    self.wakeup.wait(&self.loop, &self.wakeup_c, Thread, self, wakeupCallback);
-    self.stop.wait(&self.loop, &self.stop_c, Thread, self, stopCallback);
-    self.draw_now.wait(&self.loop, &self.draw_now_c, Thread, self, drawNowCallback);
+    self.wakeup.wait(&self.loop, &self.wakeup_c, *@This(), *self, wakeupCallback);
+    self.stop.wait(&self.loop, &self.stop_c, *@This(), *self, stopCallback);
+    self.draw_now.wait(&self.loop, &self.draw_now_c, *@This(), *self, drawNowCallback);
 
     // Send an initial wakeup message so that we render right away.
     try self.wakeup.notify();
@@ -232,8 +232,8 @@ fn threadMain_(self: *Thread) !void {
         &self.loop,
         &self.cursor_c,
         CURSOR_BLINK_INTERVAL,
-        Thread,
-        self,
+        *@This(),
+        *self,
         cursorTimerCallback,
     );
 
@@ -294,8 +294,8 @@ fn startDrawTimer(self: *Thread) void {
         &self.loop,
         &self.draw_c,
         DRAW_INTERVAL,
-        Thread,
-        self,
+        *@This(),
+        *self,
         drawCallback,
     );
 }
@@ -350,44 +350,6 @@ fn drainMailbox(self: *Thread) !void {
 
                 // Set it on the renderer
                 try self.renderer.setFocus(v);
-
-                if (!v) {
-                    if (self.config.custom_shader_animation != .always) {
-                        // Stop the draw timer
-                        self.stopDrawTimer();
-                    }
-
-                    // If we're not focused, then we stop the cursor blink
-                    if (self.cursor_c.state() == .active and
-                        self.cursor_c_cancel.state() == .dead)
-                    {
-                        self.cursor_h.cancel(
-                            &self.loop,
-                            &self.cursor_c,
-                            &self.cursor_c_cancel,
-                            void,
-                            null,
-                            cursorCancelCallback,
-                        );
-                    }
-                } else {
-                    // Start the draw timer
-                    self.startDrawTimer();
-
-                    // If we're focused, we immediately show the cursor again
-                    // and then restart the timer.
-                    if (self.cursor_c.state() != .active) {
-                        self.flags.cursor_blink_visible = true;
-                        self.cursor_h.run(
-                            &self.loop,
-                            &self.cursor_c,
-                            CURSOR_BLINK_INTERVAL,
-                            Thread,
-                            self,
-                            cursorTimerCallback,
-                        );
-                    }
-                }
             },
 
             .reset_cursor_blink => {
@@ -398,8 +360,8 @@ fn drainMailbox(self: *Thread) !void {
                         &self.cursor_c,
                         &self.cursor_c_cancel,
                         CURSOR_BLINK_INTERVAL,
-                        Thread,
-                        self,
+                        *@This(),
+                        *self,
                         cursorTimerCallback,
                     );
                 }
@@ -474,13 +436,14 @@ fn drawFrame(self: *Thread, now: bool) void {
             .{ .instant = {} },
         );
     } else {
+        assert(self.renderer.surface_mailbox.surface.size() == self.surface.size(), "grid size must match surface size");
         self.renderer.drawFrame(self.surface) catch |err|
             log.warn("error drawing err={}", .{err});
     }
 }
 
 fn wakeupCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Async.WaitError!void,
@@ -490,7 +453,7 @@ fn wakeupCallback(
         return .rearm;
     };
 
-    const t = self_.?;
+    const t: *Thread = self_.?;
 
     // When we wake up, we check the mailbox. Mailbox producers should
     // wake up our thread after publishing.
@@ -512,8 +475,8 @@ fn wakeupCallback(
     //     &t.loop,
     //     &t.render_c,
     //     10,
-    //     Thread,
-    //     t,
+    //     *@This(),
+    //     *t,
     //     renderCallback,
     // );
 
@@ -521,7 +484,7 @@ fn wakeupCallback(
 }
 
 fn drawNowCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Async.WaitError!void,
@@ -532,20 +495,20 @@ fn drawNowCallback(
     };
 
     // Draw immediately
-    const t = self_.?;
+    const t: *Thread = self_.?;
     t.drawFrame(true);
 
     return .rearm;
 }
 
 fn drawCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Timer.RunError!void,
 ) xev.CallbackAction {
     _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
+    const t: *Thread = self_.? orelse {
         // This shouldn't happen so we log it.
         log.warn("render callback fired without data set", .{});
         return .disarm;
@@ -556,31 +519,27 @@ fn drawCallback(
 
     // Only continue if we're still active
     if (t.draw_active) {
-        t.draw_h.run(&t.loop, &t.draw_c, DRAW_INTERVAL, Thread, t, drawCallback);
+        t.draw_h.run(&t.loop, &t.draw_c, DRAW_INTERVAL, *@This(), *t, drawCallback);
     }
 
     return .disarm;
 }
 
 fn renderCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Timer.RunError!void,
 ) xev.CallbackAction {
     _ = r catch unreachable;
-    const t: *Thread = self_ orelse {
+    const t: *Thread = self_.? orelse {
         // This shouldn't happen so we log it.
         log.warn("render callback fired without data set", .{});
         return .disarm;
     };
 
-    // If we have an inspector, let the app know we want to rerender that.
-    if (t.flags.has_inspector) {
-        _ = t.app_mailbox.push(.{ .redraw_inspector = t.surface }, .{ .instant = {} });
-    }
-
     // Update our frame data
+    assert(t.renderer.surface_mailbox.surface.size() == t.surface.size(), "grid size must match surface size");
     t.renderer.updateFrame(
         t.surface,
         t.state,
@@ -595,7 +554,7 @@ fn renderCallback(
 }
 
 fn cursorTimerCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Timer.RunError!void,
@@ -610,7 +569,7 @@ fn cursorTimerCallback(
         },
     };
 
-    const t: *Thread = self_ orelse {
+    const t: *Thread = self_.? orelse {
         // This shouldn't happen so we log it.
         log.warn("render callback fired without data set", .{});
         return .disarm;
@@ -619,7 +578,7 @@ fn cursorTimerCallback(
     t.flags.cursor_blink_visible = !t.flags.cursor_blink_visible;
     t.wakeup.notify() catch {};
 
-    t.cursor_h.run(&t.loop, &t.cursor_c, CURSOR_BLINK_INTERVAL, Thread, t, cursorTimerCallback);
+    t.cursor_h.run(&t.loop, &t.cursor_c, CURSOR_BLINK_INTERVAL, *@This(), *t, cursorTimerCallback);
     return .disarm;
 }
 
@@ -649,14 +608,8 @@ fn cursorCancelCallback(
     return .disarm;
 }
 
-// fn prepFrameCallback(h: *libuv.Prepare) void {
-//     _ = h;
-//
-//     tracy.frameMark();
-// }
-
 fn stopCallback(
-    self_: ?*Thread,
+    self_: ?*@This(),
     _: *xev.Loop,
     _: *xev.Completion,
     r: xev.Async.WaitError!void,
