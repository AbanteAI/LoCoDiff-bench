
index 11175f62..e5039d44 100644
--- a/ghostty_src_renderer_Thread.zig_expectedoutput.txt (expected):tmp/tmpw83gr7zs_expected.txt	
+++ b/ghostty_src_renderer_Thread.zig_extracted.txt (actual):tmp/tmpj1ycicwy_actual.txt	
@@ -28,9 +28,7 @@ pub const Mailbox = BlockingQueue(rendererpkg.Message, 64);
 /// Allocator used for some state
 alloc: std.mem.Allocator,
 
-/// The main event loop for the application. The user data of this loop
-/// is always the allocator used to create the loop. This is a convenience
-/// so that users of the loop always have an allocator.
+/// The main event loop for the application.
 loop: xev.Loop,
 
 /// This can be used to wake up the renderer and force a render safely from
@@ -188,10 +186,8 @@ pub fn deinit(self: *Thread) void {
 
 /// The main entrypoint for the thread.
 pub fn threadMain(self: *Thread) void {
-    // Call child function so we can use errors...
     self.threadMain_() catch |err| {
-        // In the future, we should expose this on the thread struct.
-        log.warn("error in renderer err={}", .{err});
+        log.err("error in renderer thread err={}", .{err});
     };
 }
 
@@ -224,10 +220,7 @@ fn threadMain_(self: *Thread) !void {
     self.stop.wait(&self.loop, &self.stop_c, Thread, self, stopCallback);
     self.draw_now.wait(&self.loop, &self.draw_now_c, Thread, self, drawNowCallback);
 
-    // Send an initial wakeup message so that we render right away.
-    try self.wakeup.notify();
-
-    // Start blinking the cursor.
+    // Setup a timer for blinking the cursor
     self.cursor_h.run(
         &self.loop,
         &self.cursor_c,
@@ -237,12 +230,14 @@ fn threadMain_(self: *Thread) !void {
         cursorTimerCallback,
     );
 
+    // Send an initial wakeup message so that we render right away.
+    try self.wakeup.notify();
+
     // Start the draw timer
     self.startDrawTimer();
 
     // Run
     log.debug("starting renderer thread", .{});
-    defer log.debug("starting renderer thread shutdown", .{});
     _ = try self.loop.run(.until_done);
 }
 
@@ -254,10 +249,6 @@ fn setQosClass(self: *const Thread) void {
         // If we aren't visible (our view is fully occluded) then we
         // always drop our rendering priority down because it's just
         // mostly wasted work.
-        //
-        // The renderer itself should be doing this as well (for example
-        // Metal will stop our DisplayLink) but this also helps with
-        // general forced updates and CPU usage i.e. a rebuild cells call.
         if (!self.flags.visible) break :class .utility;
 
         // If we're not focused, but we're visible, then we set a higher
@@ -352,8 +343,8 @@ fn drainMailbox(self: *Thread) !void {
                 try self.renderer.setFocus(v);
 
                 if (!v) {
+                    // Stop the draw timer
                     if (self.config.custom_shader_animation != .always) {
-                        // Stop the draw timer
                         self.stopDrawTimer();
                     }
 
@@ -454,8 +445,6 @@ fn changeConfig(self: *Thread, config: *const DerivedConfig) !void {
     self.config = config.*;
 }
 
-/// Trigger a draw. This will not update frame data or anything, it will
-/// just trigger a draw/paint.
 fn drawFrame(self: *Thread, now: bool) void {
     // If we're invisible, we do not draw.
     if (!self.flags.visible) return;
@@ -500,23 +489,6 @@ fn wakeupCallback(
     // Render immediately
     _ = renderCallback(t, undefined, undefined, {});
 
-    // The below is not used anymore but if we ever want to introduce
-    // a configuration to introduce a delay to coalesce renders, we can
-    // use this.
-    //
-    // // If the timer is already active then we don't have to do anything.
-    // if (t.render_c.state() == .active) return .rearm;
-    //
-    // // Timer is not active, let's start it
-    // t.render_h.run(
-    //     &t.loop,
-    //     &t.render_c,
-    //     10,
-    //     Thread,
-    //     t,
-    //     renderCallback,
-    // );
-
     return .rearm;
 }
 
@@ -649,12 +621,6 @@ fn cursorCancelCallback(
     return .disarm;
 }
 
-// fn prepFrameCallback(h: *libuv.Prepare) void {
-//     _ = h;
-//
-//     tracy.frameMark();
-// }
-
 fn stopCallback(
     self_: ?*Thread,
     _: *xev.Loop,
