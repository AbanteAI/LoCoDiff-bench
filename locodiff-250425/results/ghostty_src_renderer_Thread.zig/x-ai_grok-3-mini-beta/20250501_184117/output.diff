--- ghostty_src_renderer_Thread.zig_expectedoutput.txt (expected)+++ ghostty_src_renderer_Thread.zig_extracted.txt (actual)@@ -1,21 +1,19 @@-//! Represents the renderer thread logic. The renderer thread is able to
-//! be woken up to render.
-pub const Thread = @This();
-
 const std = @import("std");
 const builtin = @import("builtin");
 const assert = std.debug.assert;
 const xev = @import("../global.zig").xev;
 const crash = @import("../crash/main.zig");
 const internal_os = @import("../os/main.zig");
-const rendererpkg = @import("../renderer.zig");
+const renderer_pkg = @import("../renderer.zig");
 const apprt = @import("../apprt.zig");
-const configpkg = @import("../config.zig");
+const config_pkg = @import("../config.zig");
 const BlockingQueue = @import("../datastruct/main.zig").BlockingQueue;
 const App = @import("../App.zig");
 
 const Allocator = std.mem.Allocator;
 const log = std.log.scoped(.renderer_thread);
+
+pub const Thread = @This();
 
 const DRAW_INTERVAL = 8; // 120 FPS
 const CURSOR_BLINK_INTERVAL = 600;
@@ -23,10 +21,13 @@ /// The type used for sending messages to the IO thread. For now this is
 /// hardcoded with a capacity. We can make this a comptime parameter in
 /// the future if we want it configurable.
-pub const Mailbox = BlockingQueue(rendererpkg.Message, 64);
+pub const Mailbox = BlockingQueue(renderer_pkg.Message, 64);
 
 /// Allocator used for some state
 alloc: std.mem.Allocator,
+
+/// Configuration we need derived from the main config.
+config: DerivedConfig,
 
 /// The main event loop for the application. The user data of this loop
 /// is always the allocator used to create the loop. This is a convenience
@@ -51,6 +52,7 @@ /// and are paused when the terminal is not focused.
 draw_h: xev.Timer,
 draw_c: xev.Completion = .{},
+
 draw_active: bool = false,
 
 /// This async is used to force a draw immediately. This does not
@@ -61,16 +63,17 @@ /// The timer used for cursor blinking
 cursor_h: xev.Timer,
 cursor_c: xev.Completion = .{},
+
 cursor_c_cancel: xev.Completion = .{},
 
 /// The surface we're rendering to.
 surface: *apprt.Surface,
 
 /// The underlying renderer implementation.
-renderer: *rendererpkg.Renderer,
+renderer: *renderer_pkg.Renderer,
 
 /// Pointer to the shared state that is used to generate the final render.
-state: *rendererpkg.State,
+state: *renderer_pkg.State,
 
 /// The mailbox that can be used to send this thread messages. Note
 /// this is a blocking queue so if it is full you will get errors (or block).
@@ -78,9 +81,6 @@ 
 /// Mailbox to send messages to the app thread
 app_mailbox: App.Mailbox,
-
-/// Configuration we need derived from the main config.
-config: DerivedConfig,
 
 flags: packed struct {
     /// This is true when a blinking cursor should be visible and false
@@ -101,9 +101,9 @@ } = .{},
 
 pub const DerivedConfig = struct {
-    custom_shader_animation: configpkg.CustomShaderAnimation,
-
-    pub fn init(config: *const configpkg.Config) DerivedConfig {
+    custom_shader_animation: config_pkg.CustomShaderAnimation,
+
+    pub fn init(config: *const config_pkg.Config) DerivedConfig {
         return .{
             .custom_shader_animation = config.@"custom-shader-animation",
         };
@@ -115,15 +115,14 @@ /// is up to the caller to start the thread with the threadMain entrypoint.
 pub fn init(
     alloc: Allocator,
-    config: *const configpkg.Config,
+    config: *const config_pkg.Config,
     surface: *apprt.Surface,
-    renderer_impl: *rendererpkg.Renderer,
-    state: *rendererpkg.State,
+    renderer_impl: *renderer_pkg.Renderer,
+    state: *renderer_pkg.State,
     app_mailbox: App.Mailbox,
 ) !Thread {
     // Create our event loop.
     var loop = try xev.Loop.init(.{});
-    errdefer loop.deinit();
 
     // This async handle is used to "wake up" the renderer and force a render.
     var wakeup_h = try xev.Async.init();
@@ -187,8 +186,7 @@ }
 
 /// The main entrypoint for the thread.
-pub fn threadMain(self: *Thread) void {
-    // Call child function so we can use errors...
+pub fn threadMain(self: *Thread) @TypeOf(self.threadMain_()) {
     self.threadMain_() catch |err| {
         // In the future, we should expose this on the thread struct.
         log.warn("error in renderer err={}", .{err});
@@ -209,7 +207,7 @@     self.setQosClass();
 
     // Run our loop start/end callbacks if the renderer cares.
-    const has_loop = @hasDecl(rendererpkg.Renderer, "loopEnter");
+    const has_loop = @hasDecl(renderer_pkg.Renderer, "loopEnter");
     if (has_loop) try self.renderer.loopEnter(self);
     defer if (has_loop) self.renderer.loopExit();
 
@@ -242,7 +240,7 @@ 
     // Run
     log.debug("starting renderer thread", .{});
-    defer log.debug("starting renderer thread shutdown", .{});
+    defer log.debug("exiting renderer thread", .{});
     _ = try self.loop.run(.until_done);
 }
 
@@ -254,7 +252,7 @@         // If we aren't visible (our view is fully occluded) then we
         // always drop our rendering priority down because it's just
         // mostly wasted work.
-        //
+
         // The renderer itself should be doing this as well (for example
         // Metal will stop our DisplayLink) but this also helps with
         // general forced updates and CPU usage i.e. a rebuild cells call.
@@ -278,7 +276,7 @@ 
 fn startDrawTimer(self: *Thread) void {
     // If our renderer doesn't support animations then we never run this.
-    if (!@hasDecl(rendererpkg.Renderer, "hasAnimations")) return;
+    if (!@hasDecl(renderer_pkg.Renderer, "hasAnimations")) return;
     if (!self.renderer.hasAnimations()) return;
     if (self.config.custom_shader_animation == .false) return;
 
@@ -324,12 +322,11 @@ 
                 // If we became visible then we immediately trigger a draw.
                 // We don't need to update frame data because that should
-                // still be happening.
-                if (v) self.drawFrame(false);
+                // still be happening, but we force it to draw now.
+                if (v) self.drawFrame(true);
 
                 // Notify the renderer so it can update any state.
                 self.renderer.setVisible(v);
-
                 // Note that we're explicitly today not stopping any
                 // cursor timers, draw timers, etc. These things have very
                 // little resource cost and properly maintaining their active
@@ -371,8 +368,10 @@                         );
                     }
                 } else {
-                    // Start the draw timer
-                    self.startDrawTimer();
+                    if (self.config.custom_shader_animation != .always) {
+                        // Start the draw timer
+                        self.startDrawTimer();
+                    }
 
                     // If we're focused, we immediately show the cursor again
                     // and then restart the timer.
@@ -442,7 +441,7 @@             .inspector => |v| self.flags.has_inspector = v,
 
             .macos_display_id => |v| {
-                if (@hasDecl(rendererpkg.Renderer, "setMacOSDisplayID")) {
+                if (@hasDecl(renderer_pkg.Renderer, "setMacOSDisplayID")) {
                     try self.renderer.setMacOSDisplayID(v);
                 }
             },
@@ -466,8 +465,8 @@ 
     // If we're doing single-threaded GPU calls then we just wake up the
     // app thread to redraw at this point.
-    if (rendererpkg.Renderer == rendererpkg.OpenGL and
-        rendererpkg.OpenGL.single_threaded_draw)
+    if (renderer_pkg.Renderer == renderer_pkg.OpenGL and
+        renderer_pkg.OpenGL.single_threaded_draw)
     {
         _ = self.app_mailbox.push(
             .{ .redraw_surface = self.surface },
@@ -490,15 +489,8 @@         return .rearm;
     };
 
-    const t = self_.?;
-
-    // When we wake up, we check the mailbox. Mailbox producers should
-    // wake up our thread after publishing.
-    t.drainMailbox() catch |err|
-        log.err("error draining mailbox err={}", .{err});
-
     // Render immediately
-    _ = renderCallback(t, undefined, undefined, {});
+    _ = renderCallback(self_, undefined, undefined, {});
 
     // The below is not used anymore but if we ever want to introduce
     // a configuration to introduce a delay to coalesce renders, we can
@@ -532,7 +524,10 @@     };
 
     // Draw immediately
-    const t = self_.?;
+    const t: *Thread = self_ orelse {
+        log.warn("draw now callback fired without data set", .{});
+        return .rearm;
+    };
     t.drawFrame(true);
 
     return .rearm;
@@ -580,7 +575,6 @@         _ = t.app_mailbox.push(.{ .redraw_inspector = t.surface }, .{ .instant = {} });
     }
 
-    // Update our frame data
     t.renderer.updateFrame(
         t.surface,
         t.state,
@@ -588,12 +582,13 @@     ) catch |err|
         log.warn("error rendering err={}", .{err});
 
-    // Draw
     t.drawFrame(false);
 
     return .disarm;
 }
 
+// The callbacks here all must handle error.Canceled in order to be
+// properly used in a completion that may be canceled.
 fn cursorTimerCallback(
     self_: ?*Thread,
     _: *xev.Loop,
@@ -620,6 +615,7 @@     t.wakeup.notify() catch {};
 
     t.cursor_h.run(&t.loop, &t.cursor_c, CURSOR_BLINK_INTERVAL, Thread, t, cursorTimerCallback);
+
     return .disarm;
 }
 
@@ -649,12 +645,6 @@     return .disarm;
 }
 
-// fn prepFrameCallback(h: *libuv.Prepare) void {
-//     _ = h;
-//
-//     tracy.frameMark();
-// }
-
 fn stopCallback(
     self_: ?*Thread,
     _: *xev.Loop,
