
index 1f6f3a94e..b92fdc1c3 100644
--- a/aider_scripts_issues.py_expectedoutput.txt (expected):tmp/tmpts7ould2_expected.txt	
+++ b/aider_scripts_issues.py_extracted.txt (actual):tmp/tmp17l22ixj_actual.txt	
@@ -23,7 +23,6 @@ def has_been_reopened(issue_number):
 load_dotenv()
 
 BOT_SUFFIX = """
-
 Note: [A bot script](https://github.com/Aider-AI/aider/blob/aider_scripts_issues.py_extracted.txt (actual):
         latest_stale = datetime.strptime(stale_events[-1]["created_at"], "%Y-%m-%dT%H:%M:%SZ")
 
         # Get comments since the stale label
-        comments_url = (
-            f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-        )
+        comments_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
         response = requests.get(comments_url, headers=headers)
         response.raise_for_status()
         comments = response.json()
@@ -319,7 +316,7 @@ def handle_stale_closing(all_issues, auto_yes):
                         continue
 
                 # Add closing comment
-                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
+                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
                 response = requests.post(
                     comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
                 )
@@ -421,11 +418,13 @@ def handle_duplicate_issues(all_issues, auto_yes):
         )
 
         if not auto_yes:
+            # Confirmation prompt
             confirm = input("Do you want to comment and close duplicate issues? (y/n): ")
             if confirm.lower() != "y":
                 print("Skipping this group of issues.")
                 continue
 
+        # Comment and close duplicate issues
         for issue in issues:
             if issue["number"] != oldest_issue["number"]:
                 comment_and_close_duplicate(issue, oldest_issue)
