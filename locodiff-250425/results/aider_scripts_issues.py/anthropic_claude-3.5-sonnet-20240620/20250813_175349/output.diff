
index 1f6f3a94e..a3a034605 100644
--- a/aider_scripts_issues.py_expectedoutput.txt (expected):tmp/tmpmc387cmu_expected.txt	
+++ b/aider_scripts_issues.py_extracted.txt (actual):tmp/tmp6vg613tz_actual.txt	
@@ -10,20 +10,10 @@ import requests
 from dotenv import load_dotenv
 from tqdm import tqdm
 
-
-def has_been_reopened(issue_number):
-    timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
-    response = requests.get(timeline_url, headers=headers)
-    response.raise_for_status()
-    events = response.json()
-    return any(event["event"] == "reopened" for event in events if "event" in event)
-
-
 # Load environment variables from .env file
 load_dotenv()
 
 BOT_SUFFIX = """
-
 Note: [A bot script](https://github.com/Aider-AI/aider/blob/aider_scripts_issues.py_extracted.txt (actual): f"token {TOKEN}", "Accept": "application/vnd.github.v3+json"}
 
 
+def has_been_reopened(issue_number):
+    timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
+    response = requests.get(timeline_url, headers=headers)
+    response.raise_for_status()
+    events = response.json()
+    return any(event["event"] == "reopened" for event in events if "event" in event)
+
+
 def get_issues(state="open"):
     issues = []
     page = 1
@@ -411,7 +409,6 @@ def handle_duplicate_issues(all_issues, auto_yes):
 
         print(f"\nIssue: {subject}")
         print(f"Open issues: {len(issues)}")
-        sorted_issues = sorted(issues, key=lambda x: x["number"], reverse=True)
         for issue in sorted_issues:
             print(f"  - #{issue['number']}: {issue['comments']} comments {issue['html_url']}")
 
