--- aider_scripts_issues.py_expectedoutput.txt (expected)+++ aider_scripts_issues.py_extracted.txt (actual)@@ -10,20 +10,10 @@ from dotenv import load_dotenv
 from tqdm import tqdm
 
-
-def has_been_reopened(issue_number):
-    timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
-    response = requests.get(timeline_url, headers=headers)
-    response.raise_for_status()
-    events = response.json()
-    return any(event["event"] == "reopened" for event in events if "event" in event)
-
-
 # Load environment variables from .env file
 load_dotenv()
 
 BOT_SUFFIX = """
-
 Note: [A bot script](https://github.com/Aider-AI/aider/blob/main/scripts/issues.py) made these updates to the issue.
 """  # noqa
 
@@ -47,17 +37,16 @@ )
 
 CLOSE_FIXED_ENHANCEMENT_COMMENT = (
-    """I'm closing this enhancement request since it has been marked as 'fixed' for over """
-    """3 weeks. The requested feature should now be available in recent versions of aider.\n\n"""
-    """If you find that this enhancement is still needed, please feel free to reopen this """
-    """issue or create a new one.""" + BOT_SUFFIX
+    """I'm closing this enhancement request since it has been marked as 'fixed' for over 3 weeks. The requested feature should now be available in recent versions of aider.
+
+If you find that this enhancement is still needed, please feel free to reopen this issue or create a new one."""
+    + BOT_SUFFIX
 )
 
 CLOSE_FIXED_BUG_COMMENT = (
-    """I'm closing this bug report since it has been marked as 'fixed' for over """
-    """3 weeks. This issue should be resolved in recent versions of aider.\n\n"""
-    """If you find that this bug is still present, please feel free to reopen this """
-    """issue or create a new one with steps to reproduce.""" + BOT_SUFFIX
+    """I'm closing this bug report since it has been marked as 'fixed' for over 3 weeks. This issue should be resolved in recent versions of aider.
+
+If you find that this bug is still present, please feel free to reopen this issue or create a new one with steps to reproduce.""" + BOT_SUFFIX
 )
 
 # GitHub API configuration
@@ -101,6 +90,14 @@     return issues
 
 
+def has_been_reopened(issue_number):
+    timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
+    response = requests.get(timeline_url, headers=headers)
+    response.raise_for_status()
+    events = response.json()
+    return any(event["event"] == "reopened" for event in events if "event" in event)
+
+
 def group_issues_by_subject(issues):
     grouped_issues = defaultdict(list)
     pattern = r"Uncaught .+ in .+ line \d+"
@@ -155,9 +152,7 @@         # Skip pull requests
         if "pull_request" in issue:
             continue
-
         if not issue["labels"] and issue["state"] == "open":
-            # Get comments for this issue
             comments_url = (
                 f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             )
@@ -222,7 +217,7 @@         # Check if issue is stale (no activity for 14 days)
         days_inactive = (datetime.now() - latest_activity).days
         if days_inactive >= 14:
-            print(f"\nStale issue found: #{issue['number']}: {issue['title']}\n{issue['html_url']}")
+            print(f"\nStale issue found: #{issue['number']}: {issue['title']}")
             print(f"  No activity for {days_inactive} days")
 
             if not auto_yes:
@@ -232,9 +227,7 @@                     continue
 
             # Add comment
-            comment_url = (
-                f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-            )
+            comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             response = requests.post(comment_url, headers=headers, json={"body": STALE_COMMENT})
             response.raise_for_status()
 
@@ -256,9 +249,7 @@             continue
 
         # Get the timeline to find when the stale label was last added
-        timeline_url = (
-            f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/timeline"
-        )
+        timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/timeline"
         response = requests.get(timeline_url, headers=headers)
         response.raise_for_status()
         events = response.json()
@@ -276,9 +267,7 @@         latest_stale = datetime.strptime(stale_events[-1]["created_at"], "%Y-%m-%dT%H:%M:%SZ")
 
         # Get comments since the stale label
-        comments_url = (
-            f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-        )
+        comments_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
         response = requests.get(comments_url, headers=headers)
         response.raise_for_status()
         comments = response.json()
@@ -319,10 +308,8 @@                         continue
 
                 # Add closing comment
-                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
-                response = requests.post(
-                    comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
-                )
+                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
+                response = requests.post(comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT})
                 response.raise_for_status()
 
                 # Close the issue
@@ -348,9 +335,7 @@             continue
 
         # Find when the fixed label was added
-        timeline_url = (
-            f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/timeline"
-        )
+        timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/timeline"
         response = requests.get(timeline_url, headers=headers)
         response.raise_for_status()
         events = response.json()
@@ -380,9 +365,7 @@                     continue
 
             # Add closing comment
-            comment_url = (
-                f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-            )
+            comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             comment = CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
             response = requests.post(comment_url, headers=headers, json={"body": comment})
             response.raise_for_status()
@@ -417,7 +400,7 @@ 
         print(
             f"Oldest issue: #{oldest_issue['number']}: {oldest_issue['comments']} comments"
-            f" {oldest_issue['html_url']} ({oldest_issue['state']})"
+            f" {oldest_issue['html_url']} (created on {oldest_issue['created_at']})"
         )
 
         if not auto_yes:
