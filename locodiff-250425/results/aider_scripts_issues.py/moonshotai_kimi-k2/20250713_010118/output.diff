
index 1f6f3a94e..84842921e 100644
--- a/aider_scripts_issues.py_expectedoutput.txt (expected):tmp/tmp3tnvkgzg_expected.txt	
+++ b/aider_scripts_issues.py_extracted.txt (actual):tmp/tmpzlgl9vj5_actual.txt	
@@ -131,9 +131,7 @@ def comment_and_close_duplicate(issue, oldest_issue):
         print(f"  - Skipping priority issue #{issue['number']}")
         return
 
-    comment_url = (
-        f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-    )
+    comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
     close_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
 
     comment_body = DUPLICATE_COMMENT.format(oldest_issue_number=oldest_issue["number"])
@@ -158,9 +156,7 @@ def find_unlabeled_with_paul_comments(issues):
 
         if not issue["labels"] and issue["state"] == "open":
             # Get comments for this issue
-            comments_url = (
-                f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-            )
+            comments_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             response = requests.get(comments_url, headers=headers)
             response.raise_for_status()
             comments = response.json()
@@ -222,7 +218,9 @@ def handle_stale_issues(all_issues, auto_yes):
         # Check if issue is stale (no activity for 14 days)
         days_inactive = (datetime.now() - latest_activity).days
         if days_inactive >= 14:
-            print(f"\nStale issue found: #{issue['number']}: {issue['title']}\n{issue['html_url']}")
+            print(
+                f"\nStale issue found: #{issue['number']}: {issue['title']}\n{issue['html_url']}"
+            )
             print(f"  No activity for {days_inactive} days")
 
             if not auto_yes:
@@ -235,12 +233,16 @@ def handle_stale_issues(all_issues, auto_yes):
             comment_url = (
                 f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             )
-            response = requests.post(comment_url, headers=headers, json={"body": STALE_COMMENT})
+            response = requests.post(
+                comment_url, headers=headers, json={"body": STALE_COMMENT}
+            )
             response.raise_for_status()
 
             # Add stale label
             url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
-            response = requests.patch(url, headers=headers, json={"labels": ["question", "stale"]})
+            response = requests.patch(
+                url, headers=headers, json={"labels": ["question", "stale"]}
+            )
             response.raise_for_status()
 
             print(f"  Added stale label and comment to #{issue['number']}")
@@ -252,7 +254,11 @@ def handle_stale_closing(all_issues, auto_yes):
     for issue in all_issues:
         # Skip if not open, not stale, or is priority
         labels = [label["name"] for label in issue["labels"]]
-        if issue["state"] != "open" or "stale" not in labels or "priority" in labels:
+        if (
+            issue["state"] != "open"
+            or "stale" not in labels
+            or "priority" in labels
+        ):
             continue
 
         # Get the timeline to find when the stale label was last added
@@ -267,7 +273,8 @@ def handle_stale_closing(all_issues, auto_yes):
         stale_events = [
             event
             for event in events
-            if event.get("event") == "labeled" and event.get("label", {}).get("name") == "stale"
+            if event.get("event") == "labeled"
+            and event.get("label", {}).get("name") == "stale"
         ]
 
         if not stale_events:
@@ -291,7 +298,9 @@ def handle_stale_closing(all_issues, auto_yes):
         ]
 
         if new_comments:
-            print(f"\nFound new activity on stale issue #{issue['number']}: {issue['title']}")
+            print(
+                f"\nFound new activity on stale issue #{issue['number']}: {issue['title']}"
+            )
             print(f"  {len(new_comments)} new comments since stale label")
 
             if not auto_yes:
@@ -302,14 +311,18 @@ def handle_stale_closing(all_issues, auto_yes):
 
             # Remove stale label but keep question label
             url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
-            response = requests.patch(url, headers=headers, json={"labels": ["question"]})
+            response = requests.patch(
+                url, headers=headers, json={"labels": ["question"]}
+            )
             response.raise_for_status()
             print(f"  Removed stale label from #{issue['number']}")
         else:
             # Check if it's been 7 days since stale label
             days_stale = (datetime.now() - latest_stale).days
             if days_stale >= 7:
-                print(f"\nStale issue ready for closing #{issue['number']}: {issue['title']}")
+                print(
+                    f"\nStale issue ready for closing #{issue['number']}: {issue['title']}"
+                )
                 print(f"  No activity for {days_stale} days since stale label")
 
                 if not auto_yes:
@@ -321,13 +334,17 @@ def handle_stale_closing(all_issues, auto_yes):
                 # Add closing comment
                 comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
                 response = requests.post(
-                    comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
+                    comment_url,
+                    headers=headers,
+                    json={"body": CLOSE_STALE_COMMENT},
                 )
                 response.raise_for_status()
 
                 # Close the issue
                 url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
-                response = requests.patch(url, headers=headers, json={"state": "closed"})
+                response = requests.patch(
+                    url, headers=headers, json={"state": "closed"}
+                )
                 response.raise_for_status()
                 print(f"  Closed issue #{issue['number']}")
 
@@ -338,7 +355,11 @@ def handle_fixed_issues(all_issues, auto_yes):
     for issue in all_issues:
         # Skip if not open, doesn't have fixed label, or is priority
         labels = [label["name"] for label in issue["labels"]]
-        if issue["state"] != "open" or "fixed" not in labels or "priority" in labels:
+        if (
+            issue["state"] != "open"
+            or "fixed" not in labels
+            or "priority" in labels
+        ):
             continue
 
         # Check if it's an enhancement or bug
@@ -359,7 +380,8 @@ def handle_fixed_issues(all_issues, auto_yes):
         fixed_events = [
             event
             for event in events
-            if event.get("event") == "labeled" and event.get("label", {}).get("name") == "fixed"
+            if event.get("event") == "labeled"
+            and event.get("label", {}).get("name") == "fixed"
         ]
 
         if not fixed_events:
@@ -370,7 +392,9 @@ def handle_fixed_issues(all_issues, auto_yes):
 
         if days_fixed >= 21:
             issue_type = "enhancement" if is_enhancement else "bug"
-            print(f"\nFixed {issue_type} ready for closing #{issue['number']}: {issue['title']}")
+            print(
+                f"\nFixed {issue_type} ready for closing #{issue['number']}: {issue['title']}"
+            )
             print(f"  Has been marked fixed for {days_fixed} days")
 
             if not auto_yes:
@@ -383,13 +407,21 @@ def handle_fixed_issues(all_issues, auto_yes):
             comment_url = (
                 f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             )
-            comment = CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
-            response = requests.post(comment_url, headers=headers, json={"body": comment})
+            comment = (
+                CLOSE_FIXED_ENHANCEMENT_COMMENT
+                if is_enhancement
+                else CLOSE_FIXED_BUG_COMMENT
+            )
+            response = requests.post(
+                comment_url, headers=headers, json={"body": comment}
+            )
             response.raise_for_status()
 
             # Close the issue
             url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
-            response = requests.patch(url, headers=headers, json={"state": "closed"})
+            response = requests.patch(
+                url, headers=headers, json={"state": "closed"}
+            )
             response.raise_for_status()
             print(f"  Closed issue #{issue['number']}")
 
@@ -421,7 +453,9 @@ def handle_duplicate_issues(all_issues, auto_yes):
         )
 
         if not auto_yes:
-            confirm = input("Do you want to comment and close duplicate issues? (y/n): ")
+            confirm = input(
+                "Do you want to comment and close duplicate issues? (y/n): "
+            )
             if confirm.lower() != "y":
                 print("Skipping this group of issues.")
                 continue
@@ -437,7 +471,9 @@ def handle_duplicate_issues(all_issues, auto_yes):
 def main():
     parser = argparse.ArgumentParser(description="Handle duplicate GitHub issues")
     parser.add_argument(
-        "--yes", action="store_true", help="Automatically close duplicates without prompting"
+        "--yes",
+        action="store_true",
+        help="Automatically close duplicates without prompting",
     )
     args = parser.parse_args()
 
