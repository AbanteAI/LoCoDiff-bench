--- aider_scripts_issues.py_expectedoutput.txt (expected)+++ aider_scripts_issues.py_extracted.txt (actual)@@ -23,7 +23,6 @@ load_dotenv()
 
 BOT_SUFFIX = """
-
 Note: [A bot script](https://github.com/Aider-AI/aider/blob/main/scripts/issues.py) made these updates to the issue.
 """  # noqa
 
@@ -59,6 +58,7 @@     """If you find that this bug is still present, please feel free to reopen this """
     """issue or create a new one with steps to reproduce.""" + BOT_SUFFIX
 )
+
 
 # GitHub API configuration
 GITHUB_API_URL = "https://api.github.com"
@@ -81,8 +81,18 @@         params={"state": state, "per_page": 1},
     )
     response.raise_for_status()
-    total_count = int(response.headers.get("Link", "").split("page=")[-1].split(">")[0])
+    link_header = response.headers.get("Link", "")
+    last_page_match = re.search(r'page=(\d+)[^>]*>; rel="last"$', link_header)
+
+    total_count = int(response.headers.get('X-Total')) if 'X-Total' in response.headers else (
+        int(last_page_match.group(1)) * per_page if last_page_match else (
+            len(response.json()) if response.json() else 0
+        )
+    )
+
     total_pages = (total_count + per_page - 1) // per_page
+    if total_pages == 0 and total_count > 0: # Handle case where total_count is less than per_page
+         total_pages = 1
 
     with tqdm(total=total_pages, desc="Collecting issues", unit="page") as pbar:
         while True:
@@ -106,7 +116,7 @@     pattern = r"Uncaught .+ in .+ line \d+"
     for issue in issues:
         if re.search(pattern, issue["title"]) and not has_been_reopened(issue["number"]):
-            subject = issue["title"]
+            subject = issue]["title"]
             grouped_issues[subject].append(issue)
     return grouped_issues
 
@@ -276,9 +286,7 @@         latest_stale = datetime.strptime(stale_events[-1]["created_at"], "%Y-%m-%dT%H:%M:%SZ")
 
         # Get comments since the stale label
-        comments_url = (
-            f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
-        )
+        comments_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
         response = requests.get(comments_url, headers=headers)
         response.raise_for_status()
         comments = response.json()
@@ -319,7 +327,9 @@                         continue
 
                 # Add closing comment
-                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
+                comment_url = (
+                    f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
+                )
                 response = requests.post(
                     comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
                 )
