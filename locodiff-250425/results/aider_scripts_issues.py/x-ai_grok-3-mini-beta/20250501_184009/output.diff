
index 1f6f3a94..73589cab 100644
--- a/aider_scripts_issues.py_expectedoutput.txt (expected):tmp/tmpgtmvgh7t_expected.txt	
+++ b/aider_scripts_issues.py_extracted.txt (actual):tmp/tmpi61u9z0__actual.txt	
@@ -5,11 +5,8 @@ import os
 import re
 from collections import defaultdict
 from datetime import datetime
-
 import requests
 from dotenv import load_dotenv
-from tqdm import tqdm
-
 
 def has_been_reopened(issue_number):
     timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
@@ -18,46 +15,42 @@ def has_been_reopened(issue_number):
     events = response.json()
     return any(event["event"] == "reopened" for event in events if "event" in event)
 
-
 # Load environment variables from .env file
 load_dotenv()
 
-BOT_SUFFIX = """
-
-Note: [A bot script](https://github.com/Aider-AI/aider/blob/aider_scripts_issues.py_extracted.txt (actual): A [bot script](https://github.com/Aider-AI/aider/blob/aider_scripts_issues.py_extracted.txt (actual): f"token {TOKEN}", "Accept": "application/vnd.github.v3+json"}
-
+headers = {
+    "Authorization": f"token {TOKEN}",
+    "Accept": "application/vnd.github.v3+json",
+}
 
 def get_issues(state="open"):
     issues = []
@@ -100,6 +95,7 @@ def get_issues(state="open"):
             pbar.update(1)
     return issues
 
+import re
 
 def group_issues_by_subject(issues):
     grouped_issues = defaultdict(list)
@@ -110,7 +106,6 @@ def group_issues_by_subject(issues):
             grouped_issues[subject].append(issue)
     return grouped_issues
 
-
 def find_oldest_issue(subject, all_issues):
     oldest_issue = None
     oldest_date = datetime.now()
@@ -121,10 +116,8 @@ def find_oldest_issue(subject, all_issues):
             if created_at < oldest_date:
                 oldest_date = created_at
                 oldest_issue = issue
-
     return oldest_issue
 
-
 def comment_and_close_duplicate(issue, oldest_issue):
     # Skip if issue is labeled as priority
     if "priority" in [label["name"] for label in issue["labels"]]:
@@ -148,7 +141,6 @@ def comment_and_close_duplicate(issue, oldest_issue):
 
     print(f"  - Commented and closed issue #{issue['number']}")
 
-
 def find_unlabeled_with_paul_comments(issues):
     unlabeled_issues = []
     for issue in issues:
@@ -170,7 +162,6 @@ def find_unlabeled_with_paul_comments(issues):
                 unlabeled_issues.append(issue)
     return unlabeled_issues
 
-
 def handle_unlabeled_issues(all_issues, auto_yes):
     print("\nFinding unlabeled issues with paul-gauthier comments...")
     unlabeled_issues = [
@@ -200,7 +191,6 @@ def handle_unlabeled_issues(all_issues, auto_yes):
         response.raise_for_status()
         print(f"  - Added 'question' label to #{issue['number']}")
 
-
 def handle_stale_issues(all_issues, auto_yes):
     print("\nChecking for stale question issues...")
 
@@ -242,10 +232,8 @@ def handle_stale_issues(all_issues, auto_yes):
             url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
             response = requests.patch(url, headers=headers, json={"labels": ["question", "stale"]})
             response.raise_for_status()
-
             print(f"  Added stale label and comment to #{issue['number']}")
 
-
 def handle_stale_closing(all_issues, auto_yes):
     print("\nChecking for issues to close or unstale...")
 
@@ -319,7 +307,7 @@ def handle_stale_closing(all_issues, auto_yes):
                         continue
 
                 # Add closing comment
-                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
+                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
                 response = requests.post(
                     comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
                 )
@@ -331,7 +319,6 @@ def handle_stale_closing(all_issues, auto_yes):
                 response.raise_for_status()
                 print(f"  Closed issue #{issue['number']}")
 
-
 def handle_fixed_issues(all_issues, auto_yes):
     print("\nChecking for fixed enhancement and bug issues to close...")
 
@@ -383,7 +370,9 @@ def handle_fixed_issues(all_issues, auto_yes):
             comment_url = (
                 f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             )
-            comment = CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
+            comment = (
+                CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
+            )
             response = requests.post(comment_url, headers=headers, json={"body": comment})
             response.raise_for_status()
 
@@ -393,13 +382,9 @@ def handle_fixed_issues(all_issues, auto_yes):
             response.raise_for_status()
             print(f"  Closed issue #{issue['number']}")
 
-
 def handle_duplicate_issues(all_issues, auto_yes):
-    open_issues = [issue for issue in all_issues if issue["state"] == "open"]
-    grouped_open_issues = group_issues_by_subject(open_issues)
-
     print("Looking for duplicate issues (skipping reopened issues)...")
-    for subject, issues in grouped_open_issues.items():
+    for subject, issues in group_issues_by_subject([issue for issue in all_issues if issue["state"] == "open"]).items():
         oldest_issue = find_oldest_issue(subject, all_issues)
         if not oldest_issue:
             continue
@@ -433,12 +418,9 @@ def handle_duplicate_issues(all_issues, auto_yes):
         if oldest_issue["state"] == "open":
             print(f"Oldest issue #{oldest_issue['number']} left open")
 
-
 def main():
     parser = argparse.ArgumentParser(description="Handle duplicate GitHub issues")
-    parser.add_argument(
-        "--yes", action="store_true", help="Automatically close duplicates without prompting"
-    )
+    parser.add_argument("--yes", action="store_true", help="Automatically perform actions without prompting")
     args = parser.parse_args()
 
     if not TOKEN:
@@ -450,9 +432,8 @@ def main():
     handle_unlabeled_issues(all_issues, args.yes)
     handle_stale_issues(all_issues, args.yes)
     handle_stale_closing(all_issues, args.yes)
-    handle_duplicate_issues(all_issues, args.yes)
     handle_fixed_issues(all_issues, args.yes)
-
+    handle_duplicate_issues(all_issues, args.yes)
 
 if __name__ == "__main__":
     main()
\ No newline at end of file
