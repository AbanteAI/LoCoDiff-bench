--- aider_scripts_issues.py_expectedoutput.txt (expected)+++ aider_scripts_issues.py_extracted.txt (actual)@@ -5,11 +5,8 @@ import re
 from collections import defaultdict
 from datetime import datetime
-
 import requests
 from dotenv import load_dotenv
-from tqdm import tqdm
-
 
 def has_been_reopened(issue_number):
     timeline_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue_number}/timeline"
@@ -18,46 +15,42 @@     events = response.json()
     return any(event["event"] == "reopened" for event in events if "event" in event)
 
-
 # Load environment variables from .env file
 load_dotenv()
 
-BOT_SUFFIX = """
-
-Note: [A bot script](https://github.com/Aider-AI/aider/blob/main/scripts/issues.py) made these updates to the issue.
-"""  # noqa
+BOT_SUFFIX = "Note: A [bot script](https://github.com/Aider-AI/aider/blob/main/scripts/issues.py) made these updates to the issue.\n"  # noqa
 
 DUPLICATE_COMMENT = (
-    """Thanks for trying aider and filing this issue.
-
-This looks like a duplicate of #{oldest_issue_number}. Please see the comments there for more information, and feel free to continue the discussion within that issue.
-
-I'm going to close this issue for now. But please let me know if you think this is actually a distinct issue and I will reopen this issue."""  # noqa
+    "Thanks for trying aider and filing this issue.\n\n"
+    "This looks like a duplicate of #{oldest_issue_number}. Please see the comments there for more information, and feel free to continue the discussion within that issue.\n\n"
+    "I'm going to close this issue for now. But please let me know if you think this is actually a distinct issue and I will reopen this issue."
     + BOT_SUFFIX
 )
 
 STALE_COMMENT = (
-    """I'm labeling this issue as stale because it has been open for 2 weeks with no activity. If there are no additional comments, I will close it in 7 days."""  # noqa
+    "I'm labeling this issue as stale because it has been open for 2 weeks with no activity. If there are no additional comments, I will close it in 7 days."
     + BOT_SUFFIX
 )
 
 CLOSE_STALE_COMMENT = (
-    """I'm closing this issue because it has been stalled for 3 weeks with no activity. Feel free to add a comment here and we can re-open it. Or feel free to file a new issue at any time."""  # noqa
+    "I'm closing this issue because it has been stalled for 3 weeks with no activity. Feel free to add a comment here and we can re-open it. Or feel free to file a new issue at any time."
     + BOT_SUFFIX
 )
 
 CLOSE_FIXED_ENHANCEMENT_COMMENT = (
-    """I'm closing this enhancement request since it has been marked as 'fixed' for over """
-    """3 weeks. The requested feature should now be available in recent versions of aider.\n\n"""
-    """If you find that this enhancement is still needed, please feel free to reopen this """
-    """issue or create a new one.""" + BOT_SUFFIX
+    "I'm closing this enhancement request since it has been marked as 'fixed' for over "
+    "3 weeks. The requested feature should now be available in recent versions of aider.\n\n"
+    "If you find that this enhancement is still needed, please feel free to reopen this "
+    "issue or create a new one."
+    + BOT_SUFFIX
 )
 
 CLOSE_FIXED_BUG_COMMENT = (
-    """I'm closing this bug report since it has been marked as 'fixed' for over """
-    """3 weeks. This issue should be resolved in recent versions of aider.\n\n"""
-    """If you find that this bug is still present, please feel free to reopen this """
-    """issue or create a new one with steps to reproduce.""" + BOT_SUFFIX
+    "I'm closing this bug report since it has been marked as 'fixed' for over "
+    "3 weeks. This issue should be resolved in recent versions of aider.\n\n"
+    "If you find that this bug is still present, please feel free to reopen this "
+    "issue or create a new one with steps to reproduce."
+    + BOT_SUFFIX
 )
 
 # GitHub API configuration
@@ -66,8 +59,10 @@ REPO_NAME = "aider"
 TOKEN = os.getenv("GITHUB_TOKEN")
 
-headers = {"Authorization": f"token {TOKEN}", "Accept": "application/vnd.github.v3+json"}
-
+headers = {
+    "Authorization": f"token {TOKEN}",
+    "Accept": "application/vnd.github.v3+json",
+}
 
 def get_issues(state="open"):
     issues = []
@@ -100,6 +95,7 @@             pbar.update(1)
     return issues
 
+import re
 
 def group_issues_by_subject(issues):
     grouped_issues = defaultdict(list)
@@ -110,7 +106,6 @@             grouped_issues[subject].append(issue)
     return grouped_issues
 
-
 def find_oldest_issue(subject, all_issues):
     oldest_issue = None
     oldest_date = datetime.now()
@@ -121,9 +116,7 @@             if created_at < oldest_date:
                 oldest_date = created_at
                 oldest_issue = issue
-
     return oldest_issue
-
 
 def comment_and_close_duplicate(issue, oldest_issue):
     # Skip if issue is labeled as priority
@@ -147,7 +140,6 @@     response.raise_for_status()
 
     print(f"  - Commented and closed issue #{issue['number']}")
-
 
 def find_unlabeled_with_paul_comments(issues):
     unlabeled_issues = []
@@ -169,7 +161,6 @@             if any(comment["user"]["login"] == "paul-gauthier" for comment in comments):
                 unlabeled_issues.append(issue)
     return unlabeled_issues
-
 
 def handle_unlabeled_issues(all_issues, auto_yes):
     print("\nFinding unlabeled issues with paul-gauthier comments...")
@@ -199,7 +190,6 @@         response = requests.patch(url, headers=headers, json={"labels": ["question"]})
         response.raise_for_status()
         print(f"  - Added 'question' label to #{issue['number']}")
-
 
 def handle_stale_issues(all_issues, auto_yes):
     print("\nChecking for stale question issues...")
@@ -242,9 +232,7 @@             url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}"
             response = requests.patch(url, headers=headers, json={"labels": ["question", "stale"]})
             response.raise_for_status()
-
             print(f"  Added stale label and comment to #{issue['number']}")
-
 
 def handle_stale_closing(all_issues, auto_yes):
     print("\nChecking for issues to close or unstale...")
@@ -319,7 +307,7 @@                         continue
 
                 # Add closing comment
-                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"  # noqa
+                comment_url = f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
                 response = requests.post(
                     comment_url, headers=headers, json={"body": CLOSE_STALE_COMMENT}
                 )
@@ -330,7 +318,6 @@                 response = requests.patch(url, headers=headers, json={"state": "closed"})
                 response.raise_for_status()
                 print(f"  Closed issue #{issue['number']}")
-
 
 def handle_fixed_issues(all_issues, auto_yes):
     print("\nChecking for fixed enhancement and bug issues to close...")
@@ -383,7 +370,9 @@             comment_url = (
                 f"{GITHUB_API_URL}/repos/{REPO_OWNER}/{REPO_NAME}/issues/{issue['number']}/comments"
             )
-            comment = CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
+            comment = (
+                CLOSE_FIXED_ENHANCEMENT_COMMENT if is_enhancement else CLOSE_FIXED_BUG_COMMENT
+            )
             response = requests.post(comment_url, headers=headers, json={"body": comment})
             response.raise_for_status()
 
@@ -393,13 +382,9 @@             response.raise_for_status()
             print(f"  Closed issue #{issue['number']}")
 
-
 def handle_duplicate_issues(all_issues, auto_yes):
-    open_issues = [issue for issue in all_issues if issue["state"] == "open"]
-    grouped_open_issues = group_issues_by_subject(open_issues)
-
     print("Looking for duplicate issues (skipping reopened issues)...")
-    for subject, issues in grouped_open_issues.items():
+    for subject, issues in group_issues_by_subject([issue for issue in all_issues if issue["state"] == "open"]).items():
         oldest_issue = find_oldest_issue(subject, all_issues)
         if not oldest_issue:
             continue
@@ -433,12 +418,9 @@         if oldest_issue["state"] == "open":
             print(f"Oldest issue #{oldest_issue['number']} left open")
 
-
 def main():
     parser = argparse.ArgumentParser(description="Handle duplicate GitHub issues")
-    parser.add_argument(
-        "--yes", action="store_true", help="Automatically close duplicates without prompting"
-    )
+    parser.add_argument("--yes", action="store_true", help="Automatically perform actions without prompting")
     args = parser.parse_args()
 
     if not TOKEN:
@@ -450,9 +432,8 @@     handle_unlabeled_issues(all_issues, args.yes)
     handle_stale_issues(all_issues, args.yes)
     handle_stale_closing(all_issues, args.yes)
+    handle_fixed_issues(all_issues, args.yes)
     handle_duplicate_issues(all_issues, args.yes)
-    handle_fixed_issues(all_issues, args.yes)
-
 
 if __name__ == "__main__":
     main()