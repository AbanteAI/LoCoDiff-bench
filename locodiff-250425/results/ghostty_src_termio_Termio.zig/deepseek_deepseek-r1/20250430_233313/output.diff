--- ghostty_src_termio_Termio.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_Termio.zig_extracted.txt (actual)@@ -264,7 +264,7 @@     self.backend.threadExit(data);
 }
 
-/// Send a message to the the mailbox. Depending on the mailbox type in
+/// Send a message using the mailbox. Depending on the mailbox type in
 /// use this may process now or it may just enqueue and process later.
 ///
 /// This will also notify the mailbox thread to process the message. If
@@ -479,19 +479,19 @@                     .{ .active = .{ .y = 0 } },
                     .{ .active = .{ .y = self.terminal.screen.cursor.y - 1 } },
                 );
+
+                // Clear all Kitty graphics state for this screen. This copies
+                // Kitty's behavior when Cmd+K deletes all Kitty graphics. I
+                // didn't spend time researching whether it only deletes Kitty
+                // graphics that are placed above the cursor or if it deletes
+                // all of them. We delete all of them for now but if this behavior
+                // isn't fully correct we should fix this later.
+                self.terminal.screen.kitty_images.delete(
+                    self.terminal.screen.alloc,
+                    &self.terminal,
+                    .{ .all = true },
+                );
             }
-
-            // Clear all Kitty graphics state for this screen. This copies
-            // Kitty's behavior when Cmd+K deletes all Kitty graphics. I
-            // didn't spend time researching whether it only deletes Kitty
-            // graphics that are placed baove the cursor or if it deletes
-            // all of them. We delete all of them for now but if this behavior
-            // isn't fully correct we should fix this later.
-            self.terminal.screen.kitty_images.delete(
-                self.terminal.screen.alloc,
-                &self.terminal,
-                .{ .all = true },
-            );
 
             return;
         }
@@ -632,10 +632,10 @@ 
     /// Mailboxes for different threads
     surface_mailbox: apprt.surface.Mailbox,
+    mailbox: *termio.Mailbox,
 
     /// Data associated with the backend implementation (i.e. pty/exec state)
     backend: termio.backend.ThreadData,
-    mailbox: *termio.Mailbox,
 
     pub fn deinit(self: *ThreadData) void {
         self.backend.deinit(self.alloc);
