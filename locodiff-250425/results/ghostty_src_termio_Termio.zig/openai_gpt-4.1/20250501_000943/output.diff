--- ghostty_src_termio_Termio.zig_expectedoutput.txt (expected)+++ ghostty_src_termio_Termio.zig_extracted.txt (actual)@@ -110,9 +110,6 @@             .abnormal_runtime_threshold_ms = config.@"abnormal-command-exit-runtime",
             .wait_after_command = config.@"wait-after-command",
             .enquiry_response = try alloc.dupe(u8, config.@"enquiry-response"),
-
-            // This has to be last so that we copy AFTER the arena allocations
-            // above happen (Zig assigns in order).
             .arena = arena,
         };
     }
@@ -563,6 +560,13 @@     self.processOutputLocked(buf);
 }
 
+/// Process output when you ahve the read data pointer.
+pub fn processOutputReadData(self: *Termio, buf: []const u8) void {
+    self.renderer_state.mutex.lock();
+    defer self.renderer_state.mutex.unlock();
+    self.processOutputLocked(buf);
+}
+
 /// Process output from readdata but the lock is already held.
 fn processOutputLocked(self: *Termio, buf: []const u8) void {
     // Schedule a render. We can call this first because we have the lock.
@@ -613,12 +617,6 @@     }
 }
 
-/// ThreadData is the data created and stored in the termio thread
-/// when the thread is started and destroyed when the thread is
-/// stopped.
-///
-/// All of the fields in this struct should only be read/written by
-/// the termio thread. As such, a lock is not necessary.
 pub const ThreadData = struct {
     /// Allocator used for the event data
     alloc: Allocator,
@@ -632,10 +630,10 @@ 
     /// Mailboxes for different threads
     surface_mailbox: apprt.surface.Mailbox,
+    mailbox: *termio.Mailbox,
 
     /// Data associated with the backend implementation (i.e. pty/exec state)
     backend: termio.backend.ThreadData,
-    mailbox: *termio.Mailbox,
 
     pub fn deinit(self: *ThreadData) void {
         self.backend.deinit(self.alloc);
