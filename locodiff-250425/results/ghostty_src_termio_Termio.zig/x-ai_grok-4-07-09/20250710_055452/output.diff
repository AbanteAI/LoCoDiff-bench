
index 5c2b8b3f1..623abb566 100644
--- a/ghostty_src_termio_Termio.zig_expectedoutput.txt (expected):tmp/tmpvwrvsnnk_expected.txt	
+++ b/ghostty_src_termio_Termio.zig_extracted.txt (actual):tmp/tmppkxir5im_actual.txt	
@@ -29,6 +29,17 @@ const shell_integration = @import("shell_integration.zig");
 
 const log = std.log.scoped(.io_exec);
 
+const c = @cImport({
+    @cInclude("errno.h");
+    @cInclude("signal.h");
+    @cInclude("unistd.h");
+});
+
+/// True if we should disable the kitty keyboard protocol. We have to
+/// disable this on GLFW because GLFW input events don't support the
+/// correct granularity of events.
+const disable_kitty_keyboard_protocol = apprt.runtime == apprt.glfw;
+
 /// Allocator
 alloc: Allocator,
 
@@ -173,14 +184,14 @@ pub fn init(self: *Termio, alloc: Allocator, opts: termio.Options) !void {
     // Set our default cursor style
     term.screen.cursor.cursor_style = opts.config.cursor_style;
 
-    // Setup our terminal size in pixels for certain requests.
-    term.width_px = term.cols * opts.size.cell.width;
-    term.height_px = term.rows * opts.size.cell.height;
-
     // Setup our backend.
     var backend = opts.backend;
     backend.initTerminal(&term);
 
+    // Setup our terminal size in pixels for certain requests.
+    term.width_px = term.cols * opts.size.cell.width;
+    term.height_px = term.rows * opts.size.cell.height;
+
     // Create our stream handler. This points to memory in self so it
     // isn't safe to use until self.* is set.
     const handler: StreamHandler = handler: {
@@ -355,7 +366,6 @@ pub fn resize(
     td: *ThreadData,
     size: renderer.Size,
 ) !void {
-    self.size = size;
     const grid_size = size.grid();
 
     // Update the size of our pty.
@@ -374,8 +384,8 @@ pub fn resize(
         );
 
         // Update our pixel sizes
-        self.terminal.width_px = grid_size.columns * self.size.cell.width;
-        self.terminal.height_px = grid_size.rows * self.size.cell.height;
+        self.terminal.width_px = grid_size.columns * size.cell.width;
+        self.terminal.height_px = grid_size.rows * size.cell.height;
 
         // Disable synchronized output mode so that we show changes
         // immediately for a resize. This is allowed by the spec.
@@ -392,59 +402,6 @@ pub fn resize(
     self.renderer_wakeup.notify() catch {};
 }
 
-/// Make a size report.
-pub fn sizeReport(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
-    self.renderer_state.mutex.lock();
-    defer self.renderer_state.mutex.unlock();
-    try self.sizeReportLocked(td, style);
-}
-
-fn sizeReportLocked(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
-    const grid_size = self.size.grid();
-
-    // 1024 bytes should be enough for size report since report
-    // in columns and pixels.
-    var buf: [1024]u8 = undefined;
-    const message = switch (style) {
-        .mode_2048 => try std.fmt.bufPrint(
-            &buf,
-            "\x1B[48;{};{};{};{}t",
-            .{
-                grid_size.rows,
-                grid_size.columns,
-                grid_size.rows * self.size.cell.height,
-                grid_size.columns * self.size.cell.width,
-            },
-        ),
-        .csi_14_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[4;{};{}t",
-            .{
-                grid_size.rows * self.size.cell.height,
-                grid_size.columns * self.size.cell.width,
-            },
-        ),
-        .csi_16_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[6;{};{}t",
-            .{
-                self.size.cell.height,
-                self.size.cell.width,
-            },
-        ),
-        .csi_18_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[8;{};{}t",
-            .{
-                grid_size.rows,
-                grid_size.columns,
-            },
-        ),
-    };
-
-    try self.queueWrite(td, message, false);
-}
-
 /// Reset the synchronized output mode. This is usually called by timer
 /// expiration from the termio thread.
 pub fn resetSynchronizedOutput(self: *Termio) void {
