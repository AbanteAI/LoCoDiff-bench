
index 5c2b8b3f1..49ebcfbff 100644
--- a/ghostty_src_termio_Termio.zig_expectedoutput.txt (expected):tmp/tmpe7n7pu4i_expected.txt	
+++ b/ghostty_src_termio_Termio.zig_extracted.txt (actual):tmp/tmpxj_v5lwb_actual.txt	
@@ -158,21 +158,6 @@ pub fn init(self: *Termio, alloc: Allocator, opts: termio.Options) !void {
     term.default_palette = opts.config.palette;
     term.color_palette.colors = opts.config.palette;
 
-    // Set the image size limits
-    try term.screen.kitty_images.setLimit(
-        alloc,
-        &term.screen,
-        opts.config.image_storage_limit,
-    );
-    try term.secondary_screen.kitty_images.setLimit(
-        alloc,
-        &term.secondary_screen,
-        opts.config.image_storage_limit,
-    );
-
-    // Set our default cursor style
-    term.screen.cursor.cursor_style = opts.config.cursor_style;
-
     // Setup our terminal size in pixels for certain requests.
     term.width_px = term.cols * opts.size.cell.width;
     term.height_px = term.rows * opts.size.cell.height;
@@ -381,68 +366,15 @@ pub fn resize(
         // immediately for a resize. This is allowed by the spec.
         self.terminal.modes.set(.synchronized_output, false);
 
+        // Mail the renderer so that it can update the GPU and re-render
+        _ = self.renderer_mailbox.push(.{ .resize = size }, .{ .forever = {} });
+        self.renderer_wakeup.notify() catch {};
+
         // If we have size reporting enabled we need to send a report.
         if (self.terminal.modes.get(.in_band_size_reports)) {
             try self.sizeReportLocked(td, .mode_2048);
         }
     }
-
-    // Mail the renderer so that it can update the GPU and re-render
-    _ = self.renderer_mailbox.push(.{ .resize = size }, .{ .forever = {} });
-    self.renderer_wakeup.notify() catch {};
-}
-
-/// Make a size report.
-pub fn sizeReport(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
-    self.renderer_state.mutex.lock();
-    defer self.renderer_state.mutex.unlock();
-    try self.sizeReportLocked(td, style);
-}
-
-fn sizeReportLocked(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
-    const grid_size = self.size.grid();
-
-    // 1024 bytes should be enough for size report since report
-    // in columns and pixels.
-    var buf: [1024]u8 = undefined;
-    const message = switch (style) {
-        .mode_2048 => try std.fmt.bufPrint(
-            &buf,
-            "\x1B[48;{};{};{};{}t",
-            .{
-                grid_size.rows,
-                grid_size.columns,
-                grid_size.rows * self.size.cell.height,
-                grid_size.columns * self.size.cell.width,
-            },
-        ),
-        .csi_14_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[4;{};{}t",
-            .{
-                grid_size.rows * self.size.cell.height,
-                grid_size.columns * self.size.cell.width,
-            },
-        ),
-        .csi_16_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[6;{};{}t",
-            .{
-                self.size.cell.height,
-                self.size.cell.width,
-            },
-        ),
-        .csi_18_t => try std.fmt.bufPrint(
-            &buf,
-            "\x1b[8;{};{}t",
-            .{
-                grid_size.rows,
-                grid_size.columns,
-            },
-        ),
-    };
-
-    try self.queueWrite(td, message, false);
 }
 
 /// Reset the synchronized output mode. This is usually called by timer
@@ -489,7 +421,7 @@ pub fn clearScreen(self: *Termio, td: *ThreadData, history: bool) !void {
             // isn't fully correct we should fix this later.
             self.terminal.screen.kitty_images.delete(
                 self.terminal.screen.alloc,
-                &self.terminal,
+                &self.terminal.screen,
                 .{ .all = true },
             );
 
@@ -613,6 +545,59 @@ fn processOutputLocked(self: *Termio, buf: []const u8) void {
     }
 }
 
+/// Make a size report.
+pub fn sizeReport(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
+    self.renderer_state.mutex.lock();
+    defer self.renderer_state.mutex.unlock();
+    try self.sizeReportLocked(td, style);
+}
+
+fn sizeReportLocked(self: *Termio, td: *ThreadData, style: termio.Message.SizeReport) !void {
+    const grid_size = self.size.grid();
+
+    // 1024 bytes should be enough for size report since report
+    // in columns and pixels.
+    var buf: [1024]u8 = undefined;
+    const message = switch (style) {
+        .mode_2048 => try std.fmt.bufPrint(
+            &buf,
+            "\x1B[48;{};{};{};{}t",
+            .{
+                grid_size.rows,
+                grid_size.columns,
+                grid_size.rows * self.size.cell.height,
+                grid_size.columns * self.size.cell.width,
+            },
+        ),
+        .csi_14_t => try std.fmt.bufPrint(
+            &buf,
+            "\x1b[4;{};{}t",
+            .{
+                grid_size.rows * self.size.cell.height,
+                grid_size.columns * self.size.cell.width,
+            },
+        ),
+        .csi_16_t => try std.fmt.bufPrint(
+            &buf,
+            "\x1b[6;{};{}t",
+            .{
+                self.size.cell.height,
+                self.size.cell.width,
+            },
+        ),
+        .csi_18_t => try std.fmt.bufPrint(
+            &buf,
+            "\x1b[8;{};{}t",
+            .{
+                grid_size.rows,
+                grid_size.columns,
+            },
+        ),
+    };
+
+    try self.queueWrite(td, message, false);
+}
+
 /// ThreadData is the data created and stored in the termio thread
 /// when the thread is started and destroyed when the thread is
 /// stopped.
