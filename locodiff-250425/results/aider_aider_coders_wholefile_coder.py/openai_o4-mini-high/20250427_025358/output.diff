
index 4f02f26b..6dee363b 100644
--- a/aider_aider_coders_wholefile_coder.py_expectedoutput.txt (expected):tmp/tmpq3tm7_ic_expected.txt	
+++ b/aider_aider_coders_wholefile_coder.py_extracted.txt (actual):tmp/tmp8d92sbb5_actual.txt	
@@ -6,7 +6,6 @@ from ..dump import dump  # noqa: F401
 from .base_coder import Coder
 from .wholefile_prompts import WholeFilePrompts
 
-
 class WholeFileCoder(Coder):
     """A coder that operates on entire files for code modifications."""
 
@@ -27,12 +26,12 @@ class WholeFileCoder(Coder):
         output = []
         lines = content.splitlines(keepends=True)
 
-        edits = []
-
         saw_fname = None
         fname = None
         fname_source = None
         new_lines = []
+        edits = []
+
         for i, line in enumerate(lines):
             if line.startswith(self.fence[0]) or line.startswith(self.fence[1]):
                 if fname is not None:
@@ -70,6 +69,7 @@ class WholeFileCoder(Coder):
                     # the prompt.
                     if fname and fname not in chat_files and Path(fname).name in chat_files:
                         fname = Path(fname).name
+
                 if not fname:  # blank line? or ``` was on first line i==0
                     if saw_fname:
                         fname = saw_fname
@@ -86,19 +86,12 @@ class WholeFileCoder(Coder):
             elif fname is not None:
                 new_lines.append(line)
             else:
-                for word in line.strip().split():
-                    word = word.rstrip(".:,;!")
-                    for chat_file in chat_files:
-                        quoted_chat_file = f"`{chat_file}`"
-                        if word == quoted_chat_file:
-                            saw_fname = chat_file
-
                 output.append(line)
 
         if mode == "diff":
             if fname is not None:
                 # ending an existing block
-                full_path = (Path(self.root) / fname).absolute()
+                full_path = self.abs_root_path(fname)
                 output += self.do_live_diff(full_path, new_lines, False)
             return "\n".join(output)
 
