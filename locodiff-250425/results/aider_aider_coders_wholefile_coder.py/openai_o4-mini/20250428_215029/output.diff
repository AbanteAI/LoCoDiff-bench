--- aider_aider_coders_wholefile_coder.py_expectedoutput.txt (expected)+++ aider_aider_coders_wholefile_coder.py_extracted.txt (actual)@@ -6,10 +6,8 @@ from .base_coder import Coder
 from .wholefile_prompts import WholeFilePrompts
 
-
 class WholeFileCoder(Coder):
     """A coder that operates on entire files for code modifications."""
-
     edit_format = "whole"
     gpt_prompts = WholeFilePrompts()
 
@@ -27,16 +25,15 @@         output = []
         lines = content.splitlines(keepends=True)
 
-        edits = []
-
         saw_fname = None
         fname = None
         fname_source = None
         new_lines = []
+        edits = []
+
         for i, line in enumerate(lines):
             if line.startswith(self.fence[0]) or line.startswith(self.fence[1]):
                 if fname is not None:
-                    # ending an existing block
                     saw_fname = None
 
                     full_path = self.abs_root_path(fname)
@@ -70,19 +67,18 @@                     # the prompt.
                     if fname and fname not in chat_files and Path(fname).name in chat_files:
                         fname = Path(fname).name
-                if not fname:  # blank line? or ``` was on first line i==0
+
+                if not fname:  # blank line? or fence on first line
                     if saw_fname:
+                        fname_source = "saw"
                         fname = saw_fname
-                        fname_source = "saw"
                     elif len(chat_files) == 1:
+                        fname_source = "chat"
                         fname = chat_files[0]
-                        fname_source = "chat"
                     else:
-                        # TODO: sense which file it is by diff size
-                        raise ValueError(
-                            f"No filename provided before {self.fence[0]} in file listing"
-                        )
+                        raise ValueError(f"No filename provided before {self.fence[0]} in file listing")
 
+                new_lines = []
             elif fname is not None:
                 new_lines.append(line)
             else:
@@ -92,13 +88,11 @@                         quoted_chat_file = f"`{chat_file}`"
                         if word == quoted_chat_file:
                             saw_fname = chat_file
-
                 output.append(line)
 
         if mode == "diff":
             if fname is not None:
-                # ending an existing block
-                full_path = (Path(self.root) / fname).absolute()
+                full_path = self.abs_root_path(fname)
                 output += self.do_live_diff(full_path, new_lines, False)
             return "\n".join(output)
 
@@ -112,10 +106,8 @@             for fname, fname_source, new_lines in edits:
                 if fname_source != source:
                     continue
-                # if a higher priority source already edited the file, skip
                 if fname in seen:
                     continue
-
                 seen.add(fname)
                 refined_edits.append((fname, fname_source, new_lines))
 
@@ -132,7 +124,6 @@             orig_lines = self.io.read_text(full_path)
             if orig_lines is not None:
                 orig_lines = orig_lines.splitlines(keepends=True)
-
                 show_diff = diffs.diff_partial_update(
                     orig_lines,
                     new_lines,
