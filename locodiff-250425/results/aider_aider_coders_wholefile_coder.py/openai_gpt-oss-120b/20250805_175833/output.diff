
index 4f02f26b4..993db0e42 100644
--- a/aider_aider_coders_wholefile_coder.py_expectedoutput.txt (expected):tmp/tmpqcvi_ydh_expected.txt	
+++ b/aider_aider_coders_wholefile_coder.py_extracted.txt (actual):tmp/tmpfk7rc3li_actual.txt	
@@ -9,7 +9,6 @@ from .wholefile_prompts import WholeFilePrompts
 
 class WholeFileCoder(Coder):
     """A coder that operates on entire files for code modifications."""
-
     edit_format = "whole"
     gpt_prompts = WholeFilePrompts()
 
@@ -28,7 +27,6 @@ class WholeFileCoder(Coder):
         lines = content.splitlines(keepends=True)
 
         edits = []
-
         saw_fname = None
         fname = None
         fname_source = None
@@ -51,7 +49,7 @@ class WholeFileCoder(Coder):
                     new_lines = []
                     continue
 
-                # fname==None ... starting a new block
+                # fname == None ... starting a new block
                 if i > 0:
                     fname_source = "block"
                     fname = lines[i - 1].strip()
@@ -78,46 +76,34 @@ class WholeFileCoder(Coder):
                         fname = chat_files[0]
                         fname_source = "chat"
                     else:
-                        # TODO: sense which file it is by diff size
-                        raise ValueError(
-                            f"No filename provided before {self.fence[0]} in file listing"
-                        )
-
+                        raise ValueError(f"No filename provided before {self.fence[0]} in file listing")
             elif fname is not None:
                 new_lines.append(line)
             else:
-                for word in line.strip().split():
-                    word = word.rstrip(".:,;!")
-                    for chat_file in chat_files:
-                        quoted_chat_file = f"`{chat_file}`"
-                        if word == quoted_chat_file:
-                            saw_fname = chat_file
-
                 output.append(line)
 
         if mode == "diff":
             if fname is not None:
                 # ending an existing block
-                full_path = (Path(self.root) / fname).absolute()
+                full_path = self.abs_root_path(fname)
+
                 output += self.do_live_diff(full_path, new_lines, False)
             return "\n".join(output)
 
         if fname:
             edits.append((fname, fname_source, new_lines))
 
-        seen = set()
         refined_edits = []
+        seen = set()
         # process from most reliable filename, to least reliable
         for source in ("block", "saw", "chat"):
-            for fname, fname_source, new_lines in edits:
-                if fname_source != source:
+            for fname, src, new_lines in edits:
+                if src != source:
                     continue
-                # if a higher priority source already edited the file, skip
                 if fname in seen:
                     continue
-
                 seen.add(fname)
-                refined_edits.append((fname, fname_source, new_lines))
+                refined_edits.append((fname, src, new_lines))
 
         return refined_edits
 
