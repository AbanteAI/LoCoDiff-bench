
index 4f02f26b..5067da2e 100644
--- a/aider_aider_coders_wholefile_coder.py_expectedoutput.txt (expected):tmp/tmp80mm3k5j_expected.txt	
+++ b/aider_aider_coders_wholefile_coder.py_extracted.txt (actual):tmp/tmp9f4q3vas_actual.txt	
@@ -98,34 +98,28 @@ class WholeFileCoder(Coder):
         if mode == "diff":
             if fname is not None:
                 # ending an existing block
-                full_path = (Path(self.root) / fname).absolute()
+                full_path = self.abs_root_path(fname)
                 output += self.do_live_diff(full_path, new_lines, False)
             return "\n".join(output)
 
         if fname:
             edits.append((fname, fname_source, new_lines))
 
-        seen = set()
-        refined_edits = []
-        # process from most reliable filename, to least reliable
-        for source in ("block", "saw", "chat"):
-            for fname, fname_source, new_lines in edits:
-                if fname_source != source:
-                    continue
-                # if a higher priority source already edited the file, skip
-                if fname in seen:
-                    continue
+        return edits
 
-                seen.add(fname)
-                refined_edits.append((fname, fname_source, new_lines))
+    def apply_edits(self, edits):
+        edited = set()
 
-        return refined_edits
+        # process from most reliable filename, to least reliable
+        for fname, fname_source, new_lines_list in edits:
+            full_path = self.allowed_to_edit(fname, "".join(new_lines_list))
 
-    def apply_edits(self, edits):
-        for path, fname_source, new_lines in edits:
-            full_path = self.abs_root_path(path)
-            new_lines = "".join(new_lines)
-            self.io.write_text(full_path, new_lines)
+            if full_path:
+                edited.add(fname)
+                new_lines = "".join(new_lines_list)
+                self.io.write_text(full_path, new_lines)
+
+        return edited
 
     def do_live_diff(self, full_path, new_lines, final):
         if Path(full_path).exists():
