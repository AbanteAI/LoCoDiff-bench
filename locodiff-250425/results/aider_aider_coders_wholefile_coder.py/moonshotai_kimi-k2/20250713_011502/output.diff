
index 4f02f26b4..332e87e40 100644
--- a/aider_aider_coders_wholefile_coder.py_expectedoutput.txt (expected):tmp/tmpkxmu5jz4_expected.txt	
+++ b/aider_aider_coders_wholefile_coder.py_extracted.txt (actual):tmp/tmpx018jrn0_actual.txt	
@@ -9,7 +9,6 @@ from .wholefile_prompts import WholeFilePrompts
 
 class WholeFileCoder(Coder):
     """A coder that operates on entire files for code modifications."""
-
     edit_format = "whole"
     gpt_prompts = WholeFilePrompts()
 
@@ -98,28 +97,29 @@ class WholeFileCoder(Coder):
         if mode == "diff":
             if fname is not None:
                 # ending an existing block
-                full_path = (Path(self.root) / fname).absolute()
+                full_path = self.abs_root_path(fname)
                 output += self.do_live_diff(full_path, new_lines, False)
             return "\n".join(output)
 
         if fname:
             edits.append((fname, fname_source, new_lines))
 
-        seen = set()
-        refined_edits = []
+        edited = set()
         # process from most reliable filename, to least reliable
         for source in ("block", "saw", "chat"):
             for fname, fname_source, new_lines in edits:
                 if fname_source != source:
                     continue
                 # if a higher priority source already edited the file, skip
-                if fname in seen:
+                if fname in edited:
                     continue
 
-                seen.add(fname)
-                refined_edits.append((fname, fname_source, new_lines))
+                # we have a winner
+                new_lines = "".join(new_lines)
+                if self.allowed_to_edit(fname, new_lines):
+                    edited.add(fname)
 
-        return refined_edits
+        return edited
 
     def apply_edits(self, edits):
         for path, fname_source, new_lines in edits:
