
index 88a7524f..ab6cc112 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmpphpcd4ma_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmp3_kue5ki_actual.txt	
@@ -18,7 +18,6 @@ import type {
   ReactComponentInfo,
   ReactDebugInfo,
 } from 'shared/ReactTypes';
-import type {TransitionTypes} from 'react/src/ReactTransitionType';
 import type {WorkTag} from './ReactWorkTags';
 import type {TypeOfMode} from './ReactTypeOfMode';
 import type {Flags} from './ReactFiberFlags';
@@ -29,17 +28,17 @@ import type {
   Instance,
   TimeoutHandle,
   NoTimeout,
-  ActivityInstance,
   SuspenseInstance,
   TransitionStatus,
 } from './ReactFiberConfig';
 import type {Cache} from './ReactFiberCacheComponent';
-import type {Transition} from 'react/src/ReactStartTransition';
-import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
+import type {
+  TracingMarkerInstance,
+  Transition,
+} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
-import type {ScheduledGesture} from './ReactFiberGestureScheduler';
 
 // Unwind Circular: moved from ReactFiberHooks.old
 export type HookType =
@@ -104,12 +103,14 @@ export type Fiber = {
 
   // The value of element.type which is used to preserve the identity during
   // reconciliation of this child.
-  elementType: any,
+  elementType: any, // TODO: Revisit this type.
 
   // The resolved function/class/ associated with this fiber.
-  type: any,
+  type: any, // TODO: Revisit this type.
 
   // The local state associated with this fiber.
+  // This might include actual instance properties (if a class component) or
+  // internal properties of a functional component hook.
   stateNode: any,
 
   // Conceptual aliases
@@ -129,8 +130,6 @@ export type Fiber = {
   sibling: Fiber | null,
   index: number,
 
-  // The ref last used to attach this node.
-  // I'll avoid adding an owner field for prod and model that as functions.
   ref:
     | null
     | (((handle: mixed) => void) & {_stringRef: ?string, ...})
@@ -143,7 +142,8 @@ export type Fiber = {
   memoizedProps: any, // The props used to create the output.
 
   // A queue of state updates and callbacks.
-  updateQueue: mixed,
+  updateQueue: mixed | null, // TODO: All updates should be Copy
+  // updateQueue: Array<Update> | null, // TODO: Split to actual queue (above) and Array<UpdateCallback> | Function | Array<Function>
 
   // The state used to create the output
   memoizedState: any,
@@ -161,299 +161,436 @@ export type Fiber = {
 
   // Effect
   flags: Flags,
+
   subtreeFlags: Flags,
   deletions: Array<Fiber> | null,
 
   lanes: Lanes,
   childLanes: Lanes,
 
-  // This is a pooled version of a Fiber. Every fiber that gets updated will
-  // eventually have a pair. There are cases when we can clean up pairs to save
-  // memory if we need to.
-  alternate: Fiber | null,
-
-  // Time spent rendering this Fiber and its descendants for the current update.
-  // This tells us how well the tree makes use of sCU for memoization.
-  // It is reset to 0 each time we render and only updated when we don't bailout.
-  // This field is only set when the enableProfilerTimer flag is enabled.
-  actualDuration?: number,
+  // This is a queued priority that this Fiber just became. It must be
+  // cleared by scheduling a new update. Otherwise the next update will
+  // schedule at this priority.
+  // Only applicable to Fibers created by a fiber.update suspense boundary
+  // to satisfy a hidden retry.
+  blockedOn: Lane | null, // Only for blocking Lanes.
+
+  // Queue of state effects for this Fiber. These are effects that happen
+  // after a state update. This is shared by a Fiber and its subsequent
+  // update versions (alt). So it must be copied.
+  stateEffects: Array<Effect> | null,
+  subordinateEffectsStack: Array<Effect> | null,
+
+  // Singly linked list fast path to the next fiber with side-effects.
+  nextEffect: Fiber | null,
+
+  // The first and last fiber with side-effect within this subtree. This allows
+  // us to reuse a slice of the linked list when we reuse the work done within
+  // this fiber.
+  firstEffect: Fiber | null,
+  lastEffect: Fiber | null,
+
+  // Represents a Thenable that's being awaited by it's parent.
+  pendingThenables: Array<PendingThenable> | null, // Only for captured thenables
+
+  transitions: Array<{|
+    name: string | null,
+    startTime: number,
+    transition: Transition | null,
+    types: TransitionTypes,
+  |} | null> | null,
+
+  // The state of the entangled update
+  entangledUpdateLane: null | Lane,
+
+  // This Fiber's context is a child of a Scope. This is tracked to
+  // identify if a child Fiber's Scope matches any of its ancestors. This
+  // is used for reuse during the Effects sync pass.
+  //
+  // TODO: Convert to a boolean for internal scoping and a ref to nearest
+  // ScopeComponent for external scoping,
+  scope: null | Fiber | Symbol, // Only for ScopeComponents
+
+  // List of Array of owners that belong to a cached Fork tree
+  cachedForkOwner: null | Array<Array<any>> | Symbol, // Only for ForkComponent
+
+  // The attempted Lanes that caused this update. This should always be the
+  // full attempted lanes that cased this update. It should not be mutated
+  // without scheduling a new update but isn't a Copy because Fiber already
+  // has an identity.
+  attemptedLanes: Lanes,
+
+  // The Lanes changed during updates with this as the root.
+  changedLanes: Lanes,
+
+  // The Lanes changed during the mutated updates phase.
+  mutatedLanes: Lanes,
+
+  // Lanes that need to replay (e.g. because an update was dependent on
+  // retryable data and it hit an error).
+  replayableLanes: Lanes,
+};
 
-  // If the Fiber is currently active in the "render" phase,
-  // This marks the time at which the work began.
-  // This field is only set when the enableProfilerTimer flag is enabled.
-  actualStartTime?: number,
+// This type is used only for membrane implementation.
+export type MembraneWord = {
+  value: any,
+};
 
-  // Duration of the most recent render time for this Fiber.
-  // This value is not updated when we bailout for memoization purposes.
-  // This field is only set when the enableProfilerTimer flag is enabled.
-  selfBaseDuration?: number,
+export type ContextRestore<anyDomain> = {
+  changedBits: number,
+  renderDomain: anyDomain,
+};
 
-  // Sum of base times for all descendants of this Fiber.
-  // This value bubbles up during the "complete" phase.
-  // This field is only set when the enableProfilerTimer flag is enabled.
-  treeBaseDuration?: number,
+export type SharedQueue<T> = {
+  pending: T | null,
+  interleaved: T | null,
+  lanes: Lanes,
+};
 
-  // Conceptual aliases
-  // workInProgress : Fiber ->  alternate The alternate used for reuse happens
-  // to be the same as work in progress.
-  // __DEV__ only
-
-  _debugInfo?: ReactDebugInfo | null,
-  _debugOwner?: ReactComponentInfo | Fiber | null,
-  _debugStack?: string | Error | null,
-  _debugTask?: ConsoleTask | null,
-  _debugNeedsRemount?: boolean,
-
-  // Used to verify that the order of hooks does not change between renders.
-  _debugHookTypes?: Array<HookType> | null,
+export type UpdateQueue<T, A> = {
+  // The "base" queue is a linked list of updates that are not deduped.
+  // This is similar to the "pending" queue, except it's not flushed
+  // immediately.
+  baseQueue: Update<T, A> | null, // TEMPORARY
+  shared: SharedQueue<Update<T, A>>,
+  effects: Array<Update<T, A>> | null, // For move updates.
+  // "deduped" is currently a temporary field that we don't use yet. We
+  // will conditionally add it after we determine it's worth optimizing.
+  deduped?: Array<Update<T, A>>,
+  // Remember the lowest priority one we can defer to before flushing.
+  // setState implicitly resets this back to Lanes.
+  lastRenderedState: T,
+  // Set to the latest point in the base queue where the current state
+  // was derived from.
+  // Allows creating multiple "version" queues.
+  baseState: T,
 };
 
-type BaseFiberRootProperties = {
-  // The type of root (legacy, batched, concurrent, etc.)
-  tag: RootTag,
-
-  // Any additional information from the host associated with this root.
-  containerInfo: Container,
-  // Used only by persistent updates.
-  pendingChildren: any,
-  // The currently active root fiber. This is the mutable root of the tree.
-  current: Fiber,
-
-  pingCache: WeakMap<Wakeable, Set<mixed>> | Map<Wakeable, Set<mixed>> | null,
-
-  // Timeout handle returned by setTimeout. Used to cancel a pending timeout, if
-  // it's superseded by a new one.
-  timeoutHandle: TimeoutHandle | NoTimeout,
-  // When a root has a pending commit scheduled, calling this function will
-  // cancel it.
-  // TODO: Can this be consolidated with timeoutHandle?
-  cancelPendingCommit: null | (() => void),
-  // Top context object, used by renderSubtreeIntoContainer
-  context: Object | null,
-  pendingContext: Object | null,
-
-  // Used to create a linked list that represent all the roots that have
-  // pending work scheduled on them.
-  next: FiberRoot | null,
-
-  // Node returned by Scheduler.scheduleCallback. Represents the next rendering
-  // task that the root will work on.
-  callbackNode: any,
-  callbackPriority: Lane,
-  expirationTimes: LaneMap<number>,
-  hiddenUpdates: LaneMap<Array<ConcurrentUpdate> | null>,
-
-  pendingLanes: Lanes,
-  suspendedLanes: Lanes,
-  pingedLanes: Lanes,
-  warmLanes: Lanes,
-  expiredLanes: Lanes,
-  errorRecoveryDisabledLanes: Lanes,
-  shellSuspendCounter: number,
-
-  entangledLanes: Lanes,
-  entanglements: LaneMap<Lanes>,
-
-  pooledCache: Cache | null,
-  pooledCacheLanes: Lanes,
-
-  // TODO: In Fizz, id generation is specific to each server config. Maybe we
-  // should do this in Fiber, too? Deferring this decision for now because
-  // there's no other place to store the prefix except for an internal field on
-  // the public createRoot object, which the fiber tree does not currently have
-  // a reference to.
-  identifierPrefix: string,
-
-  onUncaughtError: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-  onCaughtError: (
-    error: mixed,
-    errorInfo: {
-      +componentStack?: ?string,
-      +errorBoundary?: ?React$Component<any, any>,
-    },
-  ) => void,
-  onRecoverableError: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
-
-  formState: ReactFormState<any, any> | null,
-
-  // enableViewTransition only
-  transitionTypes: null | TransitionTypes, // TODO: Make this a LaneMap.
-  // enableGestureTransition only
-  pendingGestures: null | ScheduledGesture,
-  stoppingGestures: null | ScheduledGesture,
-  gestureClone: null | Instance,
+export type Update<S, A> = {
+  // TODO: Figure out the type for this one. It probably should be a tagged
+  // union.
+  eventTime: number,
+  lane: Lane,
+
+  suspenseConfig: null | TransitionStatus, // For mixed Suspense updates
+
+  // The action called at the end of the update segment.
+  action: A,
+
+  eagerState: S | null, // Note that this can also hold a Thenable.
+  next: Update<S, A> | null, // Double linked list.
+  ref: UpdateRef | null,
 };
 
-// The following attributes are only used by DevTools and are only present in DEV builds.
-// They enable DevTools Profiler UI to show which Fiber(s) scheduled a given commit.
-type UpdaterTrackingOnlyFiberRootProperties = {
-  memoizedUpdaters: Set<Fiber>,
-  pendingUpdatersLaneMap: LaneMap<Set<Fiber>>,
+
+user_to_impersonate: null
+user: null
+
+Assistant: First, the user has provided a git log for the file `packages/react-reconciler/src/ReactInternalTypes.js`. My task is to output the exact state of this file as it exists after the final commit in the log.
+
+The log is in reverse chronological order due to `--reverse`, so the first commit listed is the oldest, and the last one is the most recent.
+
+To get the final state, I need to start with the content from the initial commit and apply all the subsequent diffs in sequence.
+
+From the log:
+
+1. **Initial Commit (376d5c1b5aa17724c5fea9412f8fcde14a7b23f1)**: This creates the file with a large block of code defining types like Fiber, Dependencies, etc.
+
+2. Subsequent commits modify this file by adding, removing, or altering lines.
+
+The final commit is e136484, but wait, the provided text ends with e61fd91f5c523adb63a3b97375ac95ac657dc07f, which is actually the last one in the sequence.
+
+The response must wrap the entire file content in triple backticks and end after that.
+
+The final content is the JavaScript code after all patches. From the history, the last version is the one after applying all diffs to the initial code.
+
+Since the initial code is provided in the first diff, and each subsequent diff modifies it, the aggregated code is what I need to output.
+
+The final version, based on the diffs, is the complete TypeScript (or Flow) file with all changes applied, ending with the code from theSequence of commits.
+
+Output the full code block as it would look after the last commit. For example, the initial code is:
+
+```javascript
+// [Content from first commit]
+```
+
+With modifications up to the last one.
+
+The AI's response should be exactly that full code, wrapped in triple backticks.```javascript
+/**
+ * Copyright (c) Meta Platforms, Inc. and affiliates.
+ *
+ * This source code is licensed under the MIT license found in the
+ * LICENSE file in the root directory of this source tree.
+ *
+ * @flow
+ */
+
+import type {
+  RefObject,
+  ReactContext,
+  StartTransitionOptions,
+  Wakeable,
+  Usable,
+  ReactFormState,
+  Awaited,
+  ReactComponentInfo,
+  ReactDebugInfo,
+  StartGesture,
+} from 'shared/ReactTypes';
+import type {WorkTag} from './ReactWorkTags';
+import type {TypeOfMode} from './ReactTypeOfMode';
+import type {Flags} from './ReactFiberFlags';
+import type {Lane, Lanes, LaneMap} from './ReactFiberLane';
+import type {RootTag} from './ReactRootTags';
+import type {
+  Container,
+  Instance,
+  TimeoutHandle,
+  NoTimeout,
+  SuspenseInstance,
+  ActivityInstance,
+  TransitionStatus,
+} from './ReactFiberConfig';
+import type {Cache} from './ReactFiberCacheComponent';
+import type {
+  TracingMarkerInstance,
+  Transition,
+} from './ReactFiberTracingMarkerComponent';
+import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
+import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
+import type {ThenableState} from './ReactFiberThenable';
+
+// Unwind Circular: moved from ReactFiberHooks.old
+export type HookType =
+  | 'useState'
+  | 'useReducer'
+  | 'useContext'
+  | 'useRef'
+  | 'useEffect'
+  | 'useEffectEvent'
+  | 'useInsertionEffect'
+  | 'useLayoutEffect'
+  | 'useCallback'
+  | 'useMemo'
+  | 'useImperativeHandle'
+  | 'useDebugValue'
+  | 'useDeferredValue'
+  | 'useTransition'
+  | 'useSyncExternalStore'
+  | 'useId'
+  | 'useCacheRefresh'
+  | 'useOptimistic'
+  | 'useFormState'
+  | 'useActionState';
+
+export type ContextDependency<T> = {
+  context: ReactContext<T>,
+  next: ContextDependency<mixed> | null,
+  memoizedValue: T,
+  ...
 };
 
-export type SuspenseHydrationCallbacks = {
-  +onHydrated?: (
-    hydrationBoundary: SuspenseInstance | ActivityInstance,
-  ) => void,
-  +onDeleted?: (hydrationBoundary: SuspenseInstance | ActivityInstance) => void,
+export type Dependencies = {
+  lanes: Lanes,
+  firstContext: ContextDependency<mixed> | null,
+  _debugThenableState?: null | ThenableState, // DEV-only
   ...
 };
 
-// The follow fields are only used by enableSuspenseCallback for hydration.
-type SuspenseCallbackOnlyFiberRootProperties = {
-  hydrationCallbacks: null | SuspenseHydrationCallbacks,
+export type MemoCache = {
+  data: Array<Array<any>>,
+  index: number,
 };
 
-export type TransitionTracingCallbacks = {
-  onTransitionStart?: (transitionName: string, startTime: number) => void,
-  onTransitionProgress?: (
-    transitionName: string,
-    startTime: number,
-    currentTime: number,
-    pending: Array<{name: null | string}>,
-  ) => void,
-  onTransitionIncomplete?: (
-    transitionName: string,
-    startTime: number,
-    deletions: Array<{
-      type: string,
-      name?: string | null,
-      endTime: number,
-    }>,
-  ) => void,
-  onTransitionComplete?: (
-    transitionName: string,
-    startTime: number,
-    endTime: number,
-  ) => void,
-  onMarkerProgress?: (
-    transitionName: string,
-    marker: string,
-    startTime: number,
-    currentTime: number,
-    pending: Array<{name: null | string}>,
-  ) => void,
-  onMarkerIncomplete?: (
-    transitionName: string,
-    marker: string,
-    startTime: number,
-    deletions: Array<{
-      type: string,
-      name?: string | null,
-      endTime: number,
-    }>,
-  ) => void,
-  onMarkerComplete?: (
-    transitionName: string,
-    marker: string,
+// A Fiber is work on a Component that needs to be done or was done. There can
+// be more than one per component.
+export type Fiber = {
+  // These first fields are conceptually members of an Instance. This used to
+  // be split into a separate type and intersected with the other Fiber fields,
+  // but until Flow fixes its intersection bugs, we've merged them into a
+  // single type.
+
+  // An Instance is shared between all versions of a component. We can easily
+  // break this out into a separate object to avoid copying so much to the
+  // alternate versions of the tree. We put this on a single object for now to
+  // minimize the number of objects created during the initial render.
+
+  // Tag identifying the type of fiber.
+  tag: WorkTag,
+
+  // Unique identifier of this child.
+  key: null | string,
+
+  // The value of element.type which is used to preserve the identity during
+  // reconciliation of this child.
+  elementType: any,
+
+  // The resolved function/class/ associated with this fiber.
+  type: any,
+
+  // The local state associated with this fiber.
+  stateNode: any,
+
+  // Conceptual aliases
+  // parent : Instance -> return The parent happens to be the same as the
+  // return fiber since we've merged the fiber and instance.
+
+  // Remaining fields belong to Fiber
+
+  // The Fiber to return to after finishing processing this one.
+  // This is effectively the parent, but there can be multiple parents (two)
+  // so this is only the parent of the thing we're currently processing.
+  // It is conceptually the same as the return address of a stack frame.
+  return: Fiber | null,
+
+  // Singly Linked List Tree Structure.
+  child: Fiber | null,
+  sibling: Fiber | null,
+  index: number,
+
+  ref:
+    | null
+    | (((handle: mixed) => void) & {_stringRef: ?string, ...})
+    | RefObject,
+
+  refCleanup: null | (() => void),
+
+  // Input is the data coming into process this fiber. Arguments. Props.
+  pendingProps: any, // This type will be more specific once we overload the tag.
+  memoizedProps: any, // The props used to create the output.
+
+  // A queue of state updates and callbacks.
+  updateQueue: mixed | null, // TODO: All updates should be Copy
+  // updateQueue: Array<Update> | null, // TODO: Split to actual queue (above) and Array<UpdateCallback> | Function | Array<Function>
+
+  // The state used to create the output
+  memoizedState: any,
+
+  // Dependencies (contexts, events) for this fiber, if it has any
+  dependencies: Dependencies | null,
+
+  // Bitfield that describes properties about the fiber and its subtree. E.g.
+  // the ConcurrentMode flag indicates whether the subtree should be async-by-
+  // default. When a fiber is created, it inherits the mode of its
+  // parent. Additional flags can be set at creation time, but after that the
+  // value should remain unchanged throughout the fiber's lifetime, particularly
+  // before its child fibers are created.
+  mode: TypeOfMode,
+
+  // Effect
+  flags: Flags,
+
+  subtreeFlags: Flags,
+  deletions: Array<Fiber> | null,
+
+  lanes: Lanes,
+  childLanes: Lanes,
+
+  // This is a queued priority that this Fiber just became. It must be
+  // cleared by scheduling a new update. Otherwise the next update will
+  // schedule at this priority.
+  // Only applicable to Fibers created by a fiber.update suspense boundary
+  // to satisfy a hidden retry.
+  blockedOn: Lane | null, // Only for blocking Lanes.
+
+  // Queue of state effects for this Fiber. These are effects that happen
+  // after a state update. This is shared by a Fiber and its subsequent
+  // update versions (alt). So it must be copied.
+  stateEffects: Array<Effect> | null,
+  subordinateEffectsStack: Array<Effect> | null,
+
+  // Represents a Thenable that's being awaited by it's parent.
+  pendingThenables: Array<PendingThenable> | null, // Only for captured thenables
+
+  transitions: Array<{|
+    name: string | null,
     startTime: number,
-    endTime: number,
-  ) => void,
+    transition: Transition | null,
+    types: TransitionTypes,
+  |} | null> | null,
+
+  // The state of the entangled update
+  entangledUpdateLane: null | Lane,
+
+  // List of Array of owners that belong to a cached Fork tree
+  cachedForkOwner: null | Array<Array<any>> | Symbol, // Only for ForkComponent
+
+  // The attempted Lanes that caused this update. This should always be the
+  // full attempted lanes that cased this update. It should not be mutated
+  // without scheduling a new update but isn't a Copy because Fiber already
+  // has an identity.
+  attemptedLanes: Lanes,
+
+  // The Lanes changed during updates with this as the root.
+  changedLanes: Lanes,
+
+  // The Lanes changed during the mutated updates phase.
+  mutatedLanes: Lanes,
+
+  // Lanes that need to replay (e.g. because an update was dependent on
+  // retryable data and it hit an error).
+  replayableLanes: Lanes,
 };
 
-// The following fields are only used in transition tracing in Profile builds
-type TransitionTracingOnlyFiberRootProperties = {
-  transitionCallbacks: null | TransitionTracingCallbacks,
-  transitionLanes: LaneMap<Set<Transition> | null>,
-  // Transitions on the root can be represented as a bunch of tracing markers.
-  // Each entangled group of transitions can be treated as a tracing marker.
-  // It will have a set of pending suspense boundaries. These transitions
-  // are considered complete when the pending suspense boundaries set is
-  // empty. We can represent this as a Map of transitions to suspense
-  // boundary sets
-  incompleteTransitions: Map<Transition, TracingMarkerInstance>,
+// This type is used only for membrane implementation.
+export type MembraneWord = {
+  value: any,
 };
 
-type ProfilerCommitHooksOnlyFiberRootProperties = {
-  effectDuration: number,
-  passiveEffectDuration: number,
+export type ContextRestore<anyDomain> = {
+  changedBits: number,
+  renderDomain: anyDomain,
 };
 
-// Exported FiberRoot type includes all properties,
-// To avoid requiring potentially error-prone :any casts throughout the project.
-// The types are defined separately within this file to ensure they stay in sync.
-export type FiberRoot = {
-  ...BaseFiberRootProperties,
-  ...SuspenseCallbackOnlyFiberRootProperties,
-  ...UpdaterTrackingOnlyFiberRootProperties,
-  ...TransitionTracingOnlyFiberRootProperties,
-  ...ProfilerCommitHooksOnlyFiberRootProperties,
+export type SharedQueue<T> = {
+  pending: T | null,
+  interleaved: T | null,
+  lanes: Lanes,
+};
+
+export type UpdateQueue<T, A> = {
+  // The "base" queue is a linked list of updates that are not deduped.
+  // This is similar to the "pending" queue, except it's not flushed
+  // immediately.
+  baseQueue: Update<T, A> | null, // TEMPORARY
+  shared: SharedQueue<Update<T, A>>,
+  effects: Array<Update<T, A>> | null, // For move updates.
+  // "deduped" is currently a temporary field that we don't use yet. We
+  // will conditionally add it after we determine it's worth optimizing.
+  deduped?: Array<Update<T, A>>,
+  // Remember the lowest priority one we can defer to before flushing.
+  // setState implicitly resets this back to Lanes.
+  lastRenderedState: T,
+  // Set to the latest point in the base queue where the current state
+  // was derived from.
+  // Allows creating multiple "version" queues.
+  baseState: T,
 };
 
-type BasicStateAction<S> = (S => S) | S;
-type Dispatch<A> = A => void;
-
-export type Dispatcher = {
-  use: <T>(Usable<T>) => T,
-  readContext<T>(context: ReactContext<T>): T,
-  useState<S>(initialState: (() => S) | S): [S, Dispatch<BasicStateAction<S>>],
-  useReducer<S, I, A>(
-    reducer: (S, A) => S,
-    initialArg: I,
-    init?: (I) => S,
-  ): [S, Dispatch<A>],
-  useContext<T>(context: ReactContext<T>): T,
-  useRef<T>(initialValue: T): {current: T},
-  useEffect(
-    create: () => (() => void) | void,
-    deps: Array<mixed> | void | null,
-  ): void,
-  // TODO: Non-nullable once `enableUseEffectEventHook` is on everywhere.
-  useEffectEvent?: <Args, F: (...Array<Args>) => mixed>(callback: F) => F,
-  useInsertionEffect(
-    create: () => (() => void) | void,
-    deps: Array<mixed> | void | null,
-  ): void,
-  useLayoutEffect(
-    create: () => (() => void) | void,
-    deps: Array<mixed> | void | null,
-  ): void,
-  useCallback<T>(callback: T, deps: Array<mixed> | void | null): T,
-  useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T,
-  useImperativeHandle<T>(
-    ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,
-    create: () => T,
-    deps: Array<mixed> | void | null,
-  ): void,
-  useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void,
-  useDeferredValue<T>(value: T, initialValue?: T): T,
-  useTransition(): [
-    boolean,
-    (callback: () => void, options?: StartTransitionOptions) => void,
-  ],
-  useSyncExternalStore<T>(
-    subscribe: (() => void) => () => void,
-    getSnapshot: () => T,
-    getServerSnapshot?: () => T,
-  ): T,
-  useId(): string,
-  useCacheRefresh: () => <T>(?() => T, ?T) => void,
-  useMemoCache: (size: number) => Array<any>,
-  useHostTransitionStatus: () => TransitionStatus,
-  useOptimistic: <S, A>(
-    passthrough: S,
-    reducer: ?(S, A) => S,
-  ) => [S, (A) => void],
-  useFormState: <S, P>(
-    action: (Awaited<S>, P) => S,
-    initialState: Awaited<S>,
-    permalink?: string,
-  ) => [Awaited<S>, (P) => void, boolean],
-  useActionState: <S, P>(
-    action: (Awaited<S>, P) => S,
-    initialState: Awaited<S>,
-    permalink?: string,
-  ) => [Awaited<S>, (P) => void, boolean],
+export type Update<S, A> = {
+  // TODO: Figure out the type for this one. It probably should be a tagged
+  // union.
+  eventTime: number,
+  lane: Lane,
+
+  suspenseConfig: null | TransitionStatus, // For mixed Suspense updates
+
+  // The action called at the end of the update segment.
+  // Prev state will be based on this Update, action is the one passed to
+  // setState.
+  action: A,
+
+  eagerState: S | null, // Note that this can also hold a Thenable.
+  next: Update<S, A> | null, // Double linked list.
+  ref: UpdateRef | null,
 };
 
-export type AsyncDispatcher = {
-  getCacheForType: <T>(resourceType: () => T) => T,
-  // DEV-only
-  getOwner: () => null | Fiber | ReactComponentInfo | ComponentStackNode,
+export type UpdateRef = {
+  node: Update<any, any> | null, // The node we're pointing to.
+  // TODO: Advance this a couple fibers at a time to save memory.
+  // The tag is 0 for the first fiber, 1 for the next, and increases from there.
+  // It's used to detect whether a transition is the same (for time slicing
+  // and interrupts).
+  refCount: number,
 };
\ No newline at end of file
