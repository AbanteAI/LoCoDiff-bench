
index 88a7524f..0ab98a4d 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmppck7bbm5_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmp9ku_sbey_actual.txt	
@@ -13,12 +13,10 @@ import type {
   StartTransitionOptions,
   Wakeable,
   Usable,
-  ReactFormState,
   Awaited,
   ReactComponentInfo,
   ReactDebugInfo,
 } from 'shared/ReactTypes';
-import type {TransitionTypes} from 'react/src/ReactTransitionType';
 import type {WorkTag} from './ReactWorkTags';
 import type {TypeOfMode} from './ReactTypeOfMode';
 import type {Flags} from './ReactFiberFlags';
@@ -39,7 +37,7 @@ import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
-import type {ScheduledGesture} from './ReactFiberGestureScheduler';
+import type {TransitionTypes} from 'react/src/ReactTransitionType';
 
 // Unwind Circular: moved from ReactFiberHooks.old
 export type HookType =
@@ -83,8 +81,6 @@ export type MemoCache = {
   index: number,
 };
 
-// A Fiber is work on a Component that needs to be done or was done. There can
-// be more than one per component.
 export type Fiber = {
   // These first fields are conceptually members of an Instance. This used to
   // be split into a separate type and intersected with the other Fiber fields,
@@ -167,9 +163,6 @@ export type Fiber = {
   lanes: Lanes,
   childLanes: Lanes,
 
-  // This is a pooled version of a Fiber. Every fiber that gets updated will
-  // eventually have a pair. There are cases when we can clean up pairs to save
-  // memory if we need to.
   alternate: Fiber | null,
 
   // Time spent rendering this Fiber and its descendants for the current update.
@@ -232,10 +225,6 @@ type BaseFiberRootProperties = {
   context: Object | null,
   pendingContext: Object | null,
 
-  // Used to create a linked list that represent all the roots that have
-  // pending work scheduled on them.
-  next: FiberRoot | null,
-
   // Node returned by Scheduler.scheduleCallback. Represents the next rendering
   // task that the root will work on.
   callbackNode: any,
@@ -450,6 +439,12 @@ export type Dispatcher = {
     initialState: Awaited<S>,
     permalink?: string,
   ) => [Awaited<S>, (P) => void, boolean],
+  // TODO: Non-nullable once `enableGestureTransition` is on everywhere.
+  // useSwipeTransition?: <T>(
+  //   previous: T,
+  //   current: T,
+  //   next: T,
+  // ) => [T, StartGesture],
 };
 
 export type AsyncDispatcher = {
