
index 88a7524f6..ad44fb792 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmpvnxl70ul_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmp3969mdbi_actual.txt	
@@ -17,8 +17,8 @@ import type {
   Awaited,
   ReactComponentInfo,
   ReactDebugInfo,
+  TransitionTypes,
 } from 'shared/ReactTypes';
-import type {TransitionTypes} from 'react/src/ReactTransitionType';
 import type {WorkTag} from './ReactWorkTags';
 import type {TypeOfMode} from './ReactTypeOfMode';
 import type {Flags} from './ReactFiberFlags';
@@ -39,7 +39,6 @@ import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
-import type {ScheduledGesture} from './ReactFiberGestureScheduler';
 
 // Unwind Circular: moved from ReactFiberHooks.old
 export type HookType =
@@ -135,7 +134,6 @@ export type Fiber = {
     | null
     | (((handle: mixed) => void) & {_stringRef: ?string, ...})
     | RefObject,
-
   refCleanup: null | (() => void),
 
   // Input is the data coming into process this fiber. Arguments. Props.
@@ -232,36 +230,7 @@ type BaseFiberRootProperties = {
   context: Object | null,
   pendingContext: Object | null,
 
-  // Used to create a linked list that represent all the roots that have
-  // pending work scheduled on them.
-  next: FiberRoot | null,
-
-  // Node returned by Scheduler.scheduleCallback. Represents the next rendering
-  // task that the root will work on.
-  callbackNode: any,
-  callbackPriority: Lane,
-  expirationTimes: LaneMap<number>,
-  hiddenUpdates: LaneMap<Array<ConcurrentUpdate> | null>,
-
-  pendingLanes: Lanes,
-  suspendedLanes: Lanes,
-  pingedLanes: Lanes,
-  warmLanes: Lanes,
-  expiredLanes: Lanes,
-  errorRecoveryDisabledLanes: Lanes,
-  shellSuspendCounter: number,
-
-  entangledLanes: Lanes,
-  entanglements: LaneMap<Lanes>,
-
-  pooledCache: Cache | null,
-  pooledCacheLanes: Lanes,
-
-  // TODO: In Fizz, id generation is specific to each server config. Maybe we
-  // should do this in Fiber, too? Deferring this decision for now because
-  // there's no other place to store the prefix except for an internal field on
-  // the public createRoot object, which the fiber tree does not currently have
-  // a reference to.
+  // Additional identification for DevTools profiling purposes.
   identifierPrefix: string,
 
   onUncaughtError: (
@@ -288,13 +257,31 @@ type BaseFiberRootProperties = {
   pendingGestures: null | ScheduledGesture,
   stoppingGestures: null | ScheduledGesture,
   gestureClone: null | Instance,
-};
 
-// The following attributes are only used by DevTools and are only present in DEV builds.
-// They enable DevTools Profiler UI to show which Fiber(s) scheduled a given commit.
-type UpdaterTrackingOnlyFiberRootProperties = {
-  memoizedUpdaters: Set<Fiber>,
-  pendingUpdatersLaneMap: LaneMap<Set<Fiber>>,
+  // Used to create a linked list that represent all the roots that have
+  // pending work scheduled on them.
+  next: FiberRoot | null,
+
+  // Node returned by Scheduler.scheduleCallback. Represents the next rendering
+  // task that the root will work on.
+  callbackNode: any,
+  callbackPriority: Lane,
+  expirationTimes: LaneMap<number>,
+  hiddenUpdates: LaneMap<Array<ConcurrentUpdate> | null>,
+
+  pendingLanes: Lanes,
+  suspendedLanes: Lanes,
+  pingedLanes: Lanes,
+  warmLanes: Lanes,
+  expiredLanes: Lanes,
+  errorRecoveryDisabledLanes: Lanes,
+  shellSuspendCounter: number,
+
+  entangledLanes: Lanes,
+  entanglements: LaneMap<Lanes>,
+
+  pooledCache: Cache | null,
+  pooledCacheLanes: Lanes,
 };
 
 export type SuspenseHydrationCallbacks = {
@@ -305,11 +292,6 @@ export type SuspenseHydrationCallbacks = {
   ...
 };
 
-// The follow fields are only used by enableSuspenseCallback for hydration.
-type SuspenseCallbackOnlyFiberRootProperties = {
-  hydrationCallbacks: null | SuspenseHydrationCallbacks,
-};
-
 export type TransitionTracingCallbacks = {
   onTransitionStart?: (transitionName: string, startTime: number) => void,
   onTransitionProgress?: (
@@ -357,6 +339,13 @@ export type TransitionTracingCallbacks = {
   ) => void,
 };
 
+// The following attributes are only used by DevTools and are only present in DEV builds.
+// They enable DevTools Profiler UI to show which Fiber(s) scheduled a given commit.
+type UpdaterTrackingOnlyFiberRootProperties = {
+  memoizedUpdaters: Set<Fiber>,
+  pendingUpdatersLaneMap: LaneMap<Set<Fiber>>,
+};
+
 // The following fields are only used in transition tracing in Profile builds
 type TransitionTracingOnlyFiberRootProperties = {
   transitionCallbacks: null | TransitionTracingCallbacks,
@@ -391,15 +380,15 @@ type Dispatch<A> = A => void;
 
 export type Dispatcher = {
   use: <T>(Usable<T>) => T,
-  readContext<T>(context: ReactContext<T>): T,
-  useState<S>(initialState: (() => S) | S): [S, Dispatch<BasicStateAction<S>>],
-  useReducer<S, I, A>(
+  readContext: <T>(context: ReactContext<T>) => T,
+  useState: <S>(initialState: (() => S) | S) => [S, Dispatch<BasicStateAction<S>>],
+  useReducer: <S, I, A>(
     reducer: (S, A) => S,
     initialArg: I,
     init?: (I) => S,
-  ): [S, Dispatch<A>],
-  useContext<T>(context: ReactContext<T>): T,
-  useRef<T>(initialValue: T): {current: T},
+  ) => [S, Dispatch<A>],
+  useContext: <T>(context: ReactContext<T>) => T,
+  useRef: <T>(initialValue: T) => {current: T},
   useEffect(
     create: () => (() => void) | void,
     deps: Array<mixed> | void | null,
@@ -414,32 +403,32 @@ export type Dispatcher = {
     create: () => (() => void) | void,
     deps: Array<mixed> | void | null,
   ): void,
-  useCallback<T>(callback: T, deps: Array<mixed> | void | null): T,
-  useMemo<T>(nextCreate: () => T, deps: Array<mixed> | void | null): T,
-  useImperativeHandle<T>(
+  useCallback: <T>(callback: T, deps: Array<mixed> | void | null) => T,
+  useMemo: <T>(nextCreate: () => T, deps: Array<mixed> | void | null) => T,
+  useImperativeHandle: <T>(
     ref: {current: T | null} | ((inst: T | null) => mixed) | null | void,
     create: () => T,
     deps: Array<mixed> | void | null,
-  ): void,
-  useDebugValue<T>(value: T, formatterFn: ?(value: T) => mixed): void,
-  useDeferredValue<T>(value: T, initialValue?: T): T,
-  useTransition(): [
+  ) => void,
+  useDebugValue: <T>(
+    value: T,
+    formatterFn: ?(value: T) => mixed,
+  ) => void,
+  useDeferredValue: <T>(value: T, initialValue?: T) => T,
+  useTransition: () => [
     boolean,
     (callback: () => void, options?: StartTransitionOptions) => void,
   ],
-  useSyncExternalStore<T>(
+  useSyncExternalStore: <T>(
     subscribe: (() => void) => () => void,
     getSnapshot: () => T,
     getServerSnapshot?: () => T,
-  ): T,
-  useId(): string,
+  ) => T,
+  useId: () => string,
   useCacheRefresh: () => <T>(?() => T, ?T) => void,
   useMemoCache: (size: number) => Array<any>,
   useHostTransitionStatus: () => TransitionStatus,
-  useOptimistic: <S, A>(
-    passthrough: S,
-    reducer: ?(S, A) => S,
-  ) => [S, (A) => void],
+  useOptimistic: <S, A>(passthrough: S, reducer: ?(S, A) => S) => [S, (A) => void],
   useFormState: <S, P>(
     action: (Awaited<S>, P) => S,
     initialState: Awaited<S>,
