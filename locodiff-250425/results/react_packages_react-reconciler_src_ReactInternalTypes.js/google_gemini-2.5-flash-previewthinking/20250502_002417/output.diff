
index 88a7524f..44e5492b 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmpnmgdolcn_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmpk54w7rf4_actual.txt	
@@ -18,7 +18,6 @@ import type {
   ReactComponentInfo,
   ReactDebugInfo,
 } from 'shared/ReactTypes';
-import type {TransitionTypes} from 'react/src/ReactTransitionType';
 import type {WorkTag} from './ReactWorkTags';
 import type {TypeOfMode} from './ReactTypeOfMode';
 import type {Flags} from './ReactFiberFlags';
@@ -34,12 +33,15 @@ import type {
   TransitionStatus,
 } from './ReactFiberConfig';
 import type {Cache} from './ReactFiberCacheComponent';
-import type {Transition} from 'react/src/ReactStartTransition';
-import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
+import type {
+  TracingMarkerInstance,
+} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
 import type {ScheduledGesture} from './ReactFiberGestureScheduler';
+import type {Transition} from 'react/src/ReactStartTransition';
+import type {TransitionTypes} from 'react/src/ReactTransitionType';
 
 // Unwind Circular: moved from ReactFiberHooks.old
 export type HookType =
@@ -57,6 +59,7 @@ export type HookType =
   | 'useDebugValue'
   | 'useDeferredValue'
   | 'useTransition'
+  | 'useMutableSource'
   | 'useSyncExternalStore'
   | 'useId'
   | 'useCacheRefresh'
@@ -83,6 +86,7 @@ export type MemoCache = {
   index: number,
 };
 
+
 // A Fiber is work on a Component that needs to be done or was done. There can
 // be more than one per component.
 export type Fiber = {
@@ -231,6 +235,8 @@ type BaseFiberRootProperties = {
   // Top context object, used by renderSubtreeIntoContainer
   context: Object | null,
   pendingContext: Object | null,
+  // Determines if we should attempt to hydrate on the initial mount
+  +isDehydrated: boolean,
 
   // Used to create a linked list that represent all the roots that have
   // pending work scheduled on them.
@@ -378,6 +384,7 @@ type ProfilerCommitHooksOnlyFiberRootProperties = {
 // Exported FiberRoot type includes all properties,
 // To avoid requiring potentially error-prone :any casts throughout the project.
 // The types are defined separately within this file to ensure they stay in sync.
+// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
 export type FiberRoot = {
   ...BaseFiberRootProperties,
   ...SuspenseCallbackOnlyFiberRootProperties,
@@ -406,6 +413,14 @@ export type Dispatcher = {
   ): void,
   // TODO: Non-nullable once `enableUseEffectEventHook` is on everywhere.
   useEffectEvent?: <Args, F: (...Array<Args>) => mixed>(callback: F) => F,
+  // TODO: Non-nullable once `enableUseEffectCRUDOverload` is on everywhere.
+  useResourceEffect?: (
+    create: () => {...} | void | null,
+    createDeps: Array<mixed> | void | null,
+    update: ((resource: {...} | void | null) => void) | void,
+    updateDeps: Array<mixed> | void | null,
+    destroy: ((resource: {...} | void | null) => void) | void,
+  ) => void,
   useInsertionEffect(
     create: () => (() => void) | void,
     deps: Array<mixed> | void | null,
