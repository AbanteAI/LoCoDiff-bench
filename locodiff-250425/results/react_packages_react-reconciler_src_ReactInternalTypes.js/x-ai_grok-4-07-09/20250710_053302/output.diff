
index 88a7524f6..dc8aafcec 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmpexywh7ju_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmpte7vn7sp_actual.txt	
@@ -10,15 +10,17 @@
 import type {
   RefObject,
   ReactContext,
+  MutableSourceSubscribeFn,
+  MutableSourceGetSnapshotFn,
+  MutableSourceVersion,
+  MutableSource,
   StartTransitionOptions,
   Wakeable,
   Usable,
-  ReactFormState,
   Awaited,
   ReactComponentInfo,
   ReactDebugInfo,
 } from 'shared/ReactTypes';
-import type {TransitionTypes} from 'react/src/ReactTransitionType';
 import type {WorkTag} from './ReactWorkTags';
 import type {TypeOfMode} from './ReactTypeOfMode';
 import type {Flags} from './ReactFiberFlags';
@@ -26,7 +28,6 @@ import type {Lane, Lanes, LaneMap} from './ReactFiberLane';
 import type {RootTag} from './ReactRootTags';
 import type {
   Container,
-  Instance,
   TimeoutHandle,
   NoTimeout,
   ActivityInstance,
@@ -34,8 +35,7 @@ import type {
   TransitionStatus,
 } from './ReactFiberConfig';
 import type {Cache} from './ReactFiberCacheComponent';
-import type {Transition} from 'react/src/ReactStartTransition';
-import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
+import type {TracingMarkerInstance, Transition} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
@@ -248,6 +248,7 @@ type BaseFiberRootProperties = {
   pingedLanes: Lanes,
   warmLanes: Lanes,
   expiredLanes: Lanes,
+  mutableReadLanes: Lanes,
   errorRecoveryDisabledLanes: Lanes,
   shellSuspendCounter: number,
 
@@ -384,6 +385,7 @@ export type FiberRoot = {
   ...UpdaterTrackingOnlyFiberRootProperties,
   ...TransitionTracingOnlyFiberRootProperties,
   ...ProfilerCommitHooksOnlyFiberRootProperties,
+  ...
 };
 
 type BasicStateAction<S> = (S => S) | S;
@@ -427,6 +429,11 @@ export type Dispatcher = {
     boolean,
     (callback: () => void, options?: StartTransitionOptions) => void,
   ],
+  useMutableSource<TSource, Snapshot>(
+    source: MutableSource<TSource>,
+    getSnapshot: MutableSourceGetSnapshotFn<TSource, Snapshot>,
+    subscribe: MutableSourceSubscribeFn<TSource, Snapshot>,
+  ): Snapshot,
   useSyncExternalStore<T>(
     subscribe: (() => void) => () => void,
     getSnapshot: () => T,
