
index 88a7524f..db3186c2 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmprl38uh1__expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmpge_x08xb_actual.txt	
@@ -34,8 +34,10 @@ import type {
   TransitionStatus,
 } from './ReactFiberConfig';
 import type {Cache} from './ReactFiberCacheComponent';
-import type {Transition} from 'react/src/ReactStartTransition';
-import type {TracingMarkerInstance} from './ReactFiberTracingMarkerComponent';
+import type {
+  TracingMarkerInstance,
+  Transition,
+} from './ReactFiberTracingMarkerComponent';
 import type {ConcurrentUpdate} from './ReactFiberConcurrentUpdates';
 import type {ComponentStackNode} from 'react-server/src/ReactFizzComponentStack';
 import type {ThenableState} from './ReactFiberThenable';
@@ -164,6 +166,12 @@ export type Fiber = {
   subtreeFlags: Flags,
   deletions: Array<Fiber> | null,
 
+  // The first and last fiber with side-effect within this subtree. This allows
+  // us to reuse a slice of the linked list when we reuse the work done within
+  // this fiber.
+  firstEffect: Fiber | null,
+  lastEffect: Fiber | null,
+
   lanes: Lanes,
   childLanes: Lanes,
 
@@ -221,6 +229,8 @@ type BaseFiberRootProperties = {
 
   pingCache: WeakMap<Wakeable, Set<mixed>> | Map<Wakeable, Set<mixed>> | null,
 
+  // A finished work-in-progress HostRoot that's ready to be committed.
+  finishedWork: Fiber | null,
   // Timeout handle returned by setTimeout. Used to cancel a pending timeout, if
   // it's superseded by a new one.
   timeoutHandle: TimeoutHandle | NoTimeout,
@@ -231,6 +241,10 @@ type BaseFiberRootProperties = {
   // Top context object, used by renderSubtreeIntoContainer
   context: Object | null,
   pendingContext: Object | null,
+  // Determines if we should attempt to hydrate on the initial mount
+  +isDehydrated: boolean,
+
+  // Used by useMutableSource hook to avoid tearing during hydration.
 
   // Used to create a linked list that represent all the roots that have
   // pending work scheduled on them.
@@ -251,6 +265,8 @@ type BaseFiberRootProperties = {
   errorRecoveryDisabledLanes: Lanes,
   shellSuspendCounter: number,
 
+  finishedLanes: Lanes,
+
   entangledLanes: Lanes,
   entanglements: LaneMap<Lanes>,
 
@@ -275,10 +291,7 @@ type BaseFiberRootProperties = {
       +errorBoundary?: ?React$Component<any, any>,
     },
   ) => void,
-  onRecoverableError: (
-    error: mixed,
-    errorInfo: {+componentStack?: ?string},
-  ) => void,
+  onRecoverableError: (error: mixed, errorInfo: {+componentStack?: ?string}) => void,
 
   formState: ReactFormState<any, any> | null,
 
@@ -378,13 +391,12 @@ type ProfilerCommitHooksOnlyFiberRootProperties = {
 // Exported FiberRoot type includes all properties,
 // To avoid requiring potentially error-prone :any casts throughout the project.
 // The types are defined separately within this file to ensure they stay in sync.
-export type FiberRoot = {
-  ...BaseFiberRootProperties,
-  ...SuspenseCallbackOnlyFiberRootProperties,
-  ...UpdaterTrackingOnlyFiberRootProperties,
-  ...TransitionTracingOnlyFiberRootProperties,
-  ...ProfilerCommitHooksOnlyFiberRootProperties,
-};
+// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
+export type FiberRoot = BaseFiberRootProperties &
+  SuspenseCallbackOnlyFiberRootProperties &
+  UpdaterTrackingOnlyFiberRootProperties &
+  TransitionTracingOnlyFiberRootProperties &
+  ProfilerCommitHooksOnlyFiberRootProperties;
 
 type BasicStateAction<S> = (S => S) | S;
 type Dispatch<A> = A => void;
@@ -401,8 +413,11 @@ export type Dispatcher = {
   useContext<T>(context: ReactContext<T>): T,
   useRef<T>(initialValue: T): {current: T},
   useEffect(
-    create: () => (() => void) | void,
-    deps: Array<mixed> | void | null,
+    create: (() => (() => void) | void) | (() => {...} | void | null),
+    createDeps: Array<mixed> | void | null,
+    update?: ((resource: {...} | void | null) => void) | void,
+    updateDeps?: Array<mixed> | void | null,
+    destroy?: ((resource: {...} | void | null) => void) | void,
   ): void,
   // TODO: Non-nullable once `enableUseEffectEventHook` is on everywhere.
   useEffectEvent?: <Args, F: (...Array<Args>) => mixed>(callback: F) => F,
