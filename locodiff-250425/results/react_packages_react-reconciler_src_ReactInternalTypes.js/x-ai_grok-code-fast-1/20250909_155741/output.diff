
index 88a7524f6..b203d5739 100644
--- a/react_packages_react-reconciler_src_ReactInternalTypes.js_expectedoutput.txt (expected):tmp/tmp3y2czt2z_expected.txt	
+++ b/react_packages_react-reconciler_src_ReactInternalTypes.js_extracted.txt (actual):tmp/tmpw588tgdu_actual.txt	
@@ -3,7 +3,6 @@
  *
  * This source code is licensed under the MIT license found in the
  * LICENSE file in the root directory of this source tree.
- *
  * @flow
  */
 
@@ -57,6 +56,8 @@ export type HookType =
   | 'useDebugValue'
   | 'useDeferredValue'
   | 'useTransition'
+  | 'useMutationEffect'
+  | 'useMutableSource'
   | 'useSyncExternalStore'
   | 'useId'
   | 'useCacheRefresh'
@@ -167,6 +168,13 @@ export type Fiber = {
   lanes: Lanes,
   childLanes: Lanes,
 
+  // Represents a time in the future by which this work should be completed.
+  // Does not include work found in its subtree.
+  expirationTime: ExpirationTime,
+
+  // This is used to quickly determine if a subtree has no pending changes.
+  childExpirationTime: ExpirationTime,
+
   // This is a pooled version of a Fiber. Every fiber that gets updated will
   // eventually have a pair. There are cases when we can clean up pairs to save
   // memory if we need to.
@@ -197,7 +205,6 @@ export type Fiber = {
   // workInProgress : Fiber ->  alternate The alternate used for reuse happens
   // to be the same as work in progress.
   // __DEV__ only
-
   _debugInfo?: ReactDebugInfo | null,
   _debugOwner?: ReactComponentInfo | Fiber | null,
   _debugStack?: string | Error | null,
@@ -208,6 +215,8 @@ export type Fiber = {
   _debugHookTypes?: Array<HookType> | null,
 };
 
+type PendingInteractionMap = Map<ExpirationTime, Set<Interaction>>;
+
 type BaseFiberRootProperties = {
   // The type of root (legacy, batched, concurrent, etc.)
   tag: RootTag,
@@ -240,6 +249,7 @@ type BaseFiberRootProperties = {
   // task that the root will work on.
   callbackNode: any,
   callbackPriority: Lane,
+  eventTimes: LaneMap<number>,
   expirationTimes: LaneMap<number>,
   hiddenUpdates: LaneMap<Array<ConcurrentUpdate> | null>,
 
@@ -254,9 +264,6 @@ type BaseFiberRootProperties = {
   entangledLanes: Lanes,
   entanglements: LaneMap<Lanes>,
 
-  pooledCache: Cache | null,
-  pooledCacheLanes: Lanes,
-
   // TODO: In Fizz, id generation is specific to each server config. Maybe we
   // should do this in Fiber, too? Deferring this decision for now because
   // there's no other place to store the prefix except for an internal field on
@@ -370,6 +377,7 @@ type TransitionTracingOnlyFiberRootProperties = {
   incompleteTransitions: Map<Transition, TracingMarkerInstance>,
 };
 
+// The following fields are only used in profiler commit hooks in Profile builds
 type ProfilerCommitHooksOnlyFiberRootProperties = {
   effectDuration: number,
   passiveEffectDuration: number,
@@ -377,13 +385,16 @@ type ProfilerCommitHooksOnlyFiberRootProperties = {
 
 // Exported FiberRoot type includes all properties,
 // To avoid requiring potentially error-prone :any casts throughout the project.
+// Profiling properties are only safe to access in profiling builds (when enableSchedulerTracing is true).
 // The types are defined separately within this file to ensure they stay in sync.
+// (We don't have to use an inline :any cast when enableSchedulerTracing is disabled.)
 export type FiberRoot = {
   ...BaseFiberRootProperties,
   ...SuspenseCallbackOnlyFiberRootProperties,
   ...UpdaterTrackingOnlyFiberRootProperties,
   ...TransitionTracingOnlyFiberRootProperties,
   ...ProfilerCommitHooksOnlyFiberRootProperties,
+  ...
 };
 
 type BasicStateAction<S> = (S => S) | S;
