
index dffd96d4..f1b5c93c 100644
--- a/ghostty_src_terminal_modes.zig_expectedoutput.txt (expected):tmp/tmpa28q2dbi_expected.txt	
+++ b/ghostty_src_terminal_modes.zig_extracted.txt (actual):tmp/tmpg4gdrcqj_actual.txt	
@@ -153,7 +153,6 @@ pub fn modeFromInt(v: u16, ansi: bool) ?Mode {
             }
         }
     }
-
     return null;
 }
 
@@ -163,7 +162,6 @@ fn entryForMode(comptime mode: Mode) ModeEntry {
     for (entries) |entry| {
         if (std.mem.eql(u8, entry.name, name)) return entry;
     }
-
     unreachable;
 }
 
@@ -173,13 +171,7 @@ const ModeEntry = struct {
     name: [:0]const u8,
     value: comptime_int,
     default: bool = false,
-
-    /// True if this is an ANSI mode, false if its a DEC mode (?-prefixed).
     ansi: bool = false,
-
-    /// If true, this mode is disabled and Ghostty will not allow it to be
-    /// set or queried. The mode enum still has it, allowing Ghostty developers
-    /// to develop a mode without exposing it to real users.
     disabled: bool = false,
 };
 
@@ -200,7 +192,6 @@ const entries: []const ModeEntry = &.{
     .{ .name = "reverse_colors", .value = 5 },
     .{ .name = "origin", .value = 6 },
     .{ .name = "wraparound", .value = 7, .default = true },
-    .{ .name = "autorepeat", .value = 8 },
     .{ .name = "mouse_event_x10", .value = 9 },
     .{ .name = "cursor_blinking", .value = 12 },
     .{ .name = "cursor_visible", .value = 25, .default = true },
