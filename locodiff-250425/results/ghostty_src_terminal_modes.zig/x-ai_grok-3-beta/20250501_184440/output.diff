--- ghostty_src_terminal_modes.zig_expectedoutput.txt (expected)+++ ghostty_src_terminal_modes.zig_extracted.txt (actual)@@ -14,24 +14,20 @@ pub const ModeState = struct {
     /// The values of the current modes.
     values: ModePacked = .{},
-
     /// The saved values. We only allow saving each mode once.
     /// This is in line with other terminals that implement XTSAVE
     /// and XTRESTORE. We can improve this in the future if it becomes
     /// a real-world issue but we need to be aware of a DoS vector.
     saved: ModePacked = .{},
-
     /// The default values for the modes. This is used to reset
     /// the modes to their default values during reset.
     default: ModePacked = .{},
-
     /// Reset the modes to their default values. This also clears the
     /// saved state.
     pub fn reset(self: *ModeState) void {
         self.values = self.default;
         self.saved = .{};
     }
-
     /// Set a mode to a value.
     pub fn set(self: *ModeState, mode: Mode, value: bool) void {
         switch (mode) {
@@ -41,7 +37,6 @@             },
         }
     }
-
     /// Get the value of a mode.
     pub fn get(self: *ModeState, mode: Mode) bool {
         switch (mode) {
@@ -51,7 +46,6 @@             },
         }
     }
-
     /// Save the state of the given mode. This can then be restored
     /// with restore. This will only be accurate if the previous
     /// mode was saved exactly once and not restored. Otherwise this
@@ -64,7 +58,6 @@             },
         }
     }
-
     /// See save. This will return the restored value.
     pub fn restore(self: *ModeState, mode: Mode) bool {
         switch (mode) {
@@ -75,7 +68,6 @@             },
         }
     }
-
     test {
         // We have this here so that we explicitly fail when we change the
         // size of modes. The size of modes is NOT particularly important,
@@ -83,7 +75,6 @@         try std.testing.expectEqual(8, @sizeOf(ModePacked));
     }
 };
-
 /// A packed struct of all the settable modes. This shouldn't
 /// be used directly but rather through the ModeState struct.
 pub const ModePacked = packed_struct: {
@@ -98,7 +89,6 @@             .alignment = 0,
         };
     }
-
     break :packed_struct @Type(.{ .@"struct" = .{
         .layout = .@"packed",
         .fields = &fields,
@@ -106,7 +96,6 @@         .is_tuple = false,
     } });
 };
-
 /// An enum(u16) of the available modes. See entries for available values.
 pub const Mode = mode_enum: {
     const EnumField = std.builtin.Type.EnumField;
@@ -120,7 +109,6 @@             })),
         };
     }
-
     break :mode_enum @Type(.{ .@"enum" = .{
         .tag_type = ModeTag.Backing,
         .fields = &fields,
@@ -128,21 +116,18 @@         .is_exhaustive = true,
     } });
 };
-
 /// The tag type for our enum is a u16 but we use a packed struct
 /// in order to pack the ansi bit into the tag.
 pub const ModeTag = packed struct(u16) {
     pub const Backing = @typeInfo(@This()).@"struct".backing_integer.?;
     value: u15,
     ansi: bool = false,
-
     test "order" {
         const t: ModeTag = .{ .value = 1 };
         const int: Backing = @bitCast(t);
         try std.testing.expectEqual(@as(Backing, 1), int);
     }
 };
-
 pub fn modeFromInt(v: u16, ansi: bool) ?Mode {
     inline for (entries) |entry| {
         if (comptime !entry.disabled) {
@@ -153,36 +138,29 @@             }
         }
     }
-
     return null;
 }
-
 fn entryForMode(comptime mode: Mode) ModeEntry {
     @setEvalBranchQuota(10_000);
     const name = @tagName(mode);
     for (entries) |entry| {
         if (std.mem.eql(u8, entry.name, name)) return entry;
     }
-
     unreachable;
 }
-
 /// A single entry of a possible mode we support. This is used to
 /// dynamically define the enum and other tables.
 const ModeEntry = struct {
     name: [:0]const u8,
     value: comptime_int,
     default: bool = false,
-
     /// True if this is an ANSI mode, false if its a DEC mode (?-prefixed).
     ansi: bool = false,
-
     /// If true, this mode is disabled and Ghostty will not allow it to be
     /// set or queried. The mode enum still has it, allowing Ghostty developers
     /// to develop a mode without exposing it to real users.
     disabled: bool = false,
 };
-
 /// The full list of available entries. For documentation see how
 /// they're used within Ghostty or google their values. It is not
 /// valuable to redocument them all here.
@@ -192,7 +170,6 @@     .{ .name = "insert", .value = 4, .ansi = true },
     .{ .name = "send_receive_mode", .value = 12, .ansi = true, .default = true }, // SRM
     .{ .name = "linefeed", .value = 20, .ansi = true },
-
     // DEC
     .{ .name = "cursor_keys", .value = 1 }, // DECCKM
     .{ .name = "132_column", .value = 3 },
@@ -229,27 +206,22 @@     .{ .name = "report_color_scheme", .value = 2031 },
     .{ .name = "in_band_size_reports", .value = 2048 },
 };
-
 test {
     _ = Mode;
     _ = ModePacked;
 }
-
 test modeFromInt {
     try testing.expect(modeFromInt(4, true).? == .insert);
     try testing.expect(modeFromInt(9, true) == null);
     try testing.expect(modeFromInt(9, false).? == .mouse_event_x10);
     try testing.expect(modeFromInt(14, true) == null);
 }
-
 test ModeState {
     var state: ModeState = .{};
-
     // Normal set/get
     try testing.expect(!state.get(.cursor_keys));
     state.set(.cursor_keys, true);
     try testing.expect(state.get(.cursor_keys));
-
     // Save/restore
     state.save(.cursor_keys);
     state.set(.cursor_keys, false);
