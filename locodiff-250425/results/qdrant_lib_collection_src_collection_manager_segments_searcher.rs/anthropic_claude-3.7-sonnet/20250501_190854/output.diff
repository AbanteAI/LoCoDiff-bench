
index 8096e53f..91d9404a 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_expectedoutput.txt (expected):tmp/tmpdjxv6dqg_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_extracted.txt (actual):tmp/tmpyqjptskm_actual.txt	
@@ -1,5 +1,5 @@
-use std::collections::BTreeSet;
 use std::collections::hash_map::Entry;
+use std::collections::BTreeSet;
 use std::sync::Arc;
 use std::sync::atomic::AtomicBool;
 
@@ -424,8 +424,7 @@ impl SegmentsSearcher {
                 let version = segment.point_version(id).ok_or_else(|| {
                     OperationError::service_error(format!("No version for point {id}"))
                 })?;
-
-                // If we already have the latest point version, keep that and continue
+                // If this point was not found yet or this segment have later version
                 let version_entry = point_version.entry(id);
                 if matches!(&version_entry, Entry::Occupied(entry) if *entry.get() >= version) {
                     return Ok(true);
@@ -845,7 +844,7 @@ mod tests {
             params: None,
             limit: 5,
             score_threshold: None,
-            offset: 0,
+            offset: None,
         };
 
         let batch_request = CoreSearchRequestBatch {
