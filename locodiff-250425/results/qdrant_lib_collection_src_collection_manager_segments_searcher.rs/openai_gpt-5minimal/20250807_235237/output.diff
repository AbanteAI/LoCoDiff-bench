
index 8096e53f4..e759b6560 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_expectedoutput.txt (expected):tmp/tmp553v8nf2_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_extracted.txt (actual):tmp/tmpvu2u1q7l_actual.txt	
@@ -289,7 +289,6 @@ impl SegmentsSearcher {
                 })
                 .unzip()
         };
-
         // perform search on all segments concurrently
         // the resulting Vec is in the same order as the segment searches were provided.
         let (all_search_results_per_segment, further_results) =
@@ -328,7 +327,6 @@ impl SegmentsSearcher {
                     res.push(runtime_handle.spawn_blocking(move || {
                         let segment_query_context =
                             query_context_arc_segment.get_segment_query_context();
-
                         search_in_segment(
                             segment,
                             partial_batch_request,
@@ -390,7 +388,6 @@ impl SegmentsSearcher {
                 let with_payload = with_payload.clone();
                 let with_vector = with_vector.clone();
                 let is_stopped = stopping_guard.get_is_stopped();
-                // TODO create one Task per segment level retrieve
                 move || {
                     Self::retrieve_blocking(
                         segments,
@@ -618,6 +615,8 @@ fn sampling_limit(
 }
 
 /// Determines the effective ef limit value for the given parameters.
+///
+/// Prefer the highest of poisson_sampling/ef_limit, but never be higher than limit
 fn effective_limit(limit: usize, ef_limit: usize, poisson_sampling: usize) -> usize {
     // Prefer the highest of poisson_sampling/ef_limit, but never be higher than limit
     poisson_sampling.max(ef_limit).min(limit)
@@ -680,7 +679,7 @@ fn search_in_segment(
                     &vectors_batch,
                     &prev_params,
                     use_sampling,
-                    segment_query_context,
+                    &segment_query_context,
                 )?;
                 further_results.append(&mut further);
                 result.append(&mut res);
@@ -699,7 +698,7 @@ fn search_in_segment(
             &vectors_batch,
             &prev_params,
             use_sampling,
-            segment_query_context,
+            &segment_query_context,
         )?;
         further_results.append(&mut further);
         result.append(&mut res);
@@ -780,7 +779,6 @@ mod tests {
     use segment::fixtures::index_fixtures::random_vector;
     use segment::index::VectorIndexEnum;
     use segment::types::{Condition, HasIdCondition};
-    use tempfile::Builder;
 
     use super::*;
     use crate::collection_manager::fixtures::{build_test_holder, random_segment};
@@ -829,6 +827,14 @@ mod tests {
         }
     }
 
+    use segment::fixtures::index_fixtures::random_vector;
+    use tempfile::Builder;
+
+    use super::*;
+    use crate::collection_manager::fixtures::{build_test_holder, random_segment};
+    use crate::operations::types::CoreSearchRequest;
+    use crate::optimizers_builder::DEFAULT_INDEXING_THRESHOLD_KB;
+
     #[tokio::test]
     async fn test_segments_search() {
         let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
@@ -932,8 +938,6 @@ mod tests {
             .await
             .unwrap();
 
-            assert_ne!(hw_measurement_acc.get_cpu(), 0);
-
             let hw_measurement_acc = HwMeasurementAcc::new();
             let query_context =
                 QueryContext::new(DEFAULT_INDEXING_THRESHOLD_KB, hw_measurement_acc.clone());
@@ -951,8 +955,6 @@ mod tests {
             .unwrap();
             assert!(!result_sampling.is_empty());
 
-            assert_ne!(hw_measurement_acc.get_cpu(), 0);
-
             // assert equivalence in depth
             assert_eq!(result_no_sampling[0].len(), result_sampling[0].len());
             assert_eq!(result_no_sampling[1].len(), result_sampling[1].len());
