
index 8096e53f..b01f5528 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_expectedoutput.txt (expected):tmp/tmpubrvxdci_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_extracted.txt (actual):tmp/tmpc3aush7w_actual.txt	
@@ -270,26 +270,26 @@ impl SegmentsSearcher {
             segments
                 .map(|segment| {
                     let query_context_arc_segment = query_context_arc.clone();
-
                     let search = runtime_handle.spawn_blocking({
                         let (segment, batch_request) = (segment.clone(), batch_request.clone());
                         move || {
                             let segment_query_context =
                                 query_context_arc_segment.get_segment_query_context();
 
-                            search_in_segment(
+                            let res = search_in_segment(
                                 segment,
                                 batch_request,
                                 use_sampling,
                                 &segment_query_context,
-                            )
+                            );
+
+                            res
                         }
                     });
                     (segment, search)
                 })
                 .unzip()
         };
-
         // perform search on all segments concurrently
         // the resulting Vec is in the same order as the segment searches were provided.
         let (all_search_results_per_segment, further_results) =
@@ -328,13 +328,13 @@ impl SegmentsSearcher {
                     res.push(runtime_handle.spawn_blocking(move || {
                         let segment_query_context =
                             query_context_arc_segment.get_segment_query_context();
-
-                        search_in_segment(
+                        let result = search_in_segment(
                             segment,
                             partial_batch_request,
                             false,
                             &segment_query_context,
-                        )
+                        );
+                        result
                     }))
                 }
                 res
@@ -367,6 +367,55 @@ impl SegmentsSearcher {
         Ok(top_scores)
     }
 
+    /// Rescore results with a formula that can reference payload values.
+    ///
+    /// Aggregates rescores from the segments.
+    pub async fn rescore_with_formula(
+        segments: LockedSegmentHolder,
+        arc_ctx: Arc<FormulaContext>,
+        runtime_handle: &Handle,
+        hw_measurement_acc: HwMeasurementAcc,
+    ) -> CollectionResult<Vec<ScoredPoint>> {
+        let limit = arc_ctx.limit;
+
+        let mut futures = {
+            let segments_guard = segments.read();
+            segments_guard
+                .non_appendable_then_appendable_segments()
+                .map(|segment| {
+                    runtime_handle.spawn_blocking({
+                        let segment = segment.clone();
+                        let arc_ctx = arc_ctx.clone();
+                        let hw_counter = hw_measurement_acc.get_counter_cell();
+                        move || {
+                            segment
+                                .get()
+                                .read()
+                                .rescore_with_formula(arc_ctx, &hw_counter)
+                        }
+                    })
+                })
+                .collect::<FuturesUnordered<_>>()
+        };
+
+        let mut segments_results = Vec::with_capacity(futures.len());
+        while let Some(result) = futures.try_next().await? {
+            segments_results.push(result?)
+        }
+
+        // use aggregator with only one "batch"
+        let mut aggregator = BatchResultAggregator::new(std::iter::once(limit));
+        aggregator.update_point_versions(segments_results.iter().flatten());
+        aggregator.update_batch_results(0, segments_results.into_iter().flatten());
+        let top = aggregator
+            .into_topk()
+            .into_iter()
+            .next()
+            .ok_or_else(|| OperationError::service_error("expected first result of aggregator"))?;
+
+        Ok(top)
+    }
+
     /// Retrieve records for the given points ids from the segments
     /// - if payload is enabled, payload will be fetched
     /// - if vector is enabled, vector will be fetched
@@ -509,54 +558,6 @@ impl SegmentsSearcher {
             })
             .await?
     }
-
-    /// Rescore results with a formula that can reference payload values.
-    ///
-    /// Aggregates rescores from the segments.
-    pub async fn rescore_with_formula(
-        segments: LockedSegmentHolder,
-        arc_ctx: Arc<FormulaContext>,
-        runtime_handle: &Handle,
-        hw_measurement_acc: HwMeasurementAcc,
-    ) -> CollectionResult<Vec<ScoredPoint>> {
-        let limit = arc_ctx.limit;
-
-        let mut futures = {
-            let segments_guard = segments.read();
-            segments_guard
-                .non_appendable_then_appendable_segments()
-                .map(|segment| {
-                    runtime_handle.spawn_blocking({
-                        let segment = segment.clone();
-                        let arc_ctx = arc_ctx.clone();
-                        let hw_counter = hw_measurement_acc.get_counter_cell();
-                        move || {
-                            segment
-                                .get()
-                                .read()
-                                .rescore_with_formula(arc_ctx, &hw_counter)
-                        }
-                    })
-                })
-                .collect::<FuturesUnordered<_>>()
-        };
-
-        let mut segments_results = Vec::with_capacity(futures.len());
-        while let Some(result) = futures.try_next().await? {
-            segments_results.push(result?)
-        }
-
-        // use aggregator with only one "batch"
-        let mut aggregator = BatchResultAggregator::new(std::iter::once(limit));
-        aggregator.update_point_versions(segments_results.iter().flatten());
-        aggregator.update_batch_results(0, segments_results.into_iter().flatten());
-        let top =
-            aggregator.into_topk().into_iter().next().ok_or_else(|| {
-                OperationError::service_error("expected first result of aggregator")
-            })?;
-
-        Ok(top)
-    }
 }
 
 #[derive(PartialEq, Default, Debug)]
@@ -592,6 +593,12 @@ struct BatchSearchParams<'a> {
     pub params: Option<&'a SearchParams>,
 }
 
+#[inline]
+fn effective_limit(limit: usize, ef_limit: usize, poisson_sampling: usize) -> usize {
+    // Prefer the highest of poisson_sampling/ef_limit, but never be higher than limit
+    poisson_sampling.max(ef_limit).min(limit)
+}
+
 /// Returns suggested search sampling size for a given number of points and required limit.
 fn sampling_limit(
     limit: usize,
@@ -604,8 +611,7 @@ fn sampling_limit(
         return 0;
     }
     let segment_probability = segment_points as f64 / total_points as f64;
-    let poisson_sampling =
-        find_search_sampling_over_point_distribution(limit as f64, segment_probability);
+    let poisson_sampling = find_search_sampling_over_point_distribution(limit as f64, segment_probability);
 
     // if no ef_limit was found, it is a plain index => sampling optimization is not needed.
     let effective = ef_limit.map_or(limit, |ef_limit| {
@@ -617,12 +623,6 @@ fn sampling_limit(
     effective
 }
 
-/// Determines the effective ef limit value for the given parameters.
-fn effective_limit(limit: usize, ef_limit: usize, poisson_sampling: usize) -> usize {
-    // Prefer the highest of poisson_sampling/ef_limit, but never be higher than limit
-    poisson_sampling.max(ef_limit).min(limit)
-}
-
 /// Process sequentially contiguous batches
 ///
 /// # Arguments
@@ -779,12 +779,12 @@ mod tests {
     use segment::data_types::vectors::DEFAULT_VECTOR_NAME;
     use segment::fixtures::index_fixtures::random_vector;
     use segment::index::VectorIndexEnum;
-    use segment::types::{Condition, HasIdCondition};
+    use segment::types::{Condition, HasIdCondition, PointIdType};
+
     use tempfile::Builder;
 
     use super::*;
     use crate::collection_manager::fixtures::{build_test_holder, random_segment};
-    use crate::collection_manager::holders::segment_holder::SegmentHolder;
     use crate::operations::types::CoreSearchRequest;
     use crate::optimizers_builder::DEFAULT_INDEXING_THRESHOLD_KB;
 
@@ -932,14 +932,12 @@ mod tests {
             .await
             .unwrap();
 
-            assert_ne!(hw_measurement_acc.get_cpu(), 0);
+            assert!(!result_no_sampling.is_empty());
 
             let hw_measurement_acc = HwMeasurementAcc::new();
             let query_context =
                 QueryContext::new(DEFAULT_INDEXING_THRESHOLD_KB, hw_measurement_acc.clone());
 
-            assert!(!result_no_sampling.is_empty());
-
             let result_sampling = SegmentsSearcher::search(
                 segment_holder.clone(),
                 batch_request,
@@ -951,36 +949,17 @@ mod tests {
             .unwrap();
             assert!(!result_sampling.is_empty());
 
-            assert_ne!(hw_measurement_acc.get_cpu(), 0);
-
             // assert equivalence in depth
             assert_eq!(result_no_sampling[0].len(), result_sampling[0].len());
             assert_eq!(result_no_sampling[1].len(), result_sampling[1].len());
 
-            for (no_sampling, sampling) in
-                result_no_sampling[0].iter().zip(result_sampling[0].iter())
+            for (no_sampling, sampling) in result_no_sampling[0].iter().zip(result_sampling[0].iter())
             {
                 assert_eq!(no_sampling.score, sampling.score); // different IDs may have same scores
             }
         }
     }
 
-    #[test]
-    fn test_retrieve() {
-        let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
-        let segment_holder = build_test_holder(dir.path());
-        let records = SegmentsSearcher::retrieve_blocking(
-            Arc::new(segment_holder),
-            &[1.into(), 2.into(), 3.into()],
-            &WithPayload::from(true),
-            &true.into(),
-            &AtomicBool::new(false),
-            HwMeasurementAcc::new(),
-        )
-        .unwrap();
-        assert_eq!(records.len(), 3);
-    }
-
     #[test]
     fn test_sampling_limit() {
         assert_eq!(sampling_limit(1000, None, 464530, 35103551), 1000);
@@ -1017,10 +996,29 @@ mod tests {
             (1000, 0, 150, 150),
             (1000, 0, 110, 110),
         ];
-        tests.into_iter().for_each(|(limit, ef_limit, poisson_sampling, effective)| assert_eq!(
-            effective_limit(limit, ef_limit, poisson_sampling),
-            effective,
-            "effective limit for [limit: {limit}, ef_limit: {ef_limit}, poisson_sampling: {poisson_sampling}] must be {effective}",
-        ));
+        tests.into_iter().for_each(
+            |(limit, ef_limit, poisson_sampling, effective)| assert_eq!(
+                effective_limit(limit, ef_limit, poisson_sampling),
+                effective,
+                "effective limit for [limit: {limit}, ef_limit: {ef_limit}, poisson_sampling: {poisson_sampling}] must be {effective}",
+            ),
+        );
+    }
+
+    #[test]
+    fn test_retrieve() {
+        let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
+        let segment_holder = build_test_holder(dir.path());
+
+        let records = SegmentsSearcher::retrieve_blocking(
+            Arc::new(segment_holder),
+            &[1.into(), 2.into(), 3.into()],
+            &WithPayload::from(true),
+            &true.into(),
+            &AtomicBool::new(false),
+            HwMeasurementAcc::new(),
+        )
+        .unwrap();
+        assert_eq!(records.len(), 3);
     }
 }
\ No newline at end of file
