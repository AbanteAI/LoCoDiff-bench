
index 8096e53f4..99b330b0a 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_expectedoutput.txt (expected):tmp/tmp8ewdo23__expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_extracted.txt (actual):tmp/tmp8lprd1jx_actual.txt	
@@ -18,7 +18,6 @@ use segment::types::{
     Filter, Indexes, PointIdType, ScoredPoint, SearchParams, SegmentConfig, SeqNumberType,
     VectorName, WithPayload, WithPayloadInterface, WithVector,
 };
-use tinyvec::TinyVec;
 use tokio::runtime::Handle;
 use tokio::task::JoinHandle;
 
@@ -289,7 +288,6 @@ impl SegmentsSearcher {
                 })
                 .unzip()
         };
-
         // perform search on all segments concurrently
         // the resulting Vec is in the same order as the segment searches were provided.
         let (all_search_results_per_segment, further_results) =
@@ -328,7 +326,6 @@ impl SegmentsSearcher {
                     res.push(runtime_handle.spawn_blocking(move || {
                         let segment_query_context =
                             query_context_arc_segment.get_segment_query_context();
-
                         search_in_segment(
                             segment,
                             partial_batch_request,
@@ -784,7 +781,6 @@ mod tests {
 
     use super::*;
     use crate::collection_manager::fixtures::{build_test_holder, random_segment};
-    use crate::collection_manager::holders::segment_holder::SegmentHolder;
     use crate::operations::types::CoreSearchRequest;
     use crate::optimizers_builder::DEFAULT_INDEXING_THRESHOLD_KB;
 
@@ -965,8 +961,8 @@ mod tests {
         }
     }
 
-    #[test]
-    fn test_retrieve() {
+    #[tokio::test]
+    async fn test_retrieve() {
         let dir = Builder::new().prefix("segment_dir").tempdir().unwrap();
         let segment_holder = build_test_holder(dir.path());
         let records = SegmentsSearcher::retrieve_blocking(
@@ -1017,10 +1013,14 @@ mod tests {
             (1000, 0, 150, 150),
             (1000, 0, 110, 110),
         ];
-        tests.into_iter().for_each(|(limit, ef_limit, poisson_sampling, effective)| assert_eq!(
+        tests
+            .into_iter()
+            .for_each(|(limit, ef_limit, poisson_sampling, effective)| {
+                assert_eq!(
             effective_limit(limit, ef_limit, poisson_sampling),
             effective,
             "effective limit for [limit: {limit}, ef_limit: {ef_limit}, poisson_sampling: {poisson_sampling}] must be {effective}",
-        ));
+        )
+            });
     }
 }
\ No newline at end of file
