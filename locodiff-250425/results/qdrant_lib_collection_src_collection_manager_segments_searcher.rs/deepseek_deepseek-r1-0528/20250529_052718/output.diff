
index 8096e53f4..594e52c1e 100644
--- a/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_expectedoutput.txt (expected):tmp/tmpeg9x4rr1_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_segments_searcher.rs_extracted.txt (actual):tmp/tmpetijxdu4_actual.txt	
@@ -1,7 +1,7 @@
-use std::collections::BTreeSet;
 use std::collections::hash_map::Entry;
-use std::sync::Arc;
+use std::collections::{BTreeSet, HashMap};
 use std::sync::atomic::AtomicBool;
+use std::sync::Arc;
 
 use ahash::AHashMap;
 use common::counter::hardware_accumulator::HwMeasurementAcc;
@@ -102,7 +102,7 @@ impl SegmentsSearcher {
         // s2 - [0.92 -> 0.86]
         // s3 - [0.93 -> 0.85]
         // If the top merged scores result range is [0.93 -> 0.86] then we do not know if s1 could have contributed more points at the lower part between [0.87 -> 0.86]
-        // In that case, we need to re-run the search without sampling on that segment.
+        // In that case, we need to rerun the search without sampling on that segment.
 
         // Initialize result aggregators for each batched request
         let mut result_aggregator = BatchResultAggregator::new(limits.iter().copied());
@@ -135,11 +135,11 @@ impl SegmentsSearcher {
         // segment id -> list of batch ids
         let mut searches_to_rerun: AHashMap<SegmentOffset, Vec<BatchOffset>> = AHashMap::new();
 
-        // Check if we want to re-run the search without sampling on some segments
+        // Check if we want to rerun the search without sampling on some segments
         for (batch_id, required_limit) in limits.into_iter().enumerate() {
             let lowest_batch_score_opt = result_aggregator.batch_lowest_scores(batch_id);
 
-            // If there are no results, we do not need to re-run the search
+            // If there are no results, we do not need to rerun the search
             if let Some(lowest_batch_score) = lowest_batch_score_opt {
                 for segment_id in 0..number_segments {
                     let segment_lowest_score = lowest_scores_per_request[segment_id][batch_id];
@@ -154,7 +154,7 @@ impl SegmentsSearcher {
                             "Search to re-run without sampling on segment_id: {segment_id} segment_lowest_score: {segment_lowest_score}, lowest_batch_score: {lowest_batch_score}, retrieved_points: {retrieved_points}, required_limit: {required_limit}",
                         );
                         // It is possible, that current segment can have better results than
-                        // the lowest score in the batch. In that case, we need to re-run the search
+                        // the lowest score in the batch. In that case, we need to rerun the search
                         // without sampling on that segment.
                         searches_to_rerun
                             .entry(segment_id)
@@ -270,13 +270,11 @@ impl SegmentsSearcher {
             segments
                 .map(|segment| {
                     let query_context_arc_segment = query_context_arc.clone();
-
                     let search = runtime_handle.spawn_blocking({
                         let (segment, batch_request) = (segment.clone(), batch_request.clone());
                         move || {
                             let segment_query_context =
                                 query_context_arc_segment.get_segment_query_context();
-
                             search_in_segment(
                                 segment,
                                 batch_request,
@@ -305,7 +303,7 @@ impl SegmentsSearcher {
                 .collect(),
             &further_results,
         );
-        // The second step of the search is to re-run the search without sampling on some segments
+        // The second step of the search is to rerun the search without sampling on some segments
         // Expected that this stage will be executed rarely
         if !searches_to_rerun.is_empty() {
             // TODO notify telemetry of failing sampling
@@ -316,7 +314,6 @@ impl SegmentsSearcher {
             let secondary_searches: Vec<_> = {
                 let mut res = vec![];
                 for (segment_id, batch_ids) in searches_to_rerun.iter() {
-                    let query_context_arc_segment = query_context_arc.clone();
                     let segment = locked_segments[*segment_id].clone();
                     let partial_batch_request = Arc::new(CoreSearchRequestBatch {
                         searches: batch_ids
@@ -324,11 +321,9 @@ impl SegmentsSearcher {
                             .map(|batch_id| batch_request.searches[*batch_id].clone())
                             .collect(),
                     });
-
                     res.push(runtime_handle.spawn_blocking(move || {
                         let segment_query_context =
                             query_context_arc_segment.get_segment_query_context();
-
                         search_in_segment(
                             segment,
                             partial_batch_request,
@@ -573,7 +568,7 @@ impl From<&QueryEnum> for SearchType {
     fn from(query: &QueryEnum) -> Self {
         match query {
             QueryEnum::Nearest(_) => Self::Nearest,
-            QueryEnum::RecommendBestScore(_) => Self::RecommendBestScore,
+            QueryEnum::RecommendBestScore(_) -> Self::RecommendBestScore,
             QueryEnum::RecommendSumScores(_) => Self::RecommendSumScores,
             QueryEnum::Discover(_) => Self::Discover,
             QueryEnum::Context(_) => Self::Context,
@@ -592,6 +587,7 @@ struct BatchSearchParams<'a> {
     pub params: Option<&'a SearchParams>,
 }
 
+///
 /// Returns suggested search sampling size for a given number of points and required limit.
 fn sampling_limit(
     limit: usize,
@@ -784,7 +780,6 @@ mod tests {
 
     use super::*;
     use crate::collection_manager::fixtures::{build_test_holder, random_segment};
-    use crate::collection_manager::holders::segment_holder::SegmentHolder;
     use crate::operations::types::CoreSearchRequest;
     use crate::optimizers_builder::DEFAULT_INDEXING_THRESHOLD_KB;
 
@@ -794,6 +789,8 @@ mod tests {
 
         let segment1 = random_segment(dir.path(), 10, 200, 256);
 
+        let hw_counter = HardwareCounterCell::new();
+
         let vector_index = segment1
             .vector_data
             .get(DEFAULT_VECTOR_NAME)
@@ -803,8 +800,6 @@ mod tests {
 
         let vector_index_borrow = vector_index.borrow();
 
-        let hw_counter = HardwareCounterCell::new();
-
         match &*vector_index_borrow {
             VectorIndexEnum::Plain(plain_index) => {
                 let res_1 = plain_index.is_small_enough_for_unindexed_search(25, None, &hw_counter);
@@ -845,7 +840,7 @@ mod tests {
             params: None,
             limit: 5,
             score_threshold: None,
-            offset: 0,
+            offset: None,
         };
 
         let batch_request = CoreSearchRequestBatch {
@@ -938,7 +933,7 @@ mod tests {
             let query_context =
                 QueryContext::new(DEFAULT_INDEXING_THRESHOLD_KB, hw_measurement_acc.clone());
 
-            assert!(!result_no_sampling.is_empty());
+            assert!(&result_no_sampling.is_empty());
 
             let result_sampling = SegmentsSearcher::search(
                 segment_holder.clone(),
@@ -949,7 +944,7 @@ mod tests {
             )
             .await
             .unwrap();
-            assert!(!result_sampling.is_empty());
+            assert!(&result_sampling.is_empty());
 
             assert_ne!(hw_measurement_acc.get_cpu(), 0);
 
@@ -1017,10 +1012,12 @@ mod tests {
             (1000, 0, 150, 150),
             (1000, 0, 110, 110),
         ];
-        tests.into_iter().for_each(|(limit, ef_limit, poisson_sampling, effective)| assert_eq!(
-            effective_limit(limit, ef_limit, poisson_sampling),
-            effective,
-            "effective limit for [limit: {limit}, ef_limit: {ef_limit}, poisson_sampling: {poisson_sampling}] must be {effective}",
-        ));
+        for (limit, ef_limit, poisson_sampling, effective) in tests {
+            assert_eq!(
+                effective_limit(limit, ef_limit, poisson_sampling),
+                effective,
+                "effective limit for [limit: {limit}, ef_limit: {ef_limit}, poisson_sampling: {poisson_sampling}] must be {effective}",
+            );
+        }
     }
 }
\ No newline at end of file
