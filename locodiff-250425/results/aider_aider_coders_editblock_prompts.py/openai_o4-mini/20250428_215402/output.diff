--- aider_aider_coders_editblock_prompts.py_expectedoutput.txt (expected)+++ aider_aider_coders_editblock_prompts.py_extracted.txt (actual)@@ -1,7 +1,6 @@ # flake8: noqa: E501
 
 from .base_prompts import CoderPrompts
-
 
 class EditBlockPrompts(CoderPrompts):
     main_system = """Act as an expert software developer.
@@ -11,20 +10,15 @@ Take requests for changes to the supplied code.
 If the request is ambiguous, ask questions.
 
-Always reply to the user in {language}.
+Always reply to the user in the same language they are using.
 
 Once you understand the request you MUST:
-
 1. Decide if you need to propose *SEARCH/REPLACE* edits to any files that haven't been added to the chat. You can create new files without asking!
-
 But if you need to propose edits to existing files not already added to the chat, you *MUST* tell the user their full path names and ask them to *add the files to the chat*.
 End your reply and wait for their approval.
 You can keep asking if you then decide you need to edit more files.
-
 2. Think step-by-step and explain the needed changes in a few short sentences.
-
 3. Describe each change with a *SEARCH/REPLACE block* per the examples below.
-
 All changes to files must use this *SEARCH/REPLACE block* format.
 ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK*!
 {shell_cmd_prompt}
@@ -35,12 +29,11 @@ 
 Just suggest shell commands this way, not example code.
 Only suggest complete shell commands that are ready to execute, without placeholders.
-Only suggest at most a few shell commands at a time, not more than 1-3, one per line.
-Do not suggest multi-line shell commands.
-All shell commands will run from the root directory of the user's project.
+Only suggest at most a few shell commands at a time, not more than 1-3.
 
 Use the appropriate shell based on the user's system info:
 {platform}
+
 Examples of when to suggest shell commands:
 
 - If you changed a self-contained html file, suggest an OS-appropriate command to open a browser to view it to see the updated content.
@@ -55,6 +48,7 @@ Keep in mind these details about the user's platform and environment:
 {platform}
 """
+
     example_messages = [
         dict(
             role="user",
@@ -167,14 +161,10 @@ 
 Keep *SEARCH/REPLACE* blocks concise.
 Break large *SEARCH/REPLACE* blocks into a series of smaller blocks that each change a small portion of the file.
-Include just the changing lines, and a few surrounding lines if needed for uniqueness.
-Do not include long runs of unchanging lines in *SEARCH/REPLACE* blocks.
 
-Only create *SEARCH/REPLACE* blocks for files that the user has added to the chat!
+Pay attention to which filenames the user wants you to edit, especially if they are asking you to create a new file.
 
 To move code within a file, use 2 *SEARCH/REPLACE* blocks: 1 to delete it from its current location, 1 to insert it in the new location.
-
-Pay attention to which filenames the user wants you to edit, especially if they are asking you to create a new file.
 
 If you want to put code in a new file, use a *SEARCH/REPLACE block* with:
 - A new file path, including dir name if needed
@@ -191,7 +181,6 @@ 
     go_ahead_tip = """If the user just says something like "ok" or "go ahead" or "do that" they probably want you to make SEARCH/REPLACE blocks for the code changes you just proposed.
 The user will say when they've applied your edits. If they haven't explicitly confirmed the edits have been applied, they probably want proper SEARCH/REPLACE blocks.
-
 """
 
     shell_cmd_reminder = """
@@ -203,5 +192,4 @@ - Suggest OS-appropriate commands to delete or rename files/directories, or other file system operations.
 - If your code changes add new dependencies, suggest the command to install them.
 - Etc.
-
 """