
index b000ba510..b4443cf92 100644
--- a/aider_aider_coders_editblock_prompts.py_expectedoutput.txt (expected):tmp/tmpua7bkgzn_expected.txt	
+++ b/aider_aider_coders_editblock_prompts.py_extracted.txt (actual):tmp/tmpyvw0idfr_actual.txt	
@@ -8,6 +8,7 @@ class EditBlockPrompts(CoderPrompts):
 Always use best practices when coding.
 Respect and use existing conventions, libraries, etc that are already present in the code base.
 {lazy_prompt}
+
 Take requests for changes to the supplied code.
 If the request is ambiguous, ask questions.
 
@@ -26,7 +27,7 @@ You can keep asking if you then decide you need to edit more files.
 3. Describe each change with a *SEARCH/REPLACE block* per the examples below.
 
 All changes to files must use this *SEARCH/REPLACE block* format.
-ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK*!
+ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK!
 {shell_cmd_prompt}
 """
 
@@ -55,6 +56,7 @@ Examples of when to suggest shell commands:
 Keep in mind these details about the user's platform and environment:
 {platform}
 """
+
     example_messages = [
         dict(
             role="user",
@@ -156,7 +158,6 @@ Every *SEARCH/REPLACE block* must use this format:
 7. The end of the replace block: >>>>>>> REPLACE
 8. The closing fence: {fence[1]}
 
-Use the *FULL* file path, as shown to you by the user.
 {quad_backtick_reminder}
 Every *SEARCH* section must *EXACTLY MATCH* the existing file content, character for character, including all comments, docstrings, etc.
 If the file contains code or other data wrapped/escaped in json/xml/quotes or other containers, you need to propose edits to the literal contents of the file, including the container markup.
@@ -170,18 +171,23 @@ Break large *SEARCH/REPLACE* blocks into a series of smaller blocks that each ch
 Include just the changing lines, and a few surrounding lines if needed for uniqueness.
 Do not include long runs of unchanging lines in *SEARCH/REPLACE* blocks.
 
+Include *ALL* the code being searched and replaced!
+
 Only create *SEARCH/REPLACE* blocks for files that the user has added to the chat!
 
 To move code within a file, use 2 *SEARCH/REPLACE* blocks: 1 to delete it from its current location, 1 to insert it in the new location.
 
-Pay attention to which filenames the user wants you to edit, especially if they are asking you to create a new file.
+Pay attention to which files the user wants you to edit, especially if they are asking you to create a new file.
 
 If you want to put code in a new file, use a *SEARCH/REPLACE block* with:
 - A new file path, including dir name if needed
 - An empty `SEARCH` section
 - The new file's contents in the `REPLACE` section
 
-{rename_with_shell}{go_ahead_tip}{lazy_prompt}ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK*!
+{rename_with_shell}{go_ahead_tip}
+
+{lazy_prompt}
+ONLY EVER RETURN CODE IN A *SEARCH/REPLACE BLOCK!
 {shell_cmd_reminder}
 """
 
