--- qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_extracted.txt (actual)@@ -19,7 +19,10 @@ use segment::segment::{Segment, SegmentVersion};
 use segment::segment_constructor::build_segment;
 use segment::segment_constructor::segment_builder::SegmentBuilder;
-use segment::types::{HnswConfig, Indexes, QuantizationConfig, SegmentConfig, VectorStorageType};
+use segment::types::{
+    HnswConfig, Indexes, PayloadFieldSchema, PayloadKeyType, PointIdType, QuantizationConfig,
+    SegmentConfig, SeqNumberType, VectorStorageType,
+};
 
 use crate::collection_manager::holders::proxy_segment::{self, ProxyIndexChange, ProxySegment};
 use crate::collection_manager::holders::segment_holder::{
@@ -695,6 +698,7 @@         {
             // This block locks all operations with collection. It should be fast
             let mut write_segments_guard = segments.write();
+            let old_optimized_segment_version = optimized_segment.version();
 
             // Apply index changes before point deletions
             // Point deletions bump the segment version, can cause index changes to be ignored
@@ -762,6 +766,10 @@                 for proxy in proxies {
                     proxy.drop_data()?;
                 }
+
+                timer.set_success(true);
+
+                Ok(point_count)
             } else {
                 // unlock collection for search and updates
                 drop(write_segments_guard);
@@ -772,11 +780,10 @@                     proxy.drop_data()?;
                 }
                 tmp_segment.drop_data()?;
-            }
-
-            timer.set_success(true);
-
-            Ok(point_count)
+
+                timer.set_success(true);
+                Ok(point_count)
+            }
         }
     }
 }