
index a458d559..a7c8804a 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_expectedoutput.txt (expected):tmp/tmpdhbr16p0_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_extracted.txt (actual):tmp/tmpt5lory_w_actual.txt	
@@ -275,11 +275,10 @@ pub trait SegmentOptimizer {
 
                         // If mmap OR index is exceeded
                         let is_big = threshold_is_on_disk || threshold_is_indexed;
-
                         let index_type = match (is_big, config_on_disk) {
                             (true, true) => SparseIndexType::Mmap, // Big and configured on disk
                             (true, false) => SparseIndexType::ImmutableRam, // Big and not on disk nor reached threshold
-                            (false, _) => SparseIndexType::MutableRam,      // Small
+                            (false, _) => SparseIndexType::MutableRam, // Small
                         };
 
                         config.index.index_type = index_type;
@@ -561,6 +560,7 @@ pub trait SegmentOptimizer {
     /// If there were any record changes during the optimization - an additional plain segment will be created.
     ///
     /// Returns id of the created optimized segment. If no optimization was done - returns None
+    #[allow(clippy::too_many_arguments)]
     fn optimize(
         &self,
         segments: LockedSegmentHolder,
@@ -626,7 +626,7 @@ pub trait SegmentOptimizer {
         // If this ends up not being saved due to a crash, the segment will not be used
         match &tmp_segment {
             LockedSegment::Original(segment) => {
-                let segment_path = &segment.read().current_path;
+                let segment_path = &segment.read().segment_path;
                 SegmentVersion::save(segment_path)?;
             }
             LockedSegment::Proxy(_) => unreachable!(),
