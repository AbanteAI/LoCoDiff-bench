
index a458d559..637fe3b7 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_expectedoutput.txt (expected):tmp/tmpjc335elc_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_extracted.txt (actual):tmp/tmpt47hrwcr_actual.txt	
@@ -1,8 +1,8 @@
 use std::collections::{HashMap, HashSet};
 use std::ops::Deref;
 use std::path::Path;
-use std::sync::Arc;
 use std::sync::atomic::{AtomicBool, Ordering};
+use std::sync::Arc;
 
 use common::budget::{ResourceBudget, ResourcePermit};
 use common::counter::hardware_counter::HardwareCounterCell;
@@ -10,7 +10,7 @@ use common::disk::dir_size;
 use io::storage_version::StorageVersion;
 use itertools::Itertools;
 use parking_lot::{Mutex, RwLockUpgradableReadGuard};
-use segment::common::operation_error::{OperationResult, check_process_stopped};
+use segment::common::operation_error::{check_process_stopped, OperationResult};
 use segment::common::operation_time_statistics::{
     OperationDurationsAggregator, ScopeDurationMeasurer,
 };
@@ -26,7 +26,6 @@ use crate::collection_manager::holders::segment_holder::{
     LockedSegment, LockedSegmentHolder, SegmentId,
 };
 use crate::config::CollectionParams;
-use crate::operations::config_diff::DiffConfig;
 use crate::operations::types::{CollectionError, CollectionResult};
 
 const BYTES_IN_KB: usize = 1024;
@@ -152,7 +151,6 @@ pub trait SegmentOptimizer {
         let space_needed = space_occupied.map(|x| 2 * x);
 
         // Ensure temp_path exists
-
         if !self.temp_path().exists() {
             std::fs::create_dir_all(self.temp_path()).map_err(|err| {
                 CollectionError::service_error(format!(
@@ -237,7 +235,7 @@ pub trait SegmentOptimizer {
             });
         }
 
-        // If storing on disk, set storage type in current segment (not in collection config)
+        // If storing on disk, set storage type
         if threshold_is_on_disk {
             vector_data.iter_mut().for_each(|(vector_name, config)| {
                 // Check whether on_disk is explicitly configured, if not, set it to true
@@ -359,7 +357,7 @@ pub trait SegmentOptimizer {
     ///
     /// # Result
     ///
-    /// Rolls back optimization state.
+    /// Rolls back back optimization state.
     /// All processed changes will still be there, but the collection should be returned into state
     /// before optimization.
     fn handle_cancellation(
@@ -369,12 +367,11 @@ pub trait SegmentOptimizer {
         temp_segment: LockedSegment,
     ) -> OperationResult<()> {
         self.unwrap_proxy(segments, proxy_ids);
-        if !temp_segment.get().read().is_empty() {
+        if temp_segment.get().read().is_empty() {
+            temp_segment.drop_data()?;
+        } else {
             let mut write_segments = segments.write();
             write_segments.add_new_locked(temp_segment);
-        } else {
-            // Temp segment is already removed from proxy, so nobody could write to it in between
-            temp_segment.drop_data()?;
         }
         Ok(())
     }
@@ -502,8 +499,7 @@ pub trait SegmentOptimizer {
                 description: "optimization cancelled while waiting for budget".to_string(),
             })?;
 
-        let mut optimized_segment: Segment =
-            segment_builder.build(indexing_permit, stopped, hw_counter)?;
+        let mut optimized_segment: Segment = segment_builder.build(indexing_permit, stopped, hw_counter)?;
 
         // Delete points
         let deleted_points_snapshot = proxy_deleted_points
@@ -553,7 +549,7 @@ pub trait SegmentOptimizer {
     ///
     /// * `segments` - segments holder
     /// * `ids` - list of segment ids to perform optimization on. All segments will be merged into single one
-    /// * `stopped` - flag for early stopping of the optimization. If appears to be `true` - optimization process should be cancelled, all segments unwrapped.
+    /// * `stopped` - flag for early stopping of the optimization. If appears to be `true` - optimization process should be cancelled, all segments unwrapped
     ///
     /// # Result
     ///
@@ -667,7 +663,6 @@ pub trait SegmentOptimizer {
             Err(error) => {
                 if matches!(error, CollectionError::Cancelled { .. }) {
                     self.handle_cancellation(&segments, &proxy_ids, tmp_segment)?;
-                    return Err(error);
                 }
                 return Err(error);
             }
