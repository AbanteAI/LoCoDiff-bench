--- qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_expectedoutput.txt (expected)+++ qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_extracted.txt (actual)@@ -1,8 +1,8 @@ use std::collections::{HashMap, HashSet};
 use std::ops::Deref;
 use std::path::Path;
+use std::sync::atomic::{AtomicBool, Ordering};
 use std::sync::Arc;
-use std::sync::atomic::{AtomicBool, Ordering};
 
 use common::budget::{ResourceBudget, ResourcePermit};
 use common::counter::hardware_counter::HardwareCounterCell;
@@ -26,7 +26,6 @@     LockedSegment, LockedSegmentHolder, SegmentId,
 };
 use crate::config::CollectionParams;
-use crate::operations::config_diff::DiffConfig;
 use crate::operations::types::{CollectionError, CollectionResult};
 
 const BYTES_IN_KB: usize = 1024;
@@ -388,7 +387,10 @@     /// * `optimizing_segments` - Segments to optimize
     /// * `proxy_deleted_points` - Holds a set of points, deleted while optimization was running
     /// * `proxy_changed_indexes` - Holds a set of indexes changes, created or deleted while optimization was running
+    /// * `permit` - IO resources for copying data
+    /// * `resource_budget` - Resource budget to acquire additional permits
     /// * `stopped` - flag to check if optimization was cancelled by external thread
+    /// * `hw_counter` - Hardware counter to measure IO operations
     ///
     /// # Result
     ///
@@ -553,6 +555,8 @@     ///
     /// * `segments` - segments holder
     /// * `ids` - list of segment ids to perform optimization on. All segments will be merged into single one
+    /// * `permit` - resource permit for IO operations
+    /// * `resource_budget` - resource budget to acquire additional permits
     /// * `stopped` - flag for early stopping of the optimization. If appears to be `true` - optimization process should be cancelled, all segments unwrapped.
     ///
     /// # Result
