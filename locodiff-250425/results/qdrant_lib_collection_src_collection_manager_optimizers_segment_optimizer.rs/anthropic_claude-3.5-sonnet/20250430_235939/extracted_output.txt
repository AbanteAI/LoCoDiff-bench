use std::collections::{HashMap, HashSet};
use std::ops::Deref;
use std::path::Path;
use std::sync::Arc;
use std::sync::atomic::{AtomicBool, Ordering};

use common::budget::{ResourceBudget, ResourcePermit};
use common::counter::hardware_counter::HardwareCounterCell;
use common::disk::dir_size;
use io::storage_version::StorageVersion;
use itertools::Itertools;
use parking_lot::{Mutex, RwLockUpgradableReadGuard};
use segment::common::operation_error::{OperationResult, check_process_stopped};
use segment::common::operation_time_statistics::{
    OperationDurationsAggregator, ScopeDurationMeasurer,
};
use segment::entry::entry_point::SegmentEntry;
use segment::index::sparse_index::sparse_index_config::SparseIndexType;
use segment::segment::{Segment, SegmentVersion};
use segment::segment_constructor::build_segment;
use segment::segment_constructor::segment_builder::SegmentBuilder;
use segment::types::{
    HnswConfig, Indexes, PayloadFieldSchema, PayloadKeyType, PointIdType, QuantizationConfig,
    SegmentConfig, VectorStorageType,
};

use crate::collection_manager::holders::proxy_segment::{self, ProxyIndexChange, ProxySegment};
use crate::collection_manager::holders::segment_holder::{
    LockedSegment, LockedSegmentHolder, SegmentId,
};
use crate::config::CollectionParams;
use crate::operations::types::{CollectionError, CollectionResult};

const BYTES_IN_KB: usize = 1024;

#[derive(Debug, Clone, Copy)]
pub struct OptimizerThresholds {
    pub max_segment_size_kb: usize,
    pub memmap_threshold_kb: usize,
    pub indexing_threshold_kb: usize,
}

pub trait SegmentOptimizer {
    fn name(&self) -> &str;
    
    fn segments_path(&self) -> &Path;
    
    fn temp_path(&self) -> &Path;
    
    fn collection_params(&self) -> CollectionParams;

    fn hnsw_config(&self) -> &HnswConfig;

    fn quantization_config(&self) -> Option<QuantizationConfig>;

    fn threshold_config(&self) -> &OptimizerThresholds;

    fn check_condition(
        &self,
        segments: LockedSegmentHolder,
        excluded_ids: &HashSet<SegmentId>,
    ) -> Vec<SegmentId>;

    fn get_telemetry_counter(&self) -> &Mutex<OperationDurationsAggregator>;

    fn temp_segment(&self, save_version: bool) -> CollectionResult<LockedSegment> {
        let collection_params = self.collection_params();
        let config = SegmentConfig {
            vector_data: collection_params.to_base_vector_data()?,
            sparse_vector_data: collection_params.to_sparse_vector_data()?,
            payload_storage_type: collection_params.payload_storage_type(),
        };
        Ok(LockedSegment::new(build_segment(
            self.segments_path(),
            &config,
            save_version,
        )?))
    }

    fn optimized_segment_builder(
        &self,
        optimizing_segments: &[LockedSegment],
    ) -> CollectionResult<SegmentBuilder> {
        let mut bytes_count_by_vector_name = HashMap::new();

        let mut space_occupied = Some(0u64);

        for segment in optimizing_segments {
            let segment = match segment {
                LockedSegment::Original(segment) => segment,
                LockedSegment::Proxy(_) => {
                    return Err(CollectionError::service_error(
                        "Proxy segment is not expected here".to_string(),
                    ));
                }
            };
            let locked_segment = segment.read();

            for vector_name in locked_segment.vector_names() {
                let vector_size = locked_segment.available_vectors_size_in_bytes(&vector_name)?;
                let size = bytes_count_by_vector_name.entry(vector_name).or_insert(0);
                *size += vector_size;
            }

            space_occupied =
                space_occupied.and_then(|acc| match dir_size(locked_segment.data_path()) {
                    Ok(size) => Some(size + acc),
                    Err(err) => {
                        log::debug!(
                            "Could not estimate size of segment `{}`: {}",
                            locked_segment.data_path().display(),
                            err
                        );
                        None
                    }
                });
        }

        let space_needed = space_occupied.map(|x| 2 * x);

        if !self.temp_path().exists() {
            std::fs::create_dir_all(self.temp_path()).map_err(|err| {
                CollectionError::service_error(format!(
                    "Could not create temp directory `{}`: {}",
                    self.temp_path().display(),
                    err
                ))
            })?;
        }

        let space_available = match fs4::available_space(self.temp_path()) {
            Ok(available) => Some(available),
            Err(err) => {
                log::debug!(
                    "Could not estimate available storage space in `{}`: {}",
                    self.temp_path().display(),
                    err
                );
                None
            }
        };

        match (space_available, space_needed) {
            (Some(space_available), Some(space_needed)) => {
                if space_available < space_needed {
                    return Err(CollectionError::service_error(
                        "Not enough space available for optimization".to_string(),
                    ));
                }
            }
            _ => {
                log::warn!(
                    "Could not estimate available storage space in `{}`; will try optimizing anyway",
                    self.name()
                );
            }
        }

        let maximal_vector_store_size_bytes = bytes_count_by_vector_name
            .values()
            .max()
            .copied()
            .unwrap_or(0);

        let thresholds = self.threshold_config();
        let collection_params = self.collection_params();

        let threshold_is_indexed = maximal_vector_store_size_bytes
            >= thresholds.indexing_threshold_kb.saturating_mul(BYTES_IN_KB);

        let threshold_is_on_disk = maximal_vector_store_size_bytes
            >= thresholds.memmap_threshold_kb.saturating_mul(BYTES_IN_KB);

        let mut vector_data = collection_params.to_base_vector_data()?;
        let mut sparse_vector_data = collection_params.to_sparse_vector_data()?;

        if threshold_is_indexed {
            let collection_hnsw = self.hnsw_config();
            let collection_quantization = self.quantization_config();
            vector_data.iter_mut().for_each(|(vector_name, config)| {
                let param_hnsw = collection_params
                    .vectors
                    .get_params(vector_name)
                    .and_then(|params| params.hnsw_config);
                let vector_hnsw = param_hnsw
                    .and_then(|c| c.update(collection_hnsw).ok())
                    .unwrap_or_else(|| collection_hnsw.clone());
                config.index = Indexes::Hnsw(vector_hnsw);

                let param_quantization = collection_params
                    .vectors
                    .get_params(vector_name)
                    .and_then(|params| params.quantization_config.as_ref());
                let vector_quantization = param_quantization
                    .or(collection_quantization.as_ref())
                    .cloned();
                config.quantization_config = vector_quantization;
            });
        }

        if threshold_is_on_disk {
            vector_data.iter_mut().for_each(|(vector_name, config)| {
                let config_on_disk = collection_params
                    .vectors
                    .get_params(vector_name)
                    .and_then(|config| config.on_disk);

                match config_on_disk {
                    Some(true) => config.storage_type = VectorStorageType::Mmap, 
                    Some(false) => {} 
                    None => config.storage_type = VectorStorageType::Mmap,
                }

                if let Some(config_on_disk) = config_on_disk {
                    if config_on_disk != config.storage_type.is_on_disk() {
                        log::warn!("Collection config for vector {vector_name} has on_disk={config_on_disk:?} configured, but storage type for segment doesn't match it");
                    }
                }
            });
        }

        sparse_vector_data
            .iter_mut()
            .for_each(|(vector_name, config)| {
                if let Some(sparse_config) = &collection_params.sparse_vectors {
                    if let Some(params) = sparse_config.get(vector_name) {
                        let config_on_disk = params
                            .index
                            .and_then(|index_params| index_params.on_disk)
                            .unwrap_or(threshold_is_on_disk);

                        let is_big = threshold_is_on_disk || threshold_is_indexed;

                        let index_type = match (is_big, config_on_disk) {
                            (true, true) => SparseIndexType::Mmap, 
                            (true, false) => SparseIndexType::ImmutableRam, 
                            (false, _) => SparseIndexType::MutableRam,     
                        };

                        config.index.index_type = index_type;
                    }
                }
            });

        let optimized_config = SegmentConfig {
            vector_data,
            sparse_vector_data,
            payload_storage_type: collection_params.payload_storage_type(),
        };

        Ok(SegmentBuilder::new(
            self.segments_path(),
            self.temp_path(),
            &optimized_config,
        )?)
    }

    fn unwrap_proxy(
        &self,
        segments: &LockedSegmentHolder,
        proxy_ids: &[SegmentId],
    ) -> Vec<SegmentId> {
        let mut segments_lock = segments.write();
        let mut restored_segment_ids = Vec::new();
        for &proxy_id in proxy_ids {
            if let Some(proxy_segment_ref) = segments_lock.get(proxy_id) {
                let locked_proxy_segment = proxy_segment_ref.clone();
                match locked_proxy_segment {
                    LockedSegment::Original(_) => {
                        log::warn!("Attempt to unwrap raw segment! Should not happen.")
                    }
                    LockedSegment::Proxy(proxy_segment) => {
                        let wrapped_segment = proxy_segment.read().wrapped_segment.clone();
                        let (restored_id, _proxies) =
                            segments_lock.swap_new(wrapped_segment, &[proxy_id]);
                        restored_segment_ids.push(restored_id);
                    }
                }
            }
        }
        restored_segment_ids
    }

    fn handle_cancellation(
        &self,
        segments: &LockedSegmentHolder,
        proxy_ids: &[SegmentId],
        temp_segment: LockedSegment,
    ) -> OperationResult<()> {
        self.unwrap_proxy(segments, proxy_ids);
        if !temp_segment.get().read().is_empty() {
            let mut write_segments = segments.write();
            write_segments.add_new_locked(temp_segment);
        } else {
            temp_segment.drop_data()?;
        }
        Ok(())
    }

    #[allow(clippy::too_many_arguments)]
    fn build_new_segment(
        &self,
        optimizing_segments: &[LockedSegment],
        proxy_deleted_points: proxy_segment::LockedRmSet,
        proxy_changed_indexes: proxy_segment::LockedIndexChanges,
        permit: ResourcePermit, // IO resources for copying data
        resource_budget: ResourceBudget,
        stopped: &AtomicBool,
        hw_counter: &HardwareCounterCell,
    ) -> CollectionResult<Segment> {
        let mut segment_builder = self.optimized_segment_builder(optimizing_segments)?;

        self.check_cancellation(stopped)?;

        let segments: Vec<_> = optimizing_segments
            .iter()
            .map(|i| match i {
                LockedSegment::Original(o) => o.clone(),
                LockedSegment::Proxy(_) => {
                    panic!("Trying to optimize a segment that is already being optimized!")
                }
            })
            .collect();

        let mut defragmentation_keys = HashSet::new();
        for segment in &segments {
            let payload_index = &segment.read().payload_index;
            let payload_index = payload_index.borrow();

            let keys = payload_index
                .config()
                .indexed_fields
                .iter()
                .filter_map(|(key, schema)| schema.is_tenant().then_some(key))
                .cloned();
            defragmentation_keys.extend(keys);
        }

        if !defragmentation_keys.is_empty() {
            segment_builder.set_defragment_keys(defragmentation_keys.into_iter().collect());
        }

        {
            let segment_guards = segments.iter().map(|segment| segment.read()).collect_vec();
            segment_builder.update(
                &segment_guards.iter().map(Deref::deref).collect_vec(),
                stopped,
            )?;
        }

        for field in proxy_deleted_indexes.read().iter() {
            segment_builder.remove_indexed_field(field);
        }
        for (field, schema_type) in proxy_created_indexes.read().iter() {
            segment_builder.add_indexed_field(field.to_owned(), schema_type.to_owned());
        }

        let desired_cpus = permit.num_io as usize;
        let indexing_permit = resource_budget
            .replace_with(permit, desired_cpus, 0, stopped)
            .map_err(|_| CollectionError::Cancelled {
                description: "optimization cancelled while waiting for budget".to_string(),
            })?;

        let mut optimized_segment: Segment =
            segment_builder.build(indexing_permit, stopped, hw_counter)?;

        let deleted_points_snapshot = proxy_deleted_points
            .read()
            .iter()
            .map(|(point_id, versions)| (*point_id, *versions))
            .collect::<Vec<_>>();

        let old_optimized_segment_version = optimized_segment.version();
        for (field_name, change) in proxy_changed_indexes.read().iter_ordered() {
            debug_assert!(
                change.version() >= old_optimized_segment_version,
                "proxied index change should have newer version than segment",
            );
            match change {
                ProxyIndexChange::Create(schema, version) => {
                    optimized_segment.create_field_index(
                        *version,
                        field_name,
                        Some(schema),
                        hw_counter,
                    )?;
                }
                ProxyIndexChange::Delete(version) => {
                    optimized_segment.delete_field_index(*version, field_name)?;
                }
            }
            self.check_cancellation(stopped)?;
        }

        for (point_id, versions) in deleted_points_snapshot {
            optimized_segment
                .delete_point(versions.operation_version, point_id, hw_counter)
                .unwrap();
        }

        Ok(optimized_segment)
    }

    fn optimize(
        &self,
        segments: LockedSegmentHolder,
        ids: Vec<SegmentId>,
        permit: ResourcePermit,
        resource_budget: ResourceBudget,
        stopped: &AtomicBool,
    ) -> CollectionResult<usize> {
        check_process_stopped(stopped)?;

        let mut timer = ScopeDurationMeasurer::new(self.get_telemetry_counter());
        timer.set_success(false);

        let segments_lock = segments.upgradable_read();

        let optimizing_segments: Vec<_> = ids
            .iter()
            .cloned()
            .map(|id| segments_lock.get(id))
            .filter_map(|x| x.cloned())
            .collect();

        let all_segments_ok = optimizing_segments.len() == ids.len()
            && optimizing_segments
                .iter()
                .all(|s| matches!(s, LockedSegment::Original(_)));

        if !all_segments_ok {
            return Ok(0);
        }

        check_process_stopped(stopped)?;

        let hw_counter = HardwareCounterCell::disposable(); // Internal operation, no measurement needed!

        let tmp_segment = self.temp_segment(false)?;
        let proxy_deleted_points = proxy_segment::LockedRmSet::default();
        let proxy_index_changes = proxy_segment::LockedIndexChanges::default();

        let mut proxies = Vec::new();
        for sg in optimizing_segments.iter() {
            let mut proxy = ProxySegment::new(
                sg.clone(),
                tmp_segment.clone(),
                Arc::clone(&proxy_deleted_points),
                Arc::clone(&proxy_index_changes),
                Arc::clone(&proxy_deleted_indexes),
            );
            proxy.replicate_field_indexes(0, &hw_counter)?;
            proxies.push(proxy);
        }

        match &tmp_segment {
            LockedSegment::Original(segment) => {
                let segment_path = &segment.read().current_path;
                SegmentVersion::save(segment_path)?;
            }
            LockedSegment::Proxy(_) => unreachable!(),
        }

        let proxy_ids: Vec<_> = {
            let mut write_segments = RwLockUpgradableReadGuard::upgrade(segments_lock);
            let mut proxy_ids = Vec::new();
            for (mut proxy, idx) in proxies.into_iter().zip(ids.iter().cloned()) {
                proxy.replicate_field_indexes(0, &hw_counter)?;
                proxy_ids.push(write_segments.swap_new(proxy, &[idx]).0);
            }
            proxy_ids
        };

        if let Err(e) = check_process_stopped(stopped) {
            self.handle_cancellation(&segments, &proxy_ids, tmp_segment)?;
            return Err(CollectionError::from(e));
        }

        let mut optimized_segment = match self.build_new_segment(
            &optimizing_segments,
            Arc::clone(&proxy_deleted_points),
            Arc::clone(&proxy_index_changes),
            permit,
            resource_budget,
            stopped,
            &hw_counter,
        ) {
            Ok(segment) => segment,
            Err(error) => {
                if matches!(error, CollectionError::Cancelled { .. }) {
                    self.handle_cancellation(&segments, &proxy_ids, tmp_segment)?;
                    return Err(error);
                }
                return Err(error);
            }
        };

        let already_remove_points = {
            let mut all_removed_points: HashSet<_> =
                proxy_deleted_points.read().keys().copied().collect();
            for existing_point in optimized_segment.iter_points() {
                all_removed_points.remove(&existing_point);
            }
            all_removed_points
        };

        {
            let mut write_segments_guard = segments.write();

            for (field_name, change) in proxy_index_changes.read().iter_ordered() {
                match change {
                    ProxyIndexChange::Create(schema, version) => {
                        optimized_segment.create_field_index(
                            *version,
                            field_name,
                            Some(schema),
                            &hw_counter,
                        )?;
                    }
                    ProxyIndexChange::Delete(version) => {
                        optimized_segment.delete_field_index(*version, field_name)?;
                    }
                }
                self.check_cancellation(stopped)?;
            }

            let deleted_points = proxy_deleted_points.read();
            let points_diff = deleted_points
                .keys()
                .filter(|&point_id| !already_remove_points.contains(point_id));
            for &point_id in points_diff {
                debug_assert!(
                    versions.operation_version >= optimized_segment.point_version(point_id).unwrap_or(0),
                    "proxied point deletes should have newer version than point in segment",
                );
                optimized_segment
                    .delete_point(versions.operation_version, point_id, &hw_counter)
                    .unwrap();
            }

            let point_count = optimized_segment.available_point_count();

            let (_, proxies) = write_segments_guard.swap_new(optimized_segment, &proxy_ids);
            debug_assert_eq!(
                proxies.len(),
                proxy_ids.len(),
                "swapped different number of proxies on unwrap, missing or incorrect segment IDs?",
            );

            let has_appendable_segments = write_segments_guard.has_appendable_segment();

            drop(optimizing_segments);

            if !has_appendable_segments || !tmp_segment.get().read().is_empty() {
                write_segments_guard.add_new_locked(tmp_segment);

                drop(write_segments_guard);

                for proxy in proxies {
                    proxy.drop_data()?;
                }
            } else {
                drop(write_segments_guard);

                for proxy in proxies {
                    proxy.drop_data()?;
                }
                tmp_segment.drop_data()?;
            }

            timer.set_success(true);
            
            Ok(point_count)
        }
    }
}