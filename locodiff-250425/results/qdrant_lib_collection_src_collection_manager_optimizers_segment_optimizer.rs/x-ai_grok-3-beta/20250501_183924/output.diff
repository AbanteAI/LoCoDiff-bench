
index a458d559..4e9c115d 100644
--- a/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_expectedoutput.txt (expected):tmp/tmpr4doqfp4_expected.txt	
+++ b/qdrant_lib_collection_src_collection_manager_optimizers_segment_optimizer.rs_extracted.txt (actual):tmp/tmpvksfwm32_actual.txt	
@@ -26,7 +26,6 @@ use crate::collection_manager::holders::segment_holder::{
     LockedSegment, LockedSegmentHolder, SegmentId,
 };
 use crate::config::CollectionParams;
-use crate::operations::config_diff::DiffConfig;
 use crate::operations::types::{CollectionError, CollectionResult};
 
 const BYTES_IN_KB: usize = 1024;
@@ -312,11 +311,7 @@ pub trait SegmentOptimizer {
     /// Original segments are pushed into `segments`, proxies removed.
     /// Returns IDs on restored segments
     ///
-    fn unwrap_proxy(
-        &self,
-        segments: &LockedSegmentHolder,
-        proxy_ids: &[SegmentId],
-    ) -> Vec<SegmentId> {
+    fn unwrap_proxy(&self, segments: &LockedSegmentHolder, proxy_ids: &[SegmentId]) -> Vec<SegmentId> {
         let mut segments_lock = segments.write();
         let mut restored_segment_ids = vec![];
         for &proxy_id in proxy_ids {
@@ -561,6 +556,7 @@ pub trait SegmentOptimizer {
     /// If there were any record changes during the optimization - an additional plain segment will be created.
     ///
     /// Returns id of the created optimized segment. If no optimization was done - returns None
+    #[allow(clippy::too_many_arguments)]
     fn optimize(
         &self,
         segments: LockedSegmentHolder,
