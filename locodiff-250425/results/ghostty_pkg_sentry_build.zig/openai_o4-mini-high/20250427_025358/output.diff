
index a78c1384..c8ce21bc 100644
--- a/ghostty_pkg_sentry_build.zig_expectedoutput.txt (expected):tmp/tmpb5vn13tm_expected.txt	
+++ b/ghostty_pkg_sentry_build.zig_extracted.txt (actual):tmp/tmpmqapesxf_actual.txt	
@@ -52,7 +52,6 @@ pub fn build(b: *std.Build) !void {
             .files = srcs,
             .flags = flags.items,
         });
-
         // Linux-only
         if (target.result.os.tag == .linux) {
             lib.addCSourceFiles(.{
@@ -63,7 +62,6 @@ pub fn build(b: *std.Build) !void {
                 .flags = flags.items,
             });
         }
-
         // Symbolizer + Unwinder
         if (target.result.os.tag == .windows) {
             lib.addCSourceFiles(.{
@@ -88,7 +86,6 @@ pub fn build(b: *std.Build) !void {
                 .flags = flags.items,
             });
         }
-
         // Module finder
         switch (target.result.os.tag) {
             .windows => lib.addCSourceFiles(.{
@@ -98,7 +95,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .macos, .ios => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -106,7 +102,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .linux => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -114,15 +109,12 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .freestanding => {},
-
             else => {
                 std.log.warn("target={} not supported", .{target.result.os.tag});
                 return error.UnsupportedTarget;
             },
         }
-
         // Transport
         switch (transport) {
             .curl => lib.addCSourceFiles(.{
@@ -132,7 +124,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .winhttp => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -140,7 +131,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .none => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -149,7 +139,6 @@ pub fn build(b: *std.Build) !void {
                 .flags = flags.items,
             }),
         }
-
         // Backend
         switch (backend) {
             .crashpad => lib.addCSourceFiles(.{
@@ -159,7 +148,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .breakpad => {
                 lib.addCSourceFiles(.{
                     .root = upstream.path(""),
@@ -168,19 +156,16 @@ pub fn build(b: *std.Build) !void {
                     },
                     .flags = flags.items,
                 });
-
                 if (b.lazyDependency("breakpad", .{
                     .target = target,
                     .optimize = optimize,
                 })) |breakpad_dep| {
                     lib.linkLibrary(breakpad_dep.artifact("breakpad"));
-
                     // We need to add this because Sentry includes some breakpad
                     // headers that include this vendored file...
                     lib.addIncludePath(breakpad_dep.path("vendor"));
                 }
             },
-
             .inproc => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -188,7 +173,6 @@ pub fn build(b: *std.Build) !void {
                 },
                 .flags = flags.items,
             }),
-
             .none => lib.addCSourceFiles(.{
                 .root = upstream.path(""),
                 .files = &.{
@@ -197,7 +181,6 @@ pub fn build(b: *std.Build) !void {
                 .flags = flags.items,
             }),
         }
-
         lib.installHeadersDirectory(
             upstream.path("include"),
             "",
