
index a78c1384..c819287c 100644
--- a/ghostty_pkg_sentry_build.zig_expectedoutput.txt (expected):tmp/tmpd0radzt__expected.txt	
+++ b/ghostty_pkg_sentry_build.zig_extracted.txt (actual):tmp/tmpcaw5htmh_actual.txt	
@@ -18,6 +18,7 @@ pub fn build(b: *std.Build) !void {
         .optimize = optimize,
     });
     lib.linkLibC();
+
     if (target.result.os.tag.isDarwin()) {
         const apple_sdk = @import("apple_sdk");
         try apple_sdk.addPaths(b, lib.root_module);
@@ -27,6 +28,7 @@ pub fn build(b: *std.Build) !void {
     var flags = std.ArrayList([]const u8).init(b.allocator);
     defer flags.deinit();
     try flags.appendSlice(&.{});
+
     if (target.result.os.tag == .windows) {
         try flags.appendSlice(&.{
             "-DSENTRY_WITH_UNWINDER_DBGHELP",
@@ -36,6 +38,7 @@ pub fn build(b: *std.Build) !void {
             "-DSENTRY_WITH_UNWINDER_LIBBACKTRACE",
         });
     }
+
     switch (backend) {
         .crashpad => try flags.append("-DSENTRY_BACKEND_CRASHPAD"),
         .breakpad => try flags.append("-DSENTRY_BACKEND_BREAKPAD"),
@@ -47,6 +50,7 @@ pub fn build(b: *std.Build) !void {
         module.addIncludePath(upstream.path("include"));
         lib.addIncludePath(upstream.path("include"));
         lib.addIncludePath(upstream.path("src"));
+
         lib.addCSourceFiles(.{
             .root = upstream.path(""),
             .files = srcs,
