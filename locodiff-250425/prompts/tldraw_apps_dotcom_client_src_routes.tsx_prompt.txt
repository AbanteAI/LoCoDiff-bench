# Instructions

You are being benchmarked. You will see the output of a git log command, and from that must infer the current state of a file. Think carefully, as you must output the exact state of the file to earn full marks.

**Important:** Your goal is to reproduce the file's content *exactly* as it exists at the final commit, even if the code appears broken, buggy, or contains obvious errors. Do **not** try to "fix" the code. Attempting to correct issues will result in a poor score, as this benchmark evaluates your ability to reproduce the precise state of the file based on its history.

# Required Response Format

Wrap the content of the file in triple backticks (```). Any text outside the final closing backticks will be ignored. End your response after outputting the closing backticks.

# Example Response

```python
#!/usr/bin/env python
print('Hello, world!')
```

# File History

> git log -p --cc --topo-order --reverse -- apps/dotcom/client/src/routes.tsx

commit ab9833c09df9c5d51ffdb3537866f352e9d42444
Author: alex <alex@dytry.ch>
Date:   Wed Sep 18 11:17:57 2024 +0100

    Clean up `apps` directory (#4548)
    
    Post 3.0 spring cleaning?
    
    There a new `internal` folder with things that people who don't work at
    tldraw should never need to look at. The apps folder contains just our
    actual apps, with the various dotcom services under `apps/dotcom`.
    
    vercel deploy will fail on this until it's ready to land, at which point
    i'll update the vercel config to point at the new script locations
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
new file mode 100644
index 000000000..e8d701da5
--- /dev/null
+++ b/apps/dotcom/client/src/routes.tsx
@@ -0,0 +1,56 @@
+import { captureException } from '@sentry/react'
+import {
+	READ_ONLY_LEGACY_PREFIX,
+	READ_ONLY_PREFIX,
+	ROOM_PREFIX,
+	SNAPSHOT_PREFIX,
+} from '@tldraw/dotcom-shared'
+import { useEffect } from 'react'
+import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
+import { ErrorPage } from './components/ErrorPage/ErrorPage'
+
+export const router = createRoutesFromElements(
+	<Route
+		element={
+			// Add all top level providers that require the router here
+
+			<Outlet />
+		}
+		ErrorBoundary={() => {
+			const error = useRouteError()
+			useEffect(() => {
+				captureException(error)
+			}, [error])
+			return (
+				<ErrorPage
+					messages={{
+						header: 'Something went wrong',
+						para1:
+							'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.',
+					}}
+				/>
+			)
+		}}
+	>
+		<Route errorElement={<DefaultErrorFallback />}>
+			<Route path="/" lazy={() => import('./pages/root')} />
+			<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
+			<Route path="/new" lazy={() => import('./pages/new')} />
+			<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
+			<Route path={`/${ROOM_PREFIX}/:roomId`} lazy={() => import('./pages/public-multiplayer')} />
+			<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
+			<Route
+				path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
+				lazy={() => import('./pages/history-snapshot')}
+			/>
+			<Route path={`/${SNAPSHOT_PREFIX}/:roomId`} lazy={() => import('./pages/public-snapshot')} />
+			<Route
+				path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
+				lazy={() => import('./pages/public-readonly-legacy')}
+			/>
+			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
+		</Route>
+		<Route path="*" lazy={() => import('./pages/not-found')} />
+	</Route>
+)

commit 966406f0f88cb39fc72cb78eb220a4b4acc463f9
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Wed Sep 25 11:34:05 2024 +0100

    [in the voice of David S: MERGE] tldraw.com v2 (#4576)
    
    iykyk
    
    ### Change type
    
    - [x] `other`
    
    ---------
    
    Co-authored-by: Mime Čuvalo <mimecuvalo@gmail.com>
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index e8d701da5..c3d8a1d38 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -6,9 +6,26 @@ import {
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
 import { useEffect } from 'react'
-import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import {
+	Navigate,
+	Outlet,
+	Route,
+	createRoutesFromElements,
+	useLocation,
+	useParams,
+	useRouteError,
+} from 'react-router-dom'
+import { deleteFromLocalStorage, getFromLocalStorage } from 'tldraw'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
+import { TlaErrorPage } from './tla/components/TlaErrorPage'
+import { useApp } from './tla/hooks/useAppState'
+import { useAuth } from './tla/hooks/useAuth'
+import { useSessionState } from './tla/hooks/useSessionState'
+import { TldrawAppFileRecordType } from './tla/utils/schema/TldrawAppFile'
+import { TEMPORARY_FILE_KEY } from './tla/utils/temporary-files'
+import { getCleanId } from './tla/utils/tldrawAppSchema'
+import { getFileUrl, getWorkspaceUrl } from './tla/utils/urls'
 
 export const router = createRoutesFromElements(
 	<Route
@@ -51,6 +68,135 @@ export const router = createRoutesFromElements(
 			/>
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
+		{/* begin tla */}
+		<Route lazy={() => import('./tla/components/TlaAppProvider')}>
+			{/* If not redirected, then local */}
+			<Route path="/q" element={<RedirectAtRoot />} />
+			{/* Force route to local */}
+			<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
+			{/* Force route to auth */}
+			<Route path="/q/auth" lazy={() => import('./tla/pages/auth')} />
+			{/* Temporary file */}
+			<Route path="/q/t/:fileId" lazy={() => import('./tla/pages/file-temp')} />
+			{/* Workspace */}
+			<Route element={<Outlet />}>
+				<Route path="/q/w" element={<RedirectAtWorkspacesRoot />} />
+				<Route element={<RequireAuthForWorkspace />}>
+					<Route path="/q/w/:workspaceId" index element={<RedirectAtWorkspaceRoot />} />
+					{/* File view*/}
+					<Route path="/q/w/:workspaceId/f/:fileId" lazy={() => import('./tla/pages/file')} />
+					{/* List views */}
+					<Route path="/q/w/:workspaceId/drafts" lazy={() => import('./tla/pages/drafts')} />
+					<Route path="/q/w/:workspaceId/stars" lazy={() => import('./tla/pages/stars')} />
+					<Route path="/q/w/:workspaceId/shared" lazy={() => import('./tla/pages/shared')} />
+					<Route path="/q/w/:workspaceId/groups" lazy={() => import('./tla/pages/groups')} />
+					{/* Workspace settings */}
+					<Route path="/q/w/:workspaceId/settings" lazy={() => import('./tla/pages/settings')} />
+					{/* User settings */}
+					<Route path="/q/w/:workspaceId/profile" element={<RequireAuthForUser />}>
+						<Route index lazy={() => import('./tla/pages/profile')} />
+					</Route>
+					{/* Internal */}
+					<Route path="/q/w/:workspaceId/debug" lazy={() => import('./tla/pages/debug')} />
+				</Route>
+			</Route>
+		</Route>
+		{/* end tla */}
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )
+
+/**
+ * At the root, an authenticated user should be taken to their workspaces.
+ * The logic for what to show for a user's workspace is determined on the
+ * workspaces route.
+ */
+function RedirectAtRoot() {
+	const auth = useAuth()
+	if (auth) return <Navigate to="/q/w" replace />
+	return <Outlet />
+}
+
+/**
+ * At the workspace route, redirect to the user's most recent file.
+ * Or log in and then come back here.
+ */
+function RequireAuthForWorkspace() {
+	const app = useApp()
+	const location = useLocation()
+	const { workspaceId } = useParams()
+	const auth = useAuth()
+
+	if (!auth) {
+		// if the user does not have auth, redirect to auth and return here after authenticated
+		return <Navigate to="/q/auth" state={{ from: location }} replace />
+	}
+
+	if (workspaceId !== getCleanId(auth.workspaceId)) {
+		// if the user is not authenticated with this workspace (?), then handle that somehow
+		return <TlaErrorPage error="no-workspace-access" />
+	}
+
+	// claim any temporary files, probably needs to be done async
+	const temporaryFileId = getFromLocalStorage(TEMPORARY_FILE_KEY)
+	if (temporaryFileId) {
+		const fileId = TldrawAppFileRecordType.createId(temporaryFileId)
+		app.claimTemporaryFile(auth.userId, auth.workspaceId, fileId)
+		deleteFromLocalStorage(TEMPORARY_FILE_KEY)
+	}
+
+	return <Outlet />
+}
+
+/**
+ * At the workspaces route, redirect to the user's authenticated workspace.
+ * Or log in and then come back here.
+ */
+function RedirectAtWorkspacesRoot() {
+	const auth = useAuth()
+
+	if (!auth) {
+		// if the user does not have auth, redirect to auth and return here after authenticated
+		return <Navigate to="/q/auth" state={{ from: location }} replace />
+	}
+
+	return <Navigate to={getWorkspaceUrl(auth.workspaceId)} replace />
+}
+
+/**
+ * At the workspace route, redirect to the user's most recent file.
+ * Or log in and then come back here.
+ */
+function RedirectAtWorkspaceRoot() {
+	const app = useApp()
+	const { auth, createdAt } = useSessionState()
+
+	if (!auth) throw Error('This should be wrapped in a workspace auth check')
+
+	// Navigate to the most recent file (if there is one) or else a new file
+	const file =
+		app.getUserRecentFiles(auth.userId, auth.workspaceId, createdAt)?.[0]?.file ??
+		app.createFile(auth.userId, auth.workspaceId)
+
+	return <Navigate to={getFileUrl(auth.workspaceId, file.id)} replace />
+}
+
+/**
+ * At the user index, an authenticated user should be taken to their workspaces.
+ * The logic for what to show for a user's workspace is determined on the
+ * workspaces route.
+ */
+function RequireAuthForUser() {
+	const { userId } = useParams()
+
+	const auth = useAuth()
+
+	if (!auth) throw Error('This should be wrapped in a workspace auth check')
+
+	if (userId !== getCleanId(auth.userId)) {
+		// if the user is not authenticated as that user(?), then handle that somehow
+		return <TlaErrorPage error="no-user-access" />
+	}
+
+	return <Outlet />
+}

commit 77e29714bb4d2031165705a56b5d2db82c978e37
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Wed Sep 25 13:35:19 2024 +0100

    [botcom] purge prototype leftovers (#4601)
    
    my god deleting code is fun and satisfying 💆‍♂️
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index c3d8a1d38..8d8c7ab11 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -6,26 +6,13 @@ import {
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
 import { useEffect } from 'react'
-import {
-	Navigate,
-	Outlet,
-	Route,
-	createRoutesFromElements,
-	useLocation,
-	useParams,
-	useRouteError,
-} from 'react-router-dom'
-import { deleteFromLocalStorage, getFromLocalStorage } from 'tldraw'
+import { Navigate, Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
-import { TlaErrorPage } from './tla/components/TlaErrorPage'
 import { useApp } from './tla/hooks/useAppState'
 import { useAuth } from './tla/hooks/useAuth'
 import { useSessionState } from './tla/hooks/useSessionState'
-import { TldrawAppFileRecordType } from './tla/utils/schema/TldrawAppFile'
-import { TEMPORARY_FILE_KEY } from './tla/utils/temporary-files'
-import { getCleanId } from './tla/utils/tldrawAppSchema'
-import { getFileUrl, getWorkspaceUrl } from './tla/utils/urls'
+import { getFileUrl } from './tla/utils/urls'
 
 export const router = createRoutesFromElements(
 	<Route
@@ -78,96 +65,25 @@ export const router = createRoutesFromElements(
 			<Route path="/q/auth" lazy={() => import('./tla/pages/auth')} />
 			{/* Temporary file */}
 			<Route path="/q/t/:fileId" lazy={() => import('./tla/pages/file-temp')} />
-			{/* Workspace */}
-			<Route element={<Outlet />}>
-				<Route path="/q/w" element={<RedirectAtWorkspacesRoot />} />
-				<Route element={<RequireAuthForWorkspace />}>
-					<Route path="/q/w/:workspaceId" index element={<RedirectAtWorkspaceRoot />} />
-					{/* File view*/}
-					<Route path="/q/w/:workspaceId/f/:fileId" lazy={() => import('./tla/pages/file')} />
-					{/* List views */}
-					<Route path="/q/w/:workspaceId/drafts" lazy={() => import('./tla/pages/drafts')} />
-					<Route path="/q/w/:workspaceId/stars" lazy={() => import('./tla/pages/stars')} />
-					<Route path="/q/w/:workspaceId/shared" lazy={() => import('./tla/pages/shared')} />
-					<Route path="/q/w/:workspaceId/groups" lazy={() => import('./tla/pages/groups')} />
-					{/* Workspace settings */}
-					<Route path="/q/w/:workspaceId/settings" lazy={() => import('./tla/pages/settings')} />
-					{/* User settings */}
-					<Route path="/q/w/:workspaceId/profile" element={<RequireAuthForUser />}>
-						<Route index lazy={() => import('./tla/pages/profile')} />
-					</Route>
-					{/* Internal */}
-					<Route path="/q/w/:workspaceId/debug" lazy={() => import('./tla/pages/debug')} />
-				</Route>
+			{/* File view*/}
+			<Route path="/q/f/:fileId" lazy={() => import('./tla/pages/file')} />
+			{/* User settings */}
+			<Route path="/q/profile" element={<RequireAuthForUser />}>
+				<Route index lazy={() => import('./tla/pages/profile')} />
 			</Route>
+			{/* Internal */}
+			<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
 		</Route>
 		{/* end tla */}
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )
 
-/**
- * At the root, an authenticated user should be taken to their workspaces.
- * The logic for what to show for a user's workspace is determined on the
- * workspaces route.
- */
-function RedirectAtRoot() {
-	const auth = useAuth()
-	if (auth) return <Navigate to="/q/w" replace />
-	return <Outlet />
-}
-
-/**
- * At the workspace route, redirect to the user's most recent file.
- * Or log in and then come back here.
- */
-function RequireAuthForWorkspace() {
-	const app = useApp()
-	const location = useLocation()
-	const { workspaceId } = useParams()
-	const auth = useAuth()
-
-	if (!auth) {
-		// if the user does not have auth, redirect to auth and return here after authenticated
-		return <Navigate to="/q/auth" state={{ from: location }} replace />
-	}
-
-	if (workspaceId !== getCleanId(auth.workspaceId)) {
-		// if the user is not authenticated with this workspace (?), then handle that somehow
-		return <TlaErrorPage error="no-workspace-access" />
-	}
-
-	// claim any temporary files, probably needs to be done async
-	const temporaryFileId = getFromLocalStorage(TEMPORARY_FILE_KEY)
-	if (temporaryFileId) {
-		const fileId = TldrawAppFileRecordType.createId(temporaryFileId)
-		app.claimTemporaryFile(auth.userId, auth.workspaceId, fileId)
-		deleteFromLocalStorage(TEMPORARY_FILE_KEY)
-	}
-
-	return <Outlet />
-}
-
-/**
- * At the workspaces route, redirect to the user's authenticated workspace.
- * Or log in and then come back here.
- */
-function RedirectAtWorkspacesRoot() {
-	const auth = useAuth()
-
-	if (!auth) {
-		// if the user does not have auth, redirect to auth and return here after authenticated
-		return <Navigate to="/q/auth" state={{ from: location }} replace />
-	}
-
-	return <Navigate to={getWorkspaceUrl(auth.workspaceId)} replace />
-}
-
 /**
  * At the workspace route, redirect to the user's most recent file.
  * Or log in and then come back here.
  */
-function RedirectAtWorkspaceRoot() {
+function RedirectAtRoot() {
 	const app = useApp()
 	const { auth, createdAt } = useSessionState()
 
@@ -175,10 +91,9 @@ function RedirectAtWorkspaceRoot() {
 
 	// Navigate to the most recent file (if there is one) or else a new file
 	const file =
-		app.getUserRecentFiles(auth.userId, auth.workspaceId, createdAt)?.[0]?.file ??
-		app.createFile(auth.userId, auth.workspaceId)
+		app.getUserRecentFiles(auth.userId, createdAt)?.[0]?.file ?? app.createFile(auth.userId)
 
-	return <Navigate to={getFileUrl(auth.workspaceId, file.id)} replace />
+	return <Navigate to={getFileUrl(file.id)} replace />
 }
 
 /**
@@ -187,16 +102,9 @@ function RedirectAtWorkspaceRoot() {
  * workspaces route.
  */
 function RequireAuthForUser() {
-	const { userId } = useParams()
-
 	const auth = useAuth()
 
 	if (!auth) throw Error('This should be wrapped in a workspace auth check')
 
-	if (userId !== getCleanId(auth.userId)) {
-		// if the user is not authenticated as that user(?), then handle that somehow
-		return <TlaErrorPage error="no-user-access" />
-	}
-
 	return <Outlet />
 }

commit f6413e3e7d32c8cb7276b9059040bea0de77d3ea
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Fri Sep 27 18:32:51 2024 -0400

    [botcom] Share menu (#4604)
    
    This PR adds UI for the share menu.
    
    Fun fact: while writing this I found a much better way for us to do our
    QR codes with SVGs, if we want it!
    
    ![localhost_3000_q_f_0
    (1)](https://github.com/user-attachments/assets/ed1353c8-f2a9-4e86-992f-eedb3a48827f)
    
    ![localhost_3000_q_f_0
    (2)](https://github.com/user-attachments/assets/6bc7cf32-5ce7-4b50-addb-65e7669a0a4b)
    
    
    ![localhost_3000_q_f_0](https://github.com/user-attachments/assets/89c434c6-273f-4b14-b778-d6c10bc779ef)
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 8d8c7ab11..833ad7f02 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -56,7 +56,7 @@ export const router = createRoutesFromElements(
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
 		{/* begin tla */}
-		<Route lazy={() => import('./tla/components/TlaAppProvider')}>
+		<Route lazy={() => import('./tla/providers/TlaAppProvider')}>
 			{/* If not redirected, then local */}
 			<Route path="/q" element={<RedirectAtRoot />} />
 			{/* Force route to local */}

commit e3ca52603451ccbe4ae99c2ce9e066d6af5e043c
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Mon Sep 30 12:36:52 2024 +0100

    [botcom] use tlsync as prototype backend (#4617)
    
    phew that was a beefy one.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 833ad7f02..7bedb8716 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -6,13 +6,9 @@ import {
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
 import { useEffect } from 'react'
-import { Navigate, Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
-import { useApp } from './tla/hooks/useAppState'
-import { useAuth } from './tla/hooks/useAuth'
-import { useSessionState } from './tla/hooks/useSessionState'
-import { getFileUrl } from './tla/utils/urls'
 
 export const router = createRoutesFromElements(
 	<Route
@@ -56,19 +52,15 @@ export const router = createRoutesFromElements(
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
 		{/* begin tla */}
+		<Route path="/q/auth" lazy={() => import('./tla/pages/auth')} />
+		<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
 		<Route lazy={() => import('./tla/providers/TlaAppProvider')}>
 			{/* If not redirected, then local */}
-			<Route path="/q" element={<RedirectAtRoot />} />
-			{/* Force route to local */}
-			<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
-			{/* Force route to auth */}
-			<Route path="/q/auth" lazy={() => import('./tla/pages/auth')} />
-			{/* Temporary file */}
-			<Route path="/q/t/:fileId" lazy={() => import('./tla/pages/file-temp')} />
+			<Route path="/q" lazy={() => import('./tla/components/RedirectAtRoot')} />
 			{/* File view*/}
-			<Route path="/q/f/:fileId" lazy={() => import('./tla/pages/file')} />
+			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
 			{/* User settings */}
-			<Route path="/q/profile" element={<RequireAuthForUser />}>
+			<Route path="/q/profile" lazy={() => import('./tla/components/RequireAuthForUser')}>
 				<Route index lazy={() => import('./tla/pages/profile')} />
 			</Route>
 			{/* Internal */}
@@ -78,33 +70,3 @@ export const router = createRoutesFromElements(
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )
-
-/**
- * At the workspace route, redirect to the user's most recent file.
- * Or log in and then come back here.
- */
-function RedirectAtRoot() {
-	const app = useApp()
-	const { auth, createdAt } = useSessionState()
-
-	if (!auth) throw Error('This should be wrapped in a workspace auth check')
-
-	// Navigate to the most recent file (if there is one) or else a new file
-	const file =
-		app.getUserRecentFiles(auth.userId, createdAt)?.[0]?.file ?? app.createFile(auth.userId)
-
-	return <Navigate to={getFileUrl(file.id)} replace />
-}
-
-/**
- * At the user index, an authenticated user should be taken to their workspaces.
- * The logic for what to show for a user's workspace is determined on the
- * workspaces route.
- */
-function RequireAuthForUser() {
-	const auth = useAuth()
-
-	if (!auth) throw Error('This should be wrapped in a workspace auth check')
-
-	return <Outlet />
-}

commit 4c57338bcc4a70496875fa666996e4c0682f2edd
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Mon Sep 30 16:47:27 2024 +0100

    [botcom] clerk scaffolding (#4616)
    
    this sets up the basic scaffolding for using Clerk in our app. as
    discussed, we'll go with Clerk with just keeping an eye for future
    self-hosting as an option.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 7bedb8716..75ce86761 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -52,19 +52,20 @@ export const router = createRoutesFromElements(
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
 		{/* begin tla */}
-		<Route path="/q/auth" lazy={() => import('./tla/pages/auth')} />
-		<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
 		<Route lazy={() => import('./tla/providers/TlaAppProvider')}>
-			{/* If not redirected, then local */}
-			<Route path="/q" lazy={() => import('./tla/components/RedirectAtRoot')} />
-			{/* File view*/}
-			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
-			{/* User settings */}
-			<Route path="/q/profile" lazy={() => import('./tla/components/RequireAuthForUser')}>
-				<Route index lazy={() => import('./tla/pages/profile')} />
+			<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
+			<Route lazy={() => import('./tla/providers/TlaAppLoggedInProvider')}>
+				{/* If not redirected, then local */}
+				<Route path="/q" lazy={() => import('./tla/components/RedirectAtRoot')} />
+				{/* File view*/}
+				<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
+				{/* User settings */}
+				<Route path="/q/profile" lazy={() => import('./tla/components/RequireAuthForUser')}>
+					<Route index lazy={() => import('./tla/pages/profile')} />
+				</Route>
+				{/* Internal */}
+				<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
 			</Route>
-			{/* Internal */}
-			<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
 		</Route>
 		{/* end tla */}
 		<Route path="*" lazy={() => import('./pages/not-found')} />

commit 09f89a60f403ff704c1372eff9fecba6cd5ce361
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Mon Sep 30 16:27:45 2024 -0400

    [dotcom] Menus, dialogs, toasts, etc. (#4624)
    
    This PR brings tldraw's ui into the application layer: dialogs, menus,
    etc.
    
    It:
    - brings our dialogs to the application layer
    - brings our toasts to the application layer
    - brings our translations to the application layer
    - brings our assets to the application layer
    - creates a "file menu"
    - creates a "rename file" dialog
    - creates the UI for changing the title of a file in the header
    - adjusts some text sizes
    
    In order to do that, I've had to:
    - create a global `tlmenus` system for menus
    - create a global `tltime` system for timers
    - create a global `tlenv` for environment"
    - create a `useMaybeEditor` hook
    
    ### Change type
    
    - [x] `other`
    
    ### Release notes
    - exports dialogs system
    - exports toasts system
    - exports translations system
    - create a global `tlmenus` system for menus
    - create a global `tltime` system for timers
    - create a global `tlenv` for environment"
    - create a `useMaybeEditor` hook
    
    ---------
    
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 75ce86761..bd346e80a 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -52,7 +52,7 @@ export const router = createRoutesFromElements(
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
 		{/* begin tla */}
-		<Route lazy={() => import('./tla/providers/TlaAppProvider')}>
+		<Route lazy={() => import('./tla/providers/TlaClerkProvider')}>
 			<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
 			<Route lazy={() => import('./tla/providers/TlaAppLoggedInProvider')}>
 				{/* If not redirected, then local */}

commit 0ec64b2500006beb91eb78efa4b80e8b65c6cd7b
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Wed Oct 2 15:41:22 2024 +0100

    [botcom] Use auth on backend (#4639)
    
    This PR
    
    - Renames the socket endpoint `/app/:userId` to just `/app`, and uses
    the access token to get the user id from clerk
    - Uses the access token to gate 'owned' files.
    
    
    TO DO in follow ups
    - Allow shared files (will require asking the owner's DO for permission
    to establish a socket connection, and figuring out a way to revoke an
    already-established connection.
    - Add web hook to update a user's info if they change it on
    google/whatever.
    
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [x] `feature`
    - [ ] `api`
    - [ ] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index bd346e80a..361086832 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -5,32 +5,37 @@ import {
 	ROOM_PREFIX,
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
+import { TLIncompatibilityReason, TLRemoteSyncError } from '@tldraw/sync-core'
 import { useEffect } from 'react'
-import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 
 export const router = createRoutesFromElements(
 	<Route
-		element={
-			// Add all top level providers that require the router here
-
-			<Outlet />
-		}
 		ErrorBoundary={() => {
 			const error = useRouteError()
 			useEffect(() => {
 				captureException(error)
 			}, [error])
-			return (
-				<ErrorPage
-					messages={{
-						header: 'Something went wrong',
-						para1:
-							'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.',
-					}}
-				/>
-			)
+			let header = 'Something went wrong'
+			let para1 =
+				'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.'
+			if (error instanceof TLRemoteSyncError) {
+				switch (error.reason) {
+					case TLIncompatibilityReason.RoomNotFound: {
+						header = 'Not found'
+						para1 = 'The file you are looking for does not exist.'
+						break
+					}
+					case TLIncompatibilityReason.Forbidden: {
+						header = 'Unauthorized'
+						para1 = 'You need to be authorized to view this file.'
+						break
+					}
+				}
+			}
+			return <ErrorPage messages={{ header, para1 }} />
 		}}
 	>
 		<Route errorElement={<DefaultErrorFallback />}>

commit fad02725381a223ba634d7d4bf02211c218e0140
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Mon Oct 7 12:17:18 2024 +0100

    [sync] refine error handling + room.closeSession method (#4660)
    
    - refine and consolidate error handling, using `socket.close(code,
    reason)` for unrecoverable errors instead of the message protocol.
    - allow SDK users to evict sessions from a room, either terminally (by
    supplying a reason which gets passed to socket.close) or just to force
    them to reconnect.
    
    ### Change type
    
    - [x] `improvement`
    - [x] `api`
    
    ### Release notes
    
    - Adds a `closeSession` to the `TLSocketRoom` class, for terminating or
    restarting a client's socket connection.

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 361086832..e0f95c8b3 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -5,7 +5,7 @@ import {
 	ROOM_PREFIX,
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
-import { TLIncompatibilityReason, TLRemoteSyncError } from '@tldraw/sync-core'
+import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { useEffect } from 'react'
 import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
@@ -23,12 +23,13 @@ export const router = createRoutesFromElements(
 				'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.'
 			if (error instanceof TLRemoteSyncError) {
 				switch (error.reason) {
-					case TLIncompatibilityReason.RoomNotFound: {
+					case TLSyncErrorCloseEventReason.NOT_FOUND: {
 						header = 'Not found'
 						para1 = 'The file you are looking for does not exist.'
 						break
 					}
-					case TLIncompatibilityReason.Forbidden: {
+					case TLSyncErrorCloseEventReason.NOT_AUTHENTICATED:
+					case TLSyncErrorCloseEventReason.FORBIDDEN: {
 						header = 'Unauthorized'
 						para1 = 'You need to be authorized to view this file.'
 						break

commit 3a3d6c5de857260bb5dc7c8ba493172f507a9b3a
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Tue Oct 8 13:08:54 2024 +0100

    [botcom] sharing (#4654)
    
    This PR adds initial support for sharing.
    
    - Using the file's `shared` flag to gate access to guests
    https://github.com/tldraw/tldraw/blob/1879c3a4b41529bb6b42992410ec5cf0ba3b6492/packages/dotcom-shared/src/tla-schema/TldrawAppFile.ts#L16
    - Kicking guests out of the room if the `shared` flips from `true` to
    `false`
    - Allow guests to not be logged in
    - Changing between readonly and readwrite changes the UI and editor mode
    on guests' machines.
    - Simplified routing
      - `/q/local` -> `/q`
      - Remove defunct redirect pages
    - Renamed `'temporary'` flag to `'isCreateMode'` and use it to fix the
    race condition when creating new rooms
    - (temporary fix) allow guests to see the document's file name
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [x] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Test plan
    
    1. Create a shape...
    2.
    
    - [ ] Unit tests
    - [ ] End to end tests
    
    ### Release notes
    
    - Fixed a bug with…
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index e0f95c8b3..f5862345b 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -58,17 +58,14 @@ export const router = createRoutesFromElements(
 			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
 		</Route>
 		{/* begin tla */}
-		<Route lazy={() => import('./tla/providers/TlaClerkProvider')}>
-			<Route path="/q/local" lazy={() => import('./tla/pages/local')} />
-			<Route lazy={() => import('./tla/providers/TlaAppLoggedInProvider')}>
-				{/* If not redirected, then local */}
-				<Route path="/q" lazy={() => import('./tla/components/RedirectAtRoot')} />
-				{/* File view*/}
-				<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
+		<Route lazy={() => import('./tla/providers/TlaProvider')}>
+			<Route path="/q" lazy={() => import('./tla/pages/local')} />
+			{/* File view */}
+			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
+			{/* Views that require login */}
+			<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
 				{/* User settings */}
-				<Route path="/q/profile" lazy={() => import('./tla/components/RequireAuthForUser')}>
-					<Route index lazy={() => import('./tla/pages/profile')} />
-				</Route>
+				<Route path="/q/profile" lazy={() => import('./tla/pages/profile')} />
 				{/* Internal */}
 				<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
 			</Route>

commit 41b1b3e399df15008883dc409a3f6633a07c3edb
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Fri Oct 18 16:59:11 2024 +0200

    Don't index multiplayer rooms, snapshots, history. (#4723)
    
    Prevent indexing of multiplayer rooms, snapshots, new room route (it
    just redirects), history, etc
    
    This only touches current dotcom. Logged in experience will be hidden
    behind auth so should not be discoverable by search bots.
    
    ### Change type
    
    - [ ] `bugfix`
    - [x] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Release notes
    
    - Prevent indexing of multiplayer rooms, snapshots, new room route (it
    just redirects), history, etc

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index f5862345b..3f8fb68b9 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -41,21 +41,30 @@ export const router = createRoutesFromElements(
 	>
 		<Route errorElement={<DefaultErrorFallback />}>
 			<Route path="/" lazy={() => import('./pages/root')} />
-			<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
-			<Route path="/new" lazy={() => import('./pages/new')} />
-			<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
-			<Route path={`/${ROOM_PREFIX}/:roomId`} lazy={() => import('./pages/public-multiplayer')} />
-			<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
-			<Route
-				path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
-				lazy={() => import('./pages/history-snapshot')}
-			/>
-			<Route path={`/${SNAPSHOT_PREFIX}/:roomId`} lazy={() => import('./pages/public-snapshot')} />
-			<Route
-				path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
-				lazy={() => import('./pages/public-readonly-legacy')}
-			/>
-			<Route path={`/${READ_ONLY_PREFIX}/:roomId`} lazy={() => import('./pages/public-readonly')} />
+			{/* We don't want to index multiplayer rooms */}
+			<Route lazy={() => import('./pages/noindex')}>
+				<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
+				<Route path="/new" lazy={() => import('./pages/new')} />
+				<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
+				<Route path={`/${ROOM_PREFIX}/:roomId`} lazy={() => import('./pages/public-multiplayer')} />
+				<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
+				<Route
+					path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
+					lazy={() => import('./pages/history-snapshot')}
+				/>
+				<Route
+					path={`/${SNAPSHOT_PREFIX}/:roomId`}
+					lazy={() => import('./pages/public-snapshot')}
+				/>
+				<Route
+					path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
+					lazy={() => import('./pages/public-readonly-legacy')}
+				/>
+				<Route
+					path={`/${READ_ONLY_PREFIX}/:roomId`}
+					lazy={() => import('./pages/public-readonly')}
+				/>
+			</Route>
 		</Route>
 		{/* begin tla */}
 		<Route lazy={() => import('./tla/providers/TlaProvider')}>

commit 576b3822cbbffd984f49fa239d621bacea3cf7e4
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sun Oct 20 16:37:08 2024 +0100

    [botcom] local session state, logged out view of files (#4711)
    
    This PR implements a few changes inspired by the instantdb branch.
    
    ## Providers
    
    I've flattened the component tree for react context providers in
    `TlaProviders`, which were getting complex. This should make it easier
    in the future to do clean diffs as we adjust providers. I started it,
    but we should avoid having too many components that return other
    wrappers and providers in this file.
    
    ## Local session state
    
    The `TldrawAppSessionsState` is ignored. I have not removed it from the
    schema, as I don't want to handle that right now, but we no longer read
    it or update it. Instead, we keep a local atom that tracks data that was
    previously in the session record: ie sidebars, theme, auth user id, etc.
    
    ## Removing dependencies on `app`
    
    The change to `localSessionStorage` removes several places where we
    depended on the `app`, as well as all of the places where we updated it.
    
    ## Offline preferences for export settings
    
    Export settings are currently sitting on the `TldrawAppUser` record. In
    this PR, they also are at `localSessionStorage.exportSetttings` as a
    backup for signed-out users.
    
    ## Offline editor changes
    
    When visiting a file while logged out, the editor now displays the
    `AnonLayout`, i.e. a framing around the editor.
    
    
    ![image](https://github.com/user-attachments/assets/9c607fac-a376-412a-afe2-c93c971d58ef)
    
    ### People menu
    
    When visiting another user's file while logged out, I've included the
    `PeopleMenu` in a location next to the Style Panel.
    
    
    ![image](https://github.com/user-attachments/assets/d173d4d3-1ce6-4144-beb0-b47ec922eae8)
    
    ### Export menu
    
    For logged out users, I've (perhaps temporarily) replaced the toggle
    sidebar button with a button that opens an export menu.
    
    
    ![image](https://github.com/user-attachments/assets/f6ae4856-9377-4acb-928c-ed8558b155b8)
    
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 3f8fb68b9..6abca46fe 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -7,7 +7,7 @@ import {
 } from '@tldraw/dotcom-shared'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { useEffect } from 'react'
-import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { Link, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 
@@ -18,25 +18,56 @@ export const router = createRoutesFromElements(
 			useEffect(() => {
 				captureException(error)
 			}, [error])
-			let header = 'Something went wrong'
-			let para1 =
-				'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.'
+
 			if (error instanceof TLRemoteSyncError) {
 				switch (error.reason) {
 					case TLSyncErrorCloseEventReason.NOT_FOUND: {
-						header = 'Not found'
-						para1 = 'The file you are looking for does not exist.'
-						break
+						return (
+							<ErrorPage
+								messages={{
+									header: 'Not found',
+									para1: 'The file you are looking for does not exist.',
+								}}
+							/>
+						)
+					}
+					case TLSyncErrorCloseEventReason.NOT_AUTHENTICATED: {
+						return (
+							<ErrorPage
+								messages={{
+									header: 'Unauthorized',
+									para1: 'You need to be signed in to view this file.',
+								}}
+							/>
+						)
 					}
-					case TLSyncErrorCloseEventReason.NOT_AUTHENTICATED:
 					case TLSyncErrorCloseEventReason.FORBIDDEN: {
-						header = 'Unauthorized'
-						para1 = 'You need to be authorized to view this file.'
-						break
+						return (
+							<ErrorPage
+								messages={{
+									header: 'Unauthorized',
+									para1: 'You need to be authorized to view this file.',
+								}}
+								cta={
+									<Link to={'/q'} target={'_self'}>
+										{'Back to tldraw.'}
+									</Link>
+								}
+							/>
+						)
 					}
 				}
 			}
-			return <ErrorPage messages={{ header, para1 }} />
+
+			return (
+				<ErrorPage
+					messages={{
+						header: 'Something went wrong',
+						para1:
+							'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.',
+					}}
+				/>
+			)
 		}}
 	>
 		<Route errorElement={<DefaultErrorFallback />}>

commit ced1c6a467a5cc736c8bb29d6d511c4c0487bc80
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sun Oct 20 20:55:12 2024 +0100

    [botcom] Signout route (#4738)
    
    This PR adds a signout route for botcom.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 6abca46fe..6b97195ae 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -100,6 +100,7 @@ export const router = createRoutesFromElements(
 		{/* begin tla */}
 		<Route lazy={() => import('./tla/providers/TlaProvider')}>
 			<Route path="/q" lazy={() => import('./tla/pages/local')} />
+			<Route path="/q/signout" lazy={() => import('./tla/pages/signout')} />
 			{/* File view */}
 			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
 			{/* Views that require login */}

commit 9894eb43b99ee673f0d42cd4a7069c83865ded7d
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Mon Oct 21 14:26:32 2024 +0100

    botcom: account menu [bk] (#4683)
    
    [bk=burger king, as Alex says] kinda funky b/c i'm doing these
    MaybeProviders in `TlaRootProviders.tsx`. but it does work. lemme know
    what you think — we can rework from here.
    
    <img width="708" alt="Screenshot 2024-10-07 at 22 12 33"
    src="https://github.com/user-attachments/assets/554be50a-1842-4659-adff-dfed8fc4e0a5">
    
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 6b97195ae..289c9b565 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -98,9 +98,8 @@ export const router = createRoutesFromElements(
 			</Route>
 		</Route>
 		{/* begin tla */}
-		<Route lazy={() => import('./tla/providers/TlaProvider')}>
+		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 			<Route path="/q" lazy={() => import('./tla/pages/local')} />
-			<Route path="/q/signout" lazy={() => import('./tla/pages/signout')} />
 			{/* File view */}
 			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
 			{/* Views that require login */}

commit d1ff2ffc73ebef1e58c83a1843667569499f8c8b
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Mon Oct 21 17:06:37 2024 +0100

    botcom: redirect to intended room when signing in (#4725)
    
    also, fixes up the not authenticated/forbidden error msg (was always
    sending down forbidden accidentally)
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 289c9b565..e0adeecac 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -6,11 +6,13 @@ import {
 	SNAPSHOT_PREFIX,
 } from '@tldraw/dotcom-shared'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
-import { useEffect } from 'react'
-import { Link, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { Suspense, lazy, useEffect } from 'react'
+import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 
+const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
+
 export const router = createRoutesFromElements(
 	<Route
 		ErrorBoundary={() => {
@@ -19,42 +21,27 @@ export const router = createRoutesFromElements(
 				captureException(error)
 			}, [error])
 
+			let header = 'Something went wrong'
+			let para1 =
+				'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.'
 			if (error instanceof TLRemoteSyncError) {
 				switch (error.reason) {
 					case TLSyncErrorCloseEventReason.NOT_FOUND: {
-						return (
-							<ErrorPage
-								messages={{
-									header: 'Not found',
-									para1: 'The file you are looking for does not exist.',
-								}}
-							/>
-						)
+						header = 'Not found'
+						para1 = 'The file you are looking for does not exist.'
+						break
 					}
 					case TLSyncErrorCloseEventReason.NOT_AUTHENTICATED: {
 						return (
-							<ErrorPage
-								messages={{
-									header: 'Unauthorized',
-									para1: 'You need to be signed in to view this file.',
-								}}
-							/>
+							<Suspense>
+								<LoginRedirectPage />
+							</Suspense>
 						)
 					}
 					case TLSyncErrorCloseEventReason.FORBIDDEN: {
-						return (
-							<ErrorPage
-								messages={{
-									header: 'Unauthorized',
-									para1: 'You need to be authorized to view this file.',
-								}}
-								cta={
-									<Link to={'/q'} target={'_self'}>
-										{'Back to tldraw.'}
-									</Link>
-								}
-							/>
-						)
+						header = 'Forbidden'
+						para1 = 'You are forbidden to view this file.'
+						break
 					}
 				}
 			}
@@ -62,9 +49,8 @@ export const router = createRoutesFromElements(
 			return (
 				<ErrorPage
 					messages={{
-						header: 'Something went wrong',
-						para1:
-							'Please try refreshing the page. Still having trouble? Let us know at hello@tldraw.com.',
+						header,
+						para1,
 					}}
 				/>
 			)

commit 42812e6141b09480393c2d48c017abf33af09b93
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Wed Oct 23 17:31:53 2024 +0200

    [botcom] Publishing (#4688)
    
    Adds publishing to botcom.
    
    This allows the users to publish the existing document. This is a point
    in time snapshot, which they can then update or delete at a later time.
    Only the owner of the file has the permission to do that, while everyone
    with a link can view the published document.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [x] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Release notes
    
    - Add publishing to botcom.
    
    ---------
    
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index e0adeecac..f3c4c4a92 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -10,6 +10,8 @@ import { Suspense, lazy, useEffect } from 'react'
 import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
+import { notFound } from './pages/not-found'
+import { TlaNotFoundError } from './tla/utils/notFoundError'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
@@ -45,6 +47,9 @@ export const router = createRoutesFromElements(
 					}
 				}
 			}
+			if (error instanceof TlaNotFoundError) {
+				return notFound()
+			}
 
 			return (
 				<ErrorPage
@@ -88,6 +93,7 @@ export const router = createRoutesFromElements(
 			<Route path="/q" lazy={() => import('./tla/pages/local')} />
 			{/* File view */}
 			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
+			<Route path="/q/p/:fileSlug" lazy={() => import('./tla/pages/publish')} />
 			{/* Views that require login */}
 			<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
 				{/* User settings */}

commit 7d36c85ab9b3beb740c3ece6d5a9f4ea3926bdee
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Thu Oct 24 13:40:51 2024 +0100

    [botcom] fix copy for forbidden state (#4775)
    
    Just reverting this copy change. 'Forbidden' is too archaic and too
    strong a word to be user-facing here. It's like an old bible word. cc
    @mimecuvalo
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index f3c4c4a92..c562d92db 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -41,8 +41,8 @@ export const router = createRoutesFromElements(
 						)
 					}
 					case TLSyncErrorCloseEventReason.FORBIDDEN: {
-						header = 'Forbidden'
-						para1 = 'You are forbidden to view this file.'
+						header = 'Not authorized'
+						para1 = 'You do not have permission to view this file.'
 						break
 					}
 				}

commit e01470f96bca9e2d4272a251eb98ca64461b4e76
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Thu Oct 24 15:59:33 2024 +0100

    Wrap no index (#4773)
    
    This PR adds a (non-lazy) no index wrapping component to the botcom
    pages, too.
    
    ### Change type
    
    - [x] `improvement`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index c562d92db..890cc64e0 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -7,7 +7,8 @@ import {
 } from '@tldraw/dotcom-shared'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { Suspense, lazy, useEffect } from 'react'
-import { Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { Helmet } from 'react-helmet-async'
+import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
@@ -64,7 +65,7 @@ export const router = createRoutesFromElements(
 		<Route errorElement={<DefaultErrorFallback />}>
 			<Route path="/" lazy={() => import('./pages/root')} />
 			{/* We don't want to index multiplayer rooms */}
-			<Route lazy={() => import('./pages/noindex')}>
+			<Route element={<NoIndex />}>
 				<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
 				<Route path="/new" lazy={() => import('./pages/new')} />
 				<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
@@ -89,20 +90,33 @@ export const router = createRoutesFromElements(
 			</Route>
 		</Route>
 		{/* begin tla */}
-		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-			<Route path="/q" lazy={() => import('./tla/pages/local')} />
-			{/* File view */}
-			<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
-			<Route path="/q/p/:fileSlug" lazy={() => import('./tla/pages/publish')} />
-			{/* Views that require login */}
-			<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
-				{/* User settings */}
-				<Route path="/q/profile" lazy={() => import('./tla/pages/profile')} />
-				{/* Internal */}
-				<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
+		<Route element={<NoIndex />}>
+			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
+				<Route path="/q" lazy={() => import('./tla/pages/local')} />
+				{/* File view */}
+				<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
+				<Route path="/q/p/:fileSlug" lazy={() => import('./tla/pages/publish')} />
+				{/* Views that require login */}
+				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
+					{/* User settings */}
+					<Route path="/q/profile" lazy={() => import('./tla/pages/profile')} />
+					{/* Internal */}
+					<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
+				</Route>
 			</Route>
 		</Route>
 		{/* end tla */}
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )
+
+function NoIndex() {
+	return (
+		<>
+			<Helmet>
+				<meta name="robots" content="noindex, noimageindex, nofollow" />
+			</Helmet>
+			<Outlet />
+		</>
+	)
+}

commit 39fbda6b7eb56644681877509af3d9d39c58094d
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Fri Oct 25 14:15:43 2024 +0100

    botcom: alt take on forbidden vs not authorized (#4782)
    
    followup to the convo here: https://github.com/tldraw/tldraw/pull/4775
    i'll leave this open so we can discuss our opinions!
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`
    
    ---------
    
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 890cc64e0..b18c1e650 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -42,8 +42,8 @@ export const router = createRoutesFromElements(
 						)
 					}
 					case TLSyncErrorCloseEventReason.FORBIDDEN: {
-						header = 'Not authorized'
-						para1 = 'You do not have permission to view this file.'
+						header = 'Invite only'
+						para1 = `You don't have permission to view this room.`
 						break
 					}
 				}

commit 9be3b6fdf20bffdda4c0fee8db8e25ca5f233b06
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Mon Oct 28 16:01:03 2024 +0100

    Organize paths. (#4786)
    
    Organize file paths. Should help us stay a bit more consistent when
    defining and using paths of our app.
    
    ### Change type
    
    - [ ] `bugfix`
    - [x] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Release notes
    
    - Help with tla route / paths organization.

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index b18c1e650..855bcd080 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -13,6 +13,7 @@ import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultE
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
+import { PREFIX } from './tla/utils/urls'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
@@ -92,16 +93,22 @@ export const router = createRoutesFromElements(
 		{/* begin tla */}
 		<Route element={<NoIndex />}>
 			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-				<Route path="/q" lazy={() => import('./tla/pages/local')} />
+				<Route path={`/${PREFIX.tla}`} lazy={() => import('./tla/pages/local')} />
 				{/* File view */}
-				<Route path="/q/f/:fileSlug" lazy={() => import('./tla/pages/file')} />
-				<Route path="/q/p/:fileSlug" lazy={() => import('./tla/pages/publish')} />
+				<Route
+					path={`/${PREFIX.tla}/${PREFIX.file}/:fileSlug`}
+					lazy={() => import('./tla/pages/file')}
+				/>
+				<Route
+					path={`/${PREFIX.tla}/${PREFIX.publish}/:fileSlug`}
+					lazy={() => import('./tla/pages/publish')}
+				/>
 				{/* Views that require login */}
 				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
 					{/* User settings */}
-					<Route path="/q/profile" lazy={() => import('./tla/pages/profile')} />
+					<Route path={`/${PREFIX.tla}/profile`} lazy={() => import('./tla/pages/profile')} />
 					{/* Internal */}
-					<Route path="/q/debug" lazy={() => import('./tla/pages/debug')} />
+					<Route path={`/${PREFIX.tla}/debug`} lazy={() => import('./tla/pages/debug')} />
 				</Route>
 			</Route>
 		</Route>

commit 5c2fba38c0b11471f14399d9d57920d9d557e645
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Wed Nov 6 11:40:43 2024 +0000

    i18n: wire up strings (#4834)
    
    finds all the strings in botcom and integrates them into the new system
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 855bcd080..315feeec2 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -12,6 +12,7 @@ import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-ro
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
+import { IntlProvider } from './tla/app/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 import { PREFIX } from './tla/utils/urls'
 
@@ -67,27 +68,32 @@ export const router = createRoutesFromElements(
 			<Route path="/" lazy={() => import('./pages/root')} />
 			{/* We don't want to index multiplayer rooms */}
 			<Route element={<NoIndex />}>
-				<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
-				<Route path="/new" lazy={() => import('./pages/new')} />
-				<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
-				<Route path={`/${ROOM_PREFIX}/:roomId`} lazy={() => import('./pages/public-multiplayer')} />
-				<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
-				<Route
-					path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
-					lazy={() => import('./pages/history-snapshot')}
-				/>
-				<Route
-					path={`/${SNAPSHOT_PREFIX}/:roomId`}
-					lazy={() => import('./pages/public-snapshot')}
-				/>
-				<Route
-					path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
-					lazy={() => import('./pages/public-readonly-legacy')}
-				/>
-				<Route
-					path={`/${READ_ONLY_PREFIX}/:roomId`}
-					lazy={() => import('./pages/public-readonly')}
-				/>
+				<Route element={<ShimIntlProvider />}>
+					<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
+					<Route path="/new" lazy={() => import('./pages/new')} />
+					<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
+					<Route
+						path={`/${ROOM_PREFIX}/:roomId`}
+						lazy={() => import('./pages/public-multiplayer')}
+					/>
+					<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
+					<Route
+						path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
+						lazy={() => import('./pages/history-snapshot')}
+					/>
+					<Route
+						path={`/${SNAPSHOT_PREFIX}/:roomId`}
+						lazy={() => import('./pages/public-snapshot')}
+					/>
+					<Route
+						path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
+						lazy={() => import('./pages/public-readonly-legacy')}
+					/>
+					<Route
+						path={`/${READ_ONLY_PREFIX}/:roomId`}
+						lazy={() => import('./pages/public-readonly')}
+					/>
+				</Route>
 			</Route>
 		</Route>
 		{/* begin tla */}
@@ -104,12 +110,7 @@ export const router = createRoutesFromElements(
 					lazy={() => import('./tla/pages/publish')}
 				/>
 				{/* Views that require login */}
-				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}>
-					{/* User settings */}
-					<Route path={`/${PREFIX.tla}/profile`} lazy={() => import('./tla/pages/profile')} />
-					{/* Internal */}
-					<Route path={`/${PREFIX.tla}/debug`} lazy={() => import('./tla/pages/debug')} />
-				</Route>
+				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
 			</Route>
 		</Route>
 		{/* end tla */}
@@ -127,3 +128,12 @@ function NoIndex() {
 		</>
 	)
 }
+
+function ShimIntlProvider() {
+	return (
+		// This IntlProvider is just for backwards compatibilty for the old site.
+		<IntlProvider defaultLocale="en" locale="en" messages={{}}>
+			<Outlet />
+		</IntlProvider>
+	)
+}

commit 509ccb3ce441011137c8fee9002ee3137e5beefa
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Wed Nov 13 18:24:59 2024 +0100

    Add rate limiting. (#4898)
    
    Should we rate limit something else? Used session id to rate limit no
    auth users, I guess that should be ok.
    
    Resolves INT-458
    
    ### Change type
    
    - [ ] `bugfix`
    - [x] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Test plan
    
    1. Create a shape...
    2.
    
    - [ ] Unit tests
    - [ ] End to end tests
    
    ### Release notes
    
    - Fixed a bug with…

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 315feeec2..168e748b8 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -48,6 +48,12 @@ export const router = createRoutesFromElements(
 						para1 = `You don't have permission to view this room.`
 						break
 					}
+
+					case TLSyncErrorCloseEventReason.RATE_LIMITED: {
+						header = 'Rate limited'
+						para1 = `Please slow down.`
+						break
+					}
 				}
 			}
 			if (error instanceof TlaNotFoundError) {

commit 73f6dccd86f2a06575be2e8c64920959adf5537a
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sun Nov 24 14:07:38 2024 +0000

    Add eslint rule for react-intl. (#4983)
    
    We want all of our files to use our wrapped version of react-intl. This
    _should_ fix auto imports resolving to react-int by mistake.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 168e748b8..cf1ef8d48 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -12,7 +12,7 @@ import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-ro
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
-import { IntlProvider } from './tla/app/i18n'
+import { IntlProvider } from './tla/utils/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 import { PREFIX } from './tla/utils/urls'
 

commit 68491f0ffc96f801d17620680b738173dec29e20
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sun Nov 24 21:14:33 2024 +0000

    Revert "Add eslint rule for react-intl." (#4985)
    
    Reverts tldraw/tldraw#4983

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index cf1ef8d48..168e748b8 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -12,7 +12,7 @@ import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-ro
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
-import { IntlProvider } from './tla/utils/i18n'
+import { IntlProvider } from './tla/app/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 import { PREFIX } from './tla/utils/urls'
 

commit 5bcd5873e53853dbf0603292f2a3aadca23aa3db
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Mon Nov 25 17:12:29 2024 +0000

    [botcom] Pre-launch design / UX pass (#4984)
    
    Are you ready to go? I'm ready to go! This PR does a few design and UX
    changes ahead of the launch.
    
    Logged out, root page
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 05 17"
    src="https://github.com/user-attachments/assets/b4b0dea7-5140-417e-b9fd-986a571eeaba">
    
    Logged out, published page
    
    <img width="1241" alt="image"
    src="https://github.com/user-attachments/assets/fb7435b4-9713-43c8-991d-e6db60f18237">
    
    Logged out, file page
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 05 59"
    src="https://github.com/user-attachments/assets/afebe371-8808-400a-bac8-d5055cf53698">
    
    Logged in, file page
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 01 05"
    src="https://github.com/user-attachments/assets/1da95e8d-e000-4fab-95c4-1beb58ea372c">
    
    Logged in, guest file
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 02 33"
    src="https://github.com/user-attachments/assets/2a5a3ff5-11e1-46db-af2d-7d3ac9eb3778">
    
    Logged in, published file
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 03 26"
    src="https://github.com/user-attachments/assets/d832775e-ac55-43a4-8f93-35e1793a92a7">
    
    
    ### General sidebar / editor
    - parts sidebar components into their own files
    - cleans up some weird props in sidebar items
    - fixes spacing in the "workspace header"
    - fixes spacing in the file editor top left
    - fix icon weight difference in file editor top left
    - set mobile sidebar width to max(220px, 100%-100px)
    - animate desktop sidebar open/close
    - move menu items into the file menu (except for app-level things)
    - adds sidebar items to menu for logged out users
    - adds sign in to menu for logged out users
    - adds shortcut (Cmd + \) to toggle sidebar on desktop
    
    <img width="1241" alt="Screenshot 2024-11-24 at 21 03 43"
    src="https://github.com/user-attachments/assets/5e32019b-ef7f-457a-9d76-c94710e8c832">
    
    <img width="577" alt="image"
    src="https://github.com/user-attachments/assets/426b718d-d788-4503-bcdb-d5d1ce269e92">
    
    
    ### Anon layout
    - redesign anonymous layout
    - remove share menu / export options from anon pages
    
    ### Publish menu
    - redesign share menu for published projects
    
    ### Guest file
    - adds a temporary "collaborator" in sidebar for guest files
    - fix a bug where a user could edit the name of a file they don't own
    
    ### Creating too many pages
    - adds 1s timeout for creating new files
    
    ### Published file
    - fix document name in published files
    
    ### Sidebar user link
    - moved editor-related preferences into the editor
    - extracted the theme and language (they appear in both menus)
    
    <img width="417" alt="image"
    src="https://github.com/user-attachments/assets/550dcbbe-7b3a-46e4-b29a-d1ceff313b11">
    
    ### useMsg
    
    Add a `useMsg` hook that calls `useIntl().formatMessage`.
    
    ### Playground
    - creates a very small playground route where we can view components in
    different states. I don't like committing to this kind of storybook
    style documentation, so let's just use this when needed.
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`
    
    ---------
    
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 168e748b8..952946345 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -12,7 +12,7 @@ import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-ro
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
-import { IntlProvider } from './tla/app/i18n'
+import { IntlProvider } from './tla/utils/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 import { PREFIX } from './tla/utils/urls'
 
@@ -106,6 +106,7 @@ export const router = createRoutesFromElements(
 		<Route element={<NoIndex />}>
 			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 				<Route path={`/${PREFIX.tla}`} lazy={() => import('./tla/pages/local')} />
+				{/* <Route path={`/${PREFIX.tla}/playground`} lazy={() => import('./tla/pages/playground')} /> */}
 				{/* File view */}
 				<Route
 					path={`/${PREFIX.tla}/${PREFIX.file}/:fileSlug`}

commit 4ecbef54a7fe82634fe682ed148165bc496b7b56
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Fri Dec 6 13:52:44 2024 +0000

    [botcom] slurp local files on sign in (#5059)
    
    This PR replaces the temporary multiplayer room from the logged out root
    page with the previous local editor, and 'slurps' the data into a new
    room during the sign in flow.
    
    If something goes wrong the user sees this:
    <img width="541" alt="image"
    src="https://github.com/user-attachments/assets/92413d9a-a90c-43b6-b05d-4e0acdc7db30">
    
    follow up work:
    
    - [ ] e2e tests
    - [ ] add Terms and conditions checkbox to sign in
    
    I'll create tickets for these upon merging.
    
    
    ### Change type
    
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 952946345..67b0702a7 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -104,6 +104,10 @@ export const router = createRoutesFromElements(
 		</Route>
 		{/* begin tla */}
 		<Route element={<NoIndex />}>
+			<Route
+				path={`/${PREFIX.tla}/${PREFIX.localFile}/:fileSlug`}
+				lazy={() => import('./tla/pages/local-file')}
+			/>
 			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 				<Route path={`/${PREFIX.tla}`} lazy={() => import('./tla/pages/local')} />
 				{/* <Route path={`/${PREFIX.tla}/playground`} lazy={() => import('./tla/pages/playground')} /> */}

commit 2470bc0d7815441725f4de0c8bcb6eaeafe37b3f
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Mon Dec 9 08:47:02 2024 +0000

    [botcom] fancypants routes (#5078)
    
    Some self-indulgent typescript shenanigans, as an end-of-week palette
    cleanser 💆‍♂️
    
    I found the route definitions kinda hard to read and add to, with all
    the prefixes string interpolation and helper functions stuff. I wanted
    to make it obvious how to add a new route and whether/how to add a
    helper function for creating paths or urls for that route.
    
    I remembered gary bernhardt came up with some clever typesafe router
    thingy a few years ago after TS added template string types, and figured
    I could do something similar that lets us specify the routes as normal
    (uninterpolated, easy to scan) strings and then extract the param types,
    and also to compile helper functions automatically.
    
    That's what this PR does. it adds a routeDefs.ts file that lets you
    quickly scan the list of routes on the site, and if you want to add a
    new route you put it there and it automatically compiles a helper fn.
    Then in routes.tsx we reference the route paths when constructing the
    route component hierarchy.
    
    I don't feel super strongly about whether or not to merge this, tbh it
    was fine how it was 🤷🏼
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 67b0702a7..2e257d757 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -1,10 +1,4 @@
 import { captureException } from '@sentry/react'
-import {
-	READ_ONLY_LEGACY_PREFIX,
-	READ_ONLY_PREFIX,
-	ROOM_PREFIX,
-	SNAPSHOT_PREFIX,
-} from '@tldraw/dotcom-shared'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
 import { Suspense, lazy, useEffect } from 'react'
 import { Helmet } from 'react-helmet-async'
@@ -12,9 +6,9 @@ import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-ro
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
+import { ROUTES } from './routeDefs'
 import { IntlProvider } from './tla/utils/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
-import { PREFIX } from './tla/utils/urls'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
@@ -71,55 +65,40 @@ export const router = createRoutesFromElements(
 		}}
 	>
 		<Route errorElement={<DefaultErrorFallback />}>
-			<Route path="/" lazy={() => import('./pages/root')} />
+			<Route path={ROUTES.legacyRoot} lazy={() => import('./pages/root')} />
 			{/* We don't want to index multiplayer rooms */}
 			<Route element={<NoIndex />}>
 				<Route element={<ShimIntlProvider />}>
-					<Route path={`/${ROOM_PREFIX}`} lazy={() => import('./pages/new')} />
-					<Route path="/new" lazy={() => import('./pages/new')} />
-					<Route path={`/ts-side`} lazy={() => import('./pages/public-touchscreen-side-panel')} />
+					<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
+					<Route path={ROUTES.legacyNewPage2} lazy={() => import('./pages/new')} />
 					<Route
-						path={`/${ROOM_PREFIX}/:roomId`}
-						lazy={() => import('./pages/public-multiplayer')}
+						path={ROUTES.touchscreenSidePanel}
+						lazy={() => import('./pages/public-touchscreen-side-panel')}
 					/>
-					<Route path={`/${ROOM_PREFIX}/:boardId/history`} lazy={() => import('./pages/history')} />
+					<Route path={ROUTES.legacyRoom} lazy={() => import('./pages/public-multiplayer')} />
+					<Route path={ROUTES.legacyRoomHistory} lazy={() => import('./pages/history')} />
 					<Route
-						path={`/${ROOM_PREFIX}/:boardId/history/:timestamp`}
+						path={ROUTES.legacyRoomHistorySnapshot}
 						lazy={() => import('./pages/history-snapshot')}
 					/>
+					<Route path={ROUTES.legacySnapshot} lazy={() => import('./pages/public-snapshot')} />
 					<Route
-						path={`/${SNAPSHOT_PREFIX}/:roomId`}
-						lazy={() => import('./pages/public-snapshot')}
-					/>
-					<Route
-						path={`/${READ_ONLY_LEGACY_PREFIX}/:roomId`}
+						path={ROUTES.legacyReadonlyOld}
 						lazy={() => import('./pages/public-readonly-legacy')}
 					/>
-					<Route
-						path={`/${READ_ONLY_PREFIX}/:roomId`}
-						lazy={() => import('./pages/public-readonly')}
-					/>
+					<Route path={ROUTES.legacyReadonly} lazy={() => import('./pages/public-readonly')} />
 				</Route>
 			</Route>
 		</Route>
 		{/* begin tla */}
 		<Route element={<NoIndex />}>
-			<Route
-				path={`/${PREFIX.tla}/${PREFIX.localFile}/:fileSlug`}
-				lazy={() => import('./tla/pages/local-file')}
-			/>
+			<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
 			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-				<Route path={`/${PREFIX.tla}`} lazy={() => import('./tla/pages/local')} />
-				{/* <Route path={`/${PREFIX.tla}/playground`} lazy={() => import('./tla/pages/playground')} /> */}
+				<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
+				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}
 				{/* File view */}
-				<Route
-					path={`/${PREFIX.tla}/${PREFIX.file}/:fileSlug`}
-					lazy={() => import('./tla/pages/file')}
-				/>
-				<Route
-					path={`/${PREFIX.tla}/${PREFIX.publish}/:fileSlug`}
-					lazy={() => import('./tla/pages/publish')}
-				/>
+				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
+				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
 				{/* Views that require login */}
 				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
 			</Route>

commit ad5917e619b9ff7c55ef536ddb7cb335549bdb86
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Tue Dec 17 10:22:41 2024 +0000

    [botcom] Support legacy routes (#5123)
    
    This PR adds (stubs) support for legacy routes in botcom. Those are:
    - shared room
    - shared room (readonly)
    - shared room (readonly, old url)
    - snapshot
    - history
    - history snapshot
    - touchscreen sidebar (maybe)
    
    I think it's better for us to treat these as "new routes" within botcom
    so that we can develop out the ways that these routes should be handled.
    Many routes need new UI and interactions, while the more rare internal
    routes can be mostly left as they are.
    
    We don't want to break shared rooms etc for people, however we do want
    to have the prompts to sign in, etc, present on these rooms, similar to
    what we display to signed out users for files. And for signed in users,
    we should have a way to "claim" or "slurp" the file into your account's
    files.
    
    Some notes:
    
    - titles appear in title bar for legacy routes
    - legacy routes support copy tab in share menu
    
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 2e257d757..a56a42c99 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -99,6 +99,26 @@ export const router = createRoutesFromElements(
 				{/* File view */}
 				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
 				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
+				{/* Legacy room */}
+				<Route path={ROUTES.tlaLegacyRoom} lazy={() => import('./tla/pages/legacy-room')} />
+				{/* Legacy readonly */}
+				<Route path={ROUTES.tlaLegacyReadonly} lazy={() => import('./tla/pages/legacy-readonly')} />
+				<Route
+					path={ROUTES.tlaLegacyReadonlyOld}
+					lazy={() => import('./tla/pages/legacy-readonly-old')}
+				/>
+				{/* Legacy snapshot */}
+				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
+				{/* Legacy history */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistory}
+					lazy={() => import('./tla/pages/legacy-history')}
+				/>
+				{/* Legacy history snapshot */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistorySnapshot}
+					lazy={() => import('./tla/pages/legacy-history-snapshot')}
+				/>
 				{/* Views that require login */}
 				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
 			</Route>

commit 58beacd20b55f77f5b1e52c819158ddfcc7b9cc8
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Mon Jan 13 15:09:40 2025 +0000

    [botcom] Translation tweaks (#5184)
    
    This PR makes minor copy changes to the translations. Ready to
    translate!
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index a56a42c99..c789bbdd1 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -42,7 +42,6 @@ export const router = createRoutesFromElements(
 						para1 = `You don't have permission to view this room.`
 						break
 					}
-
 					case TLSyncErrorCloseEventReason.RATE_LIMITED: {
 						header = 'Rate limited'
 						para1 = `Please slow down.`

commit c83a0189a824aca4b97dff5f78280efd4e5019e2
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Tue Jan 14 13:53:21 2025 +0000

    [botcom] Use clerk cookie to control routing (#5207)
    
    This PR remove the `q` prefix for tla routes, but if you go to `/q` or
    `/beta` you will be met with a very basic sign-in page. when you sign
    in, you get the tla routes instead of the legacy routes. We can share
    this link on twitter or whatever when we want to let people in. (need to
    update the clerk settings to allow non-tldraw.com emails first)
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index c789bbdd1..42cdf1814 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -3,6 +3,7 @@ import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-cor
 import { Suspense, lazy, useEffect } from 'react'
 import { Helmet } from 'react-helmet-async'
 import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
+import { getFromLocalStorage } from 'tldraw'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
@@ -12,6 +13,95 @@ import { TlaNotFoundError } from './tla/utils/notFoundError'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
+const clerkCookieName = '__session'
+export const tlaOverrideFlagName = 'tla-override-flag'
+
+const isClerkCookieSet = document.cookie
+	.split(';')
+	.some((item) => item.trim().startsWith(clerkCookieName))
+
+const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlagName) || navigator.webdriver
+
+export const legacyRoutes = (
+	<Route errorElement={<DefaultErrorFallback />}>
+		<Route path={ROUTES.legacyRoot} lazy={() => import('./pages/root')} />
+		{/* We don't want to index multiplayer rooms */}
+		<Route element={<NoIndex />}>
+			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
+				<Route path={ROUTES.tlaOptIn} lazy={() => import('./pages/tla-opt-in')} />
+				<Route path={ROUTES.tlaOverride} lazy={() => import('./pages/tla-override')} />
+				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
+				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
+			</Route>
+			<Route element={<ShimIntlProvider />}>
+				<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
+				<Route path={ROUTES.legacyNewPage2} lazy={() => import('./pages/new')} />
+				<Route
+					path={ROUTES.touchscreenSidePanel}
+					lazy={() => import('./pages/public-touchscreen-side-panel')}
+				/>
+				<Route path={ROUTES.legacyRoom} lazy={() => import('./pages/public-multiplayer')} />
+				<Route path={ROUTES.legacyRoomHistory} lazy={() => import('./pages/history')} />
+				<Route
+					path={ROUTES.legacyRoomHistorySnapshot}
+					lazy={() => import('./pages/history-snapshot')}
+				/>
+				<Route path={ROUTES.legacySnapshot} lazy={() => import('./pages/public-snapshot')} />
+				<Route
+					path={ROUTES.legacyReadonlyOld}
+					lazy={() => import('./pages/public-readonly-legacy')}
+				/>
+				<Route path={ROUTES.legacyReadonly} lazy={() => import('./pages/public-readonly')} />
+			</Route>
+		</Route>
+	</Route>
+)
+
+export const tlaRoutes = (
+	<Route>
+		<Route element={<ShimIntlProvider />}>
+			<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
+			<Route
+				path={ROUTES.touchscreenSidePanel}
+				lazy={() => import('./pages/public-touchscreen-side-panel')}
+			/>
+		</Route>
+		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
+			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
+			<Route element={<NoIndex />}>
+				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
+				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}
+				{/* File view */}
+				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
+				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
+				{/* Legacy room */}
+				<Route path={ROUTES.tlaLegacyRoom} lazy={() => import('./tla/pages/legacy-room')} />
+				{/* Legacy readonly */}
+				<Route path={ROUTES.tlaLegacyReadonly} lazy={() => import('./tla/pages/legacy-readonly')} />
+				<Route
+					path={ROUTES.tlaLegacyReadonlyOld}
+					lazy={() => import('./tla/pages/legacy-readonly-old')}
+				/>
+				{/* Legacy snapshot */}
+				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
+				{/* Legacy history */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistory}
+					lazy={() => import('./tla/pages/legacy-history')}
+				/>
+				{/* Legacy history snapshot */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistorySnapshot}
+					lazy={() => import('./tla/pages/legacy-history-snapshot')}
+				/>
+				{/* Views that require login */}
+				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
+				<Route path={ROUTES.tlaOverride} lazy={() => import('./pages/tla-override')} />
+			</Route>
+		</Route>
+	</Route>
+)
+
 export const router = createRoutesFromElements(
 	<Route
 		ErrorBoundary={() => {
@@ -63,66 +153,7 @@ export const router = createRoutesFromElements(
 			)
 		}}
 	>
-		<Route errorElement={<DefaultErrorFallback />}>
-			<Route path={ROUTES.legacyRoot} lazy={() => import('./pages/root')} />
-			{/* We don't want to index multiplayer rooms */}
-			<Route element={<NoIndex />}>
-				<Route element={<ShimIntlProvider />}>
-					<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
-					<Route path={ROUTES.legacyNewPage2} lazy={() => import('./pages/new')} />
-					<Route
-						path={ROUTES.touchscreenSidePanel}
-						lazy={() => import('./pages/public-touchscreen-side-panel')}
-					/>
-					<Route path={ROUTES.legacyRoom} lazy={() => import('./pages/public-multiplayer')} />
-					<Route path={ROUTES.legacyRoomHistory} lazy={() => import('./pages/history')} />
-					<Route
-						path={ROUTES.legacyRoomHistorySnapshot}
-						lazy={() => import('./pages/history-snapshot')}
-					/>
-					<Route path={ROUTES.legacySnapshot} lazy={() => import('./pages/public-snapshot')} />
-					<Route
-						path={ROUTES.legacyReadonlyOld}
-						lazy={() => import('./pages/public-readonly-legacy')}
-					/>
-					<Route path={ROUTES.legacyReadonly} lazy={() => import('./pages/public-readonly')} />
-				</Route>
-			</Route>
-		</Route>
-		{/* begin tla */}
-		<Route element={<NoIndex />}>
-			<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
-			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-				<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
-				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}
-				{/* File view */}
-				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
-				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
-				{/* Legacy room */}
-				<Route path={ROUTES.tlaLegacyRoom} lazy={() => import('./tla/pages/legacy-room')} />
-				{/* Legacy readonly */}
-				<Route path={ROUTES.tlaLegacyReadonly} lazy={() => import('./tla/pages/legacy-readonly')} />
-				<Route
-					path={ROUTES.tlaLegacyReadonlyOld}
-					lazy={() => import('./tla/pages/legacy-readonly-old')}
-				/>
-				{/* Legacy snapshot */}
-				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
-				{/* Legacy history */}
-				<Route
-					path={ROUTES.tlaLegacyRoomHistory}
-					lazy={() => import('./tla/pages/legacy-history')}
-				/>
-				{/* Legacy history snapshot */}
-				<Route
-					path={ROUTES.tlaLegacyRoomHistorySnapshot}
-					lazy={() => import('./tla/pages/legacy-history-snapshot')}
-				/>
-				{/* Views that require login */}
-				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
-			</Route>
-		</Route>
-		{/* end tla */}
+		{isClerkCookieSet || isOverrideFlagSet ? tlaRoutes : legacyRoutes}
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )

commit bc462846819a33006558921b016a9e44c4a18596
Author: alex <alex@dytry.ch>
Date:   Thu Jan 16 15:19:59 2025 +0000

    Set up posthog (#5220)
    
    Gets our existing `trackEvent` infra set up to start sending events into
    posthog. This involves a cookie consent banner and cookie management
    dialog for logged-in users. For signed out users (or users who haven't
    opted into analytics) data is recorded anonymously.
    
    ### Change type
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 42cdf1814..5e91a51b4 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -60,7 +60,6 @@ export const legacyRoutes = (
 export const tlaRoutes = (
 	<Route>
 		<Route element={<ShimIntlProvider />}>
-			<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
 			<Route
 				path={ROUTES.touchscreenSidePanel}
 				lazy={() => import('./pages/public-touchscreen-side-panel')}
@@ -82,6 +81,8 @@ export const tlaRoutes = (
 					path={ROUTES.tlaLegacyReadonlyOld}
 					lazy={() => import('./tla/pages/legacy-readonly-old')}
 				/>
+				{/* Legacy new */}
+				<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
 				{/* Legacy snapshot */}
 				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
 				{/* Legacy history */}

commit 7f52c1464bc4852837a8bccb1f4ad70117db32c9
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Fri Jan 17 11:02:11 2025 +0000

    worker debug logging (#5219)
    
    This PR begins to address some pains we've felt with regard to logging
    on cloudflare workers:
    
    1. a console.log invocation is only flushed to the console (or cf
    dashboard) once a request completes. so if a request hangs for some
    reason you never see the log output.
    2. logs are very eagerly sampled, which makes it hard to rely on them
    for debugging because you never know whether a log statement wasn't
    reached or whether it was just dropped.
    
    so this PR
    
    - adds a Logger durable object that you can connect to via a websocket
    to get an instant stream of every log statement, no waiting for requests
    to finish.
    - wraps the Logger durable object with a Logger class to consolidate
    code.
    
    The logger durable object is on in dev and preview envs, but is not
    available in staging or production yet because that would require auth
    and filtering user DO events by user.
    
    You can try it on this PR by going to
    https://pr-5219-preview-deploy.tldraw.com/__debug-tail and then opening
    the app in another tab
    
    also tackles
    https://linear.app/tldraw/issue/INT-648/investigate-flaky-preview-deploys
    somewhat
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 5e91a51b4..3a5ac7e2f 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -155,6 +155,7 @@ export const router = createRoutesFromElements(
 		}}
 	>
 		{isClerkCookieSet || isOverrideFlagSet ? tlaRoutes : legacyRoutes}
+		<Route path="/__debug-tail" lazy={() => import('./tla/pages/worker-debug-tail')} />
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>
 )

commit fa7c40c0a96586dc862bcff8a8f9598bfef72b0d
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Tue Jan 21 11:26:12 2025 +0000

    Use localStorage instead of cookie to detect logged in state (#5251)
    
    I was finding the _session cookie was not a reliable way to detect
    signed-in state, so have switched to localStorage. It's not perfect
    either, but should be a lot more accurate.
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 3a5ac7e2f..628e9ba56 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -13,14 +13,11 @@ import { TlaNotFoundError } from './tla/utils/notFoundError'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
-const clerkCookieName = '__session'
-export const tlaOverrideFlagName = 'tla-override-flag'
+export const tlaOverrideFlag = 'tla-override-flag'
+export const tlaProbablyLoggedInFlag = 'tla-probably-logged-in-flag'
 
-const isClerkCookieSet = document.cookie
-	.split(';')
-	.some((item) => item.trim().startsWith(clerkCookieName))
-
-const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlagName) || navigator.webdriver
+const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlag) || navigator.webdriver
+const isProbablyLoggedIn = !!getFromLocalStorage(tlaProbablyLoggedInFlag)
 
 export const legacyRoutes = (
 	<Route errorElement={<DefaultErrorFallback />}>
@@ -154,7 +151,7 @@ export const router = createRoutesFromElements(
 			)
 		}}
 	>
-		{isClerkCookieSet || isOverrideFlagSet ? tlaRoutes : legacyRoutes}
+		{isProbablyLoggedIn || isOverrideFlagSet ? tlaRoutes : legacyRoutes}
 		<Route path="/__debug-tail" lazy={() => import('./tla/pages/worker-debug-tail')} />
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>

commit 09748bd395c1bc6556cf169df33041a144312b13
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Fri Jan 24 11:32:27 2025 +0000

    David/int 677 guests see slurp failure modal (#5280)
    
    - fix slurping images from /preview sign in. (it used an abortController
    bound to the lifecycle of the dialog, but it should have been bound to
    the lifecycle of the editor)
    - prevent guest users trying to slurp files they don't own
    - (unrelated) i made the route switching more robust. I saw a few times
    in staging that it would get out of sync with my logged in status
    somehow. so now we just force a refresh if the auth status changes and
    it doesn't match the preview flag.
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 628e9ba56..0a27ee1cc 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -1,9 +1,10 @@
+import { useAuth } from '@clerk/clerk-react'
 import { captureException } from '@sentry/react'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
-import { Suspense, lazy, useEffect } from 'react'
+import { PropsWithChildren, Suspense, lazy, useEffect, useLayoutEffect } from 'react'
 import { Helmet } from 'react-helmet-async'
 import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
-import { getFromLocalStorage } from 'tldraw'
+import { deleteFromLocalStorage, getFromLocalStorage, setInLocalStorage } from 'tldraw'
 import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
@@ -19,6 +20,23 @@ export const tlaProbablyLoggedInFlag = 'tla-probably-logged-in-flag'
 const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlag) || navigator.webdriver
 const isProbablyLoggedIn = !!getFromLocalStorage(tlaProbablyLoggedInFlag)
 
+export function SetPreviewFlag(props: PropsWithChildren) {
+	const auth = useAuth()
+	useLayoutEffect(() => {
+		if (!auth.isLoaded) return
+		if (isOverrideFlagSet) return
+		if (auth.isSignedIn && !isProbablyLoggedIn) {
+			setInLocalStorage(tlaProbablyLoggedInFlag, 'true')
+			window.location.reload()
+		} else if (!auth.isSignedIn && isProbablyLoggedIn) {
+			deleteFromLocalStorage(tlaProbablyLoggedInFlag)
+			window.location.reload()
+		}
+	}, [auth.isSignedIn, auth.isLoaded])
+	if (!auth.isLoaded && !isOverrideFlagSet) return null
+	return <>{props.children}</>
+}
+
 export const legacyRoutes = (
 	<Route errorElement={<DefaultErrorFallback />}>
 		<Route path={ROUTES.legacyRoot} lazy={() => import('./pages/root')} />
@@ -65,6 +83,7 @@ export const tlaRoutes = (
 		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
 			<Route element={<NoIndex />}>
+				<Route path={ROUTES.tlaOptIn} lazy={() => import('./pages/tla-opt-in')} />
 				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
 				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}
 				{/* File view */}

commit ff19d0d907b998b765b163aaefea85ddd1bc2449
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Wed Jan 29 10:36:23 2025 +0000

    Don't nullify cache (#5310)
    
    accidentally introduced a couple of minor bugs by nullifying the cache,
    so in this PR i make it so that the interval just starts and stops
    rather than completely getting rid of the cache.
    
    ### Change type
    
    - [x] `bugfix`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 0a27ee1cc..b3342e532 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -17,7 +17,7 @@ const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/Logi
 export const tlaOverrideFlag = 'tla-override-flag'
 export const tlaProbablyLoggedInFlag = 'tla-probably-logged-in-flag'
 
-const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlag) || navigator.webdriver
+export const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlag) || navigator.webdriver
 const isProbablyLoggedIn = !!getFromLocalStorage(tlaProbablyLoggedInFlag)
 
 export function SetPreviewFlag(props: PropsWithChildren) {

commit 29aefe439fafe6657471bc28133855169a739fa7
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Wed Jan 29 12:23:31 2025 +0100

    Add `/new` route for file creation. (#5314)
    
    Add `/new` route for quickly creating files.
    
    ### Change type
    - [x] `improvement`
    
    ### Release notes
    
    - Add `/new` route for quickly creating a new file.

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index b3342e532..4cf6cfb68 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -83,6 +83,7 @@ export const tlaRoutes = (
 		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
 			<Route element={<NoIndex />}>
+				<Route path={ROUTES.tlaNew} lazy={() => import('./pages/tla-new')} />
 				<Route path={ROUTES.tlaOptIn} lazy={() => import('./pages/tla-opt-in')} />
 				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
 				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}

commit dcbfd1934840afc22a7783b75edc699adebf29f4
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Mon Feb 10 15:32:37 2025 +0000

    yeet legacy pages into sun (#5385)
    
    # 🔪
    
    This PR gets rid of all the old versions of the legacy routes like
    /r/whatever and such.
    The new app-enhanced versions still exist obvs.
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 4cf6cfb68..e990f33ef 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -1,125 +1,16 @@
-import { useAuth } from '@clerk/clerk-react'
 import { captureException } from '@sentry/react'
 import { TLRemoteSyncError, TLSyncErrorCloseEventReason } from '@tldraw/sync-core'
-import { PropsWithChildren, Suspense, lazy, useEffect, useLayoutEffect } from 'react'
+import { Suspense, lazy, useEffect } from 'react'
 import { Helmet } from 'react-helmet-async'
-import { Outlet, Route, createRoutesFromElements, useRouteError } from 'react-router-dom'
-import { deleteFromLocalStorage, getFromLocalStorage, setInLocalStorage } from 'tldraw'
-import { DefaultErrorFallback } from './components/DefaultErrorFallback/DefaultErrorFallback'
+import { Outlet, Route, createRoutesFromElements, redirect, useRouteError } from 'react-router-dom'
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
-import { ROUTES } from './routeDefs'
+import { ROUTES, routes } from './routeDefs'
 import { IntlProvider } from './tla/utils/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
 
-export const tlaOverrideFlag = 'tla-override-flag'
-export const tlaProbablyLoggedInFlag = 'tla-probably-logged-in-flag'
-
-export const isOverrideFlagSet = !!getFromLocalStorage(tlaOverrideFlag) || navigator.webdriver
-const isProbablyLoggedIn = !!getFromLocalStorage(tlaProbablyLoggedInFlag)
-
-export function SetPreviewFlag(props: PropsWithChildren) {
-	const auth = useAuth()
-	useLayoutEffect(() => {
-		if (!auth.isLoaded) return
-		if (isOverrideFlagSet) return
-		if (auth.isSignedIn && !isProbablyLoggedIn) {
-			setInLocalStorage(tlaProbablyLoggedInFlag, 'true')
-			window.location.reload()
-		} else if (!auth.isSignedIn && isProbablyLoggedIn) {
-			deleteFromLocalStorage(tlaProbablyLoggedInFlag)
-			window.location.reload()
-		}
-	}, [auth.isSignedIn, auth.isLoaded])
-	if (!auth.isLoaded && !isOverrideFlagSet) return null
-	return <>{props.children}</>
-}
-
-export const legacyRoutes = (
-	<Route errorElement={<DefaultErrorFallback />}>
-		<Route path={ROUTES.legacyRoot} lazy={() => import('./pages/root')} />
-		{/* We don't want to index multiplayer rooms */}
-		<Route element={<NoIndex />}>
-			<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-				<Route path={ROUTES.tlaOptIn} lazy={() => import('./pages/tla-opt-in')} />
-				<Route path={ROUTES.tlaOverride} lazy={() => import('./pages/tla-override')} />
-				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
-				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
-			</Route>
-			<Route element={<ShimIntlProvider />}>
-				<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
-				<Route path={ROUTES.legacyNewPage2} lazy={() => import('./pages/new')} />
-				<Route
-					path={ROUTES.touchscreenSidePanel}
-					lazy={() => import('./pages/public-touchscreen-side-panel')}
-				/>
-				<Route path={ROUTES.legacyRoom} lazy={() => import('./pages/public-multiplayer')} />
-				<Route path={ROUTES.legacyRoomHistory} lazy={() => import('./pages/history')} />
-				<Route
-					path={ROUTES.legacyRoomHistorySnapshot}
-					lazy={() => import('./pages/history-snapshot')}
-				/>
-				<Route path={ROUTES.legacySnapshot} lazy={() => import('./pages/public-snapshot')} />
-				<Route
-					path={ROUTES.legacyReadonlyOld}
-					lazy={() => import('./pages/public-readonly-legacy')}
-				/>
-				<Route path={ROUTES.legacyReadonly} lazy={() => import('./pages/public-readonly')} />
-			</Route>
-		</Route>
-	</Route>
-)
-
-export const tlaRoutes = (
-	<Route>
-		<Route element={<ShimIntlProvider />}>
-			<Route
-				path={ROUTES.touchscreenSidePanel}
-				lazy={() => import('./pages/public-touchscreen-side-panel')}
-			/>
-		</Route>
-		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
-			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
-			<Route element={<NoIndex />}>
-				<Route path={ROUTES.tlaNew} lazy={() => import('./pages/tla-new')} />
-				<Route path={ROUTES.tlaOptIn} lazy={() => import('./pages/tla-opt-in')} />
-				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
-				{/* <Route path={ROUTES.tlaPlayground} lazy={() => import('./tla/pages/playground')} /> */}
-				{/* File view */}
-				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
-				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
-				{/* Legacy room */}
-				<Route path={ROUTES.tlaLegacyRoom} lazy={() => import('./tla/pages/legacy-room')} />
-				{/* Legacy readonly */}
-				<Route path={ROUTES.tlaLegacyReadonly} lazy={() => import('./tla/pages/legacy-readonly')} />
-				<Route
-					path={ROUTES.tlaLegacyReadonlyOld}
-					lazy={() => import('./tla/pages/legacy-readonly-old')}
-				/>
-				{/* Legacy new */}
-				<Route path={ROUTES.legacyNewPage} lazy={() => import('./pages/new')} />
-				{/* Legacy snapshot */}
-				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
-				{/* Legacy history */}
-				<Route
-					path={ROUTES.tlaLegacyRoomHistory}
-					lazy={() => import('./tla/pages/legacy-history')}
-				/>
-				{/* Legacy history snapshot */}
-				<Route
-					path={ROUTES.tlaLegacyRoomHistorySnapshot}
-					lazy={() => import('./tla/pages/legacy-history-snapshot')}
-				/>
-				{/* Views that require login */}
-				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
-				<Route path={ROUTES.tlaOverride} lazy={() => import('./pages/tla-override')} />
-			</Route>
-		</Route>
-	</Route>
-)
-
 export const router = createRoutesFromElements(
 	<Route
 		ErrorBoundary={() => {
@@ -171,7 +62,45 @@ export const router = createRoutesFromElements(
 			)
 		}}
 	>
-		{isProbablyLoggedIn || isOverrideFlagSet ? tlaRoutes : legacyRoutes}
+		<Route element={<ShimIntlProvider />}>
+			<Route
+				path={ROUTES.tlaTouchScreenSidePanel}
+				lazy={() => import('./pages/public-touchscreen-side-panel')}
+			/>
+		</Route>
+		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
+			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
+			<Route element={<NoIndex />}>
+				<Route path={ROUTES.tlaNew} lazy={() => import('./pages/tla-new')} />
+				<Route path={ROUTES.tlaOptIn} loader={() => redirect(routes.tlaRoot())} />
+				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
+				{/* File view */}
+				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
+				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />
+				{/* Legacy room */}
+				<Route path={ROUTES.tlaLegacyRoom} lazy={() => import('./tla/pages/legacy-room')} />
+				{/* Legacy readonly */}
+				<Route path={ROUTES.tlaLegacyReadonly} lazy={() => import('./tla/pages/legacy-readonly')} />
+				<Route
+					path={ROUTES.tlaLegacyReadonlyOld}
+					lazy={() => import('./tla/pages/legacy-readonly-old')}
+				/>
+				{/* Legacy snapshot */}
+				<Route path={ROUTES.tlaLegacySnapshot} lazy={() => import('./tla/pages/legacy-snapshot')} />
+				{/* Legacy history */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistory}
+					lazy={() => import('./tla/pages/legacy-history')}
+				/>
+				{/* Legacy history snapshot */}
+				<Route
+					path={ROUTES.tlaLegacyRoomHistorySnapshot}
+					lazy={() => import('./tla/pages/legacy-history-snapshot')}
+				/>
+				{/* Views that require login */}
+				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
+			</Route>
+		</Route>
 		<Route path="/__debug-tail" lazy={() => import('./tla/pages/worker-debug-tail')} />
 		<Route path="*" lazy={() => import('./pages/not-found')} />
 	</Route>

commit bfbcedc3bf32f28623a060e0a20719a42876dc3e
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Thu Feb 13 10:07:55 2025 +0000

    Secret local file index (#5419)
    
    So on tldraw.com if you're logged out your content will be saved only in
    indexeddb. Then if you added at least one shape, when you log in we
    slurp it into an app file. We then _don't_ delete the indexeddb entry in
    case something went wrong with the slurping. This did indeed appear to
    happen one time with one of our users. Luckily their data was under the
    default persistenceKey and we were able to link them to
    `https://tldraw.com/lf/tldraw_document_v3` or whatever it was.
    
    This `/lf/:persistenceKey` route is a local-only route that loads a
    tldraw document from indexeddb, and it will create a document if one
    doesn't already exist for the given :persistenceKey.
    
    This PR adds an index page under the `/lf` route, so that you can see a
    list of all the tldraw documents in your indexeddb. This will be useful
    to us in case we ever get someone who complains that something they drew
    while logged out disappeared after they logged in, but it wasn't under
    the default persistenceKey of `tldraw_document_v3` (we generate a new
    persistenceKey every time we slurp a local file into the app). We can
    just point them to `https://tldraw.com/lf` and let them do any recovery
    they need.
    
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index e990f33ef..90123b101 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -74,6 +74,10 @@ export const router = createRoutesFromElements(
 				<Route path={ROUTES.tlaNew} lazy={() => import('./pages/tla-new')} />
 				<Route path={ROUTES.tlaOptIn} loader={() => redirect(routes.tlaRoot())} />
 				<Route path={ROUTES.tlaLocalFile} lazy={() => import('./tla/pages/local-file')} />
+				<Route
+					path={ROUTES.tlaLocalFileIndex}
+					lazy={() => import('./tla/pages/local-file-index')}
+				/>
 				{/* File view */}
 				<Route path={ROUTES.tlaFile} lazy={() => import('./tla/pages/file')} />
 				<Route path={ROUTES.tlaPublish} lazy={() => import('./tla/pages/publish')} />

commit 3ec3ef7e25d995972a7d7acdaedceda02bf84501
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Mon Feb 17 17:08:28 2025 +0100

    Remove file creation route. (#5445)
    
    Remove the legacy new room creation route.
    
    ### Change type
    
    - [x] `improvement`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index 90123b101..eb14ad9ed 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -6,7 +6,6 @@ import { Outlet, Route, createRoutesFromElements, redirect, useRouteError } from
 import { ErrorPage } from './components/ErrorPage/ErrorPage'
 import { notFound } from './pages/not-found'
 import { ROUTES, routes } from './routeDefs'
-import { IntlProvider } from './tla/utils/i18n'
 import { TlaNotFoundError } from './tla/utils/notFoundError'
 
 const LoginRedirectPage = lazy(() => import('./components/LoginRedirectPage/LoginRedirectPage'))
@@ -62,12 +61,6 @@ export const router = createRoutesFromElements(
 			)
 		}}
 	>
-		<Route element={<ShimIntlProvider />}>
-			<Route
-				path={ROUTES.tlaTouchScreenSidePanel}
-				lazy={() => import('./pages/public-touchscreen-side-panel')}
-			/>
-		</Route>
 		<Route lazy={() => import('./tla/providers/TlaRootProviders')}>
 			<Route path={ROUTES.tlaRoot} lazy={() => import('./tla/pages/local')} />
 			<Route element={<NoIndex />}>
@@ -120,12 +113,3 @@ function NoIndex() {
 		</>
 	)
 }
-
-function ShimIntlProvider() {
-	return (
-		// This IntlProvider is just for backwards compatibilty for the old site.
-		<IntlProvider defaultLocale="en" locale="en" messages={{}}>
-			<Outlet />
-		</IntlProvider>
-	)
-}

commit 58dea67c6f61819d53a15c55887ae81a0fa03515
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Fri Feb 28 13:24:46 2025 +0000

    Admin UI + backend fixes (#5520)
    
    Admin UI for inspecting user DO data and doing ad-hoc reboots, + a few
    backend-related fixes. I recommend viewing each commit individually.
    
    ### Change type
    
    - [x] `other`

diff --git a/apps/dotcom/client/src/routes.tsx b/apps/dotcom/client/src/routes.tsx
index eb14ad9ed..24a7b993c 100644
--- a/apps/dotcom/client/src/routes.tsx
+++ b/apps/dotcom/client/src/routes.tsx
@@ -96,6 +96,7 @@ export const router = createRoutesFromElements(
 				/>
 				{/* Views that require login */}
 				<Route lazy={() => import('./tla/providers/RequireSignedInUser')}></Route>
+				<Route path="/admin" lazy={() => import('./pages/admin')} />
 			</Route>
 		</Route>
 		<Route path="/__debug-tail" lazy={() => import('./tla/pages/worker-debug-tail')} />

