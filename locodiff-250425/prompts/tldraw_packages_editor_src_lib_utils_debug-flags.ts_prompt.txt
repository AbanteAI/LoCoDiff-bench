# Instructions

You are being benchmarked. You will see the output of a git log command, and from that must infer the current state of a file. Think carefully, as you must output the exact state of the file to earn full marks.

**Important:** Your goal is to reproduce the file's content *exactly* as it exists at the final commit, even if the code appears broken, buggy, or contains obvious errors. Do **not** try to "fix" the code. Attempting to correct issues will result in a poor score, as this benchmark evaluates your ability to reproduce the precise state of the file based on its history.

# Required Response Format

Wrap the content of the file in triple backticks (```). Any text outside the final closing backticks will be ignored. End your response after outputting the closing backticks.

# Example Response

```python
#!/usr/bin/env python
print('Hello, world!')
```

# File History

> git log -p --cc --topo-order --reverse -- packages/editor/src/lib/utils/debug-flags.ts

commit 29ed921c6745923dcc8daa72ba6f815a5c4b279a
Author: alex <alex@dytry.ch>
Date:   Tue Apr 25 12:01:25 2023 +0100

    transfer-out: transfer out

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
new file mode 100644
index 000000000..7332729e1
--- /dev/null
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -0,0 +1,111 @@
+import { atom, Atom, react } from 'signia'
+
+// --- 1. DEFINE ---
+// Define your debug flags here. Call `createDebugValue` with the name you want
+// your value to be available as on `window` and the initial value. If you don't
+// want your value to be stored in session storage, pass `false` as the 3rd arg
+
+/** @internal */
+export const debugFlags = {
+	preventDefaultLogging: createDebugValue('tldrawPreventDefaultLogging', false),
+	pointerCaptureLogging: createDebugValue('tldrawPointerCaptureLogging', false),
+	pointerCaptureTracking: createDebugValue('tldrawPointerCaptureTracking', false),
+	pointerCaptureTrackingObject: createDebugValue(
+		'tldrawPointerCaptureTrackingObject',
+		// ideally we wouldn't store this mutable value in an atom but it's not
+		// a big deal for debug values
+		new Map<Element, number>(),
+		false
+	),
+	elementRemovalLogging: createDebugValue('tldrawElementRemovalLogging', false),
+	debugSvg: createDebugValue('tldrawDebugSvg', false),
+	throwToBlob: createDebugValue('tldrawThrowToBlob', false),
+	peopleMenu: createDebugValue('tldrawPeopleMenu', false),
+	logMessages: createDebugValue('tldrawUiLog', []),
+	resetConnectionEveryPing: createDebugValue('tldrawResetConnectionEveryPing', false),
+}
+
+declare global {
+	interface Window {
+		tldrawLog: (message: any) => void
+	}
+}
+debugFlags.logMessages.set([])
+
+if (typeof window !== 'undefined') {
+	window.tldrawLog = (message: any) => {
+		debugFlags.logMessages.set(debugFlags.logMessages.value.concat(message))
+	}
+}
+
+// --- 2. USE ---
+// In normal code, read from debug flags directly by calling .get() on them:
+//    if (debugFlags.preventDefaultLogging.get()) { ... }
+//
+// In react, wrap your reads in `useDerivedValue` so they react to changes:
+//    const shouldLog = useDerivedValue(() => debugFlags.preventDefaultLogging.get())
+
+// --- 3. GET FUNKY ---
+// If you need to do fun stuff like monkey-patching in response to flag changes,
+// add that here. Make sure you wrap your code in `react` so it runs
+// automatically when values change!
+
+if (typeof Element !== 'undefined') {
+	const nativeElementRemoveChild = Element.prototype.removeChild
+	react('element removal logging', () => {
+		if (debugFlags.elementRemovalLogging.value) {
+			Element.prototype.removeChild = function <T extends Node>(this: any, child: Node): T {
+				console.warn('[tldraw] removing child:', child)
+				return nativeElementRemoveChild.call(this, child) as T
+			}
+		} else {
+			Element.prototype.removeChild = nativeElementRemoveChild
+		}
+	})
+}
+
+// --- IMPLEMENTATION ---
+// you probably don't need to read this if you're just using the debug values system
+function createDebugValue<T>(name: string, initialValue: T, shouldStore = true): Atom<T> {
+	if (typeof window === 'undefined') {
+		return atom(`debug:${name}`, initialValue)
+	}
+
+	const storedValue = shouldStore ? (getStoredInitialValue(name) as T | null) : null
+	const value = atom(`debug:${name}`, storedValue ?? initialValue)
+
+	if (shouldStore) {
+		react(`debug:${name}`, () => {
+			const currentValue = value.value
+			try {
+				if (currentValue === initialValue) {
+					window.sessionStorage.removeItem(`debug:${name}`)
+				} else {
+					window.sessionStorage.setItem(`debug:${name}`, JSON.stringify(currentValue))
+				}
+			} catch {
+				// not a big deal
+			}
+		})
+	}
+
+	Object.defineProperty(window, name, {
+		get() {
+			return value.value
+		},
+		set(newValue) {
+			value.set(newValue)
+		},
+		configurable: true,
+	})
+
+	return value
+}
+
+function getStoredInitialValue(name: string) {
+	try {
+		return JSON.parse(window.sessionStorage.getItem(`debug:${name}`) ?? 'null')
+	} catch (err) {
+		return null
+	}
+}

commit b63e871420b82995bbe7e3c39abbbf3236ebd579
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Thu May 4 10:25:31 2023 +0100

    [fix] publish (#1222)
    
    - fixes an invalid usage of process.env in the editor package
    - fixes some bublic paths in the publishing infra code

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 7332729e1..5cecf1598 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -23,6 +23,7 @@ export const debugFlags = {
 	peopleMenu: createDebugValue('tldrawPeopleMenu', false),
 	logMessages: createDebugValue('tldrawUiLog', []),
 	resetConnectionEveryPing: createDebugValue('tldrawResetConnectionEveryPing', false),
+	newLiveCollaborators: createDebugValue('tldrawNewLiveCollaborators', false),
 }
 
 declare global {

commit 6a7dc121626426caa979a81301bb8145c886b6ec
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Thu May 18 11:59:46 2023 +0100

    Switch to new collaborators component (#1405)
    
    Followup to https://github.com/tldraw/brivate/pull/1584
    
    - Removes the old collaborators component, replacing with the new one.
    - Removes the associated debug flag
    
    ### Change Type
    
    <!-- 💡 Indicate the type of change your pull request is. -->
    <!-- 🤷‍♀️ If you're not sure, don't select anything -->
    <!-- ✂️ Feel free to delete unselected options -->
    
    <!-- To select one, put an x in the box: [x] -->
    
    - [ ] `patch` — Bug Fix
    - [ ] `minor` — New Feature
    - [x] `major` — Breaking Change
    - [ ] `dependencies` — Dependency Update (publishes a `patch` release,
    for devDependencies use `internal`)
    - [ ] `documentation` — Changes to the documentation only (will not
    publish a new version)
    - [ ] `tests` — Changes to any testing-related code only (will not
    publish a new version)
    - [ ] `internal` — Any other changes that don't affect the published
    package (will not publish a new version)
    
    ### Test Plan
    
    Check that multiplayer presence UI renders correctly
    
    - cursors
    - cursor hints (when a peer's cursor goes off the screen)
    - selection brush box
    - selection/erasing brush
    - selected shape(s) outline
    
    ### Release Notes
    
    - [Breaking] Removes the old version of LiveCollaborators, replacing it
    with the new one based on `TLInstancePresence`

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 5cecf1598..7332729e1 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -23,7 +23,6 @@ export const debugFlags = {
 	peopleMenu: createDebugValue('tldrawPeopleMenu', false),
 	logMessages: createDebugValue('tldrawUiLog', []),
 	resetConnectionEveryPing: createDebugValue('tldrawResetConnectionEveryPing', false),
-	newLiveCollaborators: createDebugValue('tldrawNewLiveCollaborators', false),
 }
 
 declare global {

commit ab0df9118e0c69a479baebaa5e6375ae5131617c
Author: Lu Wilson <l2wilson94@gmail.com>
Date:   Tue May 23 07:12:11 2023 -0700

    Add SVG cursors for all cursor types (#1416)
    
    Fixes #1410
    
    This PR adds custom SVGs for all cursor types.
    This will unblock some upcoming collaboration features!
    
    It also adds some basic debugging for custom cursors.
    
    ![2023-05-19 at 11 02 57 - Coffee
    Shrimp](https://github.com/tldraw/tldraw/assets/15892272/dbc84d04-604f-43e5-acd2-69df956e5784)
    
    It uses custom cursors for any shape-related UI, like links.
    
    ![2023-05-19 at 11 07 04 - Amaranth
    Aphid](https://github.com/tldraw/tldraw/assets/15892272/7eb25f6a-0552-47bd-b2b9-f6c3dc2fca70)
    
    But it sticks with the default browser cursors for the non-canvas UI.
    
    ![2023-05-23 at 15 06 29 - Apricot
    Bovid](https://github.com/tldraw/tldraw/assets/15892272/2fe35afb-095a-4454-a6c3-aa8337b71506)
    
    ### Change Type
    
    - [x] `minor`
    
    ### Test Plan
    
    1. Enable debug mode.
    2. From the debug menu, enable "Debug cursors".
    3. Hover the cursor over the shapes that appear.
    4. Check that the cursor appears correctly over each one.
    5. (Don't forget to turn off "Debug cursors" after use).
    
    ### Release Notes
    
    - Added consistent custom cursors.
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 7332729e1..8b81d10ac 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -23,6 +23,7 @@ export const debugFlags = {
 	peopleMenu: createDebugValue('tldrawPeopleMenu', false),
 	logMessages: createDebugValue('tldrawUiLog', []),
 	resetConnectionEveryPing: createDebugValue('tldrawResetConnectionEveryPing', false),
+	debugCursors: createDebugValue('tldrawDebugCursors', false),
 }
 
 declare global {

commit 4048064e78b09492423bd117e8fbc51b09673bde
Author: alex <alex@dytry.ch>
Date:   Tue May 30 14:06:15 2023 +0100

    Feature flags rework (#1474)
    
    This diff tweaks our `debugFlags` framework to support setting different
    default value for different environments, makes it easier to define
    feature flags, and makes feature flags show up in the debug menu by
    default. With this change, feature flags will default to being enabled
    in dev and preview environments, but disabled in production.
    
    Specify a feature flag like this:
    ```ts
    const featureFlags = {
          myCoolNewFeature: createFeatureFlag('myCoolNewFeature')
    }
    ```
    
    optionally, pass a second value to control its defaults:
    ```ts
    const featureFlags = {
        featureEnabledInProduction: createFeatureFlag('someFeature', { all: true }),
        customEnabled: createFeatureFlag('otherFeature', {development: true, staging: false, production: false}),
    }
    ```
    
    In code, the value can be read using `featureFlags.myFeature.value`.
    Remember to wrap reading it in a reactive context!
    
    ### Change Type
    
    - [x] `patch` — Bug Fix
    
    ### Test Plan
    
    -
    
    ### Release Notes
    
    [internal only change]

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 8b81d10ac..20fb9c0d5 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -1,29 +1,55 @@
-import { atom, Atom, react } from 'signia'
+import { Atom, atom, react } from 'signia'
 
 // --- 1. DEFINE ---
-// Define your debug flags here. Call `createDebugValue` with the name you want
-// your value to be available as on `window` and the initial value. If you don't
-// want your value to be stored in session storage, pass `false` as the 3rd arg
+//
+// Define your debug values and feature flags here. Use `createDebugValue` to
+// create an arbitrary value with defaults for production, staging, and
+// development. Use `createFeatureFlag` to create a boolean flag which will be
+// `true` by default in development and staging, and `false` in production.
+/** @internal */
+export const featureFlags = {
+	// todo: remove this. it's not used, but we only have one feature flag and i
+	// wanted an example :(
+	peopleMenu: createFeatureFlag('peopleMenu'),
+} satisfies Record<string, DebugFlag<boolean>>
 
 /** @internal */
 export const debugFlags = {
-	preventDefaultLogging: createDebugValue('tldrawPreventDefaultLogging', false),
-	pointerCaptureLogging: createDebugValue('tldrawPointerCaptureLogging', false),
-	pointerCaptureTracking: createDebugValue('tldrawPointerCaptureTracking', false),
+	// --- DEBUG VALUES ---
+	preventDefaultLogging: createDebugValue('preventDefaultLogging', {
+		defaults: { all: false },
+	}),
+	pointerCaptureLogging: createDebugValue('pointerCaptureLogging', {
+		defaults: { all: false },
+	}),
+	pointerCaptureTracking: createDebugValue('pointerCaptureTracking', {
+		defaults: { all: false },
+	}),
 	pointerCaptureTrackingObject: createDebugValue(
-		'tldrawPointerCaptureTrackingObject',
+		'pointerCaptureTrackingObject',
 		// ideally we wouldn't store this mutable value in an atom but it's not
 		// a big deal for debug values
-		new Map<Element, number>(),
-		false
+		{
+			defaults: { all: new Map<Element, number>() },
+			shouldStoreForSession: false,
+		}
 	),
-	elementRemovalLogging: createDebugValue('tldrawElementRemovalLogging', false),
-	debugSvg: createDebugValue('tldrawDebugSvg', false),
-	throwToBlob: createDebugValue('tldrawThrowToBlob', false),
-	peopleMenu: createDebugValue('tldrawPeopleMenu', false),
-	logMessages: createDebugValue('tldrawUiLog', []),
-	resetConnectionEveryPing: createDebugValue('tldrawResetConnectionEveryPing', false),
-	debugCursors: createDebugValue('tldrawDebugCursors', false),
+	elementRemovalLogging: createDebugValue('elementRemovalLogging', {
+		defaults: { all: false },
+	}),
+	debugSvg: createDebugValue('debugSvg', {
+		defaults: { all: false },
+	}),
+	throwToBlob: createDebugValue('throwToBlob', {
+		defaults: { all: false },
+	}),
+	logMessages: createDebugValue('uiLog', { defaults: { all: [] } }),
+	resetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {
+		defaults: { all: false },
+	}),
+	debugCursors: createDebugValue('debugCursors', {
+		defaults: { all: false },
+	}),
 }
 
 declare global {
@@ -31,7 +57,6 @@ declare global {
 		tldrawLog: (message: any) => void
 	}
 }
-debugFlags.logMessages.set([])
 
 if (typeof window !== 'undefined') {
 	window.tldrawLog = (message: any) => {
@@ -40,11 +65,12 @@ if (typeof window !== 'undefined') {
 }
 
 // --- 2. USE ---
-// In normal code, read from debug flags directly by calling .get() on them:
-//    if (debugFlags.preventDefaultLogging.get()) { ... }
+// In normal code, read from debug flags directly by calling .value on them:
+//    if (debugFlags.preventDefaultLogging.value) { ... }
 //
-// In react, wrap your reads in `useDerivedValue` so they react to changes:
-//    const shouldLog = useDerivedValue(() => debugFlags.preventDefaultLogging.get())
+// In react, wrap your reads in `useValue` (or your component in `track`)
+// so they react to changes:
+//    const shouldLog = useValue(debugFlags.preventDefaultLogging)
 
 // --- 3. GET FUNKY ---
 // If you need to do fun stuff like monkey-patching in response to flag changes,
@@ -67,46 +93,118 @@ if (typeof Element !== 'undefined') {
 
 // --- IMPLEMENTATION ---
 // you probably don't need to read this if you're just using the debug values system
-function createDebugValue<T>(name: string, initialValue: T, shouldStore = true): Atom<T> {
-	if (typeof window === 'undefined') {
-		return atom(`debug:${name}`, initialValue)
-	}
+function createDebugValue<T>(
+	name: string,
+	{
+		defaults,
+		shouldStoreForSession = true,
+	}: { defaults: Defaults<T>; shouldStoreForSession?: boolean }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession,
+	})
+}
+function createFeatureFlag(
+	name: string,
+	defaults: Defaults<boolean> = { all: true, production: false }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession: true,
+	})
+}
 
-	const storedValue = shouldStore ? (getStoredInitialValue(name) as T | null) : null
-	const value = atom(`debug:${name}`, storedValue ?? initialValue)
-
-	if (shouldStore) {
-		react(`debug:${name}`, () => {
-			const currentValue = value.value
-			try {
-				if (currentValue === initialValue) {
-					window.sessionStorage.removeItem(`debug:${name}`)
-				} else {
-					window.sessionStorage.setItem(`debug:${name}`, JSON.stringify(currentValue))
+function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
+	const defaultValue = getDefaultValue(def)
+	const storedValue = def.shouldStoreForSession
+		? (getStoredInitialValue(def.name) as T | null)
+		: null
+	const valueAtom = atom(`debug:${def.name}`, storedValue ?? defaultValue)
+
+	if (typeof window !== 'undefined') {
+		if (def.shouldStoreForSession) {
+			react(`debug:${def.name}`, () => {
+				const currentValue = valueAtom.value
+				try {
+					if (currentValue === defaultValue) {
+						window.sessionStorage.removeItem(`tldraw_debug:${def.name}`)
+					} else {
+						window.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
+					}
+				} catch {
+					// not a big deal
 				}
-			} catch {
-				// not a big deal
-			}
+			})
+		}
+
+		Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
+			get() {
+				return valueAtom.value
+			},
+			set(newValue) {
+				valueAtom.set(newValue)
+			},
+			configurable: true,
 		})
 	}
 
-	Object.defineProperty(window, name, {
-		get() {
-			return value.value
-		},
-		set(newValue) {
-			value.set(newValue)
-		},
-		configurable: true,
-	})
-
-	return value
+	return Object.assign(valueAtom, def)
 }
 
 function getStoredInitialValue(name: string) {
 	try {
-		return JSON.parse(window.sessionStorage.getItem(`debug:${name}`) ?? 'null')
+		return JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? 'null')
 	} catch (err) {
 		return null
 	}
 }
+
+// process.env might not be defined, but we can't access it using optional
+// chaining because some bundlers search for `process.env.SOMETHING` as a string
+// and replace it with its value.
+function readEnv(fn: () => string | undefined) {
+	try {
+		return fn()
+	} catch {
+		return null
+	}
+}
+
+function getDefaultValue<T>(def: DebugFlagDef<T>): T {
+	const env =
+		readEnv(() => process.env.TLDRAW_ENV) ??
+		readEnv(() => process.env.VERCEL_PUBLIC_TLDRAW_ENV) ??
+		readEnv(() => process.env.NEXT_PUBLIC_TLDRAW_ENV) ??
+		// default to production because if we don't have one of these, this is probably a library use
+		'production'
+
+	switch (env) {
+		case 'production':
+			return def.defaults.production ?? def.defaults.all
+		case 'preview':
+		case 'staging':
+			return def.defaults.staging ?? def.defaults.all
+		default:
+			return def.defaults.development ?? def.defaults.all
+	}
+}
+
+interface Defaults<T> {
+	development?: T
+	staging?: T
+	production?: T
+	all: T
+}
+
+/** @internal */
+export interface DebugFlagDef<T> {
+	name: string
+	defaults: Defaults<T>
+	shouldStoreForSession: boolean
+}
+
+/** @internal */
+export type DebugFlag<T> = DebugFlagDef<T> & Atom<T>

commit 674a829d1f5d57aa61135fa47bc41f5fe3f6025e
Author: alex <alex@dytry.ch>
Date:   Thu Jun 1 13:46:13 2023 +0100

    [1/3] initial highlighter shape/tool (#1401)
    
    This diff adds an initial version of the highlighter shape. At this
    stage, it's a complete copy of the draw tool minus the following
    features:
    * Fills
    * Stroke types
    * Closed shapes
    
    I've created a new shape util (a copy-paste of the draw one with stuff
    renamed/deleted) but reused the state chart nodes for the draw shape.
    Currently this new tool looks exactly like the draw tool, but that'll be
    changing soon!
    
    ![Kapture 2023-05-17 at 15 37
    33](https://github.com/tldraw/tldraw/assets/1489520/982e78f4-6495-4a68-aa51-c8f7b5bcdd01)
    
    The UI here is extremely WIP. The highlighter tool is behind a feature
    flag, but once enabled is accessible through the tool bar. There's a
    first-draft highlighter icon (i didn't spend much time on this, it's not
    super legible on non-retina displays yet imo), and the tool is bound to
    the `i` key (any better suggestions? `h` is taken by the hand tool)
    
    ### The plan
    1. initial highlighter shape/tool #1401 **>you are here<**
    2. sandwich rendering for highlighter shapes #1418
    3. shape styling - new colours and sizes, lightweight perfect freehand
    changes
    
    ### Change Type
    - [x] `minor` — New Feature
    
    ### Test Plan
    (not yet)
    
    ### Release Notes
    
    [internal only change layout ground work for highlighter]

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 20fb9c0d5..bf22bd424 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -11,6 +11,7 @@ export const featureFlags = {
 	// todo: remove this. it's not used, but we only have one feature flag and i
 	// wanted an example :(
 	peopleMenu: createFeatureFlag('peopleMenu'),
+	highlighterTool: createFeatureFlag('highlighterTool'),
 } satisfies Record<string, DebugFlag<boolean>>
 
 /** @internal */

commit d6085e4ea6e62f1816c7188537f2b6b27dd8317c
Author: alex <alex@dytry.ch>
Date:   Thu Jun 1 16:34:59 2023 +0100

    [3/3] Highlighter styling (#1490)
    
    This PR finalises the highlighter shape with new colors, sizing, and
    perfect freehand options.
    
    The colors are based on our existing colour palette, but take advantage
    of wide-gamut displays to make the highlighter highlightier. I used my
    [oklch color palette tool to pick the
    palette](https://alex.dytry.ch/toys/palette/?palette=%7B%22families%22:%5B%22black%22,%22grey%22,%22white%22,%22green%22,%22light-green%22,%22blue%22,%22light-blue%22,%22violet%22,%22light-violet%22,%22red%22,%22light-red%22,%22orange%22,%22yellow%22%5D,%22shades%22:%5B%22light-mode%22,%22dark-mode%22,%22hl-light%22,%22hl-dark%22%5D,%22colors%22:%5B%5B%5B0.2308,0,null%5D,%5B0.9097,0,null%5D,%5B0.2308,0,null%5D,%5B0.2308,0,null%5D%5D,%5B%5B0.7692,0.0145,248.02%5D,%5B0.6778,0.0118,256.72%5D,%5B0.7692,0.0145,248.02%5D,%5B0.7692,0.0145,248.02%5D%5D,%5B%5B1,0,null%5D,%5B0.2308,0,null%5D,%5B1,0,null%5D,%5B1,0,null%5D%5D,%5B%5B0.5851,0.1227,164.1%5D,%5B0.5319,0.0811,162.23%5D,%5B0.8729,0.2083,173.3%5D,%5B0.5851,0.152,173.3%5D%5D,%5B%5B0.7146,0.1835,146.44%5D,%5B0.6384,0.1262,143.36%5D,%5B0.8603,0.2438,140.11%5D,%5B0.6082,0.2286,140.11%5D%5D,%5B%5B0.5566,0.2082,268.35%5D,%5B0.4961,0.1644,270.65%5D,%5B0.7158,0.173,243.85%5D,%5B0.5573,0.178,243.85%5D%5D,%5B%5B0.718,0.1422,246.06%5D,%5B0.6366,0.1055,250.98%5D,%5B0.8615,0.1896,200.03%5D,%5B0.707,0.161,200.03%5D%5D,%5B%5B0.5783,0.2186,319.15%5D,%5B0.5043,0.1647,315.37%5D,%5B0.728,0.2001,307.45%5D,%5B0.5433,0.2927,307.45%5D%5D,%5B%5B0.7904,0.1516,319.77%5D,%5B0.6841,0.1139,315.99%5D,%5B0.812,0.21,327.8%5D,%5B0.5668,0.281,327.8%5D%5D,%5B%5B0.5928,0.2106,26.53%5D,%5B0.5112,0.1455,26.18%5D,%5B0.7326,0.21,20.59%5D,%5B0.554,0.2461,20.59%5D%5D,%5B%5B0.7563,0.146,21.1%5D,%5B0.6561,0.0982,20.86%5D,%5B0.7749,0.178,6.8%5D,%5B0.5565,0.2454,6.8%5D%5D,%5B%5B0.6851,0.1954,44.57%5D,%5B0.5958,0.1366,46.6%5D,%5B0.8207,0.175,68.62%5D,%5B0.6567,0.164,68.61%5D%5D,%5B%5B0.8503,0.1149,68.95%5D,%5B0.7404,0.0813,72.25%5D,%5B0.8939,0.2137,100.36%5D,%5B0.7776,0.186,100.36%5D%5D%5D%7D&selected=3).
    I'm not sure happy about these colors as they are right now - in
    particular, i think dark mode looks a bit rubbish and there are a few
    colors where the highlight and original version are much too similar
    (light-violet & light-red). Black uses yellow (like note shape) and grey
    uses light-blue. Exports are forced into srgb color space rather than P3
    for maximum compatibility.
    
    
    ![image](https://github.com/tldraw/tldraw/assets/1489520/e3de762b-6ef7-4d17-87db-3e2b71dd8de1)
    
    
    ![image](https://github.com/tldraw/tldraw/assets/1489520/3bd90aa9-bdbc-4a2b-9e56-e3a83a2a877b)
    
    
    
    The size of a highlighter stroke is now based on the text size which
    works nicely for making the highlighter play well with text:
    
    
    ![image](https://github.com/tldraw/tldraw/assets/1489520/dd3184fc-decd-4db5-90ce-e9cc75edd3d6)
    
    
    Perfect freehands settings are very similar to the draw tool, but with
    the thinning turned way down. There is still some, but it's pretty
    minimal.
    
    ### The plan
    1. initial highlighter shape/tool #1401
    2. sandwich rendering for highlighter shapes #1418
    3. shape styling - new colours and sizes, lightweight perfect freehand
    changes #1490 **>you are here<**
    
    ### Change Type
    - [x] `minor` — New Feature
    
    ### Test Plan
    
    1. You can find the highlighter tool in the extended toolbar
    2. You can activate the highlighter tool by pressing shift-D
    3. Highlighter draws nice and vibrantly when over the page background or
    frame background
    4. Highlighter is less vibrant but still visible when drawn over images
    / other fills
    5. Highlighter size should nicely match the corresponding unscaled text
    size
    6. Exports with highlighter look as expected
    
    ### Release Notes
    
    Highlighter pen is here! 🎉🎉🎉
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index bf22bd424..02012654c 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -11,7 +11,7 @@ export const featureFlags = {
 	// todo: remove this. it's not used, but we only have one feature flag and i
 	// wanted an example :(
 	peopleMenu: createFeatureFlag('peopleMenu'),
-	highlighterTool: createFeatureFlag('highlighterTool'),
+	highlighterTool: createFeatureFlag('highlighterTool', { all: true }),
 } satisfies Record<string, DebugFlag<boolean>>
 
 /** @internal */
@@ -51,6 +51,7 @@ export const debugFlags = {
 	debugCursors: createDebugValue('debugCursors', {
 		defaults: { all: false },
 	}),
+	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
 }
 
 declare global {

commit 5cb08711c19c086a013b3a52b06b7cdcfd443fe5
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Tue Jun 20 14:31:26 2023 +0100

    Incorporate signia as @tldraw/state (#1620)
    
    It tried to get out but we're dragging it back in.
    
    This PR brings [signia](https://github.com/tldraw/signia) back into
    tldraw as @tldraw/state.
    
    ### Change Type
    
    - [x] major
    
    ---------
    
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 02012654c..2215a013d 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -1,4 +1,4 @@
-import { Atom, atom, react } from 'signia'
+import { Atom, atom, react } from '@tldraw/state'
 
 // --- 1. DEFINE ---
 //

commit 79f46da199d1c6521cbe6abc4c03985016f88b41
Author: alex <alex@dytry.ch>
Date:   Tue Sep 26 12:21:37 2023 +0100

    expanded highlighter geometry (#1929)
    
    Currently, the highlighter shape uses a single 0-width line for its
    geometry, same as the draw tool. For the draw tool this works ok - the
    visual line is thin enough that unless you zoom right in, it's hard to
    find areas where the hover should trigger but isn't. As the highlighter
    tool is much thicker though, it's relatively easy to find those areas.
    
    The fix is for the geometry to represent the line including its thick
    stroke, instead of at 0-width. There are two possible approaches here:
    1. Update the polyline geometry to allow passing a stroke width.
    2. Instead of a polyline, make the highlighter shape be a polygon that
    traces _around_ the stroke
    
    1 is the more accurate approach, but is hard to fit into our geometry
    system. Our geometry is based around two primitives: `getVertices` which
    returns an array of points around the shape, and `nearestPoint` which
    returns the nearest point on the geometry to a vector we pass in. We can
    account for a stroke in `nearestPoint` pretty easily, including it in
    `getVertices` is hard - we'd have to expand the vertices and handle line
    join/caps etc. Just making the change in `nearestPoint` does fix the
    issue here, but i'm not sure about the knock-on effect elsewhere and
    don't really want to introduce 1-off hacks into the core geometry
    system.
    
    2 actually means addressing the same hard problem around outlining
    strokes as 1, but it lets us do it in a more tightly-scoped one-off
    change just to the highlighter shape, instead of trying to come up with
    a generic solution for the whole geometry system. This is the approach
    I've taken in this diff. We outline the stroke using perfect-freehand,
    which works pretty well but produces inaccurate results at edge-cases,
    particularly when a line rapidly changes direction:
    
    ![Kapture 2023-09-19 at 13 45
    01](https://github.com/tldraw/tldraw/assets/1489520/1593ac5c-e7db-4360-b97d-ba66cdfb5498)
    
    I think that given this is scoped to just the highlighter shape and is
    imo an improvement over the stroke issue from before, it's a reasonable
    solution for now. If we want to in the future we could implement real
    non-freehand-based outlining.
    
    ### Change Type
    
    - [x] `patch` — Bug fix
    
    ### Test Plan
    
    1. Create a highlight shape
    2. Zoom in
    3. Make sure you can interact with the shape at its edges instead of
    right in the center

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 2215a013d..8aa83eb85 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -52,6 +52,7 @@ export const debugFlags = {
 		defaults: { all: false },
 	}),
 	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
+	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
 }
 
 declare global {

commit 9c1dc007406a662a0eb76738bca2f5e9e7139d58
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Fri Oct 6 09:57:46 2023 +0100

    Debugging cleanup / misc cleanup (#2025)
    
    This PR:
    - removes feature flags for people menu, highlighter shape
    - removes debugging for cursors
    - adds a debug flag for hiding shapes
    - changes Canvas to use `useValue` rather than `track`
    - removes the default background color on `tl-background`
    - in the editor components, makes `Background` null by default
    
    ### Change Type
    
    - [x] `minor` — New feature

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 8aa83eb85..b63398d0a 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -7,12 +7,10 @@ import { Atom, atom, react } from '@tldraw/state'
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
-export const featureFlags = {
+export const featureFlags: Record<string, DebugFlag<boolean>> = {
 	// todo: remove this. it's not used, but we only have one feature flag and i
 	// wanted an example :(
-	peopleMenu: createFeatureFlag('peopleMenu'),
-	highlighterTool: createFeatureFlag('highlighterTool', { all: true }),
-} satisfies Record<string, DebugFlag<boolean>>
+}
 
 /** @internal */
 export const debugFlags = {
@@ -44,7 +42,7 @@ export const debugFlags = {
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
-	logMessages: createDebugValue('uiLog', { defaults: { all: [] } }),
+	logMessages: createDebugValue('uiLog', { defaults: { all: [] as any[] } }),
 	resetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {
 		defaults: { all: false },
 	}),
@@ -53,6 +51,7 @@ export const debugFlags = {
 	}),
 	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
 	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
+	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
 }
 
 declare global {
@@ -109,16 +108,17 @@ function createDebugValue<T>(
 		shouldStoreForSession,
 	})
 }
-function createFeatureFlag(
-	name: string,
-	defaults: Defaults<boolean> = { all: true, production: false }
-) {
-	return createDebugValueBase({
-		name,
-		defaults,
-		shouldStoreForSession: true,
-	})
-}
+
+// function createFeatureFlag(
+// 	name: string,
+// 	defaults: Defaults<boolean> = { all: true, production: false }
+// ) {
+// 	return createDebugValueBase({
+// 		name,
+// 		defaults,
+// 		shouldStoreForSession: true,
+// 	})
+// }
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit 5db3c1553e14edd14aa5f7c0fc85fc5efc352335
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Mon Nov 13 11:51:22 2023 +0000

    Replace Atom.value with Atom.get() (#2189)
    
    This PR replaces the `.value` getter for the atom with `.get()`
    
    ### Change Type
    
    - [x] `major` — Breaking change
    
    ---------
    
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index b63398d0a..4fda95aff 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -62,7 +62,7 @@ declare global {
 
 if (typeof window !== 'undefined') {
 	window.tldrawLog = (message: any) => {
-		debugFlags.logMessages.set(debugFlags.logMessages.value.concat(message))
+		debugFlags.logMessages.set(debugFlags.logMessages.get().concat(message))
 	}
 }
 
@@ -82,7 +82,7 @@ if (typeof window !== 'undefined') {
 if (typeof Element !== 'undefined') {
 	const nativeElementRemoveChild = Element.prototype.removeChild
 	react('element removal logging', () => {
-		if (debugFlags.elementRemovalLogging.value) {
+		if (debugFlags.elementRemovalLogging.get()) {
 			Element.prototype.removeChild = function <T extends Node>(this: any, child: Node): T {
 				console.warn('[tldraw] removing child:', child)
 				return nativeElementRemoveChild.call(this, child) as T
@@ -130,7 +130,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	if (typeof window !== 'undefined') {
 		if (def.shouldStoreForSession) {
 			react(`debug:${def.name}`, () => {
-				const currentValue = valueAtom.value
+				const currentValue = valueAtom.get()
 				try {
 					if (currentValue === defaultValue) {
 						window.sessionStorage.removeItem(`tldraw_debug:${def.name}`)
@@ -145,7 +145,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 
 		Object.defineProperty(window, `tldraw${def.name.replace(/^[a-z]/, (l) => l.toUpperCase())}`, {
 			get() {
-				return valueAtom.value
+				return valueAtom.get()
 			},
 			set(newValue) {
 				valueAtom.set(newValue)

commit 6b1005ef71a63613a09606310f666487547d5f23
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Wed Jan 3 12:13:15 2024 +0000

    [tech debt] Primitives renaming party / cleanup (#2396)
    
    This PR:
    - renames Vec2d to Vec
    - renames Vec2dModel to VecModel
    - renames Box2d to Box
    - renames Box2dModel to BoxModel
    - renames Matrix2d to Mat
    - renames Matrix2dModel to MatModel
    - removes unused primitive helpers
    - removes unused exports
    - removes a few redundant tests in dgreensp
    
    ### Change Type
    
    - [x] `major` — Breaking change
    
    ### Release Notes
    
    - renames Vec2d to Vec
    - renames Vec2dModel to VecModel
    - renames Box2d to Box
    - renames Box2dModel to BoxModel
    - renames Matrix2d to Mat
    - renames Matrix2dModel to MatModel
    - removes unused primitive helpers

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 4fda95aff..7fb004c31 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -202,8 +202,7 @@ interface Defaults<T> {
 	all: T
 }
 
-/** @internal */
-export interface DebugFlagDef<T> {
+interface DebugFlagDef<T> {
 	name: string
 	defaults: Defaults<T>
 	shouldStoreForSession: boolean

commit 07cda7ef9fd9008c2feebce20659e2d087ddbdd3
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Wed Jan 24 10:19:20 2024 +0000

    arrows: add ability to change label placement (#2557)
    
    This adds the ability to drag the label on an arrow to a different
    location within the line segment/arc.
    
    
    https://github.com/tldraw/tldraw/assets/469604/dbd2ee35-bebc-48d6-b8ee-fcf12ce91fa5
    
    - A lot of the complexity lay in ensuring a fixed distance from the ends
    of the arrowheads.
    - I added a new type of handle `text-adjust` that makes the text box the
    very handle itself.
    - I added a `ARROW_HANDLES` enum - we should use more enums!
    - The bulk of the changes are in ArrowShapeUtil — check that out in
    particular obviously :)
    
    Along the way, I tried to improve a couple spots as I touched them:
    - added some more documentation to Vec.ts because some of the functions
    in there were obscure/new to me. (at least the naming, hah)
    - added `getPointOnCircle` which was being done in a couple places
    independently and refactored those places.
    
    ### Questions
    - the `getPointOnCircle` API changed. Is this considered breaking and/or
    should I leave the signature the same? Wasn't sure if it was a big deal
    or not.
    - I made `labelPosition` in the schema always but I guess it could have
    been optional? Lemme know if there's a preference.
    - Any feedback on tests? Happy to expand those if necessary.
    
    ### Change Type
    
    - [ ] `patch` — Bug fix
    - [x] `minor` — New feature
    - [ ] `major` — Breaking change
    - [ ] `dependencies` — Changes to package dependencies[^1]
    - [ ] `documentation` — Changes to the documentation only[^2]
    - [ ] `tests` — Changes to any test code only[^2]
    - [ ] `internal` — Any other changes that don't affect the published
    package[^2]
    - [ ] I don't know
    
    [^1]: publishes a `patch` release, for devDependencies use `internal`
    [^2]: will not publish a new version
    
    ### Test Plan
    
    1. For arrow in [straightArrow, curvedArrow] test the following:
       a. Label in the middle
       b. Label at both ends of the arrow
       c. Test arrows in different directions
    d. Rotating the endpoints and seeing that the label stays at the end of
    the arrow at a fixed width.
       e. Test different stroke widths.
       f. Test with different arrowheads.
    2. Also, test arcs that are more circle like than arc-like.
    
    - [x] Unit Tests
    - [ ] End to end tests
    
    ### Release Notes
    
    - Adds ability to change label position on arrows.
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>
    Co-authored-by: alex <alex@dytry.ch>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 7fb004c31..d4132a4b6 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -7,10 +7,9 @@ import { Atom, atom, react } from '@tldraw/state'
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
-export const featureFlags: Record<string, DebugFlag<boolean>> = {
-	// todo: remove this. it's not used, but we only have one feature flag and i
-	// wanted an example :(
-}
+export const featureFlags = {
+	canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
+} satisfies Record<string, DebugFlag<boolean>>
 
 /** @internal */
 export const debugFlags = {
@@ -109,16 +108,16 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag(
-// 	name: string,
-// 	defaults: Defaults<boolean> = { all: true, production: false }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession: true,
-// 	})
-// }
+function createFeatureFlag(
+	name: string,
+	defaults: Defaults<boolean> = { all: true, production: false }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession: true,
+	})
+}
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit 014a95cf51711c7c3f39ca40442499baa80608a9
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Wed Jan 24 12:23:26 2024 +0000

    debug: add FPS counter (#2558)
    
    Adds an FPS counter to detect when there's a UI slowdown.
    (btw, drive-by typo fix for a file)
    
    
    https://github.com/tldraw/tldraw/assets/469604/b83d4b10-35d9-4584-af46-c63b5cc107ac
    
    ### Change Type
    
    - [ ] `patch` — Bug fix
    - [x] `minor` — New feature
    - [ ] `major` — Breaking change
    - [ ] `dependencies` — Changes to package dependencies[^1]
    - [ ] `documentation` — Changes to the documentation only[^2]
    - [ ] `tests` — Changes to any test code only[^2]
    - [ ] `internal` — Any other changes that don't affect the published
    package[^2]
    - [ ] I don't know
    
    [^1]: publishes a `patch` release, for devDependencies use `internal`
    [^2]: will not publish a new version
    
    ### Test Plan
    
    1.
    
    - [ ] Unit Tests
    - [ ] End to end tests
    
    ### Release Notes
    
    - Adds FPS counter to debug panel.
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index d4132a4b6..7a1e55f1f 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -38,6 +38,9 @@ export const debugFlags = {
 	debugSvg: createDebugValue('debugSvg', {
 		defaults: { all: false },
 	}),
+	showFps: createDebugValue('showFps', {
+		defaults: { all: false },
+	}),
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),

commit 34a95b2ec8811fc50eaf74a9a4139909e9b834b7
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Wed Jan 31 11:17:03 2024 +0000

    arrows: separate out handle behavior from labels (#2621)
    
    This is a followup on the arrows work.
    - allow labels to go to the ends if no arrowhead is present
    - avoid using / overloading TLHandle and use a new PointingLabel state
    to specifically address label movement
    - removes the feature flag to launch this feature!
    
    ### Change Type
    
    - [x] `patch` — Bug fix
    
    ### Release Notes
    
    - Arrow labels: provide more polish on label placement
    
    ---------
    
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 7a1e55f1f..589f5ee23 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -7,9 +7,9 @@ import { Atom, atom, react } from '@tldraw/state'
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
-export const featureFlags = {
-	canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
-} satisfies Record<string, DebugFlag<boolean>>
+export const featureFlags: Record<string, DebugFlag<boolean>> = {
+	// canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
+}
 
 /** @internal */
 export const debugFlags = {
@@ -111,16 +111,16 @@ function createDebugValue<T>(
 	})
 }
 
-function createFeatureFlag(
-	name: string,
-	defaults: Defaults<boolean> = { all: true, production: false }
-) {
-	return createDebugValueBase({
-		name,
-		defaults,
-		shouldStoreForSession: true,
-	})
-}
+// function createFeatureFlag(
+// 	name: string,
+// 	defaults: Defaults<boolean> = { all: true, production: false }
+// ) {
+// 	return createDebugValueBase({
+// 		name,
+// 		defaults,
+// 		shouldStoreForSession: true,
+// 	})
+// }
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit 32f641c1d7d147b39afdd1935723a23cefe03422
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Tue Feb 13 14:46:55 2024 +0000

    emojis! 🧑‍🎨 🎨 ✏️ (#2814)
    
    everyone ❤️'s emojis:
    https://dropbox.tech/application/dropbox-paper-emojis-and-exformation
    
    
    https://github.com/tldraw/tldraw/assets/469604/8f99f485-de98-44d1-93cb-6eb9c2d87d99
    
    
    
    
    ### Change Type
    
    - [x] `minor` — New feature
    
    ### Test Plan
    
    1. Test adding lots of emojis!
    
    ### Release Notes
    
    - Adds emoji picker to text fields.

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 589f5ee23..5a8873fe0 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -8,7 +8,7 @@ import { Atom, atom, react } from '@tldraw/state'
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {
-	// canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
+	emojiMenu: createFeatureFlag('emojiMenu'),
 }
 
 /** @internal */
@@ -111,16 +111,16 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag(
-// 	name: string,
-// 	defaults: Defaults<boolean> = { all: true, production: false }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession: true,
-// 	})
-// }
+function createFeatureFlag(
+	name: string,
+	defaults: Defaults<boolean> = { all: true, production: false }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession: true,
+	})
+}
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit 5cf2fe9583ea90de4894c02cd9c6e31c169bb2f0
Author: Dan Groshev <git@dgroshev.com>
Date:   Tue Feb 13 14:59:59 2024 +0000

    Revert "emojis! 🧑‍🎨 🎨 ✏️ (#2814)" (#2822)
    
    Reverting accidental merge of #2814
    
    ### Change Type
    - [x] `internal` — Any other changes that don't affect the published
    package

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 5a8873fe0..589f5ee23 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -8,7 +8,7 @@ import { Atom, atom, react } from '@tldraw/state'
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {
-	emojiMenu: createFeatureFlag('emojiMenu'),
+	// canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
 }
 
 /** @internal */
@@ -111,16 +111,16 @@ function createDebugValue<T>(
 	})
 }
 
-function createFeatureFlag(
-	name: string,
-	defaults: Defaults<boolean> = { all: true, production: false }
-) {
-	return createDebugValueBase({
-		name,
-		defaults,
-		shouldStoreForSession: true,
-	})
-}
+// function createFeatureFlag(
+// 	name: string,
+// 	defaults: Defaults<boolean> = { all: true, production: false }
+// ) {
+// 	return createDebugValueBase({
+// 		name,
+// 		defaults,
+// 		shouldStoreForSession: true,
+// 	})
+// }
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit ac0259a6af0ede496f26041d552119a6e7dce41c
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Thu Feb 15 12:10:09 2024 +0000

    Composable custom UI  (#2796)
    
    This PR refactors our menu systems and provides an interface to hide or
    replace individual user interface elements.
    
    # Background
    
    Previously, we've had two types of overrides:
    - "schema" overrides that would allow insertion or replacement of items
    in the different menus
    - "component" overrides that would replace components in the editor's
    user interface
    
    This PR is an attempt to unify the two and to provide for additional
    cases where the "schema-based" user interface had begun to break down.
    
    # Approach
    
    This PR makes no attempt to change the `actions` or `tools`
    overrides—the current system seems to be correct for those because they
    are not reactive. The challenge with the other ui schemas is that they
    _are_ reactive, and thus the overrides both need to a) be fed in from
    outside of the editor as props, and b) react to changes from the editor,
    which is an impossible situation.
    
    The new approach is to use React to declare menu items. (Surprise!)
    
    ```tsx
    function CustomHelpMenuContent() {
            return (
                    <>
                            <DefaultHelpMenuContent />
                            <TldrawUiMenuGroup id="custom stuff">
                                    <TldrawUiMenuItem
                                            id="about"
                                            label="Like my posts"
                                            icon="external-link"
                                            readonlyOk
                                            onSelect={() => {
                                                    window.open('https://x.com/tldraw', '_blank')
                                            }}
                                    />
                            </TldrawUiMenuGroup>
                    </>
            )
    }
    
    const components: TLComponents = {
            HelpMenuContent: CustomHelpMenuContent,
    }
    
    export default function CustomHelpMenuContentExample() {
            return (
                    <div className="tldraw__editor">
                            <Tldraw components={components} />
                    </div>
            )
    }
    ```
    
    We use a `components` prop with the combined editor and ui components.
    
    - [ ] Create a "layout" component?
    - [ ] Make UI components more isolated? If possible, they shouldn't
    depend on styles outside of themselves, so that they can be used in
    other layouts. Maybe we wait on this because I'm feeling a slippery
    slope toward presumptions about configurability.
    - [ ] OTOH maybe we go hard and consider these things as separate
    components, even packages, with their own interfaces for customizability
    / configurability, just go all the way with it, and see what that looks
    like.
    
    # Pros
    
    Top line: you can customize tldraw's user interface in a MUCH more
    granular / powerful way than before.
    
    It solves a case where menu items could not be made stateful from
    outside of the editor context, and provides the option to do things in
    the menus that we couldn't allow previously with the "schema-based"
    approach.
    
    It also may (who knows) be more performant because we can locate the
    state inside of the components for individual buttons and groups,
    instead of all at the top level above the "schema". Because items /
    groups decide their own state, we don't have to have big checks on how
    many items are selected, or whether we have a flippable state. Items and
    groups themselves are allowed to re-build as part of the regular React
    lifecycle. Menus aren't constantly being rebuilt, if that were ever an
    issue.
    
    Menu items can be shared between different menu types. We'll are
    sometimes able to re-use items between, for example, the menu and the
    context menu and the actions menu.
    
    Our overrides no longer mutate anything, so there's less weird searching
    and finding.
    
    # Cons
    
    This approach can make customization menu contents significantly more
    complex, as an end user would need to re-declare most of a menu in order
    to make any change to it. Luckily a user can add things to the top or
    bottom of the context menu fairly easily. (And who knows, folks may
    actually want to do deep customization, and this allows for it.)
    
    It's more code. We are shipping more react components, basically one for
    each menu item / group.
    
    Currently this PR does not export the subcomponents, i.e. menu items. If
    we do want to export these, then heaven help us, it's going to be a
    _lot_ of exports.
    
    # Progress
    
    - [x] Context menu
    - [x] Main menu
    - [x] Zoom menu
    - [x] Help menu
    - [x] Actions menu
    - [x] Keyboard shortcuts menu
    - [x] Quick actions in main menu? (new)
    - [x] Helper buttons? (new)
    - [x] Debug Menu
    
    And potentially
    - [x] Toolbar
    - [x] Style menu
    - [ ] Share zone
    - [x] Navigation zone
    - [ ] Other zones
    
    ### Change Type
    
    - [x] `major` — Breaking change
    
    ### Test Plan
    
    1. use the context menu
    2. use the custom context menu example
    3. use cursor chat in the context menu
    
    - [x] Unit Tests
    - [ ] End to end tests
    
    ### Release Notes
    
    - Add a brief release note for your PR here.

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 589f5ee23..ebd489a09 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -12,26 +12,25 @@ export const featureFlags: Record<string, DebugFlag<boolean>> = {
 }
 
 /** @internal */
-export const debugFlags = {
+export const pointerCaptureTrackingObject = createDebugValue(
+	'pointerCaptureTrackingObject',
+	// ideally we wouldn't store this mutable value in an atom but it's not
+	// a big deal for debug values
+	{
+		defaults: { all: new Map<Element, number>() },
+		shouldStoreForSession: false,
+	}
+)
+
+/** @internal */
+export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	// --- DEBUG VALUES ---
 	preventDefaultLogging: createDebugValue('preventDefaultLogging', {
 		defaults: { all: false },
 	}),
-	pointerCaptureLogging: createDebugValue('pointerCaptureLogging', {
-		defaults: { all: false },
-	}),
 	pointerCaptureTracking: createDebugValue('pointerCaptureTracking', {
 		defaults: { all: false },
 	}),
-	pointerCaptureTrackingObject: createDebugValue(
-		'pointerCaptureTrackingObject',
-		// ideally we wouldn't store this mutable value in an atom but it's not
-		// a big deal for debug values
-		{
-			defaults: { all: new Map<Element, number>() },
-			shouldStoreForSession: false,
-		}
-	),
 	elementRemovalLogging: createDebugValue('elementRemovalLogging', {
 		defaults: { all: false },
 	}),
@@ -44,7 +43,6 @@ export const debugFlags = {
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
-	logMessages: createDebugValue('uiLog', { defaults: { all: [] as any[] } }),
 	resetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {
 		defaults: { all: false },
 	}),
@@ -62,12 +60,6 @@ declare global {
 	}
 }
 
-if (typeof window !== 'undefined') {
-	window.tldrawLog = (message: any) => {
-		debugFlags.logMessages.set(debugFlags.logMessages.get().concat(message))
-	}
-}
-
 // --- 2. USE ---
 // In normal code, read from debug flags directly by calling .value on them:
 //    if (debugFlags.preventDefaultLogging.value) { ... }

commit b3d6af4454a95980a246abaa32d9e32fed39f040
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Mon Feb 19 13:30:26 2024 +0100

    Allow users to set document name and use it for exporting / saving (#2685)
    
    Adds the ability to change document names in the top center part of the
    UI. This mostly brings back the functionality we already had in the
    past.
    
    This is basically a port of what @SomeHats did a while back. I changed
    the dropdown options and removed some of the things (we are not dealing
    with network requests directly so some of that logic did not apply any
    longer). We did have autosave back then, not sure if we want to bring
    that back?
    
    Changes the `exportAs` api, thus braking.
    
    ### Change Type
    
    - [ ] `patch` — Bug fix
    - [ ] `minor` — New feature
    - [x] `major` — Breaking change
    - [ ] `dependencies` — Changes to package dependencies[^1]
    - [ ] `documentation` — Changes to the documentation only[^2]
    - [ ] `tests` — Changes to any test code only[^2]
    - [ ] `internal` — Any other changes that don't affect the published
    package[^2]
    - [ ] I don't know
    
    [^1]: publishes a `patch` release, for devDependencies use `internal`
    [^2]: will not publish a new version
    
    ### Test Plan
    
    1. Top center should now show a new UI element. It has a dropdown with a
    few actions.
    2. Double clicking the name should also start editing it.
    3. The name should also be respected when exporting things. Not if you
    select some shapes or a frame. In that case we still use the old names.
    But if you don't have anything selected and then export / save a project
    it should have the document name.
    
    - [ ] Unit Tests
    - [ ] End to end tests
    
    ### Release Notes
    
    - Allow users to name their documents.

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index ebd489a09..2e11d3143 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -52,6 +52,7 @@ export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
 	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
 	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
+	documentName: createDebugValue('documentName', { defaults: { all: false } }),
 }
 
 declare global {

commit 2f28d7c6f82dc8e84d1db1e7f6328ff12b210300
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Mon Mar 4 13:37:09 2024 +0000

    Protect local storage calls (#3043)
    
    This PR provides some safe wrappers for local storage calls. Local
    storage is not available in all environments (for example, a React
    Native web view). The PR also adds an eslint rule preventing direct
    calls to local / session storage.
    
    ### Change Type
    
    - [x] `patch` — Bug fix
    
    ### Release Notes
    
    - Fixes a bug that could cause crashes in React Native webviews.

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 2e11d3143..eb5e78b98 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -1,4 +1,5 @@
 import { Atom, atom, react } from '@tldraw/state'
+import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage } from '@tldraw/utils'
 
 // --- 1. DEFINE ---
 //
@@ -128,9 +129,9 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 				const currentValue = valueAtom.get()
 				try {
 					if (currentValue === defaultValue) {
-						window.sessionStorage.removeItem(`tldraw_debug:${def.name}`)
+						deleteFromSessionStorage(`tldraw_debug:${def.name}`)
 					} else {
-						window.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
+						setInSessionStorage(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
 					}
 				} catch {
 					// not a big deal
@@ -154,7 +155,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 
 function getStoredInitialValue(name: string) {
 	try {
-		return JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? 'null')
+		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
 	} catch (err) {
 		return null
 	}

commit 8adaaf8e22dac29003d9bf63527f35abcb67560e
Author: alex <alex@dytry.ch>
Date:   Mon Mar 4 15:48:31 2024 +0000

    Revert "Protect local storage calls (#3043)" (#3063)
    
    This reverts commit 2f28d7c6f82dc8e84d1db1e7f6328ff12b210300.
    
    ### Change Type
    
    - [x] `patch` — Bug fix

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index eb5e78b98..2e11d3143 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -1,5 +1,4 @@
 import { Atom, atom, react } from '@tldraw/state'
-import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage } from '@tldraw/utils'
 
 // --- 1. DEFINE ---
 //
@@ -129,9 +128,9 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 				const currentValue = valueAtom.get()
 				try {
 					if (currentValue === defaultValue) {
-						deleteFromSessionStorage(`tldraw_debug:${def.name}`)
+						window.sessionStorage.removeItem(`tldraw_debug:${def.name}`)
 					} else {
-						setInSessionStorage(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
+						window.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
 					}
 				} catch {
 					// not a big deal
@@ -155,7 +154,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 
 function getStoredInitialValue(name: string) {
 	try {
-		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
+		return JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? 'null')
 	} catch (err) {
 		return null
 	}

commit ce782dc70b47880b4174f40c9b0a072d858ce90f
Author: alex <alex@dytry.ch>
Date:   Mon Mar 4 16:15:20 2024 +0000

    Wrap local/session storage calls in try/catch (take 2) (#3066)
    
    Steve tried this in #3043, but we reverted it in #3063. Steve's version
    added `JSON.parse`/`JSON.stringify` to the helpers without checking for
    where we were already `JSON.parse`ing (or not). In some places we just
    store strings directly rather than wanting them jsonified, so in this
    version we leave the jsonification to the callers - the helpers just do
    the reading/writing and return the string values.
    
    ### Change Type
    
    - [x] `patch` — Bug fix

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 2e11d3143..51fbecb74 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -1,4 +1,5 @@
 import { Atom, atom, react } from '@tldraw/state'
+import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage } from '@tldraw/utils'
 
 // --- 1. DEFINE ---
 //
@@ -126,14 +127,10 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 		if (def.shouldStoreForSession) {
 			react(`debug:${def.name}`, () => {
 				const currentValue = valueAtom.get()
-				try {
-					if (currentValue === defaultValue) {
-						window.sessionStorage.removeItem(`tldraw_debug:${def.name}`)
-					} else {
-						window.sessionStorage.setItem(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
-					}
-				} catch {
-					// not a big deal
+				if (currentValue === defaultValue) {
+					deleteFromSessionStorage(`tldraw_debug:${def.name}`)
+				} else {
+					setInSessionStorage(`tldraw_debug:${def.name}`, JSON.stringify(currentValue))
 				}
 			})
 		}
@@ -154,7 +151,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 
 function getStoredInitialValue(name: string) {
 	try {
-		return JSON.parse(window?.sessionStorage.getItem(`tldraw_debug:${name}`) ?? 'null')
+		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
 	} catch (err) {
 		return null
 	}

commit 4d8dab843e783c56cd7b902067b1b894a8cb98e0
Author: David Sheldrick <d.j.sheldrick@gmail.com>
Date:   Thu Mar 14 10:39:33 2024 +0000

    Enable document name (#3150)
    
    Apparently we were supposed to do this for the previous release, and the
    release notes mentioned the document title, so I'm doing a quick hotfix
    for dotcom.
    
    ### Change Type
    
    <!-- ❗ Please select a 'Scope' label ❗️ -->
    
    - [x] `dotcom` — Changes the tldraw.com web app
    
    <!-- ❗ Please select a 'Type' label ❗️ -->
    
    - [x] `feature` — New feature

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 51fbecb74..93882cb90 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -53,7 +53,6 @@ export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
 	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
 	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
-	documentName: createDebugValue('documentName', { defaults: { all: false } }),
 }
 
 declare global {

commit 41601ac61ec7d4fad715bd67a9df077ee1576a7b
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sun Apr 14 19:40:02 2024 +0100

    Stickies: release candidate (#3249)
    
    This PR is the target for the stickies PRs that are moving forward. It
    should collect changes.
    
    - [x] New icon
    - [x] Improved shadows
    - [x] Shadow LOD
    - [x] New colors / theme options
    - [x] Shrink text size to avoid word breaks on the x axis
    - [x] Hide indicator whilst typing (reverted)
    - [x] Adjacent note positions
      - [x] buttons / clone handles
      - [x] position helpers for creating / translating (pits)
    - [x] keyboard shortcuts: (Tab, Shift+tab (RTL aware), Cmd-Enter,
    Shift+Cmd+enter)
      - [x] multiple shape translating
    - [x] Text editing
      - [x] Edit on type (feature flagged)
      - [x] click goes in correct place
    - [x] Notes as parents (reverted)
    - [x] Update colors
    - [x] Update SVG appearance
    
    ### Change Type
    
    - [x] `sdk` — Changes the tldraw SDK
    - [x] `feature` — New feature
    
    ### Test Plan
    
    Todo: fold in test plans for child PRs
    
    ### Unit tests:
    
    - [ ] Shrink text size to avoid word breaks on the x axis
    - [x] Adjacent notes
      - [x] buttons (clone handles)
      - [x] position helpers (pits)
    - [x] keyboard shortcuts: (Tab, Shift+tab (RTL aware), Cmd-Enter,
    Shift+Cmd+enter)
    - [ ] Text editing
      - [ ] Edit on type
      - [ ] click goes in correct place
    
    ### Release Notes
    
    - Improves sticky notes (see list)
    
    ---------
    
    Signed-off-by: dependabot[bot] <support@github.com>
    Co-authored-by: Mime Čuvalo <mimecuvalo@gmail.com>
    Co-authored-by: alex <alex@dytry.ch>
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>
    Co-authored-by: dependabot[bot] <49699333+dependabot[bot]@users.noreply.github.com>
    Co-authored-by: github-actions[bot] <github-actions[bot]@users.noreply.github.com>
    Co-authored-by: Lu[ke] Wilson <l2wilson94@gmail.com>
    Co-authored-by: huppy-bot[bot] <128400622+huppy-bot[bot]@users.noreply.github.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 93882cb90..19d801de7 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -24,15 +24,15 @@ export const pointerCaptureTrackingObject = createDebugValue(
 )
 
 /** @internal */
-export const debugFlags: Record<string, DebugFlag<boolean>> = {
+export const debugFlags = {
 	// --- DEBUG VALUES ---
-	preventDefaultLogging: createDebugValue('preventDefaultLogging', {
+	logPreventDefaults: createDebugValue('logPreventDefaults', {
 		defaults: { all: false },
 	}),
-	pointerCaptureTracking: createDebugValue('pointerCaptureTracking', {
+	logPointerCaptures: createDebugValue('logPointerCaptures', {
 		defaults: { all: false },
 	}),
-	elementRemovalLogging: createDebugValue('elementRemovalLogging', {
+	logElementRemoves: createDebugValue('logElementRemoves', {
 		defaults: { all: false },
 	}),
 	debugSvg: createDebugValue('debugSvg', {
@@ -44,7 +44,7 @@ export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),
-	resetConnectionEveryPing: createDebugValue('resetConnectionEveryPing', {
+	reconnectOnPing: createDebugValue('reconnectOnPing', {
 		defaults: { all: false },
 	}),
 	debugCursors: createDebugValue('debugCursors', {
@@ -53,7 +53,8 @@ export const debugFlags: Record<string, DebugFlag<boolean>> = {
 	forceSrgb: createDebugValue('forceSrgbColors', { defaults: { all: false } }),
 	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
 	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
-}
+	editOnType: createDebugValue('editOnType', { defaults: { all: false } }),
+} as const
 
 declare global {
 	interface Window {
@@ -77,7 +78,7 @@ declare global {
 if (typeof Element !== 'undefined') {
 	const nativeElementRemoveChild = Element.prototype.removeChild
 	react('element removal logging', () => {
-		if (debugFlags.elementRemovalLogging.get()) {
+		if (debugFlags.logElementRemoves.get()) {
 			Element.prototype.removeChild = function <T extends Node>(this: any, child: Node): T {
 				console.warn('[tldraw] removing child:', child)
 				return nativeElementRemoveChild.call(this, child) as T

commit 2dd71f8510b7c946665b2657b1fbca356fd9ab9e
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Wed May 8 12:06:05 2024 +0200

    Measure action durations and fps for our interactions (#3472)
    
    Adds a feature flag `Measure performance` that allows us to:
    - Measure the performance of all the actions (it wraps them into
    `measureCbDuration`).
    - Measure the frame rate of certain interactions like resizing,
    erasing,....
    
    Example of how it looks like:
    
    ![CleanShot 2024-04-17 at 18 04
    05](https://github.com/tldraw/tldraw/assets/2523721/0fb69745-f7b2-4b55-ac01-27ea26963d9a)
    
    
    ### Change Type
    
    <!-- ❗ Please select a 'Scope' label ❗️ -->
    
    - [ ] `sdk` — Changes the tldraw SDK
    - [ ] `dotcom` — Changes the tldraw.com web app
    - [ ] `docs` — Changes to the documentation, examples, or templates.
    - [ ] `vs code` — Changes to the vscode plugin
    - [x] `internal` — Does not affect user-facing stuff
    
    <!-- ❗ Please select a 'Type' label ❗️ -->
    
    - [ ] `bugfix` — Bug fix
    - [ ] `feature` — New feature
    - [ ] `improvement` — Improving existing features
    - [ ] `chore` — Updating dependencies, other boring stuff
    - [ ] `galaxy brain` — Architectural changes
    - [ ] `tests` — Changes to any test code
    - [x] `tools` — Changes to infrastructure, CI, internal scripts,
    debugging tools, etc.
    - [ ] `dunno` — I don't know
    =
    
    ---------
    
    Co-authored-by: Mime Čuvalo <mimecuvalo@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 19d801de7..88081f052 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -41,6 +41,7 @@ export const debugFlags = {
 	showFps: createDebugValue('showFps', {
 		defaults: { all: false },
 	}),
+	measurePerformance: createDebugValue('measurePerformance', { defaults: { all: false } }),
 	throwToBlob: createDebugValue('throwToBlob', {
 		defaults: { all: false },
 	}),

commit fb0dd1d2fe7d974dfa194264b4c3f196469cba97
Author: alex <alex@dytry.ch>
Date:   Mon Jun 10 14:50:03 2024 +0100

    make sure everything marked @public gets documented (#3892)
    
    Previously, we had the `ae-forgotten-export` rule from api-extractor
    disabled. This rule makes sure that everything that's referred to in the
    public API is actually exported. There are more details on the rule
    [here](https://api-extractor.com/pages/messages/ae-forgotten-export/),
    but not exporting public API entires is bad because they're hard to
    document and can't be typed/called from consumer code. For us, the big
    effect is that they don't appear in our docs at all.
    
    This diff re-enables that rule. Now, if you introduce something new to
    the public API but don't export it, your build will fail.
    
    ### Change Type
    
    - [x] `docs` — Changes to the documentation, examples, or templates.
    - [x] `improvement` — Improving existing features

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 88081f052..f65a108fc 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -97,7 +97,7 @@ function createDebugValue<T>(
 	{
 		defaults,
 		shouldStoreForSession = true,
-	}: { defaults: Defaults<T>; shouldStoreForSession?: boolean }
+	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
 ) {
 	return createDebugValueBase({
 		name,
@@ -188,16 +188,18 @@ function getDefaultValue<T>(def: DebugFlagDef<T>): T {
 	}
 }
 
-interface Defaults<T> {
+/** @internal */
+export interface DebugFlagDefaults<T> {
 	development?: T
 	staging?: T
 	production?: T
 	all: T
 }
 
-interface DebugFlagDef<T> {
+/** @internal */
+export interface DebugFlagDef<T> {
 	name: string
-	defaults: Defaults<T>
+	defaults: DebugFlagDefaults<T>
 	shouldStoreForSession: boolean
 }
 

commit 69a1c17b463991882c49d1496d1efedcfa0a730f
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Thu Jul 11 12:49:18 2024 +0100

    sdk: wires up tldraw to have licensing mechanisms (#4021)
    
    For non-commercial usage of tldraw, this adds a watermark in the corner,
    both for branding purposes and as an incentive for our enterprise
    customers to purchase a license.
    
    For commercial usage of tldraw, you add a license to the `<Tldraw
    licenseKey={YOUR_LICENSE_KEY} />` component so that the watermark
    doesn't show.
    
    The license is a signed key that has various bits of information in it,
    such as:
    - license type
    - hosts that the license is valid for
    - whether it's an internal-only license
    - expiry date
    
    We check the license on load and show a watermark (or throw an error if
    internal-only) if the license is not valid in a production environment.
    
    This is a @MitjaBezensek, @Taha-Hassan-Git, @mimecuvalo joint
    production! 🤜 🤛
    
    ### Change Type
    
    <!-- ❗ Please select a 'Scope' label ❗️ -->
    
    - [x] `sdk` — Changes the tldraw SDK
    - [ ] `dotcom` — Changes the tldraw.com web app
    - [ ] `docs` — Changes to the documentation, examples, or templates.
    - [ ] `vs code` — Changes to the vscode plugin
    - [ ] `internal` — Does not affect user-facing stuff
    
    <!-- ❗ Please select a 'Type' label ❗️ -->
    
    - [ ] `bugfix` — Bug fix
    - [x] `feature` — New feature
    - [ ] `improvement` — Improving existing features
    - [ ] `chore` — Updating dependencies, other boring stuff
    - [ ] `galaxy brain` — Architectural changes
    - [ ] `tests` — Changes to any test code
    - [ ] `tools` — Changes to infrastructure, CI, internal scripts,
    debugging tools, etc.
    - [ ] `dunno` — I don't know
    
    
    ### Test Plan
    
    1. We will be dogfooding on staging.tldraw.com and tldraw.com itself
    before releasing this.
    
    ### Release Notes
    
    - SDK: wires up tldraw to have licensing mechanisms.
    
    ---------
    
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>
    Co-authored-by: Taha <98838967+Taha-Hassan-Git@users.noreply.github.com>
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index f65a108fc..400ce2f7b 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -9,7 +9,9 @@ import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage }
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {
-	// canMoveArrowLabel: createFeatureFlag('canMoveArrowLabel'),
+	enableLicensing: createFeatureFlag('enableLicensing', {
+		defaults: { all: true, production: false },
+	}),
 }
 
 /** @internal */
@@ -106,16 +108,19 @@ function createDebugValue<T>(
 	})
 }
 
-// function createFeatureFlag(
-// 	name: string,
-// 	defaults: Defaults<boolean> = { all: true, production: false }
-// ) {
-// 	return createDebugValueBase({
-// 		name,
-// 		defaults,
-// 		shouldStoreForSession: true,
-// 	})
-// }
+function createFeatureFlag<T>(
+	name: string,
+	{
+		defaults,
+		shouldStoreForSession = true,
+	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
+) {
+	return createDebugValueBase({
+		name,
+		defaults,
+		shouldStoreForSession,
+	})
+}
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit f05d102cd44ec3ab3ac84b51bf8669ef3b825481
Author: Mitja Bezenšek <mitja.bezensek@gmail.com>
Date:   Mon Jul 29 15:40:18 2024 +0200

    Move from function properties to methods (#4288)
    
    Things left to do
    - [x] Update docs (things like the [tools
    page](https://tldraw-docs-fqnvru1os-tldraw.vercel.app/docs/tools),
    possibly more)
    - [x] Write a list of breaking changes and how to upgrade.
    - [x] Do another pass and check if we can update any lines that have
    `@typescript-eslint/method-signature-style` and
    `local/prefer-class-methods` disabled
    - [x] Thinks about what to do with `TLEventHandlers`. Edit: Feels like
    keeping them is the best way to go.
    - [x] Remove `override` keyword where it's not needed. Not sure if it's
    worth the effort. Edit: decided not to spend time here.
    - [ ] What about possible detached / destructured uses?
    
    Fixes https://github.com/tldraw/tldraw/issues/2799
    
    ### Change type
    
    - [ ] `bugfix`
    - [ ] `improvement`
    - [ ] `feature`
    - [x] `api`
    - [ ] `other`
    
    ### Test plan
    
    1. Create a shape...
    2.
    
    - [ ] Unit tests
    - [ ] End to end tests
    
    ### Release notes
    
    - Adds eslint rules for enforcing the use of methods instead of function
    properties and fixes / disables all the resulting errors.
    
    # Breaking changes
    
    This change affects the syntax of how the event handlers for shape tools
    and utils are defined.
    
    ## Shape utils
    **Before**
    ```ts
    export class CustomShapeUtil extends ShapeUtil<CustomShape> {
       // Defining flags
       override canEdit = () => true
    
       // Defining event handlers
       override onResize: TLOnResizeHandler<CustomShape> = (shape, info) => {
          ...
       }
    }
    ```
    
    
    **After**
    ```ts
    export class CustomShapeUtil extends ShapeUtil<CustomShape> {
       // Defining flags
       override canEdit() {
          return true
       }
    
       // Defining event handlers
       override onResize(shape: CustomShape, info: TLResizeInfo<CustomShape>) {
          ...
       }
    }
    ```
    
    ## Tools
    
    **Before**
    ```ts
    export class CustomShapeTool extends StateNode {
       // Defining child states
       static override children = (): TLStateNodeConstructor[] => [Idle, Pointing]
    
       // Defining event handlers
       override onKeyDown: TLEventHandlers['onKeyDown'] = (info) => {
          ...
       }
    }
    ```
    
    
    **After**
    ```ts
    export class CustomShapeTool extends StateNode {
       // Defining child states
       static override children(): TLStateNodeConstructor[] {
          return [Idle, Pointing]
       }
    
       // Defining event handlers
       override onKeyDown(info: TLKeyboardEventInfo) {
          ...
       }
    }
    ```
    
    ---------
    
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 400ce2f7b..0649a754c 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -61,7 +61,7 @@ export const debugFlags = {
 
 declare global {
 	interface Window {
-		tldrawLog: (message: any) => void
+		tldrawLog(message: any): void
 	}
 }
 

commit 9556a517d2ad7f1802413972aa607237c368b2fd
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Fri Sep 13 19:03:24 2024 +0100

    Enable license feature flag. (#4518)
    
    This PR fixes a bug where the license check would not run in production.
    
    ### Change type
    
    - [x] `bugfix`

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 0649a754c..18295424d 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -10,7 +10,7 @@ import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage }
 /** @internal */
 export const featureFlags: Record<string, DebugFlag<boolean>> = {
 	enableLicensing: createFeatureFlag('enableLicensing', {
-		defaults: { all: true, production: false },
+		defaults: { all: true, production: true },
 	}),
 }
 

commit e4424c7bf703b35959e9638c0c853446938f4631
Author: Steve Ruiz <steveruizok@gmail.com>
Date:   Sat Sep 14 06:40:22 2024 +0100

    Remove feature flag. (#4521)
    
    This PR removes the license-related feature flag.
    
    ### Change type
    
    - [x] `bugfix`

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 18295424d..f28e88af6 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -8,11 +8,7 @@ import { deleteFromSessionStorage, getFromSessionStorage, setInSessionStorage }
 // development. Use `createFeatureFlag` to create a boolean flag which will be
 // `true` by default in development and staging, and `false` in production.
 /** @internal */
-export const featureFlags: Record<string, DebugFlag<boolean>> = {
-	enableLicensing: createFeatureFlag('enableLicensing', {
-		defaults: { all: true, production: true },
-	}),
-}
+export const featureFlags: Record<string, DebugFlag<boolean>> = {}
 
 /** @internal */
 export const pointerCaptureTrackingObject = createDebugValue(
@@ -108,19 +104,19 @@ function createDebugValue<T>(
 	})
 }
 
-function createFeatureFlag<T>(
-	name: string,
-	{
-		defaults,
-		shouldStoreForSession = true,
-	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
-) {
-	return createDebugValueBase({
-		name,
-		defaults,
-		shouldStoreForSession,
-	})
-}
+// function createFeatureFlag<T>(
+// 	name: string,
+// 	{
+// 		defaults,
+// 		shouldStoreForSession = true,
+// 	}: { defaults: DebugFlagDefaults<T>; shouldStoreForSession?: boolean }
+// ) {
+// 	return createDebugValueBase({
+// 		name,
+// 		defaults,
+// 		shouldStoreForSession,
+// 	})
+// }
 
 function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 	const defaultValue = getDefaultValue(def)

commit b301aeb64e5ff7bcd55928d7200a39092da8c501
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Wed Oct 23 15:55:42 2024 +0100

    npm: upgrade eslint v8 → v9 (#4757)
    
    As I worked on the i18n PR (https://github.com/tldraw/tldraw/pull/4719)
    I noticed that `react-intl` required a new version of `eslint`. That led
    me down a bit of a rabbit hole of upgrading v8 → v9. There were a couple
    things to upgrade to make this work.
    
    - ran `npx @eslint/migrate-config .eslintrc.js` to upgrade to the new
    `eslint.config.mjs`
    - `.eslintignore` is now deprecated and part of `eslint.config.mjs`
    - some packages are no longer relevant, of note: `eslint-plugin-local`
    and `eslint-plugin-deprecation`
    - the upgrade caught a couple bugs/dead code
    
    ### Change type
    
    - [ ] `bugfix`
    - [x] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Release notes
    
    - Upgrade eslint v8 → v9
    
    ---------
    
    Co-authored-by: alex <alex@dytry.ch>
    Co-authored-by: David Sheldrick <d.j.sheldrick@gmail.com>
    Co-authored-by: Mitja Bezenšek <mitja.bezensek@gmail.com>
    Co-authored-by: Steve Ruiz <steveruizok@gmail.com>

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index f28e88af6..024cebc20 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -154,7 +154,7 @@ function createDebugValueBase<T>(def: DebugFlagDef<T>): DebugFlag<T> {
 function getStoredInitialValue(name: string) {
 	try {
 		return JSON.parse(getFromSessionStorage(`tldraw_debug:${name}`) ?? 'null')
-	} catch (err) {
+	} catch {
 		return null
 	}
 }

commit c4570c603c42eef07ef8d2c506460fab9279e1a9
Author: Mime Čuvalo <mimecuvalo@gmail.com>
Date:   Fri Mar 28 13:25:04 2025 +0000

    a11y: add a live region to announce selected tools (#5634)
    
    Starts improving our voiceover, starting with the toolbar which was
    crap.
    This follows the toasts pattern we have, since this is, in a way, a
    notification of what's happening on the screen, especially when
    selecting something using a hotkey instead of using the mouse pointer.
    
    
    https://github.com/user-attachments/assets/95f7551a-e891-4c5a-bf93-784b86fe618f
    
    related issue https://github.com/tldraw/tldraw/issues/5215
    
    
    ### Change type
    
    - [ ] `bugfix`
    - [x] `improvement`
    - [ ] `feature`
    - [ ] `api`
    - [ ] `other`
    
    ### Release notes
    
    - Adds better voiceover support when selecting an action (a11y)

diff --git a/packages/editor/src/lib/utils/debug-flags.ts b/packages/editor/src/lib/utils/debug-flags.ts
index 024cebc20..fd89e4103 100644
--- a/packages/editor/src/lib/utils/debug-flags.ts
+++ b/packages/editor/src/lib/utils/debug-flags.ts
@@ -53,6 +53,7 @@ export const debugFlags = {
 	debugGeometry: createDebugValue('debugGeometry', { defaults: { all: false } }),
 	hideShapes: createDebugValue('hideShapes', { defaults: { all: false } }),
 	editOnType: createDebugValue('editOnType', { defaults: { all: false } }),
+	a11y: createDebugValue('a11y', { defaults: { all: false } }),
 } as const
 
 declare global {

